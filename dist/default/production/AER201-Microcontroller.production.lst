

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 14:06:34 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  004742                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3223
   150  004742  4D                 	db	77
   151  004743  4D                 	db	77
   152  004744  4D                 	db	77
   153  004745  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3214
   156  004746  4D                 	db	77
   157  004747  4D                 	db	77
   158  004748  4D                 	db	77
   159  004749  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB14                     __pmediumconst:
   163                           	opt stack 0
   164  00FB14  00                 	db	0
   165  00FB15                     _keys:
   166                           	opt stack 0
   167  00FB15  31                 	db	49
   168  00FB16  32                 	db	50
   169  00FB17  33                 	db	51
   170  00FB18  41                 	db	65
   171  00FB19  34                 	db	52
   172  00FB1A  35                 	db	53
   173  00FB1B  36                 	db	54
   174  00FB1C  42                 	db	66
   175  00FB1D  37                 	db	55
   176  00FB1E  38                 	db	56
   177  00FB1F  39                 	db	57
   178  00FB20  43                 	db	67
   179  00FB21  2A                 	db	42
   180  00FB22  30                 	db	48
   181  00FB23  23                 	db	35
   182  00FB24  44                 	db	68
   183  00FB25  00                 	db	0
   184  00FB26                     __end_of_keys:
   185                           	opt stack 0
   186  00FB26                     _dpowers:
   187                           	opt stack 0
   188  00FB26  0001               	dw	1
   189  00FB28  000A               	dw	10
   190  00FB2A  0064               	dw	100
   191  00FB2C  03E8               	dw	1000
   192  00FB2E  2710               	dw	10000
   193  00FB30                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB30                     STR_21:
   267  00FB30  25                 	db	37
   268  00FB31  30                 	db	48	;'0'
   269  00FB32  32                 	db	50	;'2'
   270  00FB33  64                 	db	100	;'d'
   271  00FB34  25                 	db	37
   272  00FB35  73                 	db	115	;'s'
   273  00FB36  20                 	db	32
   274  00FB37  7C                 	db	124
   275  00FB38  20                 	db	32
   276  00FB39  25                 	db	37
   277  00FB3A  30                 	db	48	;'0'
   278  00FB3B  32                 	db	50	;'2'
   279  00FB3C  64                 	db	100	;'d'
   280  00FB3D  3A                 	db	58	;':'
   281  00FB3E  25                 	db	37
   282  00FB3F  30                 	db	48	;'0'
   283  00FB40  32                 	db	50	;'2'
   284  00FB41  64                 	db	100	;'d'
   285  00FB42  3A                 	db	58	;':'
   286  00FB43  25                 	db	37
   287  00FB44  30                 	db	48	;'0'
   288  00FB45  32                 	db	50	;'2'
   289  00FB46  64                 	db	100	;'d'
   290  00FB47  00                 	db	0
   291  00FB48                     STR_66:
   292  00FB48  28                 	db	40
   293  00FB49  64                 	db	100	;'d'
   294  00FB4A  61                 	db	97	;'a'
   295  00FB4B  74                 	db	116	;'t'
   296  00FB4C  61                 	db	97	;'a'
   297  00FB4D  3A                 	db	58	;':'
   298  00FB4E  20                 	db	32
   299  00FB4F  25                 	db	37
   300  00FB50  75                 	db	117	;'u'
   301  00FB51  2C                 	db	44
   302  00FB52  20                 	db	32
   303  00FB53  61                 	db	97	;'a'
   304  00FB54  64                 	db	100	;'d'
   305  00FB55  64                 	db	100	;'d'
   306  00FB56  72                 	db	114	;'r'
   307  00FB57  3A                 	db	58	;':'
   308  00FB58  20                 	db	32
   309  00FB59  25                 	db	37
   310  00FB5A  75                 	db	117	;'u'
   311  00FB5B  29                 	db	41
   312  00FB5C  00                 	db	0
   313  00FB5D                     STR_27:
   314  00FB5D  4E                 	db	78	;'N'
   315  00FB5E  4F                 	db	79	;'O'
   316  00FB5F  20                 	db	32
   317  00FB60  4C                 	db	76	;'L'
   318  00FB61  41                 	db	65	;'A'
   319  00FB62  42                 	db	66	;'B'
   320  00FB63  3A                 	db	58	;':'
   321  00FB64  20                 	db	32
   322  00FB65  25                 	db	37
   323  00FB66  64                 	db	100	;'d'
   324  00FB67  7C                 	db	124
   325  00FB68  4C                 	db	76	;'L'
   326  00FB69  41                 	db	65	;'A'
   327  00FB6A  42                 	db	66	;'B'
   328  00FB6B  3A                 	db	58	;':'
   329  00FB6C  20                 	db	32
   330  00FB6D  25                 	db	37
   331  00FB6E  64                 	db	100	;'d'
   332  00FB6F  00                 	db	0
   333  00FB70                     STR_25:
   334  00FB70  4E                 	db	78	;'N'
   335  00FB71  4F                 	db	79	;'O'
   336  00FB72  20                 	db	32
   337  00FB73  54                 	db	84	;'T'
   338  00FB74  41                 	db	65	;'A'
   339  00FB75  42                 	db	66	;'B'
   340  00FB76  3A                 	db	58	;':'
   341  00FB77  20                 	db	32
   342  00FB78  25                 	db	37
   343  00FB79  64                 	db	100	;'d'
   344  00FB7A  7C                 	db	124
   345  00FB7B  54                 	db	84	;'T'
   346  00FB7C  41                 	db	65	;'A'
   347  00FB7D  42                 	db	66	;'B'
   348  00FB7E  3A                 	db	58	;':'
   349  00FB7F  20                 	db	32
   350  00FB80  25                 	db	37
   351  00FB81  64                 	db	100	;'d'
   352  00FB82  00                 	db	0
   353  00FB83                     STR_109:
   354  00FB83  44                 	db	68	;'D'
   355  00FB84  20                 	db	32
   356  00FB85  57                 	db	87	;'W'
   357  00FB86  49                 	db	73	;'I'
   358  00FB87  4C                 	db	76	;'L'
   359  00FB88  4C                 	db	76	;'L'
   360  00FB89  20                 	db	32
   361  00FB8A  52                 	db	82	;'R'
   362  00FB8B  45                 	db	69	;'E'
   363  00FB8C  54                 	db	84	;'T'
   364  00FB8D  55                 	db	85	;'U'
   365  00FB8E  52                 	db	82	;'R'
   366  00FB8F  4E                 	db	78	;'N'
   367  00FB90  20                 	db	32
   368  00FB91  20                 	db	32
   369  00FB92  20                 	db	32
   370  00FB93  20                 	db	32
   371  00FB94  00                 	db	0
   372  00FB95                     STR_110:
   373  00FB95  4F                 	db	79	;'O'
   374  00FB96  54                 	db	84	;'T'
   375  00FB97  48                 	db	72	;'H'
   376  00FB98  45                 	db	69	;'E'
   377  00FB99  52                 	db	82	;'R'
   378  00FB9A  20                 	db	32
   379  00FB9B  53                 	db	83	;'S'
   380  00FB9C  45                 	db	69	;'E'
   381  00FB9D  54                 	db	84	;'T'
   382  00FB9E  53                 	db	83	;'S'
   383  00FB9F  20                 	db	32
   384  00FBA0  52                 	db	82	;'R'
   385  00FBA1  41                 	db	65	;'A'
   386  00FBA2  35                 	db	53	;'5'
   387  00FBA3  20                 	db	32
   388  00FBA4  20                 	db	32
   389  00FBA5  20                 	db	32
   390  00FBA6  00                 	db	0
   391  00FBA7                     STR_3:
   392  00FBA7  2D                 	db	45
   393  00FBA8  2D                 	db	45
   394  00FBA9  20                 	db	32
   395  00FBAA  4C                 	db	76	;'L'
   396  00FBAB  4F                 	db	79	;'O'
   397  00FBAC  47                 	db	71	;'G'
   398  00FBAD  20                 	db	32
   399  00FBAE  25                 	db	37
   400  00FBAF  32                 	db	50	;'2'
   401  00FBB0  64                 	db	100	;'d'
   402  00FBB1  20                 	db	32
   403  00FBB2  48                 	db	72	;'H'
   404  00FBB3  45                 	db	69	;'E'
   405  00FBB4  52                 	db	82	;'R'
   406  00FBB5  45                 	db	69	;'E'
   407  00FBB6  2D                 	db	45
   408  00FBB7  2D                 	db	45
   409  00FBB8  00                 	db	0
   410  00FBB9                     STR_1:
   411  00FBB9  52                 	db	82	;'R'
   412  00FBBA  45                 	db	69	;'E'
   413  00FBBB  53                 	db	83	;'S'
   414  00FBBC  55                 	db	85	;'U'
   415  00FBBD  4C                 	db	76	;'L'
   416  00FBBE  54                 	db	84	;'T'
   417  00FBBF  53                 	db	83	;'S'
   418  00FBC0  20                 	db	32
   419  00FBC1  49                 	db	73	;'I'
   420  00FBC2  4E                 	db	78	;'N'
   421  00FBC3  20                 	db	32
   422  00FBC4  4C                 	db	76	;'L'
   423  00FBC5  4F                 	db	79	;'O'
   424  00FBC6  47                 	db	71	;'G'
   425  00FBC7  20                 	db	32
   426  00FBC8  25                 	db	37
   427  00FBC9  64                 	db	100	;'d'
   428  00FBCA  00                 	db	0
   429  00FBCB                     STR_100:
   430  00FBCB  4D                 	db	77	;'M'
   431  00FBCC  49                 	db	73	;'I'
   432  00FBCD  44                 	db	68	;'D'
   433  00FBCE  20                 	db	32
   434  00FBCF  2D                 	db	45
   435  00FBD0  2D                 	db	45
   436  00FBD1  20                 	db	32
   437  00FBD2  32                 	db	50	;'2'
   438  00FBD3  73                 	db	115	;'s'
   439  00FBD4  20                 	db	32
   440  00FBD5  20                 	db	32
   441  00FBD6  20                 	db	32
   442  00FBD7  20                 	db	32
   443  00FBD8  20                 	db	32
   444  00FBD9  20                 	db	32
   445  00FBDA  20                 	db	32
   446  00FBDB  00                 	db	0
   447  00FBDC                     STR_103:
   448  00FBDC  44                 	db	68	;'D'
   449  00FBDD  52                 	db	82	;'R'
   450  00FBDE  4F                 	db	79	;'O'
   451  00FBDF  50                 	db	80	;'P'
   452  00FBE0  20                 	db	32
   453  00FBE1  2D                 	db	45
   454  00FBE2  2D                 	db	45
   455  00FBE3  20                 	db	32
   456  00FBE4  32                 	db	50	;'2'
   457  00FBE5  73                 	db	115	;'s'
   458  00FBE6  20                 	db	32
   459  00FBE7  20                 	db	32
   460  00FBE8  20                 	db	32
   461  00FBE9  20                 	db	32
   462  00FBEA  20                 	db	32
   463  00FBEB  20                 	db	32
   464  00FBEC  00                 	db	0
   465  00FBED                     STR_97:
   466  00FBED  4C                 	db	76	;'L'
   467  00FBEE  45                 	db	69	;'E'
   468  00FBEF  46                 	db	70	;'F'
   469  00FBF0  54                 	db	84	;'T'
   470  00FBF1  20                 	db	32
   471  00FBF2  2D                 	db	45
   472  00FBF3  2D                 	db	45
   473  00FBF4  20                 	db	32
   474  00FBF5  32                 	db	50	;'2'
   475  00FBF6  73                 	db	115	;'s'
   476  00FBF7  20                 	db	32
   477  00FBF8  20                 	db	32
   478  00FBF9  20                 	db	32
   479  00FBFA  20                 	db	32
   480  00FBFB  20                 	db	32
   481  00FBFC  20                 	db	32
   482  00FBFD  00                 	db	0
   483  00FBFE                     STR_102:
   484  00FBFE  4C                 	db	76	;'L'
   485  00FBFF  45                 	db	69	;'E'
   486  00FC00  56                 	db	86	;'V'
   487  00FC01  45                 	db	69	;'E'
   488  00FC02  4C                 	db	76	;'L'
   489  00FC03  20                 	db	32
   490  00FC04  2D                 	db	45
   491  00FC05  2D                 	db	45
   492  00FC06  20                 	db	32
   493  00FC07  32                 	db	50	;'2'
   494  00FC08  73                 	db	115	;'s'
   495  00FC09  20                 	db	32
   496  00FC0A  20                 	db	32
   497  00FC0B  20                 	db	32
   498  00FC0C  20                 	db	32
   499  00FC0D  20                 	db	32
   500  00FC0E  00                 	db	0
   501  00FC0F                     STR_96:
   502  00FC0F  52                 	db	82	;'R'
   503  00FC10  49                 	db	73	;'I'
   504  00FC11  47                 	db	71	;'G'
   505  00FC12  48                 	db	72	;'H'
   506  00FC13  54                 	db	84	;'T'
   507  00FC14  20                 	db	32
   508  00FC15  2D                 	db	45
   509  00FC16  2D                 	db	45
   510  00FC17  20                 	db	32
   511  00FC18  32                 	db	50	;'2'
   512  00FC19  73                 	db	115	;'s'
   513  00FC1A  20                 	db	32
   514  00FC1B  20                 	db	32
   515  00FC1C  20                 	db	32
   516  00FC1D  20                 	db	32
   517  00FC1E  20                 	db	32
   518  00FC1F  00                 	db	0
   519  00FC20                     STR_95:
   520  00FC20  4D                 	db	77	;'M'
   521  00FC21  49                 	db	73	;'I'
   522  00FC22  44                 	db	68	;'D'
   523  00FC23  44                 	db	68	;'D'
   524  00FC24  4C                 	db	76	;'L'
   525  00FC25  45                 	db	69	;'E'
   526  00FC26  20                 	db	32
   527  00FC27  2D                 	db	45
   528  00FC28  2D                 	db	45
   529  00FC29  20                 	db	32
   530  00FC2A  32                 	db	50	;'2'
   531  00FC2B  73                 	db	115	;'s'
   532  00FC2C  20                 	db	32
   533  00FC2D  20                 	db	32
   534  00FC2E  20                 	db	32
   535  00FC2F  20                 	db	32
   536  00FC30  00                 	db	0
   537  00FC31                     STR_113:
   538  00FC31  44                 	db	68	;'D'
   539  00FC32  20                 	db	32
   540  00FC33  57                 	db	87	;'W'
   541  00FC34  49                 	db	73	;'I'
   542  00FC35  4C                 	db	76	;'L'
   543  00FC36  4C                 	db	76	;'L'
   544  00FC37  20                 	db	32
   545  00FC38  52                 	db	82	;'R'
   546  00FC39  45                 	db	69	;'E'
   547  00FC3A  54                 	db	84	;'T'
   548  00FC3B  55                 	db	85	;'U'
   549  00FC3C  52                 	db	82	;'R'
   550  00FC3D  4E                 	db	78	;'N'
   551  00FC3E  20                 	db	32
   552  00FC3F  20                 	db	32
   553  00FC40  20                 	db	32
   554  00FC41  00                 	db	0
   555  00FC42                     STR_98:
   556  00FC42  4D                 	db	77	;'M'
   557  00FC43  49                 	db	73	;'I'
   558  00FC44  44                 	db	68	;'D'
   559  00FC45  2D                 	db	45
   560  00FC46  4C                 	db	76	;'L'
   561  00FC47  45                 	db	69	;'E'
   562  00FC48  46                 	db	70	;'F'
   563  00FC49  54                 	db	84	;'T'
   564  00FC4A  20                 	db	32
   565  00FC4B  2D                 	db	45
   566  00FC4C  2D                 	db	45
   567  00FC4D  20                 	db	32
   568  00FC4E  32                 	db	50	;'2'
   569  00FC4F  73                 	db	115	;'s'
   570  00FC50  20                 	db	32
   571  00FC51  20                 	db	32
   572  00FC52  00                 	db	0
   573  00FC53                     STR_99:
   574  00FC53  4D                 	db	77	;'M'
   575  00FC54  49                 	db	73	;'I'
   576  00FC55  44                 	db	68	;'D'
   577  00FC56  2D                 	db	45
   578  00FC57  52                 	db	82	;'R'
   579  00FC58  49                 	db	73	;'I'
   580  00FC59  47                 	db	71	;'G'
   581  00FC5A  48                 	db	72	;'H'
   582  00FC5B  54                 	db	84	;'T'
   583  00FC5C  20                 	db	32
   584  00FC5D  2D                 	db	45
   585  00FC5E  2D                 	db	45
   586  00FC5F  20                 	db	32
   587  00FC60  32                 	db	50	;'2'
   588  00FC61  73                 	db	115	;'s'
   589  00FC62  20                 	db	32
   590  00FC63  00                 	db	0
   591  00FC64                     STR_114:
   592  00FC64  45                 	db	69	;'E'
   593  00FC65  4C                 	db	76	;'L'
   594  00FC66  53                 	db	83	;'S'
   595  00FC67  45                 	db	69	;'E'
   596  00FC68  20                 	db	32
   597  00FC69  54                 	db	84	;'T'
   598  00FC6A  4F                 	db	79	;'O'
   599  00FC6B  47                 	db	71	;'G'
   600  00FC6C  47                 	db	71	;'G'
   601  00FC6D  4C                 	db	76	;'L'
   602  00FC6E  45                 	db	69	;'E'
   603  00FC6F  53                 	db	83	;'S'
   604  00FC70  20                 	db	32
   605  00FC71  52                 	db	82	;'R'
   606  00FC72  41                 	db	65	;'A'
   607  00FC73  35                 	db	53	;'5'
   608  00FC74  00                 	db	0
   609  00FC75                     STR_72:
   610  00FC75  41                 	db	65	;'A'
   611  00FC76  4C                 	db	76	;'L'
   612  00FC77  47                 	db	71	;'G'
   613  00FC78  31                 	db	49	;'1'
   614  00FC79  3A                 	db	58	;':'
   615  00FC7A  20                 	db	32
   616  00FC7B  39                 	db	57	;'9'
   617  00FC7C  20                 	db	32
   618  00FC7D  50                 	db	80	;'P'
   619  00FC7E  4F                 	db	79	;'O'
   620  00FC7F  50                 	db	80	;'P'
   621  00FC80  4E                 	db	78	;'N'
   622  00FC81  4F                 	db	79	;'O'
   623  00FC82  54                 	db	84	;'T'
   624  00FC83  41                 	db	65	;'A'
   625  00FC84  42                 	db	66	;'B'
   626  00FC85  00                 	db	0
   627  00FC86                     STR_68:
   628  00FC86  31                 	db	49	;'1'
   629  00FC87  2E                 	db	46
   630  00FC88  41                 	db	65	;'A'
   631  00FC89  4C                 	db	76	;'L'
   632  00FC8A  47                 	db	71	;'G'
   633  00FC8B  7C                 	db	124
   634  00FC8C  32                 	db	50	;'2'
   635  00FC8D  2E                 	db	46
   636  00FC8E  53                 	db	83	;'S'
   637  00FC8F  4E                 	db	78	;'N'
   638  00FC90  52                 	db	82	;'R'
   639  00FC91  7C                 	db	124
   640  00FC92  33                 	db	51	;'3'
   641  00FC93  2E                 	db	46
   642  00FC94  41                 	db	65	;'A'
   643  00FC95  43                 	db	67	;'C'
   644  00FC96  00                 	db	0
   645  00FC97                     STR_90:
   646  00FC97  54                 	db	84	;'T'
   647  00FC98  53                 	db	83	;'S'
   648  00FC99  54                 	db	84	;'T'
   649  00FC9A  3A                 	db	58	;':'
   650  00FC9B  20                 	db	32
   651  00FC9C  43                 	db	67	;'C'
   652  00FC9D  4F                 	db	79	;'O'
   653  00FC9E  4E                 	db	78	;'N'
   654  00FC9F  44                 	db	68	;'D'
   655  00FCA0  20                 	db	32
   656  00FCA1  53                 	db	83	;'S'
   657  00FCA2  4F                 	db	79	;'O'
   658  00FCA3  4C                 	db	76	;'L'
   659  00FCA4  4E                 	db	78	;'N'
   660  00FCA5  27                 	db	39
   661  00FCA6  44                 	db	68	;'D'
   662  00FCA7  00                 	db	0
   663  00FCA8                     STR_92:
   664  00FCA8  54                 	db	84	;'T'
   665  00FCA9  53                 	db	83	;'S'
   666  00FCAA  54                 	db	84	;'T'
   667  00FCAB  3A                 	db	58	;':'
   668  00FCAC  20                 	db	32
   669  00FCAD  50                 	db	80	;'P'
   670  00FCAE  55                 	db	85	;'U'
   671  00FCAF  53                 	db	83	;'S'
   672  00FCB0  48                 	db	72	;'H'
   673  00FCB1  20                 	db	32
   674  00FCB2  53                 	db	83	;'S'
   675  00FCB3  4F                 	db	79	;'O'
   676  00FCB4  4C                 	db	76	;'L'
   677  00FCB5  4E                 	db	78	;'N'
   678  00FCB6  27                 	db	39
   679  00FCB7  44                 	db	68	;'D'
   680  00FCB8  00                 	db	0
   681  00FCB9                     STR_69:
   682  00FCB9  34                 	db	52	;'4'
   683  00FCBA  2E                 	db	46
   684  00FCBB  48                 	db	72	;'H'
   685  00FCBC  49                 	db	73	;'I'
   686  00FCBD  7C                 	db	124
   687  00FCBE  35                 	db	53	;'5'
   688  00FCBF  2E                 	db	46
   689  00FCC0  54                 	db	84	;'T'
   690  00FCC1  4F                 	db	79	;'O'
   691  00FCC2  47                 	db	71	;'G'
   692  00FCC3  7C                 	db	124
   693  00FCC4  36                 	db	54	;'6'
   694  00FCC5  2E                 	db	46
   695  00FCC6  45                 	db	69	;'E'
   696  00FCC7  45                 	db	69	;'E'
   697  00FCC8  50                 	db	80	;'P'
   698  00FCC9  00                 	db	0
   699  00FCCA                     STR_108:
   700  00FCCA  54                 	db	84	;'T'
   701  00FCCB  53                 	db	83	;'S'
   702  00FCCC  54                 	db	84	;'T'
   703  00FCCD  3A                 	db	58	;':'
   704  00FCCE  20                 	db	32
   705  00FCCF  42                 	db	66	;'B'
   706  00FCD0  4F                 	db	79	;'O'
   707  00FCD1  54                 	db	84	;'T'
   708  00FCD2  48                 	db	72	;'H'
   709  00FCD3  20                 	db	32
   710  00FCD4  53                 	db	83	;'S'
   711  00FCD5  45                 	db	69	;'E'
   712  00FCD6  52                 	db	82	;'R'
   713  00FCD7  56                 	db	86	;'V'
   714  00FCD8  4F                 	db	79	;'O'
   715  00FCD9  53                 	db	83	;'S'
   716  00FCDA  00                 	db	0
   717  00FCDB                     STR_41:
   718  00FCDB  4C                 	db	76	;'L'
   719  00FCDC  4F                 	db	79	;'O'
   720  00FCDD  47                 	db	71	;'G'
   721  00FCDE  20                 	db	32
   722  00FCDF  31                 	db	49	;'1'
   723  00FCE0  20                 	db	32
   724  00FCE1  20                 	db	32
   725  00FCE2  20                 	db	32
   726  00FCE3  20                 	db	32
   727  00FCE4  20                 	db	32
   728  00FCE5  20                 	db	32
   729  00FCE6  20                 	db	32
   730  00FCE7  20                 	db	32
   731  00FCE8  20                 	db	32
   732  00FCE9  20                 	db	32
   733  00FCEA  20                 	db	32
   734  00FCEB  00                 	db	0
   735  00FCEC                     STR_40:
   736  00FCEC  4C                 	db	76	;'L'
   737  00FCED  4F                 	db	79	;'O'
   738  00FCEE  47                 	db	71	;'G'
   739  00FCEF  20                 	db	32
   740  00FCF0  32                 	db	50	;'2'
   741  00FCF1  20                 	db	32
   742  00FCF2  20                 	db	32
   743  00FCF3  20                 	db	32
   744  00FCF4  20                 	db	32
   745  00FCF5  20                 	db	32
   746  00FCF6  20                 	db	32
   747  00FCF7  20                 	db	32
   748  00FCF8  20                 	db	32
   749  00FCF9  20                 	db	32
   750  00FCFA  20                 	db	32
   751  00FCFB  20                 	db	32
   752  00FCFC  00                 	db	0
   753  00FCFD                     STR_44:
   754  00FCFD  4C                 	db	76	;'L'
   755  00FCFE  4F                 	db	79	;'O'
   756  00FCFF  47                 	db	71	;'G'
   757  00FD00  20                 	db	32
   758  00FD01  33                 	db	51	;'3'
   759  00FD02  20                 	db	32
   760  00FD03  20                 	db	32
   761  00FD04  20                 	db	32
   762  00FD05  20                 	db	32
   763  00FD06  20                 	db	32
   764  00FD07  20                 	db	32
   765  00FD08  20                 	db	32
   766  00FD09  20                 	db	32
   767  00FD0A  20                 	db	32
   768  00FD0B  20                 	db	32
   769  00FD0C  20                 	db	32
   770  00FD0D  00                 	db	0
   771  00FD0E                     STR_48:
   772  00FD0E  4C                 	db	76	;'L'
   773  00FD0F  4F                 	db	79	;'O'
   774  00FD10  47                 	db	71	;'G'
   775  00FD11  20                 	db	32
   776  00FD12  34                 	db	52	;'4'
   777  00FD13  20                 	db	32
   778  00FD14  20                 	db	32
   779  00FD15  20                 	db	32
   780  00FD16  20                 	db	32
   781  00FD17  20                 	db	32
   782  00FD18  20                 	db	32
   783  00FD19  20                 	db	32
   784  00FD1A  20                 	db	32
   785  00FD1B  20                 	db	32
   786  00FD1C  20                 	db	32
   787  00FD1D  20                 	db	32
   788  00FD1E  00                 	db	0
   789  00FD1F                     STR_36:
   790  00FD1F  33                 	db	51	;'3'
   791  00FD20  2E                 	db	46
   792  00FD21  20                 	db	32
   793  00FD22  4C                 	db	76	;'L'
   794  00FD23  4F                 	db	79	;'O'
   795  00FD24  47                 	db	71	;'G'
   796  00FD25  53                 	db	83	;'S'
   797  00FD26  20                 	db	32
   798  00FD27  20                 	db	32
   799  00FD28  20                 	db	32
   800  00FD29  20                 	db	32
   801  00FD2A  20                 	db	32
   802  00FD2B  20                 	db	32
   803  00FD2C  20                 	db	32
   804  00FD2D  20                 	db	32
   805  00FD2E  20                 	db	32
   806  00FD2F  00                 	db	0
   807  00FD30                     STR_32:
   808  00FD30  32                 	db	50	;'2'
   809  00FD31  2E                 	db	46
   810  00FD32  20                 	db	32
   811  00FD33  53                 	db	83	;'S'
   812  00FD34  4F                 	db	79	;'O'
   813  00FD35  52                 	db	82	;'R'
   814  00FD36  54                 	db	84	;'T'
   815  00FD37  20                 	db	32
   816  00FD38  20                 	db	32
   817  00FD39  20                 	db	32
   818  00FD3A  20                 	db	32
   819  00FD3B  20                 	db	32
   820  00FD3C  20                 	db	32
   821  00FD3D  20                 	db	32
   822  00FD3E  20                 	db	32
   823  00FD3F  20                 	db	32
   824  00FD40  00                 	db	0
   825  00FD41                     STR_33:
   826  00FD41  31                 	db	49	;'1'
   827  00FD42  2E                 	db	46
   828  00FD43  20                 	db	32
   829  00FD44  44                 	db	68	;'D'
   830  00FD45  41                 	db	65	;'A'
   831  00FD46  54                 	db	84	;'T'
   832  00FD47  45                 	db	69	;'E'
   833  00FD48  2F                 	db	47
   834  00FD49  54                 	db	84	;'T'
   835  00FD4A  49                 	db	73	;'I'
   836  00FD4B  4D                 	db	77	;'M'
   837  00FD4C  45                 	db	69	;'E'
   838  00FD4D  20                 	db	32
   839  00FD4E  20                 	db	32
   840  00FD4F  20                 	db	32
   841  00FD50  20                 	db	32
   842  00FD51  00                 	db	0
   843  00FD52                     STR_24:
   844  00FD52  20                 	db	32
   845  00FD53  2D                 	db	45
   846  00FD54  2D                 	db	45
   847  00FD55  20                 	db	32
   848  00FD56  50                 	db	80	;'P'
   849  00FD57  4F                 	db	79	;'O'
   850  00FD58  50                 	db	80	;'P'
   851  00FD59  20                 	db	32
   852  00FD5A  20                 	db	32
   853  00FD5B  43                 	db	67	;'C'
   854  00FD5C  41                 	db	65	;'A'
   855  00FD5D  4E                 	db	78	;'N'
   856  00FD5E  20                 	db	32
   857  00FD5F  2D                 	db	45
   858  00FD60  2D                 	db	45
   859  00FD61  20                 	db	32
   860  00FD62  00                 	db	0
   861  00FD63                     STR_26:
   862  00FD63  20                 	db	32
   863  00FD64  2D                 	db	45
   864  00FD65  2D                 	db	45
   865  00FD66  20                 	db	32
   866  00FD67  53                 	db	83	;'S'
   867  00FD68  4F                 	db	79	;'O'
   868  00FD69  55                 	db	85	;'U'
   869  00FD6A  50                 	db	80	;'P'
   870  00FD6B  20                 	db	32
   871  00FD6C  43                 	db	67	;'C'
   872  00FD6D  41                 	db	65	;'A'
   873  00FD6E  4E                 	db	78	;'N'
   874  00FD6F  20                 	db	32
   875  00FD70  2D                 	db	45
   876  00FD71  2D                 	db	45
   877  00FD72  20                 	db	32
   878  00FD73  00                 	db	0
   879  00FD74                     STR_28:
   880  00FD74  2D                 	db	45
   881  00FD75  2D                 	db	45
   882  00FD76  20                 	db	32
   883  00FD77  54                 	db	84	;'T'
   884  00FD78  4F                 	db	79	;'O'
   885  00FD79  54                 	db	84	;'T'
   886  00FD7A  41                 	db	65	;'A'
   887  00FD7B  4C                 	db	76	;'L'
   888  00FD7C  20                 	db	32
   889  00FD7D  43                 	db	67	;'C'
   890  00FD7E  41                 	db	65	;'A'
   891  00FD7F  4E                 	db	78	;'N'
   892  00FD80  53                 	db	83	;'S'
   893  00FD81  20                 	db	32
   894  00FD82  2D                 	db	45
   895  00FD83  2D                 	db	45
   896  00FD84  00                 	db	0
   897  00FD85                     STR_39:
   898  00FD85  4C                 	db	76	;'L'
   899  00FD86  4F                 	db	79	;'O'
   900  00FD87  47                 	db	71	;'G'
   901  00FD88  20                 	db	32
   902  00FD89  31                 	db	49	;'1'
   903  00FD8A  20                 	db	32
   904  00FD8B  20                 	db	32
   905  00FD8C  20                 	db	32
   906  00FD8D  20                 	db	32
   907  00FD8E  20                 	db	32
   908  00FD8F  20                 	db	32
   909  00FD90  20                 	db	32
   910  00FD91  20                 	db	32
   911  00FD92  20                 	db	32
   912  00FD93  20                 	db	32
   913  00FD94  3C                 	db	60	;'<'
   914  00FD95  00                 	db	0
   915  00FD96                     STR_42:
   916  00FD96  4C                 	db	76	;'L'
   917  00FD97  4F                 	db	79	;'O'
   918  00FD98  47                 	db	71	;'G'
   919  00FD99  20                 	db	32
   920  00FD9A  32                 	db	50	;'2'
   921  00FD9B  20                 	db	32
   922  00FD9C  20                 	db	32
   923  00FD9D  20                 	db	32
   924  00FD9E  20                 	db	32
   925  00FD9F  20                 	db	32
   926  00FDA0  20                 	db	32
   927  00FDA1  20                 	db	32
   928  00FDA2  20                 	db	32
   929  00FDA3  20                 	db	32
   930  00FDA4  20                 	db	32
   931  00FDA5  3C                 	db	60	;'<'
   932  00FDA6  00                 	db	0
   933  00FDA7                     STR_46:
   934  00FDA7  4C                 	db	76	;'L'
   935  00FDA8  4F                 	db	79	;'O'
   936  00FDA9  47                 	db	71	;'G'
   937  00FDAA  20                 	db	32
   938  00FDAB  33                 	db	51	;'3'
   939  00FDAC  20                 	db	32
   940  00FDAD  20                 	db	32
   941  00FDAE  20                 	db	32
   942  00FDAF  20                 	db	32
   943  00FDB0  20                 	db	32
   944  00FDB1  20                 	db	32
   945  00FDB2  20                 	db	32
   946  00FDB3  20                 	db	32
   947  00FDB4  20                 	db	32
   948  00FDB5  20                 	db	32
   949  00FDB6  3C                 	db	60	;'<'
   950  00FDB7  00                 	db	0
   951  00FDB8                     STR_50:
   952  00FDB8  4C                 	db	76	;'L'
   953  00FDB9  4F                 	db	79	;'O'
   954  00FDBA  47                 	db	71	;'G'
   955  00FDBB  20                 	db	32
   956  00FDBC  34                 	db	52	;'4'
   957  00FDBD  20                 	db	32
   958  00FDBE  20                 	db	32
   959  00FDBF  20                 	db	32
   960  00FDC0  20                 	db	32
   961  00FDC1  20                 	db	32
   962  00FDC2  20                 	db	32
   963  00FDC3  20                 	db	32
   964  00FDC4  20                 	db	32
   965  00FDC5  20                 	db	32
   966  00FDC6  20                 	db	32
   967  00FDC7  3C                 	db	60	;'<'
   968  00FDC8  00                 	db	0
   969  00FDC9                     STR_38:
   970  00FDC9  33                 	db	51	;'3'
   971  00FDCA  2E                 	db	46
   972  00FDCB  20                 	db	32
   973  00FDCC  4C                 	db	76	;'L'
   974  00FDCD  4F                 	db	79	;'O'
   975  00FDCE  47                 	db	71	;'G'
   976  00FDCF  53                 	db	83	;'S'
   977  00FDD0  20                 	db	32
   978  00FDD1  20                 	db	32
   979  00FDD2  20                 	db	32
   980  00FDD3  20                 	db	32
   981  00FDD4  20                 	db	32
   982  00FDD5  20                 	db	32
   983  00FDD6  20                 	db	32
   984  00FDD7  20                 	db	32
   985  00FDD8  3C                 	db	60	;'<'
   986  00FDD9  00                 	db	0
   987  00FDDA                     STR_34:
   988  00FDDA  32                 	db	50	;'2'
   989  00FDDB  2E                 	db	46
   990  00FDDC  20                 	db	32
   991  00FDDD  53                 	db	83	;'S'
   992  00FDDE  4F                 	db	79	;'O'
   993  00FDDF  52                 	db	82	;'R'
   994  00FDE0  54                 	db	84	;'T'
   995  00FDE1  20                 	db	32
   996  00FDE2  20                 	db	32
   997  00FDE3  20                 	db	32
   998  00FDE4  20                 	db	32
   999  00FDE5  20                 	db	32
  1000  00FDE6  20                 	db	32
  1001  00FDE7  20                 	db	32
  1002  00FDE8  20                 	db	32
  1003  00FDE9  3C                 	db	60	;'<'
  1004  00FDEA  00                 	db	0
  1005  00FDEB                     STR_31:
  1006  00FDEB  31                 	db	49	;'1'
  1007  00FDEC  2E                 	db	46
  1008  00FDED  20                 	db	32
  1009  00FDEE  44                 	db	68	;'D'
  1010  00FDEF  41                 	db	65	;'A'
  1011  00FDF0  54                 	db	84	;'T'
  1012  00FDF1  45                 	db	69	;'E'
  1013  00FDF2  2F                 	db	47
  1014  00FDF3  54                 	db	84	;'T'
  1015  00FDF4  49                 	db	73	;'I'
  1016  00FDF5  4D                 	db	77	;'M'
  1017  00FDF6  45                 	db	69	;'E'
  1018  00FDF7  20                 	db	32
  1019  00FDF8  20                 	db	32
  1020  00FDF9  20                 	db	32
  1021  00FDFA  3C                 	db	60	;'<'
  1022  00FDFB  00                 	db	0
  1023  00FDFC                     STR_6:
  1024  00FDFC  50                 	db	80	;'P'
  1025  00FDFD  41                 	db	65	;'A'
  1026  00FDFE  55                 	db	85	;'U'
  1027  00FDFF  53                 	db	83	;'S'
  1028  00FE00  45                 	db	69	;'E'
  1029  00FE01  20                 	db	32
  1030  00FE02  3C                 	db	60	;'<'
  1031  00FE03  20                 	db	32
  1032  00FE04  7C                 	db	124
  1033  00FE05  20                 	db	32
  1034  00FE06  42                 	db	66	;'B'
  1035  00FE07  41                 	db	65	;'A'
  1036  00FE08  43                 	db	67	;'C'
  1037  00FE09  4B                 	db	75	;'K'
  1038  00FE0A  20                 	db	32
  1039  00FE0B  3E                 	db	62	;'>'
  1040  00FE0C  00                 	db	0
  1041  00FE0D                     STR_30:
  1042  00FE0D  50                 	db	80	;'P'
  1043  00FE0E  55                 	db	85	;'U'
  1044  00FE0F  53                 	db	83	;'S'
  1045  00FE10  48                 	db	72	;'H'
  1046  00FE11  20                 	db	32
  1047  00FE12  54                 	db	84	;'T'
  1048  00FE13  4F                 	db	79	;'O'
  1049  00FE14  20                 	db	32
  1050  00FE15  43                 	db	67	;'C'
  1051  00FE16  4F                 	db	79	;'O'
  1052  00FE17  4E                 	db	78	;'N'
  1053  00FE18  54                 	db	84	;'T'
  1054  00FE19  49                 	db	73	;'I'
  1055  00FE1A  4E                 	db	78	;'N'
  1056  00FE1B  55                 	db	85	;'U'
  1057  00FE1C  45                 	db	69	;'E'
  1058  00FE1D  00                 	db	0
  1059  00FE1E                     STR_83:
  1060  00FE1E  4D                 	db	77	;'M'
  1061  00FE1F  41                 	db	65	;'A'
  1062  00FE20  47                 	db	71	;'G'
  1063  00FE21  5F                 	db	95	;'_'
  1064  00FE22  73                 	db	115	;'s'
  1065  00FE23  69                 	db	105	;'i'
  1066  00FE24  67                 	db	103	;'g'
  1067  00FE25  6E                 	db	110	;'n'
  1068  00FE26  61                 	db	97	;'a'
  1069  00FE27  6C                 	db	108	;'l'
  1070  00FE28  3A                 	db	58	;':'
  1071  00FE29  20                 	db	32
  1072  00FE2A  25                 	db	37
  1073  00FE2B  64                 	db	100	;'d'
  1074  00FE2C  20                 	db	32
  1075  00FE2D  00                 	db	0
  1076  00FE2E                     STR_101:
  1077  00FE2E  54                 	db	84	;'T'
  1078  00FE2F  53                 	db	83	;'S'
  1079  00FE30  54                 	db	84	;'T'
  1080  00FE31  3A                 	db	58	;':'
  1081  00FE32  20                 	db	32
  1082  00FE33  54                 	db	84	;'T'
  1083  00FE34  49                 	db	73	;'I'
  1084  00FE35  4C                 	db	76	;'L'
  1085  00FE36  54                 	db	84	;'T'
  1086  00FE37  20                 	db	32
  1087  00FE38  53                 	db	83	;'S'
  1088  00FE39  45                 	db	69	;'E'
  1089  00FE3A  52                 	db	82	;'R'
  1090  00FE3B  56                 	db	86	;'V'
  1091  00FE3C  4F                 	db	79	;'O'
  1092  00FE3D  00                 	db	0
  1093  00FE3E                     STR_4:
  1094  00FE3E  44                 	db	68	;'D'
  1095  00FE3F  49                 	db	73	;'I'
  1096  00FE40  44                 	db	68	;'D'
  1097  00FE41  4E                 	db	78	;'N'
  1098  00FE42  27                 	db	39
  1099  00FE43  54                 	db	84	;'T'
  1100  00FE44  20                 	db	32
  1101  00FE45  43                 	db	67	;'C'
  1102  00FE46  4F                 	db	79	;'O'
  1103  00FE47  4D                 	db	77	;'M'
  1104  00FE48  50                 	db	80	;'P'
  1105  00FE49  4C                 	db	76	;'L'
  1106  00FE4A  45                 	db	69	;'E'
  1107  00FE4B  54                 	db	84	;'T'
  1108  00FE4C  45                 	db	69	;'E'
  1109  00FE4D  00                 	db	0
  1110  00FE4E                     STR_80:
  1111  00FE4E  49                 	db	73	;'I'
  1112  00FE4F  52                 	db	82	;'R'
  1113  00FE50  5F                 	db	95	;'_'
  1114  00FE51  73                 	db	115	;'s'
  1115  00FE52  69                 	db	105	;'i'
  1116  00FE53  67                 	db	103	;'g'
  1117  00FE54  6E                 	db	110	;'n'
  1118  00FE55  61                 	db	97	;'a'
  1119  00FE56  6C                 	db	108	;'l'
  1120  00FE57  3A                 	db	58	;':'
  1121  00FE58  20                 	db	32
  1122  00FE59  25                 	db	37
  1123  00FE5A  64                 	db	100	;'d'
  1124  00FE5B  20                 	db	32
  1125  00FE5C  00                 	db	0
  1126  00FE5D                     STR_107:
  1127  00FE5D  43                 	db	67	;'C'
  1128  00FE5E  41                 	db	65	;'A'
  1129  00FE5F  4D                 	db	77	;'M'
  1130  00FE60  20                 	db	32
  1131  00FE61  44                 	db	68	;'D'
  1132  00FE62  57                 	db	87	;'W'
  1133  00FE63  4E                 	db	78	;'N'
  1134  00FE64  20                 	db	32
  1135  00FE65  7C                 	db	124
  1136  00FE66  52                 	db	82	;'R'
  1137  00FE67  43                 	db	67	;'C'
  1138  00FE68  30                 	db	48	;'0'
  1139  00FE69  3D                 	db	61	;'='
  1140  00FE6A  30                 	db	48	;'0'
  1141  00FE6B  00                 	db	0
  1142  00FE6C                     STR_106:
  1143  00FE6C  43                 	db	67	;'C'
  1144  00FE6D  41                 	db	65	;'A'
  1145  00FE6E  4D                 	db	77	;'M'
  1146  00FE6F  20                 	db	32
  1147  00FE70  55                 	db	85	;'U'
  1148  00FE71  50                 	db	80	;'P'
  1149  00FE72  20                 	db	32
  1150  00FE73  20                 	db	32
  1151  00FE74  7C                 	db	124
  1152  00FE75  52                 	db	82	;'R'
  1153  00FE76  43                 	db	67	;'C'
  1154  00FE77  30                 	db	48	;'0'
  1155  00FE78  3D                 	db	61	;'='
  1156  00FE79  31                 	db	49	;'1'
  1157  00FE7A  00                 	db	0
  1158  00FE7B                     STR_82:
  1159  00FE7B  54                 	db	84	;'T'
  1160  00FE7C  53                 	db	83	;'S'
  1161  00FE7D  54                 	db	84	;'T'
  1162  00FE7E  3A                 	db	58	;':'
  1163  00FE7F  20                 	db	32
  1164  00FE80  4D                 	db	77	;'M'
  1165  00FE81  41                 	db	65	;'A'
  1166  00FE82  47                 	db	71	;'G'
  1167  00FE83  4E                 	db	78	;'N'
  1168  00FE84  45                 	db	69	;'E'
  1169  00FE85  54                 	db	84	;'T'
  1170  00FE86  49                 	db	73	;'I'
  1171  00FE87  53                 	db	83	;'S'
  1172  00FE88  4D                 	db	77	;'M'
  1173  00FE89  00                 	db	0
  1174  00FE8A                     STR_105:
  1175  00FE8A  54                 	db	84	;'T'
  1176  00FE8B  53                 	db	83	;'S'
  1177  00FE8C  54                 	db	84	;'T'
  1178  00FE8D  3A                 	db	58	;':'
  1179  00FE8E  20                 	db	32
  1180  00FE8F  43                 	db	67	;'C'
  1181  00FE90  41                 	db	65	;'A'
  1182  00FE91  4D                 	db	77	;'M'
  1183  00FE92  20                 	db	32
  1184  00FE93  53                 	db	83	;'S'
  1185  00FE94  45                 	db	69	;'E'
  1186  00FE95  52                 	db	82	;'R'
  1187  00FE96  56                 	db	86	;'V'
  1188  00FE97  4F                 	db	79	;'O'
  1189  00FE98  00                 	db	0
  1190  00FE99                     STR_94:
  1191  00FE99  54                 	db	84	;'T'
  1192  00FE9A  53                 	db	83	;'S'
  1193  00FE9B  54                 	db	84	;'T'
  1194  00FE9C  3A                 	db	58	;':'
  1195  00FE9D  20                 	db	32
  1196  00FE9E  50                 	db	80	;'P'
  1197  00FE9F  41                 	db	65	;'A'
  1198  00FEA0  4E                 	db	78	;'N'
  1199  00FEA1  20                 	db	32
  1200  00FEA2  53                 	db	83	;'S'
  1201  00FEA3  45                 	db	69	;'E'
  1202  00FEA4  52                 	db	82	;'R'
  1203  00FEA5  56                 	db	86	;'V'
  1204  00FEA6  4F                 	db	79	;'O'
  1205  00FEA7  00                 	db	0
  1206  00FEA8                     STR_75:
  1207  00FEA8  41                 	db	65	;'A'
  1208  00FEA9  4C                 	db	76	;'L'
  1209  00FEAA  47                 	db	71	;'G'
  1210  00FEAB  34                 	db	52	;'4'
  1211  00FEAC  3A                 	db	58	;':'
  1212  00FEAD  20                 	db	32
  1213  00FEAE  41                 	db	65	;'A'
  1214  00FEAF  4C                 	db	76	;'L'
  1215  00FEB0  4C                 	db	76	;'L'
  1216  00FEB1  20                 	db	32
  1217  00FEB2  43                 	db	67	;'C'
  1218  00FEB3  41                 	db	65	;'A'
  1219  00FEB4  4E                 	db	78	;'N'
  1220  00FEB5  53                 	db	83	;'S'
  1221  00FEB6  00                 	db	0
  1222  00FEB7                     STR_88:
  1223  00FEB7  54                 	db	84	;'T'
  1224  00FEB8  53                 	db	83	;'S'
  1225  00FEB9  54                 	db	84	;'T'
  1226  00FEBA  3A                 	db	58	;':'
  1227  00FEBB  20                 	db	32
  1228  00FEBC  44                 	db	68	;'D'
  1229  00FEBD  43                 	db	67	;'C'
  1230  00FEBE  20                 	db	32
  1231  00FEBF  4D                 	db	77	;'M'
  1232  00FEC0  4F                 	db	79	;'O'
  1233  00FEC1  54                 	db	84	;'T'
  1234  00FEC2  4F                 	db	79	;'O'
  1235  00FEC3  52                 	db	82	;'R'
  1236  00FEC4  53                 	db	83	;'S'
  1237  00FEC5  00                 	db	0
  1238  00FEC6                     STR_70:
  1239  00FEC6  41                 	db	65	;'A'
  1240  00FEC7  4C                 	db	76	;'L'
  1241  00FEC8  47                 	db	71	;'G'
  1242  00FEC9  4F                 	db	79	;'O'
  1243  00FECA  52                 	db	82	;'R'
  1244  00FECB  49                 	db	73	;'I'
  1245  00FECC  54                 	db	84	;'T'
  1246  00FECD  48                 	db	72	;'H'
  1247  00FECE  4D                 	db	77	;'M'
  1248  00FECF  20                 	db	32
  1249  00FED0  54                 	db	84	;'T'
  1250  00FED1  45                 	db	69	;'E'
  1251  00FED2  53                 	db	83	;'S'
  1252  00FED3  54                 	db	84	;'T'
  1253  00FED4  00                 	db	0
  1254  00FED5                     STR_89:
  1255  00FED5  50                 	db	80	;'P'
  1256  00FED6  49                 	db	73	;'I'
  1257  00FED7  4E                 	db	78	;'N'
  1258  00FED8  20                 	db	32
  1259  00FED9  52                 	db	82	;'R'
  1260  00FEDA  41                 	db	65	;'A'
  1261  00FEDB  35                 	db	53	;'5'
  1262  00FEDC  20                 	db	32
  1263  00FEDD  48                 	db	72	;'H'
  1264  00FEDE  49                 	db	73	;'I'
  1265  00FEDF  47                 	db	71	;'G'
  1266  00FEE0  48                 	db	72	;'H'
  1267  00FEE1  2E                 	db	46
  1268  00FEE2  00                 	db	0
  1269  00FEE3                     STR_73:
  1270  00FEE3  41                 	db	65	;'A'
  1271  00FEE4  4C                 	db	76	;'L'
  1272  00FEE5  47                 	db	71	;'G'
  1273  00FEE6  32                 	db	50	;'2'
  1274  00FEE7  3A                 	db	58	;':'
  1275  00FEE8  20                 	db	32
  1276  00FEE9  31                 	db	49	;'1'
  1277  00FEEA  32                 	db	50	;'2'
  1278  00FEEB  20                 	db	32
  1279  00FEEC  43                 	db	67	;'C'
  1280  00FEED  41                 	db	65	;'A'
  1281  00FEEE  4E                 	db	78	;'N'
  1282  00FEEF  53                 	db	83	;'S'
  1283  00FEF0  00                 	db	0
  1284  00FEF1                     STR_76:
  1285  00FEF1  41                 	db	65	;'A'
  1286  00FEF2  4C                 	db	76	;'L'
  1287  00FEF3  47                 	db	71	;'G'
  1288  00FEF4  35                 	db	53	;'5'
  1289  00FEF5  3A                 	db	58	;':'
  1290  00FEF6  20                 	db	32
  1291  00FEF7  4E                 	db	78	;'N'
  1292  00FEF8  4F                 	db	79	;'O'
  1293  00FEF9  20                 	db	32
  1294  00FEFA  43                 	db	67	;'C'
  1295  00FEFB  41                 	db	65	;'A'
  1296  00FEFC  4E                 	db	78	;'N'
  1297  00FEFD  53                 	db	83	;'S'
  1298  00FEFE  00                 	db	0
  1299  00FEFF                     STR_71:
  1300  00FEFF  50                 	db	80	;'P'
  1301  00FF00  55                 	db	85	;'U'
  1302  00FF01  53                 	db	83	;'S'
  1303  00FF02  48                 	db	72	;'H'
  1304  00FF03  20                 	db	32
  1305  00FF04  54                 	db	84	;'T'
  1306  00FF05  4F                 	db	79	;'O'
  1307  00FF06  20                 	db	32
  1308  00FF07  53                 	db	83	;'S'
  1309  00FF08  54                 	db	84	;'T'
  1310  00FF09  41                 	db	65	;'A'
  1311  00FF0A  52                 	db	82	;'R'
  1312  00FF0B  54                 	db	84	;'T'
  1313  00FF0C  00                 	db	0
  1314  00FF0D                     STR_23:
  1315  00FF0D  25                 	db	37
  1316  00FF0E  64                 	db	100	;'d'
  1317  00FF0F  20                 	db	32
  1318  00FF10  4D                 	db	77	;'M'
  1319  00FF11  49                 	db	73	;'I'
  1320  00FF12  4E                 	db	78	;'N'
  1321  00FF13  20                 	db	32
  1322  00FF14  25                 	db	37
  1323  00FF15  64                 	db	100	;'d'
  1324  00FF16  20                 	db	32
  1325  00FF17  53                 	db	83	;'S'
  1326  00FF18  45                 	db	69	;'E'
  1327  00FF19  43                 	db	67	;'C'
  1328  00FF1A  00                 	db	0
  1329  00FF1B                     STR_2:
  1330  00FF1B  54                 	db	84	;'T'
  1331  00FF1C  49                 	db	73	;'I'
  1332  00FF1D  4D                 	db	77	;'M'
  1333  00FF1E  45                 	db	69	;'E'
  1334  00FF1F  3A                 	db	58	;':'
  1335  00FF20  20                 	db	32
  1336  00FF21  25                 	db	37
  1337  00FF22  64                 	db	100	;'d'
  1338  00FF23  3A                 	db	58	;':'
  1339  00FF24  25                 	db	37
  1340  00FF25  30                 	db	48	;'0'
  1341  00FF26  32                 	db	50	;'2'
  1342  00FF27  64                 	db	100	;'d'
  1343  00FF28  00                 	db	0
  1344  00FF29                     STR_79:
  1345  00FF29  54                 	db	84	;'T'
  1346  00FF2A  53                 	db	83	;'S'
  1347  00FF2B  54                 	db	84	;'T'
  1348  00FF2C  3A                 	db	58	;':'
  1349  00FF2D  20                 	db	32
  1350  00FF2E  49                 	db	73	;'I'
  1351  00FF2F  52                 	db	82	;'R'
  1352  00FF30  20                 	db	32
  1353  00FF31  53                 	db	83	;'S'
  1354  00FF32  4E                 	db	78	;'N'
  1355  00FF33  53                 	db	83	;'S'
  1356  00FF34  52                 	db	82	;'R'
  1357  00FF35  00                 	db	0
  1358  00FF36                     STR_111:
  1359  00FF36  53                 	db	83	;'S'
  1360  00FF37  4F                 	db	79	;'O'
  1361  00FF38  4C                 	db	76	;'L'
  1362  00FF39  45                 	db	69	;'E'
  1363  00FF3A  4E                 	db	78	;'N'
  1364  00FF3B  4F                 	db	79	;'O'
  1365  00FF3C  49                 	db	73	;'I'
  1366  00FF3D  44                 	db	68	;'D'
  1367  00FF3E  20                 	db	32
  1368  00FF3F  54                 	db	84	;'T'
  1369  00FF40  53                 	db	83	;'S'
  1370  00FF41  54                 	db	84	;'T'
  1371  00FF42  00                 	db	0
  1372  00FF43                     STR_65:
  1373  00FF43  54                 	db	84	;'T'
  1374  00FF44  49                 	db	73	;'I'
  1375  00FF45  4D                 	db	77	;'M'
  1376  00FF46  45                 	db	69	;'E'
  1377  00FF47  20                 	db	32
  1378  00FF48  25                 	db	37
  1379  00FF49  64                 	db	100	;'d'
  1380  00FF4A  3A                 	db	58	;':'
  1381  00FF4B  25                 	db	37
  1382  00FF4C  30                 	db	48	;'0'
  1383  00FF4D  32                 	db	50	;'2'
  1384  00FF4E  64                 	db	100	;'d'
  1385  00FF4F  00                 	db	0
  1386  00FF50                     STR_74:
  1387  00FF50  41                 	db	65	;'A'
  1388  00FF51  4C                 	db	76	;'L'
  1389  00FF52  47                 	db	71	;'G'
  1390  00FF53  33                 	db	51	;'3'
  1391  00FF54  3A                 	db	58	;':'
  1392  00FF55  20                 	db	32
  1393  00FF56  31                 	db	49	;'1'
  1394  00FF57  20                 	db	32
  1395  00FF58  43                 	db	67	;'C'
  1396  00FF59  41                 	db	65	;'A'
  1397  00FF5A  4E                 	db	78	;'N'
  1398  00FF5B  00                 	db	0
  1399  00FF5C                     STR_91:
  1400  00FF5C  50                 	db	80	;'P'
  1401  00FF5D  49                 	db	73	;'I'
  1402  00FF5E  4E                 	db	78	;'N'
  1403  00FF5F  20                 	db	32
  1404  00FF60  52                 	db	82	;'R'
  1405  00FF61  41                 	db	65	;'A'
  1406  00FF62  33                 	db	51	;'3'
  1407  00FF63  2E                 	db	46
  1408  00FF64  2E                 	db	46
  1409  00FF65  2E                 	db	46
  1410  00FF66  00                 	db	0
  1411  00FF67                     STR_93:
  1412  00FF67  50                 	db	80	;'P'
  1413  00FF68  49                 	db	73	;'I'
  1414  00FF69  4E                 	db	78	;'N'
  1415  00FF6A  20                 	db	32
  1416  00FF6B  52                 	db	82	;'R'
  1417  00FF6C  41                 	db	65	;'A'
  1418  00FF6D  34                 	db	52	;'4'
  1419  00FF6E  2E                 	db	46
  1420  00FF6F  2E                 	db	46
  1421  00FF70  2E                 	db	46
  1422  00FF71  00                 	db	0
  1423  00FF72                     STR_64:
  1424  00FF72  53                 	db	83	;'S'
  1425  00FF73  4F                 	db	79	;'O'
  1426  00FF74  52                 	db	82	;'R'
  1427  00FF75  54                 	db	84	;'T'
  1428  00FF76  49                 	db	73	;'I'
  1429  00FF77  4E                 	db	78	;'N'
  1430  00FF78  47                 	db	71	;'G'
  1431  00FF79  2E                 	db	46
  1432  00FF7A  2E                 	db	46
  1433  00FF7B  2E                 	db	46
  1434  00FF7C  00                 	db	0
  1435  00FF7D                     STR_84:
  1436  00FF7D  54                 	db	84	;'T'
  1437  00FF7E  53                 	db	83	;'S'
  1438  00FF7F  54                 	db	84	;'T'
  1439  00FF80  3A                 	db	58	;':'
  1440  00FF81  20                 	db	32
  1441  00FF82  43                 	db	67	;'C'
  1442  00FF83  4F                 	db	79	;'O'
  1443  00FF84  4E                 	db	78	;'N'
  1444  00FF85  44                 	db	68	;'D'
  1445  00FF86  00                 	db	0
  1446  00FF87                     STR_112:
  1447  00FF87  50                 	db	80	;'P'
  1448  00FF88  55                 	db	85	;'U'
  1449  00FF89  53                 	db	83	;'S'
  1450  00FF8A  48                 	db	72	;'H'
  1451  00FF8B  20                 	db	32
  1452  00FF8C  44                 	db	68	;'D'
  1453  00FF8D  4F                 	db	79	;'O'
  1454  00FF8E  4E                 	db	78	;'N'
  1455  00FF8F  45                 	db	69	;'E'
  1456  00FF90  00                 	db	0
  1457  00FF91                     STR_86:
  1458  00FF91  41                 	db	65	;'A'
  1459  00FF92  43                 	db	67	;'C'
  1460  00FF93  54                 	db	84	;'T'
  1461  00FF94  55                 	db	85	;'U'
  1462  00FF95  41                 	db	65	;'A'
  1463  00FF96  54                 	db	84	;'T'
  1464  00FF97  4F                 	db	79	;'O'
  1465  00FF98  52                 	db	82	;'R'
  1466  00FF99  53                 	db	83	;'S'
  1467  00FF9A  00                 	db	0
  1468  00FF9B                     STR_22:
  1469  00FF9B  44                 	db	68	;'D'
  1470  00FF9C  55                 	db	85	;'U'
  1471  00FF9D  52                 	db	82	;'R'
  1472  00FF9E  41                 	db	65	;'A'
  1473  00FF9F  54                 	db	84	;'T'
  1474  00FFA0  49                 	db	73	;'I'
  1475  00FFA1  4F                 	db	79	;'O'
  1476  00FFA2  4E                 	db	78	;'N'
  1477  00FFA3  3A                 	db	58	;':'
  1478  00FFA4  00                 	db	0
  1479  00FFA5                     STR_85:
  1480  00FFA5  43                 	db	67	;'C'
  1481  00FFA6  4F                 	db	79	;'O'
  1482  00FFA7  4E                 	db	78	;'N'
  1483  00FFA8  44                 	db	68	;'D'
  1484  00FFA9  3A                 	db	58	;':'
  1485  00FFAA  20                 	db	32
  1486  00FFAB  25                 	db	37
  1487  00FFAC  64                 	db	100	;'d'
  1488  00FFAD  00                 	db	0
  1489  00FFAE                     STR_77:
  1490  00FFAE  53                 	db	83	;'S'
  1491  00FFAF  45                 	db	69	;'E'
  1492  00FFB0  4E                 	db	78	;'N'
  1493  00FFB1  53                 	db	83	;'S'
  1494  00FFB2  4F                 	db	79	;'O'
  1495  00FFB3  52                 	db	82	;'R'
  1496  00FFB4  53                 	db	83	;'S'
  1497  00FFB5  00                 	db	0
  1498  00FFB6                     STR_115:
  1499  00FFB6  28                 	db	40
  1500  00FFB7  6E                 	db	110	;'n'
  1501  00FFB8  75                 	db	117	;'u'
  1502  00FFB9  6C                 	db	108	;'l'
  1503  00FFBA  6C                 	db	108	;'l'
  1504  00FFBB  29                 	db	41
  1505  00FFBC  00                 	db	0
  1506  00FFBD                     STR_67:
  1507  00FFBD  46                 	db	70	;'F'
  1508  00FFBE  41                 	db	65	;'A'
  1509  00FFBF  49                 	db	73	;'I'
  1510  00FFC0  4C                 	db	76	;'L'
  1511  00FFC1  45                 	db	69	;'E'
  1512  00FFC2  44                 	db	68	;'D'
  1513  00FFC3  00                 	db	0
  1514  00FFC4                     STR_7:
  1515  00FFC4  53                 	db	83	;'S'
  1516  00FFC5  54                 	db	84	;'T'
  1517  00FFC6  41                 	db	65	;'A'
  1518  00FFC7  52                 	db	82	;'R'
  1519  00FFC8  54                 	db	84	;'T'
  1520  00FFC9  3A                 	db	58	;':'
  1521  00FFCA  00                 	db	0
  1522  00FFCB                     STR_9:
  1523  00FFCB  46                 	db	70	;'F'
  1524  00FFCC  45                 	db	69	;'E'
  1525  00FFCD  42                 	db	66	;'B'
  1526  00FFCE  00                 	db	0
  1527  00FFCF                     STR_19:
  1528  00FFCF  44                 	db	68	;'D'
  1529  00FFD0  45                 	db	69	;'E'
  1530  00FFD1  43                 	db	67	;'C'
  1531  00FFD2  00                 	db	0
  1532  00FFD3                     STR_15:
  1533  00FFD3  41                 	db	65	;'A'
  1534  00FFD4  55                 	db	85	;'U'
  1535  00FFD5  47                 	db	71	;'G'
  1536  00FFD6  00                 	db	0
  1537  00FFD7                     STR_14:
  1538  00FFD7  4A                 	db	74	;'J'
  1539  00FFD8  55                 	db	85	;'U'
  1540  00FFD9  4C                 	db	76	;'L'
  1541  00FFDA  00                 	db	0
  1542  00FFDB                     STR_8:
  1543  00FFDB  4A                 	db	74	;'J'
  1544  00FFDC  41                 	db	65	;'A'
  1545  00FFDD  4E                 	db	78	;'N'
  1546  00FFDE  00                 	db	0
  1547  00FFDF                     STR_13:
  1548  00FFDF  4A                 	db	74	;'J'
  1549  00FFE0  55                 	db	85	;'U'
  1550  00FFE1  4E                 	db	78	;'N'
  1551  00FFE2  00                 	db	0
  1552  00FFE3                     STR_16:
  1553  00FFE3  53                 	db	83	;'S'
  1554  00FFE4  45                 	db	69	;'E'
  1555  00FFE5  50                 	db	80	;'P'
  1556  00FFE6  00                 	db	0
  1557  00FFE7                     STR_10:
  1558  00FFE7  4D                 	db	77	;'M'
  1559  00FFE8  41                 	db	65	;'A'
  1560  00FFE9  52                 	db	82	;'R'
  1561  00FFEA  00                 	db	0
  1562  00FFEB                     STR_11:
  1563  00FFEB  41                 	db	65	;'A'
  1564  00FFEC  50                 	db	80	;'P'
  1565  00FFED  52                 	db	82	;'R'
  1566  00FFEE  00                 	db	0
  1567  00FFEF                     STR_20:
  1568  00FFEF  45                 	db	69	;'E'
  1569  00FFF0  52                 	db	82	;'R'
  1570  00FFF1  52                 	db	82	;'R'
  1571  00FFF2  00                 	db	0
  1572  00FFF3                     STR_17:
  1573  00FFF3  4F                 	db	79	;'O'
  1574  00FFF4  43                 	db	67	;'C'
  1575  00FFF5  54                 	db	84	;'T'
  1576  00FFF6  00                 	db	0
  1577  00FFF7                     STR_18:
  1578  00FFF7  4E                 	db	78	;'N'
  1579  00FFF8  4F                 	db	79	;'O'
  1580  00FFF9  56                 	db	86	;'V'
  1581  00FFFA  00                 	db	0
  1582  00FFFB                     STR_12:
  1583  00FFFB  4D                 	db	77	;'M'
  1584  00FFFC  41                 	db	65	;'A'
  1585  00FFFD  59                 	db	89	;'Y'
  1586  00FFFE  00                 	db	0
  1587  0000                     
  1588                           ; #config settings
  1589  00FFFF  00                 	db	0	; dummy byte at the end
  1590  0000                     
  1591                           	psect	cinit
  1592  003FEE                     __pcinit:
  1593                           	opt stack 0
  1594  003FEE                     start_initialization:
  1595                           	opt stack 0
  1596  003FEE                     __initialization:
  1597                           	opt stack 0
  1598                           
  1599                           ; Initialize objects allocated to BANK1 (8 bytes)
  1600                           ; load TBLPTR registers with __pidataBANK1
  1601  003FEE  0E42               	movlw	low __pidataBANK1
  1602  003FF0  6EF6               	movwf	tblptrl,c
  1603  003FF2  0E47               	movlw	high __pidataBANK1
  1604  003FF4  6EF7               	movwf	tblptrh,c
  1605  003FF6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1606  003FF8  6EF8               	movwf	tblptru,c
  1607  003FFA  EE01  F02F         	lfsr	0,__pdataBANK1
  1608  003FFE  EE10 F008          	lfsr	1,8
  1609  004002                     copy_data0:
  1610  004002  0009               	tblrd		*+
  1611  004004  CFF5 FFEE          	movff	tablat,postinc0
  1612  004008  50E5               	movf	postdec1,w,c
  1613  00400A  50E1               	movf	fsr1l,w,c
  1614  00400C  E1FA               	bnz	copy_data0
  1615                           
  1616                           ; Clear objects allocated to BANK1 (47 bytes)
  1617  00400E  EE01  F000         	lfsr	0,__pbssBANK1
  1618  004012  0E2F               	movlw	47
  1619  004014                     clear_0:
  1620  004014  6AEE               	clrf	postinc0,c
  1621  004016  06E8               	decf	wreg,f,c
  1622  004018  E1FD               	bnz	clear_0
  1623                           
  1624                           ; Clear objects allocated to BANK0 (38 bytes)
  1625  00401A  EE00  F0DA         	lfsr	0,__pbssBANK0
  1626  00401E  0E26               	movlw	38
  1627  004020                     clear_1:
  1628  004020  6AEE               	clrf	postinc0,c
  1629  004022  06E8               	decf	wreg,f,c
  1630  004024  E1FD               	bnz	clear_1
  1631                           
  1632                           ; Clear objects allocated to COMRAM (35 bytes)
  1633  004026  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1634  00402A  0E23               	movlw	35
  1635  00402C                     clear_2:
  1636  00402C  6AEE               	clrf	postinc0,c
  1637  00402E  06E8               	decf	wreg,f,c
  1638  004030  E1FD               	bnz	clear_2
  1639  004032                     end_of_initialization:
  1640                           	opt stack 0
  1641  004032                     __end_of__initialization:
  1642                           	opt stack 0
  1643  004032  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1644  004034  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1645  004036  0100               	movlb	0
  1646  004038  EF29  F01C         	goto	_main	;jump to C main() function
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	bssCOMRAM
  1657  00005B                     __pbssCOMRAM:
  1658                           	opt stack 0
  1659  00005B                     _back:
  1660                           	opt stack 0
  1661  00005B                     	ds	2
  1662  00005D                     _count_can_no_lab:
  1663                           	opt stack 0
  1664  00005D                     	ds	2
  1665  00005F                     _count_can_w_lab:
  1666                           	opt stack 0
  1667  00005F                     	ds	2
  1668  000061                     _count_pop_no_tab:
  1669                           	opt stack 0
  1670  000061                     	ds	2
  1671  000063                     _count_pop_w_tab:
  1672                           	opt stack 0
  1673  000063                     	ds	2
  1674  000065                     _cur_can:
  1675                           	opt stack 0
  1676  000065                     	ds	2
  1677  000067                     _debug:
  1678                           	opt stack 0
  1679  000067                     	ds	2
  1680  000069                     _down:
  1681                           	opt stack 0
  1682  000069                     	ds	2
  1683  00006B                     _enter:
  1684                           	opt stack 0
  1685  00006B                     	ds	2
  1686  00006D                     _f_ID_receive:
  1687                           	opt stack 0
  1688  00006D                     	ds	2
  1689  00006F                     _f_can_coming_to_ID:
  1690                           	opt stack 0
  1691  00006F                     	ds	2
  1692  000071                     _f_can_coming_to_distribution:
  1693                           	opt stack 0
  1694  000071                     	ds	2
  1695  000073                     _f_lastCan:
  1696                           	opt stack 0
  1697  000073                     	ds	2
  1698  000075                     _firstboot:
  1699                           	opt stack 0
  1700  000075                     	ds	2
  1701  000077                     _up:
  1702                           	opt stack 0
  1703  000077                     	ds	2
  1704  000079                     _was_low_1:
  1705                           	opt stack 0
  1706  000079                     	ds	2
  1707  00007B                     _was_low_3:
  1708                           	opt stack 0
  1709  00007B                     	ds	2
  1710  00007D                     _input:
  1711                           	opt stack 0
  1712  00007D                     	ds	1
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           
  1722                           	psect	bssBANK0
  1723  0000DA                     __pbssBANK0:
  1724                           	opt stack 0
  1725  0000DA                     _IR_signal:
  1726                           	opt stack 0
  1727  0000DA                     	ds	2
  1728  0000DC                     _MAG_signal:
  1729                           	opt stack 0
  1730  0000DC                     	ds	2
  1731  0000DE                     _cur_state:
  1732                           	opt stack 0
  1733  0000DE                     	ds	2
  1734  0000E0                     _f_loadingNewCan:
  1735                           	opt stack 0
  1736  0000E0                     	ds	2
  1737  0000E2                     _first:
  1738                           	opt stack 0
  1739  0000E2                     	ds	2
  1740  0000E4                     _i:
  1741                           	opt stack 0
  1742  0000E4                     	ds	2
  1743  0000E6                     _log:
  1744                           	opt stack 0
  1745  0000E6                     	ds	2
  1746  0000E8                     _log_completion:
  1747                           	opt stack 0
  1748  0000E8                     	ds	2
  1749  0000EA                     _log_count_can_no_lab:
  1750                           	opt stack 0
  1751  0000EA                     	ds	2
  1752  0000EC                     _log_count_can_w_lab:
  1753                           	opt stack 0
  1754  0000EC                     	ds	2
  1755  0000EE                     _log_count_pop_no_tab:
  1756                           	opt stack 0
  1757  0000EE                     	ds	2
  1758  0000F0                     _log_count_pop_w_tab:
  1759                           	opt stack 0
  1760  0000F0                     	ds	2
  1761  0000F2                     _log_count_total:
  1762                           	opt stack 0
  1763  0000F2                     	ds	2
  1764  0000F4                     _log_total_time:
  1765                           	opt stack 0
  1766  0000F4                     	ds	2
  1767  0000F6                     _logstate:
  1768                           	opt stack 0
  1769  0000F6                     	ds	2
  1770  0000F8                     _total_time:
  1771                           	opt stack 0
  1772  0000F8                     	ds	2
  1773  0000FA                     _var:
  1774                           	opt stack 0
  1775  0000FA                     	ds	2
  1776  0000FC                     _machine_state:
  1777                           	opt stack 0
  1778  0000FC                     	ds	1
  1779  0000FD                     _sel:
  1780                           	opt stack 0
  1781  0000FD                     	ds	1
  1782  0000FE                     _count_total:
  1783                           	opt stack 0
  1784  0000FE                     	ds	2
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	bssBANK1
  1795  000100                     __pbssBANK1:
  1796                           	opt stack 0
  1797  000100                     _log_startTime:
  1798                           	opt stack 0
  1799  000100                     	ds	14
  1800  00010E                     _startTime:
  1801                           	opt stack 0
  1802  00010E                     	ds	14
  1803  00011C                     _servoTimes:
  1804                           	opt stack 0
  1805  00011C                     	ds	8
  1806  000124                     _time:
  1807                           	opt stack 0
  1808  000124                     	ds	7
  1809  00012B                     _RTCflag:
  1810                           	opt stack 0
  1811  00012B                     	ds	2
  1812  00012D                     _f_can_distributed:
  1813                           	opt stack 0
  1814  00012D                     	ds	2
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           
  1824                           	psect	dataBANK1
  1825  00012F                     __pdataBANK1:
  1826                           	opt stack 0
  1827  00012F                     UI@F3223:
  1828                           	opt stack 0
  1829  00012F                     	ds	4
  1830  000133                     printRTC@F3214:
  1831                           	opt stack 0
  1832  000133                     	ds	4
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           
  1842                           	psect	cstackBANK0
  1843  000080                     __pcstackBANK0:
  1844                           	opt stack 0
  1845  000080                     ??_delay_ms:
  1846  000080                     ??_PortTests:
  1847  000080                     ??_isdigit:
  1848  000080                     ??_readADC:
  1849  000080                     ??_I2C_Master_Wait:
  1850  000080                     ?___wmul:
  1851                           	opt stack 0
  1852  000080                     ?___awmod:
  1853                           	opt stack 0
  1854  000080                     ?___lwdiv:
  1855                           	opt stack 0
  1856  000080                     ?___lldiv:
  1857                           	opt stack 0
  1858  000080                     lcdNibble@temp:
  1859                           	opt stack 0
  1860  000080                     initTime@m:
  1861                           	opt stack 0
  1862  000080                     updateServoPosition@time_us:
  1863                           	opt stack 0
  1864  000080                     EEPROM_read@address:
  1865                           	opt stack 0
  1866  000080                     ___wmul@multiplier:
  1867                           	opt stack 0
  1868  000080                     ___awmod@dividend:
  1869                           	opt stack 0
  1870  000080                     ___lwdiv@dividend:
  1871                           	opt stack 0
  1872  000080                     strcpy@to:
  1873                           	opt stack 0
  1874  000080                     ___lldiv@dividend:
  1875                           	opt stack 0
  1876                           
  1877                           ; 4 bytes @ 0x0
  1878  000080                     	ds	1
  1879  000081                     readADC@channel:
  1880                           	opt stack 0
  1881  000081                     I2C_Master_Read@a:
  1882                           	opt stack 0
  1883  000081                     lcdNibble@data:
  1884                           	opt stack 0
  1885  000081                     initTime@h:
  1886                           	opt stack 0
  1887  000081                     delay_ms@milliseconds:
  1888                           	opt stack 0
  1889  000081                     _isdigit$1938:
  1890                           	opt stack 0
  1891  000081                     I2C_Master_Write@d:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x1
  1895  000081                     	ds	1
  1896  000082                     ??_readIR:
  1897  000082                     ??_readMAG:
  1898  000082                     I2C_Master_Read@temp:
  1899                           	opt stack 0
  1900  000082                     lcdInst@data:
  1901                           	opt stack 0
  1902  000082                     putch@data:
  1903                           	opt stack 0
  1904  000082                     initTime@w:
  1905                           	opt stack 0
  1906  000082                     isdigit@c:
  1907                           	opt stack 0
  1908  000082                     updateServoPosition@timer:
  1909                           	opt stack 0
  1910  000082                     ___wmul@multiplicand:
  1911                           	opt stack 0
  1912  000082                     ___awmod@divisor:
  1913                           	opt stack 0
  1914  000082                     ___lwdiv@divisor:
  1915                           	opt stack 0
  1916  000082                     strcpy@from:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x2
  1920  000082                     	ds	1
  1921  000083                     ??_initLCD:
  1922  000083                     initTime@DD:
  1923                           	opt stack 0
  1924  000083                     getRTC@i:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x3
  1928  000083                     	ds	1
  1929  000084                     ??_updateServoPosition:
  1930  000084                     initTime@MM:
  1931                           	opt stack 0
  1932  000084                     ___awmod@counter:
  1933                           	opt stack 0
  1934  000084                     readIR@res:
  1935                           	opt stack 0
  1936  000084                     readMAG@res:
  1937                           	opt stack 0
  1938  000084                     ___wmul@product:
  1939                           	opt stack 0
  1940  000084                     ___lwdiv@quotient:
  1941                           	opt stack 0
  1942  000084                     strcpy@cp:
  1943                           	opt stack 0
  1944  000084                     ___lldiv@divisor:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x4
  1948  000084                     	ds	1
  1949  000085                     ??_initSortTimer:
  1950  000085                     initTime@YY:
  1951                           	opt stack 0
  1952  000085                     ___awmod@sign:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x5
  1956  000085                     	ds	1
  1957  000086                     ??_ID:
  1958  000086                     ??_getIR:
  1959  000086                     ?___awdiv:
  1960                           	opt stack 0
  1961  000086                     initTime@s:
  1962                           	opt stack 0
  1963  000086                     ___lwdiv@counter:
  1964                           	opt stack 0
  1965  000086                     updateServoPosition@my_time:
  1966                           	opt stack 0
  1967  000086                     ___awdiv@dividend:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x6
  1971  000086                     	ds	1
  1972  000087                     ?___lwmod:
  1973                           	opt stack 0
  1974  000087                     ___lwmod@dividend:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x7
  1978  000087                     	ds	1
  1979  000088                     ??_Distribution:
  1980  000088                     ??_initServos:
  1981  000088                     ID@i:
  1982                           	opt stack 0
  1983  000088                     initSortTimer@i:
  1984                           	opt stack 0
  1985  000088                     ___awdiv@divisor:
  1986                           	opt stack 0
  1987  000088                     ___lldiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x8
  1991  000088                     	ds	1
  1992  000089                     ___lwmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x9
  1996  000089                     	ds	1
  1997  00008A                     ___awdiv@counter:
  1998                           	opt stack 0
  1999  00008A                     ID@sensor_outputs:
  2000                           	opt stack 0
  2001                           
  2002                           ; 6 bytes @ 0xA
  2003  00008A                     	ds	1
  2004  00008B                     ___awdiv@sign:
  2005                           	opt stack 0
  2006  00008B                     ___lwmod@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xB
  2010  00008B                     	ds	1
  2011  00008C                     ___lldiv@counter:
  2012                           	opt stack 0
  2013  00008C                     ___awdiv@quotient:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0xC
  2017  00008C                     	ds	1
  2018  00008D                     I2C_Master_Init@c:
  2019                           	opt stack 0
  2020                           
  2021                           ; 4 bytes @ 0xD
  2022  00008D                     	ds	1
  2023  00008E                     ?_printf:
  2024                           	opt stack 0
  2025  00008E                     printf@f:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0xE
  2029  00008E                     	ds	3
  2030  000091                     ??_I2C_Master_Init:
  2031                           
  2032                           ; 1 bytes @ 0x11
  2033  000091                     	ds	4
  2034  000095                     ??_loadRTC:
  2035                           
  2036                           ; 1 bytes @ 0x15
  2037  000095                     	ds	1
  2038  000096                     loadRTC@i:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x16
  2042  000096                     	ds	4
  2043  00009A                     ??_printf:
  2044                           
  2045                           ; 1 bytes @ 0x1A
  2046  00009A                     	ds	4
  2047  00009E                     printf@prec:
  2048                           	opt stack 0
  2049                           
  2050                           ; 1 bytes @ 0x1E
  2051  00009E                     	ds	1
  2052  00009F                     printf@cp:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x1F
  2056  00009F                     	ds	2
  2057  0000A1                     printf@ap:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x21
  2061  0000A1                     	ds	2
  2062  0000A3                     printf@len:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x23
  2066  0000A3                     	ds	2
  2067  0000A5                     printf@val:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x25
  2071  0000A5                     	ds	2
  2072  0000A7                     printf@flag:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x27
  2076  0000A7                     	ds	1
  2077  0000A8                     printf@c:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x28
  2081  0000A8                     	ds	1
  2082  0000A9                     printf@width:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x29
  2086  0000A9                     	ds	2
  2087  0000AB                     ??_printRTC:
  2088  0000AB                     ??_algorithmTest:
  2089  0000AB                     ??_sensorTest:
  2090  0000AB                     ??_actuatorTest:
  2091  0000AB                     ??_PortTestA5:
  2092  0000AB                     ??_ToggleTestA5:
  2093  0000AB                     ??_SolenoidTestA5:
  2094  0000AB                     ??_BothServos:
  2095  0000AB                     EEPROM_write@address:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x2B
  2099  0000AB                     	ds	1
  2100  0000AC                     ToggleTestA5@on:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2C
  2104  0000AC                     	ds	1
  2105  0000AD                     EEPROM_write@data:
  2106                           	opt stack 0
  2107  0000AD                     actuatorTest@i_1629:
  2108                           	opt stack 0
  2109  0000AD                     sensorTest@on:
  2110                           	opt stack 0
  2111  0000AD                     SolenoidTestA5@i:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2D
  2115  0000AD                     	ds	1
  2116  0000AE                     ??_EEPROM_write:
  2117  0000AE                     actuatorTest@i_1636:
  2118                           	opt stack 0
  2119  0000AE                     printRTC@INT_time:
  2120                           	opt stack 0
  2121                           
  2122                           ; 14 bytes @ 0x2E
  2123  0000AE                     	ds	1
  2124  0000AF                     EEPROM_write@i:
  2125                           	opt stack 0
  2126  0000AF                     actuatorTest@i_1637:
  2127                           	opt stack 0
  2128  0000AF                     SolenoidTestA5@i_1682:
  2129                           	opt stack 0
  2130  0000AF                     sensorTest@res:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x2F
  2134  0000AF                     	ds	1
  2135  0000B0                     EEPROM_write@i_1321:
  2136                           	opt stack 0
  2137  0000B0                     actuatorTest@i_1639:
  2138                           	opt stack 0
  2139  0000B0                     SolenoidTestA5@i_1684:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x30
  2143  0000B0                     	ds	1
  2144  0000B1                     ??_Loading:
  2145  0000B1                     logRun@num:
  2146                           	opt stack 0
  2147  0000B1                     actuatorTest@i_1640:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x31
  2151  0000B1                     	ds	1
  2152  0000B2                     logRun@byte1:
  2153                           	opt stack 0
  2154  0000B2                     actuatorTest@i_1642:
  2155                           	opt stack 0
  2156                           
  2157                           ; 1 bytes @ 0x32
  2158  0000B2                     	ds	1
  2159  0000B3                     logRun@byte2:
  2160                           	opt stack 0
  2161  0000B3                     actuatorTest@i_1643:
  2162                           	opt stack 0
  2163  0000B3                     Loading@addr:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x33
  2167  0000B3                     	ds	1
  2168  0000B4                     logRun@byte3:
  2169                           	opt stack 0
  2170  0000B4                     actuatorTest@i_1645:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x34
  2174  0000B4                     	ds	1
  2175  0000B5                     Loading@byte1:
  2176                           	opt stack 0
  2177  0000B5                     logRun@byte_i:
  2178                           	opt stack 0
  2179  0000B5                     actuatorTest@i_1646:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x35
  2183  0000B5                     	ds	1
  2184  0000B6                     logRun@byte11:
  2185                           	opt stack 0
  2186  0000B6                     actuatorTest@i_1648:
  2187                           	opt stack 0
  2188  0000B6                     Loading@i:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x36
  2192  0000B6                     	ds	1
  2193  0000B7                     actuatorTest@i_1649:
  2194                           	opt stack 0
  2195  0000B7                     logRun@i:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x37
  2199  0000B7                     	ds	1
  2200  0000B8                     actuatorTest@i_1651:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x38
  2204  0000B8                     	ds	1
  2205  0000B9                     actuatorTest@i_1652:
  2206                           	opt stack 0
  2207  0000B9                     logRun@addr:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x39
  2211  0000B9                     	ds	1
  2212  0000BA                     actuatorTest@i_1655:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x3A
  2216  0000BA                     	ds	1
  2217  0000BB                     actuatorTest@i_1656:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x3B
  2221  0000BB                     	ds	1
  2222  0000BC                     actuatorTest@i_1658:
  2223                           	opt stack 0
  2224  0000BC                     printRTC@RTC_month:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x3C
  2228  0000BC                     	ds	1
  2229  0000BD                     actuatorTest@i_1659:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x3D
  2233  0000BD                     	ds	1
  2234  0000BE                     actuatorTest@i_1661:
  2235                           	opt stack 0
  2236  0000BE                     printRTC@month:
  2237                           	opt stack 0
  2238                           
  2239                           ; 4 bytes @ 0x3E
  2240  0000BE                     	ds	1
  2241  0000BF                     actuatorTest@i_1662:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x3F
  2245  0000BF                     	ds	1
  2246  0000C0                     actuatorTest@i_1665:
  2247                           	opt stack 0
  2248                           
  2249                           ; 1 bytes @ 0x40
  2250  0000C0                     	ds	1
  2251  0000C1                     actuatorTest@i_1666:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x41
  2255  0000C1                     	ds	1
  2256  0000C2                     actuatorTest@i_1668:
  2257                           	opt stack 0
  2258  0000C2                     printRTC@i:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x42
  2262  0000C2                     	ds	1
  2263  0000C3                     actuatorTest@i_1669:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x43
  2267  0000C3                     	ds	1
  2268  0000C4                     ??_UI:
  2269  0000C4                     actuatorTest@i:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x44
  2273  0000C4                     	ds	2
  2274  0000C6                     ??_Test:
  2275  0000C6                     _UI$2291:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x46
  2279  0000C6                     	ds	2
  2280  0000C8                     UI@i:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x48
  2284  0000C8                     	ds	1
  2285  0000C9                     UI@i_408:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x49
  2289  0000C9                     	ds	1
  2290  0000CA                     UI@i_411:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x4A
  2294  0000CA                     	ds	1
  2295  0000CB                     UI@i_412:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x4B
  2299  0000CB                     	ds	1
  2300  0000CC                     UI@i_430:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x4C
  2304  0000CC                     	ds	1
  2305  0000CD                     UI@i_431:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x4D
  2309  0000CD                     	ds	1
  2310  0000CE                     UI@i_434:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x4E
  2314  0000CE                     	ds	1
  2315  0000CF                     UI@i_435:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x4F
  2319  0000CF                     	ds	1
  2320  0000D0                     UI@i_438:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x50
  2324  0000D0                     	ds	1
  2325  0000D1                     UI@i_439:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x51
  2329  0000D1                     	ds	1
  2330  0000D2                     UI@i_442:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x52
  2334  0000D2                     	ds	1
  2335  0000D3                     UI@i_443:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x53
  2339  0000D3                     	ds	1
  2340  0000D4                     UI@i_446:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x54
  2344  0000D4                     	ds	1
  2345  0000D5                     UI@i_447:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x55
  2349  0000D5                     	ds	1
  2350  0000D6                     UI@month:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0x56
  2354  0000D6                     	ds	4
  2355  0000DA                     tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postdec1	equ	0xFE5
  2362                           fsr1l	equ	0xFE1
  2363                           
  2364                           ; 1 bytes @ 0x5A
  2365                           
  2366                           	psect	cstackCOMRAM
  2367  000001                     __pcstackCOMRAM:
  2368                           	opt stack 0
  2369  000001                     ??i2_I2C_Master_Wait:
  2370  000001                     ??i2_isdigit:
  2371  000001                     ?i2___wmul:
  2372                           	opt stack 0
  2373  000001                     ?i2___lwmod:
  2374                           	opt stack 0
  2375  000001                     i2lcdNibble@temp:
  2376                           	opt stack 0
  2377  000001                     i2EEPROM_read@address:
  2378                           	opt stack 0
  2379  000001                     i2___wmul@multiplier:
  2380                           	opt stack 0
  2381  000001                     i2___lwmod@dividend:
  2382                           	opt stack 0
  2383  000001                     i2strcpy@to:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x0
  2387  000001                     	ds	1
  2388  000002                     i2I2C_Master_Read@a:
  2389                           	opt stack 0
  2390  000002                     i2lcdNibble@data:
  2391                           	opt stack 0
  2392  000002                     i2_isdigit$1938:
  2393                           	opt stack 0
  2394  000002                     i2I2C_Master_Write@d:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x1
  2398  000002                     	ds	1
  2399  000003                     i2I2C_Master_Read@temp:
  2400                           	opt stack 0
  2401  000003                     i2lcdInst@data:
  2402                           	opt stack 0
  2403  000003                     i2putch@data:
  2404                           	opt stack 0
  2405  000003                     i2isdigit@c:
  2406                           	opt stack 0
  2407  000003                     i2___wmul@multiplicand:
  2408                           	opt stack 0
  2409  000003                     i2___lwmod@divisor:
  2410                           	opt stack 0
  2411  000003                     i2strcpy@from:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x2
  2415  000003                     	ds	1
  2416  000004                     i2getRTC@i:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x3
  2420  000004                     	ds	1
  2421  000005                     i2___lwmod@counter:
  2422                           	opt stack 0
  2423  000005                     i2___wmul@product:
  2424                           	opt stack 0
  2425  000005                     i2strcpy@cp:
  2426                           	opt stack 0
  2427                           
  2428                           ; 2 bytes @ 0x4
  2429  000005                     	ds	1
  2430  000006                     ?i2___lwdiv:
  2431                           	opt stack 0
  2432  000006                     i2___lwdiv@dividend:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x5
  2436  000006                     	ds	1
  2437  000007                     retrieveLog@logNum:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x6
  2441  000007                     	ds	1
  2442  000008                     i2___lwdiv@divisor:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x7
  2446  000008                     	ds	1
  2447  000009                     ??_retrieveLog:
  2448                           
  2449                           ; 1 bytes @ 0x8
  2450  000009                     	ds	1
  2451  00000A                     i2___lwdiv@quotient:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x9
  2455  00000A                     	ds	1
  2456  00000B                     retrieveLog@byte1:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0xA
  2460  00000B                     	ds	1
  2461  00000C                     retrieveLog@byte2:
  2462                           	opt stack 0
  2463  00000C                     i2___lwdiv@counter:
  2464                           	opt stack 0
  2465                           
  2466                           ; 1 bytes @ 0xB
  2467  00000C                     	ds	1
  2468  00000D                     ?i2_printf:
  2469                           	opt stack 0
  2470  00000D                     retrieveLog@byte3:
  2471                           	opt stack 0
  2472  00000D                     i2printf@f:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0xC
  2476  00000D                     	ds	1
  2477  00000E                     retrieveLog@i:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0xD
  2481  00000E                     	ds	2
  2482  000010                     retrieveLog@addr:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0xF
  2486  000010                     	ds	2
  2487  000012                     dispLogs@myLog:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x11
  2491  000012                     	ds	2
  2492  000014                     
  2493                           ; 1 bytes @ 0x13
  2494  000014                     	ds	5
  2495  000019                     ??i2_printf:
  2496                           
  2497                           ; 1 bytes @ 0x18
  2498  000019                     	ds	4
  2499  00001D                     i2printf@prec:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x1C
  2503  00001D                     	ds	1
  2504  00001E                     i2printf@cp:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x1D
  2508  00001E                     	ds	2
  2509  000020                     i2printf@ap:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x1F
  2513  000020                     	ds	2
  2514  000022                     i2printf@len:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x21
  2518  000022                     	ds	2
  2519  000024                     i2printf@val:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x23
  2523  000024                     	ds	2
  2524  000026                     i2printf@flag:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x25
  2528  000026                     	ds	1
  2529  000027                     i2printf@c:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x26
  2533  000027                     	ds	1
  2534  000028                     i2printf@width:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x27
  2538  000028                     	ds	2
  2539  00002A                     ??_printSortTimer:
  2540  00002A                     ??i2_printRTC:
  2541  00002A                     ?_inputHandler:
  2542                           	opt stack 0
  2543                           
  2544                           ; 2 bytes @ 0x29
  2545  00002A                     	ds	2
  2546  00002C                     ??_inputHandler:
  2547                           
  2548                           ; 1 bytes @ 0x2B
  2549  00002C                     	ds	1
  2550  00002D                     printSortTimer@hour:
  2551                           	opt stack 0
  2552  00002D                     i2printRTC@INT_time:
  2553                           	opt stack 0
  2554                           
  2555                           ; 14 bytes @ 0x2C
  2556  00002D                     	ds	2
  2557  00002F                     printSortTimer@curTime:
  2558                           	opt stack 0
  2559                           
  2560                           ; 14 bytes @ 0x2E
  2561  00002F                     	ds	12
  2562  00003B                     i2printRTC@RTC_month:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x3A
  2566  00003B                     	ds	2
  2567  00003D                     printSortTimer@start_sec:
  2568                           	opt stack 0
  2569  00003D                     i2printRTC@month:
  2570                           	opt stack 0
  2571                           
  2572                           ; 4 bytes @ 0x3C
  2573  00003D                     	ds	2
  2574  00003F                     printSortTimer@cur_sec:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x3E
  2578  00003F                     	ds	2
  2579  000041                     printSortTimer@min:
  2580                           	opt stack 0
  2581  000041                     i2printRTC@i:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x40
  2585  000041                     	ds	2
  2586  000043                     ??_updateMenu:
  2587  000043                     printSortTimer@sec:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x42
  2591  000043                     	ds	2
  2592  000045                     _printSortTimer$2411:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x44
  2596  000045                     	ds	2
  2597  000047                     printSortTimer@timeDiff:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x46
  2601  000047                     	ds	2
  2602  000049                     printSortTimer@i:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x48
  2606  000049                     	ds	2
  2607  00004B                     ??_handler:
  2608                           
  2609                           ; 1 bytes @ 0x4A
  2610  00004B                     	ds	16
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           
  2620 ;;
  2621 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2622 ;;
  2623 ;; *************** function _main *****************
  2624 ;; Defined at:
  2625 ;;		line 19 in file "main.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels required when called:   13
  2645 ;; This function calls:
  2646 ;;		_Test
  2647 ;;		_UI
  2648 ;;		_initLCD
  2649 ;;		_initTime
  2650 ;;		_initUI
  2651 ;;		_logRun
  2652 ;;		_machineConfig
  2653 ;;		_sort
  2654 ;;		_stopSignals
  2655 ;; This function is called by:
  2656 ;;		Startup code after reset
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text0
  2661  003852                     __ptext0:
  2662                           	opt stack 0
  2663  003852                     _main:
  2664                           	opt stack 18
  2665                           
  2666                           ;main.c: 20: machineConfig();
  2667                           
  2668                           ;incstack = 0
  2669  003852  EC48  F01F         	call	_machineConfig	;wreg free
  2670                           
  2671                           ;main.c: 21: initLCD();
  2672  003856  EC91  F020         	call	_initLCD	;wreg free
  2673                           
  2674                           ;main.c: 25: initTime(0x42, 0x25, 0x13, 0x04, 0x15, 0x03, 0x17);
  2675  00385A  0E25               	movlw	37
  2676  00385C  0100               	movlb	0	; () banked
  2677  00385E  6F80               	movwf	initTime@m& (0+255),b
  2678  003860  0E13               	movlw	19
  2679  003862  0100               	movlb	0	; () banked
  2680  003864  6F81               	movwf	initTime@h& (0+255),b
  2681  003866  0E04               	movlw	4
  2682  003868  0100               	movlb	0	; () banked
  2683  00386A  6F82               	movwf	initTime@w& (0+255),b
  2684  00386C  0E15               	movlw	21
  2685  00386E  0100               	movlb	0	; () banked
  2686  003870  6F83               	movwf	initTime@DD& (0+255),b
  2687  003872  0E03               	movlw	3
  2688  003874  0100               	movlb	0	; () banked
  2689  003876  6F84               	movwf	initTime@MM& (0+255),b
  2690  003878  0E17               	movlw	23
  2691  00387A  0100               	movlb	0	; () banked
  2692  00387C  6F85               	movwf	initTime@YY& (0+255),b
  2693  00387E  0E42               	movlw	66
  2694  003880  EC26  F023         	call	_initTime
  2695                           
  2696                           ;main.c: 27: initUI();
  2697  003884  ECF1  F022         	call	_initUI	;wreg free
  2698                           
  2699                           ;main.c: 28: first = 1;
  2700  003888  0E00               	movlw	0
  2701  00388A  0100               	movlb	0	; () banked
  2702  00388C  6FE3               	movwf	(_first+1)& (0+255),b
  2703  00388E  0E01               	movlw	1
  2704  003890  6FE2               	movwf	_first& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 39: switch(machine_state){
  2708                           
  2709                           ;main.c: 38: while(1){
  2710  003892  D018               	goto	l8092
  2711  003894                     l8074:
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 41: UI();
  2715  003894  EC65  F004         	call	_UI	;wreg free
  2716                           
  2717                           ;main.c: 42: break;
  2718  003898  D015               	goto	l8092
  2719  00389A                     l8076:
  2720                           
  2721                           ;main.c: 44: sort();
  2722  00389A  EC15  F023         	call	_sort	;wreg free
  2723                           
  2724                           ;main.c: 45: break;
  2725  00389E  D012               	goto	l8092
  2726  0038A0                     l8078:
  2727                           
  2728                           ;main.c: 47: stopSignals();
  2729  0038A0  EC52  F023         	call	_stopSignals	;wreg free
  2730                           
  2731                           ;main.c: 48: logRun();
  2732  0038A4  ECBB  F017         	call	_logRun	;wreg free
  2733                           
  2734                           ;main.c: 49: first = 1;
  2735  0038A8  0E00               	movlw	0
  2736  0038AA  0100               	movlb	0	; () banked
  2737  0038AC  6FE3               	movwf	(_first+1)& (0+255),b
  2738  0038AE  0E01               	movlw	1
  2739  0038B0  6FE2               	movwf	_first& (0+255),b
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 50: UI();
  2743  0038B2  EC65  F004         	call	_UI	;wreg free
  2744                           
  2745                           ;main.c: 51: break;
  2746  0038B6  D006               	goto	l8092
  2747  0038B8                     l8086:
  2748                           
  2749                           ;main.c: 53: Test();
  2750  0038B8  ECE6  F018         	call	_Test	;wreg free
  2751                           
  2752                           ;main.c: 54: break;
  2753  0038BC  D003               	goto	l8092
  2754  0038BE                     l8088:
  2755                           
  2756                           ;main.c: 56: stopSignals();
  2757  0038BE  EC52  F023         	call	_stopSignals	;wreg free
  2758  0038C2                     l480:
  2759  0038C2  D7FF               	goto	l480
  2760  0038C4                     l8092:
  2761  0038C4  0100               	movlb	0	; () banked
  2762  0038C6  51FC               	movf	_machine_state& (0+255),w,b
  2763                           
  2764                           ; Switch size 1, requested type "space"
  2765                           ; Number of cases is 5, Range of values is 0 to 4
  2766                           ; switch strategies available:
  2767                           ; Name         Instructions Cycles
  2768                           ; simple_byte           16     9 (average)
  2769                           ;	Chosen strategy is simple_byte
  2770  0038C8  0A00               	xorlw	0	; case 0
  2771  0038CA  B4D8               	btfsc	status,2,c
  2772  0038CC  D7E3               	goto	l8074
  2773  0038CE  0A01               	xorlw	1	; case 1
  2774  0038D0  B4D8               	btfsc	status,2,c
  2775  0038D2  D7E3               	goto	l8076
  2776  0038D4  0A03               	xorlw	3	; case 2
  2777  0038D6  B4D8               	btfsc	status,2,c
  2778  0038D8  D7E3               	goto	l8078
  2779  0038DA  0A01               	xorlw	1	; case 3
  2780  0038DC  B4D8               	btfsc	status,2,c
  2781  0038DE  D7EC               	goto	l8086
  2782  0038E0  0A07               	xorlw	7	; case 4
  2783  0038E2  B4D8               	btfsc	status,2,c
  2784  0038E4  D7EC               	goto	l8088
  2785                           
  2786                           ; BSR set to: 0
  2787                           
  2788                           ; BSR set to: 0
  2789  0038E6  D7EE               	goto	l8092
  2790  0038E8                     __end_of_main:
  2791                           	opt stack 0
  2792                           tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           postinc0	equ	0xFEE
  2797                           wreg	equ	0xFE8
  2798                           postdec1	equ	0xFE5
  2799                           fsr1l	equ	0xFE1
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _stopSignals *****************
  2803 ;; Defined at:
  2804 ;;		line 65 in file "main.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;		None
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        0 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    7
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_main
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text1
  2833  0046A4                     __ptext1:
  2834                           	opt stack 0
  2835  0046A4                     _stopSignals:
  2836                           	opt stack 23
  2837                           
  2838                           ;main.c: 66: LATA = 0x00;
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;incstack = 0
  2842  0046A4  0E00               	movlw	0
  2843  0046A6  6E89               	movwf	3977,c	;volatile
  2844                           
  2845                           ;main.c: 67: LATB = 0x00;
  2846  0046A8  0E00               	movlw	0
  2847  0046AA  6E8A               	movwf	3978,c	;volatile
  2848                           
  2849                           ;main.c: 68: LATC = 0x00;
  2850  0046AC  0E00               	movlw	0
  2851  0046AE  6E8B               	movwf	3979,c	;volatile
  2852                           
  2853                           ;main.c: 69: LATD = 0x00;
  2854  0046B0  0E00               	movlw	0
  2855  0046B2  6E8C               	movwf	3980,c	;volatile
  2856                           
  2857                           ;main.c: 70: LATE = 0x00;
  2858  0046B4  0E00               	movlw	0
  2859  0046B6  6E8D               	movwf	3981,c	;volatile
  2860  0046B8  0012               	return		;funcret
  2861  0046BA                     __end_of_stopSignals:
  2862                           	opt stack 0
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           postinc0	equ	0xFEE
  2868                           wreg	equ	0xFE8
  2869                           postdec1	equ	0xFE5
  2870                           fsr1l	equ	0xFE1
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _sort *****************
  2874 ;; Defined at:
  2875 ;;		line 55 in file "sort.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;Total ram usage:        0 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:   12
  2896 ;; This function calls:
  2897 ;;		_Distribution
  2898 ;;		_ID
  2899 ;;		_Loading
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text2
  2906  00462A                     __ptext2:
  2907                           	opt stack 0
  2908  00462A                     _sort:
  2909                           	opt stack 18
  2910                           
  2911                           ;sort.c: 56: if(machine_state == Sorting_state){
  2912                           
  2913                           ;incstack = 0
  2914  00462A  0100               	movlb	0	; () banked
  2915  00462C  05FC               	decf	_machine_state& (0+255),w,b
  2916  00462E  B4D8               	btfsc	status,2,c
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;sort.c: 57: Loading();
  2920  004630  EC74  F016         	call	_Loading	;wreg free
  2921                           
  2922                           ;sort.c: 58: }
  2923                           ;sort.c: 59: if(machine_state == Sorting_state){
  2924  004634  0100               	movlb	0	; () banked
  2925  004636  05FC               	decf	_machine_state& (0+255),w,b
  2926  004638  B4D8               	btfsc	status,2,c
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;sort.c: 60: ID();
  2930  00463A  ECC7  F015         	call	_ID	;wreg free
  2931                           
  2932                           ;sort.c: 61: }
  2933                           ;sort.c: 62: if(machine_state == Sorting_state){
  2934  00463E  0100               	movlb	0	; () banked
  2935  004640  05FC               	decf	_machine_state& (0+255),w,b
  2936  004642  A4D8               	btfss	status,2,c
  2937  004644  0012               	return	
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;sort.c: 63: Distribution();
  2941  004646  EC1B  F017         	call	_Distribution	;wreg free
  2942  00464A  0012               	return	
  2943  00464C                     __end_of_sort:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           postdec1	equ	0xFE5
  2952                           fsr1l	equ	0xFE1
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _Loading *****************
  2956 ;; Defined at:
  2957 ;;		line 67 in file "sort.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  i               2   54[BANK0 ] int 
  2962 ;;  addr            2   51[BANK0 ] unsigned short 
  2963 ;;  byte1           1   53[BANK0 ] unsigned char 
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;Total ram usage:        7 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:   11
  2980 ;; This function calls:
  2981 ;;		_EEPROM_read
  2982 ;;		_EEPROM_write
  2983 ;;		_delay_ms
  2984 ;;		_getIR
  2985 ;;		_initGlobalVars
  2986 ;;		_initServos
  2987 ;;		_initSortTimer
  2988 ;;		_lcdInst
  2989 ;; This function is called by:
  2990 ;;		_sort
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text3
  2995  002CE8                     __ptext3:
  2996                           	opt stack 0
  2997  002CE8                     _Loading:
  2998                           	opt stack 18
  2999                           
  3000                           ;sort.c: 68: if(first){
  3001                           
  3002                           ;incstack = 0
  3003  002CE8  0100               	movlb	0	; () banked
  3004  002CEA  51E2               	movf	_first& (0+255),w,b
  3005  002CEC  0100               	movlb	0	; () banked
  3006  002CEE  11E3               	iorwf	(_first+1)& (0+255),w,b
  3007  002CF0  B4D8               	btfsc	status,2,c
  3008  002CF2  D066               	goto	l6376
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;sort.c: 69: initGlobalVars();
  3012  002CF4  EC7E  F01E         	call	_initGlobalVars	;wreg free
  3013                           
  3014                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3015  002CF8  0E01               	movlw	1
  3016  002CFA  EC83  F023         	call	_lcdInst
  3017  002CFE  0E68               	movlw	104
  3018  002D00  0100               	movlb	0	; () banked
  3019  002D02  6FB1               	movwf	??_Loading& (0+255),b
  3020  002D04  0EE4               	movlw	228
  3021  002D06                     u7057:
  3022  002D06  2EE8               	decfsz	wreg,f,c
  3023  002D08  D7FE               	bra	u7057
  3024  002D0A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3025  002D0C  D7FC               	bra	u7057
  3026  002D0E  F000               	nop	
  3027                           
  3028                           ;sort.c: 71: initSortTimer();
  3029  002D10  EC83  F01B         	call	_initSortTimer	;wreg free
  3030                           
  3031                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3032  002D14  8A8B               	bsf	3979,5,c	;volatile
  3033                           
  3034                           ;sort.c: 77: sel = EEPROM_read(0);
  3035  002D16  0E00               	movlw	0
  3036  002D18  0100               	movlb	0	; () banked
  3037  002D1A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3038  002D1C  0E00               	movlw	0
  3039  002D1E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3040  002D20  EC46  F023         	call	_EEPROM_read	;wreg free
  3041  002D24  0100               	movlb	0	; () banked
  3042  002D26  6FFD               	movwf	_sel& (0+255),b
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3046  002D28  0100               	movlb	0	; () banked
  3047  002D2A  51FD               	movf	_sel& (0+255),w,b
  3048  002D2C  0D0B               	mullw	11
  3049  002D2E  0E01               	movlw	1
  3050  002D30  24F3               	addwf	prodl,w,c
  3051  002D32  0100               	movlb	0	; () banked
  3052  002D34  6FB3               	movwf	Loading@addr& (0+255),b
  3053  002D36  0E00               	movlw	0
  3054  002D38  20F4               	addwfc	prodh,w,c
  3055  002D3A  0100               	movlb	0	; () banked
  3056  002D3C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3060  002D3E  0E7F               	movlw	127
  3061  002D40  0100               	movlb	0	; () banked
  3062  002D42  6FB5               	movwf	Loading@byte1& (0+255),b
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3066  002D44  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3067  002D48  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3068  002D4C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3069  002D50  ECE9  F019         	call	_EEPROM_write	;wreg free
  3070                           
  3071                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3072  002D54  9A89               	bcf	3977,5,c	;volatile
  3073                           
  3074                           ;sort.c: 84: for(int i=0; i<46; i++){
  3075  002D56  0E00               	movlw	0
  3076  002D58  0100               	movlb	0	; () banked
  3077  002D5A  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3078  002D5C  0E00               	movlw	0
  3079  002D5E  6FB6               	movwf	Loading@i& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082  002D60  0100               	movlb	0	; () banked
  3083  002D62  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3084  002D64  D008               	goto	l6366
  3085  002D66  0100               	movlb	0	; () banked
  3086  002D68  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3087  002D6A  E126               	bnz	l721
  3088  002D6C  0E2E               	movlw	46
  3089  002D6E  0100               	movlb	0	; () banked
  3090  002D70  5DB6               	subwf	Loading@i& (0+255),w,b
  3091  002D72  B0D8               	btfsc	status,0,c
  3092  002D74  D021               	goto	l721
  3093  002D76                     l6366:
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3097  002D76  BA89               	btfsc	3977,5,c	;volatile
  3098  002D78  D004               	goto	u4810
  3099  002D7A  0100               	movlb	0	; () banked
  3100  002D7C  6BB1               	clrf	??_Loading& (0+255),b
  3101  002D7E  2BB1               	incf	??_Loading& (0+255),f,b
  3102  002D80  D002               	goto	u4828
  3103  002D82                     u4810:
  3104  002D82  0100               	movlb	0	; () banked
  3105  002D84  6BB1               	clrf	??_Loading& (0+255),b
  3106  002D86                     u4828:
  3107  002D86  0100               	movlb	0	; () banked
  3108  002D88  3BB1               	swapf	??_Loading& (0+255),f,b
  3109  002D8A  47B1               	rlncf	??_Loading& (0+255),f,b
  3110  002D8C  5089               	movf	3977,w,c	;volatile
  3111  002D8E  0100               	movlb	0	; () banked
  3112  002D90  19B1               	xorwf	??_Loading& (0+255),w,b
  3113  002D92  0BDF               	andlw	-33
  3114  002D94  19B1               	xorwf	??_Loading& (0+255),w,b
  3115  002D96  6E89               	movwf	3977,c	;volatile
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;sort.c: 86: delay_ms(45-i);
  3119  002D98  0100               	movlb	0	; () banked
  3120  002D9A  51B6               	movf	Loading@i& (0+255),w,b
  3121  002D9C  0800               	sublw	0
  3122  002D9E  0F2D               	addlw	45
  3123  002DA0  ECA3  F022         	call	_delay_ms
  3124  002DA4  0100               	movlb	0	; () banked
  3125  002DA6  4BB6               	infsnz	Loading@i& (0+255),f,b
  3126  002DA8  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3127                           
  3128                           ; BSR set to: 0
  3129  002DAA  0100               	movlb	0	; () banked
  3130  002DAC  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3131  002DAE  D7E3               	goto	l6366
  3132  002DB0  0100               	movlb	0	; () banked
  3133  002DB2  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3134  002DB4  E101               	bnz	u4830
  3135  002DB6  D7DA               	goto	L1
  3136  002DB8                     u4830:
  3137  002DB8                     l721:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;sort.c: 87: }
  3141                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3142  002DB8  8A89               	bsf	3977,5,c	;volatile
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;sort.c: 91: initServos();
  3146  002DBA  EC76  F01F         	call	_initServos	;wreg free
  3147                           
  3148                           ;sort.c: 92: }
  3149  002DBE  0012               	return	
  3150  002DC0                     l6376:
  3151                           
  3152                           ;sort.c: 93: else{
  3153                           ;sort.c: 96: if(!f_loadingNewCan){
  3154  002DC0  0100               	movlb	0	; () banked
  3155  002DC2  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3156  002DC4  0100               	movlb	0	; () banked
  3157  002DC6  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3158  002DC8  A4D8               	btfss	status,2,c
  3159  002DCA  D017               	goto	l6392
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 98: getIR();
  3163  002DCC  EC1E  F020         	call	_getIR	;wreg free
  3164                           
  3165                           ;sort.c: 100: if(!f_loadingNewCan){
  3166  002DD0  0100               	movlb	0	; () banked
  3167  002DD2  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3168  002DD4  0100               	movlb	0	; () banked
  3169  002DD6  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3170  002DD8  B4D8               	btfsc	status,2,c
  3171  002DDA  0012               	return	
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;sort.c: 104: else{
  3175                           ;sort.c: 105: count_total++;
  3176                           
  3177                           ; BSR set to: 0
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;sort.c: 102: }
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;sort.c: 101: return;
  3184  002DDC  0100               	movlb	0	; () banked
  3185  002DDE  4BFE               	infsnz	_count_total& (0+255),f,b
  3186  002DE0  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;sort.c: 106: if(count_total == 12){
  3190  002DE2  0E0C               	movlw	12
  3191  002DE4  0100               	movlb	0	; () banked
  3192  002DE6  19FE               	xorwf	_count_total& (0+255),w,b
  3193  002DE8  0100               	movlb	0	; () banked
  3194  002DEA  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3195  002DEC  A4D8               	btfss	status,2,c
  3196  002DEE  0012               	return	
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 107: f_lastCan = 1;
  3200  002DF0  0E00               	movlw	0
  3201  002DF2  6E74               	movwf	_f_lastCan+1,c
  3202  002DF4  0E01               	movlw	1
  3203  002DF6  6E73               	movwf	_f_lastCan,c
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 108: }
  3207                           ;sort.c: 109: }
  3208                           ;sort.c: 110: }
  3209                           
  3210                           ; BSR set to: 0
  3211  002DF8  0012               	return	
  3212  002DFA                     l6392:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 113: else if(f_ID_receive){
  3216  002DFA  506D               	movf	_f_ID_receive,w,c
  3217  002DFC  106E               	iorwf	_f_ID_receive+1,w,c
  3218  002DFE  B4D8               	btfsc	status,2,c
  3219  002E00  0012               	return	
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;sort.c: 114: f_loadingNewCan = 0;
  3223  002E02  0E00               	movlw	0
  3224  002E04  0100               	movlb	0	; () banked
  3225  002E06  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3226  002E08  0E00               	movlw	0
  3227  002E0A  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3231  002E0C  8889               	bsf	3977,4,c	;volatile
  3232                           
  3233                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3234  002E0E  0E00               	movlw	0
  3235  002E10  6E70               	movwf	_f_can_coming_to_ID+1,c
  3236  002E12  0E01               	movlw	1
  3237  002E14  6E6F               	movwf	_f_can_coming_to_ID,c
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3241  002E16  0E0D               	movlw	13
  3242  002E18  0100               	movlb	0	; () banked
  3243  002E1A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3244  002E1C  0E2D               	movlw	45
  3245  002E1E  0100               	movlb	0	; () banked
  3246  002E20  6FB1               	movwf	??_Loading& (0+255),b
  3247  002E22  0ED7               	movlw	215
  3248  002E24                     u7067:
  3249  002E24  2EE8               	decfsz	wreg,f,c
  3250  002E26  D7FE               	bra	u7067
  3251  002E28  2FB1               	decfsz	??_Loading& (0+255),f,b
  3252  002E2A  D7FC               	bra	u7067
  3253  002E2C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3254  002E2E  D7FA               	bra	u7067
  3255  002E30  D000               	nop2	
  3256                           
  3257                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3258  002E32  9889               	bcf	3977,4,c	;volatile
  3259  002E34  0012               	return	
  3260  002E36                     __end_of_Loading:
  3261                           	opt stack 0
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           prodh	equ	0xFF4
  3267                           prodl	equ	0xFF3
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           postdec1	equ	0xFE5
  3271                           fsr1l	equ	0xFE1
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _initSortTimer *****************
  3275 ;; Defined at:
  3276 ;;		line 243 in file "sort.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;		None
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  i               2    8[BANK0 ] int 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        5 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:   10
  3297 ;; This function calls:
  3298 ;;		_getRTC
  3299 ;; This function is called by:
  3300 ;;		_Loading
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text4
  3305  003706                     __ptext4:
  3306                           	opt stack 0
  3307  003706                     _initSortTimer:
  3308                           	opt stack 18
  3309                           
  3310                           ;sort.c: 245: getRTC();
  3311                           
  3312                           ;incstack = 0
  3313  003706  EC49  F01D         	call	_getRTC	;wreg free
  3314                           
  3315                           ;sort.c: 246: for(int i = 0; i < 7; i++){
  3316  00370A  0E00               	movlw	0
  3317  00370C  0100               	movlb	0	; () banked
  3318  00370E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3319  003710  0E00               	movlw	0
  3320  003712  6F88               	movwf	initSortTimer@i& (0+255),b
  3321  003714                     l5972:
  3322                           
  3323                           ; BSR set to: 0
  3324  003714  0100               	movlb	0	; () banked
  3325  003716  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3326  003718  D008               	goto	l5976
  3327  00371A  0100               	movlb	0	; () banked
  3328  00371C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3329  00371E  E140               	bnz	l5982
  3330  003720  0E07               	movlw	7
  3331  003722  0100               	movlb	0	; () banked
  3332  003724  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3333  003726  B0D8               	btfsc	status,0,c
  3334  003728  D03B               	goto	l5982
  3335  00372A                     l5976:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 247: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3339  00372A  0E24               	movlw	low _time
  3340  00372C  0100               	movlb	0	; () banked
  3341  00372E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3342  003730  6ED9               	movwf	fsr2l,c
  3343  003732  0E01               	movlw	high _time
  3344  003734  0100               	movlb	0	; () banked
  3345  003736  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3346  003738  6EDA               	movwf	fsr2h,c
  3347  00373A  50DF               	movf	indf2,w,c
  3348  00373C  0100               	movlb	0	; () banked
  3349  00373E  6F85               	movwf	??_initSortTimer& (0+255),b
  3350  003740  0100               	movlb	0	; () banked
  3351  003742  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3352  003744  0E0F               	movlw	15
  3353  003746  1785               	andwf	??_initSortTimer& (0+255),f,b
  3354  003748  0E0F               	movlw	15
  3355  00374A  0100               	movlb	0	; () banked
  3356  00374C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3357  00374E  0100               	movlb	0	; () banked
  3358  003750  5185               	movf	??_initSortTimer& (0+255),w,b
  3359  003752  0D0A               	mullw	10
  3360  003754  0E24               	movlw	low _time
  3361  003756  0100               	movlb	0	; () banked
  3362  003758  2588               	addwf	initSortTimer@i& (0+255),w,b
  3363  00375A  6ED9               	movwf	fsr2l,c
  3364  00375C  0E01               	movlw	high _time
  3365  00375E  0100               	movlb	0	; () banked
  3366  003760  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3367  003762  6EDA               	movwf	fsr2h,c
  3368  003764  50DF               	movf	indf2,w,c
  3369  003766  0B0F               	andlw	15
  3370  003768  0100               	movlb	0	; () banked
  3371  00376A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3372  00376C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3373  00376E  50F3               	movf	prodl,w,c
  3374  003770  0100               	movlb	0	; () banked
  3375  003772  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3376  003774  50F4               	movf	prodh,w,c
  3377  003776  0100               	movlb	0	; () banked
  3378  003778  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3379  00377A  90D8               	bcf	status,0,c
  3380  00377C  0100               	movlb	0	; () banked
  3381  00377E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3382  003780  6ED9               	movwf	fsr2l,c
  3383  003782  0100               	movlb	0	; () banked
  3384  003784  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3385  003786  6EDA               	movwf	fsr2h,c
  3386  003788  0E0E               	movlw	low _startTime
  3387  00378A  26D9               	addwf	fsr2l,f,c
  3388  00378C  0E01               	movlw	high _startTime
  3389  00378E  22DA               	addwfc	fsr2h,f,c
  3390  003790  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3391  003794  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3392                           
  3393                           ; BSR set to: 0
  3394  003798  0100               	movlb	0	; () banked
  3395  00379A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3396  00379C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3397  00379E  D7BA               	goto	l5972
  3398  0037A0                     l5982:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;sort.c: 248: }
  3402                           ;sort.c: 250: T0CON = 0b00010111;
  3403  0037A0  0E17               	movlw	23
  3404  0037A2  6ED5               	movwf	4053,c	;volatile
  3405                           
  3406                           ;sort.c: 259: TMR0H = 0b10000101;
  3407  0037A4  0E85               	movlw	133
  3408  0037A6  6ED7               	movwf	4055,c	;volatile
  3409                           
  3410                           ;sort.c: 260: TMR0L = 0b11101110;
  3411  0037A8  0EEE               	movlw	238
  3412  0037AA  6ED6               	movwf	4054,c	;volatile
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;sort.c: 261: TMR0ON = 1;
  3416  0037AC  8ED5               	bsf	4053,7,c	;volatile
  3417                           
  3418                           ; BSR set to: 0
  3419  0037AE  0012               	return		;funcret
  3420  0037B0                     __end_of_initSortTimer:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _initGlobalVars *****************
  3440 ;; Defined at:
  3441 ;;		line 224 in file "sort.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        0 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    7
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_Loading
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text5
  3470  003CFC                     __ptext5:
  3471                           	opt stack 0
  3472  003CFC                     _initGlobalVars:
  3473                           	opt stack 21
  3474                           
  3475                           ;sort.c: 226: first = 0;
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;incstack = 0
  3479  003CFC  0E00               	movlw	0
  3480  003CFE  0100               	movlb	0	; () banked
  3481  003D00  6FE3               	movwf	(_first+1)& (0+255),b
  3482  003D02  0E00               	movlw	0
  3483  003D04  6FE2               	movwf	_first& (0+255),b
  3484                           
  3485                           ;sort.c: 229: f_loadingNewCan = 0;
  3486  003D06  0E00               	movlw	0
  3487  003D08  0100               	movlb	0	; () banked
  3488  003D0A  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3489  003D0C  0E00               	movlw	0
  3490  003D0E  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3491                           
  3492                           ;sort.c: 230: f_lastCan = 0;
  3493  003D10  0E00               	movlw	0
  3494  003D12  6E74               	movwf	_f_lastCan+1,c
  3495  003D14  0E00               	movlw	0
  3496  003D16  6E73               	movwf	_f_lastCan,c
  3497                           
  3498                           ;sort.c: 231: f_ID_receive = 1;
  3499  003D18  0E00               	movlw	0
  3500  003D1A  6E6E               	movwf	_f_ID_receive+1,c
  3501  003D1C  0E01               	movlw	1
  3502  003D1E  6E6D               	movwf	_f_ID_receive,c
  3503                           
  3504                           ;sort.c: 232: f_can_coming_to_ID = 0;
  3505  003D20  0E00               	movlw	0
  3506  003D22  6E70               	movwf	_f_can_coming_to_ID+1,c
  3507  003D24  0E00               	movlw	0
  3508  003D26  6E6F               	movwf	_f_can_coming_to_ID,c
  3509                           
  3510                           ;sort.c: 233: f_can_coming_to_distribution = 0;
  3511  003D28  0E00               	movlw	0
  3512  003D2A  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3513  003D2C  0E00               	movlw	0
  3514  003D2E  6E71               	movwf	_f_can_coming_to_distribution,c
  3515                           
  3516                           ;sort.c: 234: f_can_distributed = 0;
  3517  003D30  0E00               	movlw	0
  3518  003D32  0101               	movlb	1	; () banked
  3519  003D34  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3520  003D36  0E00               	movlw	0
  3521  003D38  6F2D               	movwf	_f_can_distributed& (0+255),b
  3522                           
  3523                           ;sort.c: 237: count_total = 0;
  3524  003D3A  0E00               	movlw	0
  3525  003D3C  0100               	movlb	0	; () banked
  3526  003D3E  6FFF               	movwf	(_count_total+1)& (0+255),b
  3527  003D40  0E00               	movlw	0
  3528  003D42  6FFE               	movwf	_count_total& (0+255),b
  3529                           
  3530                           ;sort.c: 238: count_pop_no_tab = 0;
  3531  003D44  0E00               	movlw	0
  3532  003D46  6E62               	movwf	_count_pop_no_tab+1,c
  3533  003D48  0E00               	movlw	0
  3534  003D4A  6E61               	movwf	_count_pop_no_tab,c
  3535                           
  3536                           ;sort.c: 239: count_pop_w_tab = 0;
  3537  003D4C  0E00               	movlw	0
  3538  003D4E  6E64               	movwf	_count_pop_w_tab+1,c
  3539  003D50  0E00               	movlw	0
  3540  003D52  6E63               	movwf	_count_pop_w_tab,c
  3541                           
  3542                           ;sort.c: 240: count_can_w_lab = 0;
  3543  003D54  0E00               	movlw	0
  3544  003D56  6E60               	movwf	_count_can_w_lab+1,c
  3545  003D58  0E00               	movlw	0
  3546  003D5A  6E5F               	movwf	_count_can_w_lab,c
  3547                           
  3548                           ;sort.c: 241: count_can_no_lab = 0;
  3549  003D5C  0E00               	movlw	0
  3550  003D5E  6E5E               	movwf	_count_can_no_lab+1,c
  3551  003D60  0E00               	movlw	0
  3552  003D62  6E5D               	movwf	_count_can_no_lab,c
  3553                           
  3554                           ; BSR set to: 0
  3555  003D64  0012               	return		;funcret
  3556  003D66                     __end_of_initGlobalVars:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           postinc0	equ	0xFEE
  3565                           wreg	equ	0xFE8
  3566                           postdec1	equ	0xFE5
  3567                           fsr1l	equ	0xFE1
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _getIR *****************
  3576 ;; Defined at:
  3577 ;;		line 300 in file "sort.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;Total ram usage:        2 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    9
  3598 ;; This function calls:
  3599 ;;		_readIR
  3600 ;; This function is called by:
  3601 ;;		_Loading
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text6
  3606  00403C                     __ptext6:
  3607                           	opt stack 0
  3608  00403C                     _getIR:
  3609                           	opt stack 19
  3610                           
  3611                           ;sort.c: 301: readIR();
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;incstack = 0
  3615  00403C  EC45  F020         	call	_readIR	;wreg free
  3616                           
  3617                           ;sort.c: 302: if(IR_signal==1){
  3618  004040  0100               	movlb	0	; () banked
  3619  004042  05DA               	decf	_IR_signal& (0+255),w,b
  3620  004044  0100               	movlb	0	; () banked
  3621  004046  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3622  004048  A4D8               	btfss	status,2,c
  3623  00404A  0012               	return	
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;sort.c: 303: _delay((unsigned long)((100)*(32000000/4000.0)));
  3627  00404C  0E05               	movlw	5
  3628  00404E  0100               	movlb	0	; () banked
  3629  004050  6F87               	movwf	(??_getIR+1)& (0+255),b
  3630  004052  0E0F               	movlw	15
  3631  004054  0100               	movlb	0	; () banked
  3632  004056  6F86               	movwf	??_getIR& (0+255),b
  3633  004058  0EF1               	movlw	241
  3634  00405A                     u7077:
  3635  00405A  2EE8               	decfsz	wreg,f,c
  3636  00405C  D7FE               	bra	u7077
  3637  00405E  2F86               	decfsz	??_getIR& (0+255),f,b
  3638  004060  D7FC               	bra	u7077
  3639  004062  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3640  004064  D7FA               	bra	u7077
  3641                           
  3642                           ;sort.c: 304: if(IR_signal==1){
  3643  004066  0100               	movlb	0	; () banked
  3644  004068  05DA               	decf	_IR_signal& (0+255),w,b
  3645  00406A  0100               	movlb	0	; () banked
  3646  00406C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3647  00406E  A4D8               	btfss	status,2,c
  3648  004070  D006               	goto	l6070
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;sort.c: 305: f_loadingNewCan = 1;
  3652  004072  0E00               	movlw	0
  3653  004074  0100               	movlb	0	; () banked
  3654  004076  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3655  004078  0E01               	movlw	1
  3656  00407A  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3657                           
  3658                           ;sort.c: 306: }
  3659  00407C  0012               	return	
  3660  00407E                     l6070:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;sort.c: 307: else{
  3664                           ;sort.c: 308: f_loadingNewCan = 0;
  3665  00407E  0E00               	movlw	0
  3666  004080  0100               	movlb	0	; () banked
  3667  004082  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3668  004084  0E00               	movlw	0
  3669  004086  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672  004088  0012               	return	
  3673  00408A                     __end_of_getIR:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           postinc0	equ	0xFEE
  3682                           wreg	equ	0xFE8
  3683                           postdec1	equ	0xFE5
  3684                           fsr1l	equ	0xFE1
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _readIR *****************
  3693 ;; Defined at:
  3694 ;;		line 23 in file "ADCFunctionality.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  res             2    4[BANK0 ] int 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;Total ram usage:        4 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    8
  3715 ;; This function calls:
  3716 ;;		_readADC
  3717 ;; This function is called by:
  3718 ;;		_getIR
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text7
  3723  00408A                     __ptext7:
  3724                           	opt stack 0
  3725  00408A                     _readIR:
  3726                           	opt stack 19
  3727                           
  3728                           ;ADCFunctionality.c: 24: readADC(0);
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;incstack = 0
  3732  00408A  0E00               	movlw	0
  3733  00408C  EC78  F022         	call	_readADC
  3734                           
  3735                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3736  004090  50C3               	movf	4035,w,c	;volatile
  3737  004092  CFC4 F082          	movff	4036,??_readIR	;volatile
  3738  004096  0100               	movlb	0	; () banked
  3739  004098  6B83               	clrf	(??_readIR+1)& (0+255),b
  3740  00409A  C082  F083         	movff	??_readIR,??_readIR+1
  3741  00409E  0100               	movlb	0	; () banked
  3742  0040A0  6B82               	clrf	??_readIR& (0+255),b
  3743  0040A2  0100               	movlb	0	; () banked
  3744  0040A4  1182               	iorwf	??_readIR& (0+255),w,b
  3745  0040A6  0100               	movlb	0	; () banked
  3746  0040A8  6F84               	movwf	readIR@res& (0+255),b
  3747  0040AA  0100               	movlb	0	; () banked
  3748  0040AC  5183               	movf	(??_readIR+1)& (0+255),w,b
  3749  0040AE  0100               	movlb	0	; () banked
  3750  0040B0  6F85               	movwf	(readIR@res+1)& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3754  0040B2  0100               	movlb	0	; () banked
  3755  0040B4  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3756  0040B6  D00A               	goto	u3780
  3757  0040B8  0E85               	movlw	133
  3758  0040BA  0100               	movlb	0	; () banked
  3759  0040BC  5D84               	subwf	readIR@res& (0+255),w,b
  3760  0040BE  0E03               	movlw	3
  3761  0040C0  0100               	movlb	0	; () banked
  3762  0040C2  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3763  0040C4  A0D8               	btfss	status,0,c
  3764  0040C6  D002               	goto	u3780
  3765  0040C8  0E01               	movlw	1
  3766  0040CA  D001               	goto	u3790
  3767  0040CC                     u3780:
  3768  0040CC  0E00               	movlw	0
  3769  0040CE                     u3790:
  3770  0040CE  0100               	movlb	0	; () banked
  3771  0040D0  6FDA               	movwf	_IR_signal& (0+255),b
  3772  0040D2  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775  0040D4  0012               	return		;funcret
  3776  0040D6                     __end_of_readIR:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodh	equ	0xFF4
  3783                           prodl	equ	0xFF3
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           postdec1	equ	0xFE5
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function _delay_ms *****************
  3796 ;; Defined at:
  3797 ;;		line 325 in file "sort.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  milliseconds    1    wreg     unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:        2 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    7
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_Loading
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text8
  3826  004546                     __ptext8:
  3827                           	opt stack 0
  3828  004546                     _delay_ms:
  3829                           	opt stack 21
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;incstack = 0
  3833                           ;delay_ms@milliseconds stored from wreg
  3834  004546  0100               	movlb	0	; () banked
  3835  004548  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3836                           
  3837                           ;sort.c: 326: while(milliseconds > 0)
  3838  00454A  D00B               	goto	l6044
  3839  00454C                     l6040:
  3840                           
  3841                           ;sort.c: 327: {
  3842                           ;sort.c: 328: milliseconds--;
  3843  00454C  0100               	movlb	0	; () banked
  3844  00454E  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;sort.c: 329: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3848  004550  0E0B               	movlw	11
  3849  004552  0100               	movlb	0	; () banked
  3850  004554  6F80               	movwf	??_delay_ms& (0+255),b
  3851  004556  0E47               	movlw	71
  3852  004558                     u7087:
  3853  004558  2EE8               	decfsz	wreg,f,c
  3854  00455A  D7FE               	bra	u7087
  3855  00455C  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3856  00455E  D7FC               	bra	u7087
  3857  004560  D000               	nop2	
  3858  004562                     l6044:
  3859  004562  0100               	movlb	0	; () banked
  3860  004564  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3861  004566  0100               	movlb	0	; () banked
  3862  004568  B4D8               	btfsc	status,2,c
  3863  00456A  0012               	return	
  3864  00456C  D7EF               	goto	l6040
  3865  00456E                     __end_of_delay_ms:
  3866                           	opt stack 0
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           prodh	equ	0xFF4
  3872                           prodl	equ	0xFF3
  3873                           postinc0	equ	0xFEE
  3874                           wreg	equ	0xFE8
  3875                           postdec1	equ	0xFE5
  3876                           fsr1l	equ	0xFE1
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _ID *****************
  3885 ;; Defined at:
  3886 ;;		line 122 in file "sort.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  i               2    8[BANK0 ] int 
  3891 ;;  sensor_outpu    6   10[BANK0 ] int [3]
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:       10 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    9
  3908 ;; This function calls:
  3909 ;;		_readMAG
  3910 ;; This function is called by:
  3911 ;;		_sort
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text9
  3916  002B8E                     __ptext9:
  3917                           	opt stack 0
  3918  002B8E                     _ID:
  3919                           	opt stack 20
  3920                           
  3921                           ;sort.c: 123: if(f_can_coming_to_ID){
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;incstack = 0
  3925  002B8E  506F               	movf	_f_can_coming_to_ID,w,c
  3926  002B90  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3927  002B92  B4D8               	btfsc	status,2,c
  3928  002B94  0012               	return	
  3929                           
  3930                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3931  002B96  0E15               	movlw	21
  3932  002B98  0100               	movlb	0	; () banked
  3933  002B9A  6F87               	movwf	(??_ID+1)& (0+255),b
  3934  002B9C  0E4B               	movlw	75
  3935  002B9E  0100               	movlb	0	; () banked
  3936  002BA0  6F86               	movwf	??_ID& (0+255),b
  3937  002BA2  0EBE               	movlw	190
  3938  002BA4                     u7097:
  3939  002BA4  2EE8               	decfsz	wreg,f,c
  3940  002BA6  D7FE               	bra	u7097
  3941  002BA8  2F86               	decfsz	??_ID& (0+255),f,b
  3942  002BAA  D7FC               	bra	u7097
  3943  002BAC  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3944  002BAE  D7FA               	bra	u7097
  3945  002BB0  F000               	nop	
  3946                           
  3947                           ;sort.c: 130: int sensor_outputs[3];
  3948                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3949  002BB2  A480               	btfss	3968,2,c	;volatile
  3950  002BB4  D004               	goto	u4890
  3951  002BB6  0100               	movlb	0	; () banked
  3952  002BB8  6B86               	clrf	??_ID& (0+255),b
  3953  002BBA  2B86               	incf	??_ID& (0+255),f,b
  3954  002BBC  D002               	goto	u4898
  3955  002BBE                     u4890:
  3956  002BBE  0100               	movlb	0	; () banked
  3957  002BC0  6B86               	clrf	??_ID& (0+255),b
  3958  002BC2                     u4898:
  3959  002BC2  0100               	movlb	0	; () banked
  3960  002BC4  5186               	movf	??_ID& (0+255),w,b
  3961  002BC6  0100               	movlb	0	; () banked
  3962  002BC8  6F8A               	movwf	ID@sensor_outputs& (0+255),b
  3963  002BCA  6B8B               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;sort.c: 136: if(!sensor_outputs[0]){
  3967  002BCC  0100               	movlb	0	; () banked
  3968  002BCE  518A               	movf	ID@sensor_outputs& (0+255),w,b
  3969  002BD0  0100               	movlb	0	; () banked
  3970  002BD2  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3971  002BD4  A4D8               	btfss	status,2,c
  3972  002BD6  D029               	goto	l6424
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;sort.c: 137: readMAG();
  3976  002BD8  EC6B  F020         	call	_readMAG	;wreg free
  3977                           
  3978                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3979  002BDC  C0DC  F08C         	movff	_MAG_signal,ID@sensor_outputs+2
  3980  002BE0  C0DD  F08D         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3981                           
  3982                           ;sort.c: 139: if(!sensor_outputs[1]){
  3983  002BE4  0100               	movlb	0	; () banked
  3984  002BE6  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3985  002BE8  0100               	movlb	0	; () banked
  3986  002BEA  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3987  002BEC  A4D8               	btfss	status,2,c
  3988  002BEE  D01D               	goto	l6424
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3992  002BF0  8689               	bsf	3977,3,c	;volatile
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3996  002BF2  0E0D               	movlw	13
  3997  002BF4  0100               	movlb	0	; () banked
  3998  002BF6  6F87               	movwf	(??_ID+1)& (0+255),b
  3999  002BF8  0E2D               	movlw	45
  4000  002BFA  0100               	movlb	0	; () banked
  4001  002BFC  6F86               	movwf	??_ID& (0+255),b
  4002  002BFE  0ED7               	movlw	215
  4003  002C00                     u7107:
  4004  002C00  2EE8               	decfsz	wreg,f,c
  4005  002C02  D7FE               	bra	u7107
  4006  002C04  2F86               	decfsz	??_ID& (0+255),f,b
  4007  002C06  D7FC               	bra	u7107
  4008  002C08  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4009  002C0A  D7FA               	bra	u7107
  4010  002C0C  D000               	nop2	
  4011                           
  4012                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  4013  002C0E  A480               	btfss	3968,2,c	;volatile
  4014  002C10  D004               	goto	u4920
  4015  002C12  0100               	movlb	0	; () banked
  4016  002C14  6B86               	clrf	??_ID& (0+255),b
  4017  002C16  2B86               	incf	??_ID& (0+255),f,b
  4018  002C18  D002               	goto	u4928
  4019  002C1A                     u4920:
  4020  002C1A  0100               	movlb	0	; () banked
  4021  002C1C  6B86               	clrf	??_ID& (0+255),b
  4022  002C1E                     u4928:
  4023  002C1E  0100               	movlb	0	; () banked
  4024  002C20  5186               	movf	??_ID& (0+255),w,b
  4025  002C22  0100               	movlb	0	; () banked
  4026  002C24  6F8E               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4027  002C26  6B8F               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4031  002C28  9689               	bcf	3977,3,c	;volatile
  4032  002C2A                     l6424:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 145: }
  4036                           ;sort.c: 146: }
  4037                           ;sort.c: 149: if(!sensor_outputs[0]){
  4038  002C2A  0100               	movlb	0	; () banked
  4039  002C2C  518A               	movf	ID@sensor_outputs& (0+255),w,b
  4040  002C2E  0100               	movlb	0	; () banked
  4041  002C30  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4042  002C32  A4D8               	btfss	status,2,c
  4043  002C34  D01E               	goto	l6442
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;sort.c: 150: if(!sensor_outputs[1]){
  4047  002C36  0100               	movlb	0	; () banked
  4048  002C38  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4049  002C3A  0100               	movlb	0	; () banked
  4050  002C3C  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4051  002C3E  A4D8               	btfss	status,2,c
  4052  002C40  D012               	goto	l6438
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 151: if(!sensor_outputs[2]){
  4056  002C42  0100               	movlb	0	; () banked
  4057  002C44  518E               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4058  002C46  0100               	movlb	0	; () banked
  4059  002C48  118F               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4060  002C4A  A4D8               	btfss	status,2,c
  4061  002C4C  D006               	goto	l6434
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;sort.c: 152: count_pop_no_tab++;
  4065  002C4E  4A61               	infsnz	_count_pop_no_tab,f,c
  4066  002C50  2A62               	incf	_count_pop_no_tab+1,f,c
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 153: cur_can = 0;
  4070  002C52  0E00               	movlw	0
  4071  002C54  6E66               	movwf	_cur_can+1,c
  4072  002C56  0E00               	movlw	0
  4073  002C58  D011               	goto	L4
  4074  002C5A                     l6434:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;sort.c: 155: else{
  4078                           ;sort.c: 156: count_pop_w_tab++;
  4079  002C5A  4A63               	infsnz	_count_pop_w_tab,f,c
  4080  002C5C  2A64               	incf	_count_pop_w_tab+1,f,c
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;sort.c: 157: cur_can = 1;
  4084  002C5E  0E00               	movlw	0
  4085  002C60  6E66               	movwf	_cur_can+1,c
  4086  002C62  0E01               	movlw	1
  4087  002C64  D00B               	goto	L4
  4088  002C66                     l6438:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;sort.c: 160: else{
  4092                           ;sort.c: 161: count_can_w_lab++;
  4093  002C66  4A5F               	infsnz	_count_can_w_lab,f,c
  4094  002C68  2A60               	incf	_count_can_w_lab+1,f,c
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;sort.c: 162: cur_can = 2;
  4098  002C6A  0E00               	movlw	0
  4099  002C6C  6E66               	movwf	_cur_can+1,c
  4100  002C6E  0E02               	movlw	2
  4101  002C70  D005               	goto	L4
  4102  002C72                     l6442:
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;sort.c: 165: else{
  4106                           ;sort.c: 166: count_can_no_lab++;
  4107  002C72  4A5D               	infsnz	_count_can_no_lab,f,c
  4108  002C74  2A5E               	incf	_count_can_no_lab+1,f,c
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;sort.c: 167: cur_can = 3;
  4112  002C76  0E00               	movlw	0
  4113  002C78  6E66               	movwf	_cur_can+1,c
  4114  002C7A  0E03               	movlw	3
  4115  002C7C                     L4:
  4116  002C7C  6E65               	movwf	_cur_can,c
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;sort.c: 168: }
  4120                           ;sort.c: 172: for(int i=0;i<10000;i++)
  4121                           
  4122                           ; BSR set to: 0
  4123  002C7E  0E00               	movlw	0
  4124  002C80  0100               	movlb	0	; () banked
  4125  002C82  6F89               	movwf	(ID@i+1)& (0+255),b
  4126  002C84  0E00               	movlw	0
  4127  002C86  6F88               	movwf	ID@i& (0+255),b
  4128  002C88                     l6448:
  4129                           
  4130                           ; BSR set to: 0
  4131  002C88  0100               	movlb	0	; () banked
  4132  002C8A  BF89               	btfsc	(ID@i+1)& (0+255),7,b
  4133  002C8C  D008               	goto	l741
  4134  002C8E  0E10               	movlw	16
  4135  002C90  0100               	movlb	0	; () banked
  4136  002C92  5D88               	subwf	ID@i& (0+255),w,b
  4137  002C94  0E27               	movlw	39
  4138  002C96  0100               	movlb	0	; () banked
  4139  002C98  5989               	subwfb	(ID@i+1)& (0+255),w,b
  4140  002C9A  B0D8               	btfsc	status,0,c
  4141  002C9C  D00D               	goto	l6458
  4142  002C9E                     l741:
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;sort.c: 173: {
  4146                           ;sort.c: 174: LATCbits.LATC0 = 1;
  4147  002C9E  808B               	bsf	3979,0,c	;volatile
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;sort.c: 175: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4151  002CA0  0E1A               	movlw	26
  4152  002CA2                     u7117:
  4153  002CA2  2EE8               	decfsz	wreg,f,c
  4154  002CA4  D7FE               	bra	u7117
  4155  002CA6  D000               	nop2	
  4156                           
  4157                           ;sort.c: 176: LATCbits.LATC0 = 0;
  4158  002CA8  908B               	bcf	3979,0,c	;volatile
  4159                           
  4160                           ;sort.c: 177: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4161  002CAA  0EF0               	movlw	240
  4162  002CAC                     u7127:
  4163  002CAC  2EE8               	decfsz	wreg,f,c
  4164  002CAE  D7FE               	bra	u7127
  4165  002CB0  0100               	movlb	0	; () banked
  4166  002CB2  4B88               	infsnz	ID@i& (0+255),f,b
  4167  002CB4  2B89               	incf	(ID@i+1)& (0+255),f,b
  4168  002CB6  D7E8               	goto	l6448
  4169  002CB8                     l6458:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 178: }
  4173                           ;sort.c: 180: f_can_coming_to_distribution = 1;
  4174  002CB8  0E00               	movlw	0
  4175  002CBA  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4176  002CBC  0E01               	movlw	1
  4177  002CBE  6E71               	movwf	_f_can_coming_to_distribution,c
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;sort.c: 181: _delay((unsigned long)((500)*(32000000/4000.0)));
  4181  002CC0  0E15               	movlw	21
  4182  002CC2  0100               	movlb	0	; () banked
  4183  002CC4  6F87               	movwf	(??_ID+1)& (0+255),b
  4184  002CC6  0E4B               	movlw	75
  4185  002CC8  0100               	movlb	0	; () banked
  4186  002CCA  6F86               	movwf	??_ID& (0+255),b
  4187  002CCC  0EBE               	movlw	190
  4188  002CCE                     u7137:
  4189  002CCE  2EE8               	decfsz	wreg,f,c
  4190  002CD0  D7FE               	bra	u7137
  4191  002CD2  2F86               	decfsz	??_ID& (0+255),f,b
  4192  002CD4  D7FC               	bra	u7137
  4193  002CD6  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4194  002CD8  D7FA               	bra	u7137
  4195  002CDA  F000               	nop	
  4196                           
  4197                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4198  002CDC  808B               	bsf	3979,0,c	;volatile
  4199                           
  4200                           ;sort.c: 184: f_can_coming_to_ID = 0;
  4201  002CDE  0E00               	movlw	0
  4202  002CE0  6E70               	movwf	_f_can_coming_to_ID+1,c
  4203  002CE2  0E00               	movlw	0
  4204  002CE4  6E6F               	movwf	_f_can_coming_to_ID,c
  4205  002CE6  0012               	return	
  4206  002CE8                     __end_of_ID:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           postinc0	equ	0xFEE
  4215                           wreg	equ	0xFE8
  4216                           postdec1	equ	0xFE5
  4217                           fsr1l	equ	0xFE1
  4218                           indf2	equ	0xFDF
  4219                           postinc2	equ	0xFDE
  4220                           postdec2	equ	0xFDD
  4221                           fsr2h	equ	0xFDA
  4222                           fsr2l	equ	0xFD9
  4223                           status	equ	0xFD8
  4224                           
  4225 ;; *************** function _Distribution *****************
  4226 ;; Defined at:
  4227 ;;		line 187 in file "sort.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;Total ram usage:        2 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    8
  4248 ;; This function calls:
  4249 ;;		_updateServoPosition
  4250 ;; This function is called by:
  4251 ;;		_sort
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text10
  4256  002E36                     __ptext10:
  4257                           	opt stack 0
  4258  002E36                     _Distribution:
  4259                           	opt stack 21
  4260                           
  4261                           ;sort.c: 188: if(f_can_coming_to_distribution){
  4262                           
  4263                           ;incstack = 0
  4264  002E36  5071               	movf	_f_can_coming_to_distribution,w,c
  4265  002E38  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4266  002E3A  B4D8               	btfsc	status,2,c
  4267  002E3C  0012               	return	
  4268  002E3E  D034               	goto	l6480
  4269  002E40                     l6470:
  4270                           
  4271                           ;sort.c: 193: updateServoPosition(500, 1);
  4272  002E40  0E01               	movlw	1
  4273  002E42  0100               	movlb	0	; () banked
  4274  002E44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4275  002E46  0EF4               	movlw	244
  4276  002E48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4277  002E4A  0E00               	movlw	0
  4278  002E4C  0100               	movlb	0	; () banked
  4279  002E4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4280  002E50  0E01               	movlw	1
  4281  002E52  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4282  002E54  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4283                           
  4284                           ;sort.c: 194: break;
  4285  002E58  D03E               	goto	l6482
  4286  002E5A                     l6472:
  4287                           
  4288                           ;sort.c: 196: updateServoPosition(750, 1);
  4289  002E5A  0E02               	movlw	2
  4290  002E5C  0100               	movlb	0	; () banked
  4291  002E5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4292  002E60  0EEE               	movlw	238
  4293  002E62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4294  002E64  0E00               	movlw	0
  4295  002E66  0100               	movlb	0	; () banked
  4296  002E68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4297  002E6A  0E01               	movlw	1
  4298  002E6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4299  002E6E  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4300                           
  4301                           ;sort.c: 197: break;
  4302  002E72  D031               	goto	l6482
  4303  002E74                     l6474:
  4304                           
  4305                           ;sort.c: 199: updateServoPosition(1700, 1);
  4306  002E74  0E06               	movlw	6
  4307  002E76  0100               	movlb	0	; () banked
  4308  002E78  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4309  002E7A  0EA4               	movlw	164
  4310  002E7C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4311  002E7E  0E00               	movlw	0
  4312  002E80  0100               	movlb	0	; () banked
  4313  002E82  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4314  002E84  0E01               	movlw	1
  4315  002E86  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4316  002E88  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4317                           
  4318                           ;sort.c: 200: break;
  4319  002E8C  D024               	goto	l6482
  4320  002E8E                     l6476:
  4321                           
  4322                           ;sort.c: 202: updateServoPosition(2000, 1);
  4323  002E8E  0E07               	movlw	7
  4324  002E90  0100               	movlb	0	; () banked
  4325  002E92  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4326  002E94  0ED0               	movlw	208
  4327  002E96  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4328  002E98  0E00               	movlw	0
  4329  002E9A  0100               	movlb	0	; () banked
  4330  002E9C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4331  002E9E  0E01               	movlw	1
  4332  002EA0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4333  002EA2  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4334                           
  4335                           ;sort.c: 206: }
  4336                           
  4337                           ;sort.c: 205: break;
  4338                           
  4339                           ;sort.c: 204: default:
  4340                           
  4341                           ;sort.c: 203: break;
  4342  002EA6  D017               	goto	l6482
  4343  002EA8                     l6480:
  4344  002EA8  C065  F088         	movff	_cur_can,??_Distribution
  4345  002EAC  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4346                           
  4347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4348                           ; Switch size 1, requested type "space"
  4349                           ; Number of cases is 1, Range of values is 0 to 0
  4350                           ; switch strategies available:
  4351                           ; Name         Instructions Cycles
  4352                           ; simple_byte            4     3 (average)
  4353                           ;	Chosen strategy is simple_byte
  4354  002EB0  0100               	movlb	0	; () banked
  4355  002EB2  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4356  002EB4  0A00               	xorlw	0	; case 0
  4357  002EB6  A4D8               	btfss	status,2,c
  4358  002EB8  D00E               	goto	l6482
  4359                           
  4360                           ; BSR set to: 0
  4361                           ; Switch size 1, requested type "space"
  4362                           ; Number of cases is 4, Range of values is 0 to 3
  4363                           ; switch strategies available:
  4364                           ; Name         Instructions Cycles
  4365                           ; simple_byte           13     7 (average)
  4366                           ;	Chosen strategy is simple_byte
  4367  002EBA  0100               	movlb	0	; () banked
  4368  002EBC  5188               	movf	??_Distribution& (0+255),w,b
  4369  002EBE  0A00               	xorlw	0	; case 0
  4370  002EC0  B4D8               	btfsc	status,2,c
  4371  002EC2  D7BE               	goto	l6470
  4372  002EC4  0A01               	xorlw	1	; case 1
  4373  002EC6  B4D8               	btfsc	status,2,c
  4374  002EC8  D7C8               	goto	l6472
  4375  002ECA  0A03               	xorlw	3	; case 2
  4376  002ECC  B4D8               	btfsc	status,2,c
  4377  002ECE  D7D2               	goto	l6474
  4378  002ED0  0A01               	xorlw	1	; case 3
  4379  002ED2  B4D8               	btfsc	status,2,c
  4380  002ED4  D7DC               	goto	l6476
  4381  002ED6                     l6482:
  4382                           
  4383                           ;sort.c: 207: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4384  002ED6  0E29               	movlw	41
  4385  002ED8  0100               	movlb	0	; () banked
  4386  002EDA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4387  002EDC  0E96               	movlw	150
  4388  002EDE  0100               	movlb	0	; () banked
  4389  002EE0  6F88               	movwf	??_Distribution& (0+255),b
  4390  002EE2  0E7F               	movlw	127
  4391  002EE4                     u7147:
  4392  002EE4  2EE8               	decfsz	wreg,f,c
  4393  002EE6  D7FE               	bra	u7147
  4394  002EE8  2F88               	decfsz	??_Distribution& (0+255),f,b
  4395  002EEA  D7FC               	bra	u7147
  4396  002EEC  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4397  002EEE  D7FA               	bra	u7147
  4398                           
  4399                           ;sort.c: 210: updateServoPosition(1350, 3);
  4400  002EF0  0E05               	movlw	5
  4401  002EF2  0100               	movlb	0	; () banked
  4402  002EF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4403  002EF6  0E46               	movlw	70
  4404  002EF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4405  002EFA  0E00               	movlw	0
  4406  002EFC  0100               	movlb	0	; () banked
  4407  002EFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4408  002F00  0E03               	movlw	3
  4409  002F02  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4410  002F04  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4411                           
  4412                           ;sort.c: 211: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4413  002F08  0E3D               	movlw	61
  4414  002F0A  0100               	movlb	0	; () banked
  4415  002F0C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4416  002F0E  0EE1               	movlw	225
  4417  002F10  0100               	movlb	0	; () banked
  4418  002F12  6F88               	movwf	??_Distribution& (0+255),b
  4419  002F14  0E3F               	movlw	63
  4420  002F16                     u7157:
  4421  002F16  2EE8               	decfsz	wreg,f,c
  4422  002F18  D7FE               	bra	u7157
  4423  002F1A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4424  002F1C  D7FC               	bra	u7157
  4425  002F1E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4426  002F20  D7FA               	bra	u7157
  4427  002F22  D000               	nop2	
  4428                           
  4429                           ;sort.c: 214: updateServoPosition(1200, 1);
  4430  002F24  0E04               	movlw	4
  4431  002F26  0100               	movlb	0	; () banked
  4432  002F28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4433  002F2A  0EB0               	movlw	176
  4434  002F2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4435  002F2E  0E00               	movlw	0
  4436  002F30  0100               	movlb	0	; () banked
  4437  002F32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4438  002F34  0E01               	movlw	1
  4439  002F36  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4440  002F38  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4441                           
  4442                           ;sort.c: 215: updateServoPosition(1190, 3);
  4443  002F3C  0E04               	movlw	4
  4444  002F3E  0100               	movlb	0	; () banked
  4445  002F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4446  002F42  0EA6               	movlw	166
  4447  002F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4448  002F46  0E00               	movlw	0
  4449  002F48  0100               	movlb	0	; () banked
  4450  002F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4451  002F4C  0E03               	movlw	3
  4452  002F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4453  002F50  EC0A  F01E         	call	_updateServoPosition	;wreg free
  4454                           
  4455                           ;sort.c: 216: f_can_coming_to_distribution = 0;
  4456  002F54  0E00               	movlw	0
  4457  002F56  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4458  002F58  0E00               	movlw	0
  4459  002F5A  6E71               	movwf	_f_can_coming_to_distribution,c
  4460                           
  4461                           ;sort.c: 217: f_can_distributed = 1;
  4462  002F5C  0E00               	movlw	0
  4463  002F5E  0101               	movlb	1	; () banked
  4464  002F60  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4465  002F62  0E01               	movlw	1
  4466  002F64  6F2D               	movwf	_f_can_distributed& (0+255),b
  4467                           
  4468                           ; BSR set to: 1
  4469                           ;sort.c: 218: if(f_lastCan == 1){
  4470  002F66  0473               	decf	_f_lastCan,w,c
  4471  002F68  1074               	iorwf	_f_lastCan+1,w,c
  4472  002F6A  A4D8               	btfss	status,2,c
  4473  002F6C  0012               	return	
  4474                           
  4475                           ; BSR set to: 1
  4476                           ;sort.c: 219: machine_state = DoneSorting_state;
  4477  002F6E  0E02               	movlw	2
  4478  002F70  0100               	movlb	0	; () banked
  4479  002F72  6FFC               	movwf	_machine_state& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482  002F74  0012               	return	
  4483  002F76                     __end_of_Distribution:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           postdec1	equ	0xFE5
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function _machineConfig *****************
  4503 ;; Defined at:
  4504 ;;		line 15 in file "MachineConfig.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    7
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text11
  4533  003E90                     __ptext11:
  4534                           	opt stack 0
  4535  003E90                     _machineConfig:
  4536                           	opt stack 23
  4537                           
  4538                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4539                           
  4540                           ;incstack = 0
  4541  003E90  0EF0               	movlw	240
  4542  003E92  6ED3               	movwf	4051,c	;volatile
  4543                           
  4544                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4545  003E94  8C9B               	bsf	3995,6,c	;volatile
  4546                           
  4547                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4548  003E96  0E07               	movlw	7
  4549  003E98  6E92               	movwf	3986,c	;volatile
  4550                           
  4551                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4552  003E9A  0EF2               	movlw	242
  4553  003E9C  6E93               	movwf	3987,c	;volatile
  4554                           
  4555                           ;MachineConfig.c: 27: TRISC = 0x00;
  4556  003E9E  0E00               	movlw	0
  4557  003EA0  6E94               	movwf	3988,c	;volatile
  4558                           
  4559                           ;MachineConfig.c: 31: TRISD = 0x00;
  4560  003EA2  0E00               	movlw	0
  4561  003EA4  6E95               	movwf	3989,c	;volatile
  4562                           
  4563                           ;MachineConfig.c: 34: TRISE = 0x00;
  4564  003EA6  0E00               	movlw	0
  4565  003EA8  6E96               	movwf	3990,c	;volatile
  4566                           
  4567                           ;MachineConfig.c: 37: LATA = 0x00;
  4568  003EAA  0E00               	movlw	0
  4569  003EAC  6E89               	movwf	3977,c	;volatile
  4570                           
  4571                           ;MachineConfig.c: 38: LATB = 0x00;
  4572  003EAE  0E00               	movlw	0
  4573  003EB0  6E8A               	movwf	3978,c	;volatile
  4574                           
  4575                           ;MachineConfig.c: 39: LATC = 0x00;
  4576  003EB2  0E00               	movlw	0
  4577  003EB4  6E8B               	movwf	3979,c	;volatile
  4578                           
  4579                           ;MachineConfig.c: 40: LATD = 0x00;
  4580  003EB6  0E00               	movlw	0
  4581  003EB8  6E8C               	movwf	3980,c	;volatile
  4582                           
  4583                           ;MachineConfig.c: 41: LATE = 0x00;
  4584  003EBA  0E00               	movlw	0
  4585  003EBC  6E8D               	movwf	3981,c	;volatile
  4586                           
  4587                           ;MachineConfig.c: 43: nRBPU = 0;
  4588  003EBE  9EF1               	bcf	intcon2,7,c	;volatile
  4589                           
  4590                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4591  003EC0  0E00               	movlw	0
  4592  003EC2  6EC2               	movwf	4034,c	;volatile
  4593                           
  4594                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4595  003EC4  0E0D               	movlw	13
  4596  003EC6  6EC1               	movwf	4033,c	;volatile
  4597                           
  4598                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4599  003EC8  0E00               	movlw	0
  4600  003ECA  6EB5               	movwf	4021,c	;volatile
  4601                           
  4602                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4603  003ECC  96B4               	bcf	4020,3,c	;volatile
  4604                           
  4605                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4606  003ECE  0EB1               	movlw	177
  4607  003ED0  6EC0               	movwf	4032,c	;volatile
  4608                           
  4609                           ;MachineConfig.c: 55: INT1IE = 1;
  4610  003ED2  86F0               	bsf	intcon3,3,c	;volatile
  4611                           
  4612                           ;MachineConfig.c: 57: TMR0IE = 1;
  4613  003ED4  8AF2               	bsf	intcon,5,c	;volatile
  4614                           
  4615                           ;MachineConfig.c: 58: TMR1IE = 1;
  4616  003ED6  809D               	bsf	3997,0,c	;volatile
  4617                           
  4618                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4619  003ED8  0EB0               	movlw	176
  4620  003EDA  6ECD               	movwf	4045,c	;volatile
  4621                           
  4622                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4623  003EDC  0EB0               	movlw	176
  4624  003EDE  6EB1               	movwf	4017,c	;volatile
  4625                           
  4626                           ;MachineConfig.c: 61: TMR2IE = 1;
  4627  003EE0  829D               	bsf	3997,1,c	;volatile
  4628                           
  4629                           ;MachineConfig.c: 62: TMR3IE = 1;
  4630  003EE2  82A0               	bsf	4000,1,c	;volatile
  4631                           
  4632                           ;MachineConfig.c: 63: PEIE = 1;
  4633  003EE4  8CF2               	bsf	intcon,6,c	;volatile
  4634                           
  4635                           ;MachineConfig.c: 64: ADIE = 0;
  4636  003EE6  9C9D               	bcf	3997,6,c	;volatile
  4637                           
  4638                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4639  003EE8  9EF2               	bcf	intcon,7,c	;volatile
  4640  003EEA  0012               	return		;funcret
  4641  003EEC                     __end_of_machineConfig:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           intcon3	equ	0xFF0
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           postdec1	equ	0xFE5
  4655                           fsr1l	equ	0xFE1
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _logRun *****************
  4664 ;; Defined at:
  4665 ;;		line 84 in file "EEPROM.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4670 ;;  i               2   55[BANK0 ] int 
  4671 ;;  num             1   49[BANK0 ] unsigned char 
  4672 ;;  addr            2   57[BANK0 ] unsigned short 
  4673 ;;  byte11          1   54[BANK0 ] unsigned char 
  4674 ;;  byte3           1   52[BANK0 ] unsigned char 
  4675 ;;  byte2           1   51[BANK0 ] unsigned char 
  4676 ;;  byte1           1   50[BANK0 ] unsigned char 
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;Total ram usage:       10 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:   11
  4693 ;; This function calls:
  4694 ;;		_EEPROM_read
  4695 ;;		_EEPROM_write
  4696 ;; This function is called by:
  4697 ;;		_main
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text12
  4702  002F76                     __ptext12:
  4703                           	opt stack 0
  4704  002F76                     _logRun:
  4705                           	opt stack 19
  4706                           
  4707                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4708                           
  4709                           ;incstack = 0
  4710  002F76  0E00               	movlw	0
  4711  002F78  0100               	movlb	0	; () banked
  4712  002F7A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4713  002F7C  0E00               	movlw	0
  4714  002F7E  6F80               	movwf	EEPROM_read@address& (0+255),b
  4715  002F80  EC46  F023         	call	_EEPROM_read	;wreg free
  4716  002F84  0100               	movlb	0	; () banked
  4717  002F86  6FFD               	movwf	_sel& (0+255),b
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4721  002F88  0100               	movlb	0	; () banked
  4722  002F8A  51FD               	movf	_sel& (0+255),w,b
  4723  002F8C  0D0B               	mullw	11
  4724  002F8E  0E01               	movlw	1
  4725  002F90  24F3               	addwf	prodl,w,c
  4726  002F92  0100               	movlb	0	; () banked
  4727  002F94  6FB9               	movwf	logRun@addr& (0+255),b
  4728  002F96  0E00               	movlw	0
  4729  002F98  20F4               	addwfc	prodh,w,c
  4730  002F9A  0100               	movlb	0	; () banked
  4731  002F9C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;EEPROM.c: 101: if (sel < 3){
  4735  002F9E  0E03               	movlw	3
  4736  002FA0  0100               	movlb	0	; () banked
  4737  002FA2  61FD               	cpfslt	_sel& (0+255),b
  4738  002FA4  D00E               	goto	l7938
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4742  002FA6  0100               	movlb	0	; () banked
  4743  002FA8  29FD               	incf	_sel& (0+255),w,b
  4744  002FAA  0100               	movlb	0	; () banked
  4745  002FAC  6FB1               	movwf	logRun@num& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4749  002FAE  0E00               	movlw	0
  4750  002FB0  0100               	movlb	0	; () banked
  4751  002FB2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4752  002FB4  0E00               	movlw	0
  4753  002FB6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4754  002FB8  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4755  002FBC  ECE9  F019         	call	_EEPROM_write	;wreg free
  4756                           
  4757                           ;EEPROM.c: 104: }
  4758  002FC0  D00A               	goto	l7940
  4759  002FC2                     l7938:
  4760                           
  4761                           ;EEPROM.c: 105: else{
  4762                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4763  002FC2  0E00               	movlw	0
  4764  002FC4  0100               	movlb	0	; () banked
  4765  002FC6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4766  002FC8  0E00               	movlw	0
  4767  002FCA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4768  002FCC  0E00               	movlw	0
  4769  002FCE  0100               	movlb	0	; () banked
  4770  002FD0  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4771  002FD2  ECE9  F019         	call	_EEPROM_write	;wreg free
  4772  002FD6                     l7940:
  4773                           
  4774                           ;EEPROM.c: 107: }
  4775                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4776  002FD6  0100               	movlb	0	; () banked
  4777  002FD8  51FE               	movf	_count_total& (0+255),w,b
  4778  002FDA  0980               	iorlw	128
  4779  002FDC  0100               	movlb	0	; () banked
  4780  002FDE  6FB2               	movwf	logRun@byte1& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4784  002FE0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4785  002FE4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4786  002FE8  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4787  002FEC  ECE9  F019         	call	_EEPROM_write	;wreg free
  4788                           
  4789                           ;EEPROM.c: 112: addr++;
  4790  002FF0  0100               	movlb	0	; () banked
  4791  002FF2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4792  002FF4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4796  002FF6  3861               	swapf	_count_pop_no_tab,w,c
  4797  002FF8  0BF0               	andlw	240
  4798  002FFA  1063               	iorwf	_count_pop_w_tab,w,c
  4799  002FFC  0100               	movlb	0	; () banked
  4800  002FFE  6FB3               	movwf	logRun@byte2& (0+255),b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4804  003000  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4805  003004  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4806  003008  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4807  00300C  ECE9  F019         	call	_EEPROM_write	;wreg free
  4808                           
  4809                           ;EEPROM.c: 117: addr++;
  4810  003010  0100               	movlb	0	; () banked
  4811  003012  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4812  003014  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4816  003016  385F               	swapf	_count_can_w_lab,w,c
  4817  003018  0BF0               	andlw	240
  4818  00301A  105D               	iorwf	_count_can_no_lab,w,c
  4819  00301C  0100               	movlb	0	; () banked
  4820  00301E  6FB4               	movwf	logRun@byte3& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4824  003020  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4825  003024  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4826  003028  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4827  00302C  ECE9  F019         	call	_EEPROM_write	;wreg free
  4828                           
  4829                           ;EEPROM.c: 120: addr++;
  4830  003030  0100               	movlb	0	; () banked
  4831  003032  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4832  003034  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4836  003036  0E00               	movlw	0
  4837  003038  0100               	movlb	0	; () banked
  4838  00303A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4839  00303C  0E00               	movlw	0
  4840  00303E  6FB7               	movwf	logRun@i& (0+255),b
  4841                           
  4842                           ; BSR set to: 0
  4843  003040  0100               	movlb	0	; () banked
  4844  003042  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4845  003044  D008               	goto	l7964
  4846  003046  0100               	movlb	0	; () banked
  4847  003048  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4848  00304A  E128               	bnz	l939
  4849  00304C  0E07               	movlw	7
  4850  00304E  0100               	movlb	0	; () banked
  4851  003050  5DB7               	subwf	logRun@i& (0+255),w,b
  4852  003052  B0D8               	btfsc	status,0,c
  4853  003054  D023               	goto	l939
  4854  003056                     l7964:
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4858  003056  90D8               	bcf	status,0,c
  4859  003058  0100               	movlb	0	; () banked
  4860  00305A  35B7               	rlcf	logRun@i& (0+255),w,b
  4861  00305C  6ED9               	movwf	fsr2l,c
  4862  00305E  0100               	movlb	0	; () banked
  4863  003060  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4864  003062  6EDA               	movwf	fsr2h,c
  4865  003064  0E0E               	movlw	low _startTime
  4866  003066  26D9               	addwf	fsr2l,f,c
  4867  003068  0E01               	movlw	high _startTime
  4868  00306A  22DA               	addwfc	fsr2h,f,c
  4869  00306C  50DF               	movf	indf2,w,c
  4870  00306E  0100               	movlb	0	; () banked
  4871  003070  6FB5               	movwf	logRun@byte_i& (0+255),b
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4875  003072  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4876  003076  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4877  00307A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4878  00307E  ECE9  F019         	call	_EEPROM_write	;wreg free
  4879                           
  4880                           ;EEPROM.c: 126: addr++;
  4881  003082  0100               	movlb	0	; () banked
  4882  003084  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4883  003086  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4884                           
  4885                           ; BSR set to: 0
  4886  003088  0100               	movlb	0	; () banked
  4887  00308A  4BB7               	infsnz	logRun@i& (0+255),f,b
  4888  00308C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4889                           
  4890                           ; BSR set to: 0
  4891  00308E  0100               	movlb	0	; () banked
  4892  003090  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4893  003092  D7E1               	goto	l7964
  4894  003094  0100               	movlb	0	; () banked
  4895  003096  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4896  003098  E101               	bnz	u6880
  4897  00309A  D7D8               	goto	L5
  4898  00309C                     u6880:
  4899  00309C                     l939:
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;EEPROM.c: 127: }
  4903                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4904  00309C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4908  0030A0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4909  0030A4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4910  0030A8  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4911  0030AC  ECE9  F019         	call	_EEPROM_write	;wreg free
  4912  0030B0  0012               	return		;funcret
  4913  0030B2                     __end_of_logRun:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           intcon2	equ	0xFF1
  4923                           intcon3	equ	0xFF0
  4924                           postinc0	equ	0xFEE
  4925                           wreg	equ	0xFE8
  4926                           postdec1	equ	0xFE5
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _EEPROM_write *****************
  4936 ;; Defined at:
  4937 ;;		line 32 in file "EEPROM.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  address         2   43[BANK0 ] unsigned short 
  4940 ;;  data            1   45[BANK0 ] unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  i               1   48[BANK0 ] unsigned char 
  4943 ;;  i               1   47[BANK0 ] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:        6 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:   10
  4960 ;; This function calls:
  4961 ;;		_EEPROM_read
  4962 ;;		_lcdInst
  4963 ;;		_printf
  4964 ;; This function is called by:
  4965 ;;		_Loading
  4966 ;;		_logRun
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text13
  4971  0033D2                     __ptext13:
  4972                           	opt stack 0
  4973  0033D2                     _EEPROM_write:
  4974                           	opt stack 18
  4975                           
  4976                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4977                           
  4978                           ;incstack = 0
  4979  0033D2  84A6               	bsf	4006,2,c	;volatile
  4980                           
  4981                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4982  0033D4  0100               	movlb	0	; () banked
  4983  0033D6  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4984  0033D8  6EAA               	movwf	4010,c	;volatile
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4988  0033DA  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;EEPROM.c: 39: EEDATA = data;
  4992  0033DE  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4996  0033E2  9EA6               	bcf	4006,7,c	;volatile
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5000  0033E4  9CA6               	bcf	4006,6,c	;volatile
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5004  0033E6  9EF2               	bcf	intcon,7,c	;volatile
  5005                           
  5006                           ;EEPROM.c: 45: EECON2 = 0x55;
  5007  0033E8  0E55               	movlw	85
  5008  0033EA  6EA7               	movwf	4007,c	;volatile
  5009                           
  5010                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5011  0033EC  0EAA               	movlw	170
  5012  0033EE  6EA7               	movwf	4007,c	;volatile
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5016  0033F0  82A6               	bsf	4006,1,c	;volatile
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5020  0033F2  8EF2               	bsf	intcon,7,c	;volatile
  5021  0033F4                     l917:
  5022  0033F4  A8A1               	btfss	4001,4,c	;volatile
  5023  0033F6  D7FE               	goto	l917
  5024                           
  5025                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5026  0033F8  98A1               	bcf	4001,4,c	;volatile
  5027                           
  5028                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5029  0033FA  94A6               	bcf	4006,2,c	;volatile
  5030                           
  5031                           ;EEPROM.c: 57: if(debug){
  5032  0033FC  5067               	movf	_debug,w,c
  5033  0033FE  1068               	iorwf	_debug+1,w,c
  5034  003400  B4D8               	btfsc	status,2,c
  5035  003402  0012               	return	
  5036                           
  5037                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5038  003404  0E01               	movlw	1
  5039  003406  EC83  F023         	call	_lcdInst
  5040  00340A  0E68               	movlw	104
  5041  00340C  0100               	movlb	0	; () banked
  5042  00340E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5043  003410  0EE4               	movlw	228
  5044  003412                     u7167:
  5045  003412  2EE8               	decfsz	wreg,f,c
  5046  003414  D7FE               	bra	u7167
  5047  003416  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5048  003418  D7FC               	bra	u7167
  5049  00341A  F000               	nop	
  5050                           
  5051                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5052  00341C  0E80               	movlw	128
  5053  00341E  EC83  F023         	call	_lcdInst
  5054                           
  5055                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5056  003422  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5057  003426  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5058  00342A  EC46  F023         	call	_EEPROM_read	;wreg free
  5059  00342E  0100               	movlb	0	; () banked
  5060  003430  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5061  003432  A4D8               	btfss	status,2,c
  5062  003434  D024               	goto	l6026
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5066  003436  0E48               	movlw	low STR_66
  5067  003438  0100               	movlb	0	; () banked
  5068  00343A  6F8E               	movwf	printf@f& (0+255),b
  5069  00343C  0EFB               	movlw	high STR_66
  5070  00343E  0100               	movlb	0	; () banked
  5071  003440  6F8F               	movwf	(printf@f+1)& (0+255),b
  5072  003442  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5073  003446  0100               	movlb	0	; () banked
  5074  003448  6B91               	clrf	(?_printf+3)& (0+255),b
  5075  00344A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5076  00344E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5077  003452  ECB8  F008         	call	_printf	;wreg free
  5078                           
  5079                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5080  003456  0E00               	movlw	0
  5081  003458  0100               	movlb	0	; () banked
  5082  00345A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5083  00345C                     l6018:
  5084                           
  5085                           ; BSR set to: 0
  5086  00345C  0E63               	movlw	99
  5087  00345E  0100               	movlb	0	; () banked
  5088  003460  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5089  003462  D001               	goto	l6022
  5090  003464  0012               	return	
  5091  003466                     l6022:
  5092                           
  5093                           ; BSR set to: 0
  5094  003466  0E68               	movlw	104
  5095  003468  0100               	movlb	0	; () banked
  5096  00346A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5097  00346C  0EE4               	movlw	228
  5098  00346E                     u7177:
  5099  00346E  2EE8               	decfsz	wreg,f,c
  5100  003470  D7FE               	bra	u7177
  5101  003472  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5102  003474  D7FC               	bra	u7177
  5103  003476  F000               	nop	
  5104  003478  0100               	movlb	0	; () banked
  5105  00347A  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5106  00347C  D7EF               	goto	l6018
  5107  00347E                     l6026:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5111  00347E  0EBD               	movlw	low STR_67
  5112  003480  0100               	movlb	0	; () banked
  5113  003482  6F8E               	movwf	printf@f& (0+255),b
  5114  003484  0EFF               	movlw	high STR_67
  5115  003486  0100               	movlb	0	; () banked
  5116  003488  6F8F               	movwf	(printf@f+1)& (0+255),b
  5117  00348A  ECB8  F008         	call	_printf	;wreg free
  5118  00348E  0E00               	movlw	0
  5119  003490  0100               	movlb	0	; () banked
  5120  003492  6FB0               	movwf	EEPROM_write@i_1321& (0+255),b
  5121  003494                     l6030:
  5122                           
  5123                           ; BSR set to: 0
  5124  003494  0E63               	movlw	99
  5125  003496  0100               	movlb	0	; () banked
  5126  003498  65B0               	cpfsgt	EEPROM_write@i_1321& (0+255),b
  5127  00349A  D001               	goto	l6034
  5128  00349C  0012               	return	
  5129  00349E                     l6034:
  5130                           
  5131                           ; BSR set to: 0
  5132  00349E  0E68               	movlw	104
  5133  0034A0  0100               	movlb	0	; () banked
  5134  0034A2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5135  0034A4  0EE4               	movlw	228
  5136  0034A6                     u7187:
  5137  0034A6  2EE8               	decfsz	wreg,f,c
  5138  0034A8  D7FE               	bra	u7187
  5139  0034AA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5140  0034AC  D7FC               	bra	u7187
  5141  0034AE  F000               	nop	
  5142  0034B0  0100               	movlb	0	; () banked
  5143  0034B2  2BB0               	incf	EEPROM_write@i_1321& (0+255),f,b
  5144  0034B4  D7EF               	goto	l6030
  5145  0034B6                     __end_of_EEPROM_write:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           intcon2	equ	0xFF1
  5155                           intcon3	equ	0xFF0
  5156                           postinc0	equ	0xFEE
  5157                           wreg	equ	0xFE8
  5158                           postdec1	equ	0xFE5
  5159                           fsr1l	equ	0xFE1
  5160                           indf2	equ	0xFDF
  5161                           postinc2	equ	0xFDE
  5162                           postdec2	equ	0xFDD
  5163                           fsr2h	equ	0xFDA
  5164                           fsr2l	equ	0xFD9
  5165                           status	equ	0xFD8
  5166                           
  5167 ;; *************** function _EEPROM_read *****************
  5168 ;; Defined at:
  5169 ;;		line 68 in file "EEPROM.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  address         2    0[BANK0 ] unsigned short 
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;		None
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      unsigned char 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;Total ram usage:        2 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    7
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_Loading
  5194 ;;		_EEPROM_write
  5195 ;;		_logRun
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text14
  5200  00468C                     __ptext14:
  5201                           	opt stack 0
  5202  00468C                     _EEPROM_read:
  5203                           	opt stack 20
  5204                           
  5205                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5206                           
  5207                           ;incstack = 0
  5208  00468C  0100               	movlb	0	; () banked
  5209  00468E  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5210  004690  6EAA               	movwf	4010,c	;volatile
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5214  004692  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5218  004696  9EA6               	bcf	4006,7,c	;volatile
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5222  004698  9CA6               	bcf	4006,6,c	;volatile
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5226  00469A  80A6               	bsf	4006,0,c	;volatile
  5227  00469C                     l930:
  5228  00469C  B0A6               	btfsc	4006,0,c	;volatile
  5229  00469E  D7FE               	goto	l930
  5230                           
  5231                           ;EEPROM.c: 81: return EEDATA;
  5232  0046A0  50A8               	movf	4008,w,c	;volatile
  5233  0046A2  0012               	return	
  5234  0046A4                     __end_of_EEPROM_read:
  5235                           	opt stack 0
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           intcon3	equ	0xFF0
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _initUI *****************
  5257 ;; Defined at:
  5258 ;;		line 62 in file "UI.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      void 
  5265 ;; Registers used:
  5266 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:   12
  5279 ;; This function calls:
  5280 ;;		_change_state_to_menu_start
  5281 ;;		_loadRTC
  5282 ;; This function is called by:
  5283 ;;		_main
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text15
  5288  0045E2                     __ptext15:
  5289                           	opt stack 0
  5290  0045E2                     _initUI:
  5291                           	opt stack 18
  5292                           
  5293                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5294                           
  5295                           ;incstack = 0
  5296  0045E2  8EF2               	bsf	intcon,7,c	;volatile
  5297                           
  5298                           ;UI.c: 64: machine_state = UI_state;
  5299  0045E4  0E00               	movlw	0
  5300  0045E6  0100               	movlb	0	; () banked
  5301  0045E8  6FFC               	movwf	_machine_state& (0+255),b
  5302                           
  5303                           ;UI.c: 65: logstate = 0;
  5304  0045EA  0E00               	movlw	0
  5305  0045EC  0100               	movlb	0	; () banked
  5306  0045EE  6FF7               	movwf	(_logstate+1)& (0+255),b
  5307  0045F0  0E00               	movlw	0
  5308  0045F2  6FF6               	movwf	_logstate& (0+255),b
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;UI.c: 67: loadRTC();
  5312  0045F4  ECBF  F01C         	call	_loadRTC	;wreg free
  5313                           
  5314                           ;UI.c: 69: change_state_to_menu_start();
  5315  0045F8  EC62  F022         	call	_change_state_to_menu_start	;wreg free
  5316                           
  5317                           ;UI.c: 70: firstboot = 1;
  5318  0045FC  0E00               	movlw	0
  5319  0045FE  6E76               	movwf	_firstboot+1,c
  5320  004600  0E01               	movlw	1
  5321  004602  6E75               	movwf	_firstboot,c
  5322  004604  0012               	return		;funcret
  5323  004606                     __end_of_initUI:
  5324                           	opt stack 0
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           prodh	equ	0xFF4
  5330                           prodl	equ	0xFF3
  5331                           intcon	equ	0xFF2
  5332                           intcon2	equ	0xFF1
  5333                           intcon3	equ	0xFF0
  5334                           postinc0	equ	0xFEE
  5335                           wreg	equ	0xFE8
  5336                           postdec1	equ	0xFE5
  5337                           fsr1l	equ	0xFE1
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           postdec2	equ	0xFDD
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function _loadRTC *****************
  5346 ;; Defined at:
  5347 ;;		line 28 in file "RTC.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  i               2   22[BANK0 ] int 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;Total ram usage:        3 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    9
  5368 ;; This function calls:
  5369 ;;		_I2C_Master_Init
  5370 ;;		_I2C_Master_Start
  5371 ;;		_I2C_Master_Stop
  5372 ;;		_I2C_Master_Write
  5373 ;; This function is called by:
  5374 ;;		_initUI
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text16
  5379  00397E                     __ptext16:
  5380                           	opt stack 0
  5381  00397E                     _loadRTC:
  5382                           	opt stack 20
  5383                           
  5384                           ;RTC.c: 30: I2C_Master_Init(10000);
  5385                           
  5386                           ;incstack = 0
  5387  00397E  0E10               	movlw	16
  5388  003980  0100               	movlb	0	; () banked
  5389  003982  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5390  003984  0E27               	movlw	39
  5391  003986  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5392  003988  0E00               	movlw	0
  5393  00398A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5394  00398C  0E00               	movlw	0
  5395  00398E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5396  003990  EC18  F01F         	call	_I2C_Master_Init	;wreg free
  5397                           
  5398                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5399  003994  9EF2               	bcf	intcon,7,c	;volatile
  5400                           
  5401                           ;RTC.c: 34: I2C_Master_Start();
  5402  003996  ECA9  F023         	call	_I2C_Master_Start	;wreg free
  5403                           
  5404                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5405  00399A  0E00               	movlw	0
  5406  00399C  0100               	movlb	0	; () banked
  5407  00399E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5408  0039A0  0ED0               	movlw	208
  5409  0039A2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5410  0039A4  EC97  F023         	call	_I2C_Master_Write	;wreg free
  5411                           
  5412                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5413  0039A8  0E00               	movlw	0
  5414  0039AA  0100               	movlb	0	; () banked
  5415  0039AC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5416  0039AE  0E00               	movlw	0
  5417  0039B0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5418  0039B2  EC97  F023         	call	_I2C_Master_Write	;wreg free
  5419                           
  5420                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5421  0039B6  0E00               	movlw	0
  5422  0039B8  0100               	movlb	0	; () banked
  5423  0039BA  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5424  0039BC  0E00               	movlw	0
  5425  0039BE  6F96               	movwf	loadRTC@i& (0+255),b
  5426  0039C0                     l6150:
  5427                           
  5428                           ; BSR set to: 0
  5429  0039C0  0100               	movlb	0	; () banked
  5430  0039C2  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5431  0039C4  D008               	goto	l6154
  5432  0039C6  0100               	movlb	0	; () banked
  5433  0039C8  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5434  0039CA  E11B               	bnz	l6160
  5435  0039CC  0E07               	movlw	7
  5436  0039CE  0100               	movlb	0	; () banked
  5437  0039D0  5D96               	subwf	loadRTC@i& (0+255),w,b
  5438  0039D2  B0D8               	btfsc	status,0,c
  5439  0039D4  D016               	goto	l6160
  5440  0039D6                     l6154:
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5444  0039D6  0E24               	movlw	low _time
  5445  0039D8  0100               	movlb	0	; () banked
  5446  0039DA  2596               	addwf	loadRTC@i& (0+255),w,b
  5447  0039DC  6ED9               	movwf	fsr2l,c
  5448  0039DE  0E01               	movlw	high _time
  5449  0039E0  0100               	movlb	0	; () banked
  5450  0039E2  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5451  0039E4  6EDA               	movwf	fsr2h,c
  5452  0039E6  50DF               	movf	indf2,w,c
  5453  0039E8  0100               	movlb	0	; () banked
  5454  0039EA  6F95               	movwf	??_loadRTC& (0+255),b
  5455  0039EC  0100               	movlb	0	; () banked
  5456  0039EE  5195               	movf	??_loadRTC& (0+255),w,b
  5457  0039F0  0100               	movlb	0	; () banked
  5458  0039F2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5459  0039F4  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5460  0039F6  EC97  F023         	call	_I2C_Master_Write	;wreg free
  5461  0039FA  0100               	movlb	0	; () banked
  5462  0039FC  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5463  0039FE  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5464  003A00  D7DF               	goto	l6150
  5465  003A02                     l6160:
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;RTC.c: 39: }
  5469                           ;RTC.c: 40: I2C_Master_Stop();
  5470  003A02  ECA5  F023         	call	_I2C_Master_Stop	;wreg free
  5471                           
  5472                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5473  003A06  8EF2               	bsf	intcon,7,c	;volatile
  5474  003A08  0012               	return		;funcret
  5475  003A0A                     __end_of_loadRTC:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           intcon2	equ	0xFF1
  5485                           intcon3	equ	0xFF0
  5486                           postinc0	equ	0xFEE
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           postinc2	equ	0xFDE
  5492                           postdec2	equ	0xFDD
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _I2C_Master_Init *****************
  5498 ;; Defined at:
  5499 ;;		line 15 in file "I2C.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  c               4   13[BANK0 ] const unsigned long 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:        8 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    8
  5520 ;; This function calls:
  5521 ;;		___lldiv
  5522 ;; This function is called by:
  5523 ;;		_loadRTC
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text17
  5528  003E30                     __ptext17:
  5529                           	opt stack 0
  5530  003E30                     _I2C_Master_Init:
  5531                           	opt stack 20
  5532                           
  5533                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5534                           
  5535                           ;incstack = 0
  5536  003E30  0E00               	movlw	0
  5537  003E32  6EC7               	movwf	4039,c	;volatile
  5538                           
  5539                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5540  003E34  0E28               	movlw	40
  5541  003E36  6EC6               	movwf	4038,c	;volatile
  5542                           
  5543                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5544  003E38  0E00               	movlw	0
  5545  003E3A  6EC5               	movwf	4037,c	;volatile
  5546                           
  5547                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5548  003E3C  0E00               	movlw	0
  5549  003E3E  0100               	movlb	0	; () banked
  5550  003E40  6F80               	movwf	___lldiv@dividend& (0+255),b
  5551  003E42  0E48               	movlw	72
  5552  003E44  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5553  003E46  0EE8               	movlw	232
  5554  003E48  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5555  003E4A  0E01               	movlw	1
  5556  003E4C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5557  003E4E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5558  003E52  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5559  003E56  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5560  003E5A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5561  003E5E  0E02               	movlw	2
  5562  003E60                     u4475:
  5563  003E60  90D8               	bcf	status,0,c
  5564  003E62  0100               	movlb	0	; () banked
  5565  003E64  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5566  003E66  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5567  003E68  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5568  003E6A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5569  003E6C  2EE8               	decfsz	wreg,f,c
  5570  003E6E  D7F8               	goto	u4475
  5571  003E70  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5572  003E74  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5573  003E78  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5574  003E7C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5575  003E80  EC25  F01B         	call	___lldiv	;wreg free
  5576  003E84  0100               	movlb	0	; () banked
  5577  003E86  0580               	decf	?___lldiv& (0+255),w,b
  5578  003E88  6EC8               	movwf	4040,c	;volatile
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;I2C.c: 22: TRISC3 = 1;
  5582  003E8A  8694               	bsf	3988,3,c	;volatile
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;I2C.c: 23: TRISC4 = 1;
  5586  003E8C  8894               	bsf	3988,4,c	;volatile
  5587                           
  5588                           ; BSR set to: 0
  5589  003E8E  0012               	return		;funcret
  5590  003E90                     __end_of_I2C_Master_Init:
  5591                           	opt stack 0
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           intcon2	equ	0xFF1
  5600                           intcon3	equ	0xFF0
  5601                           postinc0	equ	0xFEE
  5602                           wreg	equ	0xFE8
  5603                           postdec1	equ	0xFE5
  5604                           fsr1l	equ	0xFE1
  5605                           indf2	equ	0xFDF
  5606                           postinc2	equ	0xFDE
  5607                           postdec2	equ	0xFDD
  5608                           fsr2h	equ	0xFDA
  5609                           fsr2l	equ	0xFD9
  5610                           status	equ	0xFD8
  5611                           
  5612 ;; *************** function ___lldiv *****************
  5613 ;; Defined at:
  5614 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  dividend        4    0[BANK0 ] unsigned long 
  5617 ;;  divisor         4    4[BANK0 ] unsigned long 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  quotient        4    8[BANK0 ] unsigned long 
  5620 ;;  counter         1   12[BANK0 ] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  4    0[BANK0 ] unsigned long 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5630 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;Total ram usage:       13 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    7
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_I2C_Master_Init
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text18
  5645  00364A                     __ptext18:
  5646                           	opt stack 0
  5647  00364A                     ___lldiv:
  5648                           	opt stack 20
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;incstack = 0
  5652  00364A  0E00               	movlw	0
  5653  00364C  0100               	movlb	0	; () banked
  5654  00364E  6F88               	movwf	___lldiv@quotient& (0+255),b
  5655  003650  0E00               	movlw	0
  5656  003652  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5657  003654  0E00               	movlw	0
  5658  003656  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5659  003658  0E00               	movlw	0
  5660  00365A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5661                           
  5662                           ; BSR set to: 0
  5663  00365C  0100               	movlb	0	; () banked
  5664  00365E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5665  003660  0100               	movlb	0	; () banked
  5666  003662  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5667  003664  0100               	movlb	0	; () banked
  5668  003666  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5669  003668  0100               	movlb	0	; () banked
  5670  00366A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5671  00366C  B4D8               	btfsc	status,2,c
  5672  00366E  D042               	goto	l1642
  5673                           
  5674                           ; BSR set to: 0
  5675  003670  0E01               	movlw	1
  5676  003672  0100               	movlb	0	; () banked
  5677  003674  6F8C               	movwf	___lldiv@counter& (0+255),b
  5678  003676  D008               	goto	l5590
  5679  003678                     l5588:
  5680                           
  5681                           ; BSR set to: 0
  5682  003678  0100               	movlb	0	; () banked
  5683  00367A  90D8               	bcf	status,0,c
  5684  00367C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5685  00367E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5686  003680  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5687  003682  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5688  003684  0100               	movlb	0	; () banked
  5689  003686  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5690  003688                     l5590:
  5691                           
  5692                           ; BSR set to: 0
  5693  003688  0100               	movlb	0	; () banked
  5694  00368A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5695  00368C  D7F5               	goto	l5588
  5696  00368E                     l5592:
  5697                           
  5698                           ; BSR set to: 0
  5699  00368E  0100               	movlb	0	; () banked
  5700  003690  90D8               	bcf	status,0,c
  5701  003692  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5702  003694  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5703  003696  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5704  003698  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5705                           
  5706                           ; BSR set to: 0
  5707  00369A  0100               	movlb	0	; () banked
  5708  00369C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5709  00369E  0100               	movlb	0	; () banked
  5710  0036A0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5711  0036A2  0100               	movlb	0	; () banked
  5712  0036A4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5713  0036A6  0100               	movlb	0	; () banked
  5714  0036A8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5715  0036AA  0100               	movlb	0	; () banked
  5716  0036AC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5717  0036AE  0100               	movlb	0	; () banked
  5718  0036B0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5719  0036B2  0100               	movlb	0	; () banked
  5720  0036B4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5721  0036B6  0100               	movlb	0	; () banked
  5722  0036B8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5723  0036BA  A0D8               	btfss	status,0,c
  5724  0036BC  D012               	goto	l5600
  5725                           
  5726                           ; BSR set to: 0
  5727  0036BE  0100               	movlb	0	; () banked
  5728  0036C0  5184               	movf	___lldiv@divisor& (0+255),w,b
  5729  0036C2  0100               	movlb	0	; () banked
  5730  0036C4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5731  0036C6  0100               	movlb	0	; () banked
  5732  0036C8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5733  0036CA  0100               	movlb	0	; () banked
  5734  0036CC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5735  0036CE  0100               	movlb	0	; () banked
  5736  0036D0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5737  0036D2  0100               	movlb	0	; () banked
  5738  0036D4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5739  0036D6  0100               	movlb	0	; () banked
  5740  0036D8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5741  0036DA  0100               	movlb	0	; () banked
  5742  0036DC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5743                           
  5744                           ; BSR set to: 0
  5745  0036DE  0100               	movlb	0	; () banked
  5746  0036E0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5747  0036E2                     l5600:
  5748                           
  5749                           ; BSR set to: 0
  5750  0036E2  0100               	movlb	0	; () banked
  5751  0036E4  90D8               	bcf	status,0,c
  5752  0036E6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5753  0036E8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5754  0036EA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5755  0036EC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5756                           
  5757                           ; BSR set to: 0
  5758  0036EE  0100               	movlb	0	; () banked
  5759  0036F0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5760  0036F2  D7CD               	goto	l5592
  5761  0036F4                     l1642:
  5762                           
  5763                           ; BSR set to: 0
  5764  0036F4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5765  0036F8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5766  0036FC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5767  003700  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5768                           
  5769                           ; BSR set to: 0
  5770  003704  0012               	return		;funcret
  5771  003706                     __end_of___lldiv:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           intcon2	equ	0xFF1
  5781                           intcon3	equ	0xFF0
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _change_state_to_menu_start *****************
  5794 ;; Defined at:
  5795 ;;		line 472 in file "UI.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:   11
  5816 ;; This function calls:
  5817 ;;		_lcdInst
  5818 ;;		_printRTC
  5819 ;;		_printf
  5820 ;; This function is called by:
  5821 ;;		_initUI
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           	psect	text19
  5826  0044C4                     __ptext19:
  5827                           	opt stack 0
  5828  0044C4                     _change_state_to_menu_start:
  5829                           	opt stack 18
  5830                           
  5831                           ;UI.c: 473: cur_state = 0;
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;incstack = 0
  5835  0044C4  0E00               	movlw	0
  5836  0044C6  0100               	movlb	0	; () banked
  5837  0044C8  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5838  0044CA  0E00               	movlw	0
  5839  0044CC  6FDE               	movwf	_cur_state& (0+255),b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;UI.c: 475: lcdInst(0b10000000);;
  5843  0044CE  0E80               	movlw	128
  5844  0044D0  EC83  F023         	call	_lcdInst
  5845                           
  5846                           ;UI.c: 476: printRTC();
  5847  0044D4  EC03  F00E         	call	_printRTC	;wreg free
  5848                           
  5849                           ;UI.c: 477: lcdInst(0b11000000);;
  5850  0044D8  0EC0               	movlw	192
  5851  0044DA  EC83  F023         	call	_lcdInst
  5852                           
  5853                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5854  0044DE  0E0D               	movlw	low STR_30
  5855  0044E0  0100               	movlb	0	; () banked
  5856  0044E2  6F8E               	movwf	printf@f& (0+255),b
  5857  0044E4  0EFE               	movlw	high STR_30
  5858  0044E6  0100               	movlb	0	; () banked
  5859  0044E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5860  0044EA  ECB8  F008         	call	_printf	;wreg free
  5861  0044EE  0012               	return		;funcret
  5862  0044F0                     __end_of_change_state_to_menu_start:
  5863                           	opt stack 0
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon2	equ	0xFF1
  5872                           intcon3	equ	0xFF0
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _initTime *****************
  5885 ;; Defined at:
  5886 ;;		line 17 in file "RTC.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  s               1    wreg     unsigned char 
  5889 ;;  m               1    0[BANK0 ] unsigned char 
  5890 ;;  h               1    1[BANK0 ] unsigned char 
  5891 ;;  w               1    2[BANK0 ] unsigned char 
  5892 ;;  DD              1    3[BANK0 ] unsigned char 
  5893 ;;  MM              1    4[BANK0 ] unsigned char 
  5894 ;;  YY              1    5[BANK0 ] unsigned char 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  s               1    6[BANK0 ] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  1    wreg      void 
  5899 ;; Registers used:
  5900 ;;		wreg
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5906 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;Total ram usage:        7 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    7
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_main
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text20
  5921  00464C                     __ptext20:
  5922                           	opt stack 0
  5923  00464C                     _initTime:
  5924                           	opt stack 23
  5925                           
  5926                           ;incstack = 0
  5927                           ;initTime@s stored from wreg
  5928  00464C  0100               	movlb	0	; () banked
  5929  00464E  6F86               	movwf	initTime@s& (0+255),b
  5930                           
  5931                           ;RTC.c: 19: time[0] = s;
  5932  004650  C086  F124         	movff	initTime@s,_time
  5933                           
  5934                           ;RTC.c: 20: time[1] = m;
  5935  004654  C080  F125         	movff	initTime@m,_time+1
  5936                           
  5937                           ;RTC.c: 21: time[2] = h;
  5938  004658  C081  F126         	movff	initTime@h,_time+2
  5939                           
  5940                           ;RTC.c: 22: time[3] = w;
  5941  00465C  C082  F127         	movff	initTime@w,_time+3
  5942                           
  5943                           ;RTC.c: 23: time[4] = DD;
  5944  004660  C083  F128         	movff	initTime@DD,_time+4
  5945                           
  5946                           ;RTC.c: 24: time[5] = MM;
  5947  004664  C084  F129         	movff	initTime@MM,_time+5
  5948                           
  5949                           ;RTC.c: 25: time[6] = YY;
  5950  004668  C085  F12A         	movff	initTime@YY,_time+6
  5951  00466C  0012               	return		;funcret
  5952  00466E                     __end_of_initTime:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           intcon	equ	0xFF2
  5961                           intcon2	equ	0xFF1
  5962                           intcon3	equ	0xFF0
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _initLCD *****************
  5975 ;; Defined at:
  5976 ;;		line 48 in file "lcd.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;Total ram usage:        1 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    9
  5997 ;; This function calls:
  5998 ;;		_lcdInst
  5999 ;; This function is called by:
  6000 ;;		_main
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text21
  6005  004122                     __ptext21:
  6006                           	opt stack 0
  6007  004122                     _initLCD:
  6008                           	opt stack 21
  6009                           
  6010                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6011                           
  6012                           ;incstack = 0
  6013  004122  0E9C               	movlw	156
  6014  004124  0100               	movlb	0	; () banked
  6015  004126  6F83               	movwf	??_initLCD& (0+255),b
  6016  004128  0ED7               	movlw	215
  6017  00412A                     u7197:
  6018  00412A  2EE8               	decfsz	wreg,f,c
  6019  00412C  D7FE               	bra	u7197
  6020  00412E  2F83               	decfsz	??_initLCD& (0+255),f,b
  6021  004130  D7FC               	bra	u7197
  6022                           
  6023                           ;lcd.c: 50: lcdInst(0b00110011);
  6024  004132  0E33               	movlw	51
  6025  004134  EC83  F023         	call	_lcdInst
  6026                           
  6027                           ;lcd.c: 51: lcdInst(0b00110010);
  6028  004138  0E32               	movlw	50
  6029  00413A  EC83  F023         	call	_lcdInst
  6030                           
  6031                           ;lcd.c: 53: lcdInst(0b00101000);
  6032  00413E  0E28               	movlw	40
  6033  004140  EC83  F023         	call	_lcdInst
  6034                           
  6035                           ;lcd.c: 54: lcdInst(0b00001100);
  6036  004144  0E0C               	movlw	12
  6037  004146  EC83  F023         	call	_lcdInst
  6038                           
  6039                           ;lcd.c: 55: lcdInst(0b00000110);
  6040  00414A  0E06               	movlw	6
  6041  00414C  EC83  F023         	call	_lcdInst
  6042                           
  6043                           ;lcd.c: 56: lcdInst(0b00000001);
  6044  004150  0E01               	movlw	1
  6045  004152  EC83  F023         	call	_lcdInst
  6046                           
  6047                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6048  004156  0E9C               	movlw	156
  6049  004158  0100               	movlb	0	; () banked
  6050  00415A  6F83               	movwf	??_initLCD& (0+255),b
  6051  00415C  0ED7               	movlw	215
  6052  00415E                     u7207:
  6053  00415E  2EE8               	decfsz	wreg,f,c
  6054  004160  D7FE               	bra	u7207
  6055  004162  2F83               	decfsz	??_initLCD& (0+255),f,b
  6056  004164  D7FC               	bra	u7207
  6057  004166  0012               	return		;funcret
  6058  004168                     __end_of_initLCD:
  6059                           	opt stack 0
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           intcon2	equ	0xFF1
  6068                           intcon3	equ	0xFF0
  6069                           postinc0	equ	0xFEE
  6070                           wreg	equ	0xFE8
  6071                           postdec1	equ	0xFE5
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _UI *****************
  6081 ;; Defined at:
  6082 ;;		line 74 in file "UI.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  i               1   73[BANK0 ] unsigned char 
  6087 ;;  i               1   85[BANK0 ] unsigned char 
  6088 ;;  i               1   84[BANK0 ] unsigned char 
  6089 ;;  i               1   83[BANK0 ] unsigned char 
  6090 ;;  i               1   82[BANK0 ] unsigned char 
  6091 ;;  i               1   81[BANK0 ] unsigned char 
  6092 ;;  i               1   80[BANK0 ] unsigned char 
  6093 ;;  i               1   79[BANK0 ] unsigned char 
  6094 ;;  i               1   78[BANK0 ] unsigned char 
  6095 ;;  i               1   77[BANK0 ] unsigned char 
  6096 ;;  i               1   76[BANK0 ] unsigned char 
  6097 ;;  i               1   75[BANK0 ] unsigned char 
  6098 ;;  i               1   74[BANK0 ] unsigned char 
  6099 ;;  month           4   86[BANK0 ] unsigned char [4]
  6100 ;;  i               1   72[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      void 
  6103 ;; Registers used:
  6104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;Total ram usage:       22 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:   11
  6117 ;; This function calls:
  6118 ;;		___awdiv
  6119 ;;		___awmod
  6120 ;;		_change_state_to_menu_12
  6121 ;;		_change_state_to_menu_22
  6122 ;;		_lcdInst
  6123 ;;		_printRTC
  6124 ;;		_printf
  6125 ;;		_strcpy
  6126 ;; This function is called by:
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text22
  6132  0008CA                     __ptext22:
  6133                           	opt stack 0
  6134  0008CA                     _UI:
  6135                           	opt stack 19
  6136                           
  6137                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6138                           
  6139                           ;incstack = 0
  6140  0008CA  0E02               	movlw	2
  6141  0008CC  0100               	movlb	0	; () banked
  6142  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6143  0008D0  A4D8               	btfss	status,2,c
  6144  0008D2  D075               	goto	l7366
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6148  0008D4  0E01               	movlw	1
  6149  0008D6  EC83  F023         	call	_lcdInst
  6150  0008DA  0E68               	movlw	104
  6151  0008DC  0100               	movlb	0	; () banked
  6152  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6153  0008E0  0EE4               	movlw	228
  6154  0008E2                     u7217:
  6155  0008E2  2EE8               	decfsz	wreg,f,c
  6156  0008E4  D7FE               	bra	u7217
  6157  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6158  0008E8  D7FC               	bra	u7217
  6159  0008EA  F000               	nop	
  6160                           
  6161                           ;UI.c: 77: lcdInst(0b10000000);;
  6162  0008EC  0E80               	movlw	128
  6163  0008EE  EC83  F023         	call	_lcdInst
  6164                           
  6165                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6166  0008F2  0EB9               	movlw	low STR_1
  6167  0008F4  0100               	movlb	0	; () banked
  6168  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6169  0008F8  0EFB               	movlw	high STR_1
  6170  0008FA  0100               	movlb	0	; () banked
  6171  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6172  0008FE  0E01               	movlw	1
  6173  000900  0100               	movlb	0	; () banked
  6174  000902  25FD               	addwf	_sel& (0+255),w,b
  6175  000904  0100               	movlb	0	; () banked
  6176  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6177  000908  0100               	movlb	0	; () banked
  6178  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6179  00090C  0E00               	movlw	0
  6180  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6181  000910  ECB8  F008         	call	_printf	;wreg free
  6182                           
  6183                           ;UI.c: 79: lcdInst(0b11000000);;
  6184  000914  0EC0               	movlw	192
  6185  000916  EC83  F023         	call	_lcdInst
  6186                           
  6187                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6188  00091A  0E0E               	movlw	14
  6189  00091C  0100               	movlb	0	; () banked
  6190  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6191  000920  0E10               	movlw	16
  6192  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6193  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6194  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6195  00092C  ECD8  F01B         	call	___awmod	;wreg free
  6196  000930  C080  F0C6         	movff	?___awmod,_UI$2291
  6197  000934  C081  F0C7         	movff	?___awmod+1,_UI$2291+1
  6198                           
  6199                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6200  000938  0E1B               	movlw	low STR_2
  6201  00093A  0100               	movlb	0	; () banked
  6202  00093C  6F8E               	movwf	printf@f& (0+255),b
  6203  00093E  0EFF               	movlw	high STR_2
  6204  000940  0100               	movlb	0	; () banked
  6205  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6206  000944  0E0E               	movlw	14
  6207  000946  0100               	movlb	0	; () banked
  6208  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6209  00094A  0E10               	movlw	16
  6210  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6211  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6212  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6213  000956  ECD8  F01B         	call	___awmod	;wreg free
  6214  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6215  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6216  000962  0E00               	movlw	0
  6217  000964  0100               	movlb	0	; () banked
  6218  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6219  000968  0E3C               	movlw	60
  6220  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6221  00096C  ECC6  F01A         	call	___awdiv	;wreg free
  6222  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6223  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6224  000978  C0C6  F080         	movff	_UI$2291,___awmod@dividend
  6225  00097C  C0C7  F081         	movff	_UI$2291+1,___awmod@dividend+1
  6226  000980  0E00               	movlw	0
  6227  000982  0100               	movlb	0	; () banked
  6228  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6229  000986  0E3C               	movlw	60
  6230  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6231  00098A  ECD8  F01B         	call	___awmod	;wreg free
  6232  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6233  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6234  000996  ECB8  F008         	call	_printf	;wreg free
  6235                           
  6236                           ;UI.c: 81: machine_state = UI_state;
  6237  00099A  0E00               	movlw	0
  6238  00099C  0100               	movlb	0	; () banked
  6239  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6240  0009A0                     l177:
  6241  0009A0  A281               	btfss	3969,1,c	;volatile
  6242  0009A2  D7FE               	goto	l177
  6243                           
  6244                           ;UI.c: 84: }
  6245                           ;UI.c: 85: if(cur_state==12){
  6246  0009A4  0E0C               	movlw	12
  6247  0009A6  0100               	movlb	0	; () banked
  6248  0009A8  19DE               	xorwf	_cur_state& (0+255),w,b
  6249  0009AA  0100               	movlb	0	; () banked
  6250  0009AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6251  0009AE  A4D8               	btfss	status,2,c
  6252  0009B0  D003               	goto	l7364
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;UI.c: 86: change_state_to_menu_12();
  6256  0009B2  ECF1  F020         	call	_change_state_to_menu_12	;wreg free
  6257                           
  6258                           ;UI.c: 87: }
  6259  0009B6  D3D5               	goto	l7686
  6260  0009B8                     l7364:
  6261                           
  6262                           ;UI.c: 88: else{
  6263                           ;UI.c: 89: change_state_to_menu_22();
  6264  0009B8  ECD5  F020         	call	_change_state_to_menu_22	;wreg free
  6265                           
  6266                           ;UI.c: 90: }
  6267                           ;UI.c: 91: }
  6268  0009BC  D3D2               	goto	l7686
  6269  0009BE                     l7366:
  6270                           
  6271                           ;UI.c: 92: else if(cur_state == 0){
  6272  0009BE  0100               	movlb	0	; () banked
  6273  0009C0  51DE               	movf	_cur_state& (0+255),w,b
  6274  0009C2  0100               	movlb	0	; () banked
  6275  0009C4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6276  0009C6  A4D8               	btfss	status,2,c
  6277  0009C8  D3CC               	goto	l7686
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6281  0009CA  0E00               	movlw	0
  6282  0009CC  0100               	movlb	0	; () banked
  6283  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6284  0009D0                     l7370:
  6285                           
  6286                           ; BSR set to: 0
  6287  0009D0  0E63               	movlw	99
  6288  0009D2  0100               	movlb	0	; () banked
  6289  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6290  0009D6  D001               	goto	l7374
  6291  0009D8  D00C               	goto	l7378
  6292  0009DA                     l7374:
  6293                           
  6294                           ; BSR set to: 0
  6295  0009DA  0E68               	movlw	104
  6296  0009DC  0100               	movlb	0	; () banked
  6297  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6298  0009E0  0EE4               	movlw	228
  6299  0009E2                     u7227:
  6300  0009E2  2EE8               	decfsz	wreg,f,c
  6301  0009E4  D7FE               	bra	u7227
  6302  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6303  0009E8  D7FC               	bra	u7227
  6304  0009EA  F000               	nop	
  6305  0009EC  0100               	movlb	0	; () banked
  6306  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6307  0009F0  D7EF               	goto	l7370
  6308  0009F2                     l7378:
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;UI.c: 94: if(cur_state == 0){
  6312  0009F2  0100               	movlb	0	; () banked
  6313  0009F4  51DE               	movf	_cur_state& (0+255),w,b
  6314  0009F6  0100               	movlb	0	; () banked
  6315  0009F8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6316  0009FA  A4D8               	btfss	status,2,c
  6317  0009FC  D3B2               	goto	l7686
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;UI.c: 95: printRTC();
  6321  0009FE  EC03  F00E         	call	_printRTC	;wreg free
  6322                           
  6323                           ;UI.c: 96: }
  6324                           ;UI.c: 97: }
  6325                           ;UI.c: 98: while(logstate){
  6326  000A02  D3AF               	goto	l7686
  6327  000A04                     l7382:
  6328                           
  6329                           ;UI.c: 100: if(!log_completion){
  6330  000A04  0100               	movlb	0	; () banked
  6331  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6332  000A08  0100               	movlb	0	; () banked
  6333  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6334  000A0C  A4D8               	btfss	status,2,c
  6335  000A0E  D041               	goto	l7412
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6339  000A10  0E01               	movlw	1
  6340  000A12  EC83  F023         	call	_lcdInst
  6341  000A16  0E68               	movlw	104
  6342  000A18  0100               	movlb	0	; () banked
  6343  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6344  000A1C  0EE4               	movlw	228
  6345  000A1E                     u7237:
  6346  000A1E  2EE8               	decfsz	wreg,f,c
  6347  000A20  D7FE               	bra	u7237
  6348  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6349  000A24  D7FC               	bra	u7237
  6350  000A26  F000               	nop	
  6351                           
  6352                           ;UI.c: 102: lcdInst(0b10000000);;
  6353  000A28  0E80               	movlw	128
  6354  000A2A  EC83  F023         	call	_lcdInst
  6355                           
  6356                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6357  000A2E  0EA7               	movlw	low STR_3
  6358  000A30  0100               	movlb	0	; () banked
  6359  000A32  6F8E               	movwf	printf@f& (0+255),b
  6360  000A34  0EFB               	movlw	high STR_3
  6361  000A36  0100               	movlb	0	; () banked
  6362  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6363  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6364  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6365  000A42  ECB8  F008         	call	_printf	;wreg free
  6366                           
  6367                           ;UI.c: 104: lcdInst(0b11000000);;
  6368  000A46  0EC0               	movlw	192
  6369  000A48  EC83  F023         	call	_lcdInst
  6370                           
  6371                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6372  000A4C  0E3E               	movlw	low STR_4
  6373  000A4E  0100               	movlb	0	; () banked
  6374  000A50  6F8E               	movwf	printf@f& (0+255),b
  6375  000A52  0EFE               	movlw	high STR_4
  6376  000A54  0100               	movlb	0	; () banked
  6377  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6378  000A58  ECB8  F008         	call	_printf	;wreg free
  6379  000A5C                     l7396:
  6380  000A5C  0E00               	movlw	0
  6381  000A5E  0100               	movlb	0	; () banked
  6382  000A60  6FC9               	movwf	UI@i_408& (0+255),b
  6383  000A62                     l7398:
  6384                           
  6385                           ; BSR set to: 0
  6386  000A62  0E63               	movlw	99
  6387  000A64  0100               	movlb	0	; () banked
  6388  000A66  65C9               	cpfsgt	UI@i_408& (0+255),b
  6389  000A68  D001               	goto	l7402
  6390  000A6A  D00C               	goto	l7406
  6391  000A6C                     l7402:
  6392                           
  6393                           ; BSR set to: 0
  6394  000A6C  0E68               	movlw	104
  6395  000A6E  0100               	movlb	0	; () banked
  6396  000A70  6FC4               	movwf	??_UI& (0+255),b
  6397  000A72  0EE4               	movlw	228
  6398  000A74                     u7247:
  6399  000A74  2EE8               	decfsz	wreg,f,c
  6400  000A76  D7FE               	bra	u7247
  6401  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6402  000A7A  D7FC               	bra	u7247
  6403  000A7C  F000               	nop	
  6404  000A7E  0100               	movlb	0	; () banked
  6405  000A80  2BC9               	incf	UI@i_408& (0+255),f,b
  6406  000A82  D7EF               	goto	l7398
  6407  000A84                     l7406:
  6408                           
  6409                           ; BSR set to: 0
  6410  000A84  0100               	movlb	0	; () banked
  6411  000A86  51F6               	movf	_logstate& (0+255),w,b
  6412  000A88  0100               	movlb	0	; () banked
  6413  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6414  000A8C  B4D8               	btfsc	status,2,c
  6415  000A8E  0012               	return	
  6416  000A90  D7E5               	goto	l7396
  6417  000A92                     l7412:
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;UI.c: 109: else{
  6421                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6422  000A92  0E01               	movlw	1
  6423  000A94  EC83  F023         	call	_lcdInst
  6424  000A98  0E68               	movlw	104
  6425  000A9A  0100               	movlb	0	; () banked
  6426  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6427  000A9E  0EE4               	movlw	228
  6428  000AA0                     u7257:
  6429  000AA0  2EE8               	decfsz	wreg,f,c
  6430  000AA2  D7FE               	bra	u7257
  6431  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6432  000AA6  D7FC               	bra	u7257
  6433  000AA8  F000               	nop	
  6434                           
  6435                           ;UI.c: 111: lcdInst(0b10000000);;
  6436  000AAA  0E80               	movlw	128
  6437  000AAC  EC83  F023         	call	_lcdInst
  6438                           
  6439                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6440  000AB0  0EA7               	movlw	low STR_3
  6441  000AB2  0100               	movlb	0	; () banked
  6442  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6443  000AB6  0EFB               	movlw	high STR_3
  6444  000AB8  0100               	movlb	0	; () banked
  6445  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6446  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6447  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6448  000AC4  ECB8  F008         	call	_printf	;wreg free
  6449                           
  6450                           ;UI.c: 113: lcdInst(0b11000000);;
  6451  000AC8  0EC0               	movlw	192
  6452  000ACA  EC83  F023         	call	_lcdInst
  6453                           
  6454                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6455  000ACE  0EFC               	movlw	low STR_6
  6456  000AD0  0100               	movlb	0	; () banked
  6457  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6458  000AD4  0EFD               	movlw	high STR_6
  6459  000AD6  0100               	movlb	0	; () banked
  6460  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6461  000ADA  ECB8  F008         	call	_printf	;wreg free
  6462                           
  6463                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6464  000ADE  0E00               	movlw	0
  6465  000AE0  0100               	movlb	0	; () banked
  6466  000AE2  6FCA               	movwf	UI@i_411& (0+255),b
  6467  000AE4                     l7426:
  6468                           
  6469                           ; BSR set to: 0
  6470  000AE4  0E63               	movlw	99
  6471  000AE6  0100               	movlb	0	; () banked
  6472  000AE8  65CA               	cpfsgt	UI@i_411& (0+255),b
  6473  000AEA  D001               	goto	l7430
  6474  000AEC  D00C               	goto	l7434
  6475  000AEE                     l7430:
  6476                           
  6477                           ; BSR set to: 0
  6478  000AEE  0E68               	movlw	104
  6479  000AF0  0100               	movlb	0	; () banked
  6480  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6481  000AF4  0EE4               	movlw	228
  6482  000AF6                     u7267:
  6483  000AF6  2EE8               	decfsz	wreg,f,c
  6484  000AF8  D7FE               	bra	u7267
  6485  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6486  000AFC  D7FC               	bra	u7267
  6487  000AFE  F000               	nop	
  6488  000B00  0100               	movlb	0	; () banked
  6489  000B02  2BCA               	incf	UI@i_411& (0+255),f,b
  6490  000B04  D7EF               	goto	l7426
  6491  000B06                     l7434:
  6492                           
  6493                           ; BSR set to: 0
  6494  000B06  0100               	movlb	0	; () banked
  6495  000B08  51F6               	movf	_logstate& (0+255),w,b
  6496  000B0A  0100               	movlb	0	; () banked
  6497  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6498  000B0E  B4D8               	btfsc	status,2,c
  6499  000B10  0012               	return	
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6503                           
  6504                           ; BSR set to: 0
  6505                           
  6506                           ; BSR set to: 0
  6507  000B12  0E00               	movlw	0
  6508  000B14  0100               	movlb	0	; () banked
  6509  000B16  6FCB               	movwf	UI@i_412& (0+255),b
  6510  000B18                     l7440:
  6511                           
  6512                           ; BSR set to: 0
  6513  000B18  0E63               	movlw	99
  6514  000B1A  0100               	movlb	0	; () banked
  6515  000B1C  65CB               	cpfsgt	UI@i_412& (0+255),b
  6516  000B1E  D001               	goto	l7444
  6517  000B20  D00C               	goto	l7448
  6518  000B22                     l7444:
  6519                           
  6520                           ; BSR set to: 0
  6521  000B22  0E68               	movlw	104
  6522  000B24  0100               	movlb	0	; () banked
  6523  000B26  6FC4               	movwf	??_UI& (0+255),b
  6524  000B28  0EE4               	movlw	228
  6525  000B2A                     u7277:
  6526  000B2A  2EE8               	decfsz	wreg,f,c
  6527  000B2C  D7FE               	bra	u7277
  6528  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6529  000B30  D7FC               	bra	u7277
  6530  000B32  F000               	nop	
  6531  000B34  0100               	movlb	0	; () banked
  6532  000B36  2BCB               	incf	UI@i_412& (0+255),f,b
  6533  000B38  D7EF               	goto	l7440
  6534  000B3A                     l7448:
  6535                           
  6536                           ; BSR set to: 0
  6537  000B3A  0100               	movlb	0	; () banked
  6538  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6539  000B3E  0100               	movlb	0	; () banked
  6540  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6541  000B42  B4D8               	btfsc	status,2,c
  6542  000B44  0012               	return	
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6546                           
  6547                           ; BSR set to: 0
  6548                           
  6549                           ; BSR set to: 0
  6550  000B46  0E01               	movlw	1
  6551  000B48  EC83  F023         	call	_lcdInst
  6552  000B4C  0E68               	movlw	104
  6553  000B4E  0100               	movlb	0	; () banked
  6554  000B50  6FC4               	movwf	??_UI& (0+255),b
  6555  000B52  0EE4               	movlw	228
  6556  000B54                     u7287:
  6557  000B54  2EE8               	decfsz	wreg,f,c
  6558  000B56  D7FE               	bra	u7287
  6559  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6560  000B5A  D7FC               	bra	u7287
  6561  000B5C  F000               	nop	
  6562                           
  6563                           ;UI.c: 120: lcdInst(0b10000000);;
  6564  000B5E  0E80               	movlw	128
  6565  000B60  EC83  F023         	call	_lcdInst
  6566                           
  6567                           ;UI.c: 121: printf("START:");
  6568  000B64  0EC4               	movlw	low STR_7
  6569  000B66  0100               	movlb	0	; () banked
  6570  000B68  6F8E               	movwf	printf@f& (0+255),b
  6571  000B6A  0EFF               	movlw	high STR_7
  6572  000B6C  0100               	movlb	0	; () banked
  6573  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6574  000B70  ECB8  F008         	call	_printf	;wreg free
  6575                           
  6576                           ;UI.c: 122: lcdInst(0b11000000);;
  6577  000B74  0EC0               	movlw	192
  6578  000B76  EC83  F023         	call	_lcdInst
  6579                           
  6580                           ;UI.c: 123: char month[] = "MMM";
  6581  000B7A  C12F  F0D6         	movff	UI@F3223,UI@month
  6582  000B7E  C130  F0D7         	movff	UI@F3223+1,UI@month+1
  6583  000B82  C131  F0D8         	movff	UI@F3223+2,UI@month+2
  6584  000B86  C132  F0D9         	movff	UI@F3223+3,UI@month+3
  6585                           
  6586                           ;UI.c: 124: switch(log_startTime[5]){
  6587  000B8A  D0C3               	goto	l7492
  6588  000B8C                     l7464:
  6589                           
  6590                           ;UI.c: 126: strcpy(month, "JAN");
  6591  000B8C  0ED6               	movlw	low UI@month
  6592  000B8E  0100               	movlb	0	; () banked
  6593  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6594  000B92  0E00               	movlw	high UI@month
  6595  000B94  0100               	movlb	0	; () banked
  6596  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6597  000B98  0EDB               	movlw	low STR_8
  6598  000B9A  0100               	movlb	0	; () banked
  6599  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6600  000B9E  0EFF               	movlw	high STR_8
  6601  000BA0  0100               	movlb	0	; () banked
  6602  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6603  000BA4  EC0D  F021         	call	_strcpy	;wreg free
  6604                           
  6605                           ;UI.c: 127: break;
  6606  000BA8  D0E6               	goto	l7494
  6607  000BAA                     l7466:
  6608                           
  6609                           ;UI.c: 129: strcpy(month, "FEB");
  6610  000BAA  0ED6               	movlw	low UI@month
  6611  000BAC  0100               	movlb	0	; () banked
  6612  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6613  000BB0  0E00               	movlw	high UI@month
  6614  000BB2  0100               	movlb	0	; () banked
  6615  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6616  000BB6  0ECB               	movlw	low STR_9
  6617  000BB8  0100               	movlb	0	; () banked
  6618  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6619  000BBC  0EFF               	movlw	high STR_9
  6620  000BBE  0100               	movlb	0	; () banked
  6621  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6622  000BC2  EC0D  F021         	call	_strcpy	;wreg free
  6623                           
  6624                           ;UI.c: 130: break;
  6625  000BC6  D0D7               	goto	l7494
  6626  000BC8                     l7468:
  6627                           
  6628                           ;UI.c: 132: strcpy(month, "MAR");
  6629  000BC8  0ED6               	movlw	low UI@month
  6630  000BCA  0100               	movlb	0	; () banked
  6631  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6632  000BCE  0E00               	movlw	high UI@month
  6633  000BD0  0100               	movlb	0	; () banked
  6634  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6635  000BD4  0EE7               	movlw	low STR_10
  6636  000BD6  0100               	movlb	0	; () banked
  6637  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6638  000BDA  0EFF               	movlw	high STR_10
  6639  000BDC  0100               	movlb	0	; () banked
  6640  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6641  000BE0  EC0D  F021         	call	_strcpy	;wreg free
  6642                           
  6643                           ;UI.c: 133: break;
  6644  000BE4  D0C8               	goto	l7494
  6645  000BE6                     l7470:
  6646                           
  6647                           ;UI.c: 135: strcpy(month, "APR");
  6648  000BE6  0ED6               	movlw	low UI@month
  6649  000BE8  0100               	movlb	0	; () banked
  6650  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6651  000BEC  0E00               	movlw	high UI@month
  6652  000BEE  0100               	movlb	0	; () banked
  6653  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6654  000BF2  0EEB               	movlw	low STR_11
  6655  000BF4  0100               	movlb	0	; () banked
  6656  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6657  000BF8  0EFF               	movlw	high STR_11
  6658  000BFA  0100               	movlb	0	; () banked
  6659  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6660  000BFE  EC0D  F021         	call	_strcpy	;wreg free
  6661                           
  6662                           ;UI.c: 136: break;
  6663  000C02  D0B9               	goto	l7494
  6664  000C04                     l7472:
  6665                           
  6666                           ;UI.c: 138: strcpy(month, "MAY");
  6667  000C04  0ED6               	movlw	low UI@month
  6668  000C06  0100               	movlb	0	; () banked
  6669  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6670  000C0A  0E00               	movlw	high UI@month
  6671  000C0C  0100               	movlb	0	; () banked
  6672  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6673  000C10  0EFB               	movlw	low STR_12
  6674  000C12  0100               	movlb	0	; () banked
  6675  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6676  000C16  0EFF               	movlw	high STR_12
  6677  000C18  0100               	movlb	0	; () banked
  6678  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6679  000C1C  EC0D  F021         	call	_strcpy	;wreg free
  6680                           
  6681                           ;UI.c: 139: break;
  6682  000C20  D0AA               	goto	l7494
  6683  000C22                     l7474:
  6684                           
  6685                           ;UI.c: 141: strcpy(month, "JUN");
  6686  000C22  0ED6               	movlw	low UI@month
  6687  000C24  0100               	movlb	0	; () banked
  6688  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6689  000C28  0E00               	movlw	high UI@month
  6690  000C2A  0100               	movlb	0	; () banked
  6691  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6692  000C2E  0EDF               	movlw	low STR_13
  6693  000C30  0100               	movlb	0	; () banked
  6694  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6695  000C34  0EFF               	movlw	high STR_13
  6696  000C36  0100               	movlb	0	; () banked
  6697  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6698  000C3A  EC0D  F021         	call	_strcpy	;wreg free
  6699                           
  6700                           ;UI.c: 142: break;
  6701  000C3E  D09B               	goto	l7494
  6702  000C40                     l7476:
  6703                           
  6704                           ;UI.c: 144: strcpy(month, "JUL");
  6705  000C40  0ED6               	movlw	low UI@month
  6706  000C42  0100               	movlb	0	; () banked
  6707  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6708  000C46  0E00               	movlw	high UI@month
  6709  000C48  0100               	movlb	0	; () banked
  6710  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6711  000C4C  0ED7               	movlw	low STR_14
  6712  000C4E  0100               	movlb	0	; () banked
  6713  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6714  000C52  0EFF               	movlw	high STR_14
  6715  000C54  0100               	movlb	0	; () banked
  6716  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6717  000C58  EC0D  F021         	call	_strcpy	;wreg free
  6718                           
  6719                           ;UI.c: 145: break;
  6720  000C5C  D08C               	goto	l7494
  6721  000C5E                     l7478:
  6722                           
  6723                           ;UI.c: 147: strcpy(month, "AUG");
  6724  000C5E  0ED6               	movlw	low UI@month
  6725  000C60  0100               	movlb	0	; () banked
  6726  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6727  000C64  0E00               	movlw	high UI@month
  6728  000C66  0100               	movlb	0	; () banked
  6729  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6730  000C6A  0ED3               	movlw	low STR_15
  6731  000C6C  0100               	movlb	0	; () banked
  6732  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6733  000C70  0EFF               	movlw	high STR_15
  6734  000C72  0100               	movlb	0	; () banked
  6735  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6736  000C76  EC0D  F021         	call	_strcpy	;wreg free
  6737                           
  6738                           ;UI.c: 148: break;
  6739  000C7A  D07D               	goto	l7494
  6740  000C7C                     l7480:
  6741                           
  6742                           ;UI.c: 150: strcpy(month, "SEP");
  6743  000C7C  0ED6               	movlw	low UI@month
  6744  000C7E  0100               	movlb	0	; () banked
  6745  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6746  000C82  0E00               	movlw	high UI@month
  6747  000C84  0100               	movlb	0	; () banked
  6748  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6749  000C88  0EE3               	movlw	low STR_16
  6750  000C8A  0100               	movlb	0	; () banked
  6751  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6752  000C8E  0EFF               	movlw	high STR_16
  6753  000C90  0100               	movlb	0	; () banked
  6754  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6755  000C94  EC0D  F021         	call	_strcpy	;wreg free
  6756                           
  6757                           ;UI.c: 151: break;
  6758  000C98  D06E               	goto	l7494
  6759  000C9A                     l7482:
  6760                           
  6761                           ;UI.c: 153: strcpy(month, "OCT");
  6762  000C9A  0ED6               	movlw	low UI@month
  6763  000C9C  0100               	movlb	0	; () banked
  6764  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6765  000CA0  0E00               	movlw	high UI@month
  6766  000CA2  0100               	movlb	0	; () banked
  6767  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6768  000CA6  0EF3               	movlw	low STR_17
  6769  000CA8  0100               	movlb	0	; () banked
  6770  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6771  000CAC  0EFF               	movlw	high STR_17
  6772  000CAE  0100               	movlb	0	; () banked
  6773  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6774  000CB2  EC0D  F021         	call	_strcpy	;wreg free
  6775                           
  6776                           ;UI.c: 154: break;
  6777  000CB6  D05F               	goto	l7494
  6778  000CB8                     l7484:
  6779                           
  6780                           ;UI.c: 156: strcpy(month, "NOV");
  6781  000CB8  0ED6               	movlw	low UI@month
  6782  000CBA  0100               	movlb	0	; () banked
  6783  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6784  000CBE  0E00               	movlw	high UI@month
  6785  000CC0  0100               	movlb	0	; () banked
  6786  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6787  000CC4  0EF7               	movlw	low STR_18
  6788  000CC6  0100               	movlb	0	; () banked
  6789  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6790  000CCA  0EFF               	movlw	high STR_18
  6791  000CCC  0100               	movlb	0	; () banked
  6792  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6793  000CD0  EC0D  F021         	call	_strcpy	;wreg free
  6794                           
  6795                           ;UI.c: 157: break;
  6796  000CD4  D050               	goto	l7494
  6797  000CD6                     l7486:
  6798                           
  6799                           ;UI.c: 159: strcpy(month, "DEC");
  6800  000CD6  0ED6               	movlw	low UI@month
  6801  000CD8  0100               	movlb	0	; () banked
  6802  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6803  000CDC  0E00               	movlw	high UI@month
  6804  000CDE  0100               	movlb	0	; () banked
  6805  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6806  000CE2  0ECF               	movlw	low STR_19
  6807  000CE4  0100               	movlb	0	; () banked
  6808  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6809  000CE8  0EFF               	movlw	high STR_19
  6810  000CEA  0100               	movlb	0	; () banked
  6811  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6812  000CEE  EC0D  F021         	call	_strcpy	;wreg free
  6813                           
  6814                           ;UI.c: 160: break;
  6815  000CF2  D041               	goto	l7494
  6816  000CF4                     l7488:
  6817                           
  6818                           ;UI.c: 162: strcpy(month, "ERR");
  6819  000CF4  0ED6               	movlw	low UI@month
  6820  000CF6  0100               	movlb	0	; () banked
  6821  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6822  000CFA  0E00               	movlw	high UI@month
  6823  000CFC  0100               	movlb	0	; () banked
  6824  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6825  000D00  0EEF               	movlw	low STR_20
  6826  000D02  0100               	movlb	0	; () banked
  6827  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6828  000D06  0EFF               	movlw	high STR_20
  6829  000D08  0100               	movlb	0	; () banked
  6830  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6831  000D0C  EC0D  F021         	call	_strcpy	;wreg free
  6832                           
  6833                           ;UI.c: 164: }
  6834                           
  6835                           ;UI.c: 163: break;
  6836  000D10  D032               	goto	l7494
  6837  000D12                     l7492:
  6838  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6839  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6840  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6841                           
  6842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6843                           ; Switch size 1, requested type "space"
  6844                           ; Number of cases is 1, Range of values is 0 to 0
  6845                           ; switch strategies available:
  6846                           ; Name         Instructions Cycles
  6847                           ; simple_byte            4     3 (average)
  6848                           ;	Chosen strategy is simple_byte
  6849  000D1E  0100               	movlb	0	; () banked
  6850  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6851  000D22  0A00               	xorlw	0	; case 0
  6852  000D24  A4D8               	btfss	status,2,c
  6853  000D26  D7E6               	goto	l7488
  6854                           
  6855                           ; BSR set to: 0
  6856                           ; Switch size 1, requested type "space"
  6857                           ; Number of cases is 12, Range of values is 1 to 12
  6858                           ; switch strategies available:
  6859                           ; Name         Instructions Cycles
  6860                           ; simple_byte           37    19 (average)
  6861                           ;	Chosen strategy is simple_byte
  6862  000D28  0100               	movlb	0	; () banked
  6863  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6864  000D2C  0A01               	xorlw	1	; case 1
  6865  000D2E  B4D8               	btfsc	status,2,c
  6866  000D30  D72D               	goto	l7464
  6867  000D32  0A03               	xorlw	3	; case 2
  6868  000D34  B4D8               	btfsc	status,2,c
  6869  000D36  D739               	goto	l7466
  6870  000D38  0A01               	xorlw	1	; case 3
  6871  000D3A  B4D8               	btfsc	status,2,c
  6872  000D3C  D745               	goto	l7468
  6873  000D3E  0A07               	xorlw	7	; case 4
  6874  000D40  B4D8               	btfsc	status,2,c
  6875  000D42  D751               	goto	l7470
  6876  000D44  0A01               	xorlw	1	; case 5
  6877  000D46  B4D8               	btfsc	status,2,c
  6878  000D48  D75D               	goto	l7472
  6879  000D4A  0A03               	xorlw	3	; case 6
  6880  000D4C  B4D8               	btfsc	status,2,c
  6881  000D4E  D769               	goto	l7474
  6882  000D50  0A01               	xorlw	1	; case 7
  6883  000D52  B4D8               	btfsc	status,2,c
  6884  000D54  D775               	goto	l7476
  6885  000D56  0A0F               	xorlw	15	; case 8
  6886  000D58  B4D8               	btfsc	status,2,c
  6887  000D5A  D781               	goto	l7478
  6888  000D5C  0A01               	xorlw	1	; case 9
  6889  000D5E  B4D8               	btfsc	status,2,c
  6890  000D60  D78D               	goto	l7480
  6891  000D62  0A03               	xorlw	3	; case 10
  6892  000D64  B4D8               	btfsc	status,2,c
  6893  000D66  D799               	goto	l7482
  6894  000D68  0A01               	xorlw	1	; case 11
  6895  000D6A  B4D8               	btfsc	status,2,c
  6896  000D6C  D7A5               	goto	l7484
  6897  000D6E  0A07               	xorlw	7	; case 12
  6898  000D70  B4D8               	btfsc	status,2,c
  6899  000D72  D7B1               	goto	l7486
  6900  000D74  D7BF               	goto	l7488
  6901  000D76                     l7494:
  6902                           
  6903                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6904  000D76  0E30               	movlw	low STR_21
  6905  000D78  0100               	movlb	0	; () banked
  6906  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6907  000D7C  0EFB               	movlw	high STR_21
  6908  000D7E  0100               	movlb	0	; () banked
  6909  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6910  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6911  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6912  000D8A  0ED6               	movlw	low UI@month
  6913  000D8C  0100               	movlb	0	; () banked
  6914  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6915  000D90  0E00               	movlw	high UI@month
  6916  000D92  0100               	movlb	0	; () banked
  6917  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6918  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6919  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6920  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6921  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6922  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6923  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6924  000DAE  ECB8  F008         	call	_printf	;wreg free
  6925                           
  6926                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6927  000DB2  0E00               	movlw	0
  6928  000DB4  0100               	movlb	0	; () banked
  6929  000DB6  6FCC               	movwf	UI@i_430& (0+255),b
  6930  000DB8                     l7498:
  6931                           
  6932                           ; BSR set to: 0
  6933  000DB8  0E63               	movlw	99
  6934  000DBA  0100               	movlb	0	; () banked
  6935  000DBC  65CC               	cpfsgt	UI@i_430& (0+255),b
  6936  000DBE  D001               	goto	l7502
  6937  000DC0  D00C               	goto	l7506
  6938  000DC2                     l7502:
  6939                           
  6940                           ; BSR set to: 0
  6941  000DC2  0E68               	movlw	104
  6942  000DC4  0100               	movlb	0	; () banked
  6943  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6944  000DC8  0EE4               	movlw	228
  6945  000DCA                     u7297:
  6946  000DCA  2EE8               	decfsz	wreg,f,c
  6947  000DCC  D7FE               	bra	u7297
  6948  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6949  000DD0  D7FC               	bra	u7297
  6950  000DD2  F000               	nop	
  6951  000DD4  0100               	movlb	0	; () banked
  6952  000DD6  2BCC               	incf	UI@i_430& (0+255),f,b
  6953  000DD8  D7EF               	goto	l7498
  6954  000DDA                     l7506:
  6955                           
  6956                           ; BSR set to: 0
  6957  000DDA  0100               	movlb	0	; () banked
  6958  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6959  000DDE  0100               	movlb	0	; () banked
  6960  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6961  000DE2  B4D8               	btfsc	status,2,c
  6962  000DE4  0012               	return	
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6966                           
  6967                           ; BSR set to: 0
  6968                           
  6969                           ; BSR set to: 0
  6970  000DE6  0E00               	movlw	0
  6971  000DE8  0100               	movlb	0	; () banked
  6972  000DEA  6FCD               	movwf	UI@i_431& (0+255),b
  6973  000DEC                     l7512:
  6974                           
  6975                           ; BSR set to: 0
  6976  000DEC  0E63               	movlw	99
  6977  000DEE  0100               	movlb	0	; () banked
  6978  000DF0  65CD               	cpfsgt	UI@i_431& (0+255),b
  6979  000DF2  D001               	goto	l7516
  6980  000DF4  D00C               	goto	l7520
  6981  000DF6                     l7516:
  6982                           
  6983                           ; BSR set to: 0
  6984  000DF6  0E68               	movlw	104
  6985  000DF8  0100               	movlb	0	; () banked
  6986  000DFA  6FC4               	movwf	??_UI& (0+255),b
  6987  000DFC  0EE4               	movlw	228
  6988  000DFE                     u7307:
  6989  000DFE  2EE8               	decfsz	wreg,f,c
  6990  000E00  D7FE               	bra	u7307
  6991  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  6992  000E04  D7FC               	bra	u7307
  6993  000E06  F000               	nop	
  6994  000E08  0100               	movlb	0	; () banked
  6995  000E0A  2BCD               	incf	UI@i_431& (0+255),f,b
  6996  000E0C  D7EF               	goto	l7512
  6997  000E0E                     l7520:
  6998                           
  6999                           ; BSR set to: 0
  7000  000E0E  0100               	movlb	0	; () banked
  7001  000E10  51F6               	movf	_logstate& (0+255),w,b
  7002  000E12  0100               	movlb	0	; () banked
  7003  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7004  000E16  B4D8               	btfsc	status,2,c
  7005  000E18  0012               	return	
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7009                           
  7010                           ; BSR set to: 0
  7011                           
  7012                           ; BSR set to: 0
  7013  000E1A  0E01               	movlw	1
  7014  000E1C  EC83  F023         	call	_lcdInst
  7015  000E20  0E68               	movlw	104
  7016  000E22  0100               	movlb	0	; () banked
  7017  000E24  6FC4               	movwf	??_UI& (0+255),b
  7018  000E26  0EE4               	movlw	228
  7019  000E28                     u7317:
  7020  000E28  2EE8               	decfsz	wreg,f,c
  7021  000E2A  D7FE               	bra	u7317
  7022  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7023  000E2E  D7FC               	bra	u7317
  7024  000E30  F000               	nop	
  7025                           
  7026                           ;UI.c: 171: lcdInst(0b10000000);;
  7027  000E32  0E80               	movlw	128
  7028  000E34  EC83  F023         	call	_lcdInst
  7029                           
  7030                           ;UI.c: 172: printf("DURATION:");
  7031  000E38  0E9B               	movlw	low STR_22
  7032  000E3A  0100               	movlb	0	; () banked
  7033  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7034  000E3E  0EFF               	movlw	high STR_22
  7035  000E40  0100               	movlb	0	; () banked
  7036  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7037  000E44  ECB8  F008         	call	_printf	;wreg free
  7038                           
  7039                           ;UI.c: 173: lcdInst(0b11000000);;
  7040  000E48  0EC0               	movlw	192
  7041  000E4A  EC83  F023         	call	_lcdInst
  7042                           
  7043                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7044  000E4E  0E0E               	movlw	14
  7045  000E50  0100               	movlb	0	; () banked
  7046  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7047  000E54  0E10               	movlw	16
  7048  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7049  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7050  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7051  000E60  ECD8  F01B         	call	___awmod	;wreg free
  7052  000E64  C080  F0C6         	movff	?___awmod,_UI$2291
  7053  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2291+1
  7054                           
  7055                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7056  000E6C  0E0D               	movlw	low STR_23
  7057  000E6E  0100               	movlb	0	; () banked
  7058  000E70  6F8E               	movwf	printf@f& (0+255),b
  7059  000E72  0EFF               	movlw	high STR_23
  7060  000E74  0100               	movlb	0	; () banked
  7061  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7062  000E78  0E0E               	movlw	14
  7063  000E7A  0100               	movlb	0	; () banked
  7064  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7065  000E7E  0E10               	movlw	16
  7066  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7067  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7068  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7069  000E8A  ECD8  F01B         	call	___awmod	;wreg free
  7070  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7071  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7072  000E96  0E00               	movlw	0
  7073  000E98  0100               	movlb	0	; () banked
  7074  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7075  000E9C  0E3C               	movlw	60
  7076  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7077  000EA0  ECC6  F01A         	call	___awdiv	;wreg free
  7078  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7079  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7080  000EAC  C0C6  F080         	movff	_UI$2291,___awmod@dividend
  7081  000EB0  C0C7  F081         	movff	_UI$2291+1,___awmod@dividend+1
  7082  000EB4  0E00               	movlw	0
  7083  000EB6  0100               	movlb	0	; () banked
  7084  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7085  000EBA  0E3C               	movlw	60
  7086  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7087  000EBE  ECD8  F01B         	call	___awmod	;wreg free
  7088  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7089  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7090  000ECA  ECB8  F008         	call	_printf	;wreg free
  7091                           
  7092                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7093  000ECE  0E00               	movlw	0
  7094  000ED0  0100               	movlb	0	; () banked
  7095  000ED2  6FCE               	movwf	UI@i_434& (0+255),b
  7096  000ED4                     l7540:
  7097                           
  7098                           ; BSR set to: 0
  7099  000ED4  0E63               	movlw	99
  7100  000ED6  0100               	movlb	0	; () banked
  7101  000ED8  65CE               	cpfsgt	UI@i_434& (0+255),b
  7102  000EDA  D001               	goto	l7544
  7103  000EDC  D00C               	goto	l7548
  7104  000EDE                     l7544:
  7105                           
  7106                           ; BSR set to: 0
  7107  000EDE  0E68               	movlw	104
  7108  000EE0  0100               	movlb	0	; () banked
  7109  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7110  000EE4  0EE4               	movlw	228
  7111  000EE6                     u7327:
  7112  000EE6  2EE8               	decfsz	wreg,f,c
  7113  000EE8  D7FE               	bra	u7327
  7114  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7115  000EEC  D7FC               	bra	u7327
  7116  000EEE  F000               	nop	
  7117  000EF0  0100               	movlb	0	; () banked
  7118  000EF2  2BCE               	incf	UI@i_434& (0+255),f,b
  7119  000EF4  D7EF               	goto	l7540
  7120  000EF6                     l7548:
  7121                           
  7122                           ; BSR set to: 0
  7123  000EF6  0100               	movlb	0	; () banked
  7124  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7125  000EFA  0100               	movlb	0	; () banked
  7126  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7127  000EFE  B4D8               	btfsc	status,2,c
  7128  000F00  0012               	return	
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7132                           
  7133                           ; BSR set to: 0
  7134                           
  7135                           ; BSR set to: 0
  7136  000F02  0E00               	movlw	0
  7137  000F04  0100               	movlb	0	; () banked
  7138  000F06  6FCF               	movwf	UI@i_435& (0+255),b
  7139  000F08                     l7554:
  7140                           
  7141                           ; BSR set to: 0
  7142  000F08  0E63               	movlw	99
  7143  000F0A  0100               	movlb	0	; () banked
  7144  000F0C  65CF               	cpfsgt	UI@i_435& (0+255),b
  7145  000F0E  D001               	goto	l7558
  7146  000F10  D00C               	goto	l7562
  7147  000F12                     l7558:
  7148                           
  7149                           ; BSR set to: 0
  7150  000F12  0E68               	movlw	104
  7151  000F14  0100               	movlb	0	; () banked
  7152  000F16  6FC4               	movwf	??_UI& (0+255),b
  7153  000F18  0EE4               	movlw	228
  7154  000F1A                     u7337:
  7155  000F1A  2EE8               	decfsz	wreg,f,c
  7156  000F1C  D7FE               	bra	u7337
  7157  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7158  000F20  D7FC               	bra	u7337
  7159  000F22  F000               	nop	
  7160  000F24  0100               	movlb	0	; () banked
  7161  000F26  2BCF               	incf	UI@i_435& (0+255),f,b
  7162  000F28  D7EF               	goto	l7554
  7163  000F2A                     l7562:
  7164                           
  7165                           ; BSR set to: 0
  7166  000F2A  0100               	movlb	0	; () banked
  7167  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7168  000F2E  0100               	movlb	0	; () banked
  7169  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7170  000F32  B4D8               	btfsc	status,2,c
  7171  000F34  0012               	return	
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7175                           
  7176                           ; BSR set to: 0
  7177                           
  7178                           ; BSR set to: 0
  7179  000F36  0E01               	movlw	1
  7180  000F38  EC83  F023         	call	_lcdInst
  7181  000F3C  0E68               	movlw	104
  7182  000F3E  0100               	movlb	0	; () banked
  7183  000F40  6FC4               	movwf	??_UI& (0+255),b
  7184  000F42  0EE4               	movlw	228
  7185  000F44                     u7347:
  7186  000F44  2EE8               	decfsz	wreg,f,c
  7187  000F46  D7FE               	bra	u7347
  7188  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7189  000F4A  D7FC               	bra	u7347
  7190  000F4C  F000               	nop	
  7191                           
  7192                           ;UI.c: 180: lcdInst(0b10000000);;
  7193  000F4E  0E80               	movlw	128
  7194  000F50  EC83  F023         	call	_lcdInst
  7195                           
  7196                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7197  000F54  0E52               	movlw	low STR_24
  7198  000F56  0100               	movlb	0	; () banked
  7199  000F58  6F8E               	movwf	printf@f& (0+255),b
  7200  000F5A  0EFD               	movlw	high STR_24
  7201  000F5C  0100               	movlb	0	; () banked
  7202  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7203  000F60  ECB8  F008         	call	_printf	;wreg free
  7204                           
  7205                           ;UI.c: 182: lcdInst(0b11000000);;
  7206  000F64  0EC0               	movlw	192
  7207  000F66  EC83  F023         	call	_lcdInst
  7208                           
  7209                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7210  000F6A  0E70               	movlw	low STR_25
  7211  000F6C  0100               	movlb	0	; () banked
  7212  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7213  000F70  0EFB               	movlw	high STR_25
  7214  000F72  0100               	movlb	0	; () banked
  7215  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7216  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7217  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7218  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7219  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7220  000F86  ECB8  F008         	call	_printf	;wreg free
  7221                           
  7222                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7223  000F8A  0E00               	movlw	0
  7224  000F8C  0100               	movlb	0	; () banked
  7225  000F8E  6FD0               	movwf	UI@i_438& (0+255),b
  7226  000F90                     l7580:
  7227                           
  7228                           ; BSR set to: 0
  7229  000F90  0E63               	movlw	99
  7230  000F92  0100               	movlb	0	; () banked
  7231  000F94  65D0               	cpfsgt	UI@i_438& (0+255),b
  7232  000F96  D001               	goto	l7584
  7233  000F98  D00C               	goto	l7588
  7234  000F9A                     l7584:
  7235                           
  7236                           ; BSR set to: 0
  7237  000F9A  0E68               	movlw	104
  7238  000F9C  0100               	movlb	0	; () banked
  7239  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7240  000FA0  0EE4               	movlw	228
  7241  000FA2                     u7357:
  7242  000FA2  2EE8               	decfsz	wreg,f,c
  7243  000FA4  D7FE               	bra	u7357
  7244  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7245  000FA8  D7FC               	bra	u7357
  7246  000FAA  F000               	nop	
  7247  000FAC  0100               	movlb	0	; () banked
  7248  000FAE  2BD0               	incf	UI@i_438& (0+255),f,b
  7249  000FB0  D7EF               	goto	l7580
  7250  000FB2                     l7588:
  7251                           
  7252                           ; BSR set to: 0
  7253  000FB2  0100               	movlb	0	; () banked
  7254  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7255  000FB6  0100               	movlb	0	; () banked
  7256  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7257  000FBA  B4D8               	btfsc	status,2,c
  7258  000FBC  0012               	return	
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7262                           
  7263                           ; BSR set to: 0
  7264                           
  7265                           ; BSR set to: 0
  7266  000FBE  0E00               	movlw	0
  7267  000FC0  0100               	movlb	0	; () banked
  7268  000FC2  6FD1               	movwf	UI@i_439& (0+255),b
  7269  000FC4                     l7594:
  7270                           
  7271                           ; BSR set to: 0
  7272  000FC4  0E63               	movlw	99
  7273  000FC6  0100               	movlb	0	; () banked
  7274  000FC8  65D1               	cpfsgt	UI@i_439& (0+255),b
  7275  000FCA  D001               	goto	l7598
  7276  000FCC  D00C               	goto	l7602
  7277  000FCE                     l7598:
  7278                           
  7279                           ; BSR set to: 0
  7280  000FCE  0E68               	movlw	104
  7281  000FD0  0100               	movlb	0	; () banked
  7282  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7283  000FD4  0EE4               	movlw	228
  7284  000FD6                     u7367:
  7285  000FD6  2EE8               	decfsz	wreg,f,c
  7286  000FD8  D7FE               	bra	u7367
  7287  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7288  000FDC  D7FC               	bra	u7367
  7289  000FDE  F000               	nop	
  7290  000FE0  0100               	movlb	0	; () banked
  7291  000FE2  2BD1               	incf	UI@i_439& (0+255),f,b
  7292  000FE4  D7EF               	goto	l7594
  7293  000FE6                     l7602:
  7294                           
  7295                           ; BSR set to: 0
  7296  000FE6  0100               	movlb	0	; () banked
  7297  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7298  000FEA  0100               	movlb	0	; () banked
  7299  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7300  000FEE  B4D8               	btfsc	status,2,c
  7301  000FF0  0012               	return	
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7305                           
  7306                           ; BSR set to: 0
  7307                           
  7308                           ; BSR set to: 0
  7309  000FF2  0E01               	movlw	1
  7310  000FF4  EC83  F023         	call	_lcdInst
  7311  000FF8  0E68               	movlw	104
  7312  000FFA  0100               	movlb	0	; () banked
  7313  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7314  000FFE  0EE4               	movlw	228
  7315  001000                     u7377:
  7316  001000  2EE8               	decfsz	wreg,f,c
  7317  001002  D7FE               	bra	u7377
  7318  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7319  001006  D7FC               	bra	u7377
  7320  001008  F000               	nop	
  7321                           
  7322                           ;UI.c: 189: lcdInst(0b10000000);;
  7323  00100A  0E80               	movlw	128
  7324  00100C  EC83  F023         	call	_lcdInst
  7325                           
  7326                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7327  001010  0E63               	movlw	low STR_26
  7328  001012  0100               	movlb	0	; () banked
  7329  001014  6F8E               	movwf	printf@f& (0+255),b
  7330  001016  0EFD               	movlw	high STR_26
  7331  001018  0100               	movlb	0	; () banked
  7332  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7333  00101C  ECB8  F008         	call	_printf	;wreg free
  7334                           
  7335                           ;UI.c: 191: lcdInst(0b11000000);;
  7336  001020  0EC0               	movlw	192
  7337  001022  EC83  F023         	call	_lcdInst
  7338                           
  7339                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7340  001026  0E5D               	movlw	low STR_27
  7341  001028  0100               	movlb	0	; () banked
  7342  00102A  6F8E               	movwf	printf@f& (0+255),b
  7343  00102C  0EFB               	movlw	high STR_27
  7344  00102E  0100               	movlb	0	; () banked
  7345  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7346  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7347  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7348  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7349  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7350  001042  ECB8  F008         	call	_printf	;wreg free
  7351                           
  7352                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7353  001046  0E00               	movlw	0
  7354  001048  0100               	movlb	0	; () banked
  7355  00104A  6FD2               	movwf	UI@i_442& (0+255),b
  7356  00104C                     l7620:
  7357                           
  7358                           ; BSR set to: 0
  7359  00104C  0E63               	movlw	99
  7360  00104E  0100               	movlb	0	; () banked
  7361  001050  65D2               	cpfsgt	UI@i_442& (0+255),b
  7362  001052  D001               	goto	l7624
  7363  001054  D00C               	goto	l7628
  7364  001056                     l7624:
  7365                           
  7366                           ; BSR set to: 0
  7367  001056  0E68               	movlw	104
  7368  001058  0100               	movlb	0	; () banked
  7369  00105A  6FC4               	movwf	??_UI& (0+255),b
  7370  00105C  0EE4               	movlw	228
  7371  00105E                     u7387:
  7372  00105E  2EE8               	decfsz	wreg,f,c
  7373  001060  D7FE               	bra	u7387
  7374  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7375  001064  D7FC               	bra	u7387
  7376  001066  F000               	nop	
  7377  001068  0100               	movlb	0	; () banked
  7378  00106A  2BD2               	incf	UI@i_442& (0+255),f,b
  7379  00106C  D7EF               	goto	l7620
  7380  00106E                     l7628:
  7381                           
  7382                           ; BSR set to: 0
  7383  00106E  0100               	movlb	0	; () banked
  7384  001070  51F6               	movf	_logstate& (0+255),w,b
  7385  001072  0100               	movlb	0	; () banked
  7386  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7387  001076  B4D8               	btfsc	status,2,c
  7388  001078  0012               	return	
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7392                           
  7393                           ; BSR set to: 0
  7394                           
  7395                           ; BSR set to: 0
  7396  00107A  0E00               	movlw	0
  7397  00107C  0100               	movlb	0	; () banked
  7398  00107E  6FD3               	movwf	UI@i_443& (0+255),b
  7399  001080                     l7634:
  7400                           
  7401                           ; BSR set to: 0
  7402  001080  0E63               	movlw	99
  7403  001082  0100               	movlb	0	; () banked
  7404  001084  65D3               	cpfsgt	UI@i_443& (0+255),b
  7405  001086  D001               	goto	l7638
  7406  001088  D00C               	goto	l7642
  7407  00108A                     l7638:
  7408                           
  7409                           ; BSR set to: 0
  7410  00108A  0E68               	movlw	104
  7411  00108C  0100               	movlb	0	; () banked
  7412  00108E  6FC4               	movwf	??_UI& (0+255),b
  7413  001090  0EE4               	movlw	228
  7414  001092                     u7397:
  7415  001092  2EE8               	decfsz	wreg,f,c
  7416  001094  D7FE               	bra	u7397
  7417  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7418  001098  D7FC               	bra	u7397
  7419  00109A  F000               	nop	
  7420  00109C  0100               	movlb	0	; () banked
  7421  00109E  2BD3               	incf	UI@i_443& (0+255),f,b
  7422  0010A0  D7EF               	goto	l7634
  7423  0010A2                     l7642:
  7424                           
  7425                           ; BSR set to: 0
  7426  0010A2  0100               	movlb	0	; () banked
  7427  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7428  0010A6  0100               	movlb	0	; () banked
  7429  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7430  0010AA  B4D8               	btfsc	status,2,c
  7431  0010AC  0012               	return	
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7435                           
  7436                           ; BSR set to: 0
  7437                           
  7438                           ; BSR set to: 0
  7439  0010AE  0E01               	movlw	1
  7440  0010B0  EC83  F023         	call	_lcdInst
  7441  0010B4  0E68               	movlw	104
  7442  0010B6  0100               	movlb	0	; () banked
  7443  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7444  0010BA  0EE4               	movlw	228
  7445  0010BC                     u7407:
  7446  0010BC  2EE8               	decfsz	wreg,f,c
  7447  0010BE  D7FE               	bra	u7407
  7448  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7449  0010C2  D7FC               	bra	u7407
  7450  0010C4  F000               	nop	
  7451                           
  7452                           ;UI.c: 198: lcdInst(0b10000000);;
  7453  0010C6  0E80               	movlw	128
  7454  0010C8  EC83  F023         	call	_lcdInst
  7455                           
  7456                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7457  0010CC  0E74               	movlw	low STR_28
  7458  0010CE  0100               	movlb	0	; () banked
  7459  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7460  0010D2  0EFD               	movlw	high STR_28
  7461  0010D4  0100               	movlb	0	; () banked
  7462  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7463  0010D8  ECB8  F008         	call	_printf	;wreg free
  7464                           
  7465                           ;UI.c: 200: lcdInst(0b11000000);;
  7466  0010DC  0EC0               	movlw	192
  7467  0010DE  EC83  F023         	call	_lcdInst
  7468                           
  7469                           ;UI.c: 201: printf("%d", log_count_total);
  7470  0010E2  0E6D               	movlw	low (STR_27+16)
  7471  0010E4  0100               	movlb	0	; () banked
  7472  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7473  0010E8  0EFB               	movlw	high (STR_27+16)
  7474  0010EA  0100               	movlb	0	; () banked
  7475  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7476  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7477  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7478  0010F6  ECB8  F008         	call	_printf	;wreg free
  7479                           
  7480                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7481  0010FA  0E00               	movlw	0
  7482  0010FC  0100               	movlb	0	; () banked
  7483  0010FE  6FD4               	movwf	UI@i_446& (0+255),b
  7484  001100                     l7660:
  7485                           
  7486                           ; BSR set to: 0
  7487  001100  0E63               	movlw	99
  7488  001102  0100               	movlb	0	; () banked
  7489  001104  65D4               	cpfsgt	UI@i_446& (0+255),b
  7490  001106  D001               	goto	l7664
  7491  001108  D00C               	goto	l7668
  7492  00110A                     l7664:
  7493                           
  7494                           ; BSR set to: 0
  7495  00110A  0E68               	movlw	104
  7496  00110C  0100               	movlb	0	; () banked
  7497  00110E  6FC4               	movwf	??_UI& (0+255),b
  7498  001110  0EE4               	movlw	228
  7499  001112                     u7417:
  7500  001112  2EE8               	decfsz	wreg,f,c
  7501  001114  D7FE               	bra	u7417
  7502  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7503  001118  D7FC               	bra	u7417
  7504  00111A  F000               	nop	
  7505  00111C  0100               	movlb	0	; () banked
  7506  00111E  2BD4               	incf	UI@i_446& (0+255),f,b
  7507  001120  D7EF               	goto	l7660
  7508  001122                     l7668:
  7509                           
  7510                           ; BSR set to: 0
  7511  001122  0100               	movlb	0	; () banked
  7512  001124  51F6               	movf	_logstate& (0+255),w,b
  7513  001126  0100               	movlb	0	; () banked
  7514  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7515  00112A  B4D8               	btfsc	status,2,c
  7516  00112C  0012               	return	
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7520                           
  7521                           ; BSR set to: 0
  7522                           
  7523                           ; BSR set to: 0
  7524  00112E  0E00               	movlw	0
  7525  001130  0100               	movlb	0	; () banked
  7526  001132  6FD5               	movwf	UI@i_447& (0+255),b
  7527  001134                     l7674:
  7528                           
  7529                           ; BSR set to: 0
  7530  001134  0E63               	movlw	99
  7531  001136  0100               	movlb	0	; () banked
  7532  001138  65D5               	cpfsgt	UI@i_447& (0+255),b
  7533  00113A  D001               	goto	l7678
  7534  00113C  D00C               	goto	l7682
  7535  00113E                     l7678:
  7536                           
  7537                           ; BSR set to: 0
  7538  00113E  0E68               	movlw	104
  7539  001140  0100               	movlb	0	; () banked
  7540  001142  6FC4               	movwf	??_UI& (0+255),b
  7541  001144  0EE4               	movlw	228
  7542  001146                     u7427:
  7543  001146  2EE8               	decfsz	wreg,f,c
  7544  001148  D7FE               	bra	u7427
  7545  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7546  00114C  D7FC               	bra	u7427
  7547  00114E  F000               	nop	
  7548  001150  0100               	movlb	0	; () banked
  7549  001152  2BD5               	incf	UI@i_447& (0+255),f,b
  7550  001154  D7EF               	goto	l7674
  7551  001156                     l7682:
  7552                           
  7553                           ; BSR set to: 0
  7554  001156  0100               	movlb	0	; () banked
  7555  001158  51F6               	movf	_logstate& (0+255),w,b
  7556  00115A  0100               	movlb	0	; () banked
  7557  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7558  00115E  B4D8               	btfsc	status,2,c
  7559  001160  0012               	return	
  7560  001162                     l7686:
  7561  001162  0100               	movlb	0	; () banked
  7562  001164  51F6               	movf	_logstate& (0+255),w,b
  7563  001166  0100               	movlb	0	; () banked
  7564  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7565  00116A  B4D8               	btfsc	status,2,c
  7566  00116C  0012               	return	
  7567  00116E  D44A               	goto	l7382
  7568  001170                     __end_of_UI:
  7569                           	opt stack 0
  7570                           tblptru	equ	0xFF8
  7571                           tblptrh	equ	0xFF7
  7572                           tblptrl	equ	0xFF6
  7573                           tablat	equ	0xFF5
  7574                           prodh	equ	0xFF4
  7575                           prodl	equ	0xFF3
  7576                           intcon	equ	0xFF2
  7577                           intcon2	equ	0xFF1
  7578                           intcon3	equ	0xFF0
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postdec1	equ	0xFE5
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _printRTC *****************
  7591 ;; Defined at:
  7592 ;;		line 63 in file "RTC.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  i               2   66[BANK0 ] int 
  7597 ;;  INT_time       14   46[BANK0 ] int [7]
  7598 ;;  month           4   62[BANK0 ] unsigned char [4]
  7599 ;;  RTC_month       2   60[BANK0 ] int 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;Total ram usage:       25 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:   10
  7616 ;; This function calls:
  7617 ;;		_getRTC
  7618 ;;		_lcdInst
  7619 ;;		_printf
  7620 ;;		_strcpy
  7621 ;; This function is called by:
  7622 ;;		_UI
  7623 ;;		_change_state_to_menu_start
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           	psect	text23
  7628  001C06                     __ptext23:
  7629                           	opt stack 0
  7630  001C06                     _printRTC:
  7631                           	opt stack 18
  7632                           
  7633                           ;RTC.c: 64: getRTC();
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;incstack = 0
  7637  001C06  EC49  F01D         	call	_getRTC	;wreg free
  7638                           
  7639                           ;RTC.c: 65: char month[] = "MMM";
  7640  001C0A  C133  F0BE         	movff	printRTC@F3214,printRTC@month
  7641  001C0E  C134  F0BF         	movff	printRTC@F3214+1,printRTC@month+1
  7642  001C12  C135  F0C0         	movff	printRTC@F3214+2,printRTC@month+2
  7643  001C16  C136  F0C1         	movff	printRTC@F3214+3,printRTC@month+3
  7644                           
  7645                           ;RTC.c: 66: int INT_time[7];
  7646                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7647  001C1A  0E00               	movlw	0
  7648  001C1C  0100               	movlb	0	; () banked
  7649  001C1E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7650  001C20  0E00               	movlw	0
  7651  001C22  6FC2               	movwf	printRTC@i& (0+255),b
  7652                           
  7653                           ; BSR set to: 0
  7654  001C24  0100               	movlb	0	; () banked
  7655  001C26  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7656  001C28  D008               	goto	l5802
  7657  001C2A  0100               	movlb	0	; () banked
  7658  001C2C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7659  001C2E  E146               	bnz	l595
  7660  001C30  0E07               	movlw	7
  7661  001C32  0100               	movlb	0	; () banked
  7662  001C34  5DC2               	subwf	printRTC@i& (0+255),w,b
  7663  001C36  B0D8               	btfsc	status,0,c
  7664  001C38  D041               	goto	l595
  7665  001C3A                     l5802:
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7669  001C3A  0E24               	movlw	low _time
  7670  001C3C  0100               	movlb	0	; () banked
  7671  001C3E  25C2               	addwf	printRTC@i& (0+255),w,b
  7672  001C40  6ED9               	movwf	fsr2l,c
  7673  001C42  0E01               	movlw	high _time
  7674  001C44  0100               	movlb	0	; () banked
  7675  001C46  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7676  001C48  6EDA               	movwf	fsr2h,c
  7677  001C4A  50DF               	movf	indf2,w,c
  7678  001C4C  0100               	movlb	0	; () banked
  7679  001C4E  6FAB               	movwf	??_printRTC& (0+255),b
  7680  001C50  0100               	movlb	0	; () banked
  7681  001C52  3BAB               	swapf	??_printRTC& (0+255),f,b
  7682  001C54  0E0F               	movlw	15
  7683  001C56  17AB               	andwf	??_printRTC& (0+255),f,b
  7684  001C58  0E0F               	movlw	15
  7685  001C5A  0100               	movlb	0	; () banked
  7686  001C5C  17AB               	andwf	??_printRTC& (0+255),f,b
  7687  001C5E  0100               	movlb	0	; () banked
  7688  001C60  51AB               	movf	??_printRTC& (0+255),w,b
  7689  001C62  0D0A               	mullw	10
  7690  001C64  0E24               	movlw	low _time
  7691  001C66  0100               	movlb	0	; () banked
  7692  001C68  25C2               	addwf	printRTC@i& (0+255),w,b
  7693  001C6A  6ED9               	movwf	fsr2l,c
  7694  001C6C  0E01               	movlw	high _time
  7695  001C6E  0100               	movlb	0	; () banked
  7696  001C70  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7697  001C72  6EDA               	movwf	fsr2h,c
  7698  001C74  50DF               	movf	indf2,w,c
  7699  001C76  0B0F               	andlw	15
  7700  001C78  0100               	movlb	0	; () banked
  7701  001C7A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7702  001C7C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7703  001C7E  50F3               	movf	prodl,w,c
  7704  001C80  0100               	movlb	0	; () banked
  7705  001C82  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7706  001C84  50F4               	movf	prodh,w,c
  7707  001C86  0100               	movlb	0	; () banked
  7708  001C88  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7709  001C8A  90D8               	bcf	status,0,c
  7710  001C8C  0100               	movlb	0	; () banked
  7711  001C8E  35C2               	rlcf	printRTC@i& (0+255),w,b
  7712  001C90  6ED9               	movwf	fsr2l,c
  7713  001C92  0100               	movlb	0	; () banked
  7714  001C94  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7715  001C96  6EDA               	movwf	fsr2h,c
  7716  001C98  0EAE               	movlw	low printRTC@INT_time
  7717  001C9A  26D9               	addwf	fsr2l,f,c
  7718  001C9C  0E00               	movlw	high printRTC@INT_time
  7719  001C9E  22DA               	addwfc	fsr2h,f,c
  7720  001CA0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7721  001CA4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7722                           
  7723                           ; BSR set to: 0
  7724  001CA8  0100               	movlb	0	; () banked
  7725  001CAA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7726  001CAC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7727                           
  7728                           ; BSR set to: 0
  7729  001CAE  0100               	movlb	0	; () banked
  7730  001CB0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7731  001CB2  D7C3               	goto	l5802
  7732  001CB4  0100               	movlb	0	; () banked
  7733  001CB6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7734  001CB8  E101               	bnz	u4490
  7735  001CBA  D7BA               	goto	L6
  7736  001CBC                     u4490:
  7737  001CBC                     l595:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;RTC.c: 69: }
  7741                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7742  001CBC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7743  001CC0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7744                           
  7745                           ;RTC.c: 71: switch(RTC_month){
  7746  001CC4  D0B4               	goto	l5834
  7747  001CC6                     l5808:
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;RTC.c: 73: strcpy(month, "JAN");
  7751  001CC6  0EBE               	movlw	low printRTC@month
  7752  001CC8  0100               	movlb	0	; () banked
  7753  001CCA  6F80               	movwf	strcpy@to& (0+255),b
  7754  001CCC  0E00               	movlw	high printRTC@month
  7755  001CCE  0100               	movlb	0	; () banked
  7756  001CD0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7757  001CD2  0EDB               	movlw	low STR_8
  7758  001CD4  0100               	movlb	0	; () banked
  7759  001CD6  6F82               	movwf	strcpy@from& (0+255),b
  7760  001CD8  0EFF               	movlw	high STR_8
  7761  001CDA  0100               	movlb	0	; () banked
  7762  001CDC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7763  001CDE  EC0D  F021         	call	_strcpy	;wreg free
  7764                           
  7765                           ;RTC.c: 74: break;
  7766  001CE2  D0D4               	goto	l5836
  7767  001CE4                     l5810:
  7768                           
  7769                           ;RTC.c: 76: strcpy(month, "FEB");
  7770  001CE4  0EBE               	movlw	low printRTC@month
  7771  001CE6  0100               	movlb	0	; () banked
  7772  001CE8  6F80               	movwf	strcpy@to& (0+255),b
  7773  001CEA  0E00               	movlw	high printRTC@month
  7774  001CEC  0100               	movlb	0	; () banked
  7775  001CEE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7776  001CF0  0ECB               	movlw	low STR_9
  7777  001CF2  0100               	movlb	0	; () banked
  7778  001CF4  6F82               	movwf	strcpy@from& (0+255),b
  7779  001CF6  0EFF               	movlw	high STR_9
  7780  001CF8  0100               	movlb	0	; () banked
  7781  001CFA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7782  001CFC  EC0D  F021         	call	_strcpy	;wreg free
  7783                           
  7784                           ;RTC.c: 77: break;
  7785  001D00  D0C5               	goto	l5836
  7786  001D02                     l5812:
  7787                           
  7788                           ;RTC.c: 79: strcpy(month, "MAR");
  7789  001D02  0EBE               	movlw	low printRTC@month
  7790  001D04  0100               	movlb	0	; () banked
  7791  001D06  6F80               	movwf	strcpy@to& (0+255),b
  7792  001D08  0E00               	movlw	high printRTC@month
  7793  001D0A  0100               	movlb	0	; () banked
  7794  001D0C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7795  001D0E  0EE7               	movlw	low STR_10
  7796  001D10  0100               	movlb	0	; () banked
  7797  001D12  6F82               	movwf	strcpy@from& (0+255),b
  7798  001D14  0EFF               	movlw	high STR_10
  7799  001D16  0100               	movlb	0	; () banked
  7800  001D18  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7801  001D1A  EC0D  F021         	call	_strcpy	;wreg free
  7802                           
  7803                           ;RTC.c: 80: break;
  7804  001D1E  D0B6               	goto	l5836
  7805  001D20                     l5814:
  7806                           
  7807                           ;RTC.c: 82: strcpy(month, "APR");
  7808  001D20  0EBE               	movlw	low printRTC@month
  7809  001D22  0100               	movlb	0	; () banked
  7810  001D24  6F80               	movwf	strcpy@to& (0+255),b
  7811  001D26  0E00               	movlw	high printRTC@month
  7812  001D28  0100               	movlb	0	; () banked
  7813  001D2A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7814  001D2C  0EEB               	movlw	low STR_11
  7815  001D2E  0100               	movlb	0	; () banked
  7816  001D30  6F82               	movwf	strcpy@from& (0+255),b
  7817  001D32  0EFF               	movlw	high STR_11
  7818  001D34  0100               	movlb	0	; () banked
  7819  001D36  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7820  001D38  EC0D  F021         	call	_strcpy	;wreg free
  7821                           
  7822                           ;RTC.c: 83: break;
  7823  001D3C  D0A7               	goto	l5836
  7824  001D3E                     l5816:
  7825                           
  7826                           ;RTC.c: 85: strcpy(month, "MAY");
  7827  001D3E  0EBE               	movlw	low printRTC@month
  7828  001D40  0100               	movlb	0	; () banked
  7829  001D42  6F80               	movwf	strcpy@to& (0+255),b
  7830  001D44  0E00               	movlw	high printRTC@month
  7831  001D46  0100               	movlb	0	; () banked
  7832  001D48  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7833  001D4A  0EFB               	movlw	low STR_12
  7834  001D4C  0100               	movlb	0	; () banked
  7835  001D4E  6F82               	movwf	strcpy@from& (0+255),b
  7836  001D50  0EFF               	movlw	high STR_12
  7837  001D52  0100               	movlb	0	; () banked
  7838  001D54  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7839  001D56  EC0D  F021         	call	_strcpy	;wreg free
  7840                           
  7841                           ;RTC.c: 86: break;
  7842  001D5A  D098               	goto	l5836
  7843  001D5C                     l5818:
  7844                           
  7845                           ;RTC.c: 88: strcpy(month, "JUN");
  7846  001D5C  0EBE               	movlw	low printRTC@month
  7847  001D5E  0100               	movlb	0	; () banked
  7848  001D60  6F80               	movwf	strcpy@to& (0+255),b
  7849  001D62  0E00               	movlw	high printRTC@month
  7850  001D64  0100               	movlb	0	; () banked
  7851  001D66  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7852  001D68  0EDF               	movlw	low STR_13
  7853  001D6A  0100               	movlb	0	; () banked
  7854  001D6C  6F82               	movwf	strcpy@from& (0+255),b
  7855  001D6E  0EFF               	movlw	high STR_13
  7856  001D70  0100               	movlb	0	; () banked
  7857  001D72  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7858  001D74  EC0D  F021         	call	_strcpy	;wreg free
  7859                           
  7860                           ;RTC.c: 89: break;
  7861  001D78  D089               	goto	l5836
  7862  001D7A                     l5820:
  7863                           
  7864                           ;RTC.c: 91: strcpy(month, "JUL");
  7865  001D7A  0EBE               	movlw	low printRTC@month
  7866  001D7C  0100               	movlb	0	; () banked
  7867  001D7E  6F80               	movwf	strcpy@to& (0+255),b
  7868  001D80  0E00               	movlw	high printRTC@month
  7869  001D82  0100               	movlb	0	; () banked
  7870  001D84  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7871  001D86  0ED7               	movlw	low STR_14
  7872  001D88  0100               	movlb	0	; () banked
  7873  001D8A  6F82               	movwf	strcpy@from& (0+255),b
  7874  001D8C  0EFF               	movlw	high STR_14
  7875  001D8E  0100               	movlb	0	; () banked
  7876  001D90  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7877  001D92  EC0D  F021         	call	_strcpy	;wreg free
  7878                           
  7879                           ;RTC.c: 92: break;
  7880  001D96  D07A               	goto	l5836
  7881  001D98                     l5822:
  7882                           
  7883                           ;RTC.c: 94: strcpy(month, "AUG");
  7884  001D98  0EBE               	movlw	low printRTC@month
  7885  001D9A  0100               	movlb	0	; () banked
  7886  001D9C  6F80               	movwf	strcpy@to& (0+255),b
  7887  001D9E  0E00               	movlw	high printRTC@month
  7888  001DA0  0100               	movlb	0	; () banked
  7889  001DA2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7890  001DA4  0ED3               	movlw	low STR_15
  7891  001DA6  0100               	movlb	0	; () banked
  7892  001DA8  6F82               	movwf	strcpy@from& (0+255),b
  7893  001DAA  0EFF               	movlw	high STR_15
  7894  001DAC  0100               	movlb	0	; () banked
  7895  001DAE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7896  001DB0  EC0D  F021         	call	_strcpy	;wreg free
  7897                           
  7898                           ;RTC.c: 95: break;
  7899  001DB4  D06B               	goto	l5836
  7900  001DB6                     l5824:
  7901                           
  7902                           ;RTC.c: 97: strcpy(month, "SEP");
  7903  001DB6  0EBE               	movlw	low printRTC@month
  7904  001DB8  0100               	movlb	0	; () banked
  7905  001DBA  6F80               	movwf	strcpy@to& (0+255),b
  7906  001DBC  0E00               	movlw	high printRTC@month
  7907  001DBE  0100               	movlb	0	; () banked
  7908  001DC0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7909  001DC2  0EE3               	movlw	low STR_16
  7910  001DC4  0100               	movlb	0	; () banked
  7911  001DC6  6F82               	movwf	strcpy@from& (0+255),b
  7912  001DC8  0EFF               	movlw	high STR_16
  7913  001DCA  0100               	movlb	0	; () banked
  7914  001DCC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7915  001DCE  EC0D  F021         	call	_strcpy	;wreg free
  7916                           
  7917                           ;RTC.c: 98: break;
  7918  001DD2  D05C               	goto	l5836
  7919  001DD4                     l5826:
  7920                           
  7921                           ;RTC.c: 100: strcpy(month, "OCT");
  7922  001DD4  0EBE               	movlw	low printRTC@month
  7923  001DD6  0100               	movlb	0	; () banked
  7924  001DD8  6F80               	movwf	strcpy@to& (0+255),b
  7925  001DDA  0E00               	movlw	high printRTC@month
  7926  001DDC  0100               	movlb	0	; () banked
  7927  001DDE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7928  001DE0  0EF3               	movlw	low STR_17
  7929  001DE2  0100               	movlb	0	; () banked
  7930  001DE4  6F82               	movwf	strcpy@from& (0+255),b
  7931  001DE6  0EFF               	movlw	high STR_17
  7932  001DE8  0100               	movlb	0	; () banked
  7933  001DEA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7934  001DEC  EC0D  F021         	call	_strcpy	;wreg free
  7935                           
  7936                           ;RTC.c: 101: break;
  7937  001DF0  D04D               	goto	l5836
  7938  001DF2                     l5828:
  7939                           
  7940                           ;RTC.c: 103: strcpy(month, "NOV");
  7941  001DF2  0EBE               	movlw	low printRTC@month
  7942  001DF4  0100               	movlb	0	; () banked
  7943  001DF6  6F80               	movwf	strcpy@to& (0+255),b
  7944  001DF8  0E00               	movlw	high printRTC@month
  7945  001DFA  0100               	movlb	0	; () banked
  7946  001DFC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7947  001DFE  0EF7               	movlw	low STR_18
  7948  001E00  0100               	movlb	0	; () banked
  7949  001E02  6F82               	movwf	strcpy@from& (0+255),b
  7950  001E04  0EFF               	movlw	high STR_18
  7951  001E06  0100               	movlb	0	; () banked
  7952  001E08  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7953  001E0A  EC0D  F021         	call	_strcpy	;wreg free
  7954                           
  7955                           ;RTC.c: 104: break;
  7956  001E0E  D03E               	goto	l5836
  7957  001E10                     l5830:
  7958                           
  7959                           ;RTC.c: 106: strcpy(month, "DEC");
  7960  001E10  0EBE               	movlw	low printRTC@month
  7961  001E12  0100               	movlb	0	; () banked
  7962  001E14  6F80               	movwf	strcpy@to& (0+255),b
  7963  001E16  0E00               	movlw	high printRTC@month
  7964  001E18  0100               	movlb	0	; () banked
  7965  001E1A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7966  001E1C  0ECF               	movlw	low STR_19
  7967  001E1E  0100               	movlb	0	; () banked
  7968  001E20  6F82               	movwf	strcpy@from& (0+255),b
  7969  001E22  0EFF               	movlw	high STR_19
  7970  001E24  0100               	movlb	0	; () banked
  7971  001E26  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7972  001E28  EC0D  F021         	call	_strcpy	;wreg free
  7973                           
  7974                           ;RTC.c: 108: }
  7975                           
  7976                           ;RTC.c: 107: break;
  7977  001E2C  D02F               	goto	l5836
  7978  001E2E                     l5834:
  7979  001E2E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7980  001E32  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7981                           
  7982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7983                           ; Switch size 1, requested type "space"
  7984                           ; Number of cases is 1, Range of values is 0 to 0
  7985                           ; switch strategies available:
  7986                           ; Name         Instructions Cycles
  7987                           ; simple_byte            4     3 (average)
  7988                           ;	Chosen strategy is simple_byte
  7989  001E36  0100               	movlb	0	; () banked
  7990  001E38  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7991  001E3A  0A00               	xorlw	0	; case 0
  7992  001E3C  A4D8               	btfss	status,2,c
  7993  001E3E  D026               	goto	l5836
  7994                           
  7995                           ; BSR set to: 0
  7996                           ; Switch size 1, requested type "space"
  7997                           ; Number of cases is 12, Range of values is 1 to 12
  7998                           ; switch strategies available:
  7999                           ; Name         Instructions Cycles
  8000                           ; simple_byte           37    19 (average)
  8001                           ;	Chosen strategy is simple_byte
  8002  001E40  0100               	movlb	0	; () banked
  8003  001E42  51AB               	movf	??_printRTC& (0+255),w,b
  8004  001E44  0A01               	xorlw	1	; case 1
  8005  001E46  B4D8               	btfsc	status,2,c
  8006  001E48  D73E               	goto	l5808
  8007  001E4A  0A03               	xorlw	3	; case 2
  8008  001E4C  B4D8               	btfsc	status,2,c
  8009  001E4E  D74A               	goto	l5810
  8010  001E50  0A01               	xorlw	1	; case 3
  8011  001E52  B4D8               	btfsc	status,2,c
  8012  001E54  D756               	goto	l5812
  8013  001E56  0A07               	xorlw	7	; case 4
  8014  001E58  B4D8               	btfsc	status,2,c
  8015  001E5A  D762               	goto	l5814
  8016  001E5C  0A01               	xorlw	1	; case 5
  8017  001E5E  B4D8               	btfsc	status,2,c
  8018  001E60  D76E               	goto	l5816
  8019  001E62  0A03               	xorlw	3	; case 6
  8020  001E64  B4D8               	btfsc	status,2,c
  8021  001E66  D77A               	goto	l5818
  8022  001E68  0A01               	xorlw	1	; case 7
  8023  001E6A  B4D8               	btfsc	status,2,c
  8024  001E6C  D786               	goto	l5820
  8025  001E6E  0A0F               	xorlw	15	; case 8
  8026  001E70  B4D8               	btfsc	status,2,c
  8027  001E72  D792               	goto	l5822
  8028  001E74  0A01               	xorlw	1	; case 9
  8029  001E76  B4D8               	btfsc	status,2,c
  8030  001E78  D79E               	goto	l5824
  8031  001E7A  0A03               	xorlw	3	; case 10
  8032  001E7C  B4D8               	btfsc	status,2,c
  8033  001E7E  D7AA               	goto	l5826
  8034  001E80  0A01               	xorlw	1	; case 11
  8035  001E82  B4D8               	btfsc	status,2,c
  8036  001E84  D7B6               	goto	l5828
  8037  001E86  0A07               	xorlw	7	; case 12
  8038  001E88  B4D8               	btfsc	status,2,c
  8039  001E8A  D7C2               	goto	l5830
  8040  001E8C                     l5836:
  8041                           
  8042                           ;RTC.c: 109: lcdInst(0b10000000);;
  8043  001E8C  0E80               	movlw	128
  8044  001E8E  EC83  F023         	call	_lcdInst
  8045                           
  8046                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8047  001E92  0E30               	movlw	low STR_21
  8048  001E94  0100               	movlb	0	; () banked
  8049  001E96  6F8E               	movwf	printf@f& (0+255),b
  8050  001E98  0EFB               	movlw	high STR_21
  8051  001E9A  0100               	movlb	0	; () banked
  8052  001E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8053  001E9E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8054  001EA2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8055  001EA6  0EBE               	movlw	low printRTC@month
  8056  001EA8  0100               	movlb	0	; () banked
  8057  001EAA  6F92               	movwf	(?_printf+4)& (0+255),b
  8058  001EAC  0E00               	movlw	high printRTC@month
  8059  001EAE  0100               	movlb	0	; () banked
  8060  001EB0  6F93               	movwf	(?_printf+5)& (0+255),b
  8061  001EB2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8062  001EB6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8063  001EBA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8064  001EBE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8065  001EC2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8066  001EC6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8067  001ECA  ECB8  F008         	call	_printf	;wreg free
  8068  001ECE  0012               	return		;funcret
  8069  001ED0                     __end_of_printRTC:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           intcon3	equ	0xFF0
  8080                           postinc0	equ	0xFEE
  8081                           wreg	equ	0xFE8
  8082                           postdec1	equ	0xFE5
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _strcpy *****************
  8092 ;; Defined at:
  8093 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8096 ;;		 -> printRTC@month(4), UI@month(4), 
  8097 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8098 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8099 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8100 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8101 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8102 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8103 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8104 ;;		 -> STR_8(4), 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8107 ;;		 -> printRTC@month(4), UI@month(4), 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  2    0[BANK0 ] PTR unsigned char 
  8110 ;; Registers used:
  8111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8117 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;Total ram usage:        6 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    7
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_UI
  8128 ;;		_printRTC
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           	psect	text24
  8133  00421A                     __ptext24:
  8134                           	opt stack 0
  8135  00421A                     _strcpy:
  8136                           	opt stack 20
  8137                           
  8138                           ;incstack = 0
  8139  00421A  C080  F084         	movff	strcpy@to,strcpy@cp
  8140  00421E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8141  004222  D006               	goto	l5540
  8142  004224                     l5538:
  8143  004224  0100               	movlb	0	; () banked
  8144  004226  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8145  004228  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8146  00422A  0100               	movlb	0	; () banked
  8147  00422C  4B82               	infsnz	strcpy@from& (0+255),f,b
  8148  00422E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8149  004230                     l5540:
  8150  004230  C082  FFF6         	movff	strcpy@from,tblptrl
  8151  004234  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8152  004238                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8153  004238  6AF8               	clrf	tblptru,c
  8154  00423A                     	endif
  8155  00423A                     	if	0	;tblptru may be non-zero
  8156  00423A                     	endif
  8157  00423A  C084  FFD9         	movff	strcpy@cp,fsr2l
  8158  00423E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8159  004242  0008               	tblrd		*
  8160  004244  CFF5 FFDF          	movff	tablat,indf2
  8161  004248  50DF               	movf	indf2,w,c
  8162  00424A  B4D8               	btfsc	status,2,c
  8163  00424C  0012               	return	
  8164  00424E  D7EA               	goto	l5538
  8165  004250                     __end_of_strcpy:
  8166                           	opt stack 0
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           intcon3	equ	0xFF0
  8176                           postinc0	equ	0xFEE
  8177                           wreg	equ	0xFE8
  8178                           postdec1	equ	0xFE5
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _getRTC *****************
  8188 ;; Defined at:
  8189 ;;		line 44 in file "RTC.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  i               2    3[BANK0 ] int 
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;Total ram usage:        2 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    9
  8210 ;; This function calls:
  8211 ;;		_I2C_Master_Read
  8212 ;;		_I2C_Master_Start
  8213 ;;		_I2C_Master_Stop
  8214 ;;		_I2C_Master_Write
  8215 ;; This function is called by:
  8216 ;;		_printRTC
  8217 ;;		_initSortTimer
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text25
  8222  003A92                     __ptext25:
  8223                           	opt stack 0
  8224  003A92                     _getRTC:
  8225                           	opt stack 18
  8226                           
  8227                           ;RTC.c: 48: I2C_Master_Start();
  8228                           
  8229                           ;incstack = 0
  8230  003A92  ECA9  F023         	call	_I2C_Master_Start	;wreg free
  8231                           
  8232                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8233  003A96  0E00               	movlw	0
  8234  003A98  0100               	movlb	0	; () banked
  8235  003A9A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8236  003A9C  0ED0               	movlw	208
  8237  003A9E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8238  003AA0  EC97  F023         	call	_I2C_Master_Write	;wreg free
  8239                           
  8240                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8241  003AA4  0E00               	movlw	0
  8242  003AA6  0100               	movlb	0	; () banked
  8243  003AA8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8244  003AAA  0E00               	movlw	0
  8245  003AAC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8246  003AAE  EC97  F023         	call	_I2C_Master_Write	;wreg free
  8247                           
  8248                           ;RTC.c: 51: I2C_Master_Stop();
  8249  003AB2  ECA5  F023         	call	_I2C_Master_Stop	;wreg free
  8250                           
  8251                           ;RTC.c: 54: I2C_Master_Start();
  8252  003AB6  ECA9  F023         	call	_I2C_Master_Start	;wreg free
  8253                           
  8254                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8255  003ABA  0E00               	movlw	0
  8256  003ABC  0100               	movlb	0	; () banked
  8257  003ABE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8258  003AC0  0ED1               	movlw	209
  8259  003AC2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8260  003AC4  EC97  F023         	call	_I2C_Master_Write	;wreg free
  8261                           
  8262                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8263  003AC8  0E00               	movlw	0
  8264  003ACA  0100               	movlb	0	; () banked
  8265  003ACC  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8266  003ACE  0E00               	movlw	0
  8267  003AD0  6F83               	movwf	getRTC@i& (0+255),b
  8268  003AD2                     l5546:
  8269                           
  8270                           ; BSR set to: 0
  8271  003AD2  0100               	movlb	0	; () banked
  8272  003AD4  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8273  003AD6  D008               	goto	l5550
  8274  003AD8  0100               	movlb	0	; () banked
  8275  003ADA  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8276  003ADC  E115               	bnz	l5556
  8277  003ADE  0E06               	movlw	6
  8278  003AE0  0100               	movlb	0	; () banked
  8279  003AE2  5D83               	subwf	getRTC@i& (0+255),w,b
  8280  003AE4  B0D8               	btfsc	status,0,c
  8281  003AE6  D010               	goto	l5556
  8282  003AE8                     l5550:
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8286  003AE8  0E24               	movlw	low _time
  8287  003AEA  0100               	movlb	0	; () banked
  8288  003AEC  2583               	addwf	getRTC@i& (0+255),w,b
  8289  003AEE  6ED9               	movwf	fsr2l,c
  8290  003AF0  0E01               	movlw	high _time
  8291  003AF2  0100               	movlb	0	; () banked
  8292  003AF4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8293  003AF6  6EDA               	movwf	fsr2h,c
  8294  003AF8  0E01               	movlw	1
  8295  003AFA  EC34  F022         	call	_I2C_Master_Read
  8296  003AFE  6EDF               	movwf	indf2,c
  8297  003B00  0100               	movlb	0	; () banked
  8298  003B02  4B83               	infsnz	getRTC@i& (0+255),f,b
  8299  003B04  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8300  003B06  D7E5               	goto	l5546
  8301  003B08                     l5556:
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;RTC.c: 58: }
  8305                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8306  003B08  0E00               	movlw	0
  8307  003B0A  EC34  F022         	call	_I2C_Master_Read
  8308  003B0E  0101               	movlb	1	; () banked
  8309  003B10  6F2A               	movwf	(_time+6)& (0+255),b
  8310                           
  8311                           ;RTC.c: 60: I2C_Master_Stop();
  8312  003B12  ECA5  F023         	call	_I2C_Master_Stop	;wreg free
  8313  003B16  0012               	return		;funcret
  8314  003B18                     __end_of_getRTC:
  8315                           	opt stack 0
  8316                           tblptru	equ	0xFF8
  8317                           tblptrh	equ	0xFF7
  8318                           tblptrl	equ	0xFF6
  8319                           tablat	equ	0xFF5
  8320                           prodh	equ	0xFF4
  8321                           prodl	equ	0xFF3
  8322                           intcon	equ	0xFF2
  8323                           intcon2	equ	0xFF1
  8324                           intcon3	equ	0xFF0
  8325                           postinc0	equ	0xFEE
  8326                           wreg	equ	0xFE8
  8327                           postdec1	equ	0xFE5
  8328                           fsr1l	equ	0xFE1
  8329                           indf2	equ	0xFDF
  8330                           postinc2	equ	0xFDE
  8331                           postdec2	equ	0xFDD
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function _I2C_Master_Write *****************
  8337 ;; Defined at:
  8338 ;;		line 49 in file "I2C.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  d               2    1[BANK0 ] unsigned int 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;		None
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      void 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;Total ram usage:        2 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    8
  8359 ;; This function calls:
  8360 ;;		_I2C_Master_Wait
  8361 ;; This function is called by:
  8362 ;;		_loadRTC
  8363 ;;		_getRTC
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text26
  8368  00472E                     __ptext26:
  8369                           	opt stack 0
  8370  00472E                     _I2C_Master_Write:
  8371                           	opt stack 18
  8372                           
  8373                           ;I2C.c: 51: I2C_Master_Wait();
  8374                           
  8375                           ;incstack = 0
  8376  00472E  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8377                           
  8378                           ;I2C.c: 52: SSPBUF = d;
  8379  004732  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8380  004736  0012               	return		;funcret
  8381  004738                     __end_of_I2C_Master_Write:
  8382                           	opt stack 0
  8383                           tblptru	equ	0xFF8
  8384                           tblptrh	equ	0xFF7
  8385                           tblptrl	equ	0xFF6
  8386                           tablat	equ	0xFF5
  8387                           prodh	equ	0xFF4
  8388                           prodl	equ	0xFF3
  8389                           intcon	equ	0xFF2
  8390                           intcon2	equ	0xFF1
  8391                           intcon3	equ	0xFF0
  8392                           postinc0	equ	0xFEE
  8393                           wreg	equ	0xFE8
  8394                           postdec1	equ	0xFE5
  8395                           fsr1l	equ	0xFE1
  8396                           indf2	equ	0xFDF
  8397                           postinc2	equ	0xFDE
  8398                           postdec2	equ	0xFDD
  8399                           fsr2h	equ	0xFDA
  8400                           fsr2l	equ	0xFD9
  8401                           status	equ	0xFD8
  8402                           
  8403 ;; *************** function _I2C_Master_Stop *****************
  8404 ;; Defined at:
  8405 ;;		line 43 in file "I2C.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;		None
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;		None
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  1    wreg      void 
  8412 ;; Registers used:
  8413 ;;		wreg, status,2, status,0, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : 0/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;Total ram usage:        0 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    8
  8426 ;; This function calls:
  8427 ;;		_I2C_Master_Wait
  8428 ;; This function is called by:
  8429 ;;		_loadRTC
  8430 ;;		_getRTC
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           	psect	text27
  8435  00474A                     __ptext27:
  8436                           	opt stack 0
  8437  00474A                     _I2C_Master_Stop:
  8438                           	opt stack 18
  8439                           
  8440                           ;I2C.c: 45: I2C_Master_Wait();
  8441                           
  8442                           ;incstack = 0
  8443  00474A  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8444                           
  8445                           ;I2C.c: 46: PEN = 1;
  8446  00474E  84C5               	bsf	4037,2,c	;volatile
  8447  004750  0012               	return		;funcret
  8448  004752                     __end_of_I2C_Master_Stop:
  8449                           	opt stack 0
  8450                           tblptru	equ	0xFF8
  8451                           tblptrh	equ	0xFF7
  8452                           tblptrl	equ	0xFF6
  8453                           tablat	equ	0xFF5
  8454                           prodh	equ	0xFF4
  8455                           prodl	equ	0xFF3
  8456                           intcon	equ	0xFF2
  8457                           intcon2	equ	0xFF1
  8458                           intcon3	equ	0xFF0
  8459                           postinc0	equ	0xFEE
  8460                           wreg	equ	0xFE8
  8461                           postdec1	equ	0xFE5
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           postdec2	equ	0xFDD
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _I2C_Master_Start *****************
  8471 ;; Defined at:
  8472 ;;		line 31 in file "I2C.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      void 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;Total ram usage:        0 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    8
  8493 ;; This function calls:
  8494 ;;		_I2C_Master_Wait
  8495 ;; This function is called by:
  8496 ;;		_loadRTC
  8497 ;;		_getRTC
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text28
  8502  004752                     __ptext28:
  8503                           	opt stack 0
  8504  004752                     _I2C_Master_Start:
  8505                           	opt stack 18
  8506                           
  8507                           ;I2C.c: 33: I2C_Master_Wait();
  8508                           
  8509                           ;incstack = 0
  8510  004752  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8511                           
  8512                           ;I2C.c: 34: SEN = 1;
  8513  004756  80C5               	bsf	4037,0,c	;volatile
  8514  004758  0012               	return		;funcret
  8515  00475A                     __end_of_I2C_Master_Start:
  8516                           	opt stack 0
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           intcon2	equ	0xFF1
  8525                           intcon3	equ	0xFF0
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           postdec1	equ	0xFE5
  8529                           fsr1l	equ	0xFE1
  8530                           indf2	equ	0xFDF
  8531                           postinc2	equ	0xFDE
  8532                           postdec2	equ	0xFDD
  8533                           fsr2h	equ	0xFDA
  8534                           fsr2l	equ	0xFD9
  8535                           status	equ	0xFD8
  8536                           
  8537 ;; *************** function _I2C_Master_Read *****************
  8538 ;; Defined at:
  8539 ;;		line 55 in file "I2C.c"
  8540 ;; Parameters:    Size  Location     Type
  8541 ;;  a               1    wreg     unsigned char 
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  a               1    1[BANK0 ] unsigned char 
  8544 ;;  temp            1    2[BANK0 ] unsigned char 
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  1    wreg      unsigned char 
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0, cstack
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;Total ram usage:        2 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    8
  8561 ;; This function calls:
  8562 ;;		_I2C_Master_Wait
  8563 ;; This function is called by:
  8564 ;;		_getRTC
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text29
  8569  004468                     __ptext29:
  8570                           	opt stack 0
  8571  004468                     _I2C_Master_Read:
  8572                           	opt stack 18
  8573                           
  8574                           ;incstack = 0
  8575                           ;I2C_Master_Read@a stored from wreg
  8576  004468  0100               	movlb	0	; () banked
  8577  00446A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8578                           
  8579                           ;I2C.c: 57: unsigned char temp;
  8580                           ;I2C.c: 58: I2C_Master_Wait();
  8581  00446C  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8582                           
  8583                           ;I2C.c: 59: RCEN = 1;
  8584  004470  86C5               	bsf	4037,3,c	;volatile
  8585                           
  8586                           ;I2C.c: 60: I2C_Master_Wait();
  8587  004472  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8588                           
  8589                           ;I2C.c: 61: temp = SSPBUF;
  8590  004476  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8591                           
  8592                           ;I2C.c: 62: I2C_Master_Wait();
  8593  00447A  EC68  F023         	call	_I2C_Master_Wait	;wreg free
  8594                           
  8595                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8596  00447E  0100               	movlb	0	; () banked
  8597  004480  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8598  004482  0100               	movlb	0	; () banked
  8599  004484  A4D8               	btfss	status,2,c
  8600  004486  D002               	goto	u3580
  8601  004488  8AC5               	bsf	4037,5,c	;volatile
  8602  00448A  D001               	goto	l5240
  8603  00448C                     u3580:
  8604  00448C  9AC5               	bcf	4037,5,c	;volatile
  8605  00448E                     l5240:
  8606                           
  8607                           ;I2C.c: 64: ACKEN = 1;
  8608  00448E  88C5               	bsf	4037,4,c	;volatile
  8609                           
  8610                           ;I2C.c: 65: return temp;
  8611  004490  0100               	movlb	0	; () banked
  8612  004492  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8613  004494  0012               	return	
  8614  004496                     __end_of_I2C_Master_Read:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           intcon2	equ	0xFF1
  8624                           intcon3	equ	0xFF0
  8625                           postinc0	equ	0xFEE
  8626                           wreg	equ	0xFE8
  8627                           postdec1	equ	0xFE5
  8628                           fsr1l	equ	0xFE1
  8629                           indf2	equ	0xFDF
  8630                           postinc2	equ	0xFDE
  8631                           postdec2	equ	0xFDD
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _I2C_Master_Wait *****************
  8637 ;; Defined at:
  8638 ;;		line 26 in file "I2C.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2, status,0
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        1 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    7
  8659 ;; This function calls:
  8660 ;;		Nothing
  8661 ;; This function is called by:
  8662 ;;		_I2C_Master_Start
  8663 ;;		_I2C_Master_Stop
  8664 ;;		_I2C_Master_Write
  8665 ;;		_I2C_Master_Read
  8666 ;;		_I2C_Master_RepeatedStart
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text30
  8671  0046D0                     __ptext30:
  8672                           	opt stack 0
  8673  0046D0                     _I2C_Master_Wait:
  8674                           	opt stack 18
  8675  0046D0                     l66:
  8676  0046D0  B4C7               	btfsc	4039,2,c	;volatile
  8677  0046D2  D7FE               	goto	l66
  8678  0046D4  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8679  0046D8  0E1F               	movlw	31
  8680  0046DA  0100               	movlb	0	; () banked
  8681  0046DC  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8682  0046DE  B4D8               	btfsc	status,2,c
  8683  0046E0  0012               	return	
  8684  0046E2  D7F6               	goto	l66
  8685  0046E4                     __end_of_I2C_Master_Wait:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           intcon	equ	0xFF2
  8694                           intcon2	equ	0xFF1
  8695                           intcon3	equ	0xFF0
  8696                           postinc0	equ	0xFEE
  8697                           wreg	equ	0xFE8
  8698                           postdec1	equ	0xFE5
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _change_state_to_menu_22 *****************
  8708 ;; Defined at:
  8709 ;;		line 496 in file "UI.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      void 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:   10
  8730 ;; This function calls:
  8731 ;;		_lcdInst
  8732 ;;		_printf
  8733 ;; This function is called by:
  8734 ;;		_UI
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text31
  8739  0041AA                     __ptext31:
  8740                           	opt stack 0
  8741  0041AA                     _change_state_to_menu_22:
  8742                           	opt stack 19
  8743                           
  8744                           ;UI.c: 497: cur_state = 22;
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;incstack = 0
  8748  0041AA  0E00               	movlw	0
  8749  0041AC  0100               	movlb	0	; () banked
  8750  0041AE  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8751  0041B0  0E16               	movlw	22
  8752  0041B2  6FDE               	movwf	_cur_state& (0+255),b
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;UI.c: 499: lcdInst(0b10000000);;
  8756  0041B4  0E80               	movlw	128
  8757  0041B6  EC83  F023         	call	_lcdInst
  8758                           
  8759                           ;UI.c: 500: printf("2. SORT        <");
  8760  0041BA  0EDA               	movlw	low STR_34
  8761  0041BC  0100               	movlb	0	; () banked
  8762  0041BE  6F8E               	movwf	printf@f& (0+255),b
  8763  0041C0  0EFD               	movlw	high STR_34
  8764  0041C2  0100               	movlb	0	; () banked
  8765  0041C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8766  0041C6  ECB8  F008         	call	_printf	;wreg free
  8767                           
  8768                           ;UI.c: 501: lcdInst(0b11000000);;
  8769  0041CA  0EC0               	movlw	192
  8770  0041CC  EC83  F023         	call	_lcdInst
  8771                           
  8772                           ;UI.c: 502: printf("3. LOGS         ");
  8773  0041D0  0E1F               	movlw	low STR_36
  8774  0041D2  0100               	movlb	0	; () banked
  8775  0041D4  6F8E               	movwf	printf@f& (0+255),b
  8776  0041D6  0EFD               	movlw	high STR_36
  8777  0041D8  0100               	movlb	0	; () banked
  8778  0041DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8779  0041DC  ECB8  F008         	call	_printf	;wreg free
  8780  0041E0  0012               	return		;funcret
  8781  0041E2                     __end_of_change_state_to_menu_22:
  8782                           	opt stack 0
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           intcon2	equ	0xFF1
  8791                           intcon3	equ	0xFF0
  8792                           postinc0	equ	0xFEE
  8793                           wreg	equ	0xFE8
  8794                           postdec1	equ	0xFE5
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _change_state_to_menu_12 *****************
  8804 ;; Defined at:
  8805 ;;		line 488 in file "UI.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;Total ram usage:        0 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:   10
  8826 ;; This function calls:
  8827 ;;		_lcdInst
  8828 ;;		_printf
  8829 ;; This function is called by:
  8830 ;;		_UI
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text32
  8835  0041E2                     __ptext32:
  8836                           	opt stack 0
  8837  0041E2                     _change_state_to_menu_12:
  8838                           	opt stack 19
  8839                           
  8840                           ;UI.c: 489: cur_state = 12;
  8841                           
  8842                           ;incstack = 0
  8843  0041E2  0E00               	movlw	0
  8844  0041E4  0100               	movlb	0	; () banked
  8845  0041E6  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8846  0041E8  0E0C               	movlw	12
  8847  0041EA  6FDE               	movwf	_cur_state& (0+255),b
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;UI.c: 491: lcdInst(0b10000000);;
  8851  0041EC  0E80               	movlw	128
  8852  0041EE  EC83  F023         	call	_lcdInst
  8853                           
  8854                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8855  0041F2  0E41               	movlw	low STR_33
  8856  0041F4  0100               	movlb	0	; () banked
  8857  0041F6  6F8E               	movwf	printf@f& (0+255),b
  8858  0041F8  0EFD               	movlw	high STR_33
  8859  0041FA  0100               	movlb	0	; () banked
  8860  0041FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8861  0041FE  ECB8  F008         	call	_printf	;wreg free
  8862                           
  8863                           ;UI.c: 493: lcdInst(0b11000000);;
  8864  004202  0EC0               	movlw	192
  8865  004204  EC83  F023         	call	_lcdInst
  8866                           
  8867                           ;UI.c: 494: printf("2. SORT        <");
  8868  004208  0EDA               	movlw	low STR_34
  8869  00420A  0100               	movlb	0	; () banked
  8870  00420C  6F8E               	movwf	printf@f& (0+255),b
  8871  00420E  0EFD               	movlw	high STR_34
  8872  004210  0100               	movlb	0	; () banked
  8873  004212  6F8F               	movwf	(printf@f+1)& (0+255),b
  8874  004214  ECB8  F008         	call	_printf	;wreg free
  8875  004218  0012               	return		;funcret
  8876  00421A                     __end_of_change_state_to_menu_12:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon2	equ	0xFF1
  8886                           intcon3	equ	0xFF0
  8887                           postinc0	equ	0xFEE
  8888                           wreg	equ	0xFE8
  8889                           postdec1	equ	0xFE5
  8890                           fsr1l	equ	0xFE1
  8891                           indf2	equ	0xFDF
  8892                           postinc2	equ	0xFDE
  8893                           postdec2	equ	0xFDD
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function ___awmod *****************
  8899 ;; Defined at:
  8900 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  dividend        2    0[BANK0 ] int 
  8903 ;;  divisor         2    2[BANK0 ] int 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  sign            1    5[BANK0 ] unsigned char 
  8906 ;;  counter         1    4[BANK0 ] unsigned char 
  8907 ;; Return value:  Size  Location     Type
  8908 ;;                  2    0[BANK0 ] int 
  8909 ;; Registers used:
  8910 ;;		wreg, status,2, status,0
  8911 ;; Tracked objects:
  8912 ;;		On entry : 0/0
  8913 ;;		On exit  : 0/0
  8914 ;;		Unchanged: 0/0
  8915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;Total ram usage:        6 bytes
  8921 ;; Hardware stack levels used:    1
  8922 ;; Hardware stack levels required when called:    7
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_UI
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           	psect	text33
  8931  0037B0                     __ptext33:
  8932                           	opt stack 0
  8933  0037B0                     ___awmod:
  8934                           	opt stack 22
  8935                           
  8936                           ;incstack = 0
  8937  0037B0  0E00               	movlw	0
  8938  0037B2  0100               	movlb	0	; () banked
  8939  0037B4  6F85               	movwf	___awmod@sign& (0+255),b
  8940                           
  8941                           ; BSR set to: 0
  8942  0037B6  0100               	movlb	0	; () banked
  8943  0037B8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8944  0037BA  D008               	goto	l7294
  8945                           
  8946                           ; BSR set to: 0
  8947  0037BC  0100               	movlb	0	; () banked
  8948  0037BE  6D80               	negf	___awmod@dividend& (0+255),b
  8949  0037C0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8950  0037C2  B0D8               	btfsc	status,0,c
  8951  0037C4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8952                           
  8953                           ; BSR set to: 0
  8954  0037C6  0E01               	movlw	1
  8955  0037C8  0100               	movlb	0	; () banked
  8956  0037CA  6F85               	movwf	___awmod@sign& (0+255),b
  8957  0037CC                     l7294:
  8958                           
  8959                           ; BSR set to: 0
  8960  0037CC  0100               	movlb	0	; () banked
  8961  0037CE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8962  0037D0  D005               	goto	l7298
  8963                           
  8964                           ; BSR set to: 0
  8965  0037D2  0100               	movlb	0	; () banked
  8966  0037D4  6D82               	negf	___awmod@divisor& (0+255),b
  8967  0037D6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8968  0037D8  B0D8               	btfsc	status,0,c
  8969  0037DA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8970  0037DC                     l7298:
  8971                           
  8972                           ; BSR set to: 0
  8973  0037DC  0100               	movlb	0	; () banked
  8974  0037DE  5182               	movf	___awmod@divisor& (0+255),w,b
  8975  0037E0  0100               	movlb	0	; () banked
  8976  0037E2  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8977  0037E4  B4D8               	btfsc	status,2,c
  8978  0037E6  D026               	goto	l7314
  8979                           
  8980                           ; BSR set to: 0
  8981  0037E8  0E01               	movlw	1
  8982  0037EA  0100               	movlb	0	; () banked
  8983  0037EC  6F84               	movwf	___awmod@counter& (0+255),b
  8984  0037EE  D006               	goto	l7304
  8985  0037F0                     l7302:
  8986                           
  8987                           ; BSR set to: 0
  8988  0037F0  0100               	movlb	0	; () banked
  8989  0037F2  90D8               	bcf	status,0,c
  8990  0037F4  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8991  0037F6  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8992  0037F8  0100               	movlb	0	; () banked
  8993  0037FA  2B84               	incf	___awmod@counter& (0+255),f,b
  8994  0037FC                     l7304:
  8995                           
  8996                           ; BSR set to: 0
  8997  0037FC  0100               	movlb	0	; () banked
  8998  0037FE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8999  003800  D7F7               	goto	l7302
  9000  003802                     l7306:
  9001                           
  9002                           ; BSR set to: 0
  9003  003802  0100               	movlb	0	; () banked
  9004  003804  5182               	movf	___awmod@divisor& (0+255),w,b
  9005  003806  0100               	movlb	0	; () banked
  9006  003808  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9007  00380A  0100               	movlb	0	; () banked
  9008  00380C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9009  00380E  0100               	movlb	0	; () banked
  9010  003810  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9011  003812  A0D8               	btfss	status,0,c
  9012  003814  D008               	goto	l7310
  9013                           
  9014                           ; BSR set to: 0
  9015  003816  0100               	movlb	0	; () banked
  9016  003818  5182               	movf	___awmod@divisor& (0+255),w,b
  9017  00381A  0100               	movlb	0	; () banked
  9018  00381C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9019  00381E  0100               	movlb	0	; () banked
  9020  003820  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9021  003822  0100               	movlb	0	; () banked
  9022  003824  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9023  003826                     l7310:
  9024                           
  9025                           ; BSR set to: 0
  9026  003826  0100               	movlb	0	; () banked
  9027  003828  90D8               	bcf	status,0,c
  9028  00382A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9029  00382C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9030                           
  9031                           ; BSR set to: 0
  9032  00382E  0100               	movlb	0	; () banked
  9033  003830  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9034  003832  D7E7               	goto	l7306
  9035  003834                     l7314:
  9036                           
  9037                           ; BSR set to: 0
  9038  003834  0100               	movlb	0	; () banked
  9039  003836  5185               	movf	___awmod@sign& (0+255),w,b
  9040  003838  0100               	movlb	0	; () banked
  9041  00383A  B4D8               	btfsc	status,2,c
  9042  00383C  D005               	goto	l7318
  9043                           
  9044                           ; BSR set to: 0
  9045  00383E  0100               	movlb	0	; () banked
  9046  003840  6D80               	negf	___awmod@dividend& (0+255),b
  9047  003842  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9048  003844  B0D8               	btfsc	status,0,c
  9049  003846  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9050  003848                     l7318:
  9051                           
  9052                           ; BSR set to: 0
  9053  003848  C080  F080         	movff	___awmod@dividend,?___awmod
  9054  00384C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9055  003850  0012               	return	
  9056  003852                     __end_of___awmod:
  9057                           	opt stack 0
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           intcon2	equ	0xFF1
  9066                           intcon3	equ	0xFF0
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           postdec1	equ	0xFE5
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function ___awdiv *****************
  9079 ;; Defined at:
  9080 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  dividend        2    6[BANK0 ] int 
  9083 ;;  divisor         2    8[BANK0 ] int 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  quotient        2   12[BANK0 ] int 
  9086 ;;  sign            1   11[BANK0 ] unsigned char 
  9087 ;;  counter         1   10[BANK0 ] unsigned char 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  2    6[BANK0 ] int 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0
  9092 ;; Tracked objects:
  9093 ;;		On entry : 0/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9097 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;Total ram usage:        8 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:    7
  9104 ;; This function calls:
  9105 ;;		Nothing
  9106 ;; This function is called by:
  9107 ;;		_UI
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text34
  9112  00358C                     __ptext34:
  9113                           	opt stack 0
  9114  00358C                     ___awdiv:
  9115                           	opt stack 22
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;incstack = 0
  9119  00358C  0E00               	movlw	0
  9120  00358E  0100               	movlb	0	; () banked
  9121  003590  6F8B               	movwf	___awdiv@sign& (0+255),b
  9122                           
  9123                           ; BSR set to: 0
  9124  003592  0100               	movlb	0	; () banked
  9125  003594  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9126  003596  D008               	goto	l7250
  9127                           
  9128                           ; BSR set to: 0
  9129  003598  0100               	movlb	0	; () banked
  9130  00359A  6D88               	negf	___awdiv@divisor& (0+255),b
  9131  00359C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9132  00359E  B0D8               	btfsc	status,0,c
  9133  0035A0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9134                           
  9135                           ; BSR set to: 0
  9136  0035A2  0E01               	movlw	1
  9137  0035A4  0100               	movlb	0	; () banked
  9138  0035A6  6F8B               	movwf	___awdiv@sign& (0+255),b
  9139  0035A8                     l7250:
  9140                           
  9141                           ; BSR set to: 0
  9142  0035A8  0100               	movlb	0	; () banked
  9143  0035AA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9144  0035AC  D008               	goto	l7256
  9145                           
  9146                           ; BSR set to: 0
  9147  0035AE  0100               	movlb	0	; () banked
  9148  0035B0  6D86               	negf	___awdiv@dividend& (0+255),b
  9149  0035B2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9150  0035B4  B0D8               	btfsc	status,0,c
  9151  0035B6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154  0035B8  0E01               	movlw	1
  9155  0035BA  0100               	movlb	0	; () banked
  9156  0035BC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9157  0035BE                     l7256:
  9158                           
  9159                           ; BSR set to: 0
  9160  0035BE  0E00               	movlw	0
  9161  0035C0  0100               	movlb	0	; () banked
  9162  0035C2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9163  0035C4  0E00               	movlw	0
  9164  0035C6  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9165                           
  9166                           ; BSR set to: 0
  9167  0035C8  0100               	movlb	0	; () banked
  9168  0035CA  5188               	movf	___awdiv@divisor& (0+255),w,b
  9169  0035CC  0100               	movlb	0	; () banked
  9170  0035CE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9171  0035D0  B4D8               	btfsc	status,2,c
  9172  0035D2  D02C               	goto	l7278
  9173                           
  9174                           ; BSR set to: 0
  9175  0035D4  0E01               	movlw	1
  9176  0035D6  0100               	movlb	0	; () banked
  9177  0035D8  6F8A               	movwf	___awdiv@counter& (0+255),b
  9178  0035DA  D006               	goto	l7264
  9179  0035DC                     l7262:
  9180                           
  9181                           ; BSR set to: 0
  9182  0035DC  0100               	movlb	0	; () banked
  9183  0035DE  90D8               	bcf	status,0,c
  9184  0035E0  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9185  0035E2  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9186  0035E4  0100               	movlb	0	; () banked
  9187  0035E6  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9188  0035E8                     l7264:
  9189                           
  9190                           ; BSR set to: 0
  9191  0035E8  0100               	movlb	0	; () banked
  9192  0035EA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9193  0035EC  D7F7               	goto	l7262
  9194  0035EE                     l7266:
  9195                           
  9196                           ; BSR set to: 0
  9197  0035EE  0100               	movlb	0	; () banked
  9198  0035F0  90D8               	bcf	status,0,c
  9199  0035F2  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9200  0035F4  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9201                           
  9202                           ; BSR set to: 0
  9203  0035F6  0100               	movlb	0	; () banked
  9204  0035F8  5188               	movf	___awdiv@divisor& (0+255),w,b
  9205  0035FA  0100               	movlb	0	; () banked
  9206  0035FC  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9207  0035FE  0100               	movlb	0	; () banked
  9208  003600  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9209  003602  0100               	movlb	0	; () banked
  9210  003604  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9211  003606  A0D8               	btfss	status,0,c
  9212  003608  D00A               	goto	l7274
  9213                           
  9214                           ; BSR set to: 0
  9215  00360A  0100               	movlb	0	; () banked
  9216  00360C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9217  00360E  0100               	movlb	0	; () banked
  9218  003610  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9219  003612  0100               	movlb	0	; () banked
  9220  003614  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9221  003616  0100               	movlb	0	; () banked
  9222  003618  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9223                           
  9224                           ; BSR set to: 0
  9225  00361A  0100               	movlb	0	; () banked
  9226  00361C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9227  00361E                     l7274:
  9228                           
  9229                           ; BSR set to: 0
  9230  00361E  0100               	movlb	0	; () banked
  9231  003620  90D8               	bcf	status,0,c
  9232  003622  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9233  003624  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  003626  0100               	movlb	0	; () banked
  9237  003628  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9238  00362A  D7E1               	goto	l7266
  9239  00362C                     l7278:
  9240                           
  9241                           ; BSR set to: 0
  9242  00362C  0100               	movlb	0	; () banked
  9243  00362E  518B               	movf	___awdiv@sign& (0+255),w,b
  9244  003630  0100               	movlb	0	; () banked
  9245  003632  B4D8               	btfsc	status,2,c
  9246  003634  D005               	goto	l7282
  9247                           
  9248                           ; BSR set to: 0
  9249  003636  0100               	movlb	0	; () banked
  9250  003638  6D8C               	negf	___awdiv@quotient& (0+255),b
  9251  00363A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9252  00363C  B0D8               	btfsc	status,0,c
  9253  00363E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9254  003640                     l7282:
  9255                           
  9256                           ; BSR set to: 0
  9257  003640  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9258  003644  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9259  003648  0012               	return	
  9260  00364A                     __end_of___awdiv:
  9261                           	opt stack 0
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon2	equ	0xFF1
  9270                           intcon3	equ	0xFF0
  9271                           postinc0	equ	0xFEE
  9272                           wreg	equ	0xFE8
  9273                           postdec1	equ	0xFE5
  9274                           fsr1l	equ	0xFE1
  9275                           indf2	equ	0xFDF
  9276                           postinc2	equ	0xFDE
  9277                           postdec2	equ	0xFDD
  9278                           fsr2h	equ	0xFDA
  9279                           fsr2l	equ	0xFD9
  9280                           status	equ	0xFD8
  9281                           
  9282 ;; *************** function _Test *****************
  9283 ;; Defined at:
  9284 ;;		line 28 in file "Test.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      void 
  9291 ;; Registers used:
  9292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;Total ram usage:        2 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:   11
  9305 ;; This function calls:
  9306 ;;		_BothServos
  9307 ;;		_EEPROMTest
  9308 ;;		_PortTestA5
  9309 ;;		_PortTests
  9310 ;;		_SolenoidTestA5
  9311 ;;		_ToggleTestA5
  9312 ;;		_actuatorTest
  9313 ;;		_algorithmTest
  9314 ;;		_lcdInst
  9315 ;;		_printf
  9316 ;;		_sensorTest
  9317 ;; This function is called by:
  9318 ;;		_main
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text35
  9323  0031CC                     __ptext35:
  9324                           	opt stack 0
  9325  0031CC                     _Test:
  9326                           	opt stack 19
  9327  0031CC                     
  9328                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9329  0031CC  0E01               	movlw	1
  9330  0031CE  EC83  F023         	call	_lcdInst
  9331  0031D2  0E68               	movlw	104
  9332  0031D4  0100               	movlb	0	; () banked
  9333  0031D6  6FC6               	movwf	??_Test& (0+255),b
  9334  0031D8  0EE4               	movlw	228
  9335  0031DA                     u7437:
  9336  0031DA  2EE8               	decfsz	wreg,f,c
  9337  0031DC  D7FE               	bra	u7437
  9338  0031DE  2FC6               	decfsz	??_Test& (0+255),f,b
  9339  0031E0  D7FC               	bra	u7437
  9340  0031E2  F000               	nop	
  9341  0031E4  0E80               	movlw	128
  9342  0031E6  EC83  F023         	call	_lcdInst
  9343                           
  9344                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9345  0031EA  0E86               	movlw	low STR_68
  9346  0031EC  0100               	movlb	0	; () banked
  9347  0031EE  6F8E               	movwf	printf@f& (0+255),b
  9348  0031F0  0EFC               	movlw	high STR_68
  9349  0031F2  0100               	movlb	0	; () banked
  9350  0031F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9351  0031F6  ECB8  F008         	call	_printf	;wreg free
  9352                           
  9353                           ;Test.c: 33: lcdInst(0b11000000);;
  9354  0031FA  0EC0               	movlw	192
  9355  0031FC  EC83  F023         	call	_lcdInst
  9356                           
  9357                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9358  003200  0EB9               	movlw	low STR_69
  9359  003202  0100               	movlb	0	; () banked
  9360  003204  6F8E               	movwf	printf@f& (0+255),b
  9361  003206  0EFC               	movlw	high STR_69
  9362  003208  0100               	movlb	0	; () banked
  9363  00320A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9364  00320C  ECB8  F008         	call	_printf	;wreg free
  9365                           
  9366                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9367  003210  0E05               	movlw	5
  9368  003212  0100               	movlb	0	; () banked
  9369  003214  6FC7               	movwf	(??_Test+1)& (0+255),b
  9370  003216  0E0F               	movlw	15
  9371  003218  0100               	movlb	0	; () banked
  9372  00321A  6FC6               	movwf	??_Test& (0+255),b
  9373  00321C  0EF1               	movlw	241
  9374  00321E                     u7447:
  9375  00321E  2EE8               	decfsz	wreg,f,c
  9376  003220  D7FE               	bra	u7447
  9377  003222  2FC6               	decfsz	??_Test& (0+255),f,b
  9378  003224  D7FC               	bra	u7447
  9379  003226  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9380  003228  D7FA               	bra	u7447
  9381  00322A                     l1027:
  9382  00322A  A281               	btfss	3969,1,c	;volatile
  9383  00322C  D7FE               	goto	l1027
  9384                           
  9385                           ;Test.c: 37: var = PORTB >> 4;
  9386  00322E  CF81 F0C6          	movff	3969,??_Test	;volatile
  9387  003232  0100               	movlb	0	; () banked
  9388  003234  3BC6               	swapf	??_Test& (0+255),f,b
  9389  003236  0E0F               	movlw	15
  9390  003238  17C6               	andwf	??_Test& (0+255),f,b
  9391  00323A  0100               	movlb	0	; () banked
  9392  00323C  51C6               	movf	??_Test& (0+255),w,b
  9393  00323E  0100               	movlb	0	; () banked
  9394  003240  6FFA               	movwf	_var& (0+255),b
  9395  003242  6BFB               	clrf	(_var+1)& (0+255),b
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;Test.c: 38: var++;
  9399  003244  0100               	movlb	0	; () banked
  9400  003246  4BFA               	infsnz	_var& (0+255),f,b
  9401  003248  2BFB               	incf	(_var+1)& (0+255),f,b
  9402  00324A                     l1030:
  9403  00324A  A281               	btfss	3969,1,c	;volatile
  9404  00324C  D01C               	goto	l8014
  9405  00324E  D7FD               	goto	l1030
  9406  003250                     l7994:
  9407                           
  9408                           ;Test.c: 42: algorithmTest();
  9409  003250  EC5B  F01A         	call	_algorithmTest	;wreg free
  9410                           
  9411                           ;Test.c: 43: break;
  9412  003254  D7BB               	goto	l7976
  9413  003256                     l7996:
  9414                           
  9415                           ;Test.c: 45: sensorTest();
  9416  003256  ECC8  F010         	call	_sensorTest	;wreg free
  9417                           
  9418                           ;Test.c: 46: break;
  9419  00325A  D7B8               	goto	l7976
  9420  00325C                     l7998:
  9421                           
  9422                           ;Test.c: 48: actuatorTest();
  9423  00325C  EC09  F000         	call	_actuatorTest	;wreg free
  9424                           
  9425                           ;Test.c: 49: break;
  9426  003260  D7B5               	goto	l7976
  9427  003262                     l8000:
  9428                           
  9429                           ;Test.c: 51: PortTestA5();
  9430  003262  EC74  F01C         	call	_PortTestA5	;wreg free
  9431                           
  9432                           ;Test.c: 52: break;
  9433  003266  D7B2               	goto	l7976
  9434  003268                     l8002:
  9435                           
  9436                           ;Test.c: 54: ToggleTestA5();
  9437  003268  EC05  F01D         	call	_ToggleTestA5	;wreg free
  9438                           
  9439                           ;Test.c: 55: break;
  9440  00326C  D7AF               	goto	l7976
  9441  00326E                     l8004:
  9442                           
  9443                           ;Test.c: 57: EEPROMTest();
  9444  00326E  ECB5  F023         	call	_EEPROMTest	;wreg free
  9445                           
  9446                           ;Test.c: 58: break;
  9447  003272  D7AC               	goto	l7976
  9448  003274                     l8006:
  9449                           
  9450                           ;Test.c: 60: SolenoidTestA5();
  9451  003274  EC6A  F019         	call	_SolenoidTestA5	;wreg free
  9452                           
  9453                           ;Test.c: 61: break;
  9454  003278  D7A9               	goto	l7976
  9455  00327A                     l8008:
  9456                           
  9457                           ;Test.c: 63: PortTests();
  9458  00327A  EC8C  F01D         	call	_PortTests	;wreg free
  9459                           
  9460                           ;Test.c: 64: break;
  9461  00327E  D7A6               	goto	l7976
  9462  003280                     l8010:
  9463                           
  9464                           ;Test.c: 66: BothServos();
  9465  003280  EC8B  F00C         	call	_BothServos	;wreg free
  9466                           
  9467                           ;Test.c: 70: }
  9468                           
  9469                           ;Test.c: 69: break;
  9470                           
  9471                           ;Test.c: 68: default:
  9472                           
  9473                           ;Test.c: 67: break;
  9474  003284  D7A3               	goto	l7976
  9475  003286                     l8014:
  9476  003286  C0FA  F0C6         	movff	_var,??_Test
  9477  00328A  C0FB  F0C7         	movff	_var+1,??_Test+1
  9478                           
  9479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9480                           ; Switch size 1, requested type "space"
  9481                           ; Number of cases is 1, Range of values is 0 to 0
  9482                           ; switch strategies available:
  9483                           ; Name         Instructions Cycles
  9484                           ; simple_byte            4     3 (average)
  9485                           ;	Chosen strategy is simple_byte
  9486  00328E  0100               	movlb	0	; () banked
  9487  003290  51C7               	movf	(??_Test+1)& (0+255),w,b
  9488  003292  0A00               	xorlw	0	; case 0
  9489  003294  A4D8               	btfss	status,2,c
  9490  003296  D79A               	goto	l7976
  9491                           
  9492                           ; BSR set to: 0
  9493                           ; Switch size 1, requested type "space"
  9494                           ; Number of cases is 9, Range of values is 1 to 10
  9495                           ; switch strategies available:
  9496                           ; Name         Instructions Cycles
  9497                           ; simple_byte           28    15 (average)
  9498                           ;	Chosen strategy is simple_byte
  9499  003298  0100               	movlb	0	; () banked
  9500  00329A  51C6               	movf	??_Test& (0+255),w,b
  9501  00329C  0A01               	xorlw	1	; case 1
  9502  00329E  B4D8               	btfsc	status,2,c
  9503  0032A0  D7D7               	goto	l7994
  9504  0032A2  0A03               	xorlw	3	; case 2
  9505  0032A4  B4D8               	btfsc	status,2,c
  9506  0032A6  D7D7               	goto	l7996
  9507  0032A8  0A01               	xorlw	1	; case 3
  9508  0032AA  B4D8               	btfsc	status,2,c
  9509  0032AC  D7D7               	goto	l7998
  9510  0032AE  0A06               	xorlw	6	; case 5
  9511  0032B0  B4D8               	btfsc	status,2,c
  9512  0032B2  D7D7               	goto	l8000
  9513  0032B4  0A03               	xorlw	3	; case 6
  9514  0032B6  B4D8               	btfsc	status,2,c
  9515  0032B8  D7D7               	goto	l8002
  9516  0032BA  0A01               	xorlw	1	; case 7
  9517  0032BC  B4D8               	btfsc	status,2,c
  9518  0032BE  D7D7               	goto	l8004
  9519  0032C0  0A0F               	xorlw	15	; case 8
  9520  0032C2  B4D8               	btfsc	status,2,c
  9521  0032C4  D7D7               	goto	l8006
  9522  0032C6  0A01               	xorlw	1	; case 9
  9523  0032C8  B4D8               	btfsc	status,2,c
  9524  0032CA  D7D7               	goto	l8008
  9525  0032CC  0A03               	xorlw	3	; case 10
  9526  0032CE  B4D8               	btfsc	status,2,c
  9527  0032D0  D7D7               	goto	l8010
  9528                           
  9529                           ; BSR set to: 0
  9530                           
  9531                           ; BSR set to: 0
  9532  0032D2  D77C               	goto	l7976
  9533  0032D4                     __end_of_Test:
  9534                           	opt stack 0
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon	equ	0xFF2
  9542                           intcon2	equ	0xFF1
  9543                           intcon3	equ	0xFF0
  9544                           postinc0	equ	0xFEE
  9545                           wreg	equ	0xFE8
  9546                           postdec1	equ	0xFE5
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function _sensorTest *****************
  9556 ;; Defined at:
  9557 ;;		line 118 in file "Test.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;		None
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  res             2   47[BANK0 ] int 
  9562 ;;  on              2   45[BANK0 ] int 
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  1    wreg      void 
  9565 ;; Registers used:
  9566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;Total ram usage:        6 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:   10
  9579 ;; This function calls:
  9580 ;;		_lcdInst
  9581 ;;		_printf
  9582 ;;		_readADC
  9583 ;;		_readMAG
  9584 ;; This function is called by:
  9585 ;;		_Test
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text36
  9590  002190                     __ptext36:
  9591                           	opt stack 0
  9592  002190                     _sensorTest:
  9593                           	opt stack 19
  9594                           
  9595                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;incstack = 0
  9599  002190  0E01               	movlw	1
  9600  002192  EC83  F023         	call	_lcdInst
  9601  002196  0E68               	movlw	104
  9602  002198  0100               	movlb	0	; () banked
  9603  00219A  6FAB               	movwf	??_sensorTest& (0+255),b
  9604  00219C  0EE4               	movlw	228
  9605  00219E                     u7457:
  9606  00219E  2EE8               	decfsz	wreg,f,c
  9607  0021A0  D7FE               	bra	u7457
  9608  0021A2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9609  0021A4  D7FC               	bra	u7457
  9610  0021A6  F000               	nop	
  9611  0021A8  0E80               	movlw	128
  9612  0021AA  EC83  F023         	call	_lcdInst
  9613                           
  9614                           ;Test.c: 121: printf("SENSORS");
  9615  0021AE  0EAE               	movlw	low STR_77
  9616  0021B0  0100               	movlb	0	; () banked
  9617  0021B2  6F8E               	movwf	printf@f& (0+255),b
  9618  0021B4  0EFF               	movlw	high STR_77
  9619  0021B6  0100               	movlb	0	; () banked
  9620  0021B8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9621  0021BA  ECB8  F008         	call	_printf	;wreg free
  9622                           
  9623                           ;Test.c: 122: lcdInst(0b11000000);;
  9624  0021BE  0EC0               	movlw	192
  9625  0021C0  EC83  F023         	call	_lcdInst
  9626                           
  9627                           ;Test.c: 123: printf("PUSH TO START");
  9628  0021C4  0EFF               	movlw	low STR_71
  9629  0021C6  0100               	movlb	0	; () banked
  9630  0021C8  6F8E               	movwf	printf@f& (0+255),b
  9631  0021CA  0EFE               	movlw	high STR_71
  9632  0021CC  0100               	movlb	0	; () banked
  9633  0021CE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9634  0021D0  ECB8  F008         	call	_printf	;wreg free
  9635                           
  9636                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9637  0021D4  0E05               	movlw	5
  9638  0021D6  0100               	movlb	0	; () banked
  9639  0021D8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9640  0021DA  0E0F               	movlw	15
  9641  0021DC  0100               	movlb	0	; () banked
  9642  0021DE  6FAB               	movwf	??_sensorTest& (0+255),b
  9643  0021E0  0EF1               	movlw	241
  9644  0021E2                     u7467:
  9645  0021E2  2EE8               	decfsz	wreg,f,c
  9646  0021E4  D7FE               	bra	u7467
  9647  0021E6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9648  0021E8  D7FC               	bra	u7467
  9649  0021EA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9650  0021EC  D7FA               	bra	u7467
  9651  0021EE                     l1059:
  9652  0021EE  A281               	btfss	3969,1,c	;volatile
  9653  0021F0  D7FE               	goto	l1059
  9654  0021F2                     l1062:
  9655  0021F2  B281               	btfsc	3969,1,c	;volatile
  9656  0021F4  D7FE               	goto	l1062
  9657                           
  9658                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9659  0021F6  0E01               	movlw	1
  9660  0021F8  EC83  F023         	call	_lcdInst
  9661  0021FC  0E68               	movlw	104
  9662  0021FE  0100               	movlb	0	; () banked
  9663  002200  6FAB               	movwf	??_sensorTest& (0+255),b
  9664  002202  0EE4               	movlw	228
  9665  002204                     u7477:
  9666  002204  2EE8               	decfsz	wreg,f,c
  9667  002206  D7FE               	bra	u7477
  9668  002208  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9669  00220A  D7FC               	bra	u7477
  9670  00220C  F000               	nop	
  9671  00220E  0E80               	movlw	128
  9672  002210  EC83  F023         	call	_lcdInst
  9673                           
  9674                           ;Test.c: 132: printf("TST: IR SNSR");
  9675  002214  0E29               	movlw	low STR_79
  9676  002216  0100               	movlb	0	; () banked
  9677  002218  6F8E               	movwf	printf@f& (0+255),b
  9678  00221A  0EFF               	movlw	high STR_79
  9679  00221C  0100               	movlb	0	; () banked
  9680  00221E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9681  002220  ECB8  F008         	call	_printf	;wreg free
  9682                           
  9683                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9684  002224  0E05               	movlw	5
  9685  002226  0100               	movlb	0	; () banked
  9686  002228  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9687  00222A  0E0F               	movlw	15
  9688  00222C  0100               	movlb	0	; () banked
  9689  00222E  6FAB               	movwf	??_sensorTest& (0+255),b
  9690  002230  0EF1               	movlw	241
  9691  002232                     u7487:
  9692  002232  2EE8               	decfsz	wreg,f,c
  9693  002234  D7FE               	bra	u7487
  9694  002236  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9695  002238  D7FC               	bra	u7487
  9696  00223A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9697  00223C  D7FA               	bra	u7487
  9698                           
  9699                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9700  00223E  8A8B               	bsf	3979,5,c	;volatile
  9701                           
  9702                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9703  002240  D05C               	goto	l6574
  9704  002242                     l6556:
  9705                           
  9706                           ;Test.c: 136: readADC(0);
  9707  002242  0E00               	movlw	0
  9708  002244  EC78  F022         	call	_readADC
  9709                           
  9710                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9711  002248  50C3               	movf	4035,w,c	;volatile
  9712  00224A  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9713  00224E  0100               	movlb	0	; () banked
  9714  002250  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9715  002252  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9716  002256  0100               	movlb	0	; () banked
  9717  002258  6BAB               	clrf	??_sensorTest& (0+255),b
  9718  00225A  0100               	movlb	0	; () banked
  9719  00225C  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9720  00225E  0100               	movlb	0	; () banked
  9721  002260  6FAF               	movwf	sensorTest@res& (0+255),b
  9722  002262  0100               	movlb	0	; () banked
  9723  002264  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9724  002266  0100               	movlb	0	; () banked
  9725  002268  6FB0               	movwf	(sensorTest@res+1)& (0+255),b
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9729  00226A  0100               	movlb	0	; () banked
  9730  00226C  BFB0               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9731  00226E  D00A               	goto	u5040
  9732  002270  0E85               	movlw	133
  9733  002272  0100               	movlb	0	; () banked
  9734  002274  5DAF               	subwf	sensorTest@res& (0+255),w,b
  9735  002276  0E03               	movlw	3
  9736  002278  0100               	movlb	0	; () banked
  9737  00227A  59B0               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9738  00227C  A0D8               	btfss	status,0,c
  9739  00227E  D002               	goto	u5040
  9740  002280  0E01               	movlw	1
  9741  002282  D001               	goto	u5050
  9742  002284                     u5040:
  9743  002284  0E00               	movlw	0
  9744  002286                     u5050:
  9745  002286  0100               	movlb	0	; () banked
  9746  002288  6FDA               	movwf	_IR_signal& (0+255),b
  9747  00228A  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9748                           
  9749                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9750  00228C  0E01               	movlw	1
  9751  00228E  EC83  F023         	call	_lcdInst
  9752  002292  0E68               	movlw	104
  9753  002294  0100               	movlb	0	; () banked
  9754  002296  6FAB               	movwf	??_sensorTest& (0+255),b
  9755  002298  0EE4               	movlw	228
  9756  00229A                     u7497:
  9757  00229A  2EE8               	decfsz	wreg,f,c
  9758  00229C  D7FE               	bra	u7497
  9759  00229E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9760  0022A0  D7FC               	bra	u7497
  9761  0022A2  F000               	nop	
  9762  0022A4  0E80               	movlw	128
  9763  0022A6  EC83  F023         	call	_lcdInst
  9764                           
  9765                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9766  0022AA  0E4E               	movlw	low STR_80
  9767  0022AC  0100               	movlb	0	; () banked
  9768  0022AE  6F8E               	movwf	printf@f& (0+255),b
  9769  0022B0  0EFE               	movlw	high STR_80
  9770  0022B2  0100               	movlb	0	; () banked
  9771  0022B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9772  0022B6  C0DA  F090         	movff	_IR_signal,?_printf+2
  9773  0022BA  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9774  0022BE  ECB8  F008         	call	_printf	;wreg free
  9775                           
  9776                           ;Test.c: 142: lcdInst(0b11000000);;
  9777  0022C2  0EC0               	movlw	192
  9778  0022C4  EC83  F023         	call	_lcdInst
  9779                           
  9780                           ;Test.c: 143: printf("%d", res);
  9781  0022C8  0E6D               	movlw	low (STR_27+16)
  9782  0022CA  0100               	movlb	0	; () banked
  9783  0022CC  6F8E               	movwf	printf@f& (0+255),b
  9784  0022CE  0EFB               	movlw	high (STR_27+16)
  9785  0022D0  0100               	movlb	0	; () banked
  9786  0022D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9787  0022D4  C0AF  F090         	movff	sensorTest@res,?_printf+2
  9788  0022D8  C0B0  F091         	movff	sensorTest@res+1,?_printf+3
  9789  0022DC  ECB8  F008         	call	_printf	;wreg free
  9790                           
  9791                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9792  0022E0  0E05               	movlw	5
  9793  0022E2  0100               	movlb	0	; () banked
  9794  0022E4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9795  0022E6  0E0F               	movlw	15
  9796  0022E8  0100               	movlb	0	; () banked
  9797  0022EA  6FAB               	movwf	??_sensorTest& (0+255),b
  9798  0022EC  0EF1               	movlw	241
  9799  0022EE                     u7507:
  9800  0022EE  2EE8               	decfsz	wreg,f,c
  9801  0022F0  D7FE               	bra	u7507
  9802  0022F2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9803  0022F4  D7FC               	bra	u7507
  9804  0022F6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9805  0022F8  D7FA               	bra	u7507
  9806  0022FA                     l6574:
  9807  0022FA  A281               	btfss	3969,1,c	;volatile
  9808  0022FC  D7A2               	goto	l6556
  9809                           
  9810                           ;Test.c: 145: }
  9811                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9812  0022FE  9A8B               	bcf	3979,5,c	;volatile
  9813                           
  9814                           ;Test.c: 153: printf("TST: MAGNETISM");
  9815  002300  0E7B               	movlw	low STR_82
  9816  002302  0100               	movlb	0	; () banked
  9817  002304  6F8E               	movwf	printf@f& (0+255),b
  9818  002306  0EFE               	movlw	high STR_82
  9819  002308  0100               	movlb	0	; () banked
  9820  00230A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9821  00230C  ECB8  F008         	call	_printf	;wreg free
  9822                           
  9823                           ;Test.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  9824  002310  0E05               	movlw	5
  9825  002312  0100               	movlb	0	; () banked
  9826  002314  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9827  002316  0E0F               	movlw	15
  9828  002318  0100               	movlb	0	; () banked
  9829  00231A  6FAB               	movwf	??_sensorTest& (0+255),b
  9830  00231C  0EF1               	movlw	241
  9831  00231E                     u7517:
  9832  00231E  2EE8               	decfsz	wreg,f,c
  9833  002320  D7FE               	bra	u7517
  9834  002322  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9835  002324  D7FC               	bra	u7517
  9836  002326  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9837  002328  D7FA               	bra	u7517
  9838                           
  9839                           ;Test.c: 155: while(PORTBbits.RB1 == 0){
  9840  00232A  D021               	goto	l6586
  9841  00232C                     l6580:
  9842                           
  9843                           ;Test.c: 156: readMAG();
  9844  00232C  EC6B  F020         	call	_readMAG	;wreg free
  9845                           
  9846                           ;Test.c: 157: lcdInst(0b10000000);;
  9847  002330  0E80               	movlw	128
  9848  002332  EC83  F023         	call	_lcdInst
  9849                           
  9850                           ;Test.c: 158: lcdInst(0b11000000);;
  9851  002336  0EC0               	movlw	192
  9852  002338  EC83  F023         	call	_lcdInst
  9853                           
  9854                           ;Test.c: 159: printf("MAG_signal: %d ", MAG_signal);
  9855  00233C  0E1E               	movlw	low STR_83
  9856  00233E  0100               	movlb	0	; () banked
  9857  002340  6F8E               	movwf	printf@f& (0+255),b
  9858  002342  0EFE               	movlw	high STR_83
  9859  002344  0100               	movlb	0	; () banked
  9860  002346  6F8F               	movwf	(printf@f+1)& (0+255),b
  9861  002348  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9862  00234C  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9863  002350  ECB8  F008         	call	_printf	;wreg free
  9864                           
  9865                           ;Test.c: 160: _delay((unsigned long)((100)*(32000000/4000.0)));
  9866  002354  0E05               	movlw	5
  9867  002356  0100               	movlb	0	; () banked
  9868  002358  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9869  00235A  0E0F               	movlw	15
  9870  00235C  0100               	movlb	0	; () banked
  9871  00235E  6FAB               	movwf	??_sensorTest& (0+255),b
  9872  002360  0EF1               	movlw	241
  9873  002362                     u7527:
  9874  002362  2EE8               	decfsz	wreg,f,c
  9875  002364  D7FE               	bra	u7527
  9876  002366  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9877  002368  D7FC               	bra	u7527
  9878  00236A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9879  00236C  D7FA               	bra	u7527
  9880  00236E                     l6586:
  9881  00236E  A281               	btfss	3969,1,c	;volatile
  9882  002370  D7DD               	goto	l6580
  9883                           
  9884                           ;Test.c: 161: }
  9885                           ;Test.c: 166: printf("TST: COND");
  9886  002372  0E7D               	movlw	low STR_84
  9887  002374  0100               	movlb	0	; () banked
  9888  002376  6F8E               	movwf	printf@f& (0+255),b
  9889  002378  0EFF               	movlw	high STR_84
  9890  00237A  0100               	movlb	0	; () banked
  9891  00237C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9892  00237E  ECB8  F008         	call	_printf	;wreg free
  9893                           
  9894                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
  9895  002382  0E05               	movlw	5
  9896  002384  0100               	movlb	0	; () banked
  9897  002386  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9898  002388  0E0F               	movlw	15
  9899  00238A  0100               	movlb	0	; () banked
  9900  00238C  6FAB               	movwf	??_sensorTest& (0+255),b
  9901  00238E  0EF1               	movlw	241
  9902  002390                     u7537:
  9903  002390  2EE8               	decfsz	wreg,f,c
  9904  002392  D7FE               	bra	u7537
  9905  002394  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9906  002396  D7FC               	bra	u7537
  9907  002398  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9908  00239A  D7FA               	bra	u7537
  9909                           
  9910                           ;Test.c: 168: int on = 0;
  9911  00239C  0E00               	movlw	0
  9912  00239E  0100               	movlb	0	; () banked
  9913  0023A0  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9914  0023A2  0E00               	movlw	0
  9915  0023A4  6FAD               	movwf	sensorTest@on& (0+255),b
  9916  0023A6                     l1072:
  9917  0023A6  A281               	btfss	3969,1,c	;volatile
  9918  0023A8  D7FE               	goto	l1072
  9919                           
  9920                           ;Test.c: 173: }
  9921                           ;Test.c: 174: if(PORTB >> 4 == 0b1111){
  9922  0023AA  3881               	swapf	3969,w,c	;volatile
  9923  0023AC  0B0F               	andlw	15
  9924  0023AE  0A0F               	xorlw	15
  9925  0023B0  B4D8               	btfsc	status,2,c
  9926  0023B2  0012               	return	
  9927                           
  9928                           ;Test.c: 177: else{
  9929                           ;Test.c: 178: if(on == 0){
  9930                           
  9931                           ;Test.c: 176: }
  9932                           
  9933                           ;Test.c: 175: break;
  9934  0023B4  0100               	movlb	0	; () banked
  9935  0023B6  51AD               	movf	sensorTest@on& (0+255),w,b
  9936  0023B8  0100               	movlb	0	; () banked
  9937  0023BA  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
  9938  0023BC  A4D8               	btfss	status,2,c
  9939  0023BE  D007               	goto	l6606
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;Test.c: 179: on = 1;
  9943  0023C0  0E00               	movlw	0
  9944  0023C2  0100               	movlb	0	; () banked
  9945  0023C4  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9946  0023C6  0E01               	movlw	1
  9947  0023C8  6FAD               	movwf	sensorTest@on& (0+255),b
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;Test.c: 180: LATAbits.LATA3 = 1;
  9951  0023CA  8689               	bsf	3977,3,c	;volatile
  9952                           
  9953                           ;Test.c: 181: }
  9954  0023CC  D006               	goto	l6610
  9955  0023CE                     l6606:
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;Test.c: 182: else{
  9959                           ;Test.c: 183: on = 0;
  9960  0023CE  0E00               	movlw	0
  9961  0023D0  0100               	movlb	0	; () banked
  9962  0023D2  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9963  0023D4  0E00               	movlw	0
  9964  0023D6  6FAD               	movwf	sensorTest@on& (0+255),b
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;Test.c: 184: LATAbits.LATA3 = ~1;
  9968  0023D8  9689               	bcf	3977,3,c	;volatile
  9969  0023DA                     l6610:
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;Test.c: 185: }
  9973                           ;Test.c: 186: lcdInst(0b10000000);;lcdInst(0b11000000);;
  9974  0023DA  0E80               	movlw	128
  9975  0023DC  EC83  F023         	call	_lcdInst
  9976  0023E0  0EC0               	movlw	192
  9977  0023E2  EC83  F023         	call	_lcdInst
  9978                           
  9979                           ;Test.c: 187: printf("COND: %d", PORTAbits.RA2);
  9980  0023E6  0EA5               	movlw	low STR_85
  9981  0023E8  0100               	movlb	0	; () banked
  9982  0023EA  6F8E               	movwf	printf@f& (0+255),b
  9983  0023EC  0EFF               	movlw	high STR_85
  9984  0023EE  0100               	movlb	0	; () banked
  9985  0023F0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9986  0023F2  A480               	btfss	3968,2,c	;volatile
  9987  0023F4  D004               	goto	u5110
  9988  0023F6  0100               	movlb	0	; () banked
  9989  0023F8  6BAB               	clrf	??_sensorTest& (0+255),b
  9990  0023FA  2BAB               	incf	??_sensorTest& (0+255),f,b
  9991  0023FC  D002               	goto	u5118
  9992  0023FE                     u5110:
  9993  0023FE  0100               	movlb	0	; () banked
  9994  002400  6BAB               	clrf	??_sensorTest& (0+255),b
  9995  002402                     u5118:
  9996  002402  0100               	movlb	0	; () banked
  9997  002404  51AB               	movf	??_sensorTest& (0+255),w,b
  9998  002406  0100               	movlb	0	; () banked
  9999  002408  6F90               	movwf	(?_printf+2)& (0+255),b
 10000  00240A  6B91               	clrf	(?_printf+3)& (0+255),b
 10001  00240C  ECB8  F008         	call	_printf	;wreg free
 10002  002410  D7CA               	goto	l1072
 10003  002412                     __end_of_sensorTest:
 10004                           	opt stack 0
 10005                           tblptru	equ	0xFF8
 10006                           tblptrh	equ	0xFF7
 10007                           tblptrl	equ	0xFF6
 10008                           tablat	equ	0xFF5
 10009                           prodh	equ	0xFF4
 10010                           prodl	equ	0xFF3
 10011                           intcon	equ	0xFF2
 10012                           intcon2	equ	0xFF1
 10013                           intcon3	equ	0xFF0
 10014                           postinc0	equ	0xFEE
 10015                           wreg	equ	0xFE8
 10016                           postdec1	equ	0xFE5
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function _readMAG *****************
 10026 ;; Defined at:
 10027 ;;		line 29 in file "ADCFunctionality.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;		None
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;  res             2    4[BANK0 ] int 
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  1    wreg      void 
 10034 ;; Registers used:
 10035 ;;		wreg, status,2, status,0, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;Total ram usage:        4 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    8
 10048 ;; This function calls:
 10049 ;;		_readADC
 10050 ;; This function is called by:
 10051 ;;		_ID
 10052 ;;		_sensorTest
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text37
 10057  0040D6                     __ptext37:
 10058                           	opt stack 0
 10059  0040D6                     _readMAG:
 10060                           	opt stack 20
 10061                           
 10062                           ;ADCFunctionality.c: 30: readADC(1);
 10063                           
 10064                           ;incstack = 0
 10065  0040D6  0E01               	movlw	1
 10066  0040D8  EC78  F022         	call	_readADC
 10067                           
 10068                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10069  0040DC  50C3               	movf	4035,w,c	;volatile
 10070  0040DE  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10071  0040E2  0100               	movlb	0	; () banked
 10072  0040E4  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10073  0040E6  C082  F083         	movff	??_readMAG,??_readMAG+1
 10074  0040EA  0100               	movlb	0	; () banked
 10075  0040EC  6B82               	clrf	??_readMAG& (0+255),b
 10076  0040EE  0100               	movlb	0	; () banked
 10077  0040F0  1182               	iorwf	??_readMAG& (0+255),w,b
 10078  0040F2  0100               	movlb	0	; () banked
 10079  0040F4  6F84               	movwf	readMAG@res& (0+255),b
 10080  0040F6  0100               	movlb	0	; () banked
 10081  0040F8  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10082  0040FA  0100               	movlb	0	; () banked
 10083  0040FC  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10087  0040FE  0100               	movlb	0	; () banked
 10088  004100  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10089  004102  D008               	goto	u4451
 10090  004104  0100               	movlb	0	; () banked
 10091  004106  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10092  004108  E107               	bnz	u4450
 10093  00410A  0E96               	movlw	150
 10094  00410C  0100               	movlb	0	; () banked
 10095  00410E  5D84               	subwf	readMAG@res& (0+255),w,b
 10096  004110  B0D8               	btfsc	status,0,c
 10097  004112  D002               	goto	u4450
 10098  004114                     u4451:
 10099  004114  0E01               	movlw	1
 10100  004116  D001               	goto	u4460
 10101  004118                     u4450:
 10102  004118  0E00               	movlw	0
 10103  00411A                     u4460:
 10104  00411A  0100               	movlb	0	; () banked
 10105  00411C  6FDC               	movwf	_MAG_signal& (0+255),b
 10106  00411E  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10107                           
 10108                           ; BSR set to: 0
 10109  004120  0012               	return		;funcret
 10110  004122                     __end_of_readMAG:
 10111                           	opt stack 0
 10112                           tblptru	equ	0xFF8
 10113                           tblptrh	equ	0xFF7
 10114                           tblptrl	equ	0xFF6
 10115                           tablat	equ	0xFF5
 10116                           prodh	equ	0xFF4
 10117                           prodl	equ	0xFF3
 10118                           intcon	equ	0xFF2
 10119                           intcon2	equ	0xFF1
 10120                           intcon3	equ	0xFF0
 10121                           postinc0	equ	0xFEE
 10122                           wreg	equ	0xFE8
 10123                           postdec1	equ	0xFE5
 10124                           fsr1l	equ	0xFE1
 10125                           indf2	equ	0xFDF
 10126                           postinc2	equ	0xFDE
 10127                           postdec2	equ	0xFDD
 10128                           fsr2h	equ	0xFDA
 10129                           fsr2l	equ	0xFD9
 10130                           status	equ	0xFD8
 10131                           
 10132 ;; *************** function _readADC *****************
 10133 ;; Defined at:
 10134 ;;		line 15 in file "ADCFunctionality.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;  channel         1    wreg     unsigned char 
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;  channel         1    1[BANK0 ] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      void 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;Total ram usage:        2 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    7
 10155 ;; This function calls:
 10156 ;;		Nothing
 10157 ;; This function is called by:
 10158 ;;		_readIR
 10159 ;;		_readMAG
 10160 ;;		_sensorTest
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text38
 10165  0044F0                     __ptext38:
 10166                           	opt stack 0
 10167  0044F0                     _readADC:
 10168                           	opt stack 19
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;incstack = 0
 10172                           ;readADC@channel stored from wreg
 10173  0044F0  0100               	movlb	0	; () banked
 10174  0044F2  6F81               	movwf	readADC@channel& (0+255),b
 10175                           
 10176                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10177  0044F4  0100               	movlb	0	; () banked
 10178  0044F6  4581               	rlncf	readADC@channel& (0+255),w,b
 10179  0044F8  46E8               	rlncf	wreg,f,c
 10180  0044FA  0BFC               	andlw	252
 10181  0044FC  6EC2               	movwf	4034,c	;volatile
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10185  0044FE  80C2               	bsf	4034,0,c	;volatile
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10189  004500  82C2               	bsf	4034,1,c	;volatile
 10190                           
 10191                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10192  004502  D009               	goto	l5218
 10193  004504                     l5216:
 10194  004504  0E34               	movlw	52
 10195  004506  0100               	movlb	0	; () banked
 10196  004508  6F80               	movwf	??_readADC& (0+255),b
 10197  00450A  0EF1               	movlw	241
 10198  00450C                     u7547:
 10199  00450C  2EE8               	decfsz	wreg,f,c
 10200  00450E  D7FE               	bra	u7547
 10201  004510  2F80               	decfsz	??_readADC& (0+255),f,b
 10202  004512  D7FC               	bra	u7547
 10203  004514  D000               	nop2	
 10204  004516                     l5218:
 10205  004516  A2C2               	btfss	4034,1,c	;volatile
 10206  004518  0012               	return	
 10207  00451A  D7F4               	goto	l5216
 10208  00451C                     __end_of_readADC:
 10209                           	opt stack 0
 10210                           tblptru	equ	0xFF8
 10211                           tblptrh	equ	0xFF7
 10212                           tblptrl	equ	0xFF6
 10213                           tablat	equ	0xFF5
 10214                           prodh	equ	0xFF4
 10215                           prodl	equ	0xFF3
 10216                           intcon	equ	0xFF2
 10217                           intcon2	equ	0xFF1
 10218                           intcon3	equ	0xFF0
 10219                           postinc0	equ	0xFEE
 10220                           wreg	equ	0xFE8
 10221                           postdec1	equ	0xFE5
 10222                           fsr1l	equ	0xFE1
 10223                           indf2	equ	0xFDF
 10224                           postinc2	equ	0xFDE
 10225                           postdec2	equ	0xFDD
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           
 10230 ;; *************** function _algorithmTest *****************
 10231 ;; Defined at:
 10232 ;;		line 74 in file "Test.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;		None
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;		None
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  1    wreg      void 
 10239 ;; Registers used:
 10240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;Total ram usage:        2 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:   10
 10253 ;; This function calls:
 10254 ;;		_lcdInst
 10255 ;;		_printf
 10256 ;; This function is called by:
 10257 ;;		_Test
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text39
 10262  0034B6                     __ptext39:
 10263                           	opt stack 0
 10264  0034B6                     _algorithmTest:
 10265                           	opt stack 19
 10266                           
 10267                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10268                           
 10269                           ;incstack = 0
 10270  0034B6  0E01               	movlw	1
 10271  0034B8  EC83  F023         	call	_lcdInst
 10272  0034BC  0E68               	movlw	104
 10273  0034BE  0100               	movlb	0	; () banked
 10274  0034C0  6FAB               	movwf	??_algorithmTest& (0+255),b
 10275  0034C2  0EE4               	movlw	228
 10276  0034C4                     u7557:
 10277  0034C4  2EE8               	decfsz	wreg,f,c
 10278  0034C6  D7FE               	bra	u7557
 10279  0034C8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10280  0034CA  D7FC               	bra	u7557
 10281  0034CC  F000               	nop	
 10282  0034CE  0E80               	movlw	128
 10283  0034D0  EC83  F023         	call	_lcdInst
 10284                           
 10285                           ;Test.c: 77: printf("ALGORITHM TEST");
 10286  0034D4  0EC6               	movlw	low STR_70
 10287  0034D6  0100               	movlb	0	; () banked
 10288  0034D8  6F8E               	movwf	printf@f& (0+255),b
 10289  0034DA  0EFE               	movlw	high STR_70
 10290  0034DC  0100               	movlb	0	; () banked
 10291  0034DE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10292  0034E0  ECB8  F008         	call	_printf	;wreg free
 10293                           
 10294                           ;Test.c: 78: lcdInst(0b11000000);;
 10295  0034E4  0EC0               	movlw	192
 10296  0034E6  EC83  F023         	call	_lcdInst
 10297                           
 10298                           ;Test.c: 79: printf("PUSH TO START");
 10299  0034EA  0EFF               	movlw	low STR_71
 10300  0034EC  0100               	movlb	0	; () banked
 10301  0034EE  6F8E               	movwf	printf@f& (0+255),b
 10302  0034F0  0EFE               	movlw	high STR_71
 10303  0034F2  0100               	movlb	0	; () banked
 10304  0034F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10305  0034F6  ECB8  F008         	call	_printf	;wreg free
 10306                           
 10307                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10308  0034FA  0E05               	movlw	5
 10309  0034FC  0100               	movlb	0	; () banked
 10310  0034FE  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10311  003500  0E0F               	movlw	15
 10312  003502  0100               	movlb	0	; () banked
 10313  003504  6FAB               	movwf	??_algorithmTest& (0+255),b
 10314  003506  0EF1               	movlw	241
 10315  003508                     u7567:
 10316  003508  2EE8               	decfsz	wreg,f,c
 10317  00350A  D7FE               	bra	u7567
 10318  00350C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10319  00350E  D7FC               	bra	u7567
 10320  003510  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10321  003512  D7FA               	bra	u7567
 10322  003514                     l1050:
 10323  003514  A281               	btfss	3969,1,c	;volatile
 10324  003516  D7FE               	goto	l1050
 10325  003518                     l1053:
 10326  003518  B281               	btfsc	3969,1,c	;volatile
 10327  00351A  D7FE               	goto	l1053
 10328                           
 10329                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10330  00351C  0E01               	movlw	1
 10331  00351E  EC83  F023         	call	_lcdInst
 10332  003522  0E68               	movlw	104
 10333  003524  0100               	movlb	0	; () banked
 10334  003526  6FAB               	movwf	??_algorithmTest& (0+255),b
 10335  003528  0EE4               	movlw	228
 10336  00352A                     u7577:
 10337  00352A  2EE8               	decfsz	wreg,f,c
 10338  00352C  D7FE               	bra	u7577
 10339  00352E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10340  003530  D7FC               	bra	u7577
 10341  003532  F000               	nop	
 10342  003534  0E80               	movlw	128
 10343  003536  EC83  F023         	call	_lcdInst
 10344                           
 10345                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10346  00353A  0E75               	movlw	low STR_72
 10347  00353C  0100               	movlb	0	; () banked
 10348  00353E  6F8E               	movwf	printf@f& (0+255),b
 10349  003540  0EFC               	movlw	high STR_72
 10350  003542  0100               	movlb	0	; () banked
 10351  003544  6F8F               	movwf	(printf@f+1)& (0+255),b
 10352  003546  ECB8  F008         	call	_printf	;wreg free
 10353                           
 10354                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10355  00354A  0EE3               	movlw	low STR_73
 10356  00354C  0100               	movlb	0	; () banked
 10357  00354E  6F8E               	movwf	printf@f& (0+255),b
 10358  003550  0EFE               	movlw	high STR_73
 10359  003552  0100               	movlb	0	; () banked
 10360  003554  6F8F               	movwf	(printf@f+1)& (0+255),b
 10361  003556  ECB8  F008         	call	_printf	;wreg free
 10362                           
 10363                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10364  00355A  0E50               	movlw	low STR_74
 10365  00355C  0100               	movlb	0	; () banked
 10366  00355E  6F8E               	movwf	printf@f& (0+255),b
 10367  003560  0EFF               	movlw	high STR_74
 10368  003562  0100               	movlb	0	; () banked
 10369  003564  6F8F               	movwf	(printf@f+1)& (0+255),b
 10370  003566  ECB8  F008         	call	_printf	;wreg free
 10371                           
 10372                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10373  00356A  0EA8               	movlw	low STR_75
 10374  00356C  0100               	movlb	0	; () banked
 10375  00356E  6F8E               	movwf	printf@f& (0+255),b
 10376  003570  0EFE               	movlw	high STR_75
 10377  003572  0100               	movlb	0	; () banked
 10378  003574  6F8F               	movwf	(printf@f+1)& (0+255),b
 10379  003576  ECB8  F008         	call	_printf	;wreg free
 10380                           
 10381                           ;Test.c: 115: printf("ALG5: NO CANS");
 10382  00357A  0EF1               	movlw	low STR_76
 10383  00357C  0100               	movlb	0	; () banked
 10384  00357E  6F8E               	movwf	printf@f& (0+255),b
 10385  003580  0EFE               	movlw	high STR_76
 10386  003582  0100               	movlb	0	; () banked
 10387  003584  6F8F               	movwf	(printf@f+1)& (0+255),b
 10388  003586  ECB8  F008         	call	_printf	;wreg free
 10389  00358A  0012               	return		;funcret
 10390  00358C                     __end_of_algorithmTest:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon2	equ	0xFF1
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           wreg	equ	0xFE8
 10403                           postdec1	equ	0xFE5
 10404                           fsr1l	equ	0xFE1
 10405                           indf2	equ	0xFDF
 10406                           postinc2	equ	0xFDE
 10407                           postdec2	equ	0xFDD
 10408                           fsr2h	equ	0xFDA
 10409                           fsr2l	equ	0xFD9
 10410                           status	equ	0xFD8
 10411                           
 10412 ;; *************** function _actuatorTest *****************
 10413 ;; Defined at:
 10414 ;;		line 192 in file "Test.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;		None
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  i               1   45[BANK0 ] unsigned char 
 10419 ;;  i               1   67[BANK0 ] unsigned char 
 10420 ;;  i               1   66[BANK0 ] unsigned char 
 10421 ;;  i               1   65[BANK0 ] unsigned char 
 10422 ;;  i               1   64[BANK0 ] unsigned char 
 10423 ;;  i               1   63[BANK0 ] unsigned char 
 10424 ;;  i               1   62[BANK0 ] unsigned char 
 10425 ;;  i               1   61[BANK0 ] unsigned char 
 10426 ;;  i               1   60[BANK0 ] unsigned char 
 10427 ;;  i               1   59[BANK0 ] unsigned char 
 10428 ;;  i               1   58[BANK0 ] unsigned char 
 10429 ;;  i               1   57[BANK0 ] unsigned char 
 10430 ;;  i               1   56[BANK0 ] unsigned char 
 10431 ;;  i               1   55[BANK0 ] unsigned char 
 10432 ;;  i               1   54[BANK0 ] unsigned char 
 10433 ;;  i               1   53[BANK0 ] unsigned char 
 10434 ;;  i               1   52[BANK0 ] unsigned char 
 10435 ;;  i               1   51[BANK0 ] unsigned char 
 10436 ;;  i               1   50[BANK0 ] unsigned char 
 10437 ;;  i               1   49[BANK0 ] unsigned char 
 10438 ;;  i               1   48[BANK0 ] unsigned char 
 10439 ;;  i               1   47[BANK0 ] unsigned char 
 10440 ;;  i               1   46[BANK0 ] unsigned char 
 10441 ;;  i               2   68[BANK0 ] int 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;Total ram usage:       27 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:   10
 10458 ;; This function calls:
 10459 ;;		_lcdInst
 10460 ;;		_printf
 10461 ;;		_updateServoPosition
 10462 ;; This function is called by:
 10463 ;;		_Test
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           	psect	text40
 10468  000012                     __ptext40:
 10469                           	opt stack 0
 10470  000012                     _actuatorTest:
 10471                           	opt stack 19
 10472                           
 10473                           ;Test.c: 194: int i = 0;
 10474                           
 10475                           ;incstack = 0
 10476  000012  0E00               	movlw	0
 10477  000014  0100               	movlb	0	; () banked
 10478  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10479  000018  0E00               	movlw	0
 10480  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;Test.c: 196: (INTCONbits.GIE = 1);
 10484  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;Test.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10488  00001E  0E01               	movlw	1
 10489  000020  EC83  F023         	call	_lcdInst
 10490  000024  0E68               	movlw	104
 10491  000026  0100               	movlb	0	; () banked
 10492  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10493  00002A  0EE4               	movlw	228
 10494  00002C                     u7587:
 10495  00002C  2EE8               	decfsz	wreg,f,c
 10496  00002E  D7FE               	bra	u7587
 10497  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10498  000032  D7FC               	bra	u7587
 10499  000034  F000               	nop	
 10500  000036  0E80               	movlw	128
 10501  000038  EC83  F023         	call	_lcdInst
 10502                           
 10503                           ;Test.c: 198: printf("ACTUATORS");
 10504  00003C  0E91               	movlw	low STR_86
 10505  00003E  0100               	movlb	0	; () banked
 10506  000040  6F8E               	movwf	printf@f& (0+255),b
 10507  000042  0EFF               	movlw	high STR_86
 10508  000044  0100               	movlb	0	; () banked
 10509  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10510  000048  ECB8  F008         	call	_printf	;wreg free
 10511                           
 10512                           ;Test.c: 199: lcdInst(0b11000000);;
 10513  00004C  0EC0               	movlw	192
 10514  00004E  EC83  F023         	call	_lcdInst
 10515                           
 10516                           ;Test.c: 200: printf("PUSH TO START");
 10517  000052  0EFF               	movlw	low STR_71
 10518  000054  0100               	movlb	0	; () banked
 10519  000056  6F8E               	movwf	printf@f& (0+255),b
 10520  000058  0EFE               	movlw	high STR_71
 10521  00005A  0100               	movlb	0	; () banked
 10522  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10523  00005E  ECB8  F008         	call	_printf	;wreg free
 10524                           
 10525                           ;Test.c: 201: _delay((unsigned long)((100)*(32000000/4000.0)));
 10526  000062  0E05               	movlw	5
 10527  000064  0100               	movlb	0	; () banked
 10528  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10529  000068  0E0F               	movlw	15
 10530  00006A  0100               	movlb	0	; () banked
 10531  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10532  00006E  0EF1               	movlw	241
 10533  000070                     u7597:
 10534  000070  2EE8               	decfsz	wreg,f,c
 10535  000072  D7FE               	bra	u7597
 10536  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10537  000076  D7FC               	bra	u7597
 10538  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10539  00007A  D7FA               	bra	u7597
 10540  00007C                     l1084:
 10541  00007C  A281               	btfss	3969,1,c	;volatile
 10542  00007E  D7FE               	goto	l1084
 10543  000080                     l1087:
 10544  000080  B281               	btfsc	3969,1,c	;volatile
 10545  000082  D7FE               	goto	l1087
 10546                           
 10547                           ;Test.c: 204: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10548  000084  0E01               	movlw	1
 10549  000086  EC83  F023         	call	_lcdInst
 10550  00008A  0E68               	movlw	104
 10551  00008C  0100               	movlb	0	; () banked
 10552  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10553  000090  0EE4               	movlw	228
 10554  000092                     u7607:
 10555  000092  2EE8               	decfsz	wreg,f,c
 10556  000094  D7FE               	bra	u7607
 10557  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10558  000098  D7FC               	bra	u7607
 10559  00009A  F000               	nop	
 10560  00009C  0E80               	movlw	128
 10561  00009E  EC83  F023         	call	_lcdInst
 10562                           
 10563                           ;Test.c: 209: printf("TST: DC MOTORS");
 10564  0000A2  0EB7               	movlw	low STR_88
 10565  0000A4  0100               	movlb	0	; () banked
 10566  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10567  0000A8  0EFE               	movlw	high STR_88
 10568  0000AA  0100               	movlb	0	; () banked
 10569  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10570  0000AE  ECB8  F008         	call	_printf	;wreg free
 10571                           
 10572                           ;Test.c: 210: lcdInst(0b11000000);;
 10573  0000B2  0EC0               	movlw	192
 10574  0000B4  EC83  F023         	call	_lcdInst
 10575                           
 10576                           ;Test.c: 211: printf("PIN RA5 HIGH.");
 10577  0000B8  0ED5               	movlw	low STR_89
 10578  0000BA  0100               	movlb	0	; () banked
 10579  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10580  0000BE  0EFE               	movlw	high STR_89
 10581  0000C0  0100               	movlb	0	; () banked
 10582  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10583  0000C4  ECB8  F008         	call	_printf	;wreg free
 10584                           
 10585                           ;Test.c: 212: LATAbits.LATA5 = 1;
 10586  0000C8  8A89               	bsf	3977,5,c	;volatile
 10587                           
 10588                           ;Test.c: 213: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10589  0000CA  0E00               	movlw	0
 10590  0000CC  0100               	movlb	0	; () banked
 10591  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10592  0000D0  0E00               	movlw	0
 10593  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10594                           
 10595                           ; BSR set to: 0
 10596  0000D4  0100               	movlb	0	; () banked
 10597  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10598  0000D8  D008               	goto	l6654
 10599  0000DA  0100               	movlb	0	; () banked
 10600  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10601  0000DE  E123               	bnz	l1091
 10602  0000E0  0E05               	movlw	5
 10603  0000E2  0100               	movlb	0	; () banked
 10604  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10605  0000E6  B0D8               	btfsc	status,0,c
 10606  0000E8  D01E               	goto	l1091
 10607  0000EA                     l6654:
 10608                           
 10609                           ; BSR set to: 0
 10610  0000EA  0E00               	movlw	0
 10611  0000EC  0100               	movlb	0	; () banked
 10612  0000EE  6FAD               	movwf	actuatorTest@i_1629& (0+255),b
 10613  0000F0                     l6656:
 10614                           
 10615                           ; BSR set to: 0
 10616  0000F0  0E63               	movlw	99
 10617  0000F2  0100               	movlb	0	; () banked
 10618  0000F4  65AD               	cpfsgt	actuatorTest@i_1629& (0+255),b
 10619  0000F6  D001               	goto	l6660
 10620  0000F8  D00C               	goto	l6664
 10621  0000FA                     l6660:
 10622                           
 10623                           ; BSR set to: 0
 10624  0000FA  0E68               	movlw	104
 10625  0000FC  0100               	movlb	0	; () banked
 10626  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10627  000100  0EE4               	movlw	228
 10628  000102                     u7617:
 10629  000102  2EE8               	decfsz	wreg,f,c
 10630  000104  D7FE               	bra	u7617
 10631  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10632  000108  D7FC               	bra	u7617
 10633  00010A  F000               	nop	
 10634  00010C  0100               	movlb	0	; () banked
 10635  00010E  2BAD               	incf	actuatorTest@i_1629& (0+255),f,b
 10636  000110  D7EF               	goto	l6656
 10637  000112                     l6664:
 10638                           
 10639                           ; BSR set to: 0
 10640  000112  0100               	movlb	0	; () banked
 10641  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10642  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10643                           
 10644                           ; BSR set to: 0
 10645  000118  0100               	movlb	0	; () banked
 10646  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10647  00011C  D7E6               	goto	l6654
 10648  00011E  0100               	movlb	0	; () banked
 10649  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10650  000122  E101               	bnz	u5170
 10651  000124  D7DD               	goto	L7
 10652  000126                     u5170:
 10653  000126                     l1091:
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;Test.c: 214: LATAbits.LATA5 = 0;
 10657  000126  9A89               	bcf	3977,5,c	;volatile
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10661  000128  0E01               	movlw	1
 10662  00012A  EC83  F023         	call	_lcdInst
 10663  00012E  0E68               	movlw	104
 10664  000130  0100               	movlb	0	; () banked
 10665  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10666  000134  0EE4               	movlw	228
 10667  000136                     u7627:
 10668  000136  2EE8               	decfsz	wreg,f,c
 10669  000138  D7FE               	bra	u7627
 10670  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10671  00013C  D7FC               	bra	u7627
 10672  00013E  F000               	nop	
 10673  000140  0E80               	movlw	128
 10674  000142  EC83  F023         	call	_lcdInst
 10675                           
 10676                           ;Test.c: 221: printf("TST: COND SOLN'D");
 10677  000146  0E97               	movlw	low STR_90
 10678  000148  0100               	movlb	0	; () banked
 10679  00014A  6F8E               	movwf	printf@f& (0+255),b
 10680  00014C  0EFC               	movlw	high STR_90
 10681  00014E  0100               	movlb	0	; () banked
 10682  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10683  000152  ECB8  F008         	call	_printf	;wreg free
 10684                           
 10685                           ;Test.c: 222: lcdInst(0b11000000);;
 10686  000156  0EC0               	movlw	192
 10687  000158  EC83  F023         	call	_lcdInst
 10688                           
 10689                           ;Test.c: 223: printf("PIN RA3...");
 10690  00015C  0E5C               	movlw	low STR_91
 10691  00015E  0100               	movlb	0	; () banked
 10692  000160  6F8E               	movwf	printf@f& (0+255),b
 10693  000162  0EFF               	movlw	high STR_91
 10694  000164  0100               	movlb	0	; () banked
 10695  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10696  000168  ECB8  F008         	call	_printf	;wreg free
 10697                           
 10698                           ;Test.c: 224: for(i=0;i<5;i++){
 10699  00016C  0E00               	movlw	0
 10700  00016E  0100               	movlb	0	; () banked
 10701  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10702  000172  0E00               	movlw	0
 10703  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10704                           
 10705                           ; BSR set to: 0
 10706  000176  0100               	movlb	0	; () banked
 10707  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10708  00017A  D008               	goto	l1094
 10709  00017C  0100               	movlb	0	; () banked
 10710  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10711  000180  E12C               	bnz	l1095
 10712  000182  0E05               	movlw	5
 10713  000184  0100               	movlb	0	; () banked
 10714  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10715  000188  B0D8               	btfsc	status,0,c
 10716  00018A  D027               	goto	l1095
 10717  00018C                     l1094:
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;Test.c: 225: LATAbits.LATA3 = 1;
 10721  00018C  8689               	bsf	3977,3,c	;volatile
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;Test.c: 226: _delay((unsigned long)((300)*(32000000/4000.0)));
 10725  00018E  0E0D               	movlw	13
 10726  000190  0100               	movlb	0	; () banked
 10727  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10728  000194  0E2D               	movlw	45
 10729  000196  0100               	movlb	0	; () banked
 10730  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10731  00019A  0ED7               	movlw	215
 10732  00019C                     u7637:
 10733  00019C  2EE8               	decfsz	wreg,f,c
 10734  00019E  D7FE               	bra	u7637
 10735  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10736  0001A2  D7FC               	bra	u7637
 10737  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10738  0001A6  D7FA               	bra	u7637
 10739  0001A8  D000               	nop2	
 10740                           
 10741                           ;Test.c: 227: LATAbits.LATA3 = ~1;
 10742  0001AA  9689               	bcf	3977,3,c	;volatile
 10743                           
 10744                           ;Test.c: 228: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10745  0001AC  0E1D               	movlw	29
 10746  0001AE  0100               	movlb	0	; () banked
 10747  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10748  0001B2  0E69               	movlw	105
 10749  0001B4  0100               	movlb	0	; () banked
 10750  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10751  0001B8  0EA5               	movlw	165
 10752  0001BA                     u7647:
 10753  0001BA  2EE8               	decfsz	wreg,f,c
 10754  0001BC  D7FE               	bra	u7647
 10755  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10756  0001C0  D7FC               	bra	u7647
 10757  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10758  0001C4  D7FA               	bra	u7647
 10759  0001C6  0100               	movlb	0	; () banked
 10760  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10761  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10762  0001CC  0100               	movlb	0	; () banked
 10763  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10764  0001D0  D7DD               	goto	l1094
 10765  0001D2  0100               	movlb	0	; () banked
 10766  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10767  0001D6  E101               	bnz	u5190
 10768  0001D8  D7D4               	goto	L8
 10769  0001DA                     u5190:
 10770  0001DA                     l1095:
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;Test.c: 229: }
 10774                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10775  0001DA  9689               	bcf	3977,3,c	;volatile
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;Test.c: 231: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10779  0001DC  0E01               	movlw	1
 10780  0001DE  EC83  F023         	call	_lcdInst
 10781  0001E2  0E68               	movlw	104
 10782  0001E4  0100               	movlb	0	; () banked
 10783  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10784  0001E8  0EE4               	movlw	228
 10785  0001EA                     u7657:
 10786  0001EA  2EE8               	decfsz	wreg,f,c
 10787  0001EC  D7FE               	bra	u7657
 10788  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10789  0001F0  D7FC               	bra	u7657
 10790  0001F2  F000               	nop	
 10791  0001F4  0E80               	movlw	128
 10792  0001F6  EC83  F023         	call	_lcdInst
 10793                           
 10794                           ;Test.c: 237: printf("TST: PUSH SOLN'D");
 10795  0001FA  0EA8               	movlw	low STR_92
 10796  0001FC  0100               	movlb	0	; () banked
 10797  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10798  000200  0EFC               	movlw	high STR_92
 10799  000202  0100               	movlb	0	; () banked
 10800  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10801  000206  ECB8  F008         	call	_printf	;wreg free
 10802                           
 10803                           ;Test.c: 238: lcdInst(0b11000000);;
 10804  00020A  0EC0               	movlw	192
 10805  00020C  EC83  F023         	call	_lcdInst
 10806                           
 10807                           ;Test.c: 239: printf("PIN RA4...");
 10808  000210  0E67               	movlw	low STR_93
 10809  000212  0100               	movlb	0	; () banked
 10810  000214  6F8E               	movwf	printf@f& (0+255),b
 10811  000216  0EFF               	movlw	high STR_93
 10812  000218  0100               	movlb	0	; () banked
 10813  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10814  00021C  ECB8  F008         	call	_printf	;wreg free
 10815                           
 10816                           ;Test.c: 240: for(i=0;i<5;i++){
 10817  000220  0E00               	movlw	0
 10818  000222  0100               	movlb	0	; () banked
 10819  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10820  000226  0E00               	movlw	0
 10821  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10822                           
 10823                           ; BSR set to: 0
 10824  00022A  0100               	movlb	0	; () banked
 10825  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10826  00022E  D008               	goto	l1096
 10827  000230  0100               	movlb	0	; () banked
 10828  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10829  000234  E12C               	bnz	l1097
 10830  000236  0E05               	movlw	5
 10831  000238  0100               	movlb	0	; () banked
 10832  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10833  00023C  B0D8               	btfsc	status,0,c
 10834  00023E  D027               	goto	l1097
 10835  000240                     l1096:
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;Test.c: 241: LATAbits.LATA4 = 1;
 10839  000240  8889               	bsf	3977,4,c	;volatile
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;Test.c: 242: _delay((unsigned long)((300)*(32000000/4000.0)));
 10843  000242  0E0D               	movlw	13
 10844  000244  0100               	movlb	0	; () banked
 10845  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10846  000248  0E2D               	movlw	45
 10847  00024A  0100               	movlb	0	; () banked
 10848  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10849  00024E  0ED7               	movlw	215
 10850  000250                     u7667:
 10851  000250  2EE8               	decfsz	wreg,f,c
 10852  000252  D7FE               	bra	u7667
 10853  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10854  000256  D7FC               	bra	u7667
 10855  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10856  00025A  D7FA               	bra	u7667
 10857  00025C  D000               	nop2	
 10858                           
 10859                           ;Test.c: 243: LATAbits.LATA4 = ~1;
 10860  00025E  9889               	bcf	3977,4,c	;volatile
 10861                           
 10862                           ;Test.c: 244: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10863  000260  0E1D               	movlw	29
 10864  000262  0100               	movlb	0	; () banked
 10865  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10866  000266  0E69               	movlw	105
 10867  000268  0100               	movlb	0	; () banked
 10868  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10869  00026C  0EA5               	movlw	165
 10870  00026E                     u7677:
 10871  00026E  2EE8               	decfsz	wreg,f,c
 10872  000270  D7FE               	bra	u7677
 10873  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10874  000274  D7FC               	bra	u7677
 10875  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10876  000278  D7FA               	bra	u7677
 10877  00027A  0100               	movlb	0	; () banked
 10878  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10879  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10880  000280  0100               	movlb	0	; () banked
 10881  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10882  000284  D7DD               	goto	l1096
 10883  000286  0100               	movlb	0	; () banked
 10884  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10885  00028A  E101               	bnz	u5210
 10886  00028C  D7D4               	goto	L9
 10887  00028E                     u5210:
 10888  00028E                     l1097:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;Test.c: 245: }
 10892                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 10893  00028E  9889               	bcf	3977,4,c	;volatile
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;Test.c: 247: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10897  000290  0E01               	movlw	1
 10898  000292  EC83  F023         	call	_lcdInst
 10899  000296  0E68               	movlw	104
 10900  000298  0100               	movlb	0	; () banked
 10901  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10902  00029C  0EE4               	movlw	228
 10903  00029E                     u7687:
 10904  00029E  2EE8               	decfsz	wreg,f,c
 10905  0002A0  D7FE               	bra	u7687
 10906  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10907  0002A4  D7FC               	bra	u7687
 10908  0002A6  F000               	nop	
 10909  0002A8  0E80               	movlw	128
 10910  0002AA  EC83  F023         	call	_lcdInst
 10911                           
 10912                           ;Test.c: 250: machine_state = Sorting_state;
 10913  0002AE  0E01               	movlw	1
 10914  0002B0  0100               	movlb	0	; () banked
 10915  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;Test.c: 251: was_low_1 = 0;
 10919  0002B4  0E00               	movlw	0
 10920  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 10921  0002B8  0E00               	movlw	0
 10922  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;Test.c: 252: was_low_1 = 0;
 10926  0002BC  0E00               	movlw	0
 10927  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 10928  0002C0  0E00               	movlw	0
 10929  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;Test.c: 259: printf("TST: PAN SERVO");
 10933  0002C4  0E99               	movlw	low STR_94
 10934  0002C6  0100               	movlb	0	; () banked
 10935  0002C8  6F8E               	movwf	printf@f& (0+255),b
 10936  0002CA  0EFE               	movlw	high STR_94
 10937  0002CC  0100               	movlb	0	; () banked
 10938  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10939  0002D0  ECB8  F008         	call	_printf	;wreg free
 10940                           
 10941                           ;Test.c: 260: lcdInst(0b11000000);;
 10942  0002D4  0EC0               	movlw	192
 10943  0002D6  EC83  F023         	call	_lcdInst
 10944                           
 10945                           ;Test.c: 261: printf("MIDDLE -- 2s    ");
 10946  0002DA  0E20               	movlw	low STR_95
 10947  0002DC  0100               	movlb	0	; () banked
 10948  0002DE  6F8E               	movwf	printf@f& (0+255),b
 10949  0002E0  0EFC               	movlw	high STR_95
 10950  0002E2  0100               	movlb	0	; () banked
 10951  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10952  0002E6  ECB8  F008         	call	_printf	;wreg free
 10953                           
 10954                           ;Test.c: 262: updateServoPosition(1200, 1);
 10955  0002EA  0E04               	movlw	4
 10956  0002EC  0100               	movlb	0	; () banked
 10957  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10958  0002F0  0EB0               	movlw	176
 10959  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10960  0002F4  0E00               	movlw	0
 10961  0002F6  0100               	movlb	0	; () banked
 10962  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10963  0002FA  0E01               	movlw	1
 10964  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10965  0002FE  EC0A  F01E         	call	_updateServoPosition	;wreg free
 10966                           
 10967                           ;Test.c: 263: TMR1ON = 1;
 10968  000302  80CD               	bsf	4045,0,c	;volatile
 10969                           
 10970                           ;Test.c: 264: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10971  000304  0E00               	movlw	0
 10972  000306  0100               	movlb	0	; () banked
 10973  000308  6FAE               	movwf	actuatorTest@i_1636& (0+255),b
 10974  00030A                     l6740:
 10975                           
 10976                           ; BSR set to: 0
 10977  00030A  0E63               	movlw	99
 10978  00030C  0100               	movlb	0	; () banked
 10979  00030E  65AE               	cpfsgt	actuatorTest@i_1636& (0+255),b
 10980  000310  D001               	goto	l6744
 10981  000312  D00C               	goto	l6748
 10982  000314                     l6744:
 10983                           
 10984                           ; BSR set to: 0
 10985  000314  0E68               	movlw	104
 10986  000316  0100               	movlb	0	; () banked
 10987  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 10988  00031A  0EE4               	movlw	228
 10989  00031C                     u7697:
 10990  00031C  2EE8               	decfsz	wreg,f,c
 10991  00031E  D7FE               	bra	u7697
 10992  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10993  000322  D7FC               	bra	u7697
 10994  000324  F000               	nop	
 10995  000326  0100               	movlb	0	; () banked
 10996  000328  2BAE               	incf	actuatorTest@i_1636& (0+255),f,b
 10997  00032A  D7EF               	goto	l6740
 10998  00032C                     l6748:
 10999                           
 11000                           ; BSR set to: 0
 11001  00032C  0E00               	movlw	0
 11002  00032E  0100               	movlb	0	; () banked
 11003  000330  6FAF               	movwf	actuatorTest@i_1637& (0+255),b
 11004  000332                     l6750:
 11005                           
 11006                           ; BSR set to: 0
 11007  000332  0E63               	movlw	99
 11008  000334  0100               	movlb	0	; () banked
 11009  000336  65AF               	cpfsgt	actuatorTest@i_1637& (0+255),b
 11010  000338  D001               	goto	l6754
 11011  00033A  D00C               	goto	l6758
 11012  00033C                     l6754:
 11013                           
 11014                           ; BSR set to: 0
 11015  00033C  0E68               	movlw	104
 11016  00033E  0100               	movlb	0	; () banked
 11017  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11018  000342  0EE4               	movlw	228
 11019  000344                     u7707:
 11020  000344  2EE8               	decfsz	wreg,f,c
 11021  000346  D7FE               	bra	u7707
 11022  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11023  00034A  D7FC               	bra	u7707
 11024  00034C  F000               	nop	
 11025  00034E  0100               	movlb	0	; () banked
 11026  000350  2BAF               	incf	actuatorTest@i_1637& (0+255),f,b
 11027  000352  D7EF               	goto	l6750
 11028  000354                     l6758:
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;Test.c: 266: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11032  000354  0E80               	movlw	128
 11033  000356  EC83  F023         	call	_lcdInst
 11034  00035A  0EC0               	movlw	192
 11035  00035C  EC83  F023         	call	_lcdInst
 11036                           
 11037                           ;Test.c: 267: printf("RIGHT -- 2s     ");
 11038  000360  0E0F               	movlw	low STR_96
 11039  000362  0100               	movlb	0	; () banked
 11040  000364  6F8E               	movwf	printf@f& (0+255),b
 11041  000366  0EFC               	movlw	high STR_96
 11042  000368  0100               	movlb	0	; () banked
 11043  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11044  00036C  ECB8  F008         	call	_printf	;wreg free
 11045                           
 11046                           ;Test.c: 268: updateServoPosition(500, 1);
 11047  000370  0E01               	movlw	1
 11048  000372  0100               	movlb	0	; () banked
 11049  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11050  000376  0EF4               	movlw	244
 11051  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11052  00037A  0E00               	movlw	0
 11053  00037C  0100               	movlb	0	; () banked
 11054  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11055  000380  0E01               	movlw	1
 11056  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11057  000384  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11058                           
 11059                           ;Test.c: 269: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11060  000388  0E00               	movlw	0
 11061  00038A  0100               	movlb	0	; () banked
 11062  00038C  6FB0               	movwf	actuatorTest@i_1639& (0+255),b
 11063  00038E                     l6766:
 11064                           
 11065                           ; BSR set to: 0
 11066  00038E  0E63               	movlw	99
 11067  000390  0100               	movlb	0	; () banked
 11068  000392  65B0               	cpfsgt	actuatorTest@i_1639& (0+255),b
 11069  000394  D001               	goto	l6770
 11070  000396  D00C               	goto	l6774
 11071  000398                     l6770:
 11072                           
 11073                           ; BSR set to: 0
 11074  000398  0E68               	movlw	104
 11075  00039A  0100               	movlb	0	; () banked
 11076  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11077  00039E  0EE4               	movlw	228
 11078  0003A0                     u7717:
 11079  0003A0  2EE8               	decfsz	wreg,f,c
 11080  0003A2  D7FE               	bra	u7717
 11081  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11082  0003A6  D7FC               	bra	u7717
 11083  0003A8  F000               	nop	
 11084  0003AA  0100               	movlb	0	; () banked
 11085  0003AC  2BB0               	incf	actuatorTest@i_1639& (0+255),f,b
 11086  0003AE  D7EF               	goto	l6766
 11087  0003B0                     l6774:
 11088                           
 11089                           ; BSR set to: 0
 11090  0003B0  0E00               	movlw	0
 11091  0003B2  0100               	movlb	0	; () banked
 11092  0003B4  6FB1               	movwf	actuatorTest@i_1640& (0+255),b
 11093  0003B6                     l6776:
 11094                           
 11095                           ; BSR set to: 0
 11096  0003B6  0E63               	movlw	99
 11097  0003B8  0100               	movlb	0	; () banked
 11098  0003BA  65B1               	cpfsgt	actuatorTest@i_1640& (0+255),b
 11099  0003BC  D001               	goto	l6780
 11100  0003BE  D00C               	goto	l6784
 11101  0003C0                     l6780:
 11102                           
 11103                           ; BSR set to: 0
 11104  0003C0  0E68               	movlw	104
 11105  0003C2  0100               	movlb	0	; () banked
 11106  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11107  0003C6  0EE4               	movlw	228
 11108  0003C8                     u7727:
 11109  0003C8  2EE8               	decfsz	wreg,f,c
 11110  0003CA  D7FE               	bra	u7727
 11111  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11112  0003CE  D7FC               	bra	u7727
 11113  0003D0  F000               	nop	
 11114  0003D2  0100               	movlb	0	; () banked
 11115  0003D4  2BB1               	incf	actuatorTest@i_1640& (0+255),f,b
 11116  0003D6  D7EF               	goto	l6776
 11117  0003D8                     l6784:
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;Test.c: 271: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11121  0003D8  0E80               	movlw	128
 11122  0003DA  EC83  F023         	call	_lcdInst
 11123  0003DE  0EC0               	movlw	192
 11124  0003E0  EC83  F023         	call	_lcdInst
 11125                           
 11126                           ;Test.c: 272: printf("LEFT -- 2s      ");
 11127  0003E4  0EED               	movlw	low STR_97
 11128  0003E6  0100               	movlb	0	; () banked
 11129  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11130  0003EA  0EFB               	movlw	high STR_97
 11131  0003EC  0100               	movlb	0	; () banked
 11132  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11133  0003F0  ECB8  F008         	call	_printf	;wreg free
 11134                           
 11135                           ;Test.c: 273: updateServoPosition(2000, 1);
 11136  0003F4  0E07               	movlw	7
 11137  0003F6  0100               	movlb	0	; () banked
 11138  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11139  0003FA  0ED0               	movlw	208
 11140  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11141  0003FE  0E00               	movlw	0
 11142  000400  0100               	movlb	0	; () banked
 11143  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11144  000404  0E01               	movlw	1
 11145  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11146  000408  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11147                           
 11148                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11149  00040C  0E00               	movlw	0
 11150  00040E  0100               	movlb	0	; () banked
 11151  000410  6FB2               	movwf	actuatorTest@i_1642& (0+255),b
 11152  000412                     l6792:
 11153                           
 11154                           ; BSR set to: 0
 11155  000412  0E63               	movlw	99
 11156  000414  0100               	movlb	0	; () banked
 11157  000416  65B2               	cpfsgt	actuatorTest@i_1642& (0+255),b
 11158  000418  D001               	goto	l6796
 11159  00041A  D00C               	goto	l6800
 11160  00041C                     l6796:
 11161                           
 11162                           ; BSR set to: 0
 11163  00041C  0E68               	movlw	104
 11164  00041E  0100               	movlb	0	; () banked
 11165  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11166  000422  0EE4               	movlw	228
 11167  000424                     u7737:
 11168  000424  2EE8               	decfsz	wreg,f,c
 11169  000426  D7FE               	bra	u7737
 11170  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11171  00042A  D7FC               	bra	u7737
 11172  00042C  F000               	nop	
 11173  00042E  0100               	movlb	0	; () banked
 11174  000430  2BB2               	incf	actuatorTest@i_1642& (0+255),f,b
 11175  000432  D7EF               	goto	l6792
 11176  000434                     l6800:
 11177                           
 11178                           ; BSR set to: 0
 11179  000434  0E00               	movlw	0
 11180  000436  0100               	movlb	0	; () banked
 11181  000438  6FB3               	movwf	actuatorTest@i_1643& (0+255),b
 11182  00043A                     l6802:
 11183                           
 11184                           ; BSR set to: 0
 11185  00043A  0E63               	movlw	99
 11186  00043C  0100               	movlb	0	; () banked
 11187  00043E  65B3               	cpfsgt	actuatorTest@i_1643& (0+255),b
 11188  000440  D001               	goto	l6806
 11189  000442  D00C               	goto	l6810
 11190  000444                     l6806:
 11191                           
 11192                           ; BSR set to: 0
 11193  000444  0E68               	movlw	104
 11194  000446  0100               	movlb	0	; () banked
 11195  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11196  00044A  0EE4               	movlw	228
 11197  00044C                     u7747:
 11198  00044C  2EE8               	decfsz	wreg,f,c
 11199  00044E  D7FE               	bra	u7747
 11200  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11201  000452  D7FC               	bra	u7747
 11202  000454  F000               	nop	
 11203  000456  0100               	movlb	0	; () banked
 11204  000458  2BB3               	incf	actuatorTest@i_1643& (0+255),f,b
 11205  00045A  D7EF               	goto	l6802
 11206  00045C                     l6810:
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11210  00045C  0E80               	movlw	128
 11211  00045E  EC83  F023         	call	_lcdInst
 11212  000462  0EC0               	movlw	192
 11213  000464  EC83  F023         	call	_lcdInst
 11214                           
 11215                           ;Test.c: 277: printf("MID-LEFT -- 2s  ");
 11216  000468  0E42               	movlw	low STR_98
 11217  00046A  0100               	movlb	0	; () banked
 11218  00046C  6F8E               	movwf	printf@f& (0+255),b
 11219  00046E  0EFC               	movlw	high STR_98
 11220  000470  0100               	movlb	0	; () banked
 11221  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11222  000474  ECB8  F008         	call	_printf	;wreg free
 11223                           
 11224                           ;Test.c: 278: updateServoPosition(1700, 1);
 11225  000478  0E06               	movlw	6
 11226  00047A  0100               	movlb	0	; () banked
 11227  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11228  00047E  0EA4               	movlw	164
 11229  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11230  000482  0E00               	movlw	0
 11231  000484  0100               	movlb	0	; () banked
 11232  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11233  000488  0E01               	movlw	1
 11234  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11235  00048C  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11236                           
 11237                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11238  000490  0E00               	movlw	0
 11239  000492  0100               	movlb	0	; () banked
 11240  000494  6FB4               	movwf	actuatorTest@i_1645& (0+255),b
 11241  000496                     l6818:
 11242                           
 11243                           ; BSR set to: 0
 11244  000496  0E63               	movlw	99
 11245  000498  0100               	movlb	0	; () banked
 11246  00049A  65B4               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11247  00049C  D001               	goto	l6822
 11248  00049E  D00C               	goto	l6826
 11249  0004A0                     l6822:
 11250                           
 11251                           ; BSR set to: 0
 11252  0004A0  0E68               	movlw	104
 11253  0004A2  0100               	movlb	0	; () banked
 11254  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11255  0004A6  0EE4               	movlw	228
 11256  0004A8                     u7757:
 11257  0004A8  2EE8               	decfsz	wreg,f,c
 11258  0004AA  D7FE               	bra	u7757
 11259  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11260  0004AE  D7FC               	bra	u7757
 11261  0004B0  F000               	nop	
 11262  0004B2  0100               	movlb	0	; () banked
 11263  0004B4  2BB4               	incf	actuatorTest@i_1645& (0+255),f,b
 11264  0004B6  D7EF               	goto	l6818
 11265  0004B8                     l6826:
 11266                           
 11267                           ; BSR set to: 0
 11268  0004B8  0E00               	movlw	0
 11269  0004BA  0100               	movlb	0	; () banked
 11270  0004BC  6FB5               	movwf	actuatorTest@i_1646& (0+255),b
 11271  0004BE                     l6828:
 11272                           
 11273                           ; BSR set to: 0
 11274  0004BE  0E63               	movlw	99
 11275  0004C0  0100               	movlb	0	; () banked
 11276  0004C2  65B5               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11277  0004C4  D001               	goto	l6832
 11278  0004C6  D00C               	goto	l6836
 11279  0004C8                     l6832:
 11280                           
 11281                           ; BSR set to: 0
 11282  0004C8  0E68               	movlw	104
 11283  0004CA  0100               	movlb	0	; () banked
 11284  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11285  0004CE  0EE4               	movlw	228
 11286  0004D0                     u7767:
 11287  0004D0  2EE8               	decfsz	wreg,f,c
 11288  0004D2  D7FE               	bra	u7767
 11289  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11290  0004D6  D7FC               	bra	u7767
 11291  0004D8  F000               	nop	
 11292  0004DA  0100               	movlb	0	; () banked
 11293  0004DC  2BB5               	incf	actuatorTest@i_1646& (0+255),f,b
 11294  0004DE  D7EF               	goto	l6828
 11295  0004E0                     l6836:
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11299  0004E0  0E80               	movlw	128
 11300  0004E2  EC83  F023         	call	_lcdInst
 11301  0004E6  0EC0               	movlw	192
 11302  0004E8  EC83  F023         	call	_lcdInst
 11303                           
 11304                           ;Test.c: 282: printf("MID-RIGHT -- 2s ");
 11305  0004EC  0E53               	movlw	low STR_99
 11306  0004EE  0100               	movlb	0	; () banked
 11307  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11308  0004F2  0EFC               	movlw	high STR_99
 11309  0004F4  0100               	movlb	0	; () banked
 11310  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11311  0004F8  ECB8  F008         	call	_printf	;wreg free
 11312                           
 11313                           ;Test.c: 283: updateServoPosition(750, 1);
 11314  0004FC  0E02               	movlw	2
 11315  0004FE  0100               	movlb	0	; () banked
 11316  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11317  000502  0EEE               	movlw	238
 11318  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11319  000506  0E00               	movlw	0
 11320  000508  0100               	movlb	0	; () banked
 11321  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11322  00050C  0E01               	movlw	1
 11323  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11324  000510  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11325                           
 11326                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11327  000514  0E00               	movlw	0
 11328  000516  0100               	movlb	0	; () banked
 11329  000518  6FB6               	movwf	actuatorTest@i_1648& (0+255),b
 11330  00051A                     l6844:
 11331                           
 11332                           ; BSR set to: 0
 11333  00051A  0E63               	movlw	99
 11334  00051C  0100               	movlb	0	; () banked
 11335  00051E  65B6               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11336  000520  D001               	goto	l6848
 11337  000522  D00C               	goto	l6852
 11338  000524                     l6848:
 11339                           
 11340                           ; BSR set to: 0
 11341  000524  0E68               	movlw	104
 11342  000526  0100               	movlb	0	; () banked
 11343  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11344  00052A  0EE4               	movlw	228
 11345  00052C                     u7777:
 11346  00052C  2EE8               	decfsz	wreg,f,c
 11347  00052E  D7FE               	bra	u7777
 11348  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11349  000532  D7FC               	bra	u7777
 11350  000534  F000               	nop	
 11351  000536  0100               	movlb	0	; () banked
 11352  000538  2BB6               	incf	actuatorTest@i_1648& (0+255),f,b
 11353  00053A  D7EF               	goto	l6844
 11354  00053C                     l6852:
 11355                           
 11356                           ; BSR set to: 0
 11357  00053C  0E00               	movlw	0
 11358  00053E  0100               	movlb	0	; () banked
 11359  000540  6FB7               	movwf	actuatorTest@i_1649& (0+255),b
 11360  000542                     l6854:
 11361                           
 11362                           ; BSR set to: 0
 11363  000542  0E63               	movlw	99
 11364  000544  0100               	movlb	0	; () banked
 11365  000546  65B7               	cpfsgt	actuatorTest@i_1649& (0+255),b
 11366  000548  D001               	goto	l6858
 11367  00054A  D00C               	goto	l6862
 11368  00054C                     l6858:
 11369                           
 11370                           ; BSR set to: 0
 11371  00054C  0E68               	movlw	104
 11372  00054E  0100               	movlb	0	; () banked
 11373  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11374  000552  0EE4               	movlw	228
 11375  000554                     u7787:
 11376  000554  2EE8               	decfsz	wreg,f,c
 11377  000556  D7FE               	bra	u7787
 11378  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11379  00055A  D7FC               	bra	u7787
 11380  00055C  F000               	nop	
 11381  00055E  0100               	movlb	0	; () banked
 11382  000560  2BB7               	incf	actuatorTest@i_1649& (0+255),f,b
 11383  000562  D7EF               	goto	l6854
 11384  000564                     l6862:
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11388  000564  0E80               	movlw	128
 11389  000566  EC83  F023         	call	_lcdInst
 11390  00056A  0EC0               	movlw	192
 11391  00056C  EC83  F023         	call	_lcdInst
 11392                           
 11393                           ;Test.c: 287: printf("MID -- 2s       ");
 11394  000570  0ECB               	movlw	low STR_100
 11395  000572  0100               	movlb	0	; () banked
 11396  000574  6F8E               	movwf	printf@f& (0+255),b
 11397  000576  0EFB               	movlw	high STR_100
 11398  000578  0100               	movlb	0	; () banked
 11399  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11400  00057C  ECB8  F008         	call	_printf	;wreg free
 11401                           
 11402                           ;Test.c: 288: updateServoPosition(1200, 1);
 11403  000580  0E04               	movlw	4
 11404  000582  0100               	movlb	0	; () banked
 11405  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11406  000586  0EB0               	movlw	176
 11407  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11408  00058A  0E00               	movlw	0
 11409  00058C  0100               	movlb	0	; () banked
 11410  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11411  000590  0E01               	movlw	1
 11412  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11413  000594  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11414                           
 11415                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11416  000598  0E00               	movlw	0
 11417  00059A  0100               	movlb	0	; () banked
 11418  00059C  6FB8               	movwf	actuatorTest@i_1651& (0+255),b
 11419  00059E                     l6870:
 11420                           
 11421                           ; BSR set to: 0
 11422  00059E  0E63               	movlw	99
 11423  0005A0  0100               	movlb	0	; () banked
 11424  0005A2  65B8               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11425  0005A4  D001               	goto	l6874
 11426  0005A6  D00C               	goto	l6878
 11427  0005A8                     l6874:
 11428                           
 11429                           ; BSR set to: 0
 11430  0005A8  0E68               	movlw	104
 11431  0005AA  0100               	movlb	0	; () banked
 11432  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11433  0005AE  0EE4               	movlw	228
 11434  0005B0                     u7797:
 11435  0005B0  2EE8               	decfsz	wreg,f,c
 11436  0005B2  D7FE               	bra	u7797
 11437  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11438  0005B6  D7FC               	bra	u7797
 11439  0005B8  F000               	nop	
 11440  0005BA  0100               	movlb	0	; () banked
 11441  0005BC  2BB8               	incf	actuatorTest@i_1651& (0+255),f,b
 11442  0005BE  D7EF               	goto	l6870
 11443  0005C0                     l6878:
 11444                           
 11445                           ; BSR set to: 0
 11446  0005C0  0E00               	movlw	0
 11447  0005C2  0100               	movlb	0	; () banked
 11448  0005C4  6FB9               	movwf	actuatorTest@i_1652& (0+255),b
 11449  0005C6                     l6880:
 11450                           
 11451                           ; BSR set to: 0
 11452  0005C6  0E63               	movlw	99
 11453  0005C8  0100               	movlb	0	; () banked
 11454  0005CA  65B9               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11455  0005CC  D001               	goto	l6884
 11456  0005CE  D00C               	goto	l1121
 11457  0005D0                     l6884:
 11458                           
 11459                           ; BSR set to: 0
 11460  0005D0  0E68               	movlw	104
 11461  0005D2  0100               	movlb	0	; () banked
 11462  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11463  0005D6  0EE4               	movlw	228
 11464  0005D8                     u7807:
 11465  0005D8  2EE8               	decfsz	wreg,f,c
 11466  0005DA  D7FE               	bra	u7807
 11467  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11468  0005DE  D7FC               	bra	u7807
 11469  0005E0  F000               	nop	
 11470  0005E2  0100               	movlb	0	; () banked
 11471  0005E4  2BB9               	incf	actuatorTest@i_1652& (0+255),f,b
 11472  0005E6  D7EF               	goto	l6880
 11473  0005E8                     l1121:
 11474                           
 11475                           ; BSR set to: 0
 11476                           ;Test.c: 290: TMR1ON = 0;
 11477  0005E8  90CD               	bcf	4045,0,c	;volatile
 11478                           
 11479                           ; BSR set to: 0
 11480                           ;Test.c: 297: printf("TST: TILT SERVO");
 11481  0005EA  0E2E               	movlw	low STR_101
 11482  0005EC  0100               	movlb	0	; () banked
 11483  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11484  0005F0  0EFE               	movlw	high STR_101
 11485  0005F2  0100               	movlb	0	; () banked
 11486  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11487  0005F6  ECB8  F008         	call	_printf	;wreg free
 11488                           
 11489                           ;Test.c: 298: lcdInst(0b11000000);;
 11490  0005FA  0EC0               	movlw	192
 11491  0005FC  EC83  F023         	call	_lcdInst
 11492                           
 11493                           ;Test.c: 299: printf("LEVEL -- 2s     ");
 11494  000600  0EFE               	movlw	low STR_102
 11495  000602  0100               	movlb	0	; () banked
 11496  000604  6F8E               	movwf	printf@f& (0+255),b
 11497  000606  0EFB               	movlw	high STR_102
 11498  000608  0100               	movlb	0	; () banked
 11499  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11500  00060C  ECB8  F008         	call	_printf	;wreg free
 11501                           
 11502                           ;Test.c: 300: updateServoPosition(1190, 3);
 11503  000610  0E04               	movlw	4
 11504  000612  0100               	movlb	0	; () banked
 11505  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11506  000616  0EA6               	movlw	166
 11507  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11508  00061A  0E00               	movlw	0
 11509  00061C  0100               	movlb	0	; () banked
 11510  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11511  000620  0E03               	movlw	3
 11512  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11513  000624  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11514                           
 11515                           ;Test.c: 301: TMR3ON = 1;
 11516  000628  80B1               	bsf	4017,0,c	;volatile
 11517                           
 11518                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11519  00062A  0E00               	movlw	0
 11520  00062C  0100               	movlb	0	; () banked
 11521  00062E  6FBA               	movwf	actuatorTest@i_1655& (0+255),b
 11522  000630                     l6898:
 11523                           
 11524                           ; BSR set to: 0
 11525  000630  0E63               	movlw	99
 11526  000632  0100               	movlb	0	; () banked
 11527  000634  65BA               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11528  000636  D001               	goto	l6902
 11529  000638  D00C               	goto	l6906
 11530  00063A                     l6902:
 11531                           
 11532                           ; BSR set to: 0
 11533  00063A  0E68               	movlw	104
 11534  00063C  0100               	movlb	0	; () banked
 11535  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11536  000640  0EE4               	movlw	228
 11537  000642                     u7817:
 11538  000642  2EE8               	decfsz	wreg,f,c
 11539  000644  D7FE               	bra	u7817
 11540  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11541  000648  D7FC               	bra	u7817
 11542  00064A  F000               	nop	
 11543  00064C  0100               	movlb	0	; () banked
 11544  00064E  2BBA               	incf	actuatorTest@i_1655& (0+255),f,b
 11545  000650  D7EF               	goto	l6898
 11546  000652                     l6906:
 11547                           
 11548                           ; BSR set to: 0
 11549  000652  0E00               	movlw	0
 11550  000654  0100               	movlb	0	; () banked
 11551  000656  6FBB               	movwf	actuatorTest@i_1656& (0+255),b
 11552  000658                     l6908:
 11553                           
 11554                           ; BSR set to: 0
 11555  000658  0E63               	movlw	99
 11556  00065A  0100               	movlb	0	; () banked
 11557  00065C  65BB               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11558  00065E  D001               	goto	l6912
 11559  000660  D00C               	goto	l6916
 11560  000662                     l6912:
 11561                           
 11562                           ; BSR set to: 0
 11563  000662  0E68               	movlw	104
 11564  000664  0100               	movlb	0	; () banked
 11565  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11566  000668  0EE4               	movlw	228
 11567  00066A                     u7827:
 11568  00066A  2EE8               	decfsz	wreg,f,c
 11569  00066C  D7FE               	bra	u7827
 11570  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11571  000670  D7FC               	bra	u7827
 11572  000672  F000               	nop	
 11573  000674  0100               	movlb	0	; () banked
 11574  000676  2BBB               	incf	actuatorTest@i_1656& (0+255),f,b
 11575  000678  D7EF               	goto	l6908
 11576  00067A                     l6916:
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;Test.c: 304: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11580  00067A  0E80               	movlw	128
 11581  00067C  EC83  F023         	call	_lcdInst
 11582  000680  0EC0               	movlw	192
 11583  000682  EC83  F023         	call	_lcdInst
 11584                           
 11585                           ;Test.c: 305: printf("DROP -- 2s      ");
 11586  000686  0EDC               	movlw	low STR_103
 11587  000688  0100               	movlb	0	; () banked
 11588  00068A  6F8E               	movwf	printf@f& (0+255),b
 11589  00068C  0EFB               	movlw	high STR_103
 11590  00068E  0100               	movlb	0	; () banked
 11591  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11592  000692  ECB8  F008         	call	_printf	;wreg free
 11593                           
 11594                           ;Test.c: 306: updateServoPosition(1350, 3);
 11595  000696  0E05               	movlw	5
 11596  000698  0100               	movlb	0	; () banked
 11597  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11598  00069C  0E46               	movlw	70
 11599  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11600  0006A0  0E00               	movlw	0
 11601  0006A2  0100               	movlb	0	; () banked
 11602  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11603  0006A6  0E03               	movlw	3
 11604  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11605  0006AA  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11606                           
 11607                           ;Test.c: 307: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11608  0006AE  0E00               	movlw	0
 11609  0006B0  0100               	movlb	0	; () banked
 11610  0006B2  6FBC               	movwf	actuatorTest@i_1658& (0+255),b
 11611  0006B4                     l6924:
 11612                           
 11613                           ; BSR set to: 0
 11614  0006B4  0E63               	movlw	99
 11615  0006B6  0100               	movlb	0	; () banked
 11616  0006B8  65BC               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11617  0006BA  D001               	goto	l6928
 11618  0006BC  D00C               	goto	l6932
 11619  0006BE                     l6928:
 11620                           
 11621                           ; BSR set to: 0
 11622  0006BE  0E68               	movlw	104
 11623  0006C0  0100               	movlb	0	; () banked
 11624  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11625  0006C4  0EE4               	movlw	228
 11626  0006C6                     u7837:
 11627  0006C6  2EE8               	decfsz	wreg,f,c
 11628  0006C8  D7FE               	bra	u7837
 11629  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11630  0006CC  D7FC               	bra	u7837
 11631  0006CE  F000               	nop	
 11632  0006D0  0100               	movlb	0	; () banked
 11633  0006D2  2BBC               	incf	actuatorTest@i_1658& (0+255),f,b
 11634  0006D4  D7EF               	goto	l6924
 11635  0006D6                     l6932:
 11636                           
 11637                           ; BSR set to: 0
 11638  0006D6  0E00               	movlw	0
 11639  0006D8  0100               	movlb	0	; () banked
 11640  0006DA  6FBD               	movwf	actuatorTest@i_1659& (0+255),b
 11641  0006DC                     l6934:
 11642                           
 11643                           ; BSR set to: 0
 11644  0006DC  0E63               	movlw	99
 11645  0006DE  0100               	movlb	0	; () banked
 11646  0006E0  65BD               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11647  0006E2  D001               	goto	l6938
 11648  0006E4  D00C               	goto	l6942
 11649  0006E6                     l6938:
 11650                           
 11651                           ; BSR set to: 0
 11652  0006E6  0E68               	movlw	104
 11653  0006E8  0100               	movlb	0	; () banked
 11654  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11655  0006EC  0EE4               	movlw	228
 11656  0006EE                     u7847:
 11657  0006EE  2EE8               	decfsz	wreg,f,c
 11658  0006F0  D7FE               	bra	u7847
 11659  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11660  0006F4  D7FC               	bra	u7847
 11661  0006F6  F000               	nop	
 11662  0006F8  0100               	movlb	0	; () banked
 11663  0006FA  2BBD               	incf	actuatorTest@i_1659& (0+255),f,b
 11664  0006FC  D7EF               	goto	l6934
 11665  0006FE                     l6942:
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;Test.c: 309: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11669  0006FE  0E80               	movlw	128
 11670  000700  EC83  F023         	call	_lcdInst
 11671  000704  0EC0               	movlw	192
 11672  000706  EC83  F023         	call	_lcdInst
 11673                           
 11674                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 11675  00070A  0EFE               	movlw	low STR_102
 11676  00070C  0100               	movlb	0	; () banked
 11677  00070E  6F8E               	movwf	printf@f& (0+255),b
 11678  000710  0EFB               	movlw	high STR_102
 11679  000712  0100               	movlb	0	; () banked
 11680  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11681  000716  ECB8  F008         	call	_printf	;wreg free
 11682                           
 11683                           ;Test.c: 311: updateServoPosition(1190, 3);
 11684  00071A  0E04               	movlw	4
 11685  00071C  0100               	movlb	0	; () banked
 11686  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11687  000720  0EA6               	movlw	166
 11688  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11689  000724  0E00               	movlw	0
 11690  000726  0100               	movlb	0	; () banked
 11691  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11692  00072A  0E03               	movlw	3
 11693  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11694  00072E  EC0A  F01E         	call	_updateServoPosition	;wreg free
 11695                           
 11696                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11697  000732  0E00               	movlw	0
 11698  000734  0100               	movlb	0	; () banked
 11699  000736  6FBE               	movwf	actuatorTest@i_1661& (0+255),b
 11700  000738                     l6950:
 11701                           
 11702                           ; BSR set to: 0
 11703  000738  0E63               	movlw	99
 11704  00073A  0100               	movlb	0	; () banked
 11705  00073C  65BE               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11706  00073E  D001               	goto	l6954
 11707  000740  D00C               	goto	l6958
 11708  000742                     l6954:
 11709                           
 11710                           ; BSR set to: 0
 11711  000742  0E68               	movlw	104
 11712  000744  0100               	movlb	0	; () banked
 11713  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11714  000748  0EE4               	movlw	228
 11715  00074A                     u7857:
 11716  00074A  2EE8               	decfsz	wreg,f,c
 11717  00074C  D7FE               	bra	u7857
 11718  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11719  000750  D7FC               	bra	u7857
 11720  000752  F000               	nop	
 11721  000754  0100               	movlb	0	; () banked
 11722  000756  2BBE               	incf	actuatorTest@i_1661& (0+255),f,b
 11723  000758  D7EF               	goto	l6950
 11724  00075A                     l6958:
 11725                           
 11726                           ; BSR set to: 0
 11727  00075A  0E00               	movlw	0
 11728  00075C  0100               	movlb	0	; () banked
 11729  00075E  6FBF               	movwf	actuatorTest@i_1662& (0+255),b
 11730  000760                     l6960:
 11731                           
 11732                           ; BSR set to: 0
 11733  000760  0E63               	movlw	99
 11734  000762  0100               	movlb	0	; () banked
 11735  000764  65BF               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11736  000766  D001               	goto	l6964
 11737  000768  D00C               	goto	l1133
 11738  00076A                     l6964:
 11739                           
 11740                           ; BSR set to: 0
 11741  00076A  0E68               	movlw	104
 11742  00076C  0100               	movlb	0	; () banked
 11743  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11744  000770  0EE4               	movlw	228
 11745  000772                     u7867:
 11746  000772  2EE8               	decfsz	wreg,f,c
 11747  000774  D7FE               	bra	u7867
 11748  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11749  000778  D7FC               	bra	u7867
 11750  00077A  F000               	nop	
 11751  00077C  0100               	movlb	0	; () banked
 11752  00077E  2BBF               	incf	actuatorTest@i_1662& (0+255),f,b
 11753  000780  D7EF               	goto	l6960
 11754  000782                     l1133:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;Test.c: 313: TMR3ON = 0;
 11758  000782  90B1               	bcf	4017,0,c	;volatile
 11759                           
 11760                           ;Test.c: 314: (INTCONbits.GIE = 0);
 11761  000784  9EF2               	bcf	intcon,7,c	;volatile
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;Test.c: 319: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11765  000786  0E01               	movlw	1
 11766  000788  EC83  F023         	call	_lcdInst
 11767  00078C  0E68               	movlw	104
 11768  00078E  0100               	movlb	0	; () banked
 11769  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11770  000792  0EE4               	movlw	228
 11771  000794                     u7877:
 11772  000794  2EE8               	decfsz	wreg,f,c
 11773  000796  D7FE               	bra	u7877
 11774  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11775  00079A  D7FC               	bra	u7877
 11776  00079C  F000               	nop	
 11777  00079E  0E80               	movlw	128
 11778  0007A0  EC83  F023         	call	_lcdInst
 11779                           
 11780                           ;Test.c: 320: printf("TST: CAM SERVO");
 11781  0007A4  0E8A               	movlw	low STR_105
 11782  0007A6  0100               	movlb	0	; () banked
 11783  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11784  0007AA  0EFE               	movlw	high STR_105
 11785  0007AC  0100               	movlb	0	; () banked
 11786  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11787  0007B0  ECB8  F008         	call	_printf	;wreg free
 11788                           
 11789                           ;Test.c: 321: lcdInst(0b11000000);;
 11790  0007B4  0EC0               	movlw	192
 11791  0007B6  EC83  F023         	call	_lcdInst
 11792                           
 11793                           ;Test.c: 322: printf("CAM UP  |RC0=1");
 11794  0007BA  0E6C               	movlw	low STR_106
 11795  0007BC  0100               	movlb	0	; () banked
 11796  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11797  0007C0  0EFE               	movlw	high STR_106
 11798  0007C2  0100               	movlb	0	; () banked
 11799  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11800  0007C6  ECB8  F008         	call	_printf	;wreg free
 11801                           
 11802                           ;Test.c: 323: LATCbits.LATC0 = 1;
 11803  0007CA  808B               	bsf	3979,0,c	;volatile
 11804                           
 11805                           ;Test.c: 324: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11806  0007CC  0E00               	movlw	0
 11807  0007CE  0100               	movlb	0	; () banked
 11808  0007D0  6FC0               	movwf	actuatorTest@i_1665& (0+255),b
 11809  0007D2                     l6984:
 11810                           
 11811                           ; BSR set to: 0
 11812  0007D2  0E63               	movlw	99
 11813  0007D4  0100               	movlb	0	; () banked
 11814  0007D6  65C0               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11815  0007D8  D001               	goto	l6988
 11816  0007DA  D00C               	goto	l6992
 11817  0007DC                     l6988:
 11818                           
 11819                           ; BSR set to: 0
 11820  0007DC  0E68               	movlw	104
 11821  0007DE  0100               	movlb	0	; () banked
 11822  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11823  0007E2  0EE4               	movlw	228
 11824  0007E4                     u7887:
 11825  0007E4  2EE8               	decfsz	wreg,f,c
 11826  0007E6  D7FE               	bra	u7887
 11827  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11828  0007EA  D7FC               	bra	u7887
 11829  0007EC  F000               	nop	
 11830  0007EE  0100               	movlb	0	; () banked
 11831  0007F0  2BC0               	incf	actuatorTest@i_1665& (0+255),f,b
 11832  0007F2  D7EF               	goto	l6984
 11833  0007F4                     l6992:
 11834                           
 11835                           ; BSR set to: 0
 11836  0007F4  0E00               	movlw	0
 11837  0007F6  0100               	movlb	0	; () banked
 11838  0007F8  6FC1               	movwf	actuatorTest@i_1666& (0+255),b
 11839  0007FA                     l6994:
 11840                           
 11841                           ; BSR set to: 0
 11842  0007FA  0E63               	movlw	99
 11843  0007FC  0100               	movlb	0	; () banked
 11844  0007FE  65C1               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11845  000800  D001               	goto	l6998
 11846  000802  D00C               	goto	l7002
 11847  000804                     l6998:
 11848                           
 11849                           ; BSR set to: 0
 11850  000804  0E68               	movlw	104
 11851  000806  0100               	movlb	0	; () banked
 11852  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11853  00080A  0EE4               	movlw	228
 11854  00080C                     u7897:
 11855  00080C  2EE8               	decfsz	wreg,f,c
 11856  00080E  D7FE               	bra	u7897
 11857  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11858  000812  D7FC               	bra	u7897
 11859  000814  F000               	nop	
 11860  000816  0100               	movlb	0	; () banked
 11861  000818  2BC1               	incf	actuatorTest@i_1666& (0+255),f,b
 11862  00081A  D7EF               	goto	l6994
 11863  00081C                     l7002:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;Test.c: 325: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11867  00081C  0E80               	movlw	128
 11868  00081E  EC83  F023         	call	_lcdInst
 11869  000822  0EC0               	movlw	192
 11870  000824  EC83  F023         	call	_lcdInst
 11871                           
 11872                           ;Test.c: 326: printf("CAM DWN |RC0=0");
 11873  000828  0E5D               	movlw	low STR_107
 11874  00082A  0100               	movlb	0	; () banked
 11875  00082C  6F8E               	movwf	printf@f& (0+255),b
 11876  00082E  0EFE               	movlw	high STR_107
 11877  000830  0100               	movlb	0	; () banked
 11878  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11879  000834  ECB8  F008         	call	_printf	;wreg free
 11880                           
 11881                           ;Test.c: 329: for(i=0;i<10000;i++)
 11882  000838  0E00               	movlw	0
 11883  00083A  0100               	movlb	0	; () banked
 11884  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11885  00083E  0E00               	movlw	0
 11886  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11887  000842                     l7008:
 11888                           
 11889                           ; BSR set to: 0
 11890  000842  0100               	movlb	0	; () banked
 11891  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11892  000846  D008               	goto	l1138
 11893  000848  0E10               	movlw	16
 11894  00084A  0100               	movlb	0	; () banked
 11895  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11896  00084E  0E27               	movlw	39
 11897  000850  0100               	movlb	0	; () banked
 11898  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11899  000854  B0D8               	btfsc	status,0,c
 11900  000856  D00D               	goto	l7018
 11901  000858                     l1138:
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;Test.c: 330: {
 11905                           ;Test.c: 331: LATCbits.LATC0 = 1;
 11906  000858  808B               	bsf	3979,0,c	;volatile
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;Test.c: 332: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11910  00085A  0E1A               	movlw	26
 11911  00085C                     u7907:
 11912  00085C  2EE8               	decfsz	wreg,f,c
 11913  00085E  D7FE               	bra	u7907
 11914  000860  D000               	nop2	
 11915                           
 11916                           ;Test.c: 333: LATCbits.LATC0 = 0;
 11917  000862  908B               	bcf	3979,0,c	;volatile
 11918                           
 11919                           ;Test.c: 334: _delay((unsigned long)((90)*(32000000/4000000.0)));
 11920  000864  0EF0               	movlw	240
 11921  000866                     u7917:
 11922  000866  2EE8               	decfsz	wreg,f,c
 11923  000868  D7FE               	bra	u7917
 11924  00086A  0100               	movlb	0	; () banked
 11925  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11926  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11927  000870  D7E8               	goto	l7008
 11928  000872                     l7018:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;Test.c: 335: }
 11932                           ;Test.c: 337: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11933  000872  0E00               	movlw	0
 11934  000874  0100               	movlb	0	; () banked
 11935  000876  6FC2               	movwf	actuatorTest@i_1668& (0+255),b
 11936  000878                     l7020:
 11937                           
 11938                           ; BSR set to: 0
 11939  000878  0E63               	movlw	99
 11940  00087A  0100               	movlb	0	; () banked
 11941  00087C  65C2               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11942  00087E  D001               	goto	l7024
 11943  000880  D00C               	goto	l7028
 11944  000882                     l7024:
 11945                           
 11946                           ; BSR set to: 0
 11947  000882  0E68               	movlw	104
 11948  000884  0100               	movlb	0	; () banked
 11949  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 11950  000888  0EE4               	movlw	228
 11951  00088A                     u7927:
 11952  00088A  2EE8               	decfsz	wreg,f,c
 11953  00088C  D7FE               	bra	u7927
 11954  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11955  000890  D7FC               	bra	u7927
 11956  000892  F000               	nop	
 11957  000894  0100               	movlb	0	; () banked
 11958  000896  2BC2               	incf	actuatorTest@i_1668& (0+255),f,b
 11959  000898  D7EF               	goto	l7020
 11960  00089A                     l7028:
 11961                           
 11962                           ; BSR set to: 0
 11963  00089A  0E00               	movlw	0
 11964  00089C  0100               	movlb	0	; () banked
 11965  00089E  6FC3               	movwf	actuatorTest@i_1669& (0+255),b
 11966  0008A0                     l7030:
 11967                           
 11968                           ; BSR set to: 0
 11969  0008A0  0E63               	movlw	99
 11970  0008A2  0100               	movlb	0	; () banked
 11971  0008A4  65C3               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11972  0008A6  D001               	goto	l7034
 11973  0008A8  D00C               	goto	l7038
 11974  0008AA                     l7034:
 11975                           
 11976                           ; BSR set to: 0
 11977  0008AA  0E68               	movlw	104
 11978  0008AC  0100               	movlb	0	; () banked
 11979  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11980  0008B0  0EE4               	movlw	228
 11981  0008B2                     u7937:
 11982  0008B2  2EE8               	decfsz	wreg,f,c
 11983  0008B4  D7FE               	bra	u7937
 11984  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11985  0008B8  D7FC               	bra	u7937
 11986  0008BA  F000               	nop	
 11987  0008BC  0100               	movlb	0	; () banked
 11988  0008BE  2BC3               	incf	actuatorTest@i_1669& (0+255),f,b
 11989  0008C0  D7EF               	goto	l7030
 11990  0008C2                     l7038:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;Test.c: 338: machine_state = Testing_state;
 11994  0008C2  0E03               	movlw	3
 11995  0008C4  0100               	movlb	0	; () banked
 11996  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 11997                           
 11998                           ; BSR set to: 0
 11999  0008C8  0012               	return		;funcret
 12000  0008CA                     __end_of_actuatorTest:
 12001                           	opt stack 0
 12002                           tblptru	equ	0xFF8
 12003                           tblptrh	equ	0xFF7
 12004                           tblptrl	equ	0xFF6
 12005                           tablat	equ	0xFF5
 12006                           prodh	equ	0xFF4
 12007                           prodl	equ	0xFF3
 12008                           intcon	equ	0xFF2
 12009                           intcon2	equ	0xFF1
 12010                           intcon3	equ	0xFF0
 12011                           postinc0	equ	0xFEE
 12012                           wreg	equ	0xFE8
 12013                           postdec1	equ	0xFE5
 12014                           fsr1l	equ	0xFE1
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           fsr2h	equ	0xFDA
 12019                           fsr2l	equ	0xFD9
 12020                           status	equ	0xFD8
 12021                           
 12022 ;; *************** function _ToggleTestA5 *****************
 12023 ;; Defined at:
 12024 ;;		line 482 in file "Test.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;		None
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;  on              2   44[BANK0 ] int 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12039 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;Total ram usage:        3 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:   10
 12045 ;; This function calls:
 12046 ;;		_lcdInst
 12047 ;;		_printf
 12048 ;; This function is called by:
 12049 ;;		_Test
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text41
 12054  003A0A                     __ptext41:
 12055                           	opt stack 0
 12056  003A0A                     _ToggleTestA5:
 12057                           	opt stack 19
 12058                           
 12059                           ;Test.c: 483: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;incstack = 0
 12063  003A0A  0E01               	movlw	1
 12064  003A0C  EC83  F023         	call	_lcdInst
 12065  003A10  0E68               	movlw	104
 12066  003A12  0100               	movlb	0	; () banked
 12067  003A14  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12068  003A16  0EE4               	movlw	228
 12069  003A18                     u7947:
 12070  003A18  2EE8               	decfsz	wreg,f,c
 12071  003A1A  D7FE               	bra	u7947
 12072  003A1C  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12073  003A1E  D7FC               	bra	u7947
 12074  003A20  F000               	nop	
 12075  003A22  0E80               	movlw	128
 12076  003A24  EC83  F023         	call	_lcdInst
 12077                           
 12078                           ;Test.c: 484: printf("D WILL RETURN   ");
 12079  003A28  0E31               	movlw	low STR_113
 12080  003A2A  0100               	movlb	0	; () banked
 12081  003A2C  6F8E               	movwf	printf@f& (0+255),b
 12082  003A2E  0EFC               	movlw	high STR_113
 12083  003A30  0100               	movlb	0	; () banked
 12084  003A32  6F8F               	movwf	(printf@f+1)& (0+255),b
 12085  003A34  ECB8  F008         	call	_printf	;wreg free
 12086                           
 12087                           ;Test.c: 485: lcdInst(0b11000000);;
 12088  003A38  0EC0               	movlw	192
 12089  003A3A  EC83  F023         	call	_lcdInst
 12090                           
 12091                           ;Test.c: 486: printf("ELSE TOGGLES RA5");
 12092  003A3E  0E64               	movlw	low STR_114
 12093  003A40  0100               	movlb	0	; () banked
 12094  003A42  6F8E               	movwf	printf@f& (0+255),b
 12095  003A44  0EFC               	movlw	high STR_114
 12096  003A46  0100               	movlb	0	; () banked
 12097  003A48  6F8F               	movwf	(printf@f+1)& (0+255),b
 12098  003A4A  ECB8  F008         	call	_printf	;wreg free
 12099                           
 12100                           ;Test.c: 487: int on = 0;
 12101  003A4E  0E00               	movlw	0
 12102  003A50  0100               	movlb	0	; () banked
 12103  003A52  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12104  003A54  0E00               	movlw	0
 12105  003A56  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12106  003A58                     l1203:
 12107  003A58  A281               	btfss	3969,1,c	;volatile
 12108  003A5A  D7FE               	goto	l1203
 12109                           
 12110                           ;Test.c: 492: }
 12111                           ;Test.c: 493: if(PORTB >> 4 == 0b1111){
 12112  003A5C  3881               	swapf	3969,w,c	;volatile
 12113  003A5E  0B0F               	andlw	15
 12114  003A60  0A0F               	xorlw	15
 12115  003A62  B4D8               	btfsc	status,2,c
 12116  003A64  0012               	return	
 12117                           
 12118                           ;Test.c: 496: else{
 12119                           ;Test.c: 497: if(on == 0){
 12120                           
 12121                           ;Test.c: 495: }
 12122                           
 12123                           ;Test.c: 494: break;
 12124  003A66  0100               	movlb	0	; () banked
 12125  003A68  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12126  003A6A  0100               	movlb	0	; () banked
 12127  003A6C  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12128  003A6E  A4D8               	btfss	status,2,c
 12129  003A70  D007               	goto	l7096
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;Test.c: 498: on = 1;
 12133  003A72  0E00               	movlw	0
 12134  003A74  0100               	movlb	0	; () banked
 12135  003A76  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12136  003A78  0E01               	movlw	1
 12137  003A7A  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;Test.c: 499: LATAbits.LATA5 = 1;
 12141  003A7C  8A89               	bsf	3977,5,c	;volatile
 12142                           
 12143                           ;Test.c: 500: }
 12144  003A7E  D006               	goto	l1211
 12145  003A80                     l7096:
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;Test.c: 501: else{
 12149                           ;Test.c: 502: on = 0;
 12150  003A80  0E00               	movlw	0
 12151  003A82  0100               	movlb	0	; () banked
 12152  003A84  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12153  003A86  0E00               	movlw	0
 12154  003A88  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;Test.c: 503: LATAbits.LATA5 = 0;
 12158  003A8A  9A89               	bcf	3977,5,c	;volatile
 12159  003A8C                     l1211:
 12160  003A8C  A281               	btfss	3969,1,c	;volatile
 12161  003A8E  D7E4               	goto	l1203
 12162  003A90  D7FD               	goto	l1211
 12163  003A92                     __end_of_ToggleTestA5:
 12164                           	opt stack 0
 12165                           tblptru	equ	0xFF8
 12166                           tblptrh	equ	0xFF7
 12167                           tblptrl	equ	0xFF6
 12168                           tablat	equ	0xFF5
 12169                           prodh	equ	0xFF4
 12170                           prodl	equ	0xFF3
 12171                           intcon	equ	0xFF2
 12172                           intcon2	equ	0xFF1
 12173                           intcon3	equ	0xFF0
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           postdec1	equ	0xFE5
 12177                           fsr1l	equ	0xFE1
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _SolenoidTestA5 *****************
 12186 ;; Defined at:
 12187 ;;		line 458 in file "Test.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;  i               1   47[BANK0 ] unsigned char 
 12192 ;;  i               1   48[BANK0 ] unsigned char 
 12193 ;;  i               2   45[BANK0 ] int 
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  1    wreg      void 
 12196 ;; Registers used:
 12197 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12204 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12206 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12207 ;;Total ram usage:        6 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:   10
 12210 ;; This function calls:
 12211 ;;		_lcdInst
 12212 ;;		_printf
 12213 ;; This function is called by:
 12214 ;;		_Test
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text42
 12219  0032D4                     __ptext42:
 12220                           	opt stack 0
 12221  0032D4                     _SolenoidTestA5:
 12222                           	opt stack 19
 12223  0032D4                     
 12224                           ;Test.c: 460: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12225  0032D4  0E01               	movlw	1
 12226  0032D6  EC83  F023         	call	_lcdInst
 12227  0032DA  0E68               	movlw	104
 12228  0032DC  0100               	movlb	0	; () banked
 12229  0032DE  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12230  0032E0  0EE4               	movlw	228
 12231  0032E2                     u7957:
 12232  0032E2  2EE8               	decfsz	wreg,f,c
 12233  0032E4  D7FE               	bra	u7957
 12234  0032E6  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12235  0032E8  D7FC               	bra	u7957
 12236  0032EA  F000               	nop	
 12237  0032EC  0E80               	movlw	128
 12238  0032EE  EC83  F023         	call	_lcdInst
 12239                           
 12240                           ;Test.c: 461: printf("SOLENOID TST");
 12241  0032F2  0E36               	movlw	low STR_111
 12242  0032F4  0100               	movlb	0	; () banked
 12243  0032F6  6F8E               	movwf	printf@f& (0+255),b
 12244  0032F8  0EFF               	movlw	high STR_111
 12245  0032FA  0100               	movlb	0	; () banked
 12246  0032FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12247  0032FE  ECB8  F008         	call	_printf	;wreg free
 12248                           
 12249                           ;Test.c: 462: lcdInst(0b11000000);;
 12250  003302  0EC0               	movlw	192
 12251  003304  EC83  F023         	call	_lcdInst
 12252  003308                     l1188:
 12253  003308  A281               	btfss	3969,1,c	;volatile
 12254  00330A  D7FE               	goto	l1188
 12255                           
 12256                           ;Test.c: 467: }
 12257                           ;Test.c: 469: for(int i = 0; i < 3; i++){
 12258  00330C  0E00               	movlw	0
 12259  00330E  0100               	movlb	0	; () banked
 12260  003310  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12261  003312  0E00               	movlw	0
 12262  003314  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12263  003316                     l7112:
 12264                           
 12265                           ; BSR set to: 0
 12266  003316  0100               	movlb	0	; () banked
 12267  003318  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12268  00331A  D008               	goto	l7116
 12269  00331C  0100               	movlb	0	; () banked
 12270  00331E  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12271  003320  E12D               	bnz	l7132
 12272  003322  0E03               	movlw	3
 12273  003324  0100               	movlb	0	; () banked
 12274  003326  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12275  003328  B0D8               	btfsc	status,0,c
 12276  00332A  D028               	goto	l7132
 12277  00332C                     l7116:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;Test.c: 470: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12281  00332C  0E00               	movlw	0
 12282  00332E  0100               	movlb	0	; () banked
 12283  003330  6FAF               	movwf	SolenoidTestA5@i_1682& (0+255),b
 12284  003332                     l7118:
 12285                           
 12286                           ; BSR set to: 0
 12287  003332  0E63               	movlw	99
 12288  003334  0100               	movlb	0	; () banked
 12289  003336  65AF               	cpfsgt	SolenoidTestA5@i_1682& (0+255),b
 12290  003338  D001               	goto	l7122
 12291  00333A  D00C               	goto	l1194
 12292  00333C                     l7122:
 12293                           
 12294                           ; BSR set to: 0
 12295  00333C  0E68               	movlw	104
 12296  00333E  0100               	movlb	0	; () banked
 12297  003340  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12298  003342  0EE4               	movlw	228
 12299  003344                     u7967:
 12300  003344  2EE8               	decfsz	wreg,f,c
 12301  003346  D7FE               	bra	u7967
 12302  003348  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12303  00334A  D7FC               	bra	u7967
 12304  00334C  F000               	nop	
 12305  00334E  0100               	movlb	0	; () banked
 12306  003350  2BAF               	incf	SolenoidTestA5@i_1682& (0+255),f,b
 12307  003352  D7EF               	goto	l7118
 12308  003354                     l1194:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;Test.c: 471: LATAbits.LATA5 = 1;
 12312  003354  8A89               	bsf	3977,5,c	;volatile
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;Test.c: 472: _delay((unsigned long)((150)*(32000000/4000.0)));
 12316  003356  0E07               	movlw	7
 12317  003358  0100               	movlb	0	; () banked
 12318  00335A  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12319  00335C  0E17               	movlw	23
 12320  00335E  0100               	movlb	0	; () banked
 12321  003360  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12322  003362  0E6A               	movlw	106
 12323  003364                     u7977:
 12324  003364  2EE8               	decfsz	wreg,f,c
 12325  003366  D7FE               	bra	u7977
 12326  003368  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12327  00336A  D7FC               	bra	u7977
 12328  00336C  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12329  00336E  D7FA               	bra	u7977
 12330  003370  F000               	nop	
 12331                           
 12332                           ;Test.c: 473: LATAbits.LATA5 = 0;
 12333  003372  9A89               	bcf	3977,5,c	;volatile
 12334  003374  0100               	movlb	0	; () banked
 12335  003376  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12336  003378  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12337  00337A  D7CD               	goto	l7112
 12338  00337C                     l7132:
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;Test.c: 474: }
 12342                           ;Test.c: 476: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12343  00337C  0E01               	movlw	1
 12344  00337E  EC83  F023         	call	_lcdInst
 12345  003382  0E68               	movlw	104
 12346  003384  0100               	movlb	0	; () banked
 12347  003386  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12348  003388  0EE4               	movlw	228
 12349  00338A                     u7987:
 12350  00338A  2EE8               	decfsz	wreg,f,c
 12351  00338C  D7FE               	bra	u7987
 12352  00338E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12353  003390  D7FC               	bra	u7987
 12354  003392  F000               	nop	
 12355  003394  0E80               	movlw	128
 12356  003396  EC83  F023         	call	_lcdInst
 12357                           
 12358                           ;Test.c: 477: printf("PUSH DONE");
 12359  00339A  0E87               	movlw	low STR_112
 12360  00339C  0100               	movlb	0	; () banked
 12361  00339E  6F8E               	movwf	printf@f& (0+255),b
 12362  0033A0  0EFF               	movlw	high STR_112
 12363  0033A2  0100               	movlb	0	; () banked
 12364  0033A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12365  0033A6  ECB8  F008         	call	_printf	;wreg free
 12366                           
 12367                           ;Test.c: 478: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12368  0033AA  0E00               	movlw	0
 12369  0033AC  0100               	movlb	0	; () banked
 12370  0033AE  6FB0               	movwf	SolenoidTestA5@i_1684& (0+255),b
 12371  0033B0                     l7142:
 12372                           
 12373                           ; BSR set to: 0
 12374  0033B0  0E63               	movlw	99
 12375  0033B2  0100               	movlb	0	; () banked
 12376  0033B4  65B0               	cpfsgt	SolenoidTestA5@i_1684& (0+255),b
 12377  0033B6  D001               	goto	l7146
 12378  0033B8  D78D               	goto	l7100
 12379  0033BA                     l7146:
 12380                           
 12381                           ; BSR set to: 0
 12382  0033BA  0E68               	movlw	104
 12383  0033BC  0100               	movlb	0	; () banked
 12384  0033BE  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12385  0033C0  0EE4               	movlw	228
 12386  0033C2                     u7997:
 12387  0033C2  2EE8               	decfsz	wreg,f,c
 12388  0033C4  D7FE               	bra	u7997
 12389  0033C6  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12390  0033C8  D7FC               	bra	u7997
 12391  0033CA  F000               	nop	
 12392  0033CC  0100               	movlb	0	; () banked
 12393  0033CE  2BB0               	incf	SolenoidTestA5@i_1684& (0+255),f,b
 12394  0033D0  D7EF               	goto	l7142
 12395  0033D2                     __end_of_SolenoidTestA5:
 12396                           	opt stack 0
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           intcon2	equ	0xFF1
 12405                           intcon3	equ	0xFF0
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           postdec1	equ	0xFE5
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function _PortTests *****************
 12418 ;; Defined at:
 12419 ;;		line 390 in file "Test.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:        2 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    7
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_Test
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           	psect	text43
 12448  003B18                     __ptext43:
 12449                           	opt stack 0
 12450  003B18                     _PortTests:
 12451                           	opt stack 22
 12452  003B18                     l1151:
 12453  003B18  A281               	btfss	3969,1,c	;volatile
 12454  003B1A  D7FE               	goto	l1151
 12455                           
 12456                           ;Test.c: 394: var = PORTB >> 4;
 12457  003B1C  CF81 F080          	movff	3969,??_PortTests	;volatile
 12458  003B20  0100               	movlb	0	; () banked
 12459  003B22  3B80               	swapf	??_PortTests& (0+255),f,b
 12460  003B24  0E0F               	movlw	15
 12461  003B26  1780               	andwf	??_PortTests& (0+255),f,b
 12462  003B28  0100               	movlb	0	; () banked
 12463  003B2A  5180               	movf	??_PortTests& (0+255),w,b
 12464  003B2C  0100               	movlb	0	; () banked
 12465  003B2E  6FFA               	movwf	_var& (0+255),b
 12466  003B30  6BFB               	clrf	(_var+1)& (0+255),b
 12467                           
 12468                           ;Test.c: 395: switch(var){
 12469  003B32  D00C               	goto	l7154
 12470  003B34                     l1155:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;Test.c: 397: LATEbits.LATE0 = 1;
 12474  003B34  808D               	bsf	3981,0,c	;volatile
 12475                           
 12476                           ;Test.c: 398: break;
 12477  003B36  D027               	goto	l1163
 12478  003B38                     l1157:
 12479                           
 12480                           ; BSR set to: 0
 12481                           ;Test.c: 400: LATEbits.LATE1 = 1;
 12482  003B38  828D               	bsf	3981,1,c	;volatile
 12483                           
 12484                           ;Test.c: 401: break;
 12485  003B3A  D025               	goto	l1163
 12486  003B3C                     l1158:
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;Test.c: 403: LATDbits.LATD0 = 1;
 12490  003B3C  808C               	bsf	3980,0,c	;volatile
 12491                           
 12492                           ;Test.c: 404: break;
 12493  003B3E  D023               	goto	l1163
 12494  003B40                     l1159:
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;Test.c: 406: LATAbits.LATA3 = 1;
 12498  003B40  8689               	bsf	3977,3,c	;volatile
 12499                           
 12500                           ;Test.c: 407: break;
 12501  003B42  D021               	goto	l1163
 12502  003B44                     l1160:
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;Test.c: 409: LATAbits.LATA4 = 1;
 12506  003B44  8889               	bsf	3977,4,c	;volatile
 12507                           
 12508                           ;Test.c: 410: break;
 12509  003B46  D01F               	goto	l1163
 12510  003B48                     l1161:
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;Test.c: 412: LATAbits.LATA5 = 1;
 12514  003B48  8A89               	bsf	3977,5,c	;volatile
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;Test.c: 416: }
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;Test.c: 415: break;
 12521                           
 12522                           ;Test.c: 414: default:
 12523                           
 12524                           ;Test.c: 413: break;
 12525  003B4A  D01D               	goto	l1163
 12526  003B4C                     l7154:
 12527                           
 12528                           ; BSR set to: 0
 12529  003B4C  C0FA  F080         	movff	_var,??_PortTests
 12530  003B50  C0FB  F081         	movff	_var+1,??_PortTests+1
 12531                           
 12532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12533                           ; Switch size 1, requested type "space"
 12534                           ; Number of cases is 1, Range of values is 0 to 0
 12535                           ; switch strategies available:
 12536                           ; Name         Instructions Cycles
 12537                           ; simple_byte            4     3 (average)
 12538                           ;	Chosen strategy is simple_byte
 12539  003B54  0100               	movlb	0	; () banked
 12540  003B56  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12541  003B58  0A00               	xorlw	0	; case 0
 12542  003B5A  A4D8               	btfss	status,2,c
 12543  003B5C  D014               	goto	l1163
 12544                           
 12545                           ; BSR set to: 0
 12546                           ; Switch size 1, requested type "space"
 12547                           ; Number of cases is 6, Range of values is 0 to 5
 12548                           ; switch strategies available:
 12549                           ; Name         Instructions Cycles
 12550                           ; simple_byte           19    10 (average)
 12551                           ;	Chosen strategy is simple_byte
 12552  003B5E  0100               	movlb	0	; () banked
 12553  003B60  5180               	movf	??_PortTests& (0+255),w,b
 12554  003B62  0A00               	xorlw	0	; case 0
 12555  003B64  B4D8               	btfsc	status,2,c
 12556  003B66  D7E6               	goto	l1155
 12557  003B68  0A01               	xorlw	1	; case 1
 12558  003B6A  B4D8               	btfsc	status,2,c
 12559  003B6C  D7E5               	goto	l1157
 12560  003B6E  0A03               	xorlw	3	; case 2
 12561  003B70  B4D8               	btfsc	status,2,c
 12562  003B72  D7E4               	goto	l1158
 12563  003B74  0A01               	xorlw	1	; case 3
 12564  003B76  B4D8               	btfsc	status,2,c
 12565  003B78  D7E3               	goto	l1159
 12566  003B7A  0A07               	xorlw	7	; case 4
 12567  003B7C  B4D8               	btfsc	status,2,c
 12568  003B7E  D7E2               	goto	l1160
 12569  003B80  0A01               	xorlw	1	; case 5
 12570  003B82  B4D8               	btfsc	status,2,c
 12571  003B84  D7E1               	goto	l1161
 12572  003B86                     l1163:
 12573  003B86  B281               	btfsc	3969,1,c	;volatile
 12574  003B88  D7FE               	goto	l1163
 12575                           
 12576                           ;Test.c: 418: __nop();
 12577  003B8A  F000               	nop	
 12578                           
 12579                           ;Test.c: 419: __nop();
 12580  003B8C  F000               	nop	
 12581                           
 12582                           ;Test.c: 420: LATA = 0x00;
 12583  003B8E  0E00               	movlw	0
 12584  003B90  6E89               	movwf	3977,c	;volatile
 12585                           
 12586                           ;Test.c: 421: LATE = 0x00;
 12587  003B92  0E00               	movlw	0
 12588  003B94  6E8D               	movwf	3981,c	;volatile
 12589                           
 12590                           ;Test.c: 422: LATD = 0x00; }
 12591  003B96  0E00               	movlw	0
 12592  003B98  6E8C               	movwf	3980,c	;volatile
 12593  003B9A  D7BE               	goto	l1151
 12594  003B9C                     __end_of_PortTests:
 12595                           	opt stack 0
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           intcon	equ	0xFF2
 12603                           intcon2	equ	0xFF1
 12604                           intcon3	equ	0xFF0
 12605                           postinc0	equ	0xFEE
 12606                           wreg	equ	0xFE8
 12607                           postdec1	equ	0xFE5
 12608                           fsr1l	equ	0xFE1
 12609                           indf2	equ	0xFDF
 12610                           postinc2	equ	0xFDE
 12611                           postdec2	equ	0xFDD
 12612                           fsr2h	equ	0xFDA
 12613                           fsr2l	equ	0xFD9
 12614                           status	equ	0xFD8
 12615                           
 12616 ;; *************** function _PortTestA5 *****************
 12617 ;; Defined at:
 12618 ;;		line 425 in file "Test.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;		None
 12623 ;; Return value:  Size  Location     Type
 12624 ;;                  1    wreg      void 
 12625 ;; Registers used:
 12626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12627 ;; Tracked objects:
 12628 ;;		On entry : 0/0
 12629 ;;		On exit  : 0/0
 12630 ;;		Unchanged: 0/0
 12631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12636 ;;Total ram usage:        1 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; Hardware stack levels required when called:   10
 12639 ;; This function calls:
 12640 ;;		_lcdInst
 12641 ;;		_printf
 12642 ;; This function is called by:
 12643 ;;		_Test
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text44
 12648  0038E8                     __ptext44:
 12649                           	opt stack 0
 12650  0038E8                     _PortTestA5:
 12651                           	opt stack 19
 12652                           
 12653                           ;Test.c: 426: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12654                           
 12655                           ;incstack = 0
 12656  0038E8  0E01               	movlw	1
 12657  0038EA  EC83  F023         	call	_lcdInst
 12658  0038EE  0E68               	movlw	104
 12659  0038F0  0100               	movlb	0	; () banked
 12660  0038F2  6FAB               	movwf	??_PortTestA5& (0+255),b
 12661  0038F4  0EE4               	movlw	228
 12662  0038F6                     u8007:
 12663  0038F6  2EE8               	decfsz	wreg,f,c
 12664  0038F8  D7FE               	bra	u8007
 12665  0038FA  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12666  0038FC  D7FC               	bra	u8007
 12667  0038FE  F000               	nop	
 12668  003900  0E80               	movlw	128
 12669  003902  EC83  F023         	call	_lcdInst
 12670                           
 12671                           ;Test.c: 427: printf("D WILL RETURN    ");
 12672  003906  0E83               	movlw	low STR_109
 12673  003908  0100               	movlb	0	; () banked
 12674  00390A  6F8E               	movwf	printf@f& (0+255),b
 12675  00390C  0EFB               	movlw	high STR_109
 12676  00390E  0100               	movlb	0	; () banked
 12677  003910  6F8F               	movwf	(printf@f+1)& (0+255),b
 12678  003912  ECB8  F008         	call	_printf	;wreg free
 12679                           
 12680                           ;Test.c: 428: lcdInst(0b11000000);;
 12681  003916  0EC0               	movlw	192
 12682  003918  EC83  F023         	call	_lcdInst
 12683                           
 12684                           ;Test.c: 429: printf("OTHER SETS RA5   ");
 12685  00391C  0E95               	movlw	low STR_110
 12686  00391E  0100               	movlb	0	; () banked
 12687  003920  6F8E               	movwf	printf@f& (0+255),b
 12688  003922  0EFB               	movlw	high STR_110
 12689  003924  0100               	movlb	0	; () banked
 12690  003926  6F8F               	movwf	(printf@f+1)& (0+255),b
 12691  003928  ECB8  F008         	call	_printf	;wreg free
 12692  00392C                     l1172:
 12693  00392C  A281               	btfss	3969,1,c	;volatile
 12694  00392E  D7FE               	goto	l1172
 12695                           
 12696                           ;Test.c: 434: }
 12697                           ;Test.c: 435: if(PORTB >> 4 == 0b1111){
 12698  003930  3881               	swapf	3969,w,c	;volatile
 12699  003932  0B0F               	andlw	15
 12700  003934  0A0F               	xorlw	15
 12701  003936  B4D8               	btfsc	status,2,c
 12702  003938  0012               	return	
 12703                           
 12704                           ;Test.c: 438: else{
 12705                           ;Test.c: 439: LATAbits.LATA5 = 1;
 12706                           
 12707                           ;Test.c: 437: }
 12708                           
 12709                           ;Test.c: 436: break;
 12710  00393A  8A89               	bsf	3977,5,c	;volatile
 12711  00393C                     l1178:
 12712  00393C  B281               	btfsc	3969,1,c	;volatile
 12713  00393E  D7FE               	goto	l1178
 12714                           
 12715                           ;Test.c: 442: }
 12716                           ;Test.c: 445: for(i=0;i<10000;i++)
 12717  003940  0E00               	movlw	0
 12718  003942  0100               	movlb	0	; () banked
 12719  003944  6FE5               	movwf	(_i+1)& (0+255),b
 12720  003946  0E00               	movlw	0
 12721  003948  6FE4               	movwf	_i& (0+255),b
 12722  00394A                     l7060:
 12723                           
 12724                           ; BSR set to: 0
 12725  00394A  0100               	movlb	0	; () banked
 12726  00394C  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12727  00394E  D008               	goto	l1181
 12728  003950  0E10               	movlw	16
 12729  003952  0100               	movlb	0	; () banked
 12730  003954  5DE4               	subwf	_i& (0+255),w,b
 12731  003956  0E27               	movlw	39
 12732  003958  0100               	movlb	0	; () banked
 12733  00395A  59E5               	subwfb	(_i+1)& (0+255),w,b
 12734  00395C  B0D8               	btfsc	status,0,c
 12735  00395E  D00D               	goto	l1182
 12736  003960                     l1181:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;Test.c: 446: {
 12740                           ;Test.c: 447: LATAbits.LATA5 = 1;
 12741  003960  8A89               	bsf	3977,5,c	;volatile
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;Test.c: 448: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12745  003962  0E1A               	movlw	26
 12746  003964                     u8017:
 12747  003964  2EE8               	decfsz	wreg,f,c
 12748  003966  D7FE               	bra	u8017
 12749  003968  D000               	nop2	
 12750                           
 12751                           ;Test.c: 449: LATAbits.LATA5 = 0;
 12752  00396A  9A89               	bcf	3977,5,c	;volatile
 12753                           
 12754                           ;Test.c: 450: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12755  00396C  0EF0               	movlw	240
 12756  00396E                     u8027:
 12757  00396E  2EE8               	decfsz	wreg,f,c
 12758  003970  D7FE               	bra	u8027
 12759  003972  0100               	movlb	0	; () banked
 12760  003974  4BE4               	infsnz	_i& (0+255),f,b
 12761  003976  2BE5               	incf	(_i+1)& (0+255),f,b
 12762  003978  D7E8               	goto	l7060
 12763  00397A                     l1182:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;Test.c: 451: }
 12767                           ;Test.c: 453: LATAbits.LATA5 = 0;
 12768  00397A  9A89               	bcf	3977,5,c	;volatile
 12769                           
 12770                           ; BSR set to: 0
 12771                           
 12772                           ; BSR set to: 0
 12773  00397C  D7D7               	goto	l1172
 12774  00397E                     __end_of_PortTestA5:
 12775                           	opt stack 0
 12776                           tblptru	equ	0xFF8
 12777                           tblptrh	equ	0xFF7
 12778                           tblptrl	equ	0xFF6
 12779                           tablat	equ	0xFF5
 12780                           prodh	equ	0xFF4
 12781                           prodl	equ	0xFF3
 12782                           intcon	equ	0xFF2
 12783                           intcon2	equ	0xFF1
 12784                           intcon3	equ	0xFF0
 12785                           postinc0	equ	0xFEE
 12786                           wreg	equ	0xFE8
 12787                           postdec1	equ	0xFE5
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           fsr2h	equ	0xFDA
 12793                           fsr2l	equ	0xFD9
 12794                           status	equ	0xFD8
 12795                           
 12796 ;; *************** function _EEPROMTest *****************
 12797 ;; Defined at:
 12798 ;;		line 510 in file "Test.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;		None
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      void 
 12805 ;; Registers used:
 12806 ;;		None
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;Total ram usage:        0 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    7
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_Test
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text45
 12827  00476A                     __ptext45:
 12828                           	opt stack 0
 12829  00476A                     _EEPROMTest:
 12830                           	opt stack 22
 12831                           
 12832                           ;incstack = 0
 12833  00476A  0012               	return		;funcret
 12834  00476C                     __end_of_EEPROMTest:
 12835                           	opt stack 0
 12836                           tblptru	equ	0xFF8
 12837                           tblptrh	equ	0xFF7
 12838                           tblptrl	equ	0xFF6
 12839                           tablat	equ	0xFF5
 12840                           prodh	equ	0xFF4
 12841                           prodl	equ	0xFF3
 12842                           intcon	equ	0xFF2
 12843                           intcon2	equ	0xFF1
 12844                           intcon3	equ	0xFF0
 12845                           postinc0	equ	0xFEE
 12846                           wreg	equ	0xFE8
 12847                           postdec1	equ	0xFE5
 12848                           fsr1l	equ	0xFE1
 12849                           indf2	equ	0xFDF
 12850                           postinc2	equ	0xFDE
 12851                           postdec2	equ	0xFDD
 12852                           fsr2h	equ	0xFDA
 12853                           fsr2l	equ	0xFD9
 12854                           status	equ	0xFD8
 12855                           
 12856 ;; *************** function _BothServos *****************
 12857 ;; Defined at:
 12858 ;;		line 341 in file "Test.c"
 12859 ;; Parameters:    Size  Location     Type
 12860 ;;		None
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;		None
 12863 ;; Return value:  Size  Location     Type
 12864 ;;                  1    wreg      void 
 12865 ;; Registers used:
 12866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12876 ;;Total ram usage:        2 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:   10
 12879 ;; This function calls:
 12880 ;;		_initServos
 12881 ;;		_lcdInst
 12882 ;;		_printf
 12883 ;;		_updateServoPosition
 12884 ;; This function is called by:
 12885 ;;		_Test
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           	psect	text46
 12890  001916                     __ptext46:
 12891                           	opt stack 0
 12892  001916                     _BothServos:
 12893                           	opt stack 19
 12894                           
 12895                           ;Test.c: 342: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12896                           
 12897                           ;incstack = 0
 12898  001916  0E01               	movlw	1
 12899  001918  EC83  F023         	call	_lcdInst
 12900  00191C  0E68               	movlw	104
 12901  00191E  0100               	movlb	0	; () banked
 12902  001920  6FAB               	movwf	??_BothServos& (0+255),b
 12903  001922  0EE4               	movlw	228
 12904  001924                     u8037:
 12905  001924  2EE8               	decfsz	wreg,f,c
 12906  001926  D7FE               	bra	u8037
 12907  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12908  00192A  D7FC               	bra	u8037
 12909  00192C  F000               	nop	
 12910  00192E  0E80               	movlw	128
 12911  001930  EC83  F023         	call	_lcdInst
 12912                           
 12913                           ;Test.c: 343: printf("TST: BOTH SERVOS");
 12914  001934  0ECA               	movlw	low STR_108
 12915  001936  0100               	movlb	0	; () banked
 12916  001938  6F8E               	movwf	printf@f& (0+255),b
 12917  00193A  0EFC               	movlw	high STR_108
 12918  00193C  0100               	movlb	0	; () banked
 12919  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12920  001940  ECB8  F008         	call	_printf	;wreg free
 12921                           
 12922                           ;Test.c: 344: TMR1ON = 1;
 12923  001944  80CD               	bsf	4045,0,c	;volatile
 12924                           
 12925                           ;Test.c: 345: TMR3ON = 1;
 12926  001946  80B1               	bsf	4017,0,c	;volatile
 12927                           
 12928                           ;Test.c: 346: machine_state = Sorting_state;
 12929  001948  0E01               	movlw	1
 12930  00194A  0100               	movlb	0	; () banked
 12931  00194C  6FFC               	movwf	_machine_state& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;Test.c: 347: was_low_1 = 0;
 12935  00194E  0E00               	movlw	0
 12936  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 12937  001952  0E00               	movlw	0
 12938  001954  6E79               	movwf	_was_low_1,c	;volatile
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;Test.c: 348: was_low_1 = 0;
 12942  001956  0E00               	movlw	0
 12943  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 12944  00195A  0E00               	movlw	0
 12945  00195C  6E79               	movwf	_was_low_1,c	;volatile
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;Test.c: 354: initServos();
 12949  00195E  EC76  F01F         	call	_initServos	;wreg free
 12950                           
 12951                           ;Test.c: 355: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12952  001962  0E3D               	movlw	61
 12953  001964  0100               	movlb	0	; () banked
 12954  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12955  001968  0EE1               	movlw	225
 12956  00196A  0100               	movlb	0	; () banked
 12957  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 12958  00196E  0E3F               	movlw	63
 12959  001970                     u8047:
 12960  001970  2EE8               	decfsz	wreg,f,c
 12961  001972  D7FE               	bra	u8047
 12962  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12963  001976  D7FC               	bra	u8047
 12964  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12965  00197A  D7FA               	bra	u8047
 12966  00197C  D000               	nop2	
 12967                           
 12968                           ;Test.c: 356: updateServoPosition(500, 1);
 12969  00197E  0E01               	movlw	1
 12970  001980  0100               	movlb	0	; () banked
 12971  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12972  001984  0EF4               	movlw	244
 12973  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12974  001988  0E00               	movlw	0
 12975  00198A  0100               	movlb	0	; () banked
 12976  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12977  00198E  0E01               	movlw	1
 12978  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12979  001992  EC0A  F01E         	call	_updateServoPosition	;wreg free
 12980                           
 12981                           ;Test.c: 357: updateServoPosition(1350, 3);
 12982  001996  0E05               	movlw	5
 12983  001998  0100               	movlb	0	; () banked
 12984  00199A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12985  00199C  0E46               	movlw	70
 12986  00199E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12987  0019A0  0E00               	movlw	0
 12988  0019A2  0100               	movlb	0	; () banked
 12989  0019A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12990  0019A6  0E03               	movlw	3
 12991  0019A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12992  0019AA  EC0A  F01E         	call	_updateServoPosition	;wreg free
 12993                           
 12994                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12995  0019AE  0E3D               	movlw	61
 12996  0019B0  0100               	movlb	0	; () banked
 12997  0019B2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12998  0019B4  0EE1               	movlw	225
 12999  0019B6  0100               	movlb	0	; () banked
 13000  0019B8  6FAB               	movwf	??_BothServos& (0+255),b
 13001  0019BA  0E3F               	movlw	63
 13002  0019BC                     u8057:
 13003  0019BC  2EE8               	decfsz	wreg,f,c
 13004  0019BE  D7FE               	bra	u8057
 13005  0019C0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13006  0019C2  D7FC               	bra	u8057
 13007  0019C4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13008  0019C6  D7FA               	bra	u8057
 13009  0019C8  D000               	nop2	
 13010                           
 13011                           ;Test.c: 359: updateServoPosition(1190, 3);
 13012  0019CA  0E04               	movlw	4
 13013  0019CC  0100               	movlb	0	; () banked
 13014  0019CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13015  0019D0  0EA6               	movlw	166
 13016  0019D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13017  0019D4  0E00               	movlw	0
 13018  0019D6  0100               	movlb	0	; () banked
 13019  0019D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13020  0019DA  0E03               	movlw	3
 13021  0019DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13022  0019DE  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13023                           
 13024                           ;Test.c: 360: _delay((unsigned long)((750)*(32000000/4000.0)));
 13025  0019E2  0E1F               	movlw	31
 13026  0019E4  0100               	movlb	0	; () banked
 13027  0019E6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13028  0019E8  0E71               	movlw	113
 13029  0019EA  0100               	movlb	0	; () banked
 13030  0019EC  6FAB               	movwf	??_BothServos& (0+255),b
 13031  0019EE  0E1E               	movlw	30
 13032  0019F0                     u8067:
 13033  0019F0  2EE8               	decfsz	wreg,f,c
 13034  0019F2  D7FE               	bra	u8067
 13035  0019F4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13036  0019F6  D7FC               	bra	u8067
 13037  0019F8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13038  0019FA  D7FA               	bra	u8067
 13039  0019FC  F000               	nop	
 13040                           
 13041                           ;Test.c: 362: updateServoPosition(750, 1);
 13042  0019FE  0E02               	movlw	2
 13043  001A00  0100               	movlb	0	; () banked
 13044  001A02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13045  001A04  0EEE               	movlw	238
 13046  001A06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13047  001A08  0E00               	movlw	0
 13048  001A0A  0100               	movlb	0	; () banked
 13049  001A0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13050  001A0E  0E01               	movlw	1
 13051  001A10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13052  001A12  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13053                           
 13054                           ;Test.c: 363: updateServoPosition(1350, 3);
 13055  001A16  0E05               	movlw	5
 13056  001A18  0100               	movlb	0	; () banked
 13057  001A1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13058  001A1C  0E46               	movlw	70
 13059  001A1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13060  001A20  0E00               	movlw	0
 13061  001A22  0100               	movlb	0	; () banked
 13062  001A24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13063  001A26  0E03               	movlw	3
 13064  001A28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13065  001A2A  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13066                           
 13067                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13068  001A2E  0E3D               	movlw	61
 13069  001A30  0100               	movlb	0	; () banked
 13070  001A32  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13071  001A34  0EE1               	movlw	225
 13072  001A36  0100               	movlb	0	; () banked
 13073  001A38  6FAB               	movwf	??_BothServos& (0+255),b
 13074  001A3A  0E3F               	movlw	63
 13075  001A3C                     u8077:
 13076  001A3C  2EE8               	decfsz	wreg,f,c
 13077  001A3E  D7FE               	bra	u8077
 13078  001A40  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13079  001A42  D7FC               	bra	u8077
 13080  001A44  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13081  001A46  D7FA               	bra	u8077
 13082  001A48  D000               	nop2	
 13083                           
 13084                           ;Test.c: 365: updateServoPosition(1190, 3);
 13085  001A4A  0E04               	movlw	4
 13086  001A4C  0100               	movlb	0	; () banked
 13087  001A4E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13088  001A50  0EA6               	movlw	166
 13089  001A52  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13090  001A54  0E00               	movlw	0
 13091  001A56  0100               	movlb	0	; () banked
 13092  001A58  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13093  001A5A  0E03               	movlw	3
 13094  001A5C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13095  001A5E  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13096                           
 13097                           ;Test.c: 366: _delay((unsigned long)((750)*(32000000/4000.0)));
 13098  001A62  0E1F               	movlw	31
 13099  001A64  0100               	movlb	0	; () banked
 13100  001A66  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13101  001A68  0E71               	movlw	113
 13102  001A6A  0100               	movlb	0	; () banked
 13103  001A6C  6FAB               	movwf	??_BothServos& (0+255),b
 13104  001A6E  0E1E               	movlw	30
 13105  001A70                     u8087:
 13106  001A70  2EE8               	decfsz	wreg,f,c
 13107  001A72  D7FE               	bra	u8087
 13108  001A74  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13109  001A76  D7FC               	bra	u8087
 13110  001A78  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13111  001A7A  D7FA               	bra	u8087
 13112  001A7C  F000               	nop	
 13113                           
 13114                           ;Test.c: 368: updateServoPosition(1200, 1);
 13115  001A7E  0E04               	movlw	4
 13116  001A80  0100               	movlb	0	; () banked
 13117  001A82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13118  001A84  0EB0               	movlw	176
 13119  001A86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13120  001A88  0E00               	movlw	0
 13121  001A8A  0100               	movlb	0	; () banked
 13122  001A8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13123  001A8E  0E01               	movlw	1
 13124  001A90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13125  001A92  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13126                           
 13127                           ;Test.c: 369: updateServoPosition(1350, 3);
 13128  001A96  0E05               	movlw	5
 13129  001A98  0100               	movlb	0	; () banked
 13130  001A9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13131  001A9C  0E46               	movlw	70
 13132  001A9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13133  001AA0  0E00               	movlw	0
 13134  001AA2  0100               	movlb	0	; () banked
 13135  001AA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13136  001AA6  0E03               	movlw	3
 13137  001AA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13138  001AAA  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13139                           
 13140                           ;Test.c: 370: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13141  001AAE  0E3D               	movlw	61
 13142  001AB0  0100               	movlb	0	; () banked
 13143  001AB2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13144  001AB4  0EE1               	movlw	225
 13145  001AB6  0100               	movlb	0	; () banked
 13146  001AB8  6FAB               	movwf	??_BothServos& (0+255),b
 13147  001ABA  0E3F               	movlw	63
 13148  001ABC                     u8097:
 13149  001ABC  2EE8               	decfsz	wreg,f,c
 13150  001ABE  D7FE               	bra	u8097
 13151  001AC0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13152  001AC2  D7FC               	bra	u8097
 13153  001AC4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13154  001AC6  D7FA               	bra	u8097
 13155  001AC8  D000               	nop2	
 13156                           
 13157                           ;Test.c: 371: updateServoPosition(1190, 3);
 13158  001ACA  0E04               	movlw	4
 13159  001ACC  0100               	movlb	0	; () banked
 13160  001ACE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13161  001AD0  0EA6               	movlw	166
 13162  001AD2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13163  001AD4  0E00               	movlw	0
 13164  001AD6  0100               	movlb	0	; () banked
 13165  001AD8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13166  001ADA  0E03               	movlw	3
 13167  001ADC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13168  001ADE  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13169                           
 13170                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13171  001AE2  0E1F               	movlw	31
 13172  001AE4  0100               	movlb	0	; () banked
 13173  001AE6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13174  001AE8  0E71               	movlw	113
 13175  001AEA  0100               	movlb	0	; () banked
 13176  001AEC  6FAB               	movwf	??_BothServos& (0+255),b
 13177  001AEE  0E1E               	movlw	30
 13178  001AF0                     u8107:
 13179  001AF0  2EE8               	decfsz	wreg,f,c
 13180  001AF2  D7FE               	bra	u8107
 13181  001AF4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13182  001AF6  D7FC               	bra	u8107
 13183  001AF8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13184  001AFA  D7FA               	bra	u8107
 13185  001AFC  F000               	nop	
 13186                           
 13187                           ;Test.c: 374: updateServoPosition(1700, 1);
 13188  001AFE  0E06               	movlw	6
 13189  001B00  0100               	movlb	0	; () banked
 13190  001B02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13191  001B04  0EA4               	movlw	164
 13192  001B06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13193  001B08  0E00               	movlw	0
 13194  001B0A  0100               	movlb	0	; () banked
 13195  001B0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13196  001B0E  0E01               	movlw	1
 13197  001B10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13198  001B12  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13199                           
 13200                           ;Test.c: 375: updateServoPosition(1350, 3);
 13201  001B16  0E05               	movlw	5
 13202  001B18  0100               	movlb	0	; () banked
 13203  001B1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13204  001B1C  0E46               	movlw	70
 13205  001B1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13206  001B20  0E00               	movlw	0
 13207  001B22  0100               	movlb	0	; () banked
 13208  001B24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13209  001B26  0E03               	movlw	3
 13210  001B28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13211  001B2A  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13212                           
 13213                           ;Test.c: 376: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13214  001B2E  0E3D               	movlw	61
 13215  001B30  0100               	movlb	0	; () banked
 13216  001B32  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13217  001B34  0EE1               	movlw	225
 13218  001B36  0100               	movlb	0	; () banked
 13219  001B38  6FAB               	movwf	??_BothServos& (0+255),b
 13220  001B3A  0E3F               	movlw	63
 13221  001B3C                     u8117:
 13222  001B3C  2EE8               	decfsz	wreg,f,c
 13223  001B3E  D7FE               	bra	u8117
 13224  001B40  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13225  001B42  D7FC               	bra	u8117
 13226  001B44  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13227  001B46  D7FA               	bra	u8117
 13228  001B48  D000               	nop2	
 13229                           
 13230                           ;Test.c: 377: updateServoPosition(1190, 3);
 13231  001B4A  0E04               	movlw	4
 13232  001B4C  0100               	movlb	0	; () banked
 13233  001B4E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13234  001B50  0EA6               	movlw	166
 13235  001B52  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13236  001B54  0E00               	movlw	0
 13237  001B56  0100               	movlb	0	; () banked
 13238  001B58  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13239  001B5A  0E03               	movlw	3
 13240  001B5C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13241  001B5E  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13242                           
 13243                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 13244  001B62  0E1F               	movlw	31
 13245  001B64  0100               	movlb	0	; () banked
 13246  001B66  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13247  001B68  0E71               	movlw	113
 13248  001B6A  0100               	movlb	0	; () banked
 13249  001B6C  6FAB               	movwf	??_BothServos& (0+255),b
 13250  001B6E  0E1E               	movlw	30
 13251  001B70                     u8127:
 13252  001B70  2EE8               	decfsz	wreg,f,c
 13253  001B72  D7FE               	bra	u8127
 13254  001B74  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13255  001B76  D7FC               	bra	u8127
 13256  001B78  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13257  001B7A  D7FA               	bra	u8127
 13258  001B7C  F000               	nop	
 13259                           
 13260                           ;Test.c: 380: updateServoPosition(2000, 1);
 13261  001B7E  0E07               	movlw	7
 13262  001B80  0100               	movlb	0	; () banked
 13263  001B82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13264  001B84  0ED0               	movlw	208
 13265  001B86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13266  001B88  0E00               	movlw	0
 13267  001B8A  0100               	movlb	0	; () banked
 13268  001B8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13269  001B8E  0E01               	movlw	1
 13270  001B90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13271  001B92  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13272                           
 13273                           ;Test.c: 381: updateServoPosition(1350, 3);
 13274  001B96  0E05               	movlw	5
 13275  001B98  0100               	movlb	0	; () banked
 13276  001B9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13277  001B9C  0E46               	movlw	70
 13278  001B9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13279  001BA0  0E00               	movlw	0
 13280  001BA2  0100               	movlb	0	; () banked
 13281  001BA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13282  001BA6  0E03               	movlw	3
 13283  001BA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13284  001BAA  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13285                           
 13286                           ;Test.c: 382: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13287  001BAE  0E3D               	movlw	61
 13288  001BB0  0100               	movlb	0	; () banked
 13289  001BB2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13290  001BB4  0EE1               	movlw	225
 13291  001BB6  0100               	movlb	0	; () banked
 13292  001BB8  6FAB               	movwf	??_BothServos& (0+255),b
 13293  001BBA  0E3F               	movlw	63
 13294  001BBC                     u8137:
 13295  001BBC  2EE8               	decfsz	wreg,f,c
 13296  001BBE  D7FE               	bra	u8137
 13297  001BC0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13298  001BC2  D7FC               	bra	u8137
 13299  001BC4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13300  001BC6  D7FA               	bra	u8137
 13301  001BC8  D000               	nop2	
 13302                           
 13303                           ;Test.c: 383: updateServoPosition(1190, 3);
 13304  001BCA  0E04               	movlw	4
 13305  001BCC  0100               	movlb	0	; () banked
 13306  001BCE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13307  001BD0  0EA6               	movlw	166
 13308  001BD2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13309  001BD4  0E00               	movlw	0
 13310  001BD6  0100               	movlb	0	; () banked
 13311  001BD8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13312  001BDA  0E03               	movlw	3
 13313  001BDC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13314  001BDE  EC0A  F01E         	call	_updateServoPosition	;wreg free
 13315                           
 13316                           ;Test.c: 384: _delay((unsigned long)((750)*(32000000/4000.0)));
 13317  001BE2  0E1F               	movlw	31
 13318  001BE4  0100               	movlb	0	; () banked
 13319  001BE6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13320  001BE8  0E71               	movlw	113
 13321  001BEA  0100               	movlb	0	; () banked
 13322  001BEC  6FAB               	movwf	??_BothServos& (0+255),b
 13323  001BEE  0E1E               	movlw	30
 13324  001BF0                     u8147:
 13325  001BF0  2EE8               	decfsz	wreg,f,c
 13326  001BF2  D7FE               	bra	u8147
 13327  001BF4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13328  001BF6  D7FC               	bra	u8147
 13329  001BF8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13330  001BFA  D7FA               	bra	u8147
 13331  001BFC  F000               	nop	
 13332                           
 13333                           ;Test.c: 386: TMR1ON = 0;
 13334  001BFE  90CD               	bcf	4045,0,c	;volatile
 13335                           
 13336                           ;Test.c: 387: TMR3ON = 0;
 13337  001C00  90B1               	bcf	4017,0,c	;volatile
 13338                           
 13339                           ;Test.c: 388: (INTCONbits.GIE = 0);
 13340  001C02  9EF2               	bcf	intcon,7,c	;volatile
 13341  001C04  0012               	return		;funcret
 13342  001C06                     __end_of_BothServos:
 13343                           	opt stack 0
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           intcon2	equ	0xFF1
 13352                           intcon3	equ	0xFF0
 13353                           postinc0	equ	0xFEE
 13354                           wreg	equ	0xFE8
 13355                           postdec1	equ	0xFE5
 13356                           fsr1l	equ	0xFE1
 13357                           indf2	equ	0xFDF
 13358                           postinc2	equ	0xFDE
 13359                           postdec2	equ	0xFDD
 13360                           fsr2h	equ	0xFDA
 13361                           fsr2l	equ	0xFD9
 13362                           status	equ	0xFD8
 13363                           
 13364 ;; *************** function _printf *****************
 13365 ;; Defined at:
 13366 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13367 ;; Parameters:    Size  Location     Type
 13368 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13369 ;;		 -> STR_114(17), STR_113(17), STR_112(10), STR_111(13), 
 13370 ;;		 -> STR_110(18), STR_109(18), STR_108(17), STR_107(15), 
 13371 ;;		 -> STR_106(15), STR_105(15), STR_104(17), STR_103(17), 
 13372 ;;		 -> STR_102(17), STR_101(16), STR_100(17), STR_99(17), 
 13373 ;;		 -> STR_98(17), STR_97(17), STR_96(17), STR_95(17), 
 13374 ;;		 -> STR_94(15), STR_93(11), STR_92(17), STR_91(11), 
 13375 ;;		 -> STR_90(17), STR_89(14), STR_88(15), STR_87(14), 
 13376 ;;		 -> STR_86(10), STR_85(9), STR_84(10), STR_83(16), 
 13377 ;;		 -> STR_82(15), STR_81(3), STR_80(15), STR_79(13), 
 13378 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 13379 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 13380 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 13381 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 13382 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 13383 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 13384 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 13385 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 13386 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 13387 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 13388 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 13389 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 13390 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 13391 ;;		 -> STR_1(18), 
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;  tmpval          4    0        struct .
 13394 ;;  width           2   41[BANK0 ] int 
 13395 ;;  val             2   37[BANK0 ] unsigned int 
 13396 ;;  len             2   35[BANK0 ] unsigned int 
 13397 ;;  ap              2   33[BANK0 ] PTR void [1]
 13398 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13399 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13400 ;;		 -> STR_115(7), count_total(2), printRTC@month(4), UI@month(4), 
 13401 ;;  c               1   40[BANK0 ] char 
 13402 ;;  flag            1   39[BANK0 ] unsigned char 
 13403 ;;  prec            1   30[BANK0 ] char 
 13404 ;; Return value:  Size  Location     Type
 13405 ;;                  2   14[BANK0 ] int 
 13406 ;; Registers used:
 13407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13408 ;; Tracked objects:
 13409 ;;		On entry : 0/0
 13410 ;;		On exit  : 0/0
 13411 ;;		Unchanged: 0/0
 13412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13413 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13414 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13415 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13416 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13417 ;;Total ram usage:       29 bytes
 13418 ;; Hardware stack levels used:    1
 13419 ;; Hardware stack levels required when called:    9
 13420 ;; This function calls:
 13421 ;;		___lwdiv
 13422 ;;		___lwmod
 13423 ;;		___wmul
 13424 ;;		_isdigit
 13425 ;;		_putch
 13426 ;; This function is called by:
 13427 ;;		_UI
 13428 ;;		_change_state_to_menu_start
 13429 ;;		_change_state_to_menu_12
 13430 ;;		_change_state_to_menu_22
 13431 ;;		_printRTC
 13432 ;;		_EEPROM_write
 13433 ;;		_Test
 13434 ;;		_algorithmTest
 13435 ;;		_sensorTest
 13436 ;;		_actuatorTest
 13437 ;;		_BothServos
 13438 ;;		_PortTestA5
 13439 ;;		_SolenoidTestA5
 13440 ;;		_ToggleTestA5
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text47
 13445  001170                     __ptext47:
 13446                           	opt stack 0
 13447  001170                     _printf:
 13448                           	opt stack 18
 13449                           
 13450                           ;doprnt.c: 466: va_list ap;
 13451                           ;doprnt.c: 499: signed char c;
 13452                           ;doprnt.c: 501: int width;
 13453                           ;doprnt.c: 506: signed char prec;
 13454                           ;doprnt.c: 508: unsigned char flag;
 13455                           ;doprnt.c: 523: union {
 13456                           ;doprnt.c: 524: unsigned long vd;
 13457                           ;doprnt.c: 525: double integ;
 13458                           ;doprnt.c: 526: } tmpval;
 13459                           ;doprnt.c: 528: unsigned int val;
 13460                           ;doprnt.c: 529: unsigned len;
 13461                           ;doprnt.c: 530: const char * cp;
 13462                           ;doprnt.c: 533: *ap = __va_start();
 13463                           
 13464                           ;incstack = 0
 13465  001170  0E90               	movlw	low (?_printf+2)
 13466  001172  0100               	movlb	0	; () banked
 13467  001174  6FA1               	movwf	printf@ap& (0+255),b
 13468  001176  0E00               	movlw	high (?_printf+2)
 13469  001178  0100               	movlb	0	; () banked
 13470  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13471                           
 13472                           ;doprnt.c: 536: while(c = *f++) {
 13473  00117C  D205               	goto	l5534
 13474  00117E                     l5404:
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;doprnt.c: 538: if(c != '%')
 13478  00117E  0E25               	movlw	37
 13479  001180  0100               	movlb	0	; () banked
 13480  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13481  001184  B4D8               	btfsc	status,2,c
 13482  001186  D005               	goto	l5408
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;doprnt.c: 540: {
 13486                           ;doprnt.c: 541: (putch(c) );
 13487  001188  0100               	movlb	0	; () banked
 13488  00118A  51A8               	movf	printf@c& (0+255),w,b
 13489  00118C  EC7B  F023         	call	_putch
 13490                           
 13491                           ;doprnt.c: 542: continue;
 13492  001190  D1FB               	goto	l5534
 13493  001192                     l5408:
 13494                           
 13495                           ;doprnt.c: 543: }
 13496                           ;doprnt.c: 546: width = 0;
 13497  001192  0E00               	movlw	0
 13498  001194  0100               	movlb	0	; () banked
 13499  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13500  001198  0E00               	movlw	0
 13501  00119A  6FA9               	movwf	printf@width& (0+255),b
 13502                           
 13503                           ;doprnt.c: 548: flag = 0;
 13504  00119C  0E00               	movlw	0
 13505  00119E  0100               	movlb	0	; () banked
 13506  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13507                           
 13508                           ; BSR set to: 0
 13509                           ;doprnt.c: 551: switch(*f) {
 13510                           
 13511                           ;doprnt.c: 550: for(;;) {
 13512  0011A2  D005               	goto	l5414
 13513  0011A4                     l5410:
 13514                           
 13515                           ;doprnt.c: 580: flag |= 0x04;
 13516  0011A4  0100               	movlb	0	; () banked
 13517  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13518                           
 13519                           ;doprnt.c: 581: f++;
 13520  0011A8  0100               	movlb	0	; () banked
 13521  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13522  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13523  0011AE                     l5414:
 13524  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13525  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13526  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13527  0011B6  6AF8               	clrf	tblptru,c
 13528  0011B8                     	endif
 13529  0011B8                     	if	0	;tblptru may be non-zero
 13530  0011B8                     	endif
 13531  0011B8  0008               	tblrd		*
 13532  0011BA  50F5               	movf	tablat,w,c
 13533                           
 13534                           ; Switch size 1, requested type "space"
 13535                           ; Number of cases is 1, Range of values is 48 to 48
 13536                           ; switch strategies available:
 13537                           ; Name         Instructions Cycles
 13538                           ; simple_byte            4     3 (average)
 13539                           ;	Chosen strategy is simple_byte
 13540  0011BC  0A30               	xorlw	48	; case 48
 13541  0011BE  B4D8               	btfsc	status,2,c
 13542  0011C0  D7F1               	goto	l5410
 13543                           
 13544                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13545                           
 13546                           ;doprnt.c: 586: }
 13547                           
 13548                           ;doprnt.c: 585: break;
 13549  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13550  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13551  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13552  0011CA  6AF8               	clrf	tblptru,c
 13553  0011CC                     	endif
 13554  0011CC                     	if	0	;tblptru may be non-zero
 13555  0011CC                     	endif
 13556  0011CC  0008               	tblrd		*
 13557  0011CE  50F5               	movf	tablat,w,c
 13558  0011D0  EC8E  F022         	call	_isdigit
 13559  0011D4  A0D8               	btfss	status,0,c
 13560  0011D6  D0D2               	goto	l5462
 13561                           
 13562                           ;doprnt.c: 598: width = 0;
 13563  0011D8  0E00               	movlw	0
 13564  0011DA  0100               	movlb	0	; () banked
 13565  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13566  0011DE  0E00               	movlw	0
 13567  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13568  0011E2                     l5420:
 13569                           
 13570                           ;doprnt.c: 600: width *= 10;
 13571  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13572  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13573  0011EA  0E00               	movlw	0
 13574  0011EC  0100               	movlb	0	; () banked
 13575  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13576  0011F0  0E0A               	movlw	10
 13577  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13578  0011F4  EC28  F021         	call	___wmul	;wreg free
 13579  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13580  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13581                           
 13582                           ;doprnt.c: 601: width += *f++ - '0';
 13583  001200  0ED0               	movlw	208
 13584  001202  0100               	movlb	0	; () banked
 13585  001204  6F9A               	movwf	??_printf& (0+255),b
 13586  001206  0EFF               	movlw	255
 13587  001208  0100               	movlb	0	; () banked
 13588  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13589  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13590  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13591  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13592  001214  6AF8               	clrf	tblptru,c
 13593  001216                     	endif
 13594  001216                     	if	0	;tblptru may be non-zero
 13595  001216                     	endif
 13596  001216  0008               	tblrd		*
 13597  001218  50F5               	movf	tablat,w,c
 13598  00121A  0100               	movlb	0	; () banked
 13599  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13600  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13601  001220  0100               	movlb	0	; () banked
 13602  001222  519A               	movf	??_printf& (0+255),w,b
 13603  001224  0100               	movlb	0	; () banked
 13604  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13605  001228  0100               	movlb	0	; () banked
 13606  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13607  00122C  0100               	movlb	0	; () banked
 13608  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13609  001230  0100               	movlb	0	; () banked
 13610  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13611  001234  0100               	movlb	0	; () banked
 13612  001236  27A9               	addwf	printf@width& (0+255),f,b
 13613  001238  0100               	movlb	0	; () banked
 13614  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13615  00123C  0100               	movlb	0	; () banked
 13616  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13617                           
 13618                           ; BSR set to: 0
 13619  001240  0100               	movlb	0	; () banked
 13620  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13621  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13625  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13626  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13627  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13628  00124E  6AF8               	clrf	tblptru,c
 13629  001250                     	endif
 13630  001250                     	if	0	;tblptru may be non-zero
 13631  001250                     	endif
 13632  001250  0008               	tblrd		*
 13633  001252  50F5               	movf	tablat,w,c
 13634  001254  EC8E  F022         	call	_isdigit
 13635  001258  A0D8               	btfss	status,0,c
 13636  00125A  D090               	goto	l5462
 13637  00125C  D7C2               	goto	l5420
 13638  00125E                     l5428:
 13639                           
 13640                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13641  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13642  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13643  001266  CFDE F09F          	movff	postinc2,printf@cp
 13644  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13645  00126E  0E02               	movlw	2
 13646  001270  0100               	movlb	0	; () banked
 13647  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13648  001274  0E00               	movlw	0
 13649  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;doprnt.c: 740: if(!cp)
 13653  001278  0100               	movlb	0	; () banked
 13654  00127A  519F               	movf	printf@cp& (0+255),w,b
 13655  00127C  0100               	movlb	0	; () banked
 13656  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13657  001280  A4D8               	btfss	status,2,c
 13658  001282  D006               	goto	l5436
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;doprnt.c: 741: cp = "(null)";
 13662  001284  0EB6               	movlw	low STR_115
 13663  001286  0100               	movlb	0	; () banked
 13664  001288  6F9F               	movwf	printf@cp& (0+255),b
 13665  00128A  0EFF               	movlw	high STR_115
 13666  00128C  0100               	movlb	0	; () banked
 13667  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13668  001290                     l5436:
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;doprnt.c: 745: len = 0;
 13672  001290  0E00               	movlw	0
 13673  001292  0100               	movlb	0	; () banked
 13674  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13675  001296  0E00               	movlw	0
 13676  001298  6FA3               	movwf	printf@len& (0+255),b
 13677                           
 13678                           ;doprnt.c: 746: while(cp[len])
 13679  00129A  D003               	goto	l5440
 13680  00129C                     l5438:
 13681                           
 13682                           ;doprnt.c: 747: len++;
 13683  00129C  0100               	movlb	0	; () banked
 13684  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13685  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13686  0012A2                     l5440:
 13687                           
 13688                           ; BSR set to: 0
 13689  0012A2  0100               	movlb	0	; () banked
 13690  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13691  0012A6  0100               	movlb	0	; () banked
 13692  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13693  0012AA  0100               	movlb	0	; () banked
 13694  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13695  0012AE  0100               	movlb	0	; () banked
 13696  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13697  0012B2  0100               	movlb	0	; () banked
 13698  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13699  0012B6  0100               	movlb	0	; () banked
 13700  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13701  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13702  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13703  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13704  0012C4  6EF8               	movwf	tblptru,c
 13705  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13706  0012C8  64F7               	cpfsgt	tblptrh,c
 13707  0012CA  D003               	bra	u3847
 13708  0012CC  0008               	tblrd		*
 13709  0012CE  50F5               	movf	tablat,w,c
 13710  0012D0  D005               	bra	u3840
 13711  0012D2                     u3847:
 13712  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13713  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13714  0012DA  50EF               	movf	indf0,w,c
 13715  0012DC                     u3840:
 13716  0012DC  0900               	iorlw	0
 13717  0012DE  A4D8               	btfss	status,2,c
 13718  0012E0  D7DD               	goto	l5438
 13719                           
 13720                           ;doprnt.c: 757: if(width > len)
 13721  0012E2  0100               	movlb	0	; () banked
 13722  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13723  0012E6  0100               	movlb	0	; () banked
 13724  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13725  0012EA  0100               	movlb	0	; () banked
 13726  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13727  0012EE  0100               	movlb	0	; () banked
 13728  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13729  0012F2  B0D8               	btfsc	status,0,c
 13730  0012F4  D009               	goto	l5446
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;doprnt.c: 758: width -= len;
 13734  0012F6  0100               	movlb	0	; () banked
 13735  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13736  0012FA  0100               	movlb	0	; () banked
 13737  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13738  0012FE  0100               	movlb	0	; () banked
 13739  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13740  001302  0100               	movlb	0	; () banked
 13741  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13742  001306  D009               	goto	l5450
 13743  001308                     l5446:
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;doprnt.c: 759: else
 13747                           ;doprnt.c: 760: width = 0;
 13748  001308  0E00               	movlw	0
 13749  00130A  0100               	movlb	0	; () banked
 13750  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13751  00130E  0E00               	movlw	0
 13752  001310  6FA9               	movwf	printf@width& (0+255),b
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;doprnt.c: 764: while(width--)
 13756  001312  D003               	goto	l5450
 13757  001314                     l5448:
 13758                           
 13759                           ; BSR set to: 0
 13760                           ;doprnt.c: 765: (putch(' ') );
 13761  001314  0E20               	movlw	32
 13762  001316  EC7B  F023         	call	_putch
 13763  00131A                     l5450:
 13764  00131A  0100               	movlb	0	; () banked
 13765  00131C  07A9               	decf	printf@width& (0+255),f,b
 13766  00131E  A0D8               	btfss	status,0,c
 13767  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13768  001322  0100               	movlb	0	; () banked
 13769  001324  29A9               	incf	printf@width& (0+255),w,b
 13770  001326  E1F6               	bnz	l5448
 13771  001328  0100               	movlb	0	; () banked
 13772  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13773  00132C  B4D8               	btfsc	status,2,c
 13774  00132E  D017               	goto	l5456
 13775  001330  D7F1               	goto	l5448
 13776  001332                     l5452:
 13777                           
 13778                           ; BSR set to: 0
 13779                           ;doprnt.c: 768: (putch(*cp++) );
 13780  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13781  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13782  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13783  00133C  6EF8               	movwf	tblptru,c
 13784  00133E  0E0F               	movlw	(high __ramtop+-1)
 13785  001340  64F7               	cpfsgt	tblptrh,c
 13786  001342  D003               	bra	u3887
 13787  001344  0008               	tblrd		*
 13788  001346  50F5               	movf	tablat,w,c
 13789  001348  D005               	bra	u3880
 13790  00134A                     u3887:
 13791  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13792  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13793  001352  50EF               	movf	indf0,w,c
 13794  001354                     u3880:
 13795  001354  EC7B  F023         	call	_putch
 13796  001358  0100               	movlb	0	; () banked
 13797  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13798  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13799  00135E                     l5456:
 13800                           
 13801                           ; BSR set to: 0
 13802  00135E  0100               	movlb	0	; () banked
 13803  001360  07A3               	decf	printf@len& (0+255),f,b
 13804  001362  A0D8               	btfss	status,0,c
 13805  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13806  001366  0100               	movlb	0	; () banked
 13807  001368  29A3               	incf	printf@len& (0+255),w,b
 13808  00136A  E1E3               	bnz	l5452
 13809  00136C  0100               	movlb	0	; () banked
 13810  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13811  001370  B4D8               	btfsc	status,2,c
 13812  001372  D10A               	goto	l5534
 13813  001374  D7DE               	goto	l5452
 13814  001376                     l5458:
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;doprnt.c: 818: flag |= 0x40;
 13818  001376  0100               	movlb	0	; () banked
 13819  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13820                           
 13821                           ; BSR set to: 0
 13822                           ;doprnt.c: 822: }
 13823                           
 13824                           ;doprnt.c: 819: break;
 13825  00137A  D01D               	goto	l1248
 13826  00137C                     l5462:
 13827  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13828  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13829  001384  0100               	movlb	0	; () banked
 13830  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13831  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13832  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13833  00138A  6AF8               	clrf	tblptru,c
 13834  00138C                     	endif
 13835  00138C                     	if	0	;tblptru may be non-zero
 13836  00138C                     	endif
 13837  00138C  0008               	tblrd		*
 13838  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13839  001392  0100               	movlb	0	; () banked
 13840  001394  51A8               	movf	printf@c& (0+255),w,b
 13841                           
 13842                           ; Switch size 1, requested type "space"
 13843                           ; Number of cases is 5, Range of values is 0 to 117
 13844                           ; switch strategies available:
 13845                           ; Name         Instructions Cycles
 13846                           ; simple_byte           16     9 (average)
 13847                           ;	Chosen strategy is simple_byte
 13848  001396  0A00               	xorlw	0	; case 0
 13849  001398  B4D8               	btfsc	status,2,c
 13850  00139A  0012               	return	
 13851  00139C  0A64               	xorlw	100	; case 100
 13852  00139E  B4D8               	btfsc	status,2,c
 13853  0013A0  D00A               	goto	l1248
 13854  0013A2  0A0D               	xorlw	13	; case 105
 13855  0013A4  B4D8               	btfsc	status,2,c
 13856  0013A6  D007               	goto	l1248
 13857  0013A8  0A1A               	xorlw	26	; case 115
 13858  0013AA  B4D8               	btfsc	status,2,c
 13859  0013AC  D758               	goto	l5428
 13860  0013AE  0A06               	xorlw	6	; case 117
 13861  0013B0  B4D8               	btfsc	status,2,c
 13862  0013B2  D7E1               	goto	l5458
 13863  0013B4  D0E9               	goto	l5534
 13864  0013B6                     l1248:
 13865                           
 13866                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13867  0013B6  0100               	movlb	0	; () banked
 13868  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13869  0013BA  D019               	goto	l5474
 13870                           
 13871                           ; BSR set to: 0
 13872                           ;doprnt.c: 1253: {
 13873                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13874  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13875  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13876  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13877  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13878                           
 13879                           ; BSR set to: 0
 13880  0013CC  0E02               	movlw	2
 13881  0013CE  0100               	movlb	0	; () banked
 13882  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13883  0013D2  0E00               	movlw	0
 13884  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;doprnt.c: 1261: if((int)val < 0) {
 13888  0013D6  0100               	movlb	0	; () banked
 13889  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13890  0013DA  D016               	goto	l5478
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;doprnt.c: 1262: flag |= 0x03;
 13894  0013DC  0E03               	movlw	3
 13895  0013DE  0100               	movlb	0	; () banked
 13896  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;doprnt.c: 1263: val = -val;
 13900  0013E2  0100               	movlb	0	; () banked
 13901  0013E4  6DA5               	negf	printf@val& (0+255),b
 13902  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13903  0013E8  B0D8               	btfsc	status,0,c
 13904  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;doprnt.c: 1264: }
 13908                           ;doprnt.c: 1266: }
 13909  0013EC  D00D               	goto	l5478
 13910  0013EE                     l5474:
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;doprnt.c: 1268: else
 13914                           ;doprnt.c: 1273: {
 13915                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13916  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 13917  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13918  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 13919  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 13920                           
 13921                           ; BSR set to: 0
 13922  0013FE  0E02               	movlw	2
 13923  001400  0100               	movlb	0	; () banked
 13924  001402  27A1               	addwf	printf@ap& (0+255),f,b
 13925  001404  0E00               	movlw	0
 13926  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13927  001408                     l5478:
 13928                           
 13929                           ; BSR set to: 0
 13930                           ;doprnt.c: 1287: }
 13931                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13932  001408  0E01               	movlw	1
 13933  00140A  0100               	movlb	0	; () banked
 13934  00140C  6FA8               	movwf	printf@c& (0+255),b
 13935  00140E                     l5480:
 13936                           
 13937                           ; BSR set to: 0
 13938  00140E  0E05               	movlw	5
 13939  001410  0100               	movlb	0	; () banked
 13940  001412  19A8               	xorwf	printf@c& (0+255),w,b
 13941  001414  B4D8               	btfsc	status,2,c
 13942  001416  D019               	goto	l5492
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;doprnt.c: 1306: if(val < dpowers[c])
 13946                           
 13947                           ; BSR set to: 0
 13948                           
 13949                           ; BSR set to: 0
 13950  001418  0100               	movlb	0	; () banked
 13951  00141A  51A8               	movf	printf@c& (0+255),w,b
 13952  00141C  0D02               	mullw	2
 13953  00141E  0E26               	movlw	low _dpowers
 13954  001420  24F3               	addwf	prodl,w,c
 13955  001422  6EF6               	movwf	tblptrl,c
 13956  001424  0EFB               	movlw	high _dpowers
 13957  001426  20F4               	addwfc	prodh,w,c
 13958  001428  6EF7               	movwf	tblptrh,c
 13959  00142A                     	if	1	;There are 3 active tblptr bytes
 13960  00142A  6AF8               	clrf	tblptru,c
 13961  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 13962  00142E  22F8               	addwfc	tblptru,f,c
 13963  001430                     	endif
 13964  001430  0009               	tblrd		*+
 13965  001432  50F5               	movf	tablat,w,c
 13966  001434  0100               	movlb	0	; () banked
 13967  001436  5DA5               	subwf	printf@val& (0+255),w,b
 13968  001438  0009               	tblrd		*+
 13969  00143A  50F5               	movf	tablat,w,c
 13970  00143C  0100               	movlb	0	; () banked
 13971  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13972  001440  A0D8               	btfss	status,0,c
 13973  001442  D003               	goto	l5492
 13974                           
 13975                           ; BSR set to: 0
 13976                           
 13977                           ; BSR set to: 0
 13978                           
 13979                           ; BSR set to: 0
 13980                           ;doprnt.c: 1307: break;
 13981  001444  0100               	movlb	0	; () banked
 13982  001446  2BA8               	incf	printf@c& (0+255),f,b
 13983  001448  D7E2               	goto	l5480
 13984  00144A                     l5492:
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13988  00144A  0100               	movlb	0	; () banked
 13989  00144C  51A9               	movf	printf@width& (0+255),w,b
 13990  00144E  0100               	movlb	0	; () banked
 13991  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13992  001452  B4D8               	btfsc	status,2,c
 13993  001454  D00B               	goto	l5498
 13994                           
 13995                           ; BSR set to: 0
 13996  001456  C0A7  F09A         	movff	printf@flag,??_printf
 13997  00145A  0E03               	movlw	3
 13998  00145C  0100               	movlb	0	; () banked
 13999  00145E  179A               	andwf	??_printf& (0+255),f,b
 14000  001460  B4D8               	btfsc	status,2,c
 14001  001462  D004               	goto	l5498
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;doprnt.c: 1346: width--;
 14005  001464  0100               	movlb	0	; () banked
 14006  001466  07A9               	decf	printf@width& (0+255),f,b
 14007  001468  A0D8               	btfss	status,0,c
 14008  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14009  00146C                     l5498:
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;doprnt.c: 1381: if(width > c)
 14013  00146C  0E80               	movlw	128
 14014  00146E  0100               	movlb	0	; () banked
 14015  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14016  001472  0E7F               	movlw	127
 14017  001474  0100               	movlb	0	; () banked
 14018  001476  6F9A               	movwf	??_printf& (0+255),b
 14019  001478  0100               	movlb	0	; () banked
 14020  00147A  51A9               	movf	printf@width& (0+255),w,b
 14021  00147C  0100               	movlb	0	; () banked
 14022  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14023  001480  0100               	movlb	0	; () banked
 14024  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14025  001484  0A80               	xorlw	128
 14026  001486  0100               	movlb	0	; () banked
 14027  001488  599A               	subwfb	??_printf& (0+255),w,b
 14028  00148A  B0D8               	btfsc	status,0,c
 14029  00148C  D00B               	goto	l5502
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;doprnt.c: 1382: width -= c;
 14033  00148E  0100               	movlb	0	; () banked
 14034  001490  51A8               	movf	printf@c& (0+255),w,b
 14035  001492  0100               	movlb	0	; () banked
 14036  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14037  001496  0E00               	movlw	0
 14038  001498  0100               	movlb	0	; () banked
 14039  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14040  00149C  0EFF               	movlw	255
 14041  00149E  0100               	movlb	0	; () banked
 14042  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14043  0014A2  D005               	goto	l5504
 14044  0014A4                     l5502:
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;doprnt.c: 1383: else
 14048                           ;doprnt.c: 1384: width = 0;
 14049  0014A4  0E00               	movlw	0
 14050  0014A6  0100               	movlb	0	; () banked
 14051  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14052  0014AA  0E00               	movlw	0
 14053  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14054  0014AE                     l5504:
 14055                           
 14056                           ; BSR set to: 0
 14057                           ;doprnt.c: 1387: if(flag & 0x04) {
 14058  0014AE  0100               	movlb	0	; () banked
 14059  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14060  0014B2  D018               	goto	l5516
 14061                           
 14062                           ; BSR set to: 0
 14063                           ;doprnt.c: 1392: if(flag & 0x03)
 14064  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14065  0014B8  0E03               	movlw	3
 14066  0014BA  0100               	movlb	0	; () banked
 14067  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14068  0014BE  B4D8               	btfsc	status,2,c
 14069  0014C0  D003               	goto	l5510
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;doprnt.c: 1393: (putch('-') );
 14073  0014C2  0E2D               	movlw	45
 14074  0014C4  EC7B  F023         	call	_putch
 14075  0014C8                     l5510:
 14076                           
 14077                           ;doprnt.c: 1415: if(width)
 14078  0014C8  0100               	movlb	0	; () banked
 14079  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14080  0014CC  0100               	movlb	0	; () banked
 14081  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14082  0014D0  B4D8               	btfsc	status,2,c
 14083  0014D2  D025               	goto	l5526
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;doprnt.c: 1417: (putch('0') );
 14087                           
 14088                           ; BSR set to: 0
 14089                           
 14090                           ;doprnt.c: 1416: do
 14091  0014D4  0E30               	movlw	48
 14092  0014D6  EC7B  F023         	call	_putch
 14093                           
 14094                           ;doprnt.c: 1418: while(--width);
 14095  0014DA  0100               	movlb	0	; () banked
 14096  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14097  0014DE  A0D8               	btfss	status,0,c
 14098  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14099  0014E2  D7F2               	goto	l5510
 14100  0014E4                     l5516:
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;doprnt.c: 1422: {
 14104                           ;doprnt.c: 1424: if(width
 14105                           ;doprnt.c: 1428: )
 14106  0014E4  0100               	movlb	0	; () banked
 14107  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14108  0014E8  0100               	movlb	0	; () banked
 14109  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14110  0014EC  B4D8               	btfsc	status,2,c
 14111  0014EE  D00D               	goto	l5522
 14112  0014F0                     l5518:
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;doprnt.c: 1430: (putch(' ') );
 14116  0014F0  0E20               	movlw	32
 14117  0014F2  EC7B  F023         	call	_putch
 14118                           
 14119                           ;doprnt.c: 1431: while(--width);
 14120  0014F6  0100               	movlb	0	; () banked
 14121  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14122  0014FA  A0D8               	btfss	status,0,c
 14123  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14124  0014FE  0100               	movlb	0	; () banked
 14125  001500  51A9               	movf	printf@width& (0+255),w,b
 14126  001502  0100               	movlb	0	; () banked
 14127  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14128  001506  A4D8               	btfss	status,2,c
 14129  001508  D7F3               	goto	l5518
 14130  00150A                     l5522:
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;doprnt.c: 1438: if(flag & 0x03)
 14134  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14135  00150E  0E03               	movlw	3
 14136  001510  0100               	movlb	0	; () banked
 14137  001512  179A               	andwf	??_printf& (0+255),f,b
 14138  001514  B4D8               	btfsc	status,2,c
 14139  001516  D003               	goto	l5526
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;doprnt.c: 1439: (putch('-') );
 14143  001518  0E2D               	movlw	45
 14144  00151A  EC7B  F023         	call	_putch
 14145  00151E                     l5526:
 14146                           
 14147                           ;doprnt.c: 1469: }
 14148                           ;doprnt.c: 1472: prec = c;
 14149  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14150                           
 14151                           ;doprnt.c: 1474: while(prec--) {
 14152  001522  D02C               	goto	l5532
 14153  001524                     l5528:
 14154                           
 14155                           ;doprnt.c: 1478: {
 14156                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14157  001524  0100               	movlb	0	; () banked
 14158  001526  519E               	movf	printf@prec& (0+255),w,b
 14159  001528  0D02               	mullw	2
 14160  00152A  0E26               	movlw	low _dpowers
 14161  00152C  24F3               	addwf	prodl,w,c
 14162  00152E  6EF6               	movwf	tblptrl,c
 14163  001530  0EFB               	movlw	high _dpowers
 14164  001532  20F4               	addwfc	prodh,w,c
 14165  001534  6EF7               	movwf	tblptrh,c
 14166  001536                     	if	1	;There are 3 active tblptr bytes
 14167  001536  6AF8               	clrf	tblptru,c
 14168  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14169  00153A  22F8               	addwfc	tblptru,f,c
 14170  00153C                     	endif
 14171  00153C  0009               	tblrd		*+
 14172  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14173  001542  000A               	tblrd		*-
 14174  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14175  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14176  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14177  001550  ECCE  F01D         	call	___lwdiv	;wreg free
 14178  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14179  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14180  00155C  0E00               	movlw	0
 14181  00155E  0100               	movlb	0	; () banked
 14182  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14183  001562  0E0A               	movlw	10
 14184  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14185  001566  ECE7  F01E         	call	___lwmod	;wreg free
 14186  00156A  0100               	movlb	0	; () banked
 14187  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14188  00156E  0F30               	addlw	48
 14189  001570  0100               	movlb	0	; () banked
 14190  001572  6FA8               	movwf	printf@c& (0+255),b
 14191                           
 14192                           ; BSR set to: 0
 14193                           ;doprnt.c: 1523: }
 14194                           ;doprnt.c: 1524: (putch(c) );
 14195  001574  0100               	movlb	0	; () banked
 14196  001576  51A8               	movf	printf@c& (0+255),w,b
 14197  001578  EC7B  F023         	call	_putch
 14198  00157C                     l5532:
 14199  00157C  0100               	movlb	0	; () banked
 14200  00157E  079E               	decf	printf@prec& (0+255),f,b
 14201  001580  0100               	movlb	0	; () banked
 14202  001582  299E               	incf	printf@prec& (0+255),w,b
 14203  001584  A4D8               	btfss	status,2,c
 14204  001586  D7CE               	goto	l5528
 14205  001588                     l5534:
 14206  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14207  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14208  001590  0100               	movlb	0	; () banked
 14209  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14210  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14211  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14212  001596  6AF8               	clrf	tblptru,c
 14213  001598                     	endif
 14214  001598                     	if	0	;tblptru may be non-zero
 14215  001598                     	endif
 14216  001598  0008               	tblrd		*
 14217  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14218  00159E  0100               	movlb	0	; () banked
 14219  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14220  0015A2  B4D8               	btfsc	status,2,c
 14221  0015A4  0012               	return	
 14222  0015A6  D5EB               	goto	l5404
 14223  0015A8                     __end_of_printf:
 14224                           	opt stack 0
 14225                           tblptru	equ	0xFF8
 14226                           tblptrh	equ	0xFF7
 14227                           tblptrl	equ	0xFF6
 14228                           tablat	equ	0xFF5
 14229                           prodh	equ	0xFF4
 14230                           prodl	equ	0xFF3
 14231                           intcon	equ	0xFF2
 14232                           intcon2	equ	0xFF1
 14233                           intcon3	equ	0xFF0
 14234                           indf0	equ	0xFEF
 14235                           postinc0	equ	0xFEE
 14236                           fsr0h	equ	0xFEA
 14237                           fsr0l	equ	0xFE9
 14238                           wreg	equ	0xFE8
 14239                           postdec1	equ	0xFE5
 14240                           fsr1l	equ	0xFE1
 14241                           indf2	equ	0xFDF
 14242                           postinc2	equ	0xFDE
 14243                           postdec2	equ	0xFDD
 14244                           fsr2h	equ	0xFDA
 14245                           fsr2l	equ	0xFD9
 14246                           status	equ	0xFD8
 14247                           
 14248 ;; *************** function _putch *****************
 14249 ;; Defined at:
 14250 ;;		line 20 in file "lcd.c"
 14251 ;; Parameters:    Size  Location     Type
 14252 ;;  data            1    wreg     unsigned char 
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;  data            1    2[BANK0 ] unsigned char 
 14255 ;; Return value:  Size  Location     Type
 14256 ;;                  1    wreg      void 
 14257 ;; Registers used:
 14258 ;;		wreg, status,2, status,0, cstack
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;Total ram usage:        1 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; Hardware stack levels required when called:    8
 14271 ;; This function calls:
 14272 ;;		_lcdNibble
 14273 ;; This function is called by:
 14274 ;;		_printf
 14275 ;; This function uses a non-reentrant model
 14276 ;;
 14277                           
 14278                           	psect	text48
 14279  0046F6                     __ptext48:
 14280                           	opt stack 0
 14281  0046F6                     _putch:
 14282                           	opt stack 18
 14283                           
 14284                           ;incstack = 0
 14285                           ;putch@data stored from wreg
 14286  0046F6  0100               	movlb	0	; () banked
 14287  0046F8  6F82               	movwf	putch@data& (0+255),b
 14288                           
 14289                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14290  0046FA  848C               	bsf	3980,2,c	;volatile
 14291                           
 14292                           ;lcd.c: 22: lcdNibble(data);
 14293  0046FC  0100               	movlb	0	; () banked
 14294  0046FE  5182               	movf	putch@data& (0+255),w,b
 14295  004700  ECB3  F01E         	call	_lcdNibble
 14296  004704  0012               	return		;funcret
 14297  004706                     __end_of_putch:
 14298                           	opt stack 0
 14299                           tblptru	equ	0xFF8
 14300                           tblptrh	equ	0xFF7
 14301                           tblptrl	equ	0xFF6
 14302                           tablat	equ	0xFF5
 14303                           prodh	equ	0xFF4
 14304                           prodl	equ	0xFF3
 14305                           intcon	equ	0xFF2
 14306                           intcon2	equ	0xFF1
 14307                           intcon3	equ	0xFF0
 14308                           indf0	equ	0xFEF
 14309                           postinc0	equ	0xFEE
 14310                           fsr0h	equ	0xFEA
 14311                           fsr0l	equ	0xFE9
 14312                           wreg	equ	0xFE8
 14313                           postdec1	equ	0xFE5
 14314                           fsr1l	equ	0xFE1
 14315                           indf2	equ	0xFDF
 14316                           postinc2	equ	0xFDE
 14317                           postdec2	equ	0xFDD
 14318                           fsr2h	equ	0xFDA
 14319                           fsr2l	equ	0xFD9
 14320                           status	equ	0xFD8
 14321                           
 14322 ;; *************** function _isdigit *****************
 14323 ;; Defined at:
 14324 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14325 ;; Parameters:    Size  Location     Type
 14326 ;;  c               1    wreg     unsigned char 
 14327 ;; Auto vars:     Size  Location     Type
 14328 ;;  c               1    2[BANK0 ] unsigned char 
 14329 ;; Return value:  Size  Location     Type
 14330 ;;		None               void
 14331 ;; Registers used:
 14332 ;;		wreg, status,2, status,0
 14333 ;; Tracked objects:
 14334 ;;		On entry : 0/0
 14335 ;;		On exit  : 0/0
 14336 ;;		Unchanged: 0/0
 14337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14341 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;Total ram usage:        3 bytes
 14343 ;; Hardware stack levels used:    1
 14344 ;; Hardware stack levels required when called:    7
 14345 ;; This function calls:
 14346 ;;		Nothing
 14347 ;; This function is called by:
 14348 ;;		_printf
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           	psect	text49
 14353  00451C                     __ptext49:
 14354                           	opt stack 0
 14355  00451C                     _isdigit:
 14356                           	opt stack 19
 14357                           
 14358                           ;incstack = 0
 14359                           ;isdigit@c stored from wreg
 14360  00451C  0100               	movlb	0	; () banked
 14361  00451E  6F82               	movwf	isdigit@c& (0+255),b
 14362  004520  0E00               	movlw	0
 14363  004522  0100               	movlb	0	; () banked
 14364  004524  6F81               	movwf	_isdigit$1938& (0+255),b
 14365                           
 14366                           ; BSR set to: 0
 14367  004526  0E3A               	movlw	58
 14368  004528  0100               	movlb	0	; () banked
 14369  00452A  6182               	cpfslt	isdigit@c& (0+255),b
 14370  00452C  D007               	goto	l5258
 14371                           
 14372                           ; BSR set to: 0
 14373  00452E  0E2F               	movlw	47
 14374  004530  0100               	movlb	0	; () banked
 14375  004532  6582               	cpfsgt	isdigit@c& (0+255),b
 14376  004534  D003               	goto	l5258
 14377                           
 14378                           ; BSR set to: 0
 14379  004536  0E01               	movlw	1
 14380  004538  0100               	movlb	0	; () banked
 14381  00453A  6F81               	movwf	_isdigit$1938& (0+255),b
 14382  00453C                     l5258:
 14383                           
 14384                           ; BSR set to: 0
 14385  00453C  C081  F080         	movff	_isdigit$1938,??_isdigit
 14386  004540  0100               	movlb	0	; () banked
 14387  004542  3180               	rrcf	??_isdigit& (0+255),w,b
 14388  004544  0012               	return	
 14389  004546                     __end_of_isdigit:
 14390                           	opt stack 0
 14391                           tblptru	equ	0xFF8
 14392                           tblptrh	equ	0xFF7
 14393                           tblptrl	equ	0xFF6
 14394                           tablat	equ	0xFF5
 14395                           prodh	equ	0xFF4
 14396                           prodl	equ	0xFF3
 14397                           intcon	equ	0xFF2
 14398                           intcon2	equ	0xFF1
 14399                           intcon3	equ	0xFF0
 14400                           indf0	equ	0xFEF
 14401                           postinc0	equ	0xFEE
 14402                           fsr0h	equ	0xFEA
 14403                           fsr0l	equ	0xFE9
 14404                           wreg	equ	0xFE8
 14405                           postdec1	equ	0xFE5
 14406                           fsr1l	equ	0xFE1
 14407                           indf2	equ	0xFDF
 14408                           postinc2	equ	0xFDE
 14409                           postdec2	equ	0xFDD
 14410                           fsr2h	equ	0xFDA
 14411                           fsr2l	equ	0xFD9
 14412                           status	equ	0xFD8
 14413                           
 14414 ;; *************** function ___wmul *****************
 14415 ;; Defined at:
 14416 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14419 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14420 ;; Auto vars:     Size  Location     Type
 14421 ;;  product         2    4[BANK0 ] unsigned int 
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  2    0[BANK0 ] unsigned int 
 14424 ;; Registers used:
 14425 ;;		wreg, status,2, status,0, prodl, prodh
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14434 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14435 ;;Total ram usage:        6 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    7
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_printf
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           	psect	text50
 14446  004250                     __ptext50:
 14447                           	opt stack 0
 14448  004250                     ___wmul:
 14449                           	opt stack 19
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;incstack = 0
 14453  004250  0100               	movlb	0	; () banked
 14454  004252  5180               	movf	___wmul@multiplier& (0+255),w,b
 14455  004254  0100               	movlb	0	; () banked
 14456  004256  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14457  004258  CFF3 F084          	movff	prodl,___wmul@product
 14458  00425C  CFF4 F085          	movff	prodh,___wmul@product+1
 14459  004260  0100               	movlb	0	; () banked
 14460  004262  5180               	movf	___wmul@multiplier& (0+255),w,b
 14461  004264  0100               	movlb	0	; () banked
 14462  004266  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14463  004268  50F3               	movf	prodl,w,c
 14464  00426A  0100               	movlb	0	; () banked
 14465  00426C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14466  00426E  0100               	movlb	0	; () banked
 14467  004270  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14468  004272  0100               	movlb	0	; () banked
 14469  004274  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14470  004276  50F3               	movf	prodl,w,c
 14471  004278  0100               	movlb	0	; () banked
 14472  00427A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14473                           
 14474                           ; BSR set to: 0
 14475  00427C  C084  F080         	movff	___wmul@product,?___wmul
 14476  004280  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14477  004284  0012               	return	
 14478  004286                     __end_of___wmul:
 14479                           	opt stack 0
 14480                           tblptru	equ	0xFF8
 14481                           tblptrh	equ	0xFF7
 14482                           tblptrl	equ	0xFF6
 14483                           tablat	equ	0xFF5
 14484                           prodh	equ	0xFF4
 14485                           prodl	equ	0xFF3
 14486                           intcon	equ	0xFF2
 14487                           intcon2	equ	0xFF1
 14488                           intcon3	equ	0xFF0
 14489                           indf0	equ	0xFEF
 14490                           postinc0	equ	0xFEE
 14491                           fsr0h	equ	0xFEA
 14492                           fsr0l	equ	0xFE9
 14493                           wreg	equ	0xFE8
 14494                           postdec1	equ	0xFE5
 14495                           fsr1l	equ	0xFE1
 14496                           indf2	equ	0xFDF
 14497                           postinc2	equ	0xFDE
 14498                           postdec2	equ	0xFDD
 14499                           fsr2h	equ	0xFDA
 14500                           fsr2l	equ	0xFD9
 14501                           status	equ	0xFD8
 14502                           
 14503 ;; *************** function ___lwmod *****************
 14504 ;; Defined at:
 14505 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14506 ;; Parameters:    Size  Location     Type
 14507 ;;  dividend        2    7[BANK0 ] unsigned int 
 14508 ;;  divisor         2    9[BANK0 ] unsigned int 
 14509 ;; Auto vars:     Size  Location     Type
 14510 ;;  counter         1   11[BANK0 ] unsigned char 
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  2    7[BANK0 ] unsigned int 
 14513 ;; Registers used:
 14514 ;;		wreg, status,2, status,0
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14520 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;Total ram usage:        5 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; Hardware stack levels required when called:    7
 14527 ;; This function calls:
 14528 ;;		Nothing
 14529 ;; This function is called by:
 14530 ;;		_printf
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           	psect	text51
 14535  003DCE                     __ptext51:
 14536                           	opt stack 0
 14537  003DCE                     ___lwmod:
 14538                           	opt stack 19
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;incstack = 0
 14542  003DCE  0100               	movlb	0	; () banked
 14543  003DD0  5189               	movf	___lwmod@divisor& (0+255),w,b
 14544  003DD2  0100               	movlb	0	; () banked
 14545  003DD4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14546  003DD6  B4D8               	btfsc	status,2,c
 14547  003DD8  D026               	goto	l1705
 14548                           
 14549                           ; BSR set to: 0
 14550  003DDA  0E01               	movlw	1
 14551  003DDC  0100               	movlb	0	; () banked
 14552  003DDE  6F8B               	movwf	___lwmod@counter& (0+255),b
 14553  003DE0  D006               	goto	l5296
 14554  003DE2                     l5294:
 14555                           
 14556                           ; BSR set to: 0
 14557  003DE2  0100               	movlb	0	; () banked
 14558  003DE4  90D8               	bcf	status,0,c
 14559  003DE6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14560  003DE8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14561  003DEA  0100               	movlb	0	; () banked
 14562  003DEC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14563  003DEE                     l5296:
 14564                           
 14565                           ; BSR set to: 0
 14566  003DEE  0100               	movlb	0	; () banked
 14567  003DF0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14568  003DF2  D7F7               	goto	l5294
 14569  003DF4                     l5298:
 14570                           
 14571                           ; BSR set to: 0
 14572  003DF4  0100               	movlb	0	; () banked
 14573  003DF6  5189               	movf	___lwmod@divisor& (0+255),w,b
 14574  003DF8  0100               	movlb	0	; () banked
 14575  003DFA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14576  003DFC  0100               	movlb	0	; () banked
 14577  003DFE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14578  003E00  0100               	movlb	0	; () banked
 14579  003E02  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14580  003E04  A0D8               	btfss	status,0,c
 14581  003E06  D008               	goto	l5302
 14582                           
 14583                           ; BSR set to: 0
 14584  003E08  0100               	movlb	0	; () banked
 14585  003E0A  5189               	movf	___lwmod@divisor& (0+255),w,b
 14586  003E0C  0100               	movlb	0	; () banked
 14587  003E0E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14588  003E10  0100               	movlb	0	; () banked
 14589  003E12  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14590  003E14  0100               	movlb	0	; () banked
 14591  003E16  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14592  003E18                     l5302:
 14593                           
 14594                           ; BSR set to: 0
 14595  003E18  0100               	movlb	0	; () banked
 14596  003E1A  90D8               	bcf	status,0,c
 14597  003E1C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14598  003E1E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14599                           
 14600                           ; BSR set to: 0
 14601  003E20  0100               	movlb	0	; () banked
 14602  003E22  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14603  003E24  D7E7               	goto	l5298
 14604  003E26                     l1705:
 14605                           
 14606                           ; BSR set to: 0
 14607  003E26  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14608  003E2A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14609                           
 14610                           ; BSR set to: 0
 14611  003E2E  0012               	return		;funcret
 14612  003E30                     __end_of___lwmod:
 14613                           	opt stack 0
 14614                           tblptru	equ	0xFF8
 14615                           tblptrh	equ	0xFF7
 14616                           tblptrl	equ	0xFF6
 14617                           tablat	equ	0xFF5
 14618                           prodh	equ	0xFF4
 14619                           prodl	equ	0xFF3
 14620                           intcon	equ	0xFF2
 14621                           intcon2	equ	0xFF1
 14622                           intcon3	equ	0xFF0
 14623                           indf0	equ	0xFEF
 14624                           postinc0	equ	0xFEE
 14625                           fsr0h	equ	0xFEA
 14626                           fsr0l	equ	0xFE9
 14627                           wreg	equ	0xFE8
 14628                           postdec1	equ	0xFE5
 14629                           fsr1l	equ	0xFE1
 14630                           indf2	equ	0xFDF
 14631                           postinc2	equ	0xFDE
 14632                           postdec2	equ	0xFDD
 14633                           fsr2h	equ	0xFDA
 14634                           fsr2l	equ	0xFD9
 14635                           status	equ	0xFD8
 14636                           
 14637 ;; *************** function ___lwdiv *****************
 14638 ;; Defined at:
 14639 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;  dividend        2    0[BANK0 ] unsigned int 
 14642 ;;  divisor         2    2[BANK0 ] unsigned int 
 14643 ;; Auto vars:     Size  Location     Type
 14644 ;;  quotient        2    4[BANK0 ] unsigned int 
 14645 ;;  counter         1    6[BANK0 ] unsigned char 
 14646 ;; Return value:  Size  Location     Type
 14647 ;;                  2    0[BANK0 ] unsigned int 
 14648 ;; Registers used:
 14649 ;;		wreg, status,2, status,0
 14650 ;; Tracked objects:
 14651 ;;		On entry : 0/0
 14652 ;;		On exit  : 0/0
 14653 ;;		Unchanged: 0/0
 14654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14655 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14656 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14658 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14659 ;;Total ram usage:        7 bytes
 14660 ;; Hardware stack levels used:    1
 14661 ;; Hardware stack levels required when called:    7
 14662 ;; This function calls:
 14663 ;;		Nothing
 14664 ;; This function is called by:
 14665 ;;		_printf
 14666 ;; This function uses a non-reentrant model
 14667 ;;
 14668                           
 14669                           	psect	text52
 14670  003B9C                     __ptext52:
 14671                           	opt stack 0
 14672  003B9C                     ___lwdiv:
 14673                           	opt stack 19
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;incstack = 0
 14677  003B9C  0E00               	movlw	0
 14678  003B9E  0100               	movlb	0	; () banked
 14679  003BA0  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14680  003BA2  0E00               	movlw	0
 14681  003BA4  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14682                           
 14683                           ; BSR set to: 0
 14684  003BA6  0100               	movlb	0	; () banked
 14685  003BA8  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14686  003BAA  0100               	movlb	0	; () banked
 14687  003BAC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14688  003BAE  B4D8               	btfsc	status,2,c
 14689  003BB0  D02C               	goto	l1695
 14690                           
 14691                           ; BSR set to: 0
 14692  003BB2  0E01               	movlw	1
 14693  003BB4  0100               	movlb	0	; () banked
 14694  003BB6  6F86               	movwf	___lwdiv@counter& (0+255),b
 14695  003BB8  D006               	goto	l5276
 14696  003BBA                     l5274:
 14697                           
 14698                           ; BSR set to: 0
 14699  003BBA  0100               	movlb	0	; () banked
 14700  003BBC  90D8               	bcf	status,0,c
 14701  003BBE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14702  003BC0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14703  003BC2  0100               	movlb	0	; () banked
 14704  003BC4  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14705  003BC6                     l5276:
 14706                           
 14707                           ; BSR set to: 0
 14708  003BC6  0100               	movlb	0	; () banked
 14709  003BC8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14710  003BCA  D7F7               	goto	l5274
 14711  003BCC                     l5278:
 14712                           
 14713                           ; BSR set to: 0
 14714  003BCC  0100               	movlb	0	; () banked
 14715  003BCE  90D8               	bcf	status,0,c
 14716  003BD0  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14717  003BD2  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14718                           
 14719                           ; BSR set to: 0
 14720  003BD4  0100               	movlb	0	; () banked
 14721  003BD6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14722  003BD8  0100               	movlb	0	; () banked
 14723  003BDA  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14724  003BDC  0100               	movlb	0	; () banked
 14725  003BDE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14726  003BE0  0100               	movlb	0	; () banked
 14727  003BE2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14728  003BE4  A0D8               	btfss	status,0,c
 14729  003BE6  D00A               	goto	l5286
 14730                           
 14731                           ; BSR set to: 0
 14732  003BE8  0100               	movlb	0	; () banked
 14733  003BEA  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14734  003BEC  0100               	movlb	0	; () banked
 14735  003BEE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14736  003BF0  0100               	movlb	0	; () banked
 14737  003BF2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14738  003BF4  0100               	movlb	0	; () banked
 14739  003BF6  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14740                           
 14741                           ; BSR set to: 0
 14742  003BF8  0100               	movlb	0	; () banked
 14743  003BFA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14744  003BFC                     l5286:
 14745                           
 14746                           ; BSR set to: 0
 14747  003BFC  0100               	movlb	0	; () banked
 14748  003BFE  90D8               	bcf	status,0,c
 14749  003C00  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14750  003C02  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14751                           
 14752                           ; BSR set to: 0
 14753  003C04  0100               	movlb	0	; () banked
 14754  003C06  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14755  003C08  D7E1               	goto	l5278
 14756  003C0A                     l1695:
 14757                           
 14758                           ; BSR set to: 0
 14759  003C0A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14760  003C0E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14761                           
 14762                           ; BSR set to: 0
 14763  003C12  0012               	return		;funcret
 14764  003C14                     __end_of___lwdiv:
 14765                           	opt stack 0
 14766                           tblptru	equ	0xFF8
 14767                           tblptrh	equ	0xFF7
 14768                           tblptrl	equ	0xFF6
 14769                           tablat	equ	0xFF5
 14770                           prodh	equ	0xFF4
 14771                           prodl	equ	0xFF3
 14772                           intcon	equ	0xFF2
 14773                           intcon2	equ	0xFF1
 14774                           intcon3	equ	0xFF0
 14775                           indf0	equ	0xFEF
 14776                           postinc0	equ	0xFEE
 14777                           fsr0h	equ	0xFEA
 14778                           fsr0l	equ	0xFE9
 14779                           wreg	equ	0xFE8
 14780                           postdec1	equ	0xFE5
 14781                           fsr1l	equ	0xFE1
 14782                           indf2	equ	0xFDF
 14783                           postinc2	equ	0xFDE
 14784                           postdec2	equ	0xFDD
 14785                           fsr2h	equ	0xFDA
 14786                           fsr2l	equ	0xFD9
 14787                           status	equ	0xFD8
 14788                           
 14789 ;; *************** function _lcdInst *****************
 14790 ;; Defined at:
 14791 ;;		line 15 in file "lcd.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;  data            1    wreg     unsigned char 
 14794 ;; Auto vars:     Size  Location     Type
 14795 ;;  data            1    2[BANK0 ] unsigned char 
 14796 ;; Return value:  Size  Location     Type
 14797 ;;                  1    wreg      void 
 14798 ;; Registers used:
 14799 ;;		wreg, status,2, status,0, cstack
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/0
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;Total ram usage:        1 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    8
 14812 ;; This function calls:
 14813 ;;		_lcdNibble
 14814 ;; This function is called by:
 14815 ;;		_UI
 14816 ;;		_change_state_to_menu_start
 14817 ;;		_change_state_to_menu_12
 14818 ;;		_change_state_to_menu_22
 14819 ;;		_initLCD
 14820 ;;		_printRTC
 14821 ;;		_Loading
 14822 ;;		_EEPROM_write
 14823 ;;		_Test
 14824 ;;		_algorithmTest
 14825 ;;		_sensorTest
 14826 ;;		_actuatorTest
 14827 ;;		_BothServos
 14828 ;;		_PortTestA5
 14829 ;;		_SolenoidTestA5
 14830 ;;		_ToggleTestA5
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           	psect	text53
 14835  004706                     __ptext53:
 14836                           	opt stack 0
 14837  004706                     _lcdInst:
 14838                           	opt stack 20
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;incstack = 0
 14842                           ;lcdInst@data stored from wreg
 14843  004706  0100               	movlb	0	; () banked
 14844  004708  6F82               	movwf	lcdInst@data& (0+255),b
 14845                           
 14846                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14847  00470A  948C               	bcf	3980,2,c	;volatile
 14848                           
 14849                           ;lcd.c: 17: lcdNibble(data);
 14850  00470C  0100               	movlb	0	; () banked
 14851  00470E  5182               	movf	lcdInst@data& (0+255),w,b
 14852  004710  ECB3  F01E         	call	_lcdNibble
 14853  004714  0012               	return		;funcret
 14854  004716                     __end_of_lcdInst:
 14855                           	opt stack 0
 14856                           tblptru	equ	0xFF8
 14857                           tblptrh	equ	0xFF7
 14858                           tblptrl	equ	0xFF6
 14859                           tablat	equ	0xFF5
 14860                           prodh	equ	0xFF4
 14861                           prodl	equ	0xFF3
 14862                           intcon	equ	0xFF2
 14863                           intcon2	equ	0xFF1
 14864                           intcon3	equ	0xFF0
 14865                           indf0	equ	0xFEF
 14866                           postinc0	equ	0xFEE
 14867                           fsr0h	equ	0xFEA
 14868                           fsr0l	equ	0xFE9
 14869                           wreg	equ	0xFE8
 14870                           postdec1	equ	0xFE5
 14871                           fsr1l	equ	0xFE1
 14872                           indf2	equ	0xFDF
 14873                           postinc2	equ	0xFDE
 14874                           postdec2	equ	0xFDD
 14875                           fsr2h	equ	0xFDA
 14876                           fsr2l	equ	0xFD9
 14877                           status	equ	0xFD8
 14878                           
 14879 ;; *************** function _lcdNibble *****************
 14880 ;; Defined at:
 14881 ;;		line 25 in file "lcd.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  data            1    wreg     unsigned char 
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;  data            1    1[BANK0 ] unsigned char 
 14886 ;;  temp            1    0[BANK0 ] unsigned char 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;                  1    wreg      void 
 14889 ;; Registers used:
 14890 ;;		wreg, status,2, status,0
 14891 ;; Tracked objects:
 14892 ;;		On entry : 0/0
 14893 ;;		On exit  : 0/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;Total ram usage:        2 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    7
 14903 ;; This function calls:
 14904 ;;		Nothing
 14905 ;; This function is called by:
 14906 ;;		_lcdInst
 14907 ;;		_putch
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text54
 14912  003D66                     __ptext54:
 14913                           	opt stack 0
 14914  003D66                     _lcdNibble:
 14915                           	opt stack 20
 14916                           
 14917                           ;incstack = 0
 14918                           ;lcdNibble@data stored from wreg
 14919  003D66  0100               	movlb	0	; () banked
 14920  003D68  6F81               	movwf	lcdNibble@data& (0+255),b
 14921                           
 14922                           ;lcd.c: 27: char temp = data & 0xF0;
 14923  003D6A  0100               	movlb	0	; () banked
 14924  003D6C  5181               	movf	lcdNibble@data& (0+255),w,b
 14925  003D6E  0BF0               	andlw	240
 14926  003D70  0100               	movlb	0	; () banked
 14927  003D72  6F80               	movwf	lcdNibble@temp& (0+255),b
 14928                           
 14929                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14930  003D74  508C               	movf	3980,w,c	;volatile
 14931  003D76  0B0F               	andlw	15
 14932  003D78  6E8C               	movwf	3980,c	;volatile
 14933                           
 14934                           ;lcd.c: 29: LATD = temp | LATD;
 14935  003D7A  0100               	movlb	0	; () banked
 14936  003D7C  5180               	movf	lcdNibble@temp& (0+255),w,b
 14937  003D7E  108C               	iorwf	3980,w,c	;volatile
 14938  003D80  6E8C               	movwf	3980,c	;volatile
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14942  003D82  868C               	bsf	3980,3,c	;volatile
 14943                           
 14944                           ; BSR set to: 0
 14945                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14946  003D84  0E42               	movlw	66
 14947  003D86                     u8157:
 14948  003D86  2EE8               	decfsz	wreg,f,c
 14949  003D88  D7FE               	bra	u8157
 14950  003D8A  D000               	nop2	
 14951                           
 14952                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14953  003D8C  968C               	bcf	3980,3,c	;volatile
 14954                           
 14955                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14956  003D8E  0E42               	movlw	66
 14957  003D90                     u8167:
 14958  003D90  2EE8               	decfsz	wreg,f,c
 14959  003D92  D7FE               	bra	u8167
 14960  003D94  D000               	nop2	
 14961                           
 14962                           ;lcd.c: 36: data = data << 4;
 14963  003D96  0100               	movlb	0	; () banked
 14964  003D98  3981               	swapf	lcdNibble@data& (0+255),w,b
 14965  003D9A  0BF0               	andlw	240
 14966  003D9C  0100               	movlb	0	; () banked
 14967  003D9E  6F81               	movwf	lcdNibble@data& (0+255),b
 14968                           
 14969                           ;lcd.c: 38: temp = data & 0xF0;
 14970  003DA0  0100               	movlb	0	; () banked
 14971  003DA2  5181               	movf	lcdNibble@data& (0+255),w,b
 14972  003DA4  0BF0               	andlw	240
 14973  003DA6  0100               	movlb	0	; () banked
 14974  003DA8  6F80               	movwf	lcdNibble@temp& (0+255),b
 14975                           
 14976                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14977  003DAA  508C               	movf	3980,w,c	;volatile
 14978  003DAC  0B0F               	andlw	15
 14979  003DAE  6E8C               	movwf	3980,c	;volatile
 14980                           
 14981                           ;lcd.c: 40: LATD = temp | LATD;
 14982  003DB0  0100               	movlb	0	; () banked
 14983  003DB2  5180               	movf	lcdNibble@temp& (0+255),w,b
 14984  003DB4  108C               	iorwf	3980,w,c	;volatile
 14985  003DB6  6E8C               	movwf	3980,c	;volatile
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14989  003DB8  868C               	bsf	3980,3,c	;volatile
 14990                           
 14991                           ; BSR set to: 0
 14992                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14993  003DBA  0E42               	movlw	66
 14994  003DBC                     u8177:
 14995  003DBC  2EE8               	decfsz	wreg,f,c
 14996  003DBE  D7FE               	bra	u8177
 14997  003DC0  D000               	nop2	
 14998                           
 14999                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15000  003DC2  968C               	bcf	3980,3,c	;volatile
 15001                           
 15002                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15003  003DC4  0E42               	movlw	66
 15004  003DC6                     u8187:
 15005  003DC6  2EE8               	decfsz	wreg,f,c
 15006  003DC8  D7FE               	bra	u8187
 15007  003DCA  D000               	nop2	
 15008  003DCC  0012               	return		;funcret
 15009  003DCE                     __end_of_lcdNibble:
 15010                           	opt stack 0
 15011                           tblptru	equ	0xFF8
 15012                           tblptrh	equ	0xFF7
 15013                           tblptrl	equ	0xFF6
 15014                           tablat	equ	0xFF5
 15015                           prodh	equ	0xFF4
 15016                           prodl	equ	0xFF3
 15017                           intcon	equ	0xFF2
 15018                           intcon2	equ	0xFF1
 15019                           intcon3	equ	0xFF0
 15020                           indf0	equ	0xFEF
 15021                           postinc0	equ	0xFEE
 15022                           fsr0h	equ	0xFEA
 15023                           fsr0l	equ	0xFE9
 15024                           wreg	equ	0xFE8
 15025                           postdec1	equ	0xFE5
 15026                           fsr1l	equ	0xFE1
 15027                           indf2	equ	0xFDF
 15028                           postinc2	equ	0xFDE
 15029                           postdec2	equ	0xFDD
 15030                           fsr2h	equ	0xFDA
 15031                           fsr2l	equ	0xFD9
 15032                           status	equ	0xFD8
 15033                           
 15034 ;; *************** function _initServos *****************
 15035 ;; Defined at:
 15036 ;;		line 263 in file "sort.c"
 15037 ;; Parameters:    Size  Location     Type
 15038 ;;		None
 15039 ;; Auto vars:     Size  Location     Type
 15040 ;;		None
 15041 ;; Return value:  Size  Location     Type
 15042 ;;                  1    wreg      void 
 15043 ;; Registers used:
 15044 ;;		wreg, status,2, status,0, cstack
 15045 ;; Tracked objects:
 15046 ;;		On entry : 0/0
 15047 ;;		On exit  : 0/0
 15048 ;;		Unchanged: 0/0
 15049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15054 ;;Total ram usage:        1 bytes
 15055 ;; Hardware stack levels used:    1
 15056 ;; Hardware stack levels required when called:    8
 15057 ;; This function calls:
 15058 ;;		_updateServoPosition
 15059 ;; This function is called by:
 15060 ;;		_Loading
 15061 ;;		_BothServos
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           	psect	text55
 15066  003EEC                     __ptext55:
 15067                           	opt stack 0
 15068  003EEC                     _initServos:
 15069                           	opt stack 20
 15070                           
 15071                           ;sort.c: 264: updateServoPosition(1200, 1);
 15072                           
 15073                           ;incstack = 0
 15074  003EEC  0E04               	movlw	4
 15075  003EEE  0100               	movlb	0	; () banked
 15076  003EF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15077  003EF2  0EB0               	movlw	176
 15078  003EF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15079  003EF6  0E00               	movlw	0
 15080  003EF8  0100               	movlb	0	; () banked
 15081  003EFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15082  003EFC  0E01               	movlw	1
 15083  003EFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15084  003F00  EC0A  F01E         	call	_updateServoPosition	;wreg free
 15085                           
 15086                           ;sort.c: 265: updateServoPosition(1190, 3);
 15087  003F04  0E04               	movlw	4
 15088  003F06  0100               	movlb	0	; () banked
 15089  003F08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15090  003F0A  0EA6               	movlw	166
 15091  003F0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15092  003F0E  0E00               	movlw	0
 15093  003F10  0100               	movlb	0	; () banked
 15094  003F12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15095  003F14  0E03               	movlw	3
 15096  003F16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15097  003F18  EC0A  F01E         	call	_updateServoPosition	;wreg free
 15098                           
 15099                           ;sort.c: 266: TMR1ON = 1;
 15100  003F1C  80CD               	bsf	4045,0,c	;volatile
 15101                           
 15102                           ;sort.c: 267: was_low_1 = 0;
 15103  003F1E  0E00               	movlw	0
 15104  003F20  6E7A               	movwf	_was_low_1+1,c	;volatile
 15105  003F22  0E00               	movlw	0
 15106  003F24  6E79               	movwf	_was_low_1,c	;volatile
 15107                           
 15108                           ;sort.c: 268: _delay((unsigned long)((5)*(32000000/4000.0)));
 15109  003F26  0E34               	movlw	52
 15110  003F28  0100               	movlb	0	; () banked
 15111  003F2A  6F88               	movwf	??_initServos& (0+255),b
 15112  003F2C  0EF1               	movlw	241
 15113  003F2E                     u8197:
 15114  003F2E  2EE8               	decfsz	wreg,f,c
 15115  003F30  D7FE               	bra	u8197
 15116  003F32  2F88               	decfsz	??_initServos& (0+255),f,b
 15117  003F34  D7FC               	bra	u8197
 15118  003F36  D000               	nop2	
 15119                           
 15120                           ;sort.c: 269: TMR3ON = 1;
 15121  003F38  80B1               	bsf	4017,0,c	;volatile
 15122                           
 15123                           ;sort.c: 270: was_low_3 = 0;
 15124  003F3A  0E00               	movlw	0
 15125  003F3C  6E7C               	movwf	_was_low_3+1,c	;volatile
 15126  003F3E  0E00               	movlw	0
 15127  003F40  6E7B               	movwf	_was_low_3,c	;volatile
 15128                           
 15129                           ;sort.c: 271: LATCbits.LATC0 = 1;
 15130  003F42  808B               	bsf	3979,0,c	;volatile
 15131  003F44  0012               	return		;funcret
 15132  003F46                     __end_of_initServos:
 15133                           	opt stack 0
 15134                           tblptru	equ	0xFF8
 15135                           tblptrh	equ	0xFF7
 15136                           tblptrl	equ	0xFF6
 15137                           tablat	equ	0xFF5
 15138                           prodh	equ	0xFF4
 15139                           prodl	equ	0xFF3
 15140                           intcon	equ	0xFF2
 15141                           intcon2	equ	0xFF1
 15142                           intcon3	equ	0xFF0
 15143                           indf0	equ	0xFEF
 15144                           postinc0	equ	0xFEE
 15145                           fsr0h	equ	0xFEA
 15146                           fsr0l	equ	0xFE9
 15147                           wreg	equ	0xFE8
 15148                           postdec1	equ	0xFE5
 15149                           fsr1l	equ	0xFE1
 15150                           indf2	equ	0xFDF
 15151                           postinc2	equ	0xFDE
 15152                           postdec2	equ	0xFDD
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _updateServoPosition *****************
 15158 ;; Defined at:
 15159 ;;		line 313 in file "sort.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;  time_us         2    0[BANK0 ] int 
 15162 ;;  timer           2    2[BANK0 ] int 
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;  my_time         2    6[BANK0 ] unsigned int 
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      void 
 15167 ;; Registers used:
 15168 ;;		wreg, status,2, status,0
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15178 ;;Total ram usage:        8 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:    7
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_Distribution
 15185 ;;		_initServos
 15186 ;;		_actuatorTest
 15187 ;;		_BothServos
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           	psect	text56
 15192  003C14                     __ptext56:
 15193                           	opt stack 0
 15194  003C14                     _updateServoPosition:
 15195                           	opt stack 20
 15196                           
 15197                           ;sort.c: 314: unsigned int my_time = 65535 - time_us;
 15198                           
 15199                           ;incstack = 0
 15200  003C14  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15201  003C18  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15202  003C1C  0100               	movlb	0	; () banked
 15203  003C1E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15204  003C20  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15205  003C22  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15206  003C24  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15207  003C26  0EFF               	movlw	255
 15208  003C28  0100               	movlb	0	; () banked
 15209  003C2A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15210  003C2C  0100               	movlb	0	; () banked
 15211  003C2E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15212  003C30  0EFF               	movlw	255
 15213  003C32  0100               	movlb	0	; () banked
 15214  003C34  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15215  003C36  0100               	movlb	0	; () banked
 15216  003C38  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15217                           
 15218                           ;sort.c: 315: switch(timer){
 15219  003C3A  D015               	goto	l5576
 15220  003C3C                     l5574:
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;sort.c: 317: servoTimes[0] = my_time >> 8;
 15224  003C3C  0100               	movlb	0	; () banked
 15225  003C3E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15226  003C40  0101               	movlb	1	; () banked
 15227  003C42  6F1C               	movwf	_servoTimes& (0+255),b
 15228  003C44  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15229                           
 15230                           ;sort.c: 318: servoTimes[1] = my_time & 0xFF;
 15231  003C46  0100               	movlb	0	; () banked
 15232  003C48  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15233  003C4A  0101               	movlb	1	; () banked
 15234  003C4C  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15235  003C4E  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15236  003C50                     l783:
 15237                           
 15238                           ;sort.c: 320: servoTimes[2] = my_time >> 8;
 15239  003C50  0100               	movlb	0	; () banked
 15240  003C52  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15241  003C54  0101               	movlb	1	; () banked
 15242  003C56  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15243  003C58  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15244                           
 15245                           ;sort.c: 321: servoTimes[3] = my_time & 0xFF;
 15246  003C5A  0100               	movlb	0	; () banked
 15247  003C5C  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15248  003C5E  0101               	movlb	1	; () banked
 15249  003C60  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15250  003C62  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15251                           
 15252                           ;sort.c: 322: }
 15253  003C64  0012               	return	
 15254  003C66                     l5576:
 15255  003C66  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15256  003C6A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15257                           
 15258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15259                           ; Switch size 1, requested type "space"
 15260                           ; Number of cases is 1, Range of values is 0 to 0
 15261                           ; switch strategies available:
 15262                           ; Name         Instructions Cycles
 15263                           ; simple_byte            4     3 (average)
 15264                           ;	Chosen strategy is simple_byte
 15265  003C6E  0100               	movlb	0	; () banked
 15266  003C70  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15267  003C72  0A00               	xorlw	0	; case 0
 15268  003C74  A4D8               	btfss	status,2,c
 15269  003C76  0012               	return	
 15270                           
 15271                           ; BSR set to: 0
 15272                           ; Switch size 1, requested type "space"
 15273                           ; Number of cases is 2, Range of values is 1 to 3
 15274                           ; switch strategies available:
 15275                           ; Name         Instructions Cycles
 15276                           ; simple_byte            7     4 (average)
 15277                           ;	Chosen strategy is simple_byte
 15278  003C78  0100               	movlb	0	; () banked
 15279  003C7A  5184               	movf	??_updateServoPosition& (0+255),w,b
 15280  003C7C  0A01               	xorlw	1	; case 1
 15281  003C7E  B4D8               	btfsc	status,2,c
 15282  003C80  D7DD               	goto	l5574
 15283  003C82  0A02               	xorlw	2	; case 3
 15284  003C84  A4D8               	btfss	status,2,c
 15285  003C86  0012               	return	
 15286  003C88  D7E3               	goto	l783
 15287  003C8A                     __end_of_updateServoPosition:
 15288                           	opt stack 0
 15289                           tblptru	equ	0xFF8
 15290                           tblptrh	equ	0xFF7
 15291                           tblptrl	equ	0xFF6
 15292                           tablat	equ	0xFF5
 15293                           prodh	equ	0xFF4
 15294                           prodl	equ	0xFF3
 15295                           intcon	equ	0xFF2
 15296                           intcon2	equ	0xFF1
 15297                           intcon3	equ	0xFF0
 15298                           indf0	equ	0xFEF
 15299                           postinc0	equ	0xFEE
 15300                           fsr0h	equ	0xFEA
 15301                           fsr0l	equ	0xFE9
 15302                           wreg	equ	0xFE8
 15303                           postdec1	equ	0xFE5
 15304                           fsr1l	equ	0xFE1
 15305                           indf2	equ	0xFDF
 15306                           postinc2	equ	0xFDE
 15307                           postdec2	equ	0xFDD
 15308                           fsr2h	equ	0xFDA
 15309                           fsr2l	equ	0xFD9
 15310                           status	equ	0xFD8
 15311                           
 15312 ;; *************** function _handler *****************
 15313 ;; Defined at:
 15314 ;;		line 16 in file "interruptHandler.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;		None
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;		None
 15319 ;; Return value:  Size  Location     Type
 15320 ;;                  1    wreg      void 
 15321 ;; Registers used:
 15322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15330 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15331 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15332 ;;Total ram usage:       16 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:    6
 15335 ;; This function calls:
 15336 ;;		_printSortTimer
 15337 ;;		_updateMenu
 15338 ;; This function is called by:
 15339 ;;		Interrupt level 2
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           	psect	intcode
 15344  000008                     __pintcode:
 15345                           	opt stack 0
 15346  000008                     _handler:
 15347                           	opt stack 18
 15348                           
 15349                           ;incstack = 0
 15350  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15351  00000A  ED10  F015         	call	int_func,f	;refresh shadow registers
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           intcon3	equ	0xFF0
 15361                           indf0	equ	0xFEF
 15362                           postinc0	equ	0xFEE
 15363                           fsr0h	equ	0xFEA
 15364                           fsr0l	equ	0xFE9
 15365                           wreg	equ	0xFE8
 15366                           postdec1	equ	0xFE5
 15367                           fsr1l	equ	0xFE1
 15368                           indf2	equ	0xFDF
 15369                           postinc2	equ	0xFDE
 15370                           postdec2	equ	0xFDD
 15371                           fsr2h	equ	0xFDA
 15372                           fsr2l	equ	0xFD9
 15373                           status	equ	0xFD8
 15374                           
 15375                           	psect	intcode_body
 15376  002A20                     __pintcode_body:
 15377                           	opt stack 18
 15378  002A20                     int_func:
 15379                           	opt stack 18
 15380  002A20  0006               	pop		; remove dummy address from shadow register refresh
 15381  002A22  CFFA F04D          	movff	pclath,??_handler+2
 15382  002A26  CFFB F04E          	movff	pclatu,??_handler+3
 15383  002A2A  CFE9 F04F          	movff	fsr0l,??_handler+4
 15384  002A2E  CFEA F050          	movff	fsr0h,??_handler+5
 15385  002A32  CFE1 F051          	movff	fsr1l,??_handler+6
 15386  002A36  CFE2 F052          	movff	fsr1h,??_handler+7
 15387  002A3A  CFD9 F053          	movff	fsr2l,??_handler+8
 15388  002A3E  CFDA F054          	movff	fsr2h,??_handler+9
 15389  002A42  CFF3 F055          	movff	prodl,??_handler+10
 15390  002A46  CFF4 F056          	movff	prodh,??_handler+11
 15391  002A4A  CFF6 F057          	movff	tblptrl,??_handler+12
 15392  002A4E  CFF7 F058          	movff	tblptrh,??_handler+13
 15393  002A52  CFF8 F059          	movff	tblptru,??_handler+14
 15394  002A56  CFF5 F05A          	movff	tablat,??_handler+15
 15395                           
 15396                           ;interruptHandler.c: 18: if(INT1IF){
 15397  002A5A  A0F0               	btfss	intcon3,0,c	;volatile
 15398  002A5C  D020               	goto	i2l8108
 15399                           
 15400                           ;interruptHandler.c: 19: INT1IF = 0;
 15401  002A5E  90F0               	bcf	intcon3,0,c	;volatile
 15402                           
 15403                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15404  002A60  0100               	movlb	0	; () banked
 15405  002A62  51FC               	movf	_machine_state& (0+255),w,b
 15406  002A64  A4D8               	btfss	status,2,c
 15407  002A66  D01B               	goto	i2l8108
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15411  002A68  3881               	swapf	3969,w,c	;volatile
 15412  002A6A  0B0F               	andlw	15
 15413  002A6C  0B0F               	andlw	15
 15414  002A6E  6E4B               	movwf	??_handler& (0+255),c
 15415  002A70  6A4C               	clrf	(??_handler+1)& (0+255),c
 15416  002A72  0E15               	movlw	low _keys
 15417  002A74  244B               	addwf	??_handler,w,c
 15418  002A76  6EF6               	movwf	tblptrl,c
 15419  002A78  0EFB               	movlw	high _keys
 15420  002A7A  204C               	addwfc	??_handler+1,w,c
 15421  002A7C  6EF7               	movwf	tblptrh,c
 15422  002A7E                     	if	1	;There are 3 active tblptr bytes
 15423  002A7E  6AF8               	clrf	tblptru,c
 15424  002A80  0E00               	movlw	low (__mediumconst shr (0+16))
 15425  002A82  22F8               	addwfc	tblptru,f,c
 15426  002A84                     	endif
 15427  002A84  0008               	tblrd		*
 15428  002A86  CFF5 F07D          	movff	tablat,_input	;volatile
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;interruptHandler.c: 23: if(input == '*'){
 15432  002A8A  0E2A               	movlw	42
 15433  002A8C  187D               	xorwf	_input,w,c	;volatile
 15434  002A8E  A4D8               	btfss	status,2,c
 15435  002A90  D004               	goto	i2l8106
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15439  002A92  0E03               	movlw	3
 15440  002A94  0100               	movlb	0	; () banked
 15441  002A96  6FFC               	movwf	_machine_state& (0+255),b
 15442                           
 15443                           ;interruptHandler.c: 25: }
 15444  002A98  D002               	goto	i2l8108
 15445  002A9A                     i2l8106:
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;interruptHandler.c: 26: else{
 15449                           ;interruptHandler.c: 27: updateMenu();
 15450  002A9A  EC68  F00F         	call	_updateMenu	;wreg free
 15451  002A9E                     i2l8108:
 15452                           
 15453                           ;interruptHandler.c: 28: }
 15454                           ;interruptHandler.c: 29: }
 15455                           ;interruptHandler.c: 30: }
 15456                           ;interruptHandler.c: 33: if(TMR0IF){
 15457  002A9E  A4F2               	btfss	intcon,2,c	;volatile
 15458  002AA0  D00C               	goto	i2l8122
 15459                           
 15460                           ;interruptHandler.c: 34: TMR0IF = 0;
 15461  002AA2  94F2               	bcf	intcon,2,c	;volatile
 15462                           
 15463                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15464  002AA4  0100               	movlb	0	; () banked
 15465  002AA6  05FC               	decf	_machine_state& (0+255),w,b
 15466  002AA8  A4D8               	btfss	status,2,c
 15467  002AAA  D007               	goto	i2l8122
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;interruptHandler.c: 36: printSortTimer();
 15471  002AAC  EC24  F013         	call	_printSortTimer	;wreg free
 15472                           
 15473                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15474  002AB0  0E85               	movlw	133
 15475  002AB2  6ED7               	movwf	4055,c	;volatile
 15476                           
 15477                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15478  002AB4  0EEE               	movlw	238
 15479  002AB6  6ED6               	movwf	4054,c	;volatile
 15480                           
 15481                           ;interruptHandler.c: 40: TMR0ON = 1;
 15482  002AB8  8ED5               	bsf	4053,7,c	;volatile
 15483  002ABA                     i2l8122:
 15484                           
 15485                           ;interruptHandler.c: 41: }
 15486                           ;interruptHandler.c: 42: }
 15487                           ;interruptHandler.c: 45: if(TMR1IF){
 15488  002ABA  A09E               	btfss	3998,0,c	;volatile
 15489  002ABC  D024               	goto	i2l8146
 15490                           
 15491                           ;interruptHandler.c: 46: TMR1IF = 0;
 15492  002ABE  909E               	bcf	3998,0,c	;volatile
 15493                           
 15494                           ;interruptHandler.c: 47: TMR1ON = 0;
 15495  002AC0  90CD               	bcf	4045,0,c	;volatile
 15496                           
 15497                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15498  002AC2  0100               	movlb	0	; () banked
 15499  002AC4  05FC               	decf	_machine_state& (0+255),w,b
 15500  002AC6  A4D8               	btfss	status,2,c
 15501  002AC8  D01E               	goto	i2l8146
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;interruptHandler.c: 49: if(was_low_1){
 15505  002ACA  5079               	movf	_was_low_1,w,c	;volatile
 15506  002ACC  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15507  002ACE  B4D8               	btfsc	status,2,c
 15508  002AD0  D00A               	goto	i2l848
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15512  002AD2  828B               	bsf	3979,1,c	;volatile
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;interruptHandler.c: 51: was_low_1 = 0;
 15516  002AD4  0E00               	movlw	0
 15517  002AD6  6E7A               	movwf	_was_low_1+1,c	;volatile
 15518  002AD8  0E00               	movlw	0
 15519  002ADA  6E79               	movwf	_was_low_1,c	;volatile
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15523  002ADC  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15527  002AE0  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15528                           
 15529                           ;interruptHandler.c: 54: }
 15530  002AE4  D00F               	goto	i2l8144
 15531  002AE6                     i2l848:
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;interruptHandler.c: 55: else{
 15535                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15536  002AE6  928B               	bcf	3979,1,c	;volatile
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;interruptHandler.c: 57: was_low_1 = 1;
 15540  002AE8  0E00               	movlw	0
 15541  002AEA  6E7A               	movwf	_was_low_1+1,c	;volatile
 15542  002AEC  0E01               	movlw	1
 15543  002AEE  6E79               	movwf	_was_low_1,c	;volatile
 15544                           
 15545                           ; BSR set to: 0
 15546                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15547  002AF0  0101               	movlb	1	; () banked
 15548  002AF2  511C               	movf	_servoTimes& (0+255),w,b
 15549  002AF4  0800               	sublw	0
 15550  002AF6  0F20               	addlw	32
 15551  002AF8  6ECF               	movwf	4047,c	;volatile
 15552                           
 15553                           ; BSR set to: 1
 15554                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15555  002AFA  0101               	movlb	1	; () banked
 15556  002AFC  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15557  002AFE  0800               	sublw	0
 15558  002B00  0F20               	addlw	32
 15559  002B02  6ECE               	movwf	4046,c	;volatile
 15560  002B04                     i2l8144:
 15561                           
 15562                           ;interruptHandler.c: 60: }
 15563                           ;interruptHandler.c: 61: TMR1ON = 1;
 15564  002B04  80CD               	bsf	4045,0,c	;volatile
 15565  002B06                     i2l8146:
 15566                           
 15567                           ;interruptHandler.c: 62: }
 15568                           ;interruptHandler.c: 63: }
 15569                           ;interruptHandler.c: 65: if(TMR3IF){
 15570  002B06  A2A1               	btfss	4001,1,c	;volatile
 15571  002B08  D024               	goto	i2l854
 15572                           
 15573                           ;interruptHandler.c: 66: TMR3IF = 0;
 15574  002B0A  92A1               	bcf	4001,1,c	;volatile
 15575                           
 15576                           ;interruptHandler.c: 67: TMR3ON = 0;
 15577  002B0C  90B1               	bcf	4017,0,c	;volatile
 15578                           
 15579                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15580  002B0E  0100               	movlb	0	; () banked
 15581  002B10  05FC               	decf	_machine_state& (0+255),w,b
 15582  002B12  A4D8               	btfss	status,2,c
 15583  002B14  D01E               	goto	i2l854
 15584                           
 15585                           ; BSR set to: 0
 15586                           ;interruptHandler.c: 69: if(was_low_3){
 15587  002B16  507B               	movf	_was_low_3,w,c	;volatile
 15588  002B18  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15589  002B1A  B4D8               	btfsc	status,2,c
 15590  002B1C  D00A               	goto	i2l852
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15594  002B1E  848B               	bsf	3979,2,c	;volatile
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;interruptHandler.c: 71: was_low_3 = 0;
 15598  002B20  0E00               	movlw	0
 15599  002B22  6E7C               	movwf	_was_low_3+1,c	;volatile
 15600  002B24  0E00               	movlw	0
 15601  002B26  6E7B               	movwf	_was_low_3,c	;volatile
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15605  002B28  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15606                           
 15607                           ; BSR set to: 0
 15608                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15609  002B2C  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15610                           
 15611                           ;interruptHandler.c: 74: }
 15612  002B30  D00F               	goto	i2l8168
 15613  002B32                     i2l852:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;interruptHandler.c: 75: else{
 15617                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15618  002B32  948B               	bcf	3979,2,c	;volatile
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;interruptHandler.c: 77: was_low_3 = 1;
 15622  002B34  0E00               	movlw	0
 15623  002B36  6E7C               	movwf	_was_low_3+1,c	;volatile
 15624  002B38  0E01               	movlw	1
 15625  002B3A  6E7B               	movwf	_was_low_3,c	;volatile
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15629  002B3C  0101               	movlb	1	; () banked
 15630  002B3E  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15631  002B40  0800               	sublw	0
 15632  002B42  0F20               	addlw	32
 15633  002B44  6EB3               	movwf	4019,c	;volatile
 15634                           
 15635                           ; BSR set to: 1
 15636                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15637  002B46  0101               	movlb	1	; () banked
 15638  002B48  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15639  002B4A  0800               	sublw	0
 15640  002B4C  0F20               	addlw	32
 15641  002B4E  6EB2               	movwf	4018,c	;volatile
 15642  002B50                     i2l8168:
 15643                           
 15644                           ;interruptHandler.c: 80: }
 15645                           ;interruptHandler.c: 81: TMR3ON = 1;
 15646  002B50  80B1               	bsf	4017,0,c	;volatile
 15647  002B52                     i2l854:
 15648  002B52  C05A  FFF5         	movff	??_handler+15,tablat
 15649  002B56  C059  FFF8         	movff	??_handler+14,tblptru
 15650  002B5A  C058  FFF7         	movff	??_handler+13,tblptrh
 15651  002B5E  C057  FFF6         	movff	??_handler+12,tblptrl
 15652  002B62  C056  FFF4         	movff	??_handler+11,prodh
 15653  002B66  C055  FFF3         	movff	??_handler+10,prodl
 15654  002B6A  C054  FFDA         	movff	??_handler+9,fsr2h
 15655  002B6E  C053  FFD9         	movff	??_handler+8,fsr2l
 15656  002B72  C052  FFE2         	movff	??_handler+7,fsr1h
 15657  002B76  C051  FFE1         	movff	??_handler+6,fsr1l
 15658  002B7A  C050  FFEA         	movff	??_handler+5,fsr0h
 15659  002B7E  C04F  FFE9         	movff	??_handler+4,fsr0l
 15660  002B82  C04E  FFFB         	movff	??_handler+3,pclatu
 15661  002B86  C04D  FFFA         	movff	??_handler+2,pclath
 15662  002B8A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15663  002B8C  0011               	retfie		f
 15664  002B8E                     __end_of_handler:
 15665                           	opt stack 0
 15666                           pclatu	equ	0xFFB
 15667                           pclath	equ	0xFFA
 15668                           tblptru	equ	0xFF8
 15669                           tblptrh	equ	0xFF7
 15670                           tblptrl	equ	0xFF6
 15671                           tablat	equ	0xFF5
 15672                           prodh	equ	0xFF4
 15673                           prodl	equ	0xFF3
 15674                           intcon	equ	0xFF2
 15675                           intcon2	equ	0xFF1
 15676                           intcon3	equ	0xFF0
 15677                           indf0	equ	0xFEF
 15678                           postinc0	equ	0xFEE
 15679                           fsr0h	equ	0xFEA
 15680                           fsr0l	equ	0xFE9
 15681                           wreg	equ	0xFE8
 15682                           postdec1	equ	0xFE5
 15683                           fsr1h	equ	0xFE2
 15684                           fsr1l	equ	0xFE1
 15685                           indf2	equ	0xFDF
 15686                           postinc2	equ	0xFDE
 15687                           postdec2	equ	0xFDD
 15688                           fsr2h	equ	0xFDA
 15689                           fsr2l	equ	0xFD9
 15690                           status	equ	0xFD8
 15691                           
 15692 ;; *************** function _updateMenu *****************
 15693 ;; Defined at:
 15694 ;;		line 211 in file "UI.c"
 15695 ;; Parameters:    Size  Location     Type
 15696 ;;		None
 15697 ;; Auto vars:     Size  Location     Type
 15698 ;;		None
 15699 ;; Return value:  Size  Location     Type
 15700 ;;                  1    wreg      void 
 15701 ;; Registers used:
 15702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15703 ;; Tracked objects:
 15704 ;;		On entry : 0/0
 15705 ;;		On exit  : 0/0
 15706 ;;		Unchanged: 0/0
 15707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15712 ;;Total ram usage:        2 bytes
 15713 ;; Hardware stack levels used:    1
 15714 ;; Hardware stack levels required when called:    5
 15715 ;; This function calls:
 15716 ;;		_change_state_to_logs_11
 15717 ;;		_change_state_to_logs_12
 15718 ;;		_change_state_to_logs_22
 15719 ;;		_change_state_to_logs_23
 15720 ;;		_change_state_to_logs_33
 15721 ;;		_change_state_to_logs_34
 15722 ;;		_change_state_to_menu_11
 15723 ;;		_change_state_to_menu_23
 15724 ;;		_dispLogs
 15725 ;;		_inputHandler
 15726 ;;		i2_change_state_to_menu_12
 15727 ;;		i2_change_state_to_menu_22
 15728 ;;		i2_change_state_to_menu_start
 15729 ;; This function is called by:
 15730 ;;		_handler
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           	psect	text58
 15735  001ED0                     __ptext58:
 15736                           	opt stack 0
 15737  001ED0                     _updateMenu:
 15738                           	opt stack 18
 15739                           
 15740                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15741                           
 15742                           ;incstack = 0
 15743  001ED0  0E00               	movlw	0
 15744  001ED2  6E78               	movwf	_up+1,c
 15745  001ED4  0E00               	movlw	0
 15746  001ED6  6E77               	movwf	_up,c
 15747  001ED8  0E00               	movlw	0
 15748  001EDA  6E6A               	movwf	_down+1,c
 15749  001EDC  0E00               	movlw	0
 15750  001EDE  6E69               	movwf	_down,c
 15751  001EE0  0E00               	movlw	0
 15752  001EE2  6E6C               	movwf	_enter+1,c
 15753  001EE4  0E00               	movlw	0
 15754  001EE6  6E6B               	movwf	_enter,c
 15755  001EE8  0E00               	movlw	0
 15756  001EEA  6E5C               	movwf	_back+1,c
 15757  001EEC  0E00               	movlw	0
 15758  001EEE  6E5B               	movwf	_back,c
 15759                           
 15760                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15761  001EF0  9EF2               	bcf	intcon,7,c	;volatile
 15762                           
 15763                           ;UI.c: 215: if (inputHandler()
 15764                           ;UI.c: 218: ){
 15765  001EF2  EC1D  F014         	call	_inputHandler	;wreg free
 15766  001EF6  502A               	movf	?_inputHandler,w,c
 15767  001EF8  102B               	iorwf	?_inputHandler+1,w,c
 15768  001EFA  A4D8               	btfss	status,2,c
 15769  001EFC  D112               	goto	i2l7848
 15770  001EFE  D146               	goto	i2l254
 15771  001F00                     i2l7700:
 15772                           
 15773                           ;UI.c: 222: change_state_to_menu_11();
 15774  001F00  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 15775                           
 15776                           ;UI.c: 223: break;
 15777  001F04  D143               	goto	i2l254
 15778  001F06                     i2l7702:
 15779                           
 15780                           ;UI.c: 226: if(up){
 15781  001F06  5077               	movf	_up,w,c
 15782  001F08  1078               	iorwf	_up+1,w,c
 15783  001F0A  B4D8               	btfsc	status,2,c
 15784  001F0C  D003               	goto	i2l7706
 15785                           
 15786                           ;UI.c: 227: change_state_to_menu_23();
 15787  001F0E  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 15788                           
 15789                           ;UI.c: 228: }
 15790  001F12  D13C               	goto	i2l254
 15791  001F14                     i2l7706:
 15792                           
 15793                           ;UI.c: 229: else if(down){
 15794  001F14  5069               	movf	_down,w,c
 15795  001F16  106A               	iorwf	_down+1,w,c
 15796  001F18  B4D8               	btfsc	status,2,c
 15797  001F1A  D003               	goto	i2l7710
 15798                           
 15799                           ;UI.c: 230: change_state_to_menu_12();
 15800  001F1C  EC74  F021         	call	i2_change_state_to_menu_12	;wreg free
 15801                           
 15802                           ;UI.c: 231: }
 15803  001F20  D135               	goto	i2l254
 15804  001F22                     i2l7710:
 15805                           
 15806                           ;UI.c: 232: else if(enter){
 15807  001F22  506B               	movf	_enter,w,c
 15808  001F24  106C               	iorwf	_enter+1,w,c
 15809  001F26  B4D8               	btfsc	status,2,c
 15810  001F28  D131               	goto	i2l254
 15811                           
 15812                           ;UI.c: 233: change_state_to_menu_start();
 15813  001F2A  ECB7  F022         	call	i2_change_state_to_menu_start	;wreg free
 15814                           
 15815                           ;UI.c: 234: }
 15816                           ;UI.c: 235: break;
 15817  001F2E  D12E               	goto	i2l254
 15818  001F30                     i2l7714:
 15819                           
 15820                           ;UI.c: 238: if(up){
 15821  001F30  5077               	movf	_up,w,c
 15822  001F32  1078               	iorwf	_up+1,w,c
 15823  001F34  B4D8               	btfsc	status,2,c
 15824  001F36  D003               	goto	i2l7718
 15825                           
 15826                           ;UI.c: 239: change_state_to_menu_11();
 15827  001F38  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 15828                           
 15829                           ;UI.c: 240: }
 15830  001F3C  D127               	goto	i2l254
 15831  001F3E                     i2l7718:
 15832                           
 15833                           ;UI.c: 241: else if(down){
 15834  001F3E  5069               	movf	_down,w,c
 15835  001F40  106A               	iorwf	_down+1,w,c
 15836  001F42  B4D8               	btfsc	status,2,c
 15837  001F44  D011               	goto	i2l7734
 15838                           
 15839                           ;UI.c: 242: change_state_to_menu_23();
 15840  001F46  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 15841                           
 15842                           ;UI.c: 243: }
 15843  001F4A  D120               	goto	i2l254
 15844  001F4C                     i2l7726:
 15845                           
 15846                           ;UI.c: 250: if(up){
 15847  001F4C  5077               	movf	_up,w,c
 15848  001F4E  1078               	iorwf	_up+1,w,c
 15849  001F50  B4D8               	btfsc	status,2,c
 15850  001F52  D003               	goto	i2l7730
 15851                           
 15852                           ;UI.c: 251: change_state_to_menu_11();
 15853  001F54  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 15854                           
 15855                           ;UI.c: 252: }
 15856  001F58  D119               	goto	i2l254
 15857  001F5A                     i2l7730:
 15858                           
 15859                           ;UI.c: 253: else if(down){
 15860  001F5A  5069               	movf	_down,w,c
 15861  001F5C  106A               	iorwf	_down+1,w,c
 15862  001F5E  B4D8               	btfsc	status,2,c
 15863  001F60  D003               	goto	i2l7734
 15864                           
 15865                           ;UI.c: 254: change_state_to_menu_23();
 15866  001F62  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 15867                           
 15868                           ;UI.c: 255: }
 15869  001F66  D112               	goto	i2l254
 15870  001F68                     i2l7734:
 15871                           
 15872                           ;UI.c: 256: else if(enter){
 15873  001F68  506B               	movf	_enter,w,c
 15874  001F6A  106C               	iorwf	_enter+1,w,c
 15875  001F6C  B4D8               	btfsc	status,2,c
 15876  001F6E  D10E               	goto	i2l254
 15877                           
 15878                           ;UI.c: 257: machine_state = Sorting_state;
 15879  001F70  0E01               	movlw	1
 15880  001F72  0100               	movlb	0	; () banked
 15881  001F74  6FFC               	movwf	_machine_state& (0+255),b
 15882                           
 15883                           ; BSR set to: 0
 15884                           ;UI.c: 258: }
 15885                           ;UI.c: 259: break;
 15886                           
 15887                           ; BSR set to: 0
 15888                           
 15889                           ; BSR set to: 0
 15890  001F76  D10A               	goto	i2l254
 15891  001F78                     i2l7738:
 15892                           
 15893                           ;UI.c: 262: if(up){
 15894  001F78  5077               	movf	_up,w,c
 15895  001F7A  1078               	iorwf	_up+1,w,c
 15896  001F7C  B4D8               	btfsc	status,2,c
 15897  001F7E  D003               	goto	i2l7742
 15898                           
 15899                           ;UI.c: 263: change_state_to_menu_22();
 15900  001F80  EC5C  F021         	call	i2_change_state_to_menu_22	;wreg free
 15901                           
 15902                           ;UI.c: 264: }
 15903  001F84  D103               	goto	i2l254
 15904  001F86                     i2l7742:
 15905                           
 15906                           ;UI.c: 265: else if(down){
 15907  001F86  5069               	movf	_down,w,c
 15908  001F88  106A               	iorwf	_down+1,w,c
 15909  001F8A  B4D8               	btfsc	status,2,c
 15910  001F8C  D003               	goto	i2l7746
 15911                           
 15912                           ;UI.c: 266: change_state_to_menu_11();
 15913  001F8E  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 15914                           
 15915                           ;UI.c: 267: }
 15916  001F92  D0FC               	goto	i2l254
 15917  001F94                     i2l7746:
 15918                           
 15919                           ;UI.c: 268: else if(enter){
 15920  001F94  506B               	movf	_enter,w,c
 15921  001F96  106C               	iorwf	_enter+1,w,c
 15922  001F98  B4D8               	btfsc	status,2,c
 15923  001F9A  D0F8               	goto	i2l254
 15924                           
 15925                           ;UI.c: 269: change_state_to_logs_11();
 15926  001F9C  EC1C  F022         	call	_change_state_to_logs_11	;wreg free
 15927                           
 15928                           ;UI.c: 270: }
 15929                           ;UI.c: 271: break;
 15930  001FA0  D0F5               	goto	i2l254
 15931  001FA2                     i2l7750:
 15932                           
 15933                           ;UI.c: 274: if(up){
 15934  001FA2  5077               	movf	_up,w,c
 15935  001FA4  1078               	iorwf	_up+1,w,c
 15936  001FA6  B4D8               	btfsc	status,2,c
 15937  001FA8  D003               	goto	i2l7754
 15938                           
 15939                           ;UI.c: 275: change_state_to_logs_34();
 15940  001FAA  ECBC  F021         	call	_change_state_to_logs_34	;wreg free
 15941                           
 15942                           ;UI.c: 276: }
 15943  001FAE  D0EE               	goto	i2l254
 15944  001FB0                     i2l7754:
 15945                           
 15946                           ;UI.c: 277: else if(down){
 15947  001FB0  5069               	movf	_down,w,c
 15948  001FB2  106A               	iorwf	_down+1,w,c
 15949  001FB4  B4D8               	btfsc	status,2,c
 15950  001FB6  D003               	goto	i2l7758
 15951                           
 15952                           ;UI.c: 278: change_state_to_logs_12();
 15953  001FB8  EC04  F022         	call	_change_state_to_logs_12	;wreg free
 15954                           
 15955                           ;UI.c: 279: }
 15956  001FBC  D0E7               	goto	i2l254
 15957  001FBE                     i2l7758:
 15958                           
 15959                           ;UI.c: 280: else if(enter){
 15960  001FBE  506B               	movf	_enter,w,c
 15961  001FC0  106C               	iorwf	_enter+1,w,c
 15962  001FC2  B4D8               	btfsc	status,2,c
 15963  001FC4  D007               	goto	i2l7762
 15964                           
 15965                           ;UI.c: 281: dispLogs(1);
 15966  001FC6  0E00               	movlw	0
 15967  001FC8  6E13               	movwf	dispLogs@myLog+1,c
 15968  001FCA  0E01               	movlw	1
 15969  001FCC  6E12               	movwf	dispLogs@myLog,c
 15970  001FCE  EC03  F023         	call	_dispLogs	;wreg free
 15971                           
 15972                           ;UI.c: 282: }
 15973  001FD2  D0DC               	goto	i2l254
 15974  001FD4                     i2l7762:
 15975                           
 15976                           ;UI.c: 283: else if(back){
 15977  001FD4  505B               	movf	_back,w,c
 15978  001FD6  105C               	iorwf	_back+1,w,c
 15979  001FD8  B4D8               	btfsc	status,2,c
 15980  001FDA  D0D8               	goto	i2l254
 15981                           
 15982                           ;UI.c: 284: change_state_to_menu_23();
 15983  001FDC  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 15984                           
 15985                           ;UI.c: 285: }
 15986                           ;UI.c: 286: break;
 15987  001FE0  D0D5               	goto	i2l254
 15988  001FE2                     i2l7766:
 15989                           
 15990                           ;UI.c: 289: if(up){
 15991  001FE2  5077               	movf	_up,w,c
 15992  001FE4  1078               	iorwf	_up+1,w,c
 15993  001FE6  B4D8               	btfsc	status,2,c
 15994  001FE8  D003               	goto	i2l7770
 15995                           
 15996                           ;UI.c: 290: change_state_to_logs_11();
 15997  001FEA  EC1C  F022         	call	_change_state_to_logs_11	;wreg free
 15998                           
 15999                           ;UI.c: 291: }
 16000  001FEE  D0CE               	goto	i2l254
 16001  001FF0                     i2l7770:
 16002                           
 16003                           ;UI.c: 292: else if(down){
 16004  001FF0  5069               	movf	_down,w,c
 16005  001FF2  106A               	iorwf	_down+1,w,c
 16006  001FF4  B4D8               	btfsc	status,2,c
 16007  001FF6  D003               	goto	i2l7774
 16008                           
 16009                           ;UI.c: 293: change_state_to_logs_23();
 16010  001FF8  EC4B  F022         	call	_change_state_to_logs_23	;wreg free
 16011                           
 16012                           ;UI.c: 294: }
 16013  001FFC  D0C7               	goto	i2l254
 16014  001FFE                     i2l7774:
 16015                           
 16016                           ;UI.c: 295: else if(enter){
 16017  001FFE  506B               	movf	_enter,w,c
 16018  002000  106C               	iorwf	_enter+1,w,c
 16019  002002  B4D8               	btfsc	status,2,c
 16020  002004  D007               	goto	i2l7778
 16021                           
 16022                           ;UI.c: 296: dispLogs(2);
 16023  002006  0E00               	movlw	0
 16024  002008  6E13               	movwf	dispLogs@myLog+1,c
 16025  00200A  0E02               	movlw	2
 16026  00200C  6E12               	movwf	dispLogs@myLog,c
 16027  00200E  EC03  F023         	call	_dispLogs	;wreg free
 16028                           
 16029                           ;UI.c: 297: }
 16030  002012  D0BC               	goto	i2l254
 16031  002014                     i2l7778:
 16032                           
 16033                           ;UI.c: 298: else if(back){
 16034  002014  505B               	movf	_back,w,c
 16035  002016  105C               	iorwf	_back+1,w,c
 16036  002018  B4D8               	btfsc	status,2,c
 16037  00201A  D0B8               	goto	i2l254
 16038                           
 16039                           ;UI.c: 299: change_state_to_menu_23();
 16040  00201C  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 16041                           
 16042                           ;UI.c: 300: }
 16043                           ;UI.c: 301: break;
 16044  002020  D0B5               	goto	i2l254
 16045  002022                     i2l7782:
 16046                           
 16047                           ;UI.c: 304: if(up){
 16048  002022  5077               	movf	_up,w,c
 16049  002024  1078               	iorwf	_up+1,w,c
 16050  002026  B4D8               	btfsc	status,2,c
 16051  002028  D003               	goto	i2l7786
 16052                           
 16053                           ;UI.c: 305: change_state_to_logs_11();
 16054  00202A  EC1C  F022         	call	_change_state_to_logs_11	;wreg free
 16055                           
 16056                           ;UI.c: 306: }
 16057  00202E  D0AE               	goto	i2l254
 16058  002030                     i2l7786:
 16059                           
 16060                           ;UI.c: 307: else if(down){
 16061  002030  5069               	movf	_down,w,c
 16062  002032  106A               	iorwf	_down+1,w,c
 16063  002034  B4D8               	btfsc	status,2,c
 16064  002036  D003               	goto	i2l7790
 16065                           
 16066                           ;UI.c: 308: change_state_to_logs_23();
 16067  002038  EC4B  F022         	call	_change_state_to_logs_23	;wreg free
 16068                           
 16069                           ;UI.c: 309: }
 16070  00203C  D0A7               	goto	i2l254
 16071  00203E                     i2l7790:
 16072                           
 16073                           ;UI.c: 310: else if(enter){
 16074  00203E  506B               	movf	_enter,w,c
 16075  002040  106C               	iorwf	_enter+1,w,c
 16076  002042  B4D8               	btfsc	status,2,c
 16077  002044  D007               	goto	i2l7794
 16078                           
 16079                           ;UI.c: 311: dispLogs(2);
 16080  002046  0E00               	movlw	0
 16081  002048  6E13               	movwf	dispLogs@myLog+1,c
 16082  00204A  0E02               	movlw	2
 16083  00204C  6E12               	movwf	dispLogs@myLog,c
 16084  00204E  EC03  F023         	call	_dispLogs	;wreg free
 16085                           
 16086                           ;UI.c: 312: }
 16087  002052  D09C               	goto	i2l254
 16088  002054                     i2l7794:
 16089                           
 16090                           ;UI.c: 313: else if(back){
 16091  002054  505B               	movf	_back,w,c
 16092  002056  105C               	iorwf	_back+1,w,c
 16093  002058  B4D8               	btfsc	status,2,c
 16094  00205A  D098               	goto	i2l254
 16095                           
 16096                           ;UI.c: 314: change_state_to_menu_23();
 16097  00205C  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 16098                           
 16099                           ;UI.c: 315: }
 16100                           ;UI.c: 316: break;
 16101  002060  D095               	goto	i2l254
 16102  002062                     i2l7798:
 16103                           
 16104                           ;UI.c: 319: if(up){
 16105  002062  5077               	movf	_up,w,c
 16106  002064  1078               	iorwf	_up+1,w,c
 16107  002066  B4D8               	btfsc	status,2,c
 16108  002068  D003               	goto	i2l7802
 16109                           
 16110                           ;UI.c: 320: change_state_to_logs_22();
 16111  00206A  ECEC  F021         	call	_change_state_to_logs_22	;wreg free
 16112                           
 16113                           ;UI.c: 321: }
 16114  00206E  D08E               	goto	i2l254
 16115  002070                     i2l7802:
 16116                           
 16117                           ;UI.c: 322: else if(down){
 16118  002070  5069               	movf	_down,w,c
 16119  002072  106A               	iorwf	_down+1,w,c
 16120  002074  B4D8               	btfsc	status,2,c
 16121  002076  D003               	goto	i2l7806
 16122                           
 16123                           ;UI.c: 323: change_state_to_logs_34();
 16124  002078  ECBC  F021         	call	_change_state_to_logs_34	;wreg free
 16125                           
 16126                           ;UI.c: 324: }
 16127  00207C  D087               	goto	i2l254
 16128  00207E                     i2l7806:
 16129                           
 16130                           ;UI.c: 325: else if(enter){
 16131  00207E  506B               	movf	_enter,w,c
 16132  002080  106C               	iorwf	_enter+1,w,c
 16133  002082  B4D8               	btfsc	status,2,c
 16134  002084  D007               	goto	i2l7810
 16135                           
 16136                           ;UI.c: 326: dispLogs(3);
 16137  002086  0E00               	movlw	0
 16138  002088  6E13               	movwf	dispLogs@myLog+1,c
 16139  00208A  0E03               	movlw	3
 16140  00208C  6E12               	movwf	dispLogs@myLog,c
 16141  00208E  EC03  F023         	call	_dispLogs	;wreg free
 16142                           
 16143                           ;UI.c: 327: }
 16144  002092  D07C               	goto	i2l254
 16145  002094                     i2l7810:
 16146                           
 16147                           ;UI.c: 328: else if(back){
 16148  002094  505B               	movf	_back,w,c
 16149  002096  105C               	iorwf	_back+1,w,c
 16150  002098  B4D8               	btfsc	status,2,c
 16151  00209A  D078               	goto	i2l254
 16152                           
 16153                           ;UI.c: 329: change_state_to_menu_23();
 16154  00209C  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 16155                           
 16156                           ;UI.c: 330: }
 16157                           ;UI.c: 331: break;
 16158  0020A0  D075               	goto	i2l254
 16159  0020A2                     i2l7814:
 16160                           
 16161                           ;UI.c: 334: if(up){
 16162  0020A2  5077               	movf	_up,w,c
 16163  0020A4  1078               	iorwf	_up+1,w,c
 16164  0020A6  B4D8               	btfsc	status,2,c
 16165  0020A8  D003               	goto	i2l7818
 16166                           
 16167                           ;UI.c: 335: change_state_to_logs_22();
 16168  0020AA  ECEC  F021         	call	_change_state_to_logs_22	;wreg free
 16169                           
 16170                           ;UI.c: 336: }
 16171  0020AE  D06E               	goto	i2l254
 16172  0020B0                     i2l7818:
 16173                           
 16174                           ;UI.c: 337: else if(down){
 16175  0020B0  5069               	movf	_down,w,c
 16176  0020B2  106A               	iorwf	_down+1,w,c
 16177  0020B4  B4D8               	btfsc	status,2,c
 16178  0020B6  D003               	goto	i2l7822
 16179                           
 16180                           ;UI.c: 338: change_state_to_logs_34();
 16181  0020B8  ECBC  F021         	call	_change_state_to_logs_34	;wreg free
 16182                           
 16183                           ;UI.c: 339: }
 16184  0020BC  D067               	goto	i2l254
 16185  0020BE                     i2l7822:
 16186                           
 16187                           ;UI.c: 340: else if(enter){
 16188  0020BE  506B               	movf	_enter,w,c
 16189  0020C0  106C               	iorwf	_enter+1,w,c
 16190  0020C2  B4D8               	btfsc	status,2,c
 16191  0020C4  D007               	goto	i2l7826
 16192                           
 16193                           ;UI.c: 341: dispLogs(3);
 16194  0020C6  0E00               	movlw	0
 16195  0020C8  6E13               	movwf	dispLogs@myLog+1,c
 16196  0020CA  0E03               	movlw	3
 16197  0020CC  6E12               	movwf	dispLogs@myLog,c
 16198  0020CE  EC03  F023         	call	_dispLogs	;wreg free
 16199                           
 16200                           ;UI.c: 342: }
 16201  0020D2  D05C               	goto	i2l254
 16202  0020D4                     i2l7826:
 16203                           
 16204                           ;UI.c: 343: else if(back){
 16205  0020D4  505B               	movf	_back,w,c
 16206  0020D6  105C               	iorwf	_back+1,w,c
 16207  0020D8  B4D8               	btfsc	status,2,c
 16208  0020DA  D058               	goto	i2l254
 16209                           
 16210                           ;UI.c: 344: change_state_to_menu_23();
 16211  0020DC  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 16212                           
 16213                           ;UI.c: 345: }
 16214                           ;UI.c: 346: break;
 16215  0020E0  D055               	goto	i2l254
 16216  0020E2                     i2l7830:
 16217                           
 16218                           ;UI.c: 349: if(up){
 16219  0020E2  5077               	movf	_up,w,c
 16220  0020E4  1078               	iorwf	_up+1,w,c
 16221  0020E6  B4D8               	btfsc	status,2,c
 16222  0020E8  D003               	goto	i2l7834
 16223                           
 16224                           ;UI.c: 350: change_state_to_logs_33();
 16225  0020EA  ECD4  F021         	call	_change_state_to_logs_33	;wreg free
 16226                           
 16227                           ;UI.c: 351: }
 16228  0020EE  D04E               	goto	i2l254
 16229  0020F0                     i2l7834:
 16230                           
 16231                           ;UI.c: 352: else if(down){
 16232  0020F0  5069               	movf	_down,w,c
 16233  0020F2  106A               	iorwf	_down+1,w,c
 16234  0020F4  B4D8               	btfsc	status,2,c
 16235  0020F6  D003               	goto	i2l7838
 16236                           
 16237                           ;UI.c: 353: change_state_to_logs_11();
 16238  0020F8  EC1C  F022         	call	_change_state_to_logs_11	;wreg free
 16239                           
 16240                           ;UI.c: 354: }
 16241  0020FC  D047               	goto	i2l254
 16242  0020FE                     i2l7838:
 16243                           
 16244                           ;UI.c: 355: else if(enter){
 16245  0020FE  506B               	movf	_enter,w,c
 16246  002100  106C               	iorwf	_enter+1,w,c
 16247  002102  B4D8               	btfsc	status,2,c
 16248  002104  D007               	goto	i2l7842
 16249                           
 16250                           ;UI.c: 356: dispLogs(4);
 16251  002106  0E00               	movlw	0
 16252  002108  6E13               	movwf	dispLogs@myLog+1,c
 16253  00210A  0E04               	movlw	4
 16254  00210C  6E12               	movwf	dispLogs@myLog,c
 16255  00210E  EC03  F023         	call	_dispLogs	;wreg free
 16256                           
 16257                           ;UI.c: 357: }
 16258  002112  D03C               	goto	i2l254
 16259  002114                     i2l7842:
 16260                           
 16261                           ;UI.c: 358: else if(back){
 16262  002114  505B               	movf	_back,w,c
 16263  002116  105C               	iorwf	_back+1,w,c
 16264  002118  B4D8               	btfsc	status,2,c
 16265  00211A  D038               	goto	i2l254
 16266                           
 16267                           ;UI.c: 359: change_state_to_menu_23();
 16268  00211C  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 16269                           
 16270                           ;UI.c: 365: }
 16271                           
 16272                           ;UI.c: 364: break;
 16273                           
 16274                           ;UI.c: 363: default:
 16275                           
 16276                           ;UI.c: 360: }
 16277                           ;UI.c: 361: break;
 16278  002120  D035               	goto	i2l254
 16279  002122                     i2l7848:
 16280  002122  C0DE  F043         	movff	_cur_state,??_updateMenu
 16281  002126  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 16282                           
 16283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16284                           ; Switch size 1, requested type "space"
 16285                           ; Number of cases is 3, Range of values is 0 to 4
 16286                           ; switch strategies available:
 16287                           ; Name         Instructions Cycles
 16288                           ; simple_byte           10     6 (average)
 16289                           ;	Chosen strategy is simple_byte
 16290  00212A  5044               	movf	??_updateMenu+1,w,c
 16291  00212C  0A00               	xorlw	0	; case 0
 16292  00212E  B4D8               	btfsc	status,2,c
 16293  002130  D007               	goto	i2l8432
 16294  002132  0A03               	xorlw	3	; case 3
 16295  002134  B4D8               	btfsc	status,2,c
 16296  002136  D015               	goto	i2l8434
 16297  002138  0A07               	xorlw	7	; case 4
 16298  00213A  B4D8               	btfsc	status,2,c
 16299  00213C  D020               	goto	i2l8436
 16300  00213E  D026               	goto	i2l254
 16301  002140                     i2l8432:
 16302                           
 16303                           ; Switch size 1, requested type "space"
 16304                           ; Number of cases is 5, Range of values is 0 to 23
 16305                           ; switch strategies available:
 16306                           ; Name         Instructions Cycles
 16307                           ; simple_byte           16     9 (average)
 16308                           ;	Chosen strategy is simple_byte
 16309  002140  5043               	movf	??_updateMenu,w,c
 16310  002142  0A00               	xorlw	0	; case 0
 16311  002144  B4D8               	btfsc	status,2,c
 16312  002146  D6DC               	goto	i2l7700
 16313  002148  0A0B               	xorlw	11	; case 11
 16314  00214A  B4D8               	btfsc	status,2,c
 16315  00214C  D6DC               	goto	i2l7702
 16316  00214E  0A07               	xorlw	7	; case 12
 16317  002150  B4D8               	btfsc	status,2,c
 16318  002152  D6EE               	goto	i2l7714
 16319  002154  0A1A               	xorlw	26	; case 22
 16320  002156  B4D8               	btfsc	status,2,c
 16321  002158  D6F9               	goto	i2l7726
 16322  00215A  0A01               	xorlw	1	; case 23
 16323  00215C  B4D8               	btfsc	status,2,c
 16324  00215E  D70C               	goto	i2l7738
 16325  002160  D015               	goto	i2l254
 16326  002162                     i2l8434:
 16327                           
 16328                           ; Switch size 1, requested type "space"
 16329                           ; Number of cases is 4, Range of values is 243 to 255
 16330                           ; switch strategies available:
 16331                           ; Name         Instructions Cycles
 16332                           ; simple_byte           13     7 (average)
 16333                           ;	Chosen strategy is simple_byte
 16334  002162  5043               	movf	??_updateMenu,w,c
 16335  002164  0AF3               	xorlw	243	; case 243
 16336  002166  B4D8               	btfsc	status,2,c
 16337  002168  D71C               	goto	i2l7750
 16338  00216A  0A07               	xorlw	7	; case 244
 16339  00216C  B4D8               	btfsc	status,2,c
 16340  00216E  D739               	goto	i2l7766
 16341  002170  0A0A               	xorlw	10	; case 254
 16342  002172  B4D8               	btfsc	status,2,c
 16343  002174  D756               	goto	i2l7782
 16344  002176  0A01               	xorlw	1	; case 255
 16345  002178  B4D8               	btfsc	status,2,c
 16346  00217A  D773               	goto	i2l7798
 16347  00217C  D007               	goto	i2l254
 16348  00217E                     i2l8436:
 16349                           
 16350                           ; Switch size 1, requested type "space"
 16351                           ; Number of cases is 2, Range of values is 9 to 10
 16352                           ; switch strategies available:
 16353                           ; Name         Instructions Cycles
 16354                           ; simple_byte            7     4 (average)
 16355                           ;	Chosen strategy is simple_byte
 16356  00217E  5043               	movf	??_updateMenu,w,c
 16357  002180  0A09               	xorlw	9	; case 9
 16358  002182  B4D8               	btfsc	status,2,c
 16359  002184  D78E               	goto	i2l7814
 16360  002186  0A03               	xorlw	3	; case 10
 16361  002188  B4D8               	btfsc	status,2,c
 16362  00218A  D7AB               	goto	i2l7830
 16363  00218C                     i2l254:
 16364                           
 16365                           ;UI.c: 366: }
 16366                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16367  00218C  8EF2               	bsf	intcon,7,c	;volatile
 16368  00218E  0012               	return		;funcret
 16369  002190                     __end_of_updateMenu:
 16370                           	opt stack 0
 16371                           pclatu	equ	0xFFB
 16372                           pclath	equ	0xFFA
 16373                           tblptru	equ	0xFF8
 16374                           tblptrh	equ	0xFF7
 16375                           tblptrl	equ	0xFF6
 16376                           tablat	equ	0xFF5
 16377                           prodh	equ	0xFF4
 16378                           prodl	equ	0xFF3
 16379                           intcon	equ	0xFF2
 16380                           intcon2	equ	0xFF1
 16381                           intcon3	equ	0xFF0
 16382                           indf0	equ	0xFEF
 16383                           postinc0	equ	0xFEE
 16384                           fsr0h	equ	0xFEA
 16385                           fsr0l	equ	0xFE9
 16386                           wreg	equ	0xFE8
 16387                           postdec1	equ	0xFE5
 16388                           fsr1h	equ	0xFE2
 16389                           fsr1l	equ	0xFE1
 16390                           indf2	equ	0xFDF
 16391                           postinc2	equ	0xFDE
 16392                           postdec2	equ	0xFDD
 16393                           fsr2h	equ	0xFDA
 16394                           fsr2l	equ	0xFD9
 16395                           status	equ	0xFD8
 16396                           
 16397 ;; *************** function i2_change_state_to_menu_start *****************
 16398 ;; Defined at:
 16399 ;;		line 472 in file "UI.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;		None
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;		None
 16404 ;; Return value:  Size  Location     Type
 16405 ;;                  1    wreg      void 
 16406 ;; Registers used:
 16407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16408 ;; Tracked objects:
 16409 ;;		On entry : 0/0
 16410 ;;		On exit  : 0/0
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;Total ram usage:        0 bytes
 16418 ;; Hardware stack levels used:    1
 16419 ;; Hardware stack levels required when called:    4
 16420 ;; This function calls:
 16421 ;;		i2_lcdInst
 16422 ;;		i2_printRTC
 16423 ;;		i2_printf
 16424 ;; This function is called by:
 16425 ;;		_updateMenu
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text59
 16430  00456E                     __ptext59:
 16431                           	opt stack 0
 16432  00456E                     i2_change_state_to_menu_start:
 16433                           	opt stack 18
 16434                           
 16435                           ;UI.c: 473: cur_state = 0;
 16436                           
 16437                           ;incstack = 0
 16438  00456E  0E00               	movlw	0
 16439  004570  0100               	movlb	0	; () banked
 16440  004572  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16441  004574  0E00               	movlw	0
 16442  004576  6FDE               	movwf	_cur_state& (0+255),b
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;UI.c: 475: lcdInst(0b10000000);;
 16446  004578  0E80               	movlw	128
 16447  00457A  EC91  F023         	call	i2_lcdInst
 16448                           
 16449                           ;UI.c: 476: printRTC();
 16450  00457E  EC09  F012         	call	i2_printRTC	;wreg free
 16451                           
 16452                           ;UI.c: 477: lcdInst(0b11000000);;
 16453  004582  0EC0               	movlw	192
 16454  004584  EC91  F023         	call	i2_lcdInst
 16455                           
 16456                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16457  004588  0E0D               	movlw	low STR_30
 16458  00458A  6E0D               	movwf	i2printf@f,c
 16459  00458C  0EFE               	movlw	high STR_30
 16460  00458E  6E0E               	movwf	i2printf@f+1,c
 16461  004590  ECD4  F00A         	call	i2_printf	;wreg free
 16462  004594  0012               	return		;funcret
 16463  004596                     __end_ofi2_change_state_to_menu_start:
 16464                           	opt stack 0
 16465                           pclatu	equ	0xFFB
 16466                           pclath	equ	0xFFA
 16467                           tblptru	equ	0xFF8
 16468                           tblptrh	equ	0xFF7
 16469                           tblptrl	equ	0xFF6
 16470                           tablat	equ	0xFF5
 16471                           prodh	equ	0xFF4
 16472                           prodl	equ	0xFF3
 16473                           intcon	equ	0xFF2
 16474                           intcon2	equ	0xFF1
 16475                           intcon3	equ	0xFF0
 16476                           indf0	equ	0xFEF
 16477                           postinc0	equ	0xFEE
 16478                           fsr0h	equ	0xFEA
 16479                           fsr0l	equ	0xFE9
 16480                           wreg	equ	0xFE8
 16481                           postdec1	equ	0xFE5
 16482                           fsr1h	equ	0xFE2
 16483                           fsr1l	equ	0xFE1
 16484                           indf2	equ	0xFDF
 16485                           postinc2	equ	0xFDE
 16486                           postdec2	equ	0xFDD
 16487                           fsr2h	equ	0xFDA
 16488                           fsr2l	equ	0xFD9
 16489                           status	equ	0xFD8
 16490                           
 16491 ;; *************** function i2_printRTC *****************
 16492 ;; Defined at:
 16493 ;;		line 63 in file "RTC.c"
 16494 ;; Parameters:    Size  Location     Type
 16495 ;;		None
 16496 ;; Auto vars:     Size  Location     Type
 16497 ;;  printRTC       14   44[COMRAM] int [7]
 16498 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16499 ;;  printRTC        2   64[COMRAM] int 
 16500 ;;  printRTC        2   58[COMRAM] int 
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  1    wreg      void 
 16503 ;; Registers used:
 16504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16511 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16512 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16513 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;Total ram usage:       25 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:    3
 16517 ;; This function calls:
 16518 ;;		i2_getRTC
 16519 ;;		i2_lcdInst
 16520 ;;		i2_printf
 16521 ;;		i2_strcpy
 16522 ;; This function is called by:
 16523 ;;		i2_change_state_to_menu_start
 16524 ;; This function uses a non-reentrant model
 16525 ;;
 16526                           
 16527                           	psect	text60
 16528  002412                     __ptext60:
 16529                           	opt stack 0
 16530  002412                     i2_printRTC:
 16531                           	opt stack 18
 16532                           
 16533                           ;RTC.c: 64: getRTC();
 16534                           
 16535                           ;incstack = 0
 16536  002412  EC45  F01E         	call	i2_getRTC	;wreg free
 16537                           
 16538                           ;RTC.c: 65: char month[] = "MMM";
 16539  002416  C133  F03D         	movff	printRTC@F3214,i2printRTC@month
 16540  00241A  C134  F03E         	movff	printRTC@F3214+1,i2printRTC@month+1
 16541  00241E  C135  F03F         	movff	printRTC@F3214+2,i2printRTC@month+2
 16542  002422  C136  F040         	movff	printRTC@F3214+3,i2printRTC@month+3
 16543                           
 16544                           ;RTC.c: 66: int INT_time[7];
 16545                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16546  002426  0E00               	movlw	0
 16547  002428  6E42               	movwf	i2printRTC@i+1,c
 16548  00242A  0E00               	movlw	0
 16549  00242C  6E41               	movwf	i2printRTC@i,c
 16550  00242E  BE42               	btfsc	i2printRTC@i+1,7,c
 16551  002430  D006               	goto	i2l6102
 16552  002432  5042               	movf	i2printRTC@i+1,w,c
 16553  002434  E135               	bnz	i2l595
 16554  002436  0E07               	movlw	7
 16555  002438  5C41               	subwf	i2printRTC@i,w,c
 16556  00243A  B0D8               	btfsc	status,0,c
 16557  00243C  D031               	goto	i2l595
 16558  00243E                     i2l6102:
 16559                           
 16560                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16561  00243E  0E24               	movlw	low _time
 16562  002440  2441               	addwf	i2printRTC@i,w,c
 16563  002442  6ED9               	movwf	fsr2l,c
 16564  002444  0E01               	movlw	high _time
 16565  002446  2042               	addwfc	i2printRTC@i+1,w,c
 16566  002448  6EDA               	movwf	fsr2h,c
 16567  00244A  50DF               	movf	indf2,w,c
 16568  00244C  6E2A               	movwf	??i2_printRTC& (0+255),c
 16569  00244E  3A2A               	swapf	??i2_printRTC,f,c
 16570  002450  0E0F               	movlw	15
 16571  002452  162A               	andwf	??i2_printRTC,f,c
 16572  002454  0E0F               	movlw	15
 16573  002456  162A               	andwf	??i2_printRTC,f,c
 16574  002458  502A               	movf	??i2_printRTC,w,c
 16575  00245A  0D0A               	mullw	10
 16576  00245C  0E24               	movlw	low _time
 16577  00245E  2441               	addwf	i2printRTC@i,w,c
 16578  002460  6ED9               	movwf	fsr2l,c
 16579  002462  0E01               	movlw	high _time
 16580  002464  2042               	addwfc	i2printRTC@i+1,w,c
 16581  002466  6EDA               	movwf	fsr2h,c
 16582  002468  50DF               	movf	indf2,w,c
 16583  00246A  0B0F               	andlw	15
 16584  00246C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16585  00246E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16586  002470  50F3               	movf	prodl,w,c
 16587  002472  262B               	addwf	??i2_printRTC+1,f,c
 16588  002474  50F4               	movf	prodh,w,c
 16589  002476  222C               	addwfc	??i2_printRTC+2,f,c
 16590  002478  90D8               	bcf	status,0,c
 16591  00247A  3441               	rlcf	i2printRTC@i,w,c
 16592  00247C  6ED9               	movwf	fsr2l,c
 16593  00247E  3442               	rlcf	i2printRTC@i+1,w,c
 16594  002480  6EDA               	movwf	fsr2h,c
 16595  002482  0E2D               	movlw	low i2printRTC@INT_time
 16596  002484  26D9               	addwf	fsr2l,f,c
 16597  002486  0E00               	movlw	high i2printRTC@INT_time
 16598  002488  22DA               	addwfc	fsr2h,f,c
 16599  00248A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16600  00248E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16601  002492  4A41               	infsnz	i2printRTC@i,f,c
 16602  002494  2A42               	incf	i2printRTC@i+1,f,c
 16603  002496  BE42               	btfsc	i2printRTC@i+1,7,c
 16604  002498  D7D2               	goto	i2l6102
 16605  00249A  5042               	movf	i2printRTC@i+1,w,c
 16606  00249C  E101               	bnz	i2u465_40
 16607  00249E  D7CB               	goto	L10
 16608  0024A0                     i2u465_40:
 16609  0024A0                     i2l595:
 16610                           
 16611                           ;RTC.c: 69: }
 16612                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16613  0024A0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16614  0024A4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16615                           
 16616                           ;RTC.c: 71: switch(RTC_month){
 16617  0024A8  D084               	goto	i2l6134
 16618  0024AA                     i2l6108:
 16619                           
 16620                           ;RTC.c: 73: strcpy(month, "JAN");
 16621  0024AA  0E3D               	movlw	low i2printRTC@month
 16622  0024AC  6E01               	movwf	i2strcpy@to,c
 16623  0024AE  0E00               	movlw	high i2printRTC@month
 16624  0024B0  6E02               	movwf	i2strcpy@to+1,c
 16625  0024B2  0EDB               	movlw	low STR_8
 16626  0024B4  6E03               	movwf	i2strcpy@from,c
 16627  0024B6  0EFF               	movlw	high STR_8
 16628  0024B8  6E04               	movwf	i2strcpy@from+1,c
 16629  0024BA  EC43  F021         	call	i2_strcpy	;wreg free
 16630                           
 16631                           ;RTC.c: 74: break;
 16632  0024BE  D0A6               	goto	i2l6136
 16633  0024C0                     i2l6110:
 16634                           
 16635                           ;RTC.c: 76: strcpy(month, "FEB");
 16636  0024C0  0E3D               	movlw	low i2printRTC@month
 16637  0024C2  6E01               	movwf	i2strcpy@to,c
 16638  0024C4  0E00               	movlw	high i2printRTC@month
 16639  0024C6  6E02               	movwf	i2strcpy@to+1,c
 16640  0024C8  0ECB               	movlw	low STR_9
 16641  0024CA  6E03               	movwf	i2strcpy@from,c
 16642  0024CC  0EFF               	movlw	high STR_9
 16643  0024CE  6E04               	movwf	i2strcpy@from+1,c
 16644  0024D0  EC43  F021         	call	i2_strcpy	;wreg free
 16645                           
 16646                           ;RTC.c: 77: break;
 16647  0024D4  D09B               	goto	i2l6136
 16648  0024D6                     i2l6112:
 16649                           
 16650                           ;RTC.c: 79: strcpy(month, "MAR");
 16651  0024D6  0E3D               	movlw	low i2printRTC@month
 16652  0024D8  6E01               	movwf	i2strcpy@to,c
 16653  0024DA  0E00               	movlw	high i2printRTC@month
 16654  0024DC  6E02               	movwf	i2strcpy@to+1,c
 16655  0024DE  0EE7               	movlw	low STR_10
 16656  0024E0  6E03               	movwf	i2strcpy@from,c
 16657  0024E2  0EFF               	movlw	high STR_10
 16658  0024E4  6E04               	movwf	i2strcpy@from+1,c
 16659  0024E6  EC43  F021         	call	i2_strcpy	;wreg free
 16660                           
 16661                           ;RTC.c: 80: break;
 16662  0024EA  D090               	goto	i2l6136
 16663  0024EC                     i2l6114:
 16664                           
 16665                           ;RTC.c: 82: strcpy(month, "APR");
 16666  0024EC  0E3D               	movlw	low i2printRTC@month
 16667  0024EE  6E01               	movwf	i2strcpy@to,c
 16668  0024F0  0E00               	movlw	high i2printRTC@month
 16669  0024F2  6E02               	movwf	i2strcpy@to+1,c
 16670  0024F4  0EEB               	movlw	low STR_11
 16671  0024F6  6E03               	movwf	i2strcpy@from,c
 16672  0024F8  0EFF               	movlw	high STR_11
 16673  0024FA  6E04               	movwf	i2strcpy@from+1,c
 16674  0024FC  EC43  F021         	call	i2_strcpy	;wreg free
 16675                           
 16676                           ;RTC.c: 83: break;
 16677  002500  D085               	goto	i2l6136
 16678  002502                     i2l6116:
 16679                           
 16680                           ;RTC.c: 85: strcpy(month, "MAY");
 16681  002502  0E3D               	movlw	low i2printRTC@month
 16682  002504  6E01               	movwf	i2strcpy@to,c
 16683  002506  0E00               	movlw	high i2printRTC@month
 16684  002508  6E02               	movwf	i2strcpy@to+1,c
 16685  00250A  0EFB               	movlw	low STR_12
 16686  00250C  6E03               	movwf	i2strcpy@from,c
 16687  00250E  0EFF               	movlw	high STR_12
 16688  002510  6E04               	movwf	i2strcpy@from+1,c
 16689  002512  EC43  F021         	call	i2_strcpy	;wreg free
 16690                           
 16691                           ;RTC.c: 86: break;
 16692  002516  D07A               	goto	i2l6136
 16693  002518                     i2l6118:
 16694                           
 16695                           ;RTC.c: 88: strcpy(month, "JUN");
 16696  002518  0E3D               	movlw	low i2printRTC@month
 16697  00251A  6E01               	movwf	i2strcpy@to,c
 16698  00251C  0E00               	movlw	high i2printRTC@month
 16699  00251E  6E02               	movwf	i2strcpy@to+1,c
 16700  002520  0EDF               	movlw	low STR_13
 16701  002522  6E03               	movwf	i2strcpy@from,c
 16702  002524  0EFF               	movlw	high STR_13
 16703  002526  6E04               	movwf	i2strcpy@from+1,c
 16704  002528  EC43  F021         	call	i2_strcpy	;wreg free
 16705                           
 16706                           ;RTC.c: 89: break;
 16707  00252C  D06F               	goto	i2l6136
 16708  00252E                     i2l6120:
 16709                           
 16710                           ;RTC.c: 91: strcpy(month, "JUL");
 16711  00252E  0E3D               	movlw	low i2printRTC@month
 16712  002530  6E01               	movwf	i2strcpy@to,c
 16713  002532  0E00               	movlw	high i2printRTC@month
 16714  002534  6E02               	movwf	i2strcpy@to+1,c
 16715  002536  0ED7               	movlw	low STR_14
 16716  002538  6E03               	movwf	i2strcpy@from,c
 16717  00253A  0EFF               	movlw	high STR_14
 16718  00253C  6E04               	movwf	i2strcpy@from+1,c
 16719  00253E  EC43  F021         	call	i2_strcpy	;wreg free
 16720                           
 16721                           ;RTC.c: 92: break;
 16722  002542  D064               	goto	i2l6136
 16723  002544                     i2l6122:
 16724                           
 16725                           ;RTC.c: 94: strcpy(month, "AUG");
 16726  002544  0E3D               	movlw	low i2printRTC@month
 16727  002546  6E01               	movwf	i2strcpy@to,c
 16728  002548  0E00               	movlw	high i2printRTC@month
 16729  00254A  6E02               	movwf	i2strcpy@to+1,c
 16730  00254C  0ED3               	movlw	low STR_15
 16731  00254E  6E03               	movwf	i2strcpy@from,c
 16732  002550  0EFF               	movlw	high STR_15
 16733  002552  6E04               	movwf	i2strcpy@from+1,c
 16734  002554  EC43  F021         	call	i2_strcpy	;wreg free
 16735                           
 16736                           ;RTC.c: 95: break;
 16737  002558  D059               	goto	i2l6136
 16738  00255A                     i2l6124:
 16739                           
 16740                           ;RTC.c: 97: strcpy(month, "SEP");
 16741  00255A  0E3D               	movlw	low i2printRTC@month
 16742  00255C  6E01               	movwf	i2strcpy@to,c
 16743  00255E  0E00               	movlw	high i2printRTC@month
 16744  002560  6E02               	movwf	i2strcpy@to+1,c
 16745  002562  0EE3               	movlw	low STR_16
 16746  002564  6E03               	movwf	i2strcpy@from,c
 16747  002566  0EFF               	movlw	high STR_16
 16748  002568  6E04               	movwf	i2strcpy@from+1,c
 16749  00256A  EC43  F021         	call	i2_strcpy	;wreg free
 16750                           
 16751                           ;RTC.c: 98: break;
 16752  00256E  D04E               	goto	i2l6136
 16753  002570                     i2l6126:
 16754                           
 16755                           ;RTC.c: 100: strcpy(month, "OCT");
 16756  002570  0E3D               	movlw	low i2printRTC@month
 16757  002572  6E01               	movwf	i2strcpy@to,c
 16758  002574  0E00               	movlw	high i2printRTC@month
 16759  002576  6E02               	movwf	i2strcpy@to+1,c
 16760  002578  0EF3               	movlw	low STR_17
 16761  00257A  6E03               	movwf	i2strcpy@from,c
 16762  00257C  0EFF               	movlw	high STR_17
 16763  00257E  6E04               	movwf	i2strcpy@from+1,c
 16764  002580  EC43  F021         	call	i2_strcpy	;wreg free
 16765                           
 16766                           ;RTC.c: 101: break;
 16767  002584  D043               	goto	i2l6136
 16768  002586                     i2l6128:
 16769                           
 16770                           ;RTC.c: 103: strcpy(month, "NOV");
 16771  002586  0E3D               	movlw	low i2printRTC@month
 16772  002588  6E01               	movwf	i2strcpy@to,c
 16773  00258A  0E00               	movlw	high i2printRTC@month
 16774  00258C  6E02               	movwf	i2strcpy@to+1,c
 16775  00258E  0EF7               	movlw	low STR_18
 16776  002590  6E03               	movwf	i2strcpy@from,c
 16777  002592  0EFF               	movlw	high STR_18
 16778  002594  6E04               	movwf	i2strcpy@from+1,c
 16779  002596  EC43  F021         	call	i2_strcpy	;wreg free
 16780                           
 16781                           ;RTC.c: 104: break;
 16782  00259A  D038               	goto	i2l6136
 16783  00259C                     i2l6130:
 16784                           
 16785                           ;RTC.c: 106: strcpy(month, "DEC");
 16786  00259C  0E3D               	movlw	low i2printRTC@month
 16787  00259E  6E01               	movwf	i2strcpy@to,c
 16788  0025A0  0E00               	movlw	high i2printRTC@month
 16789  0025A2  6E02               	movwf	i2strcpy@to+1,c
 16790  0025A4  0ECF               	movlw	low STR_19
 16791  0025A6  6E03               	movwf	i2strcpy@from,c
 16792  0025A8  0EFF               	movlw	high STR_19
 16793  0025AA  6E04               	movwf	i2strcpy@from+1,c
 16794  0025AC  EC43  F021         	call	i2_strcpy	;wreg free
 16795                           
 16796                           ;RTC.c: 108: }
 16797                           
 16798                           ;RTC.c: 107: break;
 16799  0025B0  D02D               	goto	i2l6136
 16800  0025B2                     i2l6134:
 16801  0025B2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16802  0025B6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16803                           
 16804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16805                           ; Switch size 1, requested type "space"
 16806                           ; Number of cases is 1, Range of values is 0 to 0
 16807                           ; switch strategies available:
 16808                           ; Name         Instructions Cycles
 16809                           ; simple_byte            4     3 (average)
 16810                           ;	Chosen strategy is simple_byte
 16811  0025BA  502B               	movf	??i2_printRTC+1,w,c
 16812  0025BC  0A00               	xorlw	0	; case 0
 16813  0025BE  A4D8               	btfss	status,2,c
 16814  0025C0  D025               	goto	i2l6136
 16815                           
 16816                           ; Switch size 1, requested type "space"
 16817                           ; Number of cases is 12, Range of values is 1 to 12
 16818                           ; switch strategies available:
 16819                           ; Name         Instructions Cycles
 16820                           ; simple_byte           37    19 (average)
 16821                           ;	Chosen strategy is simple_byte
 16822  0025C2  502A               	movf	??i2_printRTC,w,c
 16823  0025C4  0A01               	xorlw	1	; case 1
 16824  0025C6  B4D8               	btfsc	status,2,c
 16825  0025C8  D770               	goto	i2l6108
 16826  0025CA  0A03               	xorlw	3	; case 2
 16827  0025CC  B4D8               	btfsc	status,2,c
 16828  0025CE  D778               	goto	i2l6110
 16829  0025D0  0A01               	xorlw	1	; case 3
 16830  0025D2  B4D8               	btfsc	status,2,c
 16831  0025D4  D780               	goto	i2l6112
 16832  0025D6  0A07               	xorlw	7	; case 4
 16833  0025D8  B4D8               	btfsc	status,2,c
 16834  0025DA  D788               	goto	i2l6114
 16835  0025DC  0A01               	xorlw	1	; case 5
 16836  0025DE  B4D8               	btfsc	status,2,c
 16837  0025E0  D790               	goto	i2l6116
 16838  0025E2  0A03               	xorlw	3	; case 6
 16839  0025E4  B4D8               	btfsc	status,2,c
 16840  0025E6  D798               	goto	i2l6118
 16841  0025E8  0A01               	xorlw	1	; case 7
 16842  0025EA  B4D8               	btfsc	status,2,c
 16843  0025EC  D7A0               	goto	i2l6120
 16844  0025EE  0A0F               	xorlw	15	; case 8
 16845  0025F0  B4D8               	btfsc	status,2,c
 16846  0025F2  D7A8               	goto	i2l6122
 16847  0025F4  0A01               	xorlw	1	; case 9
 16848  0025F6  B4D8               	btfsc	status,2,c
 16849  0025F8  D7B0               	goto	i2l6124
 16850  0025FA  0A03               	xorlw	3	; case 10
 16851  0025FC  B4D8               	btfsc	status,2,c
 16852  0025FE  D7B8               	goto	i2l6126
 16853  002600  0A01               	xorlw	1	; case 11
 16854  002602  B4D8               	btfsc	status,2,c
 16855  002604  D7C0               	goto	i2l6128
 16856  002606  0A07               	xorlw	7	; case 12
 16857  002608  B4D8               	btfsc	status,2,c
 16858  00260A  D7C8               	goto	i2l6130
 16859  00260C                     i2l6136:
 16860                           
 16861                           ;RTC.c: 109: lcdInst(0b10000000);;
 16862  00260C  0E80               	movlw	128
 16863  00260E  EC91  F023         	call	i2_lcdInst
 16864                           
 16865                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16866  002612  0E30               	movlw	low STR_21
 16867  002614  6E0D               	movwf	i2printf@f,c
 16868  002616  0EFB               	movlw	high STR_21
 16869  002618  6E0E               	movwf	i2printf@f+1,c
 16870  00261A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16871  00261E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16872  002622  0E3D               	movlw	low i2printRTC@month
 16873  002624  6E11               	movwf	?i2_printf+4,c
 16874  002626  0E00               	movlw	high i2printRTC@month
 16875  002628  6E12               	movwf	?i2_printf+5,c
 16876  00262A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16877  00262E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16878  002632  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16879  002636  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16880  00263A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16881  00263E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16882  002642  ECD4  F00A         	call	i2_printf	;wreg free
 16883  002646  0012               	return		;funcret
 16884  002648                     __end_ofi2_printRTC:
 16885                           	opt stack 0
 16886                           pclatu	equ	0xFFB
 16887                           pclath	equ	0xFFA
 16888                           tblptru	equ	0xFF8
 16889                           tblptrh	equ	0xFF7
 16890                           tblptrl	equ	0xFF6
 16891                           tablat	equ	0xFF5
 16892                           prodh	equ	0xFF4
 16893                           prodl	equ	0xFF3
 16894                           intcon	equ	0xFF2
 16895                           intcon2	equ	0xFF1
 16896                           intcon3	equ	0xFF0
 16897                           indf0	equ	0xFEF
 16898                           postinc0	equ	0xFEE
 16899                           fsr0h	equ	0xFEA
 16900                           fsr0l	equ	0xFE9
 16901                           wreg	equ	0xFE8
 16902                           postdec1	equ	0xFE5
 16903                           fsr1h	equ	0xFE2
 16904                           fsr1l	equ	0xFE1
 16905                           indf2	equ	0xFDF
 16906                           postinc2	equ	0xFDE
 16907                           postdec2	equ	0xFDD
 16908                           fsr2h	equ	0xFDA
 16909                           fsr2l	equ	0xFD9
 16910                           status	equ	0xFD8
 16911                           
 16912 ;; *************** function i2_strcpy *****************
 16913 ;; Defined at:
 16914 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;  to              2    0[COMRAM] PTR unsigned char 
 16917 ;;		 -> printRTC@month(4), UI@month(4), 
 16918 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16919 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16920 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16921 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16922 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16923 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16924 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16925 ;;		 -> STR_8(4), 
 16926 ;; Auto vars:     Size  Location     Type
 16927 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16928 ;;		 -> printRTC@month(4), UI@month(4), 
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  2    0[COMRAM] PTR unsigned char 
 16931 ;; Registers used:
 16932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16933 ;; Tracked objects:
 16934 ;;		On entry : 0/0
 16935 ;;		On exit  : 0/0
 16936 ;;		Unchanged: 0/0
 16937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16941 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16942 ;;Total ram usage:        6 bytes
 16943 ;; Hardware stack levels used:    1
 16944 ;; This function calls:
 16945 ;;		Nothing
 16946 ;; This function is called by:
 16947 ;;		i2_printRTC
 16948 ;; This function uses a non-reentrant model
 16949 ;;
 16950                           
 16951                           	psect	text61
 16952  004286                     __ptext61:
 16953                           	opt stack 0
 16954  004286                     i2_strcpy:
 16955                           	opt stack 20
 16956                           
 16957                           ;incstack = 0
 16958  004286  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16959  00428A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16960  00428E  D004               	goto	i2l5776
 16961  004290                     i2l5774:
 16962  004290  4A05               	infsnz	i2strcpy@cp,f,c
 16963  004292  2A06               	incf	i2strcpy@cp+1,f,c
 16964  004294  4A03               	infsnz	i2strcpy@from,f,c
 16965  004296  2A04               	incf	i2strcpy@from+1,f,c
 16966  004298                     i2l5776:
 16967  004298  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16968  00429C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16969  0042A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16970  0042A0  6AF8               	clrf	tblptru,c
 16971  0042A2                     	endif
 16972  0042A2                     	if	0	;tblptru may be non-zero
 16973  0042A2                     	endif
 16974  0042A2  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16975  0042A6  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16976  0042AA  0008               	tblrd		*
 16977  0042AC  CFF5 FFDF          	movff	tablat,indf2
 16978  0042B0  50DF               	movf	indf2,w,c
 16979  0042B2  B4D8               	btfsc	status,2,c
 16980  0042B4  0012               	return	
 16981  0042B6  D7EC               	goto	i2l5774
 16982  0042B8                     __end_ofi2_strcpy:
 16983                           	opt stack 0
 16984                           pclatu	equ	0xFFB
 16985                           pclath	equ	0xFFA
 16986                           tblptru	equ	0xFF8
 16987                           tblptrh	equ	0xFF7
 16988                           tblptrl	equ	0xFF6
 16989                           tablat	equ	0xFF5
 16990                           prodh	equ	0xFF4
 16991                           prodl	equ	0xFF3
 16992                           intcon	equ	0xFF2
 16993                           intcon2	equ	0xFF1
 16994                           intcon3	equ	0xFF0
 16995                           indf0	equ	0xFEF
 16996                           postinc0	equ	0xFEE
 16997                           fsr0h	equ	0xFEA
 16998                           fsr0l	equ	0xFE9
 16999                           wreg	equ	0xFE8
 17000                           postdec1	equ	0xFE5
 17001                           fsr1h	equ	0xFE2
 17002                           fsr1l	equ	0xFE1
 17003                           indf2	equ	0xFDF
 17004                           postinc2	equ	0xFDE
 17005                           postdec2	equ	0xFDD
 17006                           fsr2h	equ	0xFDA
 17007                           fsr2l	equ	0xFD9
 17008                           status	equ	0xFD8
 17009                           
 17010 ;; *************** function _inputHandler *****************
 17011 ;; Defined at:
 17012 ;;		line 370 in file "UI.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;		None
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;		None
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  2   41[COMRAM] int 
 17019 ;; Registers used:
 17020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17028 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17030 ;;Total ram usage:        4 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    4
 17033 ;; This function calls:
 17034 ;;		_change_state_to_logs_11
 17035 ;;		_change_state_to_logs_12
 17036 ;;		_change_state_to_logs_22
 17037 ;;		_change_state_to_logs_23
 17038 ;;		_change_state_to_logs_33
 17039 ;;		_change_state_to_logs_34
 17040 ;;		_change_state_to_menu_11
 17041 ;;		_change_state_to_menu_23
 17042 ;;		i2_change_state_to_menu_12
 17043 ;;		i2_change_state_to_menu_22
 17044 ;; This function is called by:
 17045 ;;		_updateMenu
 17046 ;; This function uses a non-reentrant model
 17047 ;;
 17048                           
 17049                           	psect	text62
 17050  00283A                     __ptext62:
 17051                           	opt stack 0
 17052  00283A                     _inputHandler:
 17053                           	opt stack 18
 17054                           
 17055                           ;UI.c: 375: if(firstboot){
 17056                           
 17057                           ;incstack = 0
 17058  00283A  5075               	movf	_firstboot,w,c
 17059  00283C  1076               	iorwf	_firstboot+1,w,c
 17060  00283E  B4D8               	btfsc	status,2,c
 17061  002840  D00B               	goto	i2l6204
 17062                           
 17063                           ;UI.c: 376: change_state_to_menu_11();
 17064  002842  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 17065                           
 17066                           ;UI.c: 377: firstboot = 0;
 17067  002846  0E00               	movlw	0
 17068  002848  6E76               	movwf	_firstboot+1,c
 17069  00284A  0E00               	movlw	0
 17070  00284C  6E75               	movwf	_firstboot,c
 17071                           
 17072                           ;UI.c: 378: return 0;
 17073  00284E  0E00               	movlw	0
 17074  002850  6E2B               	movwf	?_inputHandler+1,c
 17075  002852  0E00               	movlw	0
 17076  002854  6E2A               	movwf	?_inputHandler,c
 17077  002856  0012               	return	
 17078  002858                     i2l6204:
 17079                           
 17080                           ;UI.c: 379: }
 17081                           ;UI.c: 380: if (logstate){
 17082  002858  0100               	movlb	0	; () banked
 17083  00285A  51F6               	movf	_logstate& (0+255),w,b
 17084  00285C  0100               	movlb	0	; () banked
 17085  00285E  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17086  002860  B4D8               	btfsc	status,2,c
 17087  002862  D0C7               	goto	i2l6322
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 17091  002864  0E43               	movlw	67
 17092  002866  187D               	xorwf	_input,w,c	;volatile
 17093  002868  A4D8               	btfss	status,2,c
 17094  00286A  D012               	goto	i2l6222
 17095                           
 17096                           ; BSR set to: 0
 17097  00286C  B281               	btfsc	3969,1,c	;volatile
 17098  00286E  D009               	goto	i2l6214
 17099  002870  D00F               	goto	i2l6222
 17100  002872                     i2l6212:
 17101                           
 17102                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 17103  002872  0E68               	movlw	104
 17104  002874  6E2C               	movwf	??_inputHandler& (0+255),c
 17105  002876  0EE4               	movlw	228
 17106  002878                     i2u820_47:
 17107  002878  2EE8               	decfsz	wreg,f,c
 17108  00287A  D7FE               	bra	i2u820_47
 17109  00287C  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17110  00287E  D7FC               	bra	i2u820_47
 17111  002880  D000               	nop2	
 17112  002882                     i2l6214:
 17113  002882  B281               	btfsc	3969,1,c	;volatile
 17114  002884  D7F6               	goto	i2l6212
 17115  002886                     i2l6216:
 17116                           
 17117                           ;UI.c: 385: }
 17118                           ;UI.c: 386: return 0;
 17119  002886  0E00               	movlw	0
 17120  002888  6E2B               	movwf	?_inputHandler+1,c
 17121  00288A  0E00               	movlw	0
 17122  00288C  6E2A               	movwf	?_inputHandler,c
 17123  00288E  0012               	return	
 17124  002890                     i2l6222:
 17125                           
 17126                           ;UI.c: 388: else if (input == 'D'){
 17127  002890  0E44               	movlw	68
 17128  002892  187D               	xorwf	_input,w,c	;volatile
 17129  002894  A4D8               	btfss	status,2,c
 17130  002896  D7F7               	goto	i2l6216
 17131                           
 17132                           ;UI.c: 390: logstate = 0;
 17133  002898  0E00               	movlw	0
 17134  00289A  0100               	movlb	0	; () banked
 17135  00289C  6FF7               	movwf	(_logstate+1)& (0+255),b
 17136  00289E  0E00               	movlw	0
 17137  0028A0  6FF6               	movwf	_logstate& (0+255),b
 17138                           
 17139                           ;UI.c: 391: switch(cur_state){
 17140  0028A2  D012               	goto	i2l6240
 17141  0028A4                     i2l6226:
 17142                           
 17143                           ;UI.c: 393: change_state_to_logs_11();
 17144  0028A4  EC1C  F022         	call	_change_state_to_logs_11	;wreg free
 17145                           
 17146                           ;UI.c: 394: break;
 17147  0028A8  D7EE               	goto	i2l6216
 17148  0028AA                     i2l6228:
 17149                           
 17150                           ;UI.c: 396: change_state_to_logs_12();
 17151  0028AA  EC04  F022         	call	_change_state_to_logs_12	;wreg free
 17152                           
 17153                           ;UI.c: 397: break;
 17154  0028AE  D7EB               	goto	i2l6216
 17155  0028B0                     i2l6230:
 17156                           
 17157                           ;UI.c: 399: change_state_to_logs_22();
 17158  0028B0  ECEC  F021         	call	_change_state_to_logs_22	;wreg free
 17159                           
 17160                           ;UI.c: 400: break;
 17161  0028B4  D7E8               	goto	i2l6216
 17162  0028B6                     i2l6232:
 17163                           
 17164                           ;UI.c: 402: change_state_to_logs_23();
 17165  0028B6  EC4B  F022         	call	_change_state_to_logs_23	;wreg free
 17166                           
 17167                           ;UI.c: 403: break;
 17168  0028BA  D7E5               	goto	i2l6216
 17169  0028BC                     i2l6234:
 17170                           
 17171                           ;UI.c: 405: change_state_to_logs_33();
 17172  0028BC  ECD4  F021         	call	_change_state_to_logs_33	;wreg free
 17173                           
 17174                           ;UI.c: 406: break;
 17175  0028C0  D7E2               	goto	i2l6216
 17176  0028C2                     i2l6236:
 17177                           
 17178                           ;UI.c: 408: change_state_to_logs_34();
 17179  0028C2  ECBC  F021         	call	_change_state_to_logs_34	;wreg free
 17180                           
 17181                           ;UI.c: 410: }
 17182                           
 17183                           ;UI.c: 409: break;
 17184  0028C6  D7DF               	goto	i2l6216
 17185  0028C8                     i2l6240:
 17186  0028C8  C0DE  F02C         	movff	_cur_state,??_inputHandler
 17187  0028CC  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 17188                           
 17189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17190                           ; Switch size 1, requested type "space"
 17191                           ; Number of cases is 2, Range of values is 3 to 4
 17192                           ; switch strategies available:
 17193                           ; Name         Instructions Cycles
 17194                           ; simple_byte            7     4 (average)
 17195                           ;	Chosen strategy is simple_byte
 17196  0028D0  502D               	movf	??_inputHandler+1,w,c
 17197  0028D2  0A03               	xorlw	3	; case 3
 17198  0028D4  B4D8               	btfsc	status,2,c
 17199  0028D6  D004               	goto	i2l8440
 17200  0028D8  0A07               	xorlw	7	; case 4
 17201  0028DA  B4D8               	btfsc	status,2,c
 17202  0028DC  D00F               	goto	i2l8442
 17203  0028DE  D7D3               	goto	i2l6216
 17204  0028E0                     i2l8440:
 17205                           
 17206                           ; Switch size 1, requested type "space"
 17207                           ; Number of cases is 4, Range of values is 243 to 255
 17208                           ; switch strategies available:
 17209                           ; Name         Instructions Cycles
 17210                           ; simple_byte           13     7 (average)
 17211                           ;	Chosen strategy is simple_byte
 17212  0028E0  502C               	movf	??_inputHandler,w,c
 17213  0028E2  0AF3               	xorlw	243	; case 243
 17214  0028E4  B4D8               	btfsc	status,2,c
 17215  0028E6  D7DE               	goto	i2l6226
 17216  0028E8  0A07               	xorlw	7	; case 244
 17217  0028EA  B4D8               	btfsc	status,2,c
 17218  0028EC  D7DE               	goto	i2l6228
 17219  0028EE  0A0A               	xorlw	10	; case 254
 17220  0028F0  B4D8               	btfsc	status,2,c
 17221  0028F2  D7DE               	goto	i2l6230
 17222  0028F4  0A01               	xorlw	1	; case 255
 17223  0028F6  B4D8               	btfsc	status,2,c
 17224  0028F8  D7DE               	goto	i2l6232
 17225  0028FA  D7C5               	goto	i2l6216
 17226  0028FC                     i2l8442:
 17227                           
 17228                           ; Switch size 1, requested type "space"
 17229                           ; Number of cases is 2, Range of values is 9 to 10
 17230                           ; switch strategies available:
 17231                           ; Name         Instructions Cycles
 17232                           ; simple_byte            7     4 (average)
 17233                           ;	Chosen strategy is simple_byte
 17234  0028FC  502C               	movf	??_inputHandler,w,c
 17235  0028FE  0A09               	xorlw	9	; case 9
 17236  002900  B4D8               	btfsc	status,2,c
 17237  002902  D7DC               	goto	i2l6234
 17238  002904  0A03               	xorlw	3	; case 10
 17239  002906  B4D8               	btfsc	status,2,c
 17240  002908  D7DC               	goto	i2l6236
 17241  00290A  D7BD               	goto	i2l6216
 17242  00290C                     i2l6252:
 17243                           
 17244                           ;UI.c: 420: if(cur_state == 11){
 17245  00290C  0E0B               	movlw	11
 17246  00290E  0100               	movlb	0	; () banked
 17247  002910  19DE               	xorwf	_cur_state& (0+255),w,b
 17248  002912  0100               	movlb	0	; () banked
 17249  002914  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17250  002916  A4D8               	btfss	status,2,c
 17251  002918  D005               	goto	i2l6260
 17252                           
 17253                           ; BSR set to: 0
 17254                           ;UI.c: 421: return 0;
 17255  00291A  0E00               	movlw	0
 17256  00291C  6E2B               	movwf	?_inputHandler+1,c
 17257  00291E  0E00               	movlw	0
 17258  002920  6E2A               	movwf	?_inputHandler,c
 17259                           
 17260                           ; BSR set to: 0
 17261  002922  0012               	return	
 17262  002924                     i2l6260:
 17263                           
 17264                           ; BSR set to: 0
 17265                           ;UI.c: 423: else{
 17266                           ;UI.c: 424: change_state_to_menu_11();
 17267  002924  ECA4  F021         	call	_change_state_to_menu_11	;wreg free
 17268                           
 17269                           ;UI.c: 425: }
 17270                           ;UI.c: 426: return 0;
 17271  002928  0E00               	movlw	0
 17272  00292A  6E2B               	movwf	?_inputHandler+1,c
 17273  00292C  0E00               	movlw	0
 17274  00292E  6E2A               	movwf	?_inputHandler,c
 17275  002930  0012               	return	
 17276  002932                     i2l6266:
 17277                           
 17278                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 17279  002932  0E16               	movlw	22
 17280  002934  0100               	movlb	0	; () banked
 17281  002936  19DE               	xorwf	_cur_state& (0+255),w,b
 17282  002938  0100               	movlb	0	; () banked
 17283  00293A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17284  00293C  B4D8               	btfsc	status,2,c
 17285  00293E  D007               	goto	i2l6270
 17286                           
 17287                           ; BSR set to: 0
 17288  002940  0E0C               	movlw	12
 17289  002942  0100               	movlb	0	; () banked
 17290  002944  19DE               	xorwf	_cur_state& (0+255),w,b
 17291  002946  0100               	movlb	0	; () banked
 17292  002948  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17293  00294A  A4D8               	btfss	status,2,c
 17294  00294C  D005               	goto	i2l6276
 17295  00294E                     i2l6270:
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;UI.c: 429: return 0;
 17299  00294E  0E00               	movlw	0
 17300  002950  6E2B               	movwf	?_inputHandler+1,c
 17301  002952  0E00               	movlw	0
 17302  002954  6E2A               	movwf	?_inputHandler,c
 17303                           
 17304                           ; BSR set to: 0
 17305  002956  0012               	return	
 17306  002958                     i2l6276:
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;UI.c: 431: else if(cur_state == 23){
 17310  002958  0E17               	movlw	23
 17311  00295A  0100               	movlb	0	; () banked
 17312  00295C  19DE               	xorwf	_cur_state& (0+255),w,b
 17313  00295E  0100               	movlb	0	; () banked
 17314  002960  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17315  002962  A4D8               	btfss	status,2,c
 17316  002964  D003               	goto	i2l6280
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;UI.c: 432: change_state_to_menu_22();
 17320  002966  EC5C  F021         	call	i2_change_state_to_menu_22	;wreg free
 17321                           
 17322                           ;UI.c: 433: }
 17323  00296A  D002               	goto	i2l6282
 17324  00296C                     i2l6280:
 17325                           
 17326                           ;UI.c: 434: else{
 17327                           ;UI.c: 435: change_state_to_menu_12();
 17328  00296C  EC74  F021         	call	i2_change_state_to_menu_12	;wreg free
 17329  002970                     i2l6282:
 17330                           
 17331                           ;UI.c: 436: }
 17332                           ;UI.c: 437: return 0;
 17333  002970  0E00               	movlw	0
 17334  002972  6E2B               	movwf	?_inputHandler+1,c
 17335  002974  0E00               	movlw	0
 17336  002976  6E2A               	movwf	?_inputHandler,c
 17337  002978  0012               	return	
 17338  00297A                     i2l6286:
 17339                           
 17340                           ;UI.c: 439: if(cur_state == 23){
 17341  00297A  0E17               	movlw	23
 17342  00297C  0100               	movlb	0	; () banked
 17343  00297E  19DE               	xorwf	_cur_state& (0+255),w,b
 17344  002980  0100               	movlb	0	; () banked
 17345  002982  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17346  002984  A4D8               	btfss	status,2,c
 17347  002986  D005               	goto	i2l6294
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;UI.c: 440: return 0;
 17351  002988  0E00               	movlw	0
 17352  00298A  6E2B               	movwf	?_inputHandler+1,c
 17353  00298C  0E00               	movlw	0
 17354  00298E  6E2A               	movwf	?_inputHandler,c
 17355                           
 17356                           ; BSR set to: 0
 17357  002990  0012               	return	
 17358  002992                     i2l6294:
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;UI.c: 442: else{
 17362                           ;UI.c: 443: change_state_to_menu_23();
 17363  002992  EC8C  F021         	call	_change_state_to_menu_23	;wreg free
 17364                           
 17365                           ;UI.c: 444: }
 17366                           ;UI.c: 445: return 0;
 17367  002996  0E00               	movlw	0
 17368  002998  6E2B               	movwf	?_inputHandler+1,c
 17369  00299A  0E00               	movlw	0
 17370  00299C  6E2A               	movwf	?_inputHandler,c
 17371  00299E  0012               	return	
 17372  0029A0                     i2l6300:
 17373                           
 17374                           ;UI.c: 448: up = 1;
 17375  0029A0  0E00               	movlw	0
 17376  0029A2  6E78               	movwf	_up+1,c
 17377  0029A4  0E01               	movlw	1
 17378  0029A6  6E77               	movwf	_up,c
 17379                           
 17380                           ;UI.c: 449: return 1;
 17381  0029A8  0E00               	movlw	0
 17382  0029AA  6E2B               	movwf	?_inputHandler+1,c
 17383  0029AC  0E01               	movlw	1
 17384  0029AE  6E2A               	movwf	?_inputHandler,c
 17385  0029B0  0012               	return	
 17386  0029B2                     i2l6304:
 17387                           
 17388                           ;UI.c: 451: down = 1;
 17389  0029B2  0E00               	movlw	0
 17390  0029B4  6E6A               	movwf	_down+1,c
 17391  0029B6  0E01               	movlw	1
 17392  0029B8  6E69               	movwf	_down,c
 17393                           
 17394                           ;UI.c: 452: return 1;
 17395  0029BA  0E00               	movlw	0
 17396  0029BC  6E2B               	movwf	?_inputHandler+1,c
 17397  0029BE  0E01               	movlw	1
 17398  0029C0  6E2A               	movwf	?_inputHandler,c
 17399  0029C2  0012               	return	
 17400  0029C4                     i2l6308:
 17401                           
 17402                           ;UI.c: 454: enter = 1;
 17403  0029C4  0E00               	movlw	0
 17404  0029C6  6E6C               	movwf	_enter+1,c
 17405  0029C8  0E01               	movlw	1
 17406  0029CA  6E6B               	movwf	_enter,c
 17407                           
 17408                           ;UI.c: 455: return 1;
 17409  0029CC  0E00               	movlw	0
 17410  0029CE  6E2B               	movwf	?_inputHandler+1,c
 17411  0029D0  0E01               	movlw	1
 17412  0029D2  6E2A               	movwf	?_inputHandler,c
 17413  0029D4  0012               	return	
 17414  0029D6                     i2l6312:
 17415                           
 17416                           ;UI.c: 457: back = 1;
 17417  0029D6  0E00               	movlw	0
 17418  0029D8  6E5C               	movwf	_back+1,c
 17419  0029DA  0E01               	movlw	1
 17420  0029DC  6E5B               	movwf	_back,c
 17421                           
 17422                           ;UI.c: 458: return 1;
 17423  0029DE  0E00               	movlw	0
 17424  0029E0  6E2B               	movwf	?_inputHandler+1,c
 17425  0029E2  0E01               	movlw	1
 17426  0029E4  6E2A               	movwf	?_inputHandler,c
 17427  0029E6  0012               	return	
 17428  0029E8                     i2l6316:
 17429                           
 17430                           ;UI.c: 461: return 1;
 17431  0029E8  0E00               	movlw	0
 17432  0029EA  6E2B               	movwf	?_inputHandler+1,c
 17433  0029EC  0E01               	movlw	1
 17434  0029EE  6E2A               	movwf	?_inputHandler,c
 17435                           
 17436                           ;UI.c: 462: }
 17437  0029F0  0012               	return	
 17438  0029F2                     i2l6322:
 17439  0029F2  507D               	movf	_input,w,c	;volatile
 17440                           
 17441                           ; Switch size 1, requested type "space"
 17442                           ; Number of cases is 7, Range of values is 49 to 68
 17443                           ; switch strategies available:
 17444                           ; Name         Instructions Cycles
 17445                           ; simple_byte           22    12 (average)
 17446                           ;	Chosen strategy is simple_byte
 17447  0029F4  0A31               	xorlw	49	; case 49
 17448  0029F6  B4D8               	btfsc	status,2,c
 17449  0029F8  D789               	goto	i2l6252
 17450  0029FA  0A03               	xorlw	3	; case 50
 17451  0029FC  B4D8               	btfsc	status,2,c
 17452  0029FE  D799               	goto	i2l6266
 17453  002A00  0A01               	xorlw	1	; case 51
 17454  002A02  B4D8               	btfsc	status,2,c
 17455  002A04  D7BA               	goto	i2l6286
 17456  002A06  0A72               	xorlw	114	; case 65
 17457  002A08  B4D8               	btfsc	status,2,c
 17458  002A0A  D7CA               	goto	i2l6300
 17459  002A0C  0A03               	xorlw	3	; case 66
 17460  002A0E  B4D8               	btfsc	status,2,c
 17461  002A10  D7D0               	goto	i2l6304
 17462  002A12  0A01               	xorlw	1	; case 67
 17463  002A14  B4D8               	btfsc	status,2,c
 17464  002A16  D7D6               	goto	i2l6308
 17465  002A18  0A07               	xorlw	7	; case 68
 17466  002A1A  B4D8               	btfsc	status,2,c
 17467  002A1C  D7DC               	goto	i2l6312
 17468  002A1E  D7E4               	goto	i2l6316
 17469  002A20                     __end_of_inputHandler:
 17470                           	opt stack 0
 17471                           pclatu	equ	0xFFB
 17472                           pclath	equ	0xFFA
 17473                           tblptru	equ	0xFF8
 17474                           tblptrh	equ	0xFF7
 17475                           tblptrl	equ	0xFF6
 17476                           tablat	equ	0xFF5
 17477                           prodh	equ	0xFF4
 17478                           prodl	equ	0xFF3
 17479                           intcon	equ	0xFF2
 17480                           intcon2	equ	0xFF1
 17481                           intcon3	equ	0xFF0
 17482                           indf0	equ	0xFEF
 17483                           postinc0	equ	0xFEE
 17484                           fsr0h	equ	0xFEA
 17485                           fsr0l	equ	0xFE9
 17486                           wreg	equ	0xFE8
 17487                           postdec1	equ	0xFE5
 17488                           fsr1h	equ	0xFE2
 17489                           fsr1l	equ	0xFE1
 17490                           indf2	equ	0xFDF
 17491                           postinc2	equ	0xFDE
 17492                           postdec2	equ	0xFDD
 17493                           fsr2h	equ	0xFDA
 17494                           fsr2l	equ	0xFD9
 17495                           status	equ	0xFD8
 17496                           
 17497 ;; *************** function i2_change_state_to_menu_22 *****************
 17498 ;; Defined at:
 17499 ;;		line 496 in file "UI.c"
 17500 ;; Parameters:    Size  Location     Type
 17501 ;;		None
 17502 ;; Auto vars:     Size  Location     Type
 17503 ;;		None
 17504 ;; Return value:  Size  Location     Type
 17505 ;;                  1    wreg      void 
 17506 ;; Registers used:
 17507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17508 ;; Tracked objects:
 17509 ;;		On entry : 0/0
 17510 ;;		On exit  : 0/0
 17511 ;;		Unchanged: 0/0
 17512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17517 ;;Total ram usage:        0 bytes
 17518 ;; Hardware stack levels used:    1
 17519 ;; Hardware stack levels required when called:    3
 17520 ;; This function calls:
 17521 ;;		i2_lcdInst
 17522 ;;		i2_printf
 17523 ;; This function is called by:
 17524 ;;		_updateMenu
 17525 ;;		_inputHandler
 17526 ;; This function uses a non-reentrant model
 17527 ;;
 17528                           
 17529                           	psect	text63
 17530  0042B8                     __ptext63:
 17531                           	opt stack 0
 17532  0042B8                     i2_change_state_to_menu_22:
 17533                           	opt stack 19
 17534                           
 17535                           ;UI.c: 497: cur_state = 22;
 17536                           
 17537                           ;incstack = 0
 17538  0042B8  0E00               	movlw	0
 17539  0042BA  0100               	movlb	0	; () banked
 17540  0042BC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17541  0042BE  0E16               	movlw	22
 17542  0042C0  6FDE               	movwf	_cur_state& (0+255),b
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;UI.c: 499: lcdInst(0b10000000);;
 17546  0042C2  0E80               	movlw	128
 17547  0042C4  EC91  F023         	call	i2_lcdInst
 17548                           
 17549                           ;UI.c: 500: printf("2. SORT        <");
 17550  0042C8  0EDA               	movlw	low STR_34
 17551  0042CA  6E0D               	movwf	i2printf@f,c
 17552  0042CC  0EFD               	movlw	high STR_34
 17553  0042CE  6E0E               	movwf	i2printf@f+1,c
 17554  0042D0  ECD4  F00A         	call	i2_printf	;wreg free
 17555                           
 17556                           ;UI.c: 501: lcdInst(0b11000000);;
 17557  0042D4  0EC0               	movlw	192
 17558  0042D6  EC91  F023         	call	i2_lcdInst
 17559                           
 17560                           ;UI.c: 502: printf("3. LOGS         ");
 17561  0042DA  0E1F               	movlw	low STR_36
 17562  0042DC  6E0D               	movwf	i2printf@f,c
 17563  0042DE  0EFD               	movlw	high STR_36
 17564  0042E0  6E0E               	movwf	i2printf@f+1,c
 17565  0042E2  ECD4  F00A         	call	i2_printf	;wreg free
 17566  0042E6  0012               	return		;funcret
 17567  0042E8                     __end_ofi2_change_state_to_menu_22:
 17568                           	opt stack 0
 17569                           pclatu	equ	0xFFB
 17570                           pclath	equ	0xFFA
 17571                           tblptru	equ	0xFF8
 17572                           tblptrh	equ	0xFF7
 17573                           tblptrl	equ	0xFF6
 17574                           tablat	equ	0xFF5
 17575                           prodh	equ	0xFF4
 17576                           prodl	equ	0xFF3
 17577                           intcon	equ	0xFF2
 17578                           intcon2	equ	0xFF1
 17579                           intcon3	equ	0xFF0
 17580                           indf0	equ	0xFEF
 17581                           postinc0	equ	0xFEE
 17582                           fsr0h	equ	0xFEA
 17583                           fsr0l	equ	0xFE9
 17584                           wreg	equ	0xFE8
 17585                           postdec1	equ	0xFE5
 17586                           fsr1h	equ	0xFE2
 17587                           fsr1l	equ	0xFE1
 17588                           indf2	equ	0xFDF
 17589                           postinc2	equ	0xFDE
 17590                           postdec2	equ	0xFDD
 17591                           fsr2h	equ	0xFDA
 17592                           fsr2l	equ	0xFD9
 17593                           status	equ	0xFD8
 17594                           
 17595 ;; *************** function i2_change_state_to_menu_12 *****************
 17596 ;; Defined at:
 17597 ;;		line 488 in file "UI.c"
 17598 ;; Parameters:    Size  Location     Type
 17599 ;;		None
 17600 ;; Auto vars:     Size  Location     Type
 17601 ;;		None
 17602 ;; Return value:  Size  Location     Type
 17603 ;;                  1    wreg      void 
 17604 ;; Registers used:
 17605 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17606 ;; Tracked objects:
 17607 ;;		On entry : 0/0
 17608 ;;		On exit  : 0/0
 17609 ;;		Unchanged: 0/0
 17610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;Total ram usage:        0 bytes
 17616 ;; Hardware stack levels used:    1
 17617 ;; Hardware stack levels required when called:    3
 17618 ;; This function calls:
 17619 ;;		i2_lcdInst
 17620 ;;		i2_printf
 17621 ;; This function is called by:
 17622 ;;		_updateMenu
 17623 ;;		_inputHandler
 17624 ;; This function uses a non-reentrant model
 17625 ;;
 17626                           
 17627                           	psect	text64
 17628  0042E8                     __ptext64:
 17629                           	opt stack 0
 17630  0042E8                     i2_change_state_to_menu_12:
 17631                           	opt stack 19
 17632                           
 17633                           ;UI.c: 489: cur_state = 12;
 17634                           
 17635                           ;incstack = 0
 17636  0042E8  0E00               	movlw	0
 17637  0042EA  0100               	movlb	0	; () banked
 17638  0042EC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17639  0042EE  0E0C               	movlw	12
 17640  0042F0  6FDE               	movwf	_cur_state& (0+255),b
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;UI.c: 491: lcdInst(0b10000000);;
 17644  0042F2  0E80               	movlw	128
 17645  0042F4  EC91  F023         	call	i2_lcdInst
 17646                           
 17647                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17648  0042F8  0E41               	movlw	low STR_33
 17649  0042FA  6E0D               	movwf	i2printf@f,c
 17650  0042FC  0EFD               	movlw	high STR_33
 17651  0042FE  6E0E               	movwf	i2printf@f+1,c
 17652  004300  ECD4  F00A         	call	i2_printf	;wreg free
 17653                           
 17654                           ;UI.c: 493: lcdInst(0b11000000);;
 17655  004304  0EC0               	movlw	192
 17656  004306  EC91  F023         	call	i2_lcdInst
 17657                           
 17658                           ;UI.c: 494: printf("2. SORT        <");
 17659  00430A  0EDA               	movlw	low STR_34
 17660  00430C  6E0D               	movwf	i2printf@f,c
 17661  00430E  0EFD               	movlw	high STR_34
 17662  004310  6E0E               	movwf	i2printf@f+1,c
 17663  004312  ECD4  F00A         	call	i2_printf	;wreg free
 17664  004316  0012               	return		;funcret
 17665  004318                     __end_ofi2_change_state_to_menu_12:
 17666                           	opt stack 0
 17667                           pclatu	equ	0xFFB
 17668                           pclath	equ	0xFFA
 17669                           tblptru	equ	0xFF8
 17670                           tblptrh	equ	0xFF7
 17671                           tblptrl	equ	0xFF6
 17672                           tablat	equ	0xFF5
 17673                           prodh	equ	0xFF4
 17674                           prodl	equ	0xFF3
 17675                           intcon	equ	0xFF2
 17676                           intcon2	equ	0xFF1
 17677                           intcon3	equ	0xFF0
 17678                           indf0	equ	0xFEF
 17679                           postinc0	equ	0xFEE
 17680                           fsr0h	equ	0xFEA
 17681                           fsr0l	equ	0xFE9
 17682                           wreg	equ	0xFE8
 17683                           postdec1	equ	0xFE5
 17684                           fsr1h	equ	0xFE2
 17685                           fsr1l	equ	0xFE1
 17686                           indf2	equ	0xFDF
 17687                           postinc2	equ	0xFDE
 17688                           postdec2	equ	0xFDD
 17689                           fsr2h	equ	0xFDA
 17690                           fsr2l	equ	0xFD9
 17691                           status	equ	0xFD8
 17692                           
 17693 ;; *************** function _change_state_to_menu_23 *****************
 17694 ;; Defined at:
 17695 ;;		line 504 in file "UI.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;		None
 17698 ;; Auto vars:     Size  Location     Type
 17699 ;;		None
 17700 ;; Return value:  Size  Location     Type
 17701 ;;                  1    wreg      void 
 17702 ;; Registers used:
 17703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;Total ram usage:        0 bytes
 17714 ;; Hardware stack levels used:    1
 17715 ;; Hardware stack levels required when called:    3
 17716 ;; This function calls:
 17717 ;;		i2_lcdInst
 17718 ;;		i2_printf
 17719 ;; This function is called by:
 17720 ;;		_updateMenu
 17721 ;;		_inputHandler
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           	psect	text65
 17726  004318                     __ptext65:
 17727                           	opt stack 0
 17728  004318                     _change_state_to_menu_23:
 17729                           	opt stack 18
 17730                           
 17731                           ;UI.c: 505: cur_state = 23;
 17732                           
 17733                           ;incstack = 0
 17734  004318  0E00               	movlw	0
 17735  00431A  0100               	movlb	0	; () banked
 17736  00431C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17737  00431E  0E17               	movlw	23
 17738  004320  6FDE               	movwf	_cur_state& (0+255),b
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;UI.c: 507: lcdInst(0b10000000);;
 17742  004322  0E80               	movlw	128
 17743  004324  EC91  F023         	call	i2_lcdInst
 17744                           
 17745                           ;UI.c: 508: printf("2. SORT         ");
 17746  004328  0E30               	movlw	low STR_32
 17747  00432A  6E0D               	movwf	i2printf@f,c
 17748  00432C  0EFD               	movlw	high STR_32
 17749  00432E  6E0E               	movwf	i2printf@f+1,c
 17750  004330  ECD4  F00A         	call	i2_printf	;wreg free
 17751                           
 17752                           ;UI.c: 509: lcdInst(0b11000000);;
 17753  004334  0EC0               	movlw	192
 17754  004336  EC91  F023         	call	i2_lcdInst
 17755                           
 17756                           ;UI.c: 510: printf("3. LOGS        <");
 17757  00433A  0EC9               	movlw	low STR_38
 17758  00433C  6E0D               	movwf	i2printf@f,c
 17759  00433E  0EFD               	movlw	high STR_38
 17760  004340  6E0E               	movwf	i2printf@f+1,c
 17761  004342  ECD4  F00A         	call	i2_printf	;wreg free
 17762  004346  0012               	return		;funcret
 17763  004348                     __end_of_change_state_to_menu_23:
 17764                           	opt stack 0
 17765                           pclatu	equ	0xFFB
 17766                           pclath	equ	0xFFA
 17767                           tblptru	equ	0xFF8
 17768                           tblptrh	equ	0xFF7
 17769                           tblptrl	equ	0xFF6
 17770                           tablat	equ	0xFF5
 17771                           prodh	equ	0xFF4
 17772                           prodl	equ	0xFF3
 17773                           intcon	equ	0xFF2
 17774                           intcon2	equ	0xFF1
 17775                           intcon3	equ	0xFF0
 17776                           indf0	equ	0xFEF
 17777                           postinc0	equ	0xFEE
 17778                           fsr0h	equ	0xFEA
 17779                           fsr0l	equ	0xFE9
 17780                           wreg	equ	0xFE8
 17781                           postdec1	equ	0xFE5
 17782                           fsr1h	equ	0xFE2
 17783                           fsr1l	equ	0xFE1
 17784                           indf2	equ	0xFDF
 17785                           postinc2	equ	0xFDE
 17786                           postdec2	equ	0xFDD
 17787                           fsr2h	equ	0xFDA
 17788                           fsr2l	equ	0xFD9
 17789                           status	equ	0xFD8
 17790                           
 17791 ;; *************** function _change_state_to_menu_11 *****************
 17792 ;; Defined at:
 17793 ;;		line 480 in file "UI.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;		None
 17796 ;; Auto vars:     Size  Location     Type
 17797 ;;		None
 17798 ;; Return value:  Size  Location     Type
 17799 ;;                  1    wreg      void 
 17800 ;; Registers used:
 17801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17802 ;; Tracked objects:
 17803 ;;		On entry : 0/0
 17804 ;;		On exit  : 0/0
 17805 ;;		Unchanged: 0/0
 17806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17811 ;;Total ram usage:        0 bytes
 17812 ;; Hardware stack levels used:    1
 17813 ;; Hardware stack levels required when called:    3
 17814 ;; This function calls:
 17815 ;;		i2_lcdInst
 17816 ;;		i2_printf
 17817 ;; This function is called by:
 17818 ;;		_updateMenu
 17819 ;;		_inputHandler
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           	psect	text66
 17824  004348                     __ptext66:
 17825                           	opt stack 0
 17826  004348                     _change_state_to_menu_11:
 17827                           	opt stack 18
 17828                           
 17829                           ;UI.c: 481: cur_state = 11;
 17830                           
 17831                           ;incstack = 0
 17832  004348  0E00               	movlw	0
 17833  00434A  0100               	movlb	0	; () banked
 17834  00434C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17835  00434E  0E0B               	movlw	11
 17836  004350  6FDE               	movwf	_cur_state& (0+255),b
 17837                           
 17838                           ; BSR set to: 0
 17839                           ;UI.c: 483: lcdInst(0b10000000);;
 17840  004352  0E80               	movlw	128
 17841  004354  EC91  F023         	call	i2_lcdInst
 17842                           
 17843                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17844  004358  0EEB               	movlw	low STR_31
 17845  00435A  6E0D               	movwf	i2printf@f,c
 17846  00435C  0EFD               	movlw	high STR_31
 17847  00435E  6E0E               	movwf	i2printf@f+1,c
 17848  004360  ECD4  F00A         	call	i2_printf	;wreg free
 17849                           
 17850                           ;UI.c: 485: lcdInst(0b11000000);;
 17851  004364  0EC0               	movlw	192
 17852  004366  EC91  F023         	call	i2_lcdInst
 17853                           
 17854                           ;UI.c: 486: printf("2. SORT         ");
 17855  00436A  0E30               	movlw	low STR_32
 17856  00436C  6E0D               	movwf	i2printf@f,c
 17857  00436E  0EFD               	movlw	high STR_32
 17858  004370  6E0E               	movwf	i2printf@f+1,c
 17859  004372  ECD4  F00A         	call	i2_printf	;wreg free
 17860  004376  0012               	return		;funcret
 17861  004378                     __end_of_change_state_to_menu_11:
 17862                           	opt stack 0
 17863                           pclatu	equ	0xFFB
 17864                           pclath	equ	0xFFA
 17865                           tblptru	equ	0xFF8
 17866                           tblptrh	equ	0xFF7
 17867                           tblptrl	equ	0xFF6
 17868                           tablat	equ	0xFF5
 17869                           prodh	equ	0xFF4
 17870                           prodl	equ	0xFF3
 17871                           intcon	equ	0xFF2
 17872                           intcon2	equ	0xFF1
 17873                           intcon3	equ	0xFF0
 17874                           indf0	equ	0xFEF
 17875                           postinc0	equ	0xFEE
 17876                           fsr0h	equ	0xFEA
 17877                           fsr0l	equ	0xFE9
 17878                           wreg	equ	0xFE8
 17879                           postdec1	equ	0xFE5
 17880                           fsr1h	equ	0xFE2
 17881                           fsr1l	equ	0xFE1
 17882                           indf2	equ	0xFDF
 17883                           postinc2	equ	0xFDE
 17884                           postdec2	equ	0xFDD
 17885                           fsr2h	equ	0xFDA
 17886                           fsr2l	equ	0xFD9
 17887                           status	equ	0xFD8
 17888                           
 17889 ;; *************** function _change_state_to_logs_34 *****************
 17890 ;; Defined at:
 17891 ;;		line 547 in file "UI.c"
 17892 ;; Parameters:    Size  Location     Type
 17893 ;;		None
 17894 ;; Auto vars:     Size  Location     Type
 17895 ;;		None
 17896 ;; Return value:  Size  Location     Type
 17897 ;;                  1    wreg      void 
 17898 ;; Registers used:
 17899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17900 ;; Tracked objects:
 17901 ;;		On entry : 0/0
 17902 ;;		On exit  : 0/0
 17903 ;;		Unchanged: 0/0
 17904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;Total ram usage:        0 bytes
 17910 ;; Hardware stack levels used:    1
 17911 ;; Hardware stack levels required when called:    3
 17912 ;; This function calls:
 17913 ;;		i2_lcdInst
 17914 ;;		i2_printf
 17915 ;; This function is called by:
 17916 ;;		_updateMenu
 17917 ;;		_inputHandler
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text67
 17922  004378                     __ptext67:
 17923                           	opt stack 0
 17924  004378                     _change_state_to_logs_34:
 17925                           	opt stack 18
 17926                           
 17927                           ;UI.c: 548: cur_state = 1034;
 17928                           
 17929                           ;incstack = 0
 17930  004378  0E04               	movlw	4
 17931  00437A  0100               	movlb	0	; () banked
 17932  00437C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17933  00437E  0E0A               	movlw	10
 17934  004380  6FDE               	movwf	_cur_state& (0+255),b
 17935                           
 17936                           ; BSR set to: 0
 17937                           ;UI.c: 549: lcdInst(0b10000000);;
 17938  004382  0E80               	movlw	128
 17939  004384  EC91  F023         	call	i2_lcdInst
 17940                           
 17941                           ;UI.c: 550: printf("LOG 3           ");
 17942  004388  0EFD               	movlw	low STR_44
 17943  00438A  6E0D               	movwf	i2printf@f,c
 17944  00438C  0EFC               	movlw	high STR_44
 17945  00438E  6E0E               	movwf	i2printf@f+1,c
 17946  004390  ECD4  F00A         	call	i2_printf	;wreg free
 17947                           
 17948                           ;UI.c: 551: lcdInst(0b11000000);;
 17949  004394  0EC0               	movlw	192
 17950  004396  EC91  F023         	call	i2_lcdInst
 17951                           
 17952                           ;UI.c: 552: printf("LOG 4          <");
 17953  00439A  0EB8               	movlw	low STR_50
 17954  00439C  6E0D               	movwf	i2printf@f,c
 17955  00439E  0EFD               	movlw	high STR_50
 17956  0043A0  6E0E               	movwf	i2printf@f+1,c
 17957  0043A2  ECD4  F00A         	call	i2_printf	;wreg free
 17958  0043A6  0012               	return		;funcret
 17959  0043A8                     __end_of_change_state_to_logs_34:
 17960                           	opt stack 0
 17961                           pclatu	equ	0xFFB
 17962                           pclath	equ	0xFFA
 17963                           tblptru	equ	0xFF8
 17964                           tblptrh	equ	0xFF7
 17965                           tblptrl	equ	0xFF6
 17966                           tablat	equ	0xFF5
 17967                           prodh	equ	0xFF4
 17968                           prodl	equ	0xFF3
 17969                           intcon	equ	0xFF2
 17970                           intcon2	equ	0xFF1
 17971                           intcon3	equ	0xFF0
 17972                           indf0	equ	0xFEF
 17973                           postinc0	equ	0xFEE
 17974                           fsr0h	equ	0xFEA
 17975                           fsr0l	equ	0xFE9
 17976                           wreg	equ	0xFE8
 17977                           postdec1	equ	0xFE5
 17978                           fsr1h	equ	0xFE2
 17979                           fsr1l	equ	0xFE1
 17980                           indf2	equ	0xFDF
 17981                           postinc2	equ	0xFDE
 17982                           postdec2	equ	0xFDD
 17983                           fsr2h	equ	0xFDA
 17984                           fsr2l	equ	0xFD9
 17985                           status	equ	0xFD8
 17986                           
 17987 ;; *************** function _change_state_to_logs_33 *****************
 17988 ;; Defined at:
 17989 ;;		line 540 in file "UI.c"
 17990 ;; Parameters:    Size  Location     Type
 17991 ;;		None
 17992 ;; Auto vars:     Size  Location     Type
 17993 ;;		None
 17994 ;; Return value:  Size  Location     Type
 17995 ;;                  1    wreg      void 
 17996 ;; Registers used:
 17997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17998 ;; Tracked objects:
 17999 ;;		On entry : 0/0
 18000 ;;		On exit  : 0/0
 18001 ;;		Unchanged: 0/0
 18002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18007 ;;Total ram usage:        0 bytes
 18008 ;; Hardware stack levels used:    1
 18009 ;; Hardware stack levels required when called:    3
 18010 ;; This function calls:
 18011 ;;		i2_lcdInst
 18012 ;;		i2_printf
 18013 ;; This function is called by:
 18014 ;;		_updateMenu
 18015 ;;		_inputHandler
 18016 ;; This function uses a non-reentrant model
 18017 ;;
 18018                           
 18019                           	psect	text68
 18020  0043A8                     __ptext68:
 18021                           	opt stack 0
 18022  0043A8                     _change_state_to_logs_33:
 18023                           	opt stack 18
 18024                           
 18025                           ;UI.c: 541: cur_state = 1033;
 18026                           
 18027                           ;incstack = 0
 18028  0043A8  0E04               	movlw	4
 18029  0043AA  0100               	movlb	0	; () banked
 18030  0043AC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18031  0043AE  0E09               	movlw	9
 18032  0043B0  6FDE               	movwf	_cur_state& (0+255),b
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;UI.c: 542: lcdInst(0b10000000);;
 18036  0043B2  0E80               	movlw	128
 18037  0043B4  EC91  F023         	call	i2_lcdInst
 18038                           
 18039                           ;UI.c: 543: printf("LOG 3          <");
 18040  0043B8  0EA7               	movlw	low STR_46
 18041  0043BA  6E0D               	movwf	i2printf@f,c
 18042  0043BC  0EFD               	movlw	high STR_46
 18043  0043BE  6E0E               	movwf	i2printf@f+1,c
 18044  0043C0  ECD4  F00A         	call	i2_printf	;wreg free
 18045                           
 18046                           ;UI.c: 544: lcdInst(0b11000000);;
 18047  0043C4  0EC0               	movlw	192
 18048  0043C6  EC91  F023         	call	i2_lcdInst
 18049                           
 18050                           ;UI.c: 545: printf("LOG 4           ");
 18051  0043CA  0E0E               	movlw	low STR_48
 18052  0043CC  6E0D               	movwf	i2printf@f,c
 18053  0043CE  0EFD               	movlw	high STR_48
 18054  0043D0  6E0E               	movwf	i2printf@f+1,c
 18055  0043D2  ECD4  F00A         	call	i2_printf	;wreg free
 18056  0043D6  0012               	return		;funcret
 18057  0043D8                     __end_of_change_state_to_logs_33:
 18058                           	opt stack 0
 18059                           pclatu	equ	0xFFB
 18060                           pclath	equ	0xFFA
 18061                           tblptru	equ	0xFF8
 18062                           tblptrh	equ	0xFF7
 18063                           tblptrl	equ	0xFF6
 18064                           tablat	equ	0xFF5
 18065                           prodh	equ	0xFF4
 18066                           prodl	equ	0xFF3
 18067                           intcon	equ	0xFF2
 18068                           intcon2	equ	0xFF1
 18069                           intcon3	equ	0xFF0
 18070                           indf0	equ	0xFEF
 18071                           postinc0	equ	0xFEE
 18072                           fsr0h	equ	0xFEA
 18073                           fsr0l	equ	0xFE9
 18074                           wreg	equ	0xFE8
 18075                           postdec1	equ	0xFE5
 18076                           fsr1h	equ	0xFE2
 18077                           fsr1l	equ	0xFE1
 18078                           indf2	equ	0xFDF
 18079                           postinc2	equ	0xFDE
 18080                           postdec2	equ	0xFDD
 18081                           fsr2h	equ	0xFDA
 18082                           fsr2l	equ	0xFD9
 18083                           status	equ	0xFD8
 18084                           
 18085 ;; *************** function _change_state_to_logs_23 *****************
 18086 ;; Defined at:
 18087 ;;		line 533 in file "UI.c"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;		None
 18090 ;; Auto vars:     Size  Location     Type
 18091 ;;		None
 18092 ;; Return value:  Size  Location     Type
 18093 ;;                  1    wreg      void 
 18094 ;; Registers used:
 18095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18096 ;; Tracked objects:
 18097 ;;		On entry : 0/0
 18098 ;;		On exit  : 0/0
 18099 ;;		Unchanged: 0/0
 18100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;Total ram usage:        0 bytes
 18106 ;; Hardware stack levels used:    1
 18107 ;; Hardware stack levels required when called:    3
 18108 ;; This function calls:
 18109 ;;		i2_lcdInst
 18110 ;;		i2_printf
 18111 ;; This function is called by:
 18112 ;;		_updateMenu
 18113 ;;		_inputHandler
 18114 ;; This function uses a non-reentrant model
 18115 ;;
 18116                           
 18117                           	psect	text69
 18118  004496                     __ptext69:
 18119                           	opt stack 0
 18120  004496                     _change_state_to_logs_23:
 18121                           	opt stack 18
 18122                           
 18123                           ;UI.c: 534: cur_state = 1023;
 18124                           
 18125                           ;incstack = 0
 18126  004496  0E03               	movlw	3
 18127  004498  0100               	movlb	0	; () banked
 18128  00449A  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18129  00449C  69DE               	setf	_cur_state& (0+255),b
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;UI.c: 535: lcdInst(0b10000000);;
 18133  00449E  0E80               	movlw	128
 18134  0044A0  EC91  F023         	call	i2_lcdInst
 18135                           
 18136                           ;UI.c: 536: printf("LOG 2           ");
 18137  0044A4  0EEC               	movlw	low STR_40
 18138  0044A6  6E0D               	movwf	i2printf@f,c
 18139  0044A8  0EFC               	movlw	high STR_40
 18140  0044AA  6E0E               	movwf	i2printf@f+1,c
 18141  0044AC  ECD4  F00A         	call	i2_printf	;wreg free
 18142                           
 18143                           ;UI.c: 537: lcdInst(0b11000000);;
 18144  0044B0  0EC0               	movlw	192
 18145  0044B2  EC91  F023         	call	i2_lcdInst
 18146                           
 18147                           ;UI.c: 538: printf("LOG 3          <");
 18148  0044B6  0EA7               	movlw	low STR_46
 18149  0044B8  6E0D               	movwf	i2printf@f,c
 18150  0044BA  0EFD               	movlw	high STR_46
 18151  0044BC  6E0E               	movwf	i2printf@f+1,c
 18152  0044BE  ECD4  F00A         	call	i2_printf	;wreg free
 18153  0044C2  0012               	return		;funcret
 18154  0044C4                     __end_of_change_state_to_logs_23:
 18155                           	opt stack 0
 18156                           pclatu	equ	0xFFB
 18157                           pclath	equ	0xFFA
 18158                           tblptru	equ	0xFF8
 18159                           tblptrh	equ	0xFF7
 18160                           tblptrl	equ	0xFF6
 18161                           tablat	equ	0xFF5
 18162                           prodh	equ	0xFF4
 18163                           prodl	equ	0xFF3
 18164                           intcon	equ	0xFF2
 18165                           intcon2	equ	0xFF1
 18166                           intcon3	equ	0xFF0
 18167                           indf0	equ	0xFEF
 18168                           postinc0	equ	0xFEE
 18169                           fsr0h	equ	0xFEA
 18170                           fsr0l	equ	0xFE9
 18171                           wreg	equ	0xFE8
 18172                           postdec1	equ	0xFE5
 18173                           fsr1h	equ	0xFE2
 18174                           fsr1l	equ	0xFE1
 18175                           indf2	equ	0xFDF
 18176                           postinc2	equ	0xFDE
 18177                           postdec2	equ	0xFDD
 18178                           fsr2h	equ	0xFDA
 18179                           fsr2l	equ	0xFD9
 18180                           status	equ	0xFD8
 18181                           
 18182 ;; *************** function _change_state_to_logs_22 *****************
 18183 ;; Defined at:
 18184 ;;		line 526 in file "UI.c"
 18185 ;; Parameters:    Size  Location     Type
 18186 ;;		None
 18187 ;; Auto vars:     Size  Location     Type
 18188 ;;		None
 18189 ;; Return value:  Size  Location     Type
 18190 ;;                  1    wreg      void 
 18191 ;; Registers used:
 18192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18193 ;; Tracked objects:
 18194 ;;		On entry : 0/0
 18195 ;;		On exit  : 0/0
 18196 ;;		Unchanged: 0/0
 18197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;Total ram usage:        0 bytes
 18203 ;; Hardware stack levels used:    1
 18204 ;; Hardware stack levels required when called:    3
 18205 ;; This function calls:
 18206 ;;		i2_lcdInst
 18207 ;;		i2_printf
 18208 ;; This function is called by:
 18209 ;;		_updateMenu
 18210 ;;		_inputHandler
 18211 ;; This function uses a non-reentrant model
 18212 ;;
 18213                           
 18214                           	psect	text70
 18215  0043D8                     __ptext70:
 18216                           	opt stack 0
 18217  0043D8                     _change_state_to_logs_22:
 18218                           	opt stack 18
 18219                           
 18220                           ;UI.c: 527: cur_state = 1022;
 18221                           
 18222                           ;incstack = 0
 18223  0043D8  0E03               	movlw	3
 18224  0043DA  0100               	movlb	0	; () banked
 18225  0043DC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18226  0043DE  0EFE               	movlw	254
 18227  0043E0  6FDE               	movwf	_cur_state& (0+255),b
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;UI.c: 528: lcdInst(0b10000000);;
 18231  0043E2  0E80               	movlw	128
 18232  0043E4  EC91  F023         	call	i2_lcdInst
 18233                           
 18234                           ;UI.c: 529: printf("LOG 2          <");
 18235  0043E8  0E96               	movlw	low STR_42
 18236  0043EA  6E0D               	movwf	i2printf@f,c
 18237  0043EC  0EFD               	movlw	high STR_42
 18238  0043EE  6E0E               	movwf	i2printf@f+1,c
 18239  0043F0  ECD4  F00A         	call	i2_printf	;wreg free
 18240                           
 18241                           ;UI.c: 530: lcdInst(0b11000000);;
 18242  0043F4  0EC0               	movlw	192
 18243  0043F6  EC91  F023         	call	i2_lcdInst
 18244                           
 18245                           ;UI.c: 531: printf("LOG 3           ");
 18246  0043FA  0EFD               	movlw	low STR_44
 18247  0043FC  6E0D               	movwf	i2printf@f,c
 18248  0043FE  0EFC               	movlw	high STR_44
 18249  004400  6E0E               	movwf	i2printf@f+1,c
 18250  004402  ECD4  F00A         	call	i2_printf	;wreg free
 18251  004406  0012               	return		;funcret
 18252  004408                     __end_of_change_state_to_logs_22:
 18253                           	opt stack 0
 18254                           pclatu	equ	0xFFB
 18255                           pclath	equ	0xFFA
 18256                           tblptru	equ	0xFF8
 18257                           tblptrh	equ	0xFF7
 18258                           tblptrl	equ	0xFF6
 18259                           tablat	equ	0xFF5
 18260                           prodh	equ	0xFF4
 18261                           prodl	equ	0xFF3
 18262                           intcon	equ	0xFF2
 18263                           intcon2	equ	0xFF1
 18264                           intcon3	equ	0xFF0
 18265                           indf0	equ	0xFEF
 18266                           postinc0	equ	0xFEE
 18267                           fsr0h	equ	0xFEA
 18268                           fsr0l	equ	0xFE9
 18269                           wreg	equ	0xFE8
 18270                           postdec1	equ	0xFE5
 18271                           fsr1h	equ	0xFE2
 18272                           fsr1l	equ	0xFE1
 18273                           indf2	equ	0xFDF
 18274                           postinc2	equ	0xFDE
 18275                           postdec2	equ	0xFDD
 18276                           fsr2h	equ	0xFDA
 18277                           fsr2l	equ	0xFD9
 18278                           status	equ	0xFD8
 18279                           
 18280 ;; *************** function _change_state_to_logs_12 *****************
 18281 ;; Defined at:
 18282 ;;		line 519 in file "UI.c"
 18283 ;; Parameters:    Size  Location     Type
 18284 ;;		None
 18285 ;; Auto vars:     Size  Location     Type
 18286 ;;		None
 18287 ;; Return value:  Size  Location     Type
 18288 ;;                  1    wreg      void 
 18289 ;; Registers used:
 18290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18291 ;; Tracked objects:
 18292 ;;		On entry : 0/0
 18293 ;;		On exit  : 0/0
 18294 ;;		Unchanged: 0/0
 18295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;Total ram usage:        0 bytes
 18301 ;; Hardware stack levels used:    1
 18302 ;; Hardware stack levels required when called:    3
 18303 ;; This function calls:
 18304 ;;		i2_lcdInst
 18305 ;;		i2_printf
 18306 ;; This function is called by:
 18307 ;;		_updateMenu
 18308 ;;		_inputHandler
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text71
 18313  004408                     __ptext71:
 18314                           	opt stack 0
 18315  004408                     _change_state_to_logs_12:
 18316                           	opt stack 18
 18317                           
 18318                           ;UI.c: 520: cur_state = 1012;
 18319                           
 18320                           ;incstack = 0
 18321  004408  0E03               	movlw	3
 18322  00440A  0100               	movlb	0	; () banked
 18323  00440C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18324  00440E  0EF4               	movlw	244
 18325  004410  6FDE               	movwf	_cur_state& (0+255),b
 18326                           
 18327                           ; BSR set to: 0
 18328                           ;UI.c: 521: lcdInst(0b10000000);;
 18329  004412  0E80               	movlw	128
 18330  004414  EC91  F023         	call	i2_lcdInst
 18331                           
 18332                           ;UI.c: 522: printf("LOG 1           ");
 18333  004418  0EDB               	movlw	low STR_41
 18334  00441A  6E0D               	movwf	i2printf@f,c
 18335  00441C  0EFC               	movlw	high STR_41
 18336  00441E  6E0E               	movwf	i2printf@f+1,c
 18337  004420  ECD4  F00A         	call	i2_printf	;wreg free
 18338                           
 18339                           ;UI.c: 523: lcdInst(0b11000000);;
 18340  004424  0EC0               	movlw	192
 18341  004426  EC91  F023         	call	i2_lcdInst
 18342                           
 18343                           ;UI.c: 524: printf("LOG 2          <");
 18344  00442A  0E96               	movlw	low STR_42
 18345  00442C  6E0D               	movwf	i2printf@f,c
 18346  00442E  0EFD               	movlw	high STR_42
 18347  004430  6E0E               	movwf	i2printf@f+1,c
 18348  004432  ECD4  F00A         	call	i2_printf	;wreg free
 18349  004436  0012               	return		;funcret
 18350  004438                     __end_of_change_state_to_logs_12:
 18351                           	opt stack 0
 18352                           pclatu	equ	0xFFB
 18353                           pclath	equ	0xFFA
 18354                           tblptru	equ	0xFF8
 18355                           tblptrh	equ	0xFF7
 18356                           tblptrl	equ	0xFF6
 18357                           tablat	equ	0xFF5
 18358                           prodh	equ	0xFF4
 18359                           prodl	equ	0xFF3
 18360                           intcon	equ	0xFF2
 18361                           intcon2	equ	0xFF1
 18362                           intcon3	equ	0xFF0
 18363                           indf0	equ	0xFEF
 18364                           postinc0	equ	0xFEE
 18365                           fsr0h	equ	0xFEA
 18366                           fsr0l	equ	0xFE9
 18367                           wreg	equ	0xFE8
 18368                           postdec1	equ	0xFE5
 18369                           fsr1h	equ	0xFE2
 18370                           fsr1l	equ	0xFE1
 18371                           indf2	equ	0xFDF
 18372                           postinc2	equ	0xFDE
 18373                           postdec2	equ	0xFDD
 18374                           fsr2h	equ	0xFDA
 18375                           fsr2l	equ	0xFD9
 18376                           status	equ	0xFD8
 18377                           
 18378 ;; *************** function _change_state_to_logs_11 *****************
 18379 ;; Defined at:
 18380 ;;		line 512 in file "UI.c"
 18381 ;; Parameters:    Size  Location     Type
 18382 ;;		None
 18383 ;; Auto vars:     Size  Location     Type
 18384 ;;		None
 18385 ;; Return value:  Size  Location     Type
 18386 ;;                  1    wreg      void 
 18387 ;; Registers used:
 18388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18389 ;; Tracked objects:
 18390 ;;		On entry : 0/0
 18391 ;;		On exit  : 0/0
 18392 ;;		Unchanged: 0/0
 18393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18398 ;;Total ram usage:        0 bytes
 18399 ;; Hardware stack levels used:    1
 18400 ;; Hardware stack levels required when called:    3
 18401 ;; This function calls:
 18402 ;;		i2_lcdInst
 18403 ;;		i2_printf
 18404 ;; This function is called by:
 18405 ;;		_updateMenu
 18406 ;;		_inputHandler
 18407 ;; This function uses a non-reentrant model
 18408 ;;
 18409                           
 18410                           	psect	text72
 18411  004438                     __ptext72:
 18412                           	opt stack 0
 18413  004438                     _change_state_to_logs_11:
 18414                           	opt stack 18
 18415                           
 18416                           ;UI.c: 513: cur_state = 1011;
 18417                           
 18418                           ;incstack = 0
 18419  004438  0E03               	movlw	3
 18420  00443A  0100               	movlb	0	; () banked
 18421  00443C  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18422  00443E  0EF3               	movlw	243
 18423  004440  6FDE               	movwf	_cur_state& (0+255),b
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;UI.c: 514: lcdInst(0b10000000);;
 18427  004442  0E80               	movlw	128
 18428  004444  EC91  F023         	call	i2_lcdInst
 18429                           
 18430                           ;UI.c: 515: printf("LOG 1          <");
 18431  004448  0E85               	movlw	low STR_39
 18432  00444A  6E0D               	movwf	i2printf@f,c
 18433  00444C  0EFD               	movlw	high STR_39
 18434  00444E  6E0E               	movwf	i2printf@f+1,c
 18435  004450  ECD4  F00A         	call	i2_printf	;wreg free
 18436                           
 18437                           ;UI.c: 516: lcdInst(0b11000000);;
 18438  004454  0EC0               	movlw	192
 18439  004456  EC91  F023         	call	i2_lcdInst
 18440                           
 18441                           ;UI.c: 517: printf("LOG 2           ");
 18442  00445A  0EEC               	movlw	low STR_40
 18443  00445C  6E0D               	movwf	i2printf@f,c
 18444  00445E  0EFC               	movlw	high STR_40
 18445  004460  6E0E               	movwf	i2printf@f+1,c
 18446  004462  ECD4  F00A         	call	i2_printf	;wreg free
 18447  004466  0012               	return		;funcret
 18448  004468                     __end_of_change_state_to_logs_11:
 18449                           	opt stack 0
 18450                           pclatu	equ	0xFFB
 18451                           pclath	equ	0xFFA
 18452                           tblptru	equ	0xFF8
 18453                           tblptrh	equ	0xFF7
 18454                           tblptrl	equ	0xFF6
 18455                           tablat	equ	0xFF5
 18456                           prodh	equ	0xFF4
 18457                           prodl	equ	0xFF3
 18458                           intcon	equ	0xFF2
 18459                           intcon2	equ	0xFF1
 18460                           intcon3	equ	0xFF0
 18461                           indf0	equ	0xFEF
 18462                           postinc0	equ	0xFEE
 18463                           fsr0h	equ	0xFEA
 18464                           fsr0l	equ	0xFE9
 18465                           wreg	equ	0xFE8
 18466                           postdec1	equ	0xFE5
 18467                           fsr1h	equ	0xFE2
 18468                           fsr1l	equ	0xFE1
 18469                           indf2	equ	0xFDF
 18470                           postinc2	equ	0xFDE
 18471                           postdec2	equ	0xFDD
 18472                           fsr2h	equ	0xFDA
 18473                           fsr2l	equ	0xFD9
 18474                           status	equ	0xFD8
 18475                           
 18476 ;; *************** function _dispLogs *****************
 18477 ;; Defined at:
 18478 ;;		line 465 in file "UI.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;  myLog           2   17[COMRAM] int 
 18481 ;; Auto vars:     Size  Location     Type
 18482 ;;		None
 18483 ;; Return value:  Size  Location     Type
 18484 ;;                  1    wreg      void 
 18485 ;; Registers used:
 18486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;Total ram usage:        2 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    2
 18499 ;; This function calls:
 18500 ;;		_retrieveLog
 18501 ;; This function is called by:
 18502 ;;		_updateMenu
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           	psect	text73
 18507  004606                     __ptext73:
 18508                           	opt stack 0
 18509  004606                     _dispLogs:
 18510                           	opt stack 20
 18511                           
 18512                           ;UI.c: 466: logstate = 1;
 18513                           
 18514                           ;incstack = 0
 18515  004606  0E00               	movlw	0
 18516  004608  0100               	movlb	0	; () banked
 18517  00460A  6FF7               	movwf	(_logstate+1)& (0+255),b
 18518  00460C  0E01               	movlw	1
 18519  00460E  6FF6               	movwf	_logstate& (0+255),b
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;UI.c: 467: log = myLog;
 18523  004610  C012  F0E6         	movff	dispLogs@myLog,_log
 18524  004614  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;UI.c: 468: retrieveLog(myLog - 1);
 18528  004618  0EFF               	movlw	255
 18529  00461A  2412               	addwf	dispLogs@myLog,w,c
 18530  00461C  6E07               	movwf	retrieveLog@logNum,c
 18531  00461E  0EFF               	movlw	255
 18532  004620  2013               	addwfc	dispLogs@myLog+1,w,c
 18533  004622  6E08               	movwf	retrieveLog@logNum+1,c
 18534  004624  EC59  F018         	call	_retrieveLog	;wreg free
 18535  004628  0012               	return		;funcret
 18536  00462A                     __end_of_dispLogs:
 18537                           	opt stack 0
 18538                           pclatu	equ	0xFFB
 18539                           pclath	equ	0xFFA
 18540                           tblptru	equ	0xFF8
 18541                           tblptrh	equ	0xFF7
 18542                           tblptrl	equ	0xFF6
 18543                           tablat	equ	0xFF5
 18544                           prodh	equ	0xFF4
 18545                           prodl	equ	0xFF3
 18546                           intcon	equ	0xFF2
 18547                           intcon2	equ	0xFF1
 18548                           intcon3	equ	0xFF0
 18549                           indf0	equ	0xFEF
 18550                           postinc0	equ	0xFEE
 18551                           fsr0h	equ	0xFEA
 18552                           fsr0l	equ	0xFE9
 18553                           wreg	equ	0xFE8
 18554                           postdec1	equ	0xFE5
 18555                           fsr1h	equ	0xFE2
 18556                           fsr1l	equ	0xFE1
 18557                           indf2	equ	0xFDF
 18558                           postinc2	equ	0xFDE
 18559                           postdec2	equ	0xFDD
 18560                           fsr2h	equ	0xFDA
 18561                           fsr2l	equ	0xFD9
 18562                           status	equ	0xFD8
 18563                           
 18564 ;; *************** function _retrieveLog *****************
 18565 ;; Defined at:
 18566 ;;		line 134 in file "EEPROM.c"
 18567 ;; Parameters:    Size  Location     Type
 18568 ;;  logNum          2    6[COMRAM] int 
 18569 ;; Auto vars:     Size  Location     Type
 18570 ;;  i               2   13[COMRAM] int 
 18571 ;;  addr            2   15[COMRAM] unsigned short 
 18572 ;;  byte3           1   12[COMRAM] unsigned char 
 18573 ;;  byte2           1   11[COMRAM] unsigned char 
 18574 ;;  byte1           1   10[COMRAM] unsigned char 
 18575 ;; Return value:  Size  Location     Type
 18576 ;;                  1    wreg      void 
 18577 ;; Registers used:
 18578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18579 ;; Tracked objects:
 18580 ;;		On entry : 0/0
 18581 ;;		On exit  : 0/0
 18582 ;;		Unchanged: 0/0
 18583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18585 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;Total ram usage:       11 bytes
 18589 ;; Hardware stack levels used:    1
 18590 ;; Hardware stack levels required when called:    1
 18591 ;; This function calls:
 18592 ;;		i2_EEPROM_read
 18593 ;;		i2___wmul
 18594 ;; This function is called by:
 18595 ;;		_dispLogs
 18596 ;; This function uses a non-reentrant model
 18597 ;;
 18598                           
 18599                           	psect	text74
 18600  0030B2                     __ptext74:
 18601                           	opt stack 0
 18602  0030B2                     _retrieveLog:
 18603                           	opt stack 20
 18604                           
 18605                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18606                           
 18607                           ;incstack = 0
 18608  0030B2  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18609  0030B6  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18610  0030BA  0E00               	movlw	0
 18611  0030BC  6E04               	movwf	i2___wmul@multiplicand+1,c
 18612  0030BE  0E0B               	movlw	11
 18613  0030C0  6E03               	movwf	i2___wmul@multiplicand,c
 18614  0030C2  ECCB  F022         	call	i2___wmul	;wreg free
 18615  0030C6  0E01               	movlw	1
 18616  0030C8  2401               	addwf	?i2___wmul,w,c
 18617  0030CA  6E10               	movwf	retrieveLog@addr,c
 18618  0030CC  0E00               	movlw	0
 18619  0030CE  2002               	addwfc	?i2___wmul+1,w,c
 18620  0030D0  6E11               	movwf	retrieveLog@addr+1,c
 18621                           
 18622                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18623  0030D2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18624  0030D6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18625  0030DA  EC5D  F023         	call	i2_EEPROM_read	;wreg free
 18626  0030DE  6E0B               	movwf	retrieveLog@byte1,c
 18627                           
 18628                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18629  0030E0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18630  0030E4  0E80               	movlw	128
 18631  0030E6  1609               	andwf	??_retrieveLog,f,c
 18632  0030E8  5009               	movf	??_retrieveLog,w,c
 18633  0030EA  0100               	movlb	0	; () banked
 18634  0030EC  6FE8               	movwf	_log_completion& (0+255),b
 18635  0030EE  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18636                           
 18637                           ; BSR set to: 0
 18638                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18639  0030F0  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18640  0030F4  0E0F               	movlw	15
 18641  0030F6  1609               	andwf	??_retrieveLog,f,c
 18642  0030F8  5009               	movf	??_retrieveLog,w,c
 18643  0030FA  0100               	movlb	0	; () banked
 18644  0030FC  6FF2               	movwf	_log_count_total& (0+255),b
 18645  0030FE  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18646                           
 18647                           ; BSR set to: 0
 18648                           ;EEPROM.c: 146: addr++;
 18649  003100  4A10               	infsnz	retrieveLog@addr,f,c
 18650  003102  2A11               	incf	retrieveLog@addr+1,f,c
 18651                           
 18652                           ; BSR set to: 0
 18653                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18654  003104  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18655  003108  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18656  00310C  EC5D  F023         	call	i2_EEPROM_read	;wreg free
 18657  003110  6E0C               	movwf	retrieveLog@byte2,c
 18658                           
 18659                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18660  003112  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18661  003116  0EF0               	movlw	240
 18662  003118  1609               	andwf	??_retrieveLog,f,c
 18663  00311A  5009               	movf	??_retrieveLog,w,c
 18664  00311C  0100               	movlb	0	; () banked
 18665  00311E  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18666  003120  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18667                           
 18668                           ; BSR set to: 0
 18669                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18670  003122  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18671  003126  0E0F               	movlw	15
 18672  003128  1609               	andwf	??_retrieveLog,f,c
 18673  00312A  5009               	movf	??_retrieveLog,w,c
 18674  00312C  0100               	movlb	0	; () banked
 18675  00312E  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18676  003130  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18677                           
 18678                           ; BSR set to: 0
 18679                           ;EEPROM.c: 152: addr++;
 18680  003132  4A10               	infsnz	retrieveLog@addr,f,c
 18681  003134  2A11               	incf	retrieveLog@addr+1,f,c
 18682                           
 18683                           ; BSR set to: 0
 18684                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18685  003136  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18686  00313A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18687  00313E  EC5D  F023         	call	i2_EEPROM_read	;wreg free
 18688  003142  6E0D               	movwf	retrieveLog@byte3,c
 18689                           
 18690                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18691  003144  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18692  003148  0EF0               	movlw	240
 18693  00314A  1609               	andwf	??_retrieveLog,f,c
 18694  00314C  5009               	movf	??_retrieveLog,w,c
 18695  00314E  0100               	movlb	0	; () banked
 18696  003150  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18697  003152  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18698                           
 18699                           ; BSR set to: 0
 18700                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18701  003154  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18702  003158  0E0F               	movlw	15
 18703  00315A  1609               	andwf	??_retrieveLog,f,c
 18704  00315C  5009               	movf	??_retrieveLog,w,c
 18705  00315E  0100               	movlb	0	; () banked
 18706  003160  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18707  003162  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18708                           
 18709                           ; BSR set to: 0
 18710                           ;EEPROM.c: 156: addr++;
 18711  003164  4A10               	infsnz	retrieveLog@addr,f,c
 18712  003166  2A11               	incf	retrieveLog@addr+1,f,c
 18713                           
 18714                           ; BSR set to: 0
 18715                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18716  003168  0E00               	movlw	0
 18717  00316A  6E0F               	movwf	retrieveLog@i+1,c
 18718  00316C  0E00               	movlw	0
 18719  00316E  6E0E               	movwf	retrieveLog@i,c
 18720  003170                     i2l5952:
 18721                           
 18722                           ; BSR set to: 0
 18723  003170  BE0F               	btfsc	retrieveLog@i+1,7,c
 18724  003172  D006               	goto	i2l5956
 18725  003174  500F               	movf	retrieveLog@i+1,w,c
 18726  003176  E11E               	bnz	i2l5964
 18727  003178  0E07               	movlw	7
 18728  00317A  5C0E               	subwf	retrieveLog@i,w,c
 18729  00317C  B0D8               	btfsc	status,0,c
 18730  00317E  D01A               	goto	i2l5964
 18731  003180                     i2l5956:
 18732                           
 18733                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18734  003180  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18735  003184  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18736  003188  EC5D  F023         	call	i2_EEPROM_read	;wreg free
 18737  00318C  6E09               	movwf	??_retrieveLog& (0+255),c
 18738  00318E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18739  003190  90D8               	bcf	status,0,c
 18740  003192  340E               	rlcf	retrieveLog@i,w,c
 18741  003194  6ED9               	movwf	fsr2l,c
 18742  003196  340F               	rlcf	retrieveLog@i+1,w,c
 18743  003198  6EDA               	movwf	fsr2h,c
 18744  00319A  0E00               	movlw	low _log_startTime
 18745  00319C  26D9               	addwf	fsr2l,f,c
 18746  00319E  0E01               	movlw	high _log_startTime
 18747  0031A0  22DA               	addwfc	fsr2h,f,c
 18748  0031A2  C009  FFDE         	movff	??_retrieveLog,postinc2
 18749  0031A6  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18750                           
 18751                           ;EEPROM.c: 161: addr++;
 18752  0031AA  4A10               	infsnz	retrieveLog@addr,f,c
 18753  0031AC  2A11               	incf	retrieveLog@addr+1,f,c
 18754  0031AE  4A0E               	infsnz	retrieveLog@i,f,c
 18755  0031B0  2A0F               	incf	retrieveLog@i+1,f,c
 18756  0031B2  D7DE               	goto	i2l5952
 18757  0031B4                     i2l5964:
 18758                           
 18759                           ;EEPROM.c: 162: }
 18760                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18761  0031B4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18762  0031B8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18763  0031BC  EC5D  F023         	call	i2_EEPROM_read	;wreg free
 18764  0031C0  6E09               	movwf	??_retrieveLog& (0+255),c
 18765  0031C2  5009               	movf	??_retrieveLog,w,c
 18766  0031C4  0100               	movlb	0	; () banked
 18767  0031C6  6FF4               	movwf	_log_total_time& (0+255),b
 18768  0031C8  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18769                           
 18770                           ; BSR set to: 0
 18771  0031CA  0012               	return		;funcret
 18772  0031CC                     __end_of_retrieveLog:
 18773                           	opt stack 0
 18774                           pclatu	equ	0xFFB
 18775                           pclath	equ	0xFFA
 18776                           tblptru	equ	0xFF8
 18777                           tblptrh	equ	0xFF7
 18778                           tblptrl	equ	0xFF6
 18779                           tablat	equ	0xFF5
 18780                           prodh	equ	0xFF4
 18781                           prodl	equ	0xFF3
 18782                           intcon	equ	0xFF2
 18783                           intcon2	equ	0xFF1
 18784                           intcon3	equ	0xFF0
 18785                           indf0	equ	0xFEF
 18786                           postinc0	equ	0xFEE
 18787                           fsr0h	equ	0xFEA
 18788                           fsr0l	equ	0xFE9
 18789                           wreg	equ	0xFE8
 18790                           postdec1	equ	0xFE5
 18791                           fsr1h	equ	0xFE2
 18792                           fsr1l	equ	0xFE1
 18793                           indf2	equ	0xFDF
 18794                           postinc2	equ	0xFDE
 18795                           postdec2	equ	0xFDD
 18796                           fsr2h	equ	0xFDA
 18797                           fsr2l	equ	0xFD9
 18798                           status	equ	0xFD8
 18799                           
 18800 ;; *************** function i2_EEPROM_read *****************
 18801 ;; Defined at:
 18802 ;;		line 68 in file "EEPROM.c"
 18803 ;; Parameters:    Size  Location     Type
 18804 ;;  address         2    0[COMRAM] unsigned short 
 18805 ;; Auto vars:     Size  Location     Type
 18806 ;;		None
 18807 ;; Return value:  Size  Location     Type
 18808 ;;                  1    wreg      unsigned char 
 18809 ;; Registers used:
 18810 ;;		wreg, status,2
 18811 ;; Tracked objects:
 18812 ;;		On entry : 0/0
 18813 ;;		On exit  : 0/0
 18814 ;;		Unchanged: 0/0
 18815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18820 ;;Total ram usage:        2 bytes
 18821 ;; Hardware stack levels used:    1
 18822 ;; This function calls:
 18823 ;;		Nothing
 18824 ;; This function is called by:
 18825 ;;		_retrieveLog
 18826 ;; This function uses a non-reentrant model
 18827 ;;
 18828                           
 18829                           	psect	text75
 18830  0046BA                     __ptext75:
 18831                           	opt stack 0
 18832  0046BA                     i2_EEPROM_read:
 18833                           	opt stack 20
 18834                           
 18835                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18836                           
 18837                           ; BSR set to: 0
 18838                           ;incstack = 0
 18839  0046BA  5002               	movf	i2EEPROM_read@address+1,w,c
 18840  0046BC  6EAA               	movwf	4010,c	;volatile
 18841                           
 18842                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18843  0046BE  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18844                           
 18845                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18846  0046C2  9EA6               	bcf	4006,7,c	;volatile
 18847                           
 18848                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18849  0046C4  9CA6               	bcf	4006,6,c	;volatile
 18850                           
 18851                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18852  0046C6  80A6               	bsf	4006,0,c	;volatile
 18853  0046C8                     i2l930:
 18854  0046C8  B0A6               	btfsc	4006,0,c	;volatile
 18855  0046CA  D7FE               	goto	i2l930
 18856                           
 18857                           ;EEPROM.c: 81: return EEDATA;
 18858  0046CC  50A8               	movf	4008,w,c	;volatile
 18859  0046CE  0012               	return	
 18860  0046D0                     __end_ofi2_EEPROM_read:
 18861                           	opt stack 0
 18862                           pclatu	equ	0xFFB
 18863                           pclath	equ	0xFFA
 18864                           tblptru	equ	0xFF8
 18865                           tblptrh	equ	0xFF7
 18866                           tblptrl	equ	0xFF6
 18867                           tablat	equ	0xFF5
 18868                           prodh	equ	0xFF4
 18869                           prodl	equ	0xFF3
 18870                           intcon	equ	0xFF2
 18871                           intcon2	equ	0xFF1
 18872                           intcon3	equ	0xFF0
 18873                           indf0	equ	0xFEF
 18874                           postinc0	equ	0xFEE
 18875                           fsr0h	equ	0xFEA
 18876                           fsr0l	equ	0xFE9
 18877                           wreg	equ	0xFE8
 18878                           postdec1	equ	0xFE5
 18879                           fsr1h	equ	0xFE2
 18880                           fsr1l	equ	0xFE1
 18881                           indf2	equ	0xFDF
 18882                           postinc2	equ	0xFDE
 18883                           postdec2	equ	0xFDD
 18884                           fsr2h	equ	0xFDA
 18885                           fsr2l	equ	0xFD9
 18886                           status	equ	0xFD8
 18887                           
 18888 ;; *************** function _printSortTimer *****************
 18889 ;; Defined at:
 18890 ;;		line 273 in file "sort.c"
 18891 ;; Parameters:    Size  Location     Type
 18892 ;;		None
 18893 ;; Auto vars:     Size  Location     Type
 18894 ;;  i               2   72[COMRAM] int 
 18895 ;;  curTime        14   46[COMRAM] int [7]
 18896 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18897 ;;  sec             2   66[COMRAM] int 
 18898 ;;  min             2   64[COMRAM] int 
 18899 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18900 ;;  start_sec       2   60[COMRAM] unsigned int 
 18901 ;;  hour            2   44[COMRAM] int 
 18902 ;; Return value:  Size  Location     Type
 18903 ;;                  1    wreg      void 
 18904 ;; Registers used:
 18905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18906 ;; Tracked objects:
 18907 ;;		On entry : 0/0
 18908 ;;		On exit  : 0/0
 18909 ;;		Unchanged: 0/0
 18910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18915 ;;Total ram usage:       33 bytes
 18916 ;; Hardware stack levels used:    1
 18917 ;; Hardware stack levels required when called:    3
 18918 ;; This function calls:
 18919 ;;		i2___lwdiv
 18920 ;;		i2___lwmod
 18921 ;;		i2___wmul
 18922 ;;		i2_getRTC
 18923 ;;		i2_lcdInst
 18924 ;;		i2_printf
 18925 ;; This function is called by:
 18926 ;;		_handler
 18927 ;; This function uses a non-reentrant model
 18928 ;;
 18929                           
 18930                           	psect	text76
 18931  002648                     __ptext76:
 18932                           	opt stack 0
 18933  002648                     _printSortTimer:
 18934                           	opt stack 20
 18935                           
 18936                           ;sort.c: 274: getRTC();
 18937                           
 18938                           ;incstack = 0
 18939  002648  EC45  F01E         	call	i2_getRTC	;wreg free
 18940                           
 18941                           ;sort.c: 275: int curTime[7];
 18942                           ;sort.c: 276: for(int i = 0; i < 7; i++){
 18943  00264C  0E00               	movlw	0
 18944  00264E  6E4A               	movwf	printSortTimer@i+1,c
 18945  002650  0E00               	movlw	0
 18946  002652  6E49               	movwf	printSortTimer@i,c
 18947  002654                     i2l8024:
 18948  002654  BE4A               	btfsc	printSortTimer@i+1,7,c
 18949  002656  D006               	goto	i2l8028
 18950  002658  504A               	movf	printSortTimer@i+1,w,c
 18951  00265A  E131               	bnz	i2l8034
 18952  00265C  0E07               	movlw	7
 18953  00265E  5C49               	subwf	printSortTimer@i,w,c
 18954  002660  B0D8               	btfsc	status,0,c
 18955  002662  D02D               	goto	i2l8034
 18956  002664                     i2l8028:
 18957                           
 18958                           ;sort.c: 277: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18959  002664  0E24               	movlw	low _time
 18960  002666  2449               	addwf	printSortTimer@i,w,c
 18961  002668  6ED9               	movwf	fsr2l,c
 18962  00266A  0E01               	movlw	high _time
 18963  00266C  204A               	addwfc	printSortTimer@i+1,w,c
 18964  00266E  6EDA               	movwf	fsr2h,c
 18965  002670  50DF               	movf	indf2,w,c
 18966  002672  6E2A               	movwf	??_printSortTimer& (0+255),c
 18967  002674  3A2A               	swapf	??_printSortTimer,f,c
 18968  002676  0E0F               	movlw	15
 18969  002678  162A               	andwf	??_printSortTimer,f,c
 18970  00267A  0E0F               	movlw	15
 18971  00267C  162A               	andwf	??_printSortTimer,f,c
 18972  00267E  502A               	movf	??_printSortTimer,w,c
 18973  002680  0D0A               	mullw	10
 18974  002682  0E24               	movlw	low _time
 18975  002684  2449               	addwf	printSortTimer@i,w,c
 18976  002686  6ED9               	movwf	fsr2l,c
 18977  002688  0E01               	movlw	high _time
 18978  00268A  204A               	addwfc	printSortTimer@i+1,w,c
 18979  00268C  6EDA               	movwf	fsr2h,c
 18980  00268E  50DF               	movf	indf2,w,c
 18981  002690  0B0F               	andlw	15
 18982  002692  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18983  002694  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18984  002696  50F3               	movf	prodl,w,c
 18985  002698  262B               	addwf	??_printSortTimer+1,f,c
 18986  00269A  50F4               	movf	prodh,w,c
 18987  00269C  222C               	addwfc	??_printSortTimer+2,f,c
 18988  00269E  90D8               	bcf	status,0,c
 18989  0026A0  3449               	rlcf	printSortTimer@i,w,c
 18990  0026A2  6ED9               	movwf	fsr2l,c
 18991  0026A4  344A               	rlcf	printSortTimer@i+1,w,c
 18992  0026A6  6EDA               	movwf	fsr2h,c
 18993  0026A8  0E2F               	movlw	low printSortTimer@curTime
 18994  0026AA  26D9               	addwf	fsr2l,f,c
 18995  0026AC  0E00               	movlw	high printSortTimer@curTime
 18996  0026AE  22DA               	addwfc	fsr2h,f,c
 18997  0026B0  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18998  0026B4  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18999  0026B8  4A49               	infsnz	printSortTimer@i,f,c
 19000  0026BA  2A4A               	incf	printSortTimer@i+1,f,c
 19001  0026BC  D7CB               	goto	i2l8024
 19002  0026BE                     i2l8034:
 19003                           
 19004                           ;sort.c: 278: }
 19005                           ;sort.c: 279: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19006  0026BE  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19007  0026C2  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19008  0026C6  0E00               	movlw	0
 19009  0026C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19010  0026CA  0E3C               	movlw	60
 19011  0026CC  6E03               	movwf	i2___wmul@multiplicand,c
 19012  0026CE  ECCB  F022         	call	i2___wmul	;wreg free
 19013  0026D2  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19014  0026D6  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19015  0026DA  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19016  0026DE  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19017  0026E2  0E0E               	movlw	14
 19018  0026E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 19019  0026E6  0E10               	movlw	16
 19020  0026E8  6E03               	movwf	i2___wmul@multiplicand,c
 19021  0026EA  ECCB  F022         	call	i2___wmul	;wreg free
 19022  0026EE  5001               	movf	?i2___wmul,w,c
 19023  0026F0  262A               	addwf	??_printSortTimer,f,c
 19024  0026F2  5002               	movf	?i2___wmul+1,w,c
 19025  0026F4  222B               	addwfc	??_printSortTimer+1,f,c
 19026  0026F6  0101               	movlb	1	; () banked
 19027  0026F8  510E               	movf	_startTime& (0+255),w,b
 19028  0026FA  242A               	addwf	??_printSortTimer,w,c
 19029  0026FC  6E3D               	movwf	printSortTimer@start_sec,c
 19030  0026FE  0101               	movlb	1	; () banked
 19031  002700  510F               	movf	(_startTime+1)& (0+255),w,b
 19032  002702  202B               	addwfc	??_printSortTimer+1,w,c
 19033  002704  6E3E               	movwf	printSortTimer@start_sec+1,c
 19034                           
 19035                           ;sort.c: 280: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19036  002706  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19037  00270A  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19038  00270E  0E00               	movlw	0
 19039  002710  6E04               	movwf	i2___wmul@multiplicand+1,c
 19040  002712  0E3C               	movlw	60
 19041  002714  6E03               	movwf	i2___wmul@multiplicand,c
 19042  002716  ECCB  F022         	call	i2___wmul	;wreg free
 19043  00271A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19044  00271E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19045  002722  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19046  002726  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19047  00272A  0E0E               	movlw	14
 19048  00272C  6E04               	movwf	i2___wmul@multiplicand+1,c
 19049  00272E  0E10               	movlw	16
 19050  002730  6E03               	movwf	i2___wmul@multiplicand,c
 19051  002732  ECCB  F022         	call	i2___wmul	;wreg free
 19052  002736  5001               	movf	?i2___wmul,w,c
 19053  002738  262A               	addwf	??_printSortTimer,f,c
 19054  00273A  5002               	movf	?i2___wmul+1,w,c
 19055  00273C  222B               	addwfc	??_printSortTimer+1,f,c
 19056  00273E  502F               	movf	printSortTimer@curTime,w,c
 19057  002740  242A               	addwf	??_printSortTimer,w,c
 19058  002742  6E3F               	movwf	printSortTimer@cur_sec,c
 19059  002744  5030               	movf	printSortTimer@curTime+1,w,c
 19060  002746  202B               	addwfc	??_printSortTimer+1,w,c
 19061  002748  6E40               	movwf	printSortTimer@cur_sec+1,c
 19062                           
 19063                           ;sort.c: 281: unsigned int timeDiff = cur_sec - start_sec;
 19064  00274A  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19065  00274E  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19066  002752  1E2A               	comf	??_printSortTimer,f,c
 19067  002754  1E2B               	comf	??_printSortTimer+1,f,c
 19068  002756  4A2A               	infsnz	??_printSortTimer,f,c
 19069  002758  2A2B               	incf	??_printSortTimer+1,f,c
 19070  00275A  503F               	movf	printSortTimer@cur_sec,w,c
 19071  00275C  242A               	addwf	??_printSortTimer,w,c
 19072  00275E  6E47               	movwf	printSortTimer@timeDiff,c
 19073  002760  5040               	movf	printSortTimer@cur_sec+1,w,c
 19074  002762  202B               	addwfc	??_printSortTimer+1,w,c
 19075  002764  6E48               	movwf	printSortTimer@timeDiff+1,c
 19076                           
 19077                           ;sort.c: 283: total_time = timeDiff;
 19078  002766  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19079  00276A  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19080                           
 19081                           ;sort.c: 285: if(timeDiff >= 10){
 19082  00276E  5048               	movf	printSortTimer@timeDiff+1,w,c
 19083  002770  E104               	bnz	i2u693_40
 19084  002772  0E0A               	movlw	10
 19085  002774  5C47               	subwf	printSortTimer@timeDiff,w,c
 19086  002776  A0D8               	btfss	status,0,c
 19087  002778  D003               	goto	i2l8044
 19088  00277A                     i2u693_40:
 19089                           
 19090                           ;sort.c: 286: machine_state = DoneSorting_state;
 19091  00277A  0E02               	movlw	2
 19092  00277C  0100               	movlb	0	; () banked
 19093  00277E  6FFC               	movwf	_machine_state& (0+255),b
 19094  002780                     i2l8044:
 19095                           
 19096                           ;sort.c: 288: }
 19097                           ;sort.c: 290: int hour = timeDiff / 3600;
 19098  002780  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19099  002784  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19100  002788  0E0E               	movlw	14
 19101  00278A  6E09               	movwf	i2___lwdiv@divisor+1,c
 19102  00278C  0E10               	movlw	16
 19103  00278E  6E08               	movwf	i2___lwdiv@divisor,c
 19104  002790  ECCE  F01F         	call	i2___lwdiv	;wreg free
 19105  002794  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19106  002798  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19107                           
 19108                           ;sort.c: 291: int min = (timeDiff % 3600) / 60;
 19109  00279C  0E0E               	movlw	14
 19110  00279E  6E04               	movwf	i2___lwmod@divisor+1,c
 19111  0027A0  0E10               	movlw	16
 19112  0027A2  6E03               	movwf	i2___lwmod@divisor,c
 19113  0027A4  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19114  0027A8  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19115  0027AC  ECB4  F020         	call	i2___lwmod	;wreg free
 19116  0027B0  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19117  0027B4  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19118  0027B8  0E00               	movlw	0
 19119  0027BA  6E09               	movwf	i2___lwdiv@divisor+1,c
 19120  0027BC  0E3C               	movlw	60
 19121  0027BE  6E08               	movwf	i2___lwdiv@divisor,c
 19122  0027C0  ECCE  F01F         	call	i2___lwdiv	;wreg free
 19123  0027C4  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19124  0027C8  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19125                           
 19126                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19127  0027CC  0E0E               	movlw	14
 19128  0027CE  6E04               	movwf	i2___lwmod@divisor+1,c
 19129  0027D0  0E10               	movlw	16
 19130  0027D2  6E03               	movwf	i2___lwmod@divisor,c
 19131  0027D4  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19132  0027D8  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19133  0027DC  ECB4  F020         	call	i2___lwmod	;wreg free
 19134  0027E0  C001  F045         	movff	?i2___lwmod,_printSortTimer$2411
 19135  0027E4  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2411+1
 19136                           
 19137                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19138  0027E8  C045  F001         	movff	_printSortTimer$2411,i2___lwmod@dividend
 19139  0027EC  C046  F002         	movff	_printSortTimer$2411+1,i2___lwmod@dividend+1
 19140  0027F0  0E00               	movlw	0
 19141  0027F2  6E04               	movwf	i2___lwmod@divisor+1,c
 19142  0027F4  0E3C               	movlw	60
 19143  0027F6  6E03               	movwf	i2___lwmod@divisor,c
 19144  0027F8  ECB4  F020         	call	i2___lwmod	;wreg free
 19145  0027FC  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19146  002800  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19147                           
 19148                           ;sort.c: 294: lcdInst(0b10000000);;
 19149  002804  0E80               	movlw	128
 19150  002806  EC91  F023         	call	i2_lcdInst
 19151                           
 19152                           ;sort.c: 295: printf("SORTING...");
 19153  00280A  0E72               	movlw	low STR_64
 19154  00280C  6E0D               	movwf	i2printf@f,c
 19155  00280E  0EFF               	movlw	high STR_64
 19156  002810  6E0E               	movwf	i2printf@f+1,c
 19157  002812  ECD4  F00A         	call	i2_printf	;wreg free
 19158                           
 19159                           ;sort.c: 296: lcdInst(0b11000000);;
 19160  002816  0EC0               	movlw	192
 19161  002818  EC91  F023         	call	i2_lcdInst
 19162                           
 19163                           ;sort.c: 297: printf("TIME %d:%02d", min, sec);
 19164  00281C  0E43               	movlw	low STR_65
 19165  00281E  6E0D               	movwf	i2printf@f,c
 19166  002820  0EFF               	movlw	high STR_65
 19167  002822  6E0E               	movwf	i2printf@f+1,c
 19168  002824  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19169  002828  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19170  00282C  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19171  002830  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19172  002834  ECD4  F00A         	call	i2_printf	;wreg free
 19173  002838  0012               	return		;funcret
 19174  00283A                     __end_of_printSortTimer:
 19175                           	opt stack 0
 19176                           pclatu	equ	0xFFB
 19177                           pclath	equ	0xFFA
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           intcon2	equ	0xFF1
 19186                           intcon3	equ	0xFF0
 19187                           indf0	equ	0xFEF
 19188                           postinc0	equ	0xFEE
 19189                           fsr0h	equ	0xFEA
 19190                           fsr0l	equ	0xFE9
 19191                           wreg	equ	0xFE8
 19192                           postdec1	equ	0xFE5
 19193                           fsr1h	equ	0xFE2
 19194                           fsr1l	equ	0xFE1
 19195                           indf2	equ	0xFDF
 19196                           postinc2	equ	0xFDE
 19197                           postdec2	equ	0xFDD
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function i2_printf *****************
 19203 ;; Defined at:
 19204 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19207 ;;		 -> STR_114(17), STR_113(17), STR_112(10), STR_111(13), 
 19208 ;;		 -> STR_110(18), STR_109(18), STR_108(17), STR_107(15), 
 19209 ;;		 -> STR_106(15), STR_105(15), STR_104(17), STR_103(17), 
 19210 ;;		 -> STR_102(17), STR_101(16), STR_100(17), STR_99(17), 
 19211 ;;		 -> STR_98(17), STR_97(17), STR_96(17), STR_95(17), 
 19212 ;;		 -> STR_94(15), STR_93(11), STR_92(17), STR_91(11), 
 19213 ;;		 -> STR_90(17), STR_89(14), STR_88(15), STR_87(14), 
 19214 ;;		 -> STR_86(10), STR_85(9), STR_84(10), STR_83(16), 
 19215 ;;		 -> STR_82(15), STR_81(3), STR_80(15), STR_79(13), 
 19216 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 19217 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 19218 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 19219 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 19220 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 19221 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 19222 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 19223 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 19224 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 19225 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 19226 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 19227 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 19228 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 19229 ;;		 -> STR_1(18), 
 19230 ;; Auto vars:     Size  Location     Type
 19231 ;;  printf          4    0        struct .
 19232 ;;  printf          2   39[COMRAM] int 
 19233 ;;  printf          2   35[COMRAM] unsigned int 
 19234 ;;  printf          2   33[COMRAM] unsigned int 
 19235 ;;  printf          2   31[COMRAM] PTR void [1]
 19236 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19237 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19238 ;;		 -> STR_115(7), count_total(2), printRTC@month(4), UI@month(4), 
 19239 ;;  printf          1   38[COMRAM] char 
 19240 ;;  printf          1   37[COMRAM] unsigned char 
 19241 ;;  printf          1   28[COMRAM] char 
 19242 ;; Return value:  Size  Location     Type
 19243 ;;                  2   12[COMRAM] int 
 19244 ;; Registers used:
 19245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19251 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19252 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19254 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19255 ;;Total ram usage:       29 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:    2
 19258 ;; This function calls:
 19259 ;;		i2___lwdiv
 19260 ;;		i2___lwmod
 19261 ;;		i2___wmul
 19262 ;;		i2_isdigit
 19263 ;;		i2_putch
 19264 ;; This function is called by:
 19265 ;;		_change_state_to_menu_11
 19266 ;;		_change_state_to_menu_23
 19267 ;;		_change_state_to_logs_11
 19268 ;;		_change_state_to_logs_12
 19269 ;;		_change_state_to_logs_22
 19270 ;;		_change_state_to_logs_23
 19271 ;;		_change_state_to_logs_33
 19272 ;;		_change_state_to_logs_34
 19273 ;;		_printSortTimer
 19274 ;;		i2_change_state_to_menu_start
 19275 ;;		i2_change_state_to_menu_12
 19276 ;;		i2_change_state_to_menu_22
 19277 ;;		i2_printRTC
 19278 ;; This function uses a non-reentrant model
 19279 ;;
 19280                           
 19281                           	psect	text77
 19282  0015A8                     __ptext77:
 19283                           	opt stack 0
 19284  0015A8                     i2_printf:
 19285                           	opt stack 19
 19286                           
 19287                           ;doprnt.c: 466: va_list ap;
 19288                           ;doprnt.c: 499: signed char c;
 19289                           ;doprnt.c: 501: int width;
 19290                           ;doprnt.c: 506: signed char prec;
 19291                           ;doprnt.c: 508: unsigned char flag;
 19292                           ;doprnt.c: 523: union {
 19293                           ;doprnt.c: 524: unsigned long vd;
 19294                           ;doprnt.c: 525: double integ;
 19295                           ;doprnt.c: 526: } tmpval;
 19296                           ;doprnt.c: 528: unsigned int val;
 19297                           ;doprnt.c: 529: unsigned len;
 19298                           ;doprnt.c: 530: const char * cp;
 19299                           ;doprnt.c: 533: *ap = __va_start();
 19300                           
 19301                           ;incstack = 0
 19302  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19303  0015AA  6E20               	movwf	i2printf@ap,c
 19304  0015AC  0E00               	movlw	high (?i2_printf+2)
 19305  0015AE  6E21               	movwf	i2printf@ap+1,c
 19306                           
 19307                           ;doprnt.c: 536: while(c = *f++) {
 19308  0015B0  D1A4               	goto	i2l5770
 19309  0015B2                     i2l5640:
 19310                           
 19311                           ;doprnt.c: 538: if(c != '%')
 19312  0015B2  0E25               	movlw	37
 19313  0015B4  1827               	xorwf	i2printf@c,w,c
 19314  0015B6  B4D8               	btfsc	status,2,c
 19315  0015B8  D004               	goto	i2l5644
 19316                           
 19317                           ;doprnt.c: 540: {
 19318                           ;doprnt.c: 541: (putch(c) );
 19319  0015BA  5027               	movf	i2printf@c,w,c
 19320  0015BC  EC8B  F023         	call	i2_putch
 19321                           
 19322                           ;doprnt.c: 542: continue;
 19323  0015C0  D19C               	goto	i2l5770
 19324  0015C2                     i2l5644:
 19325                           
 19326                           ;doprnt.c: 543: }
 19327                           ;doprnt.c: 546: width = 0;
 19328  0015C2  0E00               	movlw	0
 19329  0015C4  6E29               	movwf	i2printf@width+1,c
 19330  0015C6  0E00               	movlw	0
 19331  0015C8  6E28               	movwf	i2printf@width,c
 19332                           
 19333                           ;doprnt.c: 548: flag = 0;
 19334  0015CA  0E00               	movlw	0
 19335  0015CC  6E26               	movwf	i2printf@flag,c
 19336                           
 19337                           ;doprnt.c: 551: switch(*f) {
 19338                           
 19339                           ;doprnt.c: 550: for(;;) {
 19340  0015CE  D003               	goto	i2l5650
 19341  0015D0                     i2l5646:
 19342                           
 19343                           ;doprnt.c: 580: flag |= 0x04;
 19344  0015D0  8426               	bsf	i2printf@flag,2,c
 19345                           
 19346                           ;doprnt.c: 581: f++;
 19347  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19348  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19349  0015D6                     i2l5650:
 19350  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19351  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19352  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19353  0015DE  6AF8               	clrf	tblptru,c
 19354  0015E0                     	endif
 19355  0015E0                     	if	0	;tblptru may be non-zero
 19356  0015E0                     	endif
 19357  0015E0  0008               	tblrd		*
 19358  0015E2  50F5               	movf	tablat,w,c
 19359                           
 19360                           ; Switch size 1, requested type "space"
 19361                           ; Number of cases is 1, Range of values is 48 to 48
 19362                           ; switch strategies available:
 19363                           ; Name         Instructions Cycles
 19364                           ; simple_byte            4     3 (average)
 19365                           ;	Chosen strategy is simple_byte
 19366  0015E4  0A30               	xorlw	48	; case 48
 19367  0015E6  B4D8               	btfsc	status,2,c
 19368  0015E8  D7F3               	goto	i2l5646
 19369                           
 19370                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19371                           
 19372                           ;doprnt.c: 586: }
 19373                           
 19374                           ;doprnt.c: 585: break;
 19375  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19376  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19377  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19378  0015F2  6AF8               	clrf	tblptru,c
 19379  0015F4                     	endif
 19380  0015F4                     	if	0	;tblptru may be non-zero
 19381  0015F4                     	endif
 19382  0015F4  0008               	tblrd		*
 19383  0015F6  50F5               	movf	tablat,w,c
 19384  0015F8  EC37  F023         	call	i2_isdigit
 19385  0015FC  A0D8               	btfss	status,0,c
 19386  0015FE  D0A6               	goto	i2l5698
 19387                           
 19388                           ;doprnt.c: 598: width = 0;
 19389  001600  0E00               	movlw	0
 19390  001602  6E29               	movwf	i2printf@width+1,c
 19391  001604  0E00               	movlw	0
 19392  001606  6E28               	movwf	i2printf@width,c
 19393  001608                     i2l5656:
 19394                           
 19395                           ;doprnt.c: 600: width *= 10;
 19396  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19397  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19398  001610  0E00               	movlw	0
 19399  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19400  001614  0E0A               	movlw	10
 19401  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19402  001618  ECCB  F022         	call	i2___wmul	;wreg free
 19403  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19404  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19405                           
 19406                           ;doprnt.c: 601: width += *f++ - '0';
 19407  001624  0ED0               	movlw	208
 19408  001626  6E19               	movwf	??i2_printf& (0+255),c
 19409  001628  0EFF               	movlw	255
 19410  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19411  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19412  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19413  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19414  001634  6AF8               	clrf	tblptru,c
 19415  001636                     	endif
 19416  001636                     	if	0	;tblptru may be non-zero
 19417  001636                     	endif
 19418  001636  0008               	tblrd		*
 19419  001638  50F5               	movf	tablat,w,c
 19420  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19421  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19422  00163E  5019               	movf	??i2_printf,w,c
 19423  001640  261B               	addwf	??i2_printf+2,f,c
 19424  001642  501A               	movf	??i2_printf+1,w,c
 19425  001644  221C               	addwfc	??i2_printf+3,f,c
 19426  001646  501B               	movf	??i2_printf+2,w,c
 19427  001648  2628               	addwf	i2printf@width,f,c
 19428  00164A  501C               	movf	??i2_printf+3,w,c
 19429  00164C  2229               	addwfc	i2printf@width+1,f,c
 19430  00164E  4A0D               	infsnz	i2printf@f,f,c
 19431  001650  2A0E               	incf	i2printf@f+1,f,c
 19432                           
 19433                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19434  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19435  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19436  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19437  00165A  6AF8               	clrf	tblptru,c
 19438  00165C                     	endif
 19439  00165C                     	if	0	;tblptru may be non-zero
 19440  00165C                     	endif
 19441  00165C  0008               	tblrd		*
 19442  00165E  50F5               	movf	tablat,w,c
 19443  001660  EC37  F023         	call	i2_isdigit
 19444  001664  A0D8               	btfss	status,0,c
 19445  001666  D072               	goto	i2l5698
 19446  001668  D7CF               	goto	i2l5656
 19447  00166A                     i2l5664:
 19448                           
 19449                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19450  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19451  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19452  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19453  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19454  00167A  0E02               	movlw	2
 19455  00167C  2620               	addwf	i2printf@ap,f,c
 19456  00167E  0E00               	movlw	0
 19457  001680  2221               	addwfc	i2printf@ap+1,f,c
 19458                           
 19459                           ;doprnt.c: 740: if(!cp)
 19460  001682  501E               	movf	i2printf@cp,w,c
 19461  001684  101F               	iorwf	i2printf@cp+1,w,c
 19462  001686  A4D8               	btfss	status,2,c
 19463  001688  D004               	goto	i2l5672
 19464                           
 19465                           ;doprnt.c: 741: cp = "(null)";
 19466  00168A  0EB6               	movlw	low STR_115
 19467  00168C  6E1E               	movwf	i2printf@cp,c
 19468  00168E  0EFF               	movlw	high STR_115
 19469  001690  6E1F               	movwf	i2printf@cp+1,c
 19470  001692                     i2l5672:
 19471                           
 19472                           ;doprnt.c: 745: len = 0;
 19473  001692  0E00               	movlw	0
 19474  001694  6E23               	movwf	i2printf@len+1,c
 19475  001696  0E00               	movlw	0
 19476  001698  6E22               	movwf	i2printf@len,c
 19477                           
 19478                           ;doprnt.c: 746: while(cp[len])
 19479  00169A  D002               	goto	i2l5676
 19480  00169C                     i2l5674:
 19481                           
 19482                           ;doprnt.c: 747: len++;
 19483  00169C  4A22               	infsnz	i2printf@len,f,c
 19484  00169E  2A23               	incf	i2printf@len+1,f,c
 19485  0016A0                     i2l5676:
 19486  0016A0  5022               	movf	i2printf@len,w,c
 19487  0016A2  241E               	addwf	i2printf@cp,w,c
 19488  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19489  0016A6  5023               	movf	i2printf@len+1,w,c
 19490  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19491  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19492  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19493  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19494  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19495  0016B6  6EF8               	movwf	tblptru,c
 19496  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19497  0016BA  64F7               	cpfsgt	tblptrh,c
 19498  0016BC  D003               	bra	i2u421_47
 19499  0016BE  0008               	tblrd		*
 19500  0016C0  50F5               	movf	tablat,w,c
 19501  0016C2  D005               	bra	i2u421_40
 19502  0016C4                     i2u421_47:
 19503  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19504  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19505  0016CC  50EF               	movf	indf0,w,c
 19506  0016CE                     i2u421_40:
 19507  0016CE  0900               	iorlw	0
 19508  0016D0  A4D8               	btfss	status,2,c
 19509  0016D2  D7E4               	goto	i2l5674
 19510                           
 19511                           ;doprnt.c: 757: if(width > len)
 19512  0016D4  5028               	movf	i2printf@width,w,c
 19513  0016D6  5C22               	subwf	i2printf@len,w,c
 19514  0016D8  5029               	movf	i2printf@width+1,w,c
 19515  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19516  0016DC  B0D8               	btfsc	status,0,c
 19517  0016DE  D005               	goto	i2l5682
 19518                           
 19519                           ;doprnt.c: 758: width -= len;
 19520  0016E0  5022               	movf	i2printf@len,w,c
 19521  0016E2  5E28               	subwf	i2printf@width,f,c
 19522  0016E4  5023               	movf	i2printf@len+1,w,c
 19523  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19524  0016E8  D008               	goto	i2l5686
 19525  0016EA                     i2l5682:
 19526                           
 19527                           ;doprnt.c: 759: else
 19528                           ;doprnt.c: 760: width = 0;
 19529  0016EA  0E00               	movlw	0
 19530  0016EC  6E29               	movwf	i2printf@width+1,c
 19531  0016EE  0E00               	movlw	0
 19532  0016F0  6E28               	movwf	i2printf@width,c
 19533                           
 19534                           ;doprnt.c: 764: while(width--)
 19535  0016F2  D003               	goto	i2l5686
 19536  0016F4                     i2l5684:
 19537                           
 19538                           ;doprnt.c: 765: (putch(' ') );
 19539  0016F4  0E20               	movlw	32
 19540  0016F6  EC8B  F023         	call	i2_putch
 19541  0016FA                     i2l5686:
 19542  0016FA  0628               	decf	i2printf@width,f,c
 19543  0016FC  A0D8               	btfss	status,0,c
 19544  0016FE  0629               	decf	i2printf@width+1,f,c
 19545  001700  2828               	incf	i2printf@width,w,c
 19546  001702  E1F8               	bnz	i2l5684
 19547  001704  2829               	incf	i2printf@width+1,w,c
 19548  001706  B4D8               	btfsc	status,2,c
 19549  001708  D016               	goto	i2l5692
 19550  00170A  D7F4               	goto	i2l5684
 19551  00170C                     i2l5688:
 19552                           
 19553                           ;doprnt.c: 768: (putch(*cp++) );
 19554  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19555  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19556  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19557  001716  6EF8               	movwf	tblptru,c
 19558  001718  0E0F               	movlw	(high __ramtop+-1)
 19559  00171A  64F7               	cpfsgt	tblptrh,c
 19560  00171C  D003               	bra	i2u425_47
 19561  00171E  0008               	tblrd		*
 19562  001720  50F5               	movf	tablat,w,c
 19563  001722  D005               	bra	i2u425_40
 19564  001724                     i2u425_47:
 19565  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19566  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19567  00172C  50EF               	movf	indf0,w,c
 19568  00172E                     i2u425_40:
 19569  00172E  EC8B  F023         	call	i2_putch
 19570  001732  4A1E               	infsnz	i2printf@cp,f,c
 19571  001734  2A1F               	incf	i2printf@cp+1,f,c
 19572  001736                     i2l5692:
 19573  001736  0622               	decf	i2printf@len,f,c
 19574  001738  A0D8               	btfss	status,0,c
 19575  00173A  0623               	decf	i2printf@len+1,f,c
 19576  00173C  2822               	incf	i2printf@len,w,c
 19577  00173E  E1E6               	bnz	i2l5688
 19578  001740  2823               	incf	i2printf@len+1,w,c
 19579  001742  B4D8               	btfsc	status,2,c
 19580  001744  D0DA               	goto	i2l5770
 19581  001746  D7E2               	goto	i2l5688
 19582  001748                     i2l5694:
 19583                           
 19584                           ;doprnt.c: 818: flag |= 0x40;
 19585  001748  8C26               	bsf	i2printf@flag,6,c
 19586                           
 19587                           ;doprnt.c: 822: }
 19588                           
 19589                           ;doprnt.c: 819: break;
 19590  00174A  D01B               	goto	i2l1248
 19591  00174C                     i2l5698:
 19592  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19593  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19594  001754  4A0D               	infsnz	i2printf@f,f,c
 19595  001756  2A0E               	incf	i2printf@f+1,f,c
 19596  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19597  001758  6AF8               	clrf	tblptru,c
 19598  00175A                     	endif
 19599  00175A                     	if	0	;tblptru may be non-zero
 19600  00175A                     	endif
 19601  00175A  0008               	tblrd		*
 19602  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19603  001760  5027               	movf	i2printf@c,w,c
 19604                           
 19605                           ; Switch size 1, requested type "space"
 19606                           ; Number of cases is 5, Range of values is 0 to 117
 19607                           ; switch strategies available:
 19608                           ; Name         Instructions Cycles
 19609                           ; simple_byte           16     9 (average)
 19610                           ;	Chosen strategy is simple_byte
 19611  001762  0A00               	xorlw	0	; case 0
 19612  001764  B4D8               	btfsc	status,2,c
 19613  001766  0012               	return	
 19614  001768  0A64               	xorlw	100	; case 100
 19615  00176A  B4D8               	btfsc	status,2,c
 19616  00176C  D00A               	goto	i2l1248
 19617  00176E  0A0D               	xorlw	13	; case 105
 19618  001770  B4D8               	btfsc	status,2,c
 19619  001772  D007               	goto	i2l1248
 19620  001774  0A1A               	xorlw	26	; case 115
 19621  001776  B4D8               	btfsc	status,2,c
 19622  001778  D778               	goto	i2l5664
 19623  00177A  0A06               	xorlw	6	; case 117
 19624  00177C  B4D8               	btfsc	status,2,c
 19625  00177E  D7E4               	goto	i2l5694
 19626  001780  D0BC               	goto	i2l5770
 19627  001782                     i2l1248:
 19628                           
 19629                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19630  001782  BC26               	btfsc	i2printf@flag,6,c
 19631  001784  D015               	goto	i2l5710
 19632                           
 19633                           ;doprnt.c: 1253: {
 19634                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19635  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19636  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19637  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19638  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19639  001796  0E02               	movlw	2
 19640  001798  2620               	addwf	i2printf@ap,f,c
 19641  00179A  0E00               	movlw	0
 19642  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19643                           
 19644                           ;doprnt.c: 1261: if((int)val < 0) {
 19645  00179E  AE25               	btfss	i2printf@val+1,7,c
 19646  0017A0  D013               	goto	i2l5714
 19647                           
 19648                           ;doprnt.c: 1262: flag |= 0x03;
 19649  0017A2  0E03               	movlw	3
 19650  0017A4  1226               	iorwf	i2printf@flag,f,c
 19651                           
 19652                           ;doprnt.c: 1263: val = -val;
 19653  0017A6  6C24               	negf	i2printf@val,c
 19654  0017A8  1E25               	comf	i2printf@val+1,f,c
 19655  0017AA  B0D8               	btfsc	status,0,c
 19656  0017AC  2A25               	incf	i2printf@val+1,f,c
 19657                           
 19658                           ;doprnt.c: 1264: }
 19659                           ;doprnt.c: 1266: }
 19660  0017AE  D00C               	goto	i2l5714
 19661  0017B0                     i2l5710:
 19662                           
 19663                           ;doprnt.c: 1268: else
 19664                           ;doprnt.c: 1273: {
 19665                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19666  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19667  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19668  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19669  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19670  0017C0  0E02               	movlw	2
 19671  0017C2  2620               	addwf	i2printf@ap,f,c
 19672  0017C4  0E00               	movlw	0
 19673  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19674  0017C8                     i2l5714:
 19675                           
 19676                           ;doprnt.c: 1287: }
 19677                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19678  0017C8  0E01               	movlw	1
 19679  0017CA  6E27               	movwf	i2printf@c,c
 19680  0017CC                     i2l5716:
 19681  0017CC  0E05               	movlw	5
 19682  0017CE  1827               	xorwf	i2printf@c,w,c
 19683  0017D0  B4D8               	btfsc	status,2,c
 19684  0017D2  D015               	goto	i2l5728
 19685                           
 19686                           ;doprnt.c: 1306: if(val < dpowers[c])
 19687  0017D4  5027               	movf	i2printf@c,w,c
 19688  0017D6  0D02               	mullw	2
 19689  0017D8  0E26               	movlw	low _dpowers
 19690  0017DA  24F3               	addwf	prodl,w,c
 19691  0017DC  6EF6               	movwf	tblptrl,c
 19692  0017DE  0EFB               	movlw	high _dpowers
 19693  0017E0  20F4               	addwfc	prodh,w,c
 19694  0017E2  6EF7               	movwf	tblptrh,c
 19695  0017E4                     	if	1	;There are 3 active tblptr bytes
 19696  0017E4  6AF8               	clrf	tblptru,c
 19697  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19698  0017E8  22F8               	addwfc	tblptru,f,c
 19699  0017EA                     	endif
 19700  0017EA  0009               	tblrd		*+
 19701  0017EC  50F5               	movf	tablat,w,c
 19702  0017EE  5C24               	subwf	i2printf@val,w,c
 19703  0017F0  0009               	tblrd		*+
 19704  0017F2  50F5               	movf	tablat,w,c
 19705  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19706  0017F6  A0D8               	btfss	status,0,c
 19707  0017F8  D002               	goto	i2l5728
 19708                           
 19709                           ;doprnt.c: 1307: break;
 19710  0017FA  2A27               	incf	i2printf@c,f,c
 19711  0017FC  D7E7               	goto	i2l5716
 19712  0017FE                     i2l5728:
 19713                           
 19714                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19715  0017FE  5028               	movf	i2printf@width,w,c
 19716  001800  1029               	iorwf	i2printf@width+1,w,c
 19717  001802  B4D8               	btfsc	status,2,c
 19718  001804  D009               	goto	i2l5734
 19719  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19720  00180A  0E03               	movlw	3
 19721  00180C  1619               	andwf	??i2_printf,f,c
 19722  00180E  B4D8               	btfsc	status,2,c
 19723  001810  D003               	goto	i2l5734
 19724                           
 19725                           ;doprnt.c: 1346: width--;
 19726  001812  0628               	decf	i2printf@width,f,c
 19727  001814  A0D8               	btfss	status,0,c
 19728  001816  0629               	decf	i2printf@width+1,f,c
 19729  001818                     i2l5734:
 19730                           
 19731                           ;doprnt.c: 1381: if(width > c)
 19732  001818  0E80               	movlw	128
 19733  00181A  BE27               	btfsc	i2printf@c,7,c
 19734  00181C  0E7F               	movlw	127
 19735  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19736  001820  5028               	movf	i2printf@width,w,c
 19737  001822  5C27               	subwf	i2printf@c,w,c
 19738  001824  5029               	movf	i2printf@width+1,w,c
 19739  001826  0A80               	xorlw	128
 19740  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19741  00182A  B0D8               	btfsc	status,0,c
 19742  00182C  D007               	goto	i2l5738
 19743                           
 19744                           ;doprnt.c: 1382: width -= c;
 19745  00182E  5027               	movf	i2printf@c,w,c
 19746  001830  5E28               	subwf	i2printf@width,f,c
 19747  001832  0E00               	movlw	0
 19748  001834  BE27               	btfsc	i2printf@c,7,c
 19749  001836  0EFF               	movlw	255
 19750  001838  5A29               	subwfb	i2printf@width+1,f,c
 19751  00183A  D004               	goto	i2l5740
 19752  00183C                     i2l5738:
 19753                           
 19754                           ;doprnt.c: 1383: else
 19755                           ;doprnt.c: 1384: width = 0;
 19756  00183C  0E00               	movlw	0
 19757  00183E  6E29               	movwf	i2printf@width+1,c
 19758  001840  0E00               	movlw	0
 19759  001842  6E28               	movwf	i2printf@width,c
 19760  001844                     i2l5740:
 19761                           
 19762                           ;doprnt.c: 1387: if(flag & 0x04) {
 19763  001844  A426               	btfss	i2printf@flag,2,c
 19764  001846  D014               	goto	i2l5752
 19765                           
 19766                           ;doprnt.c: 1392: if(flag & 0x03)
 19767  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19768  00184C  0E03               	movlw	3
 19769  00184E  1619               	andwf	??i2_printf,f,c
 19770  001850  B4D8               	btfsc	status,2,c
 19771  001852  D003               	goto	i2l5746
 19772                           
 19773                           ;doprnt.c: 1393: (putch('-') );
 19774  001854  0E2D               	movlw	45
 19775  001856  EC8B  F023         	call	i2_putch
 19776  00185A                     i2l5746:
 19777                           
 19778                           ;doprnt.c: 1415: if(width)
 19779  00185A  5028               	movf	i2printf@width,w,c
 19780  00185C  1029               	iorwf	i2printf@width+1,w,c
 19781  00185E  B4D8               	btfsc	status,2,c
 19782  001860  D01E               	goto	i2l5762
 19783                           
 19784                           ;doprnt.c: 1417: (putch('0') );
 19785                           
 19786                           ;doprnt.c: 1416: do
 19787  001862  0E30               	movlw	48
 19788  001864  EC8B  F023         	call	i2_putch
 19789                           
 19790                           ;doprnt.c: 1418: while(--width);
 19791  001868  0628               	decf	i2printf@width,f,c
 19792  00186A  A0D8               	btfss	status,0,c
 19793  00186C  0629               	decf	i2printf@width+1,f,c
 19794  00186E  D7F5               	goto	i2l5746
 19795  001870                     i2l5752:
 19796                           
 19797                           ;doprnt.c: 1422: {
 19798                           ;doprnt.c: 1424: if(width
 19799                           ;doprnt.c: 1428: )
 19800  001870  5028               	movf	i2printf@width,w,c
 19801  001872  1029               	iorwf	i2printf@width+1,w,c
 19802  001874  B4D8               	btfsc	status,2,c
 19803  001876  D00A               	goto	i2l5758
 19804  001878                     i2l5754:
 19805                           
 19806                           ;doprnt.c: 1430: (putch(' ') );
 19807  001878  0E20               	movlw	32
 19808  00187A  EC8B  F023         	call	i2_putch
 19809                           
 19810                           ;doprnt.c: 1431: while(--width);
 19811  00187E  0628               	decf	i2printf@width,f,c
 19812  001880  A0D8               	btfss	status,0,c
 19813  001882  0629               	decf	i2printf@width+1,f,c
 19814  001884  5028               	movf	i2printf@width,w,c
 19815  001886  1029               	iorwf	i2printf@width+1,w,c
 19816  001888  A4D8               	btfss	status,2,c
 19817  00188A  D7F6               	goto	i2l5754
 19818  00188C                     i2l5758:
 19819                           
 19820                           ;doprnt.c: 1438: if(flag & 0x03)
 19821  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19822  001890  0E03               	movlw	3
 19823  001892  1619               	andwf	??i2_printf,f,c
 19824  001894  B4D8               	btfsc	status,2,c
 19825  001896  D003               	goto	i2l5762
 19826                           
 19827                           ;doprnt.c: 1439: (putch('-') );
 19828  001898  0E2D               	movlw	45
 19829  00189A  EC8B  F023         	call	i2_putch
 19830  00189E                     i2l5762:
 19831                           
 19832                           ;doprnt.c: 1469: }
 19833                           ;doprnt.c: 1472: prec = c;
 19834  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19835                           
 19836                           ;doprnt.c: 1474: while(prec--) {
 19837  0018A2  D027               	goto	i2l5768
 19838  0018A4                     i2l5764:
 19839                           
 19840                           ;doprnt.c: 1478: {
 19841                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19842  0018A4  501D               	movf	i2printf@prec,w,c
 19843  0018A6  0D02               	mullw	2
 19844  0018A8  0E26               	movlw	low _dpowers
 19845  0018AA  24F3               	addwf	prodl,w,c
 19846  0018AC  6EF6               	movwf	tblptrl,c
 19847  0018AE  0EFB               	movlw	high _dpowers
 19848  0018B0  20F4               	addwfc	prodh,w,c
 19849  0018B2  6EF7               	movwf	tblptrh,c
 19850  0018B4                     	if	1	;There are 3 active tblptr bytes
 19851  0018B4  6AF8               	clrf	tblptru,c
 19852  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19853  0018B8  22F8               	addwfc	tblptru,f,c
 19854  0018BA                     	endif
 19855  0018BA  0009               	tblrd		*+
 19856  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19857  0018C0  000A               	tblrd		*-
 19858  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19859  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19860  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19861  0018CE  ECCE  F01F         	call	i2___lwdiv	;wreg free
 19862  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19863  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19864  0018DA  0E00               	movlw	0
 19865  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19866  0018DE  0E0A               	movlw	10
 19867  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19868  0018E2  ECB4  F020         	call	i2___lwmod	;wreg free
 19869  0018E6  5001               	movf	?i2___lwmod,w,c
 19870  0018E8  0F30               	addlw	48
 19871  0018EA  6E27               	movwf	i2printf@c,c
 19872                           
 19873                           ;doprnt.c: 1523: }
 19874                           ;doprnt.c: 1524: (putch(c) );
 19875  0018EC  5027               	movf	i2printf@c,w,c
 19876  0018EE  EC8B  F023         	call	i2_putch
 19877  0018F2                     i2l5768:
 19878  0018F2  061D               	decf	i2printf@prec,f,c
 19879  0018F4  281D               	incf	i2printf@prec,w,c
 19880  0018F6  A4D8               	btfss	status,2,c
 19881  0018F8  D7D5               	goto	i2l5764
 19882  0018FA                     i2l5770:
 19883  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19884  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19885  001902  4A0D               	infsnz	i2printf@f,f,c
 19886  001904  2A0E               	incf	i2printf@f+1,f,c
 19887  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19888  001906  6AF8               	clrf	tblptru,c
 19889  001908                     	endif
 19890  001908                     	if	0	;tblptru may be non-zero
 19891  001908                     	endif
 19892  001908  0008               	tblrd		*
 19893  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19894  00190E  5027               	movf	i2printf@c,w,c
 19895  001910  B4D8               	btfsc	status,2,c
 19896  001912  0012               	return	
 19897  001914  D64E               	goto	i2l5640
 19898  001916                     __end_ofi2_printf:
 19899                           	opt stack 0
 19900                           pclatu	equ	0xFFB
 19901                           pclath	equ	0xFFA
 19902                           tblptru	equ	0xFF8
 19903                           tblptrh	equ	0xFF7
 19904                           tblptrl	equ	0xFF6
 19905                           tablat	equ	0xFF5
 19906                           prodh	equ	0xFF4
 19907                           prodl	equ	0xFF3
 19908                           intcon	equ	0xFF2
 19909                           intcon2	equ	0xFF1
 19910                           intcon3	equ	0xFF0
 19911                           indf0	equ	0xFEF
 19912                           postinc0	equ	0xFEE
 19913                           fsr0h	equ	0xFEA
 19914                           fsr0l	equ	0xFE9
 19915                           wreg	equ	0xFE8
 19916                           postdec1	equ	0xFE5
 19917                           fsr1h	equ	0xFE2
 19918                           fsr1l	equ	0xFE1
 19919                           indf2	equ	0xFDF
 19920                           postinc2	equ	0xFDE
 19921                           postdec2	equ	0xFDD
 19922                           fsr2h	equ	0xFDA
 19923                           fsr2l	equ	0xFD9
 19924                           status	equ	0xFD8
 19925                           
 19926 ;; *************** function i2_putch *****************
 19927 ;; Defined at:
 19928 ;;		line 20 in file "lcd.c"
 19929 ;; Parameters:    Size  Location     Type
 19930 ;;  data            1    wreg     unsigned char 
 19931 ;; Auto vars:     Size  Location     Type
 19932 ;;  data            1    2[COMRAM] unsigned char 
 19933 ;; Return value:  Size  Location     Type
 19934 ;;                  1    wreg      void 
 19935 ;; Registers used:
 19936 ;;		wreg, status,2, status,0, cstack
 19937 ;; Tracked objects:
 19938 ;;		On entry : 0/0
 19939 ;;		On exit  : 0/0
 19940 ;;		Unchanged: 0/0
 19941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19946 ;;Total ram usage:        1 bytes
 19947 ;; Hardware stack levels used:    1
 19948 ;; Hardware stack levels required when called:    1
 19949 ;; This function calls:
 19950 ;;		i2_lcdNibble
 19951 ;; This function is called by:
 19952 ;;		i2_printf
 19953 ;; This function uses a non-reentrant model
 19954 ;;
 19955                           
 19956                           	psect	text78
 19957  004716                     __ptext78:
 19958                           	opt stack 0
 19959  004716                     i2_putch:
 19960                           	opt stack 19
 19961                           
 19962                           ;incstack = 0
 19963                           ;i2putch@data stored from wreg
 19964  004716  6E03               	movwf	i2putch@data,c
 19965                           
 19966                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19967  004718  848C               	bsf	3980,2,c	;volatile
 19968                           
 19969                           ;lcd.c: 22: lcdNibble(data);
 19970  00471A  5003               	movf	i2putch@data,w,c
 19971  00471C  ECA3  F01F         	call	i2_lcdNibble
 19972  004720  0012               	return		;funcret
 19973  004722                     __end_ofi2_putch:
 19974                           	opt stack 0
 19975                           pclatu	equ	0xFFB
 19976                           pclath	equ	0xFFA
 19977                           tblptru	equ	0xFF8
 19978                           tblptrh	equ	0xFF7
 19979                           tblptrl	equ	0xFF6
 19980                           tablat	equ	0xFF5
 19981                           prodh	equ	0xFF4
 19982                           prodl	equ	0xFF3
 19983                           intcon	equ	0xFF2
 19984                           intcon2	equ	0xFF1
 19985                           intcon3	equ	0xFF0
 19986                           indf0	equ	0xFEF
 19987                           postinc0	equ	0xFEE
 19988                           fsr0h	equ	0xFEA
 19989                           fsr0l	equ	0xFE9
 19990                           wreg	equ	0xFE8
 19991                           postdec1	equ	0xFE5
 19992                           fsr1h	equ	0xFE2
 19993                           fsr1l	equ	0xFE1
 19994                           indf2	equ	0xFDF
 19995                           postinc2	equ	0xFDE
 19996                           postdec2	equ	0xFDD
 19997                           fsr2h	equ	0xFDA
 19998                           fsr2l	equ	0xFD9
 19999                           status	equ	0xFD8
 20000                           
 20001 ;; *************** function i2_isdigit *****************
 20002 ;; Defined at:
 20003 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20004 ;; Parameters:    Size  Location     Type
 20005 ;;  c               1    wreg     unsigned char 
 20006 ;; Auto vars:     Size  Location     Type
 20007 ;;  c               1    2[COMRAM] unsigned char 
 20008 ;; Return value:  Size  Location     Type
 20009 ;;		None               void
 20010 ;; Registers used:
 20011 ;;		wreg, status,2, status,0
 20012 ;; Tracked objects:
 20013 ;;		On entry : 0/0
 20014 ;;		On exit  : 0/0
 20015 ;;		Unchanged: 0/0
 20016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20021 ;;Total ram usage:        3 bytes
 20022 ;; Hardware stack levels used:    1
 20023 ;; This function calls:
 20024 ;;		Nothing
 20025 ;; This function is called by:
 20026 ;;		i2_printf
 20027 ;; This function uses a non-reentrant model
 20028 ;;
 20029                           
 20030                           	psect	text79
 20031  00466E                     __ptext79:
 20032                           	opt stack 0
 20033  00466E                     i2_isdigit:
 20034                           	opt stack 20
 20035                           
 20036                           ;incstack = 0
 20037                           ;i2isdigit@c stored from wreg
 20038  00466E  6E03               	movwf	i2isdigit@c,c
 20039  004670  0E00               	movlw	0
 20040  004672  6E02               	movwf	i2_isdigit$1938,c
 20041  004674  0E3A               	movlw	58
 20042  004676  6003               	cpfslt	i2isdigit@c,c
 20043  004678  D005               	goto	i2l5350
 20044  00467A  0E2F               	movlw	47
 20045  00467C  6403               	cpfsgt	i2isdigit@c,c
 20046  00467E  D002               	goto	i2l5350
 20047  004680  0E01               	movlw	1
 20048  004682  6E02               	movwf	i2_isdigit$1938,c
 20049  004684                     i2l5350:
 20050  004684  C002  F001         	movff	i2_isdigit$1938,??i2_isdigit
 20051  004688  3001               	rrcf	??i2_isdigit,w,c
 20052  00468A  0012               	return	
 20053  00468C                     __end_ofi2_isdigit:
 20054                           	opt stack 0
 20055                           pclatu	equ	0xFFB
 20056                           pclath	equ	0xFFA
 20057                           tblptru	equ	0xFF8
 20058                           tblptrh	equ	0xFF7
 20059                           tblptrl	equ	0xFF6
 20060                           tablat	equ	0xFF5
 20061                           prodh	equ	0xFF4
 20062                           prodl	equ	0xFF3
 20063                           intcon	equ	0xFF2
 20064                           intcon2	equ	0xFF1
 20065                           intcon3	equ	0xFF0
 20066                           indf0	equ	0xFEF
 20067                           postinc0	equ	0xFEE
 20068                           fsr0h	equ	0xFEA
 20069                           fsr0l	equ	0xFE9
 20070                           wreg	equ	0xFE8
 20071                           postdec1	equ	0xFE5
 20072                           fsr1h	equ	0xFE2
 20073                           fsr1l	equ	0xFE1
 20074                           indf2	equ	0xFDF
 20075                           postinc2	equ	0xFDE
 20076                           postdec2	equ	0xFDD
 20077                           fsr2h	equ	0xFDA
 20078                           fsr2l	equ	0xFD9
 20079                           status	equ	0xFD8
 20080                           
 20081 ;; *************** function i2___wmul *****************
 20082 ;; Defined at:
 20083 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20084 ;; Parameters:    Size  Location     Type
 20085 ;;  multiplier      2    0[COMRAM] unsigned int 
 20086 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20087 ;; Auto vars:     Size  Location     Type
 20088 ;;  __wmul          2    4[COMRAM] unsigned int 
 20089 ;; Return value:  Size  Location     Type
 20090 ;;                  2    0[COMRAM] unsigned int 
 20091 ;; Registers used:
 20092 ;;		wreg, status,2, status,0, prodl, prodh
 20093 ;; Tracked objects:
 20094 ;;		On entry : 0/0
 20095 ;;		On exit  : 0/0
 20096 ;;		Unchanged: 0/0
 20097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20101 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20102 ;;Total ram usage:        6 bytes
 20103 ;; Hardware stack levels used:    1
 20104 ;; This function calls:
 20105 ;;		Nothing
 20106 ;; This function is called by:
 20107 ;;		_printSortTimer
 20108 ;;		_retrieveLog
 20109 ;;		i2_printf
 20110 ;; This function uses a non-reentrant model
 20111 ;;
 20112                           
 20113                           	psect	text80
 20114  004596                     __ptext80:
 20115                           	opt stack 0
 20116  004596                     i2___wmul:
 20117                           	opt stack 20
 20118                           
 20119                           ;incstack = 0
 20120  004596  5001               	movf	i2___wmul@multiplier,w,c
 20121  004598  0203               	mulwf	i2___wmul@multiplicand,c
 20122  00459A  CFF3 F005          	movff	prodl,i2___wmul@product
 20123  00459E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20124  0045A2  5001               	movf	i2___wmul@multiplier,w,c
 20125  0045A4  0204               	mulwf	i2___wmul@multiplicand+1,c
 20126  0045A6  50F3               	movf	prodl,w,c
 20127  0045A8  2606               	addwf	i2___wmul@product+1,f,c
 20128  0045AA  5002               	movf	i2___wmul@multiplier+1,w,c
 20129  0045AC  0203               	mulwf	i2___wmul@multiplicand,c
 20130  0045AE  50F3               	movf	prodl,w,c
 20131  0045B0  2606               	addwf	i2___wmul@product+1,f,c
 20132  0045B2  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20133  0045B6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20134  0045BA  0012               	return	
 20135  0045BC                     __end_ofi2___wmul:
 20136                           	opt stack 0
 20137                           pclatu	equ	0xFFB
 20138                           pclath	equ	0xFFA
 20139                           tblptru	equ	0xFF8
 20140                           tblptrh	equ	0xFF7
 20141                           tblptrl	equ	0xFF6
 20142                           tablat	equ	0xFF5
 20143                           prodh	equ	0xFF4
 20144                           prodl	equ	0xFF3
 20145                           intcon	equ	0xFF2
 20146                           intcon2	equ	0xFF1
 20147                           intcon3	equ	0xFF0
 20148                           indf0	equ	0xFEF
 20149                           postinc0	equ	0xFEE
 20150                           fsr0h	equ	0xFEA
 20151                           fsr0l	equ	0xFE9
 20152                           wreg	equ	0xFE8
 20153                           postdec1	equ	0xFE5
 20154                           fsr1h	equ	0xFE2
 20155                           fsr1l	equ	0xFE1
 20156                           indf2	equ	0xFDF
 20157                           postinc2	equ	0xFDE
 20158                           postdec2	equ	0xFDD
 20159                           fsr2h	equ	0xFDA
 20160                           fsr2l	equ	0xFD9
 20161                           status	equ	0xFD8
 20162                           
 20163 ;; *************** function i2___lwmod *****************
 20164 ;; Defined at:
 20165 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20166 ;; Parameters:    Size  Location     Type
 20167 ;;  dividend        2    0[COMRAM] unsigned int 
 20168 ;;  divisor         2    2[COMRAM] unsigned int 
 20169 ;; Auto vars:     Size  Location     Type
 20170 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  2    0[COMRAM] unsigned int 
 20173 ;; Registers used:
 20174 ;;		wreg, status,2, status,0
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20183 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;Total ram usage:        5 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; This function calls:
 20187 ;;		Nothing
 20188 ;; This function is called by:
 20189 ;;		_printSortTimer
 20190 ;;		i2_printf
 20191 ;; This function uses a non-reentrant model
 20192 ;;
 20193                           
 20194                           	psect	text81
 20195  004168                     __ptext81:
 20196                           	opt stack 0
 20197  004168                     i2___lwmod:
 20198                           	opt stack 20
 20199                           
 20200                           ;incstack = 0
 20201  004168  5003               	movf	i2___lwmod@divisor,w,c
 20202  00416A  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20203  00416C  B4D8               	btfsc	status,2,c
 20204  00416E  D018               	goto	i2l1705
 20205  004170  0E01               	movlw	1
 20206  004172  6E05               	movwf	i2___lwmod@counter,c
 20207  004174  D004               	goto	i2l5382
 20208  004176                     i2l5380:
 20209  004176  90D8               	bcf	status,0,c
 20210  004178  3603               	rlcf	i2___lwmod@divisor,f,c
 20211  00417A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20212  00417C  2A05               	incf	i2___lwmod@counter,f,c
 20213  00417E                     i2l5382:
 20214  00417E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20215  004180  D7FA               	goto	i2l5380
 20216  004182                     i2l5384:
 20217  004182  5003               	movf	i2___lwmod@divisor,w,c
 20218  004184  5C01               	subwf	i2___lwmod@dividend,w,c
 20219  004186  5004               	movf	i2___lwmod@divisor+1,w,c
 20220  004188  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20221  00418A  A0D8               	btfss	status,0,c
 20222  00418C  D004               	goto	i2l5388
 20223  00418E  5003               	movf	i2___lwmod@divisor,w,c
 20224  004190  5E01               	subwf	i2___lwmod@dividend,f,c
 20225  004192  5004               	movf	i2___lwmod@divisor+1,w,c
 20226  004194  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20227  004196                     i2l5388:
 20228  004196  90D8               	bcf	status,0,c
 20229  004198  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20230  00419A  3203               	rrcf	i2___lwmod@divisor,f,c
 20231  00419C  2E05               	decfsz	i2___lwmod@counter,f,c
 20232  00419E  D7F1               	goto	i2l5384
 20233  0041A0                     i2l1705:
 20234  0041A0  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20235  0041A4  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20236  0041A8  0012               	return		;funcret
 20237  0041AA                     __end_ofi2___lwmod:
 20238                           	opt stack 0
 20239                           pclatu	equ	0xFFB
 20240                           pclath	equ	0xFFA
 20241                           tblptru	equ	0xFF8
 20242                           tblptrh	equ	0xFF7
 20243                           tblptrl	equ	0xFF6
 20244                           tablat	equ	0xFF5
 20245                           prodh	equ	0xFF4
 20246                           prodl	equ	0xFF3
 20247                           intcon	equ	0xFF2
 20248                           intcon2	equ	0xFF1
 20249                           intcon3	equ	0xFF0
 20250                           indf0	equ	0xFEF
 20251                           postinc0	equ	0xFEE
 20252                           fsr0h	equ	0xFEA
 20253                           fsr0l	equ	0xFE9
 20254                           wreg	equ	0xFE8
 20255                           postdec1	equ	0xFE5
 20256                           fsr1h	equ	0xFE2
 20257                           fsr1l	equ	0xFE1
 20258                           indf2	equ	0xFDF
 20259                           postinc2	equ	0xFDE
 20260                           postdec2	equ	0xFDD
 20261                           fsr2h	equ	0xFDA
 20262                           fsr2l	equ	0xFD9
 20263                           status	equ	0xFD8
 20264                           
 20265 ;; *************** function i2___lwdiv *****************
 20266 ;; Defined at:
 20267 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20268 ;; Parameters:    Size  Location     Type
 20269 ;;  dividend        2    5[COMRAM] unsigned int 
 20270 ;;  divisor         2    7[COMRAM] unsigned int 
 20271 ;; Auto vars:     Size  Location     Type
 20272 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20273 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20274 ;; Return value:  Size  Location     Type
 20275 ;;                  2    5[COMRAM] unsigned int 
 20276 ;; Registers used:
 20277 ;;		wreg, status,2, status,0
 20278 ;; Tracked objects:
 20279 ;;		On entry : 0/0
 20280 ;;		On exit  : 0/0
 20281 ;;		Unchanged: 0/0
 20282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20284 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20286 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20287 ;;Total ram usage:        7 bytes
 20288 ;; Hardware stack levels used:    1
 20289 ;; This function calls:
 20290 ;;		Nothing
 20291 ;; This function is called by:
 20292 ;;		_printSortTimer
 20293 ;;		i2_printf
 20294 ;; This function uses a non-reentrant model
 20295 ;;
 20296                           
 20297                           	psect	text82
 20298  003F9C                     __ptext82:
 20299                           	opt stack 0
 20300  003F9C                     i2___lwdiv:
 20301                           	opt stack 20
 20302                           
 20303                           ;incstack = 0
 20304  003F9C  0E00               	movlw	0
 20305  003F9E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20306  003FA0  0E00               	movlw	0
 20307  003FA2  6E0A               	movwf	i2___lwdiv@quotient,c
 20308  003FA4  5008               	movf	i2___lwdiv@divisor,w,c
 20309  003FA6  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20310  003FA8  B4D8               	btfsc	status,2,c
 20311  003FAA  D01C               	goto	i2l1695
 20312  003FAC  0E01               	movlw	1
 20313  003FAE  6E0C               	movwf	i2___lwdiv@counter,c
 20314  003FB0  D004               	goto	i2l5362
 20315  003FB2                     i2l5360:
 20316  003FB2  90D8               	bcf	status,0,c
 20317  003FB4  3608               	rlcf	i2___lwdiv@divisor,f,c
 20318  003FB6  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20319  003FB8  2A0C               	incf	i2___lwdiv@counter,f,c
 20320  003FBA                     i2l5362:
 20321  003FBA  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20322  003FBC  D7FA               	goto	i2l5360
 20323  003FBE                     i2l5364:
 20324  003FBE  90D8               	bcf	status,0,c
 20325  003FC0  360A               	rlcf	i2___lwdiv@quotient,f,c
 20326  003FC2  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20327  003FC4  5008               	movf	i2___lwdiv@divisor,w,c
 20328  003FC6  5C06               	subwf	i2___lwdiv@dividend,w,c
 20329  003FC8  5009               	movf	i2___lwdiv@divisor+1,w,c
 20330  003FCA  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20331  003FCC  A0D8               	btfss	status,0,c
 20332  003FCE  D005               	goto	i2l5372
 20333  003FD0  5008               	movf	i2___lwdiv@divisor,w,c
 20334  003FD2  5E06               	subwf	i2___lwdiv@dividend,f,c
 20335  003FD4  5009               	movf	i2___lwdiv@divisor+1,w,c
 20336  003FD6  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20337  003FD8  800A               	bsf	i2___lwdiv@quotient,0,c
 20338  003FDA                     i2l5372:
 20339  003FDA  90D8               	bcf	status,0,c
 20340  003FDC  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20341  003FDE  3208               	rrcf	i2___lwdiv@divisor,f,c
 20342  003FE0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20343  003FE2  D7ED               	goto	i2l5364
 20344  003FE4                     i2l1695:
 20345  003FE4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20346  003FE8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20347  003FEC  0012               	return		;funcret
 20348  003FEE                     __end_ofi2___lwdiv:
 20349                           	opt stack 0
 20350                           pclatu	equ	0xFFB
 20351                           pclath	equ	0xFFA
 20352                           tblptru	equ	0xFF8
 20353                           tblptrh	equ	0xFF7
 20354                           tblptrl	equ	0xFF6
 20355                           tablat	equ	0xFF5
 20356                           prodh	equ	0xFF4
 20357                           prodl	equ	0xFF3
 20358                           intcon	equ	0xFF2
 20359                           intcon2	equ	0xFF1
 20360                           intcon3	equ	0xFF0
 20361                           indf0	equ	0xFEF
 20362                           postinc0	equ	0xFEE
 20363                           fsr0h	equ	0xFEA
 20364                           fsr0l	equ	0xFE9
 20365                           wreg	equ	0xFE8
 20366                           postdec1	equ	0xFE5
 20367                           fsr1h	equ	0xFE2
 20368                           fsr1l	equ	0xFE1
 20369                           indf2	equ	0xFDF
 20370                           postinc2	equ	0xFDE
 20371                           postdec2	equ	0xFDD
 20372                           fsr2h	equ	0xFDA
 20373                           fsr2l	equ	0xFD9
 20374                           status	equ	0xFD8
 20375                           
 20376 ;; *************** function i2_lcdInst *****************
 20377 ;; Defined at:
 20378 ;;		line 15 in file "lcd.c"
 20379 ;; Parameters:    Size  Location     Type
 20380 ;;  data            1    wreg     unsigned char 
 20381 ;; Auto vars:     Size  Location     Type
 20382 ;;  data            1    2[COMRAM] unsigned char 
 20383 ;; Return value:  Size  Location     Type
 20384 ;;                  1    wreg      void 
 20385 ;; Registers used:
 20386 ;;		wreg, status,2, status,0, cstack
 20387 ;; Tracked objects:
 20388 ;;		On entry : 0/0
 20389 ;;		On exit  : 0/0
 20390 ;;		Unchanged: 0/0
 20391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20396 ;;Total ram usage:        1 bytes
 20397 ;; Hardware stack levels used:    1
 20398 ;; Hardware stack levels required when called:    1
 20399 ;; This function calls:
 20400 ;;		i2_lcdNibble
 20401 ;; This function is called by:
 20402 ;;		_change_state_to_menu_11
 20403 ;;		_change_state_to_menu_23
 20404 ;;		_change_state_to_logs_11
 20405 ;;		_change_state_to_logs_12
 20406 ;;		_change_state_to_logs_22
 20407 ;;		_change_state_to_logs_23
 20408 ;;		_change_state_to_logs_33
 20409 ;;		_change_state_to_logs_34
 20410 ;;		_printSortTimer
 20411 ;;		i2_change_state_to_menu_start
 20412 ;;		i2_change_state_to_menu_12
 20413 ;;		i2_change_state_to_menu_22
 20414 ;;		i2_printRTC
 20415 ;; This function uses a non-reentrant model
 20416 ;;
 20417                           
 20418                           	psect	text83
 20419  004722                     __ptext83:
 20420                           	opt stack 0
 20421  004722                     i2_lcdInst:
 20422                           	opt stack 19
 20423                           
 20424                           ;incstack = 0
 20425                           ;i2lcdInst@data stored from wreg
 20426  004722  6E03               	movwf	i2lcdInst@data,c
 20427                           
 20428                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20429  004724  948C               	bcf	3980,2,c	;volatile
 20430                           
 20431                           ;lcd.c: 17: lcdNibble(data);
 20432  004726  5003               	movf	i2lcdInst@data,w,c
 20433  004728  ECA3  F01F         	call	i2_lcdNibble
 20434  00472C  0012               	return		;funcret
 20435  00472E                     __end_ofi2_lcdInst:
 20436                           	opt stack 0
 20437                           pclatu	equ	0xFFB
 20438                           pclath	equ	0xFFA
 20439                           tblptru	equ	0xFF8
 20440                           tblptrh	equ	0xFF7
 20441                           tblptrl	equ	0xFF6
 20442                           tablat	equ	0xFF5
 20443                           prodh	equ	0xFF4
 20444                           prodl	equ	0xFF3
 20445                           intcon	equ	0xFF2
 20446                           intcon2	equ	0xFF1
 20447                           intcon3	equ	0xFF0
 20448                           indf0	equ	0xFEF
 20449                           postinc0	equ	0xFEE
 20450                           fsr0h	equ	0xFEA
 20451                           fsr0l	equ	0xFE9
 20452                           wreg	equ	0xFE8
 20453                           postdec1	equ	0xFE5
 20454                           fsr1h	equ	0xFE2
 20455                           fsr1l	equ	0xFE1
 20456                           indf2	equ	0xFDF
 20457                           postinc2	equ	0xFDE
 20458                           postdec2	equ	0xFDD
 20459                           fsr2h	equ	0xFDA
 20460                           fsr2l	equ	0xFD9
 20461                           status	equ	0xFD8
 20462                           
 20463 ;; *************** function i2_lcdNibble *****************
 20464 ;; Defined at:
 20465 ;;		line 25 in file "lcd.c"
 20466 ;; Parameters:    Size  Location     Type
 20467 ;;  data            1    wreg     unsigned char 
 20468 ;; Auto vars:     Size  Location     Type
 20469 ;;  data            1    1[COMRAM] unsigned char 
 20470 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20471 ;; Return value:  Size  Location     Type
 20472 ;;                  1    wreg      void 
 20473 ;; Registers used:
 20474 ;;		wreg, status,2, status,0
 20475 ;; Tracked objects:
 20476 ;;		On entry : 0/0
 20477 ;;		On exit  : 0/0
 20478 ;;		Unchanged: 0/0
 20479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20481 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20484 ;;Total ram usage:        2 bytes
 20485 ;; Hardware stack levels used:    1
 20486 ;; This function calls:
 20487 ;;		Nothing
 20488 ;; This function is called by:
 20489 ;;		i2_lcdInst
 20490 ;;		i2_putch
 20491 ;; This function uses a non-reentrant model
 20492 ;;
 20493                           
 20494                           	psect	text84
 20495  003F46                     __ptext84:
 20496                           	opt stack 0
 20497  003F46                     i2_lcdNibble:
 20498                           	opt stack 19
 20499                           
 20500                           ;incstack = 0
 20501                           ;i2lcdNibble@data stored from wreg
 20502  003F46  6E02               	movwf	i2lcdNibble@data,c
 20503                           
 20504                           ;lcd.c: 27: char temp = data & 0xF0;
 20505  003F48  5002               	movf	i2lcdNibble@data,w,c
 20506  003F4A  0BF0               	andlw	240
 20507  003F4C  6E01               	movwf	i2lcdNibble@temp,c
 20508                           
 20509                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20510  003F4E  508C               	movf	3980,w,c	;volatile
 20511  003F50  0B0F               	andlw	15
 20512  003F52  6E8C               	movwf	3980,c	;volatile
 20513                           
 20514                           ;lcd.c: 29: LATD = temp | LATD;
 20515  003F54  5001               	movf	i2lcdNibble@temp,w,c
 20516  003F56  108C               	iorwf	3980,w,c	;volatile
 20517  003F58  6E8C               	movwf	3980,c	;volatile
 20518                           
 20519                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20520  003F5A  868C               	bsf	3980,3,c	;volatile
 20521                           
 20522                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20523  003F5C  0E42               	movlw	66
 20524  003F5E                     i2u821_47:
 20525  003F5E  2EE8               	decfsz	wreg,f,c
 20526  003F60  D7FE               	bra	i2u821_47
 20527  003F62  D000               	nop2	
 20528                           
 20529                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20530  003F64  968C               	bcf	3980,3,c	;volatile
 20531                           
 20532                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20533  003F66  0E42               	movlw	66
 20534  003F68                     i2u822_47:
 20535  003F68  2EE8               	decfsz	wreg,f,c
 20536  003F6A  D7FE               	bra	i2u822_47
 20537  003F6C  D000               	nop2	
 20538                           
 20539                           ;lcd.c: 36: data = data << 4;
 20540  003F6E  3802               	swapf	i2lcdNibble@data,w,c
 20541  003F70  0BF0               	andlw	240
 20542  003F72  6E02               	movwf	i2lcdNibble@data,c
 20543                           
 20544                           ;lcd.c: 38: temp = data & 0xF0;
 20545  003F74  5002               	movf	i2lcdNibble@data,w,c
 20546  003F76  0BF0               	andlw	240
 20547  003F78  6E01               	movwf	i2lcdNibble@temp,c
 20548                           
 20549                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20550  003F7A  508C               	movf	3980,w,c	;volatile
 20551  003F7C  0B0F               	andlw	15
 20552  003F7E  6E8C               	movwf	3980,c	;volatile
 20553                           
 20554                           ;lcd.c: 40: LATD = temp | LATD;
 20555  003F80  5001               	movf	i2lcdNibble@temp,w,c
 20556  003F82  108C               	iorwf	3980,w,c	;volatile
 20557  003F84  6E8C               	movwf	3980,c	;volatile
 20558                           
 20559                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20560  003F86  868C               	bsf	3980,3,c	;volatile
 20561                           
 20562                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20563  003F88  0E42               	movlw	66
 20564  003F8A                     i2u823_47:
 20565  003F8A  2EE8               	decfsz	wreg,f,c
 20566  003F8C  D7FE               	bra	i2u823_47
 20567  003F8E  D000               	nop2	
 20568                           
 20569                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20570  003F90  968C               	bcf	3980,3,c	;volatile
 20571                           
 20572                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20573  003F92  0E42               	movlw	66
 20574  003F94                     i2u824_47:
 20575  003F94  2EE8               	decfsz	wreg,f,c
 20576  003F96  D7FE               	bra	i2u824_47
 20577  003F98  D000               	nop2	
 20578  003F9A  0012               	return		;funcret
 20579  003F9C                     __end_ofi2_lcdNibble:
 20580                           	opt stack 0
 20581                           pclatu	equ	0xFFB
 20582                           pclath	equ	0xFFA
 20583                           tblptru	equ	0xFF8
 20584                           tblptrh	equ	0xFF7
 20585                           tblptrl	equ	0xFF6
 20586                           tablat	equ	0xFF5
 20587                           prodh	equ	0xFF4
 20588                           prodl	equ	0xFF3
 20589                           intcon	equ	0xFF2
 20590                           intcon2	equ	0xFF1
 20591                           intcon3	equ	0xFF0
 20592                           indf0	equ	0xFEF
 20593                           postinc0	equ	0xFEE
 20594                           fsr0h	equ	0xFEA
 20595                           fsr0l	equ	0xFE9
 20596                           wreg	equ	0xFE8
 20597                           postdec1	equ	0xFE5
 20598                           fsr1h	equ	0xFE2
 20599                           fsr1l	equ	0xFE1
 20600                           indf2	equ	0xFDF
 20601                           postinc2	equ	0xFDE
 20602                           postdec2	equ	0xFDD
 20603                           fsr2h	equ	0xFDA
 20604                           fsr2l	equ	0xFD9
 20605                           status	equ	0xFD8
 20606                           
 20607 ;; *************** function i2_getRTC *****************
 20608 ;; Defined at:
 20609 ;;		line 44 in file "RTC.c"
 20610 ;; Parameters:    Size  Location     Type
 20611 ;;		None
 20612 ;; Auto vars:     Size  Location     Type
 20613 ;;  getRTC          2    3[COMRAM] int 
 20614 ;; Return value:  Size  Location     Type
 20615 ;;                  1    wreg      void 
 20616 ;; Registers used:
 20617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20618 ;; Tracked objects:
 20619 ;;		On entry : 0/0
 20620 ;;		On exit  : 0/0
 20621 ;;		Unchanged: 0/0
 20622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20627 ;;Total ram usage:        2 bytes
 20628 ;; Hardware stack levels used:    1
 20629 ;; Hardware stack levels required when called:    2
 20630 ;; This function calls:
 20631 ;;		i2_I2C_Master_Read
 20632 ;;		i2_I2C_Master_Start
 20633 ;;		i2_I2C_Master_Stop
 20634 ;;		i2_I2C_Master_Write
 20635 ;; This function is called by:
 20636 ;;		_printSortTimer
 20637 ;;		i2_printRTC
 20638 ;; This function uses a non-reentrant model
 20639 ;;
 20640                           
 20641                           	psect	text85
 20642  003C8A                     __ptext85:
 20643                           	opt stack 0
 20644  003C8A                     i2_getRTC:
 20645                           	opt stack 18
 20646                           
 20647                           ;RTC.c: 48: I2C_Master_Start();
 20648                           
 20649                           ;incstack = 0
 20650  003C8A  ECB1  F023         	call	i2_I2C_Master_Start	;wreg free
 20651                           
 20652                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20653  003C8E  0E00               	movlw	0
 20654  003C90  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20655  003C92  0ED0               	movlw	208
 20656  003C94  6E02               	movwf	i2I2C_Master_Write@d,c
 20657  003C96  EC9C  F023         	call	i2_I2C_Master_Write	;wreg free
 20658                           
 20659                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20660  003C9A  0E00               	movlw	0
 20661  003C9C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20662  003C9E  0E00               	movlw	0
 20663  003CA0  6E02               	movwf	i2I2C_Master_Write@d,c
 20664  003CA2  EC9C  F023         	call	i2_I2C_Master_Write	;wreg free
 20665                           
 20666                           ;RTC.c: 51: I2C_Master_Stop();
 20667  003CA6  ECAD  F023         	call	i2_I2C_Master_Stop	;wreg free
 20668                           
 20669                           ;RTC.c: 54: I2C_Master_Start();
 20670  003CAA  ECB1  F023         	call	i2_I2C_Master_Start	;wreg free
 20671                           
 20672                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20673  003CAE  0E00               	movlw	0
 20674  003CB0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20675  003CB2  0ED1               	movlw	209
 20676  003CB4  6E02               	movwf	i2I2C_Master_Write@d,c
 20677  003CB6  EC9C  F023         	call	i2_I2C_Master_Write	;wreg free
 20678                           
 20679                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20680  003CBA  0E00               	movlw	0
 20681  003CBC  6E05               	movwf	i2getRTC@i+1,c
 20682  003CBE  0E00               	movlw	0
 20683  003CC0  6E04               	movwf	i2getRTC@i,c
 20684  003CC2                     i2l5612:
 20685  003CC2  BE05               	btfsc	i2getRTC@i+1,7,c
 20686  003CC4  D006               	goto	i2l5616
 20687  003CC6  5005               	movf	i2getRTC@i+1,w,c
 20688  003CC8  E111               	bnz	i2l5622
 20689  003CCA  0E06               	movlw	6
 20690  003CCC  5C04               	subwf	i2getRTC@i,w,c
 20691  003CCE  B0D8               	btfsc	status,0,c
 20692  003CD0  D00D               	goto	i2l5622
 20693  003CD2                     i2l5616:
 20694                           
 20695                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20696  003CD2  0E24               	movlw	low _time
 20697  003CD4  2404               	addwf	i2getRTC@i,w,c
 20698  003CD6  6ED9               	movwf	fsr2l,c
 20699  003CD8  0E01               	movlw	high _time
 20700  003CDA  2005               	addwfc	i2getRTC@i+1,w,c
 20701  003CDC  6EDA               	movwf	fsr2h,c
 20702  003CDE  0E01               	movlw	1
 20703  003CE0  ECDE  F022         	call	i2_I2C_Master_Read
 20704  003CE4  6EDF               	movwf	indf2,c
 20705  003CE6  4A04               	infsnz	i2getRTC@i,f,c
 20706  003CE8  2A05               	incf	i2getRTC@i+1,f,c
 20707  003CEA  D7EB               	goto	i2l5612
 20708  003CEC                     i2l5622:
 20709                           
 20710                           ;RTC.c: 58: }
 20711                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20712  003CEC  0E00               	movlw	0
 20713  003CEE  ECDE  F022         	call	i2_I2C_Master_Read
 20714  003CF2  0101               	movlb	1	; () banked
 20715  003CF4  6F2A               	movwf	(_time+6)& (0+255),b
 20716                           
 20717                           ;RTC.c: 60: I2C_Master_Stop();
 20718  003CF6  ECAD  F023         	call	i2_I2C_Master_Stop	;wreg free
 20719  003CFA  0012               	return		;funcret
 20720  003CFC                     __end_ofi2_getRTC:
 20721                           	opt stack 0
 20722                           pclatu	equ	0xFFB
 20723                           pclath	equ	0xFFA
 20724                           tblptru	equ	0xFF8
 20725                           tblptrh	equ	0xFF7
 20726                           tblptrl	equ	0xFF6
 20727                           tablat	equ	0xFF5
 20728                           prodh	equ	0xFF4
 20729                           prodl	equ	0xFF3
 20730                           intcon	equ	0xFF2
 20731                           intcon2	equ	0xFF1
 20732                           intcon3	equ	0xFF0
 20733                           indf0	equ	0xFEF
 20734                           postinc0	equ	0xFEE
 20735                           fsr0h	equ	0xFEA
 20736                           fsr0l	equ	0xFE9
 20737                           wreg	equ	0xFE8
 20738                           postdec1	equ	0xFE5
 20739                           fsr1h	equ	0xFE2
 20740                           fsr1l	equ	0xFE1
 20741                           indf2	equ	0xFDF
 20742                           postinc2	equ	0xFDE
 20743                           postdec2	equ	0xFDD
 20744                           fsr2h	equ	0xFDA
 20745                           fsr2l	equ	0xFD9
 20746                           status	equ	0xFD8
 20747                           
 20748 ;; *************** function i2_I2C_Master_Write *****************
 20749 ;; Defined at:
 20750 ;;		line 49 in file "I2C.c"
 20751 ;; Parameters:    Size  Location     Type
 20752 ;;  d               2    1[COMRAM] unsigned int 
 20753 ;; Auto vars:     Size  Location     Type
 20754 ;;		None
 20755 ;; Return value:  Size  Location     Type
 20756 ;;                  1    wreg      void 
 20757 ;; Registers used:
 20758 ;;		wreg, status,2, status,0, cstack
 20759 ;; Tracked objects:
 20760 ;;		On entry : 0/0
 20761 ;;		On exit  : 0/0
 20762 ;;		Unchanged: 0/0
 20763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20764 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20768 ;;Total ram usage:        2 bytes
 20769 ;; Hardware stack levels used:    1
 20770 ;; Hardware stack levels required when called:    1
 20771 ;; This function calls:
 20772 ;;		i2_I2C_Master_Wait
 20773 ;; This function is called by:
 20774 ;;		i2_getRTC
 20775 ;; This function uses a non-reentrant model
 20776 ;;
 20777                           
 20778                           	psect	text86
 20779  004738                     __ptext86:
 20780                           	opt stack 0
 20781  004738                     i2_I2C_Master_Write:
 20782                           	opt stack 18
 20783                           
 20784                           ;I2C.c: 51: I2C_Master_Wait();
 20785                           
 20786                           ;incstack = 0
 20787  004738  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 20788                           
 20789                           ;I2C.c: 52: SSPBUF = d;
 20790  00473C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20791  004740  0012               	return		;funcret
 20792  004742                     __end_ofi2_I2C_Master_Write:
 20793                           	opt stack 0
 20794                           pclatu	equ	0xFFB
 20795                           pclath	equ	0xFFA
 20796                           tblptru	equ	0xFF8
 20797                           tblptrh	equ	0xFF7
 20798                           tblptrl	equ	0xFF6
 20799                           tablat	equ	0xFF5
 20800                           prodh	equ	0xFF4
 20801                           prodl	equ	0xFF3
 20802                           intcon	equ	0xFF2
 20803                           intcon2	equ	0xFF1
 20804                           intcon3	equ	0xFF0
 20805                           indf0	equ	0xFEF
 20806                           postinc0	equ	0xFEE
 20807                           fsr0h	equ	0xFEA
 20808                           fsr0l	equ	0xFE9
 20809                           wreg	equ	0xFE8
 20810                           postdec1	equ	0xFE5
 20811                           fsr1h	equ	0xFE2
 20812                           fsr1l	equ	0xFE1
 20813                           indf2	equ	0xFDF
 20814                           postinc2	equ	0xFDE
 20815                           postdec2	equ	0xFDD
 20816                           fsr2h	equ	0xFDA
 20817                           fsr2l	equ	0xFD9
 20818                           status	equ	0xFD8
 20819                           
 20820 ;; *************** function i2_I2C_Master_Stop *****************
 20821 ;; Defined at:
 20822 ;;		line 43 in file "I2C.c"
 20823 ;; Parameters:    Size  Location     Type
 20824 ;;		None
 20825 ;; Auto vars:     Size  Location     Type
 20826 ;;		None
 20827 ;; Return value:  Size  Location     Type
 20828 ;;                  1    wreg      void 
 20829 ;; Registers used:
 20830 ;;		wreg, status,2, status,0, cstack
 20831 ;; Tracked objects:
 20832 ;;		On entry : 0/0
 20833 ;;		On exit  : 0/0
 20834 ;;		Unchanged: 0/0
 20835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20840 ;;Total ram usage:        0 bytes
 20841 ;; Hardware stack levels used:    1
 20842 ;; Hardware stack levels required when called:    1
 20843 ;; This function calls:
 20844 ;;		i2_I2C_Master_Wait
 20845 ;; This function is called by:
 20846 ;;		i2_getRTC
 20847 ;; This function uses a non-reentrant model
 20848 ;;
 20849                           
 20850                           	psect	text87
 20851  00475A                     __ptext87:
 20852                           	opt stack 0
 20853  00475A                     i2_I2C_Master_Stop:
 20854                           	opt stack 18
 20855                           
 20856                           ;I2C.c: 45: I2C_Master_Wait();
 20857                           
 20858                           ;incstack = 0
 20859  00475A  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 20860                           
 20861                           ;I2C.c: 46: PEN = 1;
 20862  00475E  84C5               	bsf	4037,2,c	;volatile
 20863  004760  0012               	return		;funcret
 20864  004762                     __end_ofi2_I2C_Master_Stop:
 20865                           	opt stack 0
 20866                           pclatu	equ	0xFFB
 20867                           pclath	equ	0xFFA
 20868                           tblptru	equ	0xFF8
 20869                           tblptrh	equ	0xFF7
 20870                           tblptrl	equ	0xFF6
 20871                           tablat	equ	0xFF5
 20872                           prodh	equ	0xFF4
 20873                           prodl	equ	0xFF3
 20874                           intcon	equ	0xFF2
 20875                           intcon2	equ	0xFF1
 20876                           intcon3	equ	0xFF0
 20877                           indf0	equ	0xFEF
 20878                           postinc0	equ	0xFEE
 20879                           fsr0h	equ	0xFEA
 20880                           fsr0l	equ	0xFE9
 20881                           wreg	equ	0xFE8
 20882                           postdec1	equ	0xFE5
 20883                           fsr1h	equ	0xFE2
 20884                           fsr1l	equ	0xFE1
 20885                           indf2	equ	0xFDF
 20886                           postinc2	equ	0xFDE
 20887                           postdec2	equ	0xFDD
 20888                           fsr2h	equ	0xFDA
 20889                           fsr2l	equ	0xFD9
 20890                           status	equ	0xFD8
 20891                           
 20892 ;; *************** function i2_I2C_Master_Start *****************
 20893 ;; Defined at:
 20894 ;;		line 31 in file "I2C.c"
 20895 ;; Parameters:    Size  Location     Type
 20896 ;;		None
 20897 ;; Auto vars:     Size  Location     Type
 20898 ;;		None
 20899 ;; Return value:  Size  Location     Type
 20900 ;;                  1    wreg      void 
 20901 ;; Registers used:
 20902 ;;		wreg, status,2, status,0, cstack
 20903 ;; Tracked objects:
 20904 ;;		On entry : 0/0
 20905 ;;		On exit  : 0/0
 20906 ;;		Unchanged: 0/0
 20907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;Total ram usage:        0 bytes
 20913 ;; Hardware stack levels used:    1
 20914 ;; Hardware stack levels required when called:    1
 20915 ;; This function calls:
 20916 ;;		i2_I2C_Master_Wait
 20917 ;; This function is called by:
 20918 ;;		i2_getRTC
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           	psect	text88
 20923  004762                     __ptext88:
 20924                           	opt stack 0
 20925  004762                     i2_I2C_Master_Start:
 20926                           	opt stack 18
 20927                           
 20928                           ;I2C.c: 33: I2C_Master_Wait();
 20929                           
 20930                           ;incstack = 0
 20931  004762  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 20932                           
 20933                           ;I2C.c: 34: SEN = 1;
 20934  004766  80C5               	bsf	4037,0,c	;volatile
 20935  004768  0012               	return		;funcret
 20936  00476A                     __end_ofi2_I2C_Master_Start:
 20937                           	opt stack 0
 20938                           pclatu	equ	0xFFB
 20939                           pclath	equ	0xFFA
 20940                           tblptru	equ	0xFF8
 20941                           tblptrh	equ	0xFF7
 20942                           tblptrl	equ	0xFF6
 20943                           tablat	equ	0xFF5
 20944                           prodh	equ	0xFF4
 20945                           prodl	equ	0xFF3
 20946                           intcon	equ	0xFF2
 20947                           intcon2	equ	0xFF1
 20948                           intcon3	equ	0xFF0
 20949                           indf0	equ	0xFEF
 20950                           postinc0	equ	0xFEE
 20951                           fsr0h	equ	0xFEA
 20952                           fsr0l	equ	0xFE9
 20953                           wreg	equ	0xFE8
 20954                           postdec1	equ	0xFE5
 20955                           fsr1h	equ	0xFE2
 20956                           fsr1l	equ	0xFE1
 20957                           indf2	equ	0xFDF
 20958                           postinc2	equ	0xFDE
 20959                           postdec2	equ	0xFDD
 20960                           fsr2h	equ	0xFDA
 20961                           fsr2l	equ	0xFD9
 20962                           status	equ	0xFD8
 20963                           
 20964 ;; *************** function i2_I2C_Master_Read *****************
 20965 ;; Defined at:
 20966 ;;		line 55 in file "I2C.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;  a               1    wreg     unsigned char 
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;  a               1    1[COMRAM] unsigned char 
 20971 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20972 ;; Return value:  Size  Location     Type
 20973 ;;                  1    wreg      unsigned char 
 20974 ;; Registers used:
 20975 ;;		wreg, status,2, status,0, cstack
 20976 ;; Tracked objects:
 20977 ;;		On entry : 0/0
 20978 ;;		On exit  : 0/0
 20979 ;;		Unchanged: 0/0
 20980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20982 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20985 ;;Total ram usage:        2 bytes
 20986 ;; Hardware stack levels used:    1
 20987 ;; Hardware stack levels required when called:    1
 20988 ;; This function calls:
 20989 ;;		i2_I2C_Master_Wait
 20990 ;; This function is called by:
 20991 ;;		i2_getRTC
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           	psect	text89
 20996  0045BC                     __ptext89:
 20997                           	opt stack 0
 20998  0045BC                     i2_I2C_Master_Read:
 20999                           	opt stack 18
 21000                           
 21001                           ;incstack = 0
 21002                           ;i2I2C_Master_Read@a stored from wreg
 21003  0045BC  6E02               	movwf	i2I2C_Master_Read@a,c
 21004                           
 21005                           ;I2C.c: 57: unsigned char temp;
 21006                           ;I2C.c: 58: I2C_Master_Wait();
 21007  0045BE  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 21008                           
 21009                           ;I2C.c: 59: RCEN = 1;
 21010  0045C2  86C5               	bsf	4037,3,c	;volatile
 21011                           
 21012                           ;I2C.c: 60: I2C_Master_Wait();
 21013  0045C4  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 21014                           
 21015                           ;I2C.c: 61: temp = SSPBUF;
 21016  0045C8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21017                           
 21018                           ;I2C.c: 62: I2C_Master_Wait();
 21019  0045CC  EC72  F023         	call	i2_I2C_Master_Wait	;wreg free
 21020                           
 21021                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21022  0045D0  5002               	movf	i2I2C_Master_Read@a,w,c
 21023  0045D2  A4D8               	btfss	status,2,c
 21024  0045D4  D002               	goto	i2u368_40
 21025  0045D6  8AC5               	bsf	4037,5,c	;volatile
 21026  0045D8  D001               	goto	i2l5326
 21027  0045DA                     i2u368_40:
 21028  0045DA  9AC5               	bcf	4037,5,c	;volatile
 21029  0045DC                     i2l5326:
 21030                           
 21031                           ;I2C.c: 64: ACKEN = 1;
 21032  0045DC  88C5               	bsf	4037,4,c	;volatile
 21033                           
 21034                           ;I2C.c: 65: return temp;
 21035  0045DE  5003               	movf	i2I2C_Master_Read@temp,w,c
 21036  0045E0  0012               	return	
 21037  0045E2                     __end_ofi2_I2C_Master_Read:
 21038                           	opt stack 0
 21039                           pclatu	equ	0xFFB
 21040                           pclath	equ	0xFFA
 21041                           tblptru	equ	0xFF8
 21042                           tblptrh	equ	0xFF7
 21043                           tblptrl	equ	0xFF6
 21044                           tablat	equ	0xFF5
 21045                           prodh	equ	0xFF4
 21046                           prodl	equ	0xFF3
 21047                           intcon	equ	0xFF2
 21048                           intcon2	equ	0xFF1
 21049                           intcon3	equ	0xFF0
 21050                           indf0	equ	0xFEF
 21051                           postinc0	equ	0xFEE
 21052                           fsr0h	equ	0xFEA
 21053                           fsr0l	equ	0xFE9
 21054                           wreg	equ	0xFE8
 21055                           postdec1	equ	0xFE5
 21056                           fsr1h	equ	0xFE2
 21057                           fsr1l	equ	0xFE1
 21058                           indf2	equ	0xFDF
 21059                           postinc2	equ	0xFDE
 21060                           postdec2	equ	0xFDD
 21061                           fsr2h	equ	0xFDA
 21062                           fsr2l	equ	0xFD9
 21063                           status	equ	0xFD8
 21064                           
 21065 ;; *************** function i2_I2C_Master_Wait *****************
 21066 ;; Defined at:
 21067 ;;		line 26 in file "I2C.c"
 21068 ;; Parameters:    Size  Location     Type
 21069 ;;		None
 21070 ;; Auto vars:     Size  Location     Type
 21071 ;;		None
 21072 ;; Return value:  Size  Location     Type
 21073 ;;                  1    wreg      void 
 21074 ;; Registers used:
 21075 ;;		wreg, status,2, status,0
 21076 ;; Tracked objects:
 21077 ;;		On entry : 0/0
 21078 ;;		On exit  : 0/0
 21079 ;;		Unchanged: 0/0
 21080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;Total ram usage:        1 bytes
 21086 ;; Hardware stack levels used:    1
 21087 ;; This function calls:
 21088 ;;		Nothing
 21089 ;; This function is called by:
 21090 ;;		i2_I2C_Master_Start
 21091 ;;		i2_I2C_Master_Stop
 21092 ;;		i2_I2C_Master_Write
 21093 ;;		i2_I2C_Master_Read
 21094 ;; This function uses a non-reentrant model
 21095 ;;
 21096                           
 21097                           	psect	text90
 21098  0046E4                     __ptext90:
 21099                           	opt stack 0
 21100  0046E4                     i2_I2C_Master_Wait:
 21101                           	opt stack 18
 21102  0046E4                     i2l66:
 21103  0046E4  B4C7               	btfsc	4039,2,c	;volatile
 21104  0046E6  D7FE               	goto	i2l66
 21105  0046E8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21106  0046EC  0E1F               	movlw	31
 21107  0046EE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21108  0046F0  B4D8               	btfsc	status,2,c
 21109  0046F2  0012               	return	
 21110  0046F4  D7F7               	goto	i2l66
 21111  0046F6                     __end_ofi2_I2C_Master_Wait:
 21112                           	opt stack 0
 21113                           pclatu	equ	0xFFB
 21114                           pclath	equ	0xFFA
 21115                           tblptru	equ	0xFF8
 21116                           tblptrh	equ	0xFF7
 21117                           tblptrl	equ	0xFF6
 21118                           tablat	equ	0xFF5
 21119                           prodh	equ	0xFF4
 21120                           prodl	equ	0xFF3
 21121                           intcon	equ	0xFF2
 21122                           intcon2	equ	0xFF1
 21123                           intcon3	equ	0xFF0
 21124                           indf0	equ	0xFEF
 21125                           postinc0	equ	0xFEE
 21126                           fsr0h	equ	0xFEA
 21127                           fsr0l	equ	0xFE9
 21128                           wreg	equ	0xFE8
 21129                           postdec1	equ	0xFE5
 21130                           fsr1h	equ	0xFE2
 21131                           fsr1l	equ	0xFE1
 21132                           indf2	equ	0xFDF
 21133                           postinc2	equ	0xFDE
 21134                           postdec2	equ	0xFDD
 21135                           fsr2h	equ	0xFDA
 21136                           fsr2l	equ	0xFD9
 21137                           status	equ	0xFD8
 21138                           pclatu	equ	0xFFB
 21139                           pclath	equ	0xFFA
 21140                           tblptru	equ	0xFF8
 21141                           tblptrh	equ	0xFF7
 21142                           tblptrl	equ	0xFF6
 21143                           tablat	equ	0xFF5
 21144                           prodh	equ	0xFF4
 21145                           prodl	equ	0xFF3
 21146                           intcon	equ	0xFF2
 21147                           intcon2	equ	0xFF1
 21148                           intcon3	equ	0xFF0
 21149                           indf0	equ	0xFEF
 21150                           postinc0	equ	0xFEE
 21151                           fsr0h	equ	0xFEA
 21152                           fsr0l	equ	0xFE9
 21153                           wreg	equ	0xFE8
 21154                           postdec1	equ	0xFE5
 21155                           fsr1h	equ	0xFE2
 21156                           fsr1l	equ	0xFE1
 21157                           indf2	equ	0xFDF
 21158                           postinc2	equ	0xFDE
 21159                           postdec2	equ	0xFDD
 21160                           fsr2h	equ	0xFDA
 21161                           fsr2l	equ	0xFD9
 21162                           status	equ	0xFD8
 21163                           
 21164                           	psect	rparam
 21165  0000                     pclatu	equ	0xFFB
 21166                           pclath	equ	0xFFA
 21167                           tblptru	equ	0xFF8
 21168                           tblptrh	equ	0xFF7
 21169                           tblptrl	equ	0xFF6
 21170                           tablat	equ	0xFF5
 21171                           prodh	equ	0xFF4
 21172                           prodl	equ	0xFF3
 21173                           intcon	equ	0xFF2
 21174                           intcon2	equ	0xFF1
 21175                           intcon3	equ	0xFF0
 21176                           indf0	equ	0xFEF
 21177                           postinc0	equ	0xFEE
 21178                           fsr0h	equ	0xFEA
 21179                           fsr0l	equ	0xFE9
 21180                           wreg	equ	0xFE8
 21181                           postdec1	equ	0xFE5
 21182                           fsr1h	equ	0xFE2
 21183                           fsr1l	equ	0xFE1
 21184                           indf2	equ	0xFDF
 21185                           postinc2	equ	0xFDE
 21186                           postdec2	equ	0xFDD
 21187                           fsr2h	equ	0xFDA
 21188                           fsr2l	equ	0xFD9
 21189                           status	equ	0xFD8
 21190                           
 21191                           	psect	temp
 21192  00007E                     btemp:
 21193                           	opt stack 0
 21194  00007E                     	ds	1
 21195  0000                     int$flags	set	btemp
 21196                           pclatu	equ	0xFFB
 21197                           pclath	equ	0xFFA
 21198                           tblptru	equ	0xFF8
 21199                           tblptrh	equ	0xFF7
 21200                           tblptrl	equ	0xFF6
 21201                           tablat	equ	0xFF5
 21202                           prodh	equ	0xFF4
 21203                           prodl	equ	0xFF3
 21204                           intcon	equ	0xFF2
 21205                           intcon2	equ	0xFF1
 21206                           intcon3	equ	0xFF0
 21207                           indf0	equ	0xFEF
 21208                           postinc0	equ	0xFEE
 21209                           fsr0h	equ	0xFEA
 21210                           fsr0l	equ	0xFE9
 21211                           wreg	equ	0xFE8
 21212                           postdec1	equ	0xFE5
 21213                           fsr1h	equ	0xFE2
 21214                           fsr1l	equ	0xFE1
 21215                           indf2	equ	0xFDF
 21216                           postinc2	equ	0xFDE
 21217                           postdec2	equ	0xFDD
 21218                           fsr2h	equ	0xFDA
 21219                           fsr2l	equ	0xFD9
 21220                           status	equ	0xFD8


Data Sizes:
    Strings     1231
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_115(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[10]), STR_111(CODE[13]), 
		 -> STR_110(CODE[18]), STR_109(CODE[18]), STR_108(CODE[17]), STR_107(CODE[15]), 
		 -> STR_106(CODE[15]), STR_105(CODE[15]), STR_104(CODE[17]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[16]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[15]), STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[11]), 
		 -> STR_90(CODE[17]), STR_89(CODE[14]), STR_88(CODE[15]), STR_87(CODE[14]), 
		 -> STR_86(CODE[10]), STR_85(CODE[9]), STR_84(CODE[10]), STR_83(CODE[16]), 
		 -> STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  176741
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20252
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15642
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              6 BANK0     10    10      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10658
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9911
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21648
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20798
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43176
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12583
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8215
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8215
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   80334
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           6     6      0    8352
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8215
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13815
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8240
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8353
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8215
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16929
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8080
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 14:06:34 2017

                                    _i 00E4                     i2_I2C_Master_Start 4762  
                   i2_I2C_Master_Write 4738                                     l66 46D0  
                                   _ID 2B8E                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0088  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 09A0  
                                  l480 38C2                                    l721 2DB8  
                                  l741 2C9E                                    l930 469C  
                                  l595 1CBC                                    l917 33F4  
                                  l783 3C50                                    l939 309C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 4378  
      __end_of_change_state_to_menu_12 421A        __end_of_change_state_to_menu_22 41E2  
      __end_of_change_state_to_menu_23 4348           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4468  
      __end_of_change_state_to_logs_12 4438        __end_of_change_state_to_logs_22 4408  
      __end_of_change_state_to_logs_23 44C4        __end_of_change_state_to_logs_33 43D8  
      __end_of_change_state_to_logs_34 43A8                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1030 324A  
                                 l1121 05E8                                   l1050 3514  
                                 l1211 3A8C                                   l1203 3A58  
                                 l1027 322A                                   l1133 0782  
                                 l1053 3518                                   l1062 21F2  
                                 l1151 3B18                                   l1160 3B44  
                                 l1072 23A6                                   l1161 3B48  
                                 l1138 0858                                   l1163 3B86  
                                 l1155 3B34                                   l1091 0126  
                                 l1059 21EE                                   l1172 392C  
                                 l1084 007C                                   l1181 3960  
                                 l1157 3B38                                   l1182 397A  
                                 l1158 3B3C                                   l1094 018C  
                                 l1159 3B40                                   l1095 01DA  
                                 l1087 0080                                   l1248 13B6  
                                 l1096 0240                                   l1097 028E  
                                 l1178 393C                                   l1194 3354  
                                 l1188 3308                                   l1705 3E26  
                                 l1642 36F4                                   l5302 3E18  
                                 l6030 3494                                   l6022 3466  
                                 l1695 3C0A                                   l5216 4504  
                                 l5240 448E                                   l6040 454C  
                                 l5410 11A4                                   l7002 081C  
                                 l5218 4516                                   l6034 349E  
                                 l6018 345C                                   l6026 347E  
                                 l5420 11E2                                   l5404 117E  
                                 l7100 32D4                                   l7020 0878  
                                 l6044 4562                                   l5510 14C8  
                                 l5502 14A4                                   l5414 11AE  
                                 l7030 08A0                                   l6150 39C0  
                                 l6070 407E                                   l5504 14AE  
                                 l5440 12A2                                   l5408 1192  
                                 l7112 3316                                   l7024 0882  
                                 l7008 0842                                   l8000 3262  
                                 l5600 36E2                                   l6160 3A02  
                                 l5274 3BBA                                   l5258 453C  
                                 l5522 150A                                   l5450 131A  
                                 l7122 333C                                   l7034 08AA  
                                 l7018 0872                                   l8010 3280  
                                 l8002 3268                                   l6154 39D6  
                                 l5276 3BC6                                   l5532 157C  
                                 l5516 14E4                                   l5452 1332  
                                 l5436 1290                                   l5428 125E  
                                 l7060 394A                                   l7132 337C  
                                 l7116 332C                                   l7028 089A  
                                 l8004 326E                                   l5540 4230  
                                 l5286 3BFC                                   l5278 3BCC  
                                 l5294 3DE2                                   l5518 14F0  
                                 l5526 151E                                   l5446 1308  
                                 l5438 129C                                   l5462 137C  
                                 l5534 1588                                   l7142 33B0  
                                 l7118 3332                                   l7038 08C2  
                                 l8006 3274                                   l8014 3286  
                                 l7310 3826                                   l7302 37F0  
                                 l5550 3AE8                                   l5296 3DEE  
                                 l5528 1524                                   l5480 140E  
                                 l5456 135E                                   l5448 1314  
                                 l8008 327A                                   l7304 37FC  
                                 l6424 2C2A                                   l5298 3DF4  
                                 l5474 13EE                                   l5458 1376  
                                 l7154 3B4C                                   l7146 33BA  
                                 l6610 23DA                                   l7250 35A8  
                                 l7306 3802                                   l7314 3834  
                                 l5546 3AD2                                   l5538 4224  
                                 l5810 1CE4                                   l5802 1C3A  
                                 l7402 0A6C                                   l6434 2C5A  
                                 l6442 2C72                                   l5492 144A  
                                 l5556 3B08                                   l5820 1D7A  
                                 l5812 1D02                                   l7412 0A92  
                                 l5574 3C3C                                   l5478 1408  
                                 l6606 23CE                                   l7262 35DC  
                                 l7318 3848                                   l5830 1E10  
                                 l5822 1D98                                   l5814 1D20  
                                 l7502 0DC2                                   l7430 0AEE  
                                 l7406 0A84                                   l5590 3688  
                                 l6470 2E40                                   l6438 2C66  
                                 l6366 2D76                                   _ADIE 007CEE  
                                 l5576 3C66                                   l7096 3A80  
                                 l6800 0434                                   l7264 35E8  
                                 l7256 35BE                                   l5824 1DB6  
                                 l5816 1D3E                                   l5808 1CC6  
                                 l7520 0E0E                                   l7512 0DEC  
                                 l7440 0B18                                   l5592 368E  
                                 l6472 2E5A                                   l6480 2EA8  
                                 l6448 2C88                                   l6392 2DFA  
                                 l6376 2DC0                                   l5498 146C  
                                 l6810 045C                                   l6802 043A  
                                 l7282 3640                                   l7274 361E  
                                 l7266 35EE                                   l5826 1DD4  
                                 l5818 1D5C                                   l5834 1E2E  
                                 l7602 0FE6                                   l7506 0DDA  
                                 l7434 0B06                                   l7426 0AE4  
                                 l7370 09D0                                   l6474 2E74  
                                 l6482 2ED6                                   l6458 2CB8  
                                 l8074 3894                                   l6740 030A  
                                 l6660 00FA                                   l6580 232C  
                                 l6556 2242                                   l5828 1DF2  
                                 l5836 1E8C                                   l7620 104C  
                                 l7540 0ED4                                   l7516 0DF6  
                                 l7444 0B22                                   l7364 09B8  
                                 l5588 3678                                   l6476 2E8E  
                                 l8076 389A                                   l8092 38C4  
                                 l6902 063A                                   l6822 04A0  
                                 l6806 0444                                   l6750 0332  
                                 l6654 00EA                                   l6574 22FA  
                                 l7278 362C                                   l7294 37CC  
                                 l7470 0BE6                                   l7382 0A04  
                                 l7374 09DA                                   l7366 09BE  
                                 l8086 38B8                                   l8078 38A0  
                                 l6912 0662                                   l6832 04C8  
                                 l6744 0314                                   l6664 0112  
                                 l6656 00F0                                   l7624 1056  
                                 l7544 0EDE                                   l7480 0C7C  
                                 l7472 0C04                                   l7464 0B8C  
                                 l7448 0B3A                                   l8088 38BE  
                                 l6906 0652                                   l6826 04B8  
                                 l6818 0496                                   l6770 0398  
                                 l6754 033C                                   l6586 236E  
                                 l7298 37DC                                   l7642 10A2  
                                 l7634 1080                                   l7562 0F2A  
                                 l7554 0F08                                   l7482 0C9A  
                                 l7474 0C22                                   l7466 0BAA  
                                 l7378 09F2                                   l6932 06D6  
                                 l6924 06B4                                   l6916 067A  
                                 l6908 0658                                   l6852 053C  
                                 l6844 051A                                   l6836 04E0  
                                 l6828 04BE                                   l6780 03C0  
                                 l6748 032C                                   l7660 1100  
                                 l7628 106E                                   l7580 0F90  
                                 l7548 0EF6                                   l7484 0CB8  
                                 l7476 0C40                                   l7468 0BC8  
                                 l7492 0D12                                   l7396 0A5C  
                                 l5972 3714                                   l6950 0738  
                                 l6942 06FE                                   l6934 06DC  
                                 l6870 059E                                   l6862 0564  
                                 l6854 0542                                   l6774 03B0  
                                 l6766 038E                                   l6758 0354  
                                 l7638 108A                                   l7558 0F12  
                                 l7486 0CD6                                   l7478 0C5E  
                                 l7494 0D76                                   l7398 0A62  
                                 l5982 37A0                                   l6960 0760  
                                 l6928 06BE                                   l6880 05C6  
                                 l6848 0524                                   l6792 0412  
                                 l6784 03D8                                   l6776 03B6  
                                 l7664 110A                                   l7584 0F9A  
                                 l7488 0CF4                                   l5976 372A  
                                 l6954 0742                                   l6938 06E6  
                                 l6874 05A8                                   l6858 054C  
                                 l7682 1156                                   l7674 1134  
                                 l7594 0FC4                                   l7498 0DB8  
                                 l6964 076A                                   l6884 05D0  
                                 l6796 041C                                   l7668 1122  
                                 l7588 0FB2                                   l7940 2FD6  
                                 l6958 075A                                   l6878 05C0  
                                 l7678 113E                                   l7598 0FCE  
                                 l7686 1162                                   l6992 07F4  
                                 l6984 07D2                                   l6994 07FA  
                                 l6898 0630                                   l7938 2FC2  
                                 l6988 07DC                                   l7964 3056  
                                 l6998 0804                                   l7976 31CC  
                                 l7994 3250                                   l7996 3256  
                                 l7998 325C                                   STR_1 FBB9  
                                 STR_2 FF1B                                   STR_3 FBA7  
                                 STR_4 FE3E                                   STR_5 FBA7  
                                 STR_6 FDFC                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 23FE  
                                 u5040 2284                                   u5210 028E  
                                 u5050 2286                                   u5118 2402  
                                 u5170 0126                                   u4450 4118  
                                 u4451 4114                                   _PEIE 007F96  
                                 u4460 411A                                   u3580 448C  
                                 u5190 01DA                                   u3840 12DC  
                                 u4490 1CBC                                   u4810 2D82  
                                 u4475 3E60                                   u7107 2C00  
                                 u3780 40CC                                   _RCEN 007E2B  
                                 u7117 2CA2                                   u3790 40CE  
                                 u4830 2DB8                                   u3847 12D2  
                                 u8007 38F6                                   u7207 415E  
                                 u7127 2CAC                                   u3880 1354  
                                 u4920 2C1A                                   u8017 3964  
                                 u7217 08E2                                   u7137 2CCE  
                                 u7057 2D06                                   u8107 1AF0  
                                 u8027 396E                                   u7307 0DFE  
                                 u7227 09E2                                   u7147 2EE4  
                                 u7067 2E24                                   u4828 2D86  
                                 u8117 1B3C                                   u8037 1924  
                                 u7317 0E28                                   u7237 0A1E  
                                 u7157 2F16                                   u7077 405A  
                                 u3887 134A                                   u8127 1B70  
                                 u8047 1970                                   u7407 10BC  
                                 u7327 0EE6                                   u7247 0A74  
                                 u7167 3412                                   u7087 4558  
                                 u4928 2C1E                                   u8137 1BBC  
                                 u8057 19BC                                   u7417 1112  
                                 u7337 0F1A                                   u7257 0AA0  
                                 u7177 346E                                   u7097 2BA4  
                                 i2l66 46E4                                   u4890 2BBE  
                                 u8147 1BF0                                   u8067 19F0  
                                 u7507 22EE                                   u7427 1146  
                                 u7347 0F44                                   u7267 0AF6  
                                 u7187 34A6                                   u8157 3D86  
                                 u8077 1A3C                                   u7517 231E  
                                 u7437 31DA                                   u7357 0FA2  
                                 u7277 0B2A                                   u7197 412A  
                                 u8167 3D90                                   u8087 1A70  
                                 u7607 0092                                   u7527 2362  
                                 u7447 321E                                   u7367 0FD6  
                                 u7287 0B54                                   u8177 3DBC  
                                 u8097 1ABC                                   u7617 0102  
                                 u7537 2390                                   u7457 219E  
                                 u7377 1000                                   u7297 0DCA  
                                 u4898 2BC2                                   u8187 3DC6  
                                 u7707 0344                                   u7627 0136  
                                 u7547 450C                                   u7467 21E2  
                                 u7387 105E                                   u8197 3F2E  
                                 u7717 03A0                                   u7637 019C  
                                 u7557 34C4                                   u7477 2204  
                                 u7397 1092                                   u7807 05D8  
                                 u7727 03C8                                   u7647 01BA  
                                 u7567 3508                                   u7487 2232  
                                 u6880 309C                                   u7817 0642  
                                 u7737 0424                                   u7657 01EA  
                                 u7577 352A                                   u7497 229A  
                                 u7907 085C                                   u7827 066A  
                                 u7747 044C                                   u7667 0250  
                                 u7587 002C                                   u7917 0866  
                                 u7837 06C6                                   u7757 04A8  
                                 u7677 026E                                   u7597 0070  
                                 u7927 088A                                   u7847 06EE  
                                 u7767 04D0                                   u7687 029E  
                                 u7937 08B2                                   u7857 074A  
                                 u7777 052C                                   u7697 031C  
                                 u7947 3A18                                   u7867 0772  
                                 u7787 0554                                   u7957 32E2  
                                 u7877 0794                                   u7797 05B0  
                                 u7967 3344                                   u7887 07E4  
                                 u7977 3364                                   u7897 080C  
                                 u7987 338A                                   u7997 33C2  
                                 _RSEN 007E29                            _stopSignals 46A4  
                                 _Test 31CC                                   _back 005B  
                                 _main 3852                                   _down 0069  
                                 _keys FB15                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 462A  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                     ??_SolenoidTestA5 00AB                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4722  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2412  
                          i2_lcdNibble 3F46                        __end_of_Loading 2E36  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 34B6                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 364A                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB30  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FE0D                                  STR_15 FFD3  
                                STR_23 FF0D                                  STR_31 FDEB  
                                STR_16 FFE3                                  STR_24 FD52  
                                STR_32 FD30                                  STR_40 FCEC  
                                STR_17 FFF3                                  STR_33 FD41  
                                STR_41 FCDB                                  STR_25 FB70  
                                STR_18 FFF7                                  STR_34 FDDA  
                                STR_50 FDB8                                  STR_42 FD96  
                                STR_26 FD63                                  STR_43 FD96  
                                STR_35 FDDA                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FB5D  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD74                                  STR_36 FD1F  
                                STR_44 FCFD                        __end_of___awmod 3852  
                                STR_45 FCEC                                  STR_37 FD30  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FB6D                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FEC6  
                                STR_38 FDC9                                  STR_46 FDA7  
                                STR_47 FDA7                                  STR_55 FFFB  
                                STR_63 FB30                                  STR_71 FEFF  
                                STR_39 FD85                                  STR_56 FFDF  
                                STR_64 FF72                                  STR_80 FE4E  
                                STR_48 FD0E                                  STR_72 FC75  
                                STR_49 FCFD                                  STR_57 FFD7  
                                STR_81 FB6D                                  STR_65 FF43  
                                STR_73 FEE3                                  STR_58 FFD3  
                                STR_74 FF50                                  STR_82 FE7B  
                                STR_90 FC97                                  STR_66 FB48  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FF5C                                  STR_75 FEA8  
                                STR_83 FE1E                                  STR_84 FF7D  
                                STR_76 FEF1                                  STR_92 FCA8  
                                STR_68 FC86                                  STR_77 FFAE  
                                STR_85 FFA5                                  STR_93 FF67  
                                STR_69 FCB9                                  STR_78 FEFF  
                                STR_86 FF91                                  STR_94 FE99  
                                STR_87 FEFF                                  STR_79 FF29  
                                STR_95 FC20                                  STR_88 FEB7  
                                STR_96 FC0F                                  STR_89 FED5  
                                STR_97 FBED                                  STR_98 FC42  
                                STR_99 FC53                                  ?_sort 0001  
                      __end_of___lldiv 3706                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3C14  
                      __end_of___lwmod 3E30                                  i2l254 218C  
                                i2l930 46C8                                  i2l595 24A0  
                                i2l852 2B32                                  i2l854 2B52  
                                i2l848 2AE6                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4716                        __end_of_handler 2B8E  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 451C  
                      __end_of_initLCD 4168                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 403C                        __end_of_loadRTC 3A0A  
                      __end_of_readMAG 4122                        __end_of_dpowers FB30  
                                _first 00E2                                  _enter 006B  
                      __end_of_isdigit 4546                                  _input 007D  
                                _putch 46F6                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 45BC  
                     __end_ofi2_getRTC 3CFC                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 42B8                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3FEE                           __end_of_Test 32D4  
                   __size_ofi2_lcdInst 000C                           __end_of_main 38E8  
                         __end_of_keys FB26                           __end_of_sort 464C  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FBCB  
                               STR_101 FE2E                                 STR_102 FBFE  
                               STR_110 FB95                                 STR_111 FF36  
                               STR_103 FBDC                                 STR_104 FBFE  
                               STR_112 FF87                                 STR_105 FE8A  
                               STR_113 FC31                                 STR_106 FE6C  
                               STR_114 FC64                                 _ADRESH 000FC4  
                               STR_115 FFB6                                 STR_107 FE5D  
                               STR_108 FCCA                                 _EEADRH 000FAA  
                               STR_109 FB83                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 42E8  
            i2_change_state_to_menu_22 42B8                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1248 1782                                 i2l1705 41A0  
                               i2l6110 24C0                                 i2l6102 243E  
                               i2l1695 3FE4                                 i2l6120 252E  
                               i2l6112 24D6                                 i2l6130 259C  
                               i2l6122 2544                                 i2l6114 24EC  
                               i2l6300 29A0                                 i2l6212 2872  
                               i2l6204 2858                                 i2l6124 255A  
                               i2l6116 2502                                 i2l6108 24AA  
                               i2l5326 45DC                                 i2l5350 4684  
                               i2l6230 28B0                                 i2l6214 2882  
                               i2l6222 2890                                 i2l6126 2570  
                               i2l6118 2518                                 i2l6134 25B2  
                               i2l5360 3FB2                                 i2l6312 29D6  
                               i2l6304 29B2                                 i2l6232 28B6  
                               i2l6240 28C8                                 i2l6216 2886  
                               i2l6128 2586                                 i2l6136 260C  
                               i2l5362 3FBA                                 i2l6234 28BC  
                               i2l6226 28A4                                 i2l6322 29F2  
                               i2l5612 3CC2                                 i2l5372 3FDA  
                               i2l5364 3FBE                                 i2l5380 4176  
                               i2l6316 29E8                                 i2l6308 29C4  
                               i2l6260 2924                                 i2l6252 290C  
                               i2l6236 28C2                                 i2l6228 28AA  
                               i2l5622 3CEC                                 i2l5382 417E  
                               i2l5710 17B0                                 i2l6270 294E  
                               i2l5616 3CD2                                 i2l5384 4182  
                               i2l5640 15B2                                 i2l8024 2654  
                               i2l6280 296C                                 i2l5714 17C8  
                               i2l5650 15D6                                 i2l8034 26BE  
                               i2l6282 2970                                 i2l6266 2932  
                               i2l8122 2ABA                                 i2l8106 2A9A  
                               i2l5388 4196                                 i2l5740 1844  
                               i2l5716 17CC                                 i2l5644 15C2  
                               i2l8044 2780                                 i2l8028 2664  
                               i2l6276 2958                                 i2l8108 2A9E  
                               i2l5734 1818                                 i2l5646 15D0  
                               i2l6294 2992                                 i2l6286 297A  
                               i2l5752 1870                                 i2l5728 17FE  
                               i2l5672 1692                                 i2l5664 166A  
                               i2l5656 1608                                 i2l8144 2B04  
                               i2l5754 1878                                 i2l5762 189E  
                               i2l5746 185A                                 i2l5738 183C  
                               i2l5682 16EA                                 i2l5674 169C  
                               i2l5770 18FA                                 i2l8146 2B06  
                               i2l5764 18A4                                 i2l5692 1736  
                               i2l5684 16F4                                 i2l5676 16A0  
                               i2l7700 1F00                                 i2l5758 188C  
                               i2l5694 1748                                 i2l5686 16FA  
                               i2l5774 4290                                 i2l7710 1F22  
                               i2l7702 1F06                                 i2l5768 18F2  
                               i2l5688 170C                                 i2l5952 3170  
                               i2l8440 28E0                                 i2l5776 4298  
                               i2l8432 2140                                 i2l8168 2B50  
                               i2l5698 174C                                 i2l8442 28FC  
                               i2l8434 2162                                 i2l7810 2094  
                               i2l7802 2070                                 i2l7730 1F5A  
                               i2l7714 1F30                                 i2l7706 1F14  
                               i2l5964 31B4                                 i2l5956 3180  
                               i2l8436 217E                                 i2l7830 20E2  
                               i2l7822 20BE                                 i2l7814 20A2  
                               i2l7806 207E                                 i2l7750 1FA2  
                               i2l7742 1F86                                 i2l7734 1F68  
                               i2l7726 1F4C                                 i2l7718 1F3E  
                               i2l7842 2114                                 i2l7834 20F0  
                               i2l7826 20D4                                 i2l7818 20B0  
                               i2l7770 1FF0                                 i2l7762 1FD4  
                               i2l7754 1FB0                                 i2l7746 1F94  
                               i2l7738 1F78                                 i2l7838 20FE  
                               i2l7790 203E                                 i2l7782 2022  
                               i2l7774 1FFE                                 i2l7766 1FE2  
                               i2l7758 1FBE                                 i2l7848 2122  
                               i2l7794 2054                                 i2l7786 2030  
                               i2l7778 2014                                 i2l7798 2062  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 456E  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 008A                       __end_of_dispLogs 462A  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2F76                                 ___wmul 4250  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3A92                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 466E  
                               _initUI 45E2                                 _readIR 408A  
                               _logRun 2F76                                 clear_0 4014  
                               clear_1 4020                                 clear_2 402C  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 38E8                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 421A  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4596  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 456E                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 3FEE  
                     __end_of_printRTC 1ED0                           __mediumconst FB14  
                    __end_ofi2___lwmod 41AA                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 358C  
                    __end_ofi2_lcdInst 472E                      __end_ofi2_isdigit 468C  
                           __accesstop 0080                __end_of__initialization 4032  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 46BA                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 476C  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4742                          __end_of_getIR 408A  
                          i2printRTC@i 0041                          _initSortTimer 3706  
          __end_of_updateServoPosition 3C8A                          __end_of_putch 4706  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2CE8                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 44F0          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 44C4                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 33D2  
             ?_change_state_to_menu_11 0001                                UI@F3223 012F  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 02F0                      __end_of_PortTests 3B9C  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2291 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 012B                                i2_putch 4716  
                            ?_initTime 0080                        _f_loadingNewCan 00E0  
                      i2printRTC@month 003D                  __size_of_Distribution 0140  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3DCE  
                              _Loading 2CE8            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 358C                                ___awmod 37B0  
                           _initServos 3EEC                                ___lldiv 364A  
                      __size_of___wmul 0036                                ___lwdiv 3B9C  
                              ___lwmod 3DCE                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 3FEE                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3CFC  
                              _lcdInst 4706                                _handler 0008  
                              __ptext0 3852                                __ptext1 46A4  
                              __ptext2 462A                                __ptext3 2CE8  
                              __ptext4 3706                                __ptext5 3CFC  
                              __ptext6 403C                                __ptext7 408A  
                              __ptext8 4546                                __ptext9 2B8E  
                      __size_of_printf 0438                                _readADC 44F0  
                      __size_of_strcpy 0036                                _initLCD 4122  
                              _cur_can 0065                                _loadRTC 397E  
                              _readMAG 40D6                                _dpowers FB26  
                   actuatorTest@i_1640 00B1                     actuatorTest@i_1642 00B2  
                   actuatorTest@i_1651 00B8                     actuatorTest@i_1643 00B3  
                   actuatorTest@i_1652 00B9                     actuatorTest@i_1636 00AE  
                   actuatorTest@i_1661 00BE                     actuatorTest@i_1645 00B4  
                   actuatorTest@i_1637 00AF                     actuatorTest@i_1629 00AD  
                   actuatorTest@i_1662 00BF                     actuatorTest@i_1646 00B5  
                   actuatorTest@i_1655 00BA                     actuatorTest@i_1639 00B0  
                   actuatorTest@i_1656 00BB                     actuatorTest@i_1648 00B6  
                   actuatorTest@i_1665 00C0                     actuatorTest@i_1649 00B7  
                   actuatorTest@i_1666 00C1                     actuatorTest@i_1658 00BC  
                   actuatorTest@i_1659 00BD                     actuatorTest@i_1668 00C2  
                   actuatorTest@i_1669 00C3                                _isdigit 451C  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2E36  
                       __pintcode_body 2A20                   end_of_initialization 4032  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                   SolenoidTestA5@i_1682 00AF  
                 SolenoidTestA5@i_1684 00B0                                int_func 2A20  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3D66                             _sensorTest 2190  
              __size_of_SolenoidTestA5 00FE                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2A20                           ??_BothServos 00AB  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3EEC  
                           _updateMenu 1ED0                      i2_I2C_Master_Read 45BC  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 46E4  
                    i2_I2C_Master_Stop 475A                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3F9C  
                            i2___lwmod 4168                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2648                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4722                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 466E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C06  
                  __end_of_EEPROM_read 46A4                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4286  
                       __end_of_getRTC 3B18                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4606                         __end_of_readIR 40D6  
                       __end_of_logRun 30B2                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 4250              __end_ofi2_I2C_Master_Read 45E2  
            __end_ofi2_I2C_Master_Wait 46F6                           i2printf@prec 001D  
                  start_initialization 3FEE              __end_ofi2_I2C_Master_Stop 4762  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1321 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3B18                            ?_sensorTest 0001  
                          __pdataBANK1 012F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2411 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1938 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 468C                     __end_of_PortTestA5 397E  
                     _I2C_Master_Start 4752                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 472E                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 3A92                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB14                              _lcdNibble 3D66  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                         _SolenoidTestA5 32D4  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 34B6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 015A  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 0282             __end_ofi2_I2C_Master_Start 476A  
           __end_ofi2_I2C_Master_Write 4742                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 283A  
                          ??i2_isdigit 0001                               i2u421_40 16CE  
                             i2u421_47 16C4                               i2u425_40 172E  
                             i2u425_47 1724                               _PIR2bits 000FA1  
                             i2u368_40 45DA                               i2u465_40 24A0  
                             i2u820_47 2878                               i2u821_47 3F5E  
                             i2u822_47 3F68                               i2u823_47 3F8A  
                             i2u824_47 3F94                               i2u693_40 277A  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 33D2  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4596  
                        lcdNibble@data 0081                               i2_getRTC 3C8A  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 15A8                               i2_strcpy 4286  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4002                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 46D0                            _count_total 00FE  
                     ??_initGlobalVars 0080                        SolenoidTestA5@i 00AD  
                             __Hrparam 0000                       __size_of_Loading 014E  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                        ?_SolenoidTestA5 0001  
                __end_of_initSortTimer 37B0                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4348  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 41E2  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 41AA  
              _change_state_to_menu_23 4318                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4438                _change_state_to_logs_12 4408  
              _change_state_to_logs_22 43D8                _change_state_to_logs_23 4496  
              _change_state_to_logs_33 43A8                _change_state_to_logs_34 4378  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2B86                             _EEPROMTest 476A  
                      _I2C_Master_Init 3E30                       __size_of_readADC 002C  
                      _I2C_Master_Read 4468                       __size_of_initLCD 0046  
                         _f_ID_receive 006D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 46D0  
                      _I2C_Master_Stop 474A                       __size_of_isdigit 002A  
                             _delay_ms 4546                         _printSortTimer 2648  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 31CC                               __ptext10 2E36  
                             __ptext11 3E90                               __ptext20 464C  
                             __ptext12 2F76                               __ptext21 4122  
                             __ptext13 33D2                               __ptext30 46D0  
                             __ptext22 08CA                               __ptext14 468C  
                             __ptext31 41AA                               __ptext23 1C06  
                             __ptext15 45E2                               __ptext40 0012  
                             __ptext32 41E2                               __ptext24 421A  
                             __ptext16 397E                               __ptext41 3A0A  
                             __ptext33 37B0                               __ptext25 3A92  
                             __ptext17 3E30                               __ptext50 4250  
                             __ptext42 32D4                               __ptext34 358C  
                             __ptext26 472E                               __ptext18 364A  
                             __ptext51 3DCE                               __ptext43 3B18  
                             __ptext35 31CC                               __ptext27 474A  
                             __ptext19 44C4                               __ptext60 2412  
                             __ptext52 3B9C                               __ptext44 38E8  
                             __ptext36 2190                               __ptext28 4752  
                             __ptext61 4286                               __ptext53 4706  
                             __ptext45 476A                               __ptext37 40D6  
                             __ptext29 4468                               __ptext70 43D8  
                             __ptext62 283A                               __ptext54 3D66  
                             __ptext46 1916                               __ptext38 44F0  
                             __ptext71 4408                               __ptext63 42B8  
                             __ptext55 3EEC                               __ptext47 1170  
                             __ptext39 34B6                               __ptext80 4596  
                             __ptext72 4438                               __ptext64 42E8  
                             __ptext56 3C14                               __ptext48 46F6  
                             __ptext81 4168                               __ptext73 4606  
                             __ptext65 4318                               __ptext49 451C  
                             __ptext90 46E4                               __ptext82 3F9C  
                             __ptext74 30B2                               __ptext66 4348  
                             __ptext58 1ED0                               __ptext83 4722  
                             __ptext75 46BA                               __ptext67 4378  
                             __ptext59 456E                               __ptext84 3F46  
                             __ptext76 2648                               __ptext68 43A8  
                             __ptext85 3C8A                               __ptext77 15A8  
                             __ptext69 4496                               __ptext86 4738  
                             __ptext78 4716                               __ptext87 475A  
                             __ptext79 466E                               __ptext88 4762  
                             __ptext89 45BC                               _dispLogs 4606  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1938 0002                     __end_of_initServos 3F46  
                        __size_of_Test 0108                          ?_EEPROM_write 00AB  
                             _initTime 464C                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 3C14  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1C06                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006F                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4318  
    __end_ofi2_change_state_to_menu_22 42E8                               loadRTC@i 0096  
               __end_of_printSortTimer 283A                              putch@data 0082  
             __end_of_I2C_Master_Start 475A                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 4738                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 3A0A  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AF                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 2412                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 46BA              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2190  
              __end_of_I2C_Master_Init 3E90                __end_of_I2C_Master_Read 4496  
              __end_of_I2C_Master_Wait 46E4                __end_of_I2C_Master_Stop 4752  
                        printRTC@F3214 0133                            lcdInst@data 0082  
                         retrieveLog@i 000E                           sensorTest@on 00AD  
                          _retrieveLog 30B2                    __end_ofi2_lcdNibble 3F9C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012D                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3E90  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
