

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 22:46:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  0057FA                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  0057FA  4D                 	db	77
   157  0057FB  4D                 	db	77
   158  0057FC  4D                 	db	77
   159  0057FD  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  0057FE  4D                 	db	77
   163  0057FF  4D                 	db	77
   164  005800  4D                 	db	77
   165  005801  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAA2                     __pmediumconst:
   169                           	opt stack 0
   170  00FAA2  00                 	db	0
   171  00FAA3                     _keys:
   172                           	opt stack 0
   173  00FAA3  31                 	db	49
   174  00FAA4  32                 	db	50
   175  00FAA5  33                 	db	51
   176  00FAA6  41                 	db	65
   177  00FAA7  34                 	db	52
   178  00FAA8  35                 	db	53
   179  00FAA9  36                 	db	54
   180  00FAAA  42                 	db	66
   181  00FAAB  37                 	db	55
   182  00FAAC  38                 	db	56
   183  00FAAD  39                 	db	57
   184  00FAAE  43                 	db	67
   185  00FAAF  2A                 	db	42
   186  00FAB0  30                 	db	48
   187  00FAB1  23                 	db	35
   188  00FAB2  44                 	db	68
   189  00FAB3  00                 	db	0
   190  00FAB4                     __end_of_keys:
   191                           	opt stack 0
   192  00FAB4                     _dpowers:
   193                           	opt stack 0
   194  00FAB4  0001               	dw	1
   195  00FAB6  000A               	dw	10
   196  00FAB8  0064               	dw	100
   197  00FABA  03E8               	dw	1000
   198  00FABC  2710               	dw	10000
   199  00FABE                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FABE                     STR_21:
   277  00FABE  25                 	db	37
   278  00FABF  30                 	db	48	;'0'
   279  00FAC0  32                 	db	50	;'2'
   280  00FAC1  64                 	db	100	;'d'
   281  00FAC2  25                 	db	37
   282  00FAC3  73                 	db	115	;'s'
   283  00FAC4  20                 	db	32
   284  00FAC5  7C                 	db	124
   285  00FAC6  20                 	db	32
   286  00FAC7  25                 	db	37
   287  00FAC8  30                 	db	48	;'0'
   288  00FAC9  32                 	db	50	;'2'
   289  00FACA  64                 	db	100	;'d'
   290  00FACB  3A                 	db	58	;':'
   291  00FACC  25                 	db	37
   292  00FACD  30                 	db	48	;'0'
   293  00FACE  32                 	db	50	;'2'
   294  00FACF  64                 	db	100	;'d'
   295  00FAD0  3A                 	db	58	;':'
   296  00FAD1  25                 	db	37
   297  00FAD2  30                 	db	48	;'0'
   298  00FAD3  32                 	db	50	;'2'
   299  00FAD4  64                 	db	100	;'d'
   300  00FAD5  00                 	db	0
   301  00FAD6                     STR_66:
   302  00FAD6  28                 	db	40
   303  00FAD7  64                 	db	100	;'d'
   304  00FAD8  61                 	db	97	;'a'
   305  00FAD9  74                 	db	116	;'t'
   306  00FADA  61                 	db	97	;'a'
   307  00FADB  3A                 	db	58	;':'
   308  00FADC  20                 	db	32
   309  00FADD  25                 	db	37
   310  00FADE  75                 	db	117	;'u'
   311  00FADF  2C                 	db	44
   312  00FAE0  20                 	db	32
   313  00FAE1  61                 	db	97	;'a'
   314  00FAE2  64                 	db	100	;'d'
   315  00FAE3  64                 	db	100	;'d'
   316  00FAE4  72                 	db	114	;'r'
   317  00FAE5  3A                 	db	58	;':'
   318  00FAE6  20                 	db	32
   319  00FAE7  25                 	db	37
   320  00FAE8  75                 	db	117	;'u'
   321  00FAE9  29                 	db	41
   322  00FAEA  00                 	db	0
   323  00FAEB                     STR_111:
   324  00FAEB  44                 	db	68	;'D'
   325  00FAEC  20                 	db	32
   326  00FAED  57                 	db	87	;'W'
   327  00FAEE  49                 	db	73	;'I'
   328  00FAEF  4C                 	db	76	;'L'
   329  00FAF0  4C                 	db	76	;'L'
   330  00FAF1  20                 	db	32
   331  00FAF2  52                 	db	82	;'R'
   332  00FAF3  45                 	db	69	;'E'
   333  00FAF4  54                 	db	84	;'T'
   334  00FAF5  55                 	db	85	;'U'
   335  00FAF6  52                 	db	82	;'R'
   336  00FAF7  4E                 	db	78	;'N'
   337  00FAF8  20                 	db	32
   338  00FAF9  20                 	db	32
   339  00FAFA  20                 	db	32
   340  00FAFB  20                 	db	32
   341  00FAFC  00                 	db	0
   342  00FAFD                     STR_121:
   343  00FAFD  4F                 	db	79	;'O'
   344  00FAFE  54                 	db	84	;'T'
   345  00FAFF  48                 	db	72	;'H'
   346  00FB00  45                 	db	69	;'E'
   347  00FB01  52                 	db	82	;'R'
   348  00FB02  20                 	db	32
   349  00FB03  53                 	db	83	;'S'
   350  00FB04  45                 	db	69	;'E'
   351  00FB05  54                 	db	84	;'T'
   352  00FB06  53                 	db	83	;'S'
   353  00FB07  20                 	db	32
   354  00FB08  52                 	db	82	;'R'
   355  00FB09  41                 	db	65	;'A'
   356  00FB0A  35                 	db	53	;'5'
   357  00FB0B  20                 	db	32
   358  00FB0C  20                 	db	32
   359  00FB0D  20                 	db	32
   360  00FB0E  00                 	db	0
   361  00FB0F                     STR_120:
   362  00FB0F  53                 	db	83	;'S'
   363  00FB10  3A                 	db	58	;':'
   364  00FB11  20                 	db	32
   365  00FB12  44                 	db	68	;'D'
   366  00FB13  20                 	db	32
   367  00FB14  57                 	db	87	;'W'
   368  00FB15  49                 	db	73	;'I'
   369  00FB16  4C                 	db	76	;'L'
   370  00FB17  4C                 	db	76	;'L'
   371  00FB18  20                 	db	32
   372  00FB19  52                 	db	82	;'R'
   373  00FB1A  45                 	db	69	;'E'
   374  00FB1B  54                 	db	84	;'T'
   375  00FB1C  55                 	db	85	;'U'
   376  00FB1D  52                 	db	82	;'R'
   377  00FB1E  4E                 	db	78	;'N'
   378  00FB1F  20                 	db	32
   379  00FB20  00                 	db	0
   380  00FB21                     STR_123:
   381  00FB21  4F                 	db	79	;'O'
   382  00FB22  54                 	db	84	;'T'
   383  00FB23  48                 	db	72	;'H'
   384  00FB24  45                 	db	69	;'E'
   385  00FB25  52                 	db	82	;'R'
   386  00FB26  3A                 	db	58	;':'
   387  00FB27  20                 	db	32
   388  00FB28  43                 	db	67	;'C'
   389  00FB29  41                 	db	65	;'A'
   390  00FB2A  4D                 	db	77	;'M'
   391  00FB2B  20                 	db	32
   392  00FB2C  54                 	db	84	;'T'
   393  00FB2D  4F                 	db	79	;'O'
   394  00FB2E  47                 	db	71	;'G'
   395  00FB2F  47                 	db	71	;'G'
   396  00FB30  4C                 	db	76	;'L'
   397  00FB31  45                 	db	69	;'E'
   398  00FB32  00                 	db	0
   399  00FB33                     STR_129:
   400  00FB33  4F                 	db	79	;'O'
   401  00FB34  54                 	db	84	;'T'
   402  00FB35  48                 	db	72	;'H'
   403  00FB36  45                 	db	69	;'E'
   404  00FB37  52                 	db	82	;'R'
   405  00FB38  20                 	db	32
   406  00FB39  53                 	db	83	;'S'
   407  00FB3A  45                 	db	69	;'E'
   408  00FB3B  54                 	db	84	;'T'
   409  00FB3C  53                 	db	83	;'S'
   410  00FB3D  20                 	db	32
   411  00FB3E  50                 	db	80	;'P'
   412  00FB3F  55                 	db	85	;'U'
   413  00FB40  53                 	db	83	;'S'
   414  00FB41  48                 	db	72	;'H'
   415  00FB42  45                 	db	69	;'E'
   416  00FB43  52                 	db	82	;'R'
   417  00FB44  00                 	db	0
   418  00FB45                     STR_122:
   419  00FB45  44                 	db	68	;'D'
   420  00FB46  3A                 	db	58	;':'
   421  00FB47  20                 	db	32
   422  00FB48  52                 	db	82	;'R'
   423  00FB49  45                 	db	69	;'E'
   424  00FB4A  54                 	db	84	;'T'
   425  00FB4B  7C                 	db	124
   426  00FB4C  32                 	db	50	;'2'
   427  00FB4D  3A                 	db	58	;':'
   428  00FB4E  20                 	db	32
   429  00FB4F  43                 	db	67	;'C'
   430  00FB50  4F                 	db	79	;'O'
   431  00FB51  4E                 	db	78	;'N'
   432  00FB52  44                 	db	68	;'D'
   433  00FB53  20                 	db	32
   434  00FB54  25                 	db	37
   435  00FB55  64                 	db	100	;'d'
   436  00FB56  00                 	db	0
   437  00FB57                     STR_3:
   438  00FB57  2D                 	db	45
   439  00FB58  2D                 	db	45
   440  00FB59  20                 	db	32
   441  00FB5A  4C                 	db	76	;'L'
   442  00FB5B  4F                 	db	79	;'O'
   443  00FB5C  47                 	db	71	;'G'
   444  00FB5D  20                 	db	32
   445  00FB5E  25                 	db	37
   446  00FB5F  32                 	db	50	;'2'
   447  00FB60  64                 	db	100	;'d'
   448  00FB61  20                 	db	32
   449  00FB62  48                 	db	72	;'H'
   450  00FB63  45                 	db	69	;'E'
   451  00FB64  52                 	db	82	;'R'
   452  00FB65  45                 	db	69	;'E'
   453  00FB66  2D                 	db	45
   454  00FB67  2D                 	db	45
   455  00FB68  00                 	db	0
   456  00FB69                     STR_1:
   457  00FB69  52                 	db	82	;'R'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  53                 	db	83	;'S'
   460  00FB6C  55                 	db	85	;'U'
   461  00FB6D  4C                 	db	76	;'L'
   462  00FB6E  54                 	db	84	;'T'
   463  00FB6F  53                 	db	83	;'S'
   464  00FB70  20                 	db	32
   465  00FB71  49                 	db	73	;'I'
   466  00FB72  4E                 	db	78	;'N'
   467  00FB73  20                 	db	32
   468  00FB74  4C                 	db	76	;'L'
   469  00FB75  4F                 	db	79	;'O'
   470  00FB76  47                 	db	71	;'G'
   471  00FB77  20                 	db	32
   472  00FB78  25                 	db	37
   473  00FB79  64                 	db	100	;'d'
   474  00FB7A  00                 	db	0
   475  00FB7B                     STR_102:
   476  00FB7B  4D                 	db	77	;'M'
   477  00FB7C  49                 	db	73	;'I'
   478  00FB7D  44                 	db	68	;'D'
   479  00FB7E  20                 	db	32
   480  00FB7F  2D                 	db	45
   481  00FB80  2D                 	db	45
   482  00FB81  20                 	db	32
   483  00FB82  32                 	db	50	;'2'
   484  00FB83  73                 	db	115	;'s'
   485  00FB84  20                 	db	32
   486  00FB85  20                 	db	32
   487  00FB86  20                 	db	32
   488  00FB87  20                 	db	32
   489  00FB88  20                 	db	32
   490  00FB89  20                 	db	32
   491  00FB8A  20                 	db	32
   492  00FB8B  00                 	db	0
   493  00FB8C                     STR_105:
   494  00FB8C  44                 	db	68	;'D'
   495  00FB8D  52                 	db	82	;'R'
   496  00FB8E  4F                 	db	79	;'O'
   497  00FB8F  50                 	db	80	;'P'
   498  00FB90  20                 	db	32
   499  00FB91  2D                 	db	45
   500  00FB92  2D                 	db	45
   501  00FB93  20                 	db	32
   502  00FB94  32                 	db	50	;'2'
   503  00FB95  73                 	db	115	;'s'
   504  00FB96  20                 	db	32
   505  00FB97  20                 	db	32
   506  00FB98  20                 	db	32
   507  00FB99  20                 	db	32
   508  00FB9A  20                 	db	32
   509  00FB9B  20                 	db	32
   510  00FB9C  00                 	db	0
   511  00FB9D                     STR_99:
   512  00FB9D  4C                 	db	76	;'L'
   513  00FB9E  45                 	db	69	;'E'
   514  00FB9F  46                 	db	70	;'F'
   515  00FBA0  54                 	db	84	;'T'
   516  00FBA1  20                 	db	32
   517  00FBA2  2D                 	db	45
   518  00FBA3  2D                 	db	45
   519  00FBA4  20                 	db	32
   520  00FBA5  32                 	db	50	;'2'
   521  00FBA6  73                 	db	115	;'s'
   522  00FBA7  20                 	db	32
   523  00FBA8  20                 	db	32
   524  00FBA9  20                 	db	32
   525  00FBAA  20                 	db	32
   526  00FBAB  20                 	db	32
   527  00FBAC  20                 	db	32
   528  00FBAD  00                 	db	0
   529  00FBAE                     STR_104:
   530  00FBAE  4C                 	db	76	;'L'
   531  00FBAF  45                 	db	69	;'E'
   532  00FBB0  56                 	db	86	;'V'
   533  00FBB1  45                 	db	69	;'E'
   534  00FBB2  4C                 	db	76	;'L'
   535  00FBB3  20                 	db	32
   536  00FBB4  2D                 	db	45
   537  00FBB5  2D                 	db	45
   538  00FBB6  20                 	db	32
   539  00FBB7  32                 	db	50	;'2'
   540  00FBB8  73                 	db	115	;'s'
   541  00FBB9  20                 	db	32
   542  00FBBA  20                 	db	32
   543  00FBBB  20                 	db	32
   544  00FBBC  20                 	db	32
   545  00FBBD  20                 	db	32
   546  00FBBE  00                 	db	0
   547  00FBBF                     STR_98:
   548  00FBBF  52                 	db	82	;'R'
   549  00FBC0  49                 	db	73	;'I'
   550  00FBC1  47                 	db	71	;'G'
   551  00FBC2  48                 	db	72	;'H'
   552  00FBC3  54                 	db	84	;'T'
   553  00FBC4  20                 	db	32
   554  00FBC5  2D                 	db	45
   555  00FBC6  2D                 	db	45
   556  00FBC7  20                 	db	32
   557  00FBC8  32                 	db	50	;'2'
   558  00FBC9  73                 	db	115	;'s'
   559  00FBCA  20                 	db	32
   560  00FBCB  20                 	db	32
   561  00FBCC  20                 	db	32
   562  00FBCD  20                 	db	32
   563  00FBCE  20                 	db	32
   564  00FBCF  00                 	db	0
   565  00FBD0                     STR_97:
   566  00FBD0  4D                 	db	77	;'M'
   567  00FBD1  49                 	db	73	;'I'
   568  00FBD2  44                 	db	68	;'D'
   569  00FBD3  44                 	db	68	;'D'
   570  00FBD4  4C                 	db	76	;'L'
   571  00FBD5  45                 	db	69	;'E'
   572  00FBD6  20                 	db	32
   573  00FBD7  2D                 	db	45
   574  00FBD8  2D                 	db	45
   575  00FBD9  20                 	db	32
   576  00FBDA  32                 	db	50	;'2'
   577  00FBDB  73                 	db	115	;'s'
   578  00FBDC  20                 	db	32
   579  00FBDD  20                 	db	32
   580  00FBDE  20                 	db	32
   581  00FBDF  20                 	db	32
   582  00FBE0  00                 	db	0
   583  00FBE1                     STR_112:
   584  00FBE1  4F                 	db	79	;'O'
   585  00FBE2  54                 	db	84	;'T'
   586  00FBE3  48                 	db	72	;'H'
   587  00FBE4  45                 	db	69	;'E'
   588  00FBE5  52                 	db	82	;'R'
   589  00FBE6  20                 	db	32
   590  00FBE7  53                 	db	83	;'S'
   591  00FBE8  45                 	db	69	;'E'
   592  00FBE9  54                 	db	84	;'T'
   593  00FBEA  53                 	db	83	;'S'
   594  00FBEB  20                 	db	32
   595  00FBEC  44                 	db	68	;'D'
   596  00FBED  43                 	db	67	;'C'
   597  00FBEE  20                 	db	32
   598  00FBEF  20                 	db	32
   599  00FBF0  20                 	db	32
   600  00FBF1  00                 	db	0
   601  00FBF2                     STR_118:
   602  00FBF2  44                 	db	68	;'D'
   603  00FBF3  20                 	db	32
   604  00FBF4  57                 	db	87	;'W'
   605  00FBF5  49                 	db	73	;'I'
   606  00FBF6  4C                 	db	76	;'L'
   607  00FBF7  4C                 	db	76	;'L'
   608  00FBF8  20                 	db	32
   609  00FBF9  52                 	db	82	;'R'
   610  00FBFA  45                 	db	69	;'E'
   611  00FBFB  54                 	db	84	;'T'
   612  00FBFC  55                 	db	85	;'U'
   613  00FBFD  52                 	db	82	;'R'
   614  00FBFE  4E                 	db	78	;'N'
   615  00FBFF  20                 	db	32
   616  00FC00  20                 	db	32
   617  00FC01  20                 	db	32
   618  00FC02  00                 	db	0
   619  00FC03                     STR_115:
   620  00FC03  35                 	db	53	;'5'
   621  00FC04  3A                 	db	58	;':'
   622  00FC05  48                 	db	72	;'H'
   623  00FC06  7C                 	db	124
   624  00FC07  36                 	db	54	;'6'
   625  00FC08  3A                 	db	58	;':'
   626  00FC09  4C                 	db	76	;'L'
   627  00FC0A  7C                 	db	124
   628  00FC0B  49                 	db	73	;'I'
   629  00FC0C  52                 	db	82	;'R'
   630  00FC0D  3A                 	db	58	;':'
   631  00FC0E  25                 	db	37
   632  00FC0F  64                 	db	100	;'d'
   633  00FC10  20                 	db	32
   634  00FC11  20                 	db	32
   635  00FC12  20                 	db	32
   636  00FC13  00                 	db	0
   637  00FC14                     STR_113:
   638  00FC14  31                 	db	49	;'1'
   639  00FC15  3A                 	db	58	;':'
   640  00FC16  20                 	db	32
   641  00FC17  44                 	db	68	;'D'
   642  00FC18  43                 	db	67	;'C'
   643  00FC19  20                 	db	32
   644  00FC1A  7C                 	db	124
   645  00FC1B  20                 	db	32
   646  00FC1C  41                 	db	65	;'A'
   647  00FC1D  3A                 	db	58	;':'
   648  00FC1E  20                 	db	32
   649  00FC1F  41                 	db	65	;'A'
   650  00FC20  52                 	db	82	;'R'
   651  00FC21  4D                 	db	77	;'M'
   652  00FC22  20                 	db	32
   653  00FC23  20                 	db	32
   654  00FC24  00                 	db	0
   655  00FC25                     STR_100:
   656  00FC25  4D                 	db	77	;'M'
   657  00FC26  49                 	db	73	;'I'
   658  00FC27  44                 	db	68	;'D'
   659  00FC28  2D                 	db	45
   660  00FC29  4C                 	db	76	;'L'
   661  00FC2A  45                 	db	69	;'E'
   662  00FC2B  46                 	db	70	;'F'
   663  00FC2C  54                 	db	84	;'T'
   664  00FC2D  20                 	db	32
   665  00FC2E  2D                 	db	45
   666  00FC2F  2D                 	db	45
   667  00FC30  20                 	db	32
   668  00FC31  32                 	db	50	;'2'
   669  00FC32  73                 	db	115	;'s'
   670  00FC33  20                 	db	32
   671  00FC34  20                 	db	32
   672  00FC35  00                 	db	0
   673  00FC36                     STR_101:
   674  00FC36  4D                 	db	77	;'M'
   675  00FC37  49                 	db	73	;'I'
   676  00FC38  44                 	db	68	;'D'
   677  00FC39  2D                 	db	45
   678  00FC3A  52                 	db	82	;'R'
   679  00FC3B  49                 	db	73	;'I'
   680  00FC3C  47                 	db	71	;'G'
   681  00FC3D  48                 	db	72	;'H'
   682  00FC3E  54                 	db	84	;'T'
   683  00FC3F  20                 	db	32
   684  00FC40  2D                 	db	45
   685  00FC41  2D                 	db	45
   686  00FC42  20                 	db	32
   687  00FC43  32                 	db	50	;'2'
   688  00FC44  73                 	db	115	;'s'
   689  00FC45  20                 	db	32
   690  00FC46  00                 	db	0
   691  00FC47  45                 	db	69	;'E'
   692  00FC48  4C                 	db	76	;'L'
   693  00FC49  53                 	db	83	;'S'
   694  00FC4A  45                 	db	69	;'E'
   695  00FC4B  20                 	db	32
   696  00FC4C  54                 	db	84	;'T'
   697  00FC4D  4F                 	db	79	;'O'
   698  00FC4E  47                 	db	71	;'G'
   699  00FC4F  47                 	db	71	;'G'
   700  00FC50  4C                 	db	76	;'L'
   701  00FC51  45                 	db	69	;'E'
   702  00FC52  53                 	db	83	;'S'
   703  00FC53  20                 	db	32
   704  00FC54  52                 	db	82	;'R'
   705  00FC55  41                 	db	65	;'A'
   706  00FC56  35                 	db	53	;'5'
   707  00FC57  00                 	db	0
   708  00FC58                     STR_72:
   709  00FC58  41                 	db	65	;'A'
   710  00FC59  4C                 	db	76	;'L'
   711  00FC5A  47                 	db	71	;'G'
   712  00FC5B  31                 	db	49	;'1'
   713  00FC5C  3A                 	db	58	;':'
   714  00FC5D  20                 	db	32
   715  00FC5E  39                 	db	57	;'9'
   716  00FC5F  20                 	db	32
   717  00FC60  50                 	db	80	;'P'
   718  00FC61  4F                 	db	79	;'O'
   719  00FC62  50                 	db	80	;'P'
   720  00FC63  4E                 	db	78	;'N'
   721  00FC64  4F                 	db	79	;'O'
   722  00FC65  54                 	db	84	;'T'
   723  00FC66  41                 	db	65	;'A'
   724  00FC67  42                 	db	66	;'B'
   725  00FC68  00                 	db	0
   726  00FC69                     STR_92:
   727  00FC69  54                 	db	84	;'T'
   728  00FC6A  53                 	db	83	;'S'
   729  00FC6B  54                 	db	84	;'T'
   730  00FC6C  3A                 	db	58	;':'
   731  00FC6D  20                 	db	32
   732  00FC6E  43                 	db	67	;'C'
   733  00FC6F  4F                 	db	79	;'O'
   734  00FC70  4E                 	db	78	;'N'
   735  00FC71  44                 	db	68	;'D'
   736  00FC72  20                 	db	32
   737  00FC73  53                 	db	83	;'S'
   738  00FC74  4F                 	db	79	;'O'
   739  00FC75  4C                 	db	76	;'L'
   740  00FC76  4E                 	db	78	;'N'
   741  00FC77  27                 	db	39
   742  00FC78  44                 	db	68	;'D'
   743  00FC79  00                 	db	0
   744  00FC7A                     STR_94:
   745  00FC7A  54                 	db	84	;'T'
   746  00FC7B  53                 	db	83	;'S'
   747  00FC7C  54                 	db	84	;'T'
   748  00FC7D  3A                 	db	58	;':'
   749  00FC7E  20                 	db	32
   750  00FC7F  50                 	db	80	;'P'
   751  00FC80  55                 	db	85	;'U'
   752  00FC81  53                 	db	83	;'S'
   753  00FC82  48                 	db	72	;'H'
   754  00FC83  20                 	db	32
   755  00FC84  53                 	db	83	;'S'
   756  00FC85  4F                 	db	79	;'O'
   757  00FC86  4C                 	db	76	;'L'
   758  00FC87  4E                 	db	78	;'N'
   759  00FC88  27                 	db	39
   760  00FC89  44                 	db	68	;'D'
   761  00FC8A  00                 	db	0
   762  00FC8B                     STR_68:
   763  00FC8B  32                 	db	50	;'2'
   764  00FC8C  2E                 	db	46
   765  00FC8D  53                 	db	83	;'S'
   766  00FC8E  4E                 	db	78	;'N'
   767  00FC8F  52                 	db	82	;'R'
   768  00FC90  7C                 	db	124
   769  00FC91  34                 	db	52	;'4'
   770  00FC92  2E                 	db	46
   771  00FC93  48                 	db	72	;'H'
   772  00FC94  49                 	db	73	;'I'
   773  00FC95  7C                 	db	124
   774  00FC96  35                 	db	53	;'5'
   775  00FC97  2E                 	db	46
   776  00FC98  4D                 	db	77	;'M'
   777  00FC99  45                 	db	69	;'E'
   778  00FC9A  44                 	db	68	;'D'
   779  00FC9B  00                 	db	0
   780  00FC9C                     STR_69:
   781  00FC9C  42                 	db	66	;'B'
   782  00FC9D  2E                 	db	46
   783  00FC9E  50                 	db	80	;'P'
   784  00FC9F  4C                 	db	76	;'L'
   785  00FCA0  41                 	db	65	;'A'
   786  00FCA1  7C                 	db	124
   787  00FCA2  38                 	db	56	;'8'
   788  00FCA3  2E                 	db	46
   789  00FCA4  53                 	db	83	;'S'
   790  00FCA5  56                 	db	86	;'V'
   791  00FCA6  7C                 	db	124
   792  00FCA7  39                 	db	57	;'9'
   793  00FCA8  2E                 	db	46
   794  00FCA9  42                 	db	66	;'B'
   795  00FCAA  4C                 	db	76	;'L'
   796  00FCAB  4B                 	db	75	;'K'
   797  00FCAC  00                 	db	0
   798  00FCAD                     STR_127:
   799  00FCAD  45                 	db	69	;'E'
   800  00FCAE  4C                 	db	76	;'L'
   801  00FCAF  53                 	db	83	;'S'
   802  00FCB0  45                 	db	69	;'E'
   803  00FCB1  20                 	db	32
   804  00FCB2  54                 	db	84	;'T'
   805  00FCB3  4F                 	db	79	;'O'
   806  00FCB4  47                 	db	71	;'G'
   807  00FCB5  47                 	db	71	;'G'
   808  00FCB6  4C                 	db	76	;'L'
   809  00FCB7  45                 	db	69	;'E'
   810  00FCB8  53                 	db	83	;'S'
   811  00FCB9  20                 	db	32
   812  00FCBA  41                 	db	65	;'A'
   813  00FCBB  52                 	db	82	;'R'
   814  00FCBC  4D                 	db	77	;'M'
   815  00FCBD  00                 	db	0
   816  00FCBE                     STR_110:
   817  00FCBE  54                 	db	84	;'T'
   818  00FCBF  53                 	db	83	;'S'
   819  00FCC0  54                 	db	84	;'T'
   820  00FCC1  3A                 	db	58	;':'
   821  00FCC2  20                 	db	32
   822  00FCC3  42                 	db	66	;'B'
   823  00FCC4  4F                 	db	79	;'O'
   824  00FCC5  54                 	db	84	;'T'
   825  00FCC6  48                 	db	72	;'H'
   826  00FCC7  20                 	db	32
   827  00FCC8  53                 	db	83	;'S'
   828  00FCC9  45                 	db	69	;'E'
   829  00FCCA  52                 	db	82	;'R'
   830  00FCCB  56                 	db	86	;'V'
   831  00FCCC  4F                 	db	79	;'O'
   832  00FCCD  53                 	db	83	;'S'
   833  00FCCE  00                 	db	0
   834  00FCCF                     STR_41:
   835  00FCCF  4C                 	db	76	;'L'
   836  00FCD0  4F                 	db	79	;'O'
   837  00FCD1  47                 	db	71	;'G'
   838  00FCD2  20                 	db	32
   839  00FCD3  31                 	db	49	;'1'
   840  00FCD4  20                 	db	32
   841  00FCD5  20                 	db	32
   842  00FCD6  20                 	db	32
   843  00FCD7  20                 	db	32
   844  00FCD8  20                 	db	32
   845  00FCD9  20                 	db	32
   846  00FCDA  20                 	db	32
   847  00FCDB  20                 	db	32
   848  00FCDC  20                 	db	32
   849  00FCDD  20                 	db	32
   850  00FCDE  20                 	db	32
   851  00FCDF  00                 	db	0
   852  00FCE0                     STR_40:
   853  00FCE0  4C                 	db	76	;'L'
   854  00FCE1  4F                 	db	79	;'O'
   855  00FCE2  47                 	db	71	;'G'
   856  00FCE3  20                 	db	32
   857  00FCE4  32                 	db	50	;'2'
   858  00FCE5  20                 	db	32
   859  00FCE6  20                 	db	32
   860  00FCE7  20                 	db	32
   861  00FCE8  20                 	db	32
   862  00FCE9  20                 	db	32
   863  00FCEA  20                 	db	32
   864  00FCEB  20                 	db	32
   865  00FCEC  20                 	db	32
   866  00FCED  20                 	db	32
   867  00FCEE  20                 	db	32
   868  00FCEF  20                 	db	32
   869  00FCF0  00                 	db	0
   870  00FCF1                     STR_44:
   871  00FCF1  4C                 	db	76	;'L'
   872  00FCF2  4F                 	db	79	;'O'
   873  00FCF3  47                 	db	71	;'G'
   874  00FCF4  20                 	db	32
   875  00FCF5  33                 	db	51	;'3'
   876  00FCF6  20                 	db	32
   877  00FCF7  20                 	db	32
   878  00FCF8  20                 	db	32
   879  00FCF9  20                 	db	32
   880  00FCFA  20                 	db	32
   881  00FCFB  20                 	db	32
   882  00FCFC  20                 	db	32
   883  00FCFD  20                 	db	32
   884  00FCFE  20                 	db	32
   885  00FCFF  20                 	db	32
   886  00FD00  20                 	db	32
   887  00FD01  00                 	db	0
   888  00FD02                     STR_48:
   889  00FD02  4C                 	db	76	;'L'
   890  00FD03  4F                 	db	79	;'O'
   891  00FD04  47                 	db	71	;'G'
   892  00FD05  20                 	db	32
   893  00FD06  34                 	db	52	;'4'
   894  00FD07  20                 	db	32
   895  00FD08  20                 	db	32
   896  00FD09  20                 	db	32
   897  00FD0A  20                 	db	32
   898  00FD0B  20                 	db	32
   899  00FD0C  20                 	db	32
   900  00FD0D  20                 	db	32
   901  00FD0E  20                 	db	32
   902  00FD0F  20                 	db	32
   903  00FD10  20                 	db	32
   904  00FD11  20                 	db	32
   905  00FD12  00                 	db	0
   906  00FD13                     STR_36:
   907  00FD13  33                 	db	51	;'3'
   908  00FD14  2E                 	db	46
   909  00FD15  20                 	db	32
   910  00FD16  4C                 	db	76	;'L'
   911  00FD17  4F                 	db	79	;'O'
   912  00FD18  47                 	db	71	;'G'
   913  00FD19  53                 	db	83	;'S'
   914  00FD1A  20                 	db	32
   915  00FD1B  20                 	db	32
   916  00FD1C  20                 	db	32
   917  00FD1D  20                 	db	32
   918  00FD1E  20                 	db	32
   919  00FD1F  20                 	db	32
   920  00FD20  20                 	db	32
   921  00FD21  20                 	db	32
   922  00FD22  20                 	db	32
   923  00FD23  00                 	db	0
   924  00FD24                     STR_32:
   925  00FD24  32                 	db	50	;'2'
   926  00FD25  2E                 	db	46
   927  00FD26  20                 	db	32
   928  00FD27  53                 	db	83	;'S'
   929  00FD28  4F                 	db	79	;'O'
   930  00FD29  52                 	db	82	;'R'
   931  00FD2A  54                 	db	84	;'T'
   932  00FD2B  20                 	db	32
   933  00FD2C  20                 	db	32
   934  00FD2D  20                 	db	32
   935  00FD2E  20                 	db	32
   936  00FD2F  20                 	db	32
   937  00FD30  20                 	db	32
   938  00FD31  20                 	db	32
   939  00FD32  20                 	db	32
   940  00FD33  20                 	db	32
   941  00FD34  00                 	db	0
   942  00FD35                     STR_33:
   943  00FD35  31                 	db	49	;'1'
   944  00FD36  2E                 	db	46
   945  00FD37  20                 	db	32
   946  00FD38  44                 	db	68	;'D'
   947  00FD39  41                 	db	65	;'A'
   948  00FD3A  54                 	db	84	;'T'
   949  00FD3B  45                 	db	69	;'E'
   950  00FD3C  2F                 	db	47
   951  00FD3D  54                 	db	84	;'T'
   952  00FD3E  49                 	db	73	;'I'
   953  00FD3F  4D                 	db	77	;'M'
   954  00FD40  45                 	db	69	;'E'
   955  00FD41  20                 	db	32
   956  00FD42  20                 	db	32
   957  00FD43  20                 	db	32
   958  00FD44  20                 	db	32
   959  00FD45  00                 	db	0
   960  00FD46                     STR_24:
   961  00FD46  20                 	db	32
   962  00FD47  2D                 	db	45
   963  00FD48  2D                 	db	45
   964  00FD49  20                 	db	32
   965  00FD4A  50                 	db	80	;'P'
   966  00FD4B  4F                 	db	79	;'O'
   967  00FD4C  50                 	db	80	;'P'
   968  00FD4D  20                 	db	32
   969  00FD4E  20                 	db	32
   970  00FD4F  43                 	db	67	;'C'
   971  00FD50  41                 	db	65	;'A'
   972  00FD51  4E                 	db	78	;'N'
   973  00FD52  20                 	db	32
   974  00FD53  2D                 	db	45
   975  00FD54  2D                 	db	45
   976  00FD55  20                 	db	32
   977  00FD56  00                 	db	0
   978  00FD57                     STR_26:
   979  00FD57  20                 	db	32
   980  00FD58  2D                 	db	45
   981  00FD59  2D                 	db	45
   982  00FD5A  20                 	db	32
   983  00FD5B  53                 	db	83	;'S'
   984  00FD5C  4F                 	db	79	;'O'
   985  00FD5D  55                 	db	85	;'U'
   986  00FD5E  50                 	db	80	;'P'
   987  00FD5F  20                 	db	32
   988  00FD60  43                 	db	67	;'C'
   989  00FD61  41                 	db	65	;'A'
   990  00FD62  4E                 	db	78	;'N'
   991  00FD63  20                 	db	32
   992  00FD64  2D                 	db	45
   993  00FD65  2D                 	db	45
   994  00FD66  20                 	db	32
   995  00FD67  00                 	db	0
   996  00FD68                     STR_28:
   997  00FD68  2D                 	db	45
   998  00FD69  2D                 	db	45
   999  00FD6A  20                 	db	32
  1000  00FD6B  54                 	db	84	;'T'
  1001  00FD6C  4F                 	db	79	;'O'
  1002  00FD6D  54                 	db	84	;'T'
  1003  00FD6E  41                 	db	65	;'A'
  1004  00FD6F  4C                 	db	76	;'L'
  1005  00FD70  20                 	db	32
  1006  00FD71  43                 	db	67	;'C'
  1007  00FD72  41                 	db	65	;'A'
  1008  00FD73  4E                 	db	78	;'N'
  1009  00FD74  53                 	db	83	;'S'
  1010  00FD75  20                 	db	32
  1011  00FD76  2D                 	db	45
  1012  00FD77  2D                 	db	45
  1013  00FD78  00                 	db	0
  1014  00FD79                     STR_39:
  1015  00FD79  4C                 	db	76	;'L'
  1016  00FD7A  4F                 	db	79	;'O'
  1017  00FD7B  47                 	db	71	;'G'
  1018  00FD7C  20                 	db	32
  1019  00FD7D  31                 	db	49	;'1'
  1020  00FD7E  20                 	db	32
  1021  00FD7F  20                 	db	32
  1022  00FD80  20                 	db	32
  1023  00FD81  20                 	db	32
  1024  00FD82  20                 	db	32
  1025  00FD83  20                 	db	32
  1026  00FD84  20                 	db	32
  1027  00FD85  20                 	db	32
  1028  00FD86  20                 	db	32
  1029  00FD87  20                 	db	32
  1030  00FD88  3C                 	db	60	;'<'
  1031  00FD89  00                 	db	0
  1032  00FD8A                     STR_42:
  1033  00FD8A  4C                 	db	76	;'L'
  1034  00FD8B  4F                 	db	79	;'O'
  1035  00FD8C  47                 	db	71	;'G'
  1036  00FD8D  20                 	db	32
  1037  00FD8E  32                 	db	50	;'2'
  1038  00FD8F  20                 	db	32
  1039  00FD90  20                 	db	32
  1040  00FD91  20                 	db	32
  1041  00FD92  20                 	db	32
  1042  00FD93  20                 	db	32
  1043  00FD94  20                 	db	32
  1044  00FD95  20                 	db	32
  1045  00FD96  20                 	db	32
  1046  00FD97  20                 	db	32
  1047  00FD98  20                 	db	32
  1048  00FD99  3C                 	db	60	;'<'
  1049  00FD9A  00                 	db	0
  1050  00FD9B                     STR_46:
  1051  00FD9B  4C                 	db	76	;'L'
  1052  00FD9C  4F                 	db	79	;'O'
  1053  00FD9D  47                 	db	71	;'G'
  1054  00FD9E  20                 	db	32
  1055  00FD9F  33                 	db	51	;'3'
  1056  00FDA0  20                 	db	32
  1057  00FDA1  20                 	db	32
  1058  00FDA2  20                 	db	32
  1059  00FDA3  20                 	db	32
  1060  00FDA4  20                 	db	32
  1061  00FDA5  20                 	db	32
  1062  00FDA6  20                 	db	32
  1063  00FDA7  20                 	db	32
  1064  00FDA8  20                 	db	32
  1065  00FDA9  20                 	db	32
  1066  00FDAA  3C                 	db	60	;'<'
  1067  00FDAB  00                 	db	0
  1068  00FDAC                     STR_50:
  1069  00FDAC  4C                 	db	76	;'L'
  1070  00FDAD  4F                 	db	79	;'O'
  1071  00FDAE  47                 	db	71	;'G'
  1072  00FDAF  20                 	db	32
  1073  00FDB0  34                 	db	52	;'4'
  1074  00FDB1  20                 	db	32
  1075  00FDB2  20                 	db	32
  1076  00FDB3  20                 	db	32
  1077  00FDB4  20                 	db	32
  1078  00FDB5  20                 	db	32
  1079  00FDB6  20                 	db	32
  1080  00FDB7  20                 	db	32
  1081  00FDB8  20                 	db	32
  1082  00FDB9  20                 	db	32
  1083  00FDBA  20                 	db	32
  1084  00FDBB  3C                 	db	60	;'<'
  1085  00FDBC  00                 	db	0
  1086  00FDBD                     STR_38:
  1087  00FDBD  33                 	db	51	;'3'
  1088  00FDBE  2E                 	db	46
  1089  00FDBF  20                 	db	32
  1090  00FDC0  4C                 	db	76	;'L'
  1091  00FDC1  4F                 	db	79	;'O'
  1092  00FDC2  47                 	db	71	;'G'
  1093  00FDC3  53                 	db	83	;'S'
  1094  00FDC4  20                 	db	32
  1095  00FDC5  20                 	db	32
  1096  00FDC6  20                 	db	32
  1097  00FDC7  20                 	db	32
  1098  00FDC8  20                 	db	32
  1099  00FDC9  20                 	db	32
  1100  00FDCA  20                 	db	32
  1101  00FDCB  20                 	db	32
  1102  00FDCC  3C                 	db	60	;'<'
  1103  00FDCD  00                 	db	0
  1104  00FDCE                     STR_34:
  1105  00FDCE  32                 	db	50	;'2'
  1106  00FDCF  2E                 	db	46
  1107  00FDD0  20                 	db	32
  1108  00FDD1  53                 	db	83	;'S'
  1109  00FDD2  4F                 	db	79	;'O'
  1110  00FDD3  52                 	db	82	;'R'
  1111  00FDD4  54                 	db	84	;'T'
  1112  00FDD5  20                 	db	32
  1113  00FDD6  20                 	db	32
  1114  00FDD7  20                 	db	32
  1115  00FDD8  20                 	db	32
  1116  00FDD9  20                 	db	32
  1117  00FDDA  20                 	db	32
  1118  00FDDB  20                 	db	32
  1119  00FDDC  20                 	db	32
  1120  00FDDD  3C                 	db	60	;'<'
  1121  00FDDE  00                 	db	0
  1122  00FDDF                     STR_31:
  1123  00FDDF  31                 	db	49	;'1'
  1124  00FDE0  2E                 	db	46
  1125  00FDE1  20                 	db	32
  1126  00FDE2  44                 	db	68	;'D'
  1127  00FDE3  41                 	db	65	;'A'
  1128  00FDE4  54                 	db	84	;'T'
  1129  00FDE5  45                 	db	69	;'E'
  1130  00FDE6  2F                 	db	47
  1131  00FDE7  54                 	db	84	;'T'
  1132  00FDE8  49                 	db	73	;'I'
  1133  00FDE9  4D                 	db	77	;'M'
  1134  00FDEA  45                 	db	69	;'E'
  1135  00FDEB  20                 	db	32
  1136  00FDEC  20                 	db	32
  1137  00FDED  20                 	db	32
  1138  00FDEE  3C                 	db	60	;'<'
  1139  00FDEF  00                 	db	0
  1140  00FDF0                     STR_6:
  1141  00FDF0  50                 	db	80	;'P'
  1142  00FDF1  41                 	db	65	;'A'
  1143  00FDF2  55                 	db	85	;'U'
  1144  00FDF3  53                 	db	83	;'S'
  1145  00FDF4  45                 	db	69	;'E'
  1146  00FDF5  20                 	db	32
  1147  00FDF6  3C                 	db	60	;'<'
  1148  00FDF7  20                 	db	32
  1149  00FDF8  7C                 	db	124
  1150  00FDF9  20                 	db	32
  1151  00FDFA  42                 	db	66	;'B'
  1152  00FDFB  41                 	db	65	;'A'
  1153  00FDFC  43                 	db	67	;'C'
  1154  00FDFD  4B                 	db	75	;'K'
  1155  00FDFE  20                 	db	32
  1156  00FDFF  3E                 	db	62	;'>'
  1157  00FE00  00                 	db	0
  1158  00FE01                     STR_30:
  1159  00FE01  50                 	db	80	;'P'
  1160  00FE02  55                 	db	85	;'U'
  1161  00FE03  53                 	db	83	;'S'
  1162  00FE04  48                 	db	72	;'H'
  1163  00FE05  20                 	db	32
  1164  00FE06  54                 	db	84	;'T'
  1165  00FE07  4F                 	db	79	;'O'
  1166  00FE08  20                 	db	32
  1167  00FE09  43                 	db	67	;'C'
  1168  00FE0A  4F                 	db	79	;'O'
  1169  00FE0B  4E                 	db	78	;'N'
  1170  00FE0C  54                 	db	84	;'T'
  1171  00FE0D  49                 	db	73	;'I'
  1172  00FE0E  4E                 	db	78	;'N'
  1173  00FE0F  55                 	db	85	;'U'
  1174  00FE10  45                 	db	69	;'E'
  1175  00FE11  00                 	db	0
  1176  00FE12                     STR_27:
  1177  00FE12  4E                 	db	78	;'N'
  1178  00FE13  4C                 	db	76	;'L'
  1179  00FE14  41                 	db	65	;'A'
  1180  00FE15  42                 	db	66	;'B'
  1181  00FE16  3A                 	db	58	;':'
  1182  00FE17  20                 	db	32
  1183  00FE18  25                 	db	37
  1184  00FE19  64                 	db	100	;'d'
  1185  00FE1A  7C                 	db	124
  1186  00FE1B  4C                 	db	76	;'L'
  1187  00FE1C  41                 	db	65	;'A'
  1188  00FE1D  42                 	db	66	;'B'
  1189  00FE1E  3A                 	db	58	;':'
  1190  00FE1F  20                 	db	32
  1191  00FE20  25                 	db	37
  1192  00FE21  64                 	db	100	;'d'
  1193  00FE22  00                 	db	0
  1194  00FE23                     STR_25:
  1195  00FE23  4E                 	db	78	;'N'
  1196  00FE24  54                 	db	84	;'T'
  1197  00FE25  41                 	db	65	;'A'
  1198  00FE26  42                 	db	66	;'B'
  1199  00FE27  3A                 	db	58	;':'
  1200  00FE28  20                 	db	32
  1201  00FE29  25                 	db	37
  1202  00FE2A  64                 	db	100	;'d'
  1203  00FE2B  7C                 	db	124
  1204  00FE2C  54                 	db	84	;'T'
  1205  00FE2D  41                 	db	65	;'A'
  1206  00FE2E  42                 	db	66	;'B'
  1207  00FE2F  3A                 	db	58	;':'
  1208  00FE30  20                 	db	32
  1209  00FE31  25                 	db	37
  1210  00FE32  64                 	db	100	;'d'
  1211  00FE33  00                 	db	0
  1212  00FE34                     STR_83:
  1213  00FE34  4D                 	db	77	;'M'
  1214  00FE35  41                 	db	65	;'A'
  1215  00FE36  47                 	db	71	;'G'
  1216  00FE37  5F                 	db	95	;'_'
  1217  00FE38  73                 	db	115	;'s'
  1218  00FE39  69                 	db	105	;'i'
  1219  00FE3A  67                 	db	103	;'g'
  1220  00FE3B  6E                 	db	110	;'n'
  1221  00FE3C  61                 	db	97	;'a'
  1222  00FE3D  6C                 	db	108	;'l'
  1223  00FE3E  3A                 	db	58	;':'
  1224  00FE3F  20                 	db	32
  1225  00FE40  25                 	db	37
  1226  00FE41  64                 	db	100	;'d'
  1227  00FE42  20                 	db	32
  1228  00FE43  00                 	db	0
  1229  00FE44                     STR_103:
  1230  00FE44  54                 	db	84	;'T'
  1231  00FE45  53                 	db	83	;'S'
  1232  00FE46  54                 	db	84	;'T'
  1233  00FE47  3A                 	db	58	;':'
  1234  00FE48  20                 	db	32
  1235  00FE49  54                 	db	84	;'T'
  1236  00FE4A  49                 	db	73	;'I'
  1237  00FE4B  4C                 	db	76	;'L'
  1238  00FE4C  54                 	db	84	;'T'
  1239  00FE4D  20                 	db	32
  1240  00FE4E  53                 	db	83	;'S'
  1241  00FE4F  45                 	db	69	;'E'
  1242  00FE50  52                 	db	82	;'R'
  1243  00FE51  56                 	db	86	;'V'
  1244  00FE52  4F                 	db	79	;'O'
  1245  00FE53  00                 	db	0
  1246  00FE54                     STR_4:
  1247  00FE54  44                 	db	68	;'D'
  1248  00FE55  49                 	db	73	;'I'
  1249  00FE56  44                 	db	68	;'D'
  1250  00FE57  4E                 	db	78	;'N'
  1251  00FE58  27                 	db	39
  1252  00FE59  54                 	db	84	;'T'
  1253  00FE5A  20                 	db	32
  1254  00FE5B  43                 	db	67	;'C'
  1255  00FE5C  4F                 	db	79	;'O'
  1256  00FE5D  4D                 	db	77	;'M'
  1257  00FE5E  50                 	db	80	;'P'
  1258  00FE5F  4C                 	db	76	;'L'
  1259  00FE60  45                 	db	69	;'E'
  1260  00FE61  54                 	db	84	;'T'
  1261  00FE62  45                 	db	69	;'E'
  1262  00FE63  00                 	db	0
  1263  00FE64                     STR_80:
  1264  00FE64  49                 	db	73	;'I'
  1265  00FE65  52                 	db	82	;'R'
  1266  00FE66  5F                 	db	95	;'_'
  1267  00FE67  73                 	db	115	;'s'
  1268  00FE68  69                 	db	105	;'i'
  1269  00FE69  67                 	db	103	;'g'
  1270  00FE6A  6E                 	db	110	;'n'
  1271  00FE6B  61                 	db	97	;'a'
  1272  00FE6C  6C                 	db	108	;'l'
  1273  00FE6D  3A                 	db	58	;':'
  1274  00FE6E  20                 	db	32
  1275  00FE6F  25                 	db	37
  1276  00FE70  64                 	db	100	;'d'
  1277  00FE71  20                 	db	32
  1278  00FE72  00                 	db	0
  1279  00FE73                     STR_109:
  1280  00FE73  43                 	db	67	;'C'
  1281  00FE74  41                 	db	65	;'A'
  1282  00FE75  4D                 	db	77	;'M'
  1283  00FE76  20                 	db	32
  1284  00FE77  44                 	db	68	;'D'
  1285  00FE78  57                 	db	87	;'W'
  1286  00FE79  4E                 	db	78	;'N'
  1287  00FE7A  20                 	db	32
  1288  00FE7B  7C                 	db	124
  1289  00FE7C  52                 	db	82	;'R'
  1290  00FE7D  43                 	db	67	;'C'
  1291  00FE7E  30                 	db	48	;'0'
  1292  00FE7F  3D                 	db	61	;'='
  1293  00FE80  30                 	db	48	;'0'
  1294  00FE81  00                 	db	0
  1295  00FE82                     STR_108:
  1296  00FE82  43                 	db	67	;'C'
  1297  00FE83  41                 	db	65	;'A'
  1298  00FE84  4D                 	db	77	;'M'
  1299  00FE85  20                 	db	32
  1300  00FE86  55                 	db	85	;'U'
  1301  00FE87  50                 	db	80	;'P'
  1302  00FE88  20                 	db	32
  1303  00FE89  20                 	db	32
  1304  00FE8A  7C                 	db	124
  1305  00FE8B  52                 	db	82	;'R'
  1306  00FE8C  43                 	db	67	;'C'
  1307  00FE8D  30                 	db	48	;'0'
  1308  00FE8E  3D                 	db	61	;'='
  1309  00FE8F  31                 	db	49	;'1'
  1310  00FE90  00                 	db	0
  1311  00FE91                     STR_82:
  1312  00FE91  54                 	db	84	;'T'
  1313  00FE92  53                 	db	83	;'S'
  1314  00FE93  54                 	db	84	;'T'
  1315  00FE94  3A                 	db	58	;':'
  1316  00FE95  20                 	db	32
  1317  00FE96  4D                 	db	77	;'M'
  1318  00FE97  41                 	db	65	;'A'
  1319  00FE98  47                 	db	71	;'G'
  1320  00FE99  4E                 	db	78	;'N'
  1321  00FE9A  45                 	db	69	;'E'
  1322  00FE9B  54                 	db	84	;'T'
  1323  00FE9C  49                 	db	73	;'I'
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  4D                 	db	77	;'M'
  1326  00FE9F  00                 	db	0
  1327  00FEA0                     STR_107:
  1328  00FEA0  54                 	db	84	;'T'
  1329  00FEA1  53                 	db	83	;'S'
  1330  00FEA2  54                 	db	84	;'T'
  1331  00FEA3  3A                 	db	58	;':'
  1332  00FEA4  20                 	db	32
  1333  00FEA5  43                 	db	67	;'C'
  1334  00FEA6  41                 	db	65	;'A'
  1335  00FEA7  4D                 	db	77	;'M'
  1336  00FEA8  20                 	db	32
  1337  00FEA9  53                 	db	83	;'S'
  1338  00FEAA  45                 	db	69	;'E'
  1339  00FEAB  52                 	db	82	;'R'
  1340  00FEAC  56                 	db	86	;'V'
  1341  00FEAD  4F                 	db	79	;'O'
  1342  00FEAE  00                 	db	0
  1343  00FEAF                     STR_96:
  1344  00FEAF  54                 	db	84	;'T'
  1345  00FEB0  53                 	db	83	;'S'
  1346  00FEB1  54                 	db	84	;'T'
  1347  00FEB2  3A                 	db	58	;':'
  1348  00FEB3  20                 	db	32
  1349  00FEB4  50                 	db	80	;'P'
  1350  00FEB5  41                 	db	65	;'A'
  1351  00FEB6  4E                 	db	78	;'N'
  1352  00FEB7  20                 	db	32
  1353  00FEB8  53                 	db	83	;'S'
  1354  00FEB9  45                 	db	69	;'E'
  1355  00FEBA  52                 	db	82	;'R'
  1356  00FEBB  56                 	db	86	;'V'
  1357  00FEBC  4F                 	db	79	;'O'
  1358  00FEBD  00                 	db	0
  1359  00FEBE                     STR_75:
  1360  00FEBE  41                 	db	65	;'A'
  1361  00FEBF  4C                 	db	76	;'L'
  1362  00FEC0  47                 	db	71	;'G'
  1363  00FEC1  34                 	db	52	;'4'
  1364  00FEC2  3A                 	db	58	;':'
  1365  00FEC3  20                 	db	32
  1366  00FEC4  41                 	db	65	;'A'
  1367  00FEC5  4C                 	db	76	;'L'
  1368  00FEC6  4C                 	db	76	;'L'
  1369  00FEC7  20                 	db	32
  1370  00FEC8  43                 	db	67	;'C'
  1371  00FEC9  41                 	db	65	;'A'
  1372  00FECA  4E                 	db	78	;'N'
  1373  00FECB  53                 	db	83	;'S'
  1374  00FECC  00                 	db	0
  1375  00FECD                     STR_90:
  1376  00FECD  54                 	db	84	;'T'
  1377  00FECE  53                 	db	83	;'S'
  1378  00FECF  54                 	db	84	;'T'
  1379  00FED0  3A                 	db	58	;':'
  1380  00FED1  20                 	db	32
  1381  00FED2  44                 	db	68	;'D'
  1382  00FED3  43                 	db	67	;'C'
  1383  00FED4  20                 	db	32
  1384  00FED5  4D                 	db	77	;'M'
  1385  00FED6  4F                 	db	79	;'O'
  1386  00FED7  54                 	db	84	;'T'
  1387  00FED8  4F                 	db	79	;'O'
  1388  00FED9  52                 	db	82	;'R'
  1389  00FEDA  53                 	db	83	;'S'
  1390  00FEDB  00                 	db	0
  1391  00FEDC                     STR_70:
  1392  00FEDC  41                 	db	65	;'A'
  1393  00FEDD  4C                 	db	76	;'L'
  1394  00FEDE  47                 	db	71	;'G'
  1395  00FEDF  4F                 	db	79	;'O'
  1396  00FEE0  52                 	db	82	;'R'
  1397  00FEE1  49                 	db	73	;'I'
  1398  00FEE2  54                 	db	84	;'T'
  1399  00FEE3  48                 	db	72	;'H'
  1400  00FEE4  4D                 	db	77	;'M'
  1401  00FEE5  20                 	db	32
  1402  00FEE6  54                 	db	84	;'T'
  1403  00FEE7  45                 	db	69	;'E'
  1404  00FEE8  53                 	db	83	;'S'
  1405  00FEE9  54                 	db	84	;'T'
  1406  00FEEA  00                 	db	0
  1407  00FEEB                     STR_91:
  1408  00FEEB  50                 	db	80	;'P'
  1409  00FEEC  49                 	db	73	;'I'
  1410  00FEED  4E                 	db	78	;'N'
  1411  00FEEE  20                 	db	32
  1412  00FEEF  52                 	db	82	;'R'
  1413  00FEF0  41                 	db	65	;'A'
  1414  00FEF1  35                 	db	53	;'5'
  1415  00FEF2  20                 	db	32
  1416  00FEF3  48                 	db	72	;'H'
  1417  00FEF4  49                 	db	73	;'I'
  1418  00FEF5  47                 	db	71	;'G'
  1419  00FEF6  48                 	db	72	;'H'
  1420  00FEF7  2E                 	db	46
  1421  00FEF8  00                 	db	0
  1422  00FEF9                     STR_73:
  1423  00FEF9  41                 	db	65	;'A'
  1424  00FEFA  4C                 	db	76	;'L'
  1425  00FEFB  47                 	db	71	;'G'
  1426  00FEFC  32                 	db	50	;'2'
  1427  00FEFD  3A                 	db	58	;':'
  1428  00FEFE  20                 	db	32
  1429  00FEFF  31                 	db	49	;'1'
  1430  00FF00  32                 	db	50	;'2'
  1431  00FF01  20                 	db	32
  1432  00FF02  43                 	db	67	;'C'
  1433  00FF03  41                 	db	65	;'A'
  1434  00FF04  4E                 	db	78	;'N'
  1435  00FF05  53                 	db	83	;'S'
  1436  00FF06  00                 	db	0
  1437  00FF07                     STR_76:
  1438  00FF07  41                 	db	65	;'A'
  1439  00FF08  4C                 	db	76	;'L'
  1440  00FF09  47                 	db	71	;'G'
  1441  00FF0A  35                 	db	53	;'5'
  1442  00FF0B  3A                 	db	58	;':'
  1443  00FF0C  20                 	db	32
  1444  00FF0D  4E                 	db	78	;'N'
  1445  00FF0E  4F                 	db	79	;'O'
  1446  00FF0F  20                 	db	32
  1447  00FF10  43                 	db	67	;'C'
  1448  00FF11  41                 	db	65	;'A'
  1449  00FF12  4E                 	db	78	;'N'
  1450  00FF13  53                 	db	83	;'S'
  1451  00FF14  00                 	db	0
  1452  00FF15                     STR_71:
  1453  00FF15  50                 	db	80	;'P'
  1454  00FF16  55                 	db	85	;'U'
  1455  00FF17  53                 	db	83	;'S'
  1456  00FF18  48                 	db	72	;'H'
  1457  00FF19  20                 	db	32
  1458  00FF1A  54                 	db	84	;'T'
  1459  00FF1B  4F                 	db	79	;'O'
  1460  00FF1C  20                 	db	32
  1461  00FF1D  53                 	db	83	;'S'
  1462  00FF1E  54                 	db	84	;'T'
  1463  00FF1F  41                 	db	65	;'A'
  1464  00FF20  52                 	db	82	;'R'
  1465  00FF21  54                 	db	84	;'T'
  1466  00FF22  00                 	db	0
  1467  00FF23                     STR_23:
  1468  00FF23  25                 	db	37
  1469  00FF24  64                 	db	100	;'d'
  1470  00FF25  20                 	db	32
  1471  00FF26  4D                 	db	77	;'M'
  1472  00FF27  49                 	db	73	;'I'
  1473  00FF28  4E                 	db	78	;'N'
  1474  00FF29  20                 	db	32
  1475  00FF2A  25                 	db	37
  1476  00FF2B  64                 	db	100	;'d'
  1477  00FF2C  20                 	db	32
  1478  00FF2D  53                 	db	83	;'S'
  1479  00FF2E  45                 	db	69	;'E'
  1480  00FF2F  43                 	db	67	;'C'
  1481  00FF30  00                 	db	0
  1482  00FF31                     STR_2:
  1483  00FF31  54                 	db	84	;'T'
  1484  00FF32  49                 	db	73	;'I'
  1485  00FF33  4D                 	db	77	;'M'
  1486  00FF34  45                 	db	69	;'E'
  1487  00FF35  3A                 	db	58	;':'
  1488  00FF36  20                 	db	32
  1489  00FF37  25                 	db	37
  1490  00FF38  64                 	db	100	;'d'
  1491  00FF39  3A                 	db	58	;':'
  1492  00FF3A  25                 	db	37
  1493  00FF3B  30                 	db	48	;'0'
  1494  00FF3C  32                 	db	50	;'2'
  1495  00FF3D  64                 	db	100	;'d'
  1496  00FF3E  00                 	db	0
  1497  00FF3F                     STR_79:
  1498  00FF3F  54                 	db	84	;'T'
  1499  00FF40  53                 	db	83	;'S'
  1500  00FF41  54                 	db	84	;'T'
  1501  00FF42  3A                 	db	58	;':'
  1502  00FF43  20                 	db	32
  1503  00FF44  49                 	db	73	;'I'
  1504  00FF45  52                 	db	82	;'R'
  1505  00FF46  20                 	db	32
  1506  00FF47  53                 	db	83	;'S'
  1507  00FF48  4E                 	db	78	;'N'
  1508  00FF49  53                 	db	83	;'S'
  1509  00FF4A  52                 	db	82	;'R'
  1510  00FF4B  00                 	db	0
  1511  00FF4C                     STR_65:
  1512  00FF4C  54                 	db	84	;'T'
  1513  00FF4D  49                 	db	73	;'I'
  1514  00FF4E  4D                 	db	77	;'M'
  1515  00FF4F  45                 	db	69	;'E'
  1516  00FF50  20                 	db	32
  1517  00FF51  25                 	db	37
  1518  00FF52  64                 	db	100	;'d'
  1519  00FF53  3A                 	db	58	;':'
  1520  00FF54  25                 	db	37
  1521  00FF55  30                 	db	48	;'0'
  1522  00FF56  32                 	db	50	;'2'
  1523  00FF57  64                 	db	100	;'d'
  1524  00FF58  00                 	db	0
  1525  00FF59                     STR_74:
  1526  00FF59  41                 	db	65	;'A'
  1527  00FF5A  4C                 	db	76	;'L'
  1528  00FF5B  47                 	db	71	;'G'
  1529  00FF5C  33                 	db	51	;'3'
  1530  00FF5D  3A                 	db	58	;':'
  1531  00FF5E  20                 	db	32
  1532  00FF5F  31                 	db	49	;'1'
  1533  00FF60  20                 	db	32
  1534  00FF61  43                 	db	67	;'C'
  1535  00FF62  41                 	db	65	;'A'
  1536  00FF63  4E                 	db	78	;'N'
  1537  00FF64  00                 	db	0
  1538  00FF65                     STR_93:
  1539  00FF65  50                 	db	80	;'P'
  1540  00FF66  49                 	db	73	;'I'
  1541  00FF67  4E                 	db	78	;'N'
  1542  00FF68  20                 	db	32
  1543  00FF69  52                 	db	82	;'R'
  1544  00FF6A  41                 	db	65	;'A'
  1545  00FF6B  33                 	db	51	;'3'
  1546  00FF6C  2E                 	db	46
  1547  00FF6D  2E                 	db	46
  1548  00FF6E  2E                 	db	46
  1549  00FF6F  00                 	db	0
  1550  00FF70                     STR_95:
  1551  00FF70  50                 	db	80	;'P'
  1552  00FF71  49                 	db	73	;'I'
  1553  00FF72  4E                 	db	78	;'N'
  1554  00FF73  20                 	db	32
  1555  00FF74  52                 	db	82	;'R'
  1556  00FF75  41                 	db	65	;'A'
  1557  00FF76  34                 	db	52	;'4'
  1558  00FF77  2E                 	db	46
  1559  00FF78  2E                 	db	46
  1560  00FF79  2E                 	db	46
  1561  00FF7A  00                 	db	0
  1562  00FF7B                     STR_64:
  1563  00FF7B  53                 	db	83	;'S'
  1564  00FF7C  4F                 	db	79	;'O'
  1565  00FF7D  52                 	db	82	;'R'
  1566  00FF7E  54                 	db	84	;'T'
  1567  00FF7F  49                 	db	73	;'I'
  1568  00FF80  4E                 	db	78	;'N'
  1569  00FF81  47                 	db	71	;'G'
  1570  00FF82  2E                 	db	46
  1571  00FF83  2E                 	db	46
  1572  00FF84  2E                 	db	46
  1573  00FF85  00                 	db	0
  1574  00FF86                     STR_84:
  1575  00FF86  54                 	db	84	;'T'
  1576  00FF87  53                 	db	83	;'S'
  1577  00FF88  54                 	db	84	;'T'
  1578  00FF89  3A                 	db	58	;':'
  1579  00FF8A  20                 	db	32
  1580  00FF8B  43                 	db	67	;'C'
  1581  00FF8C  4F                 	db	79	;'O'
  1582  00FF8D  4E                 	db	78	;'N'
  1583  00FF8E  44                 	db	68	;'D'
  1584  00FF8F  00                 	db	0
  1585  00FF90                     STR_88:
  1586  00FF90  41                 	db	65	;'A'
  1587  00FF91  43                 	db	67	;'C'
  1588  00FF92  54                 	db	84	;'T'
  1589  00FF93  55                 	db	85	;'U'
  1590  00FF94  41                 	db	65	;'A'
  1591  00FF95  54                 	db	84	;'T'
  1592  00FF96  4F                 	db	79	;'O'
  1593  00FF97  52                 	db	82	;'R'
  1594  00FF98  53                 	db	83	;'S'
  1595  00FF99  00                 	db	0
  1596  00FF9A                     STR_22:
  1597  00FF9A  44                 	db	68	;'D'
  1598  00FF9B  55                 	db	85	;'U'
  1599  00FF9C  52                 	db	82	;'R'
  1600  00FF9D  41                 	db	65	;'A'
  1601  00FF9E  54                 	db	84	;'T'
  1602  00FF9F  49                 	db	73	;'I'
  1603  00FFA0  4F                 	db	79	;'O'
  1604  00FFA1  4E                 	db	78	;'N'
  1605  00FFA2  3A                 	db	58	;':'
  1606  00FFA3  00                 	db	0
  1607  00FFA4                     STR_86:
  1608  00FFA4  43                 	db	67	;'C'
  1609  00FFA5  4F                 	db	79	;'O'
  1610  00FFA6  4E                 	db	78	;'N'
  1611  00FFA7  44                 	db	68	;'D'
  1612  00FFA8  3A                 	db	58	;':'
  1613  00FFA9  20                 	db	32
  1614  00FFAA  25                 	db	37
  1615  00FFAB  64                 	db	100	;'d'
  1616  00FFAC  00                 	db	0
  1617  00FFAD                     STR_77:
  1618  00FFAD  53                 	db	83	;'S'
  1619  00FFAE  45                 	db	69	;'E'
  1620  00FFAF  4E                 	db	78	;'N'
  1621  00FFB0  53                 	db	83	;'S'
  1622  00FFB1  4F                 	db	79	;'O'
  1623  00FFB2  52                 	db	82	;'R'
  1624  00FFB3  53                 	db	83	;'S'
  1625  00FFB4  00                 	db	0
  1626  00FFB5                     STR_130:
  1627  00FFB5  28                 	db	40
  1628  00FFB6  6E                 	db	110	;'n'
  1629  00FFB7  75                 	db	117	;'u'
  1630  00FFB8  6C                 	db	108	;'l'
  1631  00FFB9  6C                 	db	108	;'l'
  1632  00FFBA  29                 	db	41
  1633  00FFBB  00                 	db	0
  1634  00FFBC                     STR_67:
  1635  00FFBC  46                 	db	70	;'F'
  1636  00FFBD  41                 	db	65	;'A'
  1637  00FFBE  49                 	db	73	;'I'
  1638  00FFBF  4C                 	db	76	;'L'
  1639  00FFC0  45                 	db	69	;'E'
  1640  00FFC1  44                 	db	68	;'D'
  1641  00FFC2  00                 	db	0
  1642  00FFC3                     STR_7:
  1643  00FFC3  53                 	db	83	;'S'
  1644  00FFC4  54                 	db	84	;'T'
  1645  00FFC5  41                 	db	65	;'A'
  1646  00FFC6  52                 	db	82	;'R'
  1647  00FFC7  54                 	db	84	;'T'
  1648  00FFC8  3A                 	db	58	;':'
  1649  00FFC9  00                 	db	0
  1650  00FFCA                     STR_9:
  1651  00FFCA  46                 	db	70	;'F'
  1652  00FFCB  45                 	db	69	;'E'
  1653  00FFCC  42                 	db	66	;'B'
  1654  00FFCD  00                 	db	0
  1655  00FFCE                     STR_19:
  1656  00FFCE  44                 	db	68	;'D'
  1657  00FFCF  45                 	db	69	;'E'
  1658  00FFD0  43                 	db	67	;'C'
  1659  00FFD1  00                 	db	0
  1660  00FFD2                     STR_15:
  1661  00FFD2  41                 	db	65	;'A'
  1662  00FFD3  55                 	db	85	;'U'
  1663  00FFD4  47                 	db	71	;'G'
  1664  00FFD5  00                 	db	0
  1665  00FFD6                     STR_14:
  1666  00FFD6  4A                 	db	74	;'J'
  1667  00FFD7  55                 	db	85	;'U'
  1668  00FFD8  4C                 	db	76	;'L'
  1669  00FFD9  00                 	db	0
  1670  00FFDA                     STR_8:
  1671  00FFDA  4A                 	db	74	;'J'
  1672  00FFDB  41                 	db	65	;'A'
  1673  00FFDC  4E                 	db	78	;'N'
  1674  00FFDD  00                 	db	0
  1675  00FFDE                     STR_13:
  1676  00FFDE  4A                 	db	74	;'J'
  1677  00FFDF  55                 	db	85	;'U'
  1678  00FFE0  4E                 	db	78	;'N'
  1679  00FFE1  00                 	db	0
  1680  00FFE2                     STR_16:
  1681  00FFE2  53                 	db	83	;'S'
  1682  00FFE3  45                 	db	69	;'E'
  1683  00FFE4  50                 	db	80	;'P'
  1684  00FFE5  00                 	db	0
  1685  00FFE6                     STR_10:
  1686  00FFE6  4D                 	db	77	;'M'
  1687  00FFE7  41                 	db	65	;'A'
  1688  00FFE8  52                 	db	82	;'R'
  1689  00FFE9  00                 	db	0
  1690  00FFEA                     STR_11:
  1691  00FFEA  41                 	db	65	;'A'
  1692  00FFEB  50                 	db	80	;'P'
  1693  00FFEC  52                 	db	82	;'R'
  1694  00FFED  00                 	db	0
  1695  00FFEE                     STR_20:
  1696  00FFEE  45                 	db	69	;'E'
  1697  00FFEF  52                 	db	82	;'R'
  1698  00FFF0  52                 	db	82	;'R'
  1699  00FFF1  00                 	db	0
  1700  00FFF2                     STR_17:
  1701  00FFF2  4F                 	db	79	;'O'
  1702  00FFF3  43                 	db	67	;'C'
  1703  00FFF4  54                 	db	84	;'T'
  1704  00FFF5  00                 	db	0
  1705  00FFF6                     STR_18:
  1706  00FFF6  4E                 	db	78	;'N'
  1707  00FFF7  4F                 	db	79	;'O'
  1708  00FFF8  56                 	db	86	;'V'
  1709  00FFF9  00                 	db	0
  1710  00FFFA                     STR_12:
  1711  00FFFA  4D                 	db	77	;'M'
  1712  00FFFB  41                 	db	65	;'A'
  1713  00FFFC  59                 	db	89	;'Y'
  1714  00FFFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  00FFFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	cinit
  1720  00505A                     __pcinit:
  1721                           	opt stack 0
  1722  00505A                     start_initialization:
  1723                           	opt stack 0
  1724  00505A                     __initialization:
  1725                           	opt stack 0
  1726                           
  1727                           ; Initialize objects allocated to BANK1 (8 bytes)
  1728                           ; load TBLPTR registers with __pidataBANK1
  1729  00505A  0EFA               	movlw	low __pidataBANK1
  1730  00505C  6EF6               	movwf	tblptrl,c
  1731  00505E  0E57               	movlw	high __pidataBANK1
  1732  005060  6EF7               	movwf	tblptrh,c
  1733  005062  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1734  005064  6EF8               	movwf	tblptru,c
  1735  005066  EE01  F047         	lfsr	0,__pdataBANK1
  1736  00506A  EE10 F008          	lfsr	1,8
  1737  00506E                     copy_data0:
  1738  00506E  0009               	tblrd		*+
  1739  005070  CFF5 FFEE          	movff	tablat,postinc0
  1740  005074  50E5               	movf	postdec1,w,c
  1741  005076  50E1               	movf	fsr1l,w,c
  1742  005078  E1FA               	bnz	copy_data0
  1743                           
  1744                           ; Clear objects allocated to BANK1 (71 bytes)
  1745  00507A  EE01  F000         	lfsr	0,__pbssBANK1
  1746  00507E  0E47               	movlw	71
  1747  005080                     clear_0:
  1748  005080  6AEE               	clrf	postinc0,c
  1749  005082  06E8               	decf	wreg,f,c
  1750  005084  E1FD               	bnz	clear_0
  1751                           
  1752                           ; Clear objects allocated to BANK0 (38 bytes)
  1753  005086  EE00  F0DA         	lfsr	0,__pbssBANK0
  1754  00508A  0E26               	movlw	38
  1755  00508C                     clear_1:
  1756  00508C  6AEE               	clrf	postinc0,c
  1757  00508E  06E8               	decf	wreg,f,c
  1758  005090  E1FD               	bnz	clear_1
  1759                           
  1760                           ; Clear objects allocated to COMRAM (35 bytes)
  1761  005092  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1762  005096  0E23               	movlw	35
  1763  005098                     clear_2:
  1764  005098  6AEE               	clrf	postinc0,c
  1765  00509A  06E8               	decf	wreg,f,c
  1766  00509C  E1FD               	bnz	clear_2
  1767  00509E                     end_of_initialization:
  1768                           	opt stack 0
  1769  00509E                     __end_of__initialization:
  1770                           	opt stack 0
  1771  00509E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1772  0050A0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  0050A2  0100               	movlb	0
  1774  0050A4  EF5E  F022         	goto	_main	;jump to C main() function
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  00005B                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  00005B                     _back:
  1788                           	opt stack 0
  1789  00005B                     	ds	2
  1790  00005D                     _down:
  1791                           	opt stack 0
  1792  00005D                     	ds	2
  1793  00005F                     _enter:
  1794                           	opt stack 0
  1795  00005F                     	ds	2
  1796  000061                     _f_panning_to_bin:
  1797                           	opt stack 0
  1798  000061                     	ds	2
  1799  000063                     _log_completion:
  1800                           	opt stack 0
  1801  000063                     	ds	2
  1802  000065                     _log_count_pop_no_tab:
  1803                           	opt stack 0
  1804  000065                     	ds	2
  1805  000067                     _log_count_pop_w_tab:
  1806                           	opt stack 0
  1807  000067                     	ds	2
  1808  000069                     _most_recent_sort_time:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _pan_servo_state:
  1812                           	opt stack 0
  1813  00006B                     	ds	2
  1814  00006D                     _servo_timer_counter:
  1815                           	opt stack 0
  1816  00006D                     	ds	2
  1817  00006F                     _servo_timer_target:
  1818                           	opt stack 0
  1819  00006F                     	ds	2
  1820  000071                     _tilt_servo_state:
  1821                           	opt stack 0
  1822  000071                     	ds	2
  1823  000073                     _timer2_counter:
  1824                           	opt stack 0
  1825  000073                     	ds	2
  1826  000075                     _up:
  1827                           	opt stack 0
  1828  000075                     	ds	2
  1829  000077                     _was_low_1:
  1830                           	opt stack 0
  1831  000077                     	ds	2
  1832  000079                     _was_low_2:
  1833                           	opt stack 0
  1834  000079                     	ds	2
  1835  00007B                     _was_low_3:
  1836                           	opt stack 0
  1837  00007B                     	ds	2
  1838  00007D                     _input:
  1839                           	opt stack 0
  1840  00007D                     	ds	1
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssBANK0
  1851  0000DA                     __pbssBANK0:
  1852                           	opt stack 0
  1853  0000DA                     _servoTimes:
  1854                           	opt stack 0
  1855  0000DA                     	ds	8
  1856  0000E2                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000E2                     	ds	4
  1859  0000E6                     _IR_signal:
  1860                           	opt stack 0
  1861  0000E6                     	ds	2
  1862  0000E8                     _MAG_signal:
  1863                           	opt stack 0
  1864  0000E8                     	ds	2
  1865  0000EA                     _RTCflag:
  1866                           	opt stack 0
  1867  0000EA                     	ds	2
  1868  0000EC                     _cur_state:
  1869                           	opt stack 0
  1870  0000EC                     	ds	2
  1871  0000EE                     _f_arm_position:
  1872                           	opt stack 0
  1873  0000EE                     	ds	2
  1874  0000F0                     _f_lastCan:
  1875                           	opt stack 0
  1876  0000F0                     	ds	2
  1877  0000F2                     _f_loadingNewCan:
  1878                           	opt stack 0
  1879  0000F2                     	ds	2
  1880  0000F4                     _log:
  1881                           	opt stack 0
  1882  0000F4                     	ds	2
  1883  0000F6                     _log_total_time:
  1884                           	opt stack 0
  1885  0000F6                     	ds	2
  1886  0000F8                     _logstate:
  1887                           	opt stack 0
  1888  0000F8                     	ds	2
  1889  0000FA                     _total_time:
  1890                           	opt stack 0
  1891  0000FA                     	ds	2
  1892  0000FC                     _machine_state:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _sel:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898  0000FE                     _count_total:
  1899                           	opt stack 0
  1900  0000FE                     	ds	2
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK1
  1911  000100                     __pbssBANK1:
  1912                           	opt stack 0
  1913  000100                     _log_startTime:
  1914                           	opt stack 0
  1915  000100                     	ds	14
  1916  00010E                     _startTime:
  1917                           	opt stack 0
  1918  00010E                     	ds	14
  1919  00011C                     _time:
  1920                           	opt stack 0
  1921  00011C                     	ds	7
  1922  000123                     _count_can_no_lab:
  1923                           	opt stack 0
  1924  000123                     	ds	2
  1925  000125                     _count_can_w_lab:
  1926                           	opt stack 0
  1927  000125                     	ds	2
  1928  000127                     _count_pop_no_tab:
  1929                           	opt stack 0
  1930  000127                     	ds	2
  1931  000129                     _count_pop_w_tab:
  1932                           	opt stack 0
  1933  000129                     	ds	2
  1934  00012B                     _cur_can:
  1935                           	opt stack 0
  1936  00012B                     	ds	2
  1937  00012D                     _debug:
  1938                           	opt stack 0
  1939  00012D                     	ds	2
  1940  00012F                     _f_ID_receive:
  1941                           	opt stack 0
  1942  00012F                     	ds	2
  1943  000131                     _f_can_coming_to_ID:
  1944                           	opt stack 0
  1945  000131                     	ds	2
  1946  000133                     _f_can_coming_to_distribution:
  1947                           	opt stack 0
  1948  000133                     	ds	2
  1949  000135                     _f_can_distributed:
  1950                           	opt stack 0
  1951  000135                     	ds	2
  1952  000137                     _f_most_recent_sort_time:
  1953                           	opt stack 0
  1954  000137                     	ds	2
  1955  000139                     _first:
  1956                           	opt stack 0
  1957  000139                     	ds	2
  1958  00013B                     _firstboot:
  1959                           	opt stack 0
  1960  00013B                     	ds	2
  1961  00013D                     _i:
  1962                           	opt stack 0
  1963  00013D                     	ds	2
  1964  00013F                     _log_count_can_no_lab:
  1965                           	opt stack 0
  1966  00013F                     	ds	2
  1967  000141                     _log_count_can_w_lab:
  1968                           	opt stack 0
  1969  000141                     	ds	2
  1970  000143                     _log_count_total:
  1971                           	opt stack 0
  1972  000143                     	ds	2
  1973  000145                     _var:
  1974                           	opt stack 0
  1975  000145                     	ds	2
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  000147                     __pdataBANK1:
  1987                           	opt stack 0
  1988  000147                     UI@F3241:
  1989                           	opt stack 0
  1990  000147                     	ds	4
  1991  00014B                     printRTC@F3231:
  1992                           	opt stack 0
  1993  00014B                     	ds	4
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003                           	psect	cstackBANK0
  2004  000080                     __pcstackBANK0:
  2005                           	opt stack 0
  2006  000080                     ??_delay_ms:
  2007  000080                     ??_isdigit:
  2008  000080                     ??_readADC:
  2009  000080                     ??_I2C_Master_Wait:
  2010  000080                     ?___wmul:
  2011                           	opt stack 0
  2012  000080                     ?___awmod:
  2013                           	opt stack 0
  2014  000080                     ?___lwdiv:
  2015                           	opt stack 0
  2016  000080                     ?___lldiv:
  2017                           	opt stack 0
  2018  000080                     lcdNibble@temp:
  2019                           	opt stack 0
  2020  000080                     initTime@m:
  2021                           	opt stack 0
  2022  000080                     updateServoPosition@time_us:
  2023                           	opt stack 0
  2024  000080                     EEPROM_read@address:
  2025                           	opt stack 0
  2026  000080                     ___wmul@multiplier:
  2027                           	opt stack 0
  2028  000080                     ___awmod@dividend:
  2029                           	opt stack 0
  2030  000080                     ___lwdiv@dividend:
  2031                           	opt stack 0
  2032  000080                     strcpy@to:
  2033                           	opt stack 0
  2034  000080                     ___lldiv@dividend:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x0
  2038  000080                     	ds	1
  2039  000081                     readADC@channel:
  2040                           	opt stack 0
  2041  000081                     I2C_Master_Read@a:
  2042                           	opt stack 0
  2043  000081                     lcdNibble@data:
  2044                           	opt stack 0
  2045  000081                     initTime@h:
  2046                           	opt stack 0
  2047  000081                     delay_ms@milliseconds:
  2048                           	opt stack 0
  2049  000081                     _isdigit$2086:
  2050                           	opt stack 0
  2051  000081                     I2C_Master_Write@d:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x1
  2055  000081                     	ds	1
  2056  000082                     ??_ID:
  2057  000082                     ??_readIR:
  2058  000082                     ??_readMAG:
  2059  000082                     I2C_Master_Read@temp:
  2060                           	opt stack 0
  2061  000082                     lcdInst@data:
  2062                           	opt stack 0
  2063  000082                     putch@data:
  2064                           	opt stack 0
  2065  000082                     initTime@w:
  2066                           	opt stack 0
  2067  000082                     isdigit@c:
  2068                           	opt stack 0
  2069  000082                     updateServoPosition@timer:
  2070                           	opt stack 0
  2071  000082                     ___wmul@multiplicand:
  2072                           	opt stack 0
  2073  000082                     ___awmod@divisor:
  2074                           	opt stack 0
  2075  000082                     ___lwdiv@divisor:
  2076                           	opt stack 0
  2077  000082                     strcpy@from:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2
  2081  000082                     	ds	1
  2082  000083                     ??_initLCD:
  2083  000083                     initTime@DD:
  2084                           	opt stack 0
  2085  000083                     getRTC@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x3
  2089  000083                     	ds	1
  2090  000084                     ??_updateServoPosition:
  2091  000084                     initTime@MM:
  2092                           	opt stack 0
  2093  000084                     _ID$1207:
  2094                           	opt stack 0
  2095  000084                     ___awmod@counter:
  2096                           	opt stack 0
  2097  000084                     readIR@res:
  2098                           	opt stack 0
  2099  000084                     readMAG@res:
  2100                           	opt stack 0
  2101  000084                     ___wmul@product:
  2102                           	opt stack 0
  2103  000084                     ___lwdiv@quotient:
  2104                           	opt stack 0
  2105  000084                     strcpy@cp:
  2106                           	opt stack 0
  2107  000084                     ___lldiv@divisor:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0x4
  2111  000084                     	ds	1
  2112  000085                     ??_initSortTimer:
  2113  000085                     initTime@YY:
  2114                           	opt stack 0
  2115  000085                     ___awmod@sign:
  2116                           	opt stack 0
  2117  000085                     ID@i:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x5
  2121  000085                     	ds	1
  2122  000086                     ??_getIR:
  2123  000086                     ??_getMAG:
  2124  000086                     ?___awdiv:
  2125                           	opt stack 0
  2126  000086                     initTime@s:
  2127                           	opt stack 0
  2128  000086                     ___lwdiv@counter:
  2129                           	opt stack 0
  2130  000086                     updateServoPosition@my_time:
  2131                           	opt stack 0
  2132  000086                     ___awdiv@dividend:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x6
  2136  000086                     	ds	1
  2137  000087                     ?___lwmod:
  2138                           	opt stack 0
  2139  000087                     ID@i_1209:
  2140                           	opt stack 0
  2141  000087                     getIR@i:
  2142                           	opt stack 0
  2143  000087                     ___lwmod@dividend:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x7
  2147  000087                     	ds	1
  2148  000088                     ??_Distribution:
  2149  000088                     ??_initServos:
  2150  000088                     initSortTimer@i:
  2151                           	opt stack 0
  2152  000088                     ___awdiv@divisor:
  2153                           	opt stack 0
  2154  000088                     ___lldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x8
  2158  000088                     	ds	1
  2159  000089                     ID@i_1210:
  2160                           	opt stack 0
  2161  000089                     ___lwmod@divisor:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x9
  2165  000089                     	ds	1
  2166  00008A                     ___awdiv@counter:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0xA
  2170  00008A                     	ds	1
  2171  00008B                     ___awdiv@sign:
  2172                           	opt stack 0
  2173  00008B                     ___lwmod@counter:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0xB
  2177  00008B                     	ds	1
  2178  00008C                     ___lldiv@counter:
  2179                           	opt stack 0
  2180  00008C                     ___awdiv@quotient:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0xC
  2184  00008C                     	ds	1
  2185  00008D                     I2C_Master_Init@c:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0xD
  2189  00008D                     	ds	1
  2190  00008E                     ?_printf:
  2191                           	opt stack 0
  2192  00008E                     printf@f:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0xE
  2196  00008E                     	ds	3
  2197  000091                     ??_I2C_Master_Init:
  2198                           
  2199                           ; 1 bytes @ 0x11
  2200  000091                     	ds	4
  2201  000095                     ??_loadRTC:
  2202                           
  2203                           ; 1 bytes @ 0x15
  2204  000095                     	ds	1
  2205  000096                     loadRTC@i:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x16
  2209  000096                     	ds	4
  2210  00009A                     ??_printf:
  2211                           
  2212                           ; 1 bytes @ 0x1A
  2213  00009A                     	ds	4
  2214  00009E                     printf@prec:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0x1E
  2218  00009E                     	ds	1
  2219  00009F                     printf@cp:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x1F
  2223  00009F                     	ds	2
  2224  0000A1                     printf@ap:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x21
  2228  0000A1                     	ds	2
  2229  0000A3                     printf@len:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x23
  2233  0000A3                     	ds	2
  2234  0000A5                     printf@val:
  2235                           	opt stack 0
  2236                           
  2237                           ; 2 bytes @ 0x25
  2238  0000A5                     	ds	2
  2239  0000A7                     printf@flag:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x27
  2243  0000A7                     	ds	1
  2244  0000A8                     printf@c:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x28
  2248  0000A8                     	ds	1
  2249  0000A9                     printf@width:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x29
  2253  0000A9                     	ds	2
  2254  0000AB                     ??_printRTC:
  2255  0000AB                     ??_algorithmTest:
  2256  0000AB                     ??_sensorTest:
  2257  0000AB                     ??_actuatorTest:
  2258  0000AB                     ??_arm:
  2259  0000AB                     ??_PortTestDC:
  2260  0000AB                     ??_SpeedTest:
  2261  0000AB                     ??_PortTestPusher:
  2262  0000AB                     ??_PlatformTest:
  2263  0000AB                     ??_BothServos:
  2264  0000AB                     ??_BlockerTest:
  2265  0000AB                     EEPROM_write@address:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x2B
  2269  0000AB                     	ds	1
  2270  0000AC                     BlockerTest@i:
  2271                           	opt stack 0
  2272  0000AC                     arm@on:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x2C
  2276  0000AC                     	ds	1
  2277  0000AD                     EEPROM_write@data:
  2278                           	opt stack 0
  2279  0000AD                     actuatorTest@i_1756:
  2280                           	opt stack 0
  2281  0000AD                     sensorTest@res:
  2282                           	opt stack 0
  2283  0000AD                     PlatformTest@res:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x2D
  2287  0000AD                     	ds	1
  2288  0000AE                     ??_EEPROM_write:
  2289  0000AE                     actuatorTest@i_1763:
  2290                           	opt stack 0
  2291  0000AE                     BlockerTest@cam_flag:
  2292                           	opt stack 0
  2293  0000AE                     printRTC@INT_time:
  2294                           	opt stack 0
  2295                           
  2296                           ; 14 bytes @ 0x2E
  2297  0000AE                     	ds	1
  2298  0000AF                     EEPROM_write@i:
  2299                           	opt stack 0
  2300  0000AF                     actuatorTest@i_1764:
  2301                           	opt stack 0
  2302  0000AF                     PlatformTest@res_1808:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x2F
  2306  0000AF                     	ds	1
  2307  0000B0                     EEPROM_write@i_1464:
  2308                           	opt stack 0
  2309  0000B0                     actuatorTest@i_1766:
  2310                           	opt stack 0
  2311  0000B0                     BlockerTest@cond_flag:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x30
  2315  0000B0                     	ds	1
  2316  0000B1                     ??_Loading:
  2317  0000B1                     logRun@num:
  2318                           	opt stack 0
  2319  0000B1                     actuatorTest@i_1767:
  2320                           	opt stack 0
  2321  0000B1                     PlatformTest@i:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x31
  2325  0000B1                     	ds	1
  2326  0000B2                     logRun@byte1:
  2327                           	opt stack 0
  2328  0000B2                     actuatorTest@i_1769:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x32
  2332  0000B2                     	ds	1
  2333  0000B3                     logRun@byte2:
  2334                           	opt stack 0
  2335  0000B3                     actuatorTest@i_1770:
  2336                           	opt stack 0
  2337  0000B3                     Loading@addr:
  2338                           	opt stack 0
  2339  0000B3                     PlatformTest@i_1812:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x33
  2343  0000B3                     	ds	1
  2344  0000B4                     logRun@byte3:
  2345                           	opt stack 0
  2346  0000B4                     actuatorTest@i_1772:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x34
  2350  0000B4                     	ds	1
  2351  0000B5                     Loading@byte1:
  2352                           	opt stack 0
  2353  0000B5                     logRun@byte_i:
  2354                           	opt stack 0
  2355  0000B5                     actuatorTest@i_1773:
  2356                           	opt stack 0
  2357  0000B5                     PlatformTest@i_1813:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x35
  2361  0000B5                     	ds	1
  2362  0000B6                     logRun@byte11:
  2363                           	opt stack 0
  2364  0000B6                     actuatorTest@i_1775:
  2365                           	opt stack 0
  2366  0000B6                     Loading@i_1183:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x36
  2370  0000B6                     	ds	1
  2371  0000B7                     actuatorTest@i_1776:
  2372                           	opt stack 0
  2373  0000B7                     logRun@i:
  2374                           	opt stack 0
  2375  0000B7                     PlatformTest@i_1814:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x37
  2379  0000B7                     	ds	1
  2380  0000B8                     actuatorTest@i_1778:
  2381                           	opt stack 0
  2382  0000B8                     Loading@i_1192:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x38
  2386  0000B8                     	ds	1
  2387  0000B9                     actuatorTest@i_1779:
  2388                           	opt stack 0
  2389  0000B9                     logRun@addr:
  2390                           	opt stack 0
  2391  0000B9                     PlatformTest@on:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x39
  2395  0000B9                     	ds	1
  2396  0000BA                     actuatorTest@i_1782:
  2397                           	opt stack 0
  2398  0000BA                     Loading@i_1194:
  2399                           	opt stack 0
  2400                           
  2401                           ; 2 bytes @ 0x3A
  2402  0000BA                     	ds	1
  2403  0000BB                     actuatorTest@i_1783:
  2404                           	opt stack 0
  2405                           
  2406                           ; 1 bytes @ 0x3B
  2407  0000BB                     	ds	1
  2408  0000BC                     actuatorTest@i_1785:
  2409                           	opt stack 0
  2410  0000BC                     printRTC@RTC_month:
  2411                           	opt stack 0
  2412  0000BC                     Loading@i_1195:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x3C
  2416  0000BC                     	ds	1
  2417  0000BD                     actuatorTest@i_1786:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x3D
  2421  0000BD                     	ds	1
  2422  0000BE                     actuatorTest@i_1788:
  2423                           	opt stack 0
  2424  0000BE                     Loading@i_1197:
  2425                           	opt stack 0
  2426  0000BE                     printRTC@month:
  2427                           	opt stack 0
  2428                           
  2429                           ; 4 bytes @ 0x3E
  2430  0000BE                     	ds	1
  2431  0000BF                     actuatorTest@i_1789:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0x3F
  2435  0000BF                     	ds	1
  2436  0000C0                     actuatorTest@i_1792:
  2437                           	opt stack 0
  2438  0000C0                     Loading@i:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x40
  2442  0000C0                     	ds	1
  2443  0000C1                     actuatorTest@i_1793:
  2444                           	opt stack 0
  2445                           
  2446                           ; 1 bytes @ 0x41
  2447  0000C1                     	ds	1
  2448  0000C2                     actuatorTest@i_1795:
  2449                           	opt stack 0
  2450  0000C2                     printRTC@i:
  2451                           	opt stack 0
  2452  0000C2                     Loading@j:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x42
  2456  0000C2                     	ds	1
  2457  0000C3                     actuatorTest@i_1796:
  2458                           	opt stack 0
  2459                           
  2460                           ; 1 bytes @ 0x43
  2461  0000C3                     	ds	1
  2462  0000C4                     ??_UI:
  2463  0000C4                     actuatorTest@i:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x44
  2467  0000C4                     	ds	2
  2468  0000C6                     ??_Test:
  2469  0000C6                     _UI$2449:
  2470                           	opt stack 0
  2471                           
  2472                           ; 2 bytes @ 0x46
  2473  0000C6                     	ds	2
  2474  0000C8                     UI@i:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x48
  2478  0000C8                     	ds	1
  2479  0000C9                     UI@i_409:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x49
  2483  0000C9                     	ds	1
  2484  0000CA                     UI@i_412:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x4A
  2488  0000CA                     	ds	1
  2489  0000CB                     UI@i_413:
  2490                           	opt stack 0
  2491                           
  2492                           ; 1 bytes @ 0x4B
  2493  0000CB                     	ds	1
  2494  0000CC                     UI@i_431:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x4C
  2498  0000CC                     	ds	1
  2499  0000CD                     UI@i_432:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x4D
  2503  0000CD                     	ds	1
  2504  0000CE                     UI@i_435:
  2505                           	opt stack 0
  2506                           
  2507                           ; 1 bytes @ 0x4E
  2508  0000CE                     	ds	1
  2509  0000CF                     UI@i_436:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x4F
  2513  0000CF                     	ds	1
  2514  0000D0                     UI@i_439:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x50
  2518  0000D0                     	ds	1
  2519  0000D1                     UI@i_440:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x51
  2523  0000D1                     	ds	1
  2524  0000D2                     UI@i_443:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x52
  2528  0000D2                     	ds	1
  2529  0000D3                     UI@i_444:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x53
  2533  0000D3                     	ds	1
  2534  0000D4                     UI@i_447:
  2535                           	opt stack 0
  2536                           
  2537                           ; 1 bytes @ 0x54
  2538  0000D4                     	ds	1
  2539  0000D5                     UI@i_448:
  2540                           	opt stack 0
  2541                           
  2542                           ; 1 bytes @ 0x55
  2543  0000D5                     	ds	1
  2544  0000D6                     UI@month:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x56
  2548  0000D6                     	ds	4
  2549  0000DA                     tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           postdec1	equ	0xFE5
  2556                           fsr1l	equ	0xFE1
  2557                           
  2558                           ; 1 bytes @ 0x5A
  2559                           
  2560                           	psect	cstackCOMRAM
  2561  000001                     __pcstackCOMRAM:
  2562                           	opt stack 0
  2563  000001                     ??_updateArmState:
  2564  000001                     ??i2_I2C_Master_Wait:
  2565  000001                     ??i2_delay_ms:
  2566  000001                     ??i2_isdigit:
  2567  000001                     ?i2___wmul:
  2568                           	opt stack 0
  2569  000001                     ?i2___lwmod:
  2570                           	opt stack 0
  2571  000001                     i2lcdNibble@temp:
  2572                           	opt stack 0
  2573  000001                     i2updateServoPosition@time_us:
  2574                           	opt stack 0
  2575  000001                     i2EEPROM_read@address:
  2576                           	opt stack 0
  2577  000001                     i2___wmul@multiplier:
  2578                           	opt stack 0
  2579  000001                     i2___lwmod@dividend:
  2580                           	opt stack 0
  2581  000001                     i2strcpy@to:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x0
  2585  000001                     	ds	1
  2586  000002                     i2I2C_Master_Read@a:
  2587                           	opt stack 0
  2588  000002                     i2lcdNibble@data:
  2589                           	opt stack 0
  2590  000002                     i2delay_ms@milliseconds:
  2591                           	opt stack 0
  2592  000002                     i2_isdigit$2086:
  2593                           	opt stack 0
  2594  000002                     i2I2C_Master_Write@d:
  2595                           	opt stack 0
  2596                           
  2597                           ; 2 bytes @ 0x1
  2598  000002                     	ds	1
  2599  000003                     i2I2C_Master_Read@temp:
  2600                           	opt stack 0
  2601  000003                     i2lcdInst@data:
  2602                           	opt stack 0
  2603  000003                     i2putch@data:
  2604                           	opt stack 0
  2605  000003                     i2isdigit@c:
  2606                           	opt stack 0
  2607  000003                     i2updateServoPosition@timer:
  2608                           	opt stack 0
  2609  000003                     i2___wmul@multiplicand:
  2610                           	opt stack 0
  2611  000003                     i2___lwmod@divisor:
  2612                           	opt stack 0
  2613  000003                     i2strcpy@from:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x2
  2617  000003                     	ds	1
  2618  000004                     i2getRTC@i:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x3
  2622  000004                     	ds	1
  2623  000005                     ??i2_updateServoPosition:
  2624  000005                     i2___lwmod@counter:
  2625                           	opt stack 0
  2626  000005                     i2___wmul@product:
  2627                           	opt stack 0
  2628  000005                     i2strcpy@cp:
  2629                           	opt stack 0
  2630                           
  2631                           ; 2 bytes @ 0x4
  2632  000005                     	ds	1
  2633  000006                     ?i2___lwdiv:
  2634                           	opt stack 0
  2635  000006                     i2___lwdiv@dividend:
  2636                           	opt stack 0
  2637                           
  2638                           ; 2 bytes @ 0x5
  2639  000006                     	ds	1
  2640  000007                     retrieveLog@logNum:
  2641                           	opt stack 0
  2642  000007                     i2updateServoPosition@my_time:
  2643                           	opt stack 0
  2644                           
  2645                           ; 2 bytes @ 0x6
  2646  000007                     	ds	1
  2647  000008                     i2___lwdiv@divisor:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0x7
  2651  000008                     	ds	1
  2652  000009                     ??_retrieveLog:
  2653  000009                     ??_updateServoStates:
  2654                           
  2655                           ; 1 bytes @ 0x8
  2656  000009                     	ds	1
  2657  00000A                     i2___lwdiv@quotient:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x9
  2661  00000A                     	ds	1
  2662  00000B                     retrieveLog@byte1:
  2663                           	opt stack 0
  2664                           
  2665                           ; 1 bytes @ 0xA
  2666  00000B                     	ds	1
  2667  00000C                     retrieveLog@byte2:
  2668                           	opt stack 0
  2669  00000C                     i2___lwdiv@counter:
  2670                           	opt stack 0
  2671                           
  2672                           ; 1 bytes @ 0xB
  2673  00000C                     	ds	1
  2674  00000D                     ?i2_printf:
  2675                           	opt stack 0
  2676  00000D                     retrieveLog@byte3:
  2677                           	opt stack 0
  2678  00000D                     i2printf@f:
  2679                           	opt stack 0
  2680                           
  2681                           ; 2 bytes @ 0xC
  2682  00000D                     	ds	1
  2683  00000E                     retrieveLog@i:
  2684                           	opt stack 0
  2685                           
  2686                           ; 2 bytes @ 0xD
  2687  00000E                     	ds	2
  2688  000010                     retrieveLog@addr:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0xF
  2692  000010                     	ds	2
  2693  000012                     dispLogs@myLog:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x11
  2697  000012                     	ds	2
  2698  000014                     
  2699                           ; 1 bytes @ 0x13
  2700  000014                     	ds	5
  2701  000019                     ??i2_printf:
  2702                           
  2703                           ; 1 bytes @ 0x18
  2704  000019                     	ds	4
  2705  00001D                     i2printf@prec:
  2706                           	opt stack 0
  2707                           
  2708                           ; 1 bytes @ 0x1C
  2709  00001D                     	ds	1
  2710  00001E                     i2printf@cp:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x1D
  2714  00001E                     	ds	2
  2715  000020                     i2printf@ap:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x1F
  2719  000020                     	ds	2
  2720  000022                     i2printf@len:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x21
  2724  000022                     	ds	2
  2725  000024                     i2printf@val:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x23
  2729  000024                     	ds	2
  2730  000026                     i2printf@flag:
  2731                           	opt stack 0
  2732                           
  2733                           ; 1 bytes @ 0x25
  2734  000026                     	ds	1
  2735  000027                     i2printf@c:
  2736                           	opt stack 0
  2737                           
  2738                           ; 1 bytes @ 0x26
  2739  000027                     	ds	1
  2740  000028                     i2printf@width:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x27
  2744  000028                     	ds	2
  2745  00002A                     ??_printSortTimer:
  2746  00002A                     ??i2_printRTC:
  2747  00002A                     ?_inputHandler:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x29
  2751  00002A                     	ds	2
  2752  00002C                     ??_inputHandler:
  2753                           
  2754                           ; 1 bytes @ 0x2B
  2755  00002C                     	ds	1
  2756  00002D                     printSortTimer@curTime:
  2757                           	opt stack 0
  2758  00002D                     i2printRTC@INT_time:
  2759                           	opt stack 0
  2760                           
  2761                           ; 14 bytes @ 0x2C
  2762  00002D                     	ds	14
  2763  00003B                     printSortTimer@start_sec:
  2764                           	opt stack 0
  2765  00003B                     i2printRTC@RTC_month:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0x3A
  2769  00003B                     	ds	2
  2770  00003D                     printSortTimer@cur_sec:
  2771                           	opt stack 0
  2772  00003D                     i2printRTC@month:
  2773                           	opt stack 0
  2774                           
  2775                           ; 4 bytes @ 0x3C
  2776  00003D                     	ds	2
  2777  00003F                     printSortTimer@min:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x3E
  2781  00003F                     	ds	2
  2782  000041                     printSortTimer@sec:
  2783                           	opt stack 0
  2784  000041                     i2printRTC@i:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x40
  2788  000041                     	ds	2
  2789  000043                     ??_updateMenu:
  2790  000043                     _printSortTimer$2581:
  2791                           	opt stack 0
  2792                           
  2793                           ; 2 bytes @ 0x42
  2794  000043                     	ds	2
  2795  000045                     printSortTimer@timeDiff:
  2796                           	opt stack 0
  2797                           
  2798                           ; 2 bytes @ 0x44
  2799  000045                     	ds	2
  2800  000047                     printSortTimer@i_1222:
  2801                           	opt stack 0
  2802                           
  2803                           ; 2 bytes @ 0x46
  2804  000047                     	ds	2
  2805  000049                     printSortTimer@i:
  2806                           	opt stack 0
  2807                           
  2808                           ; 2 bytes @ 0x48
  2809  000049                     	ds	2
  2810  00004B                     ??_handler:
  2811                           
  2812                           ; 1 bytes @ 0x4A
  2813  00004B                     	ds	16
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1l	equ	0xFE1
  2822                           
  2823 ;;
  2824 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2825 ;;
  2826 ;; *************** function _main *****************
  2827 ;; Defined at:
  2828 ;;		line 19 in file "main.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;Total ram usage:        0 bytes
  2847 ;; Hardware stack levels required when called:   13
  2848 ;; This function calls:
  2849 ;;		_I2C_Master_Init
  2850 ;;		_Test
  2851 ;;		_UI
  2852 ;;		_initLCD
  2853 ;;		_initTime
  2854 ;;		_initUI
  2855 ;;		_logRun
  2856 ;;		_machineConfig
  2857 ;;		_sort
  2858 ;;		_stopSignals
  2859 ;; This function is called by:
  2860 ;;		Startup code after reset
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text0
  2865  0044BC                     __ptext0:
  2866                           	opt stack 0
  2867  0044BC                     _main:
  2868                           	opt stack 18
  2869                           
  2870                           ;main.c: 20: machineConfig();
  2871                           
  2872                           ;incstack = 0
  2873  0044BC  ECE8  F026         	call	_machineConfig	;wreg free
  2874                           
  2875                           ;main.c: 21: initLCD();
  2876  0044C0  ECA0  F028         	call	_initLCD	;wreg free
  2877                           
  2878                           ;main.c: 24: RTCflag = 0;
  2879  0044C4  0E00               	movlw	0
  2880  0044C6  0100               	movlb	0	; () banked
  2881  0044C8  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2882  0044CA  0E00               	movlw	0
  2883  0044CC  6FEA               	movwf	_RTCflag& (0+255),b
  2884                           
  2885                           ;main.c: 25: if(RTCflag){
  2886  0044CE  0100               	movlb	0	; () banked
  2887  0044D0  51EA               	movf	_RTCflag& (0+255),w,b
  2888  0044D2  0100               	movlb	0	; () banked
  2889  0044D4  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2890  0044D6  B4D8               	btfsc	status,2,c
  2891  0044D8  D016               	goto	l9848
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2895  0044DA  0E47               	movlw	71
  2896  0044DC  0100               	movlb	0	; () banked
  2897  0044DE  6F80               	movwf	initTime@m& (0+255),b
  2898  0044E0  0E17               	movlw	23
  2899  0044E2  0100               	movlb	0	; () banked
  2900  0044E4  6F81               	movwf	initTime@h& (0+255),b
  2901  0044E6  0E07               	movlw	7
  2902  0044E8  0100               	movlb	0	; () banked
  2903  0044EA  6F82               	movwf	initTime@w& (0+255),b
  2904  0044EC  0E08               	movlw	8
  2905  0044EE  0100               	movlb	0	; () banked
  2906  0044F0  6F83               	movwf	initTime@DD& (0+255),b
  2907  0044F2  0E04               	movlw	4
  2908  0044F4  0100               	movlb	0	; () banked
  2909  0044F6  6F84               	movwf	initTime@MM& (0+255),b
  2910  0044F8  0E17               	movlw	23
  2911  0044FA  0100               	movlb	0	; () banked
  2912  0044FC  6F85               	movwf	initTime@YY& (0+255),b
  2913  0044FE  0E42               	movlw	66
  2914  004500  EC71  F02B         	call	_initTime
  2915                           
  2916                           ;main.c: 27: }
  2917  004504  D00B               	goto	l9850
  2918  004506                     l9848:
  2919                           
  2920                           ;main.c: 28: else{
  2921                           ;main.c: 29: I2C_Master_Init(10000);
  2922  004506  0E10               	movlw	16
  2923  004508  0100               	movlb	0	; () banked
  2924  00450A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2925  00450C  0E27               	movlw	39
  2926  00450E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2927  004510  0E00               	movlw	0
  2928  004512  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2929  004514  0E00               	movlw	0
  2930  004516  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2931  004518  EC4B  F027         	call	_I2C_Master_Init	;wreg free
  2932  00451C                     l9850:
  2933                           
  2934                           ;main.c: 30: }
  2935                           ;main.c: 32: initUI();
  2936  00451C  ECA1  F029         	call	_initUI	;wreg free
  2937                           
  2938                           ;main.c: 33: first = 1;
  2939  004520  0E00               	movlw	0
  2940  004522  0101               	movlb	1	; () banked
  2941  004524  6F3A               	movwf	(_first+1)& (0+255),b
  2942  004526  0E01               	movlw	1
  2943  004528  6F39               	movwf	_first& (0+255),b
  2944                           
  2945                           ; BSR set to: 1
  2946                           ;main.c: 44: switch(machine_state){
  2947                           
  2948                           ;main.c: 43: while(1){
  2949  00452A  D018               	goto	l9872
  2950  00452C                     l9854:
  2951                           
  2952                           ;main.c: 46: UI();
  2953  00452C  EC09  F000         	call	_UI	;wreg free
  2954                           
  2955                           ;main.c: 47: break;
  2956  004530  D015               	goto	l9872
  2957  004532                     l9856:
  2958                           
  2959                           ;main.c: 49: sort();
  2960  004532  EC60  F02B         	call	_sort	;wreg free
  2961                           
  2962                           ;main.c: 50: break;
  2963  004536  D012               	goto	l9872
  2964  004538                     l9858:
  2965                           
  2966                           ;main.c: 52: stopSignals();
  2967  004538  EC91  F02B         	call	_stopSignals	;wreg free
  2968                           
  2969                           ;main.c: 53: logRun();
  2970  00453C  ECDA  F01E         	call	_logRun	;wreg free
  2971                           
  2972                           ;main.c: 54: first = 1;
  2973  004540  0E00               	movlw	0
  2974  004542  0101               	movlb	1	; () banked
  2975  004544  6F3A               	movwf	(_first+1)& (0+255),b
  2976  004546  0E01               	movlw	1
  2977  004548  6F39               	movwf	_first& (0+255),b
  2978                           
  2979                           ; BSR set to: 1
  2980                           ;main.c: 55: UI();
  2981  00454A  EC09  F000         	call	_UI	;wreg free
  2982                           
  2983                           ;main.c: 56: break;
  2984  00454E  D006               	goto	l9872
  2985  004550                     l9866:
  2986                           
  2987                           ;main.c: 58: Test();
  2988  004550  EC0C  F020         	call	_Test	;wreg free
  2989                           
  2990                           ;main.c: 59: break;
  2991  004554  D003               	goto	l9872
  2992  004556                     l9868:
  2993                           
  2994                           ;main.c: 61: stopSignals();
  2995  004556  EC91  F02B         	call	_stopSignals	;wreg free
  2996  00455A                     l501:
  2997  00455A  D7FF               	goto	l501
  2998  00455C                     l9872:
  2999  00455C  0100               	movlb	0	; () banked
  3000  00455E  51FC               	movf	_machine_state& (0+255),w,b
  3001                           
  3002                           ; Switch size 1, requested type "space"
  3003                           ; Number of cases is 5, Range of values is 0 to 4
  3004                           ; switch strategies available:
  3005                           ; Name         Instructions Cycles
  3006                           ; simple_byte           16     9 (average)
  3007                           ;	Chosen strategy is simple_byte
  3008  004560  0A00               	xorlw	0	; case 0
  3009  004562  B4D8               	btfsc	status,2,c
  3010  004564  D7E3               	goto	l9854
  3011  004566  0A01               	xorlw	1	; case 1
  3012  004568  B4D8               	btfsc	status,2,c
  3013  00456A  D7E3               	goto	l9856
  3014  00456C  0A03               	xorlw	3	; case 2
  3015  00456E  B4D8               	btfsc	status,2,c
  3016  004570  D7E3               	goto	l9858
  3017  004572  0A01               	xorlw	1	; case 3
  3018  004574  B4D8               	btfsc	status,2,c
  3019  004576  D7EC               	goto	l9866
  3020  004578  0A07               	xorlw	7	; case 4
  3021  00457A  B4D8               	btfsc	status,2,c
  3022  00457C  D7EC               	goto	l9868
  3023                           
  3024                           ; BSR set to: 0
  3025                           
  3026                           ; BSR set to: 0
  3027  00457E  D7EE               	goto	l9872
  3028  004580                     __end_of_main:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1l	equ	0xFE1
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _sort *****************
  3041 ;; Defined at:
  3042 ;;		line 66 in file "sort.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        0 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:   12
  3063 ;; This function calls:
  3064 ;;		_Distribution
  3065 ;;		_ID
  3066 ;;		_Loading
  3067 ;; This function is called by:
  3068 ;;		_main
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text1
  3073  0056C0                     __ptext1:
  3074                           	opt stack 0
  3075  0056C0                     _sort:
  3076                           	opt stack 18
  3077                           
  3078                           ;sort.c: 67: if(machine_state == Sorting_state){
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;incstack = 0
  3082  0056C0  0100               	movlb	0	; () banked
  3083  0056C2  05FC               	decf	_machine_state& (0+255),w,b
  3084  0056C4  B4D8               	btfsc	status,2,c
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;sort.c: 68: Loading();
  3088  0056C6  ECC7  F008         	call	_Loading	;wreg free
  3089                           
  3090                           ;sort.c: 69: }
  3091                           ;sort.c: 70: if(machine_state == Sorting_state){
  3092  0056CA  0100               	movlb	0	; () banked
  3093  0056CC  05FC               	decf	_machine_state& (0+255),w,b
  3094  0056CE  B4D8               	btfsc	status,2,c
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;sort.c: 71: ID();
  3098  0056D0  ECF2  F018         	call	_ID	;wreg free
  3099                           
  3100                           ;sort.c: 72: }
  3101                           ;sort.c: 73: if(machine_state == Sorting_state){
  3102  0056D4  0100               	movlb	0	; () banked
  3103  0056D6  05FC               	decf	_machine_state& (0+255),w,b
  3104  0056D8  A4D8               	btfss	status,2,c
  3105  0056DA  0012               	return	
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;sort.c: 74: Distribution();
  3109  0056DC  EC82  F021         	call	_Distribution	;wreg free
  3110  0056E0  0012               	return	
  3111  0056E2                     __end_of_sort:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1l	equ	0xFE1
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _Loading *****************
  3124 ;; Defined at:
  3125 ;;		line 78 in file "sort.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  i               2   62[BANK0 ] int 
  3130 ;;  i               2   60[BANK0 ] int 
  3131 ;;  i               2   58[BANK0 ] int 
  3132 ;;  i               2   56[BANK0 ] int 
  3133 ;;  i               2   54[BANK0 ] int 
  3134 ;;  j               2   66[BANK0 ] int 
  3135 ;;  i               2   64[BANK0 ] int 
  3136 ;;  addr            2   51[BANK0 ] unsigned short 
  3137 ;;  byte1           1   53[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;Total ram usage:       19 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:   11
  3154 ;; This function calls:
  3155 ;;		_EEPROM_read
  3156 ;;		_EEPROM_write
  3157 ;;		_delay_ms
  3158 ;;		_getIR
  3159 ;;		_getMAG
  3160 ;;		_initGlobalVars
  3161 ;;		_initServos
  3162 ;;		_initSortTimer
  3163 ;;		_lcdInst
  3164 ;;		_readIR
  3165 ;; This function is called by:
  3166 ;;		_sort
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text2
  3171  00118E                     __ptext2:
  3172                           	opt stack 0
  3173  00118E                     _Loading:
  3174                           	opt stack 18
  3175                           
  3176                           ;sort.c: 79: if(first){
  3177                           
  3178                           ;incstack = 0
  3179  00118E  0101               	movlb	1	; () banked
  3180  001190  5139               	movf	_first& (0+255),w,b
  3181  001192  0101               	movlb	1	; () banked
  3182  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3183  001196  B4D8               	btfsc	status,2,c
  3184  001198  D066               	goto	l7562
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;sort.c: 80: initGlobalVars();
  3188  00119A  ECC0  F022         	call	_initGlobalVars	;wreg free
  3189                           
  3190                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3191  00119E  0E01               	movlw	1
  3192  0011A0  ECDF  F02B         	call	_lcdInst
  3193  0011A4  0E68               	movlw	104
  3194  0011A6  0100               	movlb	0	; () banked
  3195  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3196  0011AA  0EE4               	movlw	228
  3197  0011AC                     u9417:
  3198  0011AC  2EE8               	decfsz	wreg,f,c
  3199  0011AE  D7FE               	bra	u9417
  3200  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3201  0011B2  D7FC               	bra	u9417
  3202  0011B4  F000               	nop	
  3203                           
  3204                           ;sort.c: 82: initSortTimer();
  3205  0011B6  ECDC  F023         	call	_initSortTimer	;wreg free
  3206                           
  3207                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3208  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3209                           
  3210                           ;sort.c: 88: sel = EEPROM_read(0);
  3211  0011BC  0E00               	movlw	0
  3212  0011BE  0100               	movlb	0	; () banked
  3213  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3214  0011C2  0E00               	movlw	0
  3215  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3216  0011C6  ECAD  F02B         	call	_EEPROM_read	;wreg free
  3217  0011CA  0100               	movlb	0	; () banked
  3218  0011CC  6FFD               	movwf	_sel& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3222  0011CE  0100               	movlb	0	; () banked
  3223  0011D0  51FD               	movf	_sel& (0+255),w,b
  3224  0011D2  0D0B               	mullw	11
  3225  0011D4  0E01               	movlw	1
  3226  0011D6  24F3               	addwf	prodl,w,c
  3227  0011D8  0100               	movlb	0	; () banked
  3228  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3229  0011DC  0E00               	movlw	0
  3230  0011DE  20F4               	addwfc	prodh,w,c
  3231  0011E0  0100               	movlb	0	; () banked
  3232  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3236  0011E4  0E7F               	movlw	127
  3237  0011E6  0100               	movlb	0	; () banked
  3238  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3242  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3243  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3244  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3245  0011F6  EC0E  F021         	call	_EEPROM_write	;wreg free
  3246                           
  3247                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3248  0011FA  948A               	bcf	3978,2,c	;volatile
  3249                           
  3250                           ;sort.c: 96: for(int i=0; i<46; i++){
  3251  0011FC  0E00               	movlw	0
  3252  0011FE  0100               	movlb	0	; () banked
  3253  001200  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3254  001202  0E00               	movlw	0
  3255  001204  6FC0               	movwf	Loading@i& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258  001206  0100               	movlb	0	; () banked
  3259  001208  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3260  00120A  D008               	goto	l7552
  3261  00120C  0100               	movlb	0	; () banked
  3262  00120E  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3263  001210  E126               	bnz	l776
  3264  001212  0E2E               	movlw	46
  3265  001214  0100               	movlb	0	; () banked
  3266  001216  5DC0               	subwf	Loading@i& (0+255),w,b
  3267  001218  B0D8               	btfsc	status,0,c
  3268  00121A  D021               	goto	l776
  3269  00121C                     l7552:
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3273  00121C  B48A               	btfsc	3978,2,c	;volatile
  3274  00121E  D004               	goto	u6020
  3275  001220  0100               	movlb	0	; () banked
  3276  001222  6BB1               	clrf	??_Loading& (0+255),b
  3277  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3278  001226  D002               	goto	u6038
  3279  001228                     u6020:
  3280  001228  0100               	movlb	0	; () banked
  3281  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3282  00122C                     u6038:
  3283  00122C  0100               	movlb	0	; () banked
  3284  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3285  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3286  001232  508A               	movf	3978,w,c	;volatile
  3287  001234  0100               	movlb	0	; () banked
  3288  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3289  001238  0BFB               	andlw	-5
  3290  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3291  00123C  6E8A               	movwf	3978,c	;volatile
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;sort.c: 98: delay_ms(45-i);
  3295  00123E  0100               	movlb	0	; () banked
  3296  001240  51C0               	movf	Loading@i& (0+255),w,b
  3297  001242  0800               	sublw	0
  3298  001244  0F2D               	addlw	45
  3299  001246  EC00  F02B         	call	_delay_ms
  3300  00124A  0100               	movlb	0	; () banked
  3301  00124C  4BC0               	infsnz	Loading@i& (0+255),f,b
  3302  00124E  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3303                           
  3304                           ; BSR set to: 0
  3305  001250  0100               	movlb	0	; () banked
  3306  001252  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3307  001254  D7E3               	goto	l7552
  3308  001256  0100               	movlb	0	; () banked
  3309  001258  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3310  00125A  E101               	bnz	u6040
  3311  00125C  D7DA               	goto	L1
  3312  00125E                     u6040:
  3313  00125E                     l776:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sort.c: 99: }
  3317                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3318  00125E  848A               	bsf	3978,2,c	;volatile
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;sort.c: 103: initServos();
  3322  001260  EC90  F025         	call	_initServos	;wreg free
  3323                           
  3324                           ;sort.c: 104: }
  3325  001264  0012               	return	
  3326  001266                     l7562:
  3327                           
  3328                           ;sort.c: 105: else{
  3329                           ;sort.c: 108: if(!f_loadingNewCan){
  3330  001266  0100               	movlb	0	; () banked
  3331  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3332  00126A  0100               	movlb	0	; () banked
  3333  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3334  00126E  A4D8               	btfss	status,2,c
  3335  001270  D018               	goto	l7578
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 110: getIR();
  3339  001272  EC08  F026         	call	_getIR	;wreg free
  3340                           
  3341                           ;sort.c: 112: if(!f_loadingNewCan){
  3342  001276  0100               	movlb	0	; () banked
  3343  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3344  00127A  0100               	movlb	0	; () banked
  3345  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3346  00127E  B4D8               	btfsc	status,2,c
  3347  001280  0012               	return	
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;sort.c: 116: else{
  3351                           ;sort.c: 117: count_total++;
  3352                           
  3353                           ; BSR set to: 0
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;sort.c: 114: }
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;sort.c: 113: return;
  3360  001282  0100               	movlb	0	; () banked
  3361  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3362  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;sort.c: 118: if(count_total == 12){
  3366  001288  0E0C               	movlw	12
  3367  00128A  0100               	movlb	0	; () banked
  3368  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3369  00128E  0100               	movlb	0	; () banked
  3370  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3371  001292  A4D8               	btfss	status,2,c
  3372  001294  0012               	return	
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;sort.c: 119: f_lastCan = 1;
  3376  001296  0E00               	movlw	0
  3377  001298  0100               	movlb	0	; () banked
  3378  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3379  00129C  0E01               	movlw	1
  3380  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;sort.c: 120: }
  3384                           ;sort.c: 121: }
  3385                           ;sort.c: 122: }
  3386                           
  3387                           ; BSR set to: 0
  3388  0012A0  0012               	return	
  3389  0012A2                     l7578:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;sort.c: 125: else if(f_ID_receive){
  3393  0012A2  0101               	movlb	1	; () banked
  3394  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3395  0012A6  0101               	movlb	1	; () banked
  3396  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3397  0012AA  B4D8               	btfsc	status,2,c
  3398  0012AC  0012               	return	
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3402  0012AE  0E00               	movlw	0
  3403  0012B0  0101               	movlb	1	; () banked
  3404  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3405  0012B4  0E01               	movlw	1
  3406  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3407                           
  3408                           ;sort.c: 127: f_loadingNewCan = 0;
  3409  0012B8  0E00               	movlw	0
  3410  0012BA  0100               	movlb	0	; () banked
  3411  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3412  0012BE  0E00               	movlw	0
  3413  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3417  0012C2  0E1F               	movlw	31
  3418  0012C4  0100               	movlb	0	; () banked
  3419  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3420  0012C8  0E71               	movlw	113
  3421  0012CA  0100               	movlb	0	; () banked
  3422  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3423  0012CE  0E1E               	movlw	30
  3424  0012D0                     u9427:
  3425  0012D0  2EE8               	decfsz	wreg,f,c
  3426  0012D2  D7FE               	bra	u9427
  3427  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3428  0012D6  D7FC               	bra	u9427
  3429  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3430  0012DA  D7FA               	bra	u9427
  3431  0012DC  F000               	nop	
  3432                           
  3433                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3434  0012DE  948A               	bcf	3978,2,c	;volatile
  3435                           
  3436                           ;sort.c: 133: f_arm_position = 1;
  3437  0012E0  0E00               	movlw	0
  3438  0012E2  0100               	movlb	0	; () banked
  3439  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3440  0012E6  0E01               	movlw	1
  3441  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;sort.c: 135: delay_ms(400);
  3445  0012EA  0E90               	movlw	144
  3446  0012EC  EC00  F02B         	call	_delay_ms
  3447                           
  3448                           ;sort.c: 136: getMAG();
  3449  0012F0  EC6F  F029         	call	_getMAG	;wreg free
  3450                           
  3451                           ;sort.c: 137: sensor_outputs[0] = MAG_signal;
  3452  0012F4  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3453  0012F8  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3454                           
  3455                           ;sort.c: 139: if(sensor_outputs[0]){
  3456  0012FC  0100               	movlb	0	; () banked
  3457  0012FE  51E2               	movf	_sensor_outputs& (0+255),w,b
  3458  001300  0100               	movlb	0	; () banked
  3459  001302  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3460  001304  B4D8               	btfsc	status,2,c
  3461  001306  D027               	goto	l7608
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;sort.c: 140: for(int i = 0; i<25; i++){
  3465  001308  0E00               	movlw	0
  3466  00130A  0100               	movlb	0	; () banked
  3467  00130C  6FB7               	movwf	(Loading@i_1183+1)& (0+255),b
  3468  00130E  0E00               	movlw	0
  3469  001310  6FB6               	movwf	Loading@i_1183& (0+255),b
  3470  001312                     l7598:
  3471                           
  3472                           ; BSR set to: 0
  3473  001312  0100               	movlb	0	; () banked
  3474  001314  BFB7               	btfsc	(Loading@i_1183+1)& (0+255),7,b
  3475  001316  D008               	goto	l786
  3476  001318  0100               	movlb	0	; () banked
  3477  00131A  51B7               	movf	(Loading@i_1183+1)& (0+255),w,b
  3478  00131C  E143               	bnz	l7620
  3479  00131E  0E19               	movlw	25
  3480  001320  0100               	movlb	0	; () banked
  3481  001322  5DB6               	subwf	Loading@i_1183& (0+255),w,b
  3482  001324  B0D8               	btfsc	status,0,c
  3483  001326  D03E               	goto	l7620
  3484  001328                     l786:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;sort.c: 141: LATAbits.LATA4 = 1;
  3488  001328  8889               	bsf	3977,4,c	;volatile
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;sort.c: 142: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3492  00132A  0E4E               	movlw	78
  3493  00132C  0100               	movlb	0	; () banked
  3494  00132E  6FB1               	movwf	??_Loading& (0+255),b
  3495  001330  0EEB               	movlw	235
  3496  001332                     u9437:
  3497  001332  2EE8               	decfsz	wreg,f,c
  3498  001334  D7FE               	bra	u9437
  3499  001336  2FB1               	decfsz	??_Loading& (0+255),f,b
  3500  001338  D7FC               	bra	u9437
  3501                           
  3502                           ;sort.c: 143: LATAbits.LATA4 = 0;
  3503  00133A  9889               	bcf	3977,4,c	;volatile
  3504                           
  3505                           ;sort.c: 144: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3506  00133C  0E1A               	movlw	26
  3507  00133E  0100               	movlb	0	; () banked
  3508  001340  6FB1               	movwf	??_Loading& (0+255),b
  3509  001342  0EF8               	movlw	248
  3510  001344                     u9447:
  3511  001344  2EE8               	decfsz	wreg,f,c
  3512  001346  D7FE               	bra	u9447
  3513  001348  2FB1               	decfsz	??_Loading& (0+255),f,b
  3514  00134A  D7FC               	bra	u9447
  3515  00134C  F000               	nop	
  3516  00134E  0100               	movlb	0	; () banked
  3517  001350  4BB6               	infsnz	Loading@i_1183& (0+255),f,b
  3518  001352  2BB7               	incf	(Loading@i_1183+1)& (0+255),f,b
  3519  001354  D7DE               	goto	l7598
  3520  001356                     l7608:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;sort.c: 147: else{
  3524                           ;sort.c: 148: for(int i = 0; i<25; i++){
  3525  001356  0E00               	movlw	0
  3526  001358  0100               	movlb	0	; () banked
  3527  00135A  6FB9               	movwf	(Loading@i_1192+1)& (0+255),b
  3528  00135C  0E00               	movlw	0
  3529  00135E  6FB8               	movwf	Loading@i_1192& (0+255),b
  3530  001360                     l7610:
  3531                           
  3532                           ; BSR set to: 0
  3533  001360  0100               	movlb	0	; () banked
  3534  001362  BFB9               	btfsc	(Loading@i_1192+1)& (0+255),7,b
  3535  001364  D008               	goto	l789
  3536  001366  0100               	movlb	0	; () banked
  3537  001368  51B9               	movf	(Loading@i_1192+1)& (0+255),w,b
  3538  00136A  E11C               	bnz	l7620
  3539  00136C  0E19               	movlw	25
  3540  00136E  0100               	movlb	0	; () banked
  3541  001370  5DB8               	subwf	Loading@i_1192& (0+255),w,b
  3542  001372  B0D8               	btfsc	status,0,c
  3543  001374  D017               	goto	l7620
  3544  001376                     l789:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3548  001376  8889               	bsf	3977,4,c	;volatile
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;sort.c: 150: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3552  001378  0E3D               	movlw	61
  3553  00137A  0100               	movlb	0	; () banked
  3554  00137C  6FB1               	movwf	??_Loading& (0+255),b
  3555  00137E  0E41               	movlw	65
  3556  001380                     u9457:
  3557  001380  2EE8               	decfsz	wreg,f,c
  3558  001382  D7FE               	bra	u9457
  3559  001384  2FB1               	decfsz	??_Loading& (0+255),f,b
  3560  001386  D7FC               	bra	u9457
  3561                           
  3562                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3563  001388  9889               	bcf	3977,4,c	;volatile
  3564                           
  3565                           ;sort.c: 152: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3566  00138A  0E2C               	movlw	44
  3567  00138C  0100               	movlb	0	; () banked
  3568  00138E  6FB1               	movwf	??_Loading& (0+255),b
  3569  001390  0EA1               	movlw	161
  3570  001392                     u9467:
  3571  001392  2EE8               	decfsz	wreg,f,c
  3572  001394  D7FE               	bra	u9467
  3573  001396  2FB1               	decfsz	??_Loading& (0+255),f,b
  3574  001398  D7FC               	bra	u9467
  3575  00139A  D000               	nop2	
  3576  00139C  0100               	movlb	0	; () banked
  3577  00139E  4BB8               	infsnz	Loading@i_1192& (0+255),f,b
  3578  0013A0  2BB9               	incf	(Loading@i_1192+1)& (0+255),f,b
  3579  0013A2  D7DE               	goto	l7610
  3580  0013A4                     l7620:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;sort.c: 153: }
  3584                           ;sort.c: 154: }
  3585                           ;sort.c: 156: _delay((unsigned long)((350)*(32000000/4000.0)));
  3586  0013A4  0E0F               	movlw	15
  3587  0013A6  0100               	movlb	0	; () banked
  3588  0013A8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3589  0013AA  0E35               	movlw	53
  3590  0013AC  0100               	movlb	0	; () banked
  3591  0013AE  6FB1               	movwf	??_Loading& (0+255),b
  3592  0013B0  0E51               	movlw	81
  3593  0013B2                     u9477:
  3594  0013B2  2EE8               	decfsz	wreg,f,c
  3595  0013B4  D7FE               	bra	u9477
  3596  0013B6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3597  0013B8  D7FC               	bra	u9477
  3598  0013BA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3599  0013BC  D7FA               	bra	u9477
  3600                           
  3601                           ;sort.c: 158: readIR();
  3602  0013BE  EC54  F028         	call	_readIR	;wreg free
  3603                           
  3604                           ;sort.c: 159: if(IR_signal==1){
  3605  0013C2  0100               	movlb	0	; () banked
  3606  0013C4  05E6               	decf	_IR_signal& (0+255),w,b
  3607  0013C6  0100               	movlb	0	; () banked
  3608  0013C8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3609  0013CA  A4D8               	btfss	status,2,c
  3610  0013CC  D1D4               	goto	l7748
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;sort.c: 160: _delay((unsigned long)((30)*(32000000/4000.0)));
  3614  0013CE  0E02               	movlw	2
  3615  0013D0  0100               	movlb	0	; () banked
  3616  0013D2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3617  0013D4  0E38               	movlw	56
  3618  0013D6  0100               	movlb	0	; () banked
  3619  0013D8  6FB1               	movwf	??_Loading& (0+255),b
  3620  0013DA  0EAD               	movlw	173
  3621  0013DC                     u9487:
  3622  0013DC  2EE8               	decfsz	wreg,f,c
  3623  0013DE  D7FE               	bra	u9487
  3624  0013E0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3625  0013E2  D7FC               	bra	u9487
  3626  0013E4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3627  0013E6  D7FA               	bra	u9487
  3628                           
  3629                           ;sort.c: 161: readIR();
  3630  0013E8  EC54  F028         	call	_readIR	;wreg free
  3631                           
  3632                           ;sort.c: 162: if(IR_signal==1){
  3633  0013EC  0100               	movlb	0	; () banked
  3634  0013EE  05E6               	decf	_IR_signal& (0+255),w,b
  3635  0013F0  0100               	movlb	0	; () banked
  3636  0013F2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3637  0013F4  A4D8               	btfss	status,2,c
  3638  0013F6  D054               	goto	l7658
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;sort.c: 163: if(sensor_outputs[0]){
  3642  0013F8  0100               	movlb	0	; () banked
  3643  0013FA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3644  0013FC  0100               	movlb	0	; () banked
  3645  0013FE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3646  001400  B4D8               	btfsc	status,2,c
  3647  001402  D027               	goto	l7646
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;sort.c: 164: for(int i = 0; i<25; i++){
  3651  001404  0E00               	movlw	0
  3652  001406  0100               	movlb	0	; () banked
  3653  001408  6FBB               	movwf	(Loading@i_1194+1)& (0+255),b
  3654  00140A  0E00               	movlw	0
  3655  00140C  6FBA               	movwf	Loading@i_1194& (0+255),b
  3656  00140E                     l7636:
  3657                           
  3658                           ; BSR set to: 0
  3659  00140E  0100               	movlb	0	; () banked
  3660  001410  BFBB               	btfsc	(Loading@i_1194+1)& (0+255),7,b
  3661  001412  D008               	goto	l794
  3662  001414  0100               	movlb	0	; () banked
  3663  001416  51BB               	movf	(Loading@i_1194+1)& (0+255),w,b
  3664  001418  E143               	bnz	l7658
  3665  00141A  0E19               	movlw	25
  3666  00141C  0100               	movlb	0	; () banked
  3667  00141E  5DBA               	subwf	Loading@i_1194& (0+255),w,b
  3668  001420  B0D8               	btfsc	status,0,c
  3669  001422  D03E               	goto	l7658
  3670  001424                     l794:
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;sort.c: 165: LATAbits.LATA4 = 1;
  3674  001424  8889               	bsf	3977,4,c	;volatile
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;sort.c: 166: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3678  001426  0E4E               	movlw	78
  3679  001428  0100               	movlb	0	; () banked
  3680  00142A  6FB1               	movwf	??_Loading& (0+255),b
  3681  00142C  0EEB               	movlw	235
  3682  00142E                     u9497:
  3683  00142E  2EE8               	decfsz	wreg,f,c
  3684  001430  D7FE               	bra	u9497
  3685  001432  2FB1               	decfsz	??_Loading& (0+255),f,b
  3686  001434  D7FC               	bra	u9497
  3687                           
  3688                           ;sort.c: 167: LATAbits.LATA4 = 0;
  3689  001436  9889               	bcf	3977,4,c	;volatile
  3690                           
  3691                           ;sort.c: 168: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3692  001438  0E1A               	movlw	26
  3693  00143A  0100               	movlb	0	; () banked
  3694  00143C  6FB1               	movwf	??_Loading& (0+255),b
  3695  00143E  0EF8               	movlw	248
  3696  001440                     u9507:
  3697  001440  2EE8               	decfsz	wreg,f,c
  3698  001442  D7FE               	bra	u9507
  3699  001444  2FB1               	decfsz	??_Loading& (0+255),f,b
  3700  001446  D7FC               	bra	u9507
  3701  001448  F000               	nop	
  3702  00144A  0100               	movlb	0	; () banked
  3703  00144C  4BBA               	infsnz	Loading@i_1194& (0+255),f,b
  3704  00144E  2BBB               	incf	(Loading@i_1194+1)& (0+255),f,b
  3705  001450  D7DE               	goto	l7636
  3706  001452                     l7646:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;sort.c: 171: else{
  3710                           ;sort.c: 172: for(int i = 0; i<25; i++){
  3711  001452  0E00               	movlw	0
  3712  001454  0100               	movlb	0	; () banked
  3713  001456  6FBD               	movwf	(Loading@i_1195+1)& (0+255),b
  3714  001458  0E00               	movlw	0
  3715  00145A  6FBC               	movwf	Loading@i_1195& (0+255),b
  3716  00145C                     l7648:
  3717                           
  3718                           ; BSR set to: 0
  3719  00145C  0100               	movlb	0	; () banked
  3720  00145E  BFBD               	btfsc	(Loading@i_1195+1)& (0+255),7,b
  3721  001460  D008               	goto	l797
  3722  001462  0100               	movlb	0	; () banked
  3723  001464  51BD               	movf	(Loading@i_1195+1)& (0+255),w,b
  3724  001466  E11C               	bnz	l7658
  3725  001468  0E19               	movlw	25
  3726  00146A  0100               	movlb	0	; () banked
  3727  00146C  5DBC               	subwf	Loading@i_1195& (0+255),w,b
  3728  00146E  B0D8               	btfsc	status,0,c
  3729  001470  D017               	goto	l7658
  3730  001472                     l797:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3734  001472  8889               	bsf	3977,4,c	;volatile
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;sort.c: 174: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3738  001474  0E3D               	movlw	61
  3739  001476  0100               	movlb	0	; () banked
  3740  001478  6FB1               	movwf	??_Loading& (0+255),b
  3741  00147A  0E41               	movlw	65
  3742  00147C                     u9517:
  3743  00147C  2EE8               	decfsz	wreg,f,c
  3744  00147E  D7FE               	bra	u9517
  3745  001480  2FB1               	decfsz	??_Loading& (0+255),f,b
  3746  001482  D7FC               	bra	u9517
  3747                           
  3748                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3749  001484  9889               	bcf	3977,4,c	;volatile
  3750                           
  3751                           ;sort.c: 176: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3752  001486  0E2C               	movlw	44
  3753  001488  0100               	movlb	0	; () banked
  3754  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3755  00148C  0EA1               	movlw	161
  3756  00148E                     u9527:
  3757  00148E  2EE8               	decfsz	wreg,f,c
  3758  001490  D7FE               	bra	u9527
  3759  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3760  001494  D7FC               	bra	u9527
  3761  001496  D000               	nop2	
  3762  001498  0100               	movlb	0	; () banked
  3763  00149A  4BBC               	infsnz	Loading@i_1195& (0+255),f,b
  3764  00149C  2BBD               	incf	(Loading@i_1195+1)& (0+255),f,b
  3765  00149E  D7DE               	goto	l7648
  3766  0014A0                     l7658:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;sort.c: 177: }
  3770                           ;sort.c: 178: }
  3771                           ;sort.c: 179: }
  3772                           ;sort.c: 181: _delay((unsigned long)((350)*(32000000/4000.0)));
  3773  0014A0  0E0F               	movlw	15
  3774  0014A2  0100               	movlb	0	; () banked
  3775  0014A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3776  0014A6  0E35               	movlw	53
  3777  0014A8  0100               	movlb	0	; () banked
  3778  0014AA  6FB1               	movwf	??_Loading& (0+255),b
  3779  0014AC  0E51               	movlw	81
  3780  0014AE                     u9537:
  3781  0014AE  2EE8               	decfsz	wreg,f,c
  3782  0014B0  D7FE               	bra	u9537
  3783  0014B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3784  0014B4  D7FC               	bra	u9537
  3785  0014B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3786  0014B8  D7FA               	bra	u9537
  3787                           
  3788                           ;sort.c: 183: int j = 0;
  3789  0014BA  0E00               	movlw	0
  3790  0014BC  0100               	movlb	0	; () banked
  3791  0014BE  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3792  0014C0  0E00               	movlw	0
  3793  0014C2  6FC2               	movwf	Loading@j& (0+255),b
  3794                           
  3795                           ;sort.c: 184: while(IR_signal == 1){
  3796  0014C4  D151               	goto	l7746
  3797  0014C6                     l7662:
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;sort.c: 185: readIR();
  3801  0014C6  EC54  F028         	call	_readIR	;wreg free
  3802                           
  3803                           ;sort.c: 186: if(j == 3 || j == 4){
  3804  0014CA  0E03               	movlw	3
  3805  0014CC  0100               	movlb	0	; () banked
  3806  0014CE  19C2               	xorwf	Loading@j& (0+255),w,b
  3807  0014D0  0100               	movlb	0	; () banked
  3808  0014D2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3809  0014D4  B4D8               	btfsc	status,2,c
  3810  0014D6  D007               	goto	l7668
  3811                           
  3812                           ; BSR set to: 0
  3813  0014D8  0E04               	movlw	4
  3814  0014DA  0100               	movlb	0	; () banked
  3815  0014DC  19C2               	xorwf	Loading@j& (0+255),w,b
  3816  0014DE  0100               	movlb	0	; () banked
  3817  0014E0  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3818  0014E2  A4D8               	btfss	status,2,c
  3819  0014E4  D005               	goto	l7670
  3820  0014E6                     l7668:
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;sort.c: 187: f_arm_position = 0;
  3824  0014E6  0E00               	movlw	0
  3825  0014E8  0100               	movlb	0	; () banked
  3826  0014EA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3827  0014EC  0E00               	movlw	0
  3828  0014EE  D022               	goto	L2
  3829  0014F0                     l7670:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;sort.c: 189: else if(j == 5 || j == 6){
  3833  0014F0  0E05               	movlw	5
  3834  0014F2  0100               	movlb	0	; () banked
  3835  0014F4  19C2               	xorwf	Loading@j& (0+255),w,b
  3836  0014F6  0100               	movlb	0	; () banked
  3837  0014F8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3838  0014FA  B4D8               	btfsc	status,2,c
  3839  0014FC  D007               	goto	l807
  3840                           
  3841                           ; BSR set to: 0
  3842  0014FE  0E06               	movlw	6
  3843  001500  0100               	movlb	0	; () banked
  3844  001502  19C2               	xorwf	Loading@j& (0+255),w,b
  3845  001504  0100               	movlb	0	; () banked
  3846  001506  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3847  001508  A4D8               	btfss	status,2,c
  3848  00150A  D002               	goto	l7674
  3849  00150C                     l807:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;sort.c: 190: LATBbits.LATB2 = 1;
  3853  00150C  848A               	bsf	3978,2,c	;volatile
  3854                           
  3855                           ;sort.c: 191: }
  3856  00150E  D034               	goto	l804
  3857  001510                     l7674:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;sort.c: 192: else if(j == 7 || j == 8){
  3861  001510  0E07               	movlw	7
  3862  001512  0100               	movlb	0	; () banked
  3863  001514  19C2               	xorwf	Loading@j& (0+255),w,b
  3864  001516  0100               	movlb	0	; () banked
  3865  001518  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3866  00151A  B4D8               	btfsc	status,2,c
  3867  00151C  D007               	goto	l7678
  3868                           
  3869                           ; BSR set to: 0
  3870  00151E  0E08               	movlw	8
  3871  001520  0100               	movlb	0	; () banked
  3872  001522  19C2               	xorwf	Loading@j& (0+255),w,b
  3873  001524  0100               	movlb	0	; () banked
  3874  001526  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3875  001528  A4D8               	btfss	status,2,c
  3876  00152A  D006               	goto	l809
  3877  00152C                     l7678:
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;sort.c: 193: f_arm_position = 1;
  3881  00152C  0E00               	movlw	0
  3882  00152E  0100               	movlb	0	; () banked
  3883  001530  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3884  001532  0E01               	movlw	1
  3885  001534                     L2:
  3886  001534  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3887                           
  3888                           ;sort.c: 194: }
  3889  001536  D020               	goto	l804
  3890  001538                     l809:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;sort.c: 195: else if(j % 2 == 0){
  3894  001538  0100               	movlb	0	; () banked
  3895  00153A  B1C2               	btfsc	Loading@j& (0+255),0,b
  3896  00153C  D01D               	goto	l804
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;sort.c: 196: LATBbits.LATB2 = !LATBbits.LATB2;
  3900  00153E  B48A               	btfsc	3978,2,c	;volatile
  3901  001540  D004               	goto	u6280
  3902  001542  0100               	movlb	0	; () banked
  3903  001544  6BB1               	clrf	??_Loading& (0+255),b
  3904  001546  2BB1               	incf	??_Loading& (0+255),f,b
  3905  001548  D002               	goto	u6298
  3906  00154A                     u6280:
  3907  00154A  0100               	movlb	0	; () banked
  3908  00154C  6BB1               	clrf	??_Loading& (0+255),b
  3909  00154E                     u6298:
  3910  00154E  0100               	movlb	0	; () banked
  3911  001550  47B1               	rlncf	??_Loading& (0+255),f,b
  3912  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3913  001554  508A               	movf	3978,w,c	;volatile
  3914  001556  0100               	movlb	0	; () banked
  3915  001558  19B1               	xorwf	??_Loading& (0+255),w,b
  3916  00155A  0BFB               	andlw	-5
  3917  00155C  19B1               	xorwf	??_Loading& (0+255),w,b
  3918  00155E  6E8A               	movwf	3978,c	;volatile
  3919                           
  3920                           ;sort.c: 197: f_arm_position = !f_arm_position;
  3921  001560  0100               	movlb	0	; () banked
  3922  001562  51EE               	movf	_f_arm_position& (0+255),w,b	;volatile
  3923  001564  0100               	movlb	0	; () banked
  3924  001566  11EF               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3925  001568  A4D8               	btfss	status,2,c
  3926  00156A  D002               	goto	u6300
  3927  00156C  0E01               	movlw	1
  3928  00156E  D001               	goto	u6310
  3929  001570                     u6300:
  3930  001570  0E00               	movlw	0
  3931  001572                     u6310:
  3932  001572  0100               	movlb	0	; () banked
  3933  001574  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3934  001576  6BEF               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  3935  001578                     l804:
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;sort.c: 198: }
  3939                           ;sort.c: 201: if(IR_signal==1){
  3940  001578  0100               	movlb	0	; () banked
  3941  00157A  05E6               	decf	_IR_signal& (0+255),w,b
  3942  00157C  0100               	movlb	0	; () banked
  3943  00157E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3944  001580  A4D8               	btfss	status,2,c
  3945  001582  D0D6               	goto	l7734
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 202: _delay((unsigned long)((350)*(32000000/4000.0)));
  3949  001584  0E0F               	movlw	15
  3950  001586  0100               	movlb	0	; () banked
  3951  001588  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3952  00158A  0E35               	movlw	53
  3953  00158C  0100               	movlb	0	; () banked
  3954  00158E  6FB1               	movwf	??_Loading& (0+255),b
  3955  001590  0E51               	movlw	81
  3956  001592                     u9547:
  3957  001592  2EE8               	decfsz	wreg,f,c
  3958  001594  D7FE               	bra	u9547
  3959  001596  2FB1               	decfsz	??_Loading& (0+255),f,b
  3960  001598  D7FC               	bra	u9547
  3961  00159A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3962  00159C  D7FA               	bra	u9547
  3963                           
  3964                           ;sort.c: 203: readIR();
  3965  00159E  EC54  F028         	call	_readIR	;wreg free
  3966                           
  3967                           ;sort.c: 204: if(IR_signal==1){
  3968  0015A2  0100               	movlb	0	; () banked
  3969  0015A4  05E6               	decf	_IR_signal& (0+255),w,b
  3970  0015A6  0100               	movlb	0	; () banked
  3971  0015A8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3972  0015AA  A4D8               	btfss	status,2,c
  3973  0015AC  D0BD               	goto	l815
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;sort.c: 205: if(sensor_outputs[0]){
  3977  0015AE  0100               	movlb	0	; () banked
  3978  0015B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3979  0015B2  0100               	movlb	0	; () banked
  3980  0015B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3981  0015B6  B4D8               	btfsc	status,2,c
  3982  0015B8  D011               	goto	l7696
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;sort.c: 206: LATAbits.LATA4 = 1;
  3986  0015BA  8889               	bsf	3977,4,c	;volatile
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;sort.c: 207: _delay((unsigned long)((250)*(32000000/4000.0)));
  3990  0015BC  0E0B               	movlw	11
  3991  0015BE  0100               	movlb	0	; () banked
  3992  0015C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3993  0015C2  0E26               	movlw	38
  3994  0015C4  0100               	movlb	0	; () banked
  3995  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  3996  0015C8  0E5D               	movlw	93
  3997  0015CA                     u9557:
  3998  0015CA  2EE8               	decfsz	wreg,f,c
  3999  0015CC  D7FE               	bra	u9557
  4000  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4001  0015D0  D7FC               	bra	u9557
  4002  0015D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4003  0015D4  D7FA               	bra	u9557
  4004  0015D6  D000               	nop2	
  4005                           
  4006                           ;sort.c: 208: LATAbits.LATA4 = 0;
  4007  0015D8  9889               	bcf	3977,4,c	;volatile
  4008                           
  4009                           ;sort.c: 209: }
  4010  0015DA  D0A6               	goto	l815
  4011  0015DC                     l7696:
  4012                           
  4013                           ;sort.c: 210: else{
  4014                           ;sort.c: 211: for(int i = 0; i<25; i++){
  4015  0015DC  0E00               	movlw	0
  4016  0015DE  0100               	movlb	0	; () banked
  4017  0015E0  6FBF               	movwf	(Loading@i_1197+1)& (0+255),b
  4018  0015E2  0E00               	movlw	0
  4019  0015E4  6FBE               	movwf	Loading@i_1197& (0+255),b
  4020                           
  4021                           ; BSR set to: 0
  4022  0015E6  0100               	movlb	0	; () banked
  4023  0015E8  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4024  0015EA  D079               	goto	l7726
  4025  0015EC  0100               	movlb	0	; () banked
  4026  0015EE  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4027  0015F0  E106               	bnz	u6350
  4028  0015F2  0E19               	movlw	25
  4029  0015F4  0100               	movlb	0	; () banked
  4030  0015F6  5DBE               	subwf	Loading@i_1197& (0+255),w,b
  4031  0015F8  B0D8               	btfsc	status,0,c
  4032  0015FA  D096               	goto	l815
  4033  0015FC  D070               	goto	l7726
  4034  0015FE                     u6350:
  4035                           
  4036                           ; BSR set to: 0
  4037  0015FE  D094               	goto	l815
  4038  001600                     l821:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 214: LATAbits.LATA4 = 1;
  4042  001600  8889               	bsf	3977,4,c	;volatile
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;sort.c: 215: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4046  001602  0E4E               	movlw	78
  4047  001604  0100               	movlb	0	; () banked
  4048  001606  6FB1               	movwf	??_Loading& (0+255),b
  4049  001608  0EEB               	movlw	235
  4050  00160A                     u9567:
  4051  00160A  2EE8               	decfsz	wreg,f,c
  4052  00160C  D7FE               	bra	u9567
  4053  00160E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4054  001610  D7FC               	bra	u9567
  4055                           
  4056                           ;sort.c: 216: LATAbits.LATA4 = 0;
  4057  001612  9889               	bcf	3977,4,c	;volatile
  4058                           
  4059                           ;sort.c: 217: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4060  001614  0E1A               	movlw	26
  4061  001616  0100               	movlb	0	; () banked
  4062  001618  6FB1               	movwf	??_Loading& (0+255),b
  4063  00161A  0EF8               	movlw	248
  4064  00161C                     u9577:
  4065  00161C  2EE8               	decfsz	wreg,f,c
  4066  00161E  D7FE               	bra	u9577
  4067  001620  2FB1               	decfsz	??_Loading& (0+255),f,b
  4068  001622  D7FC               	bra	u9577
  4069  001624  D05A               	goto	L6
  4070  001626                     l823:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;sort.c: 220: LATAbits.LATA4 = 1;
  4074  001626  8889               	bsf	3977,4,c	;volatile
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;sort.c: 221: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4078  001628  0E54               	movlw	84
  4079  00162A  0100               	movlb	0	; () banked
  4080  00162C  6FB1               	movwf	??_Loading& (0+255),b
  4081  00162E  0E1C               	movlw	28
  4082  001630                     u9587:
  4083  001630  2EE8               	decfsz	wreg,f,c
  4084  001632  D7FE               	bra	u9587
  4085  001634  2FB1               	decfsz	??_Loading& (0+255),f,b
  4086  001636  D7FC               	bra	u9587
  4087  001638  F000               	nop	
  4088                           
  4089                           ;sort.c: 222: LATAbits.LATA4 = 0;
  4090  00163A  9889               	bcf	3977,4,c	;volatile
  4091                           
  4092                           ;sort.c: 223: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4093  00163C  0E15               	movlw	21
  4094  00163E  0100               	movlb	0	; () banked
  4095  001640  6FB1               	movwf	??_Loading& (0+255),b
  4096  001642  0EC6               	movlw	198
  4097  001644                     u9597:
  4098  001644  2EE8               	decfsz	wreg,f,c
  4099  001646  D7FE               	bra	u9597
  4100  001648  2FB1               	decfsz	??_Loading& (0+255),f,b
  4101  00164A  D7FC               	bra	u9597
  4102  00164C  D046               	goto	L6
  4103  00164E                     l824:
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;sort.c: 226: LATAbits.LATA4 = 1;
  4107  00164E  8889               	bsf	3977,4,c	;volatile
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 227: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4111  001650  0E59               	movlw	89
  4112  001652  0100               	movlb	0	; () banked
  4113  001654  6FB1               	movwf	??_Loading& (0+255),b
  4114  001656  0E4E               	movlw	78
  4115  001658                     u9607:
  4116  001658  2EE8               	decfsz	wreg,f,c
  4117  00165A  D7FE               	bra	u9607
  4118  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4119  00165E  D7FC               	bra	u9607
  4120  001660  F000               	nop	
  4121                           
  4122                           ;sort.c: 228: LATAbits.LATA4 = 0;
  4123  001662  9889               	bcf	3977,4,c	;volatile
  4124                           
  4125                           ;sort.c: 229: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4126  001664  0E10               	movlw	16
  4127  001666  0100               	movlb	0	; () banked
  4128  001668  6FB1               	movwf	??_Loading& (0+255),b
  4129  00166A  0E94               	movlw	148
  4130  00166C                     u9617:
  4131  00166C  2EE8               	decfsz	wreg,f,c
  4132  00166E  D7FE               	bra	u9617
  4133  001670  2FB1               	decfsz	??_Loading& (0+255),f,b
  4134  001672  D7FC               	bra	u9617
  4135  001674  D032               	goto	L6
  4136  001676                     l825:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;sort.c: 232: LATAbits.LATA4 = 1;
  4140  001676  8889               	bsf	3977,4,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;sort.c: 233: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4144  001678  0E5E               	movlw	94
  4145  00167A  0100               	movlb	0	; () banked
  4146  00167C  6FB1               	movwf	??_Loading& (0+255),b
  4147  00167E  0E80               	movlw	128
  4148  001680                     u9627:
  4149  001680  2EE8               	decfsz	wreg,f,c
  4150  001682  D7FE               	bra	u9627
  4151  001684  2FB1               	decfsz	??_Loading& (0+255),f,b
  4152  001686  D7FC               	bra	u9627
  4153  001688  F000               	nop	
  4154                           
  4155                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4156  00168A  9889               	bcf	3977,4,c	;volatile
  4157                           
  4158                           ;sort.c: 235: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4159  00168C  0E0B               	movlw	11
  4160  00168E  0100               	movlb	0	; () banked
  4161  001690  6FB1               	movwf	??_Loading& (0+255),b
  4162  001692  0E62               	movlw	98
  4163  001694                     u9637:
  4164  001694  2EE8               	decfsz	wreg,f,c
  4165  001696  D7FE               	bra	u9637
  4166  001698  2FB1               	decfsz	??_Loading& (0+255),f,b
  4167  00169A  D7FC               	bra	u9637
  4168  00169C  D01E               	goto	L6
  4169  00169E                     l826:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 238: LATAbits.LATA4 = 1;
  4173  00169E  8889               	bsf	3977,4,c	;volatile
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;sort.c: 239: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4177  0016A0  0E63               	movlw	99
  4178  0016A2  0100               	movlb	0	; () banked
  4179  0016A4  6FB1               	movwf	??_Loading& (0+255),b
  4180  0016A6  0EB2               	movlw	178
  4181  0016A8                     u9647:
  4182  0016A8  2EE8               	decfsz	wreg,f,c
  4183  0016AA  D7FE               	bra	u9647
  4184  0016AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4185  0016AE  D7FC               	bra	u9647
  4186  0016B0  F000               	nop	
  4187                           
  4188                           ;sort.c: 240: LATAbits.LATA4 = 0;
  4189  0016B2  9889               	bcf	3977,4,c	;volatile
  4190                           
  4191                           ;sort.c: 241: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4192  0016B4  0E34               	movlw	52
  4193  0016B6  0100               	movlb	0	; () banked
  4194  0016B8  6FB1               	movwf	??_Loading& (0+255),b
  4195  0016BA  0EF1               	movlw	241
  4196  0016BC                     u9657:
  4197  0016BC  2EE8               	decfsz	wreg,f,c
  4198  0016BE  D7FE               	bra	u9657
  4199  0016C0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4200  0016C2  D7FC               	bra	u9657
  4201  0016C4  D000               	nop2	
  4202                           
  4203                           ;sort.c: 242: break;
  4204  0016C6  D026               	goto	l7728
  4205  0016C8                     l827:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;sort.c: 244: LATAbits.LATA4 = 1;
  4209  0016C8  8889               	bsf	3977,4,c	;volatile
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;sort.c: 245: _delay((unsigned long)((10)*(32000000/4000.0)));
  4213  0016CA  0E68               	movlw	104
  4214  0016CC  0100               	movlb	0	; () banked
  4215  0016CE  6FB1               	movwf	??_Loading& (0+255),b
  4216  0016D0  0EE4               	movlw	228
  4217  0016D2                     u9667:
  4218  0016D2  2EE8               	decfsz	wreg,f,c
  4219  0016D4  D7FE               	bra	u9667
  4220  0016D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4221  0016D8  D7FC               	bra	u9667
  4222  0016DA                     L6:
  4223  0016DA  F000               	nop	
  4224                           
  4225                           ;sort.c: 247: }
  4226                           
  4227                           ;sort.c: 246: break;
  4228  0016DC  D01B               	goto	l7728
  4229  0016DE                     l7726:
  4230  0016DE  C0C2  F0B1         	movff	Loading@j,??_Loading
  4231  0016E2  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4232                           
  4233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4234                           ; Switch size 1, requested type "space"
  4235                           ; Number of cases is 1, Range of values is 0 to 0
  4236                           ; switch strategies available:
  4237                           ; Name         Instructions Cycles
  4238                           ; simple_byte            4     3 (average)
  4239                           ;	Chosen strategy is simple_byte
  4240  0016E6  0100               	movlb	0	; () banked
  4241  0016E8  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4242  0016EA  0A00               	xorlw	0	; case 0
  4243  0016EC  A4D8               	btfss	status,2,c
  4244  0016EE  D7EC               	goto	l827
  4245                           
  4246                           ; BSR set to: 0
  4247                           ; Switch size 1, requested type "space"
  4248                           ; Number of cases is 5, Range of values is 0 to 4
  4249                           ; switch strategies available:
  4250                           ; Name         Instructions Cycles
  4251                           ; simple_byte           16     9 (average)
  4252                           ;	Chosen strategy is simple_byte
  4253  0016F0  0100               	movlb	0	; () banked
  4254  0016F2  51B1               	movf	??_Loading& (0+255),w,b
  4255  0016F4  0A00               	xorlw	0	; case 0
  4256  0016F6  B4D8               	btfsc	status,2,c
  4257  0016F8  D783               	goto	l821
  4258  0016FA  0A01               	xorlw	1	; case 1
  4259  0016FC  B4D8               	btfsc	status,2,c
  4260  0016FE  D793               	goto	l823
  4261  001700  0A03               	xorlw	3	; case 2
  4262  001702  B4D8               	btfsc	status,2,c
  4263  001704  D7A4               	goto	l824
  4264  001706  0A01               	xorlw	1	; case 3
  4265  001708  B4D8               	btfsc	status,2,c
  4266  00170A  D7B5               	goto	l825
  4267  00170C  0A07               	xorlw	7	; case 4
  4268  00170E  B4D8               	btfsc	status,2,c
  4269  001710  D7C6               	goto	l826
  4270  001712  D7DA               	goto	l827
  4271  001714                     l7728:
  4272  001714  0100               	movlb	0	; () banked
  4273  001716  4BBE               	infsnz	Loading@i_1197& (0+255),f,b
  4274  001718  2BBF               	incf	(Loading@i_1197+1)& (0+255),f,b
  4275                           
  4276                           ; BSR set to: 0
  4277  00171A  0100               	movlb	0	; () banked
  4278  00171C  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4279  00171E  D7DF               	goto	l7726
  4280  001720  0100               	movlb	0	; () banked
  4281  001722  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4282  001724  E101               	bnz	l815
  4283  001726  D765               	goto	L7
  4284  001728                     l815:
  4285                           
  4286                           ;sort.c: 248: }
  4287                           ;sort.c: 249: }
  4288                           ;sort.c: 250: }
  4289                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4290  001728  9889               	bcf	3977,4,c	;volatile
  4291                           
  4292                           ;sort.c: 252: j++;
  4293  00172A  0100               	movlb	0	; () banked
  4294  00172C  4BC2               	infsnz	Loading@j& (0+255),f,b
  4295  00172E  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4296  001730                     l7734:
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;sort.c: 253: }
  4300                           ;sort.c: 255: if(!IR_signal){
  4301  001730  0100               	movlb	0	; () banked
  4302  001732  51E6               	movf	_IR_signal& (0+255),w,b
  4303  001734  0100               	movlb	0	; () banked
  4304  001736  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4305  001738  A4D8               	btfss	status,2,c
  4306  00173A  D016               	goto	l7746
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;sort.c: 256: _delay((unsigned long)((500)*(32000000/4000.0)));
  4310  00173C  0E15               	movlw	21
  4311  00173E  0100               	movlb	0	; () banked
  4312  001740  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4313  001742  0E4B               	movlw	75
  4314  001744  0100               	movlb	0	; () banked
  4315  001746  6FB1               	movwf	??_Loading& (0+255),b
  4316  001748  0EBE               	movlw	190
  4317  00174A                     u9677:
  4318  00174A  2EE8               	decfsz	wreg,f,c
  4319  00174C  D7FE               	bra	u9677
  4320  00174E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4321  001750  D7FC               	bra	u9677
  4322  001752  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4323  001754  D7FA               	bra	u9677
  4324  001756  F000               	nop	
  4325                           
  4326                           ;sort.c: 257: readIR();
  4327  001758  EC54  F028         	call	_readIR	;wreg free
  4328                           
  4329                           ;sort.c: 258: if(IR_signal==1){
  4330  00175C  0100               	movlb	0	; () banked
  4331  00175E  05E6               	decf	_IR_signal& (0+255),w,b
  4332  001760  0100               	movlb	0	; () banked
  4333  001762  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4334  001764  A4D8               	btfss	status,2,c
  4335  001766  D006               	goto	l831
  4336  001768                     l7746:
  4337                           
  4338                           ; BSR set to: 0
  4339  001768  0100               	movlb	0	; () banked
  4340  00176A  05E6               	decf	_IR_signal& (0+255),w,b
  4341  00176C  0100               	movlb	0	; () banked
  4342  00176E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4343  001770  B4D8               	btfsc	status,2,c
  4344  001772  D6A9               	goto	l7662
  4345  001774                     l831:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;sort.c: 263: }
  4349                           ;sort.c: 264: }
  4350                           ;sort.c: 265: }
  4351                           ;sort.c: 266: LATBbits.LATB2 = 0;
  4352  001774  948A               	bcf	3978,2,c	;volatile
  4353  001776                     l7748:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;sort.c: 267: }
  4357                           ;sort.c: 268: f_can_coming_to_ID = 1;
  4358  001776  0E00               	movlw	0
  4359  001778  0101               	movlb	1	; () banked
  4360  00177A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4361  00177C  0E01               	movlw	1
  4362  00177E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4363                           
  4364                           ; BSR set to: 1
  4365                           
  4366                           ; BSR set to: 1
  4367  001780  0012               	return	
  4368  001782                     __end_of_Loading:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           postinc0	equ	0xFEE
  4377                           wreg	equ	0xFE8
  4378                           postdec1	equ	0xFE5
  4379                           fsr1l	equ	0xFE1
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _initSortTimer *****************
  4383 ;; Defined at:
  4384 ;;		line 429 in file "sort.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;		None
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  i               2    8[BANK0 ] int 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      void 
  4391 ;; Registers used:
  4392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;Total ram usage:        5 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:   10
  4405 ;; This function calls:
  4406 ;;		_getRTC
  4407 ;; This function is called by:
  4408 ;;		_Loading
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text3
  4413  0047B8                     __ptext3:
  4414                           	opt stack 0
  4415  0047B8                     _initSortTimer:
  4416                           	opt stack 18
  4417                           
  4418                           ;sort.c: 431: getRTC();
  4419                           
  4420                           ;incstack = 0
  4421  0047B8  ECC8  F024         	call	_getRTC	;wreg free
  4422                           
  4423                           ;sort.c: 432: for(int i = 0; i < 7; i++){
  4424  0047BC  0E00               	movlw	0
  4425  0047BE  0100               	movlb	0	; () banked
  4426  0047C0  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4427  0047C2  0E00               	movlw	0
  4428  0047C4  6F88               	movwf	initSortTimer@i& (0+255),b
  4429  0047C6                     l7128:
  4430                           
  4431                           ; BSR set to: 0
  4432  0047C6  0100               	movlb	0	; () banked
  4433  0047C8  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4434  0047CA  D008               	goto	l7132
  4435  0047CC  0100               	movlb	0	; () banked
  4436  0047CE  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4437  0047D0  E140               	bnz	l7138
  4438  0047D2  0E07               	movlw	7
  4439  0047D4  0100               	movlb	0	; () banked
  4440  0047D6  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4441  0047D8  B0D8               	btfsc	status,0,c
  4442  0047DA  D03B               	goto	l7138
  4443  0047DC                     l7132:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;sort.c: 433: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4447  0047DC  0E1C               	movlw	low _time
  4448  0047DE  0100               	movlb	0	; () banked
  4449  0047E0  2588               	addwf	initSortTimer@i& (0+255),w,b
  4450  0047E2  6ED9               	movwf	fsr2l,c
  4451  0047E4  0E01               	movlw	high _time
  4452  0047E6  0100               	movlb	0	; () banked
  4453  0047E8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4454  0047EA  6EDA               	movwf	fsr2h,c
  4455  0047EC  50DF               	movf	indf2,w,c
  4456  0047EE  0100               	movlb	0	; () banked
  4457  0047F0  6F85               	movwf	??_initSortTimer& (0+255),b
  4458  0047F2  0100               	movlb	0	; () banked
  4459  0047F4  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4460  0047F6  0E0F               	movlw	15
  4461  0047F8  1785               	andwf	??_initSortTimer& (0+255),f,b
  4462  0047FA  0E0F               	movlw	15
  4463  0047FC  0100               	movlb	0	; () banked
  4464  0047FE  1785               	andwf	??_initSortTimer& (0+255),f,b
  4465  004800  0100               	movlb	0	; () banked
  4466  004802  5185               	movf	??_initSortTimer& (0+255),w,b
  4467  004804  0D0A               	mullw	10
  4468  004806  0E1C               	movlw	low _time
  4469  004808  0100               	movlb	0	; () banked
  4470  00480A  2588               	addwf	initSortTimer@i& (0+255),w,b
  4471  00480C  6ED9               	movwf	fsr2l,c
  4472  00480E  0E01               	movlw	high _time
  4473  004810  0100               	movlb	0	; () banked
  4474  004812  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4475  004814  6EDA               	movwf	fsr2h,c
  4476  004816  50DF               	movf	indf2,w,c
  4477  004818  0B0F               	andlw	15
  4478  00481A  0100               	movlb	0	; () banked
  4479  00481C  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4480  00481E  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4481  004820  50F3               	movf	prodl,w,c
  4482  004822  0100               	movlb	0	; () banked
  4483  004824  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4484  004826  50F4               	movf	prodh,w,c
  4485  004828  0100               	movlb	0	; () banked
  4486  00482A  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4487  00482C  90D8               	bcf	status,0,c
  4488  00482E  0100               	movlb	0	; () banked
  4489  004830  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4490  004832  6ED9               	movwf	fsr2l,c
  4491  004834  0100               	movlb	0	; () banked
  4492  004836  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4493  004838  6EDA               	movwf	fsr2h,c
  4494  00483A  0E0E               	movlw	low _startTime
  4495  00483C  26D9               	addwf	fsr2l,f,c
  4496  00483E  0E01               	movlw	high _startTime
  4497  004840  22DA               	addwfc	fsr2h,f,c
  4498  004842  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4499  004846  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4500                           
  4501                           ; BSR set to: 0
  4502  00484A  0100               	movlb	0	; () banked
  4503  00484C  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4504  00484E  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4505  004850  D7BA               	goto	l7128
  4506  004852                     l7138:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;sort.c: 434: }
  4510                           ;sort.c: 436: T0CON = 0b00010111;
  4511  004852  0E17               	movlw	23
  4512  004854  6ED5               	movwf	4053,c	;volatile
  4513                           
  4514                           ;sort.c: 445: TMR0H = 0b10000101;
  4515  004856  0E85               	movlw	133
  4516  004858  6ED7               	movwf	4055,c	;volatile
  4517                           
  4518                           ;sort.c: 446: TMR0L = 0b11101110;
  4519  00485A  0EEE               	movlw	238
  4520  00485C  6ED6               	movwf	4054,c	;volatile
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;sort.c: 447: TMR0ON = 1;
  4524  00485E  8ED5               	bsf	4053,7,c	;volatile
  4525                           
  4526                           ; BSR set to: 0
  4527  004860  0012               	return		;funcret
  4528  004862                     __end_of_initSortTimer:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _initGlobalVars *****************
  4548 ;; Defined at:
  4549 ;;		line 397 in file "sort.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    7
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_Loading
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text4
  4578  004580                     __ptext4:
  4579                           	opt stack 0
  4580  004580                     _initGlobalVars:
  4581                           	opt stack 21
  4582                           
  4583                           ;sort.c: 399: first = 0;
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;incstack = 0
  4587  004580  0E00               	movlw	0
  4588  004582  0101               	movlb	1	; () banked
  4589  004584  6F3A               	movwf	(_first+1)& (0+255),b
  4590  004586  0E00               	movlw	0
  4591  004588  6F39               	movwf	_first& (0+255),b
  4592                           
  4593                           ;sort.c: 402: f_loadingNewCan = 0;
  4594  00458A  0E00               	movlw	0
  4595  00458C  0100               	movlb	0	; () banked
  4596  00458E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4597  004590  0E00               	movlw	0
  4598  004592  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4599                           
  4600                           ;sort.c: 403: f_lastCan = 0;
  4601  004594  0E00               	movlw	0
  4602  004596  0100               	movlb	0	; () banked
  4603  004598  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4604  00459A  0E00               	movlw	0
  4605  00459C  6FF0               	movwf	_f_lastCan& (0+255),b
  4606                           
  4607                           ;sort.c: 404: f_ID_receive = 1;
  4608  00459E  0E00               	movlw	0
  4609  0045A0  0101               	movlb	1	; () banked
  4610  0045A2  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4611  0045A4  0E01               	movlw	1
  4612  0045A6  6F2F               	movwf	_f_ID_receive& (0+255),b
  4613                           
  4614                           ;sort.c: 405: f_can_coming_to_ID = 0;
  4615  0045A8  0E00               	movlw	0
  4616  0045AA  0101               	movlb	1	; () banked
  4617  0045AC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4618  0045AE  0E00               	movlw	0
  4619  0045B0  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4620                           
  4621                           ;sort.c: 406: f_can_coming_to_distribution = 0;
  4622  0045B2  0E00               	movlw	0
  4623  0045B4  0101               	movlb	1	; () banked
  4624  0045B6  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4625  0045B8  0E00               	movlw	0
  4626  0045BA  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4627                           
  4628                           ;sort.c: 407: f_can_distributed = 1;
  4629  0045BC  0E00               	movlw	0
  4630  0045BE  0101               	movlb	1	; () banked
  4631  0045C0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4632  0045C2  0E01               	movlw	1
  4633  0045C4  6F35               	movwf	_f_can_distributed& (0+255),b
  4634                           
  4635                           ;sort.c: 408: f_most_recent_sort_time = 0;
  4636  0045C6  0E00               	movlw	0
  4637  0045C8  0101               	movlb	1	; () banked
  4638  0045CA  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4639  0045CC  0E00               	movlw	0
  4640  0045CE  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4641                           
  4642                           ;sort.c: 411: count_total = 0;
  4643  0045D0  0E00               	movlw	0
  4644  0045D2  0100               	movlb	0	; () banked
  4645  0045D4  6FFF               	movwf	(_count_total+1)& (0+255),b
  4646  0045D6  0E00               	movlw	0
  4647  0045D8  6FFE               	movwf	_count_total& (0+255),b
  4648                           
  4649                           ;sort.c: 412: count_pop_no_tab = 0;
  4650  0045DA  0E00               	movlw	0
  4651  0045DC  0101               	movlb	1	; () banked
  4652  0045DE  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4653  0045E0  0E00               	movlw	0
  4654  0045E2  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4655                           
  4656                           ;sort.c: 413: count_pop_w_tab = 0;
  4657  0045E4  0E00               	movlw	0
  4658  0045E6  0101               	movlb	1	; () banked
  4659  0045E8  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4660  0045EA  0E00               	movlw	0
  4661  0045EC  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4662                           
  4663                           ;sort.c: 414: count_can_w_lab = 0;
  4664  0045EE  0E00               	movlw	0
  4665  0045F0  0101               	movlb	1	; () banked
  4666  0045F2  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4667  0045F4  0E00               	movlw	0
  4668  0045F6  6F25               	movwf	_count_can_w_lab& (0+255),b
  4669                           
  4670                           ;sort.c: 415: count_can_no_lab = 0;
  4671  0045F8  0E00               	movlw	0
  4672  0045FA  0101               	movlb	1	; () banked
  4673  0045FC  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4674  0045FE  0E00               	movlw	0
  4675  004600  6F23               	movwf	_count_can_no_lab& (0+255),b
  4676                           
  4677                           ;sort.c: 418: most_recent_sort_time = 999;
  4678  004602  0E03               	movlw	3
  4679  004604  6E6A               	movwf	_most_recent_sort_time+1,c
  4680  004606  0EE7               	movlw	231
  4681  004608  6E69               	movwf	_most_recent_sort_time,c
  4682                           
  4683                           ;sort.c: 421: servo_timer_counter = 0;
  4684  00460A  0E00               	movlw	0
  4685  00460C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4686  00460E  0E00               	movlw	0
  4687  004610  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4688                           
  4689                           ;sort.c: 422: servo_timer_target = 9999;
  4690  004612  0E27               	movlw	39
  4691  004614  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4692  004616  0E0F               	movlw	15
  4693  004618  6E6F               	movwf	_servo_timer_target,c	;volatile
  4694                           
  4695                           ;sort.c: 423: timer2_counter = 0;
  4696  00461A  0E00               	movlw	0
  4697  00461C  6E74               	movwf	_timer2_counter+1,c	;volatile
  4698  00461E  0E00               	movlw	0
  4699  004620  6E73               	movwf	_timer2_counter,c	;volatile
  4700                           
  4701                           ;sort.c: 424: f_arm_position = 0;
  4702  004622  0E00               	movlw	0
  4703  004624  0100               	movlb	0	; () banked
  4704  004626  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4705  004628  0E00               	movlw	0
  4706  00462A  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;sort.c: 425: pan_servo_state = -1;
  4710  00462C  686B               	setf	_pan_servo_state,c	;volatile
  4711  00462E  686C               	setf	_pan_servo_state+1,c	;volatile
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;sort.c: 426: tilt_servo_state = -1;
  4715  004630  6871               	setf	_tilt_servo_state,c	;volatile
  4716  004632  6872               	setf	_tilt_servo_state+1,c	;volatile
  4717                           
  4718                           ;sort.c: 427: f_panning_to_bin = 0;
  4719  004634  0E00               	movlw	0
  4720  004636  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4721  004638  0E00               	movlw	0
  4722  00463A  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4723                           
  4724                           ; BSR set to: 0
  4725  00463C  0012               	return		;funcret
  4726  00463E                     __end_of_initGlobalVars:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           postinc0	equ	0xFEE
  4735                           wreg	equ	0xFE8
  4736                           postdec1	equ	0xFE5
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function _getMAG *****************
  4746 ;; Defined at:
  4747 ;;		line 526 in file "sort.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        2 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    9
  4768 ;; This function calls:
  4769 ;;		_readMAG
  4770 ;; This function is called by:
  4771 ;;		_Loading
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text5
  4776  0052DE                     __ptext5:
  4777                           	opt stack 0
  4778  0052DE                     _getMAG:
  4779                           	opt stack 19
  4780                           
  4781                           ;sort.c: 527: readMAG();
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785  0052DE  EC7A  F028         	call	_readMAG	;wreg free
  4786                           
  4787                           ;sort.c: 529: if(MAG_signal==1){
  4788  0052E2  0100               	movlb	0	; () banked
  4789  0052E4  05E8               	decf	_MAG_signal& (0+255),w,b
  4790  0052E6  0100               	movlb	0	; () banked
  4791  0052E8  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4792  0052EA  A4D8               	btfss	status,2,c
  4793  0052EC  0012               	return	
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;sort.c: 530: _delay((unsigned long)((500)*(32000000/4000.0)));
  4797  0052EE  0E15               	movlw	21
  4798  0052F0  0100               	movlb	0	; () banked
  4799  0052F2  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4800  0052F4  0E4B               	movlw	75
  4801  0052F6  0100               	movlb	0	; () banked
  4802  0052F8  6F86               	movwf	??_getMAG& (0+255),b
  4803  0052FA  0EBE               	movlw	190
  4804  0052FC                     u9687:
  4805  0052FC  2EE8               	decfsz	wreg,f,c
  4806  0052FE  D7FE               	bra	u9687
  4807  005300  2F86               	decfsz	??_getMAG& (0+255),f,b
  4808  005302  D7FC               	bra	u9687
  4809  005304  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4810  005306  D7FA               	bra	u9687
  4811  005308  F000               	nop	
  4812                           
  4813                           ;sort.c: 531: readMAG();
  4814  00530A  EC7A  F028         	call	_readMAG	;wreg free
  4815  00530E  0012               	return	
  4816  005310                     __end_of_getMAG:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _getIR *****************
  4836 ;; Defined at:
  4837 ;;		line 510 in file "sort.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  i               2    7[BANK0 ] int 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;Total ram usage:        3 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    9
  4858 ;; This function calls:
  4859 ;;		_readIR
  4860 ;; This function is called by:
  4861 ;;		_Loading
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text6
  4866  004C10                     __ptext6:
  4867                           	opt stack 0
  4868  004C10                     _getIR:
  4869                           	opt stack 19
  4870                           
  4871                           ;sort.c: 511: readIR();
  4872                           
  4873                           ;incstack = 0
  4874  004C10  EC54  F028         	call	_readIR	;wreg free
  4875                           
  4876                           ;sort.c: 512: for(int i = 0; i < 150; i++){
  4877  004C14  0E00               	movlw	0
  4878  004C16  0100               	movlb	0	; () banked
  4879  004C18  6F88               	movwf	(getIR@i+1)& (0+255),b
  4880  004C1A  0E00               	movlw	0
  4881  004C1C  6F87               	movwf	getIR@i& (0+255),b
  4882  004C1E                     l7228:
  4883                           
  4884                           ; BSR set to: 0
  4885  004C1E  0100               	movlb	0	; () banked
  4886  004C20  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4887  004C22  D008               	goto	l7232
  4888  004C24  0100               	movlb	0	; () banked
  4889  004C26  5188               	movf	(getIR@i+1)& (0+255),w,b
  4890  004C28  E11A               	bnz	l7244
  4891  004C2A  0E96               	movlw	150
  4892  004C2C  0100               	movlb	0	; () banked
  4893  004C2E  5D87               	subwf	getIR@i& (0+255),w,b
  4894  004C30  B0D8               	btfsc	status,0,c
  4895  004C32  D015               	goto	l7244
  4896  004C34                     l7232:
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;sort.c: 513: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4900  004C34  0E06               	movlw	6
  4901  004C36  0100               	movlb	0	; () banked
  4902  004C38  6F86               	movwf	??_getIR& (0+255),b
  4903  004C3A  0E30               	movlw	48
  4904  004C3C                     u9697:
  4905  004C3C  2EE8               	decfsz	wreg,f,c
  4906  004C3E  D7FE               	bra	u9697
  4907  004C40  2F86               	decfsz	??_getIR& (0+255),f,b
  4908  004C42  D7FC               	bra	u9697
  4909  004C44  F000               	nop	
  4910                           
  4911                           ;sort.c: 514: readIR();
  4912  004C46  EC54  F028         	call	_readIR	;wreg free
  4913                           
  4914                           ;sort.c: 515: if(!IR_signal){
  4915  004C4A  0100               	movlb	0	; () banked
  4916  004C4C  51E6               	movf	_IR_signal& (0+255),w,b
  4917  004C4E  0100               	movlb	0	; () banked
  4918  004C50  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4919  004C52  B4D8               	btfsc	status,2,c
  4920  004C54  D004               	goto	l7244
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;sort.c: 516: break;
  4928  004C56  0100               	movlb	0	; () banked
  4929  004C58  4B87               	infsnz	getIR@i& (0+255),f,b
  4930  004C5A  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4931  004C5C  D7E0               	goto	l7228
  4932  004C5E                     l7244:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;sort.c: 517: }
  4936                           ;sort.c: 518: }
  4937                           ;sort.c: 519: if(IR_signal==1){
  4938  004C5E  0100               	movlb	0	; () banked
  4939  004C60  05E6               	decf	_IR_signal& (0+255),w,b
  4940  004C62  0100               	movlb	0	; () banked
  4941  004C64  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4942  004C66  A4D8               	btfss	status,2,c
  4943  004C68  D006               	goto	l7248
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;sort.c: 520: f_loadingNewCan = 1;
  4947  004C6A  0E00               	movlw	0
  4948  004C6C  0100               	movlb	0	; () banked
  4949  004C6E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4950  004C70  0E01               	movlw	1
  4951  004C72  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4952                           
  4953                           ;sort.c: 521: }
  4954  004C74  0012               	return	
  4955  004C76                     l7248:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;sort.c: 522: else{
  4959                           ;sort.c: 523: f_loadingNewCan = 0;
  4960  004C76  0E00               	movlw	0
  4961  004C78  0100               	movlb	0	; () banked
  4962  004C7A  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4963  004C7C  0E00               	movlw	0
  4964  004C7E  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4965  004C80  0012               	return	
  4966  004C82                     __end_of_getIR:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _readIR *****************
  4986 ;; Defined at:
  4987 ;;		line 23 in file "ADCFunctionality.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  res             2    4[BANK0 ] int 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      void 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        4 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_readADC
  5010 ;; This function is called by:
  5011 ;;		_Loading
  5012 ;;		_getIR
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text7
  5017  0050A8                     __ptext7:
  5018                           	opt stack 0
  5019  0050A8                     _readIR:
  5020                           	opt stack 20
  5021                           
  5022                           ;ADCFunctionality.c: 24: readADC(0);
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;incstack = 0
  5026  0050A8  0E00               	movlw	0
  5027  0050AA  ECD5  F02A         	call	_readADC
  5028                           
  5029                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5030  0050AE  50C3               	movf	4035,w,c	;volatile
  5031  0050B0  CFC4 F082          	movff	4036,??_readIR	;volatile
  5032  0050B4  0100               	movlb	0	; () banked
  5033  0050B6  6B83               	clrf	(??_readIR+1)& (0+255),b
  5034  0050B8  C082  F083         	movff	??_readIR,??_readIR+1
  5035  0050BC  0100               	movlb	0	; () banked
  5036  0050BE  6B82               	clrf	??_readIR& (0+255),b
  5037  0050C0  0100               	movlb	0	; () banked
  5038  0050C2  1182               	iorwf	??_readIR& (0+255),w,b
  5039  0050C4  0100               	movlb	0	; () banked
  5040  0050C6  6F84               	movwf	readIR@res& (0+255),b
  5041  0050C8  0100               	movlb	0	; () banked
  5042  0050CA  5183               	movf	(??_readIR+1)& (0+255),w,b
  5043  0050CC  0100               	movlb	0	; () banked
  5044  0050CE  6F85               	movwf	(readIR@res+1)& (0+255),b
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5048  0050D0  0100               	movlb	0	; () banked
  5049  0050D2  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5050  0050D4  D00A               	goto	u4960
  5051  0050D6  0E21               	movlw	33
  5052  0050D8  0100               	movlb	0	; () banked
  5053  0050DA  5D84               	subwf	readIR@res& (0+255),w,b
  5054  0050DC  0E03               	movlw	3
  5055  0050DE  0100               	movlb	0	; () banked
  5056  0050E0  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5057  0050E2  A0D8               	btfss	status,0,c
  5058  0050E4  D002               	goto	u4960
  5059  0050E6  0E01               	movlw	1
  5060  0050E8  D001               	goto	u4970
  5061  0050EA                     u4960:
  5062  0050EA  0E00               	movlw	0
  5063  0050EC                     u4970:
  5064  0050EC  0100               	movlb	0	; () banked
  5065  0050EE  6FE6               	movwf	_IR_signal& (0+255),b
  5066  0050F0  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  5067                           
  5068                           ; BSR set to: 0
  5069  0050F2  0012               	return		;funcret
  5070  0050F4                     __end_of_readIR:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           postinc0	equ	0xFEE
  5079                           wreg	equ	0xFE8
  5080                           postdec1	equ	0xFE5
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _ID *****************
  5090 ;; Defined at:
  5091 ;;		line 272 in file "sort.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  i               2    9[BANK0 ] int 
  5096 ;;  i               2    7[BANK0 ] int 
  5097 ;;  i               2    5[BANK0 ] int 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        9 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    8
  5114 ;; This function calls:
  5115 ;;		_delay_ms
  5116 ;; This function is called by:
  5117 ;;		_sort
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text8
  5122  0031E4                     __ptext8:
  5123                           	opt stack 0
  5124  0031E4                     _ID:
  5125                           	opt stack 21
  5126                           
  5127                           ;sort.c: 273: if(f_can_coming_to_ID){
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131  0031E4  0101               	movlb	1	; () banked
  5132  0031E6  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5133  0031E8  0101               	movlb	1	; () banked
  5134  0031EA  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5135  0031EC  B4D8               	btfsc	status,2,c
  5136  0031EE  0012               	return	
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;sort.c: 275: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5140  0031F0  0E29               	movlw	41
  5141  0031F2  0100               	movlb	0	; () banked
  5142  0031F4  6F83               	movwf	(??_ID+1)& (0+255),b
  5143  0031F6  0E96               	movlw	150
  5144  0031F8  0100               	movlb	0	; () banked
  5145  0031FA  6F82               	movwf	??_ID& (0+255),b
  5146  0031FC  0E7F               	movlw	127
  5147  0031FE                     u9707:
  5148  0031FE  2EE8               	decfsz	wreg,f,c
  5149  003200  D7FE               	bra	u9707
  5150  003202  2F82               	decfsz	??_ID& (0+255),f,b
  5151  003204  D7FC               	bra	u9707
  5152  003206  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5153  003208  D7FA               	bra	u9707
  5154                           
  5155                           ;sort.c: 277: f_arm_position = 0;
  5156  00320A  0E00               	movlw	0
  5157  00320C  0100               	movlb	0	; () banked
  5158  00320E  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5159  003210  0E00               	movlw	0
  5160  003212  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;sort.c: 279: LATAbits.LATA3 = 1;
  5164  003214  8689               	bsf	3977,3,c	;volatile
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;sort.c: 280: _delay((unsigned long)((600)*(32000000/4000.0)));
  5168  003216  0E19               	movlw	25
  5169  003218  0100               	movlb	0	; () banked
  5170  00321A  6F83               	movwf	(??_ID+1)& (0+255),b
  5171  00321C  0E5A               	movlw	90
  5172  00321E  0100               	movlb	0	; () banked
  5173  003220  6F82               	movwf	??_ID& (0+255),b
  5174  003222  0EB1               	movlw	177
  5175  003224                     u9717:
  5176  003224  2EE8               	decfsz	wreg,f,c
  5177  003226  D7FE               	bra	u9717
  5178  003228  2F82               	decfsz	??_ID& (0+255),f,b
  5179  00322A  D7FC               	bra	u9717
  5180  00322C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5181  00322E  D7FA               	bra	u9717
  5182  003230  D000               	nop2	
  5183                           
  5184                           ;sort.c: 281: sensor_outputs[1] = PORTAbits.RA2;
  5185  003232  A480               	btfss	3968,2,c	;volatile
  5186  003234  D004               	goto	u6410
  5187  003236  0100               	movlb	0	; () banked
  5188  003238  6B82               	clrf	??_ID& (0+255),b
  5189  00323A  2B82               	incf	??_ID& (0+255),f,b
  5190  00323C  D002               	goto	u6418
  5191  00323E                     u6410:
  5192  00323E  0100               	movlb	0	; () banked
  5193  003240  6B82               	clrf	??_ID& (0+255),b
  5194  003242                     u6418:
  5195  003242  0100               	movlb	0	; () banked
  5196  003244  5182               	movf	??_ID& (0+255),w,b
  5197  003246  0100               	movlb	0	; () banked
  5198  003248  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5199  00324A  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;sort.c: 282: LATAbits.LATA3 = 0;
  5203  00324C  9689               	bcf	3977,3,c	;volatile
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;sort.c: 284: _delay((unsigned long)((200)*(32000000/4000.0)));
  5207  00324E  0E09               	movlw	9
  5208  003250  0100               	movlb	0	; () banked
  5209  003252  6F83               	movwf	(??_ID+1)& (0+255),b
  5210  003254  0E1E               	movlw	30
  5211  003256  0100               	movlb	0	; () banked
  5212  003258  6F82               	movwf	??_ID& (0+255),b
  5213  00325A  0EE4               	movlw	228
  5214  00325C                     u9727:
  5215  00325C  2EE8               	decfsz	wreg,f,c
  5216  00325E  D7FE               	bra	u9727
  5217  003260  2F82               	decfsz	??_ID& (0+255),f,b
  5218  003262  D7FC               	bra	u9727
  5219  003264  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5220  003266  D7FA               	bra	u9727
  5221  003268  F000               	nop	
  5222                           
  5223                           ;sort.c: 285: LATAbits.LATA3 = 1;
  5224  00326A  8689               	bsf	3977,3,c	;volatile
  5225                           
  5226                           ;sort.c: 286: _delay((unsigned long)((600)*(32000000/4000.0)));
  5227  00326C  0E19               	movlw	25
  5228  00326E  0100               	movlb	0	; () banked
  5229  003270  6F83               	movwf	(??_ID+1)& (0+255),b
  5230  003272  0E5A               	movlw	90
  5231  003274  0100               	movlb	0	; () banked
  5232  003276  6F82               	movwf	??_ID& (0+255),b
  5233  003278  0EB1               	movlw	177
  5234  00327A                     u9737:
  5235  00327A  2EE8               	decfsz	wreg,f,c
  5236  00327C  D7FE               	bra	u9737
  5237  00327E  2F82               	decfsz	??_ID& (0+255),f,b
  5238  003280  D7FC               	bra	u9737
  5239  003282  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5240  003284  D7FA               	bra	u9737
  5241  003286  D000               	nop2	
  5242                           
  5243                           ;sort.c: 287: sensor_outputs[1] = (sensor_outputs[1] || PORTAbits.RA2);
  5244  003288  0E01               	movlw	1
  5245  00328A  0100               	movlb	0	; () banked
  5246  00328C  6F84               	movwf	_ID$1207& (0+255),b
  5247                           
  5248                           ; BSR set to: 0
  5249  00328E  0100               	movlb	0	; () banked
  5250  003290  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5251  003292  0100               	movlb	0	; () banked
  5252  003294  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5253  003296  B4D8               	btfsc	status,2,c
  5254                           
  5255                           ; BSR set to: 0
  5256  003298  B480               	btfsc	3968,2,c	;volatile
  5257  00329A  D003               	goto	l7780
  5258                           
  5259                           ; BSR set to: 0
  5260  00329C  0E00               	movlw	0
  5261  00329E  0100               	movlb	0	; () banked
  5262  0032A0  6F84               	movwf	_ID$1207& (0+255),b
  5263  0032A2                     l7780:
  5264                           
  5265                           ; BSR set to: 0
  5266  0032A2  C084  F0E4         	movff	_ID$1207,_sensor_outputs+2
  5267  0032A6  0100               	movlb	0	; () banked
  5268  0032A8  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;sort.c: 295: if(!sensor_outputs[0]){
  5272  0032AA  0100               	movlb	0	; () banked
  5273  0032AC  51E2               	movf	_sensor_outputs& (0+255),w,b
  5274  0032AE  0100               	movlb	0	; () banked
  5275  0032B0  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5276  0032B2  A4D8               	btfss	status,2,c
  5277  0032B4  D016               	goto	l7794
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;sort.c: 296: if(!sensor_outputs[1]){
  5281  0032B6  0100               	movlb	0	; () banked
  5282  0032B8  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5283  0032BA  0100               	movlb	0	; () banked
  5284  0032BC  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5285  0032BE  A4D8               	btfss	status,2,c
  5286  0032C0  D008               	goto	l7790
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;sort.c: 297: count_pop_no_tab++;
  5290  0032C2  0101               	movlb	1	; () banked
  5291  0032C4  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5292  0032C6  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5293                           
  5294                           ; BSR set to: 1
  5295                           ;sort.c: 298: cur_can = 0;
  5296  0032C8  0E00               	movlw	0
  5297  0032CA  0101               	movlb	1	; () banked
  5298  0032CC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5299  0032CE  0E00               	movlw	0
  5300  0032D0  D007               	goto	L8
  5301  0032D2                     l7790:
  5302                           
  5303                           ;sort.c: 300: else{
  5304                           ;sort.c: 301: count_pop_w_tab++;
  5305  0032D2  0101               	movlb	1	; () banked
  5306  0032D4  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5307  0032D6  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;sort.c: 302: cur_can = 1;
  5311  0032D8  0E00               	movlw	0
  5312  0032DA  0101               	movlb	1	; () banked
  5313  0032DC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5314  0032DE  0E01               	movlw	1
  5315  0032E0                     L8:
  5316  0032E0  6F2B               	movwf	_cur_can& (0+255),b
  5317  0032E2                     l7794:
  5318                           
  5319                           ;sort.c: 303: }
  5320                           ;sort.c: 304: }
  5321                           ;sort.c: 305: if(sensor_outputs[0]){
  5322  0032E2  0100               	movlb	0	; () banked
  5323  0032E4  51E2               	movf	_sensor_outputs& (0+255),w,b
  5324  0032E6  0100               	movlb	0	; () banked
  5325  0032E8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5326  0032EA  B4D8               	btfsc	status,2,c
  5327  0032EC  D016               	goto	l7806
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;sort.c: 306: if(!sensor_outputs[1]){
  5331  0032EE  0100               	movlb	0	; () banked
  5332  0032F0  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5333  0032F2  0100               	movlb	0	; () banked
  5334  0032F4  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5335  0032F6  A4D8               	btfss	status,2,c
  5336  0032F8  D008               	goto	l7802
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;sort.c: 307: count_can_w_lab++;
  5340  0032FA  0101               	movlb	1	; () banked
  5341  0032FC  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5342  0032FE  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5343                           
  5344                           ; BSR set to: 1
  5345                           ;sort.c: 308: cur_can = 2;
  5346  003300  0E00               	movlw	0
  5347  003302  0101               	movlb	1	; () banked
  5348  003304  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5349  003306  0E02               	movlw	2
  5350  003308  D007               	goto	L9
  5351  00330A                     l7802:
  5352                           
  5353                           ;sort.c: 310: else{
  5354                           ;sort.c: 311: count_can_no_lab++;
  5355  00330A  0101               	movlb	1	; () banked
  5356  00330C  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5357  00330E  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5358                           
  5359                           ; BSR set to: 1
  5360                           ;sort.c: 312: cur_can = 3;
  5361  003310  0E00               	movlw	0
  5362  003312  0101               	movlb	1	; () banked
  5363  003314  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5364  003316  0E03               	movlw	3
  5365  003318                     L9:
  5366  003318  6F2B               	movwf	_cur_can& (0+255),b
  5367  00331A                     l7806:
  5368                           
  5369                           ;sort.c: 313: }
  5370                           ;sort.c: 314: }
  5371                           ;sort.c: 315: LATAbits.LATA3 = 0;
  5372  00331A  9689               	bcf	3977,3,c	;volatile
  5373  00331C                     l7808:
  5374  00331C  0101               	movlb	1	; () banked
  5375  00331E  5135               	movf	_f_can_distributed& (0+255),w,b
  5376  003320  0101               	movlb	1	; () banked
  5377  003322  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5378  003324  B4D8               	btfsc	status,2,c
  5379  003326  D7FA               	goto	l7808
  5380                           
  5381                           ; BSR set to: 1
  5382                           ;sort.c: 319: if(sensor_outputs[0]){
  5383                           
  5384                           ; BSR set to: 1
  5385  003328  0100               	movlb	0	; () banked
  5386  00332A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5387  00332C  0100               	movlb	0	; () banked
  5388  00332E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5389  003330  B4D8               	btfsc	status,2,c
  5390  003332  D020               	goto	l7826
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;sort.c: 321: LATAbits.LATA3 = 1;
  5394  003334  8689               	bsf	3977,3,c	;volatile
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;sort.c: 324: for(int i=0;i<10000;i++)
  5398  003336  0E00               	movlw	0
  5399  003338  0100               	movlb	0	; () banked
  5400  00333A  6F86               	movwf	(ID@i+1)& (0+255),b
  5401  00333C  0E00               	movlw	0
  5402  00333E  6F85               	movwf	ID@i& (0+255),b
  5403  003340                     l7816:
  5404                           
  5405                           ; BSR set to: 0
  5406  003340  0100               	movlb	0	; () banked
  5407  003342  BF86               	btfsc	(ID@i+1)& (0+255),7,b
  5408  003344  D008               	goto	l847
  5409  003346  0E10               	movlw	16
  5410  003348  0100               	movlb	0	; () banked
  5411  00334A  5D85               	subwf	ID@i& (0+255),w,b
  5412  00334C  0E27               	movlw	39
  5413  00334E  0100               	movlb	0	; () banked
  5414  003350  5986               	subwfb	(ID@i+1)& (0+255),w,b
  5415  003352  B0D8               	btfsc	status,0,c
  5416  003354  D00D               	goto	l848
  5417  003356                     l847:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;sort.c: 325: {
  5421                           ;sort.c: 326: LATCbits.LATC0 = 1;
  5422  003356  808B               	bsf	3979,0,c	;volatile
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;sort.c: 327: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5426  003358  0E1A               	movlw	26
  5427  00335A                     u9747:
  5428  00335A  2EE8               	decfsz	wreg,f,c
  5429  00335C  D7FE               	bra	u9747
  5430  00335E  D000               	nop2	
  5431                           
  5432                           ;sort.c: 328: LATCbits.LATC0 = 0;
  5433  003360  908B               	bcf	3979,0,c	;volatile
  5434                           
  5435                           ;sort.c: 329: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5436  003362  0EF0               	movlw	240
  5437  003364                     u9757:
  5438  003364  2EE8               	decfsz	wreg,f,c
  5439  003366  D7FE               	bra	u9757
  5440  003368  0100               	movlb	0	; () banked
  5441  00336A  4B85               	infsnz	ID@i& (0+255),f,b
  5442  00336C  2B86               	incf	(ID@i+1)& (0+255),f,b
  5443  00336E  D7E8               	goto	l7816
  5444  003370                     l848:
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;sort.c: 330: }
  5448                           ;sort.c: 332: LATAbits.LATA3 = 0;
  5449  003370  9689               	bcf	3977,3,c	;volatile
  5450                           
  5451                           ;sort.c: 335: }
  5452  003372  D01D               	goto	l849
  5453  003374                     l7826:
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;sort.c: 336: else{
  5457                           ;sort.c: 338: for(int i=0;i<10000;i++)
  5458  003374  0E00               	movlw	0
  5459  003376  0100               	movlb	0	; () banked
  5460  003378  6F88               	movwf	(ID@i_1209+1)& (0+255),b
  5461  00337A  0E00               	movlw	0
  5462  00337C  6F87               	movwf	ID@i_1209& (0+255),b
  5463  00337E                     l7828:
  5464                           
  5465                           ; BSR set to: 0
  5466  00337E  0100               	movlb	0	; () banked
  5467  003380  BF88               	btfsc	(ID@i_1209+1)& (0+255),7,b
  5468  003382  D008               	goto	l850
  5469  003384  0E10               	movlw	16
  5470  003386  0100               	movlb	0	; () banked
  5471  003388  5D87               	subwf	ID@i_1209& (0+255),w,b
  5472  00338A  0E27               	movlw	39
  5473  00338C  0100               	movlb	0	; () banked
  5474  00338E  5988               	subwfb	(ID@i_1209+1)& (0+255),w,b
  5475  003390  B0D8               	btfsc	status,0,c
  5476  003392  D00D               	goto	l849
  5477  003394                     l850:
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;sort.c: 339: {
  5481                           ;sort.c: 340: LATCbits.LATC0 = 1;
  5482  003394  808B               	bsf	3979,0,c	;volatile
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;sort.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5486  003396  0E1A               	movlw	26
  5487  003398                     u9767:
  5488  003398  2EE8               	decfsz	wreg,f,c
  5489  00339A  D7FE               	bra	u9767
  5490  00339C  D000               	nop2	
  5491                           
  5492                           ;sort.c: 342: LATCbits.LATC0 = 0;
  5493  00339E  908B               	bcf	3979,0,c	;volatile
  5494                           
  5495                           ;sort.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5496  0033A0  0EF0               	movlw	240
  5497  0033A2                     u9777:
  5498  0033A2  2EE8               	decfsz	wreg,f,c
  5499  0033A4  D7FE               	bra	u9777
  5500  0033A6  0100               	movlb	0	; () banked
  5501  0033A8  4B87               	infsnz	ID@i_1209& (0+255),f,b
  5502  0033AA  2B88               	incf	(ID@i_1209+1)& (0+255),f,b
  5503  0033AC  D7E8               	goto	l7828
  5504  0033AE                     l849:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sort.c: 344: }
  5508                           ;sort.c: 345: }
  5509                           ;sort.c: 347: LATCbits.LATC0 = 0;
  5510  0033AE  908B               	bcf	3979,0,c	;volatile
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;sort.c: 349: f_can_coming_to_distribution = 1;
  5514  0033B0  0E00               	movlw	0
  5515  0033B2  0101               	movlb	1	; () banked
  5516  0033B4  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5517  0033B6  0E01               	movlw	1
  5518  0033B8  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5519                           
  5520                           ; BSR set to: 1
  5521                           ;sort.c: 350: _delay((unsigned long)((750)*(32000000/4000.0)));
  5522  0033BA  0E1F               	movlw	31
  5523  0033BC  0100               	movlb	0	; () banked
  5524  0033BE  6F83               	movwf	(??_ID+1)& (0+255),b
  5525  0033C0  0E71               	movlw	113
  5526  0033C2  0100               	movlb	0	; () banked
  5527  0033C4  6F82               	movwf	??_ID& (0+255),b
  5528  0033C6  0E1E               	movlw	30
  5529  0033C8                     u9787:
  5530  0033C8  2EE8               	decfsz	wreg,f,c
  5531  0033CA  D7FE               	bra	u9787
  5532  0033CC  2F82               	decfsz	??_ID& (0+255),f,b
  5533  0033CE  D7FC               	bra	u9787
  5534  0033D0  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5535  0033D2  D7FA               	bra	u9787
  5536  0033D4  F000               	nop	
  5537                           
  5538                           ;sort.c: 351: LATCbits.LATC0 = 1;
  5539  0033D6  808B               	bsf	3979,0,c	;volatile
  5540                           
  5541                           ;sort.c: 354: if(!f_lastCan){
  5542  0033D8  0100               	movlb	0	; () banked
  5543  0033DA  51F0               	movf	_f_lastCan& (0+255),w,b
  5544  0033DC  0100               	movlb	0	; () banked
  5545  0033DE  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5546  0033E0  A4D8               	btfss	status,2,c
  5547  0033E2  D032               	goto	l7860
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;sort.c: 355: for(int i=0; i<46; i++){
  5551  0033E4  0E00               	movlw	0
  5552  0033E6  0100               	movlb	0	; () banked
  5553  0033E8  6F8A               	movwf	(ID@i_1210+1)& (0+255),b
  5554  0033EA  0E00               	movlw	0
  5555  0033EC  6F89               	movwf	ID@i_1210& (0+255),b
  5556                           
  5557                           ; BSR set to: 0
  5558  0033EE  0100               	movlb	0	; () banked
  5559  0033F0  BF8A               	btfsc	(ID@i_1210+1)& (0+255),7,b
  5560  0033F2  D008               	goto	l7852
  5561  0033F4  0100               	movlb	0	; () banked
  5562  0033F6  518A               	movf	(ID@i_1210+1)& (0+255),w,b
  5563  0033F8  E126               	bnz	l854
  5564  0033FA  0E2E               	movlw	46
  5565  0033FC  0100               	movlb	0	; () banked
  5566  0033FE  5D89               	subwf	ID@i_1210& (0+255),w,b
  5567  003400  B0D8               	btfsc	status,0,c
  5568  003402  D021               	goto	l854
  5569  003404                     l7852:
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;sort.c: 356: LATBbits.LATB2 = !LATBbits.LATB2;
  5573  003404  B48A               	btfsc	3978,2,c	;volatile
  5574  003406  D004               	goto	u6560
  5575  003408  0100               	movlb	0	; () banked
  5576  00340A  6B82               	clrf	??_ID& (0+255),b
  5577  00340C  2B82               	incf	??_ID& (0+255),f,b
  5578  00340E  D002               	goto	u6578
  5579  003410                     u6560:
  5580  003410  0100               	movlb	0	; () banked
  5581  003412  6B82               	clrf	??_ID& (0+255),b
  5582  003414                     u6578:
  5583  003414  0100               	movlb	0	; () banked
  5584  003416  4782               	rlncf	??_ID& (0+255),f,b
  5585  003418  4782               	rlncf	??_ID& (0+255),f,b
  5586  00341A  508A               	movf	3978,w,c	;volatile
  5587  00341C  0100               	movlb	0	; () banked
  5588  00341E  1982               	xorwf	??_ID& (0+255),w,b
  5589  003420  0BFB               	andlw	-5
  5590  003422  1982               	xorwf	??_ID& (0+255),w,b
  5591  003424  6E8A               	movwf	3978,c	;volatile
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;sort.c: 357: delay_ms(45-i);
  5595  003426  0100               	movlb	0	; () banked
  5596  003428  5189               	movf	ID@i_1210& (0+255),w,b
  5597  00342A  0800               	sublw	0
  5598  00342C  0F2D               	addlw	45
  5599  00342E  EC00  F02B         	call	_delay_ms
  5600  003432  0100               	movlb	0	; () banked
  5601  003434  4B89               	infsnz	ID@i_1210& (0+255),f,b
  5602  003436  2B8A               	incf	(ID@i_1210+1)& (0+255),f,b
  5603                           
  5604                           ; BSR set to: 0
  5605  003438  0100               	movlb	0	; () banked
  5606  00343A  BF8A               	btfsc	(ID@i_1210+1)& (0+255),7,b
  5607  00343C  D7E3               	goto	l7852
  5608  00343E  0100               	movlb	0	; () banked
  5609  003440  518A               	movf	(ID@i_1210+1)& (0+255),w,b
  5610  003442  E101               	bnz	u6580
  5611  003444  D7DA               	goto	L10
  5612  003446                     u6580:
  5613  003446                     l854:
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;sort.c: 358: }
  5617                           ;sort.c: 359: LATBbits.LATB2 = 1;
  5618  003446  848A               	bsf	3978,2,c	;volatile
  5619  003448                     l7860:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;sort.c: 360: }
  5623                           ;sort.c: 362: f_can_coming_to_ID = 0;
  5624  003448  0E00               	movlw	0
  5625  00344A  0101               	movlb	1	; () banked
  5626  00344C  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5627  00344E  0E00               	movlw	0
  5628  003450  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5629  003452  0012               	return	
  5630  003454                     __end_of_ID:
  5631                           	opt stack 0
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           postdec1	equ	0xFE5
  5641                           fsr1l	equ	0xFE1
  5642                           indf2	equ	0xFDF
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _delay_ms *****************
  5650 ;; Defined at:
  5651 ;;		line 645 in file "sort.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  milliseconds    1    wreg     unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;Total ram usage:        2 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    7
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_Loading
  5676 ;;		_ID
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text9
  5681  005600                     __ptext9:
  5682                           	opt stack 0
  5683  005600                     _delay_ms:
  5684                           	opt stack 21
  5685                           
  5686                           ; BSR set to: 1
  5687                           ;incstack = 0
  5688                           ;delay_ms@milliseconds stored from wreg
  5689  005600  0100               	movlb	0	; () banked
  5690  005602  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5691                           
  5692                           ;sort.c: 646: while(milliseconds > 0)
  5693  005604  D00B               	goto	l7200
  5694  005606                     l7196:
  5695                           
  5696                           ;sort.c: 647: {
  5697                           ;sort.c: 648: milliseconds--;
  5698  005606  0100               	movlb	0	; () banked
  5699  005608  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;sort.c: 649: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5703  00560A  0E0B               	movlw	11
  5704  00560C  0100               	movlb	0	; () banked
  5705  00560E  6F80               	movwf	??_delay_ms& (0+255),b
  5706  005610  0E47               	movlw	71
  5707  005612                     u9797:
  5708  005612  2EE8               	decfsz	wreg,f,c
  5709  005614  D7FE               	bra	u9797
  5710  005616  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5711  005618  D7FC               	bra	u9797
  5712  00561A  D000               	nop2	
  5713  00561C                     l7200:
  5714  00561C  0100               	movlb	0	; () banked
  5715  00561E  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5716  005620  0100               	movlb	0	; () banked
  5717  005622  B4D8               	btfsc	status,2,c
  5718  005624  0012               	return	
  5719  005626  D7EF               	goto	l7196
  5720  005628                     __end_of_delay_ms:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           postinc0	equ	0xFEE
  5729                           wreg	equ	0xFE8
  5730                           postdec1	equ	0xFE5
  5731                           fsr1l	equ	0xFE1
  5732                           indf2	equ	0xFDF
  5733                           postinc2	equ	0xFDE
  5734                           postdec2	equ	0xFDD
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function _Distribution *****************
  5740 ;; Defined at:
  5741 ;;		line 365 in file "sort.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    8
  5762 ;; This function calls:
  5763 ;;		_updateServoPosition
  5764 ;; This function is called by:
  5765 ;;		_sort
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text10
  5770  004304                     __ptext10:
  5771                           	opt stack 0
  5772  004304                     _Distribution:
  5773                           	opt stack 21
  5774                           
  5775                           ;sort.c: 366: if(f_can_coming_to_distribution){
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;incstack = 0
  5779  004304  0101               	movlb	1	; () banked
  5780  004306  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5781  004308  0101               	movlb	1	; () banked
  5782  00430A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5783  00430C  B4D8               	btfsc	status,2,c
  5784  00430E  0012               	return	
  5785                           
  5786                           ; BSR set to: 1
  5787                           ;sort.c: 367: f_can_distributed = 0;
  5788  004310  0E00               	movlw	0
  5789  004312  0101               	movlb	1	; () banked
  5790  004314  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5791  004316  0E00               	movlw	0
  5792  004318  6F35               	movwf	_f_can_distributed& (0+255),b
  5793                           
  5794                           ;sort.c: 374: switch(cur_can){
  5795  00431A  D034               	goto	l7876
  5796  00431C                     l7866:
  5797                           
  5798                           ;sort.c: 376: updateServoPosition(500, 1);
  5799  00431C  0E01               	movlw	1
  5800  00431E  0100               	movlb	0	; () banked
  5801  004320  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5802  004322  0EF4               	movlw	244
  5803  004324  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5804  004326  0E00               	movlw	0
  5805  004328  0100               	movlb	0	; () banked
  5806  00432A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5807  00432C  0E01               	movlw	1
  5808  00432E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5809  004330  EC0B  F025         	call	_updateServoPosition	;wreg free
  5810                           
  5811                           ;sort.c: 377: break;
  5812  004334  D03E               	goto	l7878
  5813  004336                     l7868:
  5814                           
  5815                           ;sort.c: 379: updateServoPosition(850, 1);
  5816  004336  0E03               	movlw	3
  5817  004338  0100               	movlb	0	; () banked
  5818  00433A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5819  00433C  0E52               	movlw	82
  5820  00433E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5821  004340  0E00               	movlw	0
  5822  004342  0100               	movlb	0	; () banked
  5823  004344  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5824  004346  0E01               	movlw	1
  5825  004348  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5826  00434A  EC0B  F025         	call	_updateServoPosition	;wreg free
  5827                           
  5828                           ;sort.c: 380: break;
  5829  00434E  D031               	goto	l7878
  5830  004350                     l7870:
  5831                           
  5832                           ;sort.c: 382: updateServoPosition(1670, 1);
  5833  004350  0E06               	movlw	6
  5834  004352  0100               	movlb	0	; () banked
  5835  004354  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5836  004356  0E86               	movlw	134
  5837  004358  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5838  00435A  0E00               	movlw	0
  5839  00435C  0100               	movlb	0	; () banked
  5840  00435E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5841  004360  0E01               	movlw	1
  5842  004362  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5843  004364  EC0B  F025         	call	_updateServoPosition	;wreg free
  5844                           
  5845                           ;sort.c: 383: break;
  5846  004368  D024               	goto	l7878
  5847  00436A                     l7872:
  5848                           
  5849                           ;sort.c: 385: updateServoPosition(2400, 1);
  5850  00436A  0E09               	movlw	9
  5851  00436C  0100               	movlb	0	; () banked
  5852  00436E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5853  004370  0E60               	movlw	96
  5854  004372  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5855  004374  0E00               	movlw	0
  5856  004376  0100               	movlb	0	; () banked
  5857  004378  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5858  00437A  0E01               	movlw	1
  5859  00437C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5860  00437E  EC0B  F025         	call	_updateServoPosition	;wreg free
  5861                           
  5862                           ;sort.c: 389: }
  5863                           
  5864                           ;sort.c: 388: break;
  5865                           
  5866                           ;sort.c: 387: default:
  5867                           
  5868                           ;sort.c: 386: break;
  5869  004382  D017               	goto	l7878
  5870  004384                     l7876:
  5871  004384  C12B  F088         	movff	_cur_can,??_Distribution
  5872  004388  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5873                           
  5874                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5875                           ; Switch size 1, requested type "space"
  5876                           ; Number of cases is 1, Range of values is 0 to 0
  5877                           ; switch strategies available:
  5878                           ; Name         Instructions Cycles
  5879                           ; simple_byte            4     3 (average)
  5880                           ;	Chosen strategy is simple_byte
  5881  00438C  0100               	movlb	0	; () banked
  5882  00438E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5883  004390  0A00               	xorlw	0	; case 0
  5884  004392  A4D8               	btfss	status,2,c
  5885  004394  D00E               	goto	l7878
  5886                           
  5887                           ; BSR set to: 0
  5888                           ; Switch size 1, requested type "space"
  5889                           ; Number of cases is 4, Range of values is 0 to 3
  5890                           ; switch strategies available:
  5891                           ; Name         Instructions Cycles
  5892                           ; simple_byte           13     7 (average)
  5893                           ;	Chosen strategy is simple_byte
  5894  004396  0100               	movlb	0	; () banked
  5895  004398  5188               	movf	??_Distribution& (0+255),w,b
  5896  00439A  0A00               	xorlw	0	; case 0
  5897  00439C  B4D8               	btfsc	status,2,c
  5898  00439E  D7BE               	goto	l7866
  5899  0043A0  0A01               	xorlw	1	; case 1
  5900  0043A2  B4D8               	btfsc	status,2,c
  5901  0043A4  D7C8               	goto	l7868
  5902  0043A6  0A03               	xorlw	3	; case 2
  5903  0043A8  B4D8               	btfsc	status,2,c
  5904  0043AA  D7D2               	goto	l7870
  5905  0043AC  0A01               	xorlw	1	; case 3
  5906  0043AE  B4D8               	btfsc	status,2,c
  5907  0043B0  D7DC               	goto	l7872
  5908  0043B2                     l7878:
  5909                           
  5910                           ;sort.c: 390: updateServoPosition(1050, 3);
  5911  0043B2  0E04               	movlw	4
  5912  0043B4  0100               	movlb	0	; () banked
  5913  0043B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5914  0043B8  0E1A               	movlw	26
  5915  0043BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5916  0043BC  0E00               	movlw	0
  5917  0043BE  0100               	movlb	0	; () banked
  5918  0043C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5919  0043C2  0E03               	movlw	3
  5920  0043C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5921  0043C6  EC0B  F025         	call	_updateServoPosition	;wreg free
  5922                           
  5923                           ;sort.c: 391: servo_timer_target = 750;
  5924  0043CA  0E02               	movlw	2
  5925  0043CC  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5926  0043CE  0EEE               	movlw	238
  5927  0043D0  6E6F               	movwf	_servo_timer_target,c	;volatile
  5928                           
  5929                           ;sort.c: 392: f_panning_to_bin = 1;
  5930  0043D2  0E00               	movlw	0
  5931  0043D4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5932  0043D6  0E01               	movlw	1
  5933  0043D8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5934                           
  5935                           ;sort.c: 393: f_can_coming_to_distribution = 0;
  5936  0043DA  0E00               	movlw	0
  5937  0043DC  0101               	movlb	1	; () banked
  5938  0043DE  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5939  0043E0  0E00               	movlw	0
  5940  0043E2  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5941  0043E4  0012               	return	
  5942  0043E6                     __end_of_Distribution:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _machineConfig *****************
  5962 ;; Defined at:
  5963 ;;		line 15 in file "MachineConfig.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;Total ram usage:        0 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    7
  5984 ;; This function calls:
  5985 ;;		Nothing
  5986 ;; This function is called by:
  5987 ;;		_main
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text11
  5992  004DD0                     __ptext11:
  5993                           	opt stack 0
  5994  004DD0                     _machineConfig:
  5995                           	opt stack 23
  5996                           
  5997                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;incstack = 0
  6001  004DD0  0EF0               	movlw	240
  6002  004DD2  6ED3               	movwf	4051,c	;volatile
  6003                           
  6004                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6005  004DD4  8C9B               	bsf	3995,6,c	;volatile
  6006                           
  6007                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6008  004DD6  0E07               	movlw	7
  6009  004DD8  6E92               	movwf	3986,c	;volatile
  6010                           
  6011                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6012  004DDA  0EF2               	movlw	242
  6013  004DDC  6E93               	movwf	3987,c	;volatile
  6014                           
  6015                           ;MachineConfig.c: 27: TRISC = 0x00;
  6016  004DDE  0E00               	movlw	0
  6017  004DE0  6E94               	movwf	3988,c	;volatile
  6018                           
  6019                           ;MachineConfig.c: 31: TRISD = 0x00;
  6020  004DE2  0E00               	movlw	0
  6021  004DE4  6E95               	movwf	3989,c	;volatile
  6022                           
  6023                           ;MachineConfig.c: 34: TRISE = 0x00;
  6024  004DE6  0E00               	movlw	0
  6025  004DE8  6E96               	movwf	3990,c	;volatile
  6026                           
  6027                           ;MachineConfig.c: 37: LATA = 0x00;
  6028  004DEA  0E00               	movlw	0
  6029  004DEC  6E89               	movwf	3977,c	;volatile
  6030                           
  6031                           ;MachineConfig.c: 38: LATB = 0x00;
  6032  004DEE  0E00               	movlw	0
  6033  004DF0  6E8A               	movwf	3978,c	;volatile
  6034                           
  6035                           ;MachineConfig.c: 39: LATC = 0x00;
  6036  004DF2  0E00               	movlw	0
  6037  004DF4  6E8B               	movwf	3979,c	;volatile
  6038                           
  6039                           ;MachineConfig.c: 40: LATD = 0x00;
  6040  004DF6  0E00               	movlw	0
  6041  004DF8  6E8C               	movwf	3980,c	;volatile
  6042                           
  6043                           ;MachineConfig.c: 41: LATE = 0x00;
  6044  004DFA  0E00               	movlw	0
  6045  004DFC  6E8D               	movwf	3981,c	;volatile
  6046                           
  6047                           ;MachineConfig.c: 43: nRBPU = 0;
  6048  004DFE  9EF1               	bcf	intcon2,7,c	;volatile
  6049                           
  6050                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6051  004E00  0E00               	movlw	0
  6052  004E02  6EC2               	movwf	4034,c	;volatile
  6053                           
  6054                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  6055  004E04  0E0D               	movlw	13
  6056  004E06  6EC1               	movwf	4033,c	;volatile
  6057                           
  6058                           ;MachineConfig.c: 50: CVRCON = 0x00;
  6059  004E08  0E00               	movlw	0
  6060  004E0A  6EB5               	movwf	4021,c	;volatile
  6061                           
  6062                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  6063  004E0C  96B4               	bcf	4020,3,c	;volatile
  6064                           
  6065                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  6066  004E0E  0EB1               	movlw	177
  6067  004E10  6EC0               	movwf	4032,c	;volatile
  6068                           
  6069                           ;MachineConfig.c: 55: INT1IE = 1;
  6070  004E12  86F0               	bsf	intcon3,3,c	;volatile
  6071                           
  6072                           ;MachineConfig.c: 57: TMR0IE = 1;
  6073  004E14  8AF2               	bsf	intcon,5,c	;volatile
  6074                           
  6075                           ;MachineConfig.c: 58: TMR1IE = 1;
  6076  004E16  809D               	bsf	3997,0,c	;volatile
  6077                           
  6078                           ;MachineConfig.c: 59: TMR2IE = 1;
  6079  004E18  829D               	bsf	3997,1,c	;volatile
  6080                           
  6081                           ;MachineConfig.c: 60: TMR3IE = 1;
  6082  004E1A  82A0               	bsf	4000,1,c	;volatile
  6083                           
  6084                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  6085  004E1C  0EB0               	movlw	176
  6086  004E1E  6ECD               	movwf	4045,c	;volatile
  6087                           
  6088                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  6089  004E20  0E7B               	movlw	123
  6090  004E22  6ECA               	movwf	4042,c	;volatile
  6091                           
  6092                           ;MachineConfig.c: 64: PR2 = 0x22;
  6093  004E24  0E22               	movlw	34
  6094  004E26  6ECB               	movwf	4043,c	;volatile
  6095                           
  6096                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  6097  004E28  0EB0               	movlw	176
  6098  004E2A  6EB1               	movwf	4017,c	;volatile
  6099                           
  6100                           ;MachineConfig.c: 66: PEIE = 1;
  6101  004E2C  8CF2               	bsf	intcon,6,c	;volatile
  6102                           
  6103                           ;MachineConfig.c: 67: ADIE = 0;
  6104  004E2E  9C9D               	bcf	3997,6,c	;volatile
  6105                           
  6106                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  6107  004E30  9EF2               	bcf	intcon,7,c	;volatile
  6108  004E32  0012               	return		;funcret
  6109  004E34                     __end_of_machineConfig:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           intcon3	equ	0xFF0
  6120                           postinc0	equ	0xFEE
  6121                           wreg	equ	0xFE8
  6122                           postdec1	equ	0xFE5
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function _logRun *****************
  6132 ;; Defined at:
  6133 ;;		line 84 in file "EEPROM.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6138 ;;  i               2   55[BANK0 ] int 
  6139 ;;  num             1   49[BANK0 ] unsigned char 
  6140 ;;  addr            2   57[BANK0 ] unsigned short 
  6141 ;;  byte11          1   54[BANK0 ] unsigned char 
  6142 ;;  byte3           1   52[BANK0 ] unsigned char 
  6143 ;;  byte2           1   51[BANK0 ] unsigned char 
  6144 ;;  byte1           1   50[BANK0 ] unsigned char 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;Total ram usage:       10 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:   11
  6161 ;; This function calls:
  6162 ;;		_EEPROM_read
  6163 ;;		_EEPROM_write
  6164 ;; This function is called by:
  6165 ;;		_main
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text12
  6170  003DB4                     __ptext12:
  6171                           	opt stack 0
  6172  003DB4                     _logRun:
  6173                           	opt stack 19
  6174                           
  6175                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6176                           
  6177                           ;incstack = 0
  6178  003DB4  0E00               	movlw	0
  6179  003DB6  0100               	movlb	0	; () banked
  6180  003DB8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6181  003DBA  0E00               	movlw	0
  6182  003DBC  6F80               	movwf	EEPROM_read@address& (0+255),b
  6183  003DBE  ECAD  F02B         	call	_EEPROM_read	;wreg free
  6184  003DC2  0100               	movlb	0	; () banked
  6185  003DC4  6FFD               	movwf	_sel& (0+255),b
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6189  003DC6  0100               	movlb	0	; () banked
  6190  003DC8  51FD               	movf	_sel& (0+255),w,b
  6191  003DCA  0D0B               	mullw	11
  6192  003DCC  0E01               	movlw	1
  6193  003DCE  24F3               	addwf	prodl,w,c
  6194  003DD0  0100               	movlb	0	; () banked
  6195  003DD2  6FB9               	movwf	logRun@addr& (0+255),b
  6196  003DD4  0E00               	movlw	0
  6197  003DD6  20F4               	addwfc	prodh,w,c
  6198  003DD8  0100               	movlb	0	; () banked
  6199  003DDA  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;EEPROM.c: 101: if (sel < 3){
  6203  003DDC  0E03               	movlw	3
  6204  003DDE  0100               	movlb	0	; () banked
  6205  003DE0  61FD               	cpfslt	_sel& (0+255),b
  6206  003DE2  D00E               	goto	l9576
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6210  003DE4  0100               	movlb	0	; () banked
  6211  003DE6  29FD               	incf	_sel& (0+255),w,b
  6212  003DE8  0100               	movlb	0	; () banked
  6213  003DEA  6FB1               	movwf	logRun@num& (0+255),b
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6217  003DEC  0E00               	movlw	0
  6218  003DEE  0100               	movlb	0	; () banked
  6219  003DF0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6220  003DF2  0E00               	movlw	0
  6221  003DF4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6222  003DF6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6223  003DFA  EC0E  F021         	call	_EEPROM_write	;wreg free
  6224                           
  6225                           ;EEPROM.c: 104: }
  6226  003DFE  D00A               	goto	l9578
  6227  003E00                     l9576:
  6228                           
  6229                           ;EEPROM.c: 105: else{
  6230                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6231  003E00  0E00               	movlw	0
  6232  003E02  0100               	movlb	0	; () banked
  6233  003E04  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6234  003E06  0E00               	movlw	0
  6235  003E08  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6236  003E0A  0E00               	movlw	0
  6237  003E0C  0100               	movlb	0	; () banked
  6238  003E0E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6239  003E10  EC0E  F021         	call	_EEPROM_write	;wreg free
  6240  003E14                     l9578:
  6241                           
  6242                           ;EEPROM.c: 107: }
  6243                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6244  003E14  0100               	movlb	0	; () banked
  6245  003E16  51FE               	movf	_count_total& (0+255),w,b
  6246  003E18  0980               	iorlw	128
  6247  003E1A  0100               	movlb	0	; () banked
  6248  003E1C  6FB2               	movwf	logRun@byte1& (0+255),b
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6252  003E1E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6253  003E22  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6254  003E26  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6255  003E2A  EC0E  F021         	call	_EEPROM_write	;wreg free
  6256                           
  6257                           ;EEPROM.c: 112: addr++;
  6258  003E2E  0100               	movlb	0	; () banked
  6259  003E30  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6260  003E32  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6264  003E34  0101               	movlb	1	; () banked
  6265  003E36  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6266  003E38  0BF0               	andlw	240
  6267  003E3A  0101               	movlb	1	; () banked
  6268  003E3C  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6269  003E3E  0100               	movlb	0	; () banked
  6270  003E40  6FB3               	movwf	logRun@byte2& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6274  003E42  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6275  003E46  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6276  003E4A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6277  003E4E  EC0E  F021         	call	_EEPROM_write	;wreg free
  6278                           
  6279                           ;EEPROM.c: 117: addr++;
  6280  003E52  0100               	movlb	0	; () banked
  6281  003E54  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6282  003E56  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6286  003E58  0101               	movlb	1	; () banked
  6287  003E5A  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6288  003E5C  0BF0               	andlw	240
  6289  003E5E  0101               	movlb	1	; () banked
  6290  003E60  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6291  003E62  0100               	movlb	0	; () banked
  6292  003E64  6FB4               	movwf	logRun@byte3& (0+255),b
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6296  003E66  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6297  003E6A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6298  003E6E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6299  003E72  EC0E  F021         	call	_EEPROM_write	;wreg free
  6300                           
  6301                           ;EEPROM.c: 120: addr++;
  6302  003E76  0100               	movlb	0	; () banked
  6303  003E78  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6304  003E7A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6308  003E7C  0E00               	movlw	0
  6309  003E7E  0100               	movlb	0	; () banked
  6310  003E80  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6311  003E82  0E00               	movlw	0
  6312  003E84  6FB7               	movwf	logRun@i& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315  003E86  0100               	movlb	0	; () banked
  6316  003E88  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6317  003E8A  D008               	goto	l9602
  6318  003E8C  0100               	movlb	0	; () banked
  6319  003E8E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6320  003E90  E128               	bnz	l1121
  6321  003E92  0E07               	movlw	7
  6322  003E94  0100               	movlb	0	; () banked
  6323  003E96  5DB7               	subwf	logRun@i& (0+255),w,b
  6324  003E98  B0D8               	btfsc	status,0,c
  6325  003E9A  D023               	goto	l1121
  6326  003E9C                     l9602:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6330  003E9C  90D8               	bcf	status,0,c
  6331  003E9E  0100               	movlb	0	; () banked
  6332  003EA0  35B7               	rlcf	logRun@i& (0+255),w,b
  6333  003EA2  6ED9               	movwf	fsr2l,c
  6334  003EA4  0100               	movlb	0	; () banked
  6335  003EA6  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6336  003EA8  6EDA               	movwf	fsr2h,c
  6337  003EAA  0E0E               	movlw	low _startTime
  6338  003EAC  26D9               	addwf	fsr2l,f,c
  6339  003EAE  0E01               	movlw	high _startTime
  6340  003EB0  22DA               	addwfc	fsr2h,f,c
  6341  003EB2  50DF               	movf	indf2,w,c
  6342  003EB4  0100               	movlb	0	; () banked
  6343  003EB6  6FB5               	movwf	logRun@byte_i& (0+255),b
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6347  003EB8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6348  003EBC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6349  003EC0  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6350  003EC4  EC0E  F021         	call	_EEPROM_write	;wreg free
  6351                           
  6352                           ;EEPROM.c: 126: addr++;
  6353  003EC8  0100               	movlb	0	; () banked
  6354  003ECA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6355  003ECC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6356                           
  6357                           ; BSR set to: 0
  6358  003ECE  0100               	movlb	0	; () banked
  6359  003ED0  4BB7               	infsnz	logRun@i& (0+255),f,b
  6360  003ED2  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6361                           
  6362                           ; BSR set to: 0
  6363  003ED4  0100               	movlb	0	; () banked
  6364  003ED6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6365  003ED8  D7E1               	goto	l9602
  6366  003EDA  0100               	movlb	0	; () banked
  6367  003EDC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6368  003EDE  E101               	bnz	u9030
  6369  003EE0  D7D8               	goto	L11
  6370  003EE2                     u9030:
  6371  003EE2                     l1121:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;EEPROM.c: 127: }
  6375                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6376  003EE2  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6380  003EE6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6381  003EEA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6382  003EEE  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6383  003EF2  EC0E  F021         	call	_EEPROM_write	;wreg free
  6384  003EF6  0012               	return		;funcret
  6385  003EF8                     __end_of_logRun:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           intcon2	equ	0xFF1
  6395                           intcon3	equ	0xFF0
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec1	equ	0xFE5
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _EEPROM_write *****************
  6408 ;; Defined at:
  6409 ;;		line 32 in file "EEPROM.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  address         2   43[BANK0 ] unsigned short 
  6412 ;;  data            1   45[BANK0 ] unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  i               1   48[BANK0 ] unsigned char 
  6415 ;;  i               1   47[BANK0 ] unsigned char 
  6416 ;; Return value:  Size  Location     Type
  6417 ;;                  1    wreg      void 
  6418 ;; Registers used:
  6419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6425 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;Total ram usage:        6 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:   10
  6432 ;; This function calls:
  6433 ;;		_EEPROM_read
  6434 ;;		_lcdInst
  6435 ;;		_printf
  6436 ;; This function is called by:
  6437 ;;		_Loading
  6438 ;;		_logRun
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text13
  6443  00421C                     __ptext13:
  6444                           	opt stack 0
  6445  00421C                     _EEPROM_write:
  6446                           	opt stack 18
  6447                           
  6448                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6449                           
  6450                           ;incstack = 0
  6451  00421C  84A6               	bsf	4006,2,c	;volatile
  6452                           
  6453                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6454  00421E  0100               	movlb	0	; () banked
  6455  004220  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6456  004222  6EAA               	movwf	4010,c	;volatile
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6460  004224  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;EEPROM.c: 39: EEDATA = data;
  6464  004228  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6468  00422C  9EA6               	bcf	4006,7,c	;volatile
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6472  00422E  9CA6               	bcf	4006,6,c	;volatile
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6476  004230  9EF2               	bcf	intcon,7,c	;volatile
  6477                           
  6478                           ;EEPROM.c: 45: EECON2 = 0x55;
  6479  004232  0E55               	movlw	85
  6480  004234  6EA7               	movwf	4007,c	;volatile
  6481                           
  6482                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6483  004236  0EAA               	movlw	170
  6484  004238  6EA7               	movwf	4007,c	;volatile
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6488  00423A  82A6               	bsf	4006,1,c	;volatile
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6492  00423C  8EF2               	bsf	intcon,7,c	;volatile
  6493  00423E                     l1099:
  6494  00423E  A8A1               	btfss	4001,4,c	;volatile
  6495  004240  D7FE               	goto	l1099
  6496                           
  6497                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6498  004242  98A1               	bcf	4001,4,c	;volatile
  6499                           
  6500                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6501  004244  94A6               	bcf	4006,2,c	;volatile
  6502                           
  6503                           ;EEPROM.c: 57: if(debug){
  6504  004246  0101               	movlb	1	; () banked
  6505  004248  512D               	movf	_debug& (0+255),w,b
  6506  00424A  0101               	movlb	1	; () banked
  6507  00424C  112E               	iorwf	(_debug+1)& (0+255),w,b
  6508  00424E  B4D8               	btfsc	status,2,c
  6509  004250  0012               	return	
  6510                           
  6511                           ; BSR set to: 1
  6512                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6513  004252  0E01               	movlw	1
  6514  004254  ECDF  F02B         	call	_lcdInst
  6515  004258  0E68               	movlw	104
  6516  00425A  0100               	movlb	0	; () banked
  6517  00425C  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6518  00425E  0EE4               	movlw	228
  6519  004260                     u9807:
  6520  004260  2EE8               	decfsz	wreg,f,c
  6521  004262  D7FE               	bra	u9807
  6522  004264  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6523  004266  D7FC               	bra	u9807
  6524  004268  F000               	nop	
  6525                           
  6526                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6527  00426A  0E80               	movlw	128
  6528  00426C  ECDF  F02B         	call	_lcdInst
  6529                           
  6530                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6531  004270  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6532  004274  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6533  004278  ECAD  F02B         	call	_EEPROM_read	;wreg free
  6534  00427C  0100               	movlb	0	; () banked
  6535  00427E  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6536  004280  A4D8               	btfss	status,2,c
  6537  004282  D024               	goto	l7182
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6541  004284  0ED6               	movlw	low STR_66
  6542  004286  0100               	movlb	0	; () banked
  6543  004288  6F8E               	movwf	printf@f& (0+255),b
  6544  00428A  0EFA               	movlw	high STR_66
  6545  00428C  0100               	movlb	0	; () banked
  6546  00428E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6547  004290  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6548  004294  0100               	movlb	0	; () banked
  6549  004296  6B91               	clrf	(?_printf+3)& (0+255),b
  6550  004298  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6551  00429C  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6552  0042A0  ECC1  F00B         	call	_printf	;wreg free
  6553                           
  6554                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6555  0042A4  0E00               	movlw	0
  6556  0042A6  0100               	movlb	0	; () banked
  6557  0042A8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6558  0042AA                     l7174:
  6559                           
  6560                           ; BSR set to: 0
  6561  0042AA  0E63               	movlw	99
  6562  0042AC  0100               	movlb	0	; () banked
  6563  0042AE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6564  0042B0  D001               	goto	l7178
  6565  0042B2  0012               	return	
  6566  0042B4                     l7178:
  6567                           
  6568                           ; BSR set to: 0
  6569  0042B4  0E68               	movlw	104
  6570  0042B6  0100               	movlb	0	; () banked
  6571  0042B8  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6572  0042BA  0EE4               	movlw	228
  6573  0042BC                     u9817:
  6574  0042BC  2EE8               	decfsz	wreg,f,c
  6575  0042BE  D7FE               	bra	u9817
  6576  0042C0  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6577  0042C2  D7FC               	bra	u9817
  6578  0042C4  F000               	nop	
  6579  0042C6  0100               	movlb	0	; () banked
  6580  0042C8  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6581  0042CA  D7EF               	goto	l7174
  6582  0042CC                     l7182:
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6586  0042CC  0EBC               	movlw	low STR_67
  6587  0042CE  0100               	movlb	0	; () banked
  6588  0042D0  6F8E               	movwf	printf@f& (0+255),b
  6589  0042D2  0EFF               	movlw	high STR_67
  6590  0042D4  0100               	movlb	0	; () banked
  6591  0042D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6592  0042D8  ECC1  F00B         	call	_printf	;wreg free
  6593  0042DC  0E00               	movlw	0
  6594  0042DE  0100               	movlb	0	; () banked
  6595  0042E0  6FB0               	movwf	EEPROM_write@i_1464& (0+255),b
  6596  0042E2                     l7186:
  6597                           
  6598                           ; BSR set to: 0
  6599  0042E2  0E63               	movlw	99
  6600  0042E4  0100               	movlb	0	; () banked
  6601  0042E6  65B0               	cpfsgt	EEPROM_write@i_1464& (0+255),b
  6602  0042E8  D001               	goto	l7190
  6603  0042EA  0012               	return	
  6604  0042EC                     l7190:
  6605                           
  6606                           ; BSR set to: 0
  6607  0042EC  0E68               	movlw	104
  6608  0042EE  0100               	movlb	0	; () banked
  6609  0042F0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6610  0042F2  0EE4               	movlw	228
  6611  0042F4                     u9827:
  6612  0042F4  2EE8               	decfsz	wreg,f,c
  6613  0042F6  D7FE               	bra	u9827
  6614  0042F8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6615  0042FA  D7FC               	bra	u9827
  6616  0042FC  F000               	nop	
  6617  0042FE  0100               	movlb	0	; () banked
  6618  004300  2BB0               	incf	EEPROM_write@i_1464& (0+255),f,b
  6619  004302  D7EF               	goto	l7186
  6620  004304                     __end_of_EEPROM_write:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           intcon3	equ	0xFF0
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           fsr1l	equ	0xFE1
  6635                           indf2	equ	0xFDF
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _EEPROM_read *****************
  6643 ;; Defined at:
  6644 ;;		line 68 in file "EEPROM.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  address         2    0[BANK0 ] unsigned short 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      unsigned char 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;Total ram usage:        2 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    7
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_Loading
  6669 ;;		_EEPROM_write
  6670 ;;		_logRun
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text14
  6675  00575A                     __ptext14:
  6676                           	opt stack 0
  6677  00575A                     _EEPROM_read:
  6678                           	opt stack 20
  6679                           
  6680                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6681                           
  6682                           ;incstack = 0
  6683  00575A  0100               	movlb	0	; () banked
  6684  00575C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6685  00575E  6EAA               	movwf	4010,c	;volatile
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6689  005760  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6693  005764  9EA6               	bcf	4006,7,c	;volatile
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6697  005766  9CA6               	bcf	4006,6,c	;volatile
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6701  005768  80A6               	bsf	4006,0,c	;volatile
  6702  00576A                     l1112:
  6703  00576A  B0A6               	btfsc	4006,0,c	;volatile
  6704  00576C  D7FE               	goto	l1112
  6705                           
  6706                           ;EEPROM.c: 81: return EEDATA;
  6707  00576E  50A8               	movf	4008,w,c	;volatile
  6708  005770  0012               	return	
  6709  005772                     __end_of_EEPROM_read:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           intcon2	equ	0xFF1
  6719                           intcon3	equ	0xFF0
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _initUI *****************
  6732 ;; Defined at:
  6733 ;;		line 62 in file "UI.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:   12
  6754 ;; This function calls:
  6755 ;;		_change_state_to_menu_start
  6756 ;;		_loadRTC
  6757 ;; This function is called by:
  6758 ;;		_main
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text15
  6763  005342                     __ptext15:
  6764                           	opt stack 0
  6765  005342                     _initUI:
  6766                           	opt stack 18
  6767                           
  6768                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6769                           
  6770                           ;incstack = 0
  6771  005342  8EF2               	bsf	intcon,7,c	;volatile
  6772                           
  6773                           ;UI.c: 64: machine_state = UI_state;
  6774  005344  0E00               	movlw	0
  6775  005346  0100               	movlb	0	; () banked
  6776  005348  6FFC               	movwf	_machine_state& (0+255),b
  6777                           
  6778                           ;UI.c: 65: logstate = 0;
  6779  00534A  0E00               	movlw	0
  6780  00534C  0100               	movlb	0	; () banked
  6781  00534E  6FF9               	movwf	(_logstate+1)& (0+255),b
  6782  005350  0E00               	movlw	0
  6783  005352  6FF8               	movwf	_logstate& (0+255),b
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;UI.c: 67: if(RTCflag){
  6787  005354  0100               	movlb	0	; () banked
  6788  005356  51EA               	movf	_RTCflag& (0+255),w,b
  6789  005358  0100               	movlb	0	; () banked
  6790  00535A  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6791  00535C  A4D8               	btfss	status,2,c
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;UI.c: 68: loadRTC();
  6795  00535E  EC82  F024         	call	_loadRTC	;wreg free
  6796                           
  6797                           ;UI.c: 69: }
  6798                           ;UI.c: 71: change_state_to_menu_start();
  6799  005362  ECBF  F02A         	call	_change_state_to_menu_start	;wreg free
  6800                           
  6801                           ;UI.c: 72: firstboot = 1;
  6802  005366  0E00               	movlw	0
  6803  005368  0101               	movlb	1	; () banked
  6804  00536A  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6805  00536C  0E01               	movlw	1
  6806  00536E  6F3B               	movwf	_firstboot& (0+255),b
  6807                           
  6808                           ; BSR set to: 1
  6809  005370  0012               	return		;funcret
  6810  005372                     __end_of_initUI:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           intcon	equ	0xFF2
  6819                           intcon2	equ	0xFF1
  6820                           intcon3	equ	0xFF0
  6821                           postinc0	equ	0xFEE
  6822                           wreg	equ	0xFE8
  6823                           postdec1	equ	0xFE5
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _loadRTC *****************
  6833 ;; Defined at:
  6834 ;;		line 28 in file "RTC.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  i               2   22[BANK0 ] int 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;Total ram usage:        3 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    9
  6855 ;; This function calls:
  6856 ;;		_I2C_Master_Init
  6857 ;;		_I2C_Master_Start
  6858 ;;		_I2C_Master_Stop
  6859 ;;		_I2C_Master_Write
  6860 ;; This function is called by:
  6861 ;;		_initUI
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text16
  6866  004904                     __ptext16:
  6867                           	opt stack 0
  6868  004904                     _loadRTC:
  6869                           	opt stack 20
  6870                           
  6871                           ;RTC.c: 30: I2C_Master_Init(10000);
  6872                           
  6873                           ; BSR set to: 1
  6874                           ;incstack = 0
  6875  004904  0E10               	movlw	16
  6876  004906  0100               	movlb	0	; () banked
  6877  004908  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6878  00490A  0E27               	movlw	39
  6879  00490C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6880  00490E  0E00               	movlw	0
  6881  004910  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6882  004912  0E00               	movlw	0
  6883  004914  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6884  004916  EC4B  F027         	call	_I2C_Master_Init	;wreg free
  6885                           
  6886                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6887  00491A  9EF2               	bcf	intcon,7,c	;volatile
  6888                           
  6889                           ;RTC.c: 34: I2C_Master_Start();
  6890  00491C  EC05  F02C         	call	_I2C_Master_Start	;wreg free
  6891                           
  6892                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6893  004920  0E00               	movlw	0
  6894  004922  0100               	movlb	0	; () banked
  6895  004924  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6896  004926  0ED0               	movlw	208
  6897  004928  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6898  00492A  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  6899                           
  6900                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6901  00492E  0E00               	movlw	0
  6902  004930  0100               	movlb	0	; () banked
  6903  004932  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6904  004934  0E00               	movlw	0
  6905  004936  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6906  004938  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  6907                           
  6908                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6909  00493C  0E00               	movlw	0
  6910  00493E  0100               	movlb	0	; () banked
  6911  004940  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6912  004942  0E00               	movlw	0
  6913  004944  6F96               	movwf	loadRTC@i& (0+255),b
  6914  004946                     l7336:
  6915                           
  6916                           ; BSR set to: 0
  6917  004946  0100               	movlb	0	; () banked
  6918  004948  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6919  00494A  D008               	goto	l7340
  6920  00494C  0100               	movlb	0	; () banked
  6921  00494E  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6922  004950  E11B               	bnz	l7346
  6923  004952  0E07               	movlw	7
  6924  004954  0100               	movlb	0	; () banked
  6925  004956  5D96               	subwf	loadRTC@i& (0+255),w,b
  6926  004958  B0D8               	btfsc	status,0,c
  6927  00495A  D016               	goto	l7346
  6928  00495C                     l7340:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6932  00495C  0E1C               	movlw	low _time
  6933  00495E  0100               	movlb	0	; () banked
  6934  004960  2596               	addwf	loadRTC@i& (0+255),w,b
  6935  004962  6ED9               	movwf	fsr2l,c
  6936  004964  0E01               	movlw	high _time
  6937  004966  0100               	movlb	0	; () banked
  6938  004968  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6939  00496A  6EDA               	movwf	fsr2h,c
  6940  00496C  50DF               	movf	indf2,w,c
  6941  00496E  0100               	movlb	0	; () banked
  6942  004970  6F95               	movwf	??_loadRTC& (0+255),b
  6943  004972  0100               	movlb	0	; () banked
  6944  004974  5195               	movf	??_loadRTC& (0+255),w,b
  6945  004976  0100               	movlb	0	; () banked
  6946  004978  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6947  00497A  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6948  00497C  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  6949  004980  0100               	movlb	0	; () banked
  6950  004982  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6951  004984  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6952  004986  D7DF               	goto	l7336
  6953  004988                     l7346:
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;RTC.c: 39: }
  6957                           ;RTC.c: 40: I2C_Master_Stop();
  6958  004988  EC01  F02C         	call	_I2C_Master_Stop	;wreg free
  6959                           
  6960                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6961  00498C  8EF2               	bsf	intcon,7,c	;volatile
  6962  00498E  0012               	return		;funcret
  6963  004990                     __end_of_loadRTC:
  6964                           	opt stack 0
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           intcon2	equ	0xFF1
  6973                           intcon3	equ	0xFF0
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           postdec1	equ	0xFE5
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _I2C_Master_Init *****************
  6986 ;; Defined at:
  6987 ;;		line 15 in file "I2C.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  c               4   13[BANK0 ] const unsigned long 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;Total ram usage:        8 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    8
  7008 ;; This function calls:
  7009 ;;		___lldiv
  7010 ;; This function is called by:
  7011 ;;		_main
  7012 ;;		_loadRTC
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text17
  7017  004E96                     __ptext17:
  7018                           	opt stack 0
  7019  004E96                     _I2C_Master_Init:
  7020                           	opt stack 20
  7021                           
  7022                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7023                           
  7024                           ;incstack = 0
  7025  004E96  0E00               	movlw	0
  7026  004E98  6EC7               	movwf	4039,c	;volatile
  7027                           
  7028                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7029  004E9A  0E28               	movlw	40
  7030  004E9C  6EC6               	movwf	4038,c	;volatile
  7031                           
  7032                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7033  004E9E  0E00               	movlw	0
  7034  004EA0  6EC5               	movwf	4037,c	;volatile
  7035                           
  7036                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7037  004EA2  0E00               	movlw	0
  7038  004EA4  0100               	movlb	0	; () banked
  7039  004EA6  6F80               	movwf	___lldiv@dividend& (0+255),b
  7040  004EA8  0E48               	movlw	72
  7041  004EAA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7042  004EAC  0EE8               	movlw	232
  7043  004EAE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7044  004EB0  0E01               	movlw	1
  7045  004EB2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7046  004EB4  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7047  004EB8  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7048  004EBC  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7049  004EC0  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7050  004EC4  0E02               	movlw	2
  7051  004EC6                     u5655:
  7052  004EC6  90D8               	bcf	status,0,c
  7053  004EC8  0100               	movlb	0	; () banked
  7054  004ECA  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7055  004ECC  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7056  004ECE  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7057  004ED0  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7058  004ED2  2EE8               	decfsz	wreg,f,c
  7059  004ED4  D7F8               	goto	u5655
  7060  004ED6  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7061  004EDA  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7062  004EDE  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7063  004EE2  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7064  004EE6  EC7E  F023         	call	___lldiv	;wreg free
  7065  004EEA  0100               	movlb	0	; () banked
  7066  004EEC  0580               	decf	?___lldiv& (0+255),w,b
  7067  004EEE  6EC8               	movwf	4040,c	;volatile
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;I2C.c: 22: TRISC3 = 1;
  7071  004EF0  8694               	bsf	3988,3,c	;volatile
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;I2C.c: 23: TRISC4 = 1;
  7075  004EF2  8894               	bsf	3988,4,c	;volatile
  7076                           
  7077                           ; BSR set to: 0
  7078  004EF4  0012               	return		;funcret
  7079  004EF6                     __end_of_I2C_Master_Init:
  7080                           	opt stack 0
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           intcon2	equ	0xFF1
  7089                           intcon3	equ	0xFF0
  7090                           postinc0	equ	0xFEE
  7091                           wreg	equ	0xFE8
  7092                           postdec1	equ	0xFE5
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101 ;; *************** function ___lldiv *****************
  7102 ;; Defined at:
  7103 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  dividend        4    0[BANK0 ] unsigned long 
  7106 ;;  divisor         4    4[BANK0 ] unsigned long 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  quotient        4    8[BANK0 ] unsigned long 
  7109 ;;  counter         1   12[BANK0 ] unsigned char 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  4    0[BANK0 ] unsigned long 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7119 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;Total ram usage:       13 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    7
  7126 ;; This function calls:
  7127 ;;		Nothing
  7128 ;; This function is called by:
  7129 ;;		_I2C_Master_Init
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text18
  7134  0046FC                     __ptext18:
  7135                           	opt stack 0
  7136  0046FC                     ___lldiv:
  7137                           	opt stack 20
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;incstack = 0
  7141  0046FC  0E00               	movlw	0
  7142  0046FE  0100               	movlb	0	; () banked
  7143  004700  6F88               	movwf	___lldiv@quotient& (0+255),b
  7144  004702  0E00               	movlw	0
  7145  004704  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7146  004706  0E00               	movlw	0
  7147  004708  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7148  00470A  0E00               	movlw	0
  7149  00470C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152  00470E  0100               	movlb	0	; () banked
  7153  004710  5184               	movf	___lldiv@divisor& (0+255),w,b
  7154  004712  0100               	movlb	0	; () banked
  7155  004714  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7156  004716  0100               	movlb	0	; () banked
  7157  004718  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7158  00471A  0100               	movlb	0	; () banked
  7159  00471C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7160  00471E  B4D8               	btfsc	status,2,c
  7161  004720  D042               	goto	l1900
  7162                           
  7163                           ; BSR set to: 0
  7164  004722  0E01               	movlw	1
  7165  004724  0100               	movlb	0	; () banked
  7166  004726  6F8C               	movwf	___lldiv@counter& (0+255),b
  7167  004728  D008               	goto	l6740
  7168  00472A                     l6738:
  7169                           
  7170                           ; BSR set to: 0
  7171  00472A  0100               	movlb	0	; () banked
  7172  00472C  90D8               	bcf	status,0,c
  7173  00472E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7174  004730  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7175  004732  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7176  004734  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7177  004736  0100               	movlb	0	; () banked
  7178  004738  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7179  00473A                     l6740:
  7180                           
  7181                           ; BSR set to: 0
  7182  00473A  0100               	movlb	0	; () banked
  7183  00473C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7184  00473E  D7F5               	goto	l6738
  7185  004740                     l6742:
  7186                           
  7187                           ; BSR set to: 0
  7188  004740  0100               	movlb	0	; () banked
  7189  004742  90D8               	bcf	status,0,c
  7190  004744  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7191  004746  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7192  004748  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7193  00474A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7194                           
  7195                           ; BSR set to: 0
  7196  00474C  0100               	movlb	0	; () banked
  7197  00474E  5184               	movf	___lldiv@divisor& (0+255),w,b
  7198  004750  0100               	movlb	0	; () banked
  7199  004752  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7200  004754  0100               	movlb	0	; () banked
  7201  004756  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7202  004758  0100               	movlb	0	; () banked
  7203  00475A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7204  00475C  0100               	movlb	0	; () banked
  7205  00475E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7206  004760  0100               	movlb	0	; () banked
  7207  004762  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7208  004764  0100               	movlb	0	; () banked
  7209  004766  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7210  004768  0100               	movlb	0	; () banked
  7211  00476A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7212  00476C  A0D8               	btfss	status,0,c
  7213  00476E  D012               	goto	l6750
  7214                           
  7215                           ; BSR set to: 0
  7216  004770  0100               	movlb	0	; () banked
  7217  004772  5184               	movf	___lldiv@divisor& (0+255),w,b
  7218  004774  0100               	movlb	0	; () banked
  7219  004776  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7220  004778  0100               	movlb	0	; () banked
  7221  00477A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7222  00477C  0100               	movlb	0	; () banked
  7223  00477E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7224  004780  0100               	movlb	0	; () banked
  7225  004782  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7226  004784  0100               	movlb	0	; () banked
  7227  004786  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7228  004788  0100               	movlb	0	; () banked
  7229  00478A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7230  00478C  0100               	movlb	0	; () banked
  7231  00478E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7232                           
  7233                           ; BSR set to: 0
  7234  004790  0100               	movlb	0	; () banked
  7235  004792  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7236  004794                     l6750:
  7237                           
  7238                           ; BSR set to: 0
  7239  004794  0100               	movlb	0	; () banked
  7240  004796  90D8               	bcf	status,0,c
  7241  004798  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7242  00479A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7243  00479C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7244  00479E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7245                           
  7246                           ; BSR set to: 0
  7247  0047A0  0100               	movlb	0	; () banked
  7248  0047A2  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7249  0047A4  D7CD               	goto	l6742
  7250  0047A6                     l1900:
  7251                           
  7252                           ; BSR set to: 0
  7253  0047A6  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7254  0047AA  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7255  0047AE  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7256  0047B2  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7257                           
  7258                           ; BSR set to: 0
  7259  0047B6  0012               	return		;funcret
  7260  0047B8                     __end_of___lldiv:
  7261                           	opt stack 0
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           intcon2	equ	0xFF1
  7270                           intcon3	equ	0xFF0
  7271                           postinc0	equ	0xFEE
  7272                           wreg	equ	0xFE8
  7273                           postdec1	equ	0xFE5
  7274                           fsr1l	equ	0xFE1
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           postdec2	equ	0xFDD
  7278                           fsr2h	equ	0xFDA
  7279                           fsr2l	equ	0xFD9
  7280                           status	equ	0xFD8
  7281                           
  7282 ;; *************** function _change_state_to_menu_start *****************
  7283 ;; Defined at:
  7284 ;;		line 477 in file "UI.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;		None
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      void 
  7291 ;; Registers used:
  7292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;Total ram usage:        0 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:   11
  7305 ;; This function calls:
  7306 ;;		_lcdInst
  7307 ;;		_printRTC
  7308 ;;		_printf
  7309 ;; This function is called by:
  7310 ;;		_initUI
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text19
  7315  00557E                     __ptext19:
  7316                           	opt stack 0
  7317  00557E                     _change_state_to_menu_start:
  7318                           	opt stack 18
  7319                           
  7320                           ;UI.c: 478: cur_state = 0;
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;incstack = 0
  7324  00557E  0E00               	movlw	0
  7325  005580  0100               	movlb	0	; () banked
  7326  005582  6FED               	movwf	(_cur_state+1)& (0+255),b
  7327  005584  0E00               	movlw	0
  7328  005586  6FEC               	movwf	_cur_state& (0+255),b
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;UI.c: 480: lcdInst(0b10000000);;
  7332  005588  0E80               	movlw	128
  7333  00558A  ECDF  F02B         	call	_lcdInst
  7334                           
  7335                           ;UI.c: 481: printRTC();
  7336  00558E  ECD9  F014         	call	_printRTC	;wreg free
  7337                           
  7338                           ;UI.c: 482: lcdInst(0b11000000);;
  7339  005592  0EC0               	movlw	192
  7340  005594  ECDF  F02B         	call	_lcdInst
  7341                           
  7342                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7343  005598  0E01               	movlw	low STR_30
  7344  00559A  0100               	movlb	0	; () banked
  7345  00559C  6F8E               	movwf	printf@f& (0+255),b
  7346  00559E  0EFE               	movlw	high STR_30
  7347  0055A0  0100               	movlb	0	; () banked
  7348  0055A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7349  0055A4  ECC1  F00B         	call	_printf	;wreg free
  7350  0055A8  0012               	return		;funcret
  7351  0055AA                     __end_of_change_state_to_menu_start:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           intcon2	equ	0xFF1
  7361                           intcon3	equ	0xFF0
  7362                           postinc0	equ	0xFEE
  7363                           wreg	equ	0xFE8
  7364                           postdec1	equ	0xFE5
  7365                           fsr1l	equ	0xFE1
  7366                           indf2	equ	0xFDF
  7367                           postinc2	equ	0xFDE
  7368                           postdec2	equ	0xFDD
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function _initTime *****************
  7374 ;; Defined at:
  7375 ;;		line 17 in file "RTC.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  s               1    wreg     unsigned char 
  7378 ;;  m               1    0[BANK0 ] unsigned char 
  7379 ;;  h               1    1[BANK0 ] unsigned char 
  7380 ;;  w               1    2[BANK0 ] unsigned char 
  7381 ;;  DD              1    3[BANK0 ] unsigned char 
  7382 ;;  MM              1    4[BANK0 ] unsigned char 
  7383 ;;  YY              1    5[BANK0 ] unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  s               1    6[BANK0 ] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7395 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;Total ram usage:        7 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    7
  7402 ;; This function calls:
  7403 ;;		Nothing
  7404 ;; This function is called by:
  7405 ;;		_main
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text20
  7410  0056E2                     __ptext20:
  7411                           	opt stack 0
  7412  0056E2                     _initTime:
  7413                           	opt stack 23
  7414                           
  7415                           ;incstack = 0
  7416                           ;initTime@s stored from wreg
  7417  0056E2  0100               	movlb	0	; () banked
  7418  0056E4  6F86               	movwf	initTime@s& (0+255),b
  7419                           
  7420                           ;RTC.c: 19: time[0] = s;
  7421  0056E6  C086  F11C         	movff	initTime@s,_time
  7422                           
  7423                           ;RTC.c: 20: time[1] = m;
  7424  0056EA  C080  F11D         	movff	initTime@m,_time+1
  7425                           
  7426                           ;RTC.c: 21: time[2] = h;
  7427  0056EE  C081  F11E         	movff	initTime@h,_time+2
  7428                           
  7429                           ;RTC.c: 22: time[3] = w;
  7430  0056F2  C082  F11F         	movff	initTime@w,_time+3
  7431                           
  7432                           ;RTC.c: 23: time[4] = DD;
  7433  0056F6  C083  F120         	movff	initTime@DD,_time+4
  7434                           
  7435                           ;RTC.c: 24: time[5] = MM;
  7436  0056FA  C084  F121         	movff	initTime@MM,_time+5
  7437                           
  7438                           ;RTC.c: 25: time[6] = YY;
  7439  0056FE  C085  F122         	movff	initTime@YY,_time+6
  7440  005702  0012               	return		;funcret
  7441  005704                     __end_of_initTime:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon2	equ	0xFF1
  7451                           intcon3	equ	0xFF0
  7452                           postinc0	equ	0xFEE
  7453                           wreg	equ	0xFE8
  7454                           postdec1	equ	0xFE5
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _initLCD *****************
  7464 ;; Defined at:
  7465 ;;		line 50 in file "lcd.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;                  1    wreg      void 
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;Total ram usage:        1 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    9
  7486 ;; This function calls:
  7487 ;;		_lcdInst
  7488 ;; This function is called by:
  7489 ;;		_main
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text21
  7494  005140                     __ptext21:
  7495                           	opt stack 0
  7496  005140                     _initLCD:
  7497                           	opt stack 21
  7498                           
  7499                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  7500                           
  7501                           ;incstack = 0
  7502  005140  0E9C               	movlw	156
  7503  005142  0100               	movlb	0	; () banked
  7504  005144  6F83               	movwf	??_initLCD& (0+255),b
  7505  005146  0ED7               	movlw	215
  7506  005148                     u9837:
  7507  005148  2EE8               	decfsz	wreg,f,c
  7508  00514A  D7FE               	bra	u9837
  7509  00514C  2F83               	decfsz	??_initLCD& (0+255),f,b
  7510  00514E  D7FC               	bra	u9837
  7511                           
  7512                           ;lcd.c: 52: lcdInst(0b00110011);
  7513  005150  0E33               	movlw	51
  7514  005152  ECDF  F02B         	call	_lcdInst
  7515                           
  7516                           ;lcd.c: 53: lcdInst(0b00110010);
  7517  005156  0E32               	movlw	50
  7518  005158  ECDF  F02B         	call	_lcdInst
  7519                           
  7520                           ;lcd.c: 55: lcdInst(0b00101000);
  7521  00515C  0E28               	movlw	40
  7522  00515E  ECDF  F02B         	call	_lcdInst
  7523                           
  7524                           ;lcd.c: 56: lcdInst(0b00001100);
  7525  005162  0E0C               	movlw	12
  7526  005164  ECDF  F02B         	call	_lcdInst
  7527                           
  7528                           ;lcd.c: 57: lcdInst(0b00000110);
  7529  005168  0E06               	movlw	6
  7530  00516A  ECDF  F02B         	call	_lcdInst
  7531                           
  7532                           ;lcd.c: 58: lcdInst(0b00000001);
  7533  00516E  0E01               	movlw	1
  7534  005170  ECDF  F02B         	call	_lcdInst
  7535                           
  7536                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  7537  005174  0E9C               	movlw	156
  7538  005176  0100               	movlb	0	; () banked
  7539  005178  6F83               	movwf	??_initLCD& (0+255),b
  7540  00517A  0ED7               	movlw	215
  7541  00517C                     u9847:
  7542  00517C  2EE8               	decfsz	wreg,f,c
  7543  00517E  D7FE               	bra	u9847
  7544  005180  2F83               	decfsz	??_initLCD& (0+255),f,b
  7545  005182  D7FC               	bra	u9847
  7546  005184  0012               	return		;funcret
  7547  005186                     __end_of_initLCD:
  7548                           	opt stack 0
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           intcon	equ	0xFF2
  7556                           intcon2	equ	0xFF1
  7557                           intcon3	equ	0xFF0
  7558                           postinc0	equ	0xFEE
  7559                           wreg	equ	0xFE8
  7560                           postdec1	equ	0xFE5
  7561                           fsr1l	equ	0xFE1
  7562                           indf2	equ	0xFDF
  7563                           postinc2	equ	0xFDE
  7564                           postdec2	equ	0xFDD
  7565                           fsr2h	equ	0xFDA
  7566                           fsr2l	equ	0xFD9
  7567                           status	equ	0xFD8
  7568                           
  7569 ;; *************** function _UI *****************
  7570 ;; Defined at:
  7571 ;;		line 76 in file "UI.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;		None
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;  i               1   73[BANK0 ] unsigned char 
  7576 ;;  i               1   85[BANK0 ] unsigned char 
  7577 ;;  i               1   84[BANK0 ] unsigned char 
  7578 ;;  i               1   83[BANK0 ] unsigned char 
  7579 ;;  i               1   82[BANK0 ] unsigned char 
  7580 ;;  i               1   81[BANK0 ] unsigned char 
  7581 ;;  i               1   80[BANK0 ] unsigned char 
  7582 ;;  i               1   79[BANK0 ] unsigned char 
  7583 ;;  i               1   78[BANK0 ] unsigned char 
  7584 ;;  i               1   77[BANK0 ] unsigned char 
  7585 ;;  i               1   76[BANK0 ] unsigned char 
  7586 ;;  i               1   75[BANK0 ] unsigned char 
  7587 ;;  i               1   74[BANK0 ] unsigned char 
  7588 ;;  month           4   86[BANK0 ] unsigned char [4]
  7589 ;;  i               1   72[BANK0 ] unsigned char 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;Total ram usage:       22 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:   11
  7606 ;; This function calls:
  7607 ;;		___awdiv
  7608 ;;		___awmod
  7609 ;;		_change_state_to_menu_12
  7610 ;;		_change_state_to_menu_22
  7611 ;;		_lcdInst
  7612 ;;		_printRTC
  7613 ;;		_printf
  7614 ;;		_strcpy
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text22
  7621  000012                     __ptext22:
  7622                           	opt stack 0
  7623  000012                     _UI:
  7624                           	opt stack 19
  7625                           
  7626                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7627                           
  7628                           ;incstack = 0
  7629  000012  0E02               	movlw	2
  7630  000014  0100               	movlb	0	; () banked
  7631  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7632  000018  A4D8               	btfss	status,2,c
  7633  00001A  D086               	goto	l9006
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7637  00001C  0E01               	movlw	1
  7638  00001E  ECDF  F02B         	call	_lcdInst
  7639  000022  0E68               	movlw	104
  7640  000024  0100               	movlb	0	; () banked
  7641  000026  6FC4               	movwf	??_UI& (0+255),b
  7642  000028  0EE4               	movlw	228
  7643  00002A                     u9857:
  7644  00002A  2EE8               	decfsz	wreg,f,c
  7645  00002C  D7FE               	bra	u9857
  7646  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7647  000030  D7FC               	bra	u9857
  7648  000032  F000               	nop	
  7649                           
  7650                           ;UI.c: 79: lcdInst(0b10000000);;
  7651  000034  0E80               	movlw	128
  7652  000036  ECDF  F02B         	call	_lcdInst
  7653                           
  7654                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7655  00003A  0E69               	movlw	low STR_1
  7656  00003C  0100               	movlb	0	; () banked
  7657  00003E  6F8E               	movwf	printf@f& (0+255),b
  7658  000040  0EFB               	movlw	high STR_1
  7659  000042  0100               	movlb	0	; () banked
  7660  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7661  000046  0E01               	movlw	1
  7662  000048  0100               	movlb	0	; () banked
  7663  00004A  25FD               	addwf	_sel& (0+255),w,b
  7664  00004C  0100               	movlb	0	; () banked
  7665  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7666  000050  0100               	movlb	0	; () banked
  7667  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7668  000054  0E00               	movlw	0
  7669  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7670  000058  ECC1  F00B         	call	_printf	;wreg free
  7671                           
  7672                           ;UI.c: 81: lcdInst(0b11000000);;
  7673  00005C  0EC0               	movlw	192
  7674  00005E  ECDF  F02B         	call	_lcdInst
  7675                           
  7676                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7677  000062  0E0E               	movlw	14
  7678  000064  0100               	movlb	0	; () banked
  7679  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7680  000068  0E10               	movlw	16
  7681  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7682  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7683  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7684  000074  EC31  F024         	call	___awmod	;wreg free
  7685  000078  C080  F0C6         	movff	?___awmod,_UI$2449
  7686  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2449+1
  7687                           
  7688                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7689  000080  0E31               	movlw	low STR_2
  7690  000082  0100               	movlb	0	; () banked
  7691  000084  6F8E               	movwf	printf@f& (0+255),b
  7692  000086  0EFF               	movlw	high STR_2
  7693  000088  0100               	movlb	0	; () banked
  7694  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7695  00008C  0E0E               	movlw	14
  7696  00008E  0100               	movlb	0	; () banked
  7697  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7698  000092  0E10               	movlw	16
  7699  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7700  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7701  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7702  00009E  EC31  F024         	call	___awmod	;wreg free
  7703  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7704  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7705  0000AA  0E00               	movlw	0
  7706  0000AC  0100               	movlb	0	; () banked
  7707  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7708  0000B0  0E3C               	movlw	60
  7709  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7710  0000B4  EC1F  F023         	call	___awdiv	;wreg free
  7711  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7712  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7713  0000C0  C0C6  F080         	movff	_UI$2449,___awmod@dividend
  7714  0000C4  C0C7  F081         	movff	_UI$2449+1,___awmod@dividend+1
  7715  0000C8  0E00               	movlw	0
  7716  0000CA  0100               	movlb	0	; () banked
  7717  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7718  0000CE  0E3C               	movlw	60
  7719  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7720  0000D2  EC31  F024         	call	___awmod	;wreg free
  7721  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7722  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7723  0000DE  ECC1  F00B         	call	_printf	;wreg free
  7724  0000E2                     l180:
  7725  0000E2  B281               	btfsc	3969,1,c	;volatile
  7726  0000E4  D7FE               	goto	l180
  7727  0000E6                     l183:
  7728  0000E6  A281               	btfss	3969,1,c	;volatile
  7729  0000E8  D7FE               	goto	l183
  7730                           
  7731                           ;UI.c: 86: }
  7732                           ;UI.c: 87: if(cur_state == 12){
  7733  0000EA  0E0C               	movlw	12
  7734  0000EC  0100               	movlb	0	; () banked
  7735  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7736  0000F0  0100               	movlb	0	; () banked
  7737  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7738  0000F4  A4D8               	btfss	status,2,c
  7739  0000F6  D003               	goto	l9000
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;UI.c: 88: change_state_to_menu_12();
  7743  0000F8  EC1D  F029         	call	_change_state_to_menu_12	;wreg free
  7744                           
  7745                           ;UI.c: 89: }
  7746  0000FC  D002               	goto	l188
  7747  0000FE                     l9000:
  7748                           
  7749                           ;UI.c: 90: else{
  7750                           ;UI.c: 91: change_state_to_menu_22();
  7751  0000FE  EC01  F029         	call	_change_state_to_menu_22	;wreg free
  7752  000102                     l188:
  7753  000102  B281               	btfsc	3969,1,c	;volatile
  7754  000104  D7FE               	goto	l188
  7755                           
  7756                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7757  000106  0E05               	movlw	5
  7758  000108  0100               	movlb	0	; () banked
  7759  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7760  00010C  0E0F               	movlw	15
  7761  00010E  0100               	movlb	0	; () banked
  7762  000110  6FC4               	movwf	??_UI& (0+255),b
  7763  000112  0EF1               	movlw	241
  7764  000114                     u9867:
  7765  000114  2EE8               	decfsz	wreg,f,c
  7766  000116  D7FE               	bra	u9867
  7767  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7768  00011A  D7FC               	bra	u9867
  7769  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7770  00011E  D7FA               	bra	u9867
  7771                           
  7772                           ;UI.c: 95: machine_state = UI_state;
  7773  000120  0E00               	movlw	0
  7774  000122  0100               	movlb	0	; () banked
  7775  000124  6FFC               	movwf	_machine_state& (0+255),b
  7776                           
  7777                           ;UI.c: 96: }
  7778  000126  D3D0               	goto	l9326
  7779  000128                     l9006:
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;UI.c: 97: else if(cur_state == 0){
  7783  000128  0100               	movlb	0	; () banked
  7784  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7785  00012C  0100               	movlb	0	; () banked
  7786  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7787  000130  A4D8               	btfss	status,2,c
  7788  000132  D3CA               	goto	l9326
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7792  000134  0E00               	movlw	0
  7793  000136  0100               	movlb	0	; () banked
  7794  000138  6FC8               	movwf	UI@i& (0+255),b
  7795  00013A                     l9010:
  7796                           
  7797                           ; BSR set to: 0
  7798  00013A  0E63               	movlw	99
  7799  00013C  0100               	movlb	0	; () banked
  7800  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7801  000140  D001               	goto	l9014
  7802  000142  D00C               	goto	l9018
  7803  000144                     l9014:
  7804                           
  7805                           ; BSR set to: 0
  7806  000144  0E68               	movlw	104
  7807  000146  0100               	movlb	0	; () banked
  7808  000148  6FC4               	movwf	??_UI& (0+255),b
  7809  00014A  0EE4               	movlw	228
  7810  00014C                     u9877:
  7811  00014C  2EE8               	decfsz	wreg,f,c
  7812  00014E  D7FE               	bra	u9877
  7813  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7814  000152  D7FC               	bra	u9877
  7815  000154  F000               	nop	
  7816  000156  0100               	movlb	0	; () banked
  7817  000158  2BC8               	incf	UI@i& (0+255),f,b
  7818  00015A  D7EF               	goto	l9010
  7819  00015C                     l9018:
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;UI.c: 99: if(cur_state == 0){
  7823  00015C  0100               	movlb	0	; () banked
  7824  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7825  000160  0100               	movlb	0	; () banked
  7826  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7827  000164  A4D8               	btfss	status,2,c
  7828  000166  D3B0               	goto	l9326
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;UI.c: 100: printRTC();
  7832  000168  ECD9  F014         	call	_printRTC	;wreg free
  7833                           
  7834                           ;UI.c: 101: }
  7835                           ;UI.c: 102: }
  7836                           ;UI.c: 103: while(logstate){
  7837  00016C  D3AD               	goto	l9326
  7838  00016E                     l9022:
  7839                           
  7840                           ;UI.c: 105: if(!log_completion){
  7841  00016E  5063               	movf	_log_completion,w,c
  7842  000170  1064               	iorwf	_log_completion+1,w,c
  7843  000172  A4D8               	btfss	status,2,c
  7844  000174  D041               	goto	l9052
  7845                           
  7846                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7847  000176  0E01               	movlw	1
  7848  000178  ECDF  F02B         	call	_lcdInst
  7849  00017C  0E68               	movlw	104
  7850  00017E  0100               	movlb	0	; () banked
  7851  000180  6FC4               	movwf	??_UI& (0+255),b
  7852  000182  0EE4               	movlw	228
  7853  000184                     u9887:
  7854  000184  2EE8               	decfsz	wreg,f,c
  7855  000186  D7FE               	bra	u9887
  7856  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7857  00018A  D7FC               	bra	u9887
  7858  00018C  F000               	nop	
  7859                           
  7860                           ;UI.c: 107: lcdInst(0b10000000);;
  7861  00018E  0E80               	movlw	128
  7862  000190  ECDF  F02B         	call	_lcdInst
  7863                           
  7864                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7865  000194  0E57               	movlw	low STR_3
  7866  000196  0100               	movlb	0	; () banked
  7867  000198  6F8E               	movwf	printf@f& (0+255),b
  7868  00019A  0EFB               	movlw	high STR_3
  7869  00019C  0100               	movlb	0	; () banked
  7870  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7871  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7872  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7873  0001A8  ECC1  F00B         	call	_printf	;wreg free
  7874                           
  7875                           ;UI.c: 109: lcdInst(0b11000000);;
  7876  0001AC  0EC0               	movlw	192
  7877  0001AE  ECDF  F02B         	call	_lcdInst
  7878                           
  7879                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7880  0001B2  0E54               	movlw	low STR_4
  7881  0001B4  0100               	movlb	0	; () banked
  7882  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7883  0001B8  0EFE               	movlw	high STR_4
  7884  0001BA  0100               	movlb	0	; () banked
  7885  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7886  0001BE  ECC1  F00B         	call	_printf	;wreg free
  7887  0001C2                     l9036:
  7888  0001C2  0E00               	movlw	0
  7889  0001C4  0100               	movlb	0	; () banked
  7890  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7891  0001C8                     l9038:
  7892                           
  7893                           ; BSR set to: 0
  7894  0001C8  0E63               	movlw	99
  7895  0001CA  0100               	movlb	0	; () banked
  7896  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7897  0001CE  D001               	goto	l9042
  7898  0001D0  D00C               	goto	l9046
  7899  0001D2                     l9042:
  7900                           
  7901                           ; BSR set to: 0
  7902  0001D2  0E68               	movlw	104
  7903  0001D4  0100               	movlb	0	; () banked
  7904  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7905  0001D8  0EE4               	movlw	228
  7906  0001DA                     u9897:
  7907  0001DA  2EE8               	decfsz	wreg,f,c
  7908  0001DC  D7FE               	bra	u9897
  7909  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7910  0001E0  D7FC               	bra	u9897
  7911  0001E2  F000               	nop	
  7912  0001E4  0100               	movlb	0	; () banked
  7913  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7914  0001E8  D7EF               	goto	l9038
  7915  0001EA                     l9046:
  7916                           
  7917                           ; BSR set to: 0
  7918  0001EA  0100               	movlb	0	; () banked
  7919  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7920  0001EE  0100               	movlb	0	; () banked
  7921  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7922  0001F2  B4D8               	btfsc	status,2,c
  7923  0001F4  0012               	return	
  7924  0001F6  D7E5               	goto	l9036
  7925  0001F8                     l9052:
  7926                           
  7927                           ;UI.c: 114: else{
  7928                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7929  0001F8  0E01               	movlw	1
  7930  0001FA  ECDF  F02B         	call	_lcdInst
  7931  0001FE  0E68               	movlw	104
  7932  000200  0100               	movlb	0	; () banked
  7933  000202  6FC4               	movwf	??_UI& (0+255),b
  7934  000204  0EE4               	movlw	228
  7935  000206                     u9907:
  7936  000206  2EE8               	decfsz	wreg,f,c
  7937  000208  D7FE               	bra	u9907
  7938  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7939  00020C  D7FC               	bra	u9907
  7940  00020E  F000               	nop	
  7941                           
  7942                           ;UI.c: 116: lcdInst(0b10000000);;
  7943  000210  0E80               	movlw	128
  7944  000212  ECDF  F02B         	call	_lcdInst
  7945                           
  7946                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7947  000216  0E57               	movlw	low STR_3
  7948  000218  0100               	movlb	0	; () banked
  7949  00021A  6F8E               	movwf	printf@f& (0+255),b
  7950  00021C  0EFB               	movlw	high STR_3
  7951  00021E  0100               	movlb	0	; () banked
  7952  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7953  000222  C0F4  F090         	movff	_log,?_printf+2
  7954  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7955  00022A  ECC1  F00B         	call	_printf	;wreg free
  7956                           
  7957                           ;UI.c: 118: lcdInst(0b11000000);;
  7958  00022E  0EC0               	movlw	192
  7959  000230  ECDF  F02B         	call	_lcdInst
  7960                           
  7961                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7962  000234  0EF0               	movlw	low STR_6
  7963  000236  0100               	movlb	0	; () banked
  7964  000238  6F8E               	movwf	printf@f& (0+255),b
  7965  00023A  0EFD               	movlw	high STR_6
  7966  00023C  0100               	movlb	0	; () banked
  7967  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7968  000240  ECC1  F00B         	call	_printf	;wreg free
  7969                           
  7970                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7971  000244  0E00               	movlw	0
  7972  000246  0100               	movlb	0	; () banked
  7973  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7974  00024A                     l9066:
  7975                           
  7976                           ; BSR set to: 0
  7977  00024A  0E63               	movlw	99
  7978  00024C  0100               	movlb	0	; () banked
  7979  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7980  000250  D001               	goto	l9070
  7981  000252  D00C               	goto	l9074
  7982  000254                     l9070:
  7983                           
  7984                           ; BSR set to: 0
  7985  000254  0E68               	movlw	104
  7986  000256  0100               	movlb	0	; () banked
  7987  000258  6FC4               	movwf	??_UI& (0+255),b
  7988  00025A  0EE4               	movlw	228
  7989  00025C                     u9917:
  7990  00025C  2EE8               	decfsz	wreg,f,c
  7991  00025E  D7FE               	bra	u9917
  7992  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7993  000262  D7FC               	bra	u9917
  7994  000264  F000               	nop	
  7995  000266  0100               	movlb	0	; () banked
  7996  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7997  00026A  D7EF               	goto	l9066
  7998  00026C                     l9074:
  7999                           
  8000                           ; BSR set to: 0
  8001  00026C  0100               	movlb	0	; () banked
  8002  00026E  51F8               	movf	_logstate& (0+255),w,b
  8003  000270  0100               	movlb	0	; () banked
  8004  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8005  000274  B4D8               	btfsc	status,2,c
  8006  000276  0012               	return	
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8010                           
  8011                           ; BSR set to: 0
  8012                           
  8013                           ; BSR set to: 0
  8014  000278  0E00               	movlw	0
  8015  00027A  0100               	movlb	0	; () banked
  8016  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  8017  00027E                     l9080:
  8018                           
  8019                           ; BSR set to: 0
  8020  00027E  0E63               	movlw	99
  8021  000280  0100               	movlb	0	; () banked
  8022  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  8023  000284  D001               	goto	l9084
  8024  000286  D00C               	goto	l9088
  8025  000288                     l9084:
  8026                           
  8027                           ; BSR set to: 0
  8028  000288  0E68               	movlw	104
  8029  00028A  0100               	movlb	0	; () banked
  8030  00028C  6FC4               	movwf	??_UI& (0+255),b
  8031  00028E  0EE4               	movlw	228
  8032  000290                     u9927:
  8033  000290  2EE8               	decfsz	wreg,f,c
  8034  000292  D7FE               	bra	u9927
  8035  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  8036  000296  D7FC               	bra	u9927
  8037  000298  F000               	nop	
  8038  00029A  0100               	movlb	0	; () banked
  8039  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  8040  00029E  D7EF               	goto	l9080
  8041  0002A0                     l9088:
  8042                           
  8043                           ; BSR set to: 0
  8044  0002A0  0100               	movlb	0	; () banked
  8045  0002A2  51F8               	movf	_logstate& (0+255),w,b
  8046  0002A4  0100               	movlb	0	; () banked
  8047  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8048  0002A8  B4D8               	btfsc	status,2,c
  8049  0002AA  0012               	return	
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8053                           
  8054                           ; BSR set to: 0
  8055                           
  8056                           ; BSR set to: 0
  8057  0002AC  0E01               	movlw	1
  8058  0002AE  ECDF  F02B         	call	_lcdInst
  8059  0002B2  0E68               	movlw	104
  8060  0002B4  0100               	movlb	0	; () banked
  8061  0002B6  6FC4               	movwf	??_UI& (0+255),b
  8062  0002B8  0EE4               	movlw	228
  8063  0002BA                     u9937:
  8064  0002BA  2EE8               	decfsz	wreg,f,c
  8065  0002BC  D7FE               	bra	u9937
  8066  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  8067  0002C0  D7FC               	bra	u9937
  8068  0002C2  F000               	nop	
  8069                           
  8070                           ;UI.c: 125: lcdInst(0b10000000);;
  8071  0002C4  0E80               	movlw	128
  8072  0002C6  ECDF  F02B         	call	_lcdInst
  8073                           
  8074                           ;UI.c: 126: printf("START:");
  8075  0002CA  0EC3               	movlw	low STR_7
  8076  0002CC  0100               	movlb	0	; () banked
  8077  0002CE  6F8E               	movwf	printf@f& (0+255),b
  8078  0002D0  0EFF               	movlw	high STR_7
  8079  0002D2  0100               	movlb	0	; () banked
  8080  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8081  0002D6  ECC1  F00B         	call	_printf	;wreg free
  8082                           
  8083                           ;UI.c: 127: lcdInst(0b11000000);;
  8084  0002DA  0EC0               	movlw	192
  8085  0002DC  ECDF  F02B         	call	_lcdInst
  8086                           
  8087                           ;UI.c: 128: char month[] = "MMM";
  8088  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  8089  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  8090  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  8091  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  8092                           
  8093                           ;UI.c: 129: switch(log_startTime[5]){
  8094  0002F0  D0C3               	goto	l9132
  8095  0002F2                     l9104:
  8096                           
  8097                           ;UI.c: 131: strcpy(month, "JAN");
  8098  0002F2  0ED6               	movlw	low UI@month
  8099  0002F4  0100               	movlb	0	; () banked
  8100  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  8101  0002F8  0E00               	movlw	high UI@month
  8102  0002FA  0100               	movlb	0	; () banked
  8103  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8104  0002FE  0EDA               	movlw	low STR_8
  8105  000300  0100               	movlb	0	; () banked
  8106  000302  6F82               	movwf	strcpy@from& (0+255),b
  8107  000304  0EFF               	movlw	high STR_8
  8108  000306  0100               	movlb	0	; () banked
  8109  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8110  00030A  EC39  F029         	call	_strcpy	;wreg free
  8111                           
  8112                           ;UI.c: 132: break;
  8113  00030E  D0E6               	goto	l9134
  8114  000310                     l9106:
  8115                           
  8116                           ;UI.c: 134: strcpy(month, "FEB");
  8117  000310  0ED6               	movlw	low UI@month
  8118  000312  0100               	movlb	0	; () banked
  8119  000314  6F80               	movwf	strcpy@to& (0+255),b
  8120  000316  0E00               	movlw	high UI@month
  8121  000318  0100               	movlb	0	; () banked
  8122  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8123  00031C  0ECA               	movlw	low STR_9
  8124  00031E  0100               	movlb	0	; () banked
  8125  000320  6F82               	movwf	strcpy@from& (0+255),b
  8126  000322  0EFF               	movlw	high STR_9
  8127  000324  0100               	movlb	0	; () banked
  8128  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8129  000328  EC39  F029         	call	_strcpy	;wreg free
  8130                           
  8131                           ;UI.c: 135: break;
  8132  00032C  D0D7               	goto	l9134
  8133  00032E                     l9108:
  8134                           
  8135                           ;UI.c: 137: strcpy(month, "MAR");
  8136  00032E  0ED6               	movlw	low UI@month
  8137  000330  0100               	movlb	0	; () banked
  8138  000332  6F80               	movwf	strcpy@to& (0+255),b
  8139  000334  0E00               	movlw	high UI@month
  8140  000336  0100               	movlb	0	; () banked
  8141  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8142  00033A  0EE6               	movlw	low STR_10
  8143  00033C  0100               	movlb	0	; () banked
  8144  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8145  000340  0EFF               	movlw	high STR_10
  8146  000342  0100               	movlb	0	; () banked
  8147  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8148  000346  EC39  F029         	call	_strcpy	;wreg free
  8149                           
  8150                           ;UI.c: 138: break;
  8151  00034A  D0C8               	goto	l9134
  8152  00034C                     l9110:
  8153                           
  8154                           ;UI.c: 140: strcpy(month, "APR");
  8155  00034C  0ED6               	movlw	low UI@month
  8156  00034E  0100               	movlb	0	; () banked
  8157  000350  6F80               	movwf	strcpy@to& (0+255),b
  8158  000352  0E00               	movlw	high UI@month
  8159  000354  0100               	movlb	0	; () banked
  8160  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8161  000358  0EEA               	movlw	low STR_11
  8162  00035A  0100               	movlb	0	; () banked
  8163  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8164  00035E  0EFF               	movlw	high STR_11
  8165  000360  0100               	movlb	0	; () banked
  8166  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8167  000364  EC39  F029         	call	_strcpy	;wreg free
  8168                           
  8169                           ;UI.c: 141: break;
  8170  000368  D0B9               	goto	l9134
  8171  00036A                     l9112:
  8172                           
  8173                           ;UI.c: 143: strcpy(month, "MAY");
  8174  00036A  0ED6               	movlw	low UI@month
  8175  00036C  0100               	movlb	0	; () banked
  8176  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8177  000370  0E00               	movlw	high UI@month
  8178  000372  0100               	movlb	0	; () banked
  8179  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8180  000376  0EFA               	movlw	low STR_12
  8181  000378  0100               	movlb	0	; () banked
  8182  00037A  6F82               	movwf	strcpy@from& (0+255),b
  8183  00037C  0EFF               	movlw	high STR_12
  8184  00037E  0100               	movlb	0	; () banked
  8185  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8186  000382  EC39  F029         	call	_strcpy	;wreg free
  8187                           
  8188                           ;UI.c: 144: break;
  8189  000386  D0AA               	goto	l9134
  8190  000388                     l9114:
  8191                           
  8192                           ;UI.c: 146: strcpy(month, "JUN");
  8193  000388  0ED6               	movlw	low UI@month
  8194  00038A  0100               	movlb	0	; () banked
  8195  00038C  6F80               	movwf	strcpy@to& (0+255),b
  8196  00038E  0E00               	movlw	high UI@month
  8197  000390  0100               	movlb	0	; () banked
  8198  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8199  000394  0EDE               	movlw	low STR_13
  8200  000396  0100               	movlb	0	; () banked
  8201  000398  6F82               	movwf	strcpy@from& (0+255),b
  8202  00039A  0EFF               	movlw	high STR_13
  8203  00039C  0100               	movlb	0	; () banked
  8204  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8205  0003A0  EC39  F029         	call	_strcpy	;wreg free
  8206                           
  8207                           ;UI.c: 147: break;
  8208  0003A4  D09B               	goto	l9134
  8209  0003A6                     l9116:
  8210                           
  8211                           ;UI.c: 149: strcpy(month, "JUL");
  8212  0003A6  0ED6               	movlw	low UI@month
  8213  0003A8  0100               	movlb	0	; () banked
  8214  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  8215  0003AC  0E00               	movlw	high UI@month
  8216  0003AE  0100               	movlb	0	; () banked
  8217  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8218  0003B2  0ED6               	movlw	low STR_14
  8219  0003B4  0100               	movlb	0	; () banked
  8220  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  8221  0003B8  0EFF               	movlw	high STR_14
  8222  0003BA  0100               	movlb	0	; () banked
  8223  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8224  0003BE  EC39  F029         	call	_strcpy	;wreg free
  8225                           
  8226                           ;UI.c: 150: break;
  8227  0003C2  D08C               	goto	l9134
  8228  0003C4                     l9118:
  8229                           
  8230                           ;UI.c: 152: strcpy(month, "AUG");
  8231  0003C4  0ED6               	movlw	low UI@month
  8232  0003C6  0100               	movlb	0	; () banked
  8233  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8234  0003CA  0E00               	movlw	high UI@month
  8235  0003CC  0100               	movlb	0	; () banked
  8236  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8237  0003D0  0ED2               	movlw	low STR_15
  8238  0003D2  0100               	movlb	0	; () banked
  8239  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8240  0003D6  0EFF               	movlw	high STR_15
  8241  0003D8  0100               	movlb	0	; () banked
  8242  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8243  0003DC  EC39  F029         	call	_strcpy	;wreg free
  8244                           
  8245                           ;UI.c: 153: break;
  8246  0003E0  D07D               	goto	l9134
  8247  0003E2                     l9120:
  8248                           
  8249                           ;UI.c: 155: strcpy(month, "SEP");
  8250  0003E2  0ED6               	movlw	low UI@month
  8251  0003E4  0100               	movlb	0	; () banked
  8252  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8253  0003E8  0E00               	movlw	high UI@month
  8254  0003EA  0100               	movlb	0	; () banked
  8255  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8256  0003EE  0EE2               	movlw	low STR_16
  8257  0003F0  0100               	movlb	0	; () banked
  8258  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8259  0003F4  0EFF               	movlw	high STR_16
  8260  0003F6  0100               	movlb	0	; () banked
  8261  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8262  0003FA  EC39  F029         	call	_strcpy	;wreg free
  8263                           
  8264                           ;UI.c: 156: break;
  8265  0003FE  D06E               	goto	l9134
  8266  000400                     l9122:
  8267                           
  8268                           ;UI.c: 158: strcpy(month, "OCT");
  8269  000400  0ED6               	movlw	low UI@month
  8270  000402  0100               	movlb	0	; () banked
  8271  000404  6F80               	movwf	strcpy@to& (0+255),b
  8272  000406  0E00               	movlw	high UI@month
  8273  000408  0100               	movlb	0	; () banked
  8274  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8275  00040C  0EF2               	movlw	low STR_17
  8276  00040E  0100               	movlb	0	; () banked
  8277  000410  6F82               	movwf	strcpy@from& (0+255),b
  8278  000412  0EFF               	movlw	high STR_17
  8279  000414  0100               	movlb	0	; () banked
  8280  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8281  000418  EC39  F029         	call	_strcpy	;wreg free
  8282                           
  8283                           ;UI.c: 159: break;
  8284  00041C  D05F               	goto	l9134
  8285  00041E                     l9124:
  8286                           
  8287                           ;UI.c: 161: strcpy(month, "NOV");
  8288  00041E  0ED6               	movlw	low UI@month
  8289  000420  0100               	movlb	0	; () banked
  8290  000422  6F80               	movwf	strcpy@to& (0+255),b
  8291  000424  0E00               	movlw	high UI@month
  8292  000426  0100               	movlb	0	; () banked
  8293  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8294  00042A  0EF6               	movlw	low STR_18
  8295  00042C  0100               	movlb	0	; () banked
  8296  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8297  000430  0EFF               	movlw	high STR_18
  8298  000432  0100               	movlb	0	; () banked
  8299  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8300  000436  EC39  F029         	call	_strcpy	;wreg free
  8301                           
  8302                           ;UI.c: 162: break;
  8303  00043A  D050               	goto	l9134
  8304  00043C                     l9126:
  8305                           
  8306                           ;UI.c: 164: strcpy(month, "DEC");
  8307  00043C  0ED6               	movlw	low UI@month
  8308  00043E  0100               	movlb	0	; () banked
  8309  000440  6F80               	movwf	strcpy@to& (0+255),b
  8310  000442  0E00               	movlw	high UI@month
  8311  000444  0100               	movlb	0	; () banked
  8312  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8313  000448  0ECE               	movlw	low STR_19
  8314  00044A  0100               	movlb	0	; () banked
  8315  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8316  00044E  0EFF               	movlw	high STR_19
  8317  000450  0100               	movlb	0	; () banked
  8318  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8319  000454  EC39  F029         	call	_strcpy	;wreg free
  8320                           
  8321                           ;UI.c: 165: break;
  8322  000458  D041               	goto	l9134
  8323  00045A                     l9128:
  8324                           
  8325                           ;UI.c: 167: strcpy(month, "ERR");
  8326  00045A  0ED6               	movlw	low UI@month
  8327  00045C  0100               	movlb	0	; () banked
  8328  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8329  000460  0E00               	movlw	high UI@month
  8330  000462  0100               	movlb	0	; () banked
  8331  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8332  000466  0EEE               	movlw	low STR_20
  8333  000468  0100               	movlb	0	; () banked
  8334  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8335  00046C  0EFF               	movlw	high STR_20
  8336  00046E  0100               	movlb	0	; () banked
  8337  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8338  000472  EC39  F029         	call	_strcpy	;wreg free
  8339                           
  8340                           ;UI.c: 169: }
  8341                           
  8342                           ;UI.c: 168: break;
  8343  000476  D032               	goto	l9134
  8344  000478                     l9132:
  8345  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8346  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8347  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8348                           
  8349                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8350                           ; Switch size 1, requested type "space"
  8351                           ; Number of cases is 1, Range of values is 0 to 0
  8352                           ; switch strategies available:
  8353                           ; Name         Instructions Cycles
  8354                           ; simple_byte            4     3 (average)
  8355                           ;	Chosen strategy is simple_byte
  8356  000484  0100               	movlb	0	; () banked
  8357  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8358  000488  0A00               	xorlw	0	; case 0
  8359  00048A  A4D8               	btfss	status,2,c
  8360  00048C  D7E6               	goto	l9128
  8361                           
  8362                           ; BSR set to: 0
  8363                           ; Switch size 1, requested type "space"
  8364                           ; Number of cases is 12, Range of values is 1 to 12
  8365                           ; switch strategies available:
  8366                           ; Name         Instructions Cycles
  8367                           ; simple_byte           37    19 (average)
  8368                           ;	Chosen strategy is simple_byte
  8369  00048E  0100               	movlb	0	; () banked
  8370  000490  51C4               	movf	??_UI& (0+255),w,b
  8371  000492  0A01               	xorlw	1	; case 1
  8372  000494  B4D8               	btfsc	status,2,c
  8373  000496  D72D               	goto	l9104
  8374  000498  0A03               	xorlw	3	; case 2
  8375  00049A  B4D8               	btfsc	status,2,c
  8376  00049C  D739               	goto	l9106
  8377  00049E  0A01               	xorlw	1	; case 3
  8378  0004A0  B4D8               	btfsc	status,2,c
  8379  0004A2  D745               	goto	l9108
  8380  0004A4  0A07               	xorlw	7	; case 4
  8381  0004A6  B4D8               	btfsc	status,2,c
  8382  0004A8  D751               	goto	l9110
  8383  0004AA  0A01               	xorlw	1	; case 5
  8384  0004AC  B4D8               	btfsc	status,2,c
  8385  0004AE  D75D               	goto	l9112
  8386  0004B0  0A03               	xorlw	3	; case 6
  8387  0004B2  B4D8               	btfsc	status,2,c
  8388  0004B4  D769               	goto	l9114
  8389  0004B6  0A01               	xorlw	1	; case 7
  8390  0004B8  B4D8               	btfsc	status,2,c
  8391  0004BA  D775               	goto	l9116
  8392  0004BC  0A0F               	xorlw	15	; case 8
  8393  0004BE  B4D8               	btfsc	status,2,c
  8394  0004C0  D781               	goto	l9118
  8395  0004C2  0A01               	xorlw	1	; case 9
  8396  0004C4  B4D8               	btfsc	status,2,c
  8397  0004C6  D78D               	goto	l9120
  8398  0004C8  0A03               	xorlw	3	; case 10
  8399  0004CA  B4D8               	btfsc	status,2,c
  8400  0004CC  D799               	goto	l9122
  8401  0004CE  0A01               	xorlw	1	; case 11
  8402  0004D0  B4D8               	btfsc	status,2,c
  8403  0004D2  D7A5               	goto	l9124
  8404  0004D4  0A07               	xorlw	7	; case 12
  8405  0004D6  B4D8               	btfsc	status,2,c
  8406  0004D8  D7B1               	goto	l9126
  8407  0004DA  D7BF               	goto	l9128
  8408  0004DC                     l9134:
  8409                           
  8410                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8411  0004DC  0EBE               	movlw	low STR_21
  8412  0004DE  0100               	movlb	0	; () banked
  8413  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8414  0004E2  0EFA               	movlw	high STR_21
  8415  0004E4  0100               	movlb	0	; () banked
  8416  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8417  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8418  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8419  0004F0  0ED6               	movlw	low UI@month
  8420  0004F2  0100               	movlb	0	; () banked
  8421  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8422  0004F6  0E00               	movlw	high UI@month
  8423  0004F8  0100               	movlb	0	; () banked
  8424  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8425  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8426  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8427  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8428  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8429  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8430  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8431  000514  ECC1  F00B         	call	_printf	;wreg free
  8432                           
  8433                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8434  000518  0E00               	movlw	0
  8435  00051A  0100               	movlb	0	; () banked
  8436  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8437  00051E                     l9138:
  8438                           
  8439                           ; BSR set to: 0
  8440  00051E  0E63               	movlw	99
  8441  000520  0100               	movlb	0	; () banked
  8442  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8443  000524  D001               	goto	l9142
  8444  000526  D00C               	goto	l9146
  8445  000528                     l9142:
  8446                           
  8447                           ; BSR set to: 0
  8448  000528  0E68               	movlw	104
  8449  00052A  0100               	movlb	0	; () banked
  8450  00052C  6FC4               	movwf	??_UI& (0+255),b
  8451  00052E  0EE4               	movlw	228
  8452  000530                     u9947:
  8453  000530  2EE8               	decfsz	wreg,f,c
  8454  000532  D7FE               	bra	u9947
  8455  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8456  000536  D7FC               	bra	u9947
  8457  000538  F000               	nop	
  8458  00053A  0100               	movlb	0	; () banked
  8459  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8460  00053E  D7EF               	goto	l9138
  8461  000540                     l9146:
  8462                           
  8463                           ; BSR set to: 0
  8464  000540  0100               	movlb	0	; () banked
  8465  000542  51F8               	movf	_logstate& (0+255),w,b
  8466  000544  0100               	movlb	0	; () banked
  8467  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8468  000548  B4D8               	btfsc	status,2,c
  8469  00054A  0012               	return	
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8473                           
  8474                           ; BSR set to: 0
  8475                           
  8476                           ; BSR set to: 0
  8477  00054C  0E00               	movlw	0
  8478  00054E  0100               	movlb	0	; () banked
  8479  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8480  000552                     l9152:
  8481                           
  8482                           ; BSR set to: 0
  8483  000552  0E63               	movlw	99
  8484  000554  0100               	movlb	0	; () banked
  8485  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8486  000558  D001               	goto	l9156
  8487  00055A  D00C               	goto	l9160
  8488  00055C                     l9156:
  8489                           
  8490                           ; BSR set to: 0
  8491  00055C  0E68               	movlw	104
  8492  00055E  0100               	movlb	0	; () banked
  8493  000560  6FC4               	movwf	??_UI& (0+255),b
  8494  000562  0EE4               	movlw	228
  8495  000564                     u9957:
  8496  000564  2EE8               	decfsz	wreg,f,c
  8497  000566  D7FE               	bra	u9957
  8498  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8499  00056A  D7FC               	bra	u9957
  8500  00056C  F000               	nop	
  8501  00056E  0100               	movlb	0	; () banked
  8502  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8503  000572  D7EF               	goto	l9152
  8504  000574                     l9160:
  8505                           
  8506                           ; BSR set to: 0
  8507  000574  0100               	movlb	0	; () banked
  8508  000576  51F8               	movf	_logstate& (0+255),w,b
  8509  000578  0100               	movlb	0	; () banked
  8510  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8511  00057C  B4D8               	btfsc	status,2,c
  8512  00057E  0012               	return	
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8516                           
  8517                           ; BSR set to: 0
  8518                           
  8519                           ; BSR set to: 0
  8520  000580  0E01               	movlw	1
  8521  000582  ECDF  F02B         	call	_lcdInst
  8522  000586  0E68               	movlw	104
  8523  000588  0100               	movlb	0	; () banked
  8524  00058A  6FC4               	movwf	??_UI& (0+255),b
  8525  00058C  0EE4               	movlw	228
  8526  00058E                     u9967:
  8527  00058E  2EE8               	decfsz	wreg,f,c
  8528  000590  D7FE               	bra	u9967
  8529  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8530  000594  D7FC               	bra	u9967
  8531  000596  F000               	nop	
  8532                           
  8533                           ;UI.c: 176: lcdInst(0b10000000);;
  8534  000598  0E80               	movlw	128
  8535  00059A  ECDF  F02B         	call	_lcdInst
  8536                           
  8537                           ;UI.c: 177: printf("DURATION:");
  8538  00059E  0E9A               	movlw	low STR_22
  8539  0005A0  0100               	movlb	0	; () banked
  8540  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8541  0005A4  0EFF               	movlw	high STR_22
  8542  0005A6  0100               	movlb	0	; () banked
  8543  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8544  0005AA  ECC1  F00B         	call	_printf	;wreg free
  8545                           
  8546                           ;UI.c: 178: lcdInst(0b11000000);;
  8547  0005AE  0EC0               	movlw	192
  8548  0005B0  ECDF  F02B         	call	_lcdInst
  8549                           
  8550                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8551  0005B4  0E0E               	movlw	14
  8552  0005B6  0100               	movlb	0	; () banked
  8553  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8554  0005BA  0E10               	movlw	16
  8555  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8556  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8557  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8558  0005C6  EC31  F024         	call	___awmod	;wreg free
  8559  0005CA  C080  F0C6         	movff	?___awmod,_UI$2449
  8560  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2449+1
  8561                           
  8562                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8563  0005D2  0E23               	movlw	low STR_23
  8564  0005D4  0100               	movlb	0	; () banked
  8565  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8566  0005D8  0EFF               	movlw	high STR_23
  8567  0005DA  0100               	movlb	0	; () banked
  8568  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8569  0005DE  0E0E               	movlw	14
  8570  0005E0  0100               	movlb	0	; () banked
  8571  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8572  0005E4  0E10               	movlw	16
  8573  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8574  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8575  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8576  0005F0  EC31  F024         	call	___awmod	;wreg free
  8577  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8578  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8579  0005FC  0E00               	movlw	0
  8580  0005FE  0100               	movlb	0	; () banked
  8581  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8582  000602  0E3C               	movlw	60
  8583  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8584  000606  EC1F  F023         	call	___awdiv	;wreg free
  8585  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8586  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8587  000612  C0C6  F080         	movff	_UI$2449,___awmod@dividend
  8588  000616  C0C7  F081         	movff	_UI$2449+1,___awmod@dividend+1
  8589  00061A  0E00               	movlw	0
  8590  00061C  0100               	movlb	0	; () banked
  8591  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8592  000620  0E3C               	movlw	60
  8593  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8594  000624  EC31  F024         	call	___awmod	;wreg free
  8595  000628  C080  F092         	movff	?___awmod,?_printf+4
  8596  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8597  000630  ECC1  F00B         	call	_printf	;wreg free
  8598                           
  8599                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8600  000634  0E00               	movlw	0
  8601  000636  0100               	movlb	0	; () banked
  8602  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8603  00063A                     l9180:
  8604                           
  8605                           ; BSR set to: 0
  8606  00063A  0E63               	movlw	99
  8607  00063C  0100               	movlb	0	; () banked
  8608  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8609  000640  D001               	goto	l9184
  8610  000642  D00C               	goto	l9188
  8611  000644                     l9184:
  8612                           
  8613                           ; BSR set to: 0
  8614  000644  0E68               	movlw	104
  8615  000646  0100               	movlb	0	; () banked
  8616  000648  6FC4               	movwf	??_UI& (0+255),b
  8617  00064A  0EE4               	movlw	228
  8618  00064C                     u9977:
  8619  00064C  2EE8               	decfsz	wreg,f,c
  8620  00064E  D7FE               	bra	u9977
  8621  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8622  000652  D7FC               	bra	u9977
  8623  000654  F000               	nop	
  8624  000656  0100               	movlb	0	; () banked
  8625  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8626  00065A  D7EF               	goto	l9180
  8627  00065C                     l9188:
  8628                           
  8629                           ; BSR set to: 0
  8630  00065C  0100               	movlb	0	; () banked
  8631  00065E  51F8               	movf	_logstate& (0+255),w,b
  8632  000660  0100               	movlb	0	; () banked
  8633  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8634  000664  B4D8               	btfsc	status,2,c
  8635  000666  0012               	return	
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8639                           
  8640                           ; BSR set to: 0
  8641                           
  8642                           ; BSR set to: 0
  8643  000668  0E00               	movlw	0
  8644  00066A  0100               	movlb	0	; () banked
  8645  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8646  00066E                     l9194:
  8647                           
  8648                           ; BSR set to: 0
  8649  00066E  0E63               	movlw	99
  8650  000670  0100               	movlb	0	; () banked
  8651  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8652  000674  D001               	goto	l9198
  8653  000676  D00C               	goto	l9202
  8654  000678                     l9198:
  8655                           
  8656                           ; BSR set to: 0
  8657  000678  0E68               	movlw	104
  8658  00067A  0100               	movlb	0	; () banked
  8659  00067C  6FC4               	movwf	??_UI& (0+255),b
  8660  00067E  0EE4               	movlw	228
  8661  000680                     u9987:
  8662  000680  2EE8               	decfsz	wreg,f,c
  8663  000682  D7FE               	bra	u9987
  8664  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8665  000686  D7FC               	bra	u9987
  8666  000688  F000               	nop	
  8667  00068A  0100               	movlb	0	; () banked
  8668  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8669  00068E  D7EF               	goto	l9194
  8670  000690                     l9202:
  8671                           
  8672                           ; BSR set to: 0
  8673  000690  0100               	movlb	0	; () banked
  8674  000692  51F8               	movf	_logstate& (0+255),w,b
  8675  000694  0100               	movlb	0	; () banked
  8676  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8677  000698  B4D8               	btfsc	status,2,c
  8678  00069A  0012               	return	
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8682                           
  8683                           ; BSR set to: 0
  8684                           
  8685                           ; BSR set to: 0
  8686  00069C  0E01               	movlw	1
  8687  00069E  ECDF  F02B         	call	_lcdInst
  8688  0006A2  0E68               	movlw	104
  8689  0006A4  0100               	movlb	0	; () banked
  8690  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8691  0006A8  0EE4               	movlw	228
  8692  0006AA                     u9997:
  8693  0006AA  2EE8               	decfsz	wreg,f,c
  8694  0006AC  D7FE               	bra	u9997
  8695  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8696  0006B0  D7FC               	bra	u9997
  8697  0006B2  F000               	nop	
  8698                           
  8699                           ;UI.c: 185: lcdInst(0b10000000);;
  8700  0006B4  0E80               	movlw	128
  8701  0006B6  ECDF  F02B         	call	_lcdInst
  8702                           
  8703                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8704  0006BA  0E46               	movlw	low STR_24
  8705  0006BC  0100               	movlb	0	; () banked
  8706  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8707  0006C0  0EFD               	movlw	high STR_24
  8708  0006C2  0100               	movlb	0	; () banked
  8709  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8710  0006C6  ECC1  F00B         	call	_printf	;wreg free
  8711                           
  8712                           ;UI.c: 187: lcdInst(0b11000000);;
  8713  0006CA  0EC0               	movlw	192
  8714  0006CC  ECDF  F02B         	call	_lcdInst
  8715                           
  8716                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8717  0006D0  0E23               	movlw	low STR_25
  8718  0006D2  0100               	movlb	0	; () banked
  8719  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8720  0006D6  0EFE               	movlw	high STR_25
  8721  0006D8  0100               	movlb	0	; () banked
  8722  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8723  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8724  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8725  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8726  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8727  0006EC  ECC1  F00B         	call	_printf	;wreg free
  8728                           
  8729                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8730  0006F0  0E00               	movlw	0
  8731  0006F2  0100               	movlb	0	; () banked
  8732  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8733  0006F6                     l9220:
  8734                           
  8735                           ; BSR set to: 0
  8736  0006F6  0E63               	movlw	99
  8737  0006F8  0100               	movlb	0	; () banked
  8738  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8739  0006FC  D001               	goto	l9224
  8740  0006FE  D00C               	goto	l9228
  8741  000700                     l9224:
  8742                           
  8743                           ; BSR set to: 0
  8744  000700  0E68               	movlw	104
  8745  000702  0100               	movlb	0	; () banked
  8746  000704  6FC4               	movwf	??_UI& (0+255),b
  8747  000706  0EE4               	movlw	228
  8748  000708                     u10007:
  8749  000708  2EE8               	decfsz	wreg,f,c
  8750  00070A  D7FE               	bra	u10007
  8751  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8752  00070E  D7FC               	bra	u10007
  8753  000710  F000               	nop	
  8754  000712  0100               	movlb	0	; () banked
  8755  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8756  000716  D7EF               	goto	l9220
  8757  000718                     l9228:
  8758                           
  8759                           ; BSR set to: 0
  8760  000718  0100               	movlb	0	; () banked
  8761  00071A  51F8               	movf	_logstate& (0+255),w,b
  8762  00071C  0100               	movlb	0	; () banked
  8763  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8764  000720  B4D8               	btfsc	status,2,c
  8765  000722  0012               	return	
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8769                           
  8770                           ; BSR set to: 0
  8771                           
  8772                           ; BSR set to: 0
  8773  000724  0E00               	movlw	0
  8774  000726  0100               	movlb	0	; () banked
  8775  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8776  00072A                     l9234:
  8777                           
  8778                           ; BSR set to: 0
  8779  00072A  0E63               	movlw	99
  8780  00072C  0100               	movlb	0	; () banked
  8781  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8782  000730  D001               	goto	l9238
  8783  000732  D00C               	goto	l9242
  8784  000734                     l9238:
  8785                           
  8786                           ; BSR set to: 0
  8787  000734  0E68               	movlw	104
  8788  000736  0100               	movlb	0	; () banked
  8789  000738  6FC4               	movwf	??_UI& (0+255),b
  8790  00073A  0EE4               	movlw	228
  8791  00073C                     u10017:
  8792  00073C  2EE8               	decfsz	wreg,f,c
  8793  00073E  D7FE               	bra	u10017
  8794  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8795  000742  D7FC               	bra	u10017
  8796  000744  F000               	nop	
  8797  000746  0100               	movlb	0	; () banked
  8798  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8799  00074A  D7EF               	goto	l9234
  8800  00074C                     l9242:
  8801                           
  8802                           ; BSR set to: 0
  8803  00074C  0100               	movlb	0	; () banked
  8804  00074E  51F8               	movf	_logstate& (0+255),w,b
  8805  000750  0100               	movlb	0	; () banked
  8806  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8807  000754  B4D8               	btfsc	status,2,c
  8808  000756  0012               	return	
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8812                           
  8813                           ; BSR set to: 0
  8814                           
  8815                           ; BSR set to: 0
  8816  000758  0E01               	movlw	1
  8817  00075A  ECDF  F02B         	call	_lcdInst
  8818  00075E  0E68               	movlw	104
  8819  000760  0100               	movlb	0	; () banked
  8820  000762  6FC4               	movwf	??_UI& (0+255),b
  8821  000764  0EE4               	movlw	228
  8822  000766                     u10027:
  8823  000766  2EE8               	decfsz	wreg,f,c
  8824  000768  D7FE               	bra	u10027
  8825  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8826  00076C  D7FC               	bra	u10027
  8827  00076E  F000               	nop	
  8828                           
  8829                           ;UI.c: 194: lcdInst(0b10000000);;
  8830  000770  0E80               	movlw	128
  8831  000772  ECDF  F02B         	call	_lcdInst
  8832                           
  8833                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8834  000776  0E57               	movlw	low STR_26
  8835  000778  0100               	movlb	0	; () banked
  8836  00077A  6F8E               	movwf	printf@f& (0+255),b
  8837  00077C  0EFD               	movlw	high STR_26
  8838  00077E  0100               	movlb	0	; () banked
  8839  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8840  000782  ECC1  F00B         	call	_printf	;wreg free
  8841                           
  8842                           ;UI.c: 196: lcdInst(0b11000000);;
  8843  000786  0EC0               	movlw	192
  8844  000788  ECDF  F02B         	call	_lcdInst
  8845                           
  8846                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8847  00078C  0E12               	movlw	low STR_27
  8848  00078E  0100               	movlb	0	; () banked
  8849  000790  6F8E               	movwf	printf@f& (0+255),b
  8850  000792  0EFE               	movlw	high STR_27
  8851  000794  0100               	movlb	0	; () banked
  8852  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8853  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8854  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8855  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8856  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8857  0007A8  ECC1  F00B         	call	_printf	;wreg free
  8858                           
  8859                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8860  0007AC  0E00               	movlw	0
  8861  0007AE  0100               	movlb	0	; () banked
  8862  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8863  0007B2                     l9260:
  8864                           
  8865                           ; BSR set to: 0
  8866  0007B2  0E63               	movlw	99
  8867  0007B4  0100               	movlb	0	; () banked
  8868  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8869  0007B8  D001               	goto	l9264
  8870  0007BA  D00C               	goto	l9268
  8871  0007BC                     l9264:
  8872                           
  8873                           ; BSR set to: 0
  8874  0007BC  0E68               	movlw	104
  8875  0007BE  0100               	movlb	0	; () banked
  8876  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8877  0007C2  0EE4               	movlw	228
  8878  0007C4                     u10037:
  8879  0007C4  2EE8               	decfsz	wreg,f,c
  8880  0007C6  D7FE               	bra	u10037
  8881  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8882  0007CA  D7FC               	bra	u10037
  8883  0007CC  F000               	nop	
  8884  0007CE  0100               	movlb	0	; () banked
  8885  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8886  0007D2  D7EF               	goto	l9260
  8887  0007D4                     l9268:
  8888                           
  8889                           ; BSR set to: 0
  8890  0007D4  0100               	movlb	0	; () banked
  8891  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8892  0007D8  0100               	movlb	0	; () banked
  8893  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8894  0007DC  B4D8               	btfsc	status,2,c
  8895  0007DE  0012               	return	
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8899                           
  8900                           ; BSR set to: 0
  8901                           
  8902                           ; BSR set to: 0
  8903  0007E0  0E00               	movlw	0
  8904  0007E2  0100               	movlb	0	; () banked
  8905  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8906  0007E6                     l9274:
  8907                           
  8908                           ; BSR set to: 0
  8909  0007E6  0E63               	movlw	99
  8910  0007E8  0100               	movlb	0	; () banked
  8911  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8912  0007EC  D001               	goto	l9278
  8913  0007EE  D00C               	goto	l9282
  8914  0007F0                     l9278:
  8915                           
  8916                           ; BSR set to: 0
  8917  0007F0  0E68               	movlw	104
  8918  0007F2  0100               	movlb	0	; () banked
  8919  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8920  0007F6  0EE4               	movlw	228
  8921  0007F8                     u10047:
  8922  0007F8  2EE8               	decfsz	wreg,f,c
  8923  0007FA  D7FE               	bra	u10047
  8924  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8925  0007FE  D7FC               	bra	u10047
  8926  000800  F000               	nop	
  8927  000802  0100               	movlb	0	; () banked
  8928  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8929  000806  D7EF               	goto	l9274
  8930  000808                     l9282:
  8931                           
  8932                           ; BSR set to: 0
  8933  000808  0100               	movlb	0	; () banked
  8934  00080A  51F8               	movf	_logstate& (0+255),w,b
  8935  00080C  0100               	movlb	0	; () banked
  8936  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8937  000810  B4D8               	btfsc	status,2,c
  8938  000812  0012               	return	
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8942                           
  8943                           ; BSR set to: 0
  8944                           
  8945                           ; BSR set to: 0
  8946  000814  0E01               	movlw	1
  8947  000816  ECDF  F02B         	call	_lcdInst
  8948  00081A  0E68               	movlw	104
  8949  00081C  0100               	movlb	0	; () banked
  8950  00081E  6FC4               	movwf	??_UI& (0+255),b
  8951  000820  0EE4               	movlw	228
  8952  000822                     u10057:
  8953  000822  2EE8               	decfsz	wreg,f,c
  8954  000824  D7FE               	bra	u10057
  8955  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8956  000828  D7FC               	bra	u10057
  8957  00082A  F000               	nop	
  8958                           
  8959                           ;UI.c: 203: lcdInst(0b10000000);;
  8960  00082C  0E80               	movlw	128
  8961  00082E  ECDF  F02B         	call	_lcdInst
  8962                           
  8963                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8964  000832  0E68               	movlw	low STR_28
  8965  000834  0100               	movlb	0	; () banked
  8966  000836  6F8E               	movwf	printf@f& (0+255),b
  8967  000838  0EFD               	movlw	high STR_28
  8968  00083A  0100               	movlb	0	; () banked
  8969  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8970  00083E  ECC1  F00B         	call	_printf	;wreg free
  8971                           
  8972                           ;UI.c: 205: lcdInst(0b11000000);;
  8973  000842  0EC0               	movlw	192
  8974  000844  ECDF  F02B         	call	_lcdInst
  8975                           
  8976                           ;UI.c: 206: printf("%d", log_count_total);
  8977  000848  0E20               	movlw	low (STR_27+14)
  8978  00084A  0100               	movlb	0	; () banked
  8979  00084C  6F8E               	movwf	printf@f& (0+255),b
  8980  00084E  0EFE               	movlw	high (STR_27+14)
  8981  000850  0100               	movlb	0	; () banked
  8982  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8983  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8984  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8985  00085C  ECC1  F00B         	call	_printf	;wreg free
  8986                           
  8987                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8988  000860  0E00               	movlw	0
  8989  000862  0100               	movlb	0	; () banked
  8990  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8991  000866                     l9300:
  8992                           
  8993                           ; BSR set to: 0
  8994  000866  0E63               	movlw	99
  8995  000868  0100               	movlb	0	; () banked
  8996  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8997  00086C  D001               	goto	l9304
  8998  00086E  D00C               	goto	l9308
  8999  000870                     l9304:
  9000                           
  9001                           ; BSR set to: 0
  9002  000870  0E68               	movlw	104
  9003  000872  0100               	movlb	0	; () banked
  9004  000874  6FC4               	movwf	??_UI& (0+255),b
  9005  000876  0EE4               	movlw	228
  9006  000878                     u10067:
  9007  000878  2EE8               	decfsz	wreg,f,c
  9008  00087A  D7FE               	bra	u10067
  9009  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  9010  00087E  D7FC               	bra	u10067
  9011  000880  F000               	nop	
  9012  000882  0100               	movlb	0	; () banked
  9013  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  9014  000886  D7EF               	goto	l9300
  9015  000888                     l9308:
  9016                           
  9017                           ; BSR set to: 0
  9018  000888  0100               	movlb	0	; () banked
  9019  00088A  51F8               	movf	_logstate& (0+255),w,b
  9020  00088C  0100               	movlb	0	; () banked
  9021  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9022  000890  B4D8               	btfsc	status,2,c
  9023  000892  0012               	return	
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9027                           
  9028                           ; BSR set to: 0
  9029                           
  9030                           ; BSR set to: 0
  9031  000894  0E00               	movlw	0
  9032  000896  0100               	movlb	0	; () banked
  9033  000898  6FD5               	movwf	UI@i_448& (0+255),b
  9034  00089A                     l9314:
  9035                           
  9036                           ; BSR set to: 0
  9037  00089A  0E63               	movlw	99
  9038  00089C  0100               	movlb	0	; () banked
  9039  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  9040  0008A0  D001               	goto	l9318
  9041  0008A2  D00C               	goto	l9322
  9042  0008A4                     l9318:
  9043                           
  9044                           ; BSR set to: 0
  9045  0008A4  0E68               	movlw	104
  9046  0008A6  0100               	movlb	0	; () banked
  9047  0008A8  6FC4               	movwf	??_UI& (0+255),b
  9048  0008AA  0EE4               	movlw	228
  9049  0008AC                     u10077:
  9050  0008AC  2EE8               	decfsz	wreg,f,c
  9051  0008AE  D7FE               	bra	u10077
  9052  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  9053  0008B2  D7FC               	bra	u10077
  9054  0008B4  F000               	nop	
  9055  0008B6  0100               	movlb	0	; () banked
  9056  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  9057  0008BA  D7EF               	goto	l9314
  9058  0008BC                     l9322:
  9059                           
  9060                           ; BSR set to: 0
  9061  0008BC  0100               	movlb	0	; () banked
  9062  0008BE  51F8               	movf	_logstate& (0+255),w,b
  9063  0008C0  0100               	movlb	0	; () banked
  9064  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9065  0008C4  B4D8               	btfsc	status,2,c
  9066  0008C6  0012               	return	
  9067  0008C8                     l9326:
  9068  0008C8  0100               	movlb	0	; () banked
  9069  0008CA  51F8               	movf	_logstate& (0+255),w,b
  9070  0008CC  0100               	movlb	0	; () banked
  9071  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9072  0008D0  B4D8               	btfsc	status,2,c
  9073  0008D2  0012               	return	
  9074  0008D4  D44C               	goto	l9022
  9075  0008D6                     __end_of_UI:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon2	equ	0xFF1
  9085                           intcon3	equ	0xFF0
  9086                           postinc0	equ	0xFEE
  9087                           wreg	equ	0xFE8
  9088                           postdec1	equ	0xFE5
  9089                           fsr1l	equ	0xFE1
  9090                           indf2	equ	0xFDF
  9091                           postinc2	equ	0xFDE
  9092                           postdec2	equ	0xFDD
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _printRTC *****************
  9098 ;; Defined at:
  9099 ;;		line 63 in file "RTC.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;		None
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  i               2   66[BANK0 ] int 
  9104 ;;  INT_time       14   46[BANK0 ] int [7]
  9105 ;;  month           4   62[BANK0 ] unsigned char [4]
  9106 ;;  RTC_month       2   60[BANK0 ] int 
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;Total ram usage:       25 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:   10
  9123 ;; This function calls:
  9124 ;;		_getRTC
  9125 ;;		_lcdInst
  9126 ;;		_printf
  9127 ;;		_strcpy
  9128 ;; This function is called by:
  9129 ;;		_UI
  9130 ;;		_change_state_to_menu_start
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text23
  9135  0029B2                     __ptext23:
  9136                           	opt stack 0
  9137  0029B2                     _printRTC:
  9138                           	opt stack 18
  9139                           
  9140                           ;RTC.c: 64: getRTC();
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;incstack = 0
  9144  0029B2  ECC8  F024         	call	_getRTC	;wreg free
  9145                           
  9146                           ;RTC.c: 65: char month[] = "MMM";
  9147  0029B6  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9148  0029BA  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9149  0029BE  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9150  0029C2  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9151                           
  9152                           ;RTC.c: 66: int INT_time[7];
  9153                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9154  0029C6  0E00               	movlw	0
  9155  0029C8  0100               	movlb	0	; () banked
  9156  0029CA  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9157  0029CC  0E00               	movlw	0
  9158  0029CE  6FC2               	movwf	printRTC@i& (0+255),b
  9159                           
  9160                           ; BSR set to: 0
  9161  0029D0  0100               	movlb	0	; () banked
  9162  0029D2  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9163  0029D4  D008               	goto	l6946
  9164  0029D6  0100               	movlb	0	; () banked
  9165  0029D8  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9166  0029DA  E146               	bnz	l620
  9167  0029DC  0E07               	movlw	7
  9168  0029DE  0100               	movlb	0	; () banked
  9169  0029E0  5DC2               	subwf	printRTC@i& (0+255),w,b
  9170  0029E2  B0D8               	btfsc	status,0,c
  9171  0029E4  D041               	goto	l620
  9172  0029E6                     l6946:
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9176  0029E6  0E1C               	movlw	low _time
  9177  0029E8  0100               	movlb	0	; () banked
  9178  0029EA  25C2               	addwf	printRTC@i& (0+255),w,b
  9179  0029EC  6ED9               	movwf	fsr2l,c
  9180  0029EE  0E01               	movlw	high _time
  9181  0029F0  0100               	movlb	0	; () banked
  9182  0029F2  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9183  0029F4  6EDA               	movwf	fsr2h,c
  9184  0029F6  50DF               	movf	indf2,w,c
  9185  0029F8  0100               	movlb	0	; () banked
  9186  0029FA  6FAB               	movwf	??_printRTC& (0+255),b
  9187  0029FC  0100               	movlb	0	; () banked
  9188  0029FE  3BAB               	swapf	??_printRTC& (0+255),f,b
  9189  002A00  0E0F               	movlw	15
  9190  002A02  17AB               	andwf	??_printRTC& (0+255),f,b
  9191  002A04  0E0F               	movlw	15
  9192  002A06  0100               	movlb	0	; () banked
  9193  002A08  17AB               	andwf	??_printRTC& (0+255),f,b
  9194  002A0A  0100               	movlb	0	; () banked
  9195  002A0C  51AB               	movf	??_printRTC& (0+255),w,b
  9196  002A0E  0D0A               	mullw	10
  9197  002A10  0E1C               	movlw	low _time
  9198  002A12  0100               	movlb	0	; () banked
  9199  002A14  25C2               	addwf	printRTC@i& (0+255),w,b
  9200  002A16  6ED9               	movwf	fsr2l,c
  9201  002A18  0E01               	movlw	high _time
  9202  002A1A  0100               	movlb	0	; () banked
  9203  002A1C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9204  002A1E  6EDA               	movwf	fsr2h,c
  9205  002A20  50DF               	movf	indf2,w,c
  9206  002A22  0B0F               	andlw	15
  9207  002A24  0100               	movlb	0	; () banked
  9208  002A26  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9209  002A28  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9210  002A2A  50F3               	movf	prodl,w,c
  9211  002A2C  0100               	movlb	0	; () banked
  9212  002A2E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9213  002A30  50F4               	movf	prodh,w,c
  9214  002A32  0100               	movlb	0	; () banked
  9215  002A34  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9216  002A36  90D8               	bcf	status,0,c
  9217  002A38  0100               	movlb	0	; () banked
  9218  002A3A  35C2               	rlcf	printRTC@i& (0+255),w,b
  9219  002A3C  6ED9               	movwf	fsr2l,c
  9220  002A3E  0100               	movlb	0	; () banked
  9221  002A40  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9222  002A42  6EDA               	movwf	fsr2h,c
  9223  002A44  0EAE               	movlw	low printRTC@INT_time
  9224  002A46  26D9               	addwf	fsr2l,f,c
  9225  002A48  0E00               	movlw	high printRTC@INT_time
  9226  002A4A  22DA               	addwfc	fsr2h,f,c
  9227  002A4C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9228  002A50  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9229                           
  9230                           ; BSR set to: 0
  9231  002A54  0100               	movlb	0	; () banked
  9232  002A56  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9233  002A58  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  002A5A  0100               	movlb	0	; () banked
  9237  002A5C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9238  002A5E  D7C3               	goto	l6946
  9239  002A60  0100               	movlb	0	; () banked
  9240  002A62  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9241  002A64  E101               	bnz	u5670
  9242  002A66  D7BA               	goto	L12
  9243  002A68                     u5670:
  9244  002A68                     l620:
  9245                           
  9246                           ; BSR set to: 0
  9247                           ;RTC.c: 69: }
  9248                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9249  002A68  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9250  002A6C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9251                           
  9252                           ;RTC.c: 72: switch(RTC_month){
  9253  002A70  D0B4               	goto	l6978
  9254  002A72                     l6952:
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;RTC.c: 74: strcpy(month, "JAN");
  9258  002A72  0EBE               	movlw	low printRTC@month
  9259  002A74  0100               	movlb	0	; () banked
  9260  002A76  6F80               	movwf	strcpy@to& (0+255),b
  9261  002A78  0E00               	movlw	high printRTC@month
  9262  002A7A  0100               	movlb	0	; () banked
  9263  002A7C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9264  002A7E  0EDA               	movlw	low STR_8
  9265  002A80  0100               	movlb	0	; () banked
  9266  002A82  6F82               	movwf	strcpy@from& (0+255),b
  9267  002A84  0EFF               	movlw	high STR_8
  9268  002A86  0100               	movlb	0	; () banked
  9269  002A88  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9270  002A8A  EC39  F029         	call	_strcpy	;wreg free
  9271                           
  9272                           ;RTC.c: 75: break;
  9273  002A8E  D0D4               	goto	l6980
  9274  002A90                     l6954:
  9275                           
  9276                           ;RTC.c: 77: strcpy(month, "FEB");
  9277  002A90  0EBE               	movlw	low printRTC@month
  9278  002A92  0100               	movlb	0	; () banked
  9279  002A94  6F80               	movwf	strcpy@to& (0+255),b
  9280  002A96  0E00               	movlw	high printRTC@month
  9281  002A98  0100               	movlb	0	; () banked
  9282  002A9A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9283  002A9C  0ECA               	movlw	low STR_9
  9284  002A9E  0100               	movlb	0	; () banked
  9285  002AA0  6F82               	movwf	strcpy@from& (0+255),b
  9286  002AA2  0EFF               	movlw	high STR_9
  9287  002AA4  0100               	movlb	0	; () banked
  9288  002AA6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9289  002AA8  EC39  F029         	call	_strcpy	;wreg free
  9290                           
  9291                           ;RTC.c: 78: break;
  9292  002AAC  D0C5               	goto	l6980
  9293  002AAE                     l6956:
  9294                           
  9295                           ;RTC.c: 80: strcpy(month, "MAR");
  9296  002AAE  0EBE               	movlw	low printRTC@month
  9297  002AB0  0100               	movlb	0	; () banked
  9298  002AB2  6F80               	movwf	strcpy@to& (0+255),b
  9299  002AB4  0E00               	movlw	high printRTC@month
  9300  002AB6  0100               	movlb	0	; () banked
  9301  002AB8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9302  002ABA  0EE6               	movlw	low STR_10
  9303  002ABC  0100               	movlb	0	; () banked
  9304  002ABE  6F82               	movwf	strcpy@from& (0+255),b
  9305  002AC0  0EFF               	movlw	high STR_10
  9306  002AC2  0100               	movlb	0	; () banked
  9307  002AC4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9308  002AC6  EC39  F029         	call	_strcpy	;wreg free
  9309                           
  9310                           ;RTC.c: 81: break;
  9311  002ACA  D0B6               	goto	l6980
  9312  002ACC                     l6958:
  9313                           
  9314                           ;RTC.c: 83: strcpy(month, "APR");
  9315  002ACC  0EBE               	movlw	low printRTC@month
  9316  002ACE  0100               	movlb	0	; () banked
  9317  002AD0  6F80               	movwf	strcpy@to& (0+255),b
  9318  002AD2  0E00               	movlw	high printRTC@month
  9319  002AD4  0100               	movlb	0	; () banked
  9320  002AD6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9321  002AD8  0EEA               	movlw	low STR_11
  9322  002ADA  0100               	movlb	0	; () banked
  9323  002ADC  6F82               	movwf	strcpy@from& (0+255),b
  9324  002ADE  0EFF               	movlw	high STR_11
  9325  002AE0  0100               	movlb	0	; () banked
  9326  002AE2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9327  002AE4  EC39  F029         	call	_strcpy	;wreg free
  9328                           
  9329                           ;RTC.c: 84: break;
  9330  002AE8  D0A7               	goto	l6980
  9331  002AEA                     l6960:
  9332                           
  9333                           ;RTC.c: 86: strcpy(month, "MAY");
  9334  002AEA  0EBE               	movlw	low printRTC@month
  9335  002AEC  0100               	movlb	0	; () banked
  9336  002AEE  6F80               	movwf	strcpy@to& (0+255),b
  9337  002AF0  0E00               	movlw	high printRTC@month
  9338  002AF2  0100               	movlb	0	; () banked
  9339  002AF4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9340  002AF6  0EFA               	movlw	low STR_12
  9341  002AF8  0100               	movlb	0	; () banked
  9342  002AFA  6F82               	movwf	strcpy@from& (0+255),b
  9343  002AFC  0EFF               	movlw	high STR_12
  9344  002AFE  0100               	movlb	0	; () banked
  9345  002B00  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9346  002B02  EC39  F029         	call	_strcpy	;wreg free
  9347                           
  9348                           ;RTC.c: 87: break;
  9349  002B06  D098               	goto	l6980
  9350  002B08                     l6962:
  9351                           
  9352                           ;RTC.c: 89: strcpy(month, "JUN");
  9353  002B08  0EBE               	movlw	low printRTC@month
  9354  002B0A  0100               	movlb	0	; () banked
  9355  002B0C  6F80               	movwf	strcpy@to& (0+255),b
  9356  002B0E  0E00               	movlw	high printRTC@month
  9357  002B10  0100               	movlb	0	; () banked
  9358  002B12  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9359  002B14  0EDE               	movlw	low STR_13
  9360  002B16  0100               	movlb	0	; () banked
  9361  002B18  6F82               	movwf	strcpy@from& (0+255),b
  9362  002B1A  0EFF               	movlw	high STR_13
  9363  002B1C  0100               	movlb	0	; () banked
  9364  002B1E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9365  002B20  EC39  F029         	call	_strcpy	;wreg free
  9366                           
  9367                           ;RTC.c: 90: break;
  9368  002B24  D089               	goto	l6980
  9369  002B26                     l6964:
  9370                           
  9371                           ;RTC.c: 92: strcpy(month, "JUL");
  9372  002B26  0EBE               	movlw	low printRTC@month
  9373  002B28  0100               	movlb	0	; () banked
  9374  002B2A  6F80               	movwf	strcpy@to& (0+255),b
  9375  002B2C  0E00               	movlw	high printRTC@month
  9376  002B2E  0100               	movlb	0	; () banked
  9377  002B30  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9378  002B32  0ED6               	movlw	low STR_14
  9379  002B34  0100               	movlb	0	; () banked
  9380  002B36  6F82               	movwf	strcpy@from& (0+255),b
  9381  002B38  0EFF               	movlw	high STR_14
  9382  002B3A  0100               	movlb	0	; () banked
  9383  002B3C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9384  002B3E  EC39  F029         	call	_strcpy	;wreg free
  9385                           
  9386                           ;RTC.c: 93: break;
  9387  002B42  D07A               	goto	l6980
  9388  002B44                     l6966:
  9389                           
  9390                           ;RTC.c: 95: strcpy(month, "AUG");
  9391  002B44  0EBE               	movlw	low printRTC@month
  9392  002B46  0100               	movlb	0	; () banked
  9393  002B48  6F80               	movwf	strcpy@to& (0+255),b
  9394  002B4A  0E00               	movlw	high printRTC@month
  9395  002B4C  0100               	movlb	0	; () banked
  9396  002B4E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9397  002B50  0ED2               	movlw	low STR_15
  9398  002B52  0100               	movlb	0	; () banked
  9399  002B54  6F82               	movwf	strcpy@from& (0+255),b
  9400  002B56  0EFF               	movlw	high STR_15
  9401  002B58  0100               	movlb	0	; () banked
  9402  002B5A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9403  002B5C  EC39  F029         	call	_strcpy	;wreg free
  9404                           
  9405                           ;RTC.c: 96: break;
  9406  002B60  D06B               	goto	l6980
  9407  002B62                     l6968:
  9408                           
  9409                           ;RTC.c: 98: strcpy(month, "SEP");
  9410  002B62  0EBE               	movlw	low printRTC@month
  9411  002B64  0100               	movlb	0	; () banked
  9412  002B66  6F80               	movwf	strcpy@to& (0+255),b
  9413  002B68  0E00               	movlw	high printRTC@month
  9414  002B6A  0100               	movlb	0	; () banked
  9415  002B6C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9416  002B6E  0EE2               	movlw	low STR_16
  9417  002B70  0100               	movlb	0	; () banked
  9418  002B72  6F82               	movwf	strcpy@from& (0+255),b
  9419  002B74  0EFF               	movlw	high STR_16
  9420  002B76  0100               	movlb	0	; () banked
  9421  002B78  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9422  002B7A  EC39  F029         	call	_strcpy	;wreg free
  9423                           
  9424                           ;RTC.c: 99: break;
  9425  002B7E  D05C               	goto	l6980
  9426  002B80                     l6970:
  9427                           
  9428                           ;RTC.c: 101: strcpy(month, "OCT");
  9429  002B80  0EBE               	movlw	low printRTC@month
  9430  002B82  0100               	movlb	0	; () banked
  9431  002B84  6F80               	movwf	strcpy@to& (0+255),b
  9432  002B86  0E00               	movlw	high printRTC@month
  9433  002B88  0100               	movlb	0	; () banked
  9434  002B8A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9435  002B8C  0EF2               	movlw	low STR_17
  9436  002B8E  0100               	movlb	0	; () banked
  9437  002B90  6F82               	movwf	strcpy@from& (0+255),b
  9438  002B92  0EFF               	movlw	high STR_17
  9439  002B94  0100               	movlb	0	; () banked
  9440  002B96  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9441  002B98  EC39  F029         	call	_strcpy	;wreg free
  9442                           
  9443                           ;RTC.c: 102: break;
  9444  002B9C  D04D               	goto	l6980
  9445  002B9E                     l6972:
  9446                           
  9447                           ;RTC.c: 104: strcpy(month, "NOV");
  9448  002B9E  0EBE               	movlw	low printRTC@month
  9449  002BA0  0100               	movlb	0	; () banked
  9450  002BA2  6F80               	movwf	strcpy@to& (0+255),b
  9451  002BA4  0E00               	movlw	high printRTC@month
  9452  002BA6  0100               	movlb	0	; () banked
  9453  002BA8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9454  002BAA  0EF6               	movlw	low STR_18
  9455  002BAC  0100               	movlb	0	; () banked
  9456  002BAE  6F82               	movwf	strcpy@from& (0+255),b
  9457  002BB0  0EFF               	movlw	high STR_18
  9458  002BB2  0100               	movlb	0	; () banked
  9459  002BB4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9460  002BB6  EC39  F029         	call	_strcpy	;wreg free
  9461                           
  9462                           ;RTC.c: 105: break;
  9463  002BBA  D03E               	goto	l6980
  9464  002BBC                     l6974:
  9465                           
  9466                           ;RTC.c: 107: strcpy(month, "DEC");
  9467  002BBC  0EBE               	movlw	low printRTC@month
  9468  002BBE  0100               	movlb	0	; () banked
  9469  002BC0  6F80               	movwf	strcpy@to& (0+255),b
  9470  002BC2  0E00               	movlw	high printRTC@month
  9471  002BC4  0100               	movlb	0	; () banked
  9472  002BC6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9473  002BC8  0ECE               	movlw	low STR_19
  9474  002BCA  0100               	movlb	0	; () banked
  9475  002BCC  6F82               	movwf	strcpy@from& (0+255),b
  9476  002BCE  0EFF               	movlw	high STR_19
  9477  002BD0  0100               	movlb	0	; () banked
  9478  002BD2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9479  002BD4  EC39  F029         	call	_strcpy	;wreg free
  9480                           
  9481                           ;RTC.c: 109: }
  9482                           
  9483                           ;RTC.c: 108: break;
  9484  002BD8  D02F               	goto	l6980
  9485  002BDA                     l6978:
  9486  002BDA  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9487  002BDE  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9488                           
  9489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9490                           ; Switch size 1, requested type "space"
  9491                           ; Number of cases is 1, Range of values is 0 to 0
  9492                           ; switch strategies available:
  9493                           ; Name         Instructions Cycles
  9494                           ; simple_byte            4     3 (average)
  9495                           ;	Chosen strategy is simple_byte
  9496  002BE2  0100               	movlb	0	; () banked
  9497  002BE4  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9498  002BE6  0A00               	xorlw	0	; case 0
  9499  002BE8  A4D8               	btfss	status,2,c
  9500  002BEA  D026               	goto	l6980
  9501                           
  9502                           ; BSR set to: 0
  9503                           ; Switch size 1, requested type "space"
  9504                           ; Number of cases is 12, Range of values is 1 to 12
  9505                           ; switch strategies available:
  9506                           ; Name         Instructions Cycles
  9507                           ; simple_byte           37    19 (average)
  9508                           ;	Chosen strategy is simple_byte
  9509  002BEC  0100               	movlb	0	; () banked
  9510  002BEE  51AB               	movf	??_printRTC& (0+255),w,b
  9511  002BF0  0A01               	xorlw	1	; case 1
  9512  002BF2  B4D8               	btfsc	status,2,c
  9513  002BF4  D73E               	goto	l6952
  9514  002BF6  0A03               	xorlw	3	; case 2
  9515  002BF8  B4D8               	btfsc	status,2,c
  9516  002BFA  D74A               	goto	l6954
  9517  002BFC  0A01               	xorlw	1	; case 3
  9518  002BFE  B4D8               	btfsc	status,2,c
  9519  002C00  D756               	goto	l6956
  9520  002C02  0A07               	xorlw	7	; case 4
  9521  002C04  B4D8               	btfsc	status,2,c
  9522  002C06  D762               	goto	l6958
  9523  002C08  0A01               	xorlw	1	; case 5
  9524  002C0A  B4D8               	btfsc	status,2,c
  9525  002C0C  D76E               	goto	l6960
  9526  002C0E  0A03               	xorlw	3	; case 6
  9527  002C10  B4D8               	btfsc	status,2,c
  9528  002C12  D77A               	goto	l6962
  9529  002C14  0A01               	xorlw	1	; case 7
  9530  002C16  B4D8               	btfsc	status,2,c
  9531  002C18  D786               	goto	l6964
  9532  002C1A  0A0F               	xorlw	15	; case 8
  9533  002C1C  B4D8               	btfsc	status,2,c
  9534  002C1E  D792               	goto	l6966
  9535  002C20  0A01               	xorlw	1	; case 9
  9536  002C22  B4D8               	btfsc	status,2,c
  9537  002C24  D79E               	goto	l6968
  9538  002C26  0A03               	xorlw	3	; case 10
  9539  002C28  B4D8               	btfsc	status,2,c
  9540  002C2A  D7AA               	goto	l6970
  9541  002C2C  0A01               	xorlw	1	; case 11
  9542  002C2E  B4D8               	btfsc	status,2,c
  9543  002C30  D7B6               	goto	l6972
  9544  002C32  0A07               	xorlw	7	; case 12
  9545  002C34  B4D8               	btfsc	status,2,c
  9546  002C36  D7C2               	goto	l6974
  9547  002C38                     l6980:
  9548                           
  9549                           ;RTC.c: 110: lcdInst(0b10000000);;
  9550  002C38  0E80               	movlw	128
  9551  002C3A  ECDF  F02B         	call	_lcdInst
  9552                           
  9553                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9554  002C3E  0EBE               	movlw	low STR_21
  9555  002C40  0100               	movlb	0	; () banked
  9556  002C42  6F8E               	movwf	printf@f& (0+255),b
  9557  002C44  0EFA               	movlw	high STR_21
  9558  002C46  0100               	movlb	0	; () banked
  9559  002C48  6F8F               	movwf	(printf@f+1)& (0+255),b
  9560  002C4A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9561  002C4E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9562  002C52  0EBE               	movlw	low printRTC@month
  9563  002C54  0100               	movlb	0	; () banked
  9564  002C56  6F92               	movwf	(?_printf+4)& (0+255),b
  9565  002C58  0E00               	movlw	high printRTC@month
  9566  002C5A  0100               	movlb	0	; () banked
  9567  002C5C  6F93               	movwf	(?_printf+5)& (0+255),b
  9568  002C5E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9569  002C62  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9570  002C66  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9571  002C6A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9572  002C6E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9573  002C72  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9574  002C76  ECC1  F00B         	call	_printf	;wreg free
  9575  002C7A  0012               	return		;funcret
  9576  002C7C                     __end_of_printRTC:
  9577                           	opt stack 0
  9578                           tblptru	equ	0xFF8
  9579                           tblptrh	equ	0xFF7
  9580                           tblptrl	equ	0xFF6
  9581                           tablat	equ	0xFF5
  9582                           prodh	equ	0xFF4
  9583                           prodl	equ	0xFF3
  9584                           intcon	equ	0xFF2
  9585                           intcon2	equ	0xFF1
  9586                           intcon3	equ	0xFF0
  9587                           postinc0	equ	0xFEE
  9588                           wreg	equ	0xFE8
  9589                           postdec1	equ	0xFE5
  9590                           fsr1l	equ	0xFE1
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           postdec2	equ	0xFDD
  9594                           fsr2h	equ	0xFDA
  9595                           fsr2l	equ	0xFD9
  9596                           status	equ	0xFD8
  9597                           
  9598 ;; *************** function _strcpy *****************
  9599 ;; Defined at:
  9600 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9603 ;;		 -> printRTC@month(4), UI@month(4), 
  9604 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9605 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9606 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9607 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9608 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9609 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9610 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9611 ;;		 -> STR_8(4), 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9614 ;;		 -> printRTC@month(4), UI@month(4), 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  2    0[BANK0 ] PTR unsigned char 
  9617 ;; Registers used:
  9618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        6 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    7
  9631 ;; This function calls:
  9632 ;;		Nothing
  9633 ;; This function is called by:
  9634 ;;		_UI
  9635 ;;		_printRTC
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text24
  9640  005272                     __ptext24:
  9641                           	opt stack 0
  9642  005272                     _strcpy:
  9643                           	opt stack 20
  9644                           
  9645                           ;incstack = 0
  9646  005272  C080  F084         	movff	strcpy@to,strcpy@cp
  9647  005276  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9648  00527A  D006               	goto	l6686
  9649  00527C                     l6684:
  9650  00527C  0100               	movlb	0	; () banked
  9651  00527E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9652  005280  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9653  005282  0100               	movlb	0	; () banked
  9654  005284  4B82               	infsnz	strcpy@from& (0+255),f,b
  9655  005286  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9656  005288                     l6686:
  9657  005288  C082  FFF6         	movff	strcpy@from,tblptrl
  9658  00528C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9659  005290                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9660  005290  6AF8               	clrf	tblptru,c
  9661  005292                     	endif
  9662  005292                     	if	0	;tblptru may be non-zero
  9663  005292                     	endif
  9664  005292  C084  FFD9         	movff	strcpy@cp,fsr2l
  9665  005296  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9666  00529A  0008               	tblrd		*
  9667  00529C  CFF5 FFDF          	movff	tablat,indf2
  9668  0052A0  50DF               	movf	indf2,w,c
  9669  0052A2  B4D8               	btfsc	status,2,c
  9670  0052A4  0012               	return	
  9671  0052A6  D7EA               	goto	l6684
  9672  0052A8                     __end_of_strcpy:
  9673                           	opt stack 0
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           intcon	equ	0xFF2
  9681                           intcon2	equ	0xFF1
  9682                           intcon3	equ	0xFF0
  9683                           postinc0	equ	0xFEE
  9684                           wreg	equ	0xFE8
  9685                           postdec1	equ	0xFE5
  9686                           fsr1l	equ	0xFE1
  9687                           indf2	equ	0xFDF
  9688                           postinc2	equ	0xFDE
  9689                           postdec2	equ	0xFDD
  9690                           fsr2h	equ	0xFDA
  9691                           fsr2l	equ	0xFD9
  9692                           status	equ	0xFD8
  9693                           
  9694 ;; *************** function _getRTC *****************
  9695 ;; Defined at:
  9696 ;;		line 44 in file "RTC.c"
  9697 ;; Parameters:    Size  Location     Type
  9698 ;;		None
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;  i               2    3[BANK0 ] int 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9713 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;Total ram usage:        2 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    9
  9717 ;; This function calls:
  9718 ;;		_I2C_Master_Read
  9719 ;;		_I2C_Master_Start
  9720 ;;		_I2C_Master_Stop
  9721 ;;		_I2C_Master_Write
  9722 ;; This function is called by:
  9723 ;;		_printRTC
  9724 ;;		_initSortTimer
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           	psect	text25
  9729  004990                     __ptext25:
  9730                           	opt stack 0
  9731  004990                     _getRTC:
  9732                           	opt stack 18
  9733                           
  9734                           ;RTC.c: 48: I2C_Master_Start();
  9735                           
  9736                           ;incstack = 0
  9737  004990  EC05  F02C         	call	_I2C_Master_Start	;wreg free
  9738                           
  9739                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9740  004994  0E00               	movlw	0
  9741  004996  0100               	movlb	0	; () banked
  9742  004998  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9743  00499A  0ED0               	movlw	208
  9744  00499C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9745  00499E  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  9746                           
  9747                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9748  0049A2  0E00               	movlw	0
  9749  0049A4  0100               	movlb	0	; () banked
  9750  0049A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9751  0049A8  0E00               	movlw	0
  9752  0049AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9753  0049AC  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  9754                           
  9755                           ;RTC.c: 51: I2C_Master_Stop();
  9756  0049B0  EC01  F02C         	call	_I2C_Master_Stop	;wreg free
  9757                           
  9758                           ;RTC.c: 54: I2C_Master_Start();
  9759  0049B4  EC05  F02C         	call	_I2C_Master_Start	;wreg free
  9760                           
  9761                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9762  0049B8  0E00               	movlw	0
  9763  0049BA  0100               	movlb	0	; () banked
  9764  0049BC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9765  0049BE  0ED1               	movlw	209
  9766  0049C0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9767  0049C2  ECF3  F02B         	call	_I2C_Master_Write	;wreg free
  9768                           
  9769                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9770  0049C6  0E00               	movlw	0
  9771  0049C8  0100               	movlb	0	; () banked
  9772  0049CA  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9773  0049CC  0E00               	movlw	0
  9774  0049CE  6F83               	movwf	getRTC@i& (0+255),b
  9775  0049D0                     l6692:
  9776                           
  9777                           ; BSR set to: 0
  9778  0049D0  0100               	movlb	0	; () banked
  9779  0049D2  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9780  0049D4  D008               	goto	l6696
  9781  0049D6  0100               	movlb	0	; () banked
  9782  0049D8  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9783  0049DA  E115               	bnz	l6702
  9784  0049DC  0E06               	movlw	6
  9785  0049DE  0100               	movlb	0	; () banked
  9786  0049E0  5D83               	subwf	getRTC@i& (0+255),w,b
  9787  0049E2  B0D8               	btfsc	status,0,c
  9788  0049E4  D010               	goto	l6702
  9789  0049E6                     l6696:
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9793  0049E6  0E1C               	movlw	low _time
  9794  0049E8  0100               	movlb	0	; () banked
  9795  0049EA  2583               	addwf	getRTC@i& (0+255),w,b
  9796  0049EC  6ED9               	movwf	fsr2l,c
  9797  0049EE  0E01               	movlw	high _time
  9798  0049F0  0100               	movlb	0	; () banked
  9799  0049F2  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9800  0049F4  6EDA               	movwf	fsr2h,c
  9801  0049F6  0E01               	movlw	1
  9802  0049F8  EC91  F02A         	call	_I2C_Master_Read
  9803  0049FC  6EDF               	movwf	indf2,c
  9804  0049FE  0100               	movlb	0	; () banked
  9805  004A00  4B83               	infsnz	getRTC@i& (0+255),f,b
  9806  004A02  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9807  004A04  D7E5               	goto	l6692
  9808  004A06                     l6702:
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;RTC.c: 58: }
  9812                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9813  004A06  0E00               	movlw	0
  9814  004A08  EC91  F02A         	call	_I2C_Master_Read
  9815  004A0C  0101               	movlb	1	; () banked
  9816  004A0E  6F22               	movwf	(_time+6)& (0+255),b
  9817                           
  9818                           ;RTC.c: 60: I2C_Master_Stop();
  9819  004A10  EC01  F02C         	call	_I2C_Master_Stop	;wreg free
  9820  004A14  0012               	return		;funcret
  9821  004A16                     __end_of_getRTC:
  9822                           	opt stack 0
  9823                           tblptru	equ	0xFF8
  9824                           tblptrh	equ	0xFF7
  9825                           tblptrl	equ	0xFF6
  9826                           tablat	equ	0xFF5
  9827                           prodh	equ	0xFF4
  9828                           prodl	equ	0xFF3
  9829                           intcon	equ	0xFF2
  9830                           intcon2	equ	0xFF1
  9831                           intcon3	equ	0xFF0
  9832                           postinc0	equ	0xFEE
  9833                           wreg	equ	0xFE8
  9834                           postdec1	equ	0xFE5
  9835                           fsr1l	equ	0xFE1
  9836                           indf2	equ	0xFDF
  9837                           postinc2	equ	0xFDE
  9838                           postdec2	equ	0xFDD
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function _I2C_Master_Write *****************
  9844 ;; Defined at:
  9845 ;;		line 49 in file "I2C.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  d               2    1[BANK0 ] unsigned int 
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  1    wreg      void 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9859 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;Total ram usage:        2 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    8
  9866 ;; This function calls:
  9867 ;;		_I2C_Master_Wait
  9868 ;; This function is called by:
  9869 ;;		_loadRTC
  9870 ;;		_getRTC
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           	psect	text26
  9875  0057E6                     __ptext26:
  9876                           	opt stack 0
  9877  0057E6                     _I2C_Master_Write:
  9878                           	opt stack 18
  9879                           
  9880                           ;I2C.c: 51: I2C_Master_Wait();
  9881                           
  9882                           ;incstack = 0
  9883  0057E6  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
  9884                           
  9885                           ;I2C.c: 52: SSPBUF = d;
  9886  0057EA  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9887  0057EE  0012               	return		;funcret
  9888  0057F0                     __end_of_I2C_Master_Write:
  9889                           	opt stack 0
  9890                           tblptru	equ	0xFF8
  9891                           tblptrh	equ	0xFF7
  9892                           tblptrl	equ	0xFF6
  9893                           tablat	equ	0xFF5
  9894                           prodh	equ	0xFF4
  9895                           prodl	equ	0xFF3
  9896                           intcon	equ	0xFF2
  9897                           intcon2	equ	0xFF1
  9898                           intcon3	equ	0xFF0
  9899                           postinc0	equ	0xFEE
  9900                           wreg	equ	0xFE8
  9901                           postdec1	equ	0xFE5
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           fsr2h	equ	0xFDA
  9907                           fsr2l	equ	0xFD9
  9908                           status	equ	0xFD8
  9909                           
  9910 ;; *************** function _I2C_Master_Stop *****************
  9911 ;; Defined at:
  9912 ;;		line 43 in file "I2C.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      void 
  9919 ;; Registers used:
  9920 ;;		wreg, status,2, status,0, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    8
  9933 ;; This function calls:
  9934 ;;		_I2C_Master_Wait
  9935 ;; This function is called by:
  9936 ;;		_loadRTC
  9937 ;;		_getRTC
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text27
  9942  005802                     __ptext27:
  9943                           	opt stack 0
  9944  005802                     _I2C_Master_Stop:
  9945                           	opt stack 18
  9946                           
  9947                           ;I2C.c: 45: I2C_Master_Wait();
  9948                           
  9949                           ;incstack = 0
  9950  005802  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
  9951                           
  9952                           ;I2C.c: 46: PEN = 1;
  9953  005806  84C5               	bsf	4037,2,c	;volatile
  9954  005808  0012               	return		;funcret
  9955  00580A                     __end_of_I2C_Master_Stop:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           intcon2	equ	0xFF1
  9965                           intcon3	equ	0xFF0
  9966                           postinc0	equ	0xFEE
  9967                           wreg	equ	0xFE8
  9968                           postdec1	equ	0xFE5
  9969                           fsr1l	equ	0xFE1
  9970                           indf2	equ	0xFDF
  9971                           postinc2	equ	0xFDE
  9972                           postdec2	equ	0xFDD
  9973                           fsr2h	equ	0xFDA
  9974                           fsr2l	equ	0xFD9
  9975                           status	equ	0xFD8
  9976                           
  9977 ;; *************** function _I2C_Master_Start *****************
  9978 ;; Defined at:
  9979 ;;		line 31 in file "I2C.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  1    wreg      void 
  9986 ;; Registers used:
  9987 ;;		wreg, status,2, status,0, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;Total ram usage:        0 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    8
 10000 ;; This function calls:
 10001 ;;		_I2C_Master_Wait
 10002 ;; This function is called by:
 10003 ;;		_loadRTC
 10004 ;;		_getRTC
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           	psect	text28
 10009  00580A                     __ptext28:
 10010                           	opt stack 0
 10011  00580A                     _I2C_Master_Start:
 10012                           	opt stack 18
 10013                           
 10014                           ;I2C.c: 33: I2C_Master_Wait();
 10015                           
 10016                           ;incstack = 0
 10017  00580A  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
 10018                           
 10019                           ;I2C.c: 34: SEN = 1;
 10020  00580E  80C5               	bsf	4037,0,c	;volatile
 10021  005810  0012               	return		;funcret
 10022  005812                     __end_of_I2C_Master_Start:
 10023                           	opt stack 0
 10024                           tblptru	equ	0xFF8
 10025                           tblptrh	equ	0xFF7
 10026                           tblptrl	equ	0xFF6
 10027                           tablat	equ	0xFF5
 10028                           prodh	equ	0xFF4
 10029                           prodl	equ	0xFF3
 10030                           intcon	equ	0xFF2
 10031                           intcon2	equ	0xFF1
 10032                           intcon3	equ	0xFF0
 10033                           postinc0	equ	0xFEE
 10034                           wreg	equ	0xFE8
 10035                           postdec1	equ	0xFE5
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _I2C_Master_Read *****************
 10045 ;; Defined at:
 10046 ;;		line 55 in file "I2C.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  a               1    wreg     unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  a               1    1[BANK0 ] unsigned char 
 10051 ;;  temp            1    2[BANK0 ] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      unsigned char 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;Total ram usage:        2 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    8
 10068 ;; This function calls:
 10069 ;;		_I2C_Master_Wait
 10070 ;; This function is called by:
 10071 ;;		_getRTC
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text29
 10076  005522                     __ptext29:
 10077                           	opt stack 0
 10078  005522                     _I2C_Master_Read:
 10079                           	opt stack 18
 10080                           
 10081                           ;incstack = 0
 10082                           ;I2C_Master_Read@a stored from wreg
 10083  005522  0100               	movlb	0	; () banked
 10084  005524  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 10085                           
 10086                           ;I2C.c: 57: unsigned char temp;
 10087                           ;I2C.c: 58: I2C_Master_Wait();
 10088  005526  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
 10089                           
 10090                           ;I2C.c: 59: RCEN = 1;
 10091  00552A  86C5               	bsf	4037,3,c	;volatile
 10092                           
 10093                           ;I2C.c: 60: I2C_Master_Wait();
 10094  00552C  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
 10095                           
 10096                           ;I2C.c: 61: temp = SSPBUF;
 10097  005530  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 10098                           
 10099                           ;I2C.c: 62: I2C_Master_Wait();
 10100  005534  ECC4  F02B         	call	_I2C_Master_Wait	;wreg free
 10101                           
 10102                           ;I2C.c: 63: ACKDT = (a)?0:1;
 10103  005538  0100               	movlb	0	; () banked
 10104  00553A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 10105  00553C  0100               	movlb	0	; () banked
 10106  00553E  A4D8               	btfss	status,2,c
 10107  005540  D002               	goto	u4760
 10108  005542  8AC5               	bsf	4037,5,c	;volatile
 10109  005544  D001               	goto	l6380
 10110  005546                     u4760:
 10111  005546  9AC5               	bcf	4037,5,c	;volatile
 10112  005548                     l6380:
 10113                           
 10114                           ;I2C.c: 64: ACKEN = 1;
 10115  005548  88C5               	bsf	4037,4,c	;volatile
 10116                           
 10117                           ;I2C.c: 65: return temp;
 10118  00554A  0100               	movlb	0	; () banked
 10119  00554C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10120  00554E  0012               	return	
 10121  005550                     __end_of_I2C_Master_Read:
 10122                           	opt stack 0
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           intcon2	equ	0xFF1
 10131                           intcon3	equ	0xFF0
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           postdec1	equ	0xFE5
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           fsr2h	equ	0xFDA
 10140                           fsr2l	equ	0xFD9
 10141                           status	equ	0xFD8
 10142                           
 10143 ;; *************** function _I2C_Master_Wait *****************
 10144 ;; Defined at:
 10145 ;;		line 26 in file "I2C.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;Total ram usage:        1 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    7
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_I2C_Master_Start
 10170 ;;		_I2C_Master_Stop
 10171 ;;		_I2C_Master_Write
 10172 ;;		_I2C_Master_Read
 10173 ;;		_I2C_Master_RepeatedStart
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text30
 10178  005788                     __ptext30:
 10179                           	opt stack 0
 10180  005788                     _I2C_Master_Wait:
 10181                           	opt stack 18
 10182  005788                     l66:
 10183  005788  B4C7               	btfsc	4039,2,c	;volatile
 10184  00578A  D7FE               	goto	l66
 10185  00578C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10186  005790  0E1F               	movlw	31
 10187  005792  0100               	movlb	0	; () banked
 10188  005794  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10189  005796  B4D8               	btfsc	status,2,c
 10190  005798  0012               	return	
 10191  00579A  D7F6               	goto	l66
 10192  00579C                     __end_of_I2C_Master_Wait:
 10193                           	opt stack 0
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           intcon2	equ	0xFF1
 10202                           intcon3	equ	0xFF0
 10203                           postinc0	equ	0xFEE
 10204                           wreg	equ	0xFE8
 10205                           postdec1	equ	0xFE5
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           postdec2	equ	0xFDD
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function _change_state_to_menu_22 *****************
 10215 ;; Defined at:
 10216 ;;		line 501 in file "UI.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;		None
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        0 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:   10
 10237 ;; This function calls:
 10238 ;;		_lcdInst
 10239 ;;		_printf
 10240 ;; This function is called by:
 10241 ;;		_UI
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           	psect	text31
 10246  005202                     __ptext31:
 10247                           	opt stack 0
 10248  005202                     _change_state_to_menu_22:
 10249                           	opt stack 19
 10250                           
 10251                           ;UI.c: 502: cur_state = 22;
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;incstack = 0
 10255  005202  0E00               	movlw	0
 10256  005204  0100               	movlb	0	; () banked
 10257  005206  6FED               	movwf	(_cur_state+1)& (0+255),b
 10258  005208  0E16               	movlw	22
 10259  00520A  6FEC               	movwf	_cur_state& (0+255),b
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;UI.c: 504: lcdInst(0b10000000);;
 10263  00520C  0E80               	movlw	128
 10264  00520E  ECDF  F02B         	call	_lcdInst
 10265                           
 10266                           ;UI.c: 505: printf("2. SORT        <");
 10267  005212  0ECE               	movlw	low STR_34
 10268  005214  0100               	movlb	0	; () banked
 10269  005216  6F8E               	movwf	printf@f& (0+255),b
 10270  005218  0EFD               	movlw	high STR_34
 10271  00521A  0100               	movlb	0	; () banked
 10272  00521C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10273  00521E  ECC1  F00B         	call	_printf	;wreg free
 10274                           
 10275                           ;UI.c: 506: lcdInst(0b11000000);;
 10276  005222  0EC0               	movlw	192
 10277  005224  ECDF  F02B         	call	_lcdInst
 10278                           
 10279                           ;UI.c: 507: printf("3. LOGS         ");
 10280  005228  0E13               	movlw	low STR_36
 10281  00522A  0100               	movlb	0	; () banked
 10282  00522C  6F8E               	movwf	printf@f& (0+255),b
 10283  00522E  0EFD               	movlw	high STR_36
 10284  005230  0100               	movlb	0	; () banked
 10285  005232  6F8F               	movwf	(printf@f+1)& (0+255),b
 10286  005234  ECC1  F00B         	call	_printf	;wreg free
 10287  005238  0012               	return		;funcret
 10288  00523A                     __end_of_change_state_to_menu_22:
 10289                           	opt stack 0
 10290                           tblptru	equ	0xFF8
 10291                           tblptrh	equ	0xFF7
 10292                           tblptrl	equ	0xFF6
 10293                           tablat	equ	0xFF5
 10294                           prodh	equ	0xFF4
 10295                           prodl	equ	0xFF3
 10296                           intcon	equ	0xFF2
 10297                           intcon2	equ	0xFF1
 10298                           intcon3	equ	0xFF0
 10299                           postinc0	equ	0xFEE
 10300                           wreg	equ	0xFE8
 10301                           postdec1	equ	0xFE5
 10302                           fsr1l	equ	0xFE1
 10303                           indf2	equ	0xFDF
 10304                           postinc2	equ	0xFDE
 10305                           postdec2	equ	0xFDD
 10306                           fsr2h	equ	0xFDA
 10307                           fsr2l	equ	0xFD9
 10308                           status	equ	0xFD8
 10309                           
 10310 ;; *************** function _change_state_to_menu_12 *****************
 10311 ;; Defined at:
 10312 ;;		line 493 in file "UI.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  1    wreg      void 
 10319 ;; Registers used:
 10320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;Total ram usage:        0 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:   10
 10333 ;; This function calls:
 10334 ;;		_lcdInst
 10335 ;;		_printf
 10336 ;; This function is called by:
 10337 ;;		_UI
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           	psect	text32
 10342  00523A                     __ptext32:
 10343                           	opt stack 0
 10344  00523A                     _change_state_to_menu_12:
 10345                           	opt stack 19
 10346                           
 10347                           ;UI.c: 494: cur_state = 12;
 10348                           
 10349                           ;incstack = 0
 10350  00523A  0E00               	movlw	0
 10351  00523C  0100               	movlb	0	; () banked
 10352  00523E  6FED               	movwf	(_cur_state+1)& (0+255),b
 10353  005240  0E0C               	movlw	12
 10354  005242  6FEC               	movwf	_cur_state& (0+255),b
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;UI.c: 496: lcdInst(0b10000000);;
 10358  005244  0E80               	movlw	128
 10359  005246  ECDF  F02B         	call	_lcdInst
 10360                           
 10361                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10362  00524A  0E35               	movlw	low STR_33
 10363  00524C  0100               	movlb	0	; () banked
 10364  00524E  6F8E               	movwf	printf@f& (0+255),b
 10365  005250  0EFD               	movlw	high STR_33
 10366  005252  0100               	movlb	0	; () banked
 10367  005254  6F8F               	movwf	(printf@f+1)& (0+255),b
 10368  005256  ECC1  F00B         	call	_printf	;wreg free
 10369                           
 10370                           ;UI.c: 498: lcdInst(0b11000000);;
 10371  00525A  0EC0               	movlw	192
 10372  00525C  ECDF  F02B         	call	_lcdInst
 10373                           
 10374                           ;UI.c: 499: printf("2. SORT        <");
 10375  005260  0ECE               	movlw	low STR_34
 10376  005262  0100               	movlb	0	; () banked
 10377  005264  6F8E               	movwf	printf@f& (0+255),b
 10378  005266  0EFD               	movlw	high STR_34
 10379  005268  0100               	movlb	0	; () banked
 10380  00526A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10381  00526C  ECC1  F00B         	call	_printf	;wreg free
 10382  005270  0012               	return		;funcret
 10383  005272                     __end_of_change_state_to_menu_12:
 10384                           	opt stack 0
 10385                           tblptru	equ	0xFF8
 10386                           tblptrh	equ	0xFF7
 10387                           tblptrl	equ	0xFF6
 10388                           tablat	equ	0xFF5
 10389                           prodh	equ	0xFF4
 10390                           prodl	equ	0xFF3
 10391                           intcon	equ	0xFF2
 10392                           intcon2	equ	0xFF1
 10393                           intcon3	equ	0xFF0
 10394                           postinc0	equ	0xFEE
 10395                           wreg	equ	0xFE8
 10396                           postdec1	equ	0xFE5
 10397                           fsr1l	equ	0xFE1
 10398                           indf2	equ	0xFDF
 10399                           postinc2	equ	0xFDE
 10400                           postdec2	equ	0xFDD
 10401                           fsr2h	equ	0xFDA
 10402                           fsr2l	equ	0xFD9
 10403                           status	equ	0xFD8
 10404                           
 10405 ;; *************** function ___awmod *****************
 10406 ;; Defined at:
 10407 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  dividend        2    0[BANK0 ] int 
 10410 ;;  divisor         2    2[BANK0 ] int 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  sign            1    5[BANK0 ] unsigned char 
 10413 ;;  counter         1    4[BANK0 ] unsigned char 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  2    0[BANK0 ] int 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10423 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;Total ram usage:        6 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    7
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_UI
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text33
 10438  004862                     __ptext33:
 10439                           	opt stack 0
 10440  004862                     ___awmod:
 10441                           	opt stack 22
 10442                           
 10443                           ;incstack = 0
 10444  004862  0E00               	movlw	0
 10445  004864  0100               	movlb	0	; () banked
 10446  004866  6F85               	movwf	___awmod@sign& (0+255),b
 10447                           
 10448                           ; BSR set to: 0
 10449  004868  0100               	movlb	0	; () banked
 10450  00486A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10451  00486C  D008               	goto	l8908
 10452                           
 10453                           ; BSR set to: 0
 10454  00486E  0100               	movlb	0	; () banked
 10455  004870  6D80               	negf	___awmod@dividend& (0+255),b
 10456  004872  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10457  004874  B0D8               	btfsc	status,0,c
 10458  004876  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10459                           
 10460                           ; BSR set to: 0
 10461  004878  0E01               	movlw	1
 10462  00487A  0100               	movlb	0	; () banked
 10463  00487C  6F85               	movwf	___awmod@sign& (0+255),b
 10464  00487E                     l8908:
 10465                           
 10466                           ; BSR set to: 0
 10467  00487E  0100               	movlb	0	; () banked
 10468  004880  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10469  004882  D005               	goto	l8912
 10470                           
 10471                           ; BSR set to: 0
 10472  004884  0100               	movlb	0	; () banked
 10473  004886  6D82               	negf	___awmod@divisor& (0+255),b
 10474  004888  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10475  00488A  B0D8               	btfsc	status,0,c
 10476  00488C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10477  00488E                     l8912:
 10478                           
 10479                           ; BSR set to: 0
 10480  00488E  0100               	movlb	0	; () banked
 10481  004890  5182               	movf	___awmod@divisor& (0+255),w,b
 10482  004892  0100               	movlb	0	; () banked
 10483  004894  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10484  004896  B4D8               	btfsc	status,2,c
 10485  004898  D026               	goto	l8928
 10486                           
 10487                           ; BSR set to: 0
 10488  00489A  0E01               	movlw	1
 10489  00489C  0100               	movlb	0	; () banked
 10490  00489E  6F84               	movwf	___awmod@counter& (0+255),b
 10491  0048A0  D006               	goto	l8918
 10492  0048A2                     l8916:
 10493                           
 10494                           ; BSR set to: 0
 10495  0048A2  0100               	movlb	0	; () banked
 10496  0048A4  90D8               	bcf	status,0,c
 10497  0048A6  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10498  0048A8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10499  0048AA  0100               	movlb	0	; () banked
 10500  0048AC  2B84               	incf	___awmod@counter& (0+255),f,b
 10501  0048AE                     l8918:
 10502                           
 10503                           ; BSR set to: 0
 10504  0048AE  0100               	movlb	0	; () banked
 10505  0048B0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10506  0048B2  D7F7               	goto	l8916
 10507  0048B4                     l8920:
 10508                           
 10509                           ; BSR set to: 0
 10510  0048B4  0100               	movlb	0	; () banked
 10511  0048B6  5182               	movf	___awmod@divisor& (0+255),w,b
 10512  0048B8  0100               	movlb	0	; () banked
 10513  0048BA  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10514  0048BC  0100               	movlb	0	; () banked
 10515  0048BE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10516  0048C0  0100               	movlb	0	; () banked
 10517  0048C2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10518  0048C4  A0D8               	btfss	status,0,c
 10519  0048C6  D008               	goto	l8924
 10520                           
 10521                           ; BSR set to: 0
 10522  0048C8  0100               	movlb	0	; () banked
 10523  0048CA  5182               	movf	___awmod@divisor& (0+255),w,b
 10524  0048CC  0100               	movlb	0	; () banked
 10525  0048CE  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10526  0048D0  0100               	movlb	0	; () banked
 10527  0048D2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10528  0048D4  0100               	movlb	0	; () banked
 10529  0048D6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10530  0048D8                     l8924:
 10531                           
 10532                           ; BSR set to: 0
 10533  0048D8  0100               	movlb	0	; () banked
 10534  0048DA  90D8               	bcf	status,0,c
 10535  0048DC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10536  0048DE  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10537                           
 10538                           ; BSR set to: 0
 10539  0048E0  0100               	movlb	0	; () banked
 10540  0048E2  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10541  0048E4  D7E7               	goto	l8920
 10542  0048E6                     l8928:
 10543                           
 10544                           ; BSR set to: 0
 10545  0048E6  0100               	movlb	0	; () banked
 10546  0048E8  5185               	movf	___awmod@sign& (0+255),w,b
 10547  0048EA  0100               	movlb	0	; () banked
 10548  0048EC  B4D8               	btfsc	status,2,c
 10549  0048EE  D005               	goto	l8932
 10550                           
 10551                           ; BSR set to: 0
 10552  0048F0  0100               	movlb	0	; () banked
 10553  0048F2  6D80               	negf	___awmod@dividend& (0+255),b
 10554  0048F4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10555  0048F6  B0D8               	btfsc	status,0,c
 10556  0048F8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10557  0048FA                     l8932:
 10558                           
 10559                           ; BSR set to: 0
 10560  0048FA  C080  F080         	movff	___awmod@dividend,?___awmod
 10561  0048FE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10562  004902  0012               	return	
 10563  004904                     __end_of___awmod:
 10564                           	opt stack 0
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           intcon	equ	0xFF2
 10572                           intcon2	equ	0xFF1
 10573                           intcon3	equ	0xFF0
 10574                           postinc0	equ	0xFEE
 10575                           wreg	equ	0xFE8
 10576                           postdec1	equ	0xFE5
 10577                           fsr1l	equ	0xFE1
 10578                           indf2	equ	0xFDF
 10579                           postinc2	equ	0xFDE
 10580                           postdec2	equ	0xFDD
 10581                           fsr2h	equ	0xFDA
 10582                           fsr2l	equ	0xFD9
 10583                           status	equ	0xFD8
 10584                           
 10585 ;; *************** function ___awdiv *****************
 10586 ;; Defined at:
 10587 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;  dividend        2    6[BANK0 ] int 
 10590 ;;  divisor         2    8[BANK0 ] int 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  quotient        2   12[BANK0 ] int 
 10593 ;;  sign            1   11[BANK0 ] unsigned char 
 10594 ;;  counter         1   10[BANK0 ] unsigned char 
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  2    6[BANK0 ] int 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:        8 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    7
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_UI
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text34
 10619  00463E                     __ptext34:
 10620                           	opt stack 0
 10621  00463E                     ___awdiv:
 10622                           	opt stack 22
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;incstack = 0
 10626  00463E  0E00               	movlw	0
 10627  004640  0100               	movlb	0	; () banked
 10628  004642  6F8B               	movwf	___awdiv@sign& (0+255),b
 10629                           
 10630                           ; BSR set to: 0
 10631  004644  0100               	movlb	0	; () banked
 10632  004646  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10633  004648  D008               	goto	l8864
 10634                           
 10635                           ; BSR set to: 0
 10636  00464A  0100               	movlb	0	; () banked
 10637  00464C  6D88               	negf	___awdiv@divisor& (0+255),b
 10638  00464E  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10639  004650  B0D8               	btfsc	status,0,c
 10640  004652  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10641                           
 10642                           ; BSR set to: 0
 10643  004654  0E01               	movlw	1
 10644  004656  0100               	movlb	0	; () banked
 10645  004658  6F8B               	movwf	___awdiv@sign& (0+255),b
 10646  00465A                     l8864:
 10647                           
 10648                           ; BSR set to: 0
 10649  00465A  0100               	movlb	0	; () banked
 10650  00465C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10651  00465E  D008               	goto	l8870
 10652                           
 10653                           ; BSR set to: 0
 10654  004660  0100               	movlb	0	; () banked
 10655  004662  6D86               	negf	___awdiv@dividend& (0+255),b
 10656  004664  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10657  004666  B0D8               	btfsc	status,0,c
 10658  004668  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10659                           
 10660                           ; BSR set to: 0
 10661  00466A  0E01               	movlw	1
 10662  00466C  0100               	movlb	0	; () banked
 10663  00466E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10664  004670                     l8870:
 10665                           
 10666                           ; BSR set to: 0
 10667  004670  0E00               	movlw	0
 10668  004672  0100               	movlb	0	; () banked
 10669  004674  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10670  004676  0E00               	movlw	0
 10671  004678  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10672                           
 10673                           ; BSR set to: 0
 10674  00467A  0100               	movlb	0	; () banked
 10675  00467C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10676  00467E  0100               	movlb	0	; () banked
 10677  004680  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10678  004682  B4D8               	btfsc	status,2,c
 10679  004684  D02C               	goto	l8892
 10680                           
 10681                           ; BSR set to: 0
 10682  004686  0E01               	movlw	1
 10683  004688  0100               	movlb	0	; () banked
 10684  00468A  6F8A               	movwf	___awdiv@counter& (0+255),b
 10685  00468C  D006               	goto	l8878
 10686  00468E                     l8876:
 10687                           
 10688                           ; BSR set to: 0
 10689  00468E  0100               	movlb	0	; () banked
 10690  004690  90D8               	bcf	status,0,c
 10691  004692  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10692  004694  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10693  004696  0100               	movlb	0	; () banked
 10694  004698  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10695  00469A                     l8878:
 10696                           
 10697                           ; BSR set to: 0
 10698  00469A  0100               	movlb	0	; () banked
 10699  00469C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10700  00469E  D7F7               	goto	l8876
 10701  0046A0                     l8880:
 10702                           
 10703                           ; BSR set to: 0
 10704  0046A0  0100               	movlb	0	; () banked
 10705  0046A2  90D8               	bcf	status,0,c
 10706  0046A4  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10707  0046A6  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10708                           
 10709                           ; BSR set to: 0
 10710  0046A8  0100               	movlb	0	; () banked
 10711  0046AA  5188               	movf	___awdiv@divisor& (0+255),w,b
 10712  0046AC  0100               	movlb	0	; () banked
 10713  0046AE  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10714  0046B0  0100               	movlb	0	; () banked
 10715  0046B2  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10716  0046B4  0100               	movlb	0	; () banked
 10717  0046B6  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10718  0046B8  A0D8               	btfss	status,0,c
 10719  0046BA  D00A               	goto	l8888
 10720                           
 10721                           ; BSR set to: 0
 10722  0046BC  0100               	movlb	0	; () banked
 10723  0046BE  5188               	movf	___awdiv@divisor& (0+255),w,b
 10724  0046C0  0100               	movlb	0	; () banked
 10725  0046C2  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10726  0046C4  0100               	movlb	0	; () banked
 10727  0046C6  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10728  0046C8  0100               	movlb	0	; () banked
 10729  0046CA  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10730                           
 10731                           ; BSR set to: 0
 10732  0046CC  0100               	movlb	0	; () banked
 10733  0046CE  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10734  0046D0                     l8888:
 10735                           
 10736                           ; BSR set to: 0
 10737  0046D0  0100               	movlb	0	; () banked
 10738  0046D2  90D8               	bcf	status,0,c
 10739  0046D4  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10740  0046D6  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10741                           
 10742                           ; BSR set to: 0
 10743  0046D8  0100               	movlb	0	; () banked
 10744  0046DA  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10745  0046DC  D7E1               	goto	l8880
 10746  0046DE                     l8892:
 10747                           
 10748                           ; BSR set to: 0
 10749  0046DE  0100               	movlb	0	; () banked
 10750  0046E0  518B               	movf	___awdiv@sign& (0+255),w,b
 10751  0046E2  0100               	movlb	0	; () banked
 10752  0046E4  B4D8               	btfsc	status,2,c
 10753  0046E6  D005               	goto	l8896
 10754                           
 10755                           ; BSR set to: 0
 10756  0046E8  0100               	movlb	0	; () banked
 10757  0046EA  6D8C               	negf	___awdiv@quotient& (0+255),b
 10758  0046EC  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10759  0046EE  B0D8               	btfsc	status,0,c
 10760  0046F0  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10761  0046F2                     l8896:
 10762                           
 10763                           ; BSR set to: 0
 10764  0046F2  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10765  0046F6  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10766  0046FA  0012               	return	
 10767  0046FC                     __end_of___awdiv:
 10768                           	opt stack 0
 10769                           tblptru	equ	0xFF8
 10770                           tblptrh	equ	0xFF7
 10771                           tblptrl	equ	0xFF6
 10772                           tablat	equ	0xFF5
 10773                           prodh	equ	0xFF4
 10774                           prodl	equ	0xFF3
 10775                           intcon	equ	0xFF2
 10776                           intcon2	equ	0xFF1
 10777                           intcon3	equ	0xFF0
 10778                           postinc0	equ	0xFEE
 10779                           wreg	equ	0xFE8
 10780                           postdec1	equ	0xFE5
 10781                           fsr1l	equ	0xFE1
 10782                           indf2	equ	0xFDF
 10783                           postinc2	equ	0xFDE
 10784                           postdec2	equ	0xFDD
 10785                           fsr2h	equ	0xFDA
 10786                           fsr2l	equ	0xFD9
 10787                           status	equ	0xFD8
 10788                           
 10789 ;; *************** function _Test *****************
 10790 ;; Defined at:
 10791 ;;		line 31 in file "Test.c"
 10792 ;; Parameters:    Size  Location     Type
 10793 ;;		None
 10794 ;; Auto vars:     Size  Location     Type
 10795 ;;		None
 10796 ;; Return value:  Size  Location     Type
 10797 ;;                  1    wreg      void 
 10798 ;; Registers used:
 10799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;Total ram usage:        2 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:   11
 10812 ;; This function calls:
 10813 ;;		_BlockerTest
 10814 ;;		_BothServos
 10815 ;;		_PlatformTest
 10816 ;;		_PortTestDC
 10817 ;;		_PortTestPusher
 10818 ;;		_SpeedTest
 10819 ;;		_actuatorTest
 10820 ;;		_algorithmTest
 10821 ;;		_arm
 10822 ;;		_lcdInst
 10823 ;;		_printf
 10824 ;;		_sensorTest
 10825 ;; This function is called by:
 10826 ;;		_main
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           	psect	text35
 10831  004018                     __ptext35:
 10832                           	opt stack 0
 10833  004018                     _Test:
 10834                           	opt stack 19
 10835                           
 10836                           ;Test.c: 33: while(machine_state == Testing_state){
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;incstack = 0
 10840  004018  D07C               	goto	l9656
 10841  00401A                     l9616:
 10842                           
 10843                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10844  00401A  0E01               	movlw	1
 10845  00401C  ECDF  F02B         	call	_lcdInst
 10846  004020  0E68               	movlw	104
 10847  004022  0100               	movlb	0	; () banked
 10848  004024  6FC6               	movwf	??_Test& (0+255),b
 10849  004026  0EE4               	movlw	228
 10850  004028                     u10087:
 10851  004028  2EE8               	decfsz	wreg,f,c
 10852  00402A  D7FE               	bra	u10087
 10853  00402C  2FC6               	decfsz	??_Test& (0+255),f,b
 10854  00402E  D7FC               	bra	u10087
 10855  004030  F000               	nop	
 10856  004032  0E80               	movlw	128
 10857  004034  ECDF  F02B         	call	_lcdInst
 10858                           
 10859                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10860  004038  0E8B               	movlw	low STR_68
 10861  00403A  0100               	movlb	0	; () banked
 10862  00403C  6F8E               	movwf	printf@f& (0+255),b
 10863  00403E  0EFC               	movlw	high STR_68
 10864  004040  0100               	movlb	0	; () banked
 10865  004042  6F8F               	movwf	(printf@f+1)& (0+255),b
 10866  004044  ECC1  F00B         	call	_printf	;wreg free
 10867                           
 10868                           ;Test.c: 36: lcdInst(0b11000000);;
 10869  004048  0EC0               	movlw	192
 10870  00404A  ECDF  F02B         	call	_lcdInst
 10871                           
 10872                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 10873  00404E  0E9C               	movlw	low STR_69
 10874  004050  0100               	movlb	0	; () banked
 10875  004052  6F8E               	movwf	printf@f& (0+255),b
 10876  004054  0EFC               	movlw	high STR_69
 10877  004056  0100               	movlb	0	; () banked
 10878  004058  6F8F               	movwf	(printf@f+1)& (0+255),b
 10879  00405A  ECC1  F00B         	call	_printf	;wreg free
 10880  00405E                     l1214:
 10881  00405E  A281               	btfss	3969,1,c	;volatile
 10882  004060  D7FE               	goto	l1214
 10883                           
 10884                           ;Test.c: 39: var = PORTB >> 4;
 10885  004062  CF81 F0C6          	movff	3969,??_Test	;volatile
 10886  004066  0100               	movlb	0	; () banked
 10887  004068  3BC6               	swapf	??_Test& (0+255),f,b
 10888  00406A  0E0F               	movlw	15
 10889  00406C  17C6               	andwf	??_Test& (0+255),f,b
 10890  00406E  0100               	movlb	0	; () banked
 10891  004070  51C6               	movf	??_Test& (0+255),w,b
 10892  004072  0101               	movlb	1	; () banked
 10893  004074  6F45               	movwf	_var& (0+255),b
 10894  004076  6B46               	clrf	(_var+1)& (0+255),b
 10895                           
 10896                           ; BSR set to: 1
 10897                           ;Test.c: 40: var++;
 10898  004078  0101               	movlb	1	; () banked
 10899  00407A  4B45               	infsnz	_var& (0+255),f,b
 10900  00407C  2B46               	incf	(_var+1)& (0+255),f,b
 10901  00407E                     l1217:
 10902  00407E  A281               	btfss	3969,1,c	;volatile
 10903  004080  D01F               	goto	l9654
 10904  004082  D7FD               	goto	l1217
 10905  004084                     l9632:
 10906                           
 10907                           ;Test.c: 44: algorithmTest();
 10908  004084  ECF3  F021         	call	_algorithmTest	;wreg free
 10909                           
 10910                           ;Test.c: 45: break;
 10911  004088  D044               	goto	l9656
 10912  00408A                     l9634:
 10913                           
 10914                           ;Test.c: 47: sensorTest();
 10915  00408A  EC5A  F013         	call	_sensorTest	;wreg free
 10916                           
 10917                           ;Test.c: 48: break;
 10918  00408E  D041               	goto	l9656
 10919  004090                     l9636:
 10920                           
 10921                           ;Test.c: 50: actuatorTest();
 10922  004090  EC6B  F004         	call	_actuatorTest	;wreg free
 10923                           
 10924                           ;Test.c: 51: break;
 10925  004094  D03E               	goto	l9656
 10926  004096                     l9638:
 10927                           
 10928                           ;Test.c: 53: arm();
 10929  004096  EC8F  F020         	call	_arm	;wreg free
 10930                           
 10931                           ;Test.c: 54: break;
 10932  00409A  D03B               	goto	l9656
 10933  00409C                     l9640:
 10934                           
 10935                           ;Test.c: 56: PortTestDC();
 10936  00409C  ECA9  F027         	call	_PortTestDC	;wreg free
 10937                           
 10938                           ;Test.c: 57: break;
 10939  0040A0  D038               	goto	l9656
 10940  0040A2                     l9642:
 10941                           
 10942                           ;Test.c: 59: SpeedTest();
 10943  0040A2  EC4E  F025         	call	_SpeedTest	;wreg free
 10944                           
 10945                           ;Test.c: 60: break;
 10946  0040A6  D035               	goto	l9656
 10947  0040A8                     l9644:
 10948                           
 10949                           ;Test.c: 62: PortTestPusher();
 10950  0040A8  EC7B  F027         	call	_PortTestPusher	;wreg free
 10951                           
 10952                           ;Test.c: 63: break;
 10953  0040AC  D032               	goto	l9656
 10954  0040AE                     l9646:
 10955                           
 10956                           ;Test.c: 65: PlatformTest();
 10957  0040AE  ECD4  F00F         	call	_PlatformTest	;wreg free
 10958                           
 10959                           ;Test.c: 66: break;
 10960  0040B2  D02F               	goto	l9656
 10961  0040B4                     l9648:
 10962                           
 10963                           ;Test.c: 68: BothServos();
 10964  0040B4  ECDD  F00D         	call	_BothServos	;wreg free
 10965                           
 10966                           ;Test.c: 69: break;
 10967  0040B8  D02C               	goto	l9656
 10968  0040BA                     l9650:
 10969                           
 10970                           ;Test.c: 71: BlockerTest();
 10971  0040BA  EC18  F01E         	call	_BlockerTest	;wreg free
 10972                           
 10973                           ;Test.c: 75: }
 10974                           
 10975                           ;Test.c: 74: break;
 10976                           
 10977                           ;Test.c: 73: default:
 10978                           
 10979                           ;Test.c: 72: break;
 10980  0040BE  D029               	goto	l9656
 10981  0040C0                     l9654:
 10982  0040C0  C145  F0C6         	movff	_var,??_Test
 10983  0040C4  C146  F0C7         	movff	_var+1,??_Test+1
 10984                           
 10985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10986                           ; Switch size 1, requested type "space"
 10987                           ; Number of cases is 1, Range of values is 0 to 0
 10988                           ; switch strategies available:
 10989                           ; Name         Instructions Cycles
 10990                           ; simple_byte            4     3 (average)
 10991                           ;	Chosen strategy is simple_byte
 10992  0040C8  0100               	movlb	0	; () banked
 10993  0040CA  51C7               	movf	(??_Test+1)& (0+255),w,b
 10994  0040CC  0A00               	xorlw	0	; case 0
 10995  0040CE  A4D8               	btfss	status,2,c
 10996  0040D0  D020               	goto	l9656
 10997                           
 10998                           ; BSR set to: 0
 10999                           ; Switch size 1, requested type "space"
 11000                           ; Number of cases is 10, Range of values is 1 to 11
 11001                           ; switch strategies available:
 11002                           ; Name         Instructions Cycles
 11003                           ; simple_byte           31    16 (average)
 11004                           ;	Chosen strategy is simple_byte
 11005  0040D2  0100               	movlb	0	; () banked
 11006  0040D4  51C6               	movf	??_Test& (0+255),w,b
 11007  0040D6  0A01               	xorlw	1	; case 1
 11008  0040D8  B4D8               	btfsc	status,2,c
 11009  0040DA  D7D4               	goto	l9632
 11010  0040DC  0A03               	xorlw	3	; case 2
 11011  0040DE  B4D8               	btfsc	status,2,c
 11012  0040E0  D7D4               	goto	l9634
 11013  0040E2  0A01               	xorlw	1	; case 3
 11014  0040E4  B4D8               	btfsc	status,2,c
 11015  0040E6  D7D4               	goto	l9636
 11016  0040E8  0A07               	xorlw	7	; case 4
 11017  0040EA  B4D8               	btfsc	status,2,c
 11018  0040EC  D7D4               	goto	l9638
 11019  0040EE  0A01               	xorlw	1	; case 5
 11020  0040F0  B4D8               	btfsc	status,2,c
 11021  0040F2  D7D4               	goto	l9640
 11022  0040F4  0A03               	xorlw	3	; case 6
 11023  0040F6  B4D8               	btfsc	status,2,c
 11024  0040F8  D7D4               	goto	l9642
 11025  0040FA  0A01               	xorlw	1	; case 7
 11026  0040FC  B4D8               	btfsc	status,2,c
 11027  0040FE  D7D4               	goto	l9644
 11028  004100  0A0F               	xorlw	15	; case 8
 11029  004102  B4D8               	btfsc	status,2,c
 11030  004104  D7D4               	goto	l9646
 11031  004106  0A02               	xorlw	2	; case 10
 11032  004108  B4D8               	btfsc	status,2,c
 11033  00410A  D7D4               	goto	l9648
 11034  00410C  0A01               	xorlw	1	; case 11
 11035  00410E  B4D8               	btfsc	status,2,c
 11036  004110  D7D4               	goto	l9650
 11037  004112                     l9656:
 11038  004112  0E03               	movlw	3
 11039  004114  0100               	movlb	0	; () banked
 11040  004116  19FC               	xorwf	_machine_state& (0+255),w,b
 11041  004118  A4D8               	btfss	status,2,c
 11042  00411A  0012               	return	
 11043  00411C  D77E               	goto	l9616
 11044  00411E                     __end_of_Test:
 11045                           	opt stack 0
 11046                           tblptru	equ	0xFF8
 11047                           tblptrh	equ	0xFF7
 11048                           tblptrl	equ	0xFF6
 11049                           tablat	equ	0xFF5
 11050                           prodh	equ	0xFF4
 11051                           prodl	equ	0xFF3
 11052                           intcon	equ	0xFF2
 11053                           intcon2	equ	0xFF1
 11054                           intcon3	equ	0xFF0
 11055                           postinc0	equ	0xFEE
 11056                           wreg	equ	0xFE8
 11057                           postdec1	equ	0xFE5
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           fsr2h	equ	0xFDA
 11063                           fsr2l	equ	0xFD9
 11064                           status	equ	0xFD8
 11065                           
 11066 ;; *************** function _sensorTest *****************
 11067 ;; Defined at:
 11068 ;;		line 123 in file "Test.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;		None
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;  res             2   45[BANK0 ] int 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  1    wreg      void 
 11075 ;; Registers used:
 11076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;Total ram usage:        4 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:   10
 11089 ;; This function calls:
 11090 ;;		_lcdInst
 11091 ;;		_printf
 11092 ;;		_readADC
 11093 ;;		_readMAG
 11094 ;; This function is called by:
 11095 ;;		_Test
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           	psect	text36
 11100  0026B4                     __ptext36:
 11101                           	opt stack 0
 11102  0026B4                     _sensorTest:
 11103                           	opt stack 19
 11104                           
 11105                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;incstack = 0
 11109  0026B4  0E01               	movlw	1
 11110  0026B6  ECDF  F02B         	call	_lcdInst
 11111  0026BA  0E68               	movlw	104
 11112  0026BC  0100               	movlb	0	; () banked
 11113  0026BE  6FAB               	movwf	??_sensorTest& (0+255),b
 11114  0026C0  0EE4               	movlw	228
 11115  0026C2                     u10097:
 11116  0026C2  2EE8               	decfsz	wreg,f,c
 11117  0026C4  D7FE               	bra	u10097
 11118  0026C6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11119  0026C8  D7FC               	bra	u10097
 11120  0026CA  F000               	nop	
 11121  0026CC  0E80               	movlw	128
 11122  0026CE  ECDF  F02B         	call	_lcdInst
 11123                           
 11124                           ;Test.c: 126: printf("SENSORS");
 11125  0026D2  0EAD               	movlw	low STR_77
 11126  0026D4  0100               	movlb	0	; () banked
 11127  0026D6  6F8E               	movwf	printf@f& (0+255),b
 11128  0026D8  0EFF               	movlw	high STR_77
 11129  0026DA  0100               	movlb	0	; () banked
 11130  0026DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11131  0026DE  ECC1  F00B         	call	_printf	;wreg free
 11132                           
 11133                           ;Test.c: 127: lcdInst(0b11000000);;
 11134  0026E2  0EC0               	movlw	192
 11135  0026E4  ECDF  F02B         	call	_lcdInst
 11136                           
 11137                           ;Test.c: 128: printf("PUSH TO START");
 11138  0026E8  0E15               	movlw	low STR_71
 11139  0026EA  0100               	movlb	0	; () banked
 11140  0026EC  6F8E               	movwf	printf@f& (0+255),b
 11141  0026EE  0EFF               	movlw	high STR_71
 11142  0026F0  0100               	movlb	0	; () banked
 11143  0026F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11144  0026F4  ECC1  F00B         	call	_printf	;wreg free
 11145                           
 11146                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11147  0026F8  0E05               	movlw	5
 11148  0026FA  0100               	movlb	0	; () banked
 11149  0026FC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11150  0026FE  0E0F               	movlw	15
 11151  002700  0100               	movlb	0	; () banked
 11152  002702  6FAB               	movwf	??_sensorTest& (0+255),b
 11153  002704  0EF1               	movlw	241
 11154  002706                     u10107:
 11155  002706  2EE8               	decfsz	wreg,f,c
 11156  002708  D7FE               	bra	u10107
 11157  00270A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11158  00270C  D7FC               	bra	u10107
 11159  00270E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11160  002710  D7FA               	bra	u10107
 11161  002712                     l1246:
 11162  002712  A281               	btfss	3969,1,c	;volatile
 11163  002714  D7FE               	goto	l1246
 11164  002716                     l1249:
 11165  002716  B281               	btfsc	3969,1,c	;volatile
 11166  002718  D7FE               	goto	l1249
 11167                           
 11168                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11169  00271A  0E01               	movlw	1
 11170  00271C  ECDF  F02B         	call	_lcdInst
 11171  002720  0E68               	movlw	104
 11172  002722  0100               	movlb	0	; () banked
 11173  002724  6FAB               	movwf	??_sensorTest& (0+255),b
 11174  002726  0EE4               	movlw	228
 11175  002728                     u10117:
 11176  002728  2EE8               	decfsz	wreg,f,c
 11177  00272A  D7FE               	bra	u10117
 11178  00272C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11179  00272E  D7FC               	bra	u10117
 11180  002730  F000               	nop	
 11181  002732  0E80               	movlw	128
 11182  002734  ECDF  F02B         	call	_lcdInst
 11183                           
 11184                           ;Test.c: 137: printf("TST: IR SNSR");
 11185  002738  0E3F               	movlw	low STR_79
 11186  00273A  0100               	movlb	0	; () banked
 11187  00273C  6F8E               	movwf	printf@f& (0+255),b
 11188  00273E  0EFF               	movlw	high STR_79
 11189  002740  0100               	movlb	0	; () banked
 11190  002742  6F8F               	movwf	(printf@f+1)& (0+255),b
 11191  002744  ECC1  F00B         	call	_printf	;wreg free
 11192                           
 11193                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 11194  002748  0E05               	movlw	5
 11195  00274A  0100               	movlb	0	; () banked
 11196  00274C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11197  00274E  0E0F               	movlw	15
 11198  002750  0100               	movlb	0	; () banked
 11199  002752  6FAB               	movwf	??_sensorTest& (0+255),b
 11200  002754  0EF1               	movlw	241
 11201  002756                     u10127:
 11202  002756  2EE8               	decfsz	wreg,f,c
 11203  002758  D7FE               	bra	u10127
 11204  00275A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11205  00275C  D7FC               	bra	u10127
 11206  00275E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11207  002760  D7FA               	bra	u10127
 11208                           
 11209                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11210  002762  8A8B               	bsf	3979,5,c	;volatile
 11211                           
 11212                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11213  002764  D05C               	goto	l7964
 11214  002766                     l7946:
 11215                           
 11216                           ;Test.c: 142: readADC(0);
 11217  002766  0E00               	movlw	0
 11218  002768  ECD5  F02A         	call	_readADC
 11219                           
 11220                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11221  00276C  50C3               	movf	4035,w,c	;volatile
 11222  00276E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11223  002772  0100               	movlb	0	; () banked
 11224  002774  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11225  002776  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11226  00277A  0100               	movlb	0	; () banked
 11227  00277C  6BAB               	clrf	??_sensorTest& (0+255),b
 11228  00277E  0100               	movlb	0	; () banked
 11229  002780  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11230  002782  0100               	movlb	0	; () banked
 11231  002784  6FAD               	movwf	sensorTest@res& (0+255),b
 11232  002786  0100               	movlb	0	; () banked
 11233  002788  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11234  00278A  0100               	movlb	0	; () banked
 11235  00278C  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11239  00278E  0100               	movlb	0	; () banked
 11240  002790  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11241  002792  D00A               	goto	u6640
 11242  002794  0E21               	movlw	33
 11243  002796  0100               	movlb	0	; () banked
 11244  002798  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11245  00279A  0E03               	movlw	3
 11246  00279C  0100               	movlb	0	; () banked
 11247  00279E  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11248  0027A0  A0D8               	btfss	status,0,c
 11249  0027A2  D002               	goto	u6640
 11250  0027A4  0E01               	movlw	1
 11251  0027A6  D001               	goto	u6650
 11252  0027A8                     u6640:
 11253  0027A8  0E00               	movlw	0
 11254  0027AA                     u6650:
 11255  0027AA  0100               	movlb	0	; () banked
 11256  0027AC  6FE6               	movwf	_IR_signal& (0+255),b
 11257  0027AE  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11258                           
 11259                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11260  0027B0  0E01               	movlw	1
 11261  0027B2  ECDF  F02B         	call	_lcdInst
 11262  0027B6  0E68               	movlw	104
 11263  0027B8  0100               	movlb	0	; () banked
 11264  0027BA  6FAB               	movwf	??_sensorTest& (0+255),b
 11265  0027BC  0EE4               	movlw	228
 11266  0027BE                     u10137:
 11267  0027BE  2EE8               	decfsz	wreg,f,c
 11268  0027C0  D7FE               	bra	u10137
 11269  0027C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11270  0027C4  D7FC               	bra	u10137
 11271  0027C6  F000               	nop	
 11272  0027C8  0E80               	movlw	128
 11273  0027CA  ECDF  F02B         	call	_lcdInst
 11274                           
 11275                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11276  0027CE  0E64               	movlw	low STR_80
 11277  0027D0  0100               	movlb	0	; () banked
 11278  0027D2  6F8E               	movwf	printf@f& (0+255),b
 11279  0027D4  0EFE               	movlw	high STR_80
 11280  0027D6  0100               	movlb	0	; () banked
 11281  0027D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11282  0027DA  C0E6  F090         	movff	_IR_signal,?_printf+2
 11283  0027DE  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11284  0027E2  ECC1  F00B         	call	_printf	;wreg free
 11285                           
 11286                           ;Test.c: 148: lcdInst(0b11000000);;
 11287  0027E6  0EC0               	movlw	192
 11288  0027E8  ECDF  F02B         	call	_lcdInst
 11289                           
 11290                           ;Test.c: 149: printf("%d", res);
 11291  0027EC  0E20               	movlw	low (STR_27+14)
 11292  0027EE  0100               	movlb	0	; () banked
 11293  0027F0  6F8E               	movwf	printf@f& (0+255),b
 11294  0027F2  0EFE               	movlw	high (STR_27+14)
 11295  0027F4  0100               	movlb	0	; () banked
 11296  0027F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11297  0027F8  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11298  0027FC  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11299  002800  ECC1  F00B         	call	_printf	;wreg free
 11300                           
 11301                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11302  002804  0E05               	movlw	5
 11303  002806  0100               	movlb	0	; () banked
 11304  002808  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11305  00280A  0E0F               	movlw	15
 11306  00280C  0100               	movlb	0	; () banked
 11307  00280E  6FAB               	movwf	??_sensorTest& (0+255),b
 11308  002810  0EF1               	movlw	241
 11309  002812                     u10147:
 11310  002812  2EE8               	decfsz	wreg,f,c
 11311  002814  D7FE               	bra	u10147
 11312  002816  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11313  002818  D7FC               	bra	u10147
 11314  00281A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11315  00281C  D7FA               	bra	u10147
 11316  00281E                     l7964:
 11317  00281E  A281               	btfss	3969,1,c	;volatile
 11318  002820  D7A2               	goto	l7946
 11319                           
 11320                           ;Test.c: 151: }
 11321                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11322  002822  9A8B               	bcf	3979,5,c	;volatile
 11323                           
 11324                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11325  002824  0E01               	movlw	1
 11326  002826  ECDF  F02B         	call	_lcdInst
 11327  00282A  0E68               	movlw	104
 11328  00282C  0100               	movlb	0	; () banked
 11329  00282E  6FAB               	movwf	??_sensorTest& (0+255),b
 11330  002830  0EE4               	movlw	228
 11331  002832                     u10157:
 11332  002832  2EE8               	decfsz	wreg,f,c
 11333  002834  D7FE               	bra	u10157
 11334  002836  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11335  002838  D7FC               	bra	u10157
 11336  00283A  F000               	nop	
 11337  00283C  0E80               	movlw	128
 11338  00283E  ECDF  F02B         	call	_lcdInst
 11339                           
 11340                           ;Test.c: 161: printf("TST: MAGNETISM");
 11341  002842  0E91               	movlw	low STR_82
 11342  002844  0100               	movlb	0	; () banked
 11343  002846  6F8E               	movwf	printf@f& (0+255),b
 11344  002848  0EFE               	movlw	high STR_82
 11345  00284A  0100               	movlb	0	; () banked
 11346  00284C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11347  00284E  ECC1  F00B         	call	_printf	;wreg free
 11348                           
 11349                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11350  002852  0E05               	movlw	5
 11351  002854  0100               	movlb	0	; () banked
 11352  002856  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11353  002858  0E0F               	movlw	15
 11354  00285A  0100               	movlb	0	; () banked
 11355  00285C  6FAB               	movwf	??_sensorTest& (0+255),b
 11356  00285E  0EF1               	movlw	241
 11357  002860                     u10167:
 11358  002860  2EE8               	decfsz	wreg,f,c
 11359  002862  D7FE               	bra	u10167
 11360  002864  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11361  002866  D7FC               	bra	u10167
 11362  002868  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11363  00286A  D7FA               	bra	u10167
 11364                           
 11365                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11366  00286C  D021               	goto	l7982
 11367  00286E                     l7976:
 11368                           
 11369                           ;Test.c: 164: readMAG();
 11370  00286E  EC7A  F028         	call	_readMAG	;wreg free
 11371                           
 11372                           ;Test.c: 165: lcdInst(0b10000000);;
 11373  002872  0E80               	movlw	128
 11374  002874  ECDF  F02B         	call	_lcdInst
 11375                           
 11376                           ;Test.c: 166: lcdInst(0b11000000);;
 11377  002878  0EC0               	movlw	192
 11378  00287A  ECDF  F02B         	call	_lcdInst
 11379                           
 11380                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11381  00287E  0E34               	movlw	low STR_83
 11382  002880  0100               	movlb	0	; () banked
 11383  002882  6F8E               	movwf	printf@f& (0+255),b
 11384  002884  0EFE               	movlw	high STR_83
 11385  002886  0100               	movlb	0	; () banked
 11386  002888  6F8F               	movwf	(printf@f+1)& (0+255),b
 11387  00288A  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11388  00288E  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11389  002892  ECC1  F00B         	call	_printf	;wreg free
 11390                           
 11391                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11392  002896  0E05               	movlw	5
 11393  002898  0100               	movlb	0	; () banked
 11394  00289A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11395  00289C  0E0F               	movlw	15
 11396  00289E  0100               	movlb	0	; () banked
 11397  0028A0  6FAB               	movwf	??_sensorTest& (0+255),b
 11398  0028A2  0EF1               	movlw	241
 11399  0028A4                     u10177:
 11400  0028A4  2EE8               	decfsz	wreg,f,c
 11401  0028A6  D7FE               	bra	u10177
 11402  0028A8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11403  0028AA  D7FC               	bra	u10177
 11404  0028AC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11405  0028AE  D7FA               	bra	u10177
 11406  0028B0                     l7982:
 11407  0028B0  A281               	btfss	3969,1,c	;volatile
 11408  0028B2  D7DD               	goto	l7976
 11409                           
 11410                           ;Test.c: 169: }
 11411                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11412  0028B4  0E01               	movlw	1
 11413  0028B6  ECDF  F02B         	call	_lcdInst
 11414  0028BA  0E68               	movlw	104
 11415  0028BC  0100               	movlb	0	; () banked
 11416  0028BE  6FAB               	movwf	??_sensorTest& (0+255),b
 11417  0028C0  0EE4               	movlw	228
 11418  0028C2                     u10187:
 11419  0028C2  2EE8               	decfsz	wreg,f,c
 11420  0028C4  D7FE               	bra	u10187
 11421  0028C6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11422  0028C8  D7FC               	bra	u10187
 11423  0028CA  F000               	nop	
 11424  0028CC  0E80               	movlw	128
 11425  0028CE  ECDF  F02B         	call	_lcdInst
 11426                           
 11427                           ;Test.c: 175: printf("TST: COND");
 11428  0028D2  0E86               	movlw	low STR_84
 11429  0028D4  0100               	movlb	0	; () banked
 11430  0028D6  6F8E               	movwf	printf@f& (0+255),b
 11431  0028D8  0EFF               	movlw	high STR_84
 11432  0028DA  0100               	movlb	0	; () banked
 11433  0028DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11434  0028DE  ECC1  F00B         	call	_printf	;wreg free
 11435                           
 11436                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11437  0028E2  0E05               	movlw	5
 11438  0028E4  0100               	movlb	0	; () banked
 11439  0028E6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11440  0028E8  0E0F               	movlw	15
 11441  0028EA  0100               	movlb	0	; () banked
 11442  0028EC  6FAB               	movwf	??_sensorTest& (0+255),b
 11443  0028EE  0EF1               	movlw	241
 11444  0028F0                     u10197:
 11445  0028F0  2EE8               	decfsz	wreg,f,c
 11446  0028F2  D7FE               	bra	u10197
 11447  0028F4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11448  0028F6  D7FC               	bra	u10197
 11449  0028F8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11450  0028FA  D7FA               	bra	u10197
 11451  0028FC                     l7994:
 11452                           
 11453                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11454  0028FC  0E01               	movlw	1
 11455  0028FE  ECDF  F02B         	call	_lcdInst
 11456  002902  0E68               	movlw	104
 11457  002904  0100               	movlb	0	; () banked
 11458  002906  6FAB               	movwf	??_sensorTest& (0+255),b
 11459  002908  0EE4               	movlw	228
 11460  00290A                     u10207:
 11461  00290A  2EE8               	decfsz	wreg,f,c
 11462  00290C  D7FE               	bra	u10207
 11463  00290E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11464  002910  D7FC               	bra	u10207
 11465  002912  F000               	nop	
 11466  002914  0E80               	movlw	128
 11467  002916  ECDF  F02B         	call	_lcdInst
 11468                           
 11469                           ;Test.c: 179: printf("TST: COND");
 11470  00291A  0E86               	movlw	low STR_84
 11471  00291C  0100               	movlb	0	; () banked
 11472  00291E  6F8E               	movwf	printf@f& (0+255),b
 11473  002920  0EFF               	movlw	high STR_84
 11474  002922  0100               	movlb	0	; () banked
 11475  002924  6F8F               	movwf	(printf@f+1)& (0+255),b
 11476  002926  ECC1  F00B         	call	_printf	;wreg free
 11477                           
 11478                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11479  00292A  D01B               	goto	l8006
 11480  00292C                     l8002:
 11481                           
 11482                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11483  00292C  0E80               	movlw	128
 11484  00292E  ECDF  F02B         	call	_lcdInst
 11485  002932  0EC0               	movlw	192
 11486  002934  ECDF  F02B         	call	_lcdInst
 11487                           
 11488                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11489  002938  0EA4               	movlw	low STR_86
 11490  00293A  0100               	movlb	0	; () banked
 11491  00293C  6F8E               	movwf	printf@f& (0+255),b
 11492  00293E  0EFF               	movlw	high STR_86
 11493  002940  0100               	movlb	0	; () banked
 11494  002942  6F8F               	movwf	(printf@f+1)& (0+255),b
 11495  002944  A480               	btfss	3968,2,c	;volatile
 11496  002946  D004               	goto	u6680
 11497  002948  0100               	movlb	0	; () banked
 11498  00294A  6BAB               	clrf	??_sensorTest& (0+255),b
 11499  00294C  2BAB               	incf	??_sensorTest& (0+255),f,b
 11500  00294E  D002               	goto	u6688
 11501  002950                     u6680:
 11502  002950  0100               	movlb	0	; () banked
 11503  002952  6BAB               	clrf	??_sensorTest& (0+255),b
 11504  002954                     u6688:
 11505  002954  0100               	movlb	0	; () banked
 11506  002956  51AB               	movf	??_sensorTest& (0+255),w,b
 11507  002958  0100               	movlb	0	; () banked
 11508  00295A  6F90               	movwf	(?_printf+2)& (0+255),b
 11509  00295C  6B91               	clrf	(?_printf+3)& (0+255),b
 11510  00295E  ECC1  F00B         	call	_printf	;wreg free
 11511  002962                     l8006:
 11512  002962  A281               	btfss	3969,1,c	;volatile
 11513  002964  D7E3               	goto	l8002
 11514                           
 11515                           ;Test.c: 186: }
 11516                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11517  002966  3881               	swapf	3969,w,c	;volatile
 11518  002968  0B0F               	andlw	15
 11519  00296A  0A0F               	xorlw	15
 11520  00296C  B4D8               	btfsc	status,2,c
 11521  00296E  0012               	return	
 11522                           
 11523                           ;Test.c: 190: else{
 11524                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11525                           
 11526                           ;Test.c: 189: }
 11527                           
 11528                           ;Test.c: 188: break;
 11529  002970  8689               	bsf	3977,3,c	;volatile
 11530                           
 11531                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11532  002972  D01B               	goto	l8018
 11533  002974                     l8014:
 11534                           
 11535                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11536  002974  0E80               	movlw	128
 11537  002976  ECDF  F02B         	call	_lcdInst
 11538  00297A  0EC0               	movlw	192
 11539  00297C  ECDF  F02B         	call	_lcdInst
 11540                           
 11541                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11542  002980  0EA4               	movlw	low STR_86
 11543  002982  0100               	movlb	0	; () banked
 11544  002984  6F8E               	movwf	printf@f& (0+255),b
 11545  002986  0EFF               	movlw	high STR_86
 11546  002988  0100               	movlb	0	; () banked
 11547  00298A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11548  00298C  A480               	btfss	3968,2,c	;volatile
 11549  00298E  D004               	goto	u6710
 11550  002990  0100               	movlb	0	; () banked
 11551  002992  6BAB               	clrf	??_sensorTest& (0+255),b
 11552  002994  2BAB               	incf	??_sensorTest& (0+255),f,b
 11553  002996  D002               	goto	u6718
 11554  002998                     u6710:
 11555  002998  0100               	movlb	0	; () banked
 11556  00299A  6BAB               	clrf	??_sensorTest& (0+255),b
 11557  00299C                     u6718:
 11558  00299C  0100               	movlb	0	; () banked
 11559  00299E  51AB               	movf	??_sensorTest& (0+255),w,b
 11560  0029A0  0100               	movlb	0	; () banked
 11561  0029A2  6F90               	movwf	(?_printf+2)& (0+255),b
 11562  0029A4  6B91               	clrf	(?_printf+3)& (0+255),b
 11563  0029A6  ECC1  F00B         	call	_printf	;wreg free
 11564  0029AA                     l8018:
 11565  0029AA  B281               	btfsc	3969,1,c	;volatile
 11566  0029AC  D7E3               	goto	l8014
 11567                           
 11568                           ;Test.c: 196: }
 11569                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11570  0029AE  9689               	bcf	3977,3,c	;volatile
 11571  0029B0  D7A5               	goto	l7994
 11572  0029B2                     __end_of_sensorTest:
 11573                           	opt stack 0
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           intcon2	equ	0xFF1
 11582                           intcon3	equ	0xFF0
 11583                           postinc0	equ	0xFEE
 11584                           wreg	equ	0xFE8
 11585                           postdec1	equ	0xFE5
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594 ;; *************** function _readMAG *****************
 11595 ;; Defined at:
 11596 ;;		line 29 in file "ADCFunctionality.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;		None
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;  res             2    4[BANK0 ] int 
 11601 ;; Return value:  Size  Location     Type
 11602 ;;                  1    wreg      void 
 11603 ;; Registers used:
 11604 ;;		wreg, status,2, status,0, cstack
 11605 ;; Tracked objects:
 11606 ;;		On entry : 0/0
 11607 ;;		On exit  : 0/0
 11608 ;;		Unchanged: 0/0
 11609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;Total ram usage:        4 bytes
 11615 ;; Hardware stack levels used:    1
 11616 ;; Hardware stack levels required when called:    8
 11617 ;; This function calls:
 11618 ;;		_readADC
 11619 ;; This function is called by:
 11620 ;;		_getMAG
 11621 ;;		_sensorTest
 11622 ;; This function uses a non-reentrant model
 11623 ;;
 11624                           
 11625                           	psect	text37
 11626  0050F4                     __ptext37:
 11627                           	opt stack 0
 11628  0050F4                     _readMAG:
 11629                           	opt stack 19
 11630                           
 11631                           ;ADCFunctionality.c: 30: readADC(1);
 11632                           
 11633                           ;incstack = 0
 11634  0050F4  0E01               	movlw	1
 11635  0050F6  ECD5  F02A         	call	_readADC
 11636                           
 11637                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11638  0050FA  50C3               	movf	4035,w,c	;volatile
 11639  0050FC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11640  005100  0100               	movlb	0	; () banked
 11641  005102  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11642  005104  C082  F083         	movff	??_readMAG,??_readMAG+1
 11643  005108  0100               	movlb	0	; () banked
 11644  00510A  6B82               	clrf	??_readMAG& (0+255),b
 11645  00510C  0100               	movlb	0	; () banked
 11646  00510E  1182               	iorwf	??_readMAG& (0+255),w,b
 11647  005110  0100               	movlb	0	; () banked
 11648  005112  6F84               	movwf	readMAG@res& (0+255),b
 11649  005114  0100               	movlb	0	; () banked
 11650  005116  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11651  005118  0100               	movlb	0	; () banked
 11652  00511A  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11653                           
 11654                           ; BSR set to: 0
 11655                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11656  00511C  0100               	movlb	0	; () banked
 11657  00511E  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11658  005120  D008               	goto	u4981
 11659  005122  0100               	movlb	0	; () banked
 11660  005124  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11661  005126  E107               	bnz	u4980
 11662  005128  0E96               	movlw	150
 11663  00512A  0100               	movlb	0	; () banked
 11664  00512C  5D84               	subwf	readMAG@res& (0+255),w,b
 11665  00512E  B0D8               	btfsc	status,0,c
 11666  005130  D002               	goto	u4980
 11667  005132                     u4981:
 11668  005132  0E01               	movlw	1
 11669  005134  D001               	goto	u4990
 11670  005136                     u4980:
 11671  005136  0E00               	movlw	0
 11672  005138                     u4990:
 11673  005138  0100               	movlb	0	; () banked
 11674  00513A  6FE8               	movwf	_MAG_signal& (0+255),b
 11675  00513C  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11676                           
 11677                           ; BSR set to: 0
 11678  00513E  0012               	return		;funcret
 11679  005140                     __end_of_readMAG:
 11680                           	opt stack 0
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodh	equ	0xFF4
 11686                           prodl	equ	0xFF3
 11687                           intcon	equ	0xFF2
 11688                           intcon2	equ	0xFF1
 11689                           intcon3	equ	0xFF0
 11690                           postinc0	equ	0xFEE
 11691                           wreg	equ	0xFE8
 11692                           postdec1	equ	0xFE5
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           fsr2h	equ	0xFDA
 11698                           fsr2l	equ	0xFD9
 11699                           status	equ	0xFD8
 11700                           
 11701 ;; *************** function _arm *****************
 11702 ;; Defined at:
 11703 ;;		line 649 in file "Test.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;		None
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;  on              2   44[BANK0 ] int 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  1    wreg      void 
 11710 ;; Registers used:
 11711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;Total ram usage:        3 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:   10
 11724 ;; This function calls:
 11725 ;;		_lcdInst
 11726 ;;		_printf
 11727 ;;		_stopSignals
 11728 ;; This function is called by:
 11729 ;;		_Test
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text38
 11734  00411E                     __ptext38:
 11735                           	opt stack 0
 11736  00411E                     _arm:
 11737                           	opt stack 19
 11738                           
 11739                           ;Test.c: 650: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;incstack = 0
 11743  00411E  0E01               	movlw	1
 11744  004120  ECDF  F02B         	call	_lcdInst
 11745  004124  0E68               	movlw	104
 11746  004126  0100               	movlb	0	; () banked
 11747  004128  6FAB               	movwf	??_arm& (0+255),b
 11748  00412A  0EE4               	movlw	228
 11749  00412C                     u10217:
 11750  00412C  2EE8               	decfsz	wreg,f,c
 11751  00412E  D7FE               	bra	u10217
 11752  004130  2FAB               	decfsz	??_arm& (0+255),f,b
 11753  004132  D7FC               	bra	u10217
 11754  004134  F000               	nop	
 11755  004136  0E80               	movlw	128
 11756  004138  ECDF  F02B         	call	_lcdInst
 11757                           
 11758                           ;Test.c: 651: printf("D WILL RETURN   ");
 11759  00413C  0EF2               	movlw	low STR_118
 11760  00413E  0100               	movlb	0	; () banked
 11761  004140  6F8E               	movwf	printf@f& (0+255),b
 11762  004142  0EFB               	movlw	high STR_118
 11763  004144  0100               	movlb	0	; () banked
 11764  004146  6F8F               	movwf	(printf@f+1)& (0+255),b
 11765  004148  ECC1  F00B         	call	_printf	;wreg free
 11766                           
 11767                           ;Test.c: 652: lcdInst(0b11000000);;
 11768  00414C  0EC0               	movlw	192
 11769  00414E  ECDF  F02B         	call	_lcdInst
 11770                           
 11771                           ;Test.c: 653: printf("ELSE TOGGLES ARM");
 11772  004152  0EAD               	movlw	low STR_127
 11773  004154  0100               	movlb	0	; () banked
 11774  004156  6F8E               	movwf	printf@f& (0+255),b
 11775  004158  0EFC               	movlw	high STR_127
 11776  00415A  0100               	movlb	0	; () banked
 11777  00415C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11778  00415E  ECC1  F00B         	call	_printf	;wreg free
 11779                           
 11780                           ;Test.c: 655: (INTCONbits.GIE = 1);
 11781  004162  8EF2               	bsf	intcon,7,c	;volatile
 11782                           
 11783                           ;Test.c: 656: machine_state = Sorting_state;
 11784  004164  0E01               	movlw	1
 11785  004166  0100               	movlb	0	; () banked
 11786  004168  6FFC               	movwf	_machine_state& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;Test.c: 657: f_arm_position = 2;
 11790  00416A  0E00               	movlw	0
 11791  00416C  0100               	movlb	0	; () banked
 11792  00416E  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11793  004170  0E02               	movlw	2
 11794  004172  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11795                           
 11796                           ; BSR set to: 0
 11797                           ;Test.c: 658: timer2_counter = 0;
 11798  004174  0E00               	movlw	0
 11799  004176  6E74               	movwf	_timer2_counter+1,c	;volatile
 11800  004178  0E00               	movlw	0
 11801  00417A  6E73               	movwf	_timer2_counter,c	;volatile
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;Test.c: 659: LATBbits.LATB3 = 1;
 11805  00417C  868A               	bsf	3978,3,c	;volatile
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;Test.c: 660: TMR2ON = 1;
 11809  00417E  84CA               	bsf	4042,2,c	;volatile
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;Test.c: 661: was_low_2 = 0;
 11813  004180  0E00               	movlw	0
 11814  004182  6E7A               	movwf	_was_low_2+1,c	;volatile
 11815  004184  0E00               	movlw	0
 11816  004186  6E79               	movwf	_was_low_2,c	;volatile
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;Test.c: 663: int on = 0;
 11820  004188  0E00               	movlw	0
 11821  00418A  0100               	movlb	0	; () banked
 11822  00418C  6FAD               	movwf	(arm@on+1)& (0+255),b
 11823  00418E  0E00               	movlw	0
 11824  004190  6FAC               	movwf	arm@on& (0+255),b
 11825  004192                     l8472:
 11826                           
 11827                           ;Test.c: 665: if(on){
 11828  004192  0100               	movlb	0	; () banked
 11829  004194  51AC               	movf	arm@on& (0+255),w,b
 11830  004196  0100               	movlb	0	; () banked
 11831  004198  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11832  00419A  B4D8               	btfsc	status,2,c
 11833  00419C  D01C               	goto	l8484
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;Test.c: 666: on = !on;
 11837  00419E  0100               	movlb	0	; () banked
 11838  0041A0  51AC               	movf	arm@on& (0+255),w,b
 11839  0041A2  0100               	movlb	0	; () banked
 11840  0041A4  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11841  0041A6  A4D8               	btfss	status,2,c
 11842  0041A8  D002               	goto	u7300
 11843  0041AA  0E01               	movlw	1
 11844  0041AC  D001               	goto	u7310
 11845  0041AE                     u7300:
 11846  0041AE  0E00               	movlw	0
 11847  0041B0                     u7310:
 11848  0041B0  0100               	movlb	0	; () banked
 11849  0041B2  6FAC               	movwf	arm@on& (0+255),b
 11850  0041B4  6BAD               	clrf	(arm@on+1)& (0+255),b
 11851                           
 11852                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 11853  0041B6  D005               	goto	l8478
 11854  0041B8                     l8476:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;Test.c: 668: f_arm_position = 0;
 11858  0041B8  0E00               	movlw	0
 11859  0041BA  0100               	movlb	0	; () banked
 11860  0041BC  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11861  0041BE  0E00               	movlw	0
 11862  0041C0  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11863  0041C2                     l8478:
 11864                           
 11865                           ; BSR set to: 0
 11866  0041C2  A281               	btfss	3969,1,c	;volatile
 11867  0041C4  D7F9               	goto	l8476
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;Test.c: 669: }
 11871                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 11872                           
 11873                           ; BSR set to: 0
 11874  0041C6  3881               	swapf	3969,w,c	;volatile
 11875  0041C8  0B0F               	andlw	15
 11876  0041CA  0A0F               	xorlw	15
 11877  0041CC  B4D8               	btfsc	status,2,c
 11878  0041CE  D01F               	goto	l1449
 11879  0041D0                     l1450:
 11880  0041D0  A281               	btfss	3969,1,c	;volatile
 11881  0041D2  D7DF               	goto	l8472
 11882  0041D4  D7FD               	goto	l1450
 11883  0041D6                     l8484:
 11884                           
 11885                           ;Test.c: 675: else{
 11886                           ;Test.c: 676: on = !on;
 11887  0041D6  0100               	movlb	0	; () banked
 11888  0041D8  51AC               	movf	arm@on& (0+255),w,b
 11889  0041DA  0100               	movlb	0	; () banked
 11890  0041DC  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11891  0041DE  A4D8               	btfss	status,2,c
 11892  0041E0  D002               	goto	u7350
 11893  0041E2  0E01               	movlw	1
 11894  0041E4  D001               	goto	u7360
 11895  0041E6                     u7350:
 11896  0041E6  0E00               	movlw	0
 11897  0041E8                     u7360:
 11898  0041E8  0100               	movlb	0	; () banked
 11899  0041EA  6FAC               	movwf	arm@on& (0+255),b
 11900  0041EC  6BAD               	clrf	(arm@on+1)& (0+255),b
 11901                           
 11902                           ;Test.c: 677: while(PORTBbits.RB1 == 0){
 11903  0041EE  D005               	goto	l8488
 11904  0041F0                     l8486:
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;Test.c: 678: f_arm_position = 1;
 11908  0041F0  0E00               	movlw	0
 11909  0041F2  0100               	movlb	0	; () banked
 11910  0041F4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11911  0041F6  0E01               	movlw	1
 11912  0041F8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11913  0041FA                     l8488:
 11914                           
 11915                           ; BSR set to: 0
 11916  0041FA  A281               	btfss	3969,1,c	;volatile
 11917  0041FC  D7F9               	goto	l8486
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;Test.c: 679: }
 11921                           ;Test.c: 680: if(PORTB >> 4 == 0b1111){
 11922                           
 11923                           ; BSR set to: 0
 11924  0041FE  3881               	swapf	3969,w,c	;volatile
 11925  004200  0B0F               	andlw	15
 11926  004202  0A0F               	xorlw	15
 11927  004204  B4D8               	btfsc	status,2,c
 11928  004206  D003               	goto	l1449
 11929  004208                     l1458:
 11930  004208  A281               	btfss	3969,1,c	;volatile
 11931  00420A  D7C3               	goto	l8472
 11932  00420C  D7FD               	goto	l1458
 11933  00420E                     l1449:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;Test.c: 684: }
 11937                           ;Test.c: 685: }
 11938                           ;Test.c: 687: (INTCONbits.GIE = 0);
 11939  00420E  9EF2               	bcf	intcon,7,c	;volatile
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;Test.c: 688: stopSignals();
 11943  004210  EC91  F02B         	call	_stopSignals	;wreg free
 11944                           
 11945                           ;Test.c: 689: machine_state = Testing_state;
 11946  004214  0E03               	movlw	3
 11947  004216  0100               	movlb	0	; () banked
 11948  004218  6FFC               	movwf	_machine_state& (0+255),b
 11949                           
 11950                           ; BSR set to: 0
 11951  00421A  0012               	return		;funcret
 11952  00421C                     __end_of_arm:
 11953                           	opt stack 0
 11954                           tblptru	equ	0xFF8
 11955                           tblptrh	equ	0xFF7
 11956                           tblptrl	equ	0xFF6
 11957                           tablat	equ	0xFF5
 11958                           prodh	equ	0xFF4
 11959                           prodl	equ	0xFF3
 11960                           intcon	equ	0xFF2
 11961                           intcon2	equ	0xFF1
 11962                           intcon3	equ	0xFF0
 11963                           postinc0	equ	0xFEE
 11964                           wreg	equ	0xFE8
 11965                           postdec1	equ	0xFE5
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           fsr2h	equ	0xFDA
 11971                           fsr2l	equ	0xFD9
 11972                           status	equ	0xFD8
 11973                           
 11974 ;; *************** function _algorithmTest *****************
 11975 ;; Defined at:
 11976 ;;		line 79 in file "Test.c"
 11977 ;; Parameters:    Size  Location     Type
 11978 ;;		None
 11979 ;; Auto vars:     Size  Location     Type
 11980 ;;		None
 11981 ;; Return value:  Size  Location     Type
 11982 ;;                  1    wreg      void 
 11983 ;; Registers used:
 11984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11985 ;; Tracked objects:
 11986 ;;		On entry : 0/0
 11987 ;;		On exit  : 0/0
 11988 ;;		Unchanged: 0/0
 11989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;Total ram usage:        2 bytes
 11995 ;; Hardware stack levels used:    1
 11996 ;; Hardware stack levels required when called:   10
 11997 ;; This function calls:
 11998 ;;		_lcdInst
 11999 ;;		_printf
 12000 ;; This function is called by:
 12001 ;;		_Test
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text39
 12006  0043E6                     __ptext39:
 12007                           	opt stack 0
 12008  0043E6                     _algorithmTest:
 12009                           	opt stack 19
 12010                           
 12011                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12012                           
 12013                           ; BSR set to: 0
 12014                           ;incstack = 0
 12015  0043E6  0E01               	movlw	1
 12016  0043E8  ECDF  F02B         	call	_lcdInst
 12017  0043EC  0E68               	movlw	104
 12018  0043EE  0100               	movlb	0	; () banked
 12019  0043F0  6FAB               	movwf	??_algorithmTest& (0+255),b
 12020  0043F2  0EE4               	movlw	228
 12021  0043F4                     u10227:
 12022  0043F4  2EE8               	decfsz	wreg,f,c
 12023  0043F6  D7FE               	bra	u10227
 12024  0043F8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12025  0043FA  D7FC               	bra	u10227
 12026  0043FC  F000               	nop	
 12027  0043FE  0E80               	movlw	128
 12028  004400  ECDF  F02B         	call	_lcdInst
 12029                           
 12030                           ;Test.c: 82: printf("ALGORITHM TEST");
 12031  004404  0EDC               	movlw	low STR_70
 12032  004406  0100               	movlb	0	; () banked
 12033  004408  6F8E               	movwf	printf@f& (0+255),b
 12034  00440A  0EFE               	movlw	high STR_70
 12035  00440C  0100               	movlb	0	; () banked
 12036  00440E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12037  004410  ECC1  F00B         	call	_printf	;wreg free
 12038                           
 12039                           ;Test.c: 83: lcdInst(0b11000000);;
 12040  004414  0EC0               	movlw	192
 12041  004416  ECDF  F02B         	call	_lcdInst
 12042                           
 12043                           ;Test.c: 84: printf("PUSH TO START");
 12044  00441A  0E15               	movlw	low STR_71
 12045  00441C  0100               	movlb	0	; () banked
 12046  00441E  6F8E               	movwf	printf@f& (0+255),b
 12047  004420  0EFF               	movlw	high STR_71
 12048  004422  0100               	movlb	0	; () banked
 12049  004424  6F8F               	movwf	(printf@f+1)& (0+255),b
 12050  004426  ECC1  F00B         	call	_printf	;wreg free
 12051                           
 12052                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 12053  00442A  0E05               	movlw	5
 12054  00442C  0100               	movlb	0	; () banked
 12055  00442E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 12056  004430  0E0F               	movlw	15
 12057  004432  0100               	movlb	0	; () banked
 12058  004434  6FAB               	movwf	??_algorithmTest& (0+255),b
 12059  004436  0EF1               	movlw	241
 12060  004438                     u10237:
 12061  004438  2EE8               	decfsz	wreg,f,c
 12062  00443A  D7FE               	bra	u10237
 12063  00443C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12064  00443E  D7FC               	bra	u10237
 12065  004440  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 12066  004442  D7FA               	bra	u10237
 12067  004444                     l1237:
 12068  004444  A281               	btfss	3969,1,c	;volatile
 12069  004446  D7FE               	goto	l1237
 12070  004448                     l1240:
 12071  004448  B281               	btfsc	3969,1,c	;volatile
 12072  00444A  D7FE               	goto	l1240
 12073                           
 12074                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12075  00444C  0E01               	movlw	1
 12076  00444E  ECDF  F02B         	call	_lcdInst
 12077  004452  0E68               	movlw	104
 12078  004454  0100               	movlb	0	; () banked
 12079  004456  6FAB               	movwf	??_algorithmTest& (0+255),b
 12080  004458  0EE4               	movlw	228
 12081  00445A                     u10247:
 12082  00445A  2EE8               	decfsz	wreg,f,c
 12083  00445C  D7FE               	bra	u10247
 12084  00445E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12085  004460  D7FC               	bra	u10247
 12086  004462  F000               	nop	
 12087  004464  0E80               	movlw	128
 12088  004466  ECDF  F02B         	call	_lcdInst
 12089                           
 12090                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 12091  00446A  0E58               	movlw	low STR_72
 12092  00446C  0100               	movlb	0	; () banked
 12093  00446E  6F8E               	movwf	printf@f& (0+255),b
 12094  004470  0EFC               	movlw	high STR_72
 12095  004472  0100               	movlb	0	; () banked
 12096  004474  6F8F               	movwf	(printf@f+1)& (0+255),b
 12097  004476  ECC1  F00B         	call	_printf	;wreg free
 12098                           
 12099                           ;Test.c: 100: printf("ALG2: 12 CANS");
 12100  00447A  0EF9               	movlw	low STR_73
 12101  00447C  0100               	movlb	0	; () banked
 12102  00447E  6F8E               	movwf	printf@f& (0+255),b
 12103  004480  0EFE               	movlw	high STR_73
 12104  004482  0100               	movlb	0	; () banked
 12105  004484  6F8F               	movwf	(printf@f+1)& (0+255),b
 12106  004486  ECC1  F00B         	call	_printf	;wreg free
 12107                           
 12108                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12109  00448A  0E59               	movlw	low STR_74
 12110  00448C  0100               	movlb	0	; () banked
 12111  00448E  6F8E               	movwf	printf@f& (0+255),b
 12112  004490  0EFF               	movlw	high STR_74
 12113  004492  0100               	movlb	0	; () banked
 12114  004494  6F8F               	movwf	(printf@f+1)& (0+255),b
 12115  004496  ECC1  F00B         	call	_printf	;wreg free
 12116                           
 12117                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12118  00449A  0EBE               	movlw	low STR_75
 12119  00449C  0100               	movlb	0	; () banked
 12120  00449E  6F8E               	movwf	printf@f& (0+255),b
 12121  0044A0  0EFE               	movlw	high STR_75
 12122  0044A2  0100               	movlb	0	; () banked
 12123  0044A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12124  0044A6  ECC1  F00B         	call	_printf	;wreg free
 12125                           
 12126                           ;Test.c: 120: printf("ALG5: NO CANS");
 12127  0044AA  0E07               	movlw	low STR_76
 12128  0044AC  0100               	movlb	0	; () banked
 12129  0044AE  6F8E               	movwf	printf@f& (0+255),b
 12130  0044B0  0EFF               	movlw	high STR_76
 12131  0044B2  0100               	movlb	0	; () banked
 12132  0044B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12133  0044B6  ECC1  F00B         	call	_printf	;wreg free
 12134  0044BA  0012               	return		;funcret
 12135  0044BC                     __end_of_algorithmTest:
 12136                           	opt stack 0
 12137                           tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           intcon2	equ	0xFF1
 12145                           intcon3	equ	0xFF0
 12146                           postinc0	equ	0xFEE
 12147                           wreg	equ	0xFE8
 12148                           postdec1	equ	0xFE5
 12149                           fsr1l	equ	0xFE1
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           fsr2h	equ	0xFDA
 12154                           fsr2l	equ	0xFD9
 12155                           status	equ	0xFD8
 12156                           
 12157 ;; *************** function _actuatorTest *****************
 12158 ;; Defined at:
 12159 ;;		line 202 in file "Test.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  i               1   45[BANK0 ] unsigned char 
 12164 ;;  i               1   67[BANK0 ] unsigned char 
 12165 ;;  i               1   66[BANK0 ] unsigned char 
 12166 ;;  i               1   65[BANK0 ] unsigned char 
 12167 ;;  i               1   64[BANK0 ] unsigned char 
 12168 ;;  i               1   63[BANK0 ] unsigned char 
 12169 ;;  i               1   62[BANK0 ] unsigned char 
 12170 ;;  i               1   61[BANK0 ] unsigned char 
 12171 ;;  i               1   60[BANK0 ] unsigned char 
 12172 ;;  i               1   59[BANK0 ] unsigned char 
 12173 ;;  i               1   58[BANK0 ] unsigned char 
 12174 ;;  i               1   57[BANK0 ] unsigned char 
 12175 ;;  i               1   56[BANK0 ] unsigned char 
 12176 ;;  i               1   55[BANK0 ] unsigned char 
 12177 ;;  i               1   54[BANK0 ] unsigned char 
 12178 ;;  i               1   53[BANK0 ] unsigned char 
 12179 ;;  i               1   52[BANK0 ] unsigned char 
 12180 ;;  i               1   51[BANK0 ] unsigned char 
 12181 ;;  i               1   50[BANK0 ] unsigned char 
 12182 ;;  i               1   49[BANK0 ] unsigned char 
 12183 ;;  i               1   48[BANK0 ] unsigned char 
 12184 ;;  i               1   47[BANK0 ] unsigned char 
 12185 ;;  i               1   46[BANK0 ] unsigned char 
 12186 ;;  i               2   68[BANK0 ] int 
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  1    wreg      void 
 12189 ;; Registers used:
 12190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12191 ;; Tracked objects:
 12192 ;;		On entry : 0/0
 12193 ;;		On exit  : 0/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12199 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12200 ;;Total ram usage:       27 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:   10
 12203 ;; This function calls:
 12204 ;;		_lcdInst
 12205 ;;		_printf
 12206 ;;		_updateServoPosition
 12207 ;; This function is called by:
 12208 ;;		_Test
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           	psect	text40
 12213  0008D6                     __ptext40:
 12214                           	opt stack 0
 12215  0008D6                     _actuatorTest:
 12216                           	opt stack 19
 12217                           
 12218                           ;Test.c: 204: int i = 0;
 12219                           
 12220                           ;incstack = 0
 12221  0008D6  0E00               	movlw	0
 12222  0008D8  0100               	movlb	0	; () banked
 12223  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12224  0008DC  0E00               	movlw	0
 12225  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12229  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12233  0008E2  0E01               	movlw	1
 12234  0008E4  ECDF  F02B         	call	_lcdInst
 12235  0008E8  0E68               	movlw	104
 12236  0008EA  0100               	movlb	0	; () banked
 12237  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12238  0008EE  0EE4               	movlw	228
 12239  0008F0                     u10257:
 12240  0008F0  2EE8               	decfsz	wreg,f,c
 12241  0008F2  D7FE               	bra	u10257
 12242  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12243  0008F6  D7FC               	bra	u10257
 12244  0008F8  F000               	nop	
 12245  0008FA  0E80               	movlw	128
 12246  0008FC  ECDF  F02B         	call	_lcdInst
 12247                           
 12248                           ;Test.c: 208: printf("ACTUATORS");
 12249  000900  0E90               	movlw	low STR_88
 12250  000902  0100               	movlb	0	; () banked
 12251  000904  6F8E               	movwf	printf@f& (0+255),b
 12252  000906  0EFF               	movlw	high STR_88
 12253  000908  0100               	movlb	0	; () banked
 12254  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12255  00090C  ECC1  F00B         	call	_printf	;wreg free
 12256                           
 12257                           ;Test.c: 209: lcdInst(0b11000000);;
 12258  000910  0EC0               	movlw	192
 12259  000912  ECDF  F02B         	call	_lcdInst
 12260                           
 12261                           ;Test.c: 210: printf("PUSH TO START");
 12262  000916  0E15               	movlw	low STR_71
 12263  000918  0100               	movlb	0	; () banked
 12264  00091A  6F8E               	movwf	printf@f& (0+255),b
 12265  00091C  0EFF               	movlw	high STR_71
 12266  00091E  0100               	movlb	0	; () banked
 12267  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12268  000922  ECC1  F00B         	call	_printf	;wreg free
 12269                           
 12270                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12271  000926  0E05               	movlw	5
 12272  000928  0100               	movlb	0	; () banked
 12273  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12274  00092C  0E0F               	movlw	15
 12275  00092E  0100               	movlb	0	; () banked
 12276  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12277  000932  0EF1               	movlw	241
 12278  000934                     u10267:
 12279  000934  2EE8               	decfsz	wreg,f,c
 12280  000936  D7FE               	bra	u10267
 12281  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12282  00093A  D7FC               	bra	u10267
 12283  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12284  00093E  D7FA               	bra	u10267
 12285  000940                     l1272:
 12286  000940  A281               	btfss	3969,1,c	;volatile
 12287  000942  D7FE               	goto	l1272
 12288  000944                     l1275:
 12289  000944  B281               	btfsc	3969,1,c	;volatile
 12290  000946  D7FE               	goto	l1275
 12291                           
 12292                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12293  000948  0E01               	movlw	1
 12294  00094A  ECDF  F02B         	call	_lcdInst
 12295  00094E  0E68               	movlw	104
 12296  000950  0100               	movlb	0	; () banked
 12297  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12298  000954  0EE4               	movlw	228
 12299  000956                     u10277:
 12300  000956  2EE8               	decfsz	wreg,f,c
 12301  000958  D7FE               	bra	u10277
 12302  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12303  00095C  D7FC               	bra	u10277
 12304  00095E  F000               	nop	
 12305  000960  0E80               	movlw	128
 12306  000962  ECDF  F02B         	call	_lcdInst
 12307                           
 12308                           ;Test.c: 219: printf("TST: DC MOTORS");
 12309  000966  0ECD               	movlw	low STR_90
 12310  000968  0100               	movlb	0	; () banked
 12311  00096A  6F8E               	movwf	printf@f& (0+255),b
 12312  00096C  0EFE               	movlw	high STR_90
 12313  00096E  0100               	movlb	0	; () banked
 12314  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12315  000972  ECC1  F00B         	call	_printf	;wreg free
 12316                           
 12317                           ;Test.c: 220: lcdInst(0b11000000);;
 12318  000976  0EC0               	movlw	192
 12319  000978  ECDF  F02B         	call	_lcdInst
 12320                           
 12321                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12322  00097C  0EEB               	movlw	low STR_91
 12323  00097E  0100               	movlb	0	; () banked
 12324  000980  6F8E               	movwf	printf@f& (0+255),b
 12325  000982  0EFE               	movlw	high STR_91
 12326  000984  0100               	movlb	0	; () banked
 12327  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12328  000988  ECC1  F00B         	call	_printf	;wreg free
 12329                           
 12330                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12331  00098C  848A               	bsf	3978,2,c	;volatile
 12332                           
 12333                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12334  00098E  0E00               	movlw	0
 12335  000990  0100               	movlb	0	; () banked
 12336  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12337  000994  0E00               	movlw	0
 12338  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12339                           
 12340                           ; BSR set to: 0
 12341  000998  0100               	movlb	0	; () banked
 12342  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12343  00099C  D008               	goto	l8058
 12344  00099E  0100               	movlb	0	; () banked
 12345  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12346  0009A2  E123               	bnz	l1279
 12347  0009A4  0E05               	movlw	5
 12348  0009A6  0100               	movlb	0	; () banked
 12349  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12350  0009AA  B0D8               	btfsc	status,0,c
 12351  0009AC  D01E               	goto	l1279
 12352  0009AE                     l8058:
 12353                           
 12354                           ; BSR set to: 0
 12355  0009AE  0E00               	movlw	0
 12356  0009B0  0100               	movlb	0	; () banked
 12357  0009B2  6FAD               	movwf	actuatorTest@i_1756& (0+255),b
 12358  0009B4                     l8060:
 12359                           
 12360                           ; BSR set to: 0
 12361  0009B4  0E63               	movlw	99
 12362  0009B6  0100               	movlb	0	; () banked
 12363  0009B8  65AD               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12364  0009BA  D001               	goto	l8064
 12365  0009BC  D00C               	goto	l8068
 12366  0009BE                     l8064:
 12367                           
 12368                           ; BSR set to: 0
 12369  0009BE  0E68               	movlw	104
 12370  0009C0  0100               	movlb	0	; () banked
 12371  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12372  0009C4  0EE4               	movlw	228
 12373  0009C6                     u10287:
 12374  0009C6  2EE8               	decfsz	wreg,f,c
 12375  0009C8  D7FE               	bra	u10287
 12376  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12377  0009CC  D7FC               	bra	u10287
 12378  0009CE  F000               	nop	
 12379  0009D0  0100               	movlb	0	; () banked
 12380  0009D2  2BAD               	incf	actuatorTest@i_1756& (0+255),f,b
 12381  0009D4  D7EF               	goto	l8060
 12382  0009D6                     l8068:
 12383                           
 12384                           ; BSR set to: 0
 12385  0009D6  0100               	movlb	0	; () banked
 12386  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12387  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12388                           
 12389                           ; BSR set to: 0
 12390  0009DC  0100               	movlb	0	; () banked
 12391  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12392  0009E0  D7E6               	goto	l8058
 12393  0009E2  0100               	movlb	0	; () banked
 12394  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12395  0009E6  E101               	bnz	u6780
 12396  0009E8  D7DD               	goto	L13
 12397  0009EA                     u6780:
 12398  0009EA                     l1279:
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12402  0009EA  948A               	bcf	3978,2,c	;volatile
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12406  0009EC  0E01               	movlw	1
 12407  0009EE  ECDF  F02B         	call	_lcdInst
 12408  0009F2  0E68               	movlw	104
 12409  0009F4  0100               	movlb	0	; () banked
 12410  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12411  0009F8  0EE4               	movlw	228
 12412  0009FA                     u10297:
 12413  0009FA  2EE8               	decfsz	wreg,f,c
 12414  0009FC  D7FE               	bra	u10297
 12415  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12416  000A00  D7FC               	bra	u10297
 12417  000A02  F000               	nop	
 12418  000A04  0E80               	movlw	128
 12419  000A06  ECDF  F02B         	call	_lcdInst
 12420                           
 12421                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12422  000A0A  0E69               	movlw	low STR_92
 12423  000A0C  0100               	movlb	0	; () banked
 12424  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12425  000A10  0EFC               	movlw	high STR_92
 12426  000A12  0100               	movlb	0	; () banked
 12427  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12428  000A16  ECC1  F00B         	call	_printf	;wreg free
 12429                           
 12430                           ;Test.c: 232: lcdInst(0b11000000);;
 12431  000A1A  0EC0               	movlw	192
 12432  000A1C  ECDF  F02B         	call	_lcdInst
 12433                           
 12434                           ;Test.c: 233: printf("PIN RA3...");
 12435  000A20  0E65               	movlw	low STR_93
 12436  000A22  0100               	movlb	0	; () banked
 12437  000A24  6F8E               	movwf	printf@f& (0+255),b
 12438  000A26  0EFF               	movlw	high STR_93
 12439  000A28  0100               	movlb	0	; () banked
 12440  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12441  000A2C  ECC1  F00B         	call	_printf	;wreg free
 12442                           
 12443                           ;Test.c: 234: for(i=0;i<5;i++){
 12444  000A30  0E00               	movlw	0
 12445  000A32  0100               	movlb	0	; () banked
 12446  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12447  000A36  0E00               	movlw	0
 12448  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12449                           
 12450                           ; BSR set to: 0
 12451  000A3A  0100               	movlb	0	; () banked
 12452  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12453  000A3E  D008               	goto	l1282
 12454  000A40  0100               	movlb	0	; () banked
 12455  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12456  000A44  E12C               	bnz	l1283
 12457  000A46  0E05               	movlw	5
 12458  000A48  0100               	movlb	0	; () banked
 12459  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12460  000A4C  B0D8               	btfsc	status,0,c
 12461  000A4E  D027               	goto	l1283
 12462  000A50                     l1282:
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12466  000A50  8689               	bsf	3977,3,c	;volatile
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12470  000A52  0E0D               	movlw	13
 12471  000A54  0100               	movlb	0	; () banked
 12472  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12473  000A58  0E2D               	movlw	45
 12474  000A5A  0100               	movlb	0	; () banked
 12475  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12476  000A5E  0ED7               	movlw	215
 12477  000A60                     u10307:
 12478  000A60  2EE8               	decfsz	wreg,f,c
 12479  000A62  D7FE               	bra	u10307
 12480  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12481  000A66  D7FC               	bra	u10307
 12482  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12483  000A6A  D7FA               	bra	u10307
 12484  000A6C  D000               	nop2	
 12485                           
 12486                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12487  000A6E  9689               	bcf	3977,3,c	;volatile
 12488                           
 12489                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12490  000A70  0E1D               	movlw	29
 12491  000A72  0100               	movlb	0	; () banked
 12492  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12493  000A76  0E69               	movlw	105
 12494  000A78  0100               	movlb	0	; () banked
 12495  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12496  000A7C  0EA5               	movlw	165
 12497  000A7E                     u10317:
 12498  000A7E  2EE8               	decfsz	wreg,f,c
 12499  000A80  D7FE               	bra	u10317
 12500  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12501  000A84  D7FC               	bra	u10317
 12502  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12503  000A88  D7FA               	bra	u10317
 12504  000A8A  0100               	movlb	0	; () banked
 12505  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12506  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12507  000A90  0100               	movlb	0	; () banked
 12508  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12509  000A94  D7DD               	goto	l1282
 12510  000A96  0100               	movlb	0	; () banked
 12511  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12512  000A9A  E101               	bnz	u6800
 12513  000A9C  D7D4               	goto	L14
 12514  000A9E                     u6800:
 12515  000A9E                     l1283:
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;Test.c: 239: }
 12519                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12520  000A9E  9689               	bcf	3977,3,c	;volatile
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12524  000AA0  0E01               	movlw	1
 12525  000AA2  ECDF  F02B         	call	_lcdInst
 12526  000AA6  0E68               	movlw	104
 12527  000AA8  0100               	movlb	0	; () banked
 12528  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12529  000AAC  0EE4               	movlw	228
 12530  000AAE                     u10327:
 12531  000AAE  2EE8               	decfsz	wreg,f,c
 12532  000AB0  D7FE               	bra	u10327
 12533  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12534  000AB4  D7FC               	bra	u10327
 12535  000AB6  F000               	nop	
 12536  000AB8  0E80               	movlw	128
 12537  000ABA  ECDF  F02B         	call	_lcdInst
 12538                           
 12539                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12540  000ABE  0E7A               	movlw	low STR_94
 12541  000AC0  0100               	movlb	0	; () banked
 12542  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12543  000AC4  0EFC               	movlw	high STR_94
 12544  000AC6  0100               	movlb	0	; () banked
 12545  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12546  000ACA  ECC1  F00B         	call	_printf	;wreg free
 12547                           
 12548                           ;Test.c: 248: lcdInst(0b11000000);;
 12549  000ACE  0EC0               	movlw	192
 12550  000AD0  ECDF  F02B         	call	_lcdInst
 12551                           
 12552                           ;Test.c: 249: printf("PIN RA4...");
 12553  000AD4  0E70               	movlw	low STR_95
 12554  000AD6  0100               	movlb	0	; () banked
 12555  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12556  000ADA  0EFF               	movlw	high STR_95
 12557  000ADC  0100               	movlb	0	; () banked
 12558  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12559  000AE0  ECC1  F00B         	call	_printf	;wreg free
 12560                           
 12561                           ;Test.c: 250: for(i=0;i<5;i++){
 12562  000AE4  0E00               	movlw	0
 12563  000AE6  0100               	movlb	0	; () banked
 12564  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12565  000AEA  0E00               	movlw	0
 12566  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12567                           
 12568                           ; BSR set to: 0
 12569  000AEE  0100               	movlb	0	; () banked
 12570  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12571  000AF2  D008               	goto	l1284
 12572  000AF4  0100               	movlb	0	; () banked
 12573  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12574  000AF8  E12C               	bnz	l1285
 12575  000AFA  0E05               	movlw	5
 12576  000AFC  0100               	movlb	0	; () banked
 12577  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12578  000B00  B0D8               	btfsc	status,0,c
 12579  000B02  D027               	goto	l1285
 12580  000B04                     l1284:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12584  000B04  8889               	bsf	3977,4,c	;volatile
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12588  000B06  0E0D               	movlw	13
 12589  000B08  0100               	movlb	0	; () banked
 12590  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12591  000B0C  0E2D               	movlw	45
 12592  000B0E  0100               	movlb	0	; () banked
 12593  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12594  000B12  0ED7               	movlw	215
 12595  000B14                     u10337:
 12596  000B14  2EE8               	decfsz	wreg,f,c
 12597  000B16  D7FE               	bra	u10337
 12598  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12599  000B1A  D7FC               	bra	u10337
 12600  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12601  000B1E  D7FA               	bra	u10337
 12602  000B20  D000               	nop2	
 12603                           
 12604                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12605  000B22  9889               	bcf	3977,4,c	;volatile
 12606                           
 12607                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12608  000B24  0E1D               	movlw	29
 12609  000B26  0100               	movlb	0	; () banked
 12610  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12611  000B2A  0E69               	movlw	105
 12612  000B2C  0100               	movlb	0	; () banked
 12613  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12614  000B30  0EA5               	movlw	165
 12615  000B32                     u10347:
 12616  000B32  2EE8               	decfsz	wreg,f,c
 12617  000B34  D7FE               	bra	u10347
 12618  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12619  000B38  D7FC               	bra	u10347
 12620  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12621  000B3C  D7FA               	bra	u10347
 12622  000B3E  0100               	movlb	0	; () banked
 12623  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12624  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12625  000B44  0100               	movlb	0	; () banked
 12626  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12627  000B48  D7DD               	goto	l1284
 12628  000B4A  0100               	movlb	0	; () banked
 12629  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12630  000B4E  E101               	bnz	u6820
 12631  000B50  D7D4               	goto	L15
 12632  000B52                     u6820:
 12633  000B52                     l1285:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;Test.c: 255: }
 12637                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12638  000B52  9889               	bcf	3977,4,c	;volatile
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12642  000B54  0E01               	movlw	1
 12643  000B56  ECDF  F02B         	call	_lcdInst
 12644  000B5A  0E68               	movlw	104
 12645  000B5C  0100               	movlb	0	; () banked
 12646  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12647  000B60  0EE4               	movlw	228
 12648  000B62                     u10357:
 12649  000B62  2EE8               	decfsz	wreg,f,c
 12650  000B64  D7FE               	bra	u10357
 12651  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12652  000B68  D7FC               	bra	u10357
 12653  000B6A  F000               	nop	
 12654  000B6C  0E80               	movlw	128
 12655  000B6E  ECDF  F02B         	call	_lcdInst
 12656                           
 12657                           ;Test.c: 260: machine_state = Sorting_state;
 12658  000B72  0E01               	movlw	1
 12659  000B74  0100               	movlb	0	; () banked
 12660  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;Test.c: 261: was_low_1 = 0;
 12664  000B78  0E00               	movlw	0
 12665  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12666  000B7C  0E00               	movlw	0
 12667  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;Test.c: 262: was_low_1 = 0;
 12671  000B80  0E00               	movlw	0
 12672  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12673  000B84  0E00               	movlw	0
 12674  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;Test.c: 269: printf("TST: PAN SERVO");
 12678  000B88  0EAF               	movlw	low STR_96
 12679  000B8A  0100               	movlb	0	; () banked
 12680  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12681  000B8E  0EFE               	movlw	high STR_96
 12682  000B90  0100               	movlb	0	; () banked
 12683  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12684  000B94  ECC1  F00B         	call	_printf	;wreg free
 12685                           
 12686                           ;Test.c: 270: lcdInst(0b11000000);;
 12687  000B98  0EC0               	movlw	192
 12688  000B9A  ECDF  F02B         	call	_lcdInst
 12689                           
 12690                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12691  000B9E  0ED0               	movlw	low STR_97
 12692  000BA0  0100               	movlb	0	; () banked
 12693  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12694  000BA4  0EFB               	movlw	high STR_97
 12695  000BA6  0100               	movlb	0	; () banked
 12696  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12697  000BAA  ECC1  F00B         	call	_printf	;wreg free
 12698                           
 12699                           ;Test.c: 272: updateServoPosition(1200, 1);
 12700  000BAE  0E04               	movlw	4
 12701  000BB0  0100               	movlb	0	; () banked
 12702  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12703  000BB4  0EB0               	movlw	176
 12704  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12705  000BB8  0E00               	movlw	0
 12706  000BBA  0100               	movlb	0	; () banked
 12707  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12708  000BBE  0E01               	movlw	1
 12709  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12710  000BC2  EC0B  F025         	call	_updateServoPosition	;wreg free
 12711                           
 12712                           ;Test.c: 273: TMR1ON = 1;
 12713  000BC6  80CD               	bsf	4045,0,c	;volatile
 12714                           
 12715                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12716  000BC8  0E00               	movlw	0
 12717  000BCA  0100               	movlb	0	; () banked
 12718  000BCC  6FAE               	movwf	actuatorTest@i_1763& (0+255),b
 12719  000BCE                     l8144:
 12720                           
 12721                           ; BSR set to: 0
 12722  000BCE  0E63               	movlw	99
 12723  000BD0  0100               	movlb	0	; () banked
 12724  000BD2  65AE               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12725  000BD4  D001               	goto	l8148
 12726  000BD6  D00C               	goto	l8152
 12727  000BD8                     l8148:
 12728                           
 12729                           ; BSR set to: 0
 12730  000BD8  0E68               	movlw	104
 12731  000BDA  0100               	movlb	0	; () banked
 12732  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12733  000BDE  0EE4               	movlw	228
 12734  000BE0                     u10367:
 12735  000BE0  2EE8               	decfsz	wreg,f,c
 12736  000BE2  D7FE               	bra	u10367
 12737  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12738  000BE6  D7FC               	bra	u10367
 12739  000BE8  F000               	nop	
 12740  000BEA  0100               	movlb	0	; () banked
 12741  000BEC  2BAE               	incf	actuatorTest@i_1763& (0+255),f,b
 12742  000BEE  D7EF               	goto	l8144
 12743  000BF0                     l8152:
 12744                           
 12745                           ; BSR set to: 0
 12746  000BF0  0E00               	movlw	0
 12747  000BF2  0100               	movlb	0	; () banked
 12748  000BF4  6FAF               	movwf	actuatorTest@i_1764& (0+255),b
 12749  000BF6                     l8154:
 12750                           
 12751                           ; BSR set to: 0
 12752  000BF6  0E63               	movlw	99
 12753  000BF8  0100               	movlb	0	; () banked
 12754  000BFA  65AF               	cpfsgt	actuatorTest@i_1764& (0+255),b
 12755  000BFC  D001               	goto	l8158
 12756  000BFE  D00C               	goto	l8162
 12757  000C00                     l8158:
 12758                           
 12759                           ; BSR set to: 0
 12760  000C00  0E68               	movlw	104
 12761  000C02  0100               	movlb	0	; () banked
 12762  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12763  000C06  0EE4               	movlw	228
 12764  000C08                     u10377:
 12765  000C08  2EE8               	decfsz	wreg,f,c
 12766  000C0A  D7FE               	bra	u10377
 12767  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12768  000C0E  D7FC               	bra	u10377
 12769  000C10  F000               	nop	
 12770  000C12  0100               	movlb	0	; () banked
 12771  000C14  2BAF               	incf	actuatorTest@i_1764& (0+255),f,b
 12772  000C16  D7EF               	goto	l8154
 12773  000C18                     l8162:
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12777  000C18  0E80               	movlw	128
 12778  000C1A  ECDF  F02B         	call	_lcdInst
 12779  000C1E  0EC0               	movlw	192
 12780  000C20  ECDF  F02B         	call	_lcdInst
 12781                           
 12782                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12783  000C24  0EBF               	movlw	low STR_98
 12784  000C26  0100               	movlb	0	; () banked
 12785  000C28  6F8E               	movwf	printf@f& (0+255),b
 12786  000C2A  0EFB               	movlw	high STR_98
 12787  000C2C  0100               	movlb	0	; () banked
 12788  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12789  000C30  ECC1  F00B         	call	_printf	;wreg free
 12790                           
 12791                           ;Test.c: 278: updateServoPosition(500, 1);
 12792  000C34  0E01               	movlw	1
 12793  000C36  0100               	movlb	0	; () banked
 12794  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12795  000C3A  0EF4               	movlw	244
 12796  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12797  000C3E  0E00               	movlw	0
 12798  000C40  0100               	movlb	0	; () banked
 12799  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12800  000C44  0E01               	movlw	1
 12801  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12802  000C48  EC0B  F025         	call	_updateServoPosition	;wreg free
 12803                           
 12804                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12805  000C4C  0E00               	movlw	0
 12806  000C4E  0100               	movlb	0	; () banked
 12807  000C50  6FB0               	movwf	actuatorTest@i_1766& (0+255),b
 12808  000C52                     l8170:
 12809                           
 12810                           ; BSR set to: 0
 12811  000C52  0E63               	movlw	99
 12812  000C54  0100               	movlb	0	; () banked
 12813  000C56  65B0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12814  000C58  D001               	goto	l8174
 12815  000C5A  D00C               	goto	l8178
 12816  000C5C                     l8174:
 12817                           
 12818                           ; BSR set to: 0
 12819  000C5C  0E68               	movlw	104
 12820  000C5E  0100               	movlb	0	; () banked
 12821  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12822  000C62  0EE4               	movlw	228
 12823  000C64                     u10387:
 12824  000C64  2EE8               	decfsz	wreg,f,c
 12825  000C66  D7FE               	bra	u10387
 12826  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12827  000C6A  D7FC               	bra	u10387
 12828  000C6C  F000               	nop	
 12829  000C6E  0100               	movlb	0	; () banked
 12830  000C70  2BB0               	incf	actuatorTest@i_1766& (0+255),f,b
 12831  000C72  D7EF               	goto	l8170
 12832  000C74                     l8178:
 12833                           
 12834                           ; BSR set to: 0
 12835  000C74  0E00               	movlw	0
 12836  000C76  0100               	movlb	0	; () banked
 12837  000C78  6FB1               	movwf	actuatorTest@i_1767& (0+255),b
 12838  000C7A                     l8180:
 12839                           
 12840                           ; BSR set to: 0
 12841  000C7A  0E63               	movlw	99
 12842  000C7C  0100               	movlb	0	; () banked
 12843  000C7E  65B1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 12844  000C80  D001               	goto	l8184
 12845  000C82  D00C               	goto	l8188
 12846  000C84                     l8184:
 12847                           
 12848                           ; BSR set to: 0
 12849  000C84  0E68               	movlw	104
 12850  000C86  0100               	movlb	0	; () banked
 12851  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12852  000C8A  0EE4               	movlw	228
 12853  000C8C                     u10397:
 12854  000C8C  2EE8               	decfsz	wreg,f,c
 12855  000C8E  D7FE               	bra	u10397
 12856  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12857  000C92  D7FC               	bra	u10397
 12858  000C94  F000               	nop	
 12859  000C96  0100               	movlb	0	; () banked
 12860  000C98  2BB1               	incf	actuatorTest@i_1767& (0+255),f,b
 12861  000C9A  D7EF               	goto	l8180
 12862  000C9C                     l8188:
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12866  000C9C  0E80               	movlw	128
 12867  000C9E  ECDF  F02B         	call	_lcdInst
 12868  000CA2  0EC0               	movlw	192
 12869  000CA4  ECDF  F02B         	call	_lcdInst
 12870                           
 12871                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12872  000CA8  0E9D               	movlw	low STR_99
 12873  000CAA  0100               	movlb	0	; () banked
 12874  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12875  000CAE  0EFB               	movlw	high STR_99
 12876  000CB0  0100               	movlb	0	; () banked
 12877  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12878  000CB4  ECC1  F00B         	call	_printf	;wreg free
 12879                           
 12880                           ;Test.c: 283: updateServoPosition(2400, 1);
 12881  000CB8  0E09               	movlw	9
 12882  000CBA  0100               	movlb	0	; () banked
 12883  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12884  000CBE  0E60               	movlw	96
 12885  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12886  000CC2  0E00               	movlw	0
 12887  000CC4  0100               	movlb	0	; () banked
 12888  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12889  000CC8  0E01               	movlw	1
 12890  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12891  000CCC  EC0B  F025         	call	_updateServoPosition	;wreg free
 12892                           
 12893                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12894  000CD0  0E00               	movlw	0
 12895  000CD2  0100               	movlb	0	; () banked
 12896  000CD4  6FB2               	movwf	actuatorTest@i_1769& (0+255),b
 12897  000CD6                     l8196:
 12898                           
 12899                           ; BSR set to: 0
 12900  000CD6  0E63               	movlw	99
 12901  000CD8  0100               	movlb	0	; () banked
 12902  000CDA  65B2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 12903  000CDC  D001               	goto	l8200
 12904  000CDE  D00C               	goto	l8204
 12905  000CE0                     l8200:
 12906                           
 12907                           ; BSR set to: 0
 12908  000CE0  0E68               	movlw	104
 12909  000CE2  0100               	movlb	0	; () banked
 12910  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12911  000CE6  0EE4               	movlw	228
 12912  000CE8                     u10407:
 12913  000CE8  2EE8               	decfsz	wreg,f,c
 12914  000CEA  D7FE               	bra	u10407
 12915  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12916  000CEE  D7FC               	bra	u10407
 12917  000CF0  F000               	nop	
 12918  000CF2  0100               	movlb	0	; () banked
 12919  000CF4  2BB2               	incf	actuatorTest@i_1769& (0+255),f,b
 12920  000CF6  D7EF               	goto	l8196
 12921  000CF8                     l8204:
 12922                           
 12923                           ; BSR set to: 0
 12924  000CF8  0E00               	movlw	0
 12925  000CFA  0100               	movlb	0	; () banked
 12926  000CFC  6FB3               	movwf	actuatorTest@i_1770& (0+255),b
 12927  000CFE                     l8206:
 12928                           
 12929                           ; BSR set to: 0
 12930  000CFE  0E63               	movlw	99
 12931  000D00  0100               	movlb	0	; () banked
 12932  000D02  65B3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 12933  000D04  D001               	goto	l8210
 12934  000D06  D00C               	goto	l8214
 12935  000D08                     l8210:
 12936                           
 12937                           ; BSR set to: 0
 12938  000D08  0E68               	movlw	104
 12939  000D0A  0100               	movlb	0	; () banked
 12940  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12941  000D0E  0EE4               	movlw	228
 12942  000D10                     u10417:
 12943  000D10  2EE8               	decfsz	wreg,f,c
 12944  000D12  D7FE               	bra	u10417
 12945  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12946  000D16  D7FC               	bra	u10417
 12947  000D18  F000               	nop	
 12948  000D1A  0100               	movlb	0	; () banked
 12949  000D1C  2BB3               	incf	actuatorTest@i_1770& (0+255),f,b
 12950  000D1E  D7EF               	goto	l8206
 12951  000D20                     l8214:
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12955  000D20  0E80               	movlw	128
 12956  000D22  ECDF  F02B         	call	_lcdInst
 12957  000D26  0EC0               	movlw	192
 12958  000D28  ECDF  F02B         	call	_lcdInst
 12959                           
 12960                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12961  000D2C  0E25               	movlw	low STR_100
 12962  000D2E  0100               	movlb	0	; () banked
 12963  000D30  6F8E               	movwf	printf@f& (0+255),b
 12964  000D32  0EFC               	movlw	high STR_100
 12965  000D34  0100               	movlb	0	; () banked
 12966  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12967  000D38  ECC1  F00B         	call	_printf	;wreg free
 12968                           
 12969                           ;Test.c: 288: updateServoPosition(1670, 1);
 12970  000D3C  0E06               	movlw	6
 12971  000D3E  0100               	movlb	0	; () banked
 12972  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12973  000D42  0E86               	movlw	134
 12974  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12975  000D46  0E00               	movlw	0
 12976  000D48  0100               	movlb	0	; () banked
 12977  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12978  000D4C  0E01               	movlw	1
 12979  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12980  000D50  EC0B  F025         	call	_updateServoPosition	;wreg free
 12981                           
 12982                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12983  000D54  0E00               	movlw	0
 12984  000D56  0100               	movlb	0	; () banked
 12985  000D58  6FB4               	movwf	actuatorTest@i_1772& (0+255),b
 12986  000D5A                     l8222:
 12987                           
 12988                           ; BSR set to: 0
 12989  000D5A  0E63               	movlw	99
 12990  000D5C  0100               	movlb	0	; () banked
 12991  000D5E  65B4               	cpfsgt	actuatorTest@i_1772& (0+255),b
 12992  000D60  D001               	goto	l8226
 12993  000D62  D00C               	goto	l8230
 12994  000D64                     l8226:
 12995                           
 12996                           ; BSR set to: 0
 12997  000D64  0E68               	movlw	104
 12998  000D66  0100               	movlb	0	; () banked
 12999  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 13000  000D6A  0EE4               	movlw	228
 13001  000D6C                     u10427:
 13002  000D6C  2EE8               	decfsz	wreg,f,c
 13003  000D6E  D7FE               	bra	u10427
 13004  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13005  000D72  D7FC               	bra	u10427
 13006  000D74  F000               	nop	
 13007  000D76  0100               	movlb	0	; () banked
 13008  000D78  2BB4               	incf	actuatorTest@i_1772& (0+255),f,b
 13009  000D7A  D7EF               	goto	l8222
 13010  000D7C                     l8230:
 13011                           
 13012                           ; BSR set to: 0
 13013  000D7C  0E00               	movlw	0
 13014  000D7E  0100               	movlb	0	; () banked
 13015  000D80  6FB5               	movwf	actuatorTest@i_1773& (0+255),b
 13016  000D82                     l8232:
 13017                           
 13018                           ; BSR set to: 0
 13019  000D82  0E63               	movlw	99
 13020  000D84  0100               	movlb	0	; () banked
 13021  000D86  65B5               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13022  000D88  D001               	goto	l8236
 13023  000D8A  D00C               	goto	l8240
 13024  000D8C                     l8236:
 13025                           
 13026                           ; BSR set to: 0
 13027  000D8C  0E68               	movlw	104
 13028  000D8E  0100               	movlb	0	; () banked
 13029  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 13030  000D92  0EE4               	movlw	228
 13031  000D94                     u10437:
 13032  000D94  2EE8               	decfsz	wreg,f,c
 13033  000D96  D7FE               	bra	u10437
 13034  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13035  000D9A  D7FC               	bra	u10437
 13036  000D9C  F000               	nop	
 13037  000D9E  0100               	movlb	0	; () banked
 13038  000DA0  2BB5               	incf	actuatorTest@i_1773& (0+255),f,b
 13039  000DA2  D7EF               	goto	l8232
 13040  000DA4                     l8240:
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13044  000DA4  0E80               	movlw	128
 13045  000DA6  ECDF  F02B         	call	_lcdInst
 13046  000DAA  0EC0               	movlw	192
 13047  000DAC  ECDF  F02B         	call	_lcdInst
 13048                           
 13049                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 13050  000DB0  0E36               	movlw	low STR_101
 13051  000DB2  0100               	movlb	0	; () banked
 13052  000DB4  6F8E               	movwf	printf@f& (0+255),b
 13053  000DB6  0EFC               	movlw	high STR_101
 13054  000DB8  0100               	movlb	0	; () banked
 13055  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13056  000DBC  ECC1  F00B         	call	_printf	;wreg free
 13057                           
 13058                           ;Test.c: 293: updateServoPosition(850, 1);
 13059  000DC0  0E03               	movlw	3
 13060  000DC2  0100               	movlb	0	; () banked
 13061  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13062  000DC6  0E52               	movlw	82
 13063  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13064  000DCA  0E00               	movlw	0
 13065  000DCC  0100               	movlb	0	; () banked
 13066  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13067  000DD0  0E01               	movlw	1
 13068  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13069  000DD4  EC0B  F025         	call	_updateServoPosition	;wreg free
 13070                           
 13071                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13072  000DD8  0E00               	movlw	0
 13073  000DDA  0100               	movlb	0	; () banked
 13074  000DDC  6FB6               	movwf	actuatorTest@i_1775& (0+255),b
 13075  000DDE                     l8248:
 13076                           
 13077                           ; BSR set to: 0
 13078  000DDE  0E63               	movlw	99
 13079  000DE0  0100               	movlb	0	; () banked
 13080  000DE2  65B6               	cpfsgt	actuatorTest@i_1775& (0+255),b
 13081  000DE4  D001               	goto	l8252
 13082  000DE6  D00C               	goto	l8256
 13083  000DE8                     l8252:
 13084                           
 13085                           ; BSR set to: 0
 13086  000DE8  0E68               	movlw	104
 13087  000DEA  0100               	movlb	0	; () banked
 13088  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13089  000DEE  0EE4               	movlw	228
 13090  000DF0                     u10447:
 13091  000DF0  2EE8               	decfsz	wreg,f,c
 13092  000DF2  D7FE               	bra	u10447
 13093  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13094  000DF6  D7FC               	bra	u10447
 13095  000DF8  F000               	nop	
 13096  000DFA  0100               	movlb	0	; () banked
 13097  000DFC  2BB6               	incf	actuatorTest@i_1775& (0+255),f,b
 13098  000DFE  D7EF               	goto	l8248
 13099  000E00                     l8256:
 13100                           
 13101                           ; BSR set to: 0
 13102  000E00  0E00               	movlw	0
 13103  000E02  0100               	movlb	0	; () banked
 13104  000E04  6FB7               	movwf	actuatorTest@i_1776& (0+255),b
 13105  000E06                     l8258:
 13106                           
 13107                           ; BSR set to: 0
 13108  000E06  0E63               	movlw	99
 13109  000E08  0100               	movlb	0	; () banked
 13110  000E0A  65B7               	cpfsgt	actuatorTest@i_1776& (0+255),b
 13111  000E0C  D001               	goto	l8262
 13112  000E0E  D00C               	goto	l8266
 13113  000E10                     l8262:
 13114                           
 13115                           ; BSR set to: 0
 13116  000E10  0E68               	movlw	104
 13117  000E12  0100               	movlb	0	; () banked
 13118  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13119  000E16  0EE4               	movlw	228
 13120  000E18                     u10457:
 13121  000E18  2EE8               	decfsz	wreg,f,c
 13122  000E1A  D7FE               	bra	u10457
 13123  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13124  000E1E  D7FC               	bra	u10457
 13125  000E20  F000               	nop	
 13126  000E22  0100               	movlb	0	; () banked
 13127  000E24  2BB7               	incf	actuatorTest@i_1776& (0+255),f,b
 13128  000E26  D7EF               	goto	l8258
 13129  000E28                     l8266:
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13133  000E28  0E80               	movlw	128
 13134  000E2A  ECDF  F02B         	call	_lcdInst
 13135  000E2E  0EC0               	movlw	192
 13136  000E30  ECDF  F02B         	call	_lcdInst
 13137                           
 13138                           ;Test.c: 297: printf("MID -- 2s       ");
 13139  000E34  0E7B               	movlw	low STR_102
 13140  000E36  0100               	movlb	0	; () banked
 13141  000E38  6F8E               	movwf	printf@f& (0+255),b
 13142  000E3A  0EFB               	movlw	high STR_102
 13143  000E3C  0100               	movlb	0	; () banked
 13144  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13145  000E40  ECC1  F00B         	call	_printf	;wreg free
 13146                           
 13147                           ;Test.c: 298: updateServoPosition(1200, 1);
 13148  000E44  0E04               	movlw	4
 13149  000E46  0100               	movlb	0	; () banked
 13150  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13151  000E4A  0EB0               	movlw	176
 13152  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13153  000E4E  0E00               	movlw	0
 13154  000E50  0100               	movlb	0	; () banked
 13155  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13156  000E54  0E01               	movlw	1
 13157  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13158  000E58  EC0B  F025         	call	_updateServoPosition	;wreg free
 13159                           
 13160                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13161  000E5C  0E00               	movlw	0
 13162  000E5E  0100               	movlb	0	; () banked
 13163  000E60  6FB8               	movwf	actuatorTest@i_1778& (0+255),b
 13164  000E62                     l8274:
 13165                           
 13166                           ; BSR set to: 0
 13167  000E62  0E63               	movlw	99
 13168  000E64  0100               	movlb	0	; () banked
 13169  000E66  65B8               	cpfsgt	actuatorTest@i_1778& (0+255),b
 13170  000E68  D001               	goto	l8278
 13171  000E6A  D00C               	goto	l8282
 13172  000E6C                     l8278:
 13173                           
 13174                           ; BSR set to: 0
 13175  000E6C  0E68               	movlw	104
 13176  000E6E  0100               	movlb	0	; () banked
 13177  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 13178  000E72  0EE4               	movlw	228
 13179  000E74                     u10467:
 13180  000E74  2EE8               	decfsz	wreg,f,c
 13181  000E76  D7FE               	bra	u10467
 13182  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13183  000E7A  D7FC               	bra	u10467
 13184  000E7C  F000               	nop	
 13185  000E7E  0100               	movlb	0	; () banked
 13186  000E80  2BB8               	incf	actuatorTest@i_1778& (0+255),f,b
 13187  000E82  D7EF               	goto	l8274
 13188  000E84                     l8282:
 13189                           
 13190                           ; BSR set to: 0
 13191  000E84  0E00               	movlw	0
 13192  000E86  0100               	movlb	0	; () banked
 13193  000E88  6FB9               	movwf	actuatorTest@i_1779& (0+255),b
 13194  000E8A                     l8284:
 13195                           
 13196                           ; BSR set to: 0
 13197  000E8A  0E63               	movlw	99
 13198  000E8C  0100               	movlb	0	; () banked
 13199  000E8E  65B9               	cpfsgt	actuatorTest@i_1779& (0+255),b
 13200  000E90  D001               	goto	l8288
 13201  000E92  D00C               	goto	l1309
 13202  000E94                     l8288:
 13203                           
 13204                           ; BSR set to: 0
 13205  000E94  0E68               	movlw	104
 13206  000E96  0100               	movlb	0	; () banked
 13207  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 13208  000E9A  0EE4               	movlw	228
 13209  000E9C                     u10477:
 13210  000E9C  2EE8               	decfsz	wreg,f,c
 13211  000E9E  D7FE               	bra	u10477
 13212  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13213  000EA2  D7FC               	bra	u10477
 13214  000EA4  F000               	nop	
 13215  000EA6  0100               	movlb	0	; () banked
 13216  000EA8  2BB9               	incf	actuatorTest@i_1779& (0+255),f,b
 13217  000EAA  D7EF               	goto	l8284
 13218  000EAC                     l1309:
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;Test.c: 300: TMR1ON = 0;
 13222  000EAC  90CD               	bcf	4045,0,c	;volatile
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;Test.c: 307: printf("TST: TILT SERVO");
 13226  000EAE  0E44               	movlw	low STR_103
 13227  000EB0  0100               	movlb	0	; () banked
 13228  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13229  000EB4  0EFE               	movlw	high STR_103
 13230  000EB6  0100               	movlb	0	; () banked
 13231  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13232  000EBA  ECC1  F00B         	call	_printf	;wreg free
 13233                           
 13234                           ;Test.c: 308: lcdInst(0b11000000);;
 13235  000EBE  0EC0               	movlw	192
 13236  000EC0  ECDF  F02B         	call	_lcdInst
 13237                           
 13238                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13239  000EC4  0EAE               	movlw	low STR_104
 13240  000EC6  0100               	movlb	0	; () banked
 13241  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13242  000ECA  0EFB               	movlw	high STR_104
 13243  000ECC  0100               	movlb	0	; () banked
 13244  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13245  000ED0  ECC1  F00B         	call	_printf	;wreg free
 13246                           
 13247                           ;Test.c: 310: updateServoPosition(1050, 3);
 13248  000ED4  0E04               	movlw	4
 13249  000ED6  0100               	movlb	0	; () banked
 13250  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13251  000EDA  0E1A               	movlw	26
 13252  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13253  000EDE  0E00               	movlw	0
 13254  000EE0  0100               	movlb	0	; () banked
 13255  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13256  000EE4  0E03               	movlw	3
 13257  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13258  000EE8  EC0B  F025         	call	_updateServoPosition	;wreg free
 13259                           
 13260                           ;Test.c: 311: TMR3ON = 1;
 13261  000EEC  80B1               	bsf	4017,0,c	;volatile
 13262                           
 13263                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13264  000EEE  0E00               	movlw	0
 13265  000EF0  0100               	movlb	0	; () banked
 13266  000EF2  6FBA               	movwf	actuatorTest@i_1782& (0+255),b
 13267  000EF4                     l8302:
 13268                           
 13269                           ; BSR set to: 0
 13270  000EF4  0E63               	movlw	99
 13271  000EF6  0100               	movlb	0	; () banked
 13272  000EF8  65BA               	cpfsgt	actuatorTest@i_1782& (0+255),b
 13273  000EFA  D001               	goto	l8306
 13274  000EFC  D00C               	goto	l8310
 13275  000EFE                     l8306:
 13276                           
 13277                           ; BSR set to: 0
 13278  000EFE  0E68               	movlw	104
 13279  000F00  0100               	movlb	0	; () banked
 13280  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13281  000F04  0EE4               	movlw	228
 13282  000F06                     u10487:
 13283  000F06  2EE8               	decfsz	wreg,f,c
 13284  000F08  D7FE               	bra	u10487
 13285  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13286  000F0C  D7FC               	bra	u10487
 13287  000F0E  F000               	nop	
 13288  000F10  0100               	movlb	0	; () banked
 13289  000F12  2BBA               	incf	actuatorTest@i_1782& (0+255),f,b
 13290  000F14  D7EF               	goto	l8302
 13291  000F16                     l8310:
 13292                           
 13293                           ; BSR set to: 0
 13294  000F16  0E00               	movlw	0
 13295  000F18  0100               	movlb	0	; () banked
 13296  000F1A  6FBB               	movwf	actuatorTest@i_1783& (0+255),b
 13297  000F1C                     l8312:
 13298                           
 13299                           ; BSR set to: 0
 13300  000F1C  0E63               	movlw	99
 13301  000F1E  0100               	movlb	0	; () banked
 13302  000F20  65BB               	cpfsgt	actuatorTest@i_1783& (0+255),b
 13303  000F22  D001               	goto	l8316
 13304  000F24  D00C               	goto	l8320
 13305  000F26                     l8316:
 13306                           
 13307                           ; BSR set to: 0
 13308  000F26  0E68               	movlw	104
 13309  000F28  0100               	movlb	0	; () banked
 13310  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13311  000F2C  0EE4               	movlw	228
 13312  000F2E                     u10497:
 13313  000F2E  2EE8               	decfsz	wreg,f,c
 13314  000F30  D7FE               	bra	u10497
 13315  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13316  000F34  D7FC               	bra	u10497
 13317  000F36  F000               	nop	
 13318  000F38  0100               	movlb	0	; () banked
 13319  000F3A  2BBB               	incf	actuatorTest@i_1783& (0+255),f,b
 13320  000F3C  D7EF               	goto	l8312
 13321  000F3E                     l8320:
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13325  000F3E  0E80               	movlw	128
 13326  000F40  ECDF  F02B         	call	_lcdInst
 13327  000F44  0EC0               	movlw	192
 13328  000F46  ECDF  F02B         	call	_lcdInst
 13329                           
 13330                           ;Test.c: 315: printf("DROP -- 2s      ");
 13331  000F4A  0E8C               	movlw	low STR_105
 13332  000F4C  0100               	movlb	0	; () banked
 13333  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13334  000F50  0EFB               	movlw	high STR_105
 13335  000F52  0100               	movlb	0	; () banked
 13336  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13337  000F56  ECC1  F00B         	call	_printf	;wreg free
 13338                           
 13339                           ;Test.c: 316: updateServoPosition(1260, 3);
 13340  000F5A  0E04               	movlw	4
 13341  000F5C  0100               	movlb	0	; () banked
 13342  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13343  000F60  0EEC               	movlw	236
 13344  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13345  000F64  0E00               	movlw	0
 13346  000F66  0100               	movlb	0	; () banked
 13347  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13348  000F6A  0E03               	movlw	3
 13349  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13350  000F6E  EC0B  F025         	call	_updateServoPosition	;wreg free
 13351                           
 13352                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13353  000F72  0E00               	movlw	0
 13354  000F74  0100               	movlb	0	; () banked
 13355  000F76  6FBC               	movwf	actuatorTest@i_1785& (0+255),b
 13356  000F78                     l8328:
 13357                           
 13358                           ; BSR set to: 0
 13359  000F78  0E63               	movlw	99
 13360  000F7A  0100               	movlb	0	; () banked
 13361  000F7C  65BC               	cpfsgt	actuatorTest@i_1785& (0+255),b
 13362  000F7E  D001               	goto	l8332
 13363  000F80  D00C               	goto	l8336
 13364  000F82                     l8332:
 13365                           
 13366                           ; BSR set to: 0
 13367  000F82  0E68               	movlw	104
 13368  000F84  0100               	movlb	0	; () banked
 13369  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13370  000F88  0EE4               	movlw	228
 13371  000F8A                     u10507:
 13372  000F8A  2EE8               	decfsz	wreg,f,c
 13373  000F8C  D7FE               	bra	u10507
 13374  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13375  000F90  D7FC               	bra	u10507
 13376  000F92  F000               	nop	
 13377  000F94  0100               	movlb	0	; () banked
 13378  000F96  2BBC               	incf	actuatorTest@i_1785& (0+255),f,b
 13379  000F98  D7EF               	goto	l8328
 13380  000F9A                     l8336:
 13381                           
 13382                           ; BSR set to: 0
 13383  000F9A  0E00               	movlw	0
 13384  000F9C  0100               	movlb	0	; () banked
 13385  000F9E  6FBD               	movwf	actuatorTest@i_1786& (0+255),b
 13386  000FA0                     l8338:
 13387                           
 13388                           ; BSR set to: 0
 13389  000FA0  0E63               	movlw	99
 13390  000FA2  0100               	movlb	0	; () banked
 13391  000FA4  65BD               	cpfsgt	actuatorTest@i_1786& (0+255),b
 13392  000FA6  D001               	goto	l8342
 13393  000FA8  D00C               	goto	l8346
 13394  000FAA                     l8342:
 13395                           
 13396                           ; BSR set to: 0
 13397  000FAA  0E68               	movlw	104
 13398  000FAC  0100               	movlb	0	; () banked
 13399  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13400  000FB0  0EE4               	movlw	228
 13401  000FB2                     u10517:
 13402  000FB2  2EE8               	decfsz	wreg,f,c
 13403  000FB4  D7FE               	bra	u10517
 13404  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13405  000FB8  D7FC               	bra	u10517
 13406  000FBA  F000               	nop	
 13407  000FBC  0100               	movlb	0	; () banked
 13408  000FBE  2BBD               	incf	actuatorTest@i_1786& (0+255),f,b
 13409  000FC0  D7EF               	goto	l8338
 13410  000FC2                     l8346:
 13411                           
 13412                           ; BSR set to: 0
 13413                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13414  000FC2  0E80               	movlw	128
 13415  000FC4  ECDF  F02B         	call	_lcdInst
 13416  000FC8  0EC0               	movlw	192
 13417  000FCA  ECDF  F02B         	call	_lcdInst
 13418                           
 13419                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13420  000FCE  0EAE               	movlw	low STR_104
 13421  000FD0  0100               	movlb	0	; () banked
 13422  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13423  000FD4  0EFB               	movlw	high STR_104
 13424  000FD6  0100               	movlb	0	; () banked
 13425  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13426  000FDA  ECC1  F00B         	call	_printf	;wreg free
 13427                           
 13428                           ;Test.c: 321: updateServoPosition(1050, 3);
 13429  000FDE  0E04               	movlw	4
 13430  000FE0  0100               	movlb	0	; () banked
 13431  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13432  000FE4  0E1A               	movlw	26
 13433  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13434  000FE8  0E00               	movlw	0
 13435  000FEA  0100               	movlb	0	; () banked
 13436  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13437  000FEE  0E03               	movlw	3
 13438  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13439  000FF2  EC0B  F025         	call	_updateServoPosition	;wreg free
 13440                           
 13441                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13442  000FF6  0E00               	movlw	0
 13443  000FF8  0100               	movlb	0	; () banked
 13444  000FFA  6FBE               	movwf	actuatorTest@i_1788& (0+255),b
 13445  000FFC                     l8354:
 13446                           
 13447                           ; BSR set to: 0
 13448  000FFC  0E63               	movlw	99
 13449  000FFE  0100               	movlb	0	; () banked
 13450  001000  65BE               	cpfsgt	actuatorTest@i_1788& (0+255),b
 13451  001002  D001               	goto	l8358
 13452  001004  D00C               	goto	l8362
 13453  001006                     l8358:
 13454                           
 13455                           ; BSR set to: 0
 13456  001006  0E68               	movlw	104
 13457  001008  0100               	movlb	0	; () banked
 13458  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13459  00100C  0EE4               	movlw	228
 13460  00100E                     u10527:
 13461  00100E  2EE8               	decfsz	wreg,f,c
 13462  001010  D7FE               	bra	u10527
 13463  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13464  001014  D7FC               	bra	u10527
 13465  001016  F000               	nop	
 13466  001018  0100               	movlb	0	; () banked
 13467  00101A  2BBE               	incf	actuatorTest@i_1788& (0+255),f,b
 13468  00101C  D7EF               	goto	l8354
 13469  00101E                     l8362:
 13470                           
 13471                           ; BSR set to: 0
 13472  00101E  0E00               	movlw	0
 13473  001020  0100               	movlb	0	; () banked
 13474  001022  6FBF               	movwf	actuatorTest@i_1789& (0+255),b
 13475  001024                     l8364:
 13476                           
 13477                           ; BSR set to: 0
 13478  001024  0E63               	movlw	99
 13479  001026  0100               	movlb	0	; () banked
 13480  001028  65BF               	cpfsgt	actuatorTest@i_1789& (0+255),b
 13481  00102A  D001               	goto	l8368
 13482  00102C  D00C               	goto	l1321
 13483  00102E                     l8368:
 13484                           
 13485                           ; BSR set to: 0
 13486  00102E  0E68               	movlw	104
 13487  001030  0100               	movlb	0	; () banked
 13488  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13489  001034  0EE4               	movlw	228
 13490  001036                     u10537:
 13491  001036  2EE8               	decfsz	wreg,f,c
 13492  001038  D7FE               	bra	u10537
 13493  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13494  00103C  D7FC               	bra	u10537
 13495  00103E  F000               	nop	
 13496  001040  0100               	movlb	0	; () banked
 13497  001042  2BBF               	incf	actuatorTest@i_1789& (0+255),f,b
 13498  001044  D7EF               	goto	l8364
 13499  001046                     l1321:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Test.c: 323: TMR3ON = 0;
 13503  001046  90B1               	bcf	4017,0,c	;volatile
 13504                           
 13505                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13506  001048  9EF2               	bcf	intcon,7,c	;volatile
 13507                           
 13508                           ; BSR set to: 0
 13509                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13510  00104A  0E01               	movlw	1
 13511  00104C  ECDF  F02B         	call	_lcdInst
 13512  001050  0E68               	movlw	104
 13513  001052  0100               	movlb	0	; () banked
 13514  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13515  001056  0EE4               	movlw	228
 13516  001058                     u10547:
 13517  001058  2EE8               	decfsz	wreg,f,c
 13518  00105A  D7FE               	bra	u10547
 13519  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13520  00105E  D7FC               	bra	u10547
 13521  001060  F000               	nop	
 13522  001062  0E80               	movlw	128
 13523  001064  ECDF  F02B         	call	_lcdInst
 13524                           
 13525                           ;Test.c: 330: printf("TST: CAM SERVO");
 13526  001068  0EA0               	movlw	low STR_107
 13527  00106A  0100               	movlb	0	; () banked
 13528  00106C  6F8E               	movwf	printf@f& (0+255),b
 13529  00106E  0EFE               	movlw	high STR_107
 13530  001070  0100               	movlb	0	; () banked
 13531  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13532  001074  ECC1  F00B         	call	_printf	;wreg free
 13533                           
 13534                           ;Test.c: 331: lcdInst(0b11000000);;
 13535  001078  0EC0               	movlw	192
 13536  00107A  ECDF  F02B         	call	_lcdInst
 13537                           
 13538                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13539  00107E  0E82               	movlw	low STR_108
 13540  001080  0100               	movlb	0	; () banked
 13541  001082  6F8E               	movwf	printf@f& (0+255),b
 13542  001084  0EFE               	movlw	high STR_108
 13543  001086  0100               	movlb	0	; () banked
 13544  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13545  00108A  ECC1  F00B         	call	_printf	;wreg free
 13546                           
 13547                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13548  00108E  808B               	bsf	3979,0,c	;volatile
 13549                           
 13550                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13551  001090  0E00               	movlw	0
 13552  001092  0100               	movlb	0	; () banked
 13553  001094  6FC0               	movwf	actuatorTest@i_1792& (0+255),b
 13554  001096                     l8388:
 13555                           
 13556                           ; BSR set to: 0
 13557  001096  0E63               	movlw	99
 13558  001098  0100               	movlb	0	; () banked
 13559  00109A  65C0               	cpfsgt	actuatorTest@i_1792& (0+255),b
 13560  00109C  D001               	goto	l8392
 13561  00109E  D00C               	goto	l8396
 13562  0010A0                     l8392:
 13563                           
 13564                           ; BSR set to: 0
 13565  0010A0  0E68               	movlw	104
 13566  0010A2  0100               	movlb	0	; () banked
 13567  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13568  0010A6  0EE4               	movlw	228
 13569  0010A8                     u10557:
 13570  0010A8  2EE8               	decfsz	wreg,f,c
 13571  0010AA  D7FE               	bra	u10557
 13572  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13573  0010AE  D7FC               	bra	u10557
 13574  0010B0  F000               	nop	
 13575  0010B2  0100               	movlb	0	; () banked
 13576  0010B4  2BC0               	incf	actuatorTest@i_1792& (0+255),f,b
 13577  0010B6  D7EF               	goto	l8388
 13578  0010B8                     l8396:
 13579                           
 13580                           ; BSR set to: 0
 13581  0010B8  0E00               	movlw	0
 13582  0010BA  0100               	movlb	0	; () banked
 13583  0010BC  6FC1               	movwf	actuatorTest@i_1793& (0+255),b
 13584  0010BE                     l8398:
 13585                           
 13586                           ; BSR set to: 0
 13587  0010BE  0E63               	movlw	99
 13588  0010C0  0100               	movlb	0	; () banked
 13589  0010C2  65C1               	cpfsgt	actuatorTest@i_1793& (0+255),b
 13590  0010C4  D001               	goto	l8402
 13591  0010C6  D00C               	goto	l8406
 13592  0010C8                     l8402:
 13593                           
 13594                           ; BSR set to: 0
 13595  0010C8  0E68               	movlw	104
 13596  0010CA  0100               	movlb	0	; () banked
 13597  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13598  0010CE  0EE4               	movlw	228
 13599  0010D0                     u10567:
 13600  0010D0  2EE8               	decfsz	wreg,f,c
 13601  0010D2  D7FE               	bra	u10567
 13602  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13603  0010D6  D7FC               	bra	u10567
 13604  0010D8  F000               	nop	
 13605  0010DA  0100               	movlb	0	; () banked
 13606  0010DC  2BC1               	incf	actuatorTest@i_1793& (0+255),f,b
 13607  0010DE  D7EF               	goto	l8398
 13608  0010E0                     l8406:
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13612  0010E0  0E80               	movlw	128
 13613  0010E2  ECDF  F02B         	call	_lcdInst
 13614  0010E6  0EC0               	movlw	192
 13615  0010E8  ECDF  F02B         	call	_lcdInst
 13616                           
 13617                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13618  0010EC  0E73               	movlw	low STR_109
 13619  0010EE  0100               	movlb	0	; () banked
 13620  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13621  0010F2  0EFE               	movlw	high STR_109
 13622  0010F4  0100               	movlb	0	; () banked
 13623  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13624  0010F8  ECC1  F00B         	call	_printf	;wreg free
 13625                           
 13626                           ;Test.c: 339: for(i=0;i<10000;i++)
 13627  0010FC  0E00               	movlw	0
 13628  0010FE  0100               	movlb	0	; () banked
 13629  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13630  001102  0E00               	movlw	0
 13631  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13632  001106                     l8412:
 13633                           
 13634                           ; BSR set to: 0
 13635  001106  0100               	movlb	0	; () banked
 13636  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13637  00110A  D008               	goto	l1326
 13638  00110C  0E10               	movlw	16
 13639  00110E  0100               	movlb	0	; () banked
 13640  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13641  001112  0E27               	movlw	39
 13642  001114  0100               	movlb	0	; () banked
 13643  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13644  001118  B0D8               	btfsc	status,0,c
 13645  00111A  D00D               	goto	l8422
 13646  00111C                     l1326:
 13647                           
 13648                           ; BSR set to: 0
 13649                           ;Test.c: 340: {
 13650                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13651  00111C  808B               	bsf	3979,0,c	;volatile
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13655  00111E  0E1A               	movlw	26
 13656  001120                     u10577:
 13657  001120  2EE8               	decfsz	wreg,f,c
 13658  001122  D7FE               	bra	u10577
 13659  001124  D000               	nop2	
 13660                           
 13661                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13662  001126  908B               	bcf	3979,0,c	;volatile
 13663                           
 13664                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13665  001128  0EF0               	movlw	240
 13666  00112A                     u10587:
 13667  00112A  2EE8               	decfsz	wreg,f,c
 13668  00112C  D7FE               	bra	u10587
 13669  00112E  0100               	movlb	0	; () banked
 13670  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13671  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13672  001134  D7E8               	goto	l8412
 13673  001136                     l8422:
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;Test.c: 345: }
 13677                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13678  001136  0E00               	movlw	0
 13679  001138  0100               	movlb	0	; () banked
 13680  00113A  6FC2               	movwf	actuatorTest@i_1795& (0+255),b
 13681  00113C                     l8424:
 13682                           
 13683                           ; BSR set to: 0
 13684  00113C  0E63               	movlw	99
 13685  00113E  0100               	movlb	0	; () banked
 13686  001140  65C2               	cpfsgt	actuatorTest@i_1795& (0+255),b
 13687  001142  D001               	goto	l8428
 13688  001144  D00C               	goto	l8432
 13689  001146                     l8428:
 13690                           
 13691                           ; BSR set to: 0
 13692  001146  0E68               	movlw	104
 13693  001148  0100               	movlb	0	; () banked
 13694  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13695  00114C  0EE4               	movlw	228
 13696  00114E                     u10597:
 13697  00114E  2EE8               	decfsz	wreg,f,c
 13698  001150  D7FE               	bra	u10597
 13699  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13700  001154  D7FC               	bra	u10597
 13701  001156  F000               	nop	
 13702  001158  0100               	movlb	0	; () banked
 13703  00115A  2BC2               	incf	actuatorTest@i_1795& (0+255),f,b
 13704  00115C  D7EF               	goto	l8424
 13705  00115E                     l8432:
 13706                           
 13707                           ; BSR set to: 0
 13708  00115E  0E00               	movlw	0
 13709  001160  0100               	movlb	0	; () banked
 13710  001162  6FC3               	movwf	actuatorTest@i_1796& (0+255),b
 13711  001164                     l8434:
 13712                           
 13713                           ; BSR set to: 0
 13714  001164  0E63               	movlw	99
 13715  001166  0100               	movlb	0	; () banked
 13716  001168  65C3               	cpfsgt	actuatorTest@i_1796& (0+255),b
 13717  00116A  D001               	goto	l8438
 13718  00116C  D00C               	goto	l8442
 13719  00116E                     l8438:
 13720                           
 13721                           ; BSR set to: 0
 13722  00116E  0E68               	movlw	104
 13723  001170  0100               	movlb	0	; () banked
 13724  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13725  001174  0EE4               	movlw	228
 13726  001176                     u10607:
 13727  001176  2EE8               	decfsz	wreg,f,c
 13728  001178  D7FE               	bra	u10607
 13729  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13730  00117C  D7FC               	bra	u10607
 13731  00117E  F000               	nop	
 13732  001180  0100               	movlb	0	; () banked
 13733  001182  2BC3               	incf	actuatorTest@i_1796& (0+255),f,b
 13734  001184  D7EF               	goto	l8434
 13735  001186                     l8442:
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;Test.c: 348: machine_state = Testing_state;
 13739  001186  0E03               	movlw	3
 13740  001188  0100               	movlb	0	; () banked
 13741  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13742                           
 13743                           ; BSR set to: 0
 13744  00118C  0012               	return		;funcret
 13745  00118E                     __end_of_actuatorTest:
 13746                           	opt stack 0
 13747                           tblptru	equ	0xFF8
 13748                           tblptrh	equ	0xFF7
 13749                           tblptrl	equ	0xFF6
 13750                           tablat	equ	0xFF5
 13751                           prodh	equ	0xFF4
 13752                           prodl	equ	0xFF3
 13753                           intcon	equ	0xFF2
 13754                           intcon2	equ	0xFF1
 13755                           intcon3	equ	0xFF0
 13756                           postinc0	equ	0xFEE
 13757                           wreg	equ	0xFE8
 13758                           postdec1	equ	0xFE5
 13759                           fsr1l	equ	0xFE1
 13760                           indf2	equ	0xFDF
 13761                           postinc2	equ	0xFDE
 13762                           postdec2	equ	0xFDD
 13763                           fsr2h	equ	0xFDA
 13764                           fsr2l	equ	0xFD9
 13765                           status	equ	0xFD8
 13766                           
 13767 ;; *************** function _SpeedTest *****************
 13768 ;; Defined at:
 13769 ;;		line 559 in file "Test.c"
 13770 ;; Parameters:    Size  Location     Type
 13771 ;;		None
 13772 ;; Auto vars:     Size  Location     Type
 13773 ;;		None
 13774 ;; Return value:  Size  Location     Type
 13775 ;;                  1    wreg      void 
 13776 ;; Registers used:
 13777 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13778 ;; Tracked objects:
 13779 ;;		On entry : 0/0
 13780 ;;		On exit  : 0/0
 13781 ;;		Unchanged: 0/0
 13782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;Total ram usage:        1 bytes
 13788 ;; Hardware stack levels used:    1
 13789 ;; Hardware stack levels required when called:   10
 13790 ;; This function calls:
 13791 ;;		_lcdInst
 13792 ;;		_printf
 13793 ;; This function is called by:
 13794 ;;		_Test
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text41
 13799  004A9C                     __ptext41:
 13800                           	opt stack 0
 13801  004A9C                     _SpeedTest:
 13802                           	opt stack 19
 13803                           
 13804                           ;Test.c: 561: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13805                           
 13806                           ; BSR set to: 0
 13807                           ;incstack = 0
 13808  004A9C  0E01               	movlw	1
 13809  004A9E  ECDF  F02B         	call	_lcdInst
 13810  004AA2  0E68               	movlw	104
 13811  004AA4  0100               	movlb	0	; () banked
 13812  004AA6  6FAB               	movwf	??_SpeedTest& (0+255),b
 13813  004AA8  0EE4               	movlw	228
 13814  004AAA                     u10617:
 13815  004AAA  2EE8               	decfsz	wreg,f,c
 13816  004AAC  D7FE               	bra	u10617
 13817  004AAE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13818  004AB0  D7FC               	bra	u10617
 13819  004AB2  F000               	nop	
 13820  004AB4  0E80               	movlw	128
 13821  004AB6  ECDF  F02B         	call	_lcdInst
 13822                           
 13823                           ;Test.c: 562: printf("S: D WILL RETURN ");
 13824  004ABA  0E0F               	movlw	low STR_120
 13825  004ABC  0100               	movlb	0	; () banked
 13826  004ABE  6F8E               	movwf	printf@f& (0+255),b
 13827  004AC0  0EFB               	movlw	high STR_120
 13828  004AC2  0100               	movlb	0	; () banked
 13829  004AC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13830  004AC6  ECC1  F00B         	call	_printf	;wreg free
 13831                           
 13832                           ;Test.c: 563: lcdInst(0b11000000);;
 13833  004ACA  0EC0               	movlw	192
 13834  004ACC  ECDF  F02B         	call	_lcdInst
 13835                           
 13836                           ;Test.c: 564: printf("OTHER SETS RA5   ");
 13837  004AD0  0EFD               	movlw	low STR_121
 13838  004AD2  0100               	movlb	0	; () banked
 13839  004AD4  6F8E               	movwf	printf@f& (0+255),b
 13840  004AD6  0EFA               	movlw	high STR_121
 13841  004AD8  0100               	movlb	0	; () banked
 13842  004ADA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13843  004ADC  ECC1  F00B         	call	_printf	;wreg free
 13844  004AE0                     l1405:
 13845  004AE0  A281               	btfss	3969,1,c	;volatile
 13846  004AE2  D7FE               	goto	l1405
 13847                           
 13848                           ;Test.c: 569: }
 13849                           ;Test.c: 570: if(PORTB >> 4 == 0b1111){
 13850  004AE4  3881               	swapf	3969,w,c	;volatile
 13851  004AE6  0B0F               	andlw	15
 13852  004AE8  0A0F               	xorlw	15
 13853  004AEA  B4D8               	btfsc	status,2,c
 13854  004AEC  0012               	return	
 13855  004AEE  D014               	goto	l8538
 13856  004AF0                     l1412:
 13857                           
 13858                           ;Test.c: 575: LATBbits.LATB2 = 1;
 13859  004AF0  848A               	bsf	3978,2,c	;volatile
 13860                           
 13861                           ;Test.c: 576: _delay((unsigned long)((5)*(32000000/4000.0)));
 13862  004AF2  0E34               	movlw	52
 13863  004AF4  0100               	movlb	0	; () banked
 13864  004AF6  6FAB               	movwf	??_SpeedTest& (0+255),b
 13865  004AF8  0EF1               	movlw	241
 13866  004AFA                     u10627:
 13867  004AFA  2EE8               	decfsz	wreg,f,c
 13868  004AFC  D7FE               	bra	u10627
 13869  004AFE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13870  004B00  D7FC               	bra	u10627
 13871  004B02  D000               	nop2	
 13872                           
 13873                           ;Test.c: 577: LATBbits.LATB2 = 0;
 13874  004B04  948A               	bcf	3978,2,c	;volatile
 13875                           
 13876                           ;Test.c: 578: _delay((unsigned long)((5)*(32000000/4000.0)));
 13877  004B06  0E34               	movlw	52
 13878  004B08  0100               	movlb	0	; () banked
 13879  004B0A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13880  004B0C  0EF1               	movlw	241
 13881  004B0E                     u10637:
 13882  004B0E  2EE8               	decfsz	wreg,f,c
 13883  004B10  D7FE               	bra	u10637
 13884  004B12  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13885  004B14  D7FC               	bra	u10637
 13886  004B16  D000               	nop2	
 13887  004B18                     l8538:
 13888  004B18  B281               	btfsc	3969,1,c	;volatile
 13889  004B1A  D7EA               	goto	l1412
 13890                           
 13891                           ;Test.c: 581: }
 13892                           ;Test.c: 582: LATBbits.LATB2 = 0;
 13893  004B1C  948A               	bcf	3978,2,c	;volatile
 13894  004B1E  D7E0               	goto	l1405
 13895  004B20                     __end_of_SpeedTest:
 13896                           	opt stack 0
 13897                           tblptru	equ	0xFF8
 13898                           tblptrh	equ	0xFF7
 13899                           tblptrl	equ	0xFF6
 13900                           tablat	equ	0xFF5
 13901                           prodh	equ	0xFF4
 13902                           prodl	equ	0xFF3
 13903                           intcon	equ	0xFF2
 13904                           intcon2	equ	0xFF1
 13905                           intcon3	equ	0xFF0
 13906                           postinc0	equ	0xFEE
 13907                           wreg	equ	0xFE8
 13908                           postdec1	equ	0xFE5
 13909                           fsr1l	equ	0xFE1
 13910                           indf2	equ	0xFDF
 13911                           postinc2	equ	0xFDE
 13912                           postdec2	equ	0xFDD
 13913                           fsr2h	equ	0xFDA
 13914                           fsr2l	equ	0xFD9
 13915                           status	equ	0xFD8
 13916                           
 13917 ;; *************** function _PortTestPusher *****************
 13918 ;; Defined at:
 13919 ;;		line 692 in file "Test.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;		None
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;		None
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      void 
 13926 ;; Registers used:
 13927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13928 ;; Tracked objects:
 13929 ;;		On entry : 0/0
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13937 ;;Total ram usage:        1 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:   10
 13940 ;; This function calls:
 13941 ;;		_lcdInst
 13942 ;;		_printf
 13943 ;; This function is called by:
 13944 ;;		_Test
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           	psect	text42
 13949  004EF6                     __ptext42:
 13950                           	opt stack 0
 13951  004EF6                     _PortTestPusher:
 13952                           	opt stack 19
 13953                           
 13954                           ;Test.c: 693: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13955                           
 13956                           ;incstack = 0
 13957  004EF6  0E01               	movlw	1
 13958  004EF8  ECDF  F02B         	call	_lcdInst
 13959  004EFC  0E68               	movlw	104
 13960  004EFE  0100               	movlb	0	; () banked
 13961  004F00  6FAB               	movwf	??_PortTestPusher& (0+255),b
 13962  004F02  0EE4               	movlw	228
 13963  004F04                     u10647:
 13964  004F04  2EE8               	decfsz	wreg,f,c
 13965  004F06  D7FE               	bra	u10647
 13966  004F08  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 13967  004F0A  D7FC               	bra	u10647
 13968  004F0C  F000               	nop	
 13969  004F0E  0E80               	movlw	128
 13970  004F10  ECDF  F02B         	call	_lcdInst
 13971                           
 13972                           ;Test.c: 694: printf("D WILL RETURN    ");
 13973  004F14  0EEB               	movlw	low STR_111
 13974  004F16  0100               	movlb	0	; () banked
 13975  004F18  6F8E               	movwf	printf@f& (0+255),b
 13976  004F1A  0EFA               	movlw	high STR_111
 13977  004F1C  0100               	movlb	0	; () banked
 13978  004F1E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13979  004F20  ECC1  F00B         	call	_printf	;wreg free
 13980                           
 13981                           ;Test.c: 695: lcdInst(0b11000000);;
 13982  004F24  0EC0               	movlw	192
 13983  004F26  ECDF  F02B         	call	_lcdInst
 13984                           
 13985                           ;Test.c: 696: printf("OTHER SETS PUSHER");
 13986  004F2A  0E33               	movlw	low STR_129
 13987  004F2C  0100               	movlb	0	; () banked
 13988  004F2E  6F8E               	movwf	printf@f& (0+255),b
 13989  004F30  0EFB               	movlw	high STR_129
 13990  004F32  0100               	movlb	0	; () banked
 13991  004F34  6F8F               	movwf	(printf@f+1)& (0+255),b
 13992  004F36  ECC1  F00B         	call	_printf	;wreg free
 13993  004F3A                     l1466:
 13994  004F3A  A281               	btfss	3969,1,c	;volatile
 13995  004F3C  D7FE               	goto	l1466
 13996                           
 13997                           ;Test.c: 701: }
 13998                           ;Test.c: 702: if(PORTB >> 4 == 0b1111){
 13999  004F3E  3881               	swapf	3969,w,c	;volatile
 14000  004F40  0B0F               	andlw	15
 14001  004F42  0A0F               	xorlw	15
 14002  004F44  B4D8               	btfsc	status,2,c
 14003  004F46  0012               	return	
 14004                           
 14005                           ;Test.c: 705: else{
 14006                           ;Test.c: 706: LATAbits.LATA4 = 1;
 14007                           
 14008                           ;Test.c: 704: }
 14009                           
 14010                           ;Test.c: 703: break;
 14011  004F48  8889               	bsf	3977,4,c	;volatile
 14012  004F4A                     l1472:
 14013  004F4A  B281               	btfsc	3969,1,c	;volatile
 14014  004F4C  D7FE               	goto	l1472
 14015                           
 14016                           ;Test.c: 709: }
 14017                           ;Test.c: 710: LATAbits.LATA4 = 0;
 14018  004F4E  9889               	bcf	3977,4,c	;volatile
 14019  004F50  D7F4               	goto	l1466
 14020  004F52                     __end_of_PortTestPusher:
 14021                           	opt stack 0
 14022                           tblptru	equ	0xFF8
 14023                           tblptrh	equ	0xFF7
 14024                           tblptrl	equ	0xFF6
 14025                           tablat	equ	0xFF5
 14026                           prodh	equ	0xFF4
 14027                           prodl	equ	0xFF3
 14028                           intcon	equ	0xFF2
 14029                           intcon2	equ	0xFF1
 14030                           intcon3	equ	0xFF0
 14031                           postinc0	equ	0xFEE
 14032                           wreg	equ	0xFE8
 14033                           postdec1	equ	0xFE5
 14034                           fsr1l	equ	0xFE1
 14035                           indf2	equ	0xFDF
 14036                           postinc2	equ	0xFDE
 14037                           postdec2	equ	0xFDD
 14038                           fsr2h	equ	0xFDA
 14039                           fsr2l	equ	0xFD9
 14040                           status	equ	0xFD8
 14041                           
 14042 ;; *************** function _PortTestDC *****************
 14043 ;; Defined at:
 14044 ;;		line 411 in file "Test.c"
 14045 ;; Parameters:    Size  Location     Type
 14046 ;;		None
 14047 ;; Auto vars:     Size  Location     Type
 14048 ;;		None
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  1    wreg      void 
 14051 ;; Registers used:
 14052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14062 ;;Total ram usage:        1 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:   10
 14065 ;; This function calls:
 14066 ;;		_lcdInst
 14067 ;;		_printf
 14068 ;; This function is called by:
 14069 ;;		_Test
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           	psect	text43
 14074  004F52                     __ptext43:
 14075                           	opt stack 0
 14076  004F52                     _PortTestDC:
 14077                           	opt stack 19
 14078                           
 14079                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14080                           
 14081                           ;incstack = 0
 14082  004F52  0E01               	movlw	1
 14083  004F54  ECDF  F02B         	call	_lcdInst
 14084  004F58  0E68               	movlw	104
 14085  004F5A  0100               	movlb	0	; () banked
 14086  004F5C  6FAB               	movwf	??_PortTestDC& (0+255),b
 14087  004F5E  0EE4               	movlw	228
 14088  004F60                     u10657:
 14089  004F60  2EE8               	decfsz	wreg,f,c
 14090  004F62  D7FE               	bra	u10657
 14091  004F64  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 14092  004F66  D7FC               	bra	u10657
 14093  004F68  F000               	nop	
 14094  004F6A  0E80               	movlw	128
 14095  004F6C  ECDF  F02B         	call	_lcdInst
 14096                           
 14097                           ;Test.c: 413: printf("D WILL RETURN    ");
 14098  004F70  0EEB               	movlw	low STR_111
 14099  004F72  0100               	movlb	0	; () banked
 14100  004F74  6F8E               	movwf	printf@f& (0+255),b
 14101  004F76  0EFA               	movlw	high STR_111
 14102  004F78  0100               	movlb	0	; () banked
 14103  004F7A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14104  004F7C  ECC1  F00B         	call	_printf	;wreg free
 14105                           
 14106                           ;Test.c: 414: lcdInst(0b11000000);;
 14107  004F80  0EC0               	movlw	192
 14108  004F82  ECDF  F02B         	call	_lcdInst
 14109                           
 14110                           ;Test.c: 415: printf("OTHER SETS DC   ");
 14111  004F86  0EE1               	movlw	low STR_112
 14112  004F88  0100               	movlb	0	; () banked
 14113  004F8A  6F8E               	movwf	printf@f& (0+255),b
 14114  004F8C  0EFB               	movlw	high STR_112
 14115  004F8E  0100               	movlb	0	; () banked
 14116  004F90  6F8F               	movwf	(printf@f+1)& (0+255),b
 14117  004F92  ECC1  F00B         	call	_printf	;wreg free
 14118  004F96                     l1339:
 14119  004F96  A281               	btfss	3969,1,c	;volatile
 14120  004F98  D7FE               	goto	l1339
 14121                           
 14122                           ;Test.c: 420: }
 14123                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 14124  004F9A  3881               	swapf	3969,w,c	;volatile
 14125  004F9C  0B0F               	andlw	15
 14126  004F9E  0A0F               	xorlw	15
 14127  004FA0  B4D8               	btfsc	status,2,c
 14128  004FA2  0012               	return	
 14129                           
 14130                           ;Test.c: 424: else{
 14131                           ;Test.c: 425: LATBbits.LATB2 = 1;
 14132                           
 14133                           ;Test.c: 423: }
 14134                           
 14135                           ;Test.c: 422: break;
 14136  004FA4  848A               	bsf	3978,2,c	;volatile
 14137  004FA6                     l1345:
 14138  004FA6  B281               	btfsc	3969,1,c	;volatile
 14139  004FA8  D7FE               	goto	l1345
 14140                           
 14141                           ;Test.c: 428: }
 14142                           ;Test.c: 429: LATBbits.LATB2 = 0;
 14143  004FAA  948A               	bcf	3978,2,c	;volatile
 14144  004FAC  D7F4               	goto	l1339
 14145  004FAE                     __end_of_PortTestDC:
 14146                           	opt stack 0
 14147                           tblptru	equ	0xFF8
 14148                           tblptrh	equ	0xFF7
 14149                           tblptrl	equ	0xFF6
 14150                           tablat	equ	0xFF5
 14151                           prodh	equ	0xFF4
 14152                           prodl	equ	0xFF3
 14153                           intcon	equ	0xFF2
 14154                           intcon2	equ	0xFF1
 14155                           intcon3	equ	0xFF0
 14156                           postinc0	equ	0xFEE
 14157                           wreg	equ	0xFE8
 14158                           postdec1	equ	0xFE5
 14159                           fsr1l	equ	0xFE1
 14160                           indf2	equ	0xFDF
 14161                           postinc2	equ	0xFDE
 14162                           postdec2	equ	0xFDD
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8
 14166                           
 14167 ;; *************** function _PlatformTest *****************
 14168 ;; Defined at:
 14169 ;;		line 434 in file "Test.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;		None
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  i               2   55[BANK0 ] int 
 14174 ;;  i               2   53[BANK0 ] int 
 14175 ;;  i               2   51[BANK0 ] int 
 14176 ;;  i               2   49[BANK0 ] int 
 14177 ;;  res             2   47[BANK0 ] int 
 14178 ;;  res             2   45[BANK0 ] int 
 14179 ;;  on              2   57[BANK0 ] int 
 14180 ;; Return value:  Size  Location     Type
 14181 ;;                  1    wreg      void 
 14182 ;; Registers used:
 14183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14190 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14192 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14193 ;;Total ram usage:       16 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; Hardware stack levels required when called:   10
 14196 ;; This function calls:
 14197 ;;		_lcdInst
 14198 ;;		_printf
 14199 ;;		_readADC
 14200 ;;		_stopSignals
 14201 ;; This function is called by:
 14202 ;;		_Test
 14203 ;; This function uses a non-reentrant model
 14204 ;;
 14205                           
 14206                           	psect	text44
 14207  001FA8                     __ptext44:
 14208                           	opt stack 0
 14209  001FA8                     _PlatformTest:
 14210                           	opt stack 19
 14211                           
 14212                           ;Test.c: 435: LATCbits.LATC5 = 1;
 14213                           
 14214                           ;incstack = 0
 14215  001FA8  8A8B               	bsf	3979,5,c	;volatile
 14216                           
 14217                           ;Test.c: 437: machine_state = Sorting_state;
 14218  001FAA  0E01               	movlw	1
 14219  001FAC  0100               	movlb	0	; () banked
 14220  001FAE  6FFC               	movwf	_machine_state& (0+255),b
 14221                           
 14222                           ;Test.c: 438: f_arm_position = 0;
 14223  001FB0  0E00               	movlw	0
 14224  001FB2  0100               	movlb	0	; () banked
 14225  001FB4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14226  001FB6  0E00               	movlw	0
 14227  001FB8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14228                           
 14229                           ;Test.c: 439: timer2_counter = 0;
 14230  001FBA  0E00               	movlw	0
 14231  001FBC  6E74               	movwf	_timer2_counter+1,c	;volatile
 14232  001FBE  0E00               	movlw	0
 14233  001FC0  6E73               	movwf	_timer2_counter,c	;volatile
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;Test.c: 440: LATBbits.LATB3 = 0;
 14237  001FC2  968A               	bcf	3978,3,c	;volatile
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;Test.c: 441: TMR2ON = 1;
 14241  001FC4  84CA               	bsf	4042,2,c	;volatile
 14242                           
 14243                           ;Test.c: 442: was_low_2 = 0;
 14244  001FC6  0E00               	movlw	0
 14245  001FC8  6E7A               	movwf	_was_low_2+1,c	;volatile
 14246  001FCA  0E00               	movlw	0
 14247  001FCC  6E79               	movwf	_was_low_2,c	;volatile
 14248                           
 14249                           ;Test.c: 444: int on = 1;
 14250  001FCE  0E00               	movlw	0
 14251  001FD0  0100               	movlb	0	; () banked
 14252  001FD2  6FBA               	movwf	(PlatformTest@on+1)& (0+255),b
 14253  001FD4  0E01               	movlw	1
 14254  001FD6  6FB9               	movwf	PlatformTest@on& (0+255),b
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14258  001FD8  0E01               	movlw	1
 14259  001FDA  ECDF  F02B         	call	_lcdInst
 14260  001FDE  0E68               	movlw	104
 14261  001FE0  0100               	movlb	0	; () banked
 14262  001FE2  6FAB               	movwf	??_PlatformTest& (0+255),b
 14263  001FE4  0EE4               	movlw	228
 14264  001FE6                     u10667:
 14265  001FE6  2EE8               	decfsz	wreg,f,c
 14266  001FE8  D7FE               	bra	u10667
 14267  001FEA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14268  001FEC  D7FC               	bra	u10667
 14269  001FEE  F000               	nop	
 14270  001FF0  0E80               	movlw	128
 14271  001FF2  ECDF  F02B         	call	_lcdInst
 14272                           
 14273                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 14274  001FF6  0E14               	movlw	low STR_113
 14275  001FF8  0100               	movlb	0	; () banked
 14276  001FFA  6F8E               	movwf	printf@f& (0+255),b
 14277  001FFC  0EFC               	movlw	high STR_113
 14278  001FFE  0100               	movlb	0	; () banked
 14279  002000  6F8F               	movwf	(printf@f+1)& (0+255),b
 14280  002002  ECC1  F00B         	call	_printf	;wreg free
 14281                           
 14282                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 14283  002006  D058               	goto	l8592
 14284  002008                     l8574:
 14285                           
 14286                           ;Test.c: 449: readADC(0);
 14287  002008  0E00               	movlw	0
 14288  00200A  ECD5  F02A         	call	_readADC
 14289                           
 14290                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 14291  00200E  50C3               	movf	4035,w,c	;volatile
 14292  002010  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14293  002014  0100               	movlb	0	; () banked
 14294  002016  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14295  002018  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14296  00201C  0100               	movlb	0	; () banked
 14297  00201E  6BAB               	clrf	??_PlatformTest& (0+255),b
 14298  002020  0100               	movlb	0	; () banked
 14299  002022  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14300  002024  0100               	movlb	0	; () banked
 14301  002026  6FAD               	movwf	PlatformTest@res& (0+255),b
 14302  002028  0100               	movlb	0	; () banked
 14303  00202A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14304  00202C  0100               	movlb	0	; () banked
 14305  00202E  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 14309  002030  0100               	movlb	0	; () banked
 14310  002032  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 14311  002034  D00A               	goto	u7490
 14312  002036  0E21               	movlw	33
 14313  002038  0100               	movlb	0	; () banked
 14314  00203A  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 14315  00203C  0E03               	movlw	3
 14316  00203E  0100               	movlb	0	; () banked
 14317  002040  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 14318  002042  A0D8               	btfss	status,0,c
 14319  002044  D002               	goto	u7490
 14320  002046  0E01               	movlw	1
 14321  002048  D001               	goto	u7500
 14322  00204A                     u7490:
 14323  00204A  0E00               	movlw	0
 14324  00204C                     u7500:
 14325  00204C  0100               	movlb	0	; () banked
 14326  00204E  6FE6               	movwf	_IR_signal& (0+255),b
 14327  002050  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14328                           
 14329                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14330  002052  0E01               	movlw	1
 14331  002054  ECDF  F02B         	call	_lcdInst
 14332  002058  0E68               	movlw	104
 14333  00205A  0100               	movlb	0	; () banked
 14334  00205C  6FAB               	movwf	??_PlatformTest& (0+255),b
 14335  00205E  0EE4               	movlw	228
 14336  002060                     u10677:
 14337  002060  2EE8               	decfsz	wreg,f,c
 14338  002062  D7FE               	bra	u10677
 14339  002064  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14340  002066  D7FC               	bra	u10677
 14341  002068  F000               	nop	
 14342  00206A  0E80               	movlw	128
 14343  00206C  ECDF  F02B         	call	_lcdInst
 14344                           
 14345                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 14346  002070  0E14               	movlw	low STR_113
 14347  002072  0100               	movlb	0	; () banked
 14348  002074  6F8E               	movwf	printf@f& (0+255),b
 14349  002076  0EFC               	movlw	high STR_113
 14350  002078  0100               	movlb	0	; () banked
 14351  00207A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14352  00207C  ECC1  F00B         	call	_printf	;wreg free
 14353                           
 14354                           ;Test.c: 455: lcdInst(0b11000000);;
 14355  002080  0EC0               	movlw	192
 14356  002082  ECDF  F02B         	call	_lcdInst
 14357                           
 14358                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 14359  002086  0E03               	movlw	low STR_115
 14360  002088  0100               	movlb	0	; () banked
 14361  00208A  6F8E               	movwf	printf@f& (0+255),b
 14362  00208C  0EFC               	movlw	high STR_115
 14363  00208E  0100               	movlb	0	; () banked
 14364  002090  6F8F               	movwf	(printf@f+1)& (0+255),b
 14365  002092  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 14366  002096  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 14367  00209A  ECC1  F00B         	call	_printf	;wreg free
 14368                           
 14369                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 14370  00209E  0E05               	movlw	5
 14371  0020A0  0100               	movlb	0	; () banked
 14372  0020A2  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14373  0020A4  0E0F               	movlw	15
 14374  0020A6  0100               	movlb	0	; () banked
 14375  0020A8  6FAB               	movwf	??_PlatformTest& (0+255),b
 14376  0020AA  0EF1               	movlw	241
 14377  0020AC                     u10687:
 14378  0020AC  2EE8               	decfsz	wreg,f,c
 14379  0020AE  D7FE               	bra	u10687
 14380  0020B0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14381  0020B2  D7FC               	bra	u10687
 14382  0020B4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14383  0020B6  D7FA               	bra	u10687
 14384  0020B8                     l8592:
 14385  0020B8  B281               	btfsc	3969,1,c	;volatile
 14386  0020BA  D059               	goto	l8612
 14387  0020BC  D7A5               	goto	l8574
 14388  0020BE                     l8594:
 14389                           
 14390                           ;Test.c: 462: readADC(0);
 14391  0020BE  0E00               	movlw	0
 14392  0020C0  ECD5  F02A         	call	_readADC
 14393                           
 14394                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 14395  0020C4  50C3               	movf	4035,w,c	;volatile
 14396  0020C6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14397  0020CA  0100               	movlb	0	; () banked
 14398  0020CC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14399  0020CE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14400  0020D2  0100               	movlb	0	; () banked
 14401  0020D4  6BAB               	clrf	??_PlatformTest& (0+255),b
 14402  0020D6  0100               	movlb	0	; () banked
 14403  0020D8  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14404  0020DA  0100               	movlb	0	; () banked
 14405  0020DC  6FAF               	movwf	PlatformTest@res_1808& (0+255),b
 14406  0020DE  0100               	movlb	0	; () banked
 14407  0020E0  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14408  0020E2  0100               	movlb	0	; () banked
 14409  0020E4  6FB0               	movwf	(PlatformTest@res_1808+1)& (0+255),b
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 14413  0020E6  0100               	movlb	0	; () banked
 14414  0020E8  BFB0               	btfsc	(PlatformTest@res_1808+1)& (0+255),7,b
 14415  0020EA  D00A               	goto	u7520
 14416  0020EC  0E21               	movlw	33
 14417  0020EE  0100               	movlb	0	; () banked
 14418  0020F0  5DAF               	subwf	PlatformTest@res_1808& (0+255),w,b
 14419  0020F2  0E03               	movlw	3
 14420  0020F4  0100               	movlb	0	; () banked
 14421  0020F6  59B0               	subwfb	(PlatformTest@res_1808+1)& (0+255),w,b
 14422  0020F8  A0D8               	btfss	status,0,c
 14423  0020FA  D002               	goto	u7520
 14424  0020FC  0E01               	movlw	1
 14425  0020FE  D001               	goto	u7530
 14426  002100                     u7520:
 14427  002100  0E00               	movlw	0
 14428  002102                     u7530:
 14429  002102  0100               	movlb	0	; () banked
 14430  002104  6FE6               	movwf	_IR_signal& (0+255),b
 14431  002106  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14432                           
 14433                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14434  002108  0E01               	movlw	1
 14435  00210A  ECDF  F02B         	call	_lcdInst
 14436  00210E  0E68               	movlw	104
 14437  002110  0100               	movlb	0	; () banked
 14438  002112  6FAB               	movwf	??_PlatformTest& (0+255),b
 14439  002114  0EE4               	movlw	228
 14440  002116                     u10697:
 14441  002116  2EE8               	decfsz	wreg,f,c
 14442  002118  D7FE               	bra	u10697
 14443  00211A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14444  00211C  D7FC               	bra	u10697
 14445  00211E  F000               	nop	
 14446  002120  0E80               	movlw	128
 14447  002122  ECDF  F02B         	call	_lcdInst
 14448                           
 14449                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 14450  002126  0E14               	movlw	low STR_113
 14451  002128  0100               	movlb	0	; () banked
 14452  00212A  6F8E               	movwf	printf@f& (0+255),b
 14453  00212C  0EFC               	movlw	high STR_113
 14454  00212E  0100               	movlb	0	; () banked
 14455  002130  6F8F               	movwf	(printf@f+1)& (0+255),b
 14456  002132  ECC1  F00B         	call	_printf	;wreg free
 14457                           
 14458                           ;Test.c: 468: lcdInst(0b11000000);;
 14459  002136  0EC0               	movlw	192
 14460  002138  ECDF  F02B         	call	_lcdInst
 14461                           
 14462                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 14463  00213C  0E03               	movlw	low STR_115
 14464  00213E  0100               	movlb	0	; () banked
 14465  002140  6F8E               	movwf	printf@f& (0+255),b
 14466  002142  0EFC               	movlw	high STR_115
 14467  002144  0100               	movlb	0	; () banked
 14468  002146  6F8F               	movwf	(printf@f+1)& (0+255),b
 14469  002148  C0AF  F090         	movff	PlatformTest@res_1808,?_printf+2
 14470  00214C  C0B0  F091         	movff	PlatformTest@res_1808+1,?_printf+3
 14471  002150  ECC1  F00B         	call	_printf	;wreg free
 14472                           
 14473                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 14474  002154  0E05               	movlw	5
 14475  002156  0100               	movlb	0	; () banked
 14476  002158  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14477  00215A  0E0F               	movlw	15
 14478  00215C  0100               	movlb	0	; () banked
 14479  00215E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14480  002160  0EF1               	movlw	241
 14481  002162                     u10707:
 14482  002162  2EE8               	decfsz	wreg,f,c
 14483  002164  D7FE               	bra	u10707
 14484  002166  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14485  002168  D7FC               	bra	u10707
 14486  00216A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14487  00216C  D7FA               	bra	u10707
 14488  00216E                     l8612:
 14489  00216E  A281               	btfss	3969,1,c	;volatile
 14490  002170  D7A6               	goto	l8594
 14491                           
 14492                           ;Test.c: 471: }
 14493                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 14494  002172  3881               	swapf	3969,w,c	;volatile
 14495  002174  0B0F               	andlw	15
 14496  002176  0A0F               	xorlw	15
 14497  002178  B4D8               	btfsc	status,2,c
 14498  00217A  D0DE               	goto	l1360
 14499                           
 14500                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 14501                           
 14502                           ;Test.c: 474: }
 14503                           
 14504                           ;Test.c: 473: break;
 14505  00217C  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14506  002180  0100               	movlb	0	; () banked
 14507  002182  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14508  002184  0E0F               	movlw	15
 14509  002186  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14510  002188  A4D8               	btfss	status,2,c
 14511  00218A  D012               	goto	l8624
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 14515  00218C  B48A               	btfsc	3978,2,c	;volatile
 14516  00218E  D004               	goto	u7570
 14517  002190  0100               	movlb	0	; () banked
 14518  002192  6BAB               	clrf	??_PlatformTest& (0+255),b
 14519  002194  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14520  002196  D002               	goto	u7588
 14521  002198                     u7570:
 14522  002198  0100               	movlb	0	; () banked
 14523  00219A  6BAB               	clrf	??_PlatformTest& (0+255),b
 14524  00219C                     u7588:
 14525  00219C  0100               	movlb	0	; () banked
 14526  00219E  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14527  0021A0  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14528  0021A2  508A               	movf	3978,w,c	;volatile
 14529  0021A4  0100               	movlb	0	; () banked
 14530  0021A6  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14531  0021A8  0BFB               	andlw	-5
 14532  0021AA  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14533  0021AC  6E8A               	movwf	3978,c	;volatile
 14534                           
 14535                           ;Test.c: 477: }
 14536  0021AE  D0C1               	goto	l1383
 14537  0021B0                     l8624:
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 14541  0021B0  3881               	swapf	3969,w,c	;volatile
 14542  0021B2  0B0F               	andlw	15
 14543  0021B4  0A03               	xorlw	3
 14544  0021B6  A4D8               	btfss	status,2,c
 14545  0021B8  D020               	goto	l8636
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;Test.c: 479: if(on){
 14549  0021BA  0100               	movlb	0	; () banked
 14550  0021BC  51B9               	movf	PlatformTest@on& (0+255),w,b
 14551  0021BE  0100               	movlb	0	; () banked
 14552  0021C0  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14553  0021C2  B4D8               	btfsc	status,2,c
 14554  0021C4  D010               	goto	l8632
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;Test.c: 480: f_arm_position = 1;
 14558  0021C6  0E00               	movlw	0
 14559  0021C8  0100               	movlb	0	; () banked
 14560  0021CA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14561  0021CC  0E01               	movlw	1
 14562  0021CE  D00F               	goto	L17
 14563  0021D0                     l8630:
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;Test.c: 481: on = !on;
 14567  0021D0  0100               	movlb	0	; () banked
 14568  0021D2  51B9               	movf	PlatformTest@on& (0+255),w,b
 14569  0021D4  0100               	movlb	0	; () banked
 14570  0021D6  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14571  0021D8  A4D8               	btfss	status,2,c
 14572  0021DA  D00D               	goto	u7630
 14573  0021DC  D00A               	goto	u7631
 14574  0021DE                     u7620:
 14575  0021DE  0100               	movlb	0	; () banked
 14576  0021E0  6FB9               	movwf	PlatformTest@on& (0+255),b
 14577  0021E2  6BBA               	clrf	(PlatformTest@on+1)& (0+255),b
 14578                           
 14579                           ;Test.c: 482: }
 14580  0021E4  D0A6               	goto	l1383
 14581  0021E6                     l8632:
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;Test.c: 483: else{
 14585                           ;Test.c: 484: f_arm_position = 0;
 14586  0021E6  0E00               	movlw	0
 14587  0021E8  0100               	movlb	0	; () banked
 14588  0021EA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14589  0021EC  0E00               	movlw	0
 14590  0021EE                     L17:
 14591  0021EE  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14592  0021F0  D7EF               	goto	l8630
 14593  0021F2                     u7631:
 14594  0021F2  0E01               	movlw	1
 14595  0021F4  D7F4               	goto	u7620
 14596  0021F6                     u7630:
 14597  0021F6  0E00               	movlw	0
 14598  0021F8  D7F2               	goto	u7620
 14599  0021FA                     l8636:
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;Test.c: 488: else if(PORTB >> 4 == 0b0100){
 14603  0021FA  3881               	swapf	3969,w,c	;volatile
 14604  0021FC  0B0F               	andlw	15
 14605  0021FE  0A04               	xorlw	4
 14606  002200  A4D8               	btfss	status,2,c
 14607  002202  D01D               	goto	l8650
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 14611  002204  0E00               	movlw	0
 14612  002206  0100               	movlb	0	; () banked
 14613  002208  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14614  00220A  0E00               	movlw	0
 14615  00220C  6FB1               	movwf	PlatformTest@i& (0+255),b
 14616  00220E                     l8640:
 14617                           
 14618                           ; BSR set to: 0
 14619  00220E  0100               	movlb	0	; () banked
 14620  002210  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14621  002212  D008               	goto	l1369
 14622  002214  0EB8               	movlw	184
 14623  002216  0100               	movlb	0	; () banked
 14624  002218  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14625  00221A  0E0B               	movlw	11
 14626  00221C  0100               	movlb	0	; () banked
 14627  00221E  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 14628  002220  B0D8               	btfsc	status,0,c
 14629  002222  D087               	goto	l1383
 14630  002224                     l1369:
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;Test.c: 491: LATAbits.LATA4 = 1;
 14634  002224  8889               	bsf	3977,4,c	;volatile
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;Test.c: 492: _delay((unsigned long)((75)*(32000000/4000000.0)));
 14638  002226  0EC8               	movlw	200
 14639  002228                     u10717:
 14640  002228  2EE8               	decfsz	wreg,f,c
 14641  00222A  D7FE               	bra	u10717
 14642                           
 14643                           ;Test.c: 493: LATAbits.LATA4 = 0;
 14644  00222C  9889               	bcf	3977,4,c	;volatile
 14645                           
 14646                           ;Test.c: 494: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14647  00222E  0E42               	movlw	66
 14648  002230                     u10727:
 14649  002230  2EE8               	decfsz	wreg,f,c
 14650  002232  D7FE               	bra	u10727
 14651  002234  D000               	nop2	
 14652  002236  0100               	movlb	0	; () banked
 14653  002238  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14654  00223A  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14655  00223C  D7E8               	goto	l8640
 14656  00223E                     l8650:
 14657                           
 14658                           ; BSR set to: 0
 14659                           ;Test.c: 497: else if(PORTB >> 4 == 0b0101){
 14660  00223E  3881               	swapf	3969,w,c	;volatile
 14661  002240  0B0F               	andlw	15
 14662  002242  0A05               	xorlw	5
 14663  002244  A4D8               	btfss	status,2,c
 14664  002246  D027               	goto	l8664
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;Test.c: 499: for(int i = 0; i<30; i++){
 14668  002248  0E00               	movlw	0
 14669  00224A  0100               	movlb	0	; () banked
 14670  00224C  6FB4               	movwf	(PlatformTest@i_1812+1)& (0+255),b
 14671  00224E  0E00               	movlw	0
 14672  002250  6FB3               	movwf	PlatformTest@i_1812& (0+255),b
 14673  002252                     l8654:
 14674                           
 14675                           ; BSR set to: 0
 14676  002252  0100               	movlb	0	; () banked
 14677  002254  BFB4               	btfsc	(PlatformTest@i_1812+1)& (0+255),7,b
 14678  002256  D008               	goto	l1373
 14679  002258  0100               	movlb	0	; () banked
 14680  00225A  51B4               	movf	(PlatformTest@i_1812+1)& (0+255),w,b
 14681  00225C  E16A               	bnz	l1383
 14682  00225E  0E1E               	movlw	30
 14683  002260  0100               	movlb	0	; () banked
 14684  002262  5DB3               	subwf	PlatformTest@i_1812& (0+255),w,b
 14685  002264  B0D8               	btfsc	status,0,c
 14686  002266  D065               	goto	l1383
 14687  002268                     l1373:
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;Test.c: 500: LATAbits.LATA4 = 1;
 14691  002268  8889               	bsf	3977,4,c	;volatile
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;Test.c: 501: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 14695  00226A  0E4E               	movlw	78
 14696  00226C  0100               	movlb	0	; () banked
 14697  00226E  6FAB               	movwf	??_PlatformTest& (0+255),b
 14698  002270  0EEB               	movlw	235
 14699  002272                     u10737:
 14700  002272  2EE8               	decfsz	wreg,f,c
 14701  002274  D7FE               	bra	u10737
 14702  002276  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14703  002278  D7FC               	bra	u10737
 14704                           
 14705                           ;Test.c: 502: LATAbits.LATA4 = 0;
 14706  00227A  9889               	bcf	3977,4,c	;volatile
 14707                           
 14708                           ;Test.c: 503: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 14709  00227C  0E1A               	movlw	26
 14710  00227E  0100               	movlb	0	; () banked
 14711  002280  6FAB               	movwf	??_PlatformTest& (0+255),b
 14712  002282  0EF8               	movlw	248
 14713  002284                     u10747:
 14714  002284  2EE8               	decfsz	wreg,f,c
 14715  002286  D7FE               	bra	u10747
 14716  002288  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14717  00228A  D7FC               	bra	u10747
 14718  00228C  F000               	nop	
 14719  00228E  0100               	movlb	0	; () banked
 14720  002290  4BB3               	infsnz	PlatformTest@i_1812& (0+255),f,b
 14721  002292  2BB4               	incf	(PlatformTest@i_1812+1)& (0+255),f,b
 14722  002294  D7DE               	goto	l8654
 14723  002296                     l8664:
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;Test.c: 506: else if (PORTB >> 4 == 0b0110){
 14727  002296  3881               	swapf	3969,w,c	;volatile
 14728  002298  0B0F               	andlw	15
 14729  00229A  0A06               	xorlw	6
 14730  00229C  A4D8               	btfss	status,2,c
 14731  00229E  D027               	goto	l8678
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;Test.c: 508: for(int i = 0; i<30; i++){
 14735  0022A0  0E00               	movlw	0
 14736  0022A2  0100               	movlb	0	; () banked
 14737  0022A4  6FB6               	movwf	(PlatformTest@i_1813+1)& (0+255),b
 14738  0022A6  0E00               	movlw	0
 14739  0022A8  6FB5               	movwf	PlatformTest@i_1813& (0+255),b
 14740  0022AA                     l8668:
 14741                           
 14742                           ; BSR set to: 0
 14743  0022AA  0100               	movlb	0	; () banked
 14744  0022AC  BFB6               	btfsc	(PlatformTest@i_1813+1)& (0+255),7,b
 14745  0022AE  D008               	goto	l1377
 14746  0022B0  0100               	movlb	0	; () banked
 14747  0022B2  51B6               	movf	(PlatformTest@i_1813+1)& (0+255),w,b
 14748  0022B4  E13E               	bnz	l1383
 14749  0022B6  0E1E               	movlw	30
 14750  0022B8  0100               	movlb	0	; () banked
 14751  0022BA  5DB5               	subwf	PlatformTest@i_1813& (0+255),w,b
 14752  0022BC  B0D8               	btfsc	status,0,c
 14753  0022BE  D039               	goto	l1383
 14754  0022C0                     l1377:
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;Test.c: 509: LATAbits.LATA4 = 1;
 14758  0022C0  8889               	bsf	3977,4,c	;volatile
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;Test.c: 510: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 14762  0022C2  0E3D               	movlw	61
 14763  0022C4  0100               	movlb	0	; () banked
 14764  0022C6  6FAB               	movwf	??_PlatformTest& (0+255),b
 14765  0022C8  0E41               	movlw	65
 14766  0022CA                     u10757:
 14767  0022CA  2EE8               	decfsz	wreg,f,c
 14768  0022CC  D7FE               	bra	u10757
 14769  0022CE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14770  0022D0  D7FC               	bra	u10757
 14771                           
 14772                           ;Test.c: 511: LATAbits.LATA4 = 0;
 14773  0022D2  9889               	bcf	3977,4,c	;volatile
 14774                           
 14775                           ;Test.c: 512: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 14776  0022D4  0E2C               	movlw	44
 14777  0022D6  0100               	movlb	0	; () banked
 14778  0022D8  6FAB               	movwf	??_PlatformTest& (0+255),b
 14779  0022DA  0EA1               	movlw	161
 14780  0022DC                     u10767:
 14781  0022DC  2EE8               	decfsz	wreg,f,c
 14782  0022DE  D7FE               	bra	u10767
 14783  0022E0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14784  0022E2  D7FC               	bra	u10767
 14785  0022E4  D000               	nop2	
 14786  0022E6  0100               	movlb	0	; () banked
 14787  0022E8  4BB5               	infsnz	PlatformTest@i_1813& (0+255),f,b
 14788  0022EA  2BB6               	incf	(PlatformTest@i_1813+1)& (0+255),f,b
 14789  0022EC  D7DE               	goto	l8668
 14790  0022EE                     l8678:
 14791                           
 14792                           ; BSR set to: 0
 14793                           ;Test.c: 515: else if (PORTB >> 4 == 0b1000){
 14794  0022EE  3881               	swapf	3969,w,c	;volatile
 14795  0022F0  0B0F               	andlw	15
 14796  0022F2  0A08               	xorlw	8
 14797  0022F4  A4D8               	btfss	status,2,c
 14798  0022F6  D01D               	goto	l1383
 14799                           
 14800                           ; BSR set to: 0
 14801                           ;Test.c: 517: for(int i = 0; i<3000; i++){
 14802  0022F8  0E00               	movlw	0
 14803  0022FA  0100               	movlb	0	; () banked
 14804  0022FC  6FB8               	movwf	(PlatformTest@i_1814+1)& (0+255),b
 14805  0022FE  0E00               	movlw	0
 14806  002300  6FB7               	movwf	PlatformTest@i_1814& (0+255),b
 14807  002302                     l8682:
 14808                           
 14809                           ; BSR set to: 0
 14810  002302  0100               	movlb	0	; () banked
 14811  002304  BFB8               	btfsc	(PlatformTest@i_1814+1)& (0+255),7,b
 14812  002306  D008               	goto	l1381
 14813  002308  0EB8               	movlw	184
 14814  00230A  0100               	movlb	0	; () banked
 14815  00230C  5DB7               	subwf	PlatformTest@i_1814& (0+255),w,b
 14816  00230E  0E0B               	movlw	11
 14817  002310  0100               	movlb	0	; () banked
 14818  002312  59B8               	subwfb	(PlatformTest@i_1814+1)& (0+255),w,b
 14819  002314  B0D8               	btfsc	status,0,c
 14820  002316  D00D               	goto	l1383
 14821  002318                     l1381:
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;Test.c: 518: LATAbits.LATA4 = 1;
 14825  002318  8889               	bsf	3977,4,c	;volatile
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;Test.c: 519: _delay((unsigned long)((58)*(32000000/4000000.0)));
 14829  00231A  0E9A               	movlw	154
 14830  00231C                     u10777:
 14831  00231C  2EE8               	decfsz	wreg,f,c
 14832  00231E  D7FE               	bra	u10777
 14833  002320  D000               	nop2	
 14834                           
 14835                           ;Test.c: 520: LATAbits.LATA4 = 0;
 14836  002322  9889               	bcf	3977,4,c	;volatile
 14837                           
 14838                           ;Test.c: 521: _delay((unsigned long)((42)*(32000000/4000000.0)));
 14839  002324  0E70               	movlw	112
 14840  002326                     u10787:
 14841  002326  2EE8               	decfsz	wreg,f,c
 14842  002328  D7FE               	bra	u10787
 14843  00232A  0100               	movlb	0	; () banked
 14844  00232C  4BB7               	infsnz	PlatformTest@i_1814& (0+255),f,b
 14845  00232E  2BB8               	incf	(PlatformTest@i_1814+1)& (0+255),f,b
 14846  002330  D7E8               	goto	l8682
 14847  002332                     l1383:
 14848  002332  A281               	btfss	3969,1,c	;volatile
 14849  002334  D71C               	goto	l8612
 14850  002336  D7FD               	goto	l1383
 14851  002338                     l1360:
 14852                           
 14853                           ;Test.c: 526: }
 14854                           ;Test.c: 528: LATCbits.LATC5 = 0;
 14855  002338  9A8B               	bcf	3979,5,c	;volatile
 14856                           
 14857                           ;Test.c: 529: stopSignals();
 14858  00233A  EC91  F02B         	call	_stopSignals	;wreg free
 14859                           
 14860                           ;Test.c: 530: machine_state = Testing_state;
 14861  00233E  0E03               	movlw	3
 14862  002340  0100               	movlb	0	; () banked
 14863  002342  6FFC               	movwf	_machine_state& (0+255),b
 14864                           
 14865                           ; BSR set to: 0
 14866  002344  0012               	return		;funcret
 14867  002346                     __end_of_PlatformTest:
 14868                           	opt stack 0
 14869                           tblptru	equ	0xFF8
 14870                           tblptrh	equ	0xFF7
 14871                           tblptrl	equ	0xFF6
 14872                           tablat	equ	0xFF5
 14873                           prodh	equ	0xFF4
 14874                           prodl	equ	0xFF3
 14875                           intcon	equ	0xFF2
 14876                           intcon2	equ	0xFF1
 14877                           intcon3	equ	0xFF0
 14878                           postinc0	equ	0xFEE
 14879                           wreg	equ	0xFE8
 14880                           postdec1	equ	0xFE5
 14881                           fsr1l	equ	0xFE1
 14882                           indf2	equ	0xFDF
 14883                           postinc2	equ	0xFDE
 14884                           postdec2	equ	0xFDD
 14885                           fsr2h	equ	0xFDA
 14886                           fsr2l	equ	0xFD9
 14887                           status	equ	0xFD8
 14888                           
 14889 ;; *************** function _readADC *****************
 14890 ;; Defined at:
 14891 ;;		line 15 in file "ADCFunctionality.c"
 14892 ;; Parameters:    Size  Location     Type
 14893 ;;  channel         1    wreg     unsigned char 
 14894 ;; Auto vars:     Size  Location     Type
 14895 ;;  channel         1    1[BANK0 ] unsigned char 
 14896 ;; Return value:  Size  Location     Type
 14897 ;;                  1    wreg      void 
 14898 ;; Registers used:
 14899 ;;		wreg, status,2, status,0, cstack
 14900 ;; Tracked objects:
 14901 ;;		On entry : 0/0
 14902 ;;		On exit  : 0/0
 14903 ;;		Unchanged: 0/0
 14904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;Total ram usage:        2 bytes
 14910 ;; Hardware stack levels used:    1
 14911 ;; Hardware stack levels required when called:    7
 14912 ;; This function calls:
 14913 ;;		Nothing
 14914 ;; This function is called by:
 14915 ;;		_readIR
 14916 ;;		_readMAG
 14917 ;;		_sensorTest
 14918 ;;		_PlatformTest
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           	psect	text45
 14923  0055AA                     __ptext45:
 14924                           	opt stack 0
 14925  0055AA                     _readADC:
 14926                           	opt stack 20
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;incstack = 0
 14930                           ;readADC@channel stored from wreg
 14931  0055AA  0100               	movlb	0	; () banked
 14932  0055AC  6F81               	movwf	readADC@channel& (0+255),b
 14933                           
 14934                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14935  0055AE  0100               	movlb	0	; () banked
 14936  0055B0  4581               	rlncf	readADC@channel& (0+255),w,b
 14937  0055B2  46E8               	rlncf	wreg,f,c
 14938  0055B4  0BFC               	andlw	252
 14939  0055B6  6EC2               	movwf	4034,c	;volatile
 14940                           
 14941                           ; BSR set to: 0
 14942                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14943  0055B8  80C2               	bsf	4034,0,c	;volatile
 14944                           
 14945                           ; BSR set to: 0
 14946                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14947  0055BA  82C2               	bsf	4034,1,c	;volatile
 14948                           
 14949                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14950  0055BC  D009               	goto	l6358
 14951  0055BE                     l6356:
 14952  0055BE  0E34               	movlw	52
 14953  0055C0  0100               	movlb	0	; () banked
 14954  0055C2  6F80               	movwf	??_readADC& (0+255),b
 14955  0055C4  0EF1               	movlw	241
 14956  0055C6                     u10797:
 14957  0055C6  2EE8               	decfsz	wreg,f,c
 14958  0055C8  D7FE               	bra	u10797
 14959  0055CA  2F80               	decfsz	??_readADC& (0+255),f,b
 14960  0055CC  D7FC               	bra	u10797
 14961  0055CE  D000               	nop2	
 14962  0055D0                     l6358:
 14963  0055D0  A2C2               	btfss	4034,1,c	;volatile
 14964  0055D2  0012               	return	
 14965  0055D4  D7F4               	goto	l6356
 14966  0055D6                     __end_of_readADC:
 14967                           	opt stack 0
 14968                           tblptru	equ	0xFF8
 14969                           tblptrh	equ	0xFF7
 14970                           tblptrl	equ	0xFF6
 14971                           tablat	equ	0xFF5
 14972                           prodh	equ	0xFF4
 14973                           prodl	equ	0xFF3
 14974                           intcon	equ	0xFF2
 14975                           intcon2	equ	0xFF1
 14976                           intcon3	equ	0xFF0
 14977                           postinc0	equ	0xFEE
 14978                           wreg	equ	0xFE8
 14979                           postdec1	equ	0xFE5
 14980                           fsr1l	equ	0xFE1
 14981                           indf2	equ	0xFDF
 14982                           postinc2	equ	0xFDE
 14983                           postdec2	equ	0xFDD
 14984                           fsr2h	equ	0xFDA
 14985                           fsr2l	equ	0xFD9
 14986                           status	equ	0xFD8
 14987                           
 14988 ;; *************** function _BothServos *****************
 14989 ;; Defined at:
 14990 ;;		line 351 in file "Test.c"
 14991 ;; Parameters:    Size  Location     Type
 14992 ;;		None
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;		None
 14995 ;; Return value:  Size  Location     Type
 14996 ;;                  1    wreg      void 
 14997 ;; Registers used:
 14998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14999 ;; Tracked objects:
 15000 ;;		On entry : 0/0
 15001 ;;		On exit  : 0/0
 15002 ;;		Unchanged: 0/0
 15003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15006 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;Total ram usage:        2 bytes
 15009 ;; Hardware stack levels used:    1
 15010 ;; Hardware stack levels required when called:   10
 15011 ;; This function calls:
 15012 ;;		_initServos
 15013 ;;		_lcdInst
 15014 ;;		_printf
 15015 ;;		_stopSignals
 15016 ;;		_updateServoPosition
 15017 ;; This function is called by:
 15018 ;;		_Test
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022                           	psect	text46
 15023  001BBA                     __ptext46:
 15024                           	opt stack 0
 15025  001BBA                     _BothServos:
 15026                           	opt stack 19
 15027                           
 15028                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15029                           
 15030                           ;incstack = 0
 15031  001BBA  0E01               	movlw	1
 15032  001BBC  ECDF  F02B         	call	_lcdInst
 15033  001BC0  0E68               	movlw	104
 15034  001BC2  0100               	movlb	0	; () banked
 15035  001BC4  6FAB               	movwf	??_BothServos& (0+255),b
 15036  001BC6  0EE4               	movlw	228
 15037  001BC8                     u10807:
 15038  001BC8  2EE8               	decfsz	wreg,f,c
 15039  001BCA  D7FE               	bra	u10807
 15040  001BCC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15041  001BCE  D7FC               	bra	u10807
 15042  001BD0  F000               	nop	
 15043  001BD2  0E80               	movlw	128
 15044  001BD4  ECDF  F02B         	call	_lcdInst
 15045                           
 15046                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15047  001BD8  0EBE               	movlw	low STR_110
 15048  001BDA  0100               	movlb	0	; () banked
 15049  001BDC  6F8E               	movwf	printf@f& (0+255),b
 15050  001BDE  0EFC               	movlw	high STR_110
 15051  001BE0  0100               	movlb	0	; () banked
 15052  001BE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15053  001BE4  ECC1  F00B         	call	_printf	;wreg free
 15054                           
 15055                           ;Test.c: 354: TMR1ON = 1;
 15056  001BE8  80CD               	bsf	4045,0,c	;volatile
 15057                           
 15058                           ;Test.c: 355: TMR3ON = 1;
 15059  001BEA  80B1               	bsf	4017,0,c	;volatile
 15060                           
 15061                           ;Test.c: 356: machine_state = Sorting_state;
 15062  001BEC  0E01               	movlw	1
 15063  001BEE  0100               	movlb	0	; () banked
 15064  001BF0  6FFC               	movwf	_machine_state& (0+255),b
 15065                           
 15066                           ; BSR set to: 0
 15067                           ;Test.c: 357: was_low_1 = 0;
 15068  001BF2  0E00               	movlw	0
 15069  001BF4  6E78               	movwf	_was_low_1+1,c	;volatile
 15070  001BF6  0E00               	movlw	0
 15071  001BF8  6E77               	movwf	_was_low_1,c	;volatile
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;Test.c: 358: was_low_3 = 0;
 15075  001BFA  0E00               	movlw	0
 15076  001BFC  6E7C               	movwf	_was_low_3+1,c	;volatile
 15077  001BFE  0E00               	movlw	0
 15078  001C00  6E7B               	movwf	_was_low_3,c	;volatile
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;Test.c: 364: initServos();
 15082  001C02  EC90  F025         	call	_initServos	;wreg free
 15083                           
 15084                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15085  001C06  0E3D               	movlw	61
 15086  001C08  0100               	movlb	0	; () banked
 15087  001C0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15088  001C0C  0EE1               	movlw	225
 15089  001C0E  0100               	movlb	0	; () banked
 15090  001C10  6FAB               	movwf	??_BothServos& (0+255),b
 15091  001C12  0E3F               	movlw	63
 15092  001C14                     u10817:
 15093  001C14  2EE8               	decfsz	wreg,f,c
 15094  001C16  D7FE               	bra	u10817
 15095  001C18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15096  001C1A  D7FC               	bra	u10817
 15097  001C1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15098  001C1E  D7FA               	bra	u10817
 15099  001C20  D000               	nop2	
 15100                           
 15101                           ;Test.c: 367: updateServoPosition(500, 1);
 15102  001C22  0E01               	movlw	1
 15103  001C24  0100               	movlb	0	; () banked
 15104  001C26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15105  001C28  0EF4               	movlw	244
 15106  001C2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15107  001C2C  0E00               	movlw	0
 15108  001C2E  0100               	movlb	0	; () banked
 15109  001C30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15110  001C32  0E01               	movlw	1
 15111  001C34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15112  001C36  EC0B  F025         	call	_updateServoPosition	;wreg free
 15113                           
 15114                           ;Test.c: 368: updateServoPosition(1050, 3);
 15115  001C3A  0E04               	movlw	4
 15116  001C3C  0100               	movlb	0	; () banked
 15117  001C3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15118  001C40  0E1A               	movlw	26
 15119  001C42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15120  001C44  0E00               	movlw	0
 15121  001C46  0100               	movlb	0	; () banked
 15122  001C48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15123  001C4A  0E03               	movlw	3
 15124  001C4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15125  001C4E  EC0B  F025         	call	_updateServoPosition	;wreg free
 15126                           
 15127                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15128  001C52  0E1F               	movlw	31
 15129  001C54  0100               	movlb	0	; () banked
 15130  001C56  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15131  001C58  0E71               	movlw	113
 15132  001C5A  0100               	movlb	0	; () banked
 15133  001C5C  6FAB               	movwf	??_BothServos& (0+255),b
 15134  001C5E  0E1E               	movlw	30
 15135  001C60                     u10827:
 15136  001C60  2EE8               	decfsz	wreg,f,c
 15137  001C62  D7FE               	bra	u10827
 15138  001C64  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15139  001C66  D7FC               	bra	u10827
 15140  001C68  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15141  001C6A  D7FA               	bra	u10827
 15142  001C6C  F000               	nop	
 15143                           
 15144                           ;Test.c: 370: updateServoPosition(1260, 3);
 15145  001C6E  0E04               	movlw	4
 15146  001C70  0100               	movlb	0	; () banked
 15147  001C72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15148  001C74  0EEC               	movlw	236
 15149  001C76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15150  001C78  0E00               	movlw	0
 15151  001C7A  0100               	movlb	0	; () banked
 15152  001C7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15153  001C7E  0E03               	movlw	3
 15154  001C80  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15155  001C82  EC0B  F025         	call	_updateServoPosition	;wreg free
 15156                           
 15157                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15158  001C86  0E1D               	movlw	29
 15159  001C88  0100               	movlb	0	; () banked
 15160  001C8A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15161  001C8C  0E69               	movlw	105
 15162  001C8E  0100               	movlb	0	; () banked
 15163  001C90  6FAB               	movwf	??_BothServos& (0+255),b
 15164  001C92  0EA5               	movlw	165
 15165  001C94                     u10837:
 15166  001C94  2EE8               	decfsz	wreg,f,c
 15167  001C96  D7FE               	bra	u10837
 15168  001C98  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15169  001C9A  D7FC               	bra	u10837
 15170  001C9C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15171  001C9E  D7FA               	bra	u10837
 15172                           
 15173                           ;Test.c: 372: updateServoPosition(1050, 3);
 15174  001CA0  0E04               	movlw	4
 15175  001CA2  0100               	movlb	0	; () banked
 15176  001CA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15177  001CA6  0E1A               	movlw	26
 15178  001CA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15179  001CAA  0E00               	movlw	0
 15180  001CAC  0100               	movlb	0	; () banked
 15181  001CAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15182  001CB0  0E03               	movlw	3
 15183  001CB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15184  001CB4  EC0B  F025         	call	_updateServoPosition	;wreg free
 15185                           
 15186                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15187  001CB8  0E1F               	movlw	31
 15188  001CBA  0100               	movlb	0	; () banked
 15189  001CBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15190  001CBE  0E71               	movlw	113
 15191  001CC0  0100               	movlb	0	; () banked
 15192  001CC2  6FAB               	movwf	??_BothServos& (0+255),b
 15193  001CC4  0E1E               	movlw	30
 15194  001CC6                     u10847:
 15195  001CC6  2EE8               	decfsz	wreg,f,c
 15196  001CC8  D7FE               	bra	u10847
 15197  001CCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15198  001CCC  D7FC               	bra	u10847
 15199  001CCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15200  001CD0  D7FA               	bra	u10847
 15201  001CD2  F000               	nop	
 15202                           
 15203                           ;Test.c: 375: updateServoPosition(850, 1);
 15204  001CD4  0E03               	movlw	3
 15205  001CD6  0100               	movlb	0	; () banked
 15206  001CD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15207  001CDA  0E52               	movlw	82
 15208  001CDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15209  001CDE  0E00               	movlw	0
 15210  001CE0  0100               	movlb	0	; () banked
 15211  001CE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15212  001CE4  0E01               	movlw	1
 15213  001CE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15214  001CE8  EC0B  F025         	call	_updateServoPosition	;wreg free
 15215                           
 15216                           ;Test.c: 376: updateServoPosition(1050, 3);
 15217  001CEC  0E04               	movlw	4
 15218  001CEE  0100               	movlb	0	; () banked
 15219  001CF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15220  001CF2  0E1A               	movlw	26
 15221  001CF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15222  001CF6  0E00               	movlw	0
 15223  001CF8  0100               	movlb	0	; () banked
 15224  001CFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15225  001CFC  0E03               	movlw	3
 15226  001CFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15227  001D00  EC0B  F025         	call	_updateServoPosition	;wreg free
 15228                           
 15229                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15230  001D04  0E1F               	movlw	31
 15231  001D06  0100               	movlb	0	; () banked
 15232  001D08  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15233  001D0A  0E71               	movlw	113
 15234  001D0C  0100               	movlb	0	; () banked
 15235  001D0E  6FAB               	movwf	??_BothServos& (0+255),b
 15236  001D10  0E1E               	movlw	30
 15237  001D12                     u10857:
 15238  001D12  2EE8               	decfsz	wreg,f,c
 15239  001D14  D7FE               	bra	u10857
 15240  001D16  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15241  001D18  D7FC               	bra	u10857
 15242  001D1A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15243  001D1C  D7FA               	bra	u10857
 15244  001D1E  F000               	nop	
 15245                           
 15246                           ;Test.c: 378: updateServoPosition(1260, 3);
 15247  001D20  0E04               	movlw	4
 15248  001D22  0100               	movlb	0	; () banked
 15249  001D24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15250  001D26  0EEC               	movlw	236
 15251  001D28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15252  001D2A  0E00               	movlw	0
 15253  001D2C  0100               	movlb	0	; () banked
 15254  001D2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15255  001D30  0E03               	movlw	3
 15256  001D32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15257  001D34  EC0B  F025         	call	_updateServoPosition	;wreg free
 15258                           
 15259                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15260  001D38  0E1D               	movlw	29
 15261  001D3A  0100               	movlb	0	; () banked
 15262  001D3C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15263  001D3E  0E69               	movlw	105
 15264  001D40  0100               	movlb	0	; () banked
 15265  001D42  6FAB               	movwf	??_BothServos& (0+255),b
 15266  001D44  0EA5               	movlw	165
 15267  001D46                     u10867:
 15268  001D46  2EE8               	decfsz	wreg,f,c
 15269  001D48  D7FE               	bra	u10867
 15270  001D4A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15271  001D4C  D7FC               	bra	u10867
 15272  001D4E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15273  001D50  D7FA               	bra	u10867
 15274                           
 15275                           ;Test.c: 380: updateServoPosition(1050, 3);
 15276  001D52  0E04               	movlw	4
 15277  001D54  0100               	movlb	0	; () banked
 15278  001D56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15279  001D58  0E1A               	movlw	26
 15280  001D5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15281  001D5C  0E00               	movlw	0
 15282  001D5E  0100               	movlb	0	; () banked
 15283  001D60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15284  001D62  0E03               	movlw	3
 15285  001D64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15286  001D66  EC0B  F025         	call	_updateServoPosition	;wreg free
 15287                           
 15288                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15289  001D6A  0E1F               	movlw	31
 15290  001D6C  0100               	movlb	0	; () banked
 15291  001D6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15292  001D70  0E71               	movlw	113
 15293  001D72  0100               	movlb	0	; () banked
 15294  001D74  6FAB               	movwf	??_BothServos& (0+255),b
 15295  001D76  0E1E               	movlw	30
 15296  001D78                     u10877:
 15297  001D78  2EE8               	decfsz	wreg,f,c
 15298  001D7A  D7FE               	bra	u10877
 15299  001D7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15300  001D7E  D7FC               	bra	u10877
 15301  001D80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15302  001D82  D7FA               	bra	u10877
 15303  001D84  F000               	nop	
 15304                           
 15305                           ;Test.c: 383: updateServoPosition(500, 1);
 15306  001D86  0E01               	movlw	1
 15307  001D88  0100               	movlb	0	; () banked
 15308  001D8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15309  001D8C  0EF4               	movlw	244
 15310  001D8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15311  001D90  0E00               	movlw	0
 15312  001D92  0100               	movlb	0	; () banked
 15313  001D94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15314  001D96  0E01               	movlw	1
 15315  001D98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15316  001D9A  EC0B  F025         	call	_updateServoPosition	;wreg free
 15317                           
 15318                           ;Test.c: 384: updateServoPosition(1050, 3);
 15319  001D9E  0E04               	movlw	4
 15320  001DA0  0100               	movlb	0	; () banked
 15321  001DA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15322  001DA4  0E1A               	movlw	26
 15323  001DA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15324  001DA8  0E00               	movlw	0
 15325  001DAA  0100               	movlb	0	; () banked
 15326  001DAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15327  001DAE  0E03               	movlw	3
 15328  001DB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15329  001DB2  EC0B  F025         	call	_updateServoPosition	;wreg free
 15330                           
 15331                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 15332  001DB6  0E1F               	movlw	31
 15333  001DB8  0100               	movlb	0	; () banked
 15334  001DBA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15335  001DBC  0E71               	movlw	113
 15336  001DBE  0100               	movlb	0	; () banked
 15337  001DC0  6FAB               	movwf	??_BothServos& (0+255),b
 15338  001DC2  0E1E               	movlw	30
 15339  001DC4                     u10887:
 15340  001DC4  2EE8               	decfsz	wreg,f,c
 15341  001DC6  D7FE               	bra	u10887
 15342  001DC8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15343  001DCA  D7FC               	bra	u10887
 15344  001DCC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15345  001DCE  D7FA               	bra	u10887
 15346  001DD0  F000               	nop	
 15347                           
 15348                           ;Test.c: 386: updateServoPosition(1260, 3);
 15349  001DD2  0E04               	movlw	4
 15350  001DD4  0100               	movlb	0	; () banked
 15351  001DD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15352  001DD8  0EEC               	movlw	236
 15353  001DDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15354  001DDC  0E00               	movlw	0
 15355  001DDE  0100               	movlb	0	; () banked
 15356  001DE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15357  001DE2  0E03               	movlw	3
 15358  001DE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15359  001DE6  EC0B  F025         	call	_updateServoPosition	;wreg free
 15360                           
 15361                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 15362  001DEA  0E1D               	movlw	29
 15363  001DEC  0100               	movlb	0	; () banked
 15364  001DEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15365  001DF0  0E69               	movlw	105
 15366  001DF2  0100               	movlb	0	; () banked
 15367  001DF4  6FAB               	movwf	??_BothServos& (0+255),b
 15368  001DF6  0EA5               	movlw	165
 15369  001DF8                     u10897:
 15370  001DF8  2EE8               	decfsz	wreg,f,c
 15371  001DFA  D7FE               	bra	u10897
 15372  001DFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15373  001DFE  D7FC               	bra	u10897
 15374  001E00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15375  001E02  D7FA               	bra	u10897
 15376                           
 15377                           ;Test.c: 388: updateServoPosition(1050, 3);
 15378  001E04  0E04               	movlw	4
 15379  001E06  0100               	movlb	0	; () banked
 15380  001E08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15381  001E0A  0E1A               	movlw	26
 15382  001E0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15383  001E0E  0E00               	movlw	0
 15384  001E10  0100               	movlb	0	; () banked
 15385  001E12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15386  001E14  0E03               	movlw	3
 15387  001E16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15388  001E18  EC0B  F025         	call	_updateServoPosition	;wreg free
 15389                           
 15390                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15391  001E1C  0E3D               	movlw	61
 15392  001E1E  0100               	movlb	0	; () banked
 15393  001E20  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15394  001E22  0EE1               	movlw	225
 15395  001E24  0100               	movlb	0	; () banked
 15396  001E26  6FAB               	movwf	??_BothServos& (0+255),b
 15397  001E28  0E3F               	movlw	63
 15398  001E2A                     u10907:
 15399  001E2A  2EE8               	decfsz	wreg,f,c
 15400  001E2C  D7FE               	bra	u10907
 15401  001E2E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15402  001E30  D7FC               	bra	u10907
 15403  001E32  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15404  001E34  D7FA               	bra	u10907
 15405  001E36  D000               	nop2	
 15406                           
 15407                           ;Test.c: 391: updateServoPosition(1670, 1);
 15408  001E38  0E06               	movlw	6
 15409  001E3A  0100               	movlb	0	; () banked
 15410  001E3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15411  001E3E  0E86               	movlw	134
 15412  001E40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15413  001E42  0E00               	movlw	0
 15414  001E44  0100               	movlb	0	; () banked
 15415  001E46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15416  001E48  0E01               	movlw	1
 15417  001E4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15418  001E4C  EC0B  F025         	call	_updateServoPosition	;wreg free
 15419                           
 15420                           ;Test.c: 392: updateServoPosition(1050, 3);
 15421  001E50  0E04               	movlw	4
 15422  001E52  0100               	movlb	0	; () banked
 15423  001E54  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15424  001E56  0E1A               	movlw	26
 15425  001E58  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15426  001E5A  0E00               	movlw	0
 15427  001E5C  0100               	movlb	0	; () banked
 15428  001E5E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15429  001E60  0E03               	movlw	3
 15430  001E62  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15431  001E64  EC0B  F025         	call	_updateServoPosition	;wreg free
 15432                           
 15433                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15434  001E68  0E1F               	movlw	31
 15435  001E6A  0100               	movlb	0	; () banked
 15436  001E6C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15437  001E6E  0E71               	movlw	113
 15438  001E70  0100               	movlb	0	; () banked
 15439  001E72  6FAB               	movwf	??_BothServos& (0+255),b
 15440  001E74  0E1E               	movlw	30
 15441  001E76                     u10917:
 15442  001E76  2EE8               	decfsz	wreg,f,c
 15443  001E78  D7FE               	bra	u10917
 15444  001E7A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15445  001E7C  D7FC               	bra	u10917
 15446  001E7E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15447  001E80  D7FA               	bra	u10917
 15448  001E82  F000               	nop	
 15449                           
 15450                           ;Test.c: 394: updateServoPosition(1390, 3);
 15451  001E84  0E05               	movlw	5
 15452  001E86  0100               	movlb	0	; () banked
 15453  001E88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15454  001E8A  0E6E               	movlw	110
 15455  001E8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15456  001E8E  0E00               	movlw	0
 15457  001E90  0100               	movlb	0	; () banked
 15458  001E92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15459  001E94  0E03               	movlw	3
 15460  001E96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15461  001E98  EC0B  F025         	call	_updateServoPosition	;wreg free
 15462                           
 15463                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 15464  001E9C  0E1D               	movlw	29
 15465  001E9E  0100               	movlb	0	; () banked
 15466  001EA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15467  001EA2  0E69               	movlw	105
 15468  001EA4  0100               	movlb	0	; () banked
 15469  001EA6  6FAB               	movwf	??_BothServos& (0+255),b
 15470  001EA8  0EA5               	movlw	165
 15471  001EAA                     u10927:
 15472  001EAA  2EE8               	decfsz	wreg,f,c
 15473  001EAC  D7FE               	bra	u10927
 15474  001EAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15475  001EB0  D7FC               	bra	u10927
 15476  001EB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15477  001EB4  D7FA               	bra	u10927
 15478                           
 15479                           ;Test.c: 396: updateServoPosition(1050, 3);
 15480  001EB6  0E04               	movlw	4
 15481  001EB8  0100               	movlb	0	; () banked
 15482  001EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15483  001EBC  0E1A               	movlw	26
 15484  001EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15485  001EC0  0E00               	movlw	0
 15486  001EC2  0100               	movlb	0	; () banked
 15487  001EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15488  001EC6  0E03               	movlw	3
 15489  001EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15490  001ECA  EC0B  F025         	call	_updateServoPosition	;wreg free
 15491                           
 15492                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15493  001ECE  0E1F               	movlw	31
 15494  001ED0  0100               	movlb	0	; () banked
 15495  001ED2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15496  001ED4  0E71               	movlw	113
 15497  001ED6  0100               	movlb	0	; () banked
 15498  001ED8  6FAB               	movwf	??_BothServos& (0+255),b
 15499  001EDA  0E1E               	movlw	30
 15500  001EDC                     u10937:
 15501  001EDC  2EE8               	decfsz	wreg,f,c
 15502  001EDE  D7FE               	bra	u10937
 15503  001EE0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15504  001EE2  D7FC               	bra	u10937
 15505  001EE4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15506  001EE6  D7FA               	bra	u10937
 15507  001EE8  F000               	nop	
 15508                           
 15509                           ;Test.c: 399: updateServoPosition(2400, 1);
 15510  001EEA  0E09               	movlw	9
 15511  001EEC  0100               	movlb	0	; () banked
 15512  001EEE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15513  001EF0  0E60               	movlw	96
 15514  001EF2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15515  001EF4  0E00               	movlw	0
 15516  001EF6  0100               	movlb	0	; () banked
 15517  001EF8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15518  001EFA  0E01               	movlw	1
 15519  001EFC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15520  001EFE  EC0B  F025         	call	_updateServoPosition	;wreg free
 15521                           
 15522                           ;Test.c: 400: updateServoPosition(1050, 3);
 15523  001F02  0E04               	movlw	4
 15524  001F04  0100               	movlb	0	; () banked
 15525  001F06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15526  001F08  0E1A               	movlw	26
 15527  001F0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15528  001F0C  0E00               	movlw	0
 15529  001F0E  0100               	movlb	0	; () banked
 15530  001F10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15531  001F12  0E03               	movlw	3
 15532  001F14  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15533  001F16  EC0B  F025         	call	_updateServoPosition	;wreg free
 15534                           
 15535                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15536  001F1A  0E1F               	movlw	31
 15537  001F1C  0100               	movlb	0	; () banked
 15538  001F1E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15539  001F20  0E71               	movlw	113
 15540  001F22  0100               	movlb	0	; () banked
 15541  001F24  6FAB               	movwf	??_BothServos& (0+255),b
 15542  001F26  0E1E               	movlw	30
 15543  001F28                     u10947:
 15544  001F28  2EE8               	decfsz	wreg,f,c
 15545  001F2A  D7FE               	bra	u10947
 15546  001F2C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15547  001F2E  D7FC               	bra	u10947
 15548  001F30  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15549  001F32  D7FA               	bra	u10947
 15550  001F34  F000               	nop	
 15551                           
 15552                           ;Test.c: 402: updateServoPosition(1390, 3);
 15553  001F36  0E05               	movlw	5
 15554  001F38  0100               	movlb	0	; () banked
 15555  001F3A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15556  001F3C  0E6E               	movlw	110
 15557  001F3E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15558  001F40  0E00               	movlw	0
 15559  001F42  0100               	movlb	0	; () banked
 15560  001F44  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15561  001F46  0E03               	movlw	3
 15562  001F48  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15563  001F4A  EC0B  F025         	call	_updateServoPosition	;wreg free
 15564                           
 15565                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 15566  001F4E  0E1D               	movlw	29
 15567  001F50  0100               	movlb	0	; () banked
 15568  001F52  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15569  001F54  0E69               	movlw	105
 15570  001F56  0100               	movlb	0	; () banked
 15571  001F58  6FAB               	movwf	??_BothServos& (0+255),b
 15572  001F5A  0EA5               	movlw	165
 15573  001F5C                     u10957:
 15574  001F5C  2EE8               	decfsz	wreg,f,c
 15575  001F5E  D7FE               	bra	u10957
 15576  001F60  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15577  001F62  D7FC               	bra	u10957
 15578  001F64  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15579  001F66  D7FA               	bra	u10957
 15580                           
 15581                           ;Test.c: 404: updateServoPosition(1050, 3);
 15582  001F68  0E04               	movlw	4
 15583  001F6A  0100               	movlb	0	; () banked
 15584  001F6C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15585  001F6E  0E1A               	movlw	26
 15586  001F70  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15587  001F72  0E00               	movlw	0
 15588  001F74  0100               	movlb	0	; () banked
 15589  001F76  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15590  001F78  0E03               	movlw	3
 15591  001F7A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15592  001F7C  EC0B  F025         	call	_updateServoPosition	;wreg free
 15593                           
 15594                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 15595  001F80  0E1F               	movlw	31
 15596  001F82  0100               	movlb	0	; () banked
 15597  001F84  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15598  001F86  0E71               	movlw	113
 15599  001F88  0100               	movlb	0	; () banked
 15600  001F8A  6FAB               	movwf	??_BothServos& (0+255),b
 15601  001F8C  0E1E               	movlw	30
 15602  001F8E                     u10967:
 15603  001F8E  2EE8               	decfsz	wreg,f,c
 15604  001F90  D7FE               	bra	u10967
 15605  001F92  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15606  001F94  D7FC               	bra	u10967
 15607  001F96  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15608  001F98  D7FA               	bra	u10967
 15609  001F9A  F000               	nop	
 15610                           
 15611                           ;Test.c: 407: stopSignals();
 15612  001F9C  EC91  F02B         	call	_stopSignals	;wreg free
 15613                           
 15614                           ;Test.c: 408: machine_state = Testing_state;
 15615  001FA0  0E03               	movlw	3
 15616  001FA2  0100               	movlb	0	; () banked
 15617  001FA4  6FFC               	movwf	_machine_state& (0+255),b
 15618                           
 15619                           ; BSR set to: 0
 15620  001FA6  0012               	return		;funcret
 15621  001FA8                     __end_of_BothServos:
 15622                           	opt stack 0
 15623                           tblptru	equ	0xFF8
 15624                           tblptrh	equ	0xFF7
 15625                           tblptrl	equ	0xFF6
 15626                           tablat	equ	0xFF5
 15627                           prodh	equ	0xFF4
 15628                           prodl	equ	0xFF3
 15629                           intcon	equ	0xFF2
 15630                           intcon2	equ	0xFF1
 15631                           intcon3	equ	0xFF0
 15632                           postinc0	equ	0xFEE
 15633                           wreg	equ	0xFE8
 15634                           postdec1	equ	0xFE5
 15635                           fsr1l	equ	0xFE1
 15636                           indf2	equ	0xFDF
 15637                           postinc2	equ	0xFDE
 15638                           postdec2	equ	0xFDD
 15639                           fsr2h	equ	0xFDA
 15640                           fsr2l	equ	0xFD9
 15641                           status	equ	0xFD8
 15642                           
 15643 ;; *************** function _stopSignals *****************
 15644 ;; Defined at:
 15645 ;;		line 70 in file "main.c"
 15646 ;; Parameters:    Size  Location     Type
 15647 ;;		None
 15648 ;; Auto vars:     Size  Location     Type
 15649 ;;		None
 15650 ;; Return value:  Size  Location     Type
 15651 ;;                  1    wreg      void 
 15652 ;; Registers used:
 15653 ;;		wreg, status,2
 15654 ;; Tracked objects:
 15655 ;;		On entry : 0/0
 15656 ;;		On exit  : 0/0
 15657 ;;		Unchanged: 0/0
 15658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15663 ;;Total ram usage:        0 bytes
 15664 ;; Hardware stack levels used:    1
 15665 ;; Hardware stack levels required when called:    7
 15666 ;; This function calls:
 15667 ;;		Nothing
 15668 ;; This function is called by:
 15669 ;;		_main
 15670 ;;		_BothServos
 15671 ;;		_PlatformTest
 15672 ;;		_arm
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           	psect	text47
 15677  005722                     __ptext47:
 15678                           	opt stack 0
 15679  005722                     _stopSignals:
 15680                           	opt stack 23
 15681                           
 15682                           ;main.c: 71: LATA = 0x00;
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;incstack = 0
 15686  005722  0E00               	movlw	0
 15687  005724  6E89               	movwf	3977,c	;volatile
 15688                           
 15689                           ;main.c: 72: LATB = 0x00;
 15690  005726  0E00               	movlw	0
 15691  005728  6E8A               	movwf	3978,c	;volatile
 15692                           
 15693                           ;main.c: 73: LATC = 0x00;
 15694  00572A  0E00               	movlw	0
 15695  00572C  6E8B               	movwf	3979,c	;volatile
 15696                           
 15697                           ;main.c: 74: LATD = 0x00;
 15698  00572E  0E00               	movlw	0
 15699  005730  6E8C               	movwf	3980,c	;volatile
 15700                           
 15701                           ;main.c: 75: LATE = 0x00;
 15702  005732  0E00               	movlw	0
 15703  005734  6E8D               	movwf	3981,c	;volatile
 15704                           
 15705                           ;main.c: 76: TMR1ON = 0;
 15706  005736  90CD               	bcf	4045,0,c	;volatile
 15707                           
 15708                           ;main.c: 77: TMR2ON = 0;
 15709  005738  94CA               	bcf	4042,2,c	;volatile
 15710                           
 15711                           ;main.c: 78: TMR3ON = 0;
 15712  00573A  90B1               	bcf	4017,0,c	;volatile
 15713  00573C  0012               	return		;funcret
 15714  00573E                     __end_of_stopSignals:
 15715                           	opt stack 0
 15716                           tblptru	equ	0xFF8
 15717                           tblptrh	equ	0xFF7
 15718                           tblptrl	equ	0xFF6
 15719                           tablat	equ	0xFF5
 15720                           prodh	equ	0xFF4
 15721                           prodl	equ	0xFF3
 15722                           intcon	equ	0xFF2
 15723                           intcon2	equ	0xFF1
 15724                           intcon3	equ	0xFF0
 15725                           postinc0	equ	0xFEE
 15726                           wreg	equ	0xFE8
 15727                           postdec1	equ	0xFE5
 15728                           fsr1l	equ	0xFE1
 15729                           indf2	equ	0xFDF
 15730                           postinc2	equ	0xFDE
 15731                           postdec2	equ	0xFDD
 15732                           fsr2h	equ	0xFDA
 15733                           fsr2l	equ	0xFD9
 15734                           status	equ	0xFD8
 15735                           
 15736 ;; *************** function _initServos *****************
 15737 ;; Defined at:
 15738 ;;		line 449 in file "sort.c"
 15739 ;; Parameters:    Size  Location     Type
 15740 ;;		None
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;		None
 15743 ;; Return value:  Size  Location     Type
 15744 ;;                  1    wreg      void 
 15745 ;; Registers used:
 15746 ;;		wreg, status,2, status,0, cstack
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;Total ram usage:        1 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; Hardware stack levels required when called:    8
 15759 ;; This function calls:
 15760 ;;		_updateServoPosition
 15761 ;; This function is called by:
 15762 ;;		_Loading
 15763 ;;		_BothServos
 15764 ;; This function uses a non-reentrant model
 15765 ;;
 15766                           
 15767                           	psect	text48
 15768  004B20                     __ptext48:
 15769                           	opt stack 0
 15770  004B20                     _initServos:
 15771                           	opt stack 20
 15772                           
 15773                           ;sort.c: 451: updateServoPosition(1200, 1);
 15774                           
 15775                           ;incstack = 0
 15776  004B20  0E04               	movlw	4
 15777  004B22  0100               	movlb	0	; () banked
 15778  004B24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15779  004B26  0EB0               	movlw	176
 15780  004B28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15781  004B2A  0E00               	movlw	0
 15782  004B2C  0100               	movlb	0	; () banked
 15783  004B2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15784  004B30  0E01               	movlw	1
 15785  004B32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15786  004B34  EC0B  F025         	call	_updateServoPosition	;wreg free
 15787                           
 15788                           ;sort.c: 452: updateServoPosition(1050, 3);
 15789  004B38  0E04               	movlw	4
 15790  004B3A  0100               	movlb	0	; () banked
 15791  004B3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15792  004B3E  0E1A               	movlw	26
 15793  004B40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15794  004B42  0E00               	movlw	0
 15795  004B44  0100               	movlb	0	; () banked
 15796  004B46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15797  004B48  0E03               	movlw	3
 15798  004B4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15799  004B4C  EC0B  F025         	call	_updateServoPosition	;wreg free
 15800                           
 15801                           ;sort.c: 453: TMR1ON = 1;
 15802  004B50  80CD               	bsf	4045,0,c	;volatile
 15803                           
 15804                           ;sort.c: 454: was_low_1 = 0;
 15805  004B52  0E00               	movlw	0
 15806  004B54  6E78               	movwf	_was_low_1+1,c	;volatile
 15807  004B56  0E00               	movlw	0
 15808  004B58  6E77               	movwf	_was_low_1,c	;volatile
 15809                           
 15810                           ;sort.c: 456: _delay((unsigned long)((5)*(32000000/4000.0)));
 15811  004B5A  0E34               	movlw	52
 15812  004B5C  0100               	movlb	0	; () banked
 15813  004B5E  6F88               	movwf	??_initServos& (0+255),b
 15814  004B60  0EF1               	movlw	241
 15815  004B62                     u10977:
 15816  004B62  2EE8               	decfsz	wreg,f,c
 15817  004B64  D7FE               	bra	u10977
 15818  004B66  2F88               	decfsz	??_initServos& (0+255),f,b
 15819  004B68  D7FC               	bra	u10977
 15820  004B6A  D000               	nop2	
 15821                           
 15822                           ;sort.c: 458: TMR3ON = 1;
 15823  004B6C  80B1               	bsf	4017,0,c	;volatile
 15824                           
 15825                           ;sort.c: 459: was_low_3 = 0;
 15826  004B6E  0E00               	movlw	0
 15827  004B70  6E7C               	movwf	_was_low_3+1,c	;volatile
 15828  004B72  0E00               	movlw	0
 15829  004B74  6E7B               	movwf	_was_low_3,c	;volatile
 15830                           
 15831                           ;sort.c: 462: _delay((unsigned long)((1)*(32000000/4000.0)));
 15832  004B76  0E0B               	movlw	11
 15833  004B78  0100               	movlb	0	; () banked
 15834  004B7A  6F88               	movwf	??_initServos& (0+255),b
 15835  004B7C  0E62               	movlw	98
 15836  004B7E                     u10987:
 15837  004B7E  2EE8               	decfsz	wreg,f,c
 15838  004B80  D7FE               	bra	u10987
 15839  004B82  2F88               	decfsz	??_initServos& (0+255),f,b
 15840  004B84  D7FC               	bra	u10987
 15841  004B86  F000               	nop	
 15842                           
 15843                           ;sort.c: 463: LATBbits.LATB3 = 0;
 15844  004B88  968A               	bcf	3978,3,c	;volatile
 15845                           
 15846                           ;sort.c: 464: TMR2ON = 1;
 15847  004B8A  84CA               	bsf	4042,2,c	;volatile
 15848                           
 15849                           ;sort.c: 465: was_low_2 = 0;
 15850  004B8C  0E00               	movlw	0
 15851  004B8E  6E7A               	movwf	_was_low_2+1,c	;volatile
 15852  004B90  0E00               	movlw	0
 15853  004B92  6E79               	movwf	_was_low_2,c	;volatile
 15854                           
 15855                           ;sort.c: 467: LATCbits.LATC0 = 1;
 15856  004B94  808B               	bsf	3979,0,c	;volatile
 15857  004B96  0012               	return		;funcret
 15858  004B98                     __end_of_initServos:
 15859                           	opt stack 0
 15860                           tblptru	equ	0xFF8
 15861                           tblptrh	equ	0xFF7
 15862                           tblptrl	equ	0xFF6
 15863                           tablat	equ	0xFF5
 15864                           prodh	equ	0xFF4
 15865                           prodl	equ	0xFF3
 15866                           intcon	equ	0xFF2
 15867                           intcon2	equ	0xFF1
 15868                           intcon3	equ	0xFF0
 15869                           postinc0	equ	0xFEE
 15870                           wreg	equ	0xFE8
 15871                           postdec1	equ	0xFE5
 15872                           fsr1l	equ	0xFE1
 15873                           indf2	equ	0xFDF
 15874                           postinc2	equ	0xFDE
 15875                           postdec2	equ	0xFDD
 15876                           fsr2h	equ	0xFDA
 15877                           fsr2l	equ	0xFD9
 15878                           status	equ	0xFD8
 15879                           
 15880 ;; *************** function _updateServoPosition *****************
 15881 ;; Defined at:
 15882 ;;		line 535 in file "sort.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  time_us         2    0[BANK0 ] int 
 15885 ;;  timer           2    2[BANK0 ] int 
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;  my_time         2    6[BANK0 ] unsigned int 
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  1    wreg      void 
 15890 ;; Registers used:
 15891 ;;		wreg, status,2, status,0
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15901 ;;Total ram usage:        8 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    7
 15904 ;; This function calls:
 15905 ;;		Nothing
 15906 ;; This function is called by:
 15907 ;;		_Distribution
 15908 ;;		_initServos
 15909 ;;		_actuatorTest
 15910 ;;		_BothServos
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           	psect	text49
 15915  004A16                     __ptext49:
 15916                           	opt stack 0
 15917  004A16                     _updateServoPosition:
 15918                           	opt stack 20
 15919                           
 15920                           ;sort.c: 536: unsigned int my_time = 65535 - time_us;
 15921                           
 15922                           ;incstack = 0
 15923  004A16  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15924  004A1A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15925  004A1E  0100               	movlb	0	; () banked
 15926  004A20  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15927  004A22  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15928  004A24  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15929  004A26  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15930  004A28  0EFF               	movlw	255
 15931  004A2A  0100               	movlb	0	; () banked
 15932  004A2C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15933  004A2E  0100               	movlb	0	; () banked
 15934  004A30  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15935  004A32  0EFF               	movlw	255
 15936  004A34  0100               	movlb	0	; () banked
 15937  004A36  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15938  004A38  0100               	movlb	0	; () banked
 15939  004A3A  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15940                           
 15941                           ;sort.c: 537: switch(timer){
 15942  004A3C  D01D               	goto	l6726
 15943  004A3E                     l6720:
 15944                           
 15945                           ; BSR set to: 0
 15946                           ;sort.c: 539: servoTimes[0] = my_time >> 8;
 15947  004A3E  0100               	movlb	0	; () banked
 15948  004A40  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15949  004A42  0100               	movlb	0	; () banked
 15950  004A44  6FDA               	movwf	_servoTimes& (0+255),b
 15951  004A46  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15952                           
 15953                           ;sort.c: 540: servoTimes[1] = my_time & 0xFF;
 15954  004A48  0100               	movlb	0	; () banked
 15955  004A4A  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15956  004A4C  0100               	movlb	0	; () banked
 15957  004A4E  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15958  004A50  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;sort.c: 542: pan_servo_state = time_us;
 15962  004A52  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15963  004A56  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15964  004A5A                     l906:
 15965                           
 15966                           ; BSR set to: 0
 15967                           ;sort.c: 544: servoTimes[2] = my_time >> 8;
 15968  004A5A  0100               	movlb	0	; () banked
 15969  004A5C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15970  004A5E  0100               	movlb	0	; () banked
 15971  004A60  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15972  004A62  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15973                           
 15974                           ;sort.c: 545: servoTimes[3] = my_time & 0xFF;
 15975  004A64  0100               	movlb	0	; () banked
 15976  004A66  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15977  004A68  0100               	movlb	0	; () banked
 15978  004A6A  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15979  004A6C  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15980                           
 15981                           ; BSR set to: 0
 15982                           ;sort.c: 547: tilt_servo_state = time_us;
 15983  004A6E  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15984  004A72  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15985                           
 15986                           ;sort.c: 548: }
 15987  004A76  0012               	return	
 15988  004A78                     l6726:
 15989                           
 15990                           ; BSR set to: 0
 15991  004A78  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15992  004A7C  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15993                           
 15994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15995                           ; Switch size 1, requested type "space"
 15996                           ; Number of cases is 1, Range of values is 0 to 0
 15997                           ; switch strategies available:
 15998                           ; Name         Instructions Cycles
 15999                           ; simple_byte            4     3 (average)
 16000                           ;	Chosen strategy is simple_byte
 16001  004A80  0100               	movlb	0	; () banked
 16002  004A82  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16003  004A84  0A00               	xorlw	0	; case 0
 16004  004A86  A4D8               	btfss	status,2,c
 16005  004A88  0012               	return	
 16006                           
 16007                           ; BSR set to: 0
 16008                           ; Switch size 1, requested type "space"
 16009                           ; Number of cases is 2, Range of values is 1 to 3
 16010                           ; switch strategies available:
 16011                           ; Name         Instructions Cycles
 16012                           ; simple_byte            7     4 (average)
 16013                           ;	Chosen strategy is simple_byte
 16014  004A8A  0100               	movlb	0	; () banked
 16015  004A8C  5184               	movf	??_updateServoPosition& (0+255),w,b
 16016  004A8E  0A01               	xorlw	1	; case 1
 16017  004A90  B4D8               	btfsc	status,2,c
 16018  004A92  D7D5               	goto	l6720
 16019  004A94  0A02               	xorlw	2	; case 3
 16020  004A96  A4D8               	btfss	status,2,c
 16021  004A98  0012               	return	
 16022  004A9A  D7DF               	goto	l906
 16023  004A9C                     __end_of_updateServoPosition:
 16024                           	opt stack 0
 16025                           tblptru	equ	0xFF8
 16026                           tblptrh	equ	0xFF7
 16027                           tblptrl	equ	0xFF6
 16028                           tablat	equ	0xFF5
 16029                           prodh	equ	0xFF4
 16030                           prodl	equ	0xFF3
 16031                           intcon	equ	0xFF2
 16032                           intcon2	equ	0xFF1
 16033                           intcon3	equ	0xFF0
 16034                           postinc0	equ	0xFEE
 16035                           wreg	equ	0xFE8
 16036                           postdec1	equ	0xFE5
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           fsr2h	equ	0xFDA
 16042                           fsr2l	equ	0xFD9
 16043                           status	equ	0xFD8
 16044                           
 16045 ;; *************** function _BlockerTest *****************
 16046 ;; Defined at:
 16047 ;;		line 599 in file "Test.c"
 16048 ;; Parameters:    Size  Location     Type
 16049 ;;		None
 16050 ;; Auto vars:     Size  Location     Type
 16051 ;;  i               2   44[BANK0 ] int 
 16052 ;;  cond_flag       2   48[BANK0 ] int 
 16053 ;;  cam_flag        2   46[BANK0 ] int 
 16054 ;; Return value:  Size  Location     Type
 16055 ;;                  1    wreg      void 
 16056 ;; Registers used:
 16057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16058 ;; Tracked objects:
 16059 ;;		On entry : 0/0
 16060 ;;		On exit  : 0/0
 16061 ;;		Unchanged: 0/0
 16062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;Total ram usage:        7 bytes
 16068 ;; Hardware stack levels used:    1
 16069 ;; Hardware stack levels required when called:   10
 16070 ;; This function calls:
 16071 ;;		_lcdInst
 16072 ;;		_printf
 16073 ;; This function is called by:
 16074 ;;		_Test
 16075 ;; This function uses a non-reentrant model
 16076 ;;
 16077                           
 16078                           	psect	text50
 16079  003C30                     __ptext50:
 16080                           	opt stack 0
 16081  003C30                     _BlockerTest:
 16082                           	opt stack 19
 16083                           
 16084                           ;Test.c: 600: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;incstack = 0
 16088  003C30  0E01               	movlw	1
 16089  003C32  ECDF  F02B         	call	_lcdInst
 16090  003C36  0E68               	movlw	104
 16091  003C38  0100               	movlb	0	; () banked
 16092  003C3A  6FAB               	movwf	??_BlockerTest& (0+255),b
 16093  003C3C  0EE4               	movlw	228
 16094  003C3E                     u10997:
 16095  003C3E  2EE8               	decfsz	wreg,f,c
 16096  003C40  D7FE               	bra	u10997
 16097  003C42  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16098  003C44  D7FC               	bra	u10997
 16099  003C46  F000               	nop	
 16100  003C48  0E80               	movlw	128
 16101  003C4A  ECDF  F02B         	call	_lcdInst
 16102                           
 16103                           ;Test.c: 601: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16104  003C4E  0E45               	movlw	low STR_122
 16105  003C50  0100               	movlb	0	; () banked
 16106  003C52  6F8E               	movwf	printf@f& (0+255),b
 16107  003C54  0EFB               	movlw	high STR_122
 16108  003C56  0100               	movlb	0	; () banked
 16109  003C58  6F8F               	movwf	(printf@f+1)& (0+255),b
 16110  003C5A  A480               	btfss	3968,2,c	;volatile
 16111  003C5C  D004               	goto	u7780
 16112  003C5E  0100               	movlb	0	; () banked
 16113  003C60  6BAB               	clrf	??_BlockerTest& (0+255),b
 16114  003C62  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16115  003C64  D002               	goto	u7788
 16116  003C66                     u7780:
 16117  003C66  0100               	movlb	0	; () banked
 16118  003C68  6BAB               	clrf	??_BlockerTest& (0+255),b
 16119  003C6A                     u7788:
 16120  003C6A  0100               	movlb	0	; () banked
 16121  003C6C  51AB               	movf	??_BlockerTest& (0+255),w,b
 16122  003C6E  0100               	movlb	0	; () banked
 16123  003C70  6F90               	movwf	(?_printf+2)& (0+255),b
 16124  003C72  6B91               	clrf	(?_printf+3)& (0+255),b
 16125  003C74  ECC1  F00B         	call	_printf	;wreg free
 16126                           
 16127                           ;Test.c: 602: lcdInst(0b11000000);;
 16128  003C78  0EC0               	movlw	192
 16129  003C7A  ECDF  F02B         	call	_lcdInst
 16130                           
 16131                           ;Test.c: 603: printf("OTHER: CAM TOGGLE");
 16132  003C7E  0E21               	movlw	low STR_123
 16133  003C80  0100               	movlb	0	; () banked
 16134  003C82  6F8E               	movwf	printf@f& (0+255),b
 16135  003C84  0EFB               	movlw	high STR_123
 16136  003C86  0100               	movlb	0	; () banked
 16137  003C88  6F8F               	movwf	(printf@f+1)& (0+255),b
 16138  003C8A  ECC1  F00B         	call	_printf	;wreg free
 16139                           
 16140                           ;Test.c: 604: int cam_flag = 1;
 16141  003C8E  0E00               	movlw	0
 16142  003C90  0100               	movlb	0	; () banked
 16143  003C92  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16144  003C94  0E01               	movlw	1
 16145  003C96  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;Test.c: 605: int cond_flag = 0;
 16149  003C98  0E00               	movlw	0
 16150  003C9A  0100               	movlb	0	; () banked
 16151  003C9C  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16152  003C9E  0E00               	movlw	0
 16153  003CA0  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16154                           
 16155                           ; BSR set to: 0
 16156                           ;Test.c: 607: while(PORTBbits.RB1 == 0){
 16157                           
 16158                           ;Test.c: 606: while(1){
 16159  003CA2  D018               	goto	l8812
 16160  003CA4                     l8808:
 16161                           
 16162                           ;Test.c: 608: lcdInst(0b10000000);;
 16163  003CA4  0E80               	movlw	128
 16164  003CA6  ECDF  F02B         	call	_lcdInst
 16165                           
 16166                           ;Test.c: 609: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16167  003CAA  0E45               	movlw	low STR_122
 16168  003CAC  0100               	movlb	0	; () banked
 16169  003CAE  6F8E               	movwf	printf@f& (0+255),b
 16170  003CB0  0EFB               	movlw	high STR_122
 16171  003CB2  0100               	movlb	0	; () banked
 16172  003CB4  6F8F               	movwf	(printf@f+1)& (0+255),b
 16173  003CB6  A480               	btfss	3968,2,c	;volatile
 16174  003CB8  D004               	goto	u7790
 16175  003CBA  0100               	movlb	0	; () banked
 16176  003CBC  6BAB               	clrf	??_BlockerTest& (0+255),b
 16177  003CBE  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16178  003CC0  D002               	goto	u7798
 16179  003CC2                     u7790:
 16180  003CC2  0100               	movlb	0	; () banked
 16181  003CC4  6BAB               	clrf	??_BlockerTest& (0+255),b
 16182  003CC6                     u7798:
 16183  003CC6  0100               	movlb	0	; () banked
 16184  003CC8  51AB               	movf	??_BlockerTest& (0+255),w,b
 16185  003CCA  0100               	movlb	0	; () banked
 16186  003CCC  6F90               	movwf	(?_printf+2)& (0+255),b
 16187  003CCE  6B91               	clrf	(?_printf+3)& (0+255),b
 16188  003CD0  ECC1  F00B         	call	_printf	;wreg free
 16189  003CD4                     l8812:
 16190  003CD4  A281               	btfss	3969,1,c	;volatile
 16191  003CD6  D7E6               	goto	l8808
 16192                           
 16193                           ;Test.c: 610: }
 16194                           ;Test.c: 611: if(PORTB >> 4 == 0b1111){
 16195  003CD8  3881               	swapf	3969,w,c	;volatile
 16196  003CDA  0B0F               	andlw	15
 16197  003CDC  0A0F               	xorlw	15
 16198  003CDE  B4D8               	btfsc	status,2,c
 16199  003CE0  0012               	return	
 16200                           
 16201                           ;Test.c: 614: else if(PORTB >> 4 == 0b0001){
 16202                           
 16203                           ;Test.c: 613: }
 16204                           
 16205                           ;Test.c: 612: break;
 16206  003CE2  3881               	swapf	3969,w,c	;volatile
 16207  003CE4  0B0F               	andlw	15
 16208  003CE6  06E8               	decf	wreg,f,c
 16209  003CE8  A4D8               	btfss	status,2,c
 16210  003CEA  D016               	goto	l8830
 16211                           
 16212                           ;Test.c: 615: if(cond_flag){
 16213  003CEC  0100               	movlb	0	; () banked
 16214  003CEE  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 16215  003CF0  0100               	movlb	0	; () banked
 16216  003CF2  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16217  003CF4  B4D8               	btfsc	status,2,c
 16218  003CF6  D007               	goto	l1429
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;Test.c: 616: LATAbits.LATA3 = 1;
 16222  003CF8  8689               	bsf	3977,3,c	;volatile
 16223  003CFA  D006               	goto	l8828
 16224  003CFC                     u7841:
 16225  003CFC  0E01               	movlw	1
 16226  003CFE                     u7850:
 16227  003CFE  0100               	movlb	0	; () banked
 16228  003D00  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16229  003D02  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 16230                           
 16231                           ;Test.c: 618: }
 16232  003D04  D054               	goto	l8854
 16233  003D06                     l1429:
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;Test.c: 619: else{
 16237                           ;Test.c: 620: LATAbits.LATA3 = 0;
 16238  003D06  9689               	bcf	3977,3,c	;volatile
 16239  003D08                     l8828:
 16240                           
 16241                           ; BSR set to: 0
 16242                           ;Test.c: 621: cond_flag = !cond_flag;
 16243  003D08  0100               	movlb	0	; () banked
 16244  003D0A  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 16245  003D0C  0100               	movlb	0	; () banked
 16246  003D0E  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16247  003D10  B4D8               	btfsc	status,2,c
 16248  003D12  D7F4               	goto	u7841
 16249  003D14  0E00               	movlw	0
 16250  003D16  D7F3               	goto	u7850
 16251  003D18                     l8830:
 16252                           
 16253                           ;Test.c: 624: else{
 16254                           ;Test.c: 625: if(cam_flag){
 16255  003D18  0100               	movlb	0	; () banked
 16256  003D1A  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16257  003D1C  0100               	movlb	0	; () banked
 16258  003D1E  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16259  003D20  B4D8               	btfsc	status,2,c
 16260  003D22  D007               	goto	l8836
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;Test.c: 626: LATCbits.LATC0 = 1;
 16264  003D24  808B               	bsf	3979,0,c	;volatile
 16265  003D26  D023               	goto	l8848
 16266  003D28                     u7891:
 16267  003D28  0E01               	movlw	1
 16268  003D2A                     u7900:
 16269  003D2A  0100               	movlb	0	; () banked
 16270  003D2C  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16271  003D2E  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 16272                           
 16273                           ;Test.c: 628: }
 16274  003D30  D03E               	goto	l8854
 16275  003D32                     l8836:
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;Test.c: 629: else{
 16279                           ;Test.c: 630: for(int i=0;i<5000;i++)
 16280  003D32  0E00               	movlw	0
 16281  003D34  0100               	movlb	0	; () banked
 16282  003D36  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 16283  003D38  0E00               	movlw	0
 16284  003D3A  6FAC               	movwf	BlockerTest@i& (0+255),b
 16285  003D3C                     l8838:
 16286                           
 16287                           ; BSR set to: 0
 16288  003D3C  0100               	movlb	0	; () banked
 16289  003D3E  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 16290  003D40  D008               	goto	l1434
 16291  003D42  0E88               	movlw	136
 16292  003D44  0100               	movlb	0	; () banked
 16293  003D46  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 16294  003D48  0E13               	movlw	19
 16295  003D4A  0100               	movlb	0	; () banked
 16296  003D4C  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 16297  003D4E  B0D8               	btfsc	status,0,c
 16298  003D50  D00D               	goto	l1435
 16299  003D52                     l1434:
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;Test.c: 631: {
 16303                           ;Test.c: 632: LATCbits.LATC0 = 1;
 16304  003D52  808B               	bsf	3979,0,c	;volatile
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;Test.c: 633: _delay((unsigned long)((10)*(32000000/4000000.0)));
 16308  003D54  0E1A               	movlw	26
 16309  003D56                     u11007:
 16310  003D56  2EE8               	decfsz	wreg,f,c
 16311  003D58  D7FE               	bra	u11007
 16312  003D5A  D000               	nop2	
 16313                           
 16314                           ;Test.c: 634: LATCbits.LATC0 = 0;
 16315  003D5C  908B               	bcf	3979,0,c	;volatile
 16316                           
 16317                           ;Test.c: 635: _delay((unsigned long)((90)*(32000000/4000000.0)));
 16318  003D5E  0EF0               	movlw	240
 16319  003D60                     u11017:
 16320  003D60  2EE8               	decfsz	wreg,f,c
 16321  003D62  D7FE               	bra	u11017
 16322  003D64  0100               	movlb	0	; () banked
 16323  003D66  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 16324  003D68  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 16325  003D6A  D7E8               	goto	l8838
 16326  003D6C                     l1435:
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;Test.c: 636: }
 16330                           ;Test.c: 637: LATCbits.LATC0 = 0;
 16331  003D6C  908B               	bcf	3979,0,c	;volatile
 16332  003D6E                     l8848:
 16333                           
 16334                           ; BSR set to: 0
 16335                           ;Test.c: 638: cam_flag = !cam_flag;
 16336  003D6E  0100               	movlb	0	; () banked
 16337  003D70  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16338  003D72  0100               	movlb	0	; () banked
 16339  003D74  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16340  003D76  B4D8               	btfsc	status,2,c
 16341  003D78  D7D7               	goto	u7891
 16342  003D7A  0E00               	movlw	0
 16343  003D7C  D7D6               	goto	u7900
 16344  003D7E                     l8850:
 16345                           
 16346                           ;Test.c: 643: lcdInst(0b10000000);;
 16347  003D7E  0E80               	movlw	128
 16348  003D80  ECDF  F02B         	call	_lcdInst
 16349                           
 16350                           ;Test.c: 644: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16351  003D84  0E45               	movlw	low STR_122
 16352  003D86  0100               	movlb	0	; () banked
 16353  003D88  6F8E               	movwf	printf@f& (0+255),b
 16354  003D8A  0EFB               	movlw	high STR_122
 16355  003D8C  0100               	movlb	0	; () banked
 16356  003D8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 16357  003D90  A480               	btfss	3968,2,c	;volatile
 16358  003D92  D004               	goto	u7950
 16359  003D94  0100               	movlb	0	; () banked
 16360  003D96  6BAB               	clrf	??_BlockerTest& (0+255),b
 16361  003D98  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16362  003D9A  D002               	goto	u7958
 16363  003D9C                     u7950:
 16364  003D9C  0100               	movlb	0	; () banked
 16365  003D9E  6BAB               	clrf	??_BlockerTest& (0+255),b
 16366  003DA0                     u7958:
 16367  003DA0  0100               	movlb	0	; () banked
 16368  003DA2  51AB               	movf	??_BlockerTest& (0+255),w,b
 16369  003DA4  0100               	movlb	0	; () banked
 16370  003DA6  6F90               	movwf	(?_printf+2)& (0+255),b
 16371  003DA8  6B91               	clrf	(?_printf+3)& (0+255),b
 16372  003DAA  ECC1  F00B         	call	_printf	;wreg free
 16373  003DAE                     l8854:
 16374  003DAE  A281               	btfss	3969,1,c	;volatile
 16375  003DB0  D791               	goto	l8812
 16376  003DB2  D7E5               	goto	l8850
 16377  003DB4                     __end_of_BlockerTest:
 16378                           	opt stack 0
 16379                           tblptru	equ	0xFF8
 16380                           tblptrh	equ	0xFF7
 16381                           tblptrl	equ	0xFF6
 16382                           tablat	equ	0xFF5
 16383                           prodh	equ	0xFF4
 16384                           prodl	equ	0xFF3
 16385                           intcon	equ	0xFF2
 16386                           intcon2	equ	0xFF1
 16387                           intcon3	equ	0xFF0
 16388                           postinc0	equ	0xFEE
 16389                           wreg	equ	0xFE8
 16390                           postdec1	equ	0xFE5
 16391                           fsr1l	equ	0xFE1
 16392                           indf2	equ	0xFDF
 16393                           postinc2	equ	0xFDE
 16394                           postdec2	equ	0xFDD
 16395                           fsr2h	equ	0xFDA
 16396                           fsr2l	equ	0xFD9
 16397                           status	equ	0xFD8
 16398                           
 16399 ;; *************** function _printf *****************
 16400 ;; Defined at:
 16401 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16404 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 16405 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 16406 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 16407 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 16408 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 16409 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 16410 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 16411 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 16412 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 16413 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 16414 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 16415 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 16416 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 16417 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 16418 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 16419 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 16420 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 16421 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 16422 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 16423 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 16424 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 16425 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 16426 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 16427 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 16428 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 16429 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;  tmpval          4    0        struct .
 16432 ;;  width           2   41[BANK0 ] int 
 16433 ;;  val             2   37[BANK0 ] unsigned int 
 16434 ;;  len             2   35[BANK0 ] unsigned int 
 16435 ;;  ap              2   33[BANK0 ] PTR void [1]
 16436 ;;		 -> ?i2_printf(2), ?_printf(2), 
 16437 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 16438 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 16439 ;;  c               1   40[BANK0 ] char 
 16440 ;;  flag            1   39[BANK0 ] unsigned char 
 16441 ;;  prec            1   30[BANK0 ] char 
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  2   14[BANK0 ] int 
 16444 ;; Registers used:
 16445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : 0/0
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16451 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16452 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16453 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16454 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16455 ;;Total ram usage:       29 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    9
 16458 ;; This function calls:
 16459 ;;		___lwdiv
 16460 ;;		___lwmod
 16461 ;;		___wmul
 16462 ;;		_isdigit
 16463 ;;		_putch
 16464 ;; This function is called by:
 16465 ;;		_UI
 16466 ;;		_change_state_to_menu_start
 16467 ;;		_change_state_to_menu_12
 16468 ;;		_change_state_to_menu_22
 16469 ;;		_printRTC
 16470 ;;		_EEPROM_write
 16471 ;;		_Test
 16472 ;;		_algorithmTest
 16473 ;;		_sensorTest
 16474 ;;		_actuatorTest
 16475 ;;		_BothServos
 16476 ;;		_PortTestDC
 16477 ;;		_PlatformTest
 16478 ;;		_SpeedTest
 16479 ;;		_BlockerTest
 16480 ;;		_arm
 16481 ;;		_PortTestPusher
 16482 ;;		_ToggleTestA5
 16483 ;; This function uses a non-reentrant model
 16484 ;;
 16485                           
 16486                           	psect	text51
 16487  001782                     __ptext51:
 16488                           	opt stack 0
 16489  001782                     _printf:
 16490                           	opt stack 18
 16491                           
 16492                           ;doprnt.c: 466: va_list ap;
 16493                           ;doprnt.c: 499: signed char c;
 16494                           ;doprnt.c: 501: int width;
 16495                           ;doprnt.c: 506: signed char prec;
 16496                           ;doprnt.c: 508: unsigned char flag;
 16497                           ;doprnt.c: 523: union {
 16498                           ;doprnt.c: 524: unsigned long vd;
 16499                           ;doprnt.c: 525: double integ;
 16500                           ;doprnt.c: 526: } tmpval;
 16501                           ;doprnt.c: 528: unsigned int val;
 16502                           ;doprnt.c: 529: unsigned len;
 16503                           ;doprnt.c: 530: const char * cp;
 16504                           ;doprnt.c: 533: *ap = __va_start();
 16505                           
 16506                           ;incstack = 0
 16507  001782  0E90               	movlw	low (?_printf+2)
 16508  001784  0100               	movlb	0	; () banked
 16509  001786  6FA1               	movwf	printf@ap& (0+255),b
 16510  001788  0E00               	movlw	high (?_printf+2)
 16511  00178A  0100               	movlb	0	; () banked
 16512  00178C  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16513                           
 16514                           ;doprnt.c: 536: while(c = *f++) {
 16515  00178E  D205               	goto	l6680
 16516  001790                     l6550:
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;doprnt.c: 538: if(c != '%')
 16520  001790  0E25               	movlw	37
 16521  001792  0100               	movlb	0	; () banked
 16522  001794  19A8               	xorwf	printf@c& (0+255),w,b
 16523  001796  B4D8               	btfsc	status,2,c
 16524  001798  D005               	goto	l6554
 16525                           
 16526                           ; BSR set to: 0
 16527                           ;doprnt.c: 540: {
 16528                           ;doprnt.c: 541: (putch(c) );
 16529  00179A  0100               	movlb	0	; () banked
 16530  00179C  51A8               	movf	printf@c& (0+255),w,b
 16531  00179E  ECD7  F02B         	call	_putch
 16532                           
 16533                           ;doprnt.c: 542: continue;
 16534  0017A2  D1FB               	goto	l6680
 16535  0017A4                     l6554:
 16536                           
 16537                           ;doprnt.c: 543: }
 16538                           ;doprnt.c: 546: width = 0;
 16539  0017A4  0E00               	movlw	0
 16540  0017A6  0100               	movlb	0	; () banked
 16541  0017A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 16542  0017AA  0E00               	movlw	0
 16543  0017AC  6FA9               	movwf	printf@width& (0+255),b
 16544                           
 16545                           ;doprnt.c: 548: flag = 0;
 16546  0017AE  0E00               	movlw	0
 16547  0017B0  0100               	movlb	0	; () banked
 16548  0017B2  6FA7               	movwf	printf@flag& (0+255),b
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;doprnt.c: 551: switch(*f) {
 16552                           
 16553                           ;doprnt.c: 550: for(;;) {
 16554  0017B4  D005               	goto	l6560
 16555  0017B6                     l6556:
 16556                           
 16557                           ;doprnt.c: 580: flag |= 0x04;
 16558  0017B6  0100               	movlb	0	; () banked
 16559  0017B8  85A7               	bsf	printf@flag& (0+255),2,b
 16560                           
 16561                           ;doprnt.c: 581: f++;
 16562  0017BA  0100               	movlb	0	; () banked
 16563  0017BC  4B8E               	infsnz	printf@f& (0+255),f,b
 16564  0017BE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16565  0017C0                     l6560:
 16566  0017C0  C08E  FFF6         	movff	printf@f,tblptrl
 16567  0017C4  C08F  FFF7         	movff	printf@f+1,tblptrh
 16568  0017C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16569  0017C8  6AF8               	clrf	tblptru,c
 16570  0017CA                     	endif
 16571  0017CA                     	if	0	;tblptru may be non-zero
 16572  0017CA                     	endif
 16573  0017CA  0008               	tblrd		*
 16574  0017CC  50F5               	movf	tablat,w,c
 16575                           
 16576                           ; Switch size 1, requested type "space"
 16577                           ; Number of cases is 1, Range of values is 48 to 48
 16578                           ; switch strategies available:
 16579                           ; Name         Instructions Cycles
 16580                           ; simple_byte            4     3 (average)
 16581                           ;	Chosen strategy is simple_byte
 16582  0017CE  0A30               	xorlw	48	; case 48
 16583  0017D0  B4D8               	btfsc	status,2,c
 16584  0017D2  D7F1               	goto	l6556
 16585                           
 16586                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16587                           
 16588                           ;doprnt.c: 586: }
 16589                           
 16590                           ;doprnt.c: 585: break;
 16591  0017D4  C08E  FFF6         	movff	printf@f,tblptrl
 16592  0017D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 16593  0017DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16594  0017DC  6AF8               	clrf	tblptru,c
 16595  0017DE                     	endif
 16596  0017DE                     	if	0	;tblptru may be non-zero
 16597  0017DE                     	endif
 16598  0017DE  0008               	tblrd		*
 16599  0017E0  50F5               	movf	tablat,w,c
 16600  0017E2  ECEB  F02A         	call	_isdigit
 16601  0017E6  A0D8               	btfss	status,0,c
 16602  0017E8  D0D2               	goto	l6608
 16603                           
 16604                           ;doprnt.c: 598: width = 0;
 16605  0017EA  0E00               	movlw	0
 16606  0017EC  0100               	movlb	0	; () banked
 16607  0017EE  6FAA               	movwf	(printf@width+1)& (0+255),b
 16608  0017F0  0E00               	movlw	0
 16609  0017F2  6FA9               	movwf	printf@width& (0+255),b
 16610  0017F4                     l6566:
 16611                           
 16612                           ;doprnt.c: 600: width *= 10;
 16613  0017F4  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16614  0017F8  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16615  0017FC  0E00               	movlw	0
 16616  0017FE  0100               	movlb	0	; () banked
 16617  001800  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16618  001802  0E0A               	movlw	10
 16619  001804  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16620  001806  EC54  F029         	call	___wmul	;wreg free
 16621  00180A  C080  F0A9         	movff	?___wmul,printf@width
 16622  00180E  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16623                           
 16624                           ;doprnt.c: 601: width += *f++ - '0';
 16625  001812  0ED0               	movlw	208
 16626  001814  0100               	movlb	0	; () banked
 16627  001816  6F9A               	movwf	??_printf& (0+255),b
 16628  001818  0EFF               	movlw	255
 16629  00181A  0100               	movlb	0	; () banked
 16630  00181C  6F9B               	movwf	(??_printf+1)& (0+255),b
 16631  00181E  C08E  FFF6         	movff	printf@f,tblptrl
 16632  001822  C08F  FFF7         	movff	printf@f+1,tblptrh
 16633  001826                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16634  001826  6AF8               	clrf	tblptru,c
 16635  001828                     	endif
 16636  001828                     	if	0	;tblptru may be non-zero
 16637  001828                     	endif
 16638  001828  0008               	tblrd		*
 16639  00182A  50F5               	movf	tablat,w,c
 16640  00182C  0100               	movlb	0	; () banked
 16641  00182E  6F9C               	movwf	(??_printf+2)& (0+255),b
 16642  001830  6B9D               	clrf	(??_printf+3)& (0+255),b
 16643  001832  0100               	movlb	0	; () banked
 16644  001834  519A               	movf	??_printf& (0+255),w,b
 16645  001836  0100               	movlb	0	; () banked
 16646  001838  279C               	addwf	(??_printf+2)& (0+255),f,b
 16647  00183A  0100               	movlb	0	; () banked
 16648  00183C  519B               	movf	(??_printf+1)& (0+255),w,b
 16649  00183E  0100               	movlb	0	; () banked
 16650  001840  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16651  001842  0100               	movlb	0	; () banked
 16652  001844  519C               	movf	(??_printf+2)& (0+255),w,b
 16653  001846  0100               	movlb	0	; () banked
 16654  001848  27A9               	addwf	printf@width& (0+255),f,b
 16655  00184A  0100               	movlb	0	; () banked
 16656  00184C  519D               	movf	(??_printf+3)& (0+255),w,b
 16657  00184E  0100               	movlb	0	; () banked
 16658  001850  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16659                           
 16660                           ; BSR set to: 0
 16661  001852  0100               	movlb	0	; () banked
 16662  001854  4B8E               	infsnz	printf@f& (0+255),f,b
 16663  001856  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16667  001858  C08E  FFF6         	movff	printf@f,tblptrl
 16668  00185C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16669  001860                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16670  001860  6AF8               	clrf	tblptru,c
 16671  001862                     	endif
 16672  001862                     	if	0	;tblptru may be non-zero
 16673  001862                     	endif
 16674  001862  0008               	tblrd		*
 16675  001864  50F5               	movf	tablat,w,c
 16676  001866  ECEB  F02A         	call	_isdigit
 16677  00186A  A0D8               	btfss	status,0,c
 16678  00186C  D090               	goto	l6608
 16679  00186E  D7C2               	goto	l6566
 16680  001870                     l6574:
 16681                           
 16682                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16683  001870  C0A1  FFD9         	movff	printf@ap,fsr2l
 16684  001874  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16685  001878  CFDE F09F          	movff	postinc2,printf@cp
 16686  00187C  CFDD F0A0          	movff	postdec2,printf@cp+1
 16687  001880  0E02               	movlw	2
 16688  001882  0100               	movlb	0	; () banked
 16689  001884  27A1               	addwf	printf@ap& (0+255),f,b
 16690  001886  0E00               	movlw	0
 16691  001888  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16692                           
 16693                           ; BSR set to: 0
 16694                           ;doprnt.c: 740: if(!cp)
 16695  00188A  0100               	movlb	0	; () banked
 16696  00188C  519F               	movf	printf@cp& (0+255),w,b
 16697  00188E  0100               	movlb	0	; () banked
 16698  001890  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16699  001892  A4D8               	btfss	status,2,c
 16700  001894  D006               	goto	l6582
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;doprnt.c: 741: cp = "(null)";
 16704  001896  0EB5               	movlw	low STR_130
 16705  001898  0100               	movlb	0	; () banked
 16706  00189A  6F9F               	movwf	printf@cp& (0+255),b
 16707  00189C  0EFF               	movlw	high STR_130
 16708  00189E  0100               	movlb	0	; () banked
 16709  0018A0  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16710  0018A2                     l6582:
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;doprnt.c: 745: len = 0;
 16714  0018A2  0E00               	movlw	0
 16715  0018A4  0100               	movlb	0	; () banked
 16716  0018A6  6FA4               	movwf	(printf@len+1)& (0+255),b
 16717  0018A8  0E00               	movlw	0
 16718  0018AA  6FA3               	movwf	printf@len& (0+255),b
 16719                           
 16720                           ;doprnt.c: 746: while(cp[len])
 16721  0018AC  D003               	goto	l6586
 16722  0018AE                     l6584:
 16723                           
 16724                           ;doprnt.c: 747: len++;
 16725  0018AE  0100               	movlb	0	; () banked
 16726  0018B0  4BA3               	infsnz	printf@len& (0+255),f,b
 16727  0018B2  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16728  0018B4                     l6586:
 16729                           
 16730                           ; BSR set to: 0
 16731  0018B4  0100               	movlb	0	; () banked
 16732  0018B6  51A3               	movf	printf@len& (0+255),w,b
 16733  0018B8  0100               	movlb	0	; () banked
 16734  0018BA  259F               	addwf	printf@cp& (0+255),w,b
 16735  0018BC  0100               	movlb	0	; () banked
 16736  0018BE  6F9A               	movwf	??_printf& (0+255),b
 16737  0018C0  0100               	movlb	0	; () banked
 16738  0018C2  51A4               	movf	(printf@len+1)& (0+255),w,b
 16739  0018C4  0100               	movlb	0	; () banked
 16740  0018C6  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16741  0018C8  0100               	movlb	0	; () banked
 16742  0018CA  6F9B               	movwf	(??_printf+1)& (0+255),b
 16743  0018CC  C09A  FFF6         	movff	??_printf,tblptrl
 16744  0018D0  C09B  FFF7         	movff	??_printf+1,tblptrh
 16745  0018D4  0E00               	movlw	low (__mediumconst shr (0+16))
 16746  0018D6  6EF8               	movwf	tblptru,c
 16747  0018D8  0E0F               	movlw	(high __ramtop+-1)
 16748  0018DA  64F7               	cpfsgt	tblptrh,c
 16749  0018DC  D003               	bra	u5047
 16750  0018DE  0008               	tblrd		*
 16751  0018E0  50F5               	movf	tablat,w,c
 16752  0018E2  D005               	bra	u5040
 16753  0018E4                     u5047:
 16754  0018E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 16755  0018E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 16756  0018EC  50EF               	movf	indf0,w,c
 16757  0018EE                     u5040:
 16758  0018EE  0900               	iorlw	0
 16759  0018F0  A4D8               	btfss	status,2,c
 16760  0018F2  D7DD               	goto	l6584
 16761                           
 16762                           ;doprnt.c: 757: if(width > len)
 16763  0018F4  0100               	movlb	0	; () banked
 16764  0018F6  51A9               	movf	printf@width& (0+255),w,b
 16765  0018F8  0100               	movlb	0	; () banked
 16766  0018FA  5DA3               	subwf	printf@len& (0+255),w,b
 16767  0018FC  0100               	movlb	0	; () banked
 16768  0018FE  51AA               	movf	(printf@width+1)& (0+255),w,b
 16769  001900  0100               	movlb	0	; () banked
 16770  001902  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16771  001904  B0D8               	btfsc	status,0,c
 16772  001906  D009               	goto	l6592
 16773                           
 16774                           ; BSR set to: 0
 16775                           ;doprnt.c: 758: width -= len;
 16776  001908  0100               	movlb	0	; () banked
 16777  00190A  51A3               	movf	printf@len& (0+255),w,b
 16778  00190C  0100               	movlb	0	; () banked
 16779  00190E  5FA9               	subwf	printf@width& (0+255),f,b
 16780  001910  0100               	movlb	0	; () banked
 16781  001912  51A4               	movf	(printf@len+1)& (0+255),w,b
 16782  001914  0100               	movlb	0	; () banked
 16783  001916  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16784  001918  D009               	goto	l6596
 16785  00191A                     l6592:
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;doprnt.c: 759: else
 16789                           ;doprnt.c: 760: width = 0;
 16790  00191A  0E00               	movlw	0
 16791  00191C  0100               	movlb	0	; () banked
 16792  00191E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16793  001920  0E00               	movlw	0
 16794  001922  6FA9               	movwf	printf@width& (0+255),b
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;doprnt.c: 764: while(width--)
 16798  001924  D003               	goto	l6596
 16799  001926                     l6594:
 16800                           
 16801                           ; BSR set to: 0
 16802                           ;doprnt.c: 765: (putch(' ') );
 16803  001926  0E20               	movlw	32
 16804  001928  ECD7  F02B         	call	_putch
 16805  00192C                     l6596:
 16806  00192C  0100               	movlb	0	; () banked
 16807  00192E  07A9               	decf	printf@width& (0+255),f,b
 16808  001930  A0D8               	btfss	status,0,c
 16809  001932  07AA               	decf	(printf@width+1)& (0+255),f,b
 16810  001934  0100               	movlb	0	; () banked
 16811  001936  29A9               	incf	printf@width& (0+255),w,b
 16812  001938  E1F6               	bnz	l6594
 16813  00193A  0100               	movlb	0	; () banked
 16814  00193C  29AA               	incf	(printf@width+1)& (0+255),w,b
 16815  00193E  B4D8               	btfsc	status,2,c
 16816  001940  D017               	goto	l6602
 16817  001942  D7F1               	goto	l6594
 16818  001944                     l6598:
 16819                           
 16820                           ; BSR set to: 0
 16821                           ;doprnt.c: 768: (putch(*cp++) );
 16822  001944  C09F  FFF6         	movff	printf@cp,tblptrl
 16823  001948  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16824  00194C  0E00               	movlw	low (__mediumconst shr (0+16))
 16825  00194E  6EF8               	movwf	tblptru,c
 16826  001950  0E0F               	movlw	(high __ramtop+-1)
 16827  001952  64F7               	cpfsgt	tblptrh,c
 16828  001954  D003               	bra	u5087
 16829  001956  0008               	tblrd		*
 16830  001958  50F5               	movf	tablat,w,c
 16831  00195A  D005               	bra	u5080
 16832  00195C                     u5087:
 16833  00195C  CFF6 FFE9          	movff	tblptrl,fsr0l
 16834  001960  CFF7 FFEA          	movff	tblptrh,fsr0h
 16835  001964  50EF               	movf	indf0,w,c
 16836  001966                     u5080:
 16837  001966  ECD7  F02B         	call	_putch
 16838  00196A  0100               	movlb	0	; () banked
 16839  00196C  4B9F               	infsnz	printf@cp& (0+255),f,b
 16840  00196E  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16841  001970                     l6602:
 16842                           
 16843                           ; BSR set to: 0
 16844  001970  0100               	movlb	0	; () banked
 16845  001972  07A3               	decf	printf@len& (0+255),f,b
 16846  001974  A0D8               	btfss	status,0,c
 16847  001976  07A4               	decf	(printf@len+1)& (0+255),f,b
 16848  001978  0100               	movlb	0	; () banked
 16849  00197A  29A3               	incf	printf@len& (0+255),w,b
 16850  00197C  E1E3               	bnz	l6598
 16851  00197E  0100               	movlb	0	; () banked
 16852  001980  29A4               	incf	(printf@len+1)& (0+255),w,b
 16853  001982  B4D8               	btfsc	status,2,c
 16854  001984  D10A               	goto	l6680
 16855  001986  D7DE               	goto	l6598
 16856  001988                     l6604:
 16857                           
 16858                           ; BSR set to: 0
 16859                           ;doprnt.c: 818: flag |= 0x40;
 16860  001988  0100               	movlb	0	; () banked
 16861  00198A  8DA7               	bsf	printf@flag& (0+255),6,b
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;doprnt.c: 822: }
 16865                           
 16866                           ;doprnt.c: 819: break;
 16867  00198C  D01D               	goto	l1506
 16868  00198E                     l6608:
 16869  00198E  C08E  FFF6         	movff	printf@f,tblptrl
 16870  001992  C08F  FFF7         	movff	printf@f+1,tblptrh
 16871  001996  0100               	movlb	0	; () banked
 16872  001998  4B8E               	infsnz	printf@f& (0+255),f,b
 16873  00199A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16874  00199C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16875  00199C  6AF8               	clrf	tblptru,c
 16876  00199E                     	endif
 16877  00199E                     	if	0	;tblptru may be non-zero
 16878  00199E                     	endif
 16879  00199E  0008               	tblrd		*
 16880  0019A0  CFF5 F0A8          	movff	tablat,printf@c
 16881  0019A4  0100               	movlb	0	; () banked
 16882  0019A6  51A8               	movf	printf@c& (0+255),w,b
 16883                           
 16884                           ; Switch size 1, requested type "space"
 16885                           ; Number of cases is 5, Range of values is 0 to 117
 16886                           ; switch strategies available:
 16887                           ; Name         Instructions Cycles
 16888                           ; simple_byte           16     9 (average)
 16889                           ;	Chosen strategy is simple_byte
 16890  0019A8  0A00               	xorlw	0	; case 0
 16891  0019AA  B4D8               	btfsc	status,2,c
 16892  0019AC  0012               	return	
 16893  0019AE  0A64               	xorlw	100	; case 100
 16894  0019B0  B4D8               	btfsc	status,2,c
 16895  0019B2  D00A               	goto	l1506
 16896  0019B4  0A0D               	xorlw	13	; case 105
 16897  0019B6  B4D8               	btfsc	status,2,c
 16898  0019B8  D007               	goto	l1506
 16899  0019BA  0A1A               	xorlw	26	; case 115
 16900  0019BC  B4D8               	btfsc	status,2,c
 16901  0019BE  D758               	goto	l6574
 16902  0019C0  0A06               	xorlw	6	; case 117
 16903  0019C2  B4D8               	btfsc	status,2,c
 16904  0019C4  D7E1               	goto	l6604
 16905  0019C6  D0E9               	goto	l6680
 16906  0019C8                     l1506:
 16907                           
 16908                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16909  0019C8  0100               	movlb	0	; () banked
 16910  0019CA  BDA7               	btfsc	printf@flag& (0+255),6,b
 16911  0019CC  D019               	goto	l6620
 16912                           
 16913                           ; BSR set to: 0
 16914                           ;doprnt.c: 1253: {
 16915                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16916  0019CE  C0A1  FFD9         	movff	printf@ap,fsr2l
 16917  0019D2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16918  0019D6  CFDE F0A5          	movff	postinc2,printf@val
 16919  0019DA  CFDD F0A6          	movff	postdec2,printf@val+1
 16920                           
 16921                           ; BSR set to: 0
 16922  0019DE  0E02               	movlw	2
 16923  0019E0  0100               	movlb	0	; () banked
 16924  0019E2  27A1               	addwf	printf@ap& (0+255),f,b
 16925  0019E4  0E00               	movlw	0
 16926  0019E6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;doprnt.c: 1261: if((int)val < 0) {
 16930  0019E8  0100               	movlb	0	; () banked
 16931  0019EA  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16932  0019EC  D016               	goto	l6624
 16933                           
 16934                           ; BSR set to: 0
 16935                           ;doprnt.c: 1262: flag |= 0x03;
 16936  0019EE  0E03               	movlw	3
 16937  0019F0  0100               	movlb	0	; () banked
 16938  0019F2  13A7               	iorwf	printf@flag& (0+255),f,b
 16939                           
 16940                           ; BSR set to: 0
 16941                           ;doprnt.c: 1263: val = -val;
 16942  0019F4  0100               	movlb	0	; () banked
 16943  0019F6  6DA5               	negf	printf@val& (0+255),b
 16944  0019F8  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16945  0019FA  B0D8               	btfsc	status,0,c
 16946  0019FC  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;doprnt.c: 1264: }
 16950                           ;doprnt.c: 1266: }
 16951  0019FE  D00D               	goto	l6624
 16952  001A00                     l6620:
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;doprnt.c: 1268: else
 16956                           ;doprnt.c: 1273: {
 16957                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16958  001A00  C0A1  FFD9         	movff	printf@ap,fsr2l
 16959  001A04  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16960  001A08  CFDE F0A5          	movff	postinc2,printf@val
 16961  001A0C  CFDD F0A6          	movff	postdec2,printf@val+1
 16962                           
 16963                           ; BSR set to: 0
 16964  001A10  0E02               	movlw	2
 16965  001A12  0100               	movlb	0	; () banked
 16966  001A14  27A1               	addwf	printf@ap& (0+255),f,b
 16967  001A16  0E00               	movlw	0
 16968  001A18  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16969  001A1A                     l6624:
 16970                           
 16971                           ; BSR set to: 0
 16972                           ;doprnt.c: 1287: }
 16973                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16974  001A1A  0E01               	movlw	1
 16975  001A1C  0100               	movlb	0	; () banked
 16976  001A1E  6FA8               	movwf	printf@c& (0+255),b
 16977  001A20                     l6626:
 16978                           
 16979                           ; BSR set to: 0
 16980  001A20  0E05               	movlw	5
 16981  001A22  0100               	movlb	0	; () banked
 16982  001A24  19A8               	xorwf	printf@c& (0+255),w,b
 16983  001A26  B4D8               	btfsc	status,2,c
 16984  001A28  D019               	goto	l6638
 16985                           
 16986                           ; BSR set to: 0
 16987                           ;doprnt.c: 1306: if(val < dpowers[c])
 16988                           
 16989                           ; BSR set to: 0
 16990                           
 16991                           ; BSR set to: 0
 16992  001A2A  0100               	movlb	0	; () banked
 16993  001A2C  51A8               	movf	printf@c& (0+255),w,b
 16994  001A2E  0D02               	mullw	2
 16995  001A30  0EB4               	movlw	low _dpowers
 16996  001A32  24F3               	addwf	prodl,w,c
 16997  001A34  6EF6               	movwf	tblptrl,c
 16998  001A36  0EFA               	movlw	high _dpowers
 16999  001A38  20F4               	addwfc	prodh,w,c
 17000  001A3A  6EF7               	movwf	tblptrh,c
 17001  001A3C                     	if	1	;There are 3 active tblptr bytes
 17002  001A3C  6AF8               	clrf	tblptru,c
 17003  001A3E  0E00               	movlw	low (__mediumconst shr (0+16))
 17004  001A40  22F8               	addwfc	tblptru,f,c
 17005  001A42                     	endif
 17006  001A42  0009               	tblrd		*+
 17007  001A44  50F5               	movf	tablat,w,c
 17008  001A46  0100               	movlb	0	; () banked
 17009  001A48  5DA5               	subwf	printf@val& (0+255),w,b
 17010  001A4A  0009               	tblrd		*+
 17011  001A4C  50F5               	movf	tablat,w,c
 17012  001A4E  0100               	movlb	0	; () banked
 17013  001A50  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17014  001A52  A0D8               	btfss	status,0,c
 17015  001A54  D003               	goto	l6638
 17016                           
 17017                           ; BSR set to: 0
 17018                           
 17019                           ; BSR set to: 0
 17020                           
 17021                           ; BSR set to: 0
 17022                           ;doprnt.c: 1307: break;
 17023  001A56  0100               	movlb	0	; () banked
 17024  001A58  2BA8               	incf	printf@c& (0+255),f,b
 17025  001A5A  D7E2               	goto	l6626
 17026  001A5C                     l6638:
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17030  001A5C  0100               	movlb	0	; () banked
 17031  001A5E  51A9               	movf	printf@width& (0+255),w,b
 17032  001A60  0100               	movlb	0	; () banked
 17033  001A62  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17034  001A64  B4D8               	btfsc	status,2,c
 17035  001A66  D00B               	goto	l6644
 17036                           
 17037                           ; BSR set to: 0
 17038  001A68  C0A7  F09A         	movff	printf@flag,??_printf
 17039  001A6C  0E03               	movlw	3
 17040  001A6E  0100               	movlb	0	; () banked
 17041  001A70  179A               	andwf	??_printf& (0+255),f,b
 17042  001A72  B4D8               	btfsc	status,2,c
 17043  001A74  D004               	goto	l6644
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;doprnt.c: 1346: width--;
 17047  001A76  0100               	movlb	0	; () banked
 17048  001A78  07A9               	decf	printf@width& (0+255),f,b
 17049  001A7A  A0D8               	btfss	status,0,c
 17050  001A7C  07AA               	decf	(printf@width+1)& (0+255),f,b
 17051  001A7E                     l6644:
 17052                           
 17053                           ; BSR set to: 0
 17054                           ;doprnt.c: 1381: if(width > c)
 17055  001A7E  0E80               	movlw	128
 17056  001A80  0100               	movlb	0	; () banked
 17057  001A82  BFA8               	btfsc	printf@c& (0+255),7,b
 17058  001A84  0E7F               	movlw	127
 17059  001A86  0100               	movlb	0	; () banked
 17060  001A88  6F9A               	movwf	??_printf& (0+255),b
 17061  001A8A  0100               	movlb	0	; () banked
 17062  001A8C  51A9               	movf	printf@width& (0+255),w,b
 17063  001A8E  0100               	movlb	0	; () banked
 17064  001A90  5DA8               	subwf	printf@c& (0+255),w,b
 17065  001A92  0100               	movlb	0	; () banked
 17066  001A94  51AA               	movf	(printf@width+1)& (0+255),w,b
 17067  001A96  0A80               	xorlw	128
 17068  001A98  0100               	movlb	0	; () banked
 17069  001A9A  599A               	subwfb	??_printf& (0+255),w,b
 17070  001A9C  B0D8               	btfsc	status,0,c
 17071  001A9E  D00B               	goto	l6648
 17072                           
 17073                           ; BSR set to: 0
 17074                           ;doprnt.c: 1382: width -= c;
 17075  001AA0  0100               	movlb	0	; () banked
 17076  001AA2  51A8               	movf	printf@c& (0+255),w,b
 17077  001AA4  0100               	movlb	0	; () banked
 17078  001AA6  5FA9               	subwf	printf@width& (0+255),f,b
 17079  001AA8  0E00               	movlw	0
 17080  001AAA  0100               	movlb	0	; () banked
 17081  001AAC  BFA8               	btfsc	printf@c& (0+255),7,b
 17082  001AAE  0EFF               	movlw	255
 17083  001AB0  0100               	movlb	0	; () banked
 17084  001AB2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17085  001AB4  D005               	goto	l6650
 17086  001AB6                     l6648:
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;doprnt.c: 1383: else
 17090                           ;doprnt.c: 1384: width = 0;
 17091  001AB6  0E00               	movlw	0
 17092  001AB8  0100               	movlb	0	; () banked
 17093  001ABA  6FAA               	movwf	(printf@width+1)& (0+255),b
 17094  001ABC  0E00               	movlw	0
 17095  001ABE  6FA9               	movwf	printf@width& (0+255),b
 17096  001AC0                     l6650:
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;doprnt.c: 1387: if(flag & 0x04) {
 17100  001AC0  0100               	movlb	0	; () banked
 17101  001AC2  A5A7               	btfss	printf@flag& (0+255),2,b
 17102  001AC4  D018               	goto	l6662
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;doprnt.c: 1392: if(flag & 0x03)
 17106  001AC6  C0A7  F09A         	movff	printf@flag,??_printf
 17107  001ACA  0E03               	movlw	3
 17108  001ACC  0100               	movlb	0	; () banked
 17109  001ACE  179A               	andwf	??_printf& (0+255),f,b
 17110  001AD0  B4D8               	btfsc	status,2,c
 17111  001AD2  D003               	goto	l6656
 17112                           
 17113                           ; BSR set to: 0
 17114                           ;doprnt.c: 1393: (putch('-') );
 17115  001AD4  0E2D               	movlw	45
 17116  001AD6  ECD7  F02B         	call	_putch
 17117  001ADA                     l6656:
 17118                           
 17119                           ;doprnt.c: 1415: if(width)
 17120  001ADA  0100               	movlb	0	; () banked
 17121  001ADC  51A9               	movf	printf@width& (0+255),w,b
 17122  001ADE  0100               	movlb	0	; () banked
 17123  001AE0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17124  001AE2  B4D8               	btfsc	status,2,c
 17125  001AE4  D025               	goto	l6672
 17126                           
 17127                           ; BSR set to: 0
 17128                           ;doprnt.c: 1417: (putch('0') );
 17129                           
 17130                           ; BSR set to: 0
 17131                           
 17132                           ;doprnt.c: 1416: do
 17133  001AE6  0E30               	movlw	48
 17134  001AE8  ECD7  F02B         	call	_putch
 17135                           
 17136                           ;doprnt.c: 1418: while(--width);
 17137  001AEC  0100               	movlb	0	; () banked
 17138  001AEE  07A9               	decf	printf@width& (0+255),f,b
 17139  001AF0  A0D8               	btfss	status,0,c
 17140  001AF2  07AA               	decf	(printf@width+1)& (0+255),f,b
 17141  001AF4  D7F2               	goto	l6656
 17142  001AF6                     l6662:
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;doprnt.c: 1422: {
 17146                           ;doprnt.c: 1424: if(width
 17147                           ;doprnt.c: 1428: )
 17148  001AF6  0100               	movlb	0	; () banked
 17149  001AF8  51A9               	movf	printf@width& (0+255),w,b
 17150  001AFA  0100               	movlb	0	; () banked
 17151  001AFC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17152  001AFE  B4D8               	btfsc	status,2,c
 17153  001B00  D00D               	goto	l6668
 17154  001B02                     l6664:
 17155                           
 17156                           ; BSR set to: 0
 17157                           ;doprnt.c: 1430: (putch(' ') );
 17158  001B02  0E20               	movlw	32
 17159  001B04  ECD7  F02B         	call	_putch
 17160                           
 17161                           ;doprnt.c: 1431: while(--width);
 17162  001B08  0100               	movlb	0	; () banked
 17163  001B0A  07A9               	decf	printf@width& (0+255),f,b
 17164  001B0C  A0D8               	btfss	status,0,c
 17165  001B0E  07AA               	decf	(printf@width+1)& (0+255),f,b
 17166  001B10  0100               	movlb	0	; () banked
 17167  001B12  51A9               	movf	printf@width& (0+255),w,b
 17168  001B14  0100               	movlb	0	; () banked
 17169  001B16  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17170  001B18  A4D8               	btfss	status,2,c
 17171  001B1A  D7F3               	goto	l6664
 17172  001B1C                     l6668:
 17173                           
 17174                           ; BSR set to: 0
 17175                           ;doprnt.c: 1438: if(flag & 0x03)
 17176  001B1C  C0A7  F09A         	movff	printf@flag,??_printf
 17177  001B20  0E03               	movlw	3
 17178  001B22  0100               	movlb	0	; () banked
 17179  001B24  179A               	andwf	??_printf& (0+255),f,b
 17180  001B26  B4D8               	btfsc	status,2,c
 17181  001B28  D003               	goto	l6672
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;doprnt.c: 1439: (putch('-') );
 17185  001B2A  0E2D               	movlw	45
 17186  001B2C  ECD7  F02B         	call	_putch
 17187  001B30                     l6672:
 17188                           
 17189                           ;doprnt.c: 1469: }
 17190                           ;doprnt.c: 1472: prec = c;
 17191  001B30  C0A8  F09E         	movff	printf@c,printf@prec
 17192                           
 17193                           ;doprnt.c: 1474: while(prec--) {
 17194  001B34  D02C               	goto	l6678
 17195  001B36                     l6674:
 17196                           
 17197                           ;doprnt.c: 1478: {
 17198                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17199  001B36  0100               	movlb	0	; () banked
 17200  001B38  519E               	movf	printf@prec& (0+255),w,b
 17201  001B3A  0D02               	mullw	2
 17202  001B3C  0EB4               	movlw	low _dpowers
 17203  001B3E  24F3               	addwf	prodl,w,c
 17204  001B40  6EF6               	movwf	tblptrl,c
 17205  001B42  0EFA               	movlw	high _dpowers
 17206  001B44  20F4               	addwfc	prodh,w,c
 17207  001B46  6EF7               	movwf	tblptrh,c
 17208  001B48                     	if	1	;There are 3 active tblptr bytes
 17209  001B48  6AF8               	clrf	tblptru,c
 17210  001B4A  0E00               	movlw	low (__mediumconst shr (0+16))
 17211  001B4C  22F8               	addwfc	tblptru,f,c
 17212  001B4E                     	endif
 17213  001B4E  0009               	tblrd		*+
 17214  001B50  CFF5 F082          	movff	tablat,___lwdiv@divisor
 17215  001B54  000A               	tblrd		*-
 17216  001B56  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 17217  001B5A  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 17218  001B5E  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 17219  001B62  ECCC  F025         	call	___lwdiv	;wreg free
 17220  001B66  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 17221  001B6A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 17222  001B6E  0E00               	movlw	0
 17223  001B70  0100               	movlb	0	; () banked
 17224  001B72  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 17225  001B74  0E0A               	movlw	10
 17226  001B76  6F89               	movwf	___lwmod@divisor& (0+255),b
 17227  001B78  EC1A  F027         	call	___lwmod	;wreg free
 17228  001B7C  0100               	movlb	0	; () banked
 17229  001B7E  5187               	movf	?___lwmod& (0+255),w,b
 17230  001B80  0F30               	addlw	48
 17231  001B82  0100               	movlb	0	; () banked
 17232  001B84  6FA8               	movwf	printf@c& (0+255),b
 17233                           
 17234                           ; BSR set to: 0
 17235                           ;doprnt.c: 1523: }
 17236                           ;doprnt.c: 1524: (putch(c) );
 17237  001B86  0100               	movlb	0	; () banked
 17238  001B88  51A8               	movf	printf@c& (0+255),w,b
 17239  001B8A  ECD7  F02B         	call	_putch
 17240  001B8E                     l6678:
 17241  001B8E  0100               	movlb	0	; () banked
 17242  001B90  079E               	decf	printf@prec& (0+255),f,b
 17243  001B92  0100               	movlb	0	; () banked
 17244  001B94  299E               	incf	printf@prec& (0+255),w,b
 17245  001B96  A4D8               	btfss	status,2,c
 17246  001B98  D7CE               	goto	l6674
 17247  001B9A                     l6680:
 17248  001B9A  C08E  FFF6         	movff	printf@f,tblptrl
 17249  001B9E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17250  001BA2  0100               	movlb	0	; () banked
 17251  001BA4  4B8E               	infsnz	printf@f& (0+255),f,b
 17252  001BA6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17253  001BA8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17254  001BA8  6AF8               	clrf	tblptru,c
 17255  001BAA                     	endif
 17256  001BAA                     	if	0	;tblptru may be non-zero
 17257  001BAA                     	endif
 17258  001BAA  0008               	tblrd		*
 17259  001BAC  CFF5 F0A8          	movff	tablat,printf@c
 17260  001BB0  0100               	movlb	0	; () banked
 17261  001BB2  51A8               	movf	printf@c& (0+255),w,b
 17262  001BB4  B4D8               	btfsc	status,2,c
 17263  001BB6  0012               	return	
 17264  001BB8  D5EB               	goto	l6550
 17265  001BBA                     __end_of_printf:
 17266                           	opt stack 0
 17267                           tblptru	equ	0xFF8
 17268                           tblptrh	equ	0xFF7
 17269                           tblptrl	equ	0xFF6
 17270                           tablat	equ	0xFF5
 17271                           prodh	equ	0xFF4
 17272                           prodl	equ	0xFF3
 17273                           intcon	equ	0xFF2
 17274                           intcon2	equ	0xFF1
 17275                           intcon3	equ	0xFF0
 17276                           indf0	equ	0xFEF
 17277                           postinc0	equ	0xFEE
 17278                           fsr0h	equ	0xFEA
 17279                           fsr0l	equ	0xFE9
 17280                           wreg	equ	0xFE8
 17281                           postdec1	equ	0xFE5
 17282                           fsr1l	equ	0xFE1
 17283                           indf2	equ	0xFDF
 17284                           postinc2	equ	0xFDE
 17285                           postdec2	equ	0xFDD
 17286                           fsr2h	equ	0xFDA
 17287                           fsr2l	equ	0xFD9
 17288                           status	equ	0xFD8
 17289                           
 17290 ;; *************** function _putch *****************
 17291 ;; Defined at:
 17292 ;;		line 20 in file "lcd.c"
 17293 ;; Parameters:    Size  Location     Type
 17294 ;;  data            1    wreg     unsigned char 
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;  data            1    2[BANK0 ] unsigned char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;                  1    wreg      void 
 17299 ;; Registers used:
 17300 ;;		wreg, status,2, status,0, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;Total ram usage:        1 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    8
 17313 ;; This function calls:
 17314 ;;		_lcdNibble
 17315 ;; This function is called by:
 17316 ;;		_printf
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text52
 17321  0057AE                     __ptext52:
 17322                           	opt stack 0
 17323  0057AE                     _putch:
 17324                           	opt stack 18
 17325                           
 17326                           ;incstack = 0
 17327                           ;putch@data stored from wreg
 17328  0057AE  0100               	movlb	0	; () banked
 17329  0057B0  6F82               	movwf	putch@data& (0+255),b
 17330                           
 17331                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17332  0057B2  848C               	bsf	3980,2,c	;volatile
 17333                           
 17334                           ;lcd.c: 22: lcdNibble(data);
 17335  0057B4  0100               	movlb	0	; () banked
 17336  0057B6  5182               	movf	putch@data& (0+255),w,b
 17337  0057B8  ECB2  F026         	call	_lcdNibble
 17338  0057BC  0012               	return		;funcret
 17339  0057BE                     __end_of_putch:
 17340                           	opt stack 0
 17341                           tblptru	equ	0xFF8
 17342                           tblptrh	equ	0xFF7
 17343                           tblptrl	equ	0xFF6
 17344                           tablat	equ	0xFF5
 17345                           prodh	equ	0xFF4
 17346                           prodl	equ	0xFF3
 17347                           intcon	equ	0xFF2
 17348                           intcon2	equ	0xFF1
 17349                           intcon3	equ	0xFF0
 17350                           indf0	equ	0xFEF
 17351                           postinc0	equ	0xFEE
 17352                           fsr0h	equ	0xFEA
 17353                           fsr0l	equ	0xFE9
 17354                           wreg	equ	0xFE8
 17355                           postdec1	equ	0xFE5
 17356                           fsr1l	equ	0xFE1
 17357                           indf2	equ	0xFDF
 17358                           postinc2	equ	0xFDE
 17359                           postdec2	equ	0xFDD
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364 ;; *************** function _isdigit *****************
 17365 ;; Defined at:
 17366 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;  c               1    wreg     unsigned char 
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;  c               1    2[BANK0 ] unsigned char 
 17371 ;; Return value:  Size  Location     Type
 17372 ;;		None               void
 17373 ;; Registers used:
 17374 ;;		wreg, status,2, status,0
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17384 ;;Total ram usage:        3 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; Hardware stack levels required when called:    7
 17387 ;; This function calls:
 17388 ;;		Nothing
 17389 ;; This function is called by:
 17390 ;;		_printf
 17391 ;; This function uses a non-reentrant model
 17392 ;;
 17393                           
 17394                           	psect	text53
 17395  0055D6                     __ptext53:
 17396                           	opt stack 0
 17397  0055D6                     _isdigit:
 17398                           	opt stack 19
 17399                           
 17400                           ;incstack = 0
 17401                           ;isdigit@c stored from wreg
 17402  0055D6  0100               	movlb	0	; () banked
 17403  0055D8  6F82               	movwf	isdigit@c& (0+255),b
 17404  0055DA  0E00               	movlw	0
 17405  0055DC  0100               	movlb	0	; () banked
 17406  0055DE  6F81               	movwf	_isdigit$2086& (0+255),b
 17407                           
 17408                           ; BSR set to: 0
 17409  0055E0  0E3A               	movlw	58
 17410  0055E2  0100               	movlb	0	; () banked
 17411  0055E4  6182               	cpfslt	isdigit@c& (0+255),b
 17412  0055E6  D007               	goto	l6398
 17413                           
 17414                           ; BSR set to: 0
 17415  0055E8  0E2F               	movlw	47
 17416  0055EA  0100               	movlb	0	; () banked
 17417  0055EC  6582               	cpfsgt	isdigit@c& (0+255),b
 17418  0055EE  D003               	goto	l6398
 17419                           
 17420                           ; BSR set to: 0
 17421  0055F0  0E01               	movlw	1
 17422  0055F2  0100               	movlb	0	; () banked
 17423  0055F4  6F81               	movwf	_isdigit$2086& (0+255),b
 17424  0055F6                     l6398:
 17425                           
 17426                           ; BSR set to: 0
 17427  0055F6  C081  F080         	movff	_isdigit$2086,??_isdigit
 17428  0055FA  0100               	movlb	0	; () banked
 17429  0055FC  3180               	rrcf	??_isdigit& (0+255),w,b
 17430  0055FE  0012               	return	
 17431  005600                     __end_of_isdigit:
 17432                           	opt stack 0
 17433                           tblptru	equ	0xFF8
 17434                           tblptrh	equ	0xFF7
 17435                           tblptrl	equ	0xFF6
 17436                           tablat	equ	0xFF5
 17437                           prodh	equ	0xFF4
 17438                           prodl	equ	0xFF3
 17439                           intcon	equ	0xFF2
 17440                           intcon2	equ	0xFF1
 17441                           intcon3	equ	0xFF0
 17442                           indf0	equ	0xFEF
 17443                           postinc0	equ	0xFEE
 17444                           fsr0h	equ	0xFEA
 17445                           fsr0l	equ	0xFE9
 17446                           wreg	equ	0xFE8
 17447                           postdec1	equ	0xFE5
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           fsr2h	equ	0xFDA
 17453                           fsr2l	equ	0xFD9
 17454                           status	equ	0xFD8
 17455                           
 17456 ;; *************** function ___wmul *****************
 17457 ;; Defined at:
 17458 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17459 ;; Parameters:    Size  Location     Type
 17460 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17461 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17462 ;; Auto vars:     Size  Location     Type
 17463 ;;  product         2    4[BANK0 ] unsigned int 
 17464 ;; Return value:  Size  Location     Type
 17465 ;;                  2    0[BANK0 ] unsigned int 
 17466 ;; Registers used:
 17467 ;;		wreg, status,2, status,0, prodl, prodh
 17468 ;; Tracked objects:
 17469 ;;		On entry : 0/0
 17470 ;;		On exit  : 0/0
 17471 ;;		Unchanged: 0/0
 17472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17473 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17474 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17477 ;;Total ram usage:        6 bytes
 17478 ;; Hardware stack levels used:    1
 17479 ;; Hardware stack levels required when called:    7
 17480 ;; This function calls:
 17481 ;;		Nothing
 17482 ;; This function is called by:
 17483 ;;		_printf
 17484 ;; This function uses a non-reentrant model
 17485 ;;
 17486                           
 17487                           	psect	text54
 17488  0052A8                     __ptext54:
 17489                           	opt stack 0
 17490  0052A8                     ___wmul:
 17491                           	opt stack 19
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;incstack = 0
 17495  0052A8  0100               	movlb	0	; () banked
 17496  0052AA  5180               	movf	___wmul@multiplier& (0+255),w,b
 17497  0052AC  0100               	movlb	0	; () banked
 17498  0052AE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17499  0052B0  CFF3 F084          	movff	prodl,___wmul@product
 17500  0052B4  CFF4 F085          	movff	prodh,___wmul@product+1
 17501  0052B8  0100               	movlb	0	; () banked
 17502  0052BA  5180               	movf	___wmul@multiplier& (0+255),w,b
 17503  0052BC  0100               	movlb	0	; () banked
 17504  0052BE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17505  0052C0  50F3               	movf	prodl,w,c
 17506  0052C2  0100               	movlb	0	; () banked
 17507  0052C4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17508  0052C6  0100               	movlb	0	; () banked
 17509  0052C8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17510  0052CA  0100               	movlb	0	; () banked
 17511  0052CC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17512  0052CE  50F3               	movf	prodl,w,c
 17513  0052D0  0100               	movlb	0	; () banked
 17514  0052D2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17515                           
 17516                           ; BSR set to: 0
 17517  0052D4  C084  F080         	movff	___wmul@product,?___wmul
 17518  0052D8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17519  0052DC  0012               	return	
 17520  0052DE                     __end_of___wmul:
 17521                           	opt stack 0
 17522                           tblptru	equ	0xFF8
 17523                           tblptrh	equ	0xFF7
 17524                           tblptrl	equ	0xFF6
 17525                           tablat	equ	0xFF5
 17526                           prodh	equ	0xFF4
 17527                           prodl	equ	0xFF3
 17528                           intcon	equ	0xFF2
 17529                           intcon2	equ	0xFF1
 17530                           intcon3	equ	0xFF0
 17531                           indf0	equ	0xFEF
 17532                           postinc0	equ	0xFEE
 17533                           fsr0h	equ	0xFEA
 17534                           fsr0l	equ	0xFE9
 17535                           wreg	equ	0xFE8
 17536                           postdec1	equ	0xFE5
 17537                           fsr1l	equ	0xFE1
 17538                           indf2	equ	0xFDF
 17539                           postinc2	equ	0xFDE
 17540                           postdec2	equ	0xFDD
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function ___lwmod *****************
 17546 ;; Defined at:
 17547 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  dividend        2    7[BANK0 ] unsigned int 
 17550 ;;  divisor         2    9[BANK0 ] unsigned int 
 17551 ;; Auto vars:     Size  Location     Type
 17552 ;;  counter         1   11[BANK0 ] unsigned char 
 17553 ;; Return value:  Size  Location     Type
 17554 ;;                  2    7[BANK0 ] unsigned int 
 17555 ;; Registers used:
 17556 ;;		wreg, status,2, status,0
 17557 ;; Tracked objects:
 17558 ;;		On entry : 0/0
 17559 ;;		On exit  : 0/0
 17560 ;;		Unchanged: 0/0
 17561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17562 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17565 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17566 ;;Total ram usage:        5 bytes
 17567 ;; Hardware stack levels used:    1
 17568 ;; Hardware stack levels required when called:    7
 17569 ;; This function calls:
 17570 ;;		Nothing
 17571 ;; This function is called by:
 17572 ;;		_printf
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576                           	psect	text55
 17577  004E34                     __ptext55:
 17578                           	opt stack 0
 17579  004E34                     ___lwmod:
 17580                           	opt stack 19
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;incstack = 0
 17584  004E34  0100               	movlb	0	; () banked
 17585  004E36  5189               	movf	___lwmod@divisor& (0+255),w,b
 17586  004E38  0100               	movlb	0	; () banked
 17587  004E3A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17588  004E3C  B4D8               	btfsc	status,2,c
 17589  004E3E  D026               	goto	l1963
 17590                           
 17591                           ; BSR set to: 0
 17592  004E40  0E01               	movlw	1
 17593  004E42  0100               	movlb	0	; () banked
 17594  004E44  6F8B               	movwf	___lwmod@counter& (0+255),b
 17595  004E46  D006               	goto	l6436
 17596  004E48                     l6434:
 17597                           
 17598                           ; BSR set to: 0
 17599  004E48  0100               	movlb	0	; () banked
 17600  004E4A  90D8               	bcf	status,0,c
 17601  004E4C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17602  004E4E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17603  004E50  0100               	movlb	0	; () banked
 17604  004E52  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17605  004E54                     l6436:
 17606                           
 17607                           ; BSR set to: 0
 17608  004E54  0100               	movlb	0	; () banked
 17609  004E56  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17610  004E58  D7F7               	goto	l6434
 17611  004E5A                     l6438:
 17612                           
 17613                           ; BSR set to: 0
 17614  004E5A  0100               	movlb	0	; () banked
 17615  004E5C  5189               	movf	___lwmod@divisor& (0+255),w,b
 17616  004E5E  0100               	movlb	0	; () banked
 17617  004E60  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17618  004E62  0100               	movlb	0	; () banked
 17619  004E64  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17620  004E66  0100               	movlb	0	; () banked
 17621  004E68  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17622  004E6A  A0D8               	btfss	status,0,c
 17623  004E6C  D008               	goto	l6442
 17624                           
 17625                           ; BSR set to: 0
 17626  004E6E  0100               	movlb	0	; () banked
 17627  004E70  5189               	movf	___lwmod@divisor& (0+255),w,b
 17628  004E72  0100               	movlb	0	; () banked
 17629  004E74  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17630  004E76  0100               	movlb	0	; () banked
 17631  004E78  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17632  004E7A  0100               	movlb	0	; () banked
 17633  004E7C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17634  004E7E                     l6442:
 17635                           
 17636                           ; BSR set to: 0
 17637  004E7E  0100               	movlb	0	; () banked
 17638  004E80  90D8               	bcf	status,0,c
 17639  004E82  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17640  004E84  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17641                           
 17642                           ; BSR set to: 0
 17643  004E86  0100               	movlb	0	; () banked
 17644  004E88  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17645  004E8A  D7E7               	goto	l6438
 17646  004E8C                     l1963:
 17647                           
 17648                           ; BSR set to: 0
 17649  004E8C  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17650  004E90  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17651                           
 17652                           ; BSR set to: 0
 17653  004E94  0012               	return		;funcret
 17654  004E96                     __end_of___lwmod:
 17655                           	opt stack 0
 17656                           tblptru	equ	0xFF8
 17657                           tblptrh	equ	0xFF7
 17658                           tblptrl	equ	0xFF6
 17659                           tablat	equ	0xFF5
 17660                           prodh	equ	0xFF4
 17661                           prodl	equ	0xFF3
 17662                           intcon	equ	0xFF2
 17663                           intcon2	equ	0xFF1
 17664                           intcon3	equ	0xFF0
 17665                           indf0	equ	0xFEF
 17666                           postinc0	equ	0xFEE
 17667                           fsr0h	equ	0xFEA
 17668                           fsr0l	equ	0xFE9
 17669                           wreg	equ	0xFE8
 17670                           postdec1	equ	0xFE5
 17671                           fsr1l	equ	0xFE1
 17672                           indf2	equ	0xFDF
 17673                           postinc2	equ	0xFDE
 17674                           postdec2	equ	0xFDD
 17675                           fsr2h	equ	0xFDA
 17676                           fsr2l	equ	0xFD9
 17677                           status	equ	0xFD8
 17678                           
 17679 ;; *************** function ___lwdiv *****************
 17680 ;; Defined at:
 17681 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17682 ;; Parameters:    Size  Location     Type
 17683 ;;  dividend        2    0[BANK0 ] unsigned int 
 17684 ;;  divisor         2    2[BANK0 ] unsigned int 
 17685 ;; Auto vars:     Size  Location     Type
 17686 ;;  quotient        2    4[BANK0 ] unsigned int 
 17687 ;;  counter         1    6[BANK0 ] unsigned char 
 17688 ;; Return value:  Size  Location     Type
 17689 ;;                  2    0[BANK0 ] unsigned int 
 17690 ;; Registers used:
 17691 ;;		wreg, status,2, status,0
 17692 ;; Tracked objects:
 17693 ;;		On entry : 0/0
 17694 ;;		On exit  : 0/0
 17695 ;;		Unchanged: 0/0
 17696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17698 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17700 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17701 ;;Total ram usage:        7 bytes
 17702 ;; Hardware stack levels used:    1
 17703 ;; Hardware stack levels required when called:    7
 17704 ;; This function calls:
 17705 ;;		Nothing
 17706 ;; This function is called by:
 17707 ;;		_printf
 17708 ;; This function uses a non-reentrant model
 17709 ;;
 17710                           
 17711                           	psect	text56
 17712  004B98                     __ptext56:
 17713                           	opt stack 0
 17714  004B98                     ___lwdiv:
 17715                           	opt stack 19
 17716                           
 17717                           ; BSR set to: 0
 17718                           ;incstack = 0
 17719  004B98  0E00               	movlw	0
 17720  004B9A  0100               	movlb	0	; () banked
 17721  004B9C  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17722  004B9E  0E00               	movlw	0
 17723  004BA0  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17724                           
 17725                           ; BSR set to: 0
 17726  004BA2  0100               	movlb	0	; () banked
 17727  004BA4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17728  004BA6  0100               	movlb	0	; () banked
 17729  004BA8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17730  004BAA  B4D8               	btfsc	status,2,c
 17731  004BAC  D02C               	goto	l1953
 17732                           
 17733                           ; BSR set to: 0
 17734  004BAE  0E01               	movlw	1
 17735  004BB0  0100               	movlb	0	; () banked
 17736  004BB2  6F86               	movwf	___lwdiv@counter& (0+255),b
 17737  004BB4  D006               	goto	l6416
 17738  004BB6                     l6414:
 17739                           
 17740                           ; BSR set to: 0
 17741  004BB6  0100               	movlb	0	; () banked
 17742  004BB8  90D8               	bcf	status,0,c
 17743  004BBA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17744  004BBC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17745  004BBE  0100               	movlb	0	; () banked
 17746  004BC0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17747  004BC2                     l6416:
 17748                           
 17749                           ; BSR set to: 0
 17750  004BC2  0100               	movlb	0	; () banked
 17751  004BC4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17752  004BC6  D7F7               	goto	l6414
 17753  004BC8                     l6418:
 17754                           
 17755                           ; BSR set to: 0
 17756  004BC8  0100               	movlb	0	; () banked
 17757  004BCA  90D8               	bcf	status,0,c
 17758  004BCC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17759  004BCE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17760                           
 17761                           ; BSR set to: 0
 17762  004BD0  0100               	movlb	0	; () banked
 17763  004BD2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17764  004BD4  0100               	movlb	0	; () banked
 17765  004BD6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17766  004BD8  0100               	movlb	0	; () banked
 17767  004BDA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17768  004BDC  0100               	movlb	0	; () banked
 17769  004BDE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17770  004BE0  A0D8               	btfss	status,0,c
 17771  004BE2  D00A               	goto	l6426
 17772                           
 17773                           ; BSR set to: 0
 17774  004BE4  0100               	movlb	0	; () banked
 17775  004BE6  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17776  004BE8  0100               	movlb	0	; () banked
 17777  004BEA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17778  004BEC  0100               	movlb	0	; () banked
 17779  004BEE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17780  004BF0  0100               	movlb	0	; () banked
 17781  004BF2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17782                           
 17783                           ; BSR set to: 0
 17784  004BF4  0100               	movlb	0	; () banked
 17785  004BF6  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17786  004BF8                     l6426:
 17787                           
 17788                           ; BSR set to: 0
 17789  004BF8  0100               	movlb	0	; () banked
 17790  004BFA  90D8               	bcf	status,0,c
 17791  004BFC  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17792  004BFE  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17793                           
 17794                           ; BSR set to: 0
 17795  004C00  0100               	movlb	0	; () banked
 17796  004C02  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17797  004C04  D7E1               	goto	l6418
 17798  004C06                     l1953:
 17799                           
 17800                           ; BSR set to: 0
 17801  004C06  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17802  004C0A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17803                           
 17804                           ; BSR set to: 0
 17805  004C0E  0012               	return		;funcret
 17806  004C10                     __end_of___lwdiv:
 17807                           	opt stack 0
 17808                           tblptru	equ	0xFF8
 17809                           tblptrh	equ	0xFF7
 17810                           tblptrl	equ	0xFF6
 17811                           tablat	equ	0xFF5
 17812                           prodh	equ	0xFF4
 17813                           prodl	equ	0xFF3
 17814                           intcon	equ	0xFF2
 17815                           intcon2	equ	0xFF1
 17816                           intcon3	equ	0xFF0
 17817                           indf0	equ	0xFEF
 17818                           postinc0	equ	0xFEE
 17819                           fsr0h	equ	0xFEA
 17820                           fsr0l	equ	0xFE9
 17821                           wreg	equ	0xFE8
 17822                           postdec1	equ	0xFE5
 17823                           fsr1l	equ	0xFE1
 17824                           indf2	equ	0xFDF
 17825                           postinc2	equ	0xFDE
 17826                           postdec2	equ	0xFDD
 17827                           fsr2h	equ	0xFDA
 17828                           fsr2l	equ	0xFD9
 17829                           status	equ	0xFD8
 17830                           
 17831 ;; *************** function _lcdInst *****************
 17832 ;; Defined at:
 17833 ;;		line 15 in file "lcd.c"
 17834 ;; Parameters:    Size  Location     Type
 17835 ;;  data            1    wreg     unsigned char 
 17836 ;; Auto vars:     Size  Location     Type
 17837 ;;  data            1    2[BANK0 ] unsigned char 
 17838 ;; Return value:  Size  Location     Type
 17839 ;;                  1    wreg      void 
 17840 ;; Registers used:
 17841 ;;		wreg, status,2, status,0, cstack
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17851 ;;Total ram usage:        1 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; Hardware stack levels required when called:    8
 17854 ;; This function calls:
 17855 ;;		_lcdNibble
 17856 ;; This function is called by:
 17857 ;;		_UI
 17858 ;;		_change_state_to_menu_start
 17859 ;;		_change_state_to_menu_12
 17860 ;;		_change_state_to_menu_22
 17861 ;;		_initLCD
 17862 ;;		_printRTC
 17863 ;;		_Loading
 17864 ;;		_EEPROM_write
 17865 ;;		_Test
 17866 ;;		_algorithmTest
 17867 ;;		_sensorTest
 17868 ;;		_actuatorTest
 17869 ;;		_BothServos
 17870 ;;		_PortTestDC
 17871 ;;		_PlatformTest
 17872 ;;		_SpeedTest
 17873 ;;		_BlockerTest
 17874 ;;		_arm
 17875 ;;		_PortTestPusher
 17876 ;;		_ToggleTestA5
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           	psect	text57
 17881  0057BE                     __ptext57:
 17882                           	opt stack 0
 17883  0057BE                     _lcdInst:
 17884                           	opt stack 20
 17885                           
 17886                           ; BSR set to: 0
 17887                           ;incstack = 0
 17888                           ;lcdInst@data stored from wreg
 17889  0057BE  0100               	movlb	0	; () banked
 17890  0057C0  6F82               	movwf	lcdInst@data& (0+255),b
 17891                           
 17892                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17893  0057C2  948C               	bcf	3980,2,c	;volatile
 17894                           
 17895                           ;lcd.c: 17: lcdNibble(data);
 17896  0057C4  0100               	movlb	0	; () banked
 17897  0057C6  5182               	movf	lcdInst@data& (0+255),w,b
 17898  0057C8  ECB2  F026         	call	_lcdNibble
 17899  0057CC  0012               	return		;funcret
 17900  0057CE                     __end_of_lcdInst:
 17901                           	opt stack 0
 17902                           tblptru	equ	0xFF8
 17903                           tblptrh	equ	0xFF7
 17904                           tblptrl	equ	0xFF6
 17905                           tablat	equ	0xFF5
 17906                           prodh	equ	0xFF4
 17907                           prodl	equ	0xFF3
 17908                           intcon	equ	0xFF2
 17909                           intcon2	equ	0xFF1
 17910                           intcon3	equ	0xFF0
 17911                           indf0	equ	0xFEF
 17912                           postinc0	equ	0xFEE
 17913                           fsr0h	equ	0xFEA
 17914                           fsr0l	equ	0xFE9
 17915                           wreg	equ	0xFE8
 17916                           postdec1	equ	0xFE5
 17917                           fsr1l	equ	0xFE1
 17918                           indf2	equ	0xFDF
 17919                           postinc2	equ	0xFDE
 17920                           postdec2	equ	0xFDD
 17921                           fsr2h	equ	0xFDA
 17922                           fsr2l	equ	0xFD9
 17923                           status	equ	0xFD8
 17924                           
 17925 ;; *************** function _lcdNibble *****************
 17926 ;; Defined at:
 17927 ;;		line 25 in file "lcd.c"
 17928 ;; Parameters:    Size  Location     Type
 17929 ;;  data            1    wreg     unsigned char 
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;  data            1    1[BANK0 ] unsigned char 
 17932 ;;  temp            1    0[BANK0 ] unsigned char 
 17933 ;; Return value:  Size  Location     Type
 17934 ;;                  1    wreg      void 
 17935 ;; Registers used:
 17936 ;;		wreg, status,2, status,0
 17937 ;; Tracked objects:
 17938 ;;		On entry : 0/0
 17939 ;;		On exit  : 0/0
 17940 ;;		Unchanged: 0/0
 17941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17946 ;;Total ram usage:        2 bytes
 17947 ;; Hardware stack levels used:    1
 17948 ;; Hardware stack levels required when called:    7
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_lcdInst
 17953 ;;		_putch
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           	psect	text58
 17958  004D64                     __ptext58:
 17959                           	opt stack 0
 17960  004D64                     _lcdNibble:
 17961                           	opt stack 20
 17962                           
 17963                           ;incstack = 0
 17964                           ;lcdNibble@data stored from wreg
 17965  004D64  0100               	movlb	0	; () banked
 17966  004D66  6F81               	movwf	lcdNibble@data& (0+255),b
 17967                           
 17968                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 17969  004D68  9EF2               	bcf	intcon,7,c	;volatile
 17970                           
 17971                           ;lcd.c: 28: char temp = data & 0xF0;
 17972  004D6A  0100               	movlb	0	; () banked
 17973  004D6C  5181               	movf	lcdNibble@data& (0+255),w,b
 17974  004D6E  0BF0               	andlw	240
 17975  004D70  0100               	movlb	0	; () banked
 17976  004D72  6F80               	movwf	lcdNibble@temp& (0+255),b
 17977                           
 17978                           ;lcd.c: 29: LATD = LATD & 0x0F;
 17979  004D74  508C               	movf	3980,w,c	;volatile
 17980  004D76  0B0F               	andlw	15
 17981  004D78  6E8C               	movwf	3980,c	;volatile
 17982                           
 17983                           ;lcd.c: 30: LATD = temp | LATD;
 17984  004D7A  0100               	movlb	0	; () banked
 17985  004D7C  5180               	movf	lcdNibble@temp& (0+255),w,b
 17986  004D7E  108C               	iorwf	3980,w,c	;volatile
 17987  004D80  6E8C               	movwf	3980,c	;volatile
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 17991  004D82  868C               	bsf	3980,3,c	;volatile
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17995  004D84  0E42               	movlw	66
 17996  004D86                     u11027:
 17997  004D86  2EE8               	decfsz	wreg,f,c
 17998  004D88  D7FE               	bra	u11027
 17999  004D8A  D000               	nop2	
 18000                           
 18001                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18002  004D8C  968C               	bcf	3980,3,c	;volatile
 18003                           
 18004                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18005  004D8E  0E42               	movlw	66
 18006  004D90                     u11037:
 18007  004D90  2EE8               	decfsz	wreg,f,c
 18008  004D92  D7FE               	bra	u11037
 18009  004D94  D000               	nop2	
 18010                           
 18011                           ;lcd.c: 37: data = data << 4;
 18012  004D96  0100               	movlb	0	; () banked
 18013  004D98  3981               	swapf	lcdNibble@data& (0+255),w,b
 18014  004D9A  0BF0               	andlw	240
 18015  004D9C  0100               	movlb	0	; () banked
 18016  004D9E  6F81               	movwf	lcdNibble@data& (0+255),b
 18017                           
 18018                           ;lcd.c: 39: temp = data & 0xF0;
 18019  004DA0  0100               	movlb	0	; () banked
 18020  004DA2  5181               	movf	lcdNibble@data& (0+255),w,b
 18021  004DA4  0BF0               	andlw	240
 18022  004DA6  0100               	movlb	0	; () banked
 18023  004DA8  6F80               	movwf	lcdNibble@temp& (0+255),b
 18024                           
 18025                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18026  004DAA  508C               	movf	3980,w,c	;volatile
 18027  004DAC  0B0F               	andlw	15
 18028  004DAE  6E8C               	movwf	3980,c	;volatile
 18029                           
 18030                           ;lcd.c: 41: LATD = temp | LATD;
 18031  004DB0  0100               	movlb	0	; () banked
 18032  004DB2  5180               	movf	lcdNibble@temp& (0+255),w,b
 18033  004DB4  108C               	iorwf	3980,w,c	;volatile
 18034  004DB6  6E8C               	movwf	3980,c	;volatile
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18038  004DB8  868C               	bsf	3980,3,c	;volatile
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18042  004DBA  0E42               	movlw	66
 18043  004DBC                     u11047:
 18044  004DBC  2EE8               	decfsz	wreg,f,c
 18045  004DBE  D7FE               	bra	u11047
 18046  004DC0  D000               	nop2	
 18047                           
 18048                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18049  004DC2  968C               	bcf	3980,3,c	;volatile
 18050                           
 18051                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18052  004DC4  0E42               	movlw	66
 18053  004DC6                     u11057:
 18054  004DC6  2EE8               	decfsz	wreg,f,c
 18055  004DC8  D7FE               	bra	u11057
 18056  004DCA  D000               	nop2	
 18057                           
 18058                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18059  004DCC  8EF2               	bsf	intcon,7,c	;volatile
 18060  004DCE  0012               	return		;funcret
 18061  004DD0                     __end_of_lcdNibble:
 18062                           	opt stack 0
 18063                           tblptru	equ	0xFF8
 18064                           tblptrh	equ	0xFF7
 18065                           tblptrl	equ	0xFF6
 18066                           tablat	equ	0xFF5
 18067                           prodh	equ	0xFF4
 18068                           prodl	equ	0xFF3
 18069                           intcon	equ	0xFF2
 18070                           intcon2	equ	0xFF1
 18071                           intcon3	equ	0xFF0
 18072                           indf0	equ	0xFEF
 18073                           postinc0	equ	0xFEE
 18074                           fsr0h	equ	0xFEA
 18075                           fsr0l	equ	0xFE9
 18076                           wreg	equ	0xFE8
 18077                           postdec1	equ	0xFE5
 18078                           fsr1l	equ	0xFE1
 18079                           indf2	equ	0xFDF
 18080                           postinc2	equ	0xFDE
 18081                           postdec2	equ	0xFDD
 18082                           fsr2h	equ	0xFDA
 18083                           fsr2l	equ	0xFD9
 18084                           status	equ	0xFD8
 18085                           
 18086 ;; *************** function _handler *****************
 18087 ;; Defined at:
 18088 ;;		line 16 in file "interruptHandler.c"
 18089 ;; Parameters:    Size  Location     Type
 18090 ;;		None
 18091 ;; Auto vars:     Size  Location     Type
 18092 ;;		None
 18093 ;; Return value:  Size  Location     Type
 18094 ;;                  1    wreg      void 
 18095 ;; Registers used:
 18096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18097 ;; Tracked objects:
 18098 ;;		On entry : 0/0
 18099 ;;		On exit  : 0/0
 18100 ;;		Unchanged: 0/0
 18101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18106 ;;Total ram usage:       16 bytes
 18107 ;; Hardware stack levels used:    1
 18108 ;; Hardware stack levels required when called:    6
 18109 ;; This function calls:
 18110 ;;		_printSortTimer
 18111 ;;		_updateArmState
 18112 ;;		_updateMenu
 18113 ;;		_updateServoStates
 18114 ;;		i2_change_state_to_menu_start
 18115 ;; This function is called by:
 18116 ;;		Interrupt level 2
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           	psect	intcode
 18121  000008                     __pintcode:
 18122                           	opt stack 0
 18123  000008                     _handler:
 18124                           	opt stack 18
 18125                           
 18126                           ;incstack = 0
 18127  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18128  00000A  ED45  F01B         	call	int_func,f	;refresh shadow registers
 18129                           tblptru	equ	0xFF8
 18130                           tblptrh	equ	0xFF7
 18131                           tblptrl	equ	0xFF6
 18132                           tablat	equ	0xFF5
 18133                           prodh	equ	0xFF4
 18134                           prodl	equ	0xFF3
 18135                           intcon	equ	0xFF2
 18136                           intcon2	equ	0xFF1
 18137                           intcon3	equ	0xFF0
 18138                           indf0	equ	0xFEF
 18139                           postinc0	equ	0xFEE
 18140                           fsr0h	equ	0xFEA
 18141                           fsr0l	equ	0xFE9
 18142                           wreg	equ	0xFE8
 18143                           postdec1	equ	0xFE5
 18144                           fsr1l	equ	0xFE1
 18145                           indf2	equ	0xFDF
 18146                           postinc2	equ	0xFDE
 18147                           postdec2	equ	0xFDD
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152                           	psect	intcode_body
 18153  00368A                     __pintcode_body:
 18154                           	opt stack 18
 18155  00368A                     int_func:
 18156                           	opt stack 18
 18157  00368A  0006               	pop		; remove dummy address from shadow register refresh
 18158  00368C  CFFA F04D          	movff	pclath,??_handler+2
 18159  003690  CFFB F04E          	movff	pclatu,??_handler+3
 18160  003694  CFE9 F04F          	movff	fsr0l,??_handler+4
 18161  003698  CFEA F050          	movff	fsr0h,??_handler+5
 18162  00369C  CFE1 F051          	movff	fsr1l,??_handler+6
 18163  0036A0  CFE2 F052          	movff	fsr1h,??_handler+7
 18164  0036A4  CFD9 F053          	movff	fsr2l,??_handler+8
 18165  0036A8  CFDA F054          	movff	fsr2h,??_handler+9
 18166  0036AC  CFF3 F055          	movff	prodl,??_handler+10
 18167  0036B0  CFF4 F056          	movff	prodh,??_handler+11
 18168  0036B4  CFF6 F057          	movff	tblptrl,??_handler+12
 18169  0036B8  CFF7 F058          	movff	tblptrh,??_handler+13
 18170  0036BC  CFF8 F059          	movff	tblptru,??_handler+14
 18171  0036C0  CFF5 F05A          	movff	tablat,??_handler+15
 18172                           
 18173                           ;interruptHandler.c: 18: if(INT1IF){
 18174  0036C4  A0F0               	btfss	intcon3,0,c	;volatile
 18175  0036C6  D034               	goto	i2l9900
 18176                           
 18177                           ;interruptHandler.c: 19: INT1IF = 0;
 18178  0036C8  90F0               	bcf	intcon3,0,c	;volatile
 18179                           
 18180                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 18181  0036CA  3881               	swapf	3969,w,c	;volatile
 18182  0036CC  0B0F               	andlw	15
 18183  0036CE  0B0F               	andlw	15
 18184  0036D0  6E4B               	movwf	??_handler& (0+255),c
 18185  0036D2  6A4C               	clrf	(??_handler+1)& (0+255),c
 18186  0036D4  0EA3               	movlw	low _keys
 18187  0036D6  244B               	addwf	??_handler,w,c
 18188  0036D8  6EF6               	movwf	tblptrl,c
 18189  0036DA  0EFA               	movlw	high _keys
 18190  0036DC  204C               	addwfc	??_handler+1,w,c
 18191  0036DE  6EF7               	movwf	tblptrh,c
 18192  0036E0                     	if	1	;There are 3 active tblptr bytes
 18193  0036E0  6AF8               	clrf	tblptru,c
 18194  0036E2  0E00               	movlw	low (__mediumconst shr (0+16))
 18195  0036E4  22F8               	addwfc	tblptru,f,c
 18196  0036E6                     	endif
 18197  0036E6  0008               	tblrd		*
 18198  0036E8  CFF5 F07D          	movff	tablat,_input	;volatile
 18199                           
 18200                           ;interruptHandler.c: 21: if(input == '*'){
 18201  0036EC  0E2A               	movlw	42
 18202  0036EE  187D               	xorwf	_input,w,c	;volatile
 18203  0036F0  B4D8               	btfsc	status,2,c
 18204  0036F2  D00D               	goto	i2l9894
 18205  0036F4  D018               	goto	i2l9896
 18206  0036F6                     i2l9884:
 18207                           
 18208                           ;interruptHandler.c: 24: machine_state = Testing_state;
 18209  0036F6  0E03               	movlw	3
 18210  0036F8  D007               	goto	L18
 18211  0036FA                     i2l9886:
 18212                           
 18213                           ; BSR set to: 0
 18214                           ;interruptHandler.c: 27: machine_state = UI_state;
 18215  0036FA  0E00               	movlw	0
 18216  0036FC  0100               	movlb	0	; () banked
 18217  0036FE  6FFC               	movwf	_machine_state& (0+255),b
 18218                           
 18219                           ; BSR set to: 0
 18220                           ;interruptHandler.c: 28: change_state_to_menu_start();
 18221  003700  EC14  F02B         	call	i2_change_state_to_menu_start	;wreg free
 18222                           
 18223                           ;interruptHandler.c: 29: break;
 18224  003704  D015               	goto	i2l9900
 18225  003706                     i2l9890:
 18226                           
 18227                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 18228  003706  0E02               	movlw	2
 18229  003708                     L18:
 18230  003708  0100               	movlb	0	; () banked
 18231  00370A  6FFC               	movwf	_machine_state& (0+255),b
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;interruptHandler.c: 33: }
 18235                           
 18236                           ;interruptHandler.c: 32: break;
 18237  00370C  D011               	goto	i2l9900
 18238  00370E                     i2l9894:
 18239  00370E  0100               	movlb	0	; () banked
 18240  003710  51FC               	movf	_machine_state& (0+255),w,b
 18241                           
 18242                           ; Switch size 1, requested type "space"
 18243                           ; Number of cases is 3, Range of values is 0 to 3
 18244                           ; switch strategies available:
 18245                           ; Name         Instructions Cycles
 18246                           ; simple_byte           10     6 (average)
 18247                           ;	Chosen strategy is simple_byte
 18248  003712  0A00               	xorlw	0	; case 0
 18249  003714  B4D8               	btfsc	status,2,c
 18250  003716  D7EF               	goto	i2l9884
 18251  003718  0A01               	xorlw	1	; case 1
 18252  00371A  B4D8               	btfsc	status,2,c
 18253  00371C  D7F4               	goto	i2l9890
 18254  00371E  0A02               	xorlw	2	; case 3
 18255  003720  B4D8               	btfsc	status,2,c
 18256  003722  D7EB               	goto	i2l9886
 18257                           
 18258                           ; BSR set to: 0
 18259                           ;interruptHandler.c: 34: }
 18260  003724  D005               	goto	i2l9900
 18261  003726                     i2l9896:
 18262                           
 18263                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 18264  003726  0100               	movlb	0	; () banked
 18265  003728  51FC               	movf	_machine_state& (0+255),w,b
 18266  00372A  B4D8               	btfsc	status,2,c
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;interruptHandler.c: 36: updateMenu();
 18270  00372C  EC3E  F016         	call	_updateMenu	;wreg free
 18271  003730                     i2l9900:
 18272                           
 18273                           ;interruptHandler.c: 37: }
 18274                           ;interruptHandler.c: 38: }
 18275                           ;interruptHandler.c: 41: if(TMR0IF){
 18276  003730  A4F2               	btfss	intcon,2,c	;volatile
 18277  003732  D00C               	goto	i2l9914
 18278                           
 18279                           ;interruptHandler.c: 42: TMR0IF = 0;
 18280  003734  94F2               	bcf	intcon,2,c	;volatile
 18281                           
 18282                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 18283  003736  0100               	movlb	0	; () banked
 18284  003738  05FC               	decf	_machine_state& (0+255),w,b
 18285  00373A  A4D8               	btfss	status,2,c
 18286  00373C  D007               	goto	i2l9914
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;interruptHandler.c: 44: printSortTimer();
 18290  00373E  EC9E  F017         	call	_printSortTimer	;wreg free
 18291                           
 18292                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 18293  003742  0E85               	movlw	133
 18294  003744  6ED7               	movwf	4055,c	;volatile
 18295                           
 18296                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 18297  003746  0EEE               	movlw	238
 18298  003748  6ED6               	movwf	4054,c	;volatile
 18299                           
 18300                           ;interruptHandler.c: 48: TMR0ON = 1;
 18301  00374A  8ED5               	bsf	4053,7,c	;volatile
 18302  00374C                     i2l9914:
 18303                           
 18304                           ;interruptHandler.c: 49: }
 18305                           ;interruptHandler.c: 50: }
 18306                           ;interruptHandler.c: 53: if(TMR1IF){
 18307  00374C  A09E               	btfss	3998,0,c	;volatile
 18308  00374E  D02A               	goto	i2l9942
 18309                           
 18310                           ;interruptHandler.c: 54: TMR1IF = 0;
 18311  003750  909E               	bcf	3998,0,c	;volatile
 18312                           
 18313                           ;interruptHandler.c: 55: TMR1ON = 0;
 18314  003752  90CD               	bcf	4045,0,c	;volatile
 18315                           
 18316                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 18317  003754  0100               	movlb	0	; () banked
 18318  003756  05FC               	decf	_machine_state& (0+255),w,b
 18319  003758  A4D8               	btfss	status,2,c
 18320  00375A  D024               	goto	i2l9942
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;interruptHandler.c: 57: if(was_low_1){
 18324  00375C  5077               	movf	_was_low_1,w,c	;volatile
 18325  00375E  1078               	iorwf	_was_low_1+1,w,c	;volatile
 18326  003760  B4D8               	btfsc	status,2,c
 18327  003762  D00A               	goto	i2l1025
 18328                           
 18329                           ; BSR set to: 0
 18330                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 18331  003764  828B               	bsf	3979,1,c	;volatile
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;interruptHandler.c: 59: was_low_1 = 0;
 18335  003766  0E00               	movlw	0
 18336  003768  6E78               	movwf	_was_low_1+1,c	;volatile
 18337  00376A  0E00               	movlw	0
 18338  00376C  6E77               	movwf	_was_low_1,c	;volatile
 18339                           
 18340                           ; BSR set to: 0
 18341                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 18342  00376E  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 18343                           
 18344                           ; BSR set to: 0
 18345                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 18346  003772  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 18347                           
 18348                           ;interruptHandler.c: 62: }
 18349  003776  D00F               	goto	i2l9936
 18350  003778                     i2l1025:
 18351                           
 18352                           ; BSR set to: 0
 18353                           ;interruptHandler.c: 63: else{
 18354                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 18355  003778  928B               	bcf	3979,1,c	;volatile
 18356                           
 18357                           ; BSR set to: 0
 18358                           ;interruptHandler.c: 65: was_low_1 = 1;
 18359  00377A  0E00               	movlw	0
 18360  00377C  6E78               	movwf	_was_low_1+1,c	;volatile
 18361  00377E  0E01               	movlw	1
 18362  003780  6E77               	movwf	_was_low_1,c	;volatile
 18363                           
 18364                           ; BSR set to: 0
 18365                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 18366  003782  0100               	movlb	0	; () banked
 18367  003784  51DA               	movf	_servoTimes& (0+255),w,b
 18368  003786  0800               	sublw	0
 18369  003788  0F20               	addlw	32
 18370  00378A  6ECF               	movwf	4047,c	;volatile
 18371                           
 18372                           ; BSR set to: 0
 18373                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 18374  00378C  0100               	movlb	0	; () banked
 18375  00378E  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 18376  003790  0800               	sublw	0
 18377  003792  0F20               	addlw	32
 18378  003794  6ECE               	movwf	4046,c	;volatile
 18379  003796                     i2l9936:
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;interruptHandler.c: 68: }
 18383                           ;interruptHandler.c: 69: TMR1ON = 1;
 18384  003796  80CD               	bsf	4045,0,c	;volatile
 18385                           
 18386                           ; BSR set to: 0
 18387                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 18388  003798  0E0A               	movlw	10
 18389  00379A  266D               	addwf	_servo_timer_counter,f,c	;volatile
 18390  00379C  0E00               	movlw	0
 18391  00379E  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 18392                           
 18393                           ; BSR set to: 0
 18394                           ;interruptHandler.c: 72: updateServoStates();
 18395  0037A0  EC34  F01D         	call	_updateServoStates	;wreg free
 18396  0037A4                     i2l9942:
 18397                           
 18398                           ;interruptHandler.c: 73: }
 18399                           ;interruptHandler.c: 74: }
 18400                           ;interruptHandler.c: 77: if(TMR2IF){
 18401  0037A4  A29E               	btfss	3998,1,c	;volatile
 18402  0037A6  D026               	goto	i2l9968
 18403                           
 18404                           ;interruptHandler.c: 80: TMR2IF = 0;
 18405  0037A8  929E               	bcf	3998,1,c	;volatile
 18406                           
 18407                           ;interruptHandler.c: 81: TMR2ON = 0;
 18408  0037AA  94CA               	bcf	4042,2,c	;volatile
 18409                           
 18410                           ;interruptHandler.c: 82: timer2_counter++;
 18411  0037AC  4A73               	infsnz	_timer2_counter,f,c	;volatile
 18412  0037AE  2A74               	incf	_timer2_counter+1,f,c	;volatile
 18413                           
 18414                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 18415  0037B0  0100               	movlb	0	; () banked
 18416  0037B2  05FC               	decf	_machine_state& (0+255),w,b
 18417  0037B4  A4D8               	btfss	status,2,c
 18418  0037B6  D01E               	goto	i2l9968
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 18422  0037B8  5079               	movf	_was_low_2,w,c	;volatile
 18423  0037BA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18424  0037BC  B4D8               	btfsc	status,2,c
 18425  0037BE  D00A               	goto	i2l9958
 18426                           
 18427                           ; BSR set to: 0
 18428  0037C0  0E02               	movlw	2
 18429  0037C2  1873               	xorwf	_timer2_counter,w,c	;volatile
 18430  0037C4  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 18431  0037C6  A4D8               	btfss	status,2,c
 18432  0037C8  D005               	goto	i2l9958
 18433                           
 18434                           ; BSR set to: 0
 18435                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 18436  0037CA  868A               	bsf	3978,3,c	;volatile
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;interruptHandler.c: 87: was_low_2 = 0;
 18440  0037CC  0E00               	movlw	0
 18441  0037CE  6E7A               	movwf	_was_low_2+1,c	;volatile
 18442  0037D0  0E00               	movlw	0
 18443  0037D2  D008               	goto	L19
 18444  0037D4                     i2l9958:
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;interruptHandler.c: 90: else if(!was_low_2){
 18448  0037D4  5079               	movf	_was_low_2,w,c	;volatile
 18449  0037D6  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18450  0037D8  A4D8               	btfss	status,2,c
 18451  0037DA  D009               	goto	i2l9964
 18452                           
 18453                           ; BSR set to: 0
 18454                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 18455  0037DC  968A               	bcf	3978,3,c	;volatile
 18456                           
 18457                           ; BSR set to: 0
 18458                           ;interruptHandler.c: 92: was_low_2 = 1;
 18459  0037DE  0E00               	movlw	0
 18460  0037E0  6E7A               	movwf	_was_low_2+1,c	;volatile
 18461  0037E2  0E01               	movlw	1
 18462  0037E4                     L19:
 18463  0037E4  6E79               	movwf	_was_low_2,c	;volatile
 18464                           
 18465                           ;interruptHandler.c: 93: timer2_counter = 0;
 18466  0037E6  0E00               	movlw	0
 18467  0037E8  6E74               	movwf	_timer2_counter+1,c	;volatile
 18468  0037EA  0E00               	movlw	0
 18469  0037EC  6E73               	movwf	_timer2_counter,c	;volatile
 18470  0037EE                     i2l9964:
 18471                           
 18472                           ; BSR set to: 0
 18473                           ;interruptHandler.c: 94: }
 18474                           ;interruptHandler.c: 95: updateArmState();
 18475  0037EE  ECE4  F028         	call	_updateArmState	;wreg free
 18476                           
 18477                           ;interruptHandler.c: 96: TMR2ON = 1;
 18478  0037F2  84CA               	bsf	4042,2,c	;volatile
 18479  0037F4                     i2l9968:
 18480                           
 18481                           ;interruptHandler.c: 97: }
 18482                           ;interruptHandler.c: 98: }
 18483                           ;interruptHandler.c: 101: if(TMR3IF){
 18484  0037F4  A2A1               	btfss	4001,1,c	;volatile
 18485  0037F6  D024               	goto	i2l1036
 18486                           
 18487                           ;interruptHandler.c: 102: TMR3IF = 0;
 18488  0037F8  92A1               	bcf	4001,1,c	;volatile
 18489                           
 18490                           ;interruptHandler.c: 103: TMR3ON = 0;
 18491  0037FA  90B1               	bcf	4017,0,c	;volatile
 18492                           
 18493                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 18494  0037FC  0100               	movlb	0	; () banked
 18495  0037FE  05FC               	decf	_machine_state& (0+255),w,b
 18496  003800  A4D8               	btfss	status,2,c
 18497  003802  D01E               	goto	i2l1036
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;interruptHandler.c: 105: if(was_low_3){
 18501  003804  507B               	movf	_was_low_3,w,c	;volatile
 18502  003806  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18503  003808  B4D8               	btfsc	status,2,c
 18504  00380A  D00A               	goto	i2l1034
 18505                           
 18506                           ; BSR set to: 0
 18507                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18508  00380C  848B               	bsf	3979,2,c	;volatile
 18509                           
 18510                           ; BSR set to: 0
 18511                           ;interruptHandler.c: 107: was_low_3 = 0;
 18512  00380E  0E00               	movlw	0
 18513  003810  6E7C               	movwf	_was_low_3+1,c	;volatile
 18514  003812  0E00               	movlw	0
 18515  003814  6E7B               	movwf	_was_low_3,c	;volatile
 18516                           
 18517                           ; BSR set to: 0
 18518                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18519  003816  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18523  00381A  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18524                           
 18525                           ;interruptHandler.c: 110: }
 18526  00381E  D00F               	goto	i2l9990
 18527  003820                     i2l1034:
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;interruptHandler.c: 111: else{
 18531                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18532  003820  948B               	bcf	3979,2,c	;volatile
 18533                           
 18534                           ; BSR set to: 0
 18535                           ;interruptHandler.c: 113: was_low_3 = 1;
 18536  003822  0E00               	movlw	0
 18537  003824  6E7C               	movwf	_was_low_3+1,c	;volatile
 18538  003826  0E01               	movlw	1
 18539  003828  6E7B               	movwf	_was_low_3,c	;volatile
 18540                           
 18541                           ; BSR set to: 0
 18542                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18543  00382A  0100               	movlb	0	; () banked
 18544  00382C  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18545  00382E  0800               	sublw	0
 18546  003830  0F20               	addlw	32
 18547  003832  6EB3               	movwf	4019,c	;volatile
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18551  003834  0100               	movlb	0	; () banked
 18552  003836  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18553  003838  0800               	sublw	0
 18554  00383A  0F20               	addlw	32
 18555  00383C  6EB2               	movwf	4018,c	;volatile
 18556  00383E                     i2l9990:
 18557                           
 18558                           ; BSR set to: 0
 18559                           ;interruptHandler.c: 116: }
 18560                           ;interruptHandler.c: 117: TMR3ON = 1;
 18561  00383E  80B1               	bsf	4017,0,c	;volatile
 18562  003840                     i2l1036:
 18563  003840  C05A  FFF5         	movff	??_handler+15,tablat
 18564  003844  C059  FFF8         	movff	??_handler+14,tblptru
 18565  003848  C058  FFF7         	movff	??_handler+13,tblptrh
 18566  00384C  C057  FFF6         	movff	??_handler+12,tblptrl
 18567  003850  C056  FFF4         	movff	??_handler+11,prodh
 18568  003854  C055  FFF3         	movff	??_handler+10,prodl
 18569  003858  C054  FFDA         	movff	??_handler+9,fsr2h
 18570  00385C  C053  FFD9         	movff	??_handler+8,fsr2l
 18571  003860  C052  FFE2         	movff	??_handler+7,fsr1h
 18572  003864  C051  FFE1         	movff	??_handler+6,fsr1l
 18573  003868  C050  FFEA         	movff	??_handler+5,fsr0h
 18574  00386C  C04F  FFE9         	movff	??_handler+4,fsr0l
 18575  003870  C04E  FFFB         	movff	??_handler+3,pclatu
 18576  003874  C04D  FFFA         	movff	??_handler+2,pclath
 18577  003878  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18578  00387A  0011               	retfie		f
 18579  00387C                     __end_of_handler:
 18580                           	opt stack 0
 18581                           pclatu	equ	0xFFB
 18582                           pclath	equ	0xFFA
 18583                           tblptru	equ	0xFF8
 18584                           tblptrh	equ	0xFF7
 18585                           tblptrl	equ	0xFF6
 18586                           tablat	equ	0xFF5
 18587                           prodh	equ	0xFF4
 18588                           prodl	equ	0xFF3
 18589                           intcon	equ	0xFF2
 18590                           intcon2	equ	0xFF1
 18591                           intcon3	equ	0xFF0
 18592                           indf0	equ	0xFEF
 18593                           postinc0	equ	0xFEE
 18594                           fsr0h	equ	0xFEA
 18595                           fsr0l	equ	0xFE9
 18596                           wreg	equ	0xFE8
 18597                           postdec1	equ	0xFE5
 18598                           fsr1h	equ	0xFE2
 18599                           fsr1l	equ	0xFE1
 18600                           indf2	equ	0xFDF
 18601                           postinc2	equ	0xFDE
 18602                           postdec2	equ	0xFDD
 18603                           fsr2h	equ	0xFDA
 18604                           fsr2l	equ	0xFD9
 18605                           status	equ	0xFD8
 18606                           
 18607 ;; *************** function _updateServoStates *****************
 18608 ;; Defined at:
 18609 ;;		line 550 in file "sort.c"
 18610 ;; Parameters:    Size  Location     Type
 18611 ;;		None
 18612 ;; Auto vars:     Size  Location     Type
 18613 ;;		None
 18614 ;; Return value:  Size  Location     Type
 18615 ;;                  1    wreg      void 
 18616 ;; Registers used:
 18617 ;;		wreg, status,2, status,0, cstack
 18618 ;; Tracked objects:
 18619 ;;		On entry : 0/0
 18620 ;;		On exit  : 0/0
 18621 ;;		Unchanged: 0/0
 18622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18626 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18627 ;;Total ram usage:        2 bytes
 18628 ;; Hardware stack levels used:    1
 18629 ;; Hardware stack levels required when called:    1
 18630 ;; This function calls:
 18631 ;;		i2_updateServoPosition
 18632 ;; This function is called by:
 18633 ;;		_handler
 18634 ;; This function uses a non-reentrant model
 18635 ;;
 18636                           
 18637                           	psect	text60
 18638  003A68                     __ptext60:
 18639                           	opt stack 0
 18640  003A68                     _updateServoStates:
 18641                           	opt stack 22
 18642                           
 18643                           ;sort.c: 552: if(servo_timer_counter >= servo_timer_target){
 18644                           
 18645                           ;incstack = 0
 18646  003A68  506F               	movf	_servo_timer_target,w,c	;volatile
 18647  003A6A  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18648  003A6C  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18649  003A6E  0A80               	xorlw	128
 18650  003A70  6E09               	movwf	??_updateServoStates& (0+255),c
 18651  003A72  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18652  003A74  0A80               	xorlw	128
 18653  003A76  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18654  003A78  A0D8               	btfss	status,0,c
 18655  003A7A  0012               	return	
 18656                           
 18657                           ;sort.c: 554: if(f_panning_to_bin){
 18658  003A7C  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18659  003A7E  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18660  003A80  A4D8               	btfss	status,2,c
 18661  003A82  D036               	goto	i2l9760
 18662  003A84  D05F               	goto	i2l9764
 18663  003A86                     i2l9734:
 18664                           
 18665                           ;sort.c: 558: updateServoPosition(1260, 3);
 18666  003A86  0E04               	movlw	4
 18667  003A88  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18668  003A8A  0EEC               	movlw	236
 18669  003A8C  6E01               	movwf	i2updateServoPosition@time_us,c
 18670  003A8E  0E00               	movlw	0
 18671  003A90  6E04               	movwf	i2updateServoPosition@timer+1,c
 18672  003A92  0E03               	movlw	3
 18673  003A94  6E03               	movwf	i2updateServoPosition@timer,c
 18674  003A96  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18675  003A9A  D025               	goto	i2l9754
 18676  003A9C                     i2l9738:
 18677                           
 18678                           ;sort.c: 560: servo_timer_target = 700;
 18679  003A9C  0E02               	movlw	2
 18680  003A9E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18681  003AA0  0EBC               	movlw	188
 18682  003AA2  6E6F               	movwf	_servo_timer_target,c	;volatile
 18683                           
 18684                           ;sort.c: 561: break;
 18685  003AA4  D04A               	goto	i2l9762
 18686  003AA6                     i2l9740:
 18687                           
 18688                           ;sort.c: 563: updateServoPosition(1260, 3);
 18689  003AA6  0E04               	movlw	4
 18690  003AA8  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18691  003AAA  0EEC               	movlw	236
 18692  003AAC  6E01               	movwf	i2updateServoPosition@time_us,c
 18693  003AAE  0E00               	movlw	0
 18694  003AB0  6E04               	movwf	i2updateServoPosition@timer+1,c
 18695  003AB2  0E03               	movlw	3
 18696  003AB4  6E03               	movwf	i2updateServoPosition@timer,c
 18697  003AB6  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18698  003ABA  D015               	goto	i2l9754
 18699  003ABC                     i2l9746:
 18700                           
 18701                           ;sort.c: 569: updateServoPosition(1390, 3);
 18702  003ABC  0E05               	movlw	5
 18703  003ABE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18704  003AC0  0E6E               	movlw	110
 18705  003AC2  6E01               	movwf	i2updateServoPosition@time_us,c
 18706  003AC4  0E00               	movlw	0
 18707  003AC6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18708  003AC8  0E03               	movlw	3
 18709  003ACA  6E03               	movwf	i2updateServoPosition@timer,c
 18710  003ACC  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18711  003AD0  D00A               	goto	i2l9754
 18712  003AD2                     i2l9752:
 18713                           
 18714                           ;sort.c: 574: updateServoPosition(1390, 3);
 18715  003AD2  0E05               	movlw	5
 18716  003AD4  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18717  003AD6  0E6E               	movlw	110
 18718  003AD8  6E01               	movwf	i2updateServoPosition@time_us,c
 18719  003ADA  0E00               	movlw	0
 18720  003ADC  6E04               	movwf	i2updateServoPosition@timer+1,c
 18721  003ADE  0E03               	movlw	3
 18722  003AE0  6E03               	movwf	i2updateServoPosition@timer,c
 18723  003AE2  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18724  003AE6                     i2l9754:
 18725                           
 18726                           ;sort.c: 575: servo_timer_counter = 0;
 18727  003AE6  0E00               	movlw	0
 18728  003AE8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18729  003AEA  0E00               	movlw	0
 18730  003AEC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18731  003AEE  D7D6               	goto	i2l9738
 18732  003AF0                     i2l9760:
 18733  003AF0  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18734  003AF4  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18735                           
 18736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18737                           ; Switch size 1, requested type "space"
 18738                           ; Number of cases is 4, Range of values is 1 to 9
 18739                           ; switch strategies available:
 18740                           ; Name         Instructions Cycles
 18741                           ; simple_byte           13     7 (average)
 18742                           ;	Chosen strategy is simple_byte
 18743  003AF8  500A               	movf	??_updateServoStates+1,w,c
 18744  003AFA  0A01               	xorlw	1	; case 1
 18745  003AFC  B4D8               	btfsc	status,2,c
 18746  003AFE  D00A               	goto	i2l10438
 18747  003B00  0A02               	xorlw	2	; case 3
 18748  003B02  B4D8               	btfsc	status,2,c
 18749  003B04  D00C               	goto	i2l10440
 18750  003B06  0A05               	xorlw	5	; case 6
 18751  003B08  B4D8               	btfsc	status,2,c
 18752  003B0A  D00E               	goto	i2l10442
 18753  003B0C  0A0F               	xorlw	15	; case 9
 18754  003B0E  B4D8               	btfsc	status,2,c
 18755  003B10  D010               	goto	i2l10444
 18756  003B12  D013               	goto	i2l9762
 18757  003B14                     i2l10438:
 18758                           
 18759                           ; Switch size 1, requested type "space"
 18760                           ; Number of cases is 1, Range of values is 244 to 244
 18761                           ; switch strategies available:
 18762                           ; Name         Instructions Cycles
 18763                           ; simple_byte            4     3 (average)
 18764                           ;	Chosen strategy is simple_byte
 18765  003B14  5009               	movf	??_updateServoStates,w,c
 18766  003B16  0AF4               	xorlw	244	; case 244
 18767  003B18  B4D8               	btfsc	status,2,c
 18768  003B1A  D7B5               	goto	i2l9734
 18769  003B1C  D00E               	goto	i2l9762
 18770  003B1E                     i2l10440:
 18771                           
 18772                           ; Switch size 1, requested type "space"
 18773                           ; Number of cases is 1, Range of values is 82 to 82
 18774                           ; switch strategies available:
 18775                           ; Name         Instructions Cycles
 18776                           ; simple_byte            4     3 (average)
 18777                           ;	Chosen strategy is simple_byte
 18778  003B1E  5009               	movf	??_updateServoStates,w,c
 18779  003B20  0A52               	xorlw	82	; case 82
 18780  003B22  B4D8               	btfsc	status,2,c
 18781  003B24  D7C0               	goto	i2l9740
 18782  003B26  D009               	goto	i2l9762
 18783  003B28                     i2l10442:
 18784                           
 18785                           ; Switch size 1, requested type "space"
 18786                           ; Number of cases is 1, Range of values is 134 to 134
 18787                           ; switch strategies available:
 18788                           ; Name         Instructions Cycles
 18789                           ; simple_byte            4     3 (average)
 18790                           ;	Chosen strategy is simple_byte
 18791  003B28  5009               	movf	??_updateServoStates,w,c
 18792  003B2A  0A86               	xorlw	134	; case 134
 18793  003B2C  B4D8               	btfsc	status,2,c
 18794  003B2E  D7C6               	goto	i2l9746
 18795  003B30  D004               	goto	i2l9762
 18796  003B32                     i2l10444:
 18797                           
 18798                           ; Switch size 1, requested type "space"
 18799                           ; Number of cases is 1, Range of values is 96 to 96
 18800                           ; switch strategies available:
 18801                           ; Name         Instructions Cycles
 18802                           ; simple_byte            4     3 (average)
 18803                           ;	Chosen strategy is simple_byte
 18804  003B32  5009               	movf	??_updateServoStates,w,c
 18805  003B34  0A60               	xorlw	96	; case 96
 18806  003B36  B4D8               	btfsc	status,2,c
 18807  003B38  D7CC               	goto	i2l9752
 18808  003B3A                     i2l9762:
 18809                           
 18810                           ;sort.c: 581: f_panning_to_bin = 0;
 18811  003B3A  0E00               	movlw	0
 18812  003B3C  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18813  003B3E  0E00               	movlw	0
 18814  003B40  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18815                           
 18816                           ;sort.c: 582: }
 18817  003B42  0012               	return	
 18818  003B44                     i2l9764:
 18819                           
 18820                           ;sort.c: 583: else if(pan_servo_state == 1200){
 18821  003B44  0EB0               	movlw	176
 18822  003B46  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18823  003B48  E15A               	bnz	i2l9794
 18824  003B4A  0E04               	movlw	4
 18825  003B4C  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18826  003B4E  A4D8               	btfss	status,2,c
 18827  003B50  D056               	goto	i2l9794
 18828                           
 18829                           ;sort.c: 585: servo_timer_counter = 0;
 18830  003B52  0E00               	movlw	0
 18831  003B54  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18832  003B56  0E00               	movlw	0
 18833  003B58  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18834                           
 18835                           ;sort.c: 586: }
 18836  003B5A  0012               	return	
 18837  003B5C                     i2l9768:
 18838                           
 18839                           ;sort.c: 591: updateServoPosition(1050, 3);
 18840  003B5C  0E04               	movlw	4
 18841  003B5E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18842  003B60  0E1A               	movlw	26
 18843  003B62  6E01               	movwf	i2updateServoPosition@time_us,c
 18844  003B64  0E00               	movlw	0
 18845  003B66  6E04               	movwf	i2updateServoPosition@timer+1,c
 18846  003B68  0E03               	movlw	3
 18847  003B6A  6E03               	movwf	i2updateServoPosition@timer,c
 18848  003B6C  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18849                           
 18850                           ;sort.c: 592: servo_timer_counter = 0;
 18851  003B70  0E00               	movlw	0
 18852  003B72  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18853  003B74  0E00               	movlw	0
 18854  003B76  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18855                           
 18856                           ;sort.c: 593: servo_timer_target = 750;
 18857  003B78  0E02               	movlw	2
 18858  003B7A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18859  003B7C  0EEE               	movlw	238
 18860  003B7E  6E6F               	movwf	_servo_timer_target,c	;volatile
 18861                           
 18862                           ;sort.c: 594: break;
 18863  003B80  0012               	return	
 18864  003B82                     i2l9774:
 18865                           
 18866                           ;sort.c: 596: updateServoPosition(1050, 3);
 18867  003B82  0E04               	movlw	4
 18868  003B84  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18869  003B86  0E1A               	movlw	26
 18870  003B88  6E01               	movwf	i2updateServoPosition@time_us,c
 18871  003B8A  0E00               	movlw	0
 18872  003B8C  6E04               	movwf	i2updateServoPosition@timer+1,c
 18873  003B8E  0E03               	movlw	3
 18874  003B90  6E03               	movwf	i2updateServoPosition@timer,c
 18875  003B92  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18876                           
 18877                           ;sort.c: 597: servo_timer_counter = 0;
 18878  003B96  0E00               	movlw	0
 18879  003B98  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18880  003B9A  0E00               	movlw	0
 18881  003B9C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18882                           
 18883                           ;sort.c: 598: servo_timer_target = 750;
 18884  003B9E  0E02               	movlw	2
 18885  003BA0  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18886  003BA2  0EEE               	movlw	238
 18887  003BA4  6E6F               	movwf	_servo_timer_target,c	;volatile
 18888                           
 18889                           ;sort.c: 599: break;
 18890  003BA6  0012               	return	
 18891  003BA8                     i2l9780:
 18892                           
 18893                           ;sort.c: 602: updateServoPosition(1200, 1);
 18894  003BA8  0E04               	movlw	4
 18895  003BAA  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18896  003BAC  0EB0               	movlw	176
 18897  003BAE  6E01               	movwf	i2updateServoPosition@time_us,c
 18898  003BB0  0E00               	movlw	0
 18899  003BB2  6E04               	movwf	i2updateServoPosition@timer+1,c
 18900  003BB4  0E01               	movlw	1
 18901  003BB6  6E03               	movwf	i2updateServoPosition@timer,c
 18902  003BB8  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18903                           
 18904                           ;sort.c: 603: updateServoPosition(1050, 3);
 18905  003BBC  0E04               	movlw	4
 18906  003BBE  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18907  003BC0  0E1A               	movlw	26
 18908  003BC2  6E01               	movwf	i2updateServoPosition@time_us,c
 18909  003BC4  0E00               	movlw	0
 18910  003BC6  6E04               	movwf	i2updateServoPosition@timer+1,c
 18911  003BC8  0E03               	movlw	3
 18912  003BCA  6E03               	movwf	i2updateServoPosition@timer,c
 18913  003BCC  EC7A  F026         	call	i2_updateServoPosition	;wreg free
 18914                           
 18915                           ;sort.c: 604: servo_timer_counter = 0;
 18916  003BD0  0E00               	movlw	0
 18917  003BD2  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18918  003BD4  0E00               	movlw	0
 18919  003BD6  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18920                           
 18921                           ;sort.c: 605: servo_timer_target = 9999;
 18922  003BD8  0E27               	movlw	39
 18923  003BDA  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18924  003BDC  0E0F               	movlw	15
 18925  003BDE  6E6F               	movwf	_servo_timer_target,c	;volatile
 18926                           
 18927                           ;sort.c: 607: f_can_distributed = 1;
 18928  003BE0  0E00               	movlw	0
 18929  003BE2  0101               	movlb	1	; () banked
 18930  003BE4  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18931  003BE6  0E01               	movlw	1
 18932  003BE8  6F35               	movwf	_f_can_distributed& (0+255),b
 18933                           
 18934                           ; BSR set to: 1
 18935                           ;sort.c: 608: if(f_lastCan == 1){
 18936  003BEA  0100               	movlb	0	; () banked
 18937  003BEC  05F0               	decf	_f_lastCan& (0+255),w,b
 18938  003BEE  0100               	movlb	0	; () banked
 18939  003BF0  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18940  003BF2  A4D8               	btfss	status,2,c
 18941  003BF4  0012               	return	
 18942                           
 18943                           ; BSR set to: 0
 18944                           ;sort.c: 609: machine_state = DoneSorting_state;
 18945  003BF6  0E02               	movlw	2
 18946  003BF8  0100               	movlb	0	; () banked
 18947  003BFA  6FFC               	movwf	_machine_state& (0+255),b
 18948                           
 18949                           ; BSR set to: 0
 18950                           ;sort.c: 615: }
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;sort.c: 614: break;
 18954                           
 18955                           ;sort.c: 613: default:
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;sort.c: 610: }
 18959                           ;sort.c: 611: break;
 18960  003BFC  0012               	return	
 18961  003BFE                     i2l9794:
 18962  003BFE  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18963  003C02  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18964                           
 18965                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18966                           ; Switch size 1, requested type "space"
 18967                           ; Number of cases is 2, Range of values is 4 to 5
 18968                           ; switch strategies available:
 18969                           ; Name         Instructions Cycles
 18970                           ; simple_byte            7     4 (average)
 18971                           ;	Chosen strategy is simple_byte
 18972  003C06  500A               	movf	??_updateServoStates+1,w,c
 18973  003C08  0A04               	xorlw	4	; case 4
 18974  003C0A  B4D8               	btfsc	status,2,c
 18975  003C0C  D004               	goto	i2l10446
 18976  003C0E  0A01               	xorlw	1	; case 5
 18977  003C10  A4D8               	btfss	status,2,c
 18978  003C12  0012               	return	
 18979  003C14  D008               	goto	i2l10448
 18980  003C16                     i2l10446:
 18981                           
 18982                           ; Switch size 1, requested type "space"
 18983                           ; Number of cases is 2, Range of values is 26 to 236
 18984                           ; switch strategies available:
 18985                           ; Name         Instructions Cycles
 18986                           ; simple_byte            7     4 (average)
 18987                           ;	Chosen strategy is simple_byte
 18988  003C16  5009               	movf	??_updateServoStates,w,c
 18989  003C18  0A1A               	xorlw	26	; case 26
 18990  003C1A  B4D8               	btfsc	status,2,c
 18991  003C1C  D7C5               	goto	i2l9780
 18992  003C1E  0AF6               	xorlw	246	; case 236
 18993  003C20  A4D8               	btfss	status,2,c
 18994  003C22  0012               	return	
 18995  003C24  D79B               	goto	i2l9768
 18996  003C26                     i2l10448:
 18997                           
 18998                           ; Switch size 1, requested type "space"
 18999                           ; Number of cases is 1, Range of values is 110 to 110
 19000                           ; switch strategies available:
 19001                           ; Name         Instructions Cycles
 19002                           ; simple_byte            4     3 (average)
 19003                           ;	Chosen strategy is simple_byte
 19004  003C26  5009               	movf	??_updateServoStates,w,c
 19005  003C28  0A6E               	xorlw	110	; case 110
 19006  003C2A  A4D8               	btfss	status,2,c
 19007  003C2C  0012               	return	
 19008  003C2E  D7A9               	goto	i2l9774
 19009  003C30                     __end_of_updateServoStates:
 19010                           	opt stack 0
 19011                           pclatu	equ	0xFFB
 19012                           pclath	equ	0xFFA
 19013                           tblptru	equ	0xFF8
 19014                           tblptrh	equ	0xFF7
 19015                           tblptrl	equ	0xFF6
 19016                           tablat	equ	0xFF5
 19017                           prodh	equ	0xFF4
 19018                           prodl	equ	0xFF3
 19019                           intcon	equ	0xFF2
 19020                           intcon2	equ	0xFF1
 19021                           intcon3	equ	0xFF0
 19022                           indf0	equ	0xFEF
 19023                           postinc0	equ	0xFEE
 19024                           fsr0h	equ	0xFEA
 19025                           fsr0l	equ	0xFE9
 19026                           wreg	equ	0xFE8
 19027                           postdec1	equ	0xFE5
 19028                           fsr1h	equ	0xFE2
 19029                           fsr1l	equ	0xFE1
 19030                           indf2	equ	0xFDF
 19031                           postinc2	equ	0xFDE
 19032                           postdec2	equ	0xFDD
 19033                           fsr2h	equ	0xFDA
 19034                           fsr2l	equ	0xFD9
 19035                           status	equ	0xFD8
 19036                           
 19037 ;; *************** function i2_updateServoPosition *****************
 19038 ;; Defined at:
 19039 ;;		line 535 in file "sort.c"
 19040 ;; Parameters:    Size  Location     Type
 19041 ;;  time_us         2    0[COMRAM] int 
 19042 ;;  timer           2    2[COMRAM] int 
 19043 ;; Auto vars:     Size  Location     Type
 19044 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19045 ;; Return value:  Size  Location     Type
 19046 ;;                  1    wreg      void 
 19047 ;; Registers used:
 19048 ;;		wreg, status,2, status,0
 19049 ;; Tracked objects:
 19050 ;;		On entry : 0/0
 19051 ;;		On exit  : 0/0
 19052 ;;		Unchanged: 0/0
 19053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19057 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19058 ;;Total ram usage:        8 bytes
 19059 ;; Hardware stack levels used:    1
 19060 ;; This function calls:
 19061 ;;		Nothing
 19062 ;; This function is called by:
 19063 ;;		_updateServoStates
 19064 ;; This function uses a non-reentrant model
 19065 ;;
 19066                           
 19067                           	psect	text61
 19068  004CF4                     __ptext61:
 19069                           	opt stack 0
 19070  004CF4                     i2_updateServoPosition:
 19071                           	opt stack 22
 19072                           
 19073                           ;sort.c: 536: unsigned int my_time = 65535 - time_us;
 19074                           
 19075                           ;incstack = 0
 19076  004CF4  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19077  004CF8  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19078  004CFC  1E05               	comf	??i2_updateServoPosition,f,c
 19079  004CFE  1E06               	comf	??i2_updateServoPosition+1,f,c
 19080  004D00  4A05               	infsnz	??i2_updateServoPosition,f,c
 19081  004D02  2A06               	incf	??i2_updateServoPosition+1,f,c
 19082  004D04  0EFF               	movlw	255
 19083  004D06  2405               	addwf	??i2_updateServoPosition,w,c
 19084  004D08  6E07               	movwf	i2updateServoPosition@my_time,c
 19085  004D0A  0EFF               	movlw	255
 19086  004D0C  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19087  004D0E  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19088                           
 19089                           ;sort.c: 537: switch(timer){
 19090  004D10  D019               	goto	i2l8954
 19091  004D12                     i2l8948:
 19092                           
 19093                           ;sort.c: 539: servoTimes[0] = my_time >> 8;
 19094  004D12  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19095  004D14  0100               	movlb	0	; () banked
 19096  004D16  6FDA               	movwf	_servoTimes& (0+255),b
 19097  004D18  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 19098                           
 19099                           ;sort.c: 540: servoTimes[1] = my_time & 0xFF;
 19100  004D1A  5007               	movf	i2updateServoPosition@my_time,w,c
 19101  004D1C  0100               	movlb	0	; () banked
 19102  004D1E  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 19103  004D20  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 19104                           
 19105                           ; BSR set to: 0
 19106                           ;sort.c: 542: pan_servo_state = time_us;
 19107  004D22  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19108  004D26  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19109  004D2A                     i2l906:
 19110                           
 19111                           ;sort.c: 544: servoTimes[2] = my_time >> 8;
 19112  004D2A  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19113  004D2C  0100               	movlb	0	; () banked
 19114  004D2E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 19115  004D30  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 19116                           
 19117                           ;sort.c: 545: servoTimes[3] = my_time & 0xFF;
 19118  004D32  5007               	movf	i2updateServoPosition@my_time,w,c
 19119  004D34  0100               	movlb	0	; () banked
 19120  004D36  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 19121  004D38  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;sort.c: 547: tilt_servo_state = time_us;
 19125  004D3A  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 19126  004D3E  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 19127                           
 19128                           ;sort.c: 548: }
 19129  004D42  0012               	return	
 19130  004D44                     i2l8954:
 19131  004D44  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 19132  004D48  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 19133                           
 19134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19135                           ; Switch size 1, requested type "space"
 19136                           ; Number of cases is 1, Range of values is 0 to 0
 19137                           ; switch strategies available:
 19138                           ; Name         Instructions Cycles
 19139                           ; simple_byte            4     3 (average)
 19140                           ;	Chosen strategy is simple_byte
 19141  004D4C  5006               	movf	??i2_updateServoPosition+1,w,c
 19142  004D4E  0A00               	xorlw	0	; case 0
 19143  004D50  A4D8               	btfss	status,2,c
 19144  004D52  0012               	return	
 19145                           
 19146                           ; Switch size 1, requested type "space"
 19147                           ; Number of cases is 2, Range of values is 1 to 3
 19148                           ; switch strategies available:
 19149                           ; Name         Instructions Cycles
 19150                           ; simple_byte            7     4 (average)
 19151                           ;	Chosen strategy is simple_byte
 19152  004D54  5005               	movf	??i2_updateServoPosition,w,c
 19153  004D56  0A01               	xorlw	1	; case 1
 19154  004D58  B4D8               	btfsc	status,2,c
 19155  004D5A  D7DB               	goto	i2l8948
 19156  004D5C  0A02               	xorlw	2	; case 3
 19157  004D5E  A4D8               	btfss	status,2,c
 19158  004D60  0012               	return	
 19159  004D62  D7E3               	goto	i2l906
 19160  004D64                     __end_ofi2_updateServoPosition:
 19161                           	opt stack 0
 19162                           pclatu	equ	0xFFB
 19163                           pclath	equ	0xFFA
 19164                           tblptru	equ	0xFF8
 19165                           tblptrh	equ	0xFF7
 19166                           tblptrl	equ	0xFF6
 19167                           tablat	equ	0xFF5
 19168                           prodh	equ	0xFF4
 19169                           prodl	equ	0xFF3
 19170                           intcon	equ	0xFF2
 19171                           intcon2	equ	0xFF1
 19172                           intcon3	equ	0xFF0
 19173                           indf0	equ	0xFEF
 19174                           postinc0	equ	0xFEE
 19175                           fsr0h	equ	0xFEA
 19176                           fsr0l	equ	0xFE9
 19177                           wreg	equ	0xFE8
 19178                           postdec1	equ	0xFE5
 19179                           fsr1h	equ	0xFE2
 19180                           fsr1l	equ	0xFE1
 19181                           indf2	equ	0xFDF
 19182                           postinc2	equ	0xFDE
 19183                           postdec2	equ	0xFDD
 19184                           fsr2h	equ	0xFDA
 19185                           fsr2l	equ	0xFD9
 19186                           status	equ	0xFD8
 19187                           
 19188 ;; *************** function _updateMenu *****************
 19189 ;; Defined at:
 19190 ;;		line 216 in file "UI.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;		None
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;		None
 19195 ;; Return value:  Size  Location     Type
 19196 ;;                  1    wreg      void 
 19197 ;; Registers used:
 19198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19199 ;; Tracked objects:
 19200 ;;		On entry : 0/0
 19201 ;;		On exit  : 0/0
 19202 ;;		Unchanged: 0/0
 19203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19206 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;Total ram usage:        2 bytes
 19209 ;; Hardware stack levels used:    1
 19210 ;; Hardware stack levels required when called:    5
 19211 ;; This function calls:
 19212 ;;		_change_state_to_logs_11
 19213 ;;		_change_state_to_logs_12
 19214 ;;		_change_state_to_logs_22
 19215 ;;		_change_state_to_logs_23
 19216 ;;		_change_state_to_logs_33
 19217 ;;		_change_state_to_logs_34
 19218 ;;		_change_state_to_menu_11
 19219 ;;		_change_state_to_menu_23
 19220 ;;		_dispLogs
 19221 ;;		_inputHandler
 19222 ;;		i2_change_state_to_menu_12
 19223 ;;		i2_change_state_to_menu_22
 19224 ;;		i2_change_state_to_menu_start
 19225 ;; This function is called by:
 19226 ;;		_handler
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           	psect	text62
 19231  002C7C                     __ptext62:
 19232                           	opt stack 0
 19233  002C7C                     _updateMenu:
 19234                           	opt stack 18
 19235                           
 19236                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 19237                           
 19238                           ;incstack = 0
 19239  002C7C  0E00               	movlw	0
 19240  002C7E  6E76               	movwf	_up+1,c
 19241  002C80  0E00               	movlw	0
 19242  002C82  6E75               	movwf	_up,c
 19243  002C84  0E00               	movlw	0
 19244  002C86  6E5E               	movwf	_down+1,c
 19245  002C88  0E00               	movlw	0
 19246  002C8A  6E5D               	movwf	_down,c
 19247  002C8C  0E00               	movlw	0
 19248  002C8E  6E60               	movwf	_enter+1,c
 19249  002C90  0E00               	movlw	0
 19250  002C92  6E5F               	movwf	_enter,c
 19251  002C94  0E00               	movlw	0
 19252  002C96  6E5C               	movwf	_back+1,c
 19253  002C98  0E00               	movlw	0
 19254  002C9A  6E5B               	movwf	_back,c
 19255                           
 19256                           ;UI.c: 218: (INTCONbits.GIE = 0);
 19257  002C9C  9EF2               	bcf	intcon,7,c	;volatile
 19258                           
 19259                           ;UI.c: 220: if (inputHandler()
 19260                           ;UI.c: 223: ){
 19261  002C9E  EC3E  F01C         	call	_inputHandler	;wreg free
 19262  002CA2  502A               	movf	?_inputHandler,w,c
 19263  002CA4  102B               	iorwf	?_inputHandler+1,w,c
 19264  002CA6  A4D8               	btfss	status,2,c
 19265  002CA8  D112               	goto	i2l9488
 19266  002CAA  D146               	goto	i2l263
 19267  002CAC                     i2l9340:
 19268                           
 19269                           ;UI.c: 227: change_state_to_menu_11();
 19270  002CAC  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 19271                           
 19272                           ;UI.c: 228: break;
 19273  002CB0  D143               	goto	i2l263
 19274  002CB2                     i2l9342:
 19275                           
 19276                           ;UI.c: 231: if(up){
 19277  002CB2  5075               	movf	_up,w,c
 19278  002CB4  1076               	iorwf	_up+1,w,c
 19279  002CB6  B4D8               	btfsc	status,2,c
 19280  002CB8  D003               	goto	i2l9346
 19281                           
 19282                           ;UI.c: 232: change_state_to_menu_23();
 19283  002CBA  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19284                           
 19285                           ;UI.c: 233: }
 19286  002CBE  D13C               	goto	i2l263
 19287  002CC0                     i2l9346:
 19288                           
 19289                           ;UI.c: 234: else if(down){
 19290  002CC0  505D               	movf	_down,w,c
 19291  002CC2  105E               	iorwf	_down+1,w,c
 19292  002CC4  B4D8               	btfsc	status,2,c
 19293  002CC6  D003               	goto	i2l9350
 19294                           
 19295                           ;UI.c: 235: change_state_to_menu_12();
 19296  002CC8  ECD1  F029         	call	i2_change_state_to_menu_12	;wreg free
 19297                           
 19298                           ;UI.c: 236: }
 19299  002CCC  D135               	goto	i2l263
 19300  002CCE                     i2l9350:
 19301                           
 19302                           ;UI.c: 237: else if(enter){
 19303  002CCE  505F               	movf	_enter,w,c
 19304  002CD0  1060               	iorwf	_enter+1,w,c
 19305  002CD2  B4D8               	btfsc	status,2,c
 19306  002CD4  D131               	goto	i2l263
 19307                           
 19308                           ;UI.c: 238: change_state_to_menu_start();
 19309  002CD6  EC14  F02B         	call	i2_change_state_to_menu_start	;wreg free
 19310                           
 19311                           ;UI.c: 239: }
 19312                           ;UI.c: 240: break;
 19313  002CDA  D12E               	goto	i2l263
 19314  002CDC                     i2l9354:
 19315                           
 19316                           ;UI.c: 243: if(up){
 19317  002CDC  5075               	movf	_up,w,c
 19318  002CDE  1076               	iorwf	_up+1,w,c
 19319  002CE0  B4D8               	btfsc	status,2,c
 19320  002CE2  D003               	goto	i2l9358
 19321                           
 19322                           ;UI.c: 244: change_state_to_menu_11();
 19323  002CE4  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 19324                           
 19325                           ;UI.c: 245: }
 19326  002CE8  D127               	goto	i2l263
 19327  002CEA                     i2l9358:
 19328                           
 19329                           ;UI.c: 246: else if(down){
 19330  002CEA  505D               	movf	_down,w,c
 19331  002CEC  105E               	iorwf	_down+1,w,c
 19332  002CEE  B4D8               	btfsc	status,2,c
 19333  002CF0  D011               	goto	i2l9374
 19334                           
 19335                           ;UI.c: 247: change_state_to_menu_23();
 19336  002CF2  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19337                           
 19338                           ;UI.c: 248: }
 19339  002CF6  D120               	goto	i2l263
 19340  002CF8                     i2l9366:
 19341                           
 19342                           ;UI.c: 255: if(up){
 19343  002CF8  5075               	movf	_up,w,c
 19344  002CFA  1076               	iorwf	_up+1,w,c
 19345  002CFC  B4D8               	btfsc	status,2,c
 19346  002CFE  D003               	goto	i2l9370
 19347                           
 19348                           ;UI.c: 256: change_state_to_menu_11();
 19349  002D00  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 19350                           
 19351                           ;UI.c: 257: }
 19352  002D04  D119               	goto	i2l263
 19353  002D06                     i2l9370:
 19354                           
 19355                           ;UI.c: 258: else if(down){
 19356  002D06  505D               	movf	_down,w,c
 19357  002D08  105E               	iorwf	_down+1,w,c
 19358  002D0A  B4D8               	btfsc	status,2,c
 19359  002D0C  D003               	goto	i2l9374
 19360                           
 19361                           ;UI.c: 259: change_state_to_menu_23();
 19362  002D0E  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19363                           
 19364                           ;UI.c: 260: }
 19365  002D12  D112               	goto	i2l263
 19366  002D14                     i2l9374:
 19367                           
 19368                           ;UI.c: 261: else if(enter){
 19369  002D14  505F               	movf	_enter,w,c
 19370  002D16  1060               	iorwf	_enter+1,w,c
 19371  002D18  B4D8               	btfsc	status,2,c
 19372  002D1A  D10E               	goto	i2l263
 19373                           
 19374                           ;UI.c: 262: machine_state = Sorting_state;
 19375  002D1C  0E01               	movlw	1
 19376  002D1E  0100               	movlb	0	; () banked
 19377  002D20  6FFC               	movwf	_machine_state& (0+255),b
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;UI.c: 263: }
 19381                           ;UI.c: 264: break;
 19382                           
 19383                           ; BSR set to: 0
 19384                           
 19385                           ; BSR set to: 0
 19386  002D22  D10A               	goto	i2l263
 19387  002D24                     i2l9378:
 19388                           
 19389                           ;UI.c: 267: if(up){
 19390  002D24  5075               	movf	_up,w,c
 19391  002D26  1076               	iorwf	_up+1,w,c
 19392  002D28  B4D8               	btfsc	status,2,c
 19393  002D2A  D003               	goto	i2l9382
 19394                           
 19395                           ;UI.c: 268: change_state_to_menu_22();
 19396  002D2C  ECB9  F029         	call	i2_change_state_to_menu_22	;wreg free
 19397                           
 19398                           ;UI.c: 269: }
 19399  002D30  D103               	goto	i2l263
 19400  002D32                     i2l9382:
 19401                           
 19402                           ;UI.c: 270: else if(down){
 19403  002D32  505D               	movf	_down,w,c
 19404  002D34  105E               	iorwf	_down+1,w,c
 19405  002D36  B4D8               	btfsc	status,2,c
 19406  002D38  D003               	goto	i2l9386
 19407                           
 19408                           ;UI.c: 271: change_state_to_menu_11();
 19409  002D3A  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 19410                           
 19411                           ;UI.c: 272: }
 19412  002D3E  D0FC               	goto	i2l263
 19413  002D40                     i2l9386:
 19414                           
 19415                           ;UI.c: 273: else if(enter){
 19416  002D40  505F               	movf	_enter,w,c
 19417  002D42  1060               	iorwf	_enter+1,w,c
 19418  002D44  B4D8               	btfsc	status,2,c
 19419  002D46  D0F8               	goto	i2l263
 19420                           
 19421                           ;UI.c: 274: change_state_to_logs_11();
 19422  002D48  EC79  F02A         	call	_change_state_to_logs_11	;wreg free
 19423                           
 19424                           ;UI.c: 275: }
 19425                           ;UI.c: 276: break;
 19426  002D4C  D0F5               	goto	i2l263
 19427  002D4E                     i2l9390:
 19428                           
 19429                           ;UI.c: 279: if(up){
 19430  002D4E  5075               	movf	_up,w,c
 19431  002D50  1076               	iorwf	_up+1,w,c
 19432  002D52  B4D8               	btfsc	status,2,c
 19433  002D54  D003               	goto	i2l9394
 19434                           
 19435                           ;UI.c: 280: change_state_to_logs_34();
 19436  002D56  EC19  F02A         	call	_change_state_to_logs_34	;wreg free
 19437                           
 19438                           ;UI.c: 281: }
 19439  002D5A  D0EE               	goto	i2l263
 19440  002D5C                     i2l9394:
 19441                           
 19442                           ;UI.c: 282: else if(down){
 19443  002D5C  505D               	movf	_down,w,c
 19444  002D5E  105E               	iorwf	_down+1,w,c
 19445  002D60  B4D8               	btfsc	status,2,c
 19446  002D62  D003               	goto	i2l9398
 19447                           
 19448                           ;UI.c: 283: change_state_to_logs_12();
 19449  002D64  EC61  F02A         	call	_change_state_to_logs_12	;wreg free
 19450                           
 19451                           ;UI.c: 284: }
 19452  002D68  D0E7               	goto	i2l263
 19453  002D6A                     i2l9398:
 19454                           
 19455                           ;UI.c: 285: else if(enter){
 19456  002D6A  505F               	movf	_enter,w,c
 19457  002D6C  1060               	iorwf	_enter+1,w,c
 19458  002D6E  B4D8               	btfsc	status,2,c
 19459  002D70  D007               	goto	i2l9402
 19460                           
 19461                           ;UI.c: 286: dispLogs(1);
 19462  002D72  0E00               	movlw	0
 19463  002D74  6E13               	movwf	dispLogs@myLog+1,c
 19464  002D76  0E01               	movlw	1
 19465  002D78  6E12               	movwf	dispLogs@myLog,c
 19466  002D7A  EC4E  F02B         	call	_dispLogs	;wreg free
 19467                           
 19468                           ;UI.c: 287: }
 19469  002D7E  D0DC               	goto	i2l263
 19470  002D80                     i2l9402:
 19471                           
 19472                           ;UI.c: 288: else if(back){
 19473  002D80  505B               	movf	_back,w,c
 19474  002D82  105C               	iorwf	_back+1,w,c
 19475  002D84  B4D8               	btfsc	status,2,c
 19476  002D86  D0D8               	goto	i2l263
 19477                           
 19478                           ;UI.c: 289: change_state_to_menu_23();
 19479  002D88  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19480                           
 19481                           ;UI.c: 290: }
 19482                           ;UI.c: 291: break;
 19483  002D8C  D0D5               	goto	i2l263
 19484  002D8E                     i2l9406:
 19485                           
 19486                           ;UI.c: 294: if(up){
 19487  002D8E  5075               	movf	_up,w,c
 19488  002D90  1076               	iorwf	_up+1,w,c
 19489  002D92  B4D8               	btfsc	status,2,c
 19490  002D94  D003               	goto	i2l9410
 19491                           
 19492                           ;UI.c: 295: change_state_to_logs_11();
 19493  002D96  EC79  F02A         	call	_change_state_to_logs_11	;wreg free
 19494                           
 19495                           ;UI.c: 296: }
 19496  002D9A  D0CE               	goto	i2l263
 19497  002D9C                     i2l9410:
 19498                           
 19499                           ;UI.c: 297: else if(down){
 19500  002D9C  505D               	movf	_down,w,c
 19501  002D9E  105E               	iorwf	_down+1,w,c
 19502  002DA0  B4D8               	btfsc	status,2,c
 19503  002DA2  D003               	goto	i2l9414
 19504                           
 19505                           ;UI.c: 298: change_state_to_logs_23();
 19506  002DA4  ECA8  F02A         	call	_change_state_to_logs_23	;wreg free
 19507                           
 19508                           ;UI.c: 299: }
 19509  002DA8  D0C7               	goto	i2l263
 19510  002DAA                     i2l9414:
 19511                           
 19512                           ;UI.c: 300: else if(enter){
 19513  002DAA  505F               	movf	_enter,w,c
 19514  002DAC  1060               	iorwf	_enter+1,w,c
 19515  002DAE  B4D8               	btfsc	status,2,c
 19516  002DB0  D007               	goto	i2l9418
 19517                           
 19518                           ;UI.c: 301: dispLogs(2);
 19519  002DB2  0E00               	movlw	0
 19520  002DB4  6E13               	movwf	dispLogs@myLog+1,c
 19521  002DB6  0E02               	movlw	2
 19522  002DB8  6E12               	movwf	dispLogs@myLog,c
 19523  002DBA  EC4E  F02B         	call	_dispLogs	;wreg free
 19524                           
 19525                           ;UI.c: 302: }
 19526  002DBE  D0BC               	goto	i2l263
 19527  002DC0                     i2l9418:
 19528                           
 19529                           ;UI.c: 303: else if(back){
 19530  002DC0  505B               	movf	_back,w,c
 19531  002DC2  105C               	iorwf	_back+1,w,c
 19532  002DC4  B4D8               	btfsc	status,2,c
 19533  002DC6  D0B8               	goto	i2l263
 19534                           
 19535                           ;UI.c: 304: change_state_to_menu_23();
 19536  002DC8  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19537                           
 19538                           ;UI.c: 305: }
 19539                           ;UI.c: 306: break;
 19540  002DCC  D0B5               	goto	i2l263
 19541  002DCE                     i2l9422:
 19542                           
 19543                           ;UI.c: 309: if(up){
 19544  002DCE  5075               	movf	_up,w,c
 19545  002DD0  1076               	iorwf	_up+1,w,c
 19546  002DD2  B4D8               	btfsc	status,2,c
 19547  002DD4  D003               	goto	i2l9426
 19548                           
 19549                           ;UI.c: 310: change_state_to_logs_11();
 19550  002DD6  EC79  F02A         	call	_change_state_to_logs_11	;wreg free
 19551                           
 19552                           ;UI.c: 311: }
 19553  002DDA  D0AE               	goto	i2l263
 19554  002DDC                     i2l9426:
 19555                           
 19556                           ;UI.c: 312: else if(down){
 19557  002DDC  505D               	movf	_down,w,c
 19558  002DDE  105E               	iorwf	_down+1,w,c
 19559  002DE0  B4D8               	btfsc	status,2,c
 19560  002DE2  D003               	goto	i2l9430
 19561                           
 19562                           ;UI.c: 313: change_state_to_logs_23();
 19563  002DE4  ECA8  F02A         	call	_change_state_to_logs_23	;wreg free
 19564                           
 19565                           ;UI.c: 314: }
 19566  002DE8  D0A7               	goto	i2l263
 19567  002DEA                     i2l9430:
 19568                           
 19569                           ;UI.c: 315: else if(enter){
 19570  002DEA  505F               	movf	_enter,w,c
 19571  002DEC  1060               	iorwf	_enter+1,w,c
 19572  002DEE  B4D8               	btfsc	status,2,c
 19573  002DF0  D007               	goto	i2l9434
 19574                           
 19575                           ;UI.c: 316: dispLogs(2);
 19576  002DF2  0E00               	movlw	0
 19577  002DF4  6E13               	movwf	dispLogs@myLog+1,c
 19578  002DF6  0E02               	movlw	2
 19579  002DF8  6E12               	movwf	dispLogs@myLog,c
 19580  002DFA  EC4E  F02B         	call	_dispLogs	;wreg free
 19581                           
 19582                           ;UI.c: 317: }
 19583  002DFE  D09C               	goto	i2l263
 19584  002E00                     i2l9434:
 19585                           
 19586                           ;UI.c: 318: else if(back){
 19587  002E00  505B               	movf	_back,w,c
 19588  002E02  105C               	iorwf	_back+1,w,c
 19589  002E04  B4D8               	btfsc	status,2,c
 19590  002E06  D098               	goto	i2l263
 19591                           
 19592                           ;UI.c: 319: change_state_to_menu_23();
 19593  002E08  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19594                           
 19595                           ;UI.c: 320: }
 19596                           ;UI.c: 321: break;
 19597  002E0C  D095               	goto	i2l263
 19598  002E0E                     i2l9438:
 19599                           
 19600                           ;UI.c: 324: if(up){
 19601  002E0E  5075               	movf	_up,w,c
 19602  002E10  1076               	iorwf	_up+1,w,c
 19603  002E12  B4D8               	btfsc	status,2,c
 19604  002E14  D003               	goto	i2l9442
 19605                           
 19606                           ;UI.c: 325: change_state_to_logs_22();
 19607  002E16  EC49  F02A         	call	_change_state_to_logs_22	;wreg free
 19608                           
 19609                           ;UI.c: 326: }
 19610  002E1A  D08E               	goto	i2l263
 19611  002E1C                     i2l9442:
 19612                           
 19613                           ;UI.c: 327: else if(down){
 19614  002E1C  505D               	movf	_down,w,c
 19615  002E1E  105E               	iorwf	_down+1,w,c
 19616  002E20  B4D8               	btfsc	status,2,c
 19617  002E22  D003               	goto	i2l9446
 19618                           
 19619                           ;UI.c: 328: change_state_to_logs_34();
 19620  002E24  EC19  F02A         	call	_change_state_to_logs_34	;wreg free
 19621                           
 19622                           ;UI.c: 329: }
 19623  002E28  D087               	goto	i2l263
 19624  002E2A                     i2l9446:
 19625                           
 19626                           ;UI.c: 330: else if(enter){
 19627  002E2A  505F               	movf	_enter,w,c
 19628  002E2C  1060               	iorwf	_enter+1,w,c
 19629  002E2E  B4D8               	btfsc	status,2,c
 19630  002E30  D007               	goto	i2l9450
 19631                           
 19632                           ;UI.c: 331: dispLogs(3);
 19633  002E32  0E00               	movlw	0
 19634  002E34  6E13               	movwf	dispLogs@myLog+1,c
 19635  002E36  0E03               	movlw	3
 19636  002E38  6E12               	movwf	dispLogs@myLog,c
 19637  002E3A  EC4E  F02B         	call	_dispLogs	;wreg free
 19638                           
 19639                           ;UI.c: 332: }
 19640  002E3E  D07C               	goto	i2l263
 19641  002E40                     i2l9450:
 19642                           
 19643                           ;UI.c: 333: else if(back){
 19644  002E40  505B               	movf	_back,w,c
 19645  002E42  105C               	iorwf	_back+1,w,c
 19646  002E44  B4D8               	btfsc	status,2,c
 19647  002E46  D078               	goto	i2l263
 19648                           
 19649                           ;UI.c: 334: change_state_to_menu_23();
 19650  002E48  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19651                           
 19652                           ;UI.c: 335: }
 19653                           ;UI.c: 336: break;
 19654  002E4C  D075               	goto	i2l263
 19655  002E4E                     i2l9454:
 19656                           
 19657                           ;UI.c: 339: if(up){
 19658  002E4E  5075               	movf	_up,w,c
 19659  002E50  1076               	iorwf	_up+1,w,c
 19660  002E52  B4D8               	btfsc	status,2,c
 19661  002E54  D003               	goto	i2l9458
 19662                           
 19663                           ;UI.c: 340: change_state_to_logs_22();
 19664  002E56  EC49  F02A         	call	_change_state_to_logs_22	;wreg free
 19665                           
 19666                           ;UI.c: 341: }
 19667  002E5A  D06E               	goto	i2l263
 19668  002E5C                     i2l9458:
 19669                           
 19670                           ;UI.c: 342: else if(down){
 19671  002E5C  505D               	movf	_down,w,c
 19672  002E5E  105E               	iorwf	_down+1,w,c
 19673  002E60  B4D8               	btfsc	status,2,c
 19674  002E62  D003               	goto	i2l9462
 19675                           
 19676                           ;UI.c: 343: change_state_to_logs_34();
 19677  002E64  EC19  F02A         	call	_change_state_to_logs_34	;wreg free
 19678                           
 19679                           ;UI.c: 344: }
 19680  002E68  D067               	goto	i2l263
 19681  002E6A                     i2l9462:
 19682                           
 19683                           ;UI.c: 345: else if(enter){
 19684  002E6A  505F               	movf	_enter,w,c
 19685  002E6C  1060               	iorwf	_enter+1,w,c
 19686  002E6E  B4D8               	btfsc	status,2,c
 19687  002E70  D007               	goto	i2l9466
 19688                           
 19689                           ;UI.c: 346: dispLogs(3);
 19690  002E72  0E00               	movlw	0
 19691  002E74  6E13               	movwf	dispLogs@myLog+1,c
 19692  002E76  0E03               	movlw	3
 19693  002E78  6E12               	movwf	dispLogs@myLog,c
 19694  002E7A  EC4E  F02B         	call	_dispLogs	;wreg free
 19695                           
 19696                           ;UI.c: 347: }
 19697  002E7E  D05C               	goto	i2l263
 19698  002E80                     i2l9466:
 19699                           
 19700                           ;UI.c: 348: else if(back){
 19701  002E80  505B               	movf	_back,w,c
 19702  002E82  105C               	iorwf	_back+1,w,c
 19703  002E84  B4D8               	btfsc	status,2,c
 19704  002E86  D058               	goto	i2l263
 19705                           
 19706                           ;UI.c: 349: change_state_to_menu_23();
 19707  002E88  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19708                           
 19709                           ;UI.c: 350: }
 19710                           ;UI.c: 351: break;
 19711  002E8C  D055               	goto	i2l263
 19712  002E8E                     i2l9470:
 19713                           
 19714                           ;UI.c: 354: if(up){
 19715  002E8E  5075               	movf	_up,w,c
 19716  002E90  1076               	iorwf	_up+1,w,c
 19717  002E92  B4D8               	btfsc	status,2,c
 19718  002E94  D003               	goto	i2l9474
 19719                           
 19720                           ;UI.c: 355: change_state_to_logs_33();
 19721  002E96  EC31  F02A         	call	_change_state_to_logs_33	;wreg free
 19722                           
 19723                           ;UI.c: 356: }
 19724  002E9A  D04E               	goto	i2l263
 19725  002E9C                     i2l9474:
 19726                           
 19727                           ;UI.c: 357: else if(down){
 19728  002E9C  505D               	movf	_down,w,c
 19729  002E9E  105E               	iorwf	_down+1,w,c
 19730  002EA0  B4D8               	btfsc	status,2,c
 19731  002EA2  D003               	goto	i2l9478
 19732                           
 19733                           ;UI.c: 358: change_state_to_logs_11();
 19734  002EA4  EC79  F02A         	call	_change_state_to_logs_11	;wreg free
 19735                           
 19736                           ;UI.c: 359: }
 19737  002EA8  D047               	goto	i2l263
 19738  002EAA                     i2l9478:
 19739                           
 19740                           ;UI.c: 360: else if(enter){
 19741  002EAA  505F               	movf	_enter,w,c
 19742  002EAC  1060               	iorwf	_enter+1,w,c
 19743  002EAE  B4D8               	btfsc	status,2,c
 19744  002EB0  D007               	goto	i2l9482
 19745                           
 19746                           ;UI.c: 361: dispLogs(4);
 19747  002EB2  0E00               	movlw	0
 19748  002EB4  6E13               	movwf	dispLogs@myLog+1,c
 19749  002EB6  0E04               	movlw	4
 19750  002EB8  6E12               	movwf	dispLogs@myLog,c
 19751  002EBA  EC4E  F02B         	call	_dispLogs	;wreg free
 19752                           
 19753                           ;UI.c: 362: }
 19754  002EBE  D03C               	goto	i2l263
 19755  002EC0                     i2l9482:
 19756                           
 19757                           ;UI.c: 363: else if(back){
 19758  002EC0  505B               	movf	_back,w,c
 19759  002EC2  105C               	iorwf	_back+1,w,c
 19760  002EC4  B4D8               	btfsc	status,2,c
 19761  002EC6  D038               	goto	i2l263
 19762                           
 19763                           ;UI.c: 364: change_state_to_menu_23();
 19764  002EC8  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 19765                           
 19766                           ;UI.c: 370: }
 19767                           
 19768                           ;UI.c: 369: break;
 19769                           
 19770                           ;UI.c: 368: default:
 19771                           
 19772                           ;UI.c: 365: }
 19773                           ;UI.c: 366: break;
 19774  002ECC  D035               	goto	i2l263
 19775  002ECE                     i2l9488:
 19776  002ECE  C0EC  F043         	movff	_cur_state,??_updateMenu
 19777  002ED2  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19778                           
 19779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19780                           ; Switch size 1, requested type "space"
 19781                           ; Number of cases is 3, Range of values is 0 to 4
 19782                           ; switch strategies available:
 19783                           ; Name         Instructions Cycles
 19784                           ; simple_byte           10     6 (average)
 19785                           ;	Chosen strategy is simple_byte
 19786  002ED6  5044               	movf	??_updateMenu+1,w,c
 19787  002ED8  0A00               	xorlw	0	; case 0
 19788  002EDA  B4D8               	btfsc	status,2,c
 19789  002EDC  D007               	goto	i2l10452
 19790  002EDE  0A03               	xorlw	3	; case 3
 19791  002EE0  B4D8               	btfsc	status,2,c
 19792  002EE2  D015               	goto	i2l10454
 19793  002EE4  0A07               	xorlw	7	; case 4
 19794  002EE6  B4D8               	btfsc	status,2,c
 19795  002EE8  D020               	goto	i2l10456
 19796  002EEA  D026               	goto	i2l263
 19797  002EEC                     i2l10452:
 19798                           
 19799                           ; Switch size 1, requested type "space"
 19800                           ; Number of cases is 5, Range of values is 0 to 23
 19801                           ; switch strategies available:
 19802                           ; Name         Instructions Cycles
 19803                           ; simple_byte           16     9 (average)
 19804                           ;	Chosen strategy is simple_byte
 19805  002EEC  5043               	movf	??_updateMenu,w,c
 19806  002EEE  0A00               	xorlw	0	; case 0
 19807  002EF0  B4D8               	btfsc	status,2,c
 19808  002EF2  D6DC               	goto	i2l9340
 19809  002EF4  0A0B               	xorlw	11	; case 11
 19810  002EF6  B4D8               	btfsc	status,2,c
 19811  002EF8  D6DC               	goto	i2l9342
 19812  002EFA  0A07               	xorlw	7	; case 12
 19813  002EFC  B4D8               	btfsc	status,2,c
 19814  002EFE  D6EE               	goto	i2l9354
 19815  002F00  0A1A               	xorlw	26	; case 22
 19816  002F02  B4D8               	btfsc	status,2,c
 19817  002F04  D6F9               	goto	i2l9366
 19818  002F06  0A01               	xorlw	1	; case 23
 19819  002F08  B4D8               	btfsc	status,2,c
 19820  002F0A  D70C               	goto	i2l9378
 19821  002F0C  D015               	goto	i2l263
 19822  002F0E                     i2l10454:
 19823                           
 19824                           ; Switch size 1, requested type "space"
 19825                           ; Number of cases is 4, Range of values is 243 to 255
 19826                           ; switch strategies available:
 19827                           ; Name         Instructions Cycles
 19828                           ; simple_byte           13     7 (average)
 19829                           ;	Chosen strategy is simple_byte
 19830  002F0E  5043               	movf	??_updateMenu,w,c
 19831  002F10  0AF3               	xorlw	243	; case 243
 19832  002F12  B4D8               	btfsc	status,2,c
 19833  002F14  D71C               	goto	i2l9390
 19834  002F16  0A07               	xorlw	7	; case 244
 19835  002F18  B4D8               	btfsc	status,2,c
 19836  002F1A  D739               	goto	i2l9406
 19837  002F1C  0A0A               	xorlw	10	; case 254
 19838  002F1E  B4D8               	btfsc	status,2,c
 19839  002F20  D756               	goto	i2l9422
 19840  002F22  0A01               	xorlw	1	; case 255
 19841  002F24  B4D8               	btfsc	status,2,c
 19842  002F26  D773               	goto	i2l9438
 19843  002F28  D007               	goto	i2l263
 19844  002F2A                     i2l10456:
 19845                           
 19846                           ; Switch size 1, requested type "space"
 19847                           ; Number of cases is 2, Range of values is 9 to 10
 19848                           ; switch strategies available:
 19849                           ; Name         Instructions Cycles
 19850                           ; simple_byte            7     4 (average)
 19851                           ;	Chosen strategy is simple_byte
 19852  002F2A  5043               	movf	??_updateMenu,w,c
 19853  002F2C  0A09               	xorlw	9	; case 9
 19854  002F2E  B4D8               	btfsc	status,2,c
 19855  002F30  D78E               	goto	i2l9454
 19856  002F32  0A03               	xorlw	3	; case 10
 19857  002F34  B4D8               	btfsc	status,2,c
 19858  002F36  D7AB               	goto	i2l9470
 19859  002F38                     i2l263:
 19860                           
 19861                           ;UI.c: 371: }
 19862                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19863  002F38  8EF2               	bsf	intcon,7,c	;volatile
 19864  002F3A  0012               	return		;funcret
 19865  002F3C                     __end_of_updateMenu:
 19866                           	opt stack 0
 19867                           pclatu	equ	0xFFB
 19868                           pclath	equ	0xFFA
 19869                           tblptru	equ	0xFF8
 19870                           tblptrh	equ	0xFF7
 19871                           tblptrl	equ	0xFF6
 19872                           tablat	equ	0xFF5
 19873                           prodh	equ	0xFF4
 19874                           prodl	equ	0xFF3
 19875                           intcon	equ	0xFF2
 19876                           intcon2	equ	0xFF1
 19877                           intcon3	equ	0xFF0
 19878                           indf0	equ	0xFEF
 19879                           postinc0	equ	0xFEE
 19880                           fsr0h	equ	0xFEA
 19881                           fsr0l	equ	0xFE9
 19882                           wreg	equ	0xFE8
 19883                           postdec1	equ	0xFE5
 19884                           fsr1h	equ	0xFE2
 19885                           fsr1l	equ	0xFE1
 19886                           indf2	equ	0xFDF
 19887                           postinc2	equ	0xFDE
 19888                           postdec2	equ	0xFDD
 19889                           fsr2h	equ	0xFDA
 19890                           fsr2l	equ	0xFD9
 19891                           status	equ	0xFD8
 19892                           
 19893 ;; *************** function i2_change_state_to_menu_start *****************
 19894 ;; Defined at:
 19895 ;;		line 477 in file "UI.c"
 19896 ;; Parameters:    Size  Location     Type
 19897 ;;		None
 19898 ;; Auto vars:     Size  Location     Type
 19899 ;;		None
 19900 ;; Return value:  Size  Location     Type
 19901 ;;                  1    wreg      void 
 19902 ;; Registers used:
 19903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19904 ;; Tracked objects:
 19905 ;;		On entry : 0/0
 19906 ;;		On exit  : 0/0
 19907 ;;		Unchanged: 0/0
 19908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;Total ram usage:        0 bytes
 19914 ;; Hardware stack levels used:    1
 19915 ;; Hardware stack levels required when called:    4
 19916 ;; This function calls:
 19917 ;;		i2_lcdInst
 19918 ;;		i2_printRTC
 19919 ;;		i2_printf
 19920 ;; This function is called by:
 19921 ;;		_updateMenu
 19922 ;;		_handler
 19923 ;; This function uses a non-reentrant model
 19924 ;;
 19925                           
 19926                           	psect	text63
 19927  005628                     __ptext63:
 19928                           	opt stack 0
 19929  005628                     i2_change_state_to_menu_start:
 19930                           	opt stack 19
 19931                           
 19932                           ;UI.c: 478: cur_state = 0;
 19933                           
 19934                           ;incstack = 0
 19935  005628  0E00               	movlw	0
 19936  00562A  0100               	movlb	0	; () banked
 19937  00562C  6FED               	movwf	(_cur_state+1)& (0+255),b
 19938  00562E  0E00               	movlw	0
 19939  005630  6FEC               	movwf	_cur_state& (0+255),b
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;UI.c: 480: lcdInst(0b10000000);;
 19943  005632  0E80               	movlw	128
 19944  005634  ECED  F02B         	call	i2_lcdInst
 19945                           
 19946                           ;UI.c: 481: printRTC();
 19947  005638  EC2A  F01A         	call	i2_printRTC	;wreg free
 19948                           
 19949                           ;UI.c: 482: lcdInst(0b11000000);;
 19950  00563C  0EC0               	movlw	192
 19951  00563E  ECED  F02B         	call	i2_lcdInst
 19952                           
 19953                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19954  005642  0E01               	movlw	low STR_30
 19955  005644  6E0D               	movwf	i2printf@f,c
 19956  005646  0EFE               	movlw	high STR_30
 19957  005648  6E0E               	movwf	i2printf@f+1,c
 19958  00564A  ECA3  F011         	call	i2_printf	;wreg free
 19959  00564E  0012               	return		;funcret
 19960  005650                     __end_ofi2_change_state_to_menu_start:
 19961                           	opt stack 0
 19962                           pclatu	equ	0xFFB
 19963                           pclath	equ	0xFFA
 19964                           tblptru	equ	0xFF8
 19965                           tblptrh	equ	0xFF7
 19966                           tblptrl	equ	0xFF6
 19967                           tablat	equ	0xFF5
 19968                           prodh	equ	0xFF4
 19969                           prodl	equ	0xFF3
 19970                           intcon	equ	0xFF2
 19971                           intcon2	equ	0xFF1
 19972                           intcon3	equ	0xFF0
 19973                           indf0	equ	0xFEF
 19974                           postinc0	equ	0xFEE
 19975                           fsr0h	equ	0xFEA
 19976                           fsr0l	equ	0xFE9
 19977                           wreg	equ	0xFE8
 19978                           postdec1	equ	0xFE5
 19979                           fsr1h	equ	0xFE2
 19980                           fsr1l	equ	0xFE1
 19981                           indf2	equ	0xFDF
 19982                           postinc2	equ	0xFDE
 19983                           postdec2	equ	0xFDD
 19984                           fsr2h	equ	0xFDA
 19985                           fsr2l	equ	0xFD9
 19986                           status	equ	0xFD8
 19987                           
 19988 ;; *************** function i2_printRTC *****************
 19989 ;; Defined at:
 19990 ;;		line 63 in file "RTC.c"
 19991 ;; Parameters:    Size  Location     Type
 19992 ;;		None
 19993 ;; Auto vars:     Size  Location     Type
 19994 ;;  printRTC       14   44[COMRAM] int [7]
 19995 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19996 ;;  printRTC        2   64[COMRAM] int 
 19997 ;;  printRTC        2   58[COMRAM] int 
 19998 ;; Return value:  Size  Location     Type
 19999 ;;                  1    wreg      void 
 20000 ;; Registers used:
 20001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20002 ;; Tracked objects:
 20003 ;;		On entry : 0/0
 20004 ;;		On exit  : 0/0
 20005 ;;		Unchanged: 0/0
 20006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20008 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;Total ram usage:       25 bytes
 20012 ;; Hardware stack levels used:    1
 20013 ;; Hardware stack levels required when called:    3
 20014 ;; This function calls:
 20015 ;;		i2_getRTC
 20016 ;;		i2_lcdInst
 20017 ;;		i2_printf
 20018 ;;		i2_strcpy
 20019 ;; This function is called by:
 20020 ;;		i2_change_state_to_menu_start
 20021 ;; This function uses a non-reentrant model
 20022 ;;
 20023                           
 20024                           	psect	text64
 20025  003454                     __ptext64:
 20026                           	opt stack 0
 20027  003454                     i2_printRTC:
 20028                           	opt stack 19
 20029                           
 20030                           ;RTC.c: 64: getRTC();
 20031                           
 20032                           ;incstack = 0
 20033  003454  EC41  F026         	call	i2_getRTC	;wreg free
 20034                           
 20035                           ;RTC.c: 65: char month[] = "MMM";
 20036  003458  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 20037  00345C  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 20038  003460  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 20039  003464  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 20040                           
 20041                           ;RTC.c: 66: int INT_time[7];
 20042                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20043  003468  0E00               	movlw	0
 20044  00346A  6E42               	movwf	i2printRTC@i+1,c
 20045  00346C  0E00               	movlw	0
 20046  00346E  6E41               	movwf	i2printRTC@i,c
 20047  003470  BE42               	btfsc	i2printRTC@i+1,7,c
 20048  003472  D006               	goto	i2l7288
 20049  003474  5042               	movf	i2printRTC@i+1,w,c
 20050  003476  E135               	bnz	i2l620
 20051  003478  0E07               	movlw	7
 20052  00347A  5C41               	subwf	i2printRTC@i,w,c
 20053  00347C  B0D8               	btfsc	status,0,c
 20054  00347E  D031               	goto	i2l620
 20055  003480                     i2l7288:
 20056                           
 20057                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20058  003480  0E1C               	movlw	low _time
 20059  003482  2441               	addwf	i2printRTC@i,w,c
 20060  003484  6ED9               	movwf	fsr2l,c
 20061  003486  0E01               	movlw	high _time
 20062  003488  2042               	addwfc	i2printRTC@i+1,w,c
 20063  00348A  6EDA               	movwf	fsr2h,c
 20064  00348C  50DF               	movf	indf2,w,c
 20065  00348E  6E2A               	movwf	??i2_printRTC& (0+255),c
 20066  003490  3A2A               	swapf	??i2_printRTC,f,c
 20067  003492  0E0F               	movlw	15
 20068  003494  162A               	andwf	??i2_printRTC,f,c
 20069  003496  0E0F               	movlw	15
 20070  003498  162A               	andwf	??i2_printRTC,f,c
 20071  00349A  502A               	movf	??i2_printRTC,w,c
 20072  00349C  0D0A               	mullw	10
 20073  00349E  0E1C               	movlw	low _time
 20074  0034A0  2441               	addwf	i2printRTC@i,w,c
 20075  0034A2  6ED9               	movwf	fsr2l,c
 20076  0034A4  0E01               	movlw	high _time
 20077  0034A6  2042               	addwfc	i2printRTC@i+1,w,c
 20078  0034A8  6EDA               	movwf	fsr2h,c
 20079  0034AA  50DF               	movf	indf2,w,c
 20080  0034AC  0B0F               	andlw	15
 20081  0034AE  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20082  0034B0  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20083  0034B2  50F3               	movf	prodl,w,c
 20084  0034B4  262B               	addwf	??i2_printRTC+1,f,c
 20085  0034B6  50F4               	movf	prodh,w,c
 20086  0034B8  222C               	addwfc	??i2_printRTC+2,f,c
 20087  0034BA  90D8               	bcf	status,0,c
 20088  0034BC  3441               	rlcf	i2printRTC@i,w,c
 20089  0034BE  6ED9               	movwf	fsr2l,c
 20090  0034C0  3442               	rlcf	i2printRTC@i+1,w,c
 20091  0034C2  6EDA               	movwf	fsr2h,c
 20092  0034C4  0E2D               	movlw	low i2printRTC@INT_time
 20093  0034C6  26D9               	addwf	fsr2l,f,c
 20094  0034C8  0E00               	movlw	high i2printRTC@INT_time
 20095  0034CA  22DA               	addwfc	fsr2h,f,c
 20096  0034CC  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20097  0034D0  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20098  0034D4  4A41               	infsnz	i2printRTC@i,f,c
 20099  0034D6  2A42               	incf	i2printRTC@i+1,f,c
 20100  0034D8  BE42               	btfsc	i2printRTC@i+1,7,c
 20101  0034DA  D7D2               	goto	i2l7288
 20102  0034DC  5042               	movf	i2printRTC@i+1,w,c
 20103  0034DE  E101               	bnz	i2u586_40
 20104  0034E0  D7CB               	goto	L20
 20105  0034E2                     i2u586_40:
 20106  0034E2                     i2l620:
 20107                           
 20108                           ;RTC.c: 69: }
 20109                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20110  0034E2  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20111  0034E6  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20112                           
 20113                           ;RTC.c: 72: switch(RTC_month){
 20114  0034EA  D084               	goto	i2l7320
 20115  0034EC                     i2l7294:
 20116                           
 20117                           ;RTC.c: 74: strcpy(month, "JAN");
 20118  0034EC  0E3D               	movlw	low i2printRTC@month
 20119  0034EE  6E01               	movwf	i2strcpy@to,c
 20120  0034F0  0E00               	movlw	high i2printRTC@month
 20121  0034F2  6E02               	movwf	i2strcpy@to+1,c
 20122  0034F4  0EDA               	movlw	low STR_8
 20123  0034F6  6E03               	movwf	i2strcpy@from,c
 20124  0034F8  0EFF               	movlw	high STR_8
 20125  0034FA  6E04               	movwf	i2strcpy@from+1,c
 20126  0034FC  EC88  F029         	call	i2_strcpy	;wreg free
 20127                           
 20128                           ;RTC.c: 75: break;
 20129  003500  D0A6               	goto	i2l7322
 20130  003502                     i2l7296:
 20131                           
 20132                           ;RTC.c: 77: strcpy(month, "FEB");
 20133  003502  0E3D               	movlw	low i2printRTC@month
 20134  003504  6E01               	movwf	i2strcpy@to,c
 20135  003506  0E00               	movlw	high i2printRTC@month
 20136  003508  6E02               	movwf	i2strcpy@to+1,c
 20137  00350A  0ECA               	movlw	low STR_9
 20138  00350C  6E03               	movwf	i2strcpy@from,c
 20139  00350E  0EFF               	movlw	high STR_9
 20140  003510  6E04               	movwf	i2strcpy@from+1,c
 20141  003512  EC88  F029         	call	i2_strcpy	;wreg free
 20142                           
 20143                           ;RTC.c: 78: break;
 20144  003516  D09B               	goto	i2l7322
 20145  003518                     i2l7298:
 20146                           
 20147                           ;RTC.c: 80: strcpy(month, "MAR");
 20148  003518  0E3D               	movlw	low i2printRTC@month
 20149  00351A  6E01               	movwf	i2strcpy@to,c
 20150  00351C  0E00               	movlw	high i2printRTC@month
 20151  00351E  6E02               	movwf	i2strcpy@to+1,c
 20152  003520  0EE6               	movlw	low STR_10
 20153  003522  6E03               	movwf	i2strcpy@from,c
 20154  003524  0EFF               	movlw	high STR_10
 20155  003526  6E04               	movwf	i2strcpy@from+1,c
 20156  003528  EC88  F029         	call	i2_strcpy	;wreg free
 20157                           
 20158                           ;RTC.c: 81: break;
 20159  00352C  D090               	goto	i2l7322
 20160  00352E                     i2l7300:
 20161                           
 20162                           ;RTC.c: 83: strcpy(month, "APR");
 20163  00352E  0E3D               	movlw	low i2printRTC@month
 20164  003530  6E01               	movwf	i2strcpy@to,c
 20165  003532  0E00               	movlw	high i2printRTC@month
 20166  003534  6E02               	movwf	i2strcpy@to+1,c
 20167  003536  0EEA               	movlw	low STR_11
 20168  003538  6E03               	movwf	i2strcpy@from,c
 20169  00353A  0EFF               	movlw	high STR_11
 20170  00353C  6E04               	movwf	i2strcpy@from+1,c
 20171  00353E  EC88  F029         	call	i2_strcpy	;wreg free
 20172                           
 20173                           ;RTC.c: 84: break;
 20174  003542  D085               	goto	i2l7322
 20175  003544                     i2l7302:
 20176                           
 20177                           ;RTC.c: 86: strcpy(month, "MAY");
 20178  003544  0E3D               	movlw	low i2printRTC@month
 20179  003546  6E01               	movwf	i2strcpy@to,c
 20180  003548  0E00               	movlw	high i2printRTC@month
 20181  00354A  6E02               	movwf	i2strcpy@to+1,c
 20182  00354C  0EFA               	movlw	low STR_12
 20183  00354E  6E03               	movwf	i2strcpy@from,c
 20184  003550  0EFF               	movlw	high STR_12
 20185  003552  6E04               	movwf	i2strcpy@from+1,c
 20186  003554  EC88  F029         	call	i2_strcpy	;wreg free
 20187                           
 20188                           ;RTC.c: 87: break;
 20189  003558  D07A               	goto	i2l7322
 20190  00355A                     i2l7304:
 20191                           
 20192                           ;RTC.c: 89: strcpy(month, "JUN");
 20193  00355A  0E3D               	movlw	low i2printRTC@month
 20194  00355C  6E01               	movwf	i2strcpy@to,c
 20195  00355E  0E00               	movlw	high i2printRTC@month
 20196  003560  6E02               	movwf	i2strcpy@to+1,c
 20197  003562  0EDE               	movlw	low STR_13
 20198  003564  6E03               	movwf	i2strcpy@from,c
 20199  003566  0EFF               	movlw	high STR_13
 20200  003568  6E04               	movwf	i2strcpy@from+1,c
 20201  00356A  EC88  F029         	call	i2_strcpy	;wreg free
 20202                           
 20203                           ;RTC.c: 90: break;
 20204  00356E  D06F               	goto	i2l7322
 20205  003570                     i2l7306:
 20206                           
 20207                           ;RTC.c: 92: strcpy(month, "JUL");
 20208  003570  0E3D               	movlw	low i2printRTC@month
 20209  003572  6E01               	movwf	i2strcpy@to,c
 20210  003574  0E00               	movlw	high i2printRTC@month
 20211  003576  6E02               	movwf	i2strcpy@to+1,c
 20212  003578  0ED6               	movlw	low STR_14
 20213  00357A  6E03               	movwf	i2strcpy@from,c
 20214  00357C  0EFF               	movlw	high STR_14
 20215  00357E  6E04               	movwf	i2strcpy@from+1,c
 20216  003580  EC88  F029         	call	i2_strcpy	;wreg free
 20217                           
 20218                           ;RTC.c: 93: break;
 20219  003584  D064               	goto	i2l7322
 20220  003586                     i2l7308:
 20221                           
 20222                           ;RTC.c: 95: strcpy(month, "AUG");
 20223  003586  0E3D               	movlw	low i2printRTC@month
 20224  003588  6E01               	movwf	i2strcpy@to,c
 20225  00358A  0E00               	movlw	high i2printRTC@month
 20226  00358C  6E02               	movwf	i2strcpy@to+1,c
 20227  00358E  0ED2               	movlw	low STR_15
 20228  003590  6E03               	movwf	i2strcpy@from,c
 20229  003592  0EFF               	movlw	high STR_15
 20230  003594  6E04               	movwf	i2strcpy@from+1,c
 20231  003596  EC88  F029         	call	i2_strcpy	;wreg free
 20232                           
 20233                           ;RTC.c: 96: break;
 20234  00359A  D059               	goto	i2l7322
 20235  00359C                     i2l7310:
 20236                           
 20237                           ;RTC.c: 98: strcpy(month, "SEP");
 20238  00359C  0E3D               	movlw	low i2printRTC@month
 20239  00359E  6E01               	movwf	i2strcpy@to,c
 20240  0035A0  0E00               	movlw	high i2printRTC@month
 20241  0035A2  6E02               	movwf	i2strcpy@to+1,c
 20242  0035A4  0EE2               	movlw	low STR_16
 20243  0035A6  6E03               	movwf	i2strcpy@from,c
 20244  0035A8  0EFF               	movlw	high STR_16
 20245  0035AA  6E04               	movwf	i2strcpy@from+1,c
 20246  0035AC  EC88  F029         	call	i2_strcpy	;wreg free
 20247                           
 20248                           ;RTC.c: 99: break;
 20249  0035B0  D04E               	goto	i2l7322
 20250  0035B2                     i2l7312:
 20251                           
 20252                           ;RTC.c: 101: strcpy(month, "OCT");
 20253  0035B2  0E3D               	movlw	low i2printRTC@month
 20254  0035B4  6E01               	movwf	i2strcpy@to,c
 20255  0035B6  0E00               	movlw	high i2printRTC@month
 20256  0035B8  6E02               	movwf	i2strcpy@to+1,c
 20257  0035BA  0EF2               	movlw	low STR_17
 20258  0035BC  6E03               	movwf	i2strcpy@from,c
 20259  0035BE  0EFF               	movlw	high STR_17
 20260  0035C0  6E04               	movwf	i2strcpy@from+1,c
 20261  0035C2  EC88  F029         	call	i2_strcpy	;wreg free
 20262                           
 20263                           ;RTC.c: 102: break;
 20264  0035C6  D043               	goto	i2l7322
 20265  0035C8                     i2l7314:
 20266                           
 20267                           ;RTC.c: 104: strcpy(month, "NOV");
 20268  0035C8  0E3D               	movlw	low i2printRTC@month
 20269  0035CA  6E01               	movwf	i2strcpy@to,c
 20270  0035CC  0E00               	movlw	high i2printRTC@month
 20271  0035CE  6E02               	movwf	i2strcpy@to+1,c
 20272  0035D0  0EF6               	movlw	low STR_18
 20273  0035D2  6E03               	movwf	i2strcpy@from,c
 20274  0035D4  0EFF               	movlw	high STR_18
 20275  0035D6  6E04               	movwf	i2strcpy@from+1,c
 20276  0035D8  EC88  F029         	call	i2_strcpy	;wreg free
 20277                           
 20278                           ;RTC.c: 105: break;
 20279  0035DC  D038               	goto	i2l7322
 20280  0035DE                     i2l7316:
 20281                           
 20282                           ;RTC.c: 107: strcpy(month, "DEC");
 20283  0035DE  0E3D               	movlw	low i2printRTC@month
 20284  0035E0  6E01               	movwf	i2strcpy@to,c
 20285  0035E2  0E00               	movlw	high i2printRTC@month
 20286  0035E4  6E02               	movwf	i2strcpy@to+1,c
 20287  0035E6  0ECE               	movlw	low STR_19
 20288  0035E8  6E03               	movwf	i2strcpy@from,c
 20289  0035EA  0EFF               	movlw	high STR_19
 20290  0035EC  6E04               	movwf	i2strcpy@from+1,c
 20291  0035EE  EC88  F029         	call	i2_strcpy	;wreg free
 20292                           
 20293                           ;RTC.c: 109: }
 20294                           
 20295                           ;RTC.c: 108: break;
 20296  0035F2  D02D               	goto	i2l7322
 20297  0035F4                     i2l7320:
 20298  0035F4  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 20299  0035F8  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 20300                           
 20301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20302                           ; Switch size 1, requested type "space"
 20303                           ; Number of cases is 1, Range of values is 0 to 0
 20304                           ; switch strategies available:
 20305                           ; Name         Instructions Cycles
 20306                           ; simple_byte            4     3 (average)
 20307                           ;	Chosen strategy is simple_byte
 20308  0035FC  502B               	movf	??i2_printRTC+1,w,c
 20309  0035FE  0A00               	xorlw	0	; case 0
 20310  003600  A4D8               	btfss	status,2,c
 20311  003602  D025               	goto	i2l7322
 20312                           
 20313                           ; Switch size 1, requested type "space"
 20314                           ; Number of cases is 12, Range of values is 1 to 12
 20315                           ; switch strategies available:
 20316                           ; Name         Instructions Cycles
 20317                           ; simple_byte           37    19 (average)
 20318                           ;	Chosen strategy is simple_byte
 20319  003604  502A               	movf	??i2_printRTC,w,c
 20320  003606  0A01               	xorlw	1	; case 1
 20321  003608  B4D8               	btfsc	status,2,c
 20322  00360A  D770               	goto	i2l7294
 20323  00360C  0A03               	xorlw	3	; case 2
 20324  00360E  B4D8               	btfsc	status,2,c
 20325  003610  D778               	goto	i2l7296
 20326  003612  0A01               	xorlw	1	; case 3
 20327  003614  B4D8               	btfsc	status,2,c
 20328  003616  D780               	goto	i2l7298
 20329  003618  0A07               	xorlw	7	; case 4
 20330  00361A  B4D8               	btfsc	status,2,c
 20331  00361C  D788               	goto	i2l7300
 20332  00361E  0A01               	xorlw	1	; case 5
 20333  003620  B4D8               	btfsc	status,2,c
 20334  003622  D790               	goto	i2l7302
 20335  003624  0A03               	xorlw	3	; case 6
 20336  003626  B4D8               	btfsc	status,2,c
 20337  003628  D798               	goto	i2l7304
 20338  00362A  0A01               	xorlw	1	; case 7
 20339  00362C  B4D8               	btfsc	status,2,c
 20340  00362E  D7A0               	goto	i2l7306
 20341  003630  0A0F               	xorlw	15	; case 8
 20342  003632  B4D8               	btfsc	status,2,c
 20343  003634  D7A8               	goto	i2l7308
 20344  003636  0A01               	xorlw	1	; case 9
 20345  003638  B4D8               	btfsc	status,2,c
 20346  00363A  D7B0               	goto	i2l7310
 20347  00363C  0A03               	xorlw	3	; case 10
 20348  00363E  B4D8               	btfsc	status,2,c
 20349  003640  D7B8               	goto	i2l7312
 20350  003642  0A01               	xorlw	1	; case 11
 20351  003644  B4D8               	btfsc	status,2,c
 20352  003646  D7C0               	goto	i2l7314
 20353  003648  0A07               	xorlw	7	; case 12
 20354  00364A  B4D8               	btfsc	status,2,c
 20355  00364C  D7C8               	goto	i2l7316
 20356  00364E                     i2l7322:
 20357                           
 20358                           ;RTC.c: 110: lcdInst(0b10000000);;
 20359  00364E  0E80               	movlw	128
 20360  003650  ECED  F02B         	call	i2_lcdInst
 20361                           
 20362                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 20363  003654  0EBE               	movlw	low STR_21
 20364  003656  6E0D               	movwf	i2printf@f,c
 20365  003658  0EFA               	movlw	high STR_21
 20366  00365A  6E0E               	movwf	i2printf@f+1,c
 20367  00365C  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 20368  003660  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 20369  003664  0E3D               	movlw	low i2printRTC@month
 20370  003666  6E11               	movwf	?i2_printf+4,c
 20371  003668  0E00               	movlw	high i2printRTC@month
 20372  00366A  6E12               	movwf	?i2_printf+5,c
 20373  00366C  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 20374  003670  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 20375  003674  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 20376  003678  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 20377  00367C  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 20378  003680  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 20379  003684  ECA3  F011         	call	i2_printf	;wreg free
 20380  003688  0012               	return		;funcret
 20381  00368A                     __end_ofi2_printRTC:
 20382                           	opt stack 0
 20383                           pclatu	equ	0xFFB
 20384                           pclath	equ	0xFFA
 20385                           tblptru	equ	0xFF8
 20386                           tblptrh	equ	0xFF7
 20387                           tblptrl	equ	0xFF6
 20388                           tablat	equ	0xFF5
 20389                           prodh	equ	0xFF4
 20390                           prodl	equ	0xFF3
 20391                           intcon	equ	0xFF2
 20392                           intcon2	equ	0xFF1
 20393                           intcon3	equ	0xFF0
 20394                           indf0	equ	0xFEF
 20395                           postinc0	equ	0xFEE
 20396                           fsr0h	equ	0xFEA
 20397                           fsr0l	equ	0xFE9
 20398                           wreg	equ	0xFE8
 20399                           postdec1	equ	0xFE5
 20400                           fsr1h	equ	0xFE2
 20401                           fsr1l	equ	0xFE1
 20402                           indf2	equ	0xFDF
 20403                           postinc2	equ	0xFDE
 20404                           postdec2	equ	0xFDD
 20405                           fsr2h	equ	0xFDA
 20406                           fsr2l	equ	0xFD9
 20407                           status	equ	0xFD8
 20408                           
 20409 ;; *************** function i2_strcpy *****************
 20410 ;; Defined at:
 20411 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 20412 ;; Parameters:    Size  Location     Type
 20413 ;;  to              2    0[COMRAM] PTR unsigned char 
 20414 ;;		 -> printRTC@month(4), UI@month(4), 
 20415 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20416 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 20417 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 20418 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 20419 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 20420 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 20421 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 20422 ;;		 -> STR_8(4), 
 20423 ;; Auto vars:     Size  Location     Type
 20424 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 20425 ;;		 -> printRTC@month(4), UI@month(4), 
 20426 ;; Return value:  Size  Location     Type
 20427 ;;                  2    0[COMRAM] PTR unsigned char 
 20428 ;; Registers used:
 20429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20430 ;; Tracked objects:
 20431 ;;		On entry : 0/0
 20432 ;;		On exit  : 0/0
 20433 ;;		Unchanged: 0/0
 20434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20439 ;;Total ram usage:        6 bytes
 20440 ;; Hardware stack levels used:    1
 20441 ;; This function calls:
 20442 ;;		Nothing
 20443 ;; This function is called by:
 20444 ;;		i2_printRTC
 20445 ;; This function uses a non-reentrant model
 20446 ;;
 20447                           
 20448                           	psect	text65
 20449  005310                     __ptext65:
 20450                           	opt stack 0
 20451  005310                     i2_strcpy:
 20452                           	opt stack 21
 20453                           
 20454                           ;incstack = 0
 20455  005310  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 20456  005314  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 20457  005318  D004               	goto	i2l6926
 20458  00531A                     i2l6924:
 20459  00531A  4A05               	infsnz	i2strcpy@cp,f,c
 20460  00531C  2A06               	incf	i2strcpy@cp+1,f,c
 20461  00531E  4A03               	infsnz	i2strcpy@from,f,c
 20462  005320  2A04               	incf	i2strcpy@from+1,f,c
 20463  005322                     i2l6926:
 20464  005322  C003  FFF6         	movff	i2strcpy@from,tblptrl
 20465  005326  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 20466  00532A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20467  00532A  6AF8               	clrf	tblptru,c
 20468  00532C                     	endif
 20469  00532C                     	if	0	;tblptru may be non-zero
 20470  00532C                     	endif
 20471  00532C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 20472  005330  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 20473  005334  0008               	tblrd		*
 20474  005336  CFF5 FFDF          	movff	tablat,indf2
 20475  00533A  50DF               	movf	indf2,w,c
 20476  00533C  B4D8               	btfsc	status,2,c
 20477  00533E  0012               	return	
 20478  005340  D7EC               	goto	i2l6924
 20479  005342                     __end_ofi2_strcpy:
 20480                           	opt stack 0
 20481                           pclatu	equ	0xFFB
 20482                           pclath	equ	0xFFA
 20483                           tblptru	equ	0xFF8
 20484                           tblptrh	equ	0xFF7
 20485                           tblptrl	equ	0xFF6
 20486                           tablat	equ	0xFF5
 20487                           prodh	equ	0xFF4
 20488                           prodl	equ	0xFF3
 20489                           intcon	equ	0xFF2
 20490                           intcon2	equ	0xFF1
 20491                           intcon3	equ	0xFF0
 20492                           indf0	equ	0xFEF
 20493                           postinc0	equ	0xFEE
 20494                           fsr0h	equ	0xFEA
 20495                           fsr0l	equ	0xFE9
 20496                           wreg	equ	0xFE8
 20497                           postdec1	equ	0xFE5
 20498                           fsr1h	equ	0xFE2
 20499                           fsr1l	equ	0xFE1
 20500                           indf2	equ	0xFDF
 20501                           postinc2	equ	0xFDE
 20502                           postdec2	equ	0xFDD
 20503                           fsr2h	equ	0xFDA
 20504                           fsr2l	equ	0xFD9
 20505                           status	equ	0xFD8
 20506                           
 20507 ;; *************** function _inputHandler *****************
 20508 ;; Defined at:
 20509 ;;		line 375 in file "UI.c"
 20510 ;; Parameters:    Size  Location     Type
 20511 ;;		None
 20512 ;; Auto vars:     Size  Location     Type
 20513 ;;		None
 20514 ;; Return value:  Size  Location     Type
 20515 ;;                  2   41[COMRAM] int 
 20516 ;; Registers used:
 20517 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20518 ;; Tracked objects:
 20519 ;;		On entry : 0/0
 20520 ;;		On exit  : 0/0
 20521 ;;		Unchanged: 0/0
 20522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20527 ;;Total ram usage:        4 bytes
 20528 ;; Hardware stack levels used:    1
 20529 ;; Hardware stack levels required when called:    4
 20530 ;; This function calls:
 20531 ;;		_change_state_to_logs_11
 20532 ;;		_change_state_to_logs_12
 20533 ;;		_change_state_to_logs_22
 20534 ;;		_change_state_to_logs_23
 20535 ;;		_change_state_to_logs_33
 20536 ;;		_change_state_to_logs_34
 20537 ;;		_change_state_to_menu_11
 20538 ;;		_change_state_to_menu_23
 20539 ;;		i2_change_state_to_menu_12
 20540 ;;		i2_change_state_to_menu_22
 20541 ;; This function is called by:
 20542 ;;		_updateMenu
 20543 ;; This function uses a non-reentrant model
 20544 ;;
 20545                           
 20546                           	psect	text66
 20547  00387C                     __ptext66:
 20548                           	opt stack 0
 20549  00387C                     _inputHandler:
 20550                           	opt stack 18
 20551                           
 20552                           ;UI.c: 380: if(firstboot){
 20553                           
 20554                           ;incstack = 0
 20555  00387C  0101               	movlb	1	; () banked
 20556  00387E  513B               	movf	_firstboot& (0+255),w,b
 20557  003880  0101               	movlb	1	; () banked
 20558  003882  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20559  003884  B4D8               	btfsc	status,2,c
 20560  003886  D00C               	goto	i2l7390
 20561                           
 20562                           ; BSR set to: 1
 20563                           ;UI.c: 381: change_state_to_menu_11();
 20564  003888  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 20565                           
 20566                           ;UI.c: 382: firstboot = 0;
 20567  00388C  0E00               	movlw	0
 20568  00388E  0101               	movlb	1	; () banked
 20569  003890  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20570  003892  0E00               	movlw	0
 20571  003894  6F3B               	movwf	_firstboot& (0+255),b
 20572                           
 20573                           ; BSR set to: 1
 20574                           ;UI.c: 383: return 0;
 20575  003896  0E00               	movlw	0
 20576  003898  6E2B               	movwf	?_inputHandler+1,c
 20577  00389A  0E00               	movlw	0
 20578  00389C  6E2A               	movwf	?_inputHandler,c
 20579                           
 20580                           ; BSR set to: 1
 20581  00389E  0012               	return	
 20582  0038A0                     i2l7390:
 20583                           
 20584                           ; BSR set to: 1
 20585                           ;UI.c: 384: }
 20586                           ;UI.c: 385: if (logstate){
 20587  0038A0  0100               	movlb	0	; () banked
 20588  0038A2  51F8               	movf	_logstate& (0+255),w,b
 20589  0038A4  0100               	movlb	0	; () banked
 20590  0038A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20591  0038A8  B4D8               	btfsc	status,2,c
 20592  0038AA  D0C7               	goto	i2l7508
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20596  0038AC  0E43               	movlw	67
 20597  0038AE  187D               	xorwf	_input,w,c	;volatile
 20598  0038B0  A4D8               	btfss	status,2,c
 20599  0038B2  D012               	goto	i2l7408
 20600                           
 20601                           ; BSR set to: 0
 20602  0038B4  B281               	btfsc	3969,1,c	;volatile
 20603  0038B6  D009               	goto	i2l7400
 20604  0038B8  D00F               	goto	i2l7408
 20605  0038BA                     i2l7398:
 20606                           
 20607                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20608  0038BA  0E68               	movlw	104
 20609  0038BC  6E2C               	movwf	??_inputHandler& (0+255),c
 20610  0038BE  0EE4               	movlw	228
 20611  0038C0                     i2u1106_47:
 20612  0038C0  2EE8               	decfsz	wreg,f,c
 20613  0038C2  D7FE               	bra	i2u1106_47
 20614  0038C4  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20615  0038C6  D7FC               	bra	i2u1106_47
 20616  0038C8  D000               	nop2	
 20617  0038CA                     i2l7400:
 20618  0038CA  B281               	btfsc	3969,1,c	;volatile
 20619  0038CC  D7F6               	goto	i2l7398
 20620  0038CE                     i2l7402:
 20621                           
 20622                           ;UI.c: 390: }
 20623                           ;UI.c: 391: return 0;
 20624  0038CE  0E00               	movlw	0
 20625  0038D0  6E2B               	movwf	?_inputHandler+1,c
 20626  0038D2  0E00               	movlw	0
 20627  0038D4  6E2A               	movwf	?_inputHandler,c
 20628  0038D6  0012               	return	
 20629  0038D8                     i2l7408:
 20630                           
 20631                           ;UI.c: 393: else if (input == 'D'){
 20632  0038D8  0E44               	movlw	68
 20633  0038DA  187D               	xorwf	_input,w,c	;volatile
 20634  0038DC  A4D8               	btfss	status,2,c
 20635  0038DE  D7F7               	goto	i2l7402
 20636                           
 20637                           ;UI.c: 395: logstate = 0;
 20638  0038E0  0E00               	movlw	0
 20639  0038E2  0100               	movlb	0	; () banked
 20640  0038E4  6FF9               	movwf	(_logstate+1)& (0+255),b
 20641  0038E6  0E00               	movlw	0
 20642  0038E8  6FF8               	movwf	_logstate& (0+255),b
 20643                           
 20644                           ;UI.c: 396: switch(cur_state){
 20645  0038EA  D012               	goto	i2l7426
 20646  0038EC                     i2l7412:
 20647                           
 20648                           ;UI.c: 398: change_state_to_logs_11();
 20649  0038EC  EC79  F02A         	call	_change_state_to_logs_11	;wreg free
 20650                           
 20651                           ;UI.c: 399: break;
 20652  0038F0  D7EE               	goto	i2l7402
 20653  0038F2                     i2l7414:
 20654                           
 20655                           ;UI.c: 401: change_state_to_logs_12();
 20656  0038F2  EC61  F02A         	call	_change_state_to_logs_12	;wreg free
 20657                           
 20658                           ;UI.c: 402: break;
 20659  0038F6  D7EB               	goto	i2l7402
 20660  0038F8                     i2l7416:
 20661                           
 20662                           ;UI.c: 404: change_state_to_logs_22();
 20663  0038F8  EC49  F02A         	call	_change_state_to_logs_22	;wreg free
 20664                           
 20665                           ;UI.c: 405: break;
 20666  0038FC  D7E8               	goto	i2l7402
 20667  0038FE                     i2l7418:
 20668                           
 20669                           ;UI.c: 407: change_state_to_logs_23();
 20670  0038FE  ECA8  F02A         	call	_change_state_to_logs_23	;wreg free
 20671                           
 20672                           ;UI.c: 408: break;
 20673  003902  D7E5               	goto	i2l7402
 20674  003904                     i2l7420:
 20675                           
 20676                           ;UI.c: 410: change_state_to_logs_33();
 20677  003904  EC31  F02A         	call	_change_state_to_logs_33	;wreg free
 20678                           
 20679                           ;UI.c: 411: break;
 20680  003908  D7E2               	goto	i2l7402
 20681  00390A                     i2l7422:
 20682                           
 20683                           ;UI.c: 413: change_state_to_logs_34();
 20684  00390A  EC19  F02A         	call	_change_state_to_logs_34	;wreg free
 20685                           
 20686                           ;UI.c: 415: }
 20687                           
 20688                           ;UI.c: 414: break;
 20689  00390E  D7DF               	goto	i2l7402
 20690  003910                     i2l7426:
 20691  003910  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20692  003914  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20693                           
 20694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20695                           ; Switch size 1, requested type "space"
 20696                           ; Number of cases is 2, Range of values is 3 to 4
 20697                           ; switch strategies available:
 20698                           ; Name         Instructions Cycles
 20699                           ; simple_byte            7     4 (average)
 20700                           ;	Chosen strategy is simple_byte
 20701  003918  502D               	movf	??_inputHandler+1,w,c
 20702  00391A  0A03               	xorlw	3	; case 3
 20703  00391C  B4D8               	btfsc	status,2,c
 20704  00391E  D004               	goto	i2l10460
 20705  003920  0A07               	xorlw	7	; case 4
 20706  003922  B4D8               	btfsc	status,2,c
 20707  003924  D00F               	goto	i2l10462
 20708  003926  D7D3               	goto	i2l7402
 20709  003928                     i2l10460:
 20710                           
 20711                           ; Switch size 1, requested type "space"
 20712                           ; Number of cases is 4, Range of values is 243 to 255
 20713                           ; switch strategies available:
 20714                           ; Name         Instructions Cycles
 20715                           ; simple_byte           13     7 (average)
 20716                           ;	Chosen strategy is simple_byte
 20717  003928  502C               	movf	??_inputHandler,w,c
 20718  00392A  0AF3               	xorlw	243	; case 243
 20719  00392C  B4D8               	btfsc	status,2,c
 20720  00392E  D7DE               	goto	i2l7412
 20721  003930  0A07               	xorlw	7	; case 244
 20722  003932  B4D8               	btfsc	status,2,c
 20723  003934  D7DE               	goto	i2l7414
 20724  003936  0A0A               	xorlw	10	; case 254
 20725  003938  B4D8               	btfsc	status,2,c
 20726  00393A  D7DE               	goto	i2l7416
 20727  00393C  0A01               	xorlw	1	; case 255
 20728  00393E  B4D8               	btfsc	status,2,c
 20729  003940  D7DE               	goto	i2l7418
 20730  003942  D7C5               	goto	i2l7402
 20731  003944                     i2l10462:
 20732                           
 20733                           ; Switch size 1, requested type "space"
 20734                           ; Number of cases is 2, Range of values is 9 to 10
 20735                           ; switch strategies available:
 20736                           ; Name         Instructions Cycles
 20737                           ; simple_byte            7     4 (average)
 20738                           ;	Chosen strategy is simple_byte
 20739  003944  502C               	movf	??_inputHandler,w,c
 20740  003946  0A09               	xorlw	9	; case 9
 20741  003948  B4D8               	btfsc	status,2,c
 20742  00394A  D7DC               	goto	i2l7420
 20743  00394C  0A03               	xorlw	3	; case 10
 20744  00394E  B4D8               	btfsc	status,2,c
 20745  003950  D7DC               	goto	i2l7422
 20746  003952  D7BD               	goto	i2l7402
 20747  003954                     i2l7438:
 20748                           
 20749                           ;UI.c: 425: if(cur_state == 11){
 20750  003954  0E0B               	movlw	11
 20751  003956  0100               	movlb	0	; () banked
 20752  003958  19EC               	xorwf	_cur_state& (0+255),w,b
 20753  00395A  0100               	movlb	0	; () banked
 20754  00395C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20755  00395E  A4D8               	btfss	status,2,c
 20756  003960  D005               	goto	i2l7446
 20757                           
 20758                           ; BSR set to: 0
 20759                           ;UI.c: 426: return 0;
 20760  003962  0E00               	movlw	0
 20761  003964  6E2B               	movwf	?_inputHandler+1,c
 20762  003966  0E00               	movlw	0
 20763  003968  6E2A               	movwf	?_inputHandler,c
 20764                           
 20765                           ; BSR set to: 0
 20766  00396A  0012               	return	
 20767  00396C                     i2l7446:
 20768                           
 20769                           ; BSR set to: 0
 20770                           ;UI.c: 428: else{
 20771                           ;UI.c: 429: change_state_to_menu_11();
 20772  00396C  EC01  F02A         	call	_change_state_to_menu_11	;wreg free
 20773                           
 20774                           ;UI.c: 430: }
 20775                           ;UI.c: 431: return 0;
 20776  003970  0E00               	movlw	0
 20777  003972  6E2B               	movwf	?_inputHandler+1,c
 20778  003974  0E00               	movlw	0
 20779  003976  6E2A               	movwf	?_inputHandler,c
 20780  003978  0012               	return	
 20781  00397A                     i2l7452:
 20782                           
 20783                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 20784  00397A  0E16               	movlw	22
 20785  00397C  0100               	movlb	0	; () banked
 20786  00397E  19EC               	xorwf	_cur_state& (0+255),w,b
 20787  003980  0100               	movlb	0	; () banked
 20788  003982  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20789  003984  B4D8               	btfsc	status,2,c
 20790  003986  D007               	goto	i2l7456
 20791                           
 20792                           ; BSR set to: 0
 20793  003988  0E0C               	movlw	12
 20794  00398A  0100               	movlb	0	; () banked
 20795  00398C  19EC               	xorwf	_cur_state& (0+255),w,b
 20796  00398E  0100               	movlb	0	; () banked
 20797  003990  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20798  003992  A4D8               	btfss	status,2,c
 20799  003994  D005               	goto	i2l7462
 20800  003996                     i2l7456:
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;UI.c: 434: return 0;
 20804  003996  0E00               	movlw	0
 20805  003998  6E2B               	movwf	?_inputHandler+1,c
 20806  00399A  0E00               	movlw	0
 20807  00399C  6E2A               	movwf	?_inputHandler,c
 20808                           
 20809                           ; BSR set to: 0
 20810  00399E  0012               	return	
 20811  0039A0                     i2l7462:
 20812                           
 20813                           ; BSR set to: 0
 20814                           ;UI.c: 436: else if(cur_state == 23){
 20815  0039A0  0E17               	movlw	23
 20816  0039A2  0100               	movlb	0	; () banked
 20817  0039A4  19EC               	xorwf	_cur_state& (0+255),w,b
 20818  0039A6  0100               	movlb	0	; () banked
 20819  0039A8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20820  0039AA  A4D8               	btfss	status,2,c
 20821  0039AC  D003               	goto	i2l7466
 20822                           
 20823                           ; BSR set to: 0
 20824                           ;UI.c: 437: change_state_to_menu_22();
 20825  0039AE  ECB9  F029         	call	i2_change_state_to_menu_22	;wreg free
 20826                           
 20827                           ;UI.c: 438: }
 20828  0039B2  D002               	goto	i2l7468
 20829  0039B4                     i2l7466:
 20830                           
 20831                           ;UI.c: 439: else{
 20832                           ;UI.c: 440: change_state_to_menu_12();
 20833  0039B4  ECD1  F029         	call	i2_change_state_to_menu_12	;wreg free
 20834  0039B8                     i2l7468:
 20835                           
 20836                           ;UI.c: 441: }
 20837                           ;UI.c: 442: return 0;
 20838  0039B8  0E00               	movlw	0
 20839  0039BA  6E2B               	movwf	?_inputHandler+1,c
 20840  0039BC  0E00               	movlw	0
 20841  0039BE  6E2A               	movwf	?_inputHandler,c
 20842  0039C0  0012               	return	
 20843  0039C2                     i2l7472:
 20844                           
 20845                           ;UI.c: 444: if(cur_state == 23){
 20846  0039C2  0E17               	movlw	23
 20847  0039C4  0100               	movlb	0	; () banked
 20848  0039C6  19EC               	xorwf	_cur_state& (0+255),w,b
 20849  0039C8  0100               	movlb	0	; () banked
 20850  0039CA  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20851  0039CC  A4D8               	btfss	status,2,c
 20852  0039CE  D005               	goto	i2l7480
 20853                           
 20854                           ; BSR set to: 0
 20855                           ;UI.c: 445: return 0;
 20856  0039D0  0E00               	movlw	0
 20857  0039D2  6E2B               	movwf	?_inputHandler+1,c
 20858  0039D4  0E00               	movlw	0
 20859  0039D6  6E2A               	movwf	?_inputHandler,c
 20860                           
 20861                           ; BSR set to: 0
 20862  0039D8  0012               	return	
 20863  0039DA                     i2l7480:
 20864                           
 20865                           ; BSR set to: 0
 20866                           ;UI.c: 447: else{
 20867                           ;UI.c: 448: change_state_to_menu_23();
 20868  0039DA  ECE9  F029         	call	_change_state_to_menu_23	;wreg free
 20869                           
 20870                           ;UI.c: 449: }
 20871                           ;UI.c: 450: return 0;
 20872  0039DE  0E00               	movlw	0
 20873  0039E0  6E2B               	movwf	?_inputHandler+1,c
 20874  0039E2  0E00               	movlw	0
 20875  0039E4  6E2A               	movwf	?_inputHandler,c
 20876  0039E6  0012               	return	
 20877  0039E8                     i2l7486:
 20878                           
 20879                           ;UI.c: 453: up = 1;
 20880  0039E8  0E00               	movlw	0
 20881  0039EA  6E76               	movwf	_up+1,c
 20882  0039EC  0E01               	movlw	1
 20883  0039EE  6E75               	movwf	_up,c
 20884                           
 20885                           ;UI.c: 454: return 1;
 20886  0039F0  0E00               	movlw	0
 20887  0039F2  6E2B               	movwf	?_inputHandler+1,c
 20888  0039F4  0E01               	movlw	1
 20889  0039F6  6E2A               	movwf	?_inputHandler,c
 20890  0039F8  0012               	return	
 20891  0039FA                     i2l7490:
 20892                           
 20893                           ;UI.c: 456: down = 1;
 20894  0039FA  0E00               	movlw	0
 20895  0039FC  6E5E               	movwf	_down+1,c
 20896  0039FE  0E01               	movlw	1
 20897  003A00  6E5D               	movwf	_down,c
 20898                           
 20899                           ;UI.c: 457: return 1;
 20900  003A02  0E00               	movlw	0
 20901  003A04  6E2B               	movwf	?_inputHandler+1,c
 20902  003A06  0E01               	movlw	1
 20903  003A08  6E2A               	movwf	?_inputHandler,c
 20904  003A0A  0012               	return	
 20905  003A0C                     i2l7494:
 20906                           
 20907                           ;UI.c: 459: enter = 1;
 20908  003A0C  0E00               	movlw	0
 20909  003A0E  6E60               	movwf	_enter+1,c
 20910  003A10  0E01               	movlw	1
 20911  003A12  6E5F               	movwf	_enter,c
 20912                           
 20913                           ;UI.c: 460: return 1;
 20914  003A14  0E00               	movlw	0
 20915  003A16  6E2B               	movwf	?_inputHandler+1,c
 20916  003A18  0E01               	movlw	1
 20917  003A1A  6E2A               	movwf	?_inputHandler,c
 20918  003A1C  0012               	return	
 20919  003A1E                     i2l7498:
 20920                           
 20921                           ;UI.c: 462: back = 1;
 20922  003A1E  0E00               	movlw	0
 20923  003A20  6E5C               	movwf	_back+1,c
 20924  003A22  0E01               	movlw	1
 20925  003A24  6E5B               	movwf	_back,c
 20926                           
 20927                           ;UI.c: 463: return 1;
 20928  003A26  0E00               	movlw	0
 20929  003A28  6E2B               	movwf	?_inputHandler+1,c
 20930  003A2A  0E01               	movlw	1
 20931  003A2C  6E2A               	movwf	?_inputHandler,c
 20932  003A2E  0012               	return	
 20933  003A30                     i2l7502:
 20934                           
 20935                           ;UI.c: 466: return 1;
 20936  003A30  0E00               	movlw	0
 20937  003A32  6E2B               	movwf	?_inputHandler+1,c
 20938  003A34  0E01               	movlw	1
 20939  003A36  6E2A               	movwf	?_inputHandler,c
 20940                           
 20941                           ;UI.c: 467: }
 20942  003A38  0012               	return	
 20943  003A3A                     i2l7508:
 20944  003A3A  507D               	movf	_input,w,c	;volatile
 20945                           
 20946                           ; Switch size 1, requested type "space"
 20947                           ; Number of cases is 7, Range of values is 49 to 68
 20948                           ; switch strategies available:
 20949                           ; Name         Instructions Cycles
 20950                           ; simple_byte           22    12 (average)
 20951                           ;	Chosen strategy is simple_byte
 20952  003A3C  0A31               	xorlw	49	; case 49
 20953  003A3E  B4D8               	btfsc	status,2,c
 20954  003A40  D789               	goto	i2l7438
 20955  003A42  0A03               	xorlw	3	; case 50
 20956  003A44  B4D8               	btfsc	status,2,c
 20957  003A46  D799               	goto	i2l7452
 20958  003A48  0A01               	xorlw	1	; case 51
 20959  003A4A  B4D8               	btfsc	status,2,c
 20960  003A4C  D7BA               	goto	i2l7472
 20961  003A4E  0A72               	xorlw	114	; case 65
 20962  003A50  B4D8               	btfsc	status,2,c
 20963  003A52  D7CA               	goto	i2l7486
 20964  003A54  0A03               	xorlw	3	; case 66
 20965  003A56  B4D8               	btfsc	status,2,c
 20966  003A58  D7D0               	goto	i2l7490
 20967  003A5A  0A01               	xorlw	1	; case 67
 20968  003A5C  B4D8               	btfsc	status,2,c
 20969  003A5E  D7D6               	goto	i2l7494
 20970  003A60  0A07               	xorlw	7	; case 68
 20971  003A62  B4D8               	btfsc	status,2,c
 20972  003A64  D7DC               	goto	i2l7498
 20973  003A66  D7E4               	goto	i2l7502
 20974  003A68                     __end_of_inputHandler:
 20975                           	opt stack 0
 20976                           pclatu	equ	0xFFB
 20977                           pclath	equ	0xFFA
 20978                           tblptru	equ	0xFF8
 20979                           tblptrh	equ	0xFF7
 20980                           tblptrl	equ	0xFF6
 20981                           tablat	equ	0xFF5
 20982                           prodh	equ	0xFF4
 20983                           prodl	equ	0xFF3
 20984                           intcon	equ	0xFF2
 20985                           intcon2	equ	0xFF1
 20986                           intcon3	equ	0xFF0
 20987                           indf0	equ	0xFEF
 20988                           postinc0	equ	0xFEE
 20989                           fsr0h	equ	0xFEA
 20990                           fsr0l	equ	0xFE9
 20991                           wreg	equ	0xFE8
 20992                           postdec1	equ	0xFE5
 20993                           fsr1h	equ	0xFE2
 20994                           fsr1l	equ	0xFE1
 20995                           indf2	equ	0xFDF
 20996                           postinc2	equ	0xFDE
 20997                           postdec2	equ	0xFDD
 20998                           fsr2h	equ	0xFDA
 20999                           fsr2l	equ	0xFD9
 21000                           status	equ	0xFD8
 21001                           
 21002 ;; *************** function i2_change_state_to_menu_22 *****************
 21003 ;; Defined at:
 21004 ;;		line 501 in file "UI.c"
 21005 ;; Parameters:    Size  Location     Type
 21006 ;;		None
 21007 ;; Auto vars:     Size  Location     Type
 21008 ;;		None
 21009 ;; Return value:  Size  Location     Type
 21010 ;;                  1    wreg      void 
 21011 ;; Registers used:
 21012 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21013 ;; Tracked objects:
 21014 ;;		On entry : 0/0
 21015 ;;		On exit  : 0/0
 21016 ;;		Unchanged: 0/0
 21017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21022 ;;Total ram usage:        0 bytes
 21023 ;; Hardware stack levels used:    1
 21024 ;; Hardware stack levels required when called:    3
 21025 ;; This function calls:
 21026 ;;		i2_lcdInst
 21027 ;;		i2_printf
 21028 ;; This function is called by:
 21029 ;;		_updateMenu
 21030 ;;		_inputHandler
 21031 ;; This function uses a non-reentrant model
 21032 ;;
 21033                           
 21034                           	psect	text67
 21035  005372                     __ptext67:
 21036                           	opt stack 0
 21037  005372                     i2_change_state_to_menu_22:
 21038                           	opt stack 19
 21039                           
 21040                           ;UI.c: 502: cur_state = 22;
 21041                           
 21042                           ;incstack = 0
 21043  005372  0E00               	movlw	0
 21044  005374  0100               	movlb	0	; () banked
 21045  005376  6FED               	movwf	(_cur_state+1)& (0+255),b
 21046  005378  0E16               	movlw	22
 21047  00537A  6FEC               	movwf	_cur_state& (0+255),b
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;UI.c: 504: lcdInst(0b10000000);;
 21051  00537C  0E80               	movlw	128
 21052  00537E  ECED  F02B         	call	i2_lcdInst
 21053                           
 21054                           ;UI.c: 505: printf("2. SORT        <");
 21055  005382  0ECE               	movlw	low STR_34
 21056  005384  6E0D               	movwf	i2printf@f,c
 21057  005386  0EFD               	movlw	high STR_34
 21058  005388  6E0E               	movwf	i2printf@f+1,c
 21059  00538A  ECA3  F011         	call	i2_printf	;wreg free
 21060                           
 21061                           ;UI.c: 506: lcdInst(0b11000000);;
 21062  00538E  0EC0               	movlw	192
 21063  005390  ECED  F02B         	call	i2_lcdInst
 21064                           
 21065                           ;UI.c: 507: printf("3. LOGS         ");
 21066  005394  0E13               	movlw	low STR_36
 21067  005396  6E0D               	movwf	i2printf@f,c
 21068  005398  0EFD               	movlw	high STR_36
 21069  00539A  6E0E               	movwf	i2printf@f+1,c
 21070  00539C  ECA3  F011         	call	i2_printf	;wreg free
 21071  0053A0  0012               	return		;funcret
 21072  0053A2                     __end_ofi2_change_state_to_menu_22:
 21073                           	opt stack 0
 21074                           pclatu	equ	0xFFB
 21075                           pclath	equ	0xFFA
 21076                           tblptru	equ	0xFF8
 21077                           tblptrh	equ	0xFF7
 21078                           tblptrl	equ	0xFF6
 21079                           tablat	equ	0xFF5
 21080                           prodh	equ	0xFF4
 21081                           prodl	equ	0xFF3
 21082                           intcon	equ	0xFF2
 21083                           intcon2	equ	0xFF1
 21084                           intcon3	equ	0xFF0
 21085                           indf0	equ	0xFEF
 21086                           postinc0	equ	0xFEE
 21087                           fsr0h	equ	0xFEA
 21088                           fsr0l	equ	0xFE9
 21089                           wreg	equ	0xFE8
 21090                           postdec1	equ	0xFE5
 21091                           fsr1h	equ	0xFE2
 21092                           fsr1l	equ	0xFE1
 21093                           indf2	equ	0xFDF
 21094                           postinc2	equ	0xFDE
 21095                           postdec2	equ	0xFDD
 21096                           fsr2h	equ	0xFDA
 21097                           fsr2l	equ	0xFD9
 21098                           status	equ	0xFD8
 21099                           
 21100 ;; *************** function i2_change_state_to_menu_12 *****************
 21101 ;; Defined at:
 21102 ;;		line 493 in file "UI.c"
 21103 ;; Parameters:    Size  Location     Type
 21104 ;;		None
 21105 ;; Auto vars:     Size  Location     Type
 21106 ;;		None
 21107 ;; Return value:  Size  Location     Type
 21108 ;;                  1    wreg      void 
 21109 ;; Registers used:
 21110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21111 ;; Tracked objects:
 21112 ;;		On entry : 0/0
 21113 ;;		On exit  : 0/0
 21114 ;;		Unchanged: 0/0
 21115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21120 ;;Total ram usage:        0 bytes
 21121 ;; Hardware stack levels used:    1
 21122 ;; Hardware stack levels required when called:    3
 21123 ;; This function calls:
 21124 ;;		i2_lcdInst
 21125 ;;		i2_printf
 21126 ;; This function is called by:
 21127 ;;		_updateMenu
 21128 ;;		_inputHandler
 21129 ;; This function uses a non-reentrant model
 21130 ;;
 21131                           
 21132                           	psect	text68
 21133  0053A2                     __ptext68:
 21134                           	opt stack 0
 21135  0053A2                     i2_change_state_to_menu_12:
 21136                           	opt stack 19
 21137                           
 21138                           ;UI.c: 494: cur_state = 12;
 21139                           
 21140                           ;incstack = 0
 21141  0053A2  0E00               	movlw	0
 21142  0053A4  0100               	movlb	0	; () banked
 21143  0053A6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21144  0053A8  0E0C               	movlw	12
 21145  0053AA  6FEC               	movwf	_cur_state& (0+255),b
 21146                           
 21147                           ; BSR set to: 0
 21148                           ;UI.c: 496: lcdInst(0b10000000);;
 21149  0053AC  0E80               	movlw	128
 21150  0053AE  ECED  F02B         	call	i2_lcdInst
 21151                           
 21152                           ;UI.c: 497: printf("1. DATE/TIME    ");
 21153  0053B2  0E35               	movlw	low STR_33
 21154  0053B4  6E0D               	movwf	i2printf@f,c
 21155  0053B6  0EFD               	movlw	high STR_33
 21156  0053B8  6E0E               	movwf	i2printf@f+1,c
 21157  0053BA  ECA3  F011         	call	i2_printf	;wreg free
 21158                           
 21159                           ;UI.c: 498: lcdInst(0b11000000);;
 21160  0053BE  0EC0               	movlw	192
 21161  0053C0  ECED  F02B         	call	i2_lcdInst
 21162                           
 21163                           ;UI.c: 499: printf("2. SORT        <");
 21164  0053C4  0ECE               	movlw	low STR_34
 21165  0053C6  6E0D               	movwf	i2printf@f,c
 21166  0053C8  0EFD               	movlw	high STR_34
 21167  0053CA  6E0E               	movwf	i2printf@f+1,c
 21168  0053CC  ECA3  F011         	call	i2_printf	;wreg free
 21169  0053D0  0012               	return		;funcret
 21170  0053D2                     __end_ofi2_change_state_to_menu_12:
 21171                           	opt stack 0
 21172                           pclatu	equ	0xFFB
 21173                           pclath	equ	0xFFA
 21174                           tblptru	equ	0xFF8
 21175                           tblptrh	equ	0xFF7
 21176                           tblptrl	equ	0xFF6
 21177                           tablat	equ	0xFF5
 21178                           prodh	equ	0xFF4
 21179                           prodl	equ	0xFF3
 21180                           intcon	equ	0xFF2
 21181                           intcon2	equ	0xFF1
 21182                           intcon3	equ	0xFF0
 21183                           indf0	equ	0xFEF
 21184                           postinc0	equ	0xFEE
 21185                           fsr0h	equ	0xFEA
 21186                           fsr0l	equ	0xFE9
 21187                           wreg	equ	0xFE8
 21188                           postdec1	equ	0xFE5
 21189                           fsr1h	equ	0xFE2
 21190                           fsr1l	equ	0xFE1
 21191                           indf2	equ	0xFDF
 21192                           postinc2	equ	0xFDE
 21193                           postdec2	equ	0xFDD
 21194                           fsr2h	equ	0xFDA
 21195                           fsr2l	equ	0xFD9
 21196                           status	equ	0xFD8
 21197                           
 21198 ;; *************** function _change_state_to_menu_23 *****************
 21199 ;; Defined at:
 21200 ;;		line 509 in file "UI.c"
 21201 ;; Parameters:    Size  Location     Type
 21202 ;;		None
 21203 ;; Auto vars:     Size  Location     Type
 21204 ;;		None
 21205 ;; Return value:  Size  Location     Type
 21206 ;;                  1    wreg      void 
 21207 ;; Registers used:
 21208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21209 ;; Tracked objects:
 21210 ;;		On entry : 0/0
 21211 ;;		On exit  : 0/0
 21212 ;;		Unchanged: 0/0
 21213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21218 ;;Total ram usage:        0 bytes
 21219 ;; Hardware stack levels used:    1
 21220 ;; Hardware stack levels required when called:    3
 21221 ;; This function calls:
 21222 ;;		i2_lcdInst
 21223 ;;		i2_printf
 21224 ;; This function is called by:
 21225 ;;		_updateMenu
 21226 ;;		_inputHandler
 21227 ;; This function uses a non-reentrant model
 21228 ;;
 21229                           
 21230                           	psect	text69
 21231  0053D2                     __ptext69:
 21232                           	opt stack 0
 21233  0053D2                     _change_state_to_menu_23:
 21234                           	opt stack 18
 21235                           
 21236                           ;UI.c: 510: cur_state = 23;
 21237                           
 21238                           ;incstack = 0
 21239  0053D2  0E00               	movlw	0
 21240  0053D4  0100               	movlb	0	; () banked
 21241  0053D6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21242  0053D8  0E17               	movlw	23
 21243  0053DA  6FEC               	movwf	_cur_state& (0+255),b
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;UI.c: 512: lcdInst(0b10000000);;
 21247  0053DC  0E80               	movlw	128
 21248  0053DE  ECED  F02B         	call	i2_lcdInst
 21249                           
 21250                           ;UI.c: 513: printf("2. SORT         ");
 21251  0053E2  0E24               	movlw	low STR_32
 21252  0053E4  6E0D               	movwf	i2printf@f,c
 21253  0053E6  0EFD               	movlw	high STR_32
 21254  0053E8  6E0E               	movwf	i2printf@f+1,c
 21255  0053EA  ECA3  F011         	call	i2_printf	;wreg free
 21256                           
 21257                           ;UI.c: 514: lcdInst(0b11000000);;
 21258  0053EE  0EC0               	movlw	192
 21259  0053F0  ECED  F02B         	call	i2_lcdInst
 21260                           
 21261                           ;UI.c: 515: printf("3. LOGS        <");
 21262  0053F4  0EBD               	movlw	low STR_38
 21263  0053F6  6E0D               	movwf	i2printf@f,c
 21264  0053F8  0EFD               	movlw	high STR_38
 21265  0053FA  6E0E               	movwf	i2printf@f+1,c
 21266  0053FC  ECA3  F011         	call	i2_printf	;wreg free
 21267  005400  0012               	return		;funcret
 21268  005402                     __end_of_change_state_to_menu_23:
 21269                           	opt stack 0
 21270                           pclatu	equ	0xFFB
 21271                           pclath	equ	0xFFA
 21272                           tblptru	equ	0xFF8
 21273                           tblptrh	equ	0xFF7
 21274                           tblptrl	equ	0xFF6
 21275                           tablat	equ	0xFF5
 21276                           prodh	equ	0xFF4
 21277                           prodl	equ	0xFF3
 21278                           intcon	equ	0xFF2
 21279                           intcon2	equ	0xFF1
 21280                           intcon3	equ	0xFF0
 21281                           indf0	equ	0xFEF
 21282                           postinc0	equ	0xFEE
 21283                           fsr0h	equ	0xFEA
 21284                           fsr0l	equ	0xFE9
 21285                           wreg	equ	0xFE8
 21286                           postdec1	equ	0xFE5
 21287                           fsr1h	equ	0xFE2
 21288                           fsr1l	equ	0xFE1
 21289                           indf2	equ	0xFDF
 21290                           postinc2	equ	0xFDE
 21291                           postdec2	equ	0xFDD
 21292                           fsr2h	equ	0xFDA
 21293                           fsr2l	equ	0xFD9
 21294                           status	equ	0xFD8
 21295                           
 21296 ;; *************** function _change_state_to_menu_11 *****************
 21297 ;; Defined at:
 21298 ;;		line 485 in file "UI.c"
 21299 ;; Parameters:    Size  Location     Type
 21300 ;;		None
 21301 ;; Auto vars:     Size  Location     Type
 21302 ;;		None
 21303 ;; Return value:  Size  Location     Type
 21304 ;;                  1    wreg      void 
 21305 ;; Registers used:
 21306 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21307 ;; Tracked objects:
 21308 ;;		On entry : 0/0
 21309 ;;		On exit  : 0/0
 21310 ;;		Unchanged: 0/0
 21311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;Total ram usage:        0 bytes
 21317 ;; Hardware stack levels used:    1
 21318 ;; Hardware stack levels required when called:    3
 21319 ;; This function calls:
 21320 ;;		i2_lcdInst
 21321 ;;		i2_printf
 21322 ;; This function is called by:
 21323 ;;		_updateMenu
 21324 ;;		_inputHandler
 21325 ;; This function uses a non-reentrant model
 21326 ;;
 21327                           
 21328                           	psect	text70
 21329  005402                     __ptext70:
 21330                           	opt stack 0
 21331  005402                     _change_state_to_menu_11:
 21332                           	opt stack 18
 21333                           
 21334                           ;UI.c: 486: cur_state = 11;
 21335                           
 21336                           ;incstack = 0
 21337  005402  0E00               	movlw	0
 21338  005404  0100               	movlb	0	; () banked
 21339  005406  6FED               	movwf	(_cur_state+1)& (0+255),b
 21340  005408  0E0B               	movlw	11
 21341  00540A  6FEC               	movwf	_cur_state& (0+255),b
 21342                           
 21343                           ; BSR set to: 0
 21344                           ;UI.c: 488: lcdInst(0b10000000);;
 21345  00540C  0E80               	movlw	128
 21346  00540E  ECED  F02B         	call	i2_lcdInst
 21347                           
 21348                           ;UI.c: 489: printf("1. DATE/TIME   <");
 21349  005412  0EDF               	movlw	low STR_31
 21350  005414  6E0D               	movwf	i2printf@f,c
 21351  005416  0EFD               	movlw	high STR_31
 21352  005418  6E0E               	movwf	i2printf@f+1,c
 21353  00541A  ECA3  F011         	call	i2_printf	;wreg free
 21354                           
 21355                           ;UI.c: 490: lcdInst(0b11000000);;
 21356  00541E  0EC0               	movlw	192
 21357  005420  ECED  F02B         	call	i2_lcdInst
 21358                           
 21359                           ;UI.c: 491: printf("2. SORT         ");
 21360  005424  0E24               	movlw	low STR_32
 21361  005426  6E0D               	movwf	i2printf@f,c
 21362  005428  0EFD               	movlw	high STR_32
 21363  00542A  6E0E               	movwf	i2printf@f+1,c
 21364  00542C  ECA3  F011         	call	i2_printf	;wreg free
 21365  005430  0012               	return		;funcret
 21366  005432                     __end_of_change_state_to_menu_11:
 21367                           	opt stack 0
 21368                           pclatu	equ	0xFFB
 21369                           pclath	equ	0xFFA
 21370                           tblptru	equ	0xFF8
 21371                           tblptrh	equ	0xFF7
 21372                           tblptrl	equ	0xFF6
 21373                           tablat	equ	0xFF5
 21374                           prodh	equ	0xFF4
 21375                           prodl	equ	0xFF3
 21376                           intcon	equ	0xFF2
 21377                           intcon2	equ	0xFF1
 21378                           intcon3	equ	0xFF0
 21379                           indf0	equ	0xFEF
 21380                           postinc0	equ	0xFEE
 21381                           fsr0h	equ	0xFEA
 21382                           fsr0l	equ	0xFE9
 21383                           wreg	equ	0xFE8
 21384                           postdec1	equ	0xFE5
 21385                           fsr1h	equ	0xFE2
 21386                           fsr1l	equ	0xFE1
 21387                           indf2	equ	0xFDF
 21388                           postinc2	equ	0xFDE
 21389                           postdec2	equ	0xFDD
 21390                           fsr2h	equ	0xFDA
 21391                           fsr2l	equ	0xFD9
 21392                           status	equ	0xFD8
 21393                           
 21394 ;; *************** function _change_state_to_logs_34 *****************
 21395 ;; Defined at:
 21396 ;;		line 552 in file "UI.c"
 21397 ;; Parameters:    Size  Location     Type
 21398 ;;		None
 21399 ;; Auto vars:     Size  Location     Type
 21400 ;;		None
 21401 ;; Return value:  Size  Location     Type
 21402 ;;                  1    wreg      void 
 21403 ;; Registers used:
 21404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21405 ;; Tracked objects:
 21406 ;;		On entry : 0/0
 21407 ;;		On exit  : 0/0
 21408 ;;		Unchanged: 0/0
 21409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21414 ;;Total ram usage:        0 bytes
 21415 ;; Hardware stack levels used:    1
 21416 ;; Hardware stack levels required when called:    3
 21417 ;; This function calls:
 21418 ;;		i2_lcdInst
 21419 ;;		i2_printf
 21420 ;; This function is called by:
 21421 ;;		_updateMenu
 21422 ;;		_inputHandler
 21423 ;; This function uses a non-reentrant model
 21424 ;;
 21425                           
 21426                           	psect	text71
 21427  005432                     __ptext71:
 21428                           	opt stack 0
 21429  005432                     _change_state_to_logs_34:
 21430                           	opt stack 18
 21431                           
 21432                           ;UI.c: 553: cur_state = 1034;
 21433                           
 21434                           ;incstack = 0
 21435  005432  0E04               	movlw	4
 21436  005434  0100               	movlb	0	; () banked
 21437  005436  6FED               	movwf	(_cur_state+1)& (0+255),b
 21438  005438  0E0A               	movlw	10
 21439  00543A  6FEC               	movwf	_cur_state& (0+255),b
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;UI.c: 554: lcdInst(0b10000000);;
 21443  00543C  0E80               	movlw	128
 21444  00543E  ECED  F02B         	call	i2_lcdInst
 21445                           
 21446                           ;UI.c: 555: printf("LOG 3           ");
 21447  005442  0EF1               	movlw	low STR_44
 21448  005444  6E0D               	movwf	i2printf@f,c
 21449  005446  0EFC               	movlw	high STR_44
 21450  005448  6E0E               	movwf	i2printf@f+1,c
 21451  00544A  ECA3  F011         	call	i2_printf	;wreg free
 21452                           
 21453                           ;UI.c: 556: lcdInst(0b11000000);;
 21454  00544E  0EC0               	movlw	192
 21455  005450  ECED  F02B         	call	i2_lcdInst
 21456                           
 21457                           ;UI.c: 557: printf("LOG 4          <");
 21458  005454  0EAC               	movlw	low STR_50
 21459  005456  6E0D               	movwf	i2printf@f,c
 21460  005458  0EFD               	movlw	high STR_50
 21461  00545A  6E0E               	movwf	i2printf@f+1,c
 21462  00545C  ECA3  F011         	call	i2_printf	;wreg free
 21463  005460  0012               	return		;funcret
 21464  005462                     __end_of_change_state_to_logs_34:
 21465                           	opt stack 0
 21466                           pclatu	equ	0xFFB
 21467                           pclath	equ	0xFFA
 21468                           tblptru	equ	0xFF8
 21469                           tblptrh	equ	0xFF7
 21470                           tblptrl	equ	0xFF6
 21471                           tablat	equ	0xFF5
 21472                           prodh	equ	0xFF4
 21473                           prodl	equ	0xFF3
 21474                           intcon	equ	0xFF2
 21475                           intcon2	equ	0xFF1
 21476                           intcon3	equ	0xFF0
 21477                           indf0	equ	0xFEF
 21478                           postinc0	equ	0xFEE
 21479                           fsr0h	equ	0xFEA
 21480                           fsr0l	equ	0xFE9
 21481                           wreg	equ	0xFE8
 21482                           postdec1	equ	0xFE5
 21483                           fsr1h	equ	0xFE2
 21484                           fsr1l	equ	0xFE1
 21485                           indf2	equ	0xFDF
 21486                           postinc2	equ	0xFDE
 21487                           postdec2	equ	0xFDD
 21488                           fsr2h	equ	0xFDA
 21489                           fsr2l	equ	0xFD9
 21490                           status	equ	0xFD8
 21491                           
 21492 ;; *************** function _change_state_to_logs_33 *****************
 21493 ;; Defined at:
 21494 ;;		line 545 in file "UI.c"
 21495 ;; Parameters:    Size  Location     Type
 21496 ;;		None
 21497 ;; Auto vars:     Size  Location     Type
 21498 ;;		None
 21499 ;; Return value:  Size  Location     Type
 21500 ;;                  1    wreg      void 
 21501 ;; Registers used:
 21502 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21503 ;; Tracked objects:
 21504 ;;		On entry : 0/0
 21505 ;;		On exit  : 0/0
 21506 ;;		Unchanged: 0/0
 21507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21512 ;;Total ram usage:        0 bytes
 21513 ;; Hardware stack levels used:    1
 21514 ;; Hardware stack levels required when called:    3
 21515 ;; This function calls:
 21516 ;;		i2_lcdInst
 21517 ;;		i2_printf
 21518 ;; This function is called by:
 21519 ;;		_updateMenu
 21520 ;;		_inputHandler
 21521 ;; This function uses a non-reentrant model
 21522 ;;
 21523                           
 21524                           	psect	text72
 21525  005462                     __ptext72:
 21526                           	opt stack 0
 21527  005462                     _change_state_to_logs_33:
 21528                           	opt stack 18
 21529                           
 21530                           ;UI.c: 546: cur_state = 1033;
 21531                           
 21532                           ;incstack = 0
 21533  005462  0E04               	movlw	4
 21534  005464  0100               	movlb	0	; () banked
 21535  005466  6FED               	movwf	(_cur_state+1)& (0+255),b
 21536  005468  0E09               	movlw	9
 21537  00546A  6FEC               	movwf	_cur_state& (0+255),b
 21538                           
 21539                           ; BSR set to: 0
 21540                           ;UI.c: 547: lcdInst(0b10000000);;
 21541  00546C  0E80               	movlw	128
 21542  00546E  ECED  F02B         	call	i2_lcdInst
 21543                           
 21544                           ;UI.c: 548: printf("LOG 3          <");
 21545  005472  0E9B               	movlw	low STR_46
 21546  005474  6E0D               	movwf	i2printf@f,c
 21547  005476  0EFD               	movlw	high STR_46
 21548  005478  6E0E               	movwf	i2printf@f+1,c
 21549  00547A  ECA3  F011         	call	i2_printf	;wreg free
 21550                           
 21551                           ;UI.c: 549: lcdInst(0b11000000);;
 21552  00547E  0EC0               	movlw	192
 21553  005480  ECED  F02B         	call	i2_lcdInst
 21554                           
 21555                           ;UI.c: 550: printf("LOG 4           ");
 21556  005484  0E02               	movlw	low STR_48
 21557  005486  6E0D               	movwf	i2printf@f,c
 21558  005488  0EFD               	movlw	high STR_48
 21559  00548A  6E0E               	movwf	i2printf@f+1,c
 21560  00548C  ECA3  F011         	call	i2_printf	;wreg free
 21561  005490  0012               	return		;funcret
 21562  005492                     __end_of_change_state_to_logs_33:
 21563                           	opt stack 0
 21564                           pclatu	equ	0xFFB
 21565                           pclath	equ	0xFFA
 21566                           tblptru	equ	0xFF8
 21567                           tblptrh	equ	0xFF7
 21568                           tblptrl	equ	0xFF6
 21569                           tablat	equ	0xFF5
 21570                           prodh	equ	0xFF4
 21571                           prodl	equ	0xFF3
 21572                           intcon	equ	0xFF2
 21573                           intcon2	equ	0xFF1
 21574                           intcon3	equ	0xFF0
 21575                           indf0	equ	0xFEF
 21576                           postinc0	equ	0xFEE
 21577                           fsr0h	equ	0xFEA
 21578                           fsr0l	equ	0xFE9
 21579                           wreg	equ	0xFE8
 21580                           postdec1	equ	0xFE5
 21581                           fsr1h	equ	0xFE2
 21582                           fsr1l	equ	0xFE1
 21583                           indf2	equ	0xFDF
 21584                           postinc2	equ	0xFDE
 21585                           postdec2	equ	0xFDD
 21586                           fsr2h	equ	0xFDA
 21587                           fsr2l	equ	0xFD9
 21588                           status	equ	0xFD8
 21589                           
 21590 ;; *************** function _change_state_to_logs_23 *****************
 21591 ;; Defined at:
 21592 ;;		line 538 in file "UI.c"
 21593 ;; Parameters:    Size  Location     Type
 21594 ;;		None
 21595 ;; Auto vars:     Size  Location     Type
 21596 ;;		None
 21597 ;; Return value:  Size  Location     Type
 21598 ;;                  1    wreg      void 
 21599 ;; Registers used:
 21600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21601 ;; Tracked objects:
 21602 ;;		On entry : 0/0
 21603 ;;		On exit  : 0/0
 21604 ;;		Unchanged: 0/0
 21605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21610 ;;Total ram usage:        0 bytes
 21611 ;; Hardware stack levels used:    1
 21612 ;; Hardware stack levels required when called:    3
 21613 ;; This function calls:
 21614 ;;		i2_lcdInst
 21615 ;;		i2_printf
 21616 ;; This function is called by:
 21617 ;;		_updateMenu
 21618 ;;		_inputHandler
 21619 ;; This function uses a non-reentrant model
 21620 ;;
 21621                           
 21622                           	psect	text73
 21623  005550                     __ptext73:
 21624                           	opt stack 0
 21625  005550                     _change_state_to_logs_23:
 21626                           	opt stack 18
 21627                           
 21628                           ;UI.c: 539: cur_state = 1023;
 21629                           
 21630                           ;incstack = 0
 21631  005550  0E03               	movlw	3
 21632  005552  0100               	movlb	0	; () banked
 21633  005554  6FED               	movwf	(_cur_state+1)& (0+255),b
 21634  005556  69EC               	setf	_cur_state& (0+255),b
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;UI.c: 540: lcdInst(0b10000000);;
 21638  005558  0E80               	movlw	128
 21639  00555A  ECED  F02B         	call	i2_lcdInst
 21640                           
 21641                           ;UI.c: 541: printf("LOG 2           ");
 21642  00555E  0EE0               	movlw	low STR_40
 21643  005560  6E0D               	movwf	i2printf@f,c
 21644  005562  0EFC               	movlw	high STR_40
 21645  005564  6E0E               	movwf	i2printf@f+1,c
 21646  005566  ECA3  F011         	call	i2_printf	;wreg free
 21647                           
 21648                           ;UI.c: 542: lcdInst(0b11000000);;
 21649  00556A  0EC0               	movlw	192
 21650  00556C  ECED  F02B         	call	i2_lcdInst
 21651                           
 21652                           ;UI.c: 543: printf("LOG 3          <");
 21653  005570  0E9B               	movlw	low STR_46
 21654  005572  6E0D               	movwf	i2printf@f,c
 21655  005574  0EFD               	movlw	high STR_46
 21656  005576  6E0E               	movwf	i2printf@f+1,c
 21657  005578  ECA3  F011         	call	i2_printf	;wreg free
 21658  00557C  0012               	return		;funcret
 21659  00557E                     __end_of_change_state_to_logs_23:
 21660                           	opt stack 0
 21661                           pclatu	equ	0xFFB
 21662                           pclath	equ	0xFFA
 21663                           tblptru	equ	0xFF8
 21664                           tblptrh	equ	0xFF7
 21665                           tblptrl	equ	0xFF6
 21666                           tablat	equ	0xFF5
 21667                           prodh	equ	0xFF4
 21668                           prodl	equ	0xFF3
 21669                           intcon	equ	0xFF2
 21670                           intcon2	equ	0xFF1
 21671                           intcon3	equ	0xFF0
 21672                           indf0	equ	0xFEF
 21673                           postinc0	equ	0xFEE
 21674                           fsr0h	equ	0xFEA
 21675                           fsr0l	equ	0xFE9
 21676                           wreg	equ	0xFE8
 21677                           postdec1	equ	0xFE5
 21678                           fsr1h	equ	0xFE2
 21679                           fsr1l	equ	0xFE1
 21680                           indf2	equ	0xFDF
 21681                           postinc2	equ	0xFDE
 21682                           postdec2	equ	0xFDD
 21683                           fsr2h	equ	0xFDA
 21684                           fsr2l	equ	0xFD9
 21685                           status	equ	0xFD8
 21686                           
 21687 ;; *************** function _change_state_to_logs_22 *****************
 21688 ;; Defined at:
 21689 ;;		line 531 in file "UI.c"
 21690 ;; Parameters:    Size  Location     Type
 21691 ;;		None
 21692 ;; Auto vars:     Size  Location     Type
 21693 ;;		None
 21694 ;; Return value:  Size  Location     Type
 21695 ;;                  1    wreg      void 
 21696 ;; Registers used:
 21697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21698 ;; Tracked objects:
 21699 ;;		On entry : 0/0
 21700 ;;		On exit  : 0/0
 21701 ;;		Unchanged: 0/0
 21702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21707 ;;Total ram usage:        0 bytes
 21708 ;; Hardware stack levels used:    1
 21709 ;; Hardware stack levels required when called:    3
 21710 ;; This function calls:
 21711 ;;		i2_lcdInst
 21712 ;;		i2_printf
 21713 ;; This function is called by:
 21714 ;;		_updateMenu
 21715 ;;		_inputHandler
 21716 ;; This function uses a non-reentrant model
 21717 ;;
 21718                           
 21719                           	psect	text74
 21720  005492                     __ptext74:
 21721                           	opt stack 0
 21722  005492                     _change_state_to_logs_22:
 21723                           	opt stack 18
 21724                           
 21725                           ;UI.c: 532: cur_state = 1022;
 21726                           
 21727                           ;incstack = 0
 21728  005492  0E03               	movlw	3
 21729  005494  0100               	movlb	0	; () banked
 21730  005496  6FED               	movwf	(_cur_state+1)& (0+255),b
 21731  005498  0EFE               	movlw	254
 21732  00549A  6FEC               	movwf	_cur_state& (0+255),b
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;UI.c: 533: lcdInst(0b10000000);;
 21736  00549C  0E80               	movlw	128
 21737  00549E  ECED  F02B         	call	i2_lcdInst
 21738                           
 21739                           ;UI.c: 534: printf("LOG 2          <");
 21740  0054A2  0E8A               	movlw	low STR_42
 21741  0054A4  6E0D               	movwf	i2printf@f,c
 21742  0054A6  0EFD               	movlw	high STR_42
 21743  0054A8  6E0E               	movwf	i2printf@f+1,c
 21744  0054AA  ECA3  F011         	call	i2_printf	;wreg free
 21745                           
 21746                           ;UI.c: 535: lcdInst(0b11000000);;
 21747  0054AE  0EC0               	movlw	192
 21748  0054B0  ECED  F02B         	call	i2_lcdInst
 21749                           
 21750                           ;UI.c: 536: printf("LOG 3           ");
 21751  0054B4  0EF1               	movlw	low STR_44
 21752  0054B6  6E0D               	movwf	i2printf@f,c
 21753  0054B8  0EFC               	movlw	high STR_44
 21754  0054BA  6E0E               	movwf	i2printf@f+1,c
 21755  0054BC  ECA3  F011         	call	i2_printf	;wreg free
 21756  0054C0  0012               	return		;funcret
 21757  0054C2                     __end_of_change_state_to_logs_22:
 21758                           	opt stack 0
 21759                           pclatu	equ	0xFFB
 21760                           pclath	equ	0xFFA
 21761                           tblptru	equ	0xFF8
 21762                           tblptrh	equ	0xFF7
 21763                           tblptrl	equ	0xFF6
 21764                           tablat	equ	0xFF5
 21765                           prodh	equ	0xFF4
 21766                           prodl	equ	0xFF3
 21767                           intcon	equ	0xFF2
 21768                           intcon2	equ	0xFF1
 21769                           intcon3	equ	0xFF0
 21770                           indf0	equ	0xFEF
 21771                           postinc0	equ	0xFEE
 21772                           fsr0h	equ	0xFEA
 21773                           fsr0l	equ	0xFE9
 21774                           wreg	equ	0xFE8
 21775                           postdec1	equ	0xFE5
 21776                           fsr1h	equ	0xFE2
 21777                           fsr1l	equ	0xFE1
 21778                           indf2	equ	0xFDF
 21779                           postinc2	equ	0xFDE
 21780                           postdec2	equ	0xFDD
 21781                           fsr2h	equ	0xFDA
 21782                           fsr2l	equ	0xFD9
 21783                           status	equ	0xFD8
 21784                           
 21785 ;; *************** function _change_state_to_logs_12 *****************
 21786 ;; Defined at:
 21787 ;;		line 524 in file "UI.c"
 21788 ;; Parameters:    Size  Location     Type
 21789 ;;		None
 21790 ;; Auto vars:     Size  Location     Type
 21791 ;;		None
 21792 ;; Return value:  Size  Location     Type
 21793 ;;                  1    wreg      void 
 21794 ;; Registers used:
 21795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21796 ;; Tracked objects:
 21797 ;;		On entry : 0/0
 21798 ;;		On exit  : 0/0
 21799 ;;		Unchanged: 0/0
 21800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;Total ram usage:        0 bytes
 21806 ;; Hardware stack levels used:    1
 21807 ;; Hardware stack levels required when called:    3
 21808 ;; This function calls:
 21809 ;;		i2_lcdInst
 21810 ;;		i2_printf
 21811 ;; This function is called by:
 21812 ;;		_updateMenu
 21813 ;;		_inputHandler
 21814 ;; This function uses a non-reentrant model
 21815 ;;
 21816                           
 21817                           	psect	text75
 21818  0054C2                     __ptext75:
 21819                           	opt stack 0
 21820  0054C2                     _change_state_to_logs_12:
 21821                           	opt stack 18
 21822                           
 21823                           ;UI.c: 525: cur_state = 1012;
 21824                           
 21825                           ;incstack = 0
 21826  0054C2  0E03               	movlw	3
 21827  0054C4  0100               	movlb	0	; () banked
 21828  0054C6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21829  0054C8  0EF4               	movlw	244
 21830  0054CA  6FEC               	movwf	_cur_state& (0+255),b
 21831                           
 21832                           ; BSR set to: 0
 21833                           ;UI.c: 526: lcdInst(0b10000000);;
 21834  0054CC  0E80               	movlw	128
 21835  0054CE  ECED  F02B         	call	i2_lcdInst
 21836                           
 21837                           ;UI.c: 527: printf("LOG 1           ");
 21838  0054D2  0ECF               	movlw	low STR_41
 21839  0054D4  6E0D               	movwf	i2printf@f,c
 21840  0054D6  0EFC               	movlw	high STR_41
 21841  0054D8  6E0E               	movwf	i2printf@f+1,c
 21842  0054DA  ECA3  F011         	call	i2_printf	;wreg free
 21843                           
 21844                           ;UI.c: 528: lcdInst(0b11000000);;
 21845  0054DE  0EC0               	movlw	192
 21846  0054E0  ECED  F02B         	call	i2_lcdInst
 21847                           
 21848                           ;UI.c: 529: printf("LOG 2          <");
 21849  0054E4  0E8A               	movlw	low STR_42
 21850  0054E6  6E0D               	movwf	i2printf@f,c
 21851  0054E8  0EFD               	movlw	high STR_42
 21852  0054EA  6E0E               	movwf	i2printf@f+1,c
 21853  0054EC  ECA3  F011         	call	i2_printf	;wreg free
 21854  0054F0  0012               	return		;funcret
 21855  0054F2                     __end_of_change_state_to_logs_12:
 21856                           	opt stack 0
 21857                           pclatu	equ	0xFFB
 21858                           pclath	equ	0xFFA
 21859                           tblptru	equ	0xFF8
 21860                           tblptrh	equ	0xFF7
 21861                           tblptrl	equ	0xFF6
 21862                           tablat	equ	0xFF5
 21863                           prodh	equ	0xFF4
 21864                           prodl	equ	0xFF3
 21865                           intcon	equ	0xFF2
 21866                           intcon2	equ	0xFF1
 21867                           intcon3	equ	0xFF0
 21868                           indf0	equ	0xFEF
 21869                           postinc0	equ	0xFEE
 21870                           fsr0h	equ	0xFEA
 21871                           fsr0l	equ	0xFE9
 21872                           wreg	equ	0xFE8
 21873                           postdec1	equ	0xFE5
 21874                           fsr1h	equ	0xFE2
 21875                           fsr1l	equ	0xFE1
 21876                           indf2	equ	0xFDF
 21877                           postinc2	equ	0xFDE
 21878                           postdec2	equ	0xFDD
 21879                           fsr2h	equ	0xFDA
 21880                           fsr2l	equ	0xFD9
 21881                           status	equ	0xFD8
 21882                           
 21883 ;; *************** function _change_state_to_logs_11 *****************
 21884 ;; Defined at:
 21885 ;;		line 517 in file "UI.c"
 21886 ;; Parameters:    Size  Location     Type
 21887 ;;		None
 21888 ;; Auto vars:     Size  Location     Type
 21889 ;;		None
 21890 ;; Return value:  Size  Location     Type
 21891 ;;                  1    wreg      void 
 21892 ;; Registers used:
 21893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21894 ;; Tracked objects:
 21895 ;;		On entry : 0/0
 21896 ;;		On exit  : 0/0
 21897 ;;		Unchanged: 0/0
 21898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21903 ;;Total ram usage:        0 bytes
 21904 ;; Hardware stack levels used:    1
 21905 ;; Hardware stack levels required when called:    3
 21906 ;; This function calls:
 21907 ;;		i2_lcdInst
 21908 ;;		i2_printf
 21909 ;; This function is called by:
 21910 ;;		_updateMenu
 21911 ;;		_inputHandler
 21912 ;; This function uses a non-reentrant model
 21913 ;;
 21914                           
 21915                           	psect	text76
 21916  0054F2                     __ptext76:
 21917                           	opt stack 0
 21918  0054F2                     _change_state_to_logs_11:
 21919                           	opt stack 18
 21920                           
 21921                           ;UI.c: 518: cur_state = 1011;
 21922                           
 21923                           ;incstack = 0
 21924  0054F2  0E03               	movlw	3
 21925  0054F4  0100               	movlb	0	; () banked
 21926  0054F6  6FED               	movwf	(_cur_state+1)& (0+255),b
 21927  0054F8  0EF3               	movlw	243
 21928  0054FA  6FEC               	movwf	_cur_state& (0+255),b
 21929                           
 21930                           ; BSR set to: 0
 21931                           ;UI.c: 519: lcdInst(0b10000000);;
 21932  0054FC  0E80               	movlw	128
 21933  0054FE  ECED  F02B         	call	i2_lcdInst
 21934                           
 21935                           ;UI.c: 520: printf("LOG 1          <");
 21936  005502  0E79               	movlw	low STR_39
 21937  005504  6E0D               	movwf	i2printf@f,c
 21938  005506  0EFD               	movlw	high STR_39
 21939  005508  6E0E               	movwf	i2printf@f+1,c
 21940  00550A  ECA3  F011         	call	i2_printf	;wreg free
 21941                           
 21942                           ;UI.c: 521: lcdInst(0b11000000);;
 21943  00550E  0EC0               	movlw	192
 21944  005510  ECED  F02B         	call	i2_lcdInst
 21945                           
 21946                           ;UI.c: 522: printf("LOG 2           ");
 21947  005514  0EE0               	movlw	low STR_40
 21948  005516  6E0D               	movwf	i2printf@f,c
 21949  005518  0EFC               	movlw	high STR_40
 21950  00551A  6E0E               	movwf	i2printf@f+1,c
 21951  00551C  ECA3  F011         	call	i2_printf	;wreg free
 21952  005520  0012               	return		;funcret
 21953  005522                     __end_of_change_state_to_logs_11:
 21954                           	opt stack 0
 21955                           pclatu	equ	0xFFB
 21956                           pclath	equ	0xFFA
 21957                           tblptru	equ	0xFF8
 21958                           tblptrh	equ	0xFF7
 21959                           tblptrl	equ	0xFF6
 21960                           tablat	equ	0xFF5
 21961                           prodh	equ	0xFF4
 21962                           prodl	equ	0xFF3
 21963                           intcon	equ	0xFF2
 21964                           intcon2	equ	0xFF1
 21965                           intcon3	equ	0xFF0
 21966                           indf0	equ	0xFEF
 21967                           postinc0	equ	0xFEE
 21968                           fsr0h	equ	0xFEA
 21969                           fsr0l	equ	0xFE9
 21970                           wreg	equ	0xFE8
 21971                           postdec1	equ	0xFE5
 21972                           fsr1h	equ	0xFE2
 21973                           fsr1l	equ	0xFE1
 21974                           indf2	equ	0xFDF
 21975                           postinc2	equ	0xFDE
 21976                           postdec2	equ	0xFDD
 21977                           fsr2h	equ	0xFDA
 21978                           fsr2l	equ	0xFD9
 21979                           status	equ	0xFD8
 21980                           
 21981 ;; *************** function _dispLogs *****************
 21982 ;; Defined at:
 21983 ;;		line 470 in file "UI.c"
 21984 ;; Parameters:    Size  Location     Type
 21985 ;;  myLog           2   17[COMRAM] int 
 21986 ;; Auto vars:     Size  Location     Type
 21987 ;;		None
 21988 ;; Return value:  Size  Location     Type
 21989 ;;                  1    wreg      void 
 21990 ;; Registers used:
 21991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21992 ;; Tracked objects:
 21993 ;;		On entry : 0/0
 21994 ;;		On exit  : 0/0
 21995 ;;		Unchanged: 0/0
 21996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22001 ;;Total ram usage:        2 bytes
 22002 ;; Hardware stack levels used:    1
 22003 ;; Hardware stack levels required when called:    2
 22004 ;; This function calls:
 22005 ;;		_retrieveLog
 22006 ;; This function is called by:
 22007 ;;		_updateMenu
 22008 ;; This function uses a non-reentrant model
 22009 ;;
 22010                           
 22011                           	psect	text77
 22012  00569C                     __ptext77:
 22013                           	opt stack 0
 22014  00569C                     _dispLogs:
 22015                           	opt stack 20
 22016                           
 22017                           ;UI.c: 471: logstate = 1;
 22018                           
 22019                           ;incstack = 0
 22020  00569C  0E00               	movlw	0
 22021  00569E  0100               	movlb	0	; () banked
 22022  0056A0  6FF9               	movwf	(_logstate+1)& (0+255),b
 22023  0056A2  0E01               	movlw	1
 22024  0056A4  6FF8               	movwf	_logstate& (0+255),b
 22025                           
 22026                           ; BSR set to: 0
 22027                           ;UI.c: 472: log = myLog;
 22028  0056A6  C012  F0F4         	movff	dispLogs@myLog,_log
 22029  0056AA  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 22030                           
 22031                           ; BSR set to: 0
 22032                           ;UI.c: 473: retrieveLog(myLog - 1);
 22033  0056AE  0EFF               	movlw	255
 22034  0056B0  2412               	addwf	dispLogs@myLog,w,c
 22035  0056B2  6E07               	movwf	retrieveLog@logNum,c
 22036  0056B4  0EFF               	movlw	255
 22037  0056B6  2013               	addwfc	dispLogs@myLog+1,w,c
 22038  0056B8  6E08               	movwf	retrieveLog@logNum+1,c
 22039  0056BA  EC7C  F01F         	call	_retrieveLog	;wreg free
 22040  0056BE  0012               	return		;funcret
 22041  0056C0                     __end_of_dispLogs:
 22042                           	opt stack 0
 22043                           pclatu	equ	0xFFB
 22044                           pclath	equ	0xFFA
 22045                           tblptru	equ	0xFF8
 22046                           tblptrh	equ	0xFF7
 22047                           tblptrl	equ	0xFF6
 22048                           tablat	equ	0xFF5
 22049                           prodh	equ	0xFF4
 22050                           prodl	equ	0xFF3
 22051                           intcon	equ	0xFF2
 22052                           intcon2	equ	0xFF1
 22053                           intcon3	equ	0xFF0
 22054                           indf0	equ	0xFEF
 22055                           postinc0	equ	0xFEE
 22056                           fsr0h	equ	0xFEA
 22057                           fsr0l	equ	0xFE9
 22058                           wreg	equ	0xFE8
 22059                           postdec1	equ	0xFE5
 22060                           fsr1h	equ	0xFE2
 22061                           fsr1l	equ	0xFE1
 22062                           indf2	equ	0xFDF
 22063                           postinc2	equ	0xFDE
 22064                           postdec2	equ	0xFDD
 22065                           fsr2h	equ	0xFDA
 22066                           fsr2l	equ	0xFD9
 22067                           status	equ	0xFD8
 22068                           
 22069 ;; *************** function _retrieveLog *****************
 22070 ;; Defined at:
 22071 ;;		line 134 in file "EEPROM.c"
 22072 ;; Parameters:    Size  Location     Type
 22073 ;;  logNum          2    6[COMRAM] int 
 22074 ;; Auto vars:     Size  Location     Type
 22075 ;;  i               2   13[COMRAM] int 
 22076 ;;  addr            2   15[COMRAM] unsigned short 
 22077 ;;  byte3           1   12[COMRAM] unsigned char 
 22078 ;;  byte2           1   11[COMRAM] unsigned char 
 22079 ;;  byte1           1   10[COMRAM] unsigned char 
 22080 ;; Return value:  Size  Location     Type
 22081 ;;                  1    wreg      void 
 22082 ;; Registers used:
 22083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22084 ;; Tracked objects:
 22085 ;;		On entry : 0/0
 22086 ;;		On exit  : 0/0
 22087 ;;		Unchanged: 0/0
 22088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22090 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22092 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22093 ;;Total ram usage:       11 bytes
 22094 ;; Hardware stack levels used:    1
 22095 ;; Hardware stack levels required when called:    1
 22096 ;; This function calls:
 22097 ;;		i2_EEPROM_read
 22098 ;;		i2___wmul
 22099 ;; This function is called by:
 22100 ;;		_dispLogs
 22101 ;; This function uses a non-reentrant model
 22102 ;;
 22103                           
 22104                           	psect	text78
 22105  003EF8                     __ptext78:
 22106                           	opt stack 0
 22107  003EF8                     _retrieveLog:
 22108                           	opt stack 20
 22109                           
 22110                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 22111                           
 22112                           ;incstack = 0
 22113  003EF8  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22114  003EFC  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22115  003F00  0E00               	movlw	0
 22116  003F02  6E04               	movwf	i2___wmul@multiplicand+1,c
 22117  003F04  0E0B               	movlw	11
 22118  003F06  6E03               	movwf	i2___wmul@multiplicand,c
 22119  003F08  EC28  F02B         	call	i2___wmul	;wreg free
 22120  003F0C  0E01               	movlw	1
 22121  003F0E  2401               	addwf	?i2___wmul,w,c
 22122  003F10  6E10               	movwf	retrieveLog@addr,c
 22123  003F12  0E00               	movlw	0
 22124  003F14  2002               	addwfc	?i2___wmul+1,w,c
 22125  003F16  6E11               	movwf	retrieveLog@addr+1,c
 22126                           
 22127                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 22128  003F18  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22129  003F1C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22130  003F20  ECB9  F02B         	call	i2_EEPROM_read	;wreg free
 22131  003F24  6E0B               	movwf	retrieveLog@byte1,c
 22132                           
 22133                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 22134  003F26  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22135  003F2A  0E80               	movlw	128
 22136  003F2C  1609               	andwf	??_retrieveLog,f,c
 22137  003F2E  5009               	movf	??_retrieveLog,w,c
 22138  003F30  6E63               	movwf	_log_completion,c
 22139  003F32  6A64               	clrf	_log_completion+1,c
 22140                           
 22141                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 22142  003F34  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22143  003F38  0E0F               	movlw	15
 22144  003F3A  1609               	andwf	??_retrieveLog,f,c
 22145  003F3C  5009               	movf	??_retrieveLog,w,c
 22146  003F3E  0101               	movlb	1	; () banked
 22147  003F40  6F43               	movwf	_log_count_total& (0+255),b
 22148  003F42  6B44               	clrf	(_log_count_total+1)& (0+255),b
 22149                           
 22150                           ; BSR set to: 1
 22151                           ;EEPROM.c: 146: addr++;
 22152  003F44  4A10               	infsnz	retrieveLog@addr,f,c
 22153  003F46  2A11               	incf	retrieveLog@addr+1,f,c
 22154                           
 22155                           ; BSR set to: 1
 22156                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 22157  003F48  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22158  003F4C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22159  003F50  ECB9  F02B         	call	i2_EEPROM_read	;wreg free
 22160  003F54  6E0C               	movwf	retrieveLog@byte2,c
 22161                           
 22162                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 22163  003F56  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22164  003F5A  3A09               	swapf	??_retrieveLog,f,c
 22165  003F5C  0E0F               	movlw	15
 22166  003F5E  1609               	andwf	??_retrieveLog,f,c
 22167  003F60  0E0F               	movlw	15
 22168  003F62  1609               	andwf	??_retrieveLog,f,c
 22169  003F64  5009               	movf	??_retrieveLog,w,c
 22170  003F66  6E65               	movwf	_log_count_pop_no_tab,c
 22171  003F68  6A66               	clrf	_log_count_pop_no_tab+1,c
 22172                           
 22173                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 22174  003F6A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22175  003F6E  0E0F               	movlw	15
 22176  003F70  1609               	andwf	??_retrieveLog,f,c
 22177  003F72  5009               	movf	??_retrieveLog,w,c
 22178  003F74  6E67               	movwf	_log_count_pop_w_tab,c
 22179  003F76  6A68               	clrf	_log_count_pop_w_tab+1,c
 22180                           
 22181                           ;EEPROM.c: 152: addr++;
 22182  003F78  4A10               	infsnz	retrieveLog@addr,f,c
 22183  003F7A  2A11               	incf	retrieveLog@addr+1,f,c
 22184                           
 22185                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 22186  003F7C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22187  003F80  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22188  003F84  ECB9  F02B         	call	i2_EEPROM_read	;wreg free
 22189  003F88  6E0D               	movwf	retrieveLog@byte3,c
 22190                           
 22191                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 22192  003F8A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 22193  003F8E  3A09               	swapf	??_retrieveLog,f,c
 22194  003F90  0E0F               	movlw	15
 22195  003F92  1609               	andwf	??_retrieveLog,f,c
 22196  003F94  0E0F               	movlw	15
 22197  003F96  1609               	andwf	??_retrieveLog,f,c
 22198  003F98  5009               	movf	??_retrieveLog,w,c
 22199  003F9A  0101               	movlb	1	; () banked
 22200  003F9C  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 22201  003F9E  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 22202                           
 22203                           ; BSR set to: 1
 22204                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 22205  003FA0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 22206  003FA4  0E0F               	movlw	15
 22207  003FA6  1609               	andwf	??_retrieveLog,f,c
 22208  003FA8  5009               	movf	??_retrieveLog,w,c
 22209  003FAA  0101               	movlb	1	; () banked
 22210  003FAC  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 22211  003FAE  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 22212                           
 22213                           ; BSR set to: 1
 22214                           ;EEPROM.c: 156: addr++;
 22215  003FB0  4A10               	infsnz	retrieveLog@addr,f,c
 22216  003FB2  2A11               	incf	retrieveLog@addr+1,f,c
 22217                           
 22218                           ; BSR set to: 1
 22219                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 22220  003FB4  0E00               	movlw	0
 22221  003FB6  6E0F               	movwf	retrieveLog@i+1,c
 22222  003FB8  0E00               	movlw	0
 22223  003FBA  6E0E               	movwf	retrieveLog@i,c
 22224  003FBC                     i2l7096:
 22225                           
 22226                           ; BSR set to: 1
 22227  003FBC  BE0F               	btfsc	retrieveLog@i+1,7,c
 22228  003FBE  D006               	goto	i2l7100
 22229  003FC0  500F               	movf	retrieveLog@i+1,w,c
 22230  003FC2  E11E               	bnz	i2l7108
 22231  003FC4  0E07               	movlw	7
 22232  003FC6  5C0E               	subwf	retrieveLog@i,w,c
 22233  003FC8  B0D8               	btfsc	status,0,c
 22234  003FCA  D01A               	goto	i2l7108
 22235  003FCC                     i2l7100:
 22236                           
 22237                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 22238  003FCC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22239  003FD0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22240  003FD4  ECB9  F02B         	call	i2_EEPROM_read	;wreg free
 22241  003FD8  6E09               	movwf	??_retrieveLog& (0+255),c
 22242  003FDA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 22243  003FDC  90D8               	bcf	status,0,c
 22244  003FDE  340E               	rlcf	retrieveLog@i,w,c
 22245  003FE0  6ED9               	movwf	fsr2l,c
 22246  003FE2  340F               	rlcf	retrieveLog@i+1,w,c
 22247  003FE4  6EDA               	movwf	fsr2h,c
 22248  003FE6  0E00               	movlw	low _log_startTime
 22249  003FE8  26D9               	addwf	fsr2l,f,c
 22250  003FEA  0E01               	movlw	high _log_startTime
 22251  003FEC  22DA               	addwfc	fsr2h,f,c
 22252  003FEE  C009  FFDE         	movff	??_retrieveLog,postinc2
 22253  003FF2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 22254                           
 22255                           ;EEPROM.c: 161: addr++;
 22256  003FF6  4A10               	infsnz	retrieveLog@addr,f,c
 22257  003FF8  2A11               	incf	retrieveLog@addr+1,f,c
 22258  003FFA  4A0E               	infsnz	retrieveLog@i,f,c
 22259  003FFC  2A0F               	incf	retrieveLog@i+1,f,c
 22260  003FFE  D7DE               	goto	i2l7096
 22261  004000                     i2l7108:
 22262                           
 22263                           ;EEPROM.c: 162: }
 22264                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 22265  004000  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22266  004004  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22267  004008  ECB9  F02B         	call	i2_EEPROM_read	;wreg free
 22268  00400C  6E09               	movwf	??_retrieveLog& (0+255),c
 22269  00400E  5009               	movf	??_retrieveLog,w,c
 22270  004010  0100               	movlb	0	; () banked
 22271  004012  6FF6               	movwf	_log_total_time& (0+255),b
 22272  004014  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 22273                           
 22274                           ; BSR set to: 0
 22275  004016  0012               	return		;funcret
 22276  004018                     __end_of_retrieveLog:
 22277                           	opt stack 0
 22278                           pclatu	equ	0xFFB
 22279                           pclath	equ	0xFFA
 22280                           tblptru	equ	0xFF8
 22281                           tblptrh	equ	0xFF7
 22282                           tblptrl	equ	0xFF6
 22283                           tablat	equ	0xFF5
 22284                           prodh	equ	0xFF4
 22285                           prodl	equ	0xFF3
 22286                           intcon	equ	0xFF2
 22287                           intcon2	equ	0xFF1
 22288                           intcon3	equ	0xFF0
 22289                           indf0	equ	0xFEF
 22290                           postinc0	equ	0xFEE
 22291                           fsr0h	equ	0xFEA
 22292                           fsr0l	equ	0xFE9
 22293                           wreg	equ	0xFE8
 22294                           postdec1	equ	0xFE5
 22295                           fsr1h	equ	0xFE2
 22296                           fsr1l	equ	0xFE1
 22297                           indf2	equ	0xFDF
 22298                           postinc2	equ	0xFDE
 22299                           postdec2	equ	0xFDD
 22300                           fsr2h	equ	0xFDA
 22301                           fsr2l	equ	0xFD9
 22302                           status	equ	0xFD8
 22303                           
 22304 ;; *************** function i2_EEPROM_read *****************
 22305 ;; Defined at:
 22306 ;;		line 68 in file "EEPROM.c"
 22307 ;; Parameters:    Size  Location     Type
 22308 ;;  address         2    0[COMRAM] unsigned short 
 22309 ;; Auto vars:     Size  Location     Type
 22310 ;;		None
 22311 ;; Return value:  Size  Location     Type
 22312 ;;                  1    wreg      unsigned char 
 22313 ;; Registers used:
 22314 ;;		wreg, status,2
 22315 ;; Tracked objects:
 22316 ;;		On entry : 0/0
 22317 ;;		On exit  : 0/0
 22318 ;;		Unchanged: 0/0
 22319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22324 ;;Total ram usage:        2 bytes
 22325 ;; Hardware stack levels used:    1
 22326 ;; This function calls:
 22327 ;;		Nothing
 22328 ;; This function is called by:
 22329 ;;		_retrieveLog
 22330 ;; This function uses a non-reentrant model
 22331 ;;
 22332                           
 22333                           	psect	text79
 22334  005772                     __ptext79:
 22335                           	opt stack 0
 22336  005772                     i2_EEPROM_read:
 22337                           	opt stack 20
 22338                           
 22339                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 22340                           
 22341                           ; BSR set to: 0
 22342                           ;incstack = 0
 22343  005772  5002               	movf	i2EEPROM_read@address+1,w,c
 22344  005774  6EAA               	movwf	4010,c	;volatile
 22345                           
 22346                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 22347  005776  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 22348                           
 22349                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 22350  00577A  9EA6               	bcf	4006,7,c	;volatile
 22351                           
 22352                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 22353  00577C  9CA6               	bcf	4006,6,c	;volatile
 22354                           
 22355                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 22356  00577E  80A6               	bsf	4006,0,c	;volatile
 22357  005780                     i2l1112:
 22358  005780  B0A6               	btfsc	4006,0,c	;volatile
 22359  005782  D7FE               	goto	i2l1112
 22360                           
 22361                           ;EEPROM.c: 81: return EEDATA;
 22362  005784  50A8               	movf	4008,w,c	;volatile
 22363  005786  0012               	return	
 22364  005788                     __end_ofi2_EEPROM_read:
 22365                           	opt stack 0
 22366                           pclatu	equ	0xFFB
 22367                           pclath	equ	0xFFA
 22368                           tblptru	equ	0xFF8
 22369                           tblptrh	equ	0xFF7
 22370                           tblptrl	equ	0xFF6
 22371                           tablat	equ	0xFF5
 22372                           prodh	equ	0xFF4
 22373                           prodl	equ	0xFF3
 22374                           intcon	equ	0xFF2
 22375                           intcon2	equ	0xFF1
 22376                           intcon3	equ	0xFF0
 22377                           indf0	equ	0xFEF
 22378                           postinc0	equ	0xFEE
 22379                           fsr0h	equ	0xFEA
 22380                           fsr0l	equ	0xFE9
 22381                           wreg	equ	0xFE8
 22382                           postdec1	equ	0xFE5
 22383                           fsr1h	equ	0xFE2
 22384                           fsr1l	equ	0xFE1
 22385                           indf2	equ	0xFDF
 22386                           postinc2	equ	0xFDE
 22387                           postdec2	equ	0xFDD
 22388                           fsr2h	equ	0xFDA
 22389                           fsr2l	equ	0xFD9
 22390                           status	equ	0xFD8
 22391                           
 22392 ;; *************** function _updateArmState *****************
 22393 ;; Defined at:
 22394 ;;		line 619 in file "sort.c"
 22395 ;; Parameters:    Size  Location     Type
 22396 ;;		None
 22397 ;; Auto vars:     Size  Location     Type
 22398 ;;		None
 22399 ;; Return value:  Size  Location     Type
 22400 ;;                  1    wreg      void 
 22401 ;; Registers used:
 22402 ;;		wreg, status,2, status,0
 22403 ;; Tracked objects:
 22404 ;;		On entry : 0/0
 22405 ;;		On exit  : 0/0
 22406 ;;		Unchanged: 0/0
 22407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22410 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22411 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22412 ;;Total ram usage:        2 bytes
 22413 ;; Hardware stack levels used:    1
 22414 ;; This function calls:
 22415 ;;		Nothing
 22416 ;; This function is called by:
 22417 ;;		_handler
 22418 ;; This function uses a non-reentrant model
 22419 ;;
 22420                           
 22421                           	psect	text80
 22422  0051C8                     __ptext80:
 22423                           	opt stack 0
 22424  0051C8                     _updateArmState:
 22425                           	opt stack 23
 22426                           
 22427                           ;sort.c: 626: if(!was_low_2){
 22428                           
 22429                           ;incstack = 0
 22430  0051C8  5079               	movf	_was_low_2,w,c	;volatile
 22431  0051CA  107A               	iorwf	_was_low_2+1,w,c	;volatile
 22432  0051CC  B4D8               	btfsc	status,2,c
 22433  0051CE  D007               	goto	i2l9830
 22434  0051D0  D016               	goto	i2l933
 22435  0051D2                     i2l9824:
 22436                           
 22437                           ;sort.c: 631: PR2 = 0x20;
 22438  0051D2  0E20               	movlw	32
 22439  0051D4  6ECB               	movwf	4043,c	;volatile
 22440                           
 22441                           ;sort.c: 632: break;
 22442  0051D6  0012               	return	
 22443  0051D8                     i2l9826:
 22444                           
 22445                           ;sort.c: 635: PR2 = 0x40;
 22446  0051D8  0E40               	movlw	64
 22447  0051DA  6ECB               	movwf	4043,c	;volatile
 22448                           
 22449                           ;sort.c: 637: }
 22450                           
 22451                           ;sort.c: 636: break;
 22452  0051DC  0012               	return	
 22453  0051DE                     i2l9830:
 22454  0051DE  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 22455  0051E2  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 22456                           
 22457                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22458                           ; Switch size 1, requested type "space"
 22459                           ; Number of cases is 1, Range of values is 0 to 0
 22460                           ; switch strategies available:
 22461                           ; Name         Instructions Cycles
 22462                           ; simple_byte            4     3 (average)
 22463                           ;	Chosen strategy is simple_byte
 22464  0051E6  5002               	movf	??_updateArmState+1,w,c
 22465  0051E8  0A00               	xorlw	0	; case 0
 22466  0051EA  A4D8               	btfss	status,2,c
 22467  0051EC  0012               	return	
 22468                           
 22469                           ; Switch size 1, requested type "space"
 22470                           ; Number of cases is 2, Range of values is 0 to 1
 22471                           ; switch strategies available:
 22472                           ; Name         Instructions Cycles
 22473                           ; simple_byte            7     4 (average)
 22474                           ;	Chosen strategy is simple_byte
 22475  0051EE  5001               	movf	??_updateArmState,w,c
 22476  0051F0  0A00               	xorlw	0	; case 0
 22477  0051F2  B4D8               	btfsc	status,2,c
 22478  0051F4  D7EE               	goto	i2l9824
 22479  0051F6  0A01               	xorlw	1	; case 1
 22480  0051F8  A4D8               	btfss	status,2,c
 22481                           
 22482                           ;sort.c: 638: }
 22483  0051FA  0012               	return	
 22484  0051FC  D7ED               	goto	i2l9826
 22485  0051FE                     i2l933:
 22486                           
 22487                           ;sort.c: 639: else{
 22488                           ;sort.c: 641: PR2 = 0xFF;
 22489  0051FE  68CB               	setf	4043,c	;volatile
 22490  005200  0012               	return	
 22491  005202                     __end_of_updateArmState:
 22492                           	opt stack 0
 22493                           pclatu	equ	0xFFB
 22494                           pclath	equ	0xFFA
 22495                           tblptru	equ	0xFF8
 22496                           tblptrh	equ	0xFF7
 22497                           tblptrl	equ	0xFF6
 22498                           tablat	equ	0xFF5
 22499                           prodh	equ	0xFF4
 22500                           prodl	equ	0xFF3
 22501                           intcon	equ	0xFF2
 22502                           intcon2	equ	0xFF1
 22503                           intcon3	equ	0xFF0
 22504                           indf0	equ	0xFEF
 22505                           postinc0	equ	0xFEE
 22506                           fsr0h	equ	0xFEA
 22507                           fsr0l	equ	0xFE9
 22508                           wreg	equ	0xFE8
 22509                           postdec1	equ	0xFE5
 22510                           fsr1h	equ	0xFE2
 22511                           fsr1l	equ	0xFE1
 22512                           indf2	equ	0xFDF
 22513                           postinc2	equ	0xFDE
 22514                           postdec2	equ	0xFDD
 22515                           fsr2h	equ	0xFDA
 22516                           fsr2l	equ	0xFD9
 22517                           status	equ	0xFD8
 22518                           
 22519 ;; *************** function _printSortTimer *****************
 22520 ;; Defined at:
 22521 ;;		line 469 in file "sort.c"
 22522 ;; Parameters:    Size  Location     Type
 22523 ;;		None
 22524 ;; Auto vars:     Size  Location     Type
 22525 ;;  i               2   70[COMRAM] int 
 22526 ;;  i               2   72[COMRAM] int 
 22527 ;;  curTime        14   44[COMRAM] int [7]
 22528 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22529 ;;  sec             2   64[COMRAM] int 
 22530 ;;  min             2   62[COMRAM] int 
 22531 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22532 ;;  start_sec       2   58[COMRAM] unsigned int 
 22533 ;; Return value:  Size  Location     Type
 22534 ;;                  1    wreg      void 
 22535 ;; Registers used:
 22536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22537 ;; Tracked objects:
 22538 ;;		On entry : 0/0
 22539 ;;		On exit  : 0/0
 22540 ;;		Unchanged: 0/0
 22541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22543 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22545 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;Total ram usage:       33 bytes
 22547 ;; Hardware stack levels used:    1
 22548 ;; Hardware stack levels required when called:    3
 22549 ;; This function calls:
 22550 ;;		i2___lwdiv
 22551 ;;		i2___lwmod
 22552 ;;		i2___wmul
 22553 ;;		i2_delay_ms
 22554 ;;		i2_getRTC
 22555 ;;		i2_lcdInst
 22556 ;;		i2_printf
 22557 ;; This function is called by:
 22558 ;;		_handler
 22559 ;; This function uses a non-reentrant model
 22560 ;;
 22561                           
 22562                           	psect	text81
 22563  002F3C                     __ptext81:
 22564                           	opt stack 0
 22565  002F3C                     _printSortTimer:
 22566                           	opt stack 20
 22567                           
 22568                           ;sort.c: 470: getRTC();
 22569                           
 22570                           ;incstack = 0
 22571  002F3C  EC41  F026         	call	i2_getRTC	;wreg free
 22572                           
 22573                           ;sort.c: 471: int curTime[7];
 22574                           ;sort.c: 472: for(int i = 0; i < 7; i++){
 22575  002F40  0E00               	movlw	0
 22576  002F42  6E4A               	movwf	printSortTimer@i+1,c
 22577  002F44  0E00               	movlw	0
 22578  002F46  6E49               	movwf	printSortTimer@i,c
 22579  002F48                     i2l9666:
 22580  002F48  BE4A               	btfsc	printSortTimer@i+1,7,c
 22581  002F4A  D006               	goto	i2l9670
 22582  002F4C  504A               	movf	printSortTimer@i+1,w,c
 22583  002F4E  E131               	bnz	i2l9676
 22584  002F50  0E07               	movlw	7
 22585  002F52  5C49               	subwf	printSortTimer@i,w,c
 22586  002F54  B0D8               	btfsc	status,0,c
 22587  002F56  D02D               	goto	i2l9676
 22588  002F58                     i2l9670:
 22589                           
 22590                           ;sort.c: 473: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22591  002F58  0E1C               	movlw	low _time
 22592  002F5A  2449               	addwf	printSortTimer@i,w,c
 22593  002F5C  6ED9               	movwf	fsr2l,c
 22594  002F5E  0E01               	movlw	high _time
 22595  002F60  204A               	addwfc	printSortTimer@i+1,w,c
 22596  002F62  6EDA               	movwf	fsr2h,c
 22597  002F64  50DF               	movf	indf2,w,c
 22598  002F66  6E2A               	movwf	??_printSortTimer& (0+255),c
 22599  002F68  3A2A               	swapf	??_printSortTimer,f,c
 22600  002F6A  0E0F               	movlw	15
 22601  002F6C  162A               	andwf	??_printSortTimer,f,c
 22602  002F6E  0E0F               	movlw	15
 22603  002F70  162A               	andwf	??_printSortTimer,f,c
 22604  002F72  502A               	movf	??_printSortTimer,w,c
 22605  002F74  0D0A               	mullw	10
 22606  002F76  0E1C               	movlw	low _time
 22607  002F78  2449               	addwf	printSortTimer@i,w,c
 22608  002F7A  6ED9               	movwf	fsr2l,c
 22609  002F7C  0E01               	movlw	high _time
 22610  002F7E  204A               	addwfc	printSortTimer@i+1,w,c
 22611  002F80  6EDA               	movwf	fsr2h,c
 22612  002F82  50DF               	movf	indf2,w,c
 22613  002F84  0B0F               	andlw	15
 22614  002F86  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22615  002F88  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22616  002F8A  50F3               	movf	prodl,w,c
 22617  002F8C  262B               	addwf	??_printSortTimer+1,f,c
 22618  002F8E  50F4               	movf	prodh,w,c
 22619  002F90  222C               	addwfc	??_printSortTimer+2,f,c
 22620  002F92  90D8               	bcf	status,0,c
 22621  002F94  3449               	rlcf	printSortTimer@i,w,c
 22622  002F96  6ED9               	movwf	fsr2l,c
 22623  002F98  344A               	rlcf	printSortTimer@i+1,w,c
 22624  002F9A  6EDA               	movwf	fsr2h,c
 22625  002F9C  0E2D               	movlw	low printSortTimer@curTime
 22626  002F9E  26D9               	addwf	fsr2l,f,c
 22627  002FA0  0E00               	movlw	high printSortTimer@curTime
 22628  002FA2  22DA               	addwfc	fsr2h,f,c
 22629  002FA4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22630  002FA8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22631  002FAC  4A49               	infsnz	printSortTimer@i,f,c
 22632  002FAE  2A4A               	incf	printSortTimer@i+1,f,c
 22633  002FB0  D7CB               	goto	i2l9666
 22634  002FB2                     i2l9676:
 22635                           
 22636                           ;sort.c: 474: }
 22637                           ;sort.c: 475: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22638  002FB2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22639  002FB6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22640  002FBA  0E00               	movlw	0
 22641  002FBC  6E04               	movwf	i2___wmul@multiplicand+1,c
 22642  002FBE  0E3C               	movlw	60
 22643  002FC0  6E03               	movwf	i2___wmul@multiplicand,c
 22644  002FC2  EC28  F02B         	call	i2___wmul	;wreg free
 22645  002FC6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22646  002FCA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22647  002FCE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22648  002FD2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22649  002FD6  0E0E               	movlw	14
 22650  002FD8  6E04               	movwf	i2___wmul@multiplicand+1,c
 22651  002FDA  0E10               	movlw	16
 22652  002FDC  6E03               	movwf	i2___wmul@multiplicand,c
 22653  002FDE  EC28  F02B         	call	i2___wmul	;wreg free
 22654  002FE2  5001               	movf	?i2___wmul,w,c
 22655  002FE4  262A               	addwf	??_printSortTimer,f,c
 22656  002FE6  5002               	movf	?i2___wmul+1,w,c
 22657  002FE8  222B               	addwfc	??_printSortTimer+1,f,c
 22658  002FEA  0101               	movlb	1	; () banked
 22659  002FEC  510E               	movf	_startTime& (0+255),w,b
 22660  002FEE  242A               	addwf	??_printSortTimer,w,c
 22661  002FF0  6E3B               	movwf	printSortTimer@start_sec,c
 22662  002FF2  0101               	movlb	1	; () banked
 22663  002FF4  510F               	movf	(_startTime+1)& (0+255),w,b
 22664  002FF6  202B               	addwfc	??_printSortTimer+1,w,c
 22665  002FF8  6E3C               	movwf	printSortTimer@start_sec+1,c
 22666                           
 22667                           ;sort.c: 476: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22668  002FFA  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22669  002FFE  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22670  003002  0E00               	movlw	0
 22671  003004  6E04               	movwf	i2___wmul@multiplicand+1,c
 22672  003006  0E3C               	movlw	60
 22673  003008  6E03               	movwf	i2___wmul@multiplicand,c
 22674  00300A  EC28  F02B         	call	i2___wmul	;wreg free
 22675  00300E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22676  003012  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22677  003016  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22678  00301A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22679  00301E  0E0E               	movlw	14
 22680  003020  6E04               	movwf	i2___wmul@multiplicand+1,c
 22681  003022  0E10               	movlw	16
 22682  003024  6E03               	movwf	i2___wmul@multiplicand,c
 22683  003026  EC28  F02B         	call	i2___wmul	;wreg free
 22684  00302A  5001               	movf	?i2___wmul,w,c
 22685  00302C  262A               	addwf	??_printSortTimer,f,c
 22686  00302E  5002               	movf	?i2___wmul+1,w,c
 22687  003030  222B               	addwfc	??_printSortTimer+1,f,c
 22688  003032  502D               	movf	printSortTimer@curTime,w,c
 22689  003034  242A               	addwf	??_printSortTimer,w,c
 22690  003036  6E3D               	movwf	printSortTimer@cur_sec,c
 22691  003038  502E               	movf	printSortTimer@curTime+1,w,c
 22692  00303A  202B               	addwfc	??_printSortTimer+1,w,c
 22693  00303C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22694                           
 22695                           ;sort.c: 477: unsigned int timeDiff = cur_sec - start_sec;
 22696  00303E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22697  003042  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22698  003046  1E2A               	comf	??_printSortTimer,f,c
 22699  003048  1E2B               	comf	??_printSortTimer+1,f,c
 22700  00304A  4A2A               	infsnz	??_printSortTimer,f,c
 22701  00304C  2A2B               	incf	??_printSortTimer+1,f,c
 22702  00304E  503D               	movf	printSortTimer@cur_sec,w,c
 22703  003050  242A               	addwf	??_printSortTimer,w,c
 22704  003052  6E45               	movwf	printSortTimer@timeDiff,c
 22705  003054  503E               	movf	printSortTimer@cur_sec+1,w,c
 22706  003056  202B               	addwfc	??_printSortTimer+1,w,c
 22707  003058  6E46               	movwf	printSortTimer@timeDiff+1,c
 22708                           
 22709                           ;sort.c: 479: total_time = timeDiff;
 22710  00305A  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22711  00305E  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22712                           
 22713                           ;sort.c: 481: if(f_most_recent_sort_time){
 22714  003062  0101               	movlb	1	; () banked
 22715  003064  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22716  003066  0101               	movlb	1	; () banked
 22717  003068  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22718  00306A  B4D8               	btfsc	status,2,c
 22719  00306C  D009               	goto	i2l9688
 22720                           
 22721                           ; BSR set to: 1
 22722                           ;sort.c: 482: most_recent_sort_time = total_time;
 22723  00306E  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22724  003072  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22725                           
 22726                           ; BSR set to: 1
 22727                           ;sort.c: 483: f_most_recent_sort_time = 0;
 22728  003076  0E00               	movlw	0
 22729  003078  0101               	movlb	1	; () banked
 22730  00307A  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22731  00307C  0E00               	movlw	0
 22732  00307E  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22733  003080                     i2l9688:
 22734                           
 22735                           ; BSR set to: 1
 22736                           ;sort.c: 484: }
 22737                           ;sort.c: 486: if(total_time - most_recent_sort_time == 20){
 22738  003080  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22739  003084  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22740  003088  1E2A               	comf	??_printSortTimer,f,c
 22741  00308A  1E2B               	comf	??_printSortTimer+1,f,c
 22742  00308C  4A2A               	infsnz	??_printSortTimer,f,c
 22743  00308E  2A2B               	incf	??_printSortTimer+1,f,c
 22744  003090  0100               	movlb	0	; () banked
 22745  003092  51FA               	movf	_total_time& (0+255),w,b
 22746  003094  262A               	addwf	??_printSortTimer,f,c
 22747  003096  0100               	movlb	0	; () banked
 22748  003098  51FB               	movf	(_total_time+1)& (0+255),w,b
 22749  00309A  222B               	addwfc	??_printSortTimer+1,f,c
 22750  00309C  0E14               	movlw	20
 22751  00309E  182A               	xorwf	??_printSortTimer,w,c
 22752  0030A0  102B               	iorwf	??_printSortTimer+1,w,c
 22753  0030A2  A4D8               	btfss	status,2,c
 22754  0030A4  D033               	goto	i2l9708
 22755                           
 22756                           ; BSR set to: 0
 22757                           ;sort.c: 487: LATBbits.LATB2 = 0;
 22758  0030A6  948A               	bcf	3978,2,c	;volatile
 22759                           
 22760                           ; BSR set to: 0
 22761                           ;sort.c: 488: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22762  0030A8  0E52               	movlw	82
 22763  0030AA  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22764  0030AC  0E2B               	movlw	43
 22765  0030AE  6E2A               	movwf	??_printSortTimer& (0+255),c
 22766  0030B0  0E00               	movlw	0
 22767  0030B2                     i2u1107_47:
 22768  0030B2  2EE8               	decfsz	wreg,f,c
 22769  0030B4  D7FE               	bra	i2u1107_47
 22770  0030B6  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22771  0030B8  D7FC               	bra	i2u1107_47
 22772  0030BA  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22773  0030BC  D7FA               	bra	i2u1107_47
 22774  0030BE  D000               	nop2	
 22775                           
 22776                           ;sort.c: 489: for(int i=0; i<46; i++){
 22777  0030C0  0E00               	movlw	0
 22778  0030C2  6E48               	movwf	printSortTimer@i_1222+1,c
 22779  0030C4  0E00               	movlw	0
 22780  0030C6  6E47               	movwf	printSortTimer@i_1222,c
 22781  0030C8  BE48               	btfsc	printSortTimer@i_1222+1,7,c
 22782  0030CA  D006               	goto	i2l9700
 22783  0030CC  5048               	movf	printSortTimer@i_1222+1,w,c
 22784  0030CE  E11D               	bnz	i2l885
 22785  0030D0  0E2E               	movlw	46
 22786  0030D2  5C47               	subwf	printSortTimer@i_1222,w,c
 22787  0030D4  B0D8               	btfsc	status,0,c
 22788  0030D6  D019               	goto	i2l885
 22789  0030D8                     i2l9700:
 22790                           
 22791                           ;sort.c: 490: LATBbits.LATB2 = !LATBbits.LATB2;
 22792  0030D8  B48A               	btfsc	3978,2,c	;volatile
 22793  0030DA  D003               	goto	i2u912_40
 22794  0030DC  6A2A               	clrf	??_printSortTimer& (0+255),c
 22795  0030DE  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22796  0030E0  D001               	goto	i2u913_48
 22797  0030E2                     i2u912_40:
 22798  0030E2  6A2A               	clrf	??_printSortTimer& (0+255),c
 22799  0030E4                     i2u913_48:
 22800  0030E4  462A               	rlncf	??_printSortTimer,f,c
 22801  0030E6  462A               	rlncf	??_printSortTimer,f,c
 22802  0030E8  508A               	movf	3978,w,c	;volatile
 22803  0030EA  182A               	xorwf	??_printSortTimer,w,c
 22804  0030EC  0BFB               	andlw	-5
 22805  0030EE  182A               	xorwf	??_printSortTimer,w,c
 22806  0030F0  6E8A               	movwf	3978,c	;volatile
 22807                           
 22808                           ;sort.c: 491: delay_ms(45-i);
 22809  0030F2  5047               	movf	printSortTimer@i_1222,w,c
 22810  0030F4  0800               	sublw	0
 22811  0030F6  0F2D               	addlw	45
 22812  0030F8  EC9F  F02B         	call	i2_delay_ms
 22813  0030FC  4A47               	infsnz	printSortTimer@i_1222,f,c
 22814  0030FE  2A48               	incf	printSortTimer@i_1222+1,f,c
 22815  003100  BE48               	btfsc	printSortTimer@i_1222+1,7,c
 22816  003102  D7EA               	goto	i2l9700
 22817  003104  5048               	movf	printSortTimer@i_1222+1,w,c
 22818  003106  E101               	bnz	i2u914_40
 22819  003108  D7E3               	goto	L21
 22820  00310A                     i2u914_40:
 22821  00310A                     i2l885:
 22822                           
 22823                           ;sort.c: 492: }
 22824                           ;sort.c: 493: LATBbits.LATB2 = 1;
 22825  00310A  848A               	bsf	3978,2,c	;volatile
 22826  00310C                     i2l9708:
 22827                           
 22828                           ;sort.c: 494: }
 22829                           ;sort.c: 496: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 22830  00310C  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22831  003110  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22832  003114  1E2A               	comf	??_printSortTimer,f,c
 22833  003116  1E2B               	comf	??_printSortTimer+1,f,c
 22834  003118  4A2A               	infsnz	??_printSortTimer,f,c
 22835  00311A  2A2B               	incf	??_printSortTimer+1,f,c
 22836  00311C  0100               	movlb	0	; () banked
 22837  00311E  51FA               	movf	_total_time& (0+255),w,b
 22838  003120  262A               	addwf	??_printSortTimer,f,c
 22839  003122  0100               	movlb	0	; () banked
 22840  003124  51FB               	movf	(_total_time+1)& (0+255),w,b
 22841  003126  222B               	addwfc	??_printSortTimer+1,f,c
 22842  003128  0E2A               	movlw	42
 22843  00312A  182A               	xorwf	??_printSortTimer,w,c
 22844  00312C  102B               	iorwf	??_printSortTimer+1,w,c
 22845  00312E  B4D8               	btfsc	status,2,c
 22846  003130  D007               	goto	i2l9712
 22847                           
 22848                           ; BSR set to: 0
 22849  003132  0EB3               	movlw	179
 22850  003134  0100               	movlb	0	; () banked
 22851  003136  19FA               	xorwf	_total_time& (0+255),w,b
 22852  003138  0100               	movlb	0	; () banked
 22853  00313A  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22854  00313C  A4D8               	btfss	status,2,c
 22855  00313E  D003               	goto	i2l9714
 22856  003140                     i2l9712:
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;sort.c: 497: machine_state = DoneSorting_state;
 22860  003140  0E02               	movlw	2
 22861  003142  0100               	movlb	0	; () banked
 22862  003144  6FFC               	movwf	_machine_state& (0+255),b
 22863  003146                     i2l9714:
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;sort.c: 499: }
 22867                           ;sort.c: 501: int min = (timeDiff % 3600) / 60;
 22868  003146  0E0E               	movlw	14
 22869  003148  6E04               	movwf	i2___lwmod@divisor+1,c
 22870  00314A  0E10               	movlw	16
 22871  00314C  6E03               	movwf	i2___lwmod@divisor,c
 22872  00314E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22873  003152  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22874  003156  ECC3  F028         	call	i2___lwmod	;wreg free
 22875  00315A  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22876  00315E  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22877  003162  0E00               	movlw	0
 22878  003164  6E09               	movwf	i2___lwdiv@divisor+1,c
 22879  003166  0E3C               	movlw	60
 22880  003168  6E08               	movwf	i2___lwdiv@divisor,c
 22881  00316A  EC04  F028         	call	i2___lwdiv	;wreg free
 22882  00316E  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22883  003172  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22884                           
 22885                           ;sort.c: 502: int sec = (timeDiff % 3600) % 60;
 22886  003176  0E0E               	movlw	14
 22887  003178  6E04               	movwf	i2___lwmod@divisor+1,c
 22888  00317A  0E10               	movlw	16
 22889  00317C  6E03               	movwf	i2___lwmod@divisor,c
 22890  00317E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22891  003182  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22892  003186  ECC3  F028         	call	i2___lwmod	;wreg free
 22893  00318A  C001  F043         	movff	?i2___lwmod,_printSortTimer$2581
 22894  00318E  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2581+1
 22895                           
 22896                           ;sort.c: 502: int sec = (timeDiff % 3600) % 60;
 22897  003192  C043  F001         	movff	_printSortTimer$2581,i2___lwmod@dividend
 22898  003196  C044  F002         	movff	_printSortTimer$2581+1,i2___lwmod@dividend+1
 22899  00319A  0E00               	movlw	0
 22900  00319C  6E04               	movwf	i2___lwmod@divisor+1,c
 22901  00319E  0E3C               	movlw	60
 22902  0031A0  6E03               	movwf	i2___lwmod@divisor,c
 22903  0031A2  ECC3  F028         	call	i2___lwmod	;wreg free
 22904  0031A6  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22905  0031AA  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22906                           
 22907                           ;sort.c: 504: lcdInst(0b10000000);;
 22908  0031AE  0E80               	movlw	128
 22909  0031B0  ECED  F02B         	call	i2_lcdInst
 22910                           
 22911                           ;sort.c: 505: printf("SORTING...");
 22912  0031B4  0E7B               	movlw	low STR_64
 22913  0031B6  6E0D               	movwf	i2printf@f,c
 22914  0031B8  0EFF               	movlw	high STR_64
 22915  0031BA  6E0E               	movwf	i2printf@f+1,c
 22916  0031BC  ECA3  F011         	call	i2_printf	;wreg free
 22917                           
 22918                           ;sort.c: 506: lcdInst(0b11000000);;
 22919  0031C0  0EC0               	movlw	192
 22920  0031C2  ECED  F02B         	call	i2_lcdInst
 22921                           
 22922                           ;sort.c: 507: printf("TIME %d:%02d", min, sec);
 22923  0031C6  0E4C               	movlw	low STR_65
 22924  0031C8  6E0D               	movwf	i2printf@f,c
 22925  0031CA  0EFF               	movlw	high STR_65
 22926  0031CC  6E0E               	movwf	i2printf@f+1,c
 22927  0031CE  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22928  0031D2  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22929  0031D6  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22930  0031DA  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22931  0031DE  ECA3  F011         	call	i2_printf	;wreg free
 22932  0031E2  0012               	return		;funcret
 22933  0031E4                     __end_of_printSortTimer:
 22934                           	opt stack 0
 22935                           pclatu	equ	0xFFB
 22936                           pclath	equ	0xFFA
 22937                           tblptru	equ	0xFF8
 22938                           tblptrh	equ	0xFF7
 22939                           tblptrl	equ	0xFF6
 22940                           tablat	equ	0xFF5
 22941                           prodh	equ	0xFF4
 22942                           prodl	equ	0xFF3
 22943                           intcon	equ	0xFF2
 22944                           intcon2	equ	0xFF1
 22945                           intcon3	equ	0xFF0
 22946                           indf0	equ	0xFEF
 22947                           postinc0	equ	0xFEE
 22948                           fsr0h	equ	0xFEA
 22949                           fsr0l	equ	0xFE9
 22950                           wreg	equ	0xFE8
 22951                           postdec1	equ	0xFE5
 22952                           fsr1h	equ	0xFE2
 22953                           fsr1l	equ	0xFE1
 22954                           indf2	equ	0xFDF
 22955                           postinc2	equ	0xFDE
 22956                           postdec2	equ	0xFDD
 22957                           fsr2h	equ	0xFDA
 22958                           fsr2l	equ	0xFD9
 22959                           status	equ	0xFD8
 22960                           
 22961 ;; *************** function i2_printf *****************
 22962 ;; Defined at:
 22963 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22964 ;; Parameters:    Size  Location     Type
 22965 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22966 ;;		 -> STR_129(18), STR_128(18), STR_127(17), STR_126(17), 
 22967 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 22968 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 22969 ;;		 -> STR_117(17), STR_116(17), STR_115(17), STR_114(17), 
 22970 ;;		 -> STR_113(17), STR_112(17), STR_111(18), STR_110(17), 
 22971 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 22972 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 22973 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 22974 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 22975 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 22976 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 22977 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 22978 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 22979 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 22980 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 22981 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 22982 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 22983 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 22984 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 22985 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 22986 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 22987 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 22988 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 22989 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 22990 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 22991 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 22992 ;; Auto vars:     Size  Location     Type
 22993 ;;  printf          4    0        struct .
 22994 ;;  printf          2   39[COMRAM] int 
 22995 ;;  printf          2   35[COMRAM] unsigned int 
 22996 ;;  printf          2   33[COMRAM] unsigned int 
 22997 ;;  printf          2   31[COMRAM] PTR void [1]
 22998 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22999 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23000 ;;		 -> STR_130(7), count_total(2), printRTC@month(4), UI@month(4), 
 23001 ;;  printf          1   38[COMRAM] char 
 23002 ;;  printf          1   37[COMRAM] unsigned char 
 23003 ;;  printf          1   28[COMRAM] char 
 23004 ;; Return value:  Size  Location     Type
 23005 ;;                  2   12[COMRAM] int 
 23006 ;; Registers used:
 23007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23008 ;; Tracked objects:
 23009 ;;		On entry : 0/0
 23010 ;;		On exit  : 0/0
 23011 ;;		Unchanged: 0/0
 23012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23013 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23017 ;;Total ram usage:       29 bytes
 23018 ;; Hardware stack levels used:    1
 23019 ;; Hardware stack levels required when called:    2
 23020 ;; This function calls:
 23021 ;;		i2___lwdiv
 23022 ;;		i2___lwmod
 23023 ;;		i2___wmul
 23024 ;;		i2_isdigit
 23025 ;;		i2_putch
 23026 ;; This function is called by:
 23027 ;;		_change_state_to_menu_11
 23028 ;;		_change_state_to_menu_23
 23029 ;;		_change_state_to_logs_11
 23030 ;;		_change_state_to_logs_12
 23031 ;;		_change_state_to_logs_22
 23032 ;;		_change_state_to_logs_23
 23033 ;;		_change_state_to_logs_33
 23034 ;;		_change_state_to_logs_34
 23035 ;;		_printSortTimer
 23036 ;;		i2_change_state_to_menu_start
 23037 ;;		i2_change_state_to_menu_12
 23038 ;;		i2_change_state_to_menu_22
 23039 ;;		i2_printRTC
 23040 ;; This function uses a non-reentrant model
 23041 ;;
 23042                           
 23043                           	psect	text82
 23044  002346                     __ptext82:
 23045                           	opt stack 0
 23046  002346                     i2_printf:
 23047                           	opt stack 20
 23048                           
 23049                           ;doprnt.c: 466: va_list ap;
 23050                           ;doprnt.c: 499: signed char c;
 23051                           ;doprnt.c: 501: int width;
 23052                           ;doprnt.c: 506: signed char prec;
 23053                           ;doprnt.c: 508: unsigned char flag;
 23054                           ;doprnt.c: 523: union {
 23055                           ;doprnt.c: 524: unsigned long vd;
 23056                           ;doprnt.c: 525: double integ;
 23057                           ;doprnt.c: 526: } tmpval;
 23058                           ;doprnt.c: 528: unsigned int val;
 23059                           ;doprnt.c: 529: unsigned len;
 23060                           ;doprnt.c: 530: const char * cp;
 23061                           ;doprnt.c: 533: *ap = __va_start();
 23062                           
 23063                           ;incstack = 0
 23064  002346  0E0F               	movlw	low (?i2_printf+2)
 23065  002348  6E20               	movwf	i2printf@ap,c
 23066  00234A  0E00               	movlw	high (?i2_printf+2)
 23067  00234C  6E21               	movwf	i2printf@ap+1,c
 23068                           
 23069                           ;doprnt.c: 536: while(c = *f++) {
 23070  00234E  D1A4               	goto	i2l6920
 23071  002350                     i2l6790:
 23072                           
 23073                           ;doprnt.c: 538: if(c != '%')
 23074  002350  0E25               	movlw	37
 23075  002352  1827               	xorwf	i2printf@c,w,c
 23076  002354  B4D8               	btfsc	status,2,c
 23077  002356  D004               	goto	i2l6794
 23078                           
 23079                           ;doprnt.c: 540: {
 23080                           ;doprnt.c: 541: (putch(c) );
 23081  002358  5027               	movf	i2printf@c,w,c
 23082  00235A  ECE7  F02B         	call	i2_putch
 23083                           
 23084                           ;doprnt.c: 542: continue;
 23085  00235E  D19C               	goto	i2l6920
 23086  002360                     i2l6794:
 23087                           
 23088                           ;doprnt.c: 543: }
 23089                           ;doprnt.c: 546: width = 0;
 23090  002360  0E00               	movlw	0
 23091  002362  6E29               	movwf	i2printf@width+1,c
 23092  002364  0E00               	movlw	0
 23093  002366  6E28               	movwf	i2printf@width,c
 23094                           
 23095                           ;doprnt.c: 548: flag = 0;
 23096  002368  0E00               	movlw	0
 23097  00236A  6E26               	movwf	i2printf@flag,c
 23098                           
 23099                           ;doprnt.c: 551: switch(*f) {
 23100                           
 23101                           ;doprnt.c: 550: for(;;) {
 23102  00236C  D003               	goto	i2l6800
 23103  00236E                     i2l6796:
 23104                           
 23105                           ;doprnt.c: 580: flag |= 0x04;
 23106  00236E  8426               	bsf	i2printf@flag,2,c
 23107                           
 23108                           ;doprnt.c: 581: f++;
 23109  002370  4A0D               	infsnz	i2printf@f,f,c
 23110  002372  2A0E               	incf	i2printf@f+1,f,c
 23111  002374                     i2l6800:
 23112  002374  C00D  FFF6         	movff	i2printf@f,tblptrl
 23113  002378  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23114  00237C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23115  00237C  6AF8               	clrf	tblptru,c
 23116  00237E                     	endif
 23117  00237E                     	if	0	;tblptru may be non-zero
 23118  00237E                     	endif
 23119  00237E  0008               	tblrd		*
 23120  002380  50F5               	movf	tablat,w,c
 23121                           
 23122                           ; Switch size 1, requested type "space"
 23123                           ; Number of cases is 1, Range of values is 48 to 48
 23124                           ; switch strategies available:
 23125                           ; Name         Instructions Cycles
 23126                           ; simple_byte            4     3 (average)
 23127                           ;	Chosen strategy is simple_byte
 23128  002382  0A30               	xorlw	48	; case 48
 23129  002384  B4D8               	btfsc	status,2,c
 23130  002386  D7F3               	goto	i2l6796
 23131                           
 23132                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23133                           
 23134                           ;doprnt.c: 586: }
 23135                           
 23136                           ;doprnt.c: 585: break;
 23137  002388  C00D  FFF6         	movff	i2printf@f,tblptrl
 23138  00238C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23139  002390                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23140  002390  6AF8               	clrf	tblptru,c
 23141  002392                     	endif
 23142  002392                     	if	0	;tblptru may be non-zero
 23143  002392                     	endif
 23144  002392  0008               	tblrd		*
 23145  002394  50F5               	movf	tablat,w,c
 23146  002396  EC82  F02B         	call	i2_isdigit
 23147  00239A  A0D8               	btfss	status,0,c
 23148  00239C  D0A6               	goto	i2l6848
 23149                           
 23150                           ;doprnt.c: 598: width = 0;
 23151  00239E  0E00               	movlw	0
 23152  0023A0  6E29               	movwf	i2printf@width+1,c
 23153  0023A2  0E00               	movlw	0
 23154  0023A4  6E28               	movwf	i2printf@width,c
 23155  0023A6                     i2l6806:
 23156                           
 23157                           ;doprnt.c: 600: width *= 10;
 23158  0023A6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23159  0023AA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23160  0023AE  0E00               	movlw	0
 23161  0023B0  6E04               	movwf	i2___wmul@multiplicand+1,c
 23162  0023B2  0E0A               	movlw	10
 23163  0023B4  6E03               	movwf	i2___wmul@multiplicand,c
 23164  0023B6  EC28  F02B         	call	i2___wmul	;wreg free
 23165  0023BA  C001  F028         	movff	?i2___wmul,i2printf@width
 23166  0023BE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23167                           
 23168                           ;doprnt.c: 601: width += *f++ - '0';
 23169  0023C2  0ED0               	movlw	208
 23170  0023C4  6E19               	movwf	??i2_printf& (0+255),c
 23171  0023C6  0EFF               	movlw	255
 23172  0023C8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23173  0023CA  C00D  FFF6         	movff	i2printf@f,tblptrl
 23174  0023CE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23175  0023D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23176  0023D2  6AF8               	clrf	tblptru,c
 23177  0023D4                     	endif
 23178  0023D4                     	if	0	;tblptru may be non-zero
 23179  0023D4                     	endif
 23180  0023D4  0008               	tblrd		*
 23181  0023D6  50F5               	movf	tablat,w,c
 23182  0023D8  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 23183  0023DA  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 23184  0023DC  5019               	movf	??i2_printf,w,c
 23185  0023DE  261B               	addwf	??i2_printf+2,f,c
 23186  0023E0  501A               	movf	??i2_printf+1,w,c
 23187  0023E2  221C               	addwfc	??i2_printf+3,f,c
 23188  0023E4  501B               	movf	??i2_printf+2,w,c
 23189  0023E6  2628               	addwf	i2printf@width,f,c
 23190  0023E8  501C               	movf	??i2_printf+3,w,c
 23191  0023EA  2229               	addwfc	i2printf@width+1,f,c
 23192  0023EC  4A0D               	infsnz	i2printf@f,f,c
 23193  0023EE  2A0E               	incf	i2printf@f+1,f,c
 23194                           
 23195                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 23196  0023F0  C00D  FFF6         	movff	i2printf@f,tblptrl
 23197  0023F4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23198  0023F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23199  0023F8  6AF8               	clrf	tblptru,c
 23200  0023FA                     	endif
 23201  0023FA                     	if	0	;tblptru may be non-zero
 23202  0023FA                     	endif
 23203  0023FA  0008               	tblrd		*
 23204  0023FC  50F5               	movf	tablat,w,c
 23205  0023FE  EC82  F02B         	call	i2_isdigit
 23206  002402  A0D8               	btfss	status,0,c
 23207  002404  D072               	goto	i2l6848
 23208  002406  D7CF               	goto	i2l6806
 23209  002408                     i2l6814:
 23210                           
 23211                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 23212  002408  C020  FFD9         	movff	i2printf@ap,fsr2l
 23213  00240C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23214  002410  CFDE F01E          	movff	postinc2,i2printf@cp
 23215  002414  CFDD F01F          	movff	postdec2,i2printf@cp+1
 23216  002418  0E02               	movlw	2
 23217  00241A  2620               	addwf	i2printf@ap,f,c
 23218  00241C  0E00               	movlw	0
 23219  00241E  2221               	addwfc	i2printf@ap+1,f,c
 23220                           
 23221                           ;doprnt.c: 740: if(!cp)
 23222  002420  501E               	movf	i2printf@cp,w,c
 23223  002422  101F               	iorwf	i2printf@cp+1,w,c
 23224  002424  A4D8               	btfss	status,2,c
 23225  002426  D004               	goto	i2l6822
 23226                           
 23227                           ;doprnt.c: 741: cp = "(null)";
 23228  002428  0EB5               	movlw	low STR_130
 23229  00242A  6E1E               	movwf	i2printf@cp,c
 23230  00242C  0EFF               	movlw	high STR_130
 23231  00242E  6E1F               	movwf	i2printf@cp+1,c
 23232  002430                     i2l6822:
 23233                           
 23234                           ;doprnt.c: 745: len = 0;
 23235  002430  0E00               	movlw	0
 23236  002432  6E23               	movwf	i2printf@len+1,c
 23237  002434  0E00               	movlw	0
 23238  002436  6E22               	movwf	i2printf@len,c
 23239                           
 23240                           ;doprnt.c: 746: while(cp[len])
 23241  002438  D002               	goto	i2l6826
 23242  00243A                     i2l6824:
 23243                           
 23244                           ;doprnt.c: 747: len++;
 23245  00243A  4A22               	infsnz	i2printf@len,f,c
 23246  00243C  2A23               	incf	i2printf@len+1,f,c
 23247  00243E                     i2l6826:
 23248  00243E  5022               	movf	i2printf@len,w,c
 23249  002440  241E               	addwf	i2printf@cp,w,c
 23250  002442  6E19               	movwf	??i2_printf& (0+255),c
 23251  002444  5023               	movf	i2printf@len+1,w,c
 23252  002446  201F               	addwfc	i2printf@cp+1,w,c
 23253  002448  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23254  00244A  C019  FFF6         	movff	??i2_printf,tblptrl
 23255  00244E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 23256  002452  0E00               	movlw	low (__mediumconst shr (0+16))
 23257  002454  6EF8               	movwf	tblptru,c
 23258  002456  0E0F               	movlw	(high __ramtop+-1)
 23259  002458  64F7               	cpfsgt	tblptrh,c
 23260  00245A  D003               	bra	i2u541_47
 23261  00245C  0008               	tblrd		*
 23262  00245E  50F5               	movf	tablat,w,c
 23263  002460  D005               	bra	i2u541_40
 23264  002462                     i2u541_47:
 23265  002462  CFF6 FFE9          	movff	tblptrl,fsr0l
 23266  002466  CFF7 FFEA          	movff	tblptrh,fsr0h
 23267  00246A  50EF               	movf	indf0,w,c
 23268  00246C                     i2u541_40:
 23269  00246C  0900               	iorlw	0
 23270  00246E  A4D8               	btfss	status,2,c
 23271  002470  D7E4               	goto	i2l6824
 23272                           
 23273                           ;doprnt.c: 757: if(width > len)
 23274  002472  5028               	movf	i2printf@width,w,c
 23275  002474  5C22               	subwf	i2printf@len,w,c
 23276  002476  5029               	movf	i2printf@width+1,w,c
 23277  002478  5823               	subwfb	i2printf@len+1,w,c
 23278  00247A  B0D8               	btfsc	status,0,c
 23279  00247C  D005               	goto	i2l6832
 23280                           
 23281                           ;doprnt.c: 758: width -= len;
 23282  00247E  5022               	movf	i2printf@len,w,c
 23283  002480  5E28               	subwf	i2printf@width,f,c
 23284  002482  5023               	movf	i2printf@len+1,w,c
 23285  002484  5A29               	subwfb	i2printf@width+1,f,c
 23286  002486  D008               	goto	i2l6836
 23287  002488                     i2l6832:
 23288                           
 23289                           ;doprnt.c: 759: else
 23290                           ;doprnt.c: 760: width = 0;
 23291  002488  0E00               	movlw	0
 23292  00248A  6E29               	movwf	i2printf@width+1,c
 23293  00248C  0E00               	movlw	0
 23294  00248E  6E28               	movwf	i2printf@width,c
 23295                           
 23296                           ;doprnt.c: 764: while(width--)
 23297  002490  D003               	goto	i2l6836
 23298  002492                     i2l6834:
 23299                           
 23300                           ;doprnt.c: 765: (putch(' ') );
 23301  002492  0E20               	movlw	32
 23302  002494  ECE7  F02B         	call	i2_putch
 23303  002498                     i2l6836:
 23304  002498  0628               	decf	i2printf@width,f,c
 23305  00249A  A0D8               	btfss	status,0,c
 23306  00249C  0629               	decf	i2printf@width+1,f,c
 23307  00249E  2828               	incf	i2printf@width,w,c
 23308  0024A0  E1F8               	bnz	i2l6834
 23309  0024A2  2829               	incf	i2printf@width+1,w,c
 23310  0024A4  B4D8               	btfsc	status,2,c
 23311  0024A6  D016               	goto	i2l6842
 23312  0024A8  D7F4               	goto	i2l6834
 23313  0024AA                     i2l6838:
 23314                           
 23315                           ;doprnt.c: 768: (putch(*cp++) );
 23316  0024AA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 23317  0024AE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 23318  0024B2  0E00               	movlw	low (__mediumconst shr (0+16))
 23319  0024B4  6EF8               	movwf	tblptru,c
 23320  0024B6  0E0F               	movlw	(high __ramtop+-1)
 23321  0024B8  64F7               	cpfsgt	tblptrh,c
 23322  0024BA  D003               	bra	i2u545_47
 23323  0024BC  0008               	tblrd		*
 23324  0024BE  50F5               	movf	tablat,w,c
 23325  0024C0  D005               	bra	i2u545_40
 23326  0024C2                     i2u545_47:
 23327  0024C2  CFF6 FFE9          	movff	tblptrl,fsr0l
 23328  0024C6  CFF7 FFEA          	movff	tblptrh,fsr0h
 23329  0024CA  50EF               	movf	indf0,w,c
 23330  0024CC                     i2u545_40:
 23331  0024CC  ECE7  F02B         	call	i2_putch
 23332  0024D0  4A1E               	infsnz	i2printf@cp,f,c
 23333  0024D2  2A1F               	incf	i2printf@cp+1,f,c
 23334  0024D4                     i2l6842:
 23335  0024D4  0622               	decf	i2printf@len,f,c
 23336  0024D6  A0D8               	btfss	status,0,c
 23337  0024D8  0623               	decf	i2printf@len+1,f,c
 23338  0024DA  2822               	incf	i2printf@len,w,c
 23339  0024DC  E1E6               	bnz	i2l6838
 23340  0024DE  2823               	incf	i2printf@len+1,w,c
 23341  0024E0  B4D8               	btfsc	status,2,c
 23342  0024E2  D0DA               	goto	i2l6920
 23343  0024E4  D7E2               	goto	i2l6838
 23344  0024E6                     i2l6844:
 23345                           
 23346                           ;doprnt.c: 818: flag |= 0x40;
 23347  0024E6  8C26               	bsf	i2printf@flag,6,c
 23348                           
 23349                           ;doprnt.c: 822: }
 23350                           
 23351                           ;doprnt.c: 819: break;
 23352  0024E8  D01B               	goto	i2l1506
 23353  0024EA                     i2l6848:
 23354  0024EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 23355  0024EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23356  0024F2  4A0D               	infsnz	i2printf@f,f,c
 23357  0024F4  2A0E               	incf	i2printf@f+1,f,c
 23358  0024F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23359  0024F6  6AF8               	clrf	tblptru,c
 23360  0024F8                     	endif
 23361  0024F8                     	if	0	;tblptru may be non-zero
 23362  0024F8                     	endif
 23363  0024F8  0008               	tblrd		*
 23364  0024FA  CFF5 F027          	movff	tablat,i2printf@c
 23365  0024FE  5027               	movf	i2printf@c,w,c
 23366                           
 23367                           ; Switch size 1, requested type "space"
 23368                           ; Number of cases is 5, Range of values is 0 to 117
 23369                           ; switch strategies available:
 23370                           ; Name         Instructions Cycles
 23371                           ; simple_byte           16     9 (average)
 23372                           ;	Chosen strategy is simple_byte
 23373  002500  0A00               	xorlw	0	; case 0
 23374  002502  B4D8               	btfsc	status,2,c
 23375  002504  0012               	return	
 23376  002506  0A64               	xorlw	100	; case 100
 23377  002508  B4D8               	btfsc	status,2,c
 23378  00250A  D00A               	goto	i2l1506
 23379  00250C  0A0D               	xorlw	13	; case 105
 23380  00250E  B4D8               	btfsc	status,2,c
 23381  002510  D007               	goto	i2l1506
 23382  002512  0A1A               	xorlw	26	; case 115
 23383  002514  B4D8               	btfsc	status,2,c
 23384  002516  D778               	goto	i2l6814
 23385  002518  0A06               	xorlw	6	; case 117
 23386  00251A  B4D8               	btfsc	status,2,c
 23387  00251C  D7E4               	goto	i2l6844
 23388  00251E  D0BC               	goto	i2l6920
 23389  002520                     i2l1506:
 23390                           
 23391                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 23392  002520  BC26               	btfsc	i2printf@flag,6,c
 23393  002522  D015               	goto	i2l6860
 23394                           
 23395                           ;doprnt.c: 1253: {
 23396                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23397  002524  C020  FFD9         	movff	i2printf@ap,fsr2l
 23398  002528  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23399  00252C  CFDE F024          	movff	postinc2,i2printf@val
 23400  002530  CFDD F025          	movff	postdec2,i2printf@val+1
 23401  002534  0E02               	movlw	2
 23402  002536  2620               	addwf	i2printf@ap,f,c
 23403  002538  0E00               	movlw	0
 23404  00253A  2221               	addwfc	i2printf@ap+1,f,c
 23405                           
 23406                           ;doprnt.c: 1261: if((int)val < 0) {
 23407  00253C  AE25               	btfss	i2printf@val+1,7,c
 23408  00253E  D013               	goto	i2l6864
 23409                           
 23410                           ;doprnt.c: 1262: flag |= 0x03;
 23411  002540  0E03               	movlw	3
 23412  002542  1226               	iorwf	i2printf@flag,f,c
 23413                           
 23414                           ;doprnt.c: 1263: val = -val;
 23415  002544  6C24               	negf	i2printf@val,c
 23416  002546  1E25               	comf	i2printf@val+1,f,c
 23417  002548  B0D8               	btfsc	status,0,c
 23418  00254A  2A25               	incf	i2printf@val+1,f,c
 23419                           
 23420                           ;doprnt.c: 1264: }
 23421                           ;doprnt.c: 1266: }
 23422  00254C  D00C               	goto	i2l6864
 23423  00254E                     i2l6860:
 23424                           
 23425                           ;doprnt.c: 1268: else
 23426                           ;doprnt.c: 1273: {
 23427                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23428  00254E  C020  FFD9         	movff	i2printf@ap,fsr2l
 23429  002552  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23430  002556  CFDE F024          	movff	postinc2,i2printf@val
 23431  00255A  CFDD F025          	movff	postdec2,i2printf@val+1
 23432  00255E  0E02               	movlw	2
 23433  002560  2620               	addwf	i2printf@ap,f,c
 23434  002562  0E00               	movlw	0
 23435  002564  2221               	addwfc	i2printf@ap+1,f,c
 23436  002566                     i2l6864:
 23437                           
 23438                           ;doprnt.c: 1287: }
 23439                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23440  002566  0E01               	movlw	1
 23441  002568  6E27               	movwf	i2printf@c,c
 23442  00256A                     i2l6866:
 23443  00256A  0E05               	movlw	5
 23444  00256C  1827               	xorwf	i2printf@c,w,c
 23445  00256E  B4D8               	btfsc	status,2,c
 23446  002570  D015               	goto	i2l6878
 23447                           
 23448                           ;doprnt.c: 1306: if(val < dpowers[c])
 23449  002572  5027               	movf	i2printf@c,w,c
 23450  002574  0D02               	mullw	2
 23451  002576  0EB4               	movlw	low _dpowers
 23452  002578  24F3               	addwf	prodl,w,c
 23453  00257A  6EF6               	movwf	tblptrl,c
 23454  00257C  0EFA               	movlw	high _dpowers
 23455  00257E  20F4               	addwfc	prodh,w,c
 23456  002580  6EF7               	movwf	tblptrh,c
 23457  002582                     	if	1	;There are 3 active tblptr bytes
 23458  002582  6AF8               	clrf	tblptru,c
 23459  002584  0E00               	movlw	low (__mediumconst shr (0+16))
 23460  002586  22F8               	addwfc	tblptru,f,c
 23461  002588                     	endif
 23462  002588  0009               	tblrd		*+
 23463  00258A  50F5               	movf	tablat,w,c
 23464  00258C  5C24               	subwf	i2printf@val,w,c
 23465  00258E  0009               	tblrd		*+
 23466  002590  50F5               	movf	tablat,w,c
 23467  002592  5825               	subwfb	i2printf@val+1,w,c
 23468  002594  A0D8               	btfss	status,0,c
 23469  002596  D002               	goto	i2l6878
 23470                           
 23471                           ;doprnt.c: 1307: break;
 23472  002598  2A27               	incf	i2printf@c,f,c
 23473  00259A  D7E7               	goto	i2l6866
 23474  00259C                     i2l6878:
 23475                           
 23476                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23477  00259C  5028               	movf	i2printf@width,w,c
 23478  00259E  1029               	iorwf	i2printf@width+1,w,c
 23479  0025A0  B4D8               	btfsc	status,2,c
 23480  0025A2  D009               	goto	i2l6884
 23481  0025A4  C026  F019         	movff	i2printf@flag,??i2_printf
 23482  0025A8  0E03               	movlw	3
 23483  0025AA  1619               	andwf	??i2_printf,f,c
 23484  0025AC  B4D8               	btfsc	status,2,c
 23485  0025AE  D003               	goto	i2l6884
 23486                           
 23487                           ;doprnt.c: 1346: width--;
 23488  0025B0  0628               	decf	i2printf@width,f,c
 23489  0025B2  A0D8               	btfss	status,0,c
 23490  0025B4  0629               	decf	i2printf@width+1,f,c
 23491  0025B6                     i2l6884:
 23492                           
 23493                           ;doprnt.c: 1381: if(width > c)
 23494  0025B6  0E80               	movlw	128
 23495  0025B8  BE27               	btfsc	i2printf@c,7,c
 23496  0025BA  0E7F               	movlw	127
 23497  0025BC  6E19               	movwf	??i2_printf& (0+255),c
 23498  0025BE  5028               	movf	i2printf@width,w,c
 23499  0025C0  5C27               	subwf	i2printf@c,w,c
 23500  0025C2  5029               	movf	i2printf@width+1,w,c
 23501  0025C4  0A80               	xorlw	128
 23502  0025C6  5819               	subwfb	??i2_printf& (0+255),w,c
 23503  0025C8  B0D8               	btfsc	status,0,c
 23504  0025CA  D007               	goto	i2l6888
 23505                           
 23506                           ;doprnt.c: 1382: width -= c;
 23507  0025CC  5027               	movf	i2printf@c,w,c
 23508  0025CE  5E28               	subwf	i2printf@width,f,c
 23509  0025D0  0E00               	movlw	0
 23510  0025D2  BE27               	btfsc	i2printf@c,7,c
 23511  0025D4  0EFF               	movlw	255
 23512  0025D6  5A29               	subwfb	i2printf@width+1,f,c
 23513  0025D8  D004               	goto	i2l6890
 23514  0025DA                     i2l6888:
 23515                           
 23516                           ;doprnt.c: 1383: else
 23517                           ;doprnt.c: 1384: width = 0;
 23518  0025DA  0E00               	movlw	0
 23519  0025DC  6E29               	movwf	i2printf@width+1,c
 23520  0025DE  0E00               	movlw	0
 23521  0025E0  6E28               	movwf	i2printf@width,c
 23522  0025E2                     i2l6890:
 23523                           
 23524                           ;doprnt.c: 1387: if(flag & 0x04) {
 23525  0025E2  A426               	btfss	i2printf@flag,2,c
 23526  0025E4  D014               	goto	i2l6902
 23527                           
 23528                           ;doprnt.c: 1392: if(flag & 0x03)
 23529  0025E6  C026  F019         	movff	i2printf@flag,??i2_printf
 23530  0025EA  0E03               	movlw	3
 23531  0025EC  1619               	andwf	??i2_printf,f,c
 23532  0025EE  B4D8               	btfsc	status,2,c
 23533  0025F0  D003               	goto	i2l6896
 23534                           
 23535                           ;doprnt.c: 1393: (putch('-') );
 23536  0025F2  0E2D               	movlw	45
 23537  0025F4  ECE7  F02B         	call	i2_putch
 23538  0025F8                     i2l6896:
 23539                           
 23540                           ;doprnt.c: 1415: if(width)
 23541  0025F8  5028               	movf	i2printf@width,w,c
 23542  0025FA  1029               	iorwf	i2printf@width+1,w,c
 23543  0025FC  B4D8               	btfsc	status,2,c
 23544  0025FE  D01E               	goto	i2l6912
 23545                           
 23546                           ;doprnt.c: 1417: (putch('0') );
 23547                           
 23548                           ;doprnt.c: 1416: do
 23549  002600  0E30               	movlw	48
 23550  002602  ECE7  F02B         	call	i2_putch
 23551                           
 23552                           ;doprnt.c: 1418: while(--width);
 23553  002606  0628               	decf	i2printf@width,f,c
 23554  002608  A0D8               	btfss	status,0,c
 23555  00260A  0629               	decf	i2printf@width+1,f,c
 23556  00260C  D7F5               	goto	i2l6896
 23557  00260E                     i2l6902:
 23558                           
 23559                           ;doprnt.c: 1422: {
 23560                           ;doprnt.c: 1424: if(width
 23561                           ;doprnt.c: 1428: )
 23562  00260E  5028               	movf	i2printf@width,w,c
 23563  002610  1029               	iorwf	i2printf@width+1,w,c
 23564  002612  B4D8               	btfsc	status,2,c
 23565  002614  D00A               	goto	i2l6908
 23566  002616                     i2l6904:
 23567                           
 23568                           ;doprnt.c: 1430: (putch(' ') );
 23569  002616  0E20               	movlw	32
 23570  002618  ECE7  F02B         	call	i2_putch
 23571                           
 23572                           ;doprnt.c: 1431: while(--width);
 23573  00261C  0628               	decf	i2printf@width,f,c
 23574  00261E  A0D8               	btfss	status,0,c
 23575  002620  0629               	decf	i2printf@width+1,f,c
 23576  002622  5028               	movf	i2printf@width,w,c
 23577  002624  1029               	iorwf	i2printf@width+1,w,c
 23578  002626  A4D8               	btfss	status,2,c
 23579  002628  D7F6               	goto	i2l6904
 23580  00262A                     i2l6908:
 23581                           
 23582                           ;doprnt.c: 1438: if(flag & 0x03)
 23583  00262A  C026  F019         	movff	i2printf@flag,??i2_printf
 23584  00262E  0E03               	movlw	3
 23585  002630  1619               	andwf	??i2_printf,f,c
 23586  002632  B4D8               	btfsc	status,2,c
 23587  002634  D003               	goto	i2l6912
 23588                           
 23589                           ;doprnt.c: 1439: (putch('-') );
 23590  002636  0E2D               	movlw	45
 23591  002638  ECE7  F02B         	call	i2_putch
 23592  00263C                     i2l6912:
 23593                           
 23594                           ;doprnt.c: 1469: }
 23595                           ;doprnt.c: 1472: prec = c;
 23596  00263C  C027  F01D         	movff	i2printf@c,i2printf@prec
 23597                           
 23598                           ;doprnt.c: 1474: while(prec--) {
 23599  002640  D027               	goto	i2l6918
 23600  002642                     i2l6914:
 23601                           
 23602                           ;doprnt.c: 1478: {
 23603                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23604  002642  501D               	movf	i2printf@prec,w,c
 23605  002644  0D02               	mullw	2
 23606  002646  0EB4               	movlw	low _dpowers
 23607  002648  24F3               	addwf	prodl,w,c
 23608  00264A  6EF6               	movwf	tblptrl,c
 23609  00264C  0EFA               	movlw	high _dpowers
 23610  00264E  20F4               	addwfc	prodh,w,c
 23611  002650  6EF7               	movwf	tblptrh,c
 23612  002652                     	if	1	;There are 3 active tblptr bytes
 23613  002652  6AF8               	clrf	tblptru,c
 23614  002654  0E00               	movlw	low (__mediumconst shr (0+16))
 23615  002656  22F8               	addwfc	tblptru,f,c
 23616  002658                     	endif
 23617  002658  0009               	tblrd		*+
 23618  00265A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23619  00265E  000A               	tblrd		*-
 23620  002660  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23621  002664  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23622  002668  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23623  00266C  EC04  F028         	call	i2___lwdiv	;wreg free
 23624  002670  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23625  002674  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23626  002678  0E00               	movlw	0
 23627  00267A  6E04               	movwf	i2___lwmod@divisor+1,c
 23628  00267C  0E0A               	movlw	10
 23629  00267E  6E03               	movwf	i2___lwmod@divisor,c
 23630  002680  ECC3  F028         	call	i2___lwmod	;wreg free
 23631  002684  5001               	movf	?i2___lwmod,w,c
 23632  002686  0F30               	addlw	48
 23633  002688  6E27               	movwf	i2printf@c,c
 23634                           
 23635                           ;doprnt.c: 1523: }
 23636                           ;doprnt.c: 1524: (putch(c) );
 23637  00268A  5027               	movf	i2printf@c,w,c
 23638  00268C  ECE7  F02B         	call	i2_putch
 23639  002690                     i2l6918:
 23640  002690  061D               	decf	i2printf@prec,f,c
 23641  002692  281D               	incf	i2printf@prec,w,c
 23642  002694  A4D8               	btfss	status,2,c
 23643  002696  D7D5               	goto	i2l6914
 23644  002698                     i2l6920:
 23645  002698  C00D  FFF6         	movff	i2printf@f,tblptrl
 23646  00269C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23647  0026A0  4A0D               	infsnz	i2printf@f,f,c
 23648  0026A2  2A0E               	incf	i2printf@f+1,f,c
 23649  0026A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23650  0026A4  6AF8               	clrf	tblptru,c
 23651  0026A6                     	endif
 23652  0026A6                     	if	0	;tblptru may be non-zero
 23653  0026A6                     	endif
 23654  0026A6  0008               	tblrd		*
 23655  0026A8  CFF5 F027          	movff	tablat,i2printf@c
 23656  0026AC  5027               	movf	i2printf@c,w,c
 23657  0026AE  B4D8               	btfsc	status,2,c
 23658  0026B0  0012               	return	
 23659  0026B2  D64E               	goto	i2l6790
 23660  0026B4                     __end_ofi2_printf:
 23661                           	opt stack 0
 23662                           pclatu	equ	0xFFB
 23663                           pclath	equ	0xFFA
 23664                           tblptru	equ	0xFF8
 23665                           tblptrh	equ	0xFF7
 23666                           tblptrl	equ	0xFF6
 23667                           tablat	equ	0xFF5
 23668                           prodh	equ	0xFF4
 23669                           prodl	equ	0xFF3
 23670                           intcon	equ	0xFF2
 23671                           intcon2	equ	0xFF1
 23672                           intcon3	equ	0xFF0
 23673                           indf0	equ	0xFEF
 23674                           postinc0	equ	0xFEE
 23675                           fsr0h	equ	0xFEA
 23676                           fsr0l	equ	0xFE9
 23677                           wreg	equ	0xFE8
 23678                           postdec1	equ	0xFE5
 23679                           fsr1h	equ	0xFE2
 23680                           fsr1l	equ	0xFE1
 23681                           indf2	equ	0xFDF
 23682                           postinc2	equ	0xFDE
 23683                           postdec2	equ	0xFDD
 23684                           fsr2h	equ	0xFDA
 23685                           fsr2l	equ	0xFD9
 23686                           status	equ	0xFD8
 23687                           
 23688 ;; *************** function i2_putch *****************
 23689 ;; Defined at:
 23690 ;;		line 20 in file "lcd.c"
 23691 ;; Parameters:    Size  Location     Type
 23692 ;;  data            1    wreg     unsigned char 
 23693 ;; Auto vars:     Size  Location     Type
 23694 ;;  data            1    2[COMRAM] unsigned char 
 23695 ;; Return value:  Size  Location     Type
 23696 ;;                  1    wreg      void 
 23697 ;; Registers used:
 23698 ;;		wreg, status,2, status,0, cstack
 23699 ;; Tracked objects:
 23700 ;;		On entry : 0/0
 23701 ;;		On exit  : 0/0
 23702 ;;		Unchanged: 0/0
 23703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23708 ;;Total ram usage:        1 bytes
 23709 ;; Hardware stack levels used:    1
 23710 ;; Hardware stack levels required when called:    1
 23711 ;; This function calls:
 23712 ;;		i2_lcdNibble
 23713 ;; This function is called by:
 23714 ;;		i2_printf
 23715 ;; This function uses a non-reentrant model
 23716 ;;
 23717                           
 23718                           	psect	text83
 23719  0057CE                     __ptext83:
 23720                           	opt stack 0
 23721  0057CE                     i2_putch:
 23722                           	opt stack 20
 23723                           
 23724                           ;incstack = 0
 23725                           ;i2putch@data stored from wreg
 23726  0057CE  6E03               	movwf	i2putch@data,c
 23727                           
 23728                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23729  0057D0  848C               	bsf	3980,2,c	;volatile
 23730                           
 23731                           ;lcd.c: 22: lcdNibble(data);
 23732  0057D2  5003               	movf	i2putch@data,w,c
 23733  0057D4  ECD7  F027         	call	i2_lcdNibble
 23734  0057D8  0012               	return		;funcret
 23735  0057DA                     __end_ofi2_putch:
 23736                           	opt stack 0
 23737                           pclatu	equ	0xFFB
 23738                           pclath	equ	0xFFA
 23739                           tblptru	equ	0xFF8
 23740                           tblptrh	equ	0xFF7
 23741                           tblptrl	equ	0xFF6
 23742                           tablat	equ	0xFF5
 23743                           prodh	equ	0xFF4
 23744                           prodl	equ	0xFF3
 23745                           intcon	equ	0xFF2
 23746                           intcon2	equ	0xFF1
 23747                           intcon3	equ	0xFF0
 23748                           indf0	equ	0xFEF
 23749                           postinc0	equ	0xFEE
 23750                           fsr0h	equ	0xFEA
 23751                           fsr0l	equ	0xFE9
 23752                           wreg	equ	0xFE8
 23753                           postdec1	equ	0xFE5
 23754                           fsr1h	equ	0xFE2
 23755                           fsr1l	equ	0xFE1
 23756                           indf2	equ	0xFDF
 23757                           postinc2	equ	0xFDE
 23758                           postdec2	equ	0xFDD
 23759                           fsr2h	equ	0xFDA
 23760                           fsr2l	equ	0xFD9
 23761                           status	equ	0xFD8
 23762                           
 23763 ;; *************** function i2_isdigit *****************
 23764 ;; Defined at:
 23765 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23766 ;; Parameters:    Size  Location     Type
 23767 ;;  c               1    wreg     unsigned char 
 23768 ;; Auto vars:     Size  Location     Type
 23769 ;;  c               1    2[COMRAM] unsigned char 
 23770 ;; Return value:  Size  Location     Type
 23771 ;;		None               void
 23772 ;; Registers used:
 23773 ;;		wreg, status,2, status,0
 23774 ;; Tracked objects:
 23775 ;;		On entry : 0/0
 23776 ;;		On exit  : 0/0
 23777 ;;		Unchanged: 0/0
 23778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23782 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23783 ;;Total ram usage:        3 bytes
 23784 ;; Hardware stack levels used:    1
 23785 ;; This function calls:
 23786 ;;		Nothing
 23787 ;; This function is called by:
 23788 ;;		i2_printf
 23789 ;; This function uses a non-reentrant model
 23790 ;;
 23791                           
 23792                           	psect	text84
 23793  005704                     __ptext84:
 23794                           	opt stack 0
 23795  005704                     i2_isdigit:
 23796                           	opt stack 21
 23797                           
 23798                           ;incstack = 0
 23799                           ;i2isdigit@c stored from wreg
 23800  005704  6E03               	movwf	i2isdigit@c,c
 23801  005706  0E00               	movlw	0
 23802  005708  6E02               	movwf	i2_isdigit$2086,c
 23803  00570A  0E3A               	movlw	58
 23804  00570C  6003               	cpfslt	i2isdigit@c,c
 23805  00570E  D005               	goto	i2l6490
 23806  005710  0E2F               	movlw	47
 23807  005712  6403               	cpfsgt	i2isdigit@c,c
 23808  005714  D002               	goto	i2l6490
 23809  005716  0E01               	movlw	1
 23810  005718  6E02               	movwf	i2_isdigit$2086,c
 23811  00571A                     i2l6490:
 23812  00571A  C002  F001         	movff	i2_isdigit$2086,??i2_isdigit
 23813  00571E  3001               	rrcf	??i2_isdigit,w,c
 23814  005720  0012               	return	
 23815  005722                     __end_ofi2_isdigit:
 23816                           	opt stack 0
 23817                           pclatu	equ	0xFFB
 23818                           pclath	equ	0xFFA
 23819                           tblptru	equ	0xFF8
 23820                           tblptrh	equ	0xFF7
 23821                           tblptrl	equ	0xFF6
 23822                           tablat	equ	0xFF5
 23823                           prodh	equ	0xFF4
 23824                           prodl	equ	0xFF3
 23825                           intcon	equ	0xFF2
 23826                           intcon2	equ	0xFF1
 23827                           intcon3	equ	0xFF0
 23828                           indf0	equ	0xFEF
 23829                           postinc0	equ	0xFEE
 23830                           fsr0h	equ	0xFEA
 23831                           fsr0l	equ	0xFE9
 23832                           wreg	equ	0xFE8
 23833                           postdec1	equ	0xFE5
 23834                           fsr1h	equ	0xFE2
 23835                           fsr1l	equ	0xFE1
 23836                           indf2	equ	0xFDF
 23837                           postinc2	equ	0xFDE
 23838                           postdec2	equ	0xFDD
 23839                           fsr2h	equ	0xFDA
 23840                           fsr2l	equ	0xFD9
 23841                           status	equ	0xFD8
 23842                           
 23843 ;; *************** function i2___wmul *****************
 23844 ;; Defined at:
 23845 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23846 ;; Parameters:    Size  Location     Type
 23847 ;;  multiplier      2    0[COMRAM] unsigned int 
 23848 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23849 ;; Auto vars:     Size  Location     Type
 23850 ;;  __wmul          2    4[COMRAM] unsigned int 
 23851 ;; Return value:  Size  Location     Type
 23852 ;;                  2    0[COMRAM] unsigned int 
 23853 ;; Registers used:
 23854 ;;		wreg, status,2, status,0, prodl, prodh
 23855 ;; Tracked objects:
 23856 ;;		On entry : 0/0
 23857 ;;		On exit  : 0/0
 23858 ;;		Unchanged: 0/0
 23859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23863 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23864 ;;Total ram usage:        6 bytes
 23865 ;; Hardware stack levels used:    1
 23866 ;; This function calls:
 23867 ;;		Nothing
 23868 ;; This function is called by:
 23869 ;;		_printSortTimer
 23870 ;;		_retrieveLog
 23871 ;;		i2_printf
 23872 ;; This function uses a non-reentrant model
 23873 ;;
 23874                           
 23875                           	psect	text85
 23876  005650                     __ptext85:
 23877                           	opt stack 0
 23878  005650                     i2___wmul:
 23879                           	opt stack 21
 23880                           
 23881                           ;incstack = 0
 23882  005650  5001               	movf	i2___wmul@multiplier,w,c
 23883  005652  0203               	mulwf	i2___wmul@multiplicand,c
 23884  005654  CFF3 F005          	movff	prodl,i2___wmul@product
 23885  005658  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23886  00565C  5001               	movf	i2___wmul@multiplier,w,c
 23887  00565E  0204               	mulwf	i2___wmul@multiplicand+1,c
 23888  005660  50F3               	movf	prodl,w,c
 23889  005662  2606               	addwf	i2___wmul@product+1,f,c
 23890  005664  5002               	movf	i2___wmul@multiplier+1,w,c
 23891  005666  0203               	mulwf	i2___wmul@multiplicand,c
 23892  005668  50F3               	movf	prodl,w,c
 23893  00566A  2606               	addwf	i2___wmul@product+1,f,c
 23894  00566C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23895  005670  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23896  005674  0012               	return	
 23897  005676                     __end_ofi2___wmul:
 23898                           	opt stack 0
 23899                           pclatu	equ	0xFFB
 23900                           pclath	equ	0xFFA
 23901                           tblptru	equ	0xFF8
 23902                           tblptrh	equ	0xFF7
 23903                           tblptrl	equ	0xFF6
 23904                           tablat	equ	0xFF5
 23905                           prodh	equ	0xFF4
 23906                           prodl	equ	0xFF3
 23907                           intcon	equ	0xFF2
 23908                           intcon2	equ	0xFF1
 23909                           intcon3	equ	0xFF0
 23910                           indf0	equ	0xFEF
 23911                           postinc0	equ	0xFEE
 23912                           fsr0h	equ	0xFEA
 23913                           fsr0l	equ	0xFE9
 23914                           wreg	equ	0xFE8
 23915                           postdec1	equ	0xFE5
 23916                           fsr1h	equ	0xFE2
 23917                           fsr1l	equ	0xFE1
 23918                           indf2	equ	0xFDF
 23919                           postinc2	equ	0xFDE
 23920                           postdec2	equ	0xFDD
 23921                           fsr2h	equ	0xFDA
 23922                           fsr2l	equ	0xFD9
 23923                           status	equ	0xFD8
 23924                           
 23925 ;; *************** function i2___lwmod *****************
 23926 ;; Defined at:
 23927 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23928 ;; Parameters:    Size  Location     Type
 23929 ;;  dividend        2    0[COMRAM] unsigned int 
 23930 ;;  divisor         2    2[COMRAM] unsigned int 
 23931 ;; Auto vars:     Size  Location     Type
 23932 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23933 ;; Return value:  Size  Location     Type
 23934 ;;                  2    0[COMRAM] unsigned int 
 23935 ;; Registers used:
 23936 ;;		wreg, status,2, status,0
 23937 ;; Tracked objects:
 23938 ;;		On entry : 0/0
 23939 ;;		On exit  : 0/0
 23940 ;;		Unchanged: 0/0
 23941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23945 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23946 ;;Total ram usage:        5 bytes
 23947 ;; Hardware stack levels used:    1
 23948 ;; This function calls:
 23949 ;;		Nothing
 23950 ;; This function is called by:
 23951 ;;		_printSortTimer
 23952 ;;		i2_printf
 23953 ;; This function uses a non-reentrant model
 23954 ;;
 23955                           
 23956                           	psect	text86
 23957  005186                     __ptext86:
 23958                           	opt stack 0
 23959  005186                     i2___lwmod:
 23960                           	opt stack 21
 23961                           
 23962                           ;incstack = 0
 23963  005186  5003               	movf	i2___lwmod@divisor,w,c
 23964  005188  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23965  00518A  B4D8               	btfsc	status,2,c
 23966  00518C  D018               	goto	i2l1963
 23967  00518E  0E01               	movlw	1
 23968  005190  6E05               	movwf	i2___lwmod@counter,c
 23969  005192  D004               	goto	i2l6522
 23970  005194                     i2l6520:
 23971  005194  90D8               	bcf	status,0,c
 23972  005196  3603               	rlcf	i2___lwmod@divisor,f,c
 23973  005198  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23974  00519A  2A05               	incf	i2___lwmod@counter,f,c
 23975  00519C                     i2l6522:
 23976  00519C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23977  00519E  D7FA               	goto	i2l6520
 23978  0051A0                     i2l6524:
 23979  0051A0  5003               	movf	i2___lwmod@divisor,w,c
 23980  0051A2  5C01               	subwf	i2___lwmod@dividend,w,c
 23981  0051A4  5004               	movf	i2___lwmod@divisor+1,w,c
 23982  0051A6  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23983  0051A8  A0D8               	btfss	status,0,c
 23984  0051AA  D004               	goto	i2l6528
 23985  0051AC  5003               	movf	i2___lwmod@divisor,w,c
 23986  0051AE  5E01               	subwf	i2___lwmod@dividend,f,c
 23987  0051B0  5004               	movf	i2___lwmod@divisor+1,w,c
 23988  0051B2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23989  0051B4                     i2l6528:
 23990  0051B4  90D8               	bcf	status,0,c
 23991  0051B6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23992  0051B8  3203               	rrcf	i2___lwmod@divisor,f,c
 23993  0051BA  2E05               	decfsz	i2___lwmod@counter,f,c
 23994  0051BC  D7F1               	goto	i2l6524
 23995  0051BE                     i2l1963:
 23996  0051BE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23997  0051C2  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23998  0051C6  0012               	return		;funcret
 23999  0051C8                     __end_ofi2___lwmod:
 24000                           	opt stack 0
 24001                           pclatu	equ	0xFFB
 24002                           pclath	equ	0xFFA
 24003                           tblptru	equ	0xFF8
 24004                           tblptrh	equ	0xFF7
 24005                           tblptrl	equ	0xFF6
 24006                           tablat	equ	0xFF5
 24007                           prodh	equ	0xFF4
 24008                           prodl	equ	0xFF3
 24009                           intcon	equ	0xFF2
 24010                           intcon2	equ	0xFF1
 24011                           intcon3	equ	0xFF0
 24012                           indf0	equ	0xFEF
 24013                           postinc0	equ	0xFEE
 24014                           fsr0h	equ	0xFEA
 24015                           fsr0l	equ	0xFE9
 24016                           wreg	equ	0xFE8
 24017                           postdec1	equ	0xFE5
 24018                           fsr1h	equ	0xFE2
 24019                           fsr1l	equ	0xFE1
 24020                           indf2	equ	0xFDF
 24021                           postinc2	equ	0xFDE
 24022                           postdec2	equ	0xFDD
 24023                           fsr2h	equ	0xFDA
 24024                           fsr2l	equ	0xFD9
 24025                           status	equ	0xFD8
 24026                           
 24027 ;; *************** function i2___lwdiv *****************
 24028 ;; Defined at:
 24029 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24030 ;; Parameters:    Size  Location     Type
 24031 ;;  dividend        2    5[COMRAM] unsigned int 
 24032 ;;  divisor         2    7[COMRAM] unsigned int 
 24033 ;; Auto vars:     Size  Location     Type
 24034 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24035 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24036 ;; Return value:  Size  Location     Type
 24037 ;;                  2    5[COMRAM] unsigned int 
 24038 ;; Registers used:
 24039 ;;		wreg, status,2, status,0
 24040 ;; Tracked objects:
 24041 ;;		On entry : 0/0
 24042 ;;		On exit  : 0/0
 24043 ;;		Unchanged: 0/0
 24044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24046 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24048 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24049 ;;Total ram usage:        7 bytes
 24050 ;; Hardware stack levels used:    1
 24051 ;; This function calls:
 24052 ;;		Nothing
 24053 ;; This function is called by:
 24054 ;;		_printSortTimer
 24055 ;;		i2_printf
 24056 ;; This function uses a non-reentrant model
 24057 ;;
 24058                           
 24059                           	psect	text87
 24060  005008                     __ptext87:
 24061                           	opt stack 0
 24062  005008                     i2___lwdiv:
 24063                           	opt stack 21
 24064                           
 24065                           ;incstack = 0
 24066  005008  0E00               	movlw	0
 24067  00500A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24068  00500C  0E00               	movlw	0
 24069  00500E  6E0A               	movwf	i2___lwdiv@quotient,c
 24070  005010  5008               	movf	i2___lwdiv@divisor,w,c
 24071  005012  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24072  005014  B4D8               	btfsc	status,2,c
 24073  005016  D01C               	goto	i2l1953
 24074  005018  0E01               	movlw	1
 24075  00501A  6E0C               	movwf	i2___lwdiv@counter,c
 24076  00501C  D004               	goto	i2l6502
 24077  00501E                     i2l6500:
 24078  00501E  90D8               	bcf	status,0,c
 24079  005020  3608               	rlcf	i2___lwdiv@divisor,f,c
 24080  005022  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24081  005024  2A0C               	incf	i2___lwdiv@counter,f,c
 24082  005026                     i2l6502:
 24083  005026  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24084  005028  D7FA               	goto	i2l6500
 24085  00502A                     i2l6504:
 24086  00502A  90D8               	bcf	status,0,c
 24087  00502C  360A               	rlcf	i2___lwdiv@quotient,f,c
 24088  00502E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24089  005030  5008               	movf	i2___lwdiv@divisor,w,c
 24090  005032  5C06               	subwf	i2___lwdiv@dividend,w,c
 24091  005034  5009               	movf	i2___lwdiv@divisor+1,w,c
 24092  005036  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24093  005038  A0D8               	btfss	status,0,c
 24094  00503A  D005               	goto	i2l6512
 24095  00503C  5008               	movf	i2___lwdiv@divisor,w,c
 24096  00503E  5E06               	subwf	i2___lwdiv@dividend,f,c
 24097  005040  5009               	movf	i2___lwdiv@divisor+1,w,c
 24098  005042  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 24099  005044  800A               	bsf	i2___lwdiv@quotient,0,c
 24100  005046                     i2l6512:
 24101  005046  90D8               	bcf	status,0,c
 24102  005048  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24103  00504A  3208               	rrcf	i2___lwdiv@divisor,f,c
 24104  00504C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24105  00504E  D7ED               	goto	i2l6504
 24106  005050                     i2l1953:
 24107  005050  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24108  005054  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24109  005058  0012               	return		;funcret
 24110  00505A                     __end_ofi2___lwdiv:
 24111                           	opt stack 0
 24112                           pclatu	equ	0xFFB
 24113                           pclath	equ	0xFFA
 24114                           tblptru	equ	0xFF8
 24115                           tblptrh	equ	0xFF7
 24116                           tblptrl	equ	0xFF6
 24117                           tablat	equ	0xFF5
 24118                           prodh	equ	0xFF4
 24119                           prodl	equ	0xFF3
 24120                           intcon	equ	0xFF2
 24121                           intcon2	equ	0xFF1
 24122                           intcon3	equ	0xFF0
 24123                           indf0	equ	0xFEF
 24124                           postinc0	equ	0xFEE
 24125                           fsr0h	equ	0xFEA
 24126                           fsr0l	equ	0xFE9
 24127                           wreg	equ	0xFE8
 24128                           postdec1	equ	0xFE5
 24129                           fsr1h	equ	0xFE2
 24130                           fsr1l	equ	0xFE1
 24131                           indf2	equ	0xFDF
 24132                           postinc2	equ	0xFDE
 24133                           postdec2	equ	0xFDD
 24134                           fsr2h	equ	0xFDA
 24135                           fsr2l	equ	0xFD9
 24136                           status	equ	0xFD8
 24137                           
 24138 ;; *************** function i2_lcdInst *****************
 24139 ;; Defined at:
 24140 ;;		line 15 in file "lcd.c"
 24141 ;; Parameters:    Size  Location     Type
 24142 ;;  data            1    wreg     unsigned char 
 24143 ;; Auto vars:     Size  Location     Type
 24144 ;;  data            1    2[COMRAM] unsigned char 
 24145 ;; Return value:  Size  Location     Type
 24146 ;;                  1    wreg      void 
 24147 ;; Registers used:
 24148 ;;		wreg, status,2, status,0, cstack
 24149 ;; Tracked objects:
 24150 ;;		On entry : 0/0
 24151 ;;		On exit  : 0/0
 24152 ;;		Unchanged: 0/0
 24153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;Total ram usage:        1 bytes
 24159 ;; Hardware stack levels used:    1
 24160 ;; Hardware stack levels required when called:    1
 24161 ;; This function calls:
 24162 ;;		i2_lcdNibble
 24163 ;; This function is called by:
 24164 ;;		_change_state_to_menu_11
 24165 ;;		_change_state_to_menu_23
 24166 ;;		_change_state_to_logs_11
 24167 ;;		_change_state_to_logs_12
 24168 ;;		_change_state_to_logs_22
 24169 ;;		_change_state_to_logs_23
 24170 ;;		_change_state_to_logs_33
 24171 ;;		_change_state_to_logs_34
 24172 ;;		_printSortTimer
 24173 ;;		i2_change_state_to_menu_start
 24174 ;;		i2_change_state_to_menu_12
 24175 ;;		i2_change_state_to_menu_22
 24176 ;;		i2_printRTC
 24177 ;; This function uses a non-reentrant model
 24178 ;;
 24179                           
 24180                           	psect	text88
 24181  0057DA                     __ptext88:
 24182                           	opt stack 0
 24183  0057DA                     i2_lcdInst:
 24184                           	opt stack 20
 24185                           
 24186                           ;incstack = 0
 24187                           ;i2lcdInst@data stored from wreg
 24188  0057DA  6E03               	movwf	i2lcdInst@data,c
 24189                           
 24190                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 24191  0057DC  948C               	bcf	3980,2,c	;volatile
 24192                           
 24193                           ;lcd.c: 17: lcdNibble(data);
 24194  0057DE  5003               	movf	i2lcdInst@data,w,c
 24195  0057E0  ECD7  F027         	call	i2_lcdNibble
 24196  0057E4  0012               	return		;funcret
 24197  0057E6                     __end_ofi2_lcdInst:
 24198                           	opt stack 0
 24199                           pclatu	equ	0xFFB
 24200                           pclath	equ	0xFFA
 24201                           tblptru	equ	0xFF8
 24202                           tblptrh	equ	0xFF7
 24203                           tblptrl	equ	0xFF6
 24204                           tablat	equ	0xFF5
 24205                           prodh	equ	0xFF4
 24206                           prodl	equ	0xFF3
 24207                           intcon	equ	0xFF2
 24208                           intcon2	equ	0xFF1
 24209                           intcon3	equ	0xFF0
 24210                           indf0	equ	0xFEF
 24211                           postinc0	equ	0xFEE
 24212                           fsr0h	equ	0xFEA
 24213                           fsr0l	equ	0xFE9
 24214                           wreg	equ	0xFE8
 24215                           postdec1	equ	0xFE5
 24216                           fsr1h	equ	0xFE2
 24217                           fsr1l	equ	0xFE1
 24218                           indf2	equ	0xFDF
 24219                           postinc2	equ	0xFDE
 24220                           postdec2	equ	0xFDD
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function i2_lcdNibble *****************
 24226 ;; Defined at:
 24227 ;;		line 25 in file "lcd.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;  data            1    wreg     unsigned char 
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  data            1    1[COMRAM] unsigned char 
 24232 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 24233 ;; Return value:  Size  Location     Type
 24234 ;;                  1    wreg      void 
 24235 ;; Registers used:
 24236 ;;		wreg, status,2, status,0
 24237 ;; Tracked objects:
 24238 ;;		On entry : 0/0
 24239 ;;		On exit  : 0/0
 24240 ;;		Unchanged: 0/0
 24241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24246 ;;Total ram usage:        2 bytes
 24247 ;; Hardware stack levels used:    1
 24248 ;; This function calls:
 24249 ;;		Nothing
 24250 ;; This function is called by:
 24251 ;;		i2_lcdInst
 24252 ;;		i2_putch
 24253 ;; This function uses a non-reentrant model
 24254 ;;
 24255                           
 24256                           	psect	text89
 24257  004FAE                     __ptext89:
 24258                           	opt stack 0
 24259  004FAE                     i2_lcdNibble:
 24260                           	opt stack 20
 24261                           
 24262                           ;incstack = 0
 24263                           ;i2lcdNibble@data stored from wreg
 24264  004FAE  6E02               	movwf	i2lcdNibble@data,c
 24265                           
 24266                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 24267  004FB0  9EF2               	bcf	intcon,7,c	;volatile
 24268                           
 24269                           ;lcd.c: 28: char temp = data & 0xF0;
 24270  004FB2  5002               	movf	i2lcdNibble@data,w,c
 24271  004FB4  0BF0               	andlw	240
 24272  004FB6  6E01               	movwf	i2lcdNibble@temp,c
 24273                           
 24274                           ;lcd.c: 29: LATD = LATD & 0x0F;
 24275  004FB8  508C               	movf	3980,w,c	;volatile
 24276  004FBA  0B0F               	andlw	15
 24277  004FBC  6E8C               	movwf	3980,c	;volatile
 24278                           
 24279                           ;lcd.c: 30: LATD = temp | LATD;
 24280  004FBE  5001               	movf	i2lcdNibble@temp,w,c
 24281  004FC0  108C               	iorwf	3980,w,c	;volatile
 24282  004FC2  6E8C               	movwf	3980,c	;volatile
 24283                           
 24284                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 24285  004FC4  868C               	bsf	3980,3,c	;volatile
 24286                           
 24287                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24288  004FC6  0E42               	movlw	66
 24289  004FC8                     i2u1108_47:
 24290  004FC8  2EE8               	decfsz	wreg,f,c
 24291  004FCA  D7FE               	bra	i2u1108_47
 24292  004FCC  D000               	nop2	
 24293                           
 24294                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 24295  004FCE  968C               	bcf	3980,3,c	;volatile
 24296                           
 24297                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24298  004FD0  0E42               	movlw	66
 24299  004FD2                     i2u1109_47:
 24300  004FD2  2EE8               	decfsz	wreg,f,c
 24301  004FD4  D7FE               	bra	i2u1109_47
 24302  004FD6  D000               	nop2	
 24303                           
 24304                           ;lcd.c: 37: data = data << 4;
 24305  004FD8  3802               	swapf	i2lcdNibble@data,w,c
 24306  004FDA  0BF0               	andlw	240
 24307  004FDC  6E02               	movwf	i2lcdNibble@data,c
 24308                           
 24309                           ;lcd.c: 39: temp = data & 0xF0;
 24310  004FDE  5002               	movf	i2lcdNibble@data,w,c
 24311  004FE0  0BF0               	andlw	240
 24312  004FE2  6E01               	movwf	i2lcdNibble@temp,c
 24313                           
 24314                           ;lcd.c: 40: LATD = LATD & 0x0F;
 24315  004FE4  508C               	movf	3980,w,c	;volatile
 24316  004FE6  0B0F               	andlw	15
 24317  004FE8  6E8C               	movwf	3980,c	;volatile
 24318                           
 24319                           ;lcd.c: 41: LATD = temp | LATD;
 24320  004FEA  5001               	movf	i2lcdNibble@temp,w,c
 24321  004FEC  108C               	iorwf	3980,w,c	;volatile
 24322  004FEE  6E8C               	movwf	3980,c	;volatile
 24323                           
 24324                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 24325  004FF0  868C               	bsf	3980,3,c	;volatile
 24326                           
 24327                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24328  004FF2  0E42               	movlw	66
 24329  004FF4                     i2u1110_47:
 24330  004FF4  2EE8               	decfsz	wreg,f,c
 24331  004FF6  D7FE               	bra	i2u1110_47
 24332  004FF8  D000               	nop2	
 24333                           
 24334                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 24335  004FFA  968C               	bcf	3980,3,c	;volatile
 24336                           
 24337                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24338  004FFC  0E42               	movlw	66
 24339  004FFE                     i2u1111_47:
 24340  004FFE  2EE8               	decfsz	wreg,f,c
 24341  005000  D7FE               	bra	i2u1111_47
 24342  005002  D000               	nop2	
 24343                           
 24344                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 24345  005004  8EF2               	bsf	intcon,7,c	;volatile
 24346  005006  0012               	return		;funcret
 24347  005008                     __end_ofi2_lcdNibble:
 24348                           	opt stack 0
 24349                           pclatu	equ	0xFFB
 24350                           pclath	equ	0xFFA
 24351                           tblptru	equ	0xFF8
 24352                           tblptrh	equ	0xFF7
 24353                           tblptrl	equ	0xFF6
 24354                           tablat	equ	0xFF5
 24355                           prodh	equ	0xFF4
 24356                           prodl	equ	0xFF3
 24357                           intcon	equ	0xFF2
 24358                           intcon2	equ	0xFF1
 24359                           intcon3	equ	0xFF0
 24360                           indf0	equ	0xFEF
 24361                           postinc0	equ	0xFEE
 24362                           fsr0h	equ	0xFEA
 24363                           fsr0l	equ	0xFE9
 24364                           wreg	equ	0xFE8
 24365                           postdec1	equ	0xFE5
 24366                           fsr1h	equ	0xFE2
 24367                           fsr1l	equ	0xFE1
 24368                           indf2	equ	0xFDF
 24369                           postinc2	equ	0xFDE
 24370                           postdec2	equ	0xFDD
 24371                           fsr2h	equ	0xFDA
 24372                           fsr2l	equ	0xFD9
 24373                           status	equ	0xFD8
 24374                           
 24375 ;; *************** function i2_getRTC *****************
 24376 ;; Defined at:
 24377 ;;		line 44 in file "RTC.c"
 24378 ;; Parameters:    Size  Location     Type
 24379 ;;		None
 24380 ;; Auto vars:     Size  Location     Type
 24381 ;;  getRTC          2    3[COMRAM] int 
 24382 ;; Return value:  Size  Location     Type
 24383 ;;                  1    wreg      void 
 24384 ;; Registers used:
 24385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24386 ;; Tracked objects:
 24387 ;;		On entry : 0/0
 24388 ;;		On exit  : 0/0
 24389 ;;		Unchanged: 0/0
 24390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24395 ;;Total ram usage:        2 bytes
 24396 ;; Hardware stack levels used:    1
 24397 ;; Hardware stack levels required when called:    2
 24398 ;; This function calls:
 24399 ;;		i2_I2C_Master_Read
 24400 ;;		i2_I2C_Master_Start
 24401 ;;		i2_I2C_Master_Stop
 24402 ;;		i2_I2C_Master_Write
 24403 ;; This function is called by:
 24404 ;;		_printSortTimer
 24405 ;;		i2_printRTC
 24406 ;; This function uses a non-reentrant model
 24407 ;;
 24408                           
 24409                           	psect	text90
 24410  004C82                     __ptext90:
 24411                           	opt stack 0
 24412  004C82                     i2_getRTC:
 24413                           	opt stack 19
 24414                           
 24415                           ;RTC.c: 48: I2C_Master_Start();
 24416                           
 24417                           ;incstack = 0
 24418  004C82  EC0D  F02C         	call	i2_I2C_Master_Start	;wreg free
 24419                           
 24420                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 24421  004C86  0E00               	movlw	0
 24422  004C88  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24423  004C8A  0ED0               	movlw	208
 24424  004C8C  6E02               	movwf	i2I2C_Master_Write@d,c
 24425  004C8E  ECF8  F02B         	call	i2_I2C_Master_Write	;wreg free
 24426                           
 24427                           ;RTC.c: 50: I2C_Master_Write(0x00);
 24428  004C92  0E00               	movlw	0
 24429  004C94  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24430  004C96  0E00               	movlw	0
 24431  004C98  6E02               	movwf	i2I2C_Master_Write@d,c
 24432  004C9A  ECF8  F02B         	call	i2_I2C_Master_Write	;wreg free
 24433                           
 24434                           ;RTC.c: 51: I2C_Master_Stop();
 24435  004C9E  EC09  F02C         	call	i2_I2C_Master_Stop	;wreg free
 24436                           
 24437                           ;RTC.c: 54: I2C_Master_Start();
 24438  004CA2  EC0D  F02C         	call	i2_I2C_Master_Start	;wreg free
 24439                           
 24440                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 24441  004CA6  0E00               	movlw	0
 24442  004CA8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24443  004CAA  0ED1               	movlw	209
 24444  004CAC  6E02               	movwf	i2I2C_Master_Write@d,c
 24445  004CAE  ECF8  F02B         	call	i2_I2C_Master_Write	;wreg free
 24446                           
 24447                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 24448  004CB2  0E00               	movlw	0
 24449  004CB4  6E05               	movwf	i2getRTC@i+1,c
 24450  004CB6  0E00               	movlw	0
 24451  004CB8  6E04               	movwf	i2getRTC@i,c
 24452  004CBA                     i2l6762:
 24453  004CBA  BE05               	btfsc	i2getRTC@i+1,7,c
 24454  004CBC  D006               	goto	i2l6766
 24455  004CBE  5005               	movf	i2getRTC@i+1,w,c
 24456  004CC0  E111               	bnz	i2l6772
 24457  004CC2  0E06               	movlw	6
 24458  004CC4  5C04               	subwf	i2getRTC@i,w,c
 24459  004CC6  B0D8               	btfsc	status,0,c
 24460  004CC8  D00D               	goto	i2l6772
 24461  004CCA                     i2l6766:
 24462                           
 24463                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 24464  004CCA  0E1C               	movlw	low _time
 24465  004CCC  2404               	addwf	i2getRTC@i,w,c
 24466  004CCE  6ED9               	movwf	fsr2l,c
 24467  004CD0  0E01               	movlw	high _time
 24468  004CD2  2005               	addwfc	i2getRTC@i+1,w,c
 24469  004CD4  6EDA               	movwf	fsr2h,c
 24470  004CD6  0E01               	movlw	1
 24471  004CD8  EC3B  F02B         	call	i2_I2C_Master_Read
 24472  004CDC  6EDF               	movwf	indf2,c
 24473  004CDE  4A04               	infsnz	i2getRTC@i,f,c
 24474  004CE0  2A05               	incf	i2getRTC@i+1,f,c
 24475  004CE2  D7EB               	goto	i2l6762
 24476  004CE4                     i2l6772:
 24477                           
 24478                           ;RTC.c: 58: }
 24479                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 24480  004CE4  0E00               	movlw	0
 24481  004CE6  EC3B  F02B         	call	i2_I2C_Master_Read
 24482  004CEA  0101               	movlb	1	; () banked
 24483  004CEC  6F22               	movwf	(_time+6)& (0+255),b
 24484                           
 24485                           ;RTC.c: 60: I2C_Master_Stop();
 24486  004CEE  EC09  F02C         	call	i2_I2C_Master_Stop	;wreg free
 24487  004CF2  0012               	return		;funcret
 24488  004CF4                     __end_ofi2_getRTC:
 24489                           	opt stack 0
 24490                           pclatu	equ	0xFFB
 24491                           pclath	equ	0xFFA
 24492                           tblptru	equ	0xFF8
 24493                           tblptrh	equ	0xFF7
 24494                           tblptrl	equ	0xFF6
 24495                           tablat	equ	0xFF5
 24496                           prodh	equ	0xFF4
 24497                           prodl	equ	0xFF3
 24498                           intcon	equ	0xFF2
 24499                           intcon2	equ	0xFF1
 24500                           intcon3	equ	0xFF0
 24501                           indf0	equ	0xFEF
 24502                           postinc0	equ	0xFEE
 24503                           fsr0h	equ	0xFEA
 24504                           fsr0l	equ	0xFE9
 24505                           wreg	equ	0xFE8
 24506                           postdec1	equ	0xFE5
 24507                           fsr1h	equ	0xFE2
 24508                           fsr1l	equ	0xFE1
 24509                           indf2	equ	0xFDF
 24510                           postinc2	equ	0xFDE
 24511                           postdec2	equ	0xFDD
 24512                           fsr2h	equ	0xFDA
 24513                           fsr2l	equ	0xFD9
 24514                           status	equ	0xFD8
 24515                           
 24516 ;; *************** function i2_I2C_Master_Write *****************
 24517 ;; Defined at:
 24518 ;;		line 49 in file "I2C.c"
 24519 ;; Parameters:    Size  Location     Type
 24520 ;;  d               2    1[COMRAM] unsigned int 
 24521 ;; Auto vars:     Size  Location     Type
 24522 ;;		None
 24523 ;; Return value:  Size  Location     Type
 24524 ;;                  1    wreg      void 
 24525 ;; Registers used:
 24526 ;;		wreg, status,2, status,0, cstack
 24527 ;; Tracked objects:
 24528 ;;		On entry : 0/0
 24529 ;;		On exit  : 0/0
 24530 ;;		Unchanged: 0/0
 24531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24536 ;;Total ram usage:        2 bytes
 24537 ;; Hardware stack levels used:    1
 24538 ;; Hardware stack levels required when called:    1
 24539 ;; This function calls:
 24540 ;;		i2_I2C_Master_Wait
 24541 ;; This function is called by:
 24542 ;;		i2_getRTC
 24543 ;; This function uses a non-reentrant model
 24544 ;;
 24545                           
 24546                           	psect	text91
 24547  0057F0                     __ptext91:
 24548                           	opt stack 0
 24549  0057F0                     i2_I2C_Master_Write:
 24550                           	opt stack 19
 24551                           
 24552                           ;I2C.c: 51: I2C_Master_Wait();
 24553                           
 24554                           ;incstack = 0
 24555  0057F0  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24556                           
 24557                           ;I2C.c: 52: SSPBUF = d;
 24558  0057F4  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24559  0057F8  0012               	return		;funcret
 24560  0057FA                     __end_ofi2_I2C_Master_Write:
 24561                           	opt stack 0
 24562                           pclatu	equ	0xFFB
 24563                           pclath	equ	0xFFA
 24564                           tblptru	equ	0xFF8
 24565                           tblptrh	equ	0xFF7
 24566                           tblptrl	equ	0xFF6
 24567                           tablat	equ	0xFF5
 24568                           prodh	equ	0xFF4
 24569                           prodl	equ	0xFF3
 24570                           intcon	equ	0xFF2
 24571                           intcon2	equ	0xFF1
 24572                           intcon3	equ	0xFF0
 24573                           indf0	equ	0xFEF
 24574                           postinc0	equ	0xFEE
 24575                           fsr0h	equ	0xFEA
 24576                           fsr0l	equ	0xFE9
 24577                           wreg	equ	0xFE8
 24578                           postdec1	equ	0xFE5
 24579                           fsr1h	equ	0xFE2
 24580                           fsr1l	equ	0xFE1
 24581                           indf2	equ	0xFDF
 24582                           postinc2	equ	0xFDE
 24583                           postdec2	equ	0xFDD
 24584                           fsr2h	equ	0xFDA
 24585                           fsr2l	equ	0xFD9
 24586                           status	equ	0xFD8
 24587                           
 24588 ;; *************** function i2_I2C_Master_Stop *****************
 24589 ;; Defined at:
 24590 ;;		line 43 in file "I2C.c"
 24591 ;; Parameters:    Size  Location     Type
 24592 ;;		None
 24593 ;; Auto vars:     Size  Location     Type
 24594 ;;		None
 24595 ;; Return value:  Size  Location     Type
 24596 ;;                  1    wreg      void 
 24597 ;; Registers used:
 24598 ;;		wreg, status,2, status,0, cstack
 24599 ;; Tracked objects:
 24600 ;;		On entry : 0/0
 24601 ;;		On exit  : 0/0
 24602 ;;		Unchanged: 0/0
 24603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24608 ;;Total ram usage:        0 bytes
 24609 ;; Hardware stack levels used:    1
 24610 ;; Hardware stack levels required when called:    1
 24611 ;; This function calls:
 24612 ;;		i2_I2C_Master_Wait
 24613 ;; This function is called by:
 24614 ;;		i2_getRTC
 24615 ;; This function uses a non-reentrant model
 24616 ;;
 24617                           
 24618                           	psect	text92
 24619  005812                     __ptext92:
 24620                           	opt stack 0
 24621  005812                     i2_I2C_Master_Stop:
 24622                           	opt stack 19
 24623                           
 24624                           ;I2C.c: 45: I2C_Master_Wait();
 24625                           
 24626                           ;incstack = 0
 24627  005812  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24628                           
 24629                           ;I2C.c: 46: PEN = 1;
 24630  005816  84C5               	bsf	4037,2,c	;volatile
 24631  005818  0012               	return		;funcret
 24632  00581A                     __end_ofi2_I2C_Master_Stop:
 24633                           	opt stack 0
 24634                           pclatu	equ	0xFFB
 24635                           pclath	equ	0xFFA
 24636                           tblptru	equ	0xFF8
 24637                           tblptrh	equ	0xFF7
 24638                           tblptrl	equ	0xFF6
 24639                           tablat	equ	0xFF5
 24640                           prodh	equ	0xFF4
 24641                           prodl	equ	0xFF3
 24642                           intcon	equ	0xFF2
 24643                           intcon2	equ	0xFF1
 24644                           intcon3	equ	0xFF0
 24645                           indf0	equ	0xFEF
 24646                           postinc0	equ	0xFEE
 24647                           fsr0h	equ	0xFEA
 24648                           fsr0l	equ	0xFE9
 24649                           wreg	equ	0xFE8
 24650                           postdec1	equ	0xFE5
 24651                           fsr1h	equ	0xFE2
 24652                           fsr1l	equ	0xFE1
 24653                           indf2	equ	0xFDF
 24654                           postinc2	equ	0xFDE
 24655                           postdec2	equ	0xFDD
 24656                           fsr2h	equ	0xFDA
 24657                           fsr2l	equ	0xFD9
 24658                           status	equ	0xFD8
 24659                           
 24660 ;; *************** function i2_I2C_Master_Start *****************
 24661 ;; Defined at:
 24662 ;;		line 31 in file "I2C.c"
 24663 ;; Parameters:    Size  Location     Type
 24664 ;;		None
 24665 ;; Auto vars:     Size  Location     Type
 24666 ;;		None
 24667 ;; Return value:  Size  Location     Type
 24668 ;;                  1    wreg      void 
 24669 ;; Registers used:
 24670 ;;		wreg, status,2, status,0, cstack
 24671 ;; Tracked objects:
 24672 ;;		On entry : 0/0
 24673 ;;		On exit  : 0/0
 24674 ;;		Unchanged: 0/0
 24675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24680 ;;Total ram usage:        0 bytes
 24681 ;; Hardware stack levels used:    1
 24682 ;; Hardware stack levels required when called:    1
 24683 ;; This function calls:
 24684 ;;		i2_I2C_Master_Wait
 24685 ;; This function is called by:
 24686 ;;		i2_getRTC
 24687 ;; This function uses a non-reentrant model
 24688 ;;
 24689                           
 24690                           	psect	text93
 24691  00581A                     __ptext93:
 24692                           	opt stack 0
 24693  00581A                     i2_I2C_Master_Start:
 24694                           	opt stack 19
 24695                           
 24696                           ;I2C.c: 33: I2C_Master_Wait();
 24697                           
 24698                           ;incstack = 0
 24699  00581A  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24700                           
 24701                           ;I2C.c: 34: SEN = 1;
 24702  00581E  80C5               	bsf	4037,0,c	;volatile
 24703  005820  0012               	return		;funcret
 24704  005822                     __end_ofi2_I2C_Master_Start:
 24705                           	opt stack 0
 24706                           pclatu	equ	0xFFB
 24707                           pclath	equ	0xFFA
 24708                           tblptru	equ	0xFF8
 24709                           tblptrh	equ	0xFF7
 24710                           tblptrl	equ	0xFF6
 24711                           tablat	equ	0xFF5
 24712                           prodh	equ	0xFF4
 24713                           prodl	equ	0xFF3
 24714                           intcon	equ	0xFF2
 24715                           intcon2	equ	0xFF1
 24716                           intcon3	equ	0xFF0
 24717                           indf0	equ	0xFEF
 24718                           postinc0	equ	0xFEE
 24719                           fsr0h	equ	0xFEA
 24720                           fsr0l	equ	0xFE9
 24721                           wreg	equ	0xFE8
 24722                           postdec1	equ	0xFE5
 24723                           fsr1h	equ	0xFE2
 24724                           fsr1l	equ	0xFE1
 24725                           indf2	equ	0xFDF
 24726                           postinc2	equ	0xFDE
 24727                           postdec2	equ	0xFDD
 24728                           fsr2h	equ	0xFDA
 24729                           fsr2l	equ	0xFD9
 24730                           status	equ	0xFD8
 24731                           
 24732 ;; *************** function i2_I2C_Master_Read *****************
 24733 ;; Defined at:
 24734 ;;		line 55 in file "I2C.c"
 24735 ;; Parameters:    Size  Location     Type
 24736 ;;  a               1    wreg     unsigned char 
 24737 ;; Auto vars:     Size  Location     Type
 24738 ;;  a               1    1[COMRAM] unsigned char 
 24739 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24740 ;; Return value:  Size  Location     Type
 24741 ;;                  1    wreg      unsigned char 
 24742 ;; Registers used:
 24743 ;;		wreg, status,2, status,0, cstack
 24744 ;; Tracked objects:
 24745 ;;		On entry : 0/0
 24746 ;;		On exit  : 0/0
 24747 ;;		Unchanged: 0/0
 24748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24753 ;;Total ram usage:        2 bytes
 24754 ;; Hardware stack levels used:    1
 24755 ;; Hardware stack levels required when called:    1
 24756 ;; This function calls:
 24757 ;;		i2_I2C_Master_Wait
 24758 ;; This function is called by:
 24759 ;;		i2_getRTC
 24760 ;; This function uses a non-reentrant model
 24761 ;;
 24762                           
 24763                           	psect	text94
 24764  005676                     __ptext94:
 24765                           	opt stack 0
 24766  005676                     i2_I2C_Master_Read:
 24767                           	opt stack 19
 24768                           
 24769                           ;incstack = 0
 24770                           ;i2I2C_Master_Read@a stored from wreg
 24771  005676  6E02               	movwf	i2I2C_Master_Read@a,c
 24772                           
 24773                           ;I2C.c: 57: unsigned char temp;
 24774                           ;I2C.c: 58: I2C_Master_Wait();
 24775  005678  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24776                           
 24777                           ;I2C.c: 59: RCEN = 1;
 24778  00567C  86C5               	bsf	4037,3,c	;volatile
 24779                           
 24780                           ;I2C.c: 60: I2C_Master_Wait();
 24781  00567E  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24782                           
 24783                           ;I2C.c: 61: temp = SSPBUF;
 24784  005682  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24785                           
 24786                           ;I2C.c: 62: I2C_Master_Wait();
 24787  005686  ECCE  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24788                           
 24789                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24790  00568A  5002               	movf	i2I2C_Master_Read@a,w,c
 24791  00568C  A4D8               	btfss	status,2,c
 24792  00568E  D002               	goto	i2u486_40
 24793  005690  8AC5               	bsf	4037,5,c	;volatile
 24794  005692  D001               	goto	i2l6466
 24795  005694                     i2u486_40:
 24796  005694  9AC5               	bcf	4037,5,c	;volatile
 24797  005696                     i2l6466:
 24798                           
 24799                           ;I2C.c: 64: ACKEN = 1;
 24800  005696  88C5               	bsf	4037,4,c	;volatile
 24801                           
 24802                           ;I2C.c: 65: return temp;
 24803  005698  5003               	movf	i2I2C_Master_Read@temp,w,c
 24804  00569A  0012               	return	
 24805  00569C                     __end_ofi2_I2C_Master_Read:
 24806                           	opt stack 0
 24807                           pclatu	equ	0xFFB
 24808                           pclath	equ	0xFFA
 24809                           tblptru	equ	0xFF8
 24810                           tblptrh	equ	0xFF7
 24811                           tblptrl	equ	0xFF6
 24812                           tablat	equ	0xFF5
 24813                           prodh	equ	0xFF4
 24814                           prodl	equ	0xFF3
 24815                           intcon	equ	0xFF2
 24816                           intcon2	equ	0xFF1
 24817                           intcon3	equ	0xFF0
 24818                           indf0	equ	0xFEF
 24819                           postinc0	equ	0xFEE
 24820                           fsr0h	equ	0xFEA
 24821                           fsr0l	equ	0xFE9
 24822                           wreg	equ	0xFE8
 24823                           postdec1	equ	0xFE5
 24824                           fsr1h	equ	0xFE2
 24825                           fsr1l	equ	0xFE1
 24826                           indf2	equ	0xFDF
 24827                           postinc2	equ	0xFDE
 24828                           postdec2	equ	0xFDD
 24829                           fsr2h	equ	0xFDA
 24830                           fsr2l	equ	0xFD9
 24831                           status	equ	0xFD8
 24832                           
 24833 ;; *************** function i2_I2C_Master_Wait *****************
 24834 ;; Defined at:
 24835 ;;		line 26 in file "I2C.c"
 24836 ;; Parameters:    Size  Location     Type
 24837 ;;		None
 24838 ;; Auto vars:     Size  Location     Type
 24839 ;;		None
 24840 ;; Return value:  Size  Location     Type
 24841 ;;                  1    wreg      void 
 24842 ;; Registers used:
 24843 ;;		wreg, status,2, status,0
 24844 ;; Tracked objects:
 24845 ;;		On entry : 0/0
 24846 ;;		On exit  : 0/0
 24847 ;;		Unchanged: 0/0
 24848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24852 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24853 ;;Total ram usage:        1 bytes
 24854 ;; Hardware stack levels used:    1
 24855 ;; This function calls:
 24856 ;;		Nothing
 24857 ;; This function is called by:
 24858 ;;		i2_I2C_Master_Start
 24859 ;;		i2_I2C_Master_Stop
 24860 ;;		i2_I2C_Master_Write
 24861 ;;		i2_I2C_Master_Read
 24862 ;; This function uses a non-reentrant model
 24863 ;;
 24864                           
 24865                           	psect	text95
 24866  00579C                     __ptext95:
 24867                           	opt stack 0
 24868  00579C                     i2_I2C_Master_Wait:
 24869                           	opt stack 19
 24870  00579C                     i2l66:
 24871  00579C  B4C7               	btfsc	4039,2,c	;volatile
 24872  00579E  D7FE               	goto	i2l66
 24873  0057A0  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24874  0057A4  0E1F               	movlw	31
 24875  0057A6  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24876  0057A8  B4D8               	btfsc	status,2,c
 24877  0057AA  0012               	return	
 24878  0057AC  D7F7               	goto	i2l66
 24879  0057AE                     __end_ofi2_I2C_Master_Wait:
 24880                           	opt stack 0
 24881                           pclatu	equ	0xFFB
 24882                           pclath	equ	0xFFA
 24883                           tblptru	equ	0xFF8
 24884                           tblptrh	equ	0xFF7
 24885                           tblptrl	equ	0xFF6
 24886                           tablat	equ	0xFF5
 24887                           prodh	equ	0xFF4
 24888                           prodl	equ	0xFF3
 24889                           intcon	equ	0xFF2
 24890                           intcon2	equ	0xFF1
 24891                           intcon3	equ	0xFF0
 24892                           indf0	equ	0xFEF
 24893                           postinc0	equ	0xFEE
 24894                           fsr0h	equ	0xFEA
 24895                           fsr0l	equ	0xFE9
 24896                           wreg	equ	0xFE8
 24897                           postdec1	equ	0xFE5
 24898                           fsr1h	equ	0xFE2
 24899                           fsr1l	equ	0xFE1
 24900                           indf2	equ	0xFDF
 24901                           postinc2	equ	0xFDE
 24902                           postdec2	equ	0xFDD
 24903                           fsr2h	equ	0xFDA
 24904                           fsr2l	equ	0xFD9
 24905                           status	equ	0xFD8
 24906                           
 24907 ;; *************** function i2_delay_ms *****************
 24908 ;; Defined at:
 24909 ;;		line 645 in file "sort.c"
 24910 ;; Parameters:    Size  Location     Type
 24911 ;;  milliseconds    1    wreg     unsigned char 
 24912 ;; Auto vars:     Size  Location     Type
 24913 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24914 ;; Return value:  Size  Location     Type
 24915 ;;                  1    wreg      void 
 24916 ;; Registers used:
 24917 ;;		wreg, status,2, status,0, cstack
 24918 ;; Tracked objects:
 24919 ;;		On entry : 0/0
 24920 ;;		On exit  : 0/0
 24921 ;;		Unchanged: 0/0
 24922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24927 ;;Total ram usage:        2 bytes
 24928 ;; Hardware stack levels used:    1
 24929 ;; This function calls:
 24930 ;;		Nothing
 24931 ;; This function is called by:
 24932 ;;		_printSortTimer
 24933 ;; This function uses a non-reentrant model
 24934 ;;
 24935                           
 24936                           	psect	text96
 24937  00573E                     __ptext96:
 24938                           	opt stack 0
 24939  00573E                     i2_delay_ms:
 24940                           	opt stack 22
 24941                           
 24942                           ;incstack = 0
 24943                           ;i2delay_ms@milliseconds stored from wreg
 24944  00573E  6E02               	movwf	i2delay_ms@milliseconds,c
 24945                           
 24946                           ;sort.c: 646: while(milliseconds > 0)
 24947  005740  D008               	goto	i2l8966
 24948  005742                     i2l8962:
 24949                           
 24950                           ;sort.c: 647: {
 24951                           ;sort.c: 648: milliseconds--;
 24952  005742  0602               	decf	i2delay_ms@milliseconds,f,c
 24953                           
 24954                           ;sort.c: 649: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24955  005744  0E0B               	movlw	11
 24956  005746  6E01               	movwf	??i2_delay_ms& (0+255),c
 24957  005748  0E48               	movlw	72
 24958  00574A                     i2u1112_47:
 24959  00574A  2EE8               	decfsz	wreg,f,c
 24960  00574C  D7FE               	bra	i2u1112_47
 24961  00574E  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24962  005750  D7FC               	bra	i2u1112_47
 24963  005752                     i2l8966:
 24964  005752  5002               	movf	i2delay_ms@milliseconds,w,c
 24965  005754  B4D8               	btfsc	status,2,c
 24966  005756  0012               	return	
 24967  005758  D7F4               	goto	i2l8962
 24968  00575A                     __end_ofi2_delay_ms:
 24969                           	opt stack 0
 24970                           pclatu	equ	0xFFB
 24971                           pclath	equ	0xFFA
 24972                           tblptru	equ	0xFF8
 24973                           tblptrh	equ	0xFF7
 24974                           tblptrl	equ	0xFF6
 24975                           tablat	equ	0xFF5
 24976                           prodh	equ	0xFF4
 24977                           prodl	equ	0xFF3
 24978                           intcon	equ	0xFF2
 24979                           intcon2	equ	0xFF1
 24980                           intcon3	equ	0xFF0
 24981                           indf0	equ	0xFEF
 24982                           postinc0	equ	0xFEE
 24983                           fsr0h	equ	0xFEA
 24984                           fsr0l	equ	0xFE9
 24985                           wreg	equ	0xFE8
 24986                           postdec1	equ	0xFE5
 24987                           fsr1h	equ	0xFE2
 24988                           fsr1l	equ	0xFE1
 24989                           indf2	equ	0xFDF
 24990                           postinc2	equ	0xFDE
 24991                           postdec2	equ	0xFDD
 24992                           fsr2h	equ	0xFDA
 24993                           fsr2l	equ	0xFD9
 24994                           status	equ	0xFD8
 24995                           pclatu	equ	0xFFB
 24996                           pclath	equ	0xFFA
 24997                           tblptru	equ	0xFF8
 24998                           tblptrh	equ	0xFF7
 24999                           tblptrl	equ	0xFF6
 25000                           tablat	equ	0xFF5
 25001                           prodh	equ	0xFF4
 25002                           prodl	equ	0xFF3
 25003                           intcon	equ	0xFF2
 25004                           intcon2	equ	0xFF1
 25005                           intcon3	equ	0xFF0
 25006                           indf0	equ	0xFEF
 25007                           postinc0	equ	0xFEE
 25008                           fsr0h	equ	0xFEA
 25009                           fsr0l	equ	0xFE9
 25010                           wreg	equ	0xFE8
 25011                           postdec1	equ	0xFE5
 25012                           fsr1h	equ	0xFE2
 25013                           fsr1l	equ	0xFE1
 25014                           indf2	equ	0xFDF
 25015                           postinc2	equ	0xFDE
 25016                           postdec2	equ	0xFDD
 25017                           fsr2h	equ	0xFDA
 25018                           fsr2l	equ	0xFD9
 25019                           status	equ	0xFD8
 25020                           
 25021                           	psect	rparam
 25022  0000                     pclatu	equ	0xFFB
 25023                           pclath	equ	0xFFA
 25024                           tblptru	equ	0xFF8
 25025                           tblptrh	equ	0xFF7
 25026                           tblptrl	equ	0xFF6
 25027                           tablat	equ	0xFF5
 25028                           prodh	equ	0xFF4
 25029                           prodl	equ	0xFF3
 25030                           intcon	equ	0xFF2
 25031                           intcon2	equ	0xFF1
 25032                           intcon3	equ	0xFF0
 25033                           indf0	equ	0xFEF
 25034                           postinc0	equ	0xFEE
 25035                           fsr0h	equ	0xFEA
 25036                           fsr0l	equ	0xFE9
 25037                           wreg	equ	0xFE8
 25038                           postdec1	equ	0xFE5
 25039                           fsr1h	equ	0xFE2
 25040                           fsr1l	equ	0xFE1
 25041                           indf2	equ	0xFDF
 25042                           postinc2	equ	0xFDE
 25043                           postdec2	equ	0xFDD
 25044                           fsr2h	equ	0xFDA
 25045                           fsr2l	equ	0xFD9
 25046                           status	equ	0xFD8
 25047                           
 25048                           	psect	temp
 25049  00007E                     btemp:
 25050                           	opt stack 0
 25051  00007E                     	ds	1
 25052  0000                     int$flags	set	btemp
 25053                           pclatu	equ	0xFFB
 25054                           pclath	equ	0xFFA
 25055                           tblptru	equ	0xFF8
 25056                           tblptrh	equ	0xFF7
 25057                           tblptrl	equ	0xFF6
 25058                           tablat	equ	0xFF5
 25059                           prodh	equ	0xFF4
 25060                           prodl	equ	0xFF3
 25061                           intcon	equ	0xFF2
 25062                           intcon2	equ	0xFF1
 25063                           intcon3	equ	0xFF0
 25064                           indf0	equ	0xFEF
 25065                           postinc0	equ	0xFEE
 25066                           fsr0h	equ	0xFEA
 25067                           fsr0l	equ	0xFE9
 25068                           wreg	equ	0xFE8
 25069                           postdec1	equ	0xFE5
 25070                           fsr1h	equ	0xFE2
 25071                           fsr1l	equ	0xFE1
 25072                           indf2	equ	0xFDF
 25073                           postinc2	equ	0xFDE
 25074                           postdec2	equ	0xFDD
 25075                           fsr2h	equ	0xFDA
 25076                           fsr2l	equ	0xFD9
 25077                           status	equ	0xFD8


Data Sizes:
    Strings     1344
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_130(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_129(CODE[18]), STR_128(CODE[18]), STR_127(CODE[17]), STR_126(CODE[17]), 
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), 
		 -> STR_113(CODE[17]), STR_112(CODE[17]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  224794
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23706
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18106
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   9     9      0     207
                                              2 BANK0      9     9      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11542
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10795
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23480
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22566
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46712
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13467
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9099
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118241
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9211
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9168
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9099
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15735
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9099
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        16    16      0    9464
                                             43 BANK0     16    16      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19885
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9283
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8964
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 22:46:16 2017

                                    _i 013D                     i2_I2C_Master_Start 581A  
                   i2_I2C_Master_Write 57F0                                     l66 5788  
                                   _ID 31E4                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5202                                    ID@i 0085  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l501 455A                                    l183 00E6  
                                  l620 2A68                                    l188 0102  
                                  l804 1578                                    l821 1600  
                                  l831 1774                                    l823 1626  
                                  l815 1728                                    l807 150C  
                                  l824 164E                                    l825 1676  
                                  l809 1538                                    l906 4A5A  
                                  l850 3394                                    l826 169E  
                                  l827 16C8                                    l854 3446  
                                  l847 3356                                    l848 3370  
                                  l776 125E                                    l849 33AE  
                                  l794 1424                                    l786 1328  
                                  l797 1472                                    l789 1376  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3C30  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 411E                                    _log 00F4  
                                  _sel 00FD                                    _var 0145  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3DB4  
                  _log_count_can_w_lab 0141                             i2_delay_ms 573E  
      __end_of_change_state_to_menu_11 5432        __end_of_change_state_to_menu_12 5272  
      __end_of_change_state_to_menu_22 523A        __end_of_change_state_to_menu_23 5402  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5522        __end_of_change_state_to_logs_12 54F2  
      __end_of_change_state_to_logs_22 54C2        __end_of_change_state_to_logs_23 557E  
      __end_of_change_state_to_logs_33 5492        __end_of_change_state_to_logs_34 5462  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1112 576A                                   l1121 3EE2  
                                 l1214 405E                                   l1240 4448  
                                 l1321 1046                                   l1217 407E  
                                 l1412 4AF0                                   l1405 4AE0  
                                 l1309 0EAC                                   l1237 4444  
                                 l1326 111C                                   l1246 2712  
                                 l1360 2338                                   l1272 0940  
                                 l1345 4FA6                                   l1249 2716  
                                 l1506 19C8                                   l1434 3D52  
                                 l1282 0A50                                   l1450 41D0  
                                 l1435 3D6C                                   l1339 4F96  
                                 l1283 0A9E                                   l1275 0944  
                                 l1099 423E                                   l1284 0B04  
                                 l1429 3D06                                   l1381 2318  
                                 l1373 2268                                   l1285 0B52  
                                 l1383 2332                                   l1279 09EA  
                                 l1472 4F4A                                   l1377 22C0  
                                 l1369 2224                                   l1449 420E  
                                 l1466 4F3A                                   l1458 4208  
                                 l1900 47A6                                   ?_arm 0001  
                                 l1953 4C06                                   l1963 4E8C  
                                 l7200 561C                                   l8002 292C  
                                 l7132 47DC                                   l6414 4BB6  
                                 l8014 2974                                   l8006 2962  
                                 l6416 4BC2                                   l8200 0CE0  
                                 l9000 00FE                                   l7232 4C34  
                                 l7128 47C6                                   l6426 4BF8  
                                 l6418 4BC8                                   l6442 4E7E  
                                 l6434 4E48                                   l6602 1970  
                                 l8210 0D08                                   l8018 29AA  
                                 l9010 013A                                   l7138 4852  
                                 l6436 4E54                                   l6620 1A00  
                                 l6604 1988                                   l6356 55BE  
                                 l8204 0CF8                                   l8060 09B4  
                                 l6380 5548                                   l7340 495C  
                                 l7244 4C5E                                   l7228 4C1E  
                                 l6438 4E5A                                   l6550 1790  
                                 l6358 55D0                                   l8310 0F16  
                                 l8302 0EF4                                   l8230 0D7C  
                                 l8222 0D5A                                   l8214 0D20  
                                 l8206 0CFE                                   l6702 4A06  
                                 l9110 034C                                   l9022 016E  
                                 l9014 0144                                   l9006 0128  
                                 l7190 42EC                                   l7174 42AA  
                                 l7182 42CC                                   _ADIE 007CEE  
                                 l6624 1A1A                                   l6608 198E  
                                 l6560 17C0                                   l6720 4A3E  
                                 l8320 0F3E                                   l8312 0F1C  
                                 l8240 0DA4                                   l8232 0D82  
                                 l8152 0BF0                                   l8144 0BCE  
                                 l8064 09BE                                   l9120 03E2  
                                 l9112 036A                                   l9104 02F2  
                                 l7336 4946                                   l7248 4C76  
                                 l6650 1AC0                                   l6626 1A20  
                                 l6554 17A4                                   l8402 10C8  
                                 l8306 0EFE                                   l8226 0D64  
                                 l8170 0C52                                   l8162 0C18  
                                 l8154 0BF6                                   l8058 09AE  
                                 l9202 0690                                   l9122 0400  
                                 l9114 0388                                   l9106 0310  
                                 l9042 01D2                                   l9018 015C  
                                 l7346 4988                                   l7186 42E2  
                                 l7178 42B4                                   l7610 1360  
                                 l6644 1A7E                                   l6556 17B6  
                                 l8412 1106                                   l8332 0F82  
                                 l8316 0F26                                   l8252 0DE8  
                                 l8236 0D8C                                   l8180 0C7A  
                                 l8148 0BD8                                   l8068 09D6  
                                 l9300 0866                                   l9220 06F6  
                                 l9124 041E                                   l9116 03A6  
                                 l9108 032E                                   l9132 0478  
                                 l9036 01C2                                   l9052 01F8  
                                 l6740 473A                                   l7196 5606  
                                 l7620 13A4                                   l6398 55F6  
                                 l6662 1AF6                                   l6638 1A5C  
                                 l6582 18A2                                   l6574 1870  
                                 l6566 17F4                                   l6726 4A78  
                                 l8422 1136                                   l8406 10E0  
                                 l8342 0FAA                                   l8262 0E10  
                                 l8174 0C5C                                   l8158 0C00  
                                 l9142 0528                                   l9126 043C  
                                 l9118 03C4                                   l9134 04DC  
                                 l9070 0254                                   l9046 01EA  
                                 l9038 01C8                                   l6750 4794  
                                 l6742 4740                                   l6664 1B02  
                                 l6672 1B30                                   l6656 1ADA  
                                 l6648 1AB6                                   l6592 191A  
                                 l6584 18AE                                   l6680 1B9A  
                                 l8432 115E                                   l8424 113C  
                                 l8336 0F9A                                   l8328 0F78  
                                 l8256 0E00                                   l8248 0DDE  
                                 l8184 0C84                                   l9304 0870  
                                 l9224 0700                                   l9160 0574  
                                 l9152 0552                                   l9128 045A  
                                 l9080 027E                                   l7608 1356  
                                 l7552 121C                                   l6674 1B36  
                                 l6594 1926                                   l6586 18B4  
                                 l8442 1186                                   l8434 1164  
                                 l8362 101E                                   l8354 0FFC  
                                 l8346 0FC2                                   l8338 0FA0  
                                 l8282 0E84                                   l8274 0E62  
                                 l8266 0E28                                   l8258 0E06  
                                 l8178 0C74                                   l9322 08BC  
                                 l9314 089A                                   l9242 074C  
                                 l9234 072A                                   l9146 0540  
                                 l9138 051E                                   l9074 026C  
                                 l9066 024A                                   l6738 472A  
                                 l7802 330A                                   l7562 1266  
                                 l6668 1B1C                                   l6596 192C  
                                 l8612 216E                                   l8428 1146  
                                 l8364 1024                                   l8284 0E8A  
                                 l8196 0CD6                                   l8188 0C9C  
                                 l6692 49D0                                   l6684 527C  
                                 l9308 0888                                   l9260 07B2  
                                 l9228 0718                                   l9180 063A  
                                 l9156 055C                                   l9084 0288  
                                 l7636 140E                                   l6678 1B8E  
                                 l6598 1944                                   l8630 21D0  
                                 l8438 116E                                   l8358 1006  
                                 l8278 0E6C                                   l6686 5288  
                                 l9318 08A4                                   l9238 0734  
                                 l9326 08C8                                   l7806 331A  
                                 l7726 16DE                                   l7734 1730  
                                 l7670 14F0                                   l7662 14C6  
                                 l7646 1452                                   l8640 220E  
                                 l8632 21E6                                   l8624 21B0  
                                 l8392 10A0                                   l8368 102E  
                                 l8288 0E94                                   l8472 4192  
                                 l6696 49E6                                   l6960 2AEA  
                                 l6952 2A72                                   l9264 07BC  
                                 l9184 0644                                   l9088 02A0  
                                 l7816 3340                                   l7808 331C  
                                 l7728 1714                                   l7648 145C  
                                 l8650 223E                                   l8538 4B18  
                                 l6970 2B80                                   l6962 2B08  
                                 l6954 2A90                                   l6946 29E6  
                                 l9282 0808                                   l9274 07E6  
                                 l9194 066E                                   l9602 3E9C  
                                 l7826 3374                                   l7674 1510  
                                 l7746 1768                                   l7658 14A0  
                                 l7578 12A2                                   l8812 3CD4  
                                 l8636 21FA                                   l8396 10B8  
                                 l8388 1096                                   l8476 41B8  
                                 l8484 41D6                                   l6972 2B9E  
                                 l6964 2B26                                   l6956 2AAE  
                                 l6980 2C38                                   l9268 07D4  
                                 l9188 065C                                   l7852 3404  
                                 l7860 3448                                   l7828 337E  
                                 l7780 32A2                                   l7668 14E6  
                                 l7748 1776                                   l8830 3D18  
                                 l8654 2252                                   l8574 2008  
                                 l8398 10BE                                   l8486 41F0  
                                 l8478 41C2                                   l6974 2BBC  
                                 l6966 2B44                                   l6958 2ACC  
                                 l9278 07F0                                   l9198 0678  
                                 l7870 4350                                   l7790 32D2  
                                 l7678 152C                                   l7598 1312  
                                 l8808 3CA4                                   l8664 2296  
                                 l8592 20B8                                   l8488 41FA  
                                 l9640 409C                                   l9632 4084  
                                 l9616 401A                                   l8920 48B4  
                                 l8912 488E                                   l6968 2B62  
                                 l7872 436A                                   l7696 15DC  
                                 l8850 3D7E                                   l8682 2302  
                                 l8594 20BE                                   l7946 2766  
                                 l9650 40BA                                   l9642 40A2  
                                 l9634 408A                                   l6978 2BDA  
                                 l7866 431C                                   l7794 32E2  
                                 l8836 3D32                                   l8828 3D08  
                                 l8668 22AA                                   l7964 281E  
                                 l9644 40A8                                   l9636 4090  
                                 l8932 48FA                                   l8924 48D8  
                                 l8916 48A2                                   l8908 487E  
                                 l7868 4336                                   l7876 4384  
                                 l8838 3D3C                                   l8854 3DAE  
                                 l8678 22EE                                   l7982 28B0  
                                 l9646 40AE                                   l9638 4096  
                                 l9654 40C0                                   l8870 4670  
                                 l8918 48AE                                   l7878 43B2  
                                 l8848 3D6E                                   l7976 286E  
                                 l9648 40B4                                   l9656 4112  
                                 l8880 46A0                                   l8864 465A  
                                 l8928 48E6                                   l9576 3E00  
                                 l7994 28FC                                   l9578 3E14  
                                 l9850 451C                                   l8876 468E  
                                 l8892 46DE                                   l8878 469A  
                                 l9854 452C                                   STR_1 FB69  
                                 l8896 46F2                                   l8888 46D0  
                                 l9856 4532                                   l9872 455C  
                                 l9848 4506                                   STR_2 FF31  
                                 STR_3 FB57                                   l9866 4550  
                                 l9858 4538                                   STR_4 FE54  
                                 STR_5 FB57                                   l9868 4556  
                                 STR_6 FDF0                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
              ??i2_updateServoPosition 0005                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5040 18EE                                   u6020 1228  
                                 u5047 18E4                                   u5080 1966  
                                 u6040 125E                                   _PEIE 007F96  
                                 u6300 1570                                   u6310 1572  
                                 u6038 122C                                   u5087 195C  
                                 u6410 323E                                   u7300 41AE  
                                 _RCEN 007E2B                                   u7310 41B0  
                                 u6350 15FE                                   u4760 5546  
                                 u6280 154A                                   u6418 3242  
                                 u7500 204C                                   u7350 41E6  
                                 u6710 2998                                   u5670 2A68  
                                 u9030 3EE2                                   u5655 4EC6  
                                 u7520 2100                                   u6800 0A9E  
                                 u7360 41E8                                   u6640 27A8  
                                 u6560 3410                                   u4960 50EA  
                                 i2l66 579C                                   u7530 2102  
                                 u6650 27AA                                   u4970 50EC  
                                 u6298 154E                                   u7620 21DE  
                                 u6820 0B52                                   u4980 5136  
                                 u6580 3446                                   u4981 5132  
                                 u7630 21F6                                   u4990 5138  
                                 u6718 299C                                   u7631 21F2  
                                 u6680 2950                                   u7570 2198  
                                 u7490 204A                                   u6578 3414  
                                 u7900 3D2A                                   u6780 09EA  
                                 u6688 2954                                   u7841 3CFC  
                                 u9417 11AC                                   u7850 3CFE  
                                 u9507 1440                                   u9427 12D0  
                                 u7780 3C66                                   u7588 219C  
                                 u9517 147C                                   u9437 1332  
                                 u7950 3D9C                                   u7790 3CC2  
                                 u9607 1658                                   u9527 148E  
                                 u9447 1344                                   u9617 166C  
                                 u9537 14AE                                   u9457 1380  
                                 u7891 3D28                                   u9707 31FE  
                                 u9627 1680                                   u9547 1592  
                                 u9467 1392                                   u7788 3C6A  
                                 u9717 3224                                   u9637 1694  
                                 u9557 15CA                                   u9477 13B2  
                                 u7958 3DA0                                   u7798 3CC6  
                                 u9807 4260                                   u9727 325C  
                                 u9647 16A8                                   u9567 160A  
                                 u9487 13DC                                   u9817 42BC  
                                 u9737 327A                                   u9657 16BC  
                                 u9577 161C                                   u9497 142E  
                                 u9907 0206                                   u9827 42F4  
                                 u9747 335A                                   u9667 16D2  
                                 u9587 1630                                   u9917 025C  
                                 u9837 5148                                   u9757 3364  
                                 u9677 174A                                   u9597 1644  
                                 u9927 0290                                   u9847 517C  
                                 u9767 3398                                   u9687 52FC  
                                 u9937 02BA                                   u9857 002A  
                                 u9777 33A2                                   u9697 4C3C  
                                 u9947 0530                                   u9867 0114  
                                 u9787 33C8                                   u9957 0564  
                                 u9877 014C                                   u9797 5612  
                                 u9967 058E                                   u9887 0184  
                                 u9977 064C                                   u9897 01DA  
                                 u9987 0680                                   _RSEN 007E29  
                                 u9997 06AA                            _stopSignals 5722  
                                 _Test 4018                                   _back 005B  
                                 _main 44BC                                   _down 005D  
                                 _keys FAA3                                   _time 011C  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 56C0  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 013F  
                      __end_ofi2_putch 57DA                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 3454  
                          i2_lcdNibble 4FAE                        __end_of_Loading 1782  
                 __end_of_actuatorTest 118E                                  ??_arm 00AB  
           i2updateServoPosition@timer 0003                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 4304                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 46FC                        ?_updateArmState 0001  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FABE                                  STR_14 FFD6  
                                STR_22 FF9A                                  STR_30 FE01  
                                STR_15 FFD2                                  STR_23 FF23  
                                STR_31 FDDF                                  STR_16 FFE2  
                                STR_24 FD46                                  STR_32 FD24  
                                STR_40 FCE0                                  STR_17 FFF2  
                                STR_25 FE23                                  STR_33 FD35  
                                STR_41 FCCF                                  STR_18 FFF6  
                                STR_34 FDCE                                  STR_50 FDAC  
                                STR_42 FD8A                                  STR_26 FD57  
                                STR_43 FD8A                                  STR_35 FDCE  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FE12                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD68  
                                STR_36 FD13                                  STR_44 FCF1  
                      __end_of___awmod 4904                                  STR_45 FCE0  
                                STR_37 FD24                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FE20  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FEDC                                  STR_38 FDBD  
                                STR_46 FD9B                                  STR_47 FD9B  
                                STR_55 FFFA                                  STR_63 FABE  
                                STR_71 FF15                                  STR_39 FD79  
                                STR_56 FFDE                                  STR_64 FF7B  
                                STR_80 FE64                                  STR_48 FD02  
                                STR_72 FC58                                  STR_49 FCF1  
                                STR_57 FFD6                                  STR_81 FE20  
                                STR_65 FF4C                                  STR_73 FEF9  
                                STR_58 FFD2                                  STR_74 FF59  
                                STR_90 FECD                                  STR_82 FE91  
                                STR_66 FAD6                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_91 FEEB  
                                STR_75 FEBE                                  STR_83 FE34  
                                STR_84 FF86                                  STR_76 FF07  
                                STR_68 FC8B                                  STR_92 FC69  
                                STR_85 FF86                                  STR_77 FFAD  
                                STR_93 FF65                                  STR_69 FC9C  
                                STR_78 FF15                                  STR_86 FFA4  
                                STR_94 FC7A                                  STR_87 FFA4  
                                STR_95 FF70                                  STR_79 FF3F  
                                STR_88 FF90                                  STR_96 FEAF  
                                STR_89 FF15                                  STR_97 FBD0  
                                STR_98 FBBF                                  STR_99 FB9D  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 47B8           i2updateServoPosition@time_us 0001  
                                u10007 0708                                  u10017 073C  
                                u10107 2706                                  u10027 0766  
                                u10117 2728                                  u10037 07C4  
                                u11007 3D56                                  u10207 290A  
                                u10127 2756                                  u10047 07F8  
                                u11017 3D60                                  u10217 412C  
                                u10137 27BE                                  u10057 0822  
                                u11027 4D86                                  u10307 0A60  
                                u10227 43F4                                  u10147 2812  
                                u10067 0878                                  u11037 4D90  
                                u10317 0A7E                                  u10237 4438  
                                u10157 2832                                  u10077 08AC  
                                u11047 4DBC                                  u10407 0CE8  
                                u10327 0AAE                                  u10247 445A  
                                u10167 2860                                  u10087 4028  
                                _T0CON 000FD5                                  u11057 4DC6  
                                u10417 0D10                                  u10337 0B14  
                                u10257 08F0                                  u10177 28A4  
                                u10097 26C2                                  u10507 0F8A  
                                u10427 0D6C                                  u10347 0B32  
                                u10267 0934                                  u10187 28C2  
                      ___awdiv@divisor 0088                                  u10517 0FB2  
                                u10437 0D94                                  u10357 0B62  
                                u10277 0956                                  u10197 28F0  
                                u10607 1176                                  u10527 100E  
                                u10447 0DF0                                  u10367 0BE0  
                                u10287 09C6                                  _T1CON 000FCD  
                                u10617 4AAA                                  u10537 1036  
                                u10457 0E18                                  u10377 0C08  
                                u10297 09FA                                  u10707 2162  
                                u10627 4AFA                                  u10547 1058  
                                u10467 0E74                                  u10387 0C64  
                                u10717 2228                                  u10637 4B0E  
                                u10557 10A8                                  u10477 0E9C  
                                u10397 0C8C                                  u10807 1BC8  
                                u10727 2230                                  u10647 4F04  
                                u10567 10D0                                  u10487 0F06  
                                _T2CON 000FCA                                  u10817 1C14  
                                u10737 2272                                  u10657 4F60  
                                u10577 1120                                  u10497 0F2E  
                                u10907 1E2A                                  u10827 1C60  
                                u10747 2284                                  u10667 1FE6  
                                u10587 112A                                  u10917 1E76  
                                u10837 1C94                                  u10757 22CA  
                                u10677 2060                                  u10597 114E  
                                u10927 1EAA                                  u10847 1CC6  
                                u10767 22DC                                  u10687 20AC  
                                _T3CON 000FB1                                  u10937 1EDC  
                                u10857 1D12                                  u10777 231C  
                                u10697 2116                                  u10947 1F28  
                                u10867 1D46                                  u10787 2326  
                                u10957 1F5C                                  u10877 1D78  
                                u10797 55C6                                  u10967 1F8E  
                                u10887 1DC4                                  u10977 4B62  
                                u10897 1DF8                                  u10987 4B7E  
                                u10997 3C3E                        __end_of___lwdiv 4C10  
                      __end_of___lwmod 4E96                                  i2l263 2F38  
                                i2l620 34E2                                  i2l906 4D2A  
                                i2l933 51FE                        ___awdiv@counter 008A  
                                i2l885 310A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1BBA  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 57CE  
                      __end_of_handler 387C                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 55D6                        __end_of_initLCD 5186  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 4C10  
                      __end_of_loadRTC 4990                        __end_of_readMAG 5140  
                      __end_of_dpowers FABE                                  _first 0139  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 5600                                  _input 007D  
                                _putch 57AE                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 5676  
                     __end_ofi2_getRTC 4CF4                    _log_count_pop_w_tab 0067  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 26B4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 5342                            Loading@addr 00B3  
                     _count_can_no_lab 0123                   printSortTimer@i_1222 0047  
                 __size_of_EEPROM_read 0018                        __initialization 505A  
                         __end_of_Test 411E                     __size_ofi2_lcdInst 000C  
                         __end_of_main 4580                           __end_of_keys FAB4  
                         __end_of_sort 56E2                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                          _BlockerTest 3C30                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00C4  
                        __activetblptr 000003             __size_of_updateServoStates 01C8  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC25  
                               STR_101 FC36                                 STR_110 FCBE  
                               STR_102 FB7B                                 STR_103 FE44  
                               STR_111 FAEB                                 STR_112 FBE1  
                               STR_104 FBAE                                 STR_120 FB0F  
                               STR_113 FC14                                 STR_105 FB8C  
                               STR_121 FAFD                                 STR_106 FBAE  
                               STR_114 FC14                                 STR_130 FFB5  
                               STR_122 FB45                                 _ADRESH 000FC4  
                               STR_107 FEA0                                 STR_115 FC03  
                               STR_123 FB21                                 STR_116 FC14  
                               STR_124 FB45                                 STR_108 FE82  
                               _EEADRH 000FAA                                 STR_117 FC03  
                               STR_125 FB45                                 STR_109 FE73  
                               STR_126 FBF2                                 STR_118 FBF2  
                               _ADRESL 000FC3                                 STR_127 FCAD  
                               STR_119 FC47                                 STR_128 FAEB  
                               STR_129 FB33                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 53A2              i2_change_state_to_menu_22 5372  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1112 5780  
                               i2l1025 3778                                 i2l1034 3820  
                               i2l1036 3840                                 i2l1506 2520  
                               i2l1953 5050                                 i2l1963 51BE  
                               i2l7100 3FCC                                 i2l6500 501E  
                               i2l7108 4000                                 i2l7300 352E  
                               i2l6502 5026                                 i2l7310 359C  
                               i2l7302 3544                                 i2l6512 5046  
                               i2l6504 502A                                 i2l6520 5194  
                               i2l7400 38CA                                 i2l7312 35B2  
                               i2l7304 355A                                 i2l7320 35F4  
                               i2l6522 519C                                 i2l7402 38CE  
                               i2l7314 35C8                                 i2l7306 3570  
                               i2l7322 364E                                 i2l6524 51A0  
                               i2l7420 3904                                 i2l7412 38EC  
                               i2l7316 35DE                                 i2l7308 3586  
                               i2l7502 3A30                                 i2l7422 390A  
                               i2l7414 38F2                                 i2l6528 51B4  
                               i2l6800 2374                                 i2l7096 3FBC  
                               i2l7416 38F8                                 i2l7408 38D8  
                               i2l6466 5696                                 i2l6490 571A  
                               i2l7418 38FE                                 i2l7426 3910  
                               i2l7452 397A                                 i2l7508 3A3A  
                               i2l6902 260E                                 i2l6822 2430  
                               i2l6814 2408                                 i2l6806 23A6  
                               i2l7462 39A0                                 i2l7446 396C  
                               i2l7438 3954                                 i2l7390 38A0  
                               i2l7294 34EC                                 i2l6904 2616  
                               i2l6912 263C                                 i2l6832 2488  
                               i2l6824 243A                                 i2l6920 2698  
                               i2l7480 39DA                                 i2l7472 39C2  
                               i2l7456 3996                                 i2l7296 3502  
                               i2l7288 3480                                 i2l6762 4CBA  
                               i2l6914 2642                                 i2l6842 24D4  
                               i2l6834 2492                                 i2l6826 243E  
                               i2l7490 39FA                                 i2l7466 39B4  
                               i2l7298 3518                                 i2l9410 2D9C  
                               i2l9402 2D80                                 i2l6772 4CE4  
                               i2l6908 262A                                 i2l6860 254E  
                               i2l6844 24E6                                 i2l6836 2498  
                               i2l7468 39B8                                 i2l6924 531A  
                               i2l9340 2CAC                                 i2l6766 4CCA  
                               i2l6918 2690                                 i2l6838 24AA  
                               i2l6790 2350                                 i2l7494 3A0C  
                               i2l7486 39E8                                 i2l7398 38BA  
                               i2l6926 5322                                 i2l9430 2DEA  
                               i2l9422 2DCE                                 i2l9414 2DAA  
                               i2l9406 2D8E                                 i2l9350 2CCE  
                               i2l9342 2CB2                                 i2l6864 2566  
                               i2l6848 24EA                                 i2l6890 25E2  
                               i2l6866 256A                                 i2l6794 2360  
                               i2l7498 3A1E                                 i2l9450 2E40  
                               i2l9442 2E1C                                 i2l9434 2E00  
                               i2l9426 2DDC                                 i2l9418 2DC0  
                               i2l9370 2D06                                 i2l9354 2CDC  
                               i2l9346 2CC0                                 i2l6884 25B6  
                               i2l6796 236E                                 i2l9700 30D8  
                               i2l6878 259C                                 i2l9470 2E8E  
                               i2l9462 2E6A                                 i2l9454 2E4E  
                               i2l9446 2E2A                                 i2l9438 2E0E  
                               i2l9390 2D4E                                 i2l9382 2D32  
                               i2l9374 2D14                                 i2l9366 2CF8  
                               i2l9358 2CEA                                 i2l6896 25F8  
                               i2l6888 25DA                                 i2l9712 3140  
                               i2l9714 3146                                 i2l9482 2EC0  
                               i2l9474 2E9C                                 i2l9466 2E80  
                               i2l9458 2E5C                                 i2l9394 2D5C  
                               i2l9386 2D40                                 i2l9378 2D24  
                               i2l9708 310C                                 i2l9740 3AA6  
                               i2l9900 3730                                 i2l9670 2F58  
                               i2l9830 51DE                                 i2l9478 2EAA  
                               i2l9398 2D6A                                 i2l9734 3A86  
                               i2l9824 51D2                                 i2l9488 2ECE  
                               i2l9752 3AD2                                 i2l9760 3AF0  
                               i2l8962 5742                                 i2l9666 2F48  
                               i2l9826 51D8                                 i2l8954 4D44  
                               i2l9754 3AE6                                 i2l9746 3ABC  
                               i2l9762 3B3A                                 i2l9738 3A9C  
                               i2l9914 374C                                 i2l9676 2FB2  
                               i2l8948 4D12                                 i2l9780 3BA8  
                               i2l9764 3B44                                 i2l8966 5752  
                               i2l9774 3B82                                 i2l9942 37A4  
                               i2l9688 3080                                 i2l9768 3B5C  
                               i2l9936 3796                                 i2l9794 3BFE  
                               i2l9890 3706                                 i2l9964 37EE  
                               i2l9884 36F6                                 i2l9990 383E  
                               i2l9958 37D4                                 i2l9886 36FA  
                               i2l9894 370E                                 i2l9968 37F4  
                               i2l9896 3726                _f_most_recent_sort_time 0137  
                        PlatformTest@i 00B1                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR2IF 007CF1                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR2ON 007E52  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5628                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 56C0  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 43E6                                 ___wmul 52A8  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 52DE                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 4990  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5704                                 _initUI 5342  
                               _readIR 50A8                                 _logRun 3DB4  
                               getIR@i 0087                                 clear_0 5080  
                               clear_1 508C                                 clear_2 5098  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 4F52                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1782  
                            ??_handler 004B                __size_of_initGlobalVars 00BE  
                         ?_retrieveLog 0007                                 _strcpy 5272  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5650  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5628  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 505A                       __end_of_printRTC 2C7C  
                         __mediumconst FAA2                      __end_ofi2___lwmod 51C8  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0065  
                __end_of_algorithmTest 44BC                      __end_ofi2_lcdInst 57E6  
                    __end_ofi2_isdigit 5722                             __accesstop 0080  
              __end_of__initialization 509E                          ?_inputHandler 002A  
                _most_recent_sort_time 0069                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 5772  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 57FA  
                  BlockerTest@cam_flag 00AE                          __end_of_getIR 4C82  
                          i2printRTC@i 0041                          _initSortTimer 47B8  
          __end_of_updateServoPosition 4A9C                          __end_of_putch 57BE  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 3454                             __end_of_UI 08D6  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 55AA  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 557E  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0127                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08D6  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 4D64                           _EEPROM_write 421C  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3241 0147  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 4B20                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              _ID$1207 0084                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2449 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10440 3B1E                                i2l10442 3B28  
                              i2l10460 3928                                i2l10452 2EEC  
                              i2l10444 3B32                                i2l10462 3944  
                              i2l10454 2F0E                                i2l10446 3C16  
                              i2l10438 3B14                                i2l10456 2F2A  
                              i2l10448 3C26                              ?_delay_ms 0001  
                       PlatformTest@on 00B9                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 57CE                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4DD0                                _Loading 118E  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 463E  
                              ___awmod 4862                             _initServos 4B20  
                              ___lldiv 46FC                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4B98  
                              ___lwmod 4E34                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 505A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4580                                _lcdInst 57BE  
                              _handler 0008                                __ptext0 44BC  
                              __ptext1 56C0                                __ptext2 118E  
                              __ptext3 47B8                                __ptext4 4580  
                              __ptext5 52DE                                __ptext6 4C10  
                              __ptext7 50A8                                __ptext8 31E4  
                              __ptext9 5600                        __size_of_printf 0438  
                              _readADC 55AA                        __size_of_strcpy 0036  
                              _initLCD 5140                                _cur_can 012B  
                              _loadRTC 4904                                _readMAG 50F4  
                              _dpowers FAB4                     actuatorTest@i_1770 00B3  
                   actuatorTest@i_1763 00AE                           __size_of_arm 00FE  
                   actuatorTest@i_1772 00B4                     actuatorTest@i_1764 00AF  
                   actuatorTest@i_1756 00AD                     actuatorTest@i_1773 00B5  
                   actuatorTest@i_1782 00BA                     actuatorTest@i_1766 00B0  
                   actuatorTest@i_1783 00BB                     actuatorTest@i_1775 00B6  
                   actuatorTest@i_1767 00B1                     actuatorTest@i_1792 00C0  
                   actuatorTest@i_1776 00B7                     actuatorTest@i_1793 00C1  
                   actuatorTest@i_1785 00BC                     actuatorTest@i_1769 00B2  
                   actuatorTest@i_1786 00BD                     actuatorTest@i_1778 00B8  
                   actuatorTest@i_1795 00C2                     actuatorTest@i_1779 00B9  
                   actuatorTest@i_1796 00C3                     actuatorTest@i_1788 00BE  
                   actuatorTest@i_1789 00BF                                _isdigit 55D6  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 4304  
                 PlatformTest@res_1808 00AF                         __pintcode_body 368A  
                 end_of_initialization 509E                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 368A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                              i2u1110_47 4FF4  
                  __size_of_PortTestDC 005C                              i2u1111_47 4FFE  
                            i2u1112_47 574A                              i2u1106_47 38C0  
                            i2u1107_47 30B2                              i2u1108_47 4FC8  
                            i2u1109_47 4FD2              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 575A                 __end_of_initGlobalVars 463E  
                           _sensorTest 26B4                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3A68                           ??_BothServos 00AB  
                __end_of_machineConfig 4E34                   __end_of_PlatformTest 2346  
                           _updateMenu 2C7C                      i2_I2C_Master_Read 5676  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 579C  
                    i2_I2C_Master_Stop 5812                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 4EF6  
                            i2___lwdiv 5008                              i2___lwmod 5186  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 368A  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 57DA  
                        Loading@i_1183 00B6                          Loading@i_1192 00B8  
                        Loading@i_1194 00BA                          Loading@i_1195 00BC  
                           _total_time 00FA                          Loading@i_1197 00BE  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5704  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1FA8  
                  __end_of_EEPROM_read 5772                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 52DE  
                       __end_of_getMAG 5310                         __end_of_getRTC 4A16  
                 __size_ofi2_lcdNibble 005A                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5372                         __end_of_readIR 50F4  
                       __end_of_logRun 3EF8                       i2___wmul@product 0005  
                       __end_of_printf 1BBA                           i2printf@flag 0026  
                       __end_of_strcpy 52A8              __end_ofi2_I2C_Master_Read 569C  
            __end_ofi2_I2C_Master_Wait 57AE                           i2printf@prec 001D  
                  start_initialization 505A              __end_ofi2_I2C_Master_Stop 581A  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 4F52  
                          __end_of_arm 421C                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1464 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 4A9C                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1210 0089  
                             ID@i_1209 0087                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2581 0043                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2086 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 575A  
                     _I2C_Master_Start 580A                     __end_of_PortTestDC 4FAE  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 57E6  
                    __size_of_initTime 0022                  i2_updateServoPosition 4CF4  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA2                              _lcdNibble 4D64  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 039E  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 43E6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0270  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5822             __end_ofi2_I2C_Master_Write 57FA  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 387C                            ??i2_isdigit 0001  
                         _PlatformTest 1FA8                           BlockerTest@i 00AC  
                             _PIR2bits 000FA1                               i2u541_40 246C  
                             i2u541_47 2462                        PlatformTest@res 00AD  
                             i2u545_40 24CC                               i2u545_47 24C2  
                             i2u486_40 5694                               i2u912_40 30E2  
                             i2u914_40 310A                               i2u913_48 30E4  
                             i2u586_40 34E2                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5650                          lcdNibble@data 0081  
                             i2_getRTC 4C82                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2346  
                             i2_strcpy 5310                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 506E  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5788                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F4  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4862                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 5402             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 523A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 5202                _change_state_to_menu_23 53D2  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 54F2  
              _change_state_to_logs_12 54C2                _change_state_to_logs_22 5492  
              _change_state_to_logs_23 5550                _change_state_to_logs_33 5462  
              _change_state_to_logs_34 5432                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3874  
                      _I2C_Master_Init 4E96                       __size_of_readADC 002C  
                      _I2C_Master_Read 5522                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5788  
                      _I2C_Master_Stop 5802                       __size_of_isdigit 002A  
                             _delay_ms 5600                         _printSortTimer 2F3C  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 4018                               __ptext10 4304  
                             __ptext11 4DD0                               __ptext20 56E2  
                             __ptext12 3DB4                               __ptext21 5140  
                             __ptext13 421C                               __ptext30 5788  
                             __ptext22 0012                               __ptext14 575A  
                             __ptext31 5202                               __ptext23 29B2  
                             __ptext15 5342                               __ptext40 08D6  
                             __ptext32 523A                               __ptext24 5272  
                             __ptext16 4904                               __ptext41 4A9C  
                             __ptext33 4862                               __ptext25 4990  
                             __ptext17 4E96                               __ptext50 3C30  
                             __ptext42 4EF6                               __ptext34 463E  
                             __ptext26 57E6                               __ptext18 46FC  
                             __ptext51 1782                               __ptext43 4F52  
                             __ptext35 4018                               __ptext27 5802  
                             __ptext19 557E                               __ptext60 3A68  
                             __ptext52 57AE                               __ptext44 1FA8  
                             __ptext36 26B4                               __ptext28 580A  
                             __ptext61 4CF4                               __ptext53 55D6  
                             __ptext45 55AA                               __ptext37 50F4  
                             __ptext29 5522                               __ptext70 5402  
                             __ptext62 2C7C                               __ptext54 52A8  
                             __ptext46 1BBA                               __ptext38 411E  
                             __ptext71 5432                               __ptext63 5628  
                             __ptext55 4E34                               __ptext47 5722  
                             __ptext39 43E6                               __ptext80 51C8  
                             __ptext72 5462                               __ptext64 3454  
                             __ptext56 4B98                               __ptext48 4B20  
                             __ptext81 2F3C                               __ptext73 5550  
                             __ptext65 5310                               __ptext57 57BE  
                             __ptext49 4A16                               __ptext90 4C82  
                             __ptext82 2346                               __ptext74 5492  
                             __ptext66 387C                               __ptext58 4D64  
                             __ptext91 57F0                               __ptext83 57CE  
                             __ptext75 54C2                               __ptext67 5372  
                             __ptext92 5812                               __ptext84 5704  
                             __ptext76 54F2                               __ptext68 53A2  
                             __ptext93 581A                               __ptext85 5650  
                             __ptext77 569C                               __ptext69 53D2  
                             __ptext94 5676                               __ptext86 5186  
                             __ptext78 3EF8                               __ptext95 579C  
                             __ptext87 5008                               __ptext79 5772  
                             __ptext96 573E                               __ptext88 57DA  
                             __ptext89 4FAE                               _dispLogs 569C  
                        ?_actuatorTest 0001                     PlatformTest@i_1812 00B3  
                   PlatformTest@i_1813 00B5                     PlatformTest@i_1814 00B7  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2086 0002                     __end_of_initServos 4B98  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 56E2                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4A16  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 29B2                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 53D2  
    __end_ofi2_change_state_to_menu_22 53A2                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 31E4  
                            putch@data 0082               __end_of_I2C_Master_Start 5812  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 57F0  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 29B2  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 573E  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2F3C                __end_of_I2C_Master_Init 4EF6  
              __end_of_I2C_Master_Read 5550                __end_of_I2C_Master_Wait 579C  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 580A  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3EF8  
                  __end_ofi2_lcdNibble 5008                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 51C8  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4DD0  
                      ___lwmod@counter 008B                      _updateServoStates 3A68  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EE  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
