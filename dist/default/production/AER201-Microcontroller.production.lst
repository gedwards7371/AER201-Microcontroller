

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 12:52:28 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102  0000                     
   103                           ; Version 1.40
   104                           ; Generated 01/12/2016 GMT
   105                           ; 
   106                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC18F4620 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     
   138                           	psect	idataBANK1
   139  003F42                     __pidataBANK1:
   140                           	opt stack 0
   141                           
   142                           ;initializer for UI@F3220
   143  003F42  4D                 	db	77
   144  003F43  4D                 	db	77
   145  003F44  4D                 	db	77
   146  003F45  00                 	db	0
   147                           
   148                           ;initializer for printRTC@F3211
   149  003F46  4D                 	db	77
   150  003F47  4D                 	db	77
   151  003F48  4D                 	db	77
   152  003F49  00                 	db	0
   153                           
   154                           	psect	mediumconst
   155  00FBA2                     __pmediumconst:
   156                           	opt stack 0
   157  00FBA2  00                 	db	0
   158  00FBA3                     _keys:
   159                           	opt stack 0
   160  00FBA3  31                 	db	49
   161  00FBA4  32                 	db	50
   162  00FBA5  33                 	db	51
   163  00FBA6  41                 	db	65
   164  00FBA7  34                 	db	52
   165  00FBA8  35                 	db	53
   166  00FBA9  36                 	db	54
   167  00FBAA  42                 	db	66
   168  00FBAB  37                 	db	55
   169  00FBAC  38                 	db	56
   170  00FBAD  39                 	db	57
   171  00FBAE  43                 	db	67
   172  00FBAF  2A                 	db	42
   173  00FBB0  30                 	db	48
   174  00FBB1  23                 	db	35
   175  00FBB2  44                 	db	68
   176  00FBB3  00                 	db	0
   177  00FBB4                     __end_of_keys:
   178                           	opt stack 0
   179  00FBB4                     _dpowers:
   180                           	opt stack 0
   181  00FBB4  0001               	dw	1
   182  00FBB6  000A               	dw	10
   183  00FBB8  0064               	dw	100
   184  00FBBA  03E8               	dw	1000
   185  00FBBC  2710               	dw	10000
   186  00FBBE                     __end_of_dpowers:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON1	set	4033
   191  0000                     _ADCON2	set	4032
   192  0000                     _ADRESH	set	4036
   193  0000                     _ADRESL	set	4035
   194  0000                     _CMCONbits	set	4020
   195  0000                     _CVRCON	set	4021
   196  0000                     _EEADR	set	4009
   197  0000                     _EEADRH	set	4010
   198  0000                     _EECON1bits	set	4006
   199  0000                     _EECON2	set	4007
   200  0000                     _EEDATA	set	4008
   201  0000                     _INTCONbits	set	4082
   202  0000                     _LATA	set	3977
   203  0000                     _LATAbits	set	3977
   204  0000                     _LATB	set	3978
   205  0000                     _LATC	set	3979
   206  0000                     _LATCbits	set	3979
   207  0000                     _LATD	set	3980
   208  0000                     _LATDbits	set	3980
   209  0000                     _LATE	set	3981
   210  0000                     _OSCCON	set	4051
   211  0000                     _OSCTUNEbits	set	3995
   212  0000                     _PIR2bits	set	4001
   213  0000                     _PORTAbits	set	3968
   214  0000                     _PORTB	set	3969
   215  0000                     _PORTBbits	set	3969
   216  0000                     _SSPADD	set	4040
   217  0000                     _SSPBUF	set	4041
   218  0000                     _SSPCON1	set	4038
   219  0000                     _SSPCON2	set	4037
   220  0000                     _SSPSTAT	set	4039
   221  0000                     _T0CON	set	4053
   222  0000                     _T1CON	set	4045
   223  0000                     _TMR0H	set	4055
   224  0000                     _TMR0L	set	4054
   225  0000                     _TMR1H	set	4047
   226  0000                     _TMR1L	set	4046
   227  0000                     _TMR3H	set	4019
   228  0000                     _TMR3L	set	4018
   229  0000                     _TRISA	set	3986
   230  0000                     _TRISB	set	3987
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISD	set	3989
   233  0000                     _TRISE	set	3990
   234  0000                     _ACKDT	set	32301
   235  0000                     _ACKEN	set	32300
   236  0000                     _ADIE	set	31982
   237  0000                     _INT1IE	set	32643
   238  0000                     _INT1IF	set	32640
   239  0000                     _PEIE	set	32662
   240  0000                     _PEN	set	32298
   241  0000                     _RCEN	set	32299
   242  0000                     _RSEN	set	32297
   243  0000                     _SEN	set	32296
   244  0000                     _TMR0IE	set	32661
   245  0000                     _TMR0IF	set	32658
   246  0000                     _TMR0ON	set	32431
   247  0000                     _TMR1IE	set	31976
   248  0000                     _TMR1IF	set	31984
   249  0000                     _TMR1ON	set	32360
   250  0000                     _TMR2IE	set	31977
   251  0000                     _TMR3IE	set	32001
   252  0000                     _TMR3IF	set	32009
   253  0000                     _TMR3ON	set	32136
   254  0000                     _TRISC3	set	31907
   255  0000                     _TRISC4	set	31908
   256  0000                     _nRBPU	set	32655
   257  00FBBE                     STR_21:
   258  00FBBE  25                 	db	37
   259  00FBBF  30                 	db	48	;'0'
   260  00FBC0  32                 	db	50	;'2'
   261  00FBC1  64                 	db	100	;'d'
   262  00FBC2  25                 	db	37
   263  00FBC3  73                 	db	115	;'s'
   264  00FBC4  20                 	db	32
   265  00FBC5  7C                 	db	124
   266  00FBC6  20                 	db	32
   267  00FBC7  25                 	db	37
   268  00FBC8  30                 	db	48	;'0'
   269  00FBC9  32                 	db	50	;'2'
   270  00FBCA  64                 	db	100	;'d'
   271  00FBCB  3A                 	db	58	;':'
   272  00FBCC  25                 	db	37
   273  00FBCD  30                 	db	48	;'0'
   274  00FBCE  32                 	db	50	;'2'
   275  00FBCF  64                 	db	100	;'d'
   276  00FBD0  3A                 	db	58	;':'
   277  00FBD1  25                 	db	37
   278  00FBD2  30                 	db	48	;'0'
   279  00FBD3  32                 	db	50	;'2'
   280  00FBD4  64                 	db	100	;'d'
   281  00FBD5  00                 	db	0
   282  00FBD6                     STR_66:
   283  00FBD6  28                 	db	40
   284  00FBD7  64                 	db	100	;'d'
   285  00FBD8  61                 	db	97	;'a'
   286  00FBD9  74                 	db	116	;'t'
   287  00FBDA  61                 	db	97	;'a'
   288  00FBDB  3A                 	db	58	;':'
   289  00FBDC  20                 	db	32
   290  00FBDD  25                 	db	37
   291  00FBDE  75                 	db	117	;'u'
   292  00FBDF  2C                 	db	44
   293  00FBE0  20                 	db	32
   294  00FBE1  61                 	db	97	;'a'
   295  00FBE2  64                 	db	100	;'d'
   296  00FBE3  64                 	db	100	;'d'
   297  00FBE4  72                 	db	114	;'r'
   298  00FBE5  3A                 	db	58	;':'
   299  00FBE6  20                 	db	32
   300  00FBE7  25                 	db	37
   301  00FBE8  75                 	db	117	;'u'
   302  00FBE9  29                 	db	41
   303  00FBEA  00                 	db	0
   304  00FBEB                     STR_27:
   305  00FBEB  4E                 	db	78	;'N'
   306  00FBEC  4F                 	db	79	;'O'
   307  00FBED  20                 	db	32
   308  00FBEE  4C                 	db	76	;'L'
   309  00FBEF  41                 	db	65	;'A'
   310  00FBF0  42                 	db	66	;'B'
   311  00FBF1  3A                 	db	58	;':'
   312  00FBF2  20                 	db	32
   313  00FBF3  25                 	db	37
   314  00FBF4  64                 	db	100	;'d'
   315  00FBF5  7C                 	db	124
   316  00FBF6  4C                 	db	76	;'L'
   317  00FBF7  41                 	db	65	;'A'
   318  00FBF8  42                 	db	66	;'B'
   319  00FBF9  3A                 	db	58	;':'
   320  00FBFA  20                 	db	32
   321  00FBFB  25                 	db	37
   322  00FBFC  64                 	db	100	;'d'
   323  00FBFD  00                 	db	0
   324  00FBFE                     STR_25:
   325  00FBFE  4E                 	db	78	;'N'
   326  00FBFF  4F                 	db	79	;'O'
   327  00FC00  20                 	db	32
   328  00FC01  54                 	db	84	;'T'
   329  00FC02  41                 	db	65	;'A'
   330  00FC03  42                 	db	66	;'B'
   331  00FC04  3A                 	db	58	;':'
   332  00FC05  20                 	db	32
   333  00FC06  25                 	db	37
   334  00FC07  64                 	db	100	;'d'
   335  00FC08  7C                 	db	124
   336  00FC09  54                 	db	84	;'T'
   337  00FC0A  41                 	db	65	;'A'
   338  00FC0B  42                 	db	66	;'B'
   339  00FC0C  3A                 	db	58	;':'
   340  00FC0D  20                 	db	32
   341  00FC0E  25                 	db	37
   342  00FC0F  64                 	db	100	;'d'
   343  00FC10  00                 	db	0
   344  00FC11                     STR_3:
   345  00FC11  2D                 	db	45
   346  00FC12  2D                 	db	45
   347  00FC13  20                 	db	32
   348  00FC14  4C                 	db	76	;'L'
   349  00FC15  4F                 	db	79	;'O'
   350  00FC16  47                 	db	71	;'G'
   351  00FC17  20                 	db	32
   352  00FC18  25                 	db	37
   353  00FC19  32                 	db	50	;'2'
   354  00FC1A  64                 	db	100	;'d'
   355  00FC1B  20                 	db	32
   356  00FC1C  48                 	db	72	;'H'
   357  00FC1D  45                 	db	69	;'E'
   358  00FC1E  52                 	db	82	;'R'
   359  00FC1F  45                 	db	69	;'E'
   360  00FC20  2D                 	db	45
   361  00FC21  2D                 	db	45
   362  00FC22  00                 	db	0
   363  00FC23                     STR_1:
   364  00FC23  52                 	db	82	;'R'
   365  00FC24  45                 	db	69	;'E'
   366  00FC25  53                 	db	83	;'S'
   367  00FC26  55                 	db	85	;'U'
   368  00FC27  4C                 	db	76	;'L'
   369  00FC28  54                 	db	84	;'T'
   370  00FC29  53                 	db	83	;'S'
   371  00FC2A  20                 	db	32
   372  00FC2B  49                 	db	73	;'I'
   373  00FC2C  4E                 	db	78	;'N'
   374  00FC2D  20                 	db	32
   375  00FC2E  4C                 	db	76	;'L'
   376  00FC2F  4F                 	db	79	;'O'
   377  00FC30  47                 	db	71	;'G'
   378  00FC31  20                 	db	32
   379  00FC32  25                 	db	37
   380  00FC33  64                 	db	100	;'d'
   381  00FC34  00                 	db	0
   382  00FC35                     STR_97:
   383  00FC35  4D                 	db	77	;'M'
   384  00FC36  49                 	db	73	;'I'
   385  00FC37  44                 	db	68	;'D'
   386  00FC38  20                 	db	32
   387  00FC39  2D                 	db	45
   388  00FC3A  2D                 	db	45
   389  00FC3B  20                 	db	32
   390  00FC3C  32                 	db	50	;'2'
   391  00FC3D  73                 	db	115	;'s'
   392  00FC3E  20                 	db	32
   393  00FC3F  20                 	db	32
   394  00FC40  20                 	db	32
   395  00FC41  20                 	db	32
   396  00FC42  20                 	db	32
   397  00FC43  20                 	db	32
   398  00FC44  20                 	db	32
   399  00FC45  00                 	db	0
   400  00FC46                     STR_100:
   401  00FC46  44                 	db	68	;'D'
   402  00FC47  52                 	db	82	;'R'
   403  00FC48  4F                 	db	79	;'O'
   404  00FC49  50                 	db	80	;'P'
   405  00FC4A  20                 	db	32
   406  00FC4B  2D                 	db	45
   407  00FC4C  2D                 	db	45
   408  00FC4D  20                 	db	32
   409  00FC4E  32                 	db	50	;'2'
   410  00FC4F  73                 	db	115	;'s'
   411  00FC50  20                 	db	32
   412  00FC51  20                 	db	32
   413  00FC52  20                 	db	32
   414  00FC53  20                 	db	32
   415  00FC54  20                 	db	32
   416  00FC55  20                 	db	32
   417  00FC56  00                 	db	0
   418  00FC57                     STR_94:
   419  00FC57  4C                 	db	76	;'L'
   420  00FC58  45                 	db	69	;'E'
   421  00FC59  46                 	db	70	;'F'
   422  00FC5A  54                 	db	84	;'T'
   423  00FC5B  20                 	db	32
   424  00FC5C  2D                 	db	45
   425  00FC5D  2D                 	db	45
   426  00FC5E  20                 	db	32
   427  00FC5F  32                 	db	50	;'2'
   428  00FC60  73                 	db	115	;'s'
   429  00FC61  20                 	db	32
   430  00FC62  20                 	db	32
   431  00FC63  20                 	db	32
   432  00FC64  20                 	db	32
   433  00FC65  20                 	db	32
   434  00FC66  20                 	db	32
   435  00FC67  00                 	db	0
   436  00FC68                     STR_99:
   437  00FC68  4C                 	db	76	;'L'
   438  00FC69  45                 	db	69	;'E'
   439  00FC6A  56                 	db	86	;'V'
   440  00FC6B  45                 	db	69	;'E'
   441  00FC6C  4C                 	db	76	;'L'
   442  00FC6D  20                 	db	32
   443  00FC6E  2D                 	db	45
   444  00FC6F  2D                 	db	45
   445  00FC70  20                 	db	32
   446  00FC71  32                 	db	50	;'2'
   447  00FC72  73                 	db	115	;'s'
   448  00FC73  20                 	db	32
   449  00FC74  20                 	db	32
   450  00FC75  20                 	db	32
   451  00FC76  20                 	db	32
   452  00FC77  20                 	db	32
   453  00FC78  00                 	db	0
   454  00FC79                     STR_93:
   455  00FC79  52                 	db	82	;'R'
   456  00FC7A  49                 	db	73	;'I'
   457  00FC7B  47                 	db	71	;'G'
   458  00FC7C  48                 	db	72	;'H'
   459  00FC7D  54                 	db	84	;'T'
   460  00FC7E  20                 	db	32
   461  00FC7F  2D                 	db	45
   462  00FC80  2D                 	db	45
   463  00FC81  20                 	db	32
   464  00FC82  32                 	db	50	;'2'
   465  00FC83  73                 	db	115	;'s'
   466  00FC84  20                 	db	32
   467  00FC85  20                 	db	32
   468  00FC86  20                 	db	32
   469  00FC87  20                 	db	32
   470  00FC88  20                 	db	32
   471  00FC89  00                 	db	0
   472  00FC8A                     STR_92:
   473  00FC8A  4D                 	db	77	;'M'
   474  00FC8B  49                 	db	73	;'I'
   475  00FC8C  44                 	db	68	;'D'
   476  00FC8D  44                 	db	68	;'D'
   477  00FC8E  4C                 	db	76	;'L'
   478  00FC8F  45                 	db	69	;'E'
   479  00FC90  20                 	db	32
   480  00FC91  2D                 	db	45
   481  00FC92  2D                 	db	45
   482  00FC93  20                 	db	32
   483  00FC94  32                 	db	50	;'2'
   484  00FC95  73                 	db	115	;'s'
   485  00FC96  20                 	db	32
   486  00FC97  20                 	db	32
   487  00FC98  20                 	db	32
   488  00FC99  20                 	db	32
   489  00FC9A  00                 	db	0
   490  00FC9B                     STR_95:
   491  00FC9B  4D                 	db	77	;'M'
   492  00FC9C  49                 	db	73	;'I'
   493  00FC9D  44                 	db	68	;'D'
   494  00FC9E  2D                 	db	45
   495  00FC9F  4C                 	db	76	;'L'
   496  00FCA0  45                 	db	69	;'E'
   497  00FCA1  46                 	db	70	;'F'
   498  00FCA2  54                 	db	84	;'T'
   499  00FCA3  20                 	db	32
   500  00FCA4  2D                 	db	45
   501  00FCA5  2D                 	db	45
   502  00FCA6  20                 	db	32
   503  00FCA7  32                 	db	50	;'2'
   504  00FCA8  73                 	db	115	;'s'
   505  00FCA9  20                 	db	32
   506  00FCAA  20                 	db	32
   507  00FCAB  00                 	db	0
   508  00FCAC                     STR_96:
   509  00FCAC  4D                 	db	77	;'M'
   510  00FCAD  49                 	db	73	;'I'
   511  00FCAE  44                 	db	68	;'D'
   512  00FCAF  2D                 	db	45
   513  00FCB0  52                 	db	82	;'R'
   514  00FCB1  49                 	db	73	;'I'
   515  00FCB2  47                 	db	71	;'G'
   516  00FCB3  48                 	db	72	;'H'
   517  00FCB4  54                 	db	84	;'T'
   518  00FCB5  20                 	db	32
   519  00FCB6  2D                 	db	45
   520  00FCB7  2D                 	db	45
   521  00FCB8  20                 	db	32
   522  00FCB9  32                 	db	50	;'2'
   523  00FCBA  73                 	db	115	;'s'
   524  00FCBB  20                 	db	32
   525  00FCBC  00                 	db	0
   526  00FCBD                     STR_72:
   527  00FCBD  41                 	db	65	;'A'
   528  00FCBE  4C                 	db	76	;'L'
   529  00FCBF  47                 	db	71	;'G'
   530  00FCC0  31                 	db	49	;'1'
   531  00FCC1  3A                 	db	58	;':'
   532  00FCC2  20                 	db	32
   533  00FCC3  39                 	db	57	;'9'
   534  00FCC4  20                 	db	32
   535  00FCC5  50                 	db	80	;'P'
   536  00FCC6  4F                 	db	79	;'O'
   537  00FCC7  50                 	db	80	;'P'
   538  00FCC8  4E                 	db	78	;'N'
   539  00FCC9  4F                 	db	79	;'O'
   540  00FCCA  54                 	db	84	;'T'
   541  00FCCB  41                 	db	65	;'A'
   542  00FCCC  42                 	db	66	;'B'
   543  00FCCD  00                 	db	0
   544  00FCCE                     STR_87:
   545  00FCCE  54                 	db	84	;'T'
   546  00FCCF  53                 	db	83	;'S'
   547  00FCD0  54                 	db	84	;'T'
   548  00FCD1  3A                 	db	58	;':'
   549  00FCD2  20                 	db	32
   550  00FCD3  43                 	db	67	;'C'
   551  00FCD4  4F                 	db	79	;'O'
   552  00FCD5  4E                 	db	78	;'N'
   553  00FCD6  44                 	db	68	;'D'
   554  00FCD7  20                 	db	32
   555  00FCD8  53                 	db	83	;'S'
   556  00FCD9  4F                 	db	79	;'O'
   557  00FCDA  4C                 	db	76	;'L'
   558  00FCDB  4E                 	db	78	;'N'
   559  00FCDC  27                 	db	39
   560  00FCDD  44                 	db	68	;'D'
   561  00FCDE  00                 	db	0
   562  00FCDF                     STR_89:
   563  00FCDF  54                 	db	84	;'T'
   564  00FCE0  53                 	db	83	;'S'
   565  00FCE1  54                 	db	84	;'T'
   566  00FCE2  3A                 	db	58	;':'
   567  00FCE3  20                 	db	32
   568  00FCE4  50                 	db	80	;'P'
   569  00FCE5  55                 	db	85	;'U'
   570  00FCE6  53                 	db	83	;'S'
   571  00FCE7  48                 	db	72	;'H'
   572  00FCE8  20                 	db	32
   573  00FCE9  53                 	db	83	;'S'
   574  00FCEA  4F                 	db	79	;'O'
   575  00FCEB  4C                 	db	76	;'L'
   576  00FCEC  4E                 	db	78	;'N'
   577  00FCED  27                 	db	39
   578  00FCEE  44                 	db	68	;'D'
   579  00FCEF  00                 	db	0
   580  00FCF0                     STR_68:
   581  00FCF0  31                 	db	49	;'1'
   582  00FCF1  2E                 	db	46
   583  00FCF2  20                 	db	32
   584  00FCF3  41                 	db	65	;'A'
   585  00FCF4  4C                 	db	76	;'L'
   586  00FCF5  47                 	db	71	;'G'
   587  00FCF6  20                 	db	32
   588  00FCF7  20                 	db	32
   589  00FCF8  32                 	db	50	;'2'
   590  00FCF9  2E                 	db	46
   591  00FCFA  20                 	db	32
   592  00FCFB  53                 	db	83	;'S'
   593  00FCFC  4E                 	db	78	;'N'
   594  00FCFD  53                 	db	83	;'S'
   595  00FCFE  52                 	db	82	;'R'
   596  00FCFF  53                 	db	83	;'S'
   597  00FD00  00                 	db	0
   598  00FD01                     STR_41:
   599  00FD01  4C                 	db	76	;'L'
   600  00FD02  4F                 	db	79	;'O'
   601  00FD03  47                 	db	71	;'G'
   602  00FD04  20                 	db	32
   603  00FD05  31                 	db	49	;'1'
   604  00FD06  20                 	db	32
   605  00FD07  20                 	db	32
   606  00FD08  20                 	db	32
   607  00FD09  20                 	db	32
   608  00FD0A  20                 	db	32
   609  00FD0B  20                 	db	32
   610  00FD0C  20                 	db	32
   611  00FD0D  20                 	db	32
   612  00FD0E  20                 	db	32
   613  00FD0F  20                 	db	32
   614  00FD10  20                 	db	32
   615  00FD11  00                 	db	0
   616  00FD12                     STR_40:
   617  00FD12  4C                 	db	76	;'L'
   618  00FD13  4F                 	db	79	;'O'
   619  00FD14  47                 	db	71	;'G'
   620  00FD15  20                 	db	32
   621  00FD16  32                 	db	50	;'2'
   622  00FD17  20                 	db	32
   623  00FD18  20                 	db	32
   624  00FD19  20                 	db	32
   625  00FD1A  20                 	db	32
   626  00FD1B  20                 	db	32
   627  00FD1C  20                 	db	32
   628  00FD1D  20                 	db	32
   629  00FD1E  20                 	db	32
   630  00FD1F  20                 	db	32
   631  00FD20  20                 	db	32
   632  00FD21  20                 	db	32
   633  00FD22  00                 	db	0
   634  00FD23                     STR_44:
   635  00FD23  4C                 	db	76	;'L'
   636  00FD24  4F                 	db	79	;'O'
   637  00FD25  47                 	db	71	;'G'
   638  00FD26  20                 	db	32
   639  00FD27  33                 	db	51	;'3'
   640  00FD28  20                 	db	32
   641  00FD29  20                 	db	32
   642  00FD2A  20                 	db	32
   643  00FD2B  20                 	db	32
   644  00FD2C  20                 	db	32
   645  00FD2D  20                 	db	32
   646  00FD2E  20                 	db	32
   647  00FD2F  20                 	db	32
   648  00FD30  20                 	db	32
   649  00FD31  20                 	db	32
   650  00FD32  20                 	db	32
   651  00FD33  00                 	db	0
   652  00FD34                     STR_48:
   653  00FD34  4C                 	db	76	;'L'
   654  00FD35  4F                 	db	79	;'O'
   655  00FD36  47                 	db	71	;'G'
   656  00FD37  20                 	db	32
   657  00FD38  34                 	db	52	;'4'
   658  00FD39  20                 	db	32
   659  00FD3A  20                 	db	32
   660  00FD3B  20                 	db	32
   661  00FD3C  20                 	db	32
   662  00FD3D  20                 	db	32
   663  00FD3E  20                 	db	32
   664  00FD3F  20                 	db	32
   665  00FD40  20                 	db	32
   666  00FD41  20                 	db	32
   667  00FD42  20                 	db	32
   668  00FD43  20                 	db	32
   669  00FD44  00                 	db	0
   670  00FD45                     STR_36:
   671  00FD45  33                 	db	51	;'3'
   672  00FD46  2E                 	db	46
   673  00FD47  20                 	db	32
   674  00FD48  4C                 	db	76	;'L'
   675  00FD49  4F                 	db	79	;'O'
   676  00FD4A  47                 	db	71	;'G'
   677  00FD4B  53                 	db	83	;'S'
   678  00FD4C  20                 	db	32
   679  00FD4D  20                 	db	32
   680  00FD4E  20                 	db	32
   681  00FD4F  20                 	db	32
   682  00FD50  20                 	db	32
   683  00FD51  20                 	db	32
   684  00FD52  20                 	db	32
   685  00FD53  20                 	db	32
   686  00FD54  20                 	db	32
   687  00FD55  00                 	db	0
   688  00FD56                     STR_32:
   689  00FD56  32                 	db	50	;'2'
   690  00FD57  2E                 	db	46
   691  00FD58  20                 	db	32
   692  00FD59  53                 	db	83	;'S'
   693  00FD5A  4F                 	db	79	;'O'
   694  00FD5B  52                 	db	82	;'R'
   695  00FD5C  54                 	db	84	;'T'
   696  00FD5D  20                 	db	32
   697  00FD5E  20                 	db	32
   698  00FD5F  20                 	db	32
   699  00FD60  20                 	db	32
   700  00FD61  20                 	db	32
   701  00FD62  20                 	db	32
   702  00FD63  20                 	db	32
   703  00FD64  20                 	db	32
   704  00FD65  20                 	db	32
   705  00FD66  00                 	db	0
   706  00FD67                     STR_33:
   707  00FD67  31                 	db	49	;'1'
   708  00FD68  2E                 	db	46
   709  00FD69  20                 	db	32
   710  00FD6A  44                 	db	68	;'D'
   711  00FD6B  41                 	db	65	;'A'
   712  00FD6C  54                 	db	84	;'T'
   713  00FD6D  45                 	db	69	;'E'
   714  00FD6E  2F                 	db	47
   715  00FD6F  54                 	db	84	;'T'
   716  00FD70  49                 	db	73	;'I'
   717  00FD71  4D                 	db	77	;'M'
   718  00FD72  45                 	db	69	;'E'
   719  00FD73  20                 	db	32
   720  00FD74  20                 	db	32
   721  00FD75  20                 	db	32
   722  00FD76  20                 	db	32
   723  00FD77  00                 	db	0
   724  00FD78                     STR_24:
   725  00FD78  20                 	db	32
   726  00FD79  2D                 	db	45
   727  00FD7A  2D                 	db	45
   728  00FD7B  20                 	db	32
   729  00FD7C  50                 	db	80	;'P'
   730  00FD7D  4F                 	db	79	;'O'
   731  00FD7E  50                 	db	80	;'P'
   732  00FD7F  20                 	db	32
   733  00FD80  20                 	db	32
   734  00FD81  43                 	db	67	;'C'
   735  00FD82  41                 	db	65	;'A'
   736  00FD83  4E                 	db	78	;'N'
   737  00FD84  20                 	db	32
   738  00FD85  2D                 	db	45
   739  00FD86  2D                 	db	45
   740  00FD87  20                 	db	32
   741  00FD88  00                 	db	0
   742  00FD89                     STR_26:
   743  00FD89  20                 	db	32
   744  00FD8A  2D                 	db	45
   745  00FD8B  2D                 	db	45
   746  00FD8C  20                 	db	32
   747  00FD8D  53                 	db	83	;'S'
   748  00FD8E  4F                 	db	79	;'O'
   749  00FD8F  55                 	db	85	;'U'
   750  00FD90  50                 	db	80	;'P'
   751  00FD91  20                 	db	32
   752  00FD92  43                 	db	67	;'C'
   753  00FD93  41                 	db	65	;'A'
   754  00FD94  4E                 	db	78	;'N'
   755  00FD95  20                 	db	32
   756  00FD96  2D                 	db	45
   757  00FD97  2D                 	db	45
   758  00FD98  20                 	db	32
   759  00FD99  00                 	db	0
   760  00FD9A                     STR_28:
   761  00FD9A  2D                 	db	45
   762  00FD9B  2D                 	db	45
   763  00FD9C  20                 	db	32
   764  00FD9D  54                 	db	84	;'T'
   765  00FD9E  4F                 	db	79	;'O'
   766  00FD9F  54                 	db	84	;'T'
   767  00FDA0  41                 	db	65	;'A'
   768  00FDA1  4C                 	db	76	;'L'
   769  00FDA2  20                 	db	32
   770  00FDA3  43                 	db	67	;'C'
   771  00FDA4  41                 	db	65	;'A'
   772  00FDA5  4E                 	db	78	;'N'
   773  00FDA6  53                 	db	83	;'S'
   774  00FDA7  20                 	db	32
   775  00FDA8  2D                 	db	45
   776  00FDA9  2D                 	db	45
   777  00FDAA  00                 	db	0
   778  00FDAB                     STR_39:
   779  00FDAB  4C                 	db	76	;'L'
   780  00FDAC  4F                 	db	79	;'O'
   781  00FDAD  47                 	db	71	;'G'
   782  00FDAE  20                 	db	32
   783  00FDAF  31                 	db	49	;'1'
   784  00FDB0  20                 	db	32
   785  00FDB1  20                 	db	32
   786  00FDB2  20                 	db	32
   787  00FDB3  20                 	db	32
   788  00FDB4  20                 	db	32
   789  00FDB5  20                 	db	32
   790  00FDB6  20                 	db	32
   791  00FDB7  20                 	db	32
   792  00FDB8  20                 	db	32
   793  00FDB9  20                 	db	32
   794  00FDBA  3C                 	db	60	;'<'
   795  00FDBB  00                 	db	0
   796  00FDBC                     STR_42:
   797  00FDBC  4C                 	db	76	;'L'
   798  00FDBD  4F                 	db	79	;'O'
   799  00FDBE  47                 	db	71	;'G'
   800  00FDBF  20                 	db	32
   801  00FDC0  32                 	db	50	;'2'
   802  00FDC1  20                 	db	32
   803  00FDC2  20                 	db	32
   804  00FDC3  20                 	db	32
   805  00FDC4  20                 	db	32
   806  00FDC5  20                 	db	32
   807  00FDC6  20                 	db	32
   808  00FDC7  20                 	db	32
   809  00FDC8  20                 	db	32
   810  00FDC9  20                 	db	32
   811  00FDCA  20                 	db	32
   812  00FDCB  3C                 	db	60	;'<'
   813  00FDCC  00                 	db	0
   814  00FDCD                     STR_46:
   815  00FDCD  4C                 	db	76	;'L'
   816  00FDCE  4F                 	db	79	;'O'
   817  00FDCF  47                 	db	71	;'G'
   818  00FDD0  20                 	db	32
   819  00FDD1  33                 	db	51	;'3'
   820  00FDD2  20                 	db	32
   821  00FDD3  20                 	db	32
   822  00FDD4  20                 	db	32
   823  00FDD5  20                 	db	32
   824  00FDD6  20                 	db	32
   825  00FDD7  20                 	db	32
   826  00FDD8  20                 	db	32
   827  00FDD9  20                 	db	32
   828  00FDDA  20                 	db	32
   829  00FDDB  20                 	db	32
   830  00FDDC  3C                 	db	60	;'<'
   831  00FDDD  00                 	db	0
   832  00FDDE                     STR_50:
   833  00FDDE  4C                 	db	76	;'L'
   834  00FDDF  4F                 	db	79	;'O'
   835  00FDE0  47                 	db	71	;'G'
   836  00FDE1  20                 	db	32
   837  00FDE2  34                 	db	52	;'4'
   838  00FDE3  20                 	db	32
   839  00FDE4  20                 	db	32
   840  00FDE5  20                 	db	32
   841  00FDE6  20                 	db	32
   842  00FDE7  20                 	db	32
   843  00FDE8  20                 	db	32
   844  00FDE9  20                 	db	32
   845  00FDEA  20                 	db	32
   846  00FDEB  20                 	db	32
   847  00FDEC  20                 	db	32
   848  00FDED  3C                 	db	60	;'<'
   849  00FDEE  00                 	db	0
   850  00FDEF                     STR_38:
   851  00FDEF  33                 	db	51	;'3'
   852  00FDF0  2E                 	db	46
   853  00FDF1  20                 	db	32
   854  00FDF2  4C                 	db	76	;'L'
   855  00FDF3  4F                 	db	79	;'O'
   856  00FDF4  47                 	db	71	;'G'
   857  00FDF5  53                 	db	83	;'S'
   858  00FDF6  20                 	db	32
   859  00FDF7  20                 	db	32
   860  00FDF8  20                 	db	32
   861  00FDF9  20                 	db	32
   862  00FDFA  20                 	db	32
   863  00FDFB  20                 	db	32
   864  00FDFC  20                 	db	32
   865  00FDFD  20                 	db	32
   866  00FDFE  3C                 	db	60	;'<'
   867  00FDFF  00                 	db	0
   868  00FE00                     STR_34:
   869  00FE00  32                 	db	50	;'2'
   870  00FE01  2E                 	db	46
   871  00FE02  20                 	db	32
   872  00FE03  53                 	db	83	;'S'
   873  00FE04  4F                 	db	79	;'O'
   874  00FE05  52                 	db	82	;'R'
   875  00FE06  54                 	db	84	;'T'
   876  00FE07  20                 	db	32
   877  00FE08  20                 	db	32
   878  00FE09  20                 	db	32
   879  00FE0A  20                 	db	32
   880  00FE0B  20                 	db	32
   881  00FE0C  20                 	db	32
   882  00FE0D  20                 	db	32
   883  00FE0E  20                 	db	32
   884  00FE0F  3C                 	db	60	;'<'
   885  00FE10  00                 	db	0
   886  00FE11                     STR_31:
   887  00FE11  31                 	db	49	;'1'
   888  00FE12  2E                 	db	46
   889  00FE13  20                 	db	32
   890  00FE14  44                 	db	68	;'D'
   891  00FE15  41                 	db	65	;'A'
   892  00FE16  54                 	db	84	;'T'
   893  00FE17  45                 	db	69	;'E'
   894  00FE18  2F                 	db	47
   895  00FE19  54                 	db	84	;'T'
   896  00FE1A  49                 	db	73	;'I'
   897  00FE1B  4D                 	db	77	;'M'
   898  00FE1C  45                 	db	69	;'E'
   899  00FE1D  20                 	db	32
   900  00FE1E  20                 	db	32
   901  00FE1F  20                 	db	32
   902  00FE20  3C                 	db	60	;'<'
   903  00FE21  00                 	db	0
   904  00FE22                     STR_6:
   905  00FE22  50                 	db	80	;'P'
   906  00FE23  41                 	db	65	;'A'
   907  00FE24  55                 	db	85	;'U'
   908  00FE25  53                 	db	83	;'S'
   909  00FE26  45                 	db	69	;'E'
   910  00FE27  20                 	db	32
   911  00FE28  3C                 	db	60	;'<'
   912  00FE29  20                 	db	32
   913  00FE2A  7C                 	db	124
   914  00FE2B  20                 	db	32
   915  00FE2C  42                 	db	66	;'B'
   916  00FE2D  41                 	db	65	;'A'
   917  00FE2E  43                 	db	67	;'C'
   918  00FE2F  4B                 	db	75	;'K'
   919  00FE30  20                 	db	32
   920  00FE31  3E                 	db	62	;'>'
   921  00FE32  00                 	db	0
   922  00FE33                     STR_30:
   923  00FE33  50                 	db	80	;'P'
   924  00FE34  55                 	db	85	;'U'
   925  00FE35  53                 	db	83	;'S'
   926  00FE36  48                 	db	72	;'H'
   927  00FE37  20                 	db	32
   928  00FE38  54                 	db	84	;'T'
   929  00FE39  4F                 	db	79	;'O'
   930  00FE3A  20                 	db	32
   931  00FE3B  43                 	db	67	;'C'
   932  00FE3C  4F                 	db	79	;'O'
   933  00FE3D  4E                 	db	78	;'N'
   934  00FE3E  54                 	db	84	;'T'
   935  00FE3F  49                 	db	73	;'I'
   936  00FE40  4E                 	db	78	;'N'
   937  00FE41  55                 	db	85	;'U'
   938  00FE42  45                 	db	69	;'E'
   939  00FE43  00                 	db	0
   940  00FE44                     STR_82:
   941  00FE44  4D                 	db	77	;'M'
   942  00FE45  41                 	db	65	;'A'
   943  00FE46  47                 	db	71	;'G'
   944  00FE47  5F                 	db	95	;'_'
   945  00FE48  73                 	db	115	;'s'
   946  00FE49  69                 	db	105	;'i'
   947  00FE4A  67                 	db	103	;'g'
   948  00FE4B  6E                 	db	110	;'n'
   949  00FE4C  61                 	db	97	;'a'
   950  00FE4D  6C                 	db	108	;'l'
   951  00FE4E  3A                 	db	58	;':'
   952  00FE4F  20                 	db	32
   953  00FE50  25                 	db	37
   954  00FE51  64                 	db	100	;'d'
   955  00FE52  20                 	db	32
   956  00FE53  00                 	db	0
   957  00FE54                     STR_98:
   958  00FE54  54                 	db	84	;'T'
   959  00FE55  53                 	db	83	;'S'
   960  00FE56  54                 	db	84	;'T'
   961  00FE57  3A                 	db	58	;':'
   962  00FE58  20                 	db	32
   963  00FE59  54                 	db	84	;'T'
   964  00FE5A  49                 	db	73	;'I'
   965  00FE5B  4C                 	db	76	;'L'
   966  00FE5C  54                 	db	84	;'T'
   967  00FE5D  20                 	db	32
   968  00FE5E  53                 	db	83	;'S'
   969  00FE5F  45                 	db	69	;'E'
   970  00FE60  52                 	db	82	;'R'
   971  00FE61  56                 	db	86	;'V'
   972  00FE62  4F                 	db	79	;'O'
   973  00FE63  00                 	db	0
   974  00FE64                     STR_4:
   975  00FE64  44                 	db	68	;'D'
   976  00FE65  49                 	db	73	;'I'
   977  00FE66  44                 	db	68	;'D'
   978  00FE67  4E                 	db	78	;'N'
   979  00FE68  27                 	db	39
   980  00FE69  54                 	db	84	;'T'
   981  00FE6A  20                 	db	32
   982  00FE6B  43                 	db	67	;'C'
   983  00FE6C  4F                 	db	79	;'O'
   984  00FE6D  4D                 	db	77	;'M'
   985  00FE6E  50                 	db	80	;'P'
   986  00FE6F  4C                 	db	76	;'L'
   987  00FE70  45                 	db	69	;'E'
   988  00FE71  54                 	db	84	;'T'
   989  00FE72  45                 	db	69	;'E'
   990  00FE73  00                 	db	0
   991  00FE74                     STR_80:
   992  00FE74  49                 	db	73	;'I'
   993  00FE75  52                 	db	82	;'R'
   994  00FE76  5F                 	db	95	;'_'
   995  00FE77  73                 	db	115	;'s'
   996  00FE78  69                 	db	105	;'i'
   997  00FE79  67                 	db	103	;'g'
   998  00FE7A  6E                 	db	110	;'n'
   999  00FE7B  61                 	db	97	;'a'
  1000  00FE7C  6C                 	db	108	;'l'
  1001  00FE7D  3A                 	db	58	;':'
  1002  00FE7E  20                 	db	32
  1003  00FE7F  25                 	db	37
  1004  00FE80  64                 	db	100	;'d'
  1005  00FE81  20                 	db	32
  1006  00FE82  00                 	db	0
  1007  00FE83                     STR_104:
  1008  00FE83  43                 	db	67	;'C'
  1009  00FE84  41                 	db	65	;'A'
  1010  00FE85  4D                 	db	77	;'M'
  1011  00FE86  20                 	db	32
  1012  00FE87  44                 	db	68	;'D'
  1013  00FE88  57                 	db	87	;'W'
  1014  00FE89  4E                 	db	78	;'N'
  1015  00FE8A  20                 	db	32
  1016  00FE8B  7C                 	db	124
  1017  00FE8C  52                 	db	82	;'R'
  1018  00FE8D  43                 	db	67	;'C'
  1019  00FE8E  30                 	db	48	;'0'
  1020  00FE8F  3D                 	db	61	;'='
  1021  00FE90  30                 	db	48	;'0'
  1022  00FE91  00                 	db	0
  1023  00FE92                     STR_103:
  1024  00FE92  43                 	db	67	;'C'
  1025  00FE93  41                 	db	65	;'A'
  1026  00FE94  4D                 	db	77	;'M'
  1027  00FE95  20                 	db	32
  1028  00FE96  55                 	db	85	;'U'
  1029  00FE97  50                 	db	80	;'P'
  1030  00FE98  20                 	db	32
  1031  00FE99  20                 	db	32
  1032  00FE9A  7C                 	db	124
  1033  00FE9B  52                 	db	82	;'R'
  1034  00FE9C  43                 	db	67	;'C'
  1035  00FE9D  30                 	db	48	;'0'
  1036  00FE9E  3D                 	db	61	;'='
  1037  00FE9F  31                 	db	49	;'1'
  1038  00FEA0  00                 	db	0
  1039  00FEA1                     STR_81:
  1040  00FEA1  54                 	db	84	;'T'
  1041  00FEA2  53                 	db	83	;'S'
  1042  00FEA3  54                 	db	84	;'T'
  1043  00FEA4  3A                 	db	58	;':'
  1044  00FEA5  20                 	db	32
  1045  00FEA6  4D                 	db	77	;'M'
  1046  00FEA7  41                 	db	65	;'A'
  1047  00FEA8  47                 	db	71	;'G'
  1048  00FEA9  4E                 	db	78	;'N'
  1049  00FEAA  45                 	db	69	;'E'
  1050  00FEAB  54                 	db	84	;'T'
  1051  00FEAC  49                 	db	73	;'I'
  1052  00FEAD  53                 	db	83	;'S'
  1053  00FEAE  4D                 	db	77	;'M'
  1054  00FEAF  00                 	db	0
  1055  00FEB0                     STR_102:
  1056  00FEB0  54                 	db	84	;'T'
  1057  00FEB1  53                 	db	83	;'S'
  1058  00FEB2  54                 	db	84	;'T'
  1059  00FEB3  3A                 	db	58	;':'
  1060  00FEB4  20                 	db	32
  1061  00FEB5  43                 	db	67	;'C'
  1062  00FEB6  41                 	db	65	;'A'
  1063  00FEB7  4D                 	db	77	;'M'
  1064  00FEB8  20                 	db	32
  1065  00FEB9  53                 	db	83	;'S'
  1066  00FEBA  45                 	db	69	;'E'
  1067  00FEBB  52                 	db	82	;'R'
  1068  00FEBC  56                 	db	86	;'V'
  1069  00FEBD  4F                 	db	79	;'O'
  1070  00FEBE  00                 	db	0
  1071  00FEBF                     STR_91:
  1072  00FEBF  54                 	db	84	;'T'
  1073  00FEC0  53                 	db	83	;'S'
  1074  00FEC1  54                 	db	84	;'T'
  1075  00FEC2  3A                 	db	58	;':'
  1076  00FEC3  20                 	db	32
  1077  00FEC4  50                 	db	80	;'P'
  1078  00FEC5  41                 	db	65	;'A'
  1079  00FEC6  4E                 	db	78	;'N'
  1080  00FEC7  20                 	db	32
  1081  00FEC8  53                 	db	83	;'S'
  1082  00FEC9  45                 	db	69	;'E'
  1083  00FECA  52                 	db	82	;'R'
  1084  00FECB  56                 	db	86	;'V'
  1085  00FECC  4F                 	db	79	;'O'
  1086  00FECD  00                 	db	0
  1087  00FECE                     STR_75:
  1088  00FECE  41                 	db	65	;'A'
  1089  00FECF  4C                 	db	76	;'L'
  1090  00FED0  47                 	db	71	;'G'
  1091  00FED1  34                 	db	52	;'4'
  1092  00FED2  3A                 	db	58	;':'
  1093  00FED3  20                 	db	32
  1094  00FED4  41                 	db	65	;'A'
  1095  00FED5  4C                 	db	76	;'L'
  1096  00FED6  4C                 	db	76	;'L'
  1097  00FED7  20                 	db	32
  1098  00FED8  43                 	db	67	;'C'
  1099  00FED9  41                 	db	65	;'A'
  1100  00FEDA  4E                 	db	78	;'N'
  1101  00FEDB  53                 	db	83	;'S'
  1102  00FEDC  00                 	db	0
  1103  00FEDD                     STR_85:
  1104  00FEDD  54                 	db	84	;'T'
  1105  00FEDE  53                 	db	83	;'S'
  1106  00FEDF  54                 	db	84	;'T'
  1107  00FEE0  3A                 	db	58	;':'
  1108  00FEE1  20                 	db	32
  1109  00FEE2  44                 	db	68	;'D'
  1110  00FEE3  43                 	db	67	;'C'
  1111  00FEE4  20                 	db	32
  1112  00FEE5  4D                 	db	77	;'M'
  1113  00FEE6  4F                 	db	79	;'O'
  1114  00FEE7  54                 	db	84	;'T'
  1115  00FEE8  4F                 	db	79	;'O'
  1116  00FEE9  52                 	db	82	;'R'
  1117  00FEEA  53                 	db	83	;'S'
  1118  00FEEB  00                 	db	0
  1119  00FEEC                     STR_70:
  1120  00FEEC  41                 	db	65	;'A'
  1121  00FEED  4C                 	db	76	;'L'
  1122  00FEEE  47                 	db	71	;'G'
  1123  00FEEF  4F                 	db	79	;'O'
  1124  00FEF0  52                 	db	82	;'R'
  1125  00FEF1  49                 	db	73	;'I'
  1126  00FEF2  54                 	db	84	;'T'
  1127  00FEF3  48                 	db	72	;'H'
  1128  00FEF4  4D                 	db	77	;'M'
  1129  00FEF5  20                 	db	32
  1130  00FEF6  54                 	db	84	;'T'
  1131  00FEF7  45                 	db	69	;'E'
  1132  00FEF8  53                 	db	83	;'S'
  1133  00FEF9  54                 	db	84	;'T'
  1134  00FEFA  00                 	db	0
  1135  00FEFB                     STR_86:
  1136  00FEFB  50                 	db	80	;'P'
  1137  00FEFC  49                 	db	73	;'I'
  1138  00FEFD  4E                 	db	78	;'N'
  1139  00FEFE  20                 	db	32
  1140  00FEFF  52                 	db	82	;'R'
  1141  00FF00  41                 	db	65	;'A'
  1142  00FF01  35                 	db	53	;'5'
  1143  00FF02  20                 	db	32
  1144  00FF03  48                 	db	72	;'H'
  1145  00FF04  49                 	db	73	;'I'
  1146  00FF05  47                 	db	71	;'G'
  1147  00FF06  48                 	db	72	;'H'
  1148  00FF07  2E                 	db	46
  1149  00FF08  00                 	db	0
  1150  00FF09                     STR_73:
  1151  00FF09  41                 	db	65	;'A'
  1152  00FF0A  4C                 	db	76	;'L'
  1153  00FF0B  47                 	db	71	;'G'
  1154  00FF0C  32                 	db	50	;'2'
  1155  00FF0D  3A                 	db	58	;':'
  1156  00FF0E  20                 	db	32
  1157  00FF0F  31                 	db	49	;'1'
  1158  00FF10  32                 	db	50	;'2'
  1159  00FF11  20                 	db	32
  1160  00FF12  43                 	db	67	;'C'
  1161  00FF13  41                 	db	65	;'A'
  1162  00FF14  4E                 	db	78	;'N'
  1163  00FF15  53                 	db	83	;'S'
  1164  00FF16  00                 	db	0
  1165  00FF17                     STR_76:
  1166  00FF17  41                 	db	65	;'A'
  1167  00FF18  4C                 	db	76	;'L'
  1168  00FF19  47                 	db	71	;'G'
  1169  00FF1A  35                 	db	53	;'5'
  1170  00FF1B  3A                 	db	58	;':'
  1171  00FF1C  20                 	db	32
  1172  00FF1D  4E                 	db	78	;'N'
  1173  00FF1E  4F                 	db	79	;'O'
  1174  00FF1F  20                 	db	32
  1175  00FF20  43                 	db	67	;'C'
  1176  00FF21  41                 	db	65	;'A'
  1177  00FF22  4E                 	db	78	;'N'
  1178  00FF23  53                 	db	83	;'S'
  1179  00FF24  00                 	db	0
  1180  00FF25                     STR_71:
  1181  00FF25  50                 	db	80	;'P'
  1182  00FF26  55                 	db	85	;'U'
  1183  00FF27  53                 	db	83	;'S'
  1184  00FF28  48                 	db	72	;'H'
  1185  00FF29  20                 	db	32
  1186  00FF2A  54                 	db	84	;'T'
  1187  00FF2B  4F                 	db	79	;'O'
  1188  00FF2C  20                 	db	32
  1189  00FF2D  53                 	db	83	;'S'
  1190  00FF2E  54                 	db	84	;'T'
  1191  00FF2F  41                 	db	65	;'A'
  1192  00FF30  52                 	db	82	;'R'
  1193  00FF31  54                 	db	84	;'T'
  1194  00FF32  00                 	db	0
  1195  00FF33                     STR_23:
  1196  00FF33  25                 	db	37
  1197  00FF34  64                 	db	100	;'d'
  1198  00FF35  20                 	db	32
  1199  00FF36  4D                 	db	77	;'M'
  1200  00FF37  49                 	db	73	;'I'
  1201  00FF38  4E                 	db	78	;'N'
  1202  00FF39  20                 	db	32
  1203  00FF3A  25                 	db	37
  1204  00FF3B  64                 	db	100	;'d'
  1205  00FF3C  20                 	db	32
  1206  00FF3D  53                 	db	83	;'S'
  1207  00FF3E  45                 	db	69	;'E'
  1208  00FF3F  43                 	db	67	;'C'
  1209  00FF40  00                 	db	0
  1210  00FF41                     STR_2:
  1211  00FF41  54                 	db	84	;'T'
  1212  00FF42  49                 	db	73	;'I'
  1213  00FF43  4D                 	db	77	;'M'
  1214  00FF44  45                 	db	69	;'E'
  1215  00FF45  3A                 	db	58	;':'
  1216  00FF46  20                 	db	32
  1217  00FF47  25                 	db	37
  1218  00FF48  64                 	db	100	;'d'
  1219  00FF49  3A                 	db	58	;':'
  1220  00FF4A  25                 	db	37
  1221  00FF4B  30                 	db	48	;'0'
  1222  00FF4C  32                 	db	50	;'2'
  1223  00FF4D  64                 	db	100	;'d'
  1224  00FF4E  00                 	db	0
  1225  00FF4F                     STR_79:
  1226  00FF4F  54                 	db	84	;'T'
  1227  00FF50  53                 	db	83	;'S'
  1228  00FF51  54                 	db	84	;'T'
  1229  00FF52  3A                 	db	58	;':'
  1230  00FF53  20                 	db	32
  1231  00FF54  49                 	db	73	;'I'
  1232  00FF55  52                 	db	82	;'R'
  1233  00FF56  20                 	db	32
  1234  00FF57  53                 	db	83	;'S'
  1235  00FF58  4E                 	db	78	;'N'
  1236  00FF59  53                 	db	83	;'S'
  1237  00FF5A  52                 	db	82	;'R'
  1238  00FF5B  00                 	db	0
  1239  00FF5C                     STR_69:
  1240  00FF5C  33                 	db	51	;'3'
  1241  00FF5D  2E                 	db	46
  1242  00FF5E  20                 	db	32
  1243  00FF5F  41                 	db	65	;'A'
  1244  00FF60  43                 	db	67	;'C'
  1245  00FF61  54                 	db	84	;'T'
  1246  00FF62  55                 	db	85	;'U'
  1247  00FF63  41                 	db	65	;'A'
  1248  00FF64  54                 	db	84	;'T'
  1249  00FF65  4F                 	db	79	;'O'
  1250  00FF66  52                 	db	82	;'R'
  1251  00FF67  53                 	db	83	;'S'
  1252  00FF68  00                 	db	0
  1253  00FF69                     STR_65:
  1254  00FF69  54                 	db	84	;'T'
  1255  00FF6A  49                 	db	73	;'I'
  1256  00FF6B  4D                 	db	77	;'M'
  1257  00FF6C  45                 	db	69	;'E'
  1258  00FF6D  20                 	db	32
  1259  00FF6E  25                 	db	37
  1260  00FF6F  64                 	db	100	;'d'
  1261  00FF70  3A                 	db	58	;':'
  1262  00FF71  25                 	db	37
  1263  00FF72  30                 	db	48	;'0'
  1264  00FF73  32                 	db	50	;'2'
  1265  00FF74  64                 	db	100	;'d'
  1266  00FF75  00                 	db	0
  1267  00FF76                     STR_74:
  1268  00FF76  41                 	db	65	;'A'
  1269  00FF77  4C                 	db	76	;'L'
  1270  00FF78  47                 	db	71	;'G'
  1271  00FF79  33                 	db	51	;'3'
  1272  00FF7A  3A                 	db	58	;':'
  1273  00FF7B  20                 	db	32
  1274  00FF7C  31                 	db	49	;'1'
  1275  00FF7D  20                 	db	32
  1276  00FF7E  43                 	db	67	;'C'
  1277  00FF7F  41                 	db	65	;'A'
  1278  00FF80  4E                 	db	78	;'N'
  1279  00FF81  00                 	db	0
  1280  00FF82                     STR_88:
  1281  00FF82  50                 	db	80	;'P'
  1282  00FF83  49                 	db	73	;'I'
  1283  00FF84  4E                 	db	78	;'N'
  1284  00FF85  20                 	db	32
  1285  00FF86  52                 	db	82	;'R'
  1286  00FF87  41                 	db	65	;'A'
  1287  00FF88  33                 	db	51	;'3'
  1288  00FF89  2E                 	db	46
  1289  00FF8A  2E                 	db	46
  1290  00FF8B  2E                 	db	46
  1291  00FF8C  00                 	db	0
  1292  00FF8D                     STR_90:
  1293  00FF8D  50                 	db	80	;'P'
  1294  00FF8E  49                 	db	73	;'I'
  1295  00FF8F  4E                 	db	78	;'N'
  1296  00FF90  20                 	db	32
  1297  00FF91  52                 	db	82	;'R'
  1298  00FF92  41                 	db	65	;'A'
  1299  00FF93  34                 	db	52	;'4'
  1300  00FF94  2E                 	db	46
  1301  00FF95  2E                 	db	46
  1302  00FF96  2E                 	db	46
  1303  00FF97  00                 	db	0
  1304  00FF98                     STR_64:
  1305  00FF98  53                 	db	83	;'S'
  1306  00FF99  4F                 	db	79	;'O'
  1307  00FF9A  52                 	db	82	;'R'
  1308  00FF9B  54                 	db	84	;'T'
  1309  00FF9C  49                 	db	73	;'I'
  1310  00FF9D  4E                 	db	78	;'N'
  1311  00FF9E  47                 	db	71	;'G'
  1312  00FF9F  2E                 	db	46
  1313  00FFA0  2E                 	db	46
  1314  00FFA1  2E                 	db	46
  1315  00FFA2  00                 	db	0
  1316  00FFA3                     STR_22:
  1317  00FFA3  44                 	db	68	;'D'
  1318  00FFA4  55                 	db	85	;'U'
  1319  00FFA5  52                 	db	82	;'R'
  1320  00FFA6  41                 	db	65	;'A'
  1321  00FFA7  54                 	db	84	;'T'
  1322  00FFA8  49                 	db	73	;'I'
  1323  00FFA9  4F                 	db	79	;'O'
  1324  00FFAA  4E                 	db	78	;'N'
  1325  00FFAB  3A                 	db	58	;':'
  1326  00FFAC  00                 	db	0
  1327  00FFAD                     STR_77:
  1328  00FFAD  53                 	db	83	;'S'
  1329  00FFAE  45                 	db	69	;'E'
  1330  00FFAF  4E                 	db	78	;'N'
  1331  00FFB0  53                 	db	83	;'S'
  1332  00FFB1  4F                 	db	79	;'O'
  1333  00FFB2  52                 	db	82	;'R'
  1334  00FFB3  53                 	db	83	;'S'
  1335  00FFB4  00                 	db	0
  1336  00FFB5                     STR_105:
  1337  00FFB5  28                 	db	40
  1338  00FFB6  6E                 	db	110	;'n'
  1339  00FFB7  75                 	db	117	;'u'
  1340  00FFB8  6C                 	db	108	;'l'
  1341  00FFB9  6C                 	db	108	;'l'
  1342  00FFBA  29                 	db	41
  1343  00FFBB  00                 	db	0
  1344  00FFBC                     STR_67:
  1345  00FFBC  46                 	db	70	;'F'
  1346  00FFBD  41                 	db	65	;'A'
  1347  00FFBE  49                 	db	73	;'I'
  1348  00FFBF  4C                 	db	76	;'L'
  1349  00FFC0  45                 	db	69	;'E'
  1350  00FFC1  44                 	db	68	;'D'
  1351  00FFC2  00                 	db	0
  1352  00FFC3                     STR_7:
  1353  00FFC3  53                 	db	83	;'S'
  1354  00FFC4  54                 	db	84	;'T'
  1355  00FFC5  41                 	db	65	;'A'
  1356  00FFC6  52                 	db	82	;'R'
  1357  00FFC7  54                 	db	84	;'T'
  1358  00FFC8  3A                 	db	58	;':'
  1359  00FFC9  00                 	db	0
  1360  00FFCA                     STR_9:
  1361  00FFCA  46                 	db	70	;'F'
  1362  00FFCB  45                 	db	69	;'E'
  1363  00FFCC  42                 	db	66	;'B'
  1364  00FFCD  00                 	db	0
  1365  00FFCE                     STR_19:
  1366  00FFCE  44                 	db	68	;'D'
  1367  00FFCF  45                 	db	69	;'E'
  1368  00FFD0  43                 	db	67	;'C'
  1369  00FFD1  00                 	db	0
  1370  00FFD2                     STR_15:
  1371  00FFD2  41                 	db	65	;'A'
  1372  00FFD3  55                 	db	85	;'U'
  1373  00FFD4  47                 	db	71	;'G'
  1374  00FFD5  00                 	db	0
  1375  00FFD6                     STR_14:
  1376  00FFD6  4A                 	db	74	;'J'
  1377  00FFD7  55                 	db	85	;'U'
  1378  00FFD8  4C                 	db	76	;'L'
  1379  00FFD9  00                 	db	0
  1380  00FFDA                     STR_8:
  1381  00FFDA  4A                 	db	74	;'J'
  1382  00FFDB  41                 	db	65	;'A'
  1383  00FFDC  4E                 	db	78	;'N'
  1384  00FFDD  00                 	db	0
  1385  00FFDE                     STR_13:
  1386  00FFDE  4A                 	db	74	;'J'
  1387  00FFDF  55                 	db	85	;'U'
  1388  00FFE0  4E                 	db	78	;'N'
  1389  00FFE1  00                 	db	0
  1390  00FFE2                     STR_16:
  1391  00FFE2  53                 	db	83	;'S'
  1392  00FFE3  45                 	db	69	;'E'
  1393  00FFE4  50                 	db	80	;'P'
  1394  00FFE5  00                 	db	0
  1395  00FFE6                     STR_10:
  1396  00FFE6  4D                 	db	77	;'M'
  1397  00FFE7  41                 	db	65	;'A'
  1398  00FFE8  52                 	db	82	;'R'
  1399  00FFE9  00                 	db	0
  1400  00FFEA                     STR_11:
  1401  00FFEA  41                 	db	65	;'A'
  1402  00FFEB  50                 	db	80	;'P'
  1403  00FFEC  52                 	db	82	;'R'
  1404  00FFED  00                 	db	0
  1405  00FFEE                     STR_20:
  1406  00FFEE  45                 	db	69	;'E'
  1407  00FFEF  52                 	db	82	;'R'
  1408  00FFF0  52                 	db	82	;'R'
  1409  00FFF1  00                 	db	0
  1410  00FFF2                     STR_17:
  1411  00FFF2  4F                 	db	79	;'O'
  1412  00FFF3  43                 	db	67	;'C'
  1413  00FFF4  54                 	db	84	;'T'
  1414  00FFF5  00                 	db	0
  1415  00FFF6                     STR_18:
  1416  00FFF6  4E                 	db	78	;'N'
  1417  00FFF7  4F                 	db	79	;'O'
  1418  00FFF8  56                 	db	86	;'V'
  1419  00FFF9  00                 	db	0
  1420  00FFFA                     STR_12:
  1421  00FFFA  4D                 	db	77	;'M'
  1422  00FFFB  41                 	db	65	;'A'
  1423  00FFFC  59                 	db	89	;'Y'
  1424  00FFFD  00                 	db	0
  1425  0000                     
  1426                           ; #config settings
  1427  00FFFE  00                 	db	0	; dummy byte at the end
  1428  0000                     
  1429                           	psect	cinit
  1430  003816                     __pcinit:
  1431                           	opt stack 0
  1432  003816                     start_initialization:
  1433                           	opt stack 0
  1434  003816                     __initialization:
  1435                           	opt stack 0
  1436                           
  1437                           ; Initialize objects allocated to BANK1 (8 bytes)
  1438                           ; load TBLPTR registers with __pidataBANK1
  1439  003816  0E42               	movlw	low __pidataBANK1
  1440  003818  6EF6               	movwf	tblptrl,c
  1441  00381A  0E3F               	movlw	high __pidataBANK1
  1442  00381C  6EF7               	movwf	tblptrh,c
  1443  00381E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1444  003820  6EF8               	movwf	tblptru,c
  1445  003822  EE01  F02D         	lfsr	0,__pdataBANK1
  1446  003826  EE10 F008          	lfsr	1,8
  1447  00382A                     copy_data0:
  1448  00382A  0009               	tblrd		*+
  1449  00382C  CFF5 FFEE          	movff	tablat,postinc0
  1450  003830  50E5               	movf	postdec1,w,c
  1451  003832  50E1               	movf	fsr1l,w,c
  1452  003834  E1FA               	bnz	copy_data0
  1453                           
  1454                           ; Clear objects allocated to BANK1 (45 bytes)
  1455  003836  EE01  F000         	lfsr	0,__pbssBANK1
  1456  00383A  0E2D               	movlw	45
  1457  00383C                     clear_0:
  1458  00383C  6AEE               	clrf	postinc0,c
  1459  00383E  06E8               	decf	wreg,f,c
  1460  003840  E1FD               	bnz	clear_0
  1461                           
  1462                           ; Clear objects allocated to BANK0 (38 bytes)
  1463  003842  EE00  F0DA         	lfsr	0,__pbssBANK0
  1464  003846  0E26               	movlw	38
  1465  003848                     clear_1:
  1466  003848  6AEE               	clrf	postinc0,c
  1467  00384A  06E8               	decf	wreg,f,c
  1468  00384C  E1FD               	bnz	clear_1
  1469                           
  1470                           ; Clear objects allocated to COMRAM (35 bytes)
  1471  00384E  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1472  003852  0E23               	movlw	35
  1473  003854                     clear_2:
  1474  003854  6AEE               	clrf	postinc0,c
  1475  003856  06E8               	decf	wreg,f,c
  1476  003858  E1FD               	bnz	clear_2
  1477  00385A                     end_of_initialization:
  1478                           	opt stack 0
  1479  00385A                     __end_of__initialization:
  1480                           	opt stack 0
  1481  00385A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1482  00385C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1483  00385E  0100               	movlb	0
  1484  003860  EF0D  F019         	goto	_main	;jump to C main() function
  1485                           tblptru	equ	0xFF8
  1486                           tblptrh	equ	0xFF7
  1487                           tblptrl	equ	0xFF6
  1488                           tablat	equ	0xFF5
  1489                           postinc0	equ	0xFEE
  1490                           wreg	equ	0xFE8
  1491                           postdec1	equ	0xFE5
  1492                           fsr1l	equ	0xFE1
  1493                           
  1494                           	psect	bssCOMRAM
  1495  00005B                     __pbssCOMRAM:
  1496                           	opt stack 0
  1497  00005B                     _back:
  1498                           	opt stack 0
  1499  00005B                     	ds	2
  1500  00005D                     _count_can_no_lab:
  1501                           	opt stack 0
  1502  00005D                     	ds	2
  1503  00005F                     _count_can_w_lab:
  1504                           	opt stack 0
  1505  00005F                     	ds	2
  1506  000061                     _count_pop_no_tab:
  1507                           	opt stack 0
  1508  000061                     	ds	2
  1509  000063                     _count_pop_w_tab:
  1510                           	opt stack 0
  1511  000063                     	ds	2
  1512  000065                     _cur_can:
  1513                           	opt stack 0
  1514  000065                     	ds	2
  1515  000067                     _down:
  1516                           	opt stack 0
  1517  000067                     	ds	2
  1518  000069                     _enter:
  1519                           	opt stack 0
  1520  000069                     	ds	2
  1521  00006B                     _f_ID_receive:
  1522                           	opt stack 0
  1523  00006B                     	ds	2
  1524  00006D                     _f_can_coming_to_ID:
  1525                           	opt stack 0
  1526  00006D                     	ds	2
  1527  00006F                     _f_can_coming_to_distribution:
  1528                           	opt stack 0
  1529  00006F                     	ds	2
  1530  000071                     _f_lastCan:
  1531                           	opt stack 0
  1532  000071                     	ds	2
  1533  000073                     _firstboot:
  1534                           	opt stack 0
  1535  000073                     	ds	2
  1536  000075                     _up:
  1537                           	opt stack 0
  1538  000075                     	ds	2
  1539  000077                     _var:
  1540                           	opt stack 0
  1541  000077                     	ds	2
  1542  000079                     _was_low_1:
  1543                           	opt stack 0
  1544  000079                     	ds	2
  1545  00007B                     _was_low_3:
  1546                           	opt stack 0
  1547  00007B                     	ds	2
  1548  00007D                     _input:
  1549                           	opt stack 0
  1550  00007D                     	ds	1
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           	psect	bssBANK0
  1561  0000DA                     __pbssBANK0:
  1562                           	opt stack 0
  1563  0000DA                     _IR_signal:
  1564                           	opt stack 0
  1565  0000DA                     	ds	2
  1566  0000DC                     _MAG_signal:
  1567                           	opt stack 0
  1568  0000DC                     	ds	2
  1569  0000DE                     _cur_state:
  1570                           	opt stack 0
  1571  0000DE                     	ds	2
  1572  0000E0                     _debug:
  1573                           	opt stack 0
  1574  0000E0                     	ds	2
  1575  0000E2                     _f_loadingNewCan:
  1576                           	opt stack 0
  1577  0000E2                     	ds	2
  1578  0000E4                     _first:
  1579                           	opt stack 0
  1580  0000E4                     	ds	2
  1581  0000E6                     _i:
  1582                           	opt stack 0
  1583  0000E6                     	ds	2
  1584  0000E8                     _log:
  1585                           	opt stack 0
  1586  0000E8                     	ds	2
  1587  0000EA                     _log_completion:
  1588                           	opt stack 0
  1589  0000EA                     	ds	2
  1590  0000EC                     _log_count_can_no_lab:
  1591                           	opt stack 0
  1592  0000EC                     	ds	2
  1593  0000EE                     _log_count_can_w_lab:
  1594                           	opt stack 0
  1595  0000EE                     	ds	2
  1596  0000F0                     _log_count_pop_no_tab:
  1597                           	opt stack 0
  1598  0000F0                     	ds	2
  1599  0000F2                     _log_count_pop_w_tab:
  1600                           	opt stack 0
  1601  0000F2                     	ds	2
  1602  0000F4                     _log_count_total:
  1603                           	opt stack 0
  1604  0000F4                     	ds	2
  1605  0000F6                     _log_total_time:
  1606                           	opt stack 0
  1607  0000F6                     	ds	2
  1608  0000F8                     _logstate:
  1609                           	opt stack 0
  1610  0000F8                     	ds	2
  1611  0000FA                     _total_time:
  1612                           	opt stack 0
  1613  0000FA                     	ds	2
  1614  0000FC                     _machine_state:
  1615                           	opt stack 0
  1616  0000FC                     	ds	1
  1617  0000FD                     _sel:
  1618                           	opt stack 0
  1619  0000FD                     	ds	1
  1620  0000FE                     _count_total:
  1621                           	opt stack 0
  1622  0000FE                     	ds	2
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	bssBANK1
  1633  000100                     __pbssBANK1:
  1634                           	opt stack 0
  1635  000100                     _log_startTime:
  1636                           	opt stack 0
  1637  000100                     	ds	14
  1638  00010E                     _startTime:
  1639                           	opt stack 0
  1640  00010E                     	ds	14
  1641  00011C                     _servoTimes:
  1642                           	opt stack 0
  1643  00011C                     	ds	8
  1644  000124                     _time:
  1645                           	opt stack 0
  1646  000124                     	ds	7
  1647  00012B                     _f_can_distributed:
  1648                           	opt stack 0
  1649  00012B                     	ds	2
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           postdec1	equ	0xFE5
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	dataBANK1
  1660  00012D                     __pdataBANK1:
  1661                           	opt stack 0
  1662  00012D                     UI@F3220:
  1663                           	opt stack 0
  1664  00012D                     	ds	4
  1665  000131                     printRTC@F3211:
  1666                           	opt stack 0
  1667  000131                     	ds	4
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	cstackBANK0
  1678  000080                     __pcstackBANK0:
  1679                           	opt stack 0
  1680  000080                     ??_isdigit:
  1681  000080                     ??_readADC:
  1682  000080                     ??_I2C_Master_Wait:
  1683  000080                     ?___wmul:
  1684                           	opt stack 0
  1685  000080                     ?___awmod:
  1686                           	opt stack 0
  1687  000080                     ?___lwdiv:
  1688                           	opt stack 0
  1689  000080                     ?___lldiv:
  1690                           	opt stack 0
  1691  000080                     lcdNibble@temp:
  1692                           	opt stack 0
  1693  000080                     initTime@m:
  1694                           	opt stack 0
  1695  000080                     updateServoPosition@time_us:
  1696                           	opt stack 0
  1697  000080                     EEPROM_read@address:
  1698                           	opt stack 0
  1699  000080                     ___wmul@multiplier:
  1700                           	opt stack 0
  1701  000080                     ___awmod@dividend:
  1702                           	opt stack 0
  1703  000080                     ___lwdiv@dividend:
  1704                           	opt stack 0
  1705  000080                     strcpy@to:
  1706                           	opt stack 0
  1707  000080                     ___lldiv@dividend:
  1708                           	opt stack 0
  1709                           
  1710                           ; 4 bytes @ 0x0
  1711  000080                     	ds	1
  1712  000081                     readADC@channel:
  1713                           	opt stack 0
  1714  000081                     I2C_Master_Read@a:
  1715                           	opt stack 0
  1716  000081                     lcdNibble@data:
  1717                           	opt stack 0
  1718  000081                     initTime@h:
  1719                           	opt stack 0
  1720  000081                     _isdigit$1788:
  1721                           	opt stack 0
  1722  000081                     I2C_Master_Write@d:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x1
  1726  000081                     	ds	1
  1727  000082                     ??_readIR:
  1728  000082                     ??_readMAG:
  1729  000082                     I2C_Master_Read@temp:
  1730                           	opt stack 0
  1731  000082                     lcdInst@data:
  1732                           	opt stack 0
  1733  000082                     putch@data:
  1734                           	opt stack 0
  1735  000082                     initTime@w:
  1736                           	opt stack 0
  1737  000082                     isdigit@c:
  1738                           	opt stack 0
  1739  000082                     updateServoPosition@timer:
  1740                           	opt stack 0
  1741  000082                     ___wmul@multiplicand:
  1742                           	opt stack 0
  1743  000082                     ___awmod@divisor:
  1744                           	opt stack 0
  1745  000082                     ___lwdiv@divisor:
  1746                           	opt stack 0
  1747  000082                     strcpy@from:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x2
  1751  000082                     	ds	1
  1752  000083                     ??_initLCD:
  1753  000083                     initTime@DD:
  1754                           	opt stack 0
  1755  000083                     getRTC@i:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x3
  1759  000083                     	ds	1
  1760  000084                     ??_updateServoPosition:
  1761  000084                     initTime@MM:
  1762                           	opt stack 0
  1763  000084                     ___awmod@counter:
  1764                           	opt stack 0
  1765  000084                     readIR@res:
  1766                           	opt stack 0
  1767  000084                     readMAG@res:
  1768                           	opt stack 0
  1769  000084                     ___wmul@product:
  1770                           	opt stack 0
  1771  000084                     ___lwdiv@quotient:
  1772                           	opt stack 0
  1773  000084                     strcpy@cp:
  1774                           	opt stack 0
  1775  000084                     ___lldiv@divisor:
  1776                           	opt stack 0
  1777                           
  1778                           ; 4 bytes @ 0x4
  1779  000084                     	ds	1
  1780  000085                     ??_initSortTimer:
  1781  000085                     initTime@YY:
  1782                           	opt stack 0
  1783  000085                     ___awmod@sign:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0x5
  1787  000085                     	ds	1
  1788  000086                     ??_ID:
  1789  000086                     ??_getIR:
  1790  000086                     ?___awdiv:
  1791                           	opt stack 0
  1792  000086                     initTime@s:
  1793                           	opt stack 0
  1794  000086                     ___lwdiv@counter:
  1795                           	opt stack 0
  1796  000086                     updateServoPosition@my_time:
  1797                           	opt stack 0
  1798  000086                     ___awdiv@dividend:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x6
  1802  000086                     	ds	1
  1803  000087                     ?___lwmod:
  1804                           	opt stack 0
  1805  000087                     ___lwmod@dividend:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x7
  1809  000087                     	ds	1
  1810  000088                     ??_Distribution:
  1811  000088                     ??_initServos:
  1812  000088                     initSortTimer@i:
  1813                           	opt stack 0
  1814  000088                     ___awdiv@divisor:
  1815                           	opt stack 0
  1816  000088                     ___lldiv@quotient:
  1817                           	opt stack 0
  1818  000088                     ID@sensor_outputs:
  1819                           	opt stack 0
  1820                           
  1821                           ; 6 bytes @ 0x8
  1822  000088                     	ds	1
  1823  000089                     ___lwmod@divisor:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x9
  1827  000089                     	ds	1
  1828  00008A                     ___awdiv@counter:
  1829                           	opt stack 0
  1830                           
  1831                           ; 1 bytes @ 0xA
  1832  00008A                     	ds	1
  1833  00008B                     ___awdiv@sign:
  1834                           	opt stack 0
  1835  00008B                     ___lwmod@counter:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0xB
  1839  00008B                     	ds	1
  1840  00008C                     ___lldiv@counter:
  1841                           	opt stack 0
  1842  00008C                     ___awdiv@quotient:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0xC
  1846  00008C                     	ds	1
  1847  00008D                     I2C_Master_Init@c:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0xD
  1851  00008D                     	ds	1
  1852  00008E                     ?_printf:
  1853                           	opt stack 0
  1854  00008E                     printf@f:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0xE
  1858  00008E                     	ds	3
  1859  000091                     ??_I2C_Master_Init:
  1860                           
  1861                           ; 1 bytes @ 0x11
  1862  000091                     	ds	4
  1863  000095                     ??_loadRTC:
  1864                           
  1865                           ; 1 bytes @ 0x15
  1866  000095                     	ds	1
  1867  000096                     loadRTC@i:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x16
  1871  000096                     	ds	4
  1872  00009A                     ??_printf:
  1873                           
  1874                           ; 1 bytes @ 0x1A
  1875  00009A                     	ds	4
  1876  00009E                     printf@prec:
  1877                           	opt stack 0
  1878                           
  1879                           ; 1 bytes @ 0x1E
  1880  00009E                     	ds	1
  1881  00009F                     printf@cp:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x1F
  1885  00009F                     	ds	2
  1886  0000A1                     printf@ap:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x21
  1890  0000A1                     	ds	2
  1891  0000A3                     printf@len:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x23
  1895  0000A3                     	ds	2
  1896  0000A5                     printf@val:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x25
  1900  0000A5                     	ds	2
  1901  0000A7                     printf@flag:
  1902                           	opt stack 0
  1903                           
  1904                           ; 1 bytes @ 0x27
  1905  0000A7                     	ds	1
  1906  0000A8                     printf@c:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0x28
  1910  0000A8                     	ds	1
  1911  0000A9                     printf@width:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x29
  1915  0000A9                     	ds	2
  1916  0000AB                     ??_printRTC:
  1917  0000AB                     ??_algorithmTest:
  1918  0000AB                     ??_sensorTest:
  1919  0000AB                     ??_actuatorTest:
  1920  0000AB                     EEPROM_write@address:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x2B
  1924  0000AB                     	ds	2
  1925  0000AD                     EEPROM_write@data:
  1926                           	opt stack 0
  1927  0000AD                     actuatorTest@i:
  1928                           	opt stack 0
  1929                           
  1930                           ; 1 bytes @ 0x2D
  1931  0000AD                     	ds	1
  1932  0000AE                     ??_EEPROM_write:
  1933  0000AE                     actuatorTest@i_1505:
  1934                           	opt stack 0
  1935  0000AE                     printRTC@INT_time:
  1936                           	opt stack 0
  1937                           
  1938                           ; 14 bytes @ 0x2E
  1939  0000AE                     	ds	1
  1940  0000AF                     EEPROM_write@i:
  1941                           	opt stack 0
  1942  0000AF                     actuatorTest@i_1506:
  1943                           	opt stack 0
  1944                           
  1945                           ; 1 bytes @ 0x2F
  1946  0000AF                     	ds	1
  1947  0000B0                     EEPROM_write@i_1310:
  1948                           	opt stack 0
  1949  0000B0                     actuatorTest@i_1508:
  1950                           	opt stack 0
  1951                           
  1952                           ; 1 bytes @ 0x30
  1953  0000B0                     	ds	1
  1954  0000B1                     ??_Loading:
  1955  0000B1                     logRun@num:
  1956                           	opt stack 0
  1957  0000B1                     actuatorTest@i_1509:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0x31
  1961  0000B1                     	ds	1
  1962  0000B2                     logRun@byte1:
  1963                           	opt stack 0
  1964  0000B2                     actuatorTest@i_1511:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x32
  1968  0000B2                     	ds	1
  1969  0000B3                     logRun@byte2:
  1970                           	opt stack 0
  1971  0000B3                     actuatorTest@i_1512:
  1972                           	opt stack 0
  1973  0000B3                     Loading@addr:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x33
  1977  0000B3                     	ds	1
  1978  0000B4                     logRun@byte3:
  1979                           	opt stack 0
  1980  0000B4                     actuatorTest@i_1514:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0x34
  1984  0000B4                     	ds	1
  1985  0000B5                     Loading@byte1:
  1986                           	opt stack 0
  1987  0000B5                     logRun@byte_i:
  1988                           	opt stack 0
  1989  0000B5                     actuatorTest@i_1515:
  1990                           	opt stack 0
  1991                           
  1992                           ; 1 bytes @ 0x35
  1993  0000B5                     	ds	1
  1994  0000B6                     logRun@byte11:
  1995                           	opt stack 0
  1996  0000B6                     actuatorTest@i_1517:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0x36
  2000  0000B6                     	ds	1
  2001  0000B7                     actuatorTest@i_1518:
  2002                           	opt stack 0
  2003  0000B7                     logRun@i:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x37
  2007  0000B7                     	ds	1
  2008  0000B8                     actuatorTest@i_1520:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x38
  2012  0000B8                     	ds	1
  2013  0000B9                     actuatorTest@i_1521:
  2014                           	opt stack 0
  2015  0000B9                     logRun@addr:
  2016                           	opt stack 0
  2017                           
  2018                           ; 2 bytes @ 0x39
  2019  0000B9                     	ds	1
  2020  0000BA                     actuatorTest@i_1524:
  2021                           	opt stack 0
  2022                           
  2023                           ; 1 bytes @ 0x3A
  2024  0000BA                     	ds	1
  2025  0000BB                     actuatorTest@i_1525:
  2026                           	opt stack 0
  2027                           
  2028                           ; 1 bytes @ 0x3B
  2029  0000BB                     	ds	1
  2030  0000BC                     actuatorTest@i_1527:
  2031                           	opt stack 0
  2032  0000BC                     printRTC@RTC_month:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x3C
  2036  0000BC                     	ds	1
  2037  0000BD                     actuatorTest@i_1528:
  2038                           	opt stack 0
  2039                           
  2040                           ; 1 bytes @ 0x3D
  2041  0000BD                     	ds	1
  2042  0000BE                     actuatorTest@i_1530:
  2043                           	opt stack 0
  2044  0000BE                     printRTC@month:
  2045                           	opt stack 0
  2046                           
  2047                           ; 4 bytes @ 0x3E
  2048  0000BE                     	ds	1
  2049  0000BF                     actuatorTest@i_1531:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x3F
  2053  0000BF                     	ds	1
  2054  0000C0                     actuatorTest@i_1534:
  2055                           	opt stack 0
  2056                           
  2057                           ; 1 bytes @ 0x40
  2058  0000C0                     	ds	1
  2059  0000C1                     actuatorTest@i_1535:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x41
  2063  0000C1                     	ds	1
  2064  0000C2                     actuatorTest@i_1537:
  2065                           	opt stack 0
  2066  0000C2                     printRTC@i:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x42
  2070  0000C2                     	ds	1
  2071  0000C3                     actuatorTest@i_1538:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x43
  2075  0000C3                     	ds	1
  2076  0000C4                     ??_Test:
  2077  0000C4                     ??_UI:
  2078                           
  2079                           ; 1 bytes @ 0x44
  2080  0000C4                     	ds	2
  2081  0000C6                     _UI$2144:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x46
  2085  0000C6                     	ds	2
  2086  0000C8                     UI@i:
  2087                           	opt stack 0
  2088                           
  2089                           ; 1 bytes @ 0x48
  2090  0000C8                     	ds	1
  2091  0000C9                     UI@i_408:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x49
  2095  0000C9                     	ds	1
  2096  0000CA                     UI@i_411:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x4A
  2100  0000CA                     	ds	1
  2101  0000CB                     UI@i_412:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x4B
  2105  0000CB                     	ds	1
  2106  0000CC                     UI@i_430:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x4C
  2110  0000CC                     	ds	1
  2111  0000CD                     UI@i_431:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x4D
  2115  0000CD                     	ds	1
  2116  0000CE                     UI@i_434:
  2117                           	opt stack 0
  2118                           
  2119                           ; 1 bytes @ 0x4E
  2120  0000CE                     	ds	1
  2121  0000CF                     UI@i_435:
  2122                           	opt stack 0
  2123                           
  2124                           ; 1 bytes @ 0x4F
  2125  0000CF                     	ds	1
  2126  0000D0                     UI@i_438:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x50
  2130  0000D0                     	ds	1
  2131  0000D1                     UI@i_439:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x51
  2135  0000D1                     	ds	1
  2136  0000D2                     UI@i_442:
  2137                           	opt stack 0
  2138                           
  2139                           ; 1 bytes @ 0x52
  2140  0000D2                     	ds	1
  2141  0000D3                     UI@i_443:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x53
  2145  0000D3                     	ds	1
  2146  0000D4                     UI@i_446:
  2147                           	opt stack 0
  2148                           
  2149                           ; 1 bytes @ 0x54
  2150  0000D4                     	ds	1
  2151  0000D5                     UI@i_447:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x55
  2155  0000D5                     	ds	1
  2156  0000D6                     UI@month:
  2157                           	opt stack 0
  2158                           
  2159                           ; 4 bytes @ 0x56
  2160  0000D6                     	ds	4
  2161  0000DA                     tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           postdec1	equ	0xFE5
  2168                           fsr1l	equ	0xFE1
  2169                           
  2170                           ; 1 bytes @ 0x5A
  2171                           
  2172                           	psect	cstackCOMRAM
  2173  000001                     __pcstackCOMRAM:
  2174                           	opt stack 0
  2175  000001                     ??i2_I2C_Master_Wait:
  2176  000001                     ??i2_isdigit:
  2177  000001                     ?i2___wmul:
  2178                           	opt stack 0
  2179  000001                     ?i2___lwmod:
  2180                           	opt stack 0
  2181  000001                     i2lcdNibble@temp:
  2182                           	opt stack 0
  2183  000001                     i2EEPROM_read@address:
  2184                           	opt stack 0
  2185  000001                     i2___wmul@multiplier:
  2186                           	opt stack 0
  2187  000001                     i2___lwmod@dividend:
  2188                           	opt stack 0
  2189  000001                     i2strcpy@to:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x0
  2193  000001                     	ds	1
  2194  000002                     i2I2C_Master_Read@a:
  2195                           	opt stack 0
  2196  000002                     i2lcdNibble@data:
  2197                           	opt stack 0
  2198  000002                     i2_isdigit$1788:
  2199                           	opt stack 0
  2200  000002                     i2I2C_Master_Write@d:
  2201                           	opt stack 0
  2202                           
  2203                           ; 2 bytes @ 0x1
  2204  000002                     	ds	1
  2205  000003                     i2I2C_Master_Read@temp:
  2206                           	opt stack 0
  2207  000003                     i2lcdInst@data:
  2208                           	opt stack 0
  2209  000003                     i2putch@data:
  2210                           	opt stack 0
  2211  000003                     i2isdigit@c:
  2212                           	opt stack 0
  2213  000003                     i2___wmul@multiplicand:
  2214                           	opt stack 0
  2215  000003                     i2___lwmod@divisor:
  2216                           	opt stack 0
  2217  000003                     i2strcpy@from:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x2
  2221  000003                     	ds	1
  2222  000004                     i2getRTC@i:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x3
  2226  000004                     	ds	1
  2227  000005                     i2___lwmod@counter:
  2228                           	opt stack 0
  2229  000005                     i2___wmul@product:
  2230                           	opt stack 0
  2231  000005                     i2strcpy@cp:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x4
  2235  000005                     	ds	1
  2236  000006                     ?i2___lwdiv:
  2237                           	opt stack 0
  2238  000006                     i2___lwdiv@dividend:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x5
  2242  000006                     	ds	1
  2243  000007                     retrieveLog@logNum:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x6
  2247  000007                     	ds	1
  2248  000008                     i2___lwdiv@divisor:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x7
  2252  000008                     	ds	1
  2253  000009                     ??_retrieveLog:
  2254                           
  2255                           ; 1 bytes @ 0x8
  2256  000009                     	ds	1
  2257  00000A                     i2___lwdiv@quotient:
  2258                           	opt stack 0
  2259                           
  2260                           ; 2 bytes @ 0x9
  2261  00000A                     	ds	1
  2262  00000B                     retrieveLog@byte1:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0xA
  2266  00000B                     	ds	1
  2267  00000C                     retrieveLog@byte2:
  2268                           	opt stack 0
  2269  00000C                     i2___lwdiv@counter:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0xB
  2273  00000C                     	ds	1
  2274  00000D                     ?i2_printf:
  2275                           	opt stack 0
  2276  00000D                     retrieveLog@byte3:
  2277                           	opt stack 0
  2278  00000D                     i2printf@f:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0xC
  2282  00000D                     	ds	1
  2283  00000E                     retrieveLog@i:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0xD
  2287  00000E                     	ds	2
  2288  000010                     retrieveLog@addr:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0xF
  2292  000010                     	ds	2
  2293  000012                     dispLogs@myLog:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x11
  2297  000012                     	ds	2
  2298  000014                     
  2299                           ; 1 bytes @ 0x13
  2300  000014                     	ds	5
  2301  000019                     ??i2_printf:
  2302                           
  2303                           ; 1 bytes @ 0x18
  2304  000019                     	ds	4
  2305  00001D                     i2printf@prec:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x1C
  2309  00001D                     	ds	1
  2310  00001E                     i2printf@cp:
  2311                           	opt stack 0
  2312                           
  2313                           ; 2 bytes @ 0x1D
  2314  00001E                     	ds	2
  2315  000020                     i2printf@ap:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x1F
  2319  000020                     	ds	2
  2320  000022                     i2printf@len:
  2321                           	opt stack 0
  2322                           
  2323                           ; 2 bytes @ 0x21
  2324  000022                     	ds	2
  2325  000024                     i2printf@val:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x23
  2329  000024                     	ds	2
  2330  000026                     i2printf@flag:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x25
  2334  000026                     	ds	1
  2335  000027                     i2printf@c:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x26
  2339  000027                     	ds	1
  2340  000028                     i2printf@width:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x27
  2344  000028                     	ds	2
  2345  00002A                     ??_printSortTimer:
  2346  00002A                     ??i2_printRTC:
  2347  00002A                     ?_inputHandler:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x29
  2351  00002A                     	ds	2
  2352  00002C                     ??_inputHandler:
  2353                           
  2354                           ; 1 bytes @ 0x2B
  2355  00002C                     	ds	1
  2356  00002D                     printSortTimer@hour:
  2357                           	opt stack 0
  2358  00002D                     i2printRTC@INT_time:
  2359                           	opt stack 0
  2360                           
  2361                           ; 14 bytes @ 0x2C
  2362  00002D                     	ds	2
  2363  00002F                     printSortTimer@curTime:
  2364                           	opt stack 0
  2365                           
  2366                           ; 14 bytes @ 0x2E
  2367  00002F                     	ds	12
  2368  00003B                     i2printRTC@RTC_month:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x3A
  2372  00003B                     	ds	2
  2373  00003D                     printSortTimer@start_sec:
  2374                           	opt stack 0
  2375  00003D                     i2printRTC@month:
  2376                           	opt stack 0
  2377                           
  2378                           ; 4 bytes @ 0x3C
  2379  00003D                     	ds	2
  2380  00003F                     printSortTimer@cur_sec:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x3E
  2384  00003F                     	ds	2
  2385  000041                     printSortTimer@min:
  2386                           	opt stack 0
  2387  000041                     i2printRTC@i:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x40
  2391  000041                     	ds	2
  2392  000043                     ??_updateMenu:
  2393  000043                     printSortTimer@sec:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x42
  2397  000043                     	ds	2
  2398  000045                     _printSortTimer$2264:
  2399                           	opt stack 0
  2400                           
  2401                           ; 2 bytes @ 0x44
  2402  000045                     	ds	2
  2403  000047                     printSortTimer@timeDiff:
  2404                           	opt stack 0
  2405                           
  2406                           ; 2 bytes @ 0x46
  2407  000047                     	ds	2
  2408  000049                     printSortTimer@i:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0x48
  2412  000049                     	ds	2
  2413  00004B                     ??_handler:
  2414                           
  2415                           ; 1 bytes @ 0x4A
  2416  00004B                     	ds	16
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           postinc0	equ	0xFEE
  2422                           wreg	equ	0xFE8
  2423                           postdec1	equ	0xFE5
  2424                           fsr1l	equ	0xFE1
  2425                           
  2426 ;;
  2427 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2428 ;;
  2429 ;; *************** function _main *****************
  2430 ;; Defined at:
  2431 ;;		line 17 in file "main.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;		None
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;		None
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;Total ram usage:        0 bytes
  2450 ;; Hardware stack levels required when called:   13
  2451 ;; This function calls:
  2452 ;;		_Test
  2453 ;;		_UI
  2454 ;;		_initLCD
  2455 ;;		_initTime
  2456 ;;		_initUI
  2457 ;;		_logRun
  2458 ;;		_machineConfig
  2459 ;;		_sort
  2460 ;;		_stopSignals
  2461 ;; This function is called by:
  2462 ;;		Startup code after reset
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text0
  2467  00321A                     __ptext0:
  2468                           	opt stack 0
  2469  00321A                     _main:
  2470                           	opt stack 18
  2471                           
  2472                           ;main.c: 18: machineConfig();
  2473                           
  2474                           ;incstack = 0
  2475  00321A  EC8B  F01B         	call	_machineConfig	;wreg free
  2476                           
  2477                           ;main.c: 19: initLCD();
  2478  00321E  ECA5  F01C         	call	_initLCD	;wreg free
  2479                           
  2480                           ;main.c: 20: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2481  003222  0E20               	movlw	32
  2482  003224  0100               	movlb	0	; () banked
  2483  003226  6F80               	movwf	initTime@m& (0+255),b
  2484  003228  0E13               	movlw	19
  2485  00322A  0100               	movlb	0	; () banked
  2486  00322C  6F81               	movwf	initTime@h& (0+255),b
  2487  00322E  0E04               	movlw	4
  2488  003230  0100               	movlb	0	; () banked
  2489  003232  6F82               	movwf	initTime@w& (0+255),b
  2490  003234  0E01               	movlw	1
  2491  003236  0100               	movlb	0	; () banked
  2492  003238  6F83               	movwf	initTime@DD& (0+255),b
  2493  00323A  0E03               	movlw	3
  2494  00323C  0100               	movlb	0	; () banked
  2495  00323E  6F84               	movwf	initTime@MM& (0+255),b
  2496  003240  0E17               	movlw	23
  2497  003242  0100               	movlb	0	; () banked
  2498  003244  6F85               	movwf	initTime@YY& (0+255),b
  2499  003246  0E42               	movlw	66
  2500  003248  EC26  F01F         	call	_initTime
  2501                           
  2502                           ;main.c: 21: initUI();
  2503  00324C  ECF1  F01E         	call	_initUI	;wreg free
  2504                           
  2505                           ;main.c: 22: first = 1;
  2506  003250  0E00               	movlw	0
  2507  003252  0100               	movlb	0	; () banked
  2508  003254  6FE5               	movwf	(_first+1)& (0+255),b
  2509  003256  0E01               	movlw	1
  2510  003258  6FE4               	movwf	_first& (0+255),b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;main.c: 24: machine_state = Testing_state;
  2514  00325A  0E03               	movlw	3
  2515  00325C  0100               	movlb	0	; () banked
  2516  00325E  6FFC               	movwf	_machine_state& (0+255),b
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;main.c: 28: switch(machine_state){
  2520                           
  2521                           ;main.c: 27: while(1){
  2522  003260  D018               	goto	l7327
  2523  003262                     l7309:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;main.c: 30: UI();
  2527  003262  EC09  F000         	call	_UI	;wreg free
  2528                           
  2529                           ;main.c: 31: break;
  2530  003266  D015               	goto	l7327
  2531  003268                     l7311:
  2532                           
  2533                           ;main.c: 33: sort();
  2534  003268  EC15  F01F         	call	_sort	;wreg free
  2535                           
  2536                           ;main.c: 34: break;
  2537  00326C  D012               	goto	l7327
  2538  00326E                     l7313:
  2539                           
  2540                           ;main.c: 36: stopSignals();
  2541  00326E  EC52  F01F         	call	_stopSignals	;wreg free
  2542                           
  2543                           ;main.c: 37: logRun();
  2544  003272  ECA7  F013         	call	_logRun	;wreg free
  2545                           
  2546                           ;main.c: 38: first = 1;
  2547  003276  0E00               	movlw	0
  2548  003278  0100               	movlb	0	; () banked
  2549  00327A  6FE5               	movwf	(_first+1)& (0+255),b
  2550  00327C  0E01               	movlw	1
  2551  00327E  6FE4               	movwf	_first& (0+255),b
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;main.c: 39: UI();
  2555  003280  EC09  F000         	call	_UI	;wreg free
  2556                           
  2557                           ;main.c: 40: break;
  2558  003284  D006               	goto	l7327
  2559  003286                     l7321:
  2560                           
  2561                           ;main.c: 42: Test();
  2562  003286  EC0B  F018         	call	_Test	;wreg free
  2563                           
  2564                           ;main.c: 43: break;
  2565  00328A  D003               	goto	l7327
  2566  00328C                     l7323:
  2567                           
  2568                           ;main.c: 45: stopSignals();
  2569  00328C  EC52  F01F         	call	_stopSignals	;wreg free
  2570  003290                     l478:
  2571  003290  D7FF               	goto	l478
  2572  003292                     l7327:
  2573  003292  0100               	movlb	0	; () banked
  2574  003294  51FC               	movf	_machine_state& (0+255),w,b
  2575                           
  2576                           ; Switch size 1, requested type "space"
  2577                           ; Number of cases is 5, Range of values is 0 to 4
  2578                           ; switch strategies available:
  2579                           ; Name         Instructions Cycles
  2580                           ; simple_byte           16     9 (average)
  2581                           ;	Chosen strategy is simple_byte
  2582  003296  0A00               	xorlw	0	; case 0
  2583  003298  B4D8               	btfsc	status,2,c
  2584  00329A  D7E3               	goto	l7309
  2585  00329C  0A01               	xorlw	1	; case 1
  2586  00329E  B4D8               	btfsc	status,2,c
  2587  0032A0  D7E3               	goto	l7311
  2588  0032A2  0A03               	xorlw	3	; case 2
  2589  0032A4  B4D8               	btfsc	status,2,c
  2590  0032A6  D7E3               	goto	l7313
  2591  0032A8  0A01               	xorlw	1	; case 3
  2592  0032AA  B4D8               	btfsc	status,2,c
  2593  0032AC  D7EC               	goto	l7321
  2594  0032AE  0A07               	xorlw	7	; case 4
  2595  0032B0  B4D8               	btfsc	status,2,c
  2596  0032B2  D7EC               	goto	l7323
  2597                           
  2598                           ; BSR set to: 0
  2599                           
  2600                           ; BSR set to: 0
  2601  0032B4  D7EE               	goto	l7327
  2602  0032B6                     __end_of_main:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           postinc0	equ	0xFEE
  2609                           wreg	equ	0xFE8
  2610                           postdec1	equ	0xFE5
  2611                           fsr1l	equ	0xFE1
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function _stopSignals *****************
  2615 ;; Defined at:
  2616 ;;		line 54 in file "main.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;Total ram usage:        0 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    7
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text1
  2645  003EA4                     __ptext1:
  2646                           	opt stack 0
  2647  003EA4                     _stopSignals:
  2648                           	opt stack 23
  2649                           
  2650                           ;main.c: 55: LATA = 0x00;
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654  003EA4  0E00               	movlw	0
  2655  003EA6  6E89               	movwf	3977,c	;volatile
  2656                           
  2657                           ;main.c: 56: LATB = 0x00;
  2658  003EA8  0E00               	movlw	0
  2659  003EAA  6E8A               	movwf	3978,c	;volatile
  2660                           
  2661                           ;main.c: 57: LATC = 0x00;
  2662  003EAC  0E00               	movlw	0
  2663  003EAE  6E8B               	movwf	3979,c	;volatile
  2664                           
  2665                           ;main.c: 58: LATD = 0x00;
  2666  003EB0  0E00               	movlw	0
  2667  003EB2  6E8C               	movwf	3980,c	;volatile
  2668                           
  2669                           ;main.c: 59: LATE = 0x00;
  2670  003EB4  0E00               	movlw	0
  2671  003EB6  6E8D               	movwf	3981,c	;volatile
  2672  003EB8  0012               	return		;funcret
  2673  003EBA                     __end_of_stopSignals:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           postdec1	equ	0xFE5
  2682                           fsr1l	equ	0xFE1
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _sort *****************
  2686 ;; Defined at:
  2687 ;;		line 55 in file "sort.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;		None
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;Total ram usage:        0 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:   12
  2708 ;; This function calls:
  2709 ;;		_Distribution
  2710 ;;		_ID
  2711 ;;		_Loading
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text2
  2718  003E2A                     __ptext2:
  2719                           	opt stack 0
  2720  003E2A                     _sort:
  2721                           	opt stack 18
  2722                           
  2723                           ;sort.c: 56: if(machine_state == Sorting_state){
  2724                           
  2725                           ;incstack = 0
  2726  003E2A  0100               	movlb	0	; () banked
  2727  003E2C  05FC               	decf	_machine_state& (0+255),w,b
  2728  003E2E  B4D8               	btfsc	status,2,c
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;sort.c: 57: Loading();
  2732  003E30  EC70  F016         	call	_Loading	;wreg free
  2733                           
  2734                           ;sort.c: 58: }
  2735                           ;sort.c: 59: if(machine_state == Sorting_state){
  2736  003E34  0100               	movlb	0	; () banked
  2737  003E36  05FC               	decf	_machine_state& (0+255),w,b
  2738  003E38  B4D8               	btfsc	status,2,c
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;sort.c: 60: ID();
  2742  003E3A  ECDF  F014         	call	_ID	;wreg free
  2743                           
  2744                           ;sort.c: 61: }
  2745                           ;sort.c: 62: if(machine_state == Sorting_state){
  2746  003E3E  0100               	movlb	0	; () banked
  2747  003E40  05FC               	decf	_machine_state& (0+255),w,b
  2748  003E42  A4D8               	btfss	status,2,c
  2749  003E44  0012               	return	
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;sort.c: 63: Distribution();
  2753  003E46  EC45  F014         	call	_Distribution	;wreg free
  2754  003E4A  0012               	return	
  2755  003E4C                     __end_of_sort:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           postinc0	equ	0xFEE
  2762                           wreg	equ	0xFE8
  2763                           postdec1	equ	0xFE5
  2764                           fsr1l	equ	0xFE1
  2765                           status	equ	0xFD8
  2766                           
  2767 ;; *************** function _Loading *****************
  2768 ;; Defined at:
  2769 ;;		line 67 in file "sort.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  addr            2   51[BANK0 ] unsigned short 
  2774 ;;  byte1           1   53[BANK0 ] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;Total ram usage:        5 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:   11
  2791 ;; This function calls:
  2792 ;;		_EEPROM_read
  2793 ;;		_EEPROM_write
  2794 ;;		_getIR
  2795 ;;		_initGlobalVars
  2796 ;;		_initServos
  2797 ;;		_initSortTimer
  2798 ;;		_lcdInst
  2799 ;; This function is called by:
  2800 ;;		_sort
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text3
  2805  002CE0                     __ptext3:
  2806                           	opt stack 0
  2807  002CE0                     _Loading:
  2808                           	opt stack 18
  2809                           
  2810                           ;sort.c: 68: if(first){
  2811                           
  2812                           ;incstack = 0
  2813  002CE0  0100               	movlb	0	; () banked
  2814  002CE2  51E4               	movf	_first& (0+255),w,b
  2815  002CE4  0100               	movlb	0	; () banked
  2816  002CE6  11E5               	iorwf	(_first+1)& (0+255),w,b
  2817  002CE8  B4D8               	btfsc	status,2,c
  2818  002CEA  D033               	goto	l5889
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;sort.c: 69: initGlobalVars();
  2822  002CEC  EC94  F01A         	call	_initGlobalVars	;wreg free
  2823                           
  2824                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2825  002CF0  0E01               	movlw	1
  2826  002CF2  EC83  F01F         	call	_lcdInst
  2827  002CF6  0E68               	movlw	104
  2828  002CF8  0100               	movlb	0	; () banked
  2829  002CFA  6FB1               	movwf	??_Loading& (0+255),b
  2830  002CFC  0EE4               	movlw	228
  2831  002CFE                     u6397:
  2832  002CFE  2EE8               	decfsz	wreg,f,c
  2833  002D00  D7FE               	bra	u6397
  2834  002D02  2FB1               	decfsz	??_Loading& (0+255),f,b
  2835  002D04  D7FC               	bra	u6397
  2836  002D06  F000               	nop	
  2837                           
  2838                           ;sort.c: 71: initSortTimer();
  2839  002D08  EC67  F018         	call	_initSortTimer	;wreg free
  2840                           
  2841                           ;sort.c: 76: sel = EEPROM_read(0);
  2842  002D0C  0E00               	movlw	0
  2843  002D0E  0100               	movlb	0	; () banked
  2844  002D10  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2845  002D12  0E00               	movlw	0
  2846  002D14  6F80               	movwf	EEPROM_read@address& (0+255),b
  2847  002D16  EC46  F01F         	call	_EEPROM_read	;wreg free
  2848  002D1A  0100               	movlb	0	; () banked
  2849  002D1C  6FFD               	movwf	_sel& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2853  002D1E  0100               	movlb	0	; () banked
  2854  002D20  51FD               	movf	_sel& (0+255),w,b
  2855  002D22  0D0B               	mullw	11
  2856  002D24  0E01               	movlw	1
  2857  002D26  24F3               	addwf	prodl,w,c
  2858  002D28  0100               	movlb	0	; () banked
  2859  002D2A  6FB3               	movwf	Loading@addr& (0+255),b
  2860  002D2C  0E00               	movlw	0
  2861  002D2E  20F4               	addwfc	prodh,w,c
  2862  002D30  0100               	movlb	0	; () banked
  2863  002D32  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2867  002D34  0E7F               	movlw	127
  2868  002D36  0100               	movlb	0	; () banked
  2869  002D38  6FB5               	movwf	Loading@byte1& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2873  002D3A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2874  002D3E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2875  002D42  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2876  002D46  ECFC  F015         	call	_EEPROM_write	;wreg free
  2877                           
  2878                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2879  002D4A  8A89               	bsf	3977,5,c	;volatile
  2880                           
  2881                           ;sort.c: 85: initServos();
  2882  002D4C  EC5E  F01B         	call	_initServos	;wreg free
  2883                           
  2884                           ;sort.c: 86: }
  2885  002D50  0012               	return	
  2886  002D52                     l5889:
  2887                           
  2888                           ;sort.c: 87: else{
  2889                           ;sort.c: 90: if(!f_loadingNewCan){
  2890  002D52  0100               	movlb	0	; () banked
  2891  002D54  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  2892  002D56  0100               	movlb	0	; () banked
  2893  002D58  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2894  002D5A  A4D8               	btfss	status,2,c
  2895  002D5C  D017               	goto	l5905
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;sort.c: 92: getIR();
  2899  002D5E  EC32  F01C         	call	_getIR	;wreg free
  2900                           
  2901                           ;sort.c: 94: if(!f_loadingNewCan){
  2902  002D62  0100               	movlb	0	; () banked
  2903  002D64  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  2904  002D66  0100               	movlb	0	; () banked
  2905  002D68  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2906  002D6A  B4D8               	btfsc	status,2,c
  2907  002D6C  0012               	return	
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;sort.c: 98: else{
  2911                           ;sort.c: 99: count_total++;
  2912                           
  2913                           ; BSR set to: 0
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;sort.c: 96: }
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;sort.c: 95: return;
  2920  002D6E  0100               	movlb	0	; () banked
  2921  002D70  4BFE               	infsnz	_count_total& (0+255),f,b
  2922  002D72  2BFF               	incf	(_count_total+1)& (0+255),f,b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;sort.c: 100: if(count_total == 12){
  2926  002D74  0E0C               	movlw	12
  2927  002D76  0100               	movlb	0	; () banked
  2928  002D78  19FE               	xorwf	_count_total& (0+255),w,b
  2929  002D7A  0100               	movlb	0	; () banked
  2930  002D7C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  2931  002D7E  A4D8               	btfss	status,2,c
  2932  002D80  0012               	return	
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;sort.c: 101: f_lastCan = 1;
  2936  002D82  0E00               	movlw	0
  2937  002D84  6E72               	movwf	_f_lastCan+1,c
  2938  002D86  0E01               	movlw	1
  2939  002D88  6E71               	movwf	_f_lastCan,c
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;sort.c: 102: }
  2943                           ;sort.c: 103: }
  2944                           ;sort.c: 104: }
  2945                           
  2946                           ; BSR set to: 0
  2947  002D8A  0012               	return	
  2948  002D8C                     l5905:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;sort.c: 107: else if(f_ID_receive){
  2952  002D8C  506B               	movf	_f_ID_receive,w,c
  2953  002D8E  106C               	iorwf	_f_ID_receive+1,w,c
  2954  002D90  B4D8               	btfsc	status,2,c
  2955  002D92  0012               	return	
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;sort.c: 108: f_loadingNewCan = 0;
  2959  002D94  0E00               	movlw	0
  2960  002D96  0100               	movlb	0	; () banked
  2961  002D98  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2962  002D9A  0E00               	movlw	0
  2963  002D9C  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;sort.c: 109: LATAbits.LATA4 = 1;
  2967  002D9E  8889               	bsf	3977,4,c	;volatile
  2968                           
  2969                           ;sort.c: 110: f_can_coming_to_ID = 1;
  2970  002DA0  0E00               	movlw	0
  2971  002DA2  6E6E               	movwf	_f_can_coming_to_ID+1,c
  2972  002DA4  0E01               	movlw	1
  2973  002DA6  6E6D               	movwf	_f_can_coming_to_ID,c
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  2977  002DA8  0E05               	movlw	5
  2978  002DAA  0100               	movlb	0	; () banked
  2979  002DAC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  2980  002DAE  0E0F               	movlw	15
  2981  002DB0  0100               	movlb	0	; () banked
  2982  002DB2  6FB1               	movwf	??_Loading& (0+255),b
  2983  002DB4  0EF1               	movlw	241
  2984  002DB6                     u6407:
  2985  002DB6  2EE8               	decfsz	wreg,f,c
  2986  002DB8  D7FE               	bra	u6407
  2987  002DBA  2FB1               	decfsz	??_Loading& (0+255),f,b
  2988  002DBC  D7FC               	bra	u6407
  2989  002DBE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  2990  002DC0  D7FA               	bra	u6407
  2991                           
  2992                           ;sort.c: 112: LATAbits.LATA4 = 0;
  2993  002DC2  9889               	bcf	3977,4,c	;volatile
  2994  002DC4  0012               	return	
  2995  002DC6                     __end_of_Loading:
  2996                           	opt stack 0
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function _initSortTimer *****************
  3010 ;; Defined at:
  3011 ;;		line 225 in file "sort.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               2    8[BANK0 ] int 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;Total ram usage:        5 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:   10
  3032 ;; This function calls:
  3033 ;;		_getRTC
  3034 ;; This function is called by:
  3035 ;;		_Loading
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text4
  3040  0030CE                     __ptext4:
  3041                           	opt stack 0
  3042  0030CE                     _initSortTimer:
  3043                           	opt stack 18
  3044                           
  3045                           ;sort.c: 227: getRTC();
  3046                           
  3047                           ;incstack = 0
  3048  0030CE  ECA1  F019         	call	_getRTC	;wreg free
  3049                           
  3050                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  3051  0030D2  0E00               	movlw	0
  3052  0030D4  0100               	movlb	0	; () banked
  3053  0030D6  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3054  0030D8  0E00               	movlw	0
  3055  0030DA  6F88               	movwf	initSortTimer@i& (0+255),b
  3056  0030DC                     l5509:
  3057                           
  3058                           ; BSR set to: 0
  3059  0030DC  0100               	movlb	0	; () banked
  3060  0030DE  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3061  0030E0  D008               	goto	l5513
  3062  0030E2  0100               	movlb	0	; () banked
  3063  0030E4  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3064  0030E6  E140               	bnz	l5519
  3065  0030E8  0E07               	movlw	7
  3066  0030EA  0100               	movlb	0	; () banked
  3067  0030EC  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3068  0030EE  B0D8               	btfsc	status,0,c
  3069  0030F0  D03B               	goto	l5519
  3070  0030F2                     l5513:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3074  0030F2  0E24               	movlw	low _time
  3075  0030F4  0100               	movlb	0	; () banked
  3076  0030F6  2588               	addwf	initSortTimer@i& (0+255),w,b
  3077  0030F8  6ED9               	movwf	fsr2l,c
  3078  0030FA  0E01               	movlw	high _time
  3079  0030FC  0100               	movlb	0	; () banked
  3080  0030FE  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3081  003100  6EDA               	movwf	fsr2h,c
  3082  003102  50DF               	movf	indf2,w,c
  3083  003104  0100               	movlb	0	; () banked
  3084  003106  6F85               	movwf	??_initSortTimer& (0+255),b
  3085  003108  0100               	movlb	0	; () banked
  3086  00310A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3087  00310C  0E0F               	movlw	15
  3088  00310E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3089  003110  0E0F               	movlw	15
  3090  003112  0100               	movlb	0	; () banked
  3091  003114  1785               	andwf	??_initSortTimer& (0+255),f,b
  3092  003116  0100               	movlb	0	; () banked
  3093  003118  5185               	movf	??_initSortTimer& (0+255),w,b
  3094  00311A  0D0A               	mullw	10
  3095  00311C  0E24               	movlw	low _time
  3096  00311E  0100               	movlb	0	; () banked
  3097  003120  2588               	addwf	initSortTimer@i& (0+255),w,b
  3098  003122  6ED9               	movwf	fsr2l,c
  3099  003124  0E01               	movlw	high _time
  3100  003126  0100               	movlb	0	; () banked
  3101  003128  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3102  00312A  6EDA               	movwf	fsr2h,c
  3103  00312C  50DF               	movf	indf2,w,c
  3104  00312E  0B0F               	andlw	15
  3105  003130  0100               	movlb	0	; () banked
  3106  003132  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3107  003134  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3108  003136  50F3               	movf	prodl,w,c
  3109  003138  0100               	movlb	0	; () banked
  3110  00313A  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3111  00313C  50F4               	movf	prodh,w,c
  3112  00313E  0100               	movlb	0	; () banked
  3113  003140  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3114  003142  90D8               	bcf	status,0,c
  3115  003144  0100               	movlb	0	; () banked
  3116  003146  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3117  003148  6ED9               	movwf	fsr2l,c
  3118  00314A  0100               	movlb	0	; () banked
  3119  00314C  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3120  00314E  6EDA               	movwf	fsr2h,c
  3121  003150  0E0E               	movlw	low _startTime
  3122  003152  26D9               	addwf	fsr2l,f,c
  3123  003154  0E01               	movlw	high _startTime
  3124  003156  22DA               	addwfc	fsr2h,f,c
  3125  003158  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3126  00315C  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3127                           
  3128                           ; BSR set to: 0
  3129  003160  0100               	movlb	0	; () banked
  3130  003162  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3131  003164  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3132  003166  D7BA               	goto	l5509
  3133  003168                     l5519:
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;sort.c: 230: }
  3137                           ;sort.c: 232: T0CON = 0b00010111;
  3138  003168  0E17               	movlw	23
  3139  00316A  6ED5               	movwf	4053,c	;volatile
  3140                           
  3141                           ;sort.c: 241: TMR0H = 0b10000101;
  3142  00316C  0E85               	movlw	133
  3143  00316E  6ED7               	movwf	4055,c	;volatile
  3144                           
  3145                           ;sort.c: 242: TMR0L = 0b11101110;
  3146  003170  0EEE               	movlw	238
  3147  003172  6ED6               	movwf	4054,c	;volatile
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;sort.c: 243: TMR0ON = 1;
  3151  003174  8ED5               	bsf	4053,7,c	;volatile
  3152                           
  3153                           ; BSR set to: 0
  3154  003176  0012               	return		;funcret
  3155  003178                     __end_of_initSortTimer:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           postdec1	equ	0xFE5
  3166                           fsr1l	equ	0xFE1
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _initServos *****************
  3175 ;; Defined at:
  3176 ;;		line 245 in file "sort.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        1 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    8
  3197 ;; This function calls:
  3198 ;;		_updateServoPosition
  3199 ;; This function is called by:
  3200 ;;		_Loading
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text5
  3205  0036BC                     __ptext5:
  3206                           	opt stack 0
  3207  0036BC                     _initServos:
  3208                           	opt stack 20
  3209                           
  3210                           ;sort.c: 246: updateServoPosition(1500, 1);
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;incstack = 0
  3214  0036BC  0E05               	movlw	5
  3215  0036BE  0100               	movlb	0	; () banked
  3216  0036C0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3217  0036C2  0EDC               	movlw	220
  3218  0036C4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3219  0036C6  0E00               	movlw	0
  3220  0036C8  0100               	movlb	0	; () banked
  3221  0036CA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3222  0036CC  0E01               	movlw	1
  3223  0036CE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3224  0036D0  EC20  F01A         	call	_updateServoPosition	;wreg free
  3225                           
  3226                           ;sort.c: 247: updateServoPosition(1000, 3);
  3227  0036D4  0E03               	movlw	3
  3228  0036D6  0100               	movlb	0	; () banked
  3229  0036D8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3230  0036DA  0EE8               	movlw	232
  3231  0036DC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3232  0036DE  0E00               	movlw	0
  3233  0036E0  0100               	movlb	0	; () banked
  3234  0036E2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3235  0036E4  0E03               	movlw	3
  3236  0036E6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3237  0036E8  EC20  F01A         	call	_updateServoPosition	;wreg free
  3238                           
  3239                           ;sort.c: 248: TMR1ON = 1;
  3240  0036EC  80CD               	bsf	4045,0,c	;volatile
  3241                           
  3242                           ;sort.c: 249: was_low_1 = 0;
  3243  0036EE  0E00               	movlw	0
  3244  0036F0  6E7A               	movwf	_was_low_1+1,c	;volatile
  3245  0036F2  0E00               	movlw	0
  3246  0036F4  6E79               	movwf	_was_low_1,c	;volatile
  3247                           
  3248                           ;sort.c: 250: _delay((unsigned long)((5)*(32000000/4000.0)));
  3249  0036F6  0E34               	movlw	52
  3250  0036F8  0100               	movlb	0	; () banked
  3251  0036FA  6F88               	movwf	??_initServos& (0+255),b
  3252  0036FC  0EF1               	movlw	241
  3253  0036FE                     u6417:
  3254  0036FE  2EE8               	decfsz	wreg,f,c
  3255  003700  D7FE               	bra	u6417
  3256  003702  2F88               	decfsz	??_initServos& (0+255),f,b
  3257  003704  D7FC               	bra	u6417
  3258  003706  D000               	nop2	
  3259                           
  3260                           ;sort.c: 251: TMR3ON = 1;
  3261  003708  80B1               	bsf	4017,0,c	;volatile
  3262                           
  3263                           ;sort.c: 252: was_low_3 = 0;
  3264  00370A  0E00               	movlw	0
  3265  00370C  6E7C               	movwf	_was_low_3+1,c	;volatile
  3266  00370E  0E00               	movlw	0
  3267  003710  6E7B               	movwf	_was_low_3,c	;volatile
  3268                           
  3269                           ;sort.c: 253: LATCbits.LATC0 = 0;
  3270  003712  908B               	bcf	3979,0,c	;volatile
  3271  003714  0012               	return		;funcret
  3272  003716                     __end_of_initServos:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           prodh	equ	0xFF4
  3279                           prodl	equ	0xFF3
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           fsr1l	equ	0xFE1
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           postdec2	equ	0xFDD
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _initGlobalVars *****************
  3292 ;; Defined at:
  3293 ;;		line 206 in file "sort.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    7
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_Loading
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text6
  3322  003528                     __ptext6:
  3323                           	opt stack 0
  3324  003528                     _initGlobalVars:
  3325                           	opt stack 21
  3326                           
  3327                           ;sort.c: 208: first = 0;
  3328                           
  3329                           ;incstack = 0
  3330  003528  0E00               	movlw	0
  3331  00352A  0100               	movlb	0	; () banked
  3332  00352C  6FE5               	movwf	(_first+1)& (0+255),b
  3333  00352E  0E00               	movlw	0
  3334  003530  6FE4               	movwf	_first& (0+255),b
  3335                           
  3336                           ;sort.c: 211: f_loadingNewCan = 0;
  3337  003532  0E00               	movlw	0
  3338  003534  0100               	movlb	0	; () banked
  3339  003536  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3340  003538  0E00               	movlw	0
  3341  00353A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3342                           
  3343                           ;sort.c: 212: f_lastCan = 0;
  3344  00353C  0E00               	movlw	0
  3345  00353E  6E72               	movwf	_f_lastCan+1,c
  3346  003540  0E00               	movlw	0
  3347  003542  6E71               	movwf	_f_lastCan,c
  3348                           
  3349                           ;sort.c: 213: f_ID_receive = 1;
  3350  003544  0E00               	movlw	0
  3351  003546  6E6C               	movwf	_f_ID_receive+1,c
  3352  003548  0E01               	movlw	1
  3353  00354A  6E6B               	movwf	_f_ID_receive,c
  3354                           
  3355                           ;sort.c: 214: f_can_coming_to_ID = 0;
  3356  00354C  0E00               	movlw	0
  3357  00354E  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3358  003550  0E00               	movlw	0
  3359  003552  6E6D               	movwf	_f_can_coming_to_ID,c
  3360                           
  3361                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  3362  003554  0E00               	movlw	0
  3363  003556  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3364  003558  0E00               	movlw	0
  3365  00355A  6E6F               	movwf	_f_can_coming_to_distribution,c
  3366                           
  3367                           ;sort.c: 216: f_can_distributed = 0;
  3368  00355C  0E00               	movlw	0
  3369  00355E  0101               	movlb	1	; () banked
  3370  003560  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3371  003562  0E00               	movlw	0
  3372  003564  6F2B               	movwf	_f_can_distributed& (0+255),b
  3373                           
  3374                           ;sort.c: 219: count_total = 0;
  3375  003566  0E00               	movlw	0
  3376  003568  0100               	movlb	0	; () banked
  3377  00356A  6FFF               	movwf	(_count_total+1)& (0+255),b
  3378  00356C  0E00               	movlw	0
  3379  00356E  6FFE               	movwf	_count_total& (0+255),b
  3380                           
  3381                           ;sort.c: 220: count_pop_no_tab = 0;
  3382  003570  0E00               	movlw	0
  3383  003572  6E62               	movwf	_count_pop_no_tab+1,c
  3384  003574  0E00               	movlw	0
  3385  003576  6E61               	movwf	_count_pop_no_tab,c
  3386                           
  3387                           ;sort.c: 221: count_pop_w_tab = 0;
  3388  003578  0E00               	movlw	0
  3389  00357A  6E64               	movwf	_count_pop_w_tab+1,c
  3390  00357C  0E00               	movlw	0
  3391  00357E  6E63               	movwf	_count_pop_w_tab,c
  3392                           
  3393                           ;sort.c: 222: count_can_w_lab = 0;
  3394  003580  0E00               	movlw	0
  3395  003582  6E60               	movwf	_count_can_w_lab+1,c
  3396  003584  0E00               	movlw	0
  3397  003586  6E5F               	movwf	_count_can_w_lab,c
  3398                           
  3399                           ;sort.c: 223: count_can_no_lab = 0;
  3400  003588  0E00               	movlw	0
  3401  00358A  6E5E               	movwf	_count_can_no_lab+1,c
  3402  00358C  0E00               	movlw	0
  3403  00358E  6E5D               	movwf	_count_can_no_lab,c
  3404                           
  3405                           ; BSR set to: 0
  3406  003590  0012               	return		;funcret
  3407  003592                     __end_of_initGlobalVars:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           postinc0	equ	0xFEE
  3416                           wreg	equ	0xFE8
  3417                           postdec1	equ	0xFE5
  3418                           fsr1l	equ	0xFE1
  3419                           indf2	equ	0xFDF
  3420                           postinc2	equ	0xFDE
  3421                           postdec2	equ	0xFDD
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _getIR *****************
  3427 ;; Defined at:
  3428 ;;		line 282 in file "sort.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    9
  3449 ;; This function calls:
  3450 ;;		_readIR
  3451 ;; This function is called by:
  3452 ;;		_Loading
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text7
  3457  003864                     __ptext7:
  3458                           	opt stack 0
  3459  003864                     _getIR:
  3460                           	opt stack 19
  3461                           
  3462                           ;sort.c: 283: readIR();
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;incstack = 0
  3466  003864  EC7F  F01C         	call	_readIR	;wreg free
  3467                           
  3468                           ;sort.c: 284: if(IR_signal==1){
  3469  003868  0100               	movlb	0	; () banked
  3470  00386A  05DA               	decf	_IR_signal& (0+255),w,b
  3471  00386C  0100               	movlb	0	; () banked
  3472  00386E  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3473  003870  A4D8               	btfss	status,2,c
  3474  003872  0012               	return	
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;sort.c: 285: _delay((unsigned long)((100)*(32000000/4000.0)));
  3478  003874  0E05               	movlw	5
  3479  003876  0100               	movlb	0	; () banked
  3480  003878  6F87               	movwf	(??_getIR+1)& (0+255),b
  3481  00387A  0E0F               	movlw	15
  3482  00387C  0100               	movlb	0	; () banked
  3483  00387E  6F86               	movwf	??_getIR& (0+255),b
  3484  003880  0EF1               	movlw	241
  3485  003882                     u6427:
  3486  003882  2EE8               	decfsz	wreg,f,c
  3487  003884  D7FE               	bra	u6427
  3488  003886  2F86               	decfsz	??_getIR& (0+255),f,b
  3489  003888  D7FC               	bra	u6427
  3490  00388A  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3491  00388C  D7FA               	bra	u6427
  3492                           
  3493                           ;sort.c: 286: if(IR_signal==1){
  3494  00388E  0100               	movlb	0	; () banked
  3495  003890  05DA               	decf	_IR_signal& (0+255),w,b
  3496  003892  0100               	movlb	0	; () banked
  3497  003894  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3498  003896  A4D8               	btfss	status,2,c
  3499  003898  D006               	goto	l5599
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;sort.c: 287: f_loadingNewCan = 1;
  3503  00389A  0E00               	movlw	0
  3504  00389C  0100               	movlb	0	; () banked
  3505  00389E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3506  0038A0  0E01               	movlw	1
  3507  0038A2  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3508                           
  3509                           ;sort.c: 288: }
  3510  0038A4  0012               	return	
  3511  0038A6                     l5599:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;sort.c: 289: else{
  3515                           ;sort.c: 290: f_loadingNewCan = 0;
  3516  0038A6  0E00               	movlw	0
  3517  0038A8  0100               	movlb	0	; () banked
  3518  0038AA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3519  0038AC  0E00               	movlw	0
  3520  0038AE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523  0038B0  0012               	return	
  3524  0038B2                     __end_of_getIR:
  3525                           	opt stack 0
  3526                           tblptru	equ	0xFF8
  3527                           tblptrh	equ	0xFF7
  3528                           tblptrl	equ	0xFF6
  3529                           tablat	equ	0xFF5
  3530                           prodh	equ	0xFF4
  3531                           prodl	equ	0xFF3
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           postdec1	equ	0xFE5
  3535                           fsr1l	equ	0xFE1
  3536                           indf2	equ	0xFDF
  3537                           postinc2	equ	0xFDE
  3538                           postdec2	equ	0xFDD
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _ID *****************
  3544 ;; Defined at:
  3545 ;;		line 116 in file "sort.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      void 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:        8 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    9
  3566 ;; This function calls:
  3567 ;;		_readMAG
  3568 ;; This function is called by:
  3569 ;;		_sort
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text8
  3574  0029BE                     __ptext8:
  3575                           	opt stack 0
  3576  0029BE                     _ID:
  3577                           	opt stack 20
  3578                           
  3579                           ;sort.c: 117: if(f_can_coming_to_ID){
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;incstack = 0
  3583  0029BE  506D               	movf	_f_can_coming_to_ID,w,c
  3584  0029C0  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3585  0029C2  B4D8               	btfsc	status,2,c
  3586  0029C4  0012               	return	
  3587                           
  3588                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3589  0029C6  0E15               	movlw	21
  3590  0029C8  0100               	movlb	0	; () banked
  3591  0029CA  6F87               	movwf	(??_ID+1)& (0+255),b
  3592  0029CC  0E4B               	movlw	75
  3593  0029CE  0100               	movlb	0	; () banked
  3594  0029D0  6F86               	movwf	??_ID& (0+255),b
  3595  0029D2  0EBE               	movlw	190
  3596  0029D4                     u6437:
  3597  0029D4  2EE8               	decfsz	wreg,f,c
  3598  0029D6  D7FE               	bra	u6437
  3599  0029D8  2F86               	decfsz	??_ID& (0+255),f,b
  3600  0029DA  D7FC               	bra	u6437
  3601  0029DC  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3602  0029DE  D7FA               	bra	u6437
  3603  0029E0  F000               	nop	
  3604                           
  3605                           ;sort.c: 124: int sensor_outputs[3];
  3606                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3607  0029E2  A480               	btfss	3968,2,c	;volatile
  3608  0029E4  D004               	goto	u4520
  3609  0029E6  0100               	movlb	0	; () banked
  3610  0029E8  6B86               	clrf	??_ID& (0+255),b
  3611  0029EA  2B86               	incf	??_ID& (0+255),f,b
  3612  0029EC  D002               	goto	u4528
  3613  0029EE                     u4520:
  3614  0029EE  0100               	movlb	0	; () banked
  3615  0029F0  6B86               	clrf	??_ID& (0+255),b
  3616  0029F2                     u4528:
  3617  0029F2  0100               	movlb	0	; () banked
  3618  0029F4  5186               	movf	??_ID& (0+255),w,b
  3619  0029F6  0100               	movlb	0	; () banked
  3620  0029F8  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3621  0029FA  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;sort.c: 130: if(!sensor_outputs[0]){
  3625  0029FC  0100               	movlb	0	; () banked
  3626  0029FE  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3627  002A00  0100               	movlb	0	; () banked
  3628  002A02  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3629  002A04  A4D8               	btfss	status,2,c
  3630  002A06  D028               	goto	l5937
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;sort.c: 131: readMAG();
  3634  002A08  EC59  F01C         	call	_readMAG	;wreg free
  3635                           
  3636                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3637  002A0C  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3638  002A10  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3639                           
  3640                           ;sort.c: 133: if(!sensor_outputs[1]){
  3641  002A14  0100               	movlb	0	; () banked
  3642  002A16  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3643  002A18  0100               	movlb	0	; () banked
  3644  002A1A  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3645  002A1C  A4D8               	btfss	status,2,c
  3646  002A1E  D01C               	goto	l5937
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3650  002A20  8689               	bsf	3977,3,c	;volatile
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3654  002A22  0E05               	movlw	5
  3655  002A24  0100               	movlb	0	; () banked
  3656  002A26  6F87               	movwf	(??_ID+1)& (0+255),b
  3657  002A28  0E0F               	movlw	15
  3658  002A2A  0100               	movlb	0	; () banked
  3659  002A2C  6F86               	movwf	??_ID& (0+255),b
  3660  002A2E  0EF1               	movlw	241
  3661  002A30                     u6447:
  3662  002A30  2EE8               	decfsz	wreg,f,c
  3663  002A32  D7FE               	bra	u6447
  3664  002A34  2F86               	decfsz	??_ID& (0+255),f,b
  3665  002A36  D7FC               	bra	u6447
  3666  002A38  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3667  002A3A  D7FA               	bra	u6447
  3668                           
  3669                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3670  002A3C  A480               	btfss	3968,2,c	;volatile
  3671  002A3E  D004               	goto	u4550
  3672  002A40  0100               	movlb	0	; () banked
  3673  002A42  6B86               	clrf	??_ID& (0+255),b
  3674  002A44  2B86               	incf	??_ID& (0+255),f,b
  3675  002A46  D002               	goto	u4558
  3676  002A48                     u4550:
  3677  002A48  0100               	movlb	0	; () banked
  3678  002A4A  6B86               	clrf	??_ID& (0+255),b
  3679  002A4C                     u4558:
  3680  002A4C  0100               	movlb	0	; () banked
  3681  002A4E  5186               	movf	??_ID& (0+255),w,b
  3682  002A50  0100               	movlb	0	; () banked
  3683  002A52  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3684  002A54  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3688  002A56  9689               	bcf	3977,3,c	;volatile
  3689  002A58                     l5937:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;sort.c: 139: }
  3693                           ;sort.c: 140: }
  3694                           ;sort.c: 143: if(!sensor_outputs[0]){
  3695  002A58  0100               	movlb	0	; () banked
  3696  002A5A  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3697  002A5C  0100               	movlb	0	; () banked
  3698  002A5E  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3699  002A60  A4D8               	btfss	status,2,c
  3700  002A62  D01E               	goto	l5955
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;sort.c: 144: if(!sensor_outputs[1]){
  3704  002A64  0100               	movlb	0	; () banked
  3705  002A66  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3706  002A68  0100               	movlb	0	; () banked
  3707  002A6A  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3708  002A6C  A4D8               	btfss	status,2,c
  3709  002A6E  D012               	goto	l5951
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;sort.c: 145: if(!sensor_outputs[2]){
  3713  002A70  0100               	movlb	0	; () banked
  3714  002A72  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3715  002A74  0100               	movlb	0	; () banked
  3716  002A76  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3717  002A78  A4D8               	btfss	status,2,c
  3718  002A7A  D006               	goto	l5947
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;sort.c: 146: count_pop_no_tab++;
  3722  002A7C  4A61               	infsnz	_count_pop_no_tab,f,c
  3723  002A7E  2A62               	incf	_count_pop_no_tab+1,f,c
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;sort.c: 147: cur_can = 0;
  3727  002A80  0E00               	movlw	0
  3728  002A82  6E66               	movwf	_cur_can+1,c
  3729  002A84  0E00               	movlw	0
  3730  002A86  D011               	goto	L3
  3731  002A88                     l5947:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;sort.c: 149: else{
  3735                           ;sort.c: 150: count_pop_w_tab++;
  3736  002A88  4A63               	infsnz	_count_pop_w_tab,f,c
  3737  002A8A  2A64               	incf	_count_pop_w_tab+1,f,c
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;sort.c: 151: cur_can = 1;
  3741  002A8C  0E00               	movlw	0
  3742  002A8E  6E66               	movwf	_cur_can+1,c
  3743  002A90  0E01               	movlw	1
  3744  002A92  D00B               	goto	L3
  3745  002A94                     l5951:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;sort.c: 154: else{
  3749                           ;sort.c: 155: count_can_w_lab++;
  3750  002A94  4A5F               	infsnz	_count_can_w_lab,f,c
  3751  002A96  2A60               	incf	_count_can_w_lab+1,f,c
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;sort.c: 156: cur_can = 2;
  3755  002A98  0E00               	movlw	0
  3756  002A9A  6E66               	movwf	_cur_can+1,c
  3757  002A9C  0E02               	movlw	2
  3758  002A9E  D005               	goto	L3
  3759  002AA0                     l5955:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;sort.c: 159: else{
  3763                           ;sort.c: 160: count_can_no_lab++;
  3764  002AA0  4A5D               	infsnz	_count_can_no_lab,f,c
  3765  002AA2  2A5E               	incf	_count_can_no_lab+1,f,c
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;sort.c: 161: cur_can = 3;
  3769  002AA4  0E00               	movlw	0
  3770  002AA6  6E66               	movwf	_cur_can+1,c
  3771  002AA8  0E03               	movlw	3
  3772  002AAA                     L3:
  3773  002AAA  6E65               	movwf	_cur_can,c
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;sort.c: 162: }
  3777                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3778                           
  3779                           ; BSR set to: 0
  3780  002AAC  808B               	bsf	3979,0,c	;volatile
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3784  002AAE  0E00               	movlw	0
  3785  002AB0  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3786  002AB2  0E01               	movlw	1
  3787  002AB4  6E6F               	movwf	_f_can_coming_to_distribution,c
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3791  002AB6  0E15               	movlw	21
  3792  002AB8  0100               	movlb	0	; () banked
  3793  002ABA  6F87               	movwf	(??_ID+1)& (0+255),b
  3794  002ABC  0E4B               	movlw	75
  3795  002ABE  0100               	movlb	0	; () banked
  3796  002AC0  6F86               	movwf	??_ID& (0+255),b
  3797  002AC2  0EBE               	movlw	190
  3798  002AC4                     u6457:
  3799  002AC4  2EE8               	decfsz	wreg,f,c
  3800  002AC6  D7FE               	bra	u6457
  3801  002AC8  2F86               	decfsz	??_ID& (0+255),f,b
  3802  002ACA  D7FC               	bra	u6457
  3803  002ACC  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3804  002ACE  D7FA               	bra	u6457
  3805  002AD0  F000               	nop	
  3806                           
  3807                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3808  002AD2  908B               	bcf	3979,0,c	;volatile
  3809                           
  3810                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3811  002AD4  0E00               	movlw	0
  3812  002AD6  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3813  002AD8  0E00               	movlw	0
  3814  002ADA  6E6D               	movwf	_f_can_coming_to_ID,c
  3815  002ADC  0012               	return	
  3816  002ADE                     __end_of_ID:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           postdec1	equ	0xFE5
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           postdec2	equ	0xFDD
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _Distribution *****************
  3836 ;; Defined at:
  3837 ;;		line 172 in file "sort.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;		None
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;		None
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        2 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    8
  3858 ;; This function calls:
  3859 ;;		_updateServoPosition
  3860 ;; This function is called by:
  3861 ;;		_sort
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text9
  3866  00288A                     __ptext9:
  3867                           	opt stack 0
  3868  00288A                     _Distribution:
  3869                           	opt stack 21
  3870                           
  3871                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3872                           
  3873                           ;incstack = 0
  3874  00288A  506F               	movf	_f_can_coming_to_distribution,w,c
  3875  00288C  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  3876  00288E  B4D8               	btfsc	status,2,c
  3877  002890  0012               	return	
  3878  002892  D034               	goto	l5983
  3879  002894                     l5973:
  3880                           
  3881                           ;sort.c: 178: updateServoPosition(1000, 1);
  3882  002894  0E03               	movlw	3
  3883  002896  0100               	movlb	0	; () banked
  3884  002898  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3885  00289A  0EE8               	movlw	232
  3886  00289C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3887  00289E  0E00               	movlw	0
  3888  0028A0  0100               	movlb	0	; () banked
  3889  0028A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3890  0028A4  0E01               	movlw	1
  3891  0028A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3892  0028A8  EC20  F01A         	call	_updateServoPosition	;wreg free
  3893                           
  3894                           ;sort.c: 179: break;
  3895  0028AC  D03E               	goto	l5985
  3896  0028AE                     l5975:
  3897                           
  3898                           ;sort.c: 181: updateServoPosition(1333, 1);
  3899  0028AE  0E05               	movlw	5
  3900  0028B0  0100               	movlb	0	; () banked
  3901  0028B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3902  0028B4  0E35               	movlw	53
  3903  0028B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3904  0028B8  0E00               	movlw	0
  3905  0028BA  0100               	movlb	0	; () banked
  3906  0028BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3907  0028BE  0E01               	movlw	1
  3908  0028C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3909  0028C2  EC20  F01A         	call	_updateServoPosition	;wreg free
  3910                           
  3911                           ;sort.c: 182: break;
  3912  0028C6  D031               	goto	l5985
  3913  0028C8                     l5977:
  3914                           
  3915                           ;sort.c: 184: updateServoPosition(1666, 1);
  3916  0028C8  0E06               	movlw	6
  3917  0028CA  0100               	movlb	0	; () banked
  3918  0028CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3919  0028CE  0E82               	movlw	130
  3920  0028D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3921  0028D2  0E00               	movlw	0
  3922  0028D4  0100               	movlb	0	; () banked
  3923  0028D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3924  0028D8  0E01               	movlw	1
  3925  0028DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3926  0028DC  EC20  F01A         	call	_updateServoPosition	;wreg free
  3927                           
  3928                           ;sort.c: 185: break;
  3929  0028E0  D024               	goto	l5985
  3930  0028E2                     l5979:
  3931                           
  3932                           ;sort.c: 187: updateServoPosition(2000, 1);
  3933  0028E2  0E07               	movlw	7
  3934  0028E4  0100               	movlb	0	; () banked
  3935  0028E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3936  0028E8  0ED0               	movlw	208
  3937  0028EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3938  0028EC  0E00               	movlw	0
  3939  0028EE  0100               	movlb	0	; () banked
  3940  0028F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3941  0028F2  0E01               	movlw	1
  3942  0028F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3943  0028F6  EC20  F01A         	call	_updateServoPosition	;wreg free
  3944                           
  3945                           ;sort.c: 191: }
  3946                           
  3947                           ;sort.c: 190: break;
  3948                           
  3949                           ;sort.c: 189: default:
  3950                           
  3951                           ;sort.c: 188: break;
  3952  0028FA  D017               	goto	l5985
  3953  0028FC                     l5983:
  3954  0028FC  C065  F088         	movff	_cur_can,??_Distribution
  3955  002900  C066  F089         	movff	_cur_can+1,??_Distribution+1
  3956                           
  3957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3958                           ; Switch size 1, requested type "space"
  3959                           ; Number of cases is 1, Range of values is 0 to 0
  3960                           ; switch strategies available:
  3961                           ; Name         Instructions Cycles
  3962                           ; simple_byte            4     3 (average)
  3963                           ;	Chosen strategy is simple_byte
  3964  002904  0100               	movlb	0	; () banked
  3965  002906  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3966  002908  0A00               	xorlw	0	; case 0
  3967  00290A  A4D8               	btfss	status,2,c
  3968  00290C  D00E               	goto	l5985
  3969                           
  3970                           ; BSR set to: 0
  3971                           ; Switch size 1, requested type "space"
  3972                           ; Number of cases is 4, Range of values is 0 to 3
  3973                           ; switch strategies available:
  3974                           ; Name         Instructions Cycles
  3975                           ; simple_byte           13     7 (average)
  3976                           ;	Chosen strategy is simple_byte
  3977  00290E  0100               	movlb	0	; () banked
  3978  002910  5188               	movf	??_Distribution& (0+255),w,b
  3979  002912  0A00               	xorlw	0	; case 0
  3980  002914  B4D8               	btfsc	status,2,c
  3981  002916  D7BE               	goto	l5973
  3982  002918  0A01               	xorlw	1	; case 1
  3983  00291A  B4D8               	btfsc	status,2,c
  3984  00291C  D7C8               	goto	l5975
  3985  00291E  0A03               	xorlw	3	; case 2
  3986  002920  B4D8               	btfsc	status,2,c
  3987  002922  D7D2               	goto	l5977
  3988  002924  0A01               	xorlw	1	; case 3
  3989  002926  B4D8               	btfsc	status,2,c
  3990  002928  D7DC               	goto	l5979
  3991  00292A                     l5985:
  3992                           
  3993                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  3994  00292A  0E15               	movlw	21
  3995  00292C  0100               	movlb	0	; () banked
  3996  00292E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3997  002930  0E4B               	movlw	75
  3998  002932  0100               	movlb	0	; () banked
  3999  002934  6F88               	movwf	??_Distribution& (0+255),b
  4000  002936  0EBE               	movlw	190
  4001  002938                     u6467:
  4002  002938  2EE8               	decfsz	wreg,f,c
  4003  00293A  D7FE               	bra	u6467
  4004  00293C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4005  00293E  D7FC               	bra	u6467
  4006  002940  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4007  002942  D7FA               	bra	u6467
  4008  002944  F000               	nop	
  4009                           
  4010                           ;sort.c: 195: updateServoPosition(1500, 3);
  4011  002946  0E05               	movlw	5
  4012  002948  0100               	movlb	0	; () banked
  4013  00294A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4014  00294C  0EDC               	movlw	220
  4015  00294E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4016  002950  0E00               	movlw	0
  4017  002952  0100               	movlb	0	; () banked
  4018  002954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4019  002956  0E03               	movlw	3
  4020  002958  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4021  00295A  EC20  F01A         	call	_updateServoPosition	;wreg free
  4022                           
  4023                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4024  00295E  0E15               	movlw	21
  4025  002960  0100               	movlb	0	; () banked
  4026  002962  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4027  002964  0E4B               	movlw	75
  4028  002966  0100               	movlb	0	; () banked
  4029  002968  6F88               	movwf	??_Distribution& (0+255),b
  4030  00296A  0EBE               	movlw	190
  4031  00296C                     u6477:
  4032  00296C  2EE8               	decfsz	wreg,f,c
  4033  00296E  D7FE               	bra	u6477
  4034  002970  2F88               	decfsz	??_Distribution& (0+255),f,b
  4035  002972  D7FC               	bra	u6477
  4036  002974  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4037  002976  D7FA               	bra	u6477
  4038  002978  F000               	nop	
  4039                           
  4040                           ;sort.c: 199: updateServoPosition(1500, 1);
  4041  00297A  0E05               	movlw	5
  4042  00297C  0100               	movlb	0	; () banked
  4043  00297E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4044  002980  0EDC               	movlw	220
  4045  002982  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4046  002984  0E00               	movlw	0
  4047  002986  0100               	movlb	0	; () banked
  4048  002988  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4049  00298A  0E01               	movlw	1
  4050  00298C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4051  00298E  EC20  F01A         	call	_updateServoPosition	;wreg free
  4052                           
  4053                           ;sort.c: 200: updateServoPosition(1000, 3);
  4054  002992  0E03               	movlw	3
  4055  002994  0100               	movlb	0	; () banked
  4056  002996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4057  002998  0EE8               	movlw	232
  4058  00299A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4059  00299C  0E00               	movlw	0
  4060  00299E  0100               	movlb	0	; () banked
  4061  0029A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4062  0029A2  0E03               	movlw	3
  4063  0029A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4064  0029A6  EC20  F01A         	call	_updateServoPosition	;wreg free
  4065                           
  4066                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4067  0029AA  0E00               	movlw	0
  4068  0029AC  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4069  0029AE  0E00               	movlw	0
  4070  0029B0  6E6F               	movwf	_f_can_coming_to_distribution,c
  4071                           
  4072                           ;sort.c: 202: f_can_distributed = 1;
  4073  0029B2  0E00               	movlw	0
  4074  0029B4  0101               	movlb	1	; () banked
  4075  0029B6  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4076  0029B8  0E01               	movlw	1
  4077  0029BA  6F2B               	movwf	_f_can_distributed& (0+255),b
  4078  0029BC  0012               	return	
  4079  0029BE                     __end_of_Distribution:
  4080                           	opt stack 0
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           postdec1	equ	0xFE5
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _machineConfig *****************
  4099 ;; Defined at:
  4100 ;;		line 15 in file "MachineConfig.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    7
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text10
  4129  003716                     __ptext10:
  4130                           	opt stack 0
  4131  003716                     _machineConfig:
  4132                           	opt stack 23
  4133                           
  4134                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4135                           
  4136                           ;incstack = 0
  4137  003716  0EF0               	movlw	240
  4138  003718  6ED3               	movwf	4051,c	;volatile
  4139                           
  4140                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4141  00371A  8C9B               	bsf	3995,6,c	;volatile
  4142                           
  4143                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4144  00371C  0E47               	movlw	71
  4145  00371E  6E92               	movwf	3986,c	;volatile
  4146                           
  4147                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4148  003720  0EF2               	movlw	242
  4149  003722  6E93               	movwf	3987,c	;volatile
  4150                           
  4151                           ;MachineConfig.c: 27: TRISC = 0x00;
  4152  003724  0E00               	movlw	0
  4153  003726  6E94               	movwf	3988,c	;volatile
  4154                           
  4155                           ;MachineConfig.c: 31: TRISD = 0x00;
  4156  003728  0E00               	movlw	0
  4157  00372A  6E95               	movwf	3989,c	;volatile
  4158                           
  4159                           ;MachineConfig.c: 34: TRISE = 0x00;
  4160  00372C  0E00               	movlw	0
  4161  00372E  6E96               	movwf	3990,c	;volatile
  4162                           
  4163                           ;MachineConfig.c: 37: LATA = 0x00;
  4164  003730  0E00               	movlw	0
  4165  003732  6E89               	movwf	3977,c	;volatile
  4166                           
  4167                           ;MachineConfig.c: 38: LATB = 0x00;
  4168  003734  0E00               	movlw	0
  4169  003736  6E8A               	movwf	3978,c	;volatile
  4170                           
  4171                           ;MachineConfig.c: 39: LATC = 0x00;
  4172  003738  0E00               	movlw	0
  4173  00373A  6E8B               	movwf	3979,c	;volatile
  4174                           
  4175                           ;MachineConfig.c: 40: LATD = 0x00;
  4176  00373C  0E00               	movlw	0
  4177  00373E  6E8C               	movwf	3980,c	;volatile
  4178                           
  4179                           ;MachineConfig.c: 41: LATE = 0x00;
  4180  003740  0E00               	movlw	0
  4181  003742  6E8D               	movwf	3981,c	;volatile
  4182                           
  4183                           ;MachineConfig.c: 43: nRBPU = 0;
  4184  003744  9EF1               	bcf	intcon2,7,c	;volatile
  4185                           
  4186                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4187  003746  0E00               	movlw	0
  4188  003748  6EC2               	movwf	4034,c	;volatile
  4189                           
  4190                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4191  00374A  0E0D               	movlw	13
  4192  00374C  6EC1               	movwf	4033,c	;volatile
  4193                           
  4194                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4195  00374E  0E00               	movlw	0
  4196  003750  6EB5               	movwf	4021,c	;volatile
  4197                           
  4198                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4199  003752  96B4               	bcf	4020,3,c	;volatile
  4200                           
  4201                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4202  003754  0EB1               	movlw	177
  4203  003756  6EC0               	movwf	4032,c	;volatile
  4204                           
  4205                           ;MachineConfig.c: 55: INT1IE = 1;
  4206  003758  86F0               	bsf	intcon3,3,c	;volatile
  4207                           
  4208                           ;MachineConfig.c: 57: TMR0IE = 1;
  4209  00375A  8AF2               	bsf	intcon,5,c	;volatile
  4210                           
  4211                           ;MachineConfig.c: 58: TMR1IE = 1;
  4212  00375C  809D               	bsf	3997,0,c	;volatile
  4213                           
  4214                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4215  00375E  0EB0               	movlw	176
  4216  003760  6ECD               	movwf	4045,c	;volatile
  4217                           
  4218                           ;MachineConfig.c: 60: TMR2IE = 1;
  4219  003762  829D               	bsf	3997,1,c	;volatile
  4220                           
  4221                           ;MachineConfig.c: 61: TMR3IE = 1;
  4222  003764  82A0               	bsf	4000,1,c	;volatile
  4223                           
  4224                           ;MachineConfig.c: 62: PEIE = 1;
  4225  003766  8CF2               	bsf	intcon,6,c	;volatile
  4226                           
  4227                           ;MachineConfig.c: 63: ADIE = 0;
  4228  003768  9C9D               	bcf	3997,6,c	;volatile
  4229                           
  4230                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4231  00376A  9EF2               	bcf	intcon,7,c	;volatile
  4232  00376C  0012               	return		;funcret
  4233  00376E                     __end_of_machineConfig:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           intcon3	equ	0xFF0
  4244                           postinc0	equ	0xFEE
  4245                           wreg	equ	0xFE8
  4246                           postdec1	equ	0xFE5
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _logRun *****************
  4256 ;; Defined at:
  4257 ;;		line 84 in file "EEPROM.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4262 ;;  i               2   55[BANK0 ] int 
  4263 ;;  num             1   49[BANK0 ] unsigned char 
  4264 ;;  addr            2   57[BANK0 ] unsigned short 
  4265 ;;  byte11          1   54[BANK0 ] unsigned char 
  4266 ;;  byte3           1   52[BANK0 ] unsigned char 
  4267 ;;  byte2           1   51[BANK0 ] unsigned char 
  4268 ;;  byte1           1   50[BANK0 ] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;Total ram usage:       10 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:   11
  4285 ;; This function calls:
  4286 ;;		_EEPROM_read
  4287 ;;		_EEPROM_write
  4288 ;; This function is called by:
  4289 ;;		_main
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text11
  4294  00274E                     __ptext11:
  4295                           	opt stack 0
  4296  00274E                     _logRun:
  4297                           	opt stack 19
  4298                           
  4299                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4300                           
  4301                           ;incstack = 0
  4302  00274E  0E00               	movlw	0
  4303  002750  0100               	movlb	0	; () banked
  4304  002752  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4305  002754  0E00               	movlw	0
  4306  002756  6F80               	movwf	EEPROM_read@address& (0+255),b
  4307  002758  EC46  F01F         	call	_EEPROM_read	;wreg free
  4308  00275C  0100               	movlb	0	; () banked
  4309  00275E  6FFD               	movwf	_sel& (0+255),b
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4313  002760  0100               	movlb	0	; () banked
  4314  002762  51FD               	movf	_sel& (0+255),w,b
  4315  002764  0D0B               	mullw	11
  4316  002766  0E01               	movlw	1
  4317  002768  24F3               	addwf	prodl,w,c
  4318  00276A  0100               	movlb	0	; () banked
  4319  00276C  6FB9               	movwf	logRun@addr& (0+255),b
  4320  00276E  0E00               	movlw	0
  4321  002770  20F4               	addwfc	prodh,w,c
  4322  002772  0100               	movlb	0	; () banked
  4323  002774  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;EEPROM.c: 101: if (sel < 3){
  4327  002776  0E03               	movlw	3
  4328  002778  0100               	movlb	0	; () banked
  4329  00277A  61FD               	cpfslt	_sel& (0+255),b
  4330  00277C  D00E               	goto	l7185
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4334  00277E  0100               	movlb	0	; () banked
  4335  002780  29FD               	incf	_sel& (0+255),w,b
  4336  002782  0100               	movlb	0	; () banked
  4337  002784  6FB1               	movwf	logRun@num& (0+255),b
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4341  002786  0E00               	movlw	0
  4342  002788  0100               	movlb	0	; () banked
  4343  00278A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4344  00278C  0E00               	movlw	0
  4345  00278E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4346  002790  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4347  002794  ECFC  F015         	call	_EEPROM_write	;wreg free
  4348                           
  4349                           ;EEPROM.c: 104: }
  4350  002798  D00A               	goto	l7187
  4351  00279A                     l7185:
  4352                           
  4353                           ;EEPROM.c: 105: else{
  4354                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4355  00279A  0E00               	movlw	0
  4356  00279C  0100               	movlb	0	; () banked
  4357  00279E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4358  0027A0  0E00               	movlw	0
  4359  0027A2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4360  0027A4  0E00               	movlw	0
  4361  0027A6  0100               	movlb	0	; () banked
  4362  0027A8  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4363  0027AA  ECFC  F015         	call	_EEPROM_write	;wreg free
  4364  0027AE                     l7187:
  4365                           
  4366                           ;EEPROM.c: 107: }
  4367                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4368  0027AE  0100               	movlb	0	; () banked
  4369  0027B0  51FE               	movf	_count_total& (0+255),w,b
  4370  0027B2  0980               	iorlw	128
  4371  0027B4  0100               	movlb	0	; () banked
  4372  0027B6  6FB2               	movwf	logRun@byte1& (0+255),b
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4376  0027B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4377  0027BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4378  0027C0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4379  0027C4  ECFC  F015         	call	_EEPROM_write	;wreg free
  4380                           
  4381                           ;EEPROM.c: 112: addr++;
  4382  0027C8  0100               	movlb	0	; () banked
  4383  0027CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4384  0027CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4388  0027CE  3861               	swapf	_count_pop_no_tab,w,c
  4389  0027D0  0BF0               	andlw	240
  4390  0027D2  1063               	iorwf	_count_pop_w_tab,w,c
  4391  0027D4  0100               	movlb	0	; () banked
  4392  0027D6  6FB3               	movwf	logRun@byte2& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4396  0027D8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4397  0027DC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4398  0027E0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4399  0027E4  ECFC  F015         	call	_EEPROM_write	;wreg free
  4400                           
  4401                           ;EEPROM.c: 117: addr++;
  4402  0027E8  0100               	movlb	0	; () banked
  4403  0027EA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4404  0027EC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4408  0027EE  385F               	swapf	_count_can_w_lab,w,c
  4409  0027F0  0BF0               	andlw	240
  4410  0027F2  105D               	iorwf	_count_can_no_lab,w,c
  4411  0027F4  0100               	movlb	0	; () banked
  4412  0027F6  6FB4               	movwf	logRun@byte3& (0+255),b
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4416  0027F8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4417  0027FC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4418  002800  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4419  002804  ECFC  F015         	call	_EEPROM_write	;wreg free
  4420                           
  4421                           ;EEPROM.c: 120: addr++;
  4422  002808  0100               	movlb	0	; () banked
  4423  00280A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4424  00280C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4428  00280E  0E00               	movlw	0
  4429  002810  0100               	movlb	0	; () banked
  4430  002812  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4431  002814  0E00               	movlw	0
  4432  002816  6FB7               	movwf	logRun@i& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435  002818  0100               	movlb	0	; () banked
  4436  00281A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4437  00281C  D008               	goto	l7211
  4438  00281E  0100               	movlb	0	; () banked
  4439  002820  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4440  002822  E128               	bnz	l920
  4441  002824  0E07               	movlw	7
  4442  002826  0100               	movlb	0	; () banked
  4443  002828  5DB7               	subwf	logRun@i& (0+255),w,b
  4444  00282A  B0D8               	btfsc	status,0,c
  4445  00282C  D023               	goto	l920
  4446  00282E                     l7211:
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4450  00282E  90D8               	bcf	status,0,c
  4451  002830  0100               	movlb	0	; () banked
  4452  002832  35B7               	rlcf	logRun@i& (0+255),w,b
  4453  002834  6ED9               	movwf	fsr2l,c
  4454  002836  0100               	movlb	0	; () banked
  4455  002838  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4456  00283A  6EDA               	movwf	fsr2h,c
  4457  00283C  0E0E               	movlw	low _startTime
  4458  00283E  26D9               	addwf	fsr2l,f,c
  4459  002840  0E01               	movlw	high _startTime
  4460  002842  22DA               	addwfc	fsr2h,f,c
  4461  002844  50DF               	movf	indf2,w,c
  4462  002846  0100               	movlb	0	; () banked
  4463  002848  6FB5               	movwf	logRun@byte_i& (0+255),b
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4467  00284A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4468  00284E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4469  002852  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4470  002856  ECFC  F015         	call	_EEPROM_write	;wreg free
  4471                           
  4472                           ;EEPROM.c: 126: addr++;
  4473  00285A  0100               	movlb	0	; () banked
  4474  00285C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4475  00285E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4476                           
  4477                           ; BSR set to: 0
  4478  002860  0100               	movlb	0	; () banked
  4479  002862  4BB7               	infsnz	logRun@i& (0+255),f,b
  4480  002864  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4481                           
  4482                           ; BSR set to: 0
  4483  002866  0100               	movlb	0	; () banked
  4484  002868  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4485  00286A  D7E1               	goto	l7211
  4486  00286C  0100               	movlb	0	; () banked
  4487  00286E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4488  002870  E101               	bnz	u6230
  4489  002872  D7D8               	goto	L4
  4490  002874                     u6230:
  4491  002874                     l920:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;EEPROM.c: 127: }
  4495                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4496  002874  C0FA  F0B6         	movff	_total_time,logRun@byte11
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4500  002878  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4501  00287C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4502  002880  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4503  002884  ECFC  F015         	call	_EEPROM_write	;wreg free
  4504  002888  0012               	return		;funcret
  4505  00288A                     __end_of_logRun:
  4506                           	opt stack 0
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           intcon2	equ	0xFF1
  4515                           intcon3	equ	0xFF0
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           postdec1	equ	0xFE5
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _EEPROM_write *****************
  4528 ;; Defined at:
  4529 ;;		line 32 in file "EEPROM.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  address         2   43[BANK0 ] unsigned short 
  4532 ;;  data            1   45[BANK0 ] unsigned char 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  i               1   48[BANK0 ] unsigned char 
  4535 ;;  i               1   47[BANK0 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4545 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;Total ram usage:        6 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:   10
  4552 ;; This function calls:
  4553 ;;		_EEPROM_read
  4554 ;;		_lcdInst
  4555 ;;		_printf
  4556 ;; This function is called by:
  4557 ;;		_Loading
  4558 ;;		_logRun
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text12
  4563  002BF8                     __ptext12:
  4564                           	opt stack 0
  4565  002BF8                     _EEPROM_write:
  4566                           	opt stack 18
  4567                           
  4568                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4569                           
  4570                           ;incstack = 0
  4571  002BF8  84A6               	bsf	4006,2,c	;volatile
  4572                           
  4573                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4574  002BFA  0100               	movlb	0	; () banked
  4575  002BFC  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4576  002BFE  6EAA               	movwf	4010,c	;volatile
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4580  002C00  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;EEPROM.c: 39: EEDATA = data;
  4584  002C04  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4588  002C08  9EA6               	bcf	4006,7,c	;volatile
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4592  002C0A  9CA6               	bcf	4006,6,c	;volatile
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4596  002C0C  9EF2               	bcf	intcon,7,c	;volatile
  4597                           
  4598                           ;EEPROM.c: 45: EECON2 = 0x55;
  4599  002C0E  0E55               	movlw	85
  4600  002C10  6EA7               	movwf	4007,c	;volatile
  4601                           
  4602                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4603  002C12  0EAA               	movlw	170
  4604  002C14  6EA7               	movwf	4007,c	;volatile
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4608  002C16  82A6               	bsf	4006,1,c	;volatile
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4612  002C18  8EF2               	bsf	intcon,7,c	;volatile
  4613  002C1A                     l898:
  4614  002C1A  A8A1               	btfss	4001,4,c	;volatile
  4615  002C1C  D7FE               	goto	l898
  4616                           
  4617                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4618  002C1E  98A1               	bcf	4001,4,c	;volatile
  4619                           
  4620                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4621  002C20  94A6               	bcf	4006,2,c	;volatile
  4622                           
  4623                           ;EEPROM.c: 57: if(debug){
  4624  002C22  0100               	movlb	0	; () banked
  4625  002C24  51E0               	movf	_debug& (0+255),w,b
  4626  002C26  0100               	movlb	0	; () banked
  4627  002C28  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4628  002C2A  B4D8               	btfsc	status,2,c
  4629  002C2C  0012               	return	
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4633  002C2E  0E01               	movlw	1
  4634  002C30  EC83  F01F         	call	_lcdInst
  4635  002C34  0E68               	movlw	104
  4636  002C36  0100               	movlb	0	; () banked
  4637  002C38  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4638  002C3A  0EE4               	movlw	228
  4639  002C3C                     u6487:
  4640  002C3C  2EE8               	decfsz	wreg,f,c
  4641  002C3E  D7FE               	bra	u6487
  4642  002C40  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4643  002C42  D7FC               	bra	u6487
  4644  002C44  F000               	nop	
  4645                           
  4646                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4647  002C46  0E80               	movlw	128
  4648  002C48  EC83  F01F         	call	_lcdInst
  4649                           
  4650                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4651  002C4C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4652  002C50  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4653  002C54  EC46  F01F         	call	_EEPROM_read	;wreg free
  4654  002C58  0100               	movlb	0	; () banked
  4655  002C5A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4656  002C5C  A4D8               	btfss	status,2,c
  4657  002C5E  D024               	goto	l5563
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4661  002C60  0ED6               	movlw	low STR_66
  4662  002C62  0100               	movlb	0	; () banked
  4663  002C64  6F8E               	movwf	printf@f& (0+255),b
  4664  002C66  0EFB               	movlw	high STR_66
  4665  002C68  0100               	movlb	0	; () banked
  4666  002C6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4667  002C6C  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4668  002C70  0100               	movlb	0	; () banked
  4669  002C72  6B91               	clrf	(?_printf+3)& (0+255),b
  4670  002C74  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4671  002C78  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4672  002C7C  EC93  F008         	call	_printf	;wreg free
  4673                           
  4674                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4675  002C80  0E00               	movlw	0
  4676  002C82  0100               	movlb	0	; () banked
  4677  002C84  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4678  002C86                     l5555:
  4679                           
  4680                           ; BSR set to: 0
  4681  002C86  0E63               	movlw	99
  4682  002C88  0100               	movlb	0	; () banked
  4683  002C8A  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4684  002C8C  D001               	goto	l5559
  4685  002C8E  0012               	return	
  4686  002C90                     l5559:
  4687                           
  4688                           ; BSR set to: 0
  4689  002C90  0E68               	movlw	104
  4690  002C92  0100               	movlb	0	; () banked
  4691  002C94  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4692  002C96  0EE4               	movlw	228
  4693  002C98                     u6497:
  4694  002C98  2EE8               	decfsz	wreg,f,c
  4695  002C9A  D7FE               	bra	u6497
  4696  002C9C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4697  002C9E  D7FC               	bra	u6497
  4698  002CA0  F000               	nop	
  4699  002CA2  0100               	movlb	0	; () banked
  4700  002CA4  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4701  002CA6  D7EF               	goto	l5555
  4702  002CA8                     l5563:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4706  002CA8  0EBC               	movlw	low STR_67
  4707  002CAA  0100               	movlb	0	; () banked
  4708  002CAC  6F8E               	movwf	printf@f& (0+255),b
  4709  002CAE  0EFF               	movlw	high STR_67
  4710  002CB0  0100               	movlb	0	; () banked
  4711  002CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4712  002CB4  EC93  F008         	call	_printf	;wreg free
  4713  002CB8  0E00               	movlw	0
  4714  002CBA  0100               	movlb	0	; () banked
  4715  002CBC  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4716  002CBE                     l5567:
  4717                           
  4718                           ; BSR set to: 0
  4719  002CBE  0E63               	movlw	99
  4720  002CC0  0100               	movlb	0	; () banked
  4721  002CC2  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4722  002CC4  D001               	goto	l5571
  4723  002CC6  0012               	return	
  4724  002CC8                     l5571:
  4725                           
  4726                           ; BSR set to: 0
  4727  002CC8  0E68               	movlw	104
  4728  002CCA  0100               	movlb	0	; () banked
  4729  002CCC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4730  002CCE  0EE4               	movlw	228
  4731  002CD0                     u6507:
  4732  002CD0  2EE8               	decfsz	wreg,f,c
  4733  002CD2  D7FE               	bra	u6507
  4734  002CD4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4735  002CD6  D7FC               	bra	u6507
  4736  002CD8  F000               	nop	
  4737  002CDA  0100               	movlb	0	; () banked
  4738  002CDC  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4739  002CDE  D7EF               	goto	l5567
  4740  002CE0                     __end_of_EEPROM_write:
  4741                           	opt stack 0
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           intcon	equ	0xFF2
  4749                           intcon2	equ	0xFF1
  4750                           intcon3	equ	0xFF0
  4751                           postinc0	equ	0xFEE
  4752                           wreg	equ	0xFE8
  4753                           postdec1	equ	0xFE5
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _EEPROM_read *****************
  4763 ;; Defined at:
  4764 ;;		line 68 in file "EEPROM.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  address         2    0[BANK0 ] unsigned short 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      unsigned char 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;Total ram usage:        2 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    7
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_Loading
  4789 ;;		_EEPROM_write
  4790 ;;		_logRun
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text13
  4795  003E8C                     __ptext13:
  4796                           	opt stack 0
  4797  003E8C                     _EEPROM_read:
  4798                           	opt stack 20
  4799                           
  4800                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;incstack = 0
  4804  003E8C  0100               	movlb	0	; () banked
  4805  003E8E  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4806  003E90  6EAA               	movwf	4010,c	;volatile
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4810  003E92  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4814  003E96  9EA6               	bcf	4006,7,c	;volatile
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4818  003E98  9CA6               	bcf	4006,6,c	;volatile
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4822  003E9A  80A6               	bsf	4006,0,c	;volatile
  4823  003E9C                     l911:
  4824  003E9C  B0A6               	btfsc	4006,0,c	;volatile
  4825  003E9E  D7FE               	goto	l911
  4826                           
  4827                           ;EEPROM.c: 81: return EEDATA;
  4828  003EA0  50A8               	movf	4008,w,c	;volatile
  4829  003EA2  0012               	return	
  4830  003EA4                     __end_of_EEPROM_read:
  4831                           	opt stack 0
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           intcon3	equ	0xFF0
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           postdec1	equ	0xFE5
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           postdec2	equ	0xFDD
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _initUI *****************
  4853 ;; Defined at:
  4854 ;;		line 62 in file "UI.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:   12
  4875 ;; This function calls:
  4876 ;;		_change_state_to_menu_start
  4877 ;;		_loadRTC
  4878 ;; This function is called by:
  4879 ;;		_main
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text14
  4884  003DE2                     __ptext14:
  4885                           	opt stack 0
  4886  003DE2                     _initUI:
  4887                           	opt stack 18
  4888                           
  4889                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4890                           
  4891                           ;incstack = 0
  4892  003DE2  8EF2               	bsf	intcon,7,c	;volatile
  4893                           
  4894                           ;UI.c: 64: machine_state = UI_state;
  4895  003DE4  0E00               	movlw	0
  4896  003DE6  0100               	movlb	0	; () banked
  4897  003DE8  6FFC               	movwf	_machine_state& (0+255),b
  4898                           
  4899                           ;UI.c: 65: logstate = 0;
  4900  003DEA  0E00               	movlw	0
  4901  003DEC  0100               	movlb	0	; () banked
  4902  003DEE  6FF9               	movwf	(_logstate+1)& (0+255),b
  4903  003DF0  0E00               	movlw	0
  4904  003DF2  6FF8               	movwf	_logstate& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;UI.c: 67: loadRTC();
  4908  003DF4  EC5B  F019         	call	_loadRTC	;wreg free
  4909                           
  4910                           ;UI.c: 69: change_state_to_menu_start();
  4911  003DF8  EC76  F01E         	call	_change_state_to_menu_start	;wreg free
  4912                           
  4913                           ;UI.c: 70: firstboot = 1;
  4914  003DFC  0E00               	movlw	0
  4915  003DFE  6E74               	movwf	_firstboot+1,c
  4916  003E00  0E01               	movlw	1
  4917  003E02  6E73               	movwf	_firstboot,c
  4918  003E04  0012               	return		;funcret
  4919  003E06                     __end_of_initUI:
  4920                           	opt stack 0
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           intcon	equ	0xFF2
  4928                           intcon2	equ	0xFF1
  4929                           intcon3	equ	0xFF0
  4930                           postinc0	equ	0xFEE
  4931                           wreg	equ	0xFE8
  4932                           postdec1	equ	0xFE5
  4933                           fsr1l	equ	0xFE1
  4934                           indf2	equ	0xFDF
  4935                           postinc2	equ	0xFDE
  4936                           postdec2	equ	0xFDD
  4937                           fsr2h	equ	0xFDA
  4938                           fsr2l	equ	0xFD9
  4939                           status	equ	0xFD8
  4940                           
  4941 ;; *************** function _loadRTC *****************
  4942 ;; Defined at:
  4943 ;;		line 28 in file "RTC.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  i               2   22[BANK0 ] int 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;Total ram usage:        3 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    9
  4964 ;; This function calls:
  4965 ;;		_I2C_Master_Init
  4966 ;;		_I2C_Master_Start
  4967 ;;		_I2C_Master_Stop
  4968 ;;		_I2C_Master_Write
  4969 ;; This function is called by:
  4970 ;;		_initUI
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text15
  4975  0032B6                     __ptext15:
  4976                           	opt stack 0
  4977  0032B6                     _loadRTC:
  4978                           	opt stack 20
  4979                           
  4980                           ;RTC.c: 30: I2C_Master_Init(10000);
  4981                           
  4982                           ;incstack = 0
  4983  0032B6  0E10               	movlw	16
  4984  0032B8  0100               	movlb	0	; () banked
  4985  0032BA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4986  0032BC  0E27               	movlw	39
  4987  0032BE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4988  0032C0  0E00               	movlw	0
  4989  0032C2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4990  0032C4  0E00               	movlw	0
  4991  0032C6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4992  0032C8  EC2E  F01B         	call	_I2C_Master_Init	;wreg free
  4993                           
  4994                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4995  0032CC  9EF2               	bcf	intcon,7,c	;volatile
  4996                           
  4997                           ;RTC.c: 34: I2C_Master_Start();
  4998  0032CE  ECA9  F01F         	call	_I2C_Master_Start	;wreg free
  4999                           
  5000                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5001  0032D2  0E00               	movlw	0
  5002  0032D4  0100               	movlb	0	; () banked
  5003  0032D6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5004  0032D8  0ED0               	movlw	208
  5005  0032DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5006  0032DC  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  5007                           
  5008                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5009  0032E0  0E00               	movlw	0
  5010  0032E2  0100               	movlb	0	; () banked
  5011  0032E4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5012  0032E6  0E00               	movlw	0
  5013  0032E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5014  0032EA  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  5015                           
  5016                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5017  0032EE  0E00               	movlw	0
  5018  0032F0  0100               	movlb	0	; () banked
  5019  0032F2  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5020  0032F4  0E00               	movlw	0
  5021  0032F6  6F96               	movwf	loadRTC@i& (0+255),b
  5022  0032F8                     l5679:
  5023                           
  5024                           ; BSR set to: 0
  5025  0032F8  0100               	movlb	0	; () banked
  5026  0032FA  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5027  0032FC  D008               	goto	l5683
  5028  0032FE  0100               	movlb	0	; () banked
  5029  003300  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5030  003302  E11B               	bnz	l5689
  5031  003304  0E07               	movlw	7
  5032  003306  0100               	movlb	0	; () banked
  5033  003308  5D96               	subwf	loadRTC@i& (0+255),w,b
  5034  00330A  B0D8               	btfsc	status,0,c
  5035  00330C  D016               	goto	l5689
  5036  00330E                     l5683:
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5040  00330E  0E24               	movlw	low _time
  5041  003310  0100               	movlb	0	; () banked
  5042  003312  2596               	addwf	loadRTC@i& (0+255),w,b
  5043  003314  6ED9               	movwf	fsr2l,c
  5044  003316  0E01               	movlw	high _time
  5045  003318  0100               	movlb	0	; () banked
  5046  00331A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5047  00331C  6EDA               	movwf	fsr2h,c
  5048  00331E  50DF               	movf	indf2,w,c
  5049  003320  0100               	movlb	0	; () banked
  5050  003322  6F95               	movwf	??_loadRTC& (0+255),b
  5051  003324  0100               	movlb	0	; () banked
  5052  003326  5195               	movf	??_loadRTC& (0+255),w,b
  5053  003328  0100               	movlb	0	; () banked
  5054  00332A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5055  00332C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5056  00332E  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  5057  003332  0100               	movlb	0	; () banked
  5058  003334  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5059  003336  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5060  003338  D7DF               	goto	l5679
  5061  00333A                     l5689:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;RTC.c: 39: }
  5065                           ;RTC.c: 40: I2C_Master_Stop();
  5066  00333A  ECA5  F01F         	call	_I2C_Master_Stop	;wreg free
  5067                           
  5068                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5069  00333E  8EF2               	bsf	intcon,7,c	;volatile
  5070  003340  0012               	return		;funcret
  5071  003342                     __end_of_loadRTC:
  5072                           	opt stack 0
  5073                           tblptru	equ	0xFF8
  5074                           tblptrh	equ	0xFF7
  5075                           tblptrl	equ	0xFF6
  5076                           tablat	equ	0xFF5
  5077                           prodh	equ	0xFF4
  5078                           prodl	equ	0xFF3
  5079                           intcon	equ	0xFF2
  5080                           intcon2	equ	0xFF1
  5081                           intcon3	equ	0xFF0
  5082                           postinc0	equ	0xFEE
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function _I2C_Master_Init *****************
  5094 ;; Defined at:
  5095 ;;		line 15 in file "I2C.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  c               4   13[BANK0 ] const unsigned long 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5109 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;Total ram usage:        8 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    8
  5116 ;; This function calls:
  5117 ;;		___lldiv
  5118 ;; This function is called by:
  5119 ;;		_loadRTC
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text16
  5124  00365C                     __ptext16:
  5125                           	opt stack 0
  5126  00365C                     _I2C_Master_Init:
  5127                           	opt stack 20
  5128                           
  5129                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5130                           
  5131                           ;incstack = 0
  5132  00365C  0E00               	movlw	0
  5133  00365E  6EC7               	movwf	4039,c	;volatile
  5134                           
  5135                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5136  003660  0E28               	movlw	40
  5137  003662  6EC6               	movwf	4038,c	;volatile
  5138                           
  5139                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5140  003664  0E00               	movlw	0
  5141  003666  6EC5               	movwf	4037,c	;volatile
  5142                           
  5143                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5144  003668  0E00               	movlw	0
  5145  00366A  0100               	movlb	0	; () banked
  5146  00366C  6F80               	movwf	___lldiv@dividend& (0+255),b
  5147  00366E  0E48               	movlw	72
  5148  003670  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5149  003672  0EE8               	movlw	232
  5150  003674  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5151  003676  0E01               	movlw	1
  5152  003678  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5153  00367A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5154  00367E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5155  003682  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5156  003686  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5157  00368A  0E02               	movlw	2
  5158  00368C                     u4155:
  5159  00368C  90D8               	bcf	status,0,c
  5160  00368E  0100               	movlb	0	; () banked
  5161  003690  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5162  003692  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5163  003694  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5164  003696  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5165  003698  2EE8               	decfsz	wreg,f,c
  5166  00369A  D7F8               	goto	u4155
  5167  00369C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5168  0036A0  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5169  0036A4  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5170  0036A8  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5171  0036AC  ECAD  F017         	call	___lldiv	;wreg free
  5172  0036B0  0100               	movlb	0	; () banked
  5173  0036B2  0580               	decf	?___lldiv& (0+255),w,b
  5174  0036B4  6EC8               	movwf	4040,c	;volatile
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;I2C.c: 22: TRISC3 = 1;
  5178  0036B6  8694               	bsf	3988,3,c	;volatile
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;I2C.c: 23: TRISC4 = 1;
  5182  0036B8  8894               	bsf	3988,4,c	;volatile
  5183                           
  5184                           ; BSR set to: 0
  5185  0036BA  0012               	return		;funcret
  5186  0036BC                     __end_of_I2C_Master_Init:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           intcon2	equ	0xFF1
  5196                           intcon3	equ	0xFF0
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           postdec1	equ	0xFE5
  5200                           fsr1l	equ	0xFE1
  5201                           indf2	equ	0xFDF
  5202                           postinc2	equ	0xFDE
  5203                           postdec2	equ	0xFDD
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function ___lldiv *****************
  5209 ;; Defined at:
  5210 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  dividend        4    0[BANK0 ] unsigned long 
  5213 ;;  divisor         4    4[BANK0 ] unsigned long 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  quotient        4    8[BANK0 ] unsigned long 
  5216 ;;  counter         1   12[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  4    0[BANK0 ] unsigned long 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:       13 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    7
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_I2C_Master_Init
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text17
  5241  002F5A                     __ptext17:
  5242                           	opt stack 0
  5243  002F5A                     ___lldiv:
  5244                           	opt stack 20
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;incstack = 0
  5248  002F5A  0E00               	movlw	0
  5249  002F5C  0100               	movlb	0	; () banked
  5250  002F5E  6F88               	movwf	___lldiv@quotient& (0+255),b
  5251  002F60  0E00               	movlw	0
  5252  002F62  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5253  002F64  0E00               	movlw	0
  5254  002F66  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5255  002F68  0E00               	movlw	0
  5256  002F6A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5257                           
  5258                           ; BSR set to: 0
  5259  002F6C  0100               	movlb	0	; () banked
  5260  002F6E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5261  002F70  0100               	movlb	0	; () banked
  5262  002F72  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5263  002F74  0100               	movlb	0	; () banked
  5264  002F76  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5265  002F78  0100               	movlb	0	; () banked
  5266  002F7A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5267  002F7C  B4D8               	btfsc	status,2,c
  5268  002F7E  D042               	goto	l1513
  5269                           
  5270                           ; BSR set to: 0
  5271  002F80  0E01               	movlw	1
  5272  002F82  0100               	movlb	0	; () banked
  5273  002F84  6F8C               	movwf	___lldiv@counter& (0+255),b
  5274  002F86  D008               	goto	l5127
  5275  002F88                     l5125:
  5276                           
  5277                           ; BSR set to: 0
  5278  002F88  0100               	movlb	0	; () banked
  5279  002F8A  90D8               	bcf	status,0,c
  5280  002F8C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5281  002F8E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5282  002F90  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5283  002F92  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5284  002F94  0100               	movlb	0	; () banked
  5285  002F96  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5286  002F98                     l5127:
  5287                           
  5288                           ; BSR set to: 0
  5289  002F98  0100               	movlb	0	; () banked
  5290  002F9A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5291  002F9C  D7F5               	goto	l5125
  5292  002F9E                     l5129:
  5293                           
  5294                           ; BSR set to: 0
  5295  002F9E  0100               	movlb	0	; () banked
  5296  002FA0  90D8               	bcf	status,0,c
  5297  002FA2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5298  002FA4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5299  002FA6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5300  002FA8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5301                           
  5302                           ; BSR set to: 0
  5303  002FAA  0100               	movlb	0	; () banked
  5304  002FAC  5184               	movf	___lldiv@divisor& (0+255),w,b
  5305  002FAE  0100               	movlb	0	; () banked
  5306  002FB0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5307  002FB2  0100               	movlb	0	; () banked
  5308  002FB4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5309  002FB6  0100               	movlb	0	; () banked
  5310  002FB8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5311  002FBA  0100               	movlb	0	; () banked
  5312  002FBC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5313  002FBE  0100               	movlb	0	; () banked
  5314  002FC0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5315  002FC2  0100               	movlb	0	; () banked
  5316  002FC4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5317  002FC6  0100               	movlb	0	; () banked
  5318  002FC8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5319  002FCA  A0D8               	btfss	status,0,c
  5320  002FCC  D012               	goto	l5137
  5321                           
  5322                           ; BSR set to: 0
  5323  002FCE  0100               	movlb	0	; () banked
  5324  002FD0  5184               	movf	___lldiv@divisor& (0+255),w,b
  5325  002FD2  0100               	movlb	0	; () banked
  5326  002FD4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5327  002FD6  0100               	movlb	0	; () banked
  5328  002FD8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5329  002FDA  0100               	movlb	0	; () banked
  5330  002FDC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5331  002FDE  0100               	movlb	0	; () banked
  5332  002FE0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5333  002FE2  0100               	movlb	0	; () banked
  5334  002FE4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5335  002FE6  0100               	movlb	0	; () banked
  5336  002FE8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5337  002FEA  0100               	movlb	0	; () banked
  5338  002FEC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5339                           
  5340                           ; BSR set to: 0
  5341  002FEE  0100               	movlb	0	; () banked
  5342  002FF0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5343  002FF2                     l5137:
  5344                           
  5345                           ; BSR set to: 0
  5346  002FF2  0100               	movlb	0	; () banked
  5347  002FF4  90D8               	bcf	status,0,c
  5348  002FF6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5349  002FF8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5350  002FFA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5351  002FFC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5352                           
  5353                           ; BSR set to: 0
  5354  002FFE  0100               	movlb	0	; () banked
  5355  003000  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5356  003002  D7CD               	goto	l5129
  5357  003004                     l1513:
  5358                           
  5359                           ; BSR set to: 0
  5360  003004  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5361  003008  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5362  00300C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5363  003010  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5364                           
  5365                           ; BSR set to: 0
  5366  003014  0012               	return		;funcret
  5367  003016                     __end_of___lldiv:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           intcon2	equ	0xFF1
  5377                           intcon3	equ	0xFF0
  5378                           postinc0	equ	0xFEE
  5379                           wreg	equ	0xFE8
  5380                           postdec1	equ	0xFE5
  5381                           fsr1l	equ	0xFE1
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _change_state_to_menu_start *****************
  5390 ;; Defined at:
  5391 ;;		line 472 in file "UI.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;		None
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;Total ram usage:        0 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:   11
  5412 ;; This function calls:
  5413 ;;		_lcdInst
  5414 ;;		_printRTC
  5415 ;;		_printf
  5416 ;; This function is called by:
  5417 ;;		_initUI
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text18
  5422  003CEC                     __ptext18:
  5423                           	opt stack 0
  5424  003CEC                     _change_state_to_menu_start:
  5425                           	opt stack 18
  5426                           
  5427                           ;UI.c: 473: cur_state = 0;
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;incstack = 0
  5431  003CEC  0E00               	movlw	0
  5432  003CEE  0100               	movlb	0	; () banked
  5433  003CF0  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5434  003CF2  0E00               	movlw	0
  5435  003CF4  6FDE               	movwf	_cur_state& (0+255),b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;UI.c: 475: lcdInst(0b10000000);;
  5439  003CF6  0E80               	movlw	128
  5440  003CF8  EC83  F01F         	call	_lcdInst
  5441                           
  5442                           ;UI.c: 476: printRTC();
  5443  003CFC  EC66  F00C         	call	_printRTC	;wreg free
  5444                           
  5445                           ;UI.c: 477: lcdInst(0b11000000);;
  5446  003D00  0EC0               	movlw	192
  5447  003D02  EC83  F01F         	call	_lcdInst
  5448                           
  5449                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5450  003D06  0E33               	movlw	low STR_30
  5451  003D08  0100               	movlb	0	; () banked
  5452  003D0A  6F8E               	movwf	printf@f& (0+255),b
  5453  003D0C  0EFE               	movlw	high STR_30
  5454  003D0E  0100               	movlb	0	; () banked
  5455  003D10  6F8F               	movwf	(printf@f+1)& (0+255),b
  5456  003D12  EC93  F008         	call	_printf	;wreg free
  5457  003D16  0012               	return		;funcret
  5458  003D18                     __end_of_change_state_to_menu_start:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           intcon2	equ	0xFF1
  5468                           intcon3	equ	0xFF0
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _initTime *****************
  5481 ;; Defined at:
  5482 ;;		line 17 in file "RTC.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  s               1    wreg     unsigned char 
  5485 ;;  m               1    0[BANK0 ] unsigned char 
  5486 ;;  h               1    1[BANK0 ] unsigned char 
  5487 ;;  w               1    2[BANK0 ] unsigned char 
  5488 ;;  DD              1    3[BANK0 ] unsigned char 
  5489 ;;  MM              1    4[BANK0 ] unsigned char 
  5490 ;;  YY              1    5[BANK0 ] unsigned char 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  s               1    6[BANK0 ] unsigned char 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5502 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;Total ram usage:        7 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    7
  5509 ;; This function calls:
  5510 ;;		Nothing
  5511 ;; This function is called by:
  5512 ;;		_main
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text19
  5517  003E4C                     __ptext19:
  5518                           	opt stack 0
  5519  003E4C                     _initTime:
  5520                           	opt stack 23
  5521                           
  5522                           ;incstack = 0
  5523                           ;initTime@s stored from wreg
  5524  003E4C  0100               	movlb	0	; () banked
  5525  003E4E  6F86               	movwf	initTime@s& (0+255),b
  5526                           
  5527                           ;RTC.c: 19: time[0] = s;
  5528  003E50  C086  F124         	movff	initTime@s,_time
  5529                           
  5530                           ;RTC.c: 20: time[1] = m;
  5531  003E54  C080  F125         	movff	initTime@m,_time+1
  5532                           
  5533                           ;RTC.c: 21: time[2] = h;
  5534  003E58  C081  F126         	movff	initTime@h,_time+2
  5535                           
  5536                           ;RTC.c: 22: time[3] = w;
  5537  003E5C  C082  F127         	movff	initTime@w,_time+3
  5538                           
  5539                           ;RTC.c: 23: time[4] = DD;
  5540  003E60  C083  F128         	movff	initTime@DD,_time+4
  5541                           
  5542                           ;RTC.c: 24: time[5] = MM;
  5543  003E64  C084  F129         	movff	initTime@MM,_time+5
  5544                           
  5545                           ;RTC.c: 25: time[6] = YY;
  5546  003E68  C085  F12A         	movff	initTime@YY,_time+6
  5547  003E6C  0012               	return		;funcret
  5548  003E6E                     __end_of_initTime:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           intcon	equ	0xFF2
  5557                           intcon2	equ	0xFF1
  5558                           intcon3	equ	0xFF0
  5559                           postinc0	equ	0xFEE
  5560                           wreg	equ	0xFE8
  5561                           postdec1	equ	0xFE5
  5562                           fsr1l	equ	0xFE1
  5563                           indf2	equ	0xFDF
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _initLCD *****************
  5571 ;; Defined at:
  5572 ;;		line 48 in file "lcd.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:        1 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    9
  5593 ;; This function calls:
  5594 ;;		_lcdInst
  5595 ;; This function is called by:
  5596 ;;		_main
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text20
  5601  00394A                     __ptext20:
  5602                           	opt stack 0
  5603  00394A                     _initLCD:
  5604                           	opt stack 21
  5605                           
  5606                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5607                           
  5608                           ;incstack = 0
  5609  00394A  0E9C               	movlw	156
  5610  00394C  0100               	movlb	0	; () banked
  5611  00394E  6F83               	movwf	??_initLCD& (0+255),b
  5612  003950  0ED7               	movlw	215
  5613  003952                     u6517:
  5614  003952  2EE8               	decfsz	wreg,f,c
  5615  003954  D7FE               	bra	u6517
  5616  003956  2F83               	decfsz	??_initLCD& (0+255),f,b
  5617  003958  D7FC               	bra	u6517
  5618                           
  5619                           ;lcd.c: 50: lcdInst(0b00110011);
  5620  00395A  0E33               	movlw	51
  5621  00395C  EC83  F01F         	call	_lcdInst
  5622                           
  5623                           ;lcd.c: 51: lcdInst(0b00110010);
  5624  003960  0E32               	movlw	50
  5625  003962  EC83  F01F         	call	_lcdInst
  5626                           
  5627                           ;lcd.c: 53: lcdInst(0b00101000);
  5628  003966  0E28               	movlw	40
  5629  003968  EC83  F01F         	call	_lcdInst
  5630                           
  5631                           ;lcd.c: 54: lcdInst(0b00001100);
  5632  00396C  0E0C               	movlw	12
  5633  00396E  EC83  F01F         	call	_lcdInst
  5634                           
  5635                           ;lcd.c: 55: lcdInst(0b00000110);
  5636  003972  0E06               	movlw	6
  5637  003974  EC83  F01F         	call	_lcdInst
  5638                           
  5639                           ;lcd.c: 56: lcdInst(0b00000001);
  5640  003978  0E01               	movlw	1
  5641  00397A  EC83  F01F         	call	_lcdInst
  5642                           
  5643                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5644  00397E  0E9C               	movlw	156
  5645  003980  0100               	movlb	0	; () banked
  5646  003982  6F83               	movwf	??_initLCD& (0+255),b
  5647  003984  0ED7               	movlw	215
  5648  003986                     u6527:
  5649  003986  2EE8               	decfsz	wreg,f,c
  5650  003988  D7FE               	bra	u6527
  5651  00398A  2F83               	decfsz	??_initLCD& (0+255),f,b
  5652  00398C  D7FC               	bra	u6527
  5653  00398E  0012               	return		;funcret
  5654  003990                     __end_of_initLCD:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           intcon2	equ	0xFF1
  5664                           intcon3	equ	0xFF0
  5665                           postinc0	equ	0xFEE
  5666                           wreg	equ	0xFE8
  5667                           postdec1	equ	0xFE5
  5668                           fsr1l	equ	0xFE1
  5669                           indf2	equ	0xFDF
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _UI *****************
  5677 ;; Defined at:
  5678 ;;		line 74 in file "UI.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  i               1   73[BANK0 ] unsigned char 
  5683 ;;  i               1   85[BANK0 ] unsigned char 
  5684 ;;  i               1   84[BANK0 ] unsigned char 
  5685 ;;  i               1   83[BANK0 ] unsigned char 
  5686 ;;  i               1   82[BANK0 ] unsigned char 
  5687 ;;  i               1   81[BANK0 ] unsigned char 
  5688 ;;  i               1   80[BANK0 ] unsigned char 
  5689 ;;  i               1   79[BANK0 ] unsigned char 
  5690 ;;  i               1   78[BANK0 ] unsigned char 
  5691 ;;  i               1   77[BANK0 ] unsigned char 
  5692 ;;  i               1   76[BANK0 ] unsigned char 
  5693 ;;  i               1   75[BANK0 ] unsigned char 
  5694 ;;  i               1   74[BANK0 ] unsigned char 
  5695 ;;  month           4   86[BANK0 ] unsigned char [4]
  5696 ;;  i               1   72[BANK0 ] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;Total ram usage:       22 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:   11
  5713 ;; This function calls:
  5714 ;;		___awdiv
  5715 ;;		___awmod
  5716 ;;		_change_state_to_menu_12
  5717 ;;		_change_state_to_menu_22
  5718 ;;		_lcdInst
  5719 ;;		_printRTC
  5720 ;;		_printf
  5721 ;;		_strcpy
  5722 ;; This function is called by:
  5723 ;;		_main
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text21
  5728  000012                     __ptext21:
  5729                           	opt stack 0
  5730  000012                     _UI:
  5731                           	opt stack 19
  5732                           
  5733                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5734                           
  5735                           ;incstack = 0
  5736  000012  0E02               	movlw	2
  5737  000014  0100               	movlb	0	; () banked
  5738  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5739  000018  A4D8               	btfss	status,2,c
  5740  00001A  D075               	goto	l6613
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5744  00001C  0E01               	movlw	1
  5745  00001E  EC83  F01F         	call	_lcdInst
  5746  000022  0E68               	movlw	104
  5747  000024  0100               	movlb	0	; () banked
  5748  000026  6FC4               	movwf	??_UI& (0+255),b
  5749  000028  0EE4               	movlw	228
  5750  00002A                     u6537:
  5751  00002A  2EE8               	decfsz	wreg,f,c
  5752  00002C  D7FE               	bra	u6537
  5753  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5754  000030  D7FC               	bra	u6537
  5755  000032  F000               	nop	
  5756                           
  5757                           ;UI.c: 77: lcdInst(0b10000000);;
  5758  000034  0E80               	movlw	128
  5759  000036  EC83  F01F         	call	_lcdInst
  5760                           
  5761                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5762  00003A  0E23               	movlw	low STR_1
  5763  00003C  0100               	movlb	0	; () banked
  5764  00003E  6F8E               	movwf	printf@f& (0+255),b
  5765  000040  0EFC               	movlw	high STR_1
  5766  000042  0100               	movlb	0	; () banked
  5767  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5768  000046  0E01               	movlw	1
  5769  000048  0100               	movlb	0	; () banked
  5770  00004A  25FD               	addwf	_sel& (0+255),w,b
  5771  00004C  0100               	movlb	0	; () banked
  5772  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5773  000050  0100               	movlb	0	; () banked
  5774  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5775  000054  0E00               	movlw	0
  5776  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5777  000058  EC93  F008         	call	_printf	;wreg free
  5778                           
  5779                           ;UI.c: 79: lcdInst(0b11000000);;
  5780  00005C  0EC0               	movlw	192
  5781  00005E  EC83  F01F         	call	_lcdInst
  5782                           
  5783                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5784  000062  0E0E               	movlw	14
  5785  000064  0100               	movlb	0	; () banked
  5786  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5787  000068  0E10               	movlw	16
  5788  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5789  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  5790  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5791  000074  ECBC  F018         	call	___awmod	;wreg free
  5792  000078  C080  F0C6         	movff	?___awmod,_UI$2144
  5793  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2144+1
  5794                           
  5795                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5796  000080  0E41               	movlw	low STR_2
  5797  000082  0100               	movlb	0	; () banked
  5798  000084  6F8E               	movwf	printf@f& (0+255),b
  5799  000086  0EFF               	movlw	high STR_2
  5800  000088  0100               	movlb	0	; () banked
  5801  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5802  00008C  0E0E               	movlw	14
  5803  00008E  0100               	movlb	0	; () banked
  5804  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5805  000092  0E10               	movlw	16
  5806  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5807  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  5808  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5809  00009E  ECBC  F018         	call	___awmod	;wreg free
  5810  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5811  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5812  0000AA  0E00               	movlw	0
  5813  0000AC  0100               	movlb	0	; () banked
  5814  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5815  0000B0  0E3C               	movlw	60
  5816  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5817  0000B4  EC4E  F017         	call	___awdiv	;wreg free
  5818  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5819  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5820  0000C0  C0C6  F080         	movff	_UI$2144,___awmod@dividend
  5821  0000C4  C0C7  F081         	movff	_UI$2144+1,___awmod@dividend+1
  5822  0000C8  0E00               	movlw	0
  5823  0000CA  0100               	movlb	0	; () banked
  5824  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5825  0000CE  0E3C               	movlw	60
  5826  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5827  0000D2  ECBC  F018         	call	___awmod	;wreg free
  5828  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5829  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5830  0000DE  EC93  F008         	call	_printf	;wreg free
  5831                           
  5832                           ;UI.c: 81: machine_state = UI_state;
  5833  0000E2  0E00               	movlw	0
  5834  0000E4  0100               	movlb	0	; () banked
  5835  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5836  0000E8                     l177:
  5837  0000E8  A281               	btfss	3969,1,c	;volatile
  5838  0000EA  D7FE               	goto	l177
  5839                           
  5840                           ;UI.c: 84: }
  5841                           ;UI.c: 85: if(cur_state==12){
  5842  0000EC  0E0C               	movlw	12
  5843  0000EE  0100               	movlb	0	; () banked
  5844  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5845  0000F2  0100               	movlb	0	; () banked
  5846  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5847  0000F6  A4D8               	btfss	status,2,c
  5848  0000F8  D003               	goto	l6611
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;UI.c: 86: change_state_to_menu_12();
  5852  0000FA  EC05  F01D         	call	_change_state_to_menu_12	;wreg free
  5853                           
  5854                           ;UI.c: 87: }
  5855  0000FE  D3D5               	goto	l6933
  5856  000100                     l6611:
  5857                           
  5858                           ;UI.c: 88: else{
  5859                           ;UI.c: 89: change_state_to_menu_22();
  5860  000100  ECE9  F01C         	call	_change_state_to_menu_22	;wreg free
  5861                           
  5862                           ;UI.c: 90: }
  5863                           ;UI.c: 91: }
  5864  000104  D3D2               	goto	l6933
  5865  000106                     l6613:
  5866                           
  5867                           ;UI.c: 92: else if(cur_state == 0){
  5868  000106  0100               	movlb	0	; () banked
  5869  000108  51DE               	movf	_cur_state& (0+255),w,b
  5870  00010A  0100               	movlb	0	; () banked
  5871  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5872  00010E  A4D8               	btfss	status,2,c
  5873  000110  D3CC               	goto	l6933
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5877  000112  0E00               	movlw	0
  5878  000114  0100               	movlb	0	; () banked
  5879  000116  6FC8               	movwf	UI@i& (0+255),b
  5880  000118                     l6617:
  5881                           
  5882                           ; BSR set to: 0
  5883  000118  0E63               	movlw	99
  5884  00011A  0100               	movlb	0	; () banked
  5885  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5886  00011E  D001               	goto	l6621
  5887  000120  D00C               	goto	l6625
  5888  000122                     l6621:
  5889                           
  5890                           ; BSR set to: 0
  5891  000122  0E68               	movlw	104
  5892  000124  0100               	movlb	0	; () banked
  5893  000126  6FC4               	movwf	??_UI& (0+255),b
  5894  000128  0EE4               	movlw	228
  5895  00012A                     u6547:
  5896  00012A  2EE8               	decfsz	wreg,f,c
  5897  00012C  D7FE               	bra	u6547
  5898  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5899  000130  D7FC               	bra	u6547
  5900  000132  F000               	nop	
  5901  000134  0100               	movlb	0	; () banked
  5902  000136  2BC8               	incf	UI@i& (0+255),f,b
  5903  000138  D7EF               	goto	l6617
  5904  00013A                     l6625:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;UI.c: 94: if(cur_state == 0){
  5908  00013A  0100               	movlb	0	; () banked
  5909  00013C  51DE               	movf	_cur_state& (0+255),w,b
  5910  00013E  0100               	movlb	0	; () banked
  5911  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5912  000142  A4D8               	btfss	status,2,c
  5913  000144  D3B2               	goto	l6933
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;UI.c: 95: printRTC();
  5917  000146  EC66  F00C         	call	_printRTC	;wreg free
  5918                           
  5919                           ;UI.c: 96: }
  5920                           ;UI.c: 97: }
  5921                           ;UI.c: 98: while(logstate){
  5922  00014A  D3AF               	goto	l6933
  5923  00014C                     l6629:
  5924                           
  5925                           ;UI.c: 100: if(!log_completion){
  5926  00014C  0100               	movlb	0	; () banked
  5927  00014E  51EA               	movf	_log_completion& (0+255),w,b
  5928  000150  0100               	movlb	0	; () banked
  5929  000152  11EB               	iorwf	(_log_completion+1)& (0+255),w,b
  5930  000154  A4D8               	btfss	status,2,c
  5931  000156  D041               	goto	l6659
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5935  000158  0E01               	movlw	1
  5936  00015A  EC83  F01F         	call	_lcdInst
  5937  00015E  0E68               	movlw	104
  5938  000160  0100               	movlb	0	; () banked
  5939  000162  6FC4               	movwf	??_UI& (0+255),b
  5940  000164  0EE4               	movlw	228
  5941  000166                     u6557:
  5942  000166  2EE8               	decfsz	wreg,f,c
  5943  000168  D7FE               	bra	u6557
  5944  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  5945  00016C  D7FC               	bra	u6557
  5946  00016E  F000               	nop	
  5947                           
  5948                           ;UI.c: 102: lcdInst(0b10000000);;
  5949  000170  0E80               	movlw	128
  5950  000172  EC83  F01F         	call	_lcdInst
  5951                           
  5952                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  5953  000176  0E11               	movlw	low STR_3
  5954  000178  0100               	movlb	0	; () banked
  5955  00017A  6F8E               	movwf	printf@f& (0+255),b
  5956  00017C  0EFC               	movlw	high STR_3
  5957  00017E  0100               	movlb	0	; () banked
  5958  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  5959  000182  C0E8  F090         	movff	_log,?_printf+2
  5960  000186  C0E9  F091         	movff	_log+1,?_printf+3
  5961  00018A  EC93  F008         	call	_printf	;wreg free
  5962                           
  5963                           ;UI.c: 104: lcdInst(0b11000000);;
  5964  00018E  0EC0               	movlw	192
  5965  000190  EC83  F01F         	call	_lcdInst
  5966                           
  5967                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  5968  000194  0E64               	movlw	low STR_4
  5969  000196  0100               	movlb	0	; () banked
  5970  000198  6F8E               	movwf	printf@f& (0+255),b
  5971  00019A  0EFE               	movlw	high STR_4
  5972  00019C  0100               	movlb	0	; () banked
  5973  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5974  0001A0  EC93  F008         	call	_printf	;wreg free
  5975  0001A4                     l6643:
  5976  0001A4  0E00               	movlw	0
  5977  0001A6  0100               	movlb	0	; () banked
  5978  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  5979  0001AA                     l6645:
  5980                           
  5981                           ; BSR set to: 0
  5982  0001AA  0E63               	movlw	99
  5983  0001AC  0100               	movlb	0	; () banked
  5984  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  5985  0001B0  D001               	goto	l6649
  5986  0001B2  D00C               	goto	l6653
  5987  0001B4                     l6649:
  5988                           
  5989                           ; BSR set to: 0
  5990  0001B4  0E68               	movlw	104
  5991  0001B6  0100               	movlb	0	; () banked
  5992  0001B8  6FC4               	movwf	??_UI& (0+255),b
  5993  0001BA  0EE4               	movlw	228
  5994  0001BC                     u6567:
  5995  0001BC  2EE8               	decfsz	wreg,f,c
  5996  0001BE  D7FE               	bra	u6567
  5997  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  5998  0001C2  D7FC               	bra	u6567
  5999  0001C4  F000               	nop	
  6000  0001C6  0100               	movlb	0	; () banked
  6001  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6002  0001CA  D7EF               	goto	l6645
  6003  0001CC                     l6653:
  6004                           
  6005                           ; BSR set to: 0
  6006  0001CC  0100               	movlb	0	; () banked
  6007  0001CE  51F8               	movf	_logstate& (0+255),w,b
  6008  0001D0  0100               	movlb	0	; () banked
  6009  0001D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6010  0001D4  B4D8               	btfsc	status,2,c
  6011  0001D6  0012               	return	
  6012  0001D8  D7E5               	goto	l6643
  6013  0001DA                     l6659:
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;UI.c: 109: else{
  6017                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6018  0001DA  0E01               	movlw	1
  6019  0001DC  EC83  F01F         	call	_lcdInst
  6020  0001E0  0E68               	movlw	104
  6021  0001E2  0100               	movlb	0	; () banked
  6022  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6023  0001E6  0EE4               	movlw	228
  6024  0001E8                     u6577:
  6025  0001E8  2EE8               	decfsz	wreg,f,c
  6026  0001EA  D7FE               	bra	u6577
  6027  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6028  0001EE  D7FC               	bra	u6577
  6029  0001F0  F000               	nop	
  6030                           
  6031                           ;UI.c: 111: lcdInst(0b10000000);;
  6032  0001F2  0E80               	movlw	128
  6033  0001F4  EC83  F01F         	call	_lcdInst
  6034                           
  6035                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6036  0001F8  0E11               	movlw	low STR_3
  6037  0001FA  0100               	movlb	0	; () banked
  6038  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6039  0001FE  0EFC               	movlw	high STR_3
  6040  000200  0100               	movlb	0	; () banked
  6041  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6042  000204  C0E8  F090         	movff	_log,?_printf+2
  6043  000208  C0E9  F091         	movff	_log+1,?_printf+3
  6044  00020C  EC93  F008         	call	_printf	;wreg free
  6045                           
  6046                           ;UI.c: 113: lcdInst(0b11000000);;
  6047  000210  0EC0               	movlw	192
  6048  000212  EC83  F01F         	call	_lcdInst
  6049                           
  6050                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6051  000216  0E22               	movlw	low STR_6
  6052  000218  0100               	movlb	0	; () banked
  6053  00021A  6F8E               	movwf	printf@f& (0+255),b
  6054  00021C  0EFE               	movlw	high STR_6
  6055  00021E  0100               	movlb	0	; () banked
  6056  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6057  000222  EC93  F008         	call	_printf	;wreg free
  6058                           
  6059                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6060  000226  0E00               	movlw	0
  6061  000228  0100               	movlb	0	; () banked
  6062  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6063  00022C                     l6673:
  6064                           
  6065                           ; BSR set to: 0
  6066  00022C  0E63               	movlw	99
  6067  00022E  0100               	movlb	0	; () banked
  6068  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6069  000232  D001               	goto	l6677
  6070  000234  D00C               	goto	l6681
  6071  000236                     l6677:
  6072                           
  6073                           ; BSR set to: 0
  6074  000236  0E68               	movlw	104
  6075  000238  0100               	movlb	0	; () banked
  6076  00023A  6FC4               	movwf	??_UI& (0+255),b
  6077  00023C  0EE4               	movlw	228
  6078  00023E                     u6587:
  6079  00023E  2EE8               	decfsz	wreg,f,c
  6080  000240  D7FE               	bra	u6587
  6081  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6082  000244  D7FC               	bra	u6587
  6083  000246  F000               	nop	
  6084  000248  0100               	movlb	0	; () banked
  6085  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6086  00024C  D7EF               	goto	l6673
  6087  00024E                     l6681:
  6088                           
  6089                           ; BSR set to: 0
  6090  00024E  0100               	movlb	0	; () banked
  6091  000250  51F8               	movf	_logstate& (0+255),w,b
  6092  000252  0100               	movlb	0	; () banked
  6093  000254  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6094  000256  B4D8               	btfsc	status,2,c
  6095  000258  0012               	return	
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6099                           
  6100                           ; BSR set to: 0
  6101                           
  6102                           ; BSR set to: 0
  6103  00025A  0E00               	movlw	0
  6104  00025C  0100               	movlb	0	; () banked
  6105  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6106  000260                     l6687:
  6107                           
  6108                           ; BSR set to: 0
  6109  000260  0E63               	movlw	99
  6110  000262  0100               	movlb	0	; () banked
  6111  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6112  000266  D001               	goto	l6691
  6113  000268  D00C               	goto	l6695
  6114  00026A                     l6691:
  6115                           
  6116                           ; BSR set to: 0
  6117  00026A  0E68               	movlw	104
  6118  00026C  0100               	movlb	0	; () banked
  6119  00026E  6FC4               	movwf	??_UI& (0+255),b
  6120  000270  0EE4               	movlw	228
  6121  000272                     u6597:
  6122  000272  2EE8               	decfsz	wreg,f,c
  6123  000274  D7FE               	bra	u6597
  6124  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6125  000278  D7FC               	bra	u6597
  6126  00027A  F000               	nop	
  6127  00027C  0100               	movlb	0	; () banked
  6128  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6129  000280  D7EF               	goto	l6687
  6130  000282                     l6695:
  6131                           
  6132                           ; BSR set to: 0
  6133  000282  0100               	movlb	0	; () banked
  6134  000284  51F8               	movf	_logstate& (0+255),w,b
  6135  000286  0100               	movlb	0	; () banked
  6136  000288  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6137  00028A  B4D8               	btfsc	status,2,c
  6138  00028C  0012               	return	
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6142                           
  6143                           ; BSR set to: 0
  6144                           
  6145                           ; BSR set to: 0
  6146  00028E  0E01               	movlw	1
  6147  000290  EC83  F01F         	call	_lcdInst
  6148  000294  0E68               	movlw	104
  6149  000296  0100               	movlb	0	; () banked
  6150  000298  6FC4               	movwf	??_UI& (0+255),b
  6151  00029A  0EE4               	movlw	228
  6152  00029C                     u6607:
  6153  00029C  2EE8               	decfsz	wreg,f,c
  6154  00029E  D7FE               	bra	u6607
  6155  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6156  0002A2  D7FC               	bra	u6607
  6157  0002A4  F000               	nop	
  6158                           
  6159                           ;UI.c: 120: lcdInst(0b10000000);;
  6160  0002A6  0E80               	movlw	128
  6161  0002A8  EC83  F01F         	call	_lcdInst
  6162                           
  6163                           ;UI.c: 121: printf("START:");
  6164  0002AC  0EC3               	movlw	low STR_7
  6165  0002AE  0100               	movlb	0	; () banked
  6166  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6167  0002B2  0EFF               	movlw	high STR_7
  6168  0002B4  0100               	movlb	0	; () banked
  6169  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6170  0002B8  EC93  F008         	call	_printf	;wreg free
  6171                           
  6172                           ;UI.c: 122: lcdInst(0b11000000);;
  6173  0002BC  0EC0               	movlw	192
  6174  0002BE  EC83  F01F         	call	_lcdInst
  6175                           
  6176                           ;UI.c: 123: char month[] = "MMM";
  6177  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6178  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6179  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6180  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6181                           
  6182                           ;UI.c: 124: switch(log_startTime[5]){
  6183  0002D2  D0C3               	goto	l6739
  6184  0002D4                     l6711:
  6185                           
  6186                           ;UI.c: 126: strcpy(month, "JAN");
  6187  0002D4  0ED6               	movlw	low UI@month
  6188  0002D6  0100               	movlb	0	; () banked
  6189  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6190  0002DA  0E00               	movlw	high UI@month
  6191  0002DC  0100               	movlb	0	; () banked
  6192  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6193  0002E0  0EDA               	movlw	low STR_8
  6194  0002E2  0100               	movlb	0	; () banked
  6195  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6196  0002E6  0EFF               	movlw	high STR_8
  6197  0002E8  0100               	movlb	0	; () banked
  6198  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6199  0002EC  EC21  F01D         	call	_strcpy	;wreg free
  6200                           
  6201                           ;UI.c: 127: break;
  6202  0002F0  D0E6               	goto	l6741
  6203  0002F2                     l6713:
  6204                           
  6205                           ;UI.c: 129: strcpy(month, "FEB");
  6206  0002F2  0ED6               	movlw	low UI@month
  6207  0002F4  0100               	movlb	0	; () banked
  6208  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6209  0002F8  0E00               	movlw	high UI@month
  6210  0002FA  0100               	movlb	0	; () banked
  6211  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6212  0002FE  0ECA               	movlw	low STR_9
  6213  000300  0100               	movlb	0	; () banked
  6214  000302  6F82               	movwf	strcpy@from& (0+255),b
  6215  000304  0EFF               	movlw	high STR_9
  6216  000306  0100               	movlb	0	; () banked
  6217  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6218  00030A  EC21  F01D         	call	_strcpy	;wreg free
  6219                           
  6220                           ;UI.c: 130: break;
  6221  00030E  D0D7               	goto	l6741
  6222  000310                     l6715:
  6223                           
  6224                           ;UI.c: 132: strcpy(month, "MAR");
  6225  000310  0ED6               	movlw	low UI@month
  6226  000312  0100               	movlb	0	; () banked
  6227  000314  6F80               	movwf	strcpy@to& (0+255),b
  6228  000316  0E00               	movlw	high UI@month
  6229  000318  0100               	movlb	0	; () banked
  6230  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6231  00031C  0EE6               	movlw	low STR_10
  6232  00031E  0100               	movlb	0	; () banked
  6233  000320  6F82               	movwf	strcpy@from& (0+255),b
  6234  000322  0EFF               	movlw	high STR_10
  6235  000324  0100               	movlb	0	; () banked
  6236  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6237  000328  EC21  F01D         	call	_strcpy	;wreg free
  6238                           
  6239                           ;UI.c: 133: break;
  6240  00032C  D0C8               	goto	l6741
  6241  00032E                     l6717:
  6242                           
  6243                           ;UI.c: 135: strcpy(month, "APR");
  6244  00032E  0ED6               	movlw	low UI@month
  6245  000330  0100               	movlb	0	; () banked
  6246  000332  6F80               	movwf	strcpy@to& (0+255),b
  6247  000334  0E00               	movlw	high UI@month
  6248  000336  0100               	movlb	0	; () banked
  6249  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6250  00033A  0EEA               	movlw	low STR_11
  6251  00033C  0100               	movlb	0	; () banked
  6252  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6253  000340  0EFF               	movlw	high STR_11
  6254  000342  0100               	movlb	0	; () banked
  6255  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6256  000346  EC21  F01D         	call	_strcpy	;wreg free
  6257                           
  6258                           ;UI.c: 136: break;
  6259  00034A  D0B9               	goto	l6741
  6260  00034C                     l6719:
  6261                           
  6262                           ;UI.c: 138: strcpy(month, "MAY");
  6263  00034C  0ED6               	movlw	low UI@month
  6264  00034E  0100               	movlb	0	; () banked
  6265  000350  6F80               	movwf	strcpy@to& (0+255),b
  6266  000352  0E00               	movlw	high UI@month
  6267  000354  0100               	movlb	0	; () banked
  6268  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6269  000358  0EFA               	movlw	low STR_12
  6270  00035A  0100               	movlb	0	; () banked
  6271  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6272  00035E  0EFF               	movlw	high STR_12
  6273  000360  0100               	movlb	0	; () banked
  6274  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6275  000364  EC21  F01D         	call	_strcpy	;wreg free
  6276                           
  6277                           ;UI.c: 139: break;
  6278  000368  D0AA               	goto	l6741
  6279  00036A                     l6721:
  6280                           
  6281                           ;UI.c: 141: strcpy(month, "JUN");
  6282  00036A  0ED6               	movlw	low UI@month
  6283  00036C  0100               	movlb	0	; () banked
  6284  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6285  000370  0E00               	movlw	high UI@month
  6286  000372  0100               	movlb	0	; () banked
  6287  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6288  000376  0EDE               	movlw	low STR_13
  6289  000378  0100               	movlb	0	; () banked
  6290  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6291  00037C  0EFF               	movlw	high STR_13
  6292  00037E  0100               	movlb	0	; () banked
  6293  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6294  000382  EC21  F01D         	call	_strcpy	;wreg free
  6295                           
  6296                           ;UI.c: 142: break;
  6297  000386  D09B               	goto	l6741
  6298  000388                     l6723:
  6299                           
  6300                           ;UI.c: 144: strcpy(month, "JUL");
  6301  000388  0ED6               	movlw	low UI@month
  6302  00038A  0100               	movlb	0	; () banked
  6303  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6304  00038E  0E00               	movlw	high UI@month
  6305  000390  0100               	movlb	0	; () banked
  6306  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6307  000394  0ED6               	movlw	low STR_14
  6308  000396  0100               	movlb	0	; () banked
  6309  000398  6F82               	movwf	strcpy@from& (0+255),b
  6310  00039A  0EFF               	movlw	high STR_14
  6311  00039C  0100               	movlb	0	; () banked
  6312  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6313  0003A0  EC21  F01D         	call	_strcpy	;wreg free
  6314                           
  6315                           ;UI.c: 145: break;
  6316  0003A4  D08C               	goto	l6741
  6317  0003A6                     l6725:
  6318                           
  6319                           ;UI.c: 147: strcpy(month, "AUG");
  6320  0003A6  0ED6               	movlw	low UI@month
  6321  0003A8  0100               	movlb	0	; () banked
  6322  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6323  0003AC  0E00               	movlw	high UI@month
  6324  0003AE  0100               	movlb	0	; () banked
  6325  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6326  0003B2  0ED2               	movlw	low STR_15
  6327  0003B4  0100               	movlb	0	; () banked
  6328  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6329  0003B8  0EFF               	movlw	high STR_15
  6330  0003BA  0100               	movlb	0	; () banked
  6331  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6332  0003BE  EC21  F01D         	call	_strcpy	;wreg free
  6333                           
  6334                           ;UI.c: 148: break;
  6335  0003C2  D07D               	goto	l6741
  6336  0003C4                     l6727:
  6337                           
  6338                           ;UI.c: 150: strcpy(month, "SEP");
  6339  0003C4  0ED6               	movlw	low UI@month
  6340  0003C6  0100               	movlb	0	; () banked
  6341  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6342  0003CA  0E00               	movlw	high UI@month
  6343  0003CC  0100               	movlb	0	; () banked
  6344  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6345  0003D0  0EE2               	movlw	low STR_16
  6346  0003D2  0100               	movlb	0	; () banked
  6347  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6348  0003D6  0EFF               	movlw	high STR_16
  6349  0003D8  0100               	movlb	0	; () banked
  6350  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6351  0003DC  EC21  F01D         	call	_strcpy	;wreg free
  6352                           
  6353                           ;UI.c: 151: break;
  6354  0003E0  D06E               	goto	l6741
  6355  0003E2                     l6729:
  6356                           
  6357                           ;UI.c: 153: strcpy(month, "OCT");
  6358  0003E2  0ED6               	movlw	low UI@month
  6359  0003E4  0100               	movlb	0	; () banked
  6360  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6361  0003E8  0E00               	movlw	high UI@month
  6362  0003EA  0100               	movlb	0	; () banked
  6363  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6364  0003EE  0EF2               	movlw	low STR_17
  6365  0003F0  0100               	movlb	0	; () banked
  6366  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6367  0003F4  0EFF               	movlw	high STR_17
  6368  0003F6  0100               	movlb	0	; () banked
  6369  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6370  0003FA  EC21  F01D         	call	_strcpy	;wreg free
  6371                           
  6372                           ;UI.c: 154: break;
  6373  0003FE  D05F               	goto	l6741
  6374  000400                     l6731:
  6375                           
  6376                           ;UI.c: 156: strcpy(month, "NOV");
  6377  000400  0ED6               	movlw	low UI@month
  6378  000402  0100               	movlb	0	; () banked
  6379  000404  6F80               	movwf	strcpy@to& (0+255),b
  6380  000406  0E00               	movlw	high UI@month
  6381  000408  0100               	movlb	0	; () banked
  6382  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6383  00040C  0EF6               	movlw	low STR_18
  6384  00040E  0100               	movlb	0	; () banked
  6385  000410  6F82               	movwf	strcpy@from& (0+255),b
  6386  000412  0EFF               	movlw	high STR_18
  6387  000414  0100               	movlb	0	; () banked
  6388  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6389  000418  EC21  F01D         	call	_strcpy	;wreg free
  6390                           
  6391                           ;UI.c: 157: break;
  6392  00041C  D050               	goto	l6741
  6393  00041E                     l6733:
  6394                           
  6395                           ;UI.c: 159: strcpy(month, "DEC");
  6396  00041E  0ED6               	movlw	low UI@month
  6397  000420  0100               	movlb	0	; () banked
  6398  000422  6F80               	movwf	strcpy@to& (0+255),b
  6399  000424  0E00               	movlw	high UI@month
  6400  000426  0100               	movlb	0	; () banked
  6401  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6402  00042A  0ECE               	movlw	low STR_19
  6403  00042C  0100               	movlb	0	; () banked
  6404  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6405  000430  0EFF               	movlw	high STR_19
  6406  000432  0100               	movlb	0	; () banked
  6407  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6408  000436  EC21  F01D         	call	_strcpy	;wreg free
  6409                           
  6410                           ;UI.c: 160: break;
  6411  00043A  D041               	goto	l6741
  6412  00043C                     l6735:
  6413                           
  6414                           ;UI.c: 162: strcpy(month, "ERR");
  6415  00043C  0ED6               	movlw	low UI@month
  6416  00043E  0100               	movlb	0	; () banked
  6417  000440  6F80               	movwf	strcpy@to& (0+255),b
  6418  000442  0E00               	movlw	high UI@month
  6419  000444  0100               	movlb	0	; () banked
  6420  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6421  000448  0EEE               	movlw	low STR_20
  6422  00044A  0100               	movlb	0	; () banked
  6423  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6424  00044E  0EFF               	movlw	high STR_20
  6425  000450  0100               	movlb	0	; () banked
  6426  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6427  000454  EC21  F01D         	call	_strcpy	;wreg free
  6428                           
  6429                           ;UI.c: 164: }
  6430                           
  6431                           ;UI.c: 163: break;
  6432  000458  D032               	goto	l6741
  6433  00045A                     l6739:
  6434  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6435  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6436  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6437                           
  6438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6439                           ; Switch size 1, requested type "space"
  6440                           ; Number of cases is 1, Range of values is 0 to 0
  6441                           ; switch strategies available:
  6442                           ; Name         Instructions Cycles
  6443                           ; simple_byte            4     3 (average)
  6444                           ;	Chosen strategy is simple_byte
  6445  000466  0100               	movlb	0	; () banked
  6446  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6447  00046A  0A00               	xorlw	0	; case 0
  6448  00046C  A4D8               	btfss	status,2,c
  6449  00046E  D7E6               	goto	l6735
  6450                           
  6451                           ; BSR set to: 0
  6452                           ; Switch size 1, requested type "space"
  6453                           ; Number of cases is 12, Range of values is 1 to 12
  6454                           ; switch strategies available:
  6455                           ; Name         Instructions Cycles
  6456                           ; simple_byte           37    19 (average)
  6457                           ;	Chosen strategy is simple_byte
  6458  000470  0100               	movlb	0	; () banked
  6459  000472  51C4               	movf	??_UI& (0+255),w,b
  6460  000474  0A01               	xorlw	1	; case 1
  6461  000476  B4D8               	btfsc	status,2,c
  6462  000478  D72D               	goto	l6711
  6463  00047A  0A03               	xorlw	3	; case 2
  6464  00047C  B4D8               	btfsc	status,2,c
  6465  00047E  D739               	goto	l6713
  6466  000480  0A01               	xorlw	1	; case 3
  6467  000482  B4D8               	btfsc	status,2,c
  6468  000484  D745               	goto	l6715
  6469  000486  0A07               	xorlw	7	; case 4
  6470  000488  B4D8               	btfsc	status,2,c
  6471  00048A  D751               	goto	l6717
  6472  00048C  0A01               	xorlw	1	; case 5
  6473  00048E  B4D8               	btfsc	status,2,c
  6474  000490  D75D               	goto	l6719
  6475  000492  0A03               	xorlw	3	; case 6
  6476  000494  B4D8               	btfsc	status,2,c
  6477  000496  D769               	goto	l6721
  6478  000498  0A01               	xorlw	1	; case 7
  6479  00049A  B4D8               	btfsc	status,2,c
  6480  00049C  D775               	goto	l6723
  6481  00049E  0A0F               	xorlw	15	; case 8
  6482  0004A0  B4D8               	btfsc	status,2,c
  6483  0004A2  D781               	goto	l6725
  6484  0004A4  0A01               	xorlw	1	; case 9
  6485  0004A6  B4D8               	btfsc	status,2,c
  6486  0004A8  D78D               	goto	l6727
  6487  0004AA  0A03               	xorlw	3	; case 10
  6488  0004AC  B4D8               	btfsc	status,2,c
  6489  0004AE  D799               	goto	l6729
  6490  0004B0  0A01               	xorlw	1	; case 11
  6491  0004B2  B4D8               	btfsc	status,2,c
  6492  0004B4  D7A5               	goto	l6731
  6493  0004B6  0A07               	xorlw	7	; case 12
  6494  0004B8  B4D8               	btfsc	status,2,c
  6495  0004BA  D7B1               	goto	l6733
  6496  0004BC  D7BF               	goto	l6735
  6497  0004BE                     l6741:
  6498                           
  6499                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6500  0004BE  0EBE               	movlw	low STR_21
  6501  0004C0  0100               	movlb	0	; () banked
  6502  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6503  0004C4  0EFB               	movlw	high STR_21
  6504  0004C6  0100               	movlb	0	; () banked
  6505  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6506  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6507  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6508  0004D2  0ED6               	movlw	low UI@month
  6509  0004D4  0100               	movlb	0	; () banked
  6510  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6511  0004D8  0E00               	movlw	high UI@month
  6512  0004DA  0100               	movlb	0	; () banked
  6513  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6514  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6515  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6516  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6517  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6518  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6519  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6520  0004F6  EC93  F008         	call	_printf	;wreg free
  6521                           
  6522                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6523  0004FA  0E00               	movlw	0
  6524  0004FC  0100               	movlb	0	; () banked
  6525  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6526  000500                     l6745:
  6527                           
  6528                           ; BSR set to: 0
  6529  000500  0E63               	movlw	99
  6530  000502  0100               	movlb	0	; () banked
  6531  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6532  000506  D001               	goto	l6749
  6533  000508  D00C               	goto	l6753
  6534  00050A                     l6749:
  6535                           
  6536                           ; BSR set to: 0
  6537  00050A  0E68               	movlw	104
  6538  00050C  0100               	movlb	0	; () banked
  6539  00050E  6FC4               	movwf	??_UI& (0+255),b
  6540  000510  0EE4               	movlw	228
  6541  000512                     u6617:
  6542  000512  2EE8               	decfsz	wreg,f,c
  6543  000514  D7FE               	bra	u6617
  6544  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6545  000518  D7FC               	bra	u6617
  6546  00051A  F000               	nop	
  6547  00051C  0100               	movlb	0	; () banked
  6548  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6549  000520  D7EF               	goto	l6745
  6550  000522                     l6753:
  6551                           
  6552                           ; BSR set to: 0
  6553  000522  0100               	movlb	0	; () banked
  6554  000524  51F8               	movf	_logstate& (0+255),w,b
  6555  000526  0100               	movlb	0	; () banked
  6556  000528  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6557  00052A  B4D8               	btfsc	status,2,c
  6558  00052C  0012               	return	
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6562                           
  6563                           ; BSR set to: 0
  6564                           
  6565                           ; BSR set to: 0
  6566  00052E  0E00               	movlw	0
  6567  000530  0100               	movlb	0	; () banked
  6568  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6569  000534                     l6759:
  6570                           
  6571                           ; BSR set to: 0
  6572  000534  0E63               	movlw	99
  6573  000536  0100               	movlb	0	; () banked
  6574  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6575  00053A  D001               	goto	l6763
  6576  00053C  D00C               	goto	l6767
  6577  00053E                     l6763:
  6578                           
  6579                           ; BSR set to: 0
  6580  00053E  0E68               	movlw	104
  6581  000540  0100               	movlb	0	; () banked
  6582  000542  6FC4               	movwf	??_UI& (0+255),b
  6583  000544  0EE4               	movlw	228
  6584  000546                     u6627:
  6585  000546  2EE8               	decfsz	wreg,f,c
  6586  000548  D7FE               	bra	u6627
  6587  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6588  00054C  D7FC               	bra	u6627
  6589  00054E  F000               	nop	
  6590  000550  0100               	movlb	0	; () banked
  6591  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6592  000554  D7EF               	goto	l6759
  6593  000556                     l6767:
  6594                           
  6595                           ; BSR set to: 0
  6596  000556  0100               	movlb	0	; () banked
  6597  000558  51F8               	movf	_logstate& (0+255),w,b
  6598  00055A  0100               	movlb	0	; () banked
  6599  00055C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6600  00055E  B4D8               	btfsc	status,2,c
  6601  000560  0012               	return	
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6605                           
  6606                           ; BSR set to: 0
  6607                           
  6608                           ; BSR set to: 0
  6609  000562  0E01               	movlw	1
  6610  000564  EC83  F01F         	call	_lcdInst
  6611  000568  0E68               	movlw	104
  6612  00056A  0100               	movlb	0	; () banked
  6613  00056C  6FC4               	movwf	??_UI& (0+255),b
  6614  00056E  0EE4               	movlw	228
  6615  000570                     u6637:
  6616  000570  2EE8               	decfsz	wreg,f,c
  6617  000572  D7FE               	bra	u6637
  6618  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6619  000576  D7FC               	bra	u6637
  6620  000578  F000               	nop	
  6621                           
  6622                           ;UI.c: 171: lcdInst(0b10000000);;
  6623  00057A  0E80               	movlw	128
  6624  00057C  EC83  F01F         	call	_lcdInst
  6625                           
  6626                           ;UI.c: 172: printf("DURATION:");
  6627  000580  0EA3               	movlw	low STR_22
  6628  000582  0100               	movlb	0	; () banked
  6629  000584  6F8E               	movwf	printf@f& (0+255),b
  6630  000586  0EFF               	movlw	high STR_22
  6631  000588  0100               	movlb	0	; () banked
  6632  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6633  00058C  EC93  F008         	call	_printf	;wreg free
  6634                           
  6635                           ;UI.c: 173: lcdInst(0b11000000);;
  6636  000590  0EC0               	movlw	192
  6637  000592  EC83  F01F         	call	_lcdInst
  6638                           
  6639                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6640  000596  0E0E               	movlw	14
  6641  000598  0100               	movlb	0	; () banked
  6642  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6643  00059C  0E10               	movlw	16
  6644  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6645  0005A0  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6646  0005A4  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6647  0005A8  ECBC  F018         	call	___awmod	;wreg free
  6648  0005AC  C080  F0C6         	movff	?___awmod,_UI$2144
  6649  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2144+1
  6650                           
  6651                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6652  0005B4  0E33               	movlw	low STR_23
  6653  0005B6  0100               	movlb	0	; () banked
  6654  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6655  0005BA  0EFF               	movlw	high STR_23
  6656  0005BC  0100               	movlb	0	; () banked
  6657  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6658  0005C0  0E0E               	movlw	14
  6659  0005C2  0100               	movlb	0	; () banked
  6660  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6661  0005C6  0E10               	movlw	16
  6662  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6663  0005CA  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6664  0005CE  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6665  0005D2  ECBC  F018         	call	___awmod	;wreg free
  6666  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6667  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6668  0005DE  0E00               	movlw	0
  6669  0005E0  0100               	movlb	0	; () banked
  6670  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6671  0005E4  0E3C               	movlw	60
  6672  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6673  0005E8  EC4E  F017         	call	___awdiv	;wreg free
  6674  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6675  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6676  0005F4  C0C6  F080         	movff	_UI$2144,___awmod@dividend
  6677  0005F8  C0C7  F081         	movff	_UI$2144+1,___awmod@dividend+1
  6678  0005FC  0E00               	movlw	0
  6679  0005FE  0100               	movlb	0	; () banked
  6680  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6681  000602  0E3C               	movlw	60
  6682  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6683  000606  ECBC  F018         	call	___awmod	;wreg free
  6684  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6685  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6686  000612  EC93  F008         	call	_printf	;wreg free
  6687                           
  6688                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6689  000616  0E00               	movlw	0
  6690  000618  0100               	movlb	0	; () banked
  6691  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6692  00061C                     l6787:
  6693                           
  6694                           ; BSR set to: 0
  6695  00061C  0E63               	movlw	99
  6696  00061E  0100               	movlb	0	; () banked
  6697  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6698  000622  D001               	goto	l6791
  6699  000624  D00C               	goto	l6795
  6700  000626                     l6791:
  6701                           
  6702                           ; BSR set to: 0
  6703  000626  0E68               	movlw	104
  6704  000628  0100               	movlb	0	; () banked
  6705  00062A  6FC4               	movwf	??_UI& (0+255),b
  6706  00062C  0EE4               	movlw	228
  6707  00062E                     u6647:
  6708  00062E  2EE8               	decfsz	wreg,f,c
  6709  000630  D7FE               	bra	u6647
  6710  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6711  000634  D7FC               	bra	u6647
  6712  000636  F000               	nop	
  6713  000638  0100               	movlb	0	; () banked
  6714  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6715  00063C  D7EF               	goto	l6787
  6716  00063E                     l6795:
  6717                           
  6718                           ; BSR set to: 0
  6719  00063E  0100               	movlb	0	; () banked
  6720  000640  51F8               	movf	_logstate& (0+255),w,b
  6721  000642  0100               	movlb	0	; () banked
  6722  000644  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6723  000646  B4D8               	btfsc	status,2,c
  6724  000648  0012               	return	
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6728                           
  6729                           ; BSR set to: 0
  6730                           
  6731                           ; BSR set to: 0
  6732  00064A  0E00               	movlw	0
  6733  00064C  0100               	movlb	0	; () banked
  6734  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6735  000650                     l6801:
  6736                           
  6737                           ; BSR set to: 0
  6738  000650  0E63               	movlw	99
  6739  000652  0100               	movlb	0	; () banked
  6740  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6741  000656  D001               	goto	l6805
  6742  000658  D00C               	goto	l6809
  6743  00065A                     l6805:
  6744                           
  6745                           ; BSR set to: 0
  6746  00065A  0E68               	movlw	104
  6747  00065C  0100               	movlb	0	; () banked
  6748  00065E  6FC4               	movwf	??_UI& (0+255),b
  6749  000660  0EE4               	movlw	228
  6750  000662                     u6657:
  6751  000662  2EE8               	decfsz	wreg,f,c
  6752  000664  D7FE               	bra	u6657
  6753  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6754  000668  D7FC               	bra	u6657
  6755  00066A  F000               	nop	
  6756  00066C  0100               	movlb	0	; () banked
  6757  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6758  000670  D7EF               	goto	l6801
  6759  000672                     l6809:
  6760                           
  6761                           ; BSR set to: 0
  6762  000672  0100               	movlb	0	; () banked
  6763  000674  51F8               	movf	_logstate& (0+255),w,b
  6764  000676  0100               	movlb	0	; () banked
  6765  000678  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6766  00067A  B4D8               	btfsc	status,2,c
  6767  00067C  0012               	return	
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6771                           
  6772                           ; BSR set to: 0
  6773                           
  6774                           ; BSR set to: 0
  6775  00067E  0E01               	movlw	1
  6776  000680  EC83  F01F         	call	_lcdInst
  6777  000684  0E68               	movlw	104
  6778  000686  0100               	movlb	0	; () banked
  6779  000688  6FC4               	movwf	??_UI& (0+255),b
  6780  00068A  0EE4               	movlw	228
  6781  00068C                     u6667:
  6782  00068C  2EE8               	decfsz	wreg,f,c
  6783  00068E  D7FE               	bra	u6667
  6784  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6785  000692  D7FC               	bra	u6667
  6786  000694  F000               	nop	
  6787                           
  6788                           ;UI.c: 180: lcdInst(0b10000000);;
  6789  000696  0E80               	movlw	128
  6790  000698  EC83  F01F         	call	_lcdInst
  6791                           
  6792                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6793  00069C  0E78               	movlw	low STR_24
  6794  00069E  0100               	movlb	0	; () banked
  6795  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6796  0006A2  0EFD               	movlw	high STR_24
  6797  0006A4  0100               	movlb	0	; () banked
  6798  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6799  0006A8  EC93  F008         	call	_printf	;wreg free
  6800                           
  6801                           ;UI.c: 182: lcdInst(0b11000000);;
  6802  0006AC  0EC0               	movlw	192
  6803  0006AE  EC83  F01F         	call	_lcdInst
  6804                           
  6805                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6806  0006B2  0EFE               	movlw	low STR_25
  6807  0006B4  0100               	movlb	0	; () banked
  6808  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6809  0006B8  0EFB               	movlw	high STR_25
  6810  0006BA  0100               	movlb	0	; () banked
  6811  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6812  0006BE  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6813  0006C2  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6814  0006C6  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6815  0006CA  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6816  0006CE  EC93  F008         	call	_printf	;wreg free
  6817                           
  6818                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6819  0006D2  0E00               	movlw	0
  6820  0006D4  0100               	movlb	0	; () banked
  6821  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6822  0006D8                     l6827:
  6823                           
  6824                           ; BSR set to: 0
  6825  0006D8  0E63               	movlw	99
  6826  0006DA  0100               	movlb	0	; () banked
  6827  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6828  0006DE  D001               	goto	l6831
  6829  0006E0  D00C               	goto	l6835
  6830  0006E2                     l6831:
  6831                           
  6832                           ; BSR set to: 0
  6833  0006E2  0E68               	movlw	104
  6834  0006E4  0100               	movlb	0	; () banked
  6835  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6836  0006E8  0EE4               	movlw	228
  6837  0006EA                     u6677:
  6838  0006EA  2EE8               	decfsz	wreg,f,c
  6839  0006EC  D7FE               	bra	u6677
  6840  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6841  0006F0  D7FC               	bra	u6677
  6842  0006F2  F000               	nop	
  6843  0006F4  0100               	movlb	0	; () banked
  6844  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6845  0006F8  D7EF               	goto	l6827
  6846  0006FA                     l6835:
  6847                           
  6848                           ; BSR set to: 0
  6849  0006FA  0100               	movlb	0	; () banked
  6850  0006FC  51F8               	movf	_logstate& (0+255),w,b
  6851  0006FE  0100               	movlb	0	; () banked
  6852  000700  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6853  000702  B4D8               	btfsc	status,2,c
  6854  000704  0012               	return	
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  000706  0E00               	movlw	0
  6863  000708  0100               	movlb	0	; () banked
  6864  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6865  00070C                     l6841:
  6866                           
  6867                           ; BSR set to: 0
  6868  00070C  0E63               	movlw	99
  6869  00070E  0100               	movlb	0	; () banked
  6870  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6871  000712  D001               	goto	l6845
  6872  000714  D00C               	goto	l6849
  6873  000716                     l6845:
  6874                           
  6875                           ; BSR set to: 0
  6876  000716  0E68               	movlw	104
  6877  000718  0100               	movlb	0	; () banked
  6878  00071A  6FC4               	movwf	??_UI& (0+255),b
  6879  00071C  0EE4               	movlw	228
  6880  00071E                     u6687:
  6881  00071E  2EE8               	decfsz	wreg,f,c
  6882  000720  D7FE               	bra	u6687
  6883  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6884  000724  D7FC               	bra	u6687
  6885  000726  F000               	nop	
  6886  000728  0100               	movlb	0	; () banked
  6887  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6888  00072C  D7EF               	goto	l6841
  6889  00072E                     l6849:
  6890                           
  6891                           ; BSR set to: 0
  6892  00072E  0100               	movlb	0	; () banked
  6893  000730  51F8               	movf	_logstate& (0+255),w,b
  6894  000732  0100               	movlb	0	; () banked
  6895  000734  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6896  000736  B4D8               	btfsc	status,2,c
  6897  000738  0012               	return	
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6901                           
  6902                           ; BSR set to: 0
  6903                           
  6904                           ; BSR set to: 0
  6905  00073A  0E01               	movlw	1
  6906  00073C  EC83  F01F         	call	_lcdInst
  6907  000740  0E68               	movlw	104
  6908  000742  0100               	movlb	0	; () banked
  6909  000744  6FC4               	movwf	??_UI& (0+255),b
  6910  000746  0EE4               	movlw	228
  6911  000748                     u6697:
  6912  000748  2EE8               	decfsz	wreg,f,c
  6913  00074A  D7FE               	bra	u6697
  6914  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  6915  00074E  D7FC               	bra	u6697
  6916  000750  F000               	nop	
  6917                           
  6918                           ;UI.c: 189: lcdInst(0b10000000);;
  6919  000752  0E80               	movlw	128
  6920  000754  EC83  F01F         	call	_lcdInst
  6921                           
  6922                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  6923  000758  0E89               	movlw	low STR_26
  6924  00075A  0100               	movlb	0	; () banked
  6925  00075C  6F8E               	movwf	printf@f& (0+255),b
  6926  00075E  0EFD               	movlw	high STR_26
  6927  000760  0100               	movlb	0	; () banked
  6928  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  6929  000764  EC93  F008         	call	_printf	;wreg free
  6930                           
  6931                           ;UI.c: 191: lcdInst(0b11000000);;
  6932  000768  0EC0               	movlw	192
  6933  00076A  EC83  F01F         	call	_lcdInst
  6934                           
  6935                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6936  00076E  0EEB               	movlw	low STR_27
  6937  000770  0100               	movlb	0	; () banked
  6938  000772  6F8E               	movwf	printf@f& (0+255),b
  6939  000774  0EFB               	movlw	high STR_27
  6940  000776  0100               	movlb	0	; () banked
  6941  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  6942  00077A  C0EC  F090         	movff	_log_count_can_no_lab,?_printf+2
  6943  00077E  C0ED  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6944  000782  C0EE  F092         	movff	_log_count_can_w_lab,?_printf+4
  6945  000786  C0EF  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6946  00078A  EC93  F008         	call	_printf	;wreg free
  6947                           
  6948                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6949  00078E  0E00               	movlw	0
  6950  000790  0100               	movlb	0	; () banked
  6951  000792  6FD2               	movwf	UI@i_442& (0+255),b
  6952  000794                     l6867:
  6953                           
  6954                           ; BSR set to: 0
  6955  000794  0E63               	movlw	99
  6956  000796  0100               	movlb	0	; () banked
  6957  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  6958  00079A  D001               	goto	l6871
  6959  00079C  D00C               	goto	l6875
  6960  00079E                     l6871:
  6961                           
  6962                           ; BSR set to: 0
  6963  00079E  0E68               	movlw	104
  6964  0007A0  0100               	movlb	0	; () banked
  6965  0007A2  6FC4               	movwf	??_UI& (0+255),b
  6966  0007A4  0EE4               	movlw	228
  6967  0007A6                     u6707:
  6968  0007A6  2EE8               	decfsz	wreg,f,c
  6969  0007A8  D7FE               	bra	u6707
  6970  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  6971  0007AC  D7FC               	bra	u6707
  6972  0007AE  F000               	nop	
  6973  0007B0  0100               	movlb	0	; () banked
  6974  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  6975  0007B4  D7EF               	goto	l6867
  6976  0007B6                     l6875:
  6977                           
  6978                           ; BSR set to: 0
  6979  0007B6  0100               	movlb	0	; () banked
  6980  0007B8  51F8               	movf	_logstate& (0+255),w,b
  6981  0007BA  0100               	movlb	0	; () banked
  6982  0007BC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6983  0007BE  B4D8               	btfsc	status,2,c
  6984  0007C0  0012               	return	
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992  0007C2  0E00               	movlw	0
  6993  0007C4  0100               	movlb	0	; () banked
  6994  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  6995  0007C8                     l6881:
  6996                           
  6997                           ; BSR set to: 0
  6998  0007C8  0E63               	movlw	99
  6999  0007CA  0100               	movlb	0	; () banked
  7000  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7001  0007CE  D001               	goto	l6885
  7002  0007D0  D00C               	goto	l6889
  7003  0007D2                     l6885:
  7004                           
  7005                           ; BSR set to: 0
  7006  0007D2  0E68               	movlw	104
  7007  0007D4  0100               	movlb	0	; () banked
  7008  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7009  0007D8  0EE4               	movlw	228
  7010  0007DA                     u6717:
  7011  0007DA  2EE8               	decfsz	wreg,f,c
  7012  0007DC  D7FE               	bra	u6717
  7013  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7014  0007E0  D7FC               	bra	u6717
  7015  0007E2  F000               	nop	
  7016  0007E4  0100               	movlb	0	; () banked
  7017  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7018  0007E8  D7EF               	goto	l6881
  7019  0007EA                     l6889:
  7020                           
  7021                           ; BSR set to: 0
  7022  0007EA  0100               	movlb	0	; () banked
  7023  0007EC  51F8               	movf	_logstate& (0+255),w,b
  7024  0007EE  0100               	movlb	0	; () banked
  7025  0007F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7026  0007F2  B4D8               	btfsc	status,2,c
  7027  0007F4  0012               	return	
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7031                           
  7032                           ; BSR set to: 0
  7033                           
  7034                           ; BSR set to: 0
  7035  0007F6  0E01               	movlw	1
  7036  0007F8  EC83  F01F         	call	_lcdInst
  7037  0007FC  0E68               	movlw	104
  7038  0007FE  0100               	movlb	0	; () banked
  7039  000800  6FC4               	movwf	??_UI& (0+255),b
  7040  000802  0EE4               	movlw	228
  7041  000804                     u6727:
  7042  000804  2EE8               	decfsz	wreg,f,c
  7043  000806  D7FE               	bra	u6727
  7044  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7045  00080A  D7FC               	bra	u6727
  7046  00080C  F000               	nop	
  7047                           
  7048                           ;UI.c: 198: lcdInst(0b10000000);;
  7049  00080E  0E80               	movlw	128
  7050  000810  EC83  F01F         	call	_lcdInst
  7051                           
  7052                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7053  000814  0E9A               	movlw	low STR_28
  7054  000816  0100               	movlb	0	; () banked
  7055  000818  6F8E               	movwf	printf@f& (0+255),b
  7056  00081A  0EFD               	movlw	high STR_28
  7057  00081C  0100               	movlb	0	; () banked
  7058  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7059  000820  EC93  F008         	call	_printf	;wreg free
  7060                           
  7061                           ;UI.c: 200: lcdInst(0b11000000);;
  7062  000824  0EC0               	movlw	192
  7063  000826  EC83  F01F         	call	_lcdInst
  7064                           
  7065                           ;UI.c: 201: printf("%d", log_count_total);
  7066  00082A  0EFB               	movlw	low (STR_27+16)
  7067  00082C  0100               	movlb	0	; () banked
  7068  00082E  6F8E               	movwf	printf@f& (0+255),b
  7069  000830  0EFB               	movlw	high (STR_27+16)
  7070  000832  0100               	movlb	0	; () banked
  7071  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7072  000836  C0F4  F090         	movff	_log_count_total,?_printf+2
  7073  00083A  C0F5  F091         	movff	_log_count_total+1,?_printf+3
  7074  00083E  EC93  F008         	call	_printf	;wreg free
  7075                           
  7076                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7077  000842  0E00               	movlw	0
  7078  000844  0100               	movlb	0	; () banked
  7079  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7080  000848                     l6907:
  7081                           
  7082                           ; BSR set to: 0
  7083  000848  0E63               	movlw	99
  7084  00084A  0100               	movlb	0	; () banked
  7085  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7086  00084E  D001               	goto	l6911
  7087  000850  D00C               	goto	l6915
  7088  000852                     l6911:
  7089                           
  7090                           ; BSR set to: 0
  7091  000852  0E68               	movlw	104
  7092  000854  0100               	movlb	0	; () banked
  7093  000856  6FC4               	movwf	??_UI& (0+255),b
  7094  000858  0EE4               	movlw	228
  7095  00085A                     u6737:
  7096  00085A  2EE8               	decfsz	wreg,f,c
  7097  00085C  D7FE               	bra	u6737
  7098  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7099  000860  D7FC               	bra	u6737
  7100  000862  F000               	nop	
  7101  000864  0100               	movlb	0	; () banked
  7102  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7103  000868  D7EF               	goto	l6907
  7104  00086A                     l6915:
  7105                           
  7106                           ; BSR set to: 0
  7107  00086A  0100               	movlb	0	; () banked
  7108  00086C  51F8               	movf	_logstate& (0+255),w,b
  7109  00086E  0100               	movlb	0	; () banked
  7110  000870  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7111  000872  B4D8               	btfsc	status,2,c
  7112  000874  0012               	return	
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7116                           
  7117                           ; BSR set to: 0
  7118                           
  7119                           ; BSR set to: 0
  7120  000876  0E00               	movlw	0
  7121  000878  0100               	movlb	0	; () banked
  7122  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7123  00087C                     l6921:
  7124                           
  7125                           ; BSR set to: 0
  7126  00087C  0E63               	movlw	99
  7127  00087E  0100               	movlb	0	; () banked
  7128  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7129  000882  D001               	goto	l6925
  7130  000884  D00C               	goto	l6929
  7131  000886                     l6925:
  7132                           
  7133                           ; BSR set to: 0
  7134  000886  0E68               	movlw	104
  7135  000888  0100               	movlb	0	; () banked
  7136  00088A  6FC4               	movwf	??_UI& (0+255),b
  7137  00088C  0EE4               	movlw	228
  7138  00088E                     u6747:
  7139  00088E  2EE8               	decfsz	wreg,f,c
  7140  000890  D7FE               	bra	u6747
  7141  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7142  000894  D7FC               	bra	u6747
  7143  000896  F000               	nop	
  7144  000898  0100               	movlb	0	; () banked
  7145  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7146  00089C  D7EF               	goto	l6921
  7147  00089E                     l6929:
  7148                           
  7149                           ; BSR set to: 0
  7150  00089E  0100               	movlb	0	; () banked
  7151  0008A0  51F8               	movf	_logstate& (0+255),w,b
  7152  0008A2  0100               	movlb	0	; () banked
  7153  0008A4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7154  0008A6  B4D8               	btfsc	status,2,c
  7155  0008A8  0012               	return	
  7156  0008AA                     l6933:
  7157  0008AA  0100               	movlb	0	; () banked
  7158  0008AC  51F8               	movf	_logstate& (0+255),w,b
  7159  0008AE  0100               	movlb	0	; () banked
  7160  0008B0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7161  0008B2  B4D8               	btfsc	status,2,c
  7162  0008B4  0012               	return	
  7163  0008B6  D44A               	goto	l6629
  7164  0008B8                     __end_of_UI:
  7165                           	opt stack 0
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           intcon2	equ	0xFF1
  7174                           intcon3	equ	0xFF0
  7175                           postinc0	equ	0xFEE
  7176                           wreg	equ	0xFE8
  7177                           postdec1	equ	0xFE5
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _printRTC *****************
  7187 ;; Defined at:
  7188 ;;		line 63 in file "RTC.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  i               2   66[BANK0 ] int 
  7193 ;;  INT_time       14   46[BANK0 ] int [7]
  7194 ;;  month           4   62[BANK0 ] unsigned char [4]
  7195 ;;  RTC_month       2   60[BANK0 ] int 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      void 
  7198 ;; Registers used:
  7199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;Total ram usage:       25 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:   10
  7212 ;; This function calls:
  7213 ;;		_getRTC
  7214 ;;		_lcdInst
  7215 ;;		_printf
  7216 ;;		_strcpy
  7217 ;; This function is called by:
  7218 ;;		_UI
  7219 ;;		_change_state_to_menu_start
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text22
  7224  0018CC                     __ptext22:
  7225                           	opt stack 0
  7226  0018CC                     _printRTC:
  7227                           	opt stack 18
  7228                           
  7229                           ;RTC.c: 64: getRTC();
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;incstack = 0
  7233  0018CC  ECA1  F019         	call	_getRTC	;wreg free
  7234                           
  7235                           ;RTC.c: 65: char month[] = "MMM";
  7236  0018D0  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7237  0018D4  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7238  0018D8  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7239  0018DC  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7240                           
  7241                           ;RTC.c: 66: int INT_time[7];
  7242                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7243  0018E0  0E00               	movlw	0
  7244  0018E2  0100               	movlb	0	; () banked
  7245  0018E4  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7246  0018E6  0E00               	movlw	0
  7247  0018E8  6FC2               	movwf	printRTC@i& (0+255),b
  7248                           
  7249                           ; BSR set to: 0
  7250  0018EA  0100               	movlb	0	; () banked
  7251  0018EC  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7252  0018EE  D008               	goto	l5339
  7253  0018F0  0100               	movlb	0	; () banked
  7254  0018F2  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7255  0018F4  E146               	bnz	l591
  7256  0018F6  0E07               	movlw	7
  7257  0018F8  0100               	movlb	0	; () banked
  7258  0018FA  5DC2               	subwf	printRTC@i& (0+255),w,b
  7259  0018FC  B0D8               	btfsc	status,0,c
  7260  0018FE  D041               	goto	l591
  7261  001900                     l5339:
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7265  001900  0E24               	movlw	low _time
  7266  001902  0100               	movlb	0	; () banked
  7267  001904  25C2               	addwf	printRTC@i& (0+255),w,b
  7268  001906  6ED9               	movwf	fsr2l,c
  7269  001908  0E01               	movlw	high _time
  7270  00190A  0100               	movlb	0	; () banked
  7271  00190C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7272  00190E  6EDA               	movwf	fsr2h,c
  7273  001910  50DF               	movf	indf2,w,c
  7274  001912  0100               	movlb	0	; () banked
  7275  001914  6FAB               	movwf	??_printRTC& (0+255),b
  7276  001916  0100               	movlb	0	; () banked
  7277  001918  3BAB               	swapf	??_printRTC& (0+255),f,b
  7278  00191A  0E0F               	movlw	15
  7279  00191C  17AB               	andwf	??_printRTC& (0+255),f,b
  7280  00191E  0E0F               	movlw	15
  7281  001920  0100               	movlb	0	; () banked
  7282  001922  17AB               	andwf	??_printRTC& (0+255),f,b
  7283  001924  0100               	movlb	0	; () banked
  7284  001926  51AB               	movf	??_printRTC& (0+255),w,b
  7285  001928  0D0A               	mullw	10
  7286  00192A  0E24               	movlw	low _time
  7287  00192C  0100               	movlb	0	; () banked
  7288  00192E  25C2               	addwf	printRTC@i& (0+255),w,b
  7289  001930  6ED9               	movwf	fsr2l,c
  7290  001932  0E01               	movlw	high _time
  7291  001934  0100               	movlb	0	; () banked
  7292  001936  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7293  001938  6EDA               	movwf	fsr2h,c
  7294  00193A  50DF               	movf	indf2,w,c
  7295  00193C  0B0F               	andlw	15
  7296  00193E  0100               	movlb	0	; () banked
  7297  001940  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7298  001942  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7299  001944  50F3               	movf	prodl,w,c
  7300  001946  0100               	movlb	0	; () banked
  7301  001948  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7302  00194A  50F4               	movf	prodh,w,c
  7303  00194C  0100               	movlb	0	; () banked
  7304  00194E  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7305  001950  90D8               	bcf	status,0,c
  7306  001952  0100               	movlb	0	; () banked
  7307  001954  35C2               	rlcf	printRTC@i& (0+255),w,b
  7308  001956  6ED9               	movwf	fsr2l,c
  7309  001958  0100               	movlb	0	; () banked
  7310  00195A  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7311  00195C  6EDA               	movwf	fsr2h,c
  7312  00195E  0EAE               	movlw	low printRTC@INT_time
  7313  001960  26D9               	addwf	fsr2l,f,c
  7314  001962  0E00               	movlw	high printRTC@INT_time
  7315  001964  22DA               	addwfc	fsr2h,f,c
  7316  001966  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7317  00196A  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7318                           
  7319                           ; BSR set to: 0
  7320  00196E  0100               	movlb	0	; () banked
  7321  001970  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7322  001972  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7323                           
  7324                           ; BSR set to: 0
  7325  001974  0100               	movlb	0	; () banked
  7326  001976  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7327  001978  D7C3               	goto	l5339
  7328  00197A  0100               	movlb	0	; () banked
  7329  00197C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7330  00197E  E101               	bnz	u4170
  7331  001980  D7BA               	goto	L5
  7332  001982                     u4170:
  7333  001982                     l591:
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;RTC.c: 69: }
  7337                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7338  001982  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7339  001986  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7340                           
  7341                           ;RTC.c: 71: switch(RTC_month){
  7342  00198A  D0B4               	goto	l5371
  7343  00198C                     l5345:
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;RTC.c: 73: strcpy(month, "JAN");
  7347  00198C  0EBE               	movlw	low printRTC@month
  7348  00198E  0100               	movlb	0	; () banked
  7349  001990  6F80               	movwf	strcpy@to& (0+255),b
  7350  001992  0E00               	movlw	high printRTC@month
  7351  001994  0100               	movlb	0	; () banked
  7352  001996  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7353  001998  0EDA               	movlw	low STR_8
  7354  00199A  0100               	movlb	0	; () banked
  7355  00199C  6F82               	movwf	strcpy@from& (0+255),b
  7356  00199E  0EFF               	movlw	high STR_8
  7357  0019A0  0100               	movlb	0	; () banked
  7358  0019A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7359  0019A4  EC21  F01D         	call	_strcpy	;wreg free
  7360                           
  7361                           ;RTC.c: 74: break;
  7362  0019A8  D0D4               	goto	l5373
  7363  0019AA                     l5347:
  7364                           
  7365                           ;RTC.c: 76: strcpy(month, "FEB");
  7366  0019AA  0EBE               	movlw	low printRTC@month
  7367  0019AC  0100               	movlb	0	; () banked
  7368  0019AE  6F80               	movwf	strcpy@to& (0+255),b
  7369  0019B0  0E00               	movlw	high printRTC@month
  7370  0019B2  0100               	movlb	0	; () banked
  7371  0019B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7372  0019B6  0ECA               	movlw	low STR_9
  7373  0019B8  0100               	movlb	0	; () banked
  7374  0019BA  6F82               	movwf	strcpy@from& (0+255),b
  7375  0019BC  0EFF               	movlw	high STR_9
  7376  0019BE  0100               	movlb	0	; () banked
  7377  0019C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7378  0019C2  EC21  F01D         	call	_strcpy	;wreg free
  7379                           
  7380                           ;RTC.c: 77: break;
  7381  0019C6  D0C5               	goto	l5373
  7382  0019C8                     l5349:
  7383                           
  7384                           ;RTC.c: 79: strcpy(month, "MAR");
  7385  0019C8  0EBE               	movlw	low printRTC@month
  7386  0019CA  0100               	movlb	0	; () banked
  7387  0019CC  6F80               	movwf	strcpy@to& (0+255),b
  7388  0019CE  0E00               	movlw	high printRTC@month
  7389  0019D0  0100               	movlb	0	; () banked
  7390  0019D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7391  0019D4  0EE6               	movlw	low STR_10
  7392  0019D6  0100               	movlb	0	; () banked
  7393  0019D8  6F82               	movwf	strcpy@from& (0+255),b
  7394  0019DA  0EFF               	movlw	high STR_10
  7395  0019DC  0100               	movlb	0	; () banked
  7396  0019DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7397  0019E0  EC21  F01D         	call	_strcpy	;wreg free
  7398                           
  7399                           ;RTC.c: 80: break;
  7400  0019E4  D0B6               	goto	l5373
  7401  0019E6                     l5351:
  7402                           
  7403                           ;RTC.c: 82: strcpy(month, "APR");
  7404  0019E6  0EBE               	movlw	low printRTC@month
  7405  0019E8  0100               	movlb	0	; () banked
  7406  0019EA  6F80               	movwf	strcpy@to& (0+255),b
  7407  0019EC  0E00               	movlw	high printRTC@month
  7408  0019EE  0100               	movlb	0	; () banked
  7409  0019F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7410  0019F2  0EEA               	movlw	low STR_11
  7411  0019F4  0100               	movlb	0	; () banked
  7412  0019F6  6F82               	movwf	strcpy@from& (0+255),b
  7413  0019F8  0EFF               	movlw	high STR_11
  7414  0019FA  0100               	movlb	0	; () banked
  7415  0019FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7416  0019FE  EC21  F01D         	call	_strcpy	;wreg free
  7417                           
  7418                           ;RTC.c: 83: break;
  7419  001A02  D0A7               	goto	l5373
  7420  001A04                     l5353:
  7421                           
  7422                           ;RTC.c: 85: strcpy(month, "MAY");
  7423  001A04  0EBE               	movlw	low printRTC@month
  7424  001A06  0100               	movlb	0	; () banked
  7425  001A08  6F80               	movwf	strcpy@to& (0+255),b
  7426  001A0A  0E00               	movlw	high printRTC@month
  7427  001A0C  0100               	movlb	0	; () banked
  7428  001A0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7429  001A10  0EFA               	movlw	low STR_12
  7430  001A12  0100               	movlb	0	; () banked
  7431  001A14  6F82               	movwf	strcpy@from& (0+255),b
  7432  001A16  0EFF               	movlw	high STR_12
  7433  001A18  0100               	movlb	0	; () banked
  7434  001A1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7435  001A1C  EC21  F01D         	call	_strcpy	;wreg free
  7436                           
  7437                           ;RTC.c: 86: break;
  7438  001A20  D098               	goto	l5373
  7439  001A22                     l5355:
  7440                           
  7441                           ;RTC.c: 88: strcpy(month, "JUN");
  7442  001A22  0EBE               	movlw	low printRTC@month
  7443  001A24  0100               	movlb	0	; () banked
  7444  001A26  6F80               	movwf	strcpy@to& (0+255),b
  7445  001A28  0E00               	movlw	high printRTC@month
  7446  001A2A  0100               	movlb	0	; () banked
  7447  001A2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7448  001A2E  0EDE               	movlw	low STR_13
  7449  001A30  0100               	movlb	0	; () banked
  7450  001A32  6F82               	movwf	strcpy@from& (0+255),b
  7451  001A34  0EFF               	movlw	high STR_13
  7452  001A36  0100               	movlb	0	; () banked
  7453  001A38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7454  001A3A  EC21  F01D         	call	_strcpy	;wreg free
  7455                           
  7456                           ;RTC.c: 89: break;
  7457  001A3E  D089               	goto	l5373
  7458  001A40                     l5357:
  7459                           
  7460                           ;RTC.c: 91: strcpy(month, "JUL");
  7461  001A40  0EBE               	movlw	low printRTC@month
  7462  001A42  0100               	movlb	0	; () banked
  7463  001A44  6F80               	movwf	strcpy@to& (0+255),b
  7464  001A46  0E00               	movlw	high printRTC@month
  7465  001A48  0100               	movlb	0	; () banked
  7466  001A4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7467  001A4C  0ED6               	movlw	low STR_14
  7468  001A4E  0100               	movlb	0	; () banked
  7469  001A50  6F82               	movwf	strcpy@from& (0+255),b
  7470  001A52  0EFF               	movlw	high STR_14
  7471  001A54  0100               	movlb	0	; () banked
  7472  001A56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7473  001A58  EC21  F01D         	call	_strcpy	;wreg free
  7474                           
  7475                           ;RTC.c: 92: break;
  7476  001A5C  D07A               	goto	l5373
  7477  001A5E                     l5359:
  7478                           
  7479                           ;RTC.c: 94: strcpy(month, "AUG");
  7480  001A5E  0EBE               	movlw	low printRTC@month
  7481  001A60  0100               	movlb	0	; () banked
  7482  001A62  6F80               	movwf	strcpy@to& (0+255),b
  7483  001A64  0E00               	movlw	high printRTC@month
  7484  001A66  0100               	movlb	0	; () banked
  7485  001A68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7486  001A6A  0ED2               	movlw	low STR_15
  7487  001A6C  0100               	movlb	0	; () banked
  7488  001A6E  6F82               	movwf	strcpy@from& (0+255),b
  7489  001A70  0EFF               	movlw	high STR_15
  7490  001A72  0100               	movlb	0	; () banked
  7491  001A74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7492  001A76  EC21  F01D         	call	_strcpy	;wreg free
  7493                           
  7494                           ;RTC.c: 95: break;
  7495  001A7A  D06B               	goto	l5373
  7496  001A7C                     l5361:
  7497                           
  7498                           ;RTC.c: 97: strcpy(month, "SEP");
  7499  001A7C  0EBE               	movlw	low printRTC@month
  7500  001A7E  0100               	movlb	0	; () banked
  7501  001A80  6F80               	movwf	strcpy@to& (0+255),b
  7502  001A82  0E00               	movlw	high printRTC@month
  7503  001A84  0100               	movlb	0	; () banked
  7504  001A86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7505  001A88  0EE2               	movlw	low STR_16
  7506  001A8A  0100               	movlb	0	; () banked
  7507  001A8C  6F82               	movwf	strcpy@from& (0+255),b
  7508  001A8E  0EFF               	movlw	high STR_16
  7509  001A90  0100               	movlb	0	; () banked
  7510  001A92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7511  001A94  EC21  F01D         	call	_strcpy	;wreg free
  7512                           
  7513                           ;RTC.c: 98: break;
  7514  001A98  D05C               	goto	l5373
  7515  001A9A                     l5363:
  7516                           
  7517                           ;RTC.c: 100: strcpy(month, "OCT");
  7518  001A9A  0EBE               	movlw	low printRTC@month
  7519  001A9C  0100               	movlb	0	; () banked
  7520  001A9E  6F80               	movwf	strcpy@to& (0+255),b
  7521  001AA0  0E00               	movlw	high printRTC@month
  7522  001AA2  0100               	movlb	0	; () banked
  7523  001AA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7524  001AA6  0EF2               	movlw	low STR_17
  7525  001AA8  0100               	movlb	0	; () banked
  7526  001AAA  6F82               	movwf	strcpy@from& (0+255),b
  7527  001AAC  0EFF               	movlw	high STR_17
  7528  001AAE  0100               	movlb	0	; () banked
  7529  001AB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7530  001AB2  EC21  F01D         	call	_strcpy	;wreg free
  7531                           
  7532                           ;RTC.c: 101: break;
  7533  001AB6  D04D               	goto	l5373
  7534  001AB8                     l5365:
  7535                           
  7536                           ;RTC.c: 103: strcpy(month, "NOV");
  7537  001AB8  0EBE               	movlw	low printRTC@month
  7538  001ABA  0100               	movlb	0	; () banked
  7539  001ABC  6F80               	movwf	strcpy@to& (0+255),b
  7540  001ABE  0E00               	movlw	high printRTC@month
  7541  001AC0  0100               	movlb	0	; () banked
  7542  001AC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7543  001AC4  0EF6               	movlw	low STR_18
  7544  001AC6  0100               	movlb	0	; () banked
  7545  001AC8  6F82               	movwf	strcpy@from& (0+255),b
  7546  001ACA  0EFF               	movlw	high STR_18
  7547  001ACC  0100               	movlb	0	; () banked
  7548  001ACE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7549  001AD0  EC21  F01D         	call	_strcpy	;wreg free
  7550                           
  7551                           ;RTC.c: 104: break;
  7552  001AD4  D03E               	goto	l5373
  7553  001AD6                     l5367:
  7554                           
  7555                           ;RTC.c: 106: strcpy(month, "DEC");
  7556  001AD6  0EBE               	movlw	low printRTC@month
  7557  001AD8  0100               	movlb	0	; () banked
  7558  001ADA  6F80               	movwf	strcpy@to& (0+255),b
  7559  001ADC  0E00               	movlw	high printRTC@month
  7560  001ADE  0100               	movlb	0	; () banked
  7561  001AE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7562  001AE2  0ECE               	movlw	low STR_19
  7563  001AE4  0100               	movlb	0	; () banked
  7564  001AE6  6F82               	movwf	strcpy@from& (0+255),b
  7565  001AE8  0EFF               	movlw	high STR_19
  7566  001AEA  0100               	movlb	0	; () banked
  7567  001AEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7568  001AEE  EC21  F01D         	call	_strcpy	;wreg free
  7569                           
  7570                           ;RTC.c: 108: }
  7571                           
  7572                           ;RTC.c: 107: break;
  7573  001AF2  D02F               	goto	l5373
  7574  001AF4                     l5371:
  7575  001AF4  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7576  001AF8  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7577                           
  7578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7579                           ; Switch size 1, requested type "space"
  7580                           ; Number of cases is 1, Range of values is 0 to 0
  7581                           ; switch strategies available:
  7582                           ; Name         Instructions Cycles
  7583                           ; simple_byte            4     3 (average)
  7584                           ;	Chosen strategy is simple_byte
  7585  001AFC  0100               	movlb	0	; () banked
  7586  001AFE  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7587  001B00  0A00               	xorlw	0	; case 0
  7588  001B02  A4D8               	btfss	status,2,c
  7589  001B04  D026               	goto	l5373
  7590                           
  7591                           ; BSR set to: 0
  7592                           ; Switch size 1, requested type "space"
  7593                           ; Number of cases is 12, Range of values is 1 to 12
  7594                           ; switch strategies available:
  7595                           ; Name         Instructions Cycles
  7596                           ; simple_byte           37    19 (average)
  7597                           ;	Chosen strategy is simple_byte
  7598  001B06  0100               	movlb	0	; () banked
  7599  001B08  51AB               	movf	??_printRTC& (0+255),w,b
  7600  001B0A  0A01               	xorlw	1	; case 1
  7601  001B0C  B4D8               	btfsc	status,2,c
  7602  001B0E  D73E               	goto	l5345
  7603  001B10  0A03               	xorlw	3	; case 2
  7604  001B12  B4D8               	btfsc	status,2,c
  7605  001B14  D74A               	goto	l5347
  7606  001B16  0A01               	xorlw	1	; case 3
  7607  001B18  B4D8               	btfsc	status,2,c
  7608  001B1A  D756               	goto	l5349
  7609  001B1C  0A07               	xorlw	7	; case 4
  7610  001B1E  B4D8               	btfsc	status,2,c
  7611  001B20  D762               	goto	l5351
  7612  001B22  0A01               	xorlw	1	; case 5
  7613  001B24  B4D8               	btfsc	status,2,c
  7614  001B26  D76E               	goto	l5353
  7615  001B28  0A03               	xorlw	3	; case 6
  7616  001B2A  B4D8               	btfsc	status,2,c
  7617  001B2C  D77A               	goto	l5355
  7618  001B2E  0A01               	xorlw	1	; case 7
  7619  001B30  B4D8               	btfsc	status,2,c
  7620  001B32  D786               	goto	l5357
  7621  001B34  0A0F               	xorlw	15	; case 8
  7622  001B36  B4D8               	btfsc	status,2,c
  7623  001B38  D792               	goto	l5359
  7624  001B3A  0A01               	xorlw	1	; case 9
  7625  001B3C  B4D8               	btfsc	status,2,c
  7626  001B3E  D79E               	goto	l5361
  7627  001B40  0A03               	xorlw	3	; case 10
  7628  001B42  B4D8               	btfsc	status,2,c
  7629  001B44  D7AA               	goto	l5363
  7630  001B46  0A01               	xorlw	1	; case 11
  7631  001B48  B4D8               	btfsc	status,2,c
  7632  001B4A  D7B6               	goto	l5365
  7633  001B4C  0A07               	xorlw	7	; case 12
  7634  001B4E  B4D8               	btfsc	status,2,c
  7635  001B50  D7C2               	goto	l5367
  7636  001B52                     l5373:
  7637                           
  7638                           ;RTC.c: 109: lcdInst(0b10000000);;
  7639  001B52  0E80               	movlw	128
  7640  001B54  EC83  F01F         	call	_lcdInst
  7641                           
  7642                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7643  001B58  0EBE               	movlw	low STR_21
  7644  001B5A  0100               	movlb	0	; () banked
  7645  001B5C  6F8E               	movwf	printf@f& (0+255),b
  7646  001B5E  0EFB               	movlw	high STR_21
  7647  001B60  0100               	movlb	0	; () banked
  7648  001B62  6F8F               	movwf	(printf@f+1)& (0+255),b
  7649  001B64  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7650  001B68  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7651  001B6C  0EBE               	movlw	low printRTC@month
  7652  001B6E  0100               	movlb	0	; () banked
  7653  001B70  6F92               	movwf	(?_printf+4)& (0+255),b
  7654  001B72  0E00               	movlw	high printRTC@month
  7655  001B74  0100               	movlb	0	; () banked
  7656  001B76  6F93               	movwf	(?_printf+5)& (0+255),b
  7657  001B78  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7658  001B7C  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7659  001B80  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7660  001B84  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7661  001B88  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7662  001B8C  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7663  001B90  EC93  F008         	call	_printf	;wreg free
  7664  001B94  0012               	return		;funcret
  7665  001B96                     __end_of_printRTC:
  7666                           	opt stack 0
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           intcon3	equ	0xFF0
  7676                           postinc0	equ	0xFEE
  7677                           wreg	equ	0xFE8
  7678                           postdec1	equ	0xFE5
  7679                           fsr1l	equ	0xFE1
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687 ;; *************** function _strcpy *****************
  7688 ;; Defined at:
  7689 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7692 ;;		 -> printRTC@month(4), UI@month(4), 
  7693 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7694 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7695 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7696 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7697 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7698 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7699 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7700 ;;		 -> STR_8(4), 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7703 ;;		 -> printRTC@month(4), UI@month(4), 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  2    0[BANK0 ] PTR unsigned char 
  7706 ;; Registers used:
  7707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;Total ram usage:        6 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    7
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_UI
  7724 ;;		_printRTC
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text23
  7729  003A42                     __ptext23:
  7730                           	opt stack 0
  7731  003A42                     _strcpy:
  7732                           	opt stack 20
  7733                           
  7734                           ;incstack = 0
  7735  003A42  C080  F084         	movff	strcpy@to,strcpy@cp
  7736  003A46  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7737  003A4A  D006               	goto	l5077
  7738  003A4C                     l5075:
  7739  003A4C  0100               	movlb	0	; () banked
  7740  003A4E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7741  003A50  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7742  003A52  0100               	movlb	0	; () banked
  7743  003A54  4B82               	infsnz	strcpy@from& (0+255),f,b
  7744  003A56  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7745  003A58                     l5077:
  7746  003A58  C082  FFF6         	movff	strcpy@from,tblptrl
  7747  003A5C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7748  003A60                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7749  003A60  6AF8               	clrf	tblptru,c
  7750  003A62                     	endif
  7751  003A62                     	if	0	;tblptru may be non-zero
  7752  003A62                     	endif
  7753  003A62  C084  FFD9         	movff	strcpy@cp,fsr2l
  7754  003A66  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7755  003A6A  0008               	tblrd		*
  7756  003A6C  CFF5 FFDF          	movff	tablat,indf2
  7757  003A70  50DF               	movf	indf2,w,c
  7758  003A72  B4D8               	btfsc	status,2,c
  7759  003A74  0012               	return	
  7760  003A76  D7EA               	goto	l5075
  7761  003A78                     __end_of_strcpy:
  7762                           	opt stack 0
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           intcon2	equ	0xFF1
  7771                           intcon3	equ	0xFF0
  7772                           postinc0	equ	0xFEE
  7773                           wreg	equ	0xFE8
  7774                           postdec1	equ	0xFE5
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _getRTC *****************
  7784 ;; Defined at:
  7785 ;;		line 44 in file "RTC.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  i               2    3[BANK0 ] int 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        2 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    9
  7806 ;; This function calls:
  7807 ;;		_I2C_Master_Read
  7808 ;;		_I2C_Master_Start
  7809 ;;		_I2C_Master_Stop
  7810 ;;		_I2C_Master_Write
  7811 ;; This function is called by:
  7812 ;;		_printRTC
  7813 ;;		_initSortTimer
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text24
  7818  003342                     __ptext24:
  7819                           	opt stack 0
  7820  003342                     _getRTC:
  7821                           	opt stack 18
  7822                           
  7823                           ;RTC.c: 48: I2C_Master_Start();
  7824                           
  7825                           ;incstack = 0
  7826  003342  ECA9  F01F         	call	_I2C_Master_Start	;wreg free
  7827                           
  7828                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7829  003346  0E00               	movlw	0
  7830  003348  0100               	movlb	0	; () banked
  7831  00334A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7832  00334C  0ED0               	movlw	208
  7833  00334E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7834  003350  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  7835                           
  7836                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7837  003354  0E00               	movlw	0
  7838  003356  0100               	movlb	0	; () banked
  7839  003358  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7840  00335A  0E00               	movlw	0
  7841  00335C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7842  00335E  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  7843                           
  7844                           ;RTC.c: 51: I2C_Master_Stop();
  7845  003362  ECA5  F01F         	call	_I2C_Master_Stop	;wreg free
  7846                           
  7847                           ;RTC.c: 54: I2C_Master_Start();
  7848  003366  ECA9  F01F         	call	_I2C_Master_Start	;wreg free
  7849                           
  7850                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7851  00336A  0E00               	movlw	0
  7852  00336C  0100               	movlb	0	; () banked
  7853  00336E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7854  003370  0ED1               	movlw	209
  7855  003372  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7856  003374  EC97  F01F         	call	_I2C_Master_Write	;wreg free
  7857                           
  7858                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7859  003378  0E00               	movlw	0
  7860  00337A  0100               	movlb	0	; () banked
  7861  00337C  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7862  00337E  0E00               	movlw	0
  7863  003380  6F83               	movwf	getRTC@i& (0+255),b
  7864  003382                     l5083:
  7865                           
  7866                           ; BSR set to: 0
  7867  003382  0100               	movlb	0	; () banked
  7868  003384  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7869  003386  D008               	goto	l5087
  7870  003388  0100               	movlb	0	; () banked
  7871  00338A  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7872  00338C  E115               	bnz	l5093
  7873  00338E  0E06               	movlw	6
  7874  003390  0100               	movlb	0	; () banked
  7875  003392  5D83               	subwf	getRTC@i& (0+255),w,b
  7876  003394  B0D8               	btfsc	status,0,c
  7877  003396  D010               	goto	l5093
  7878  003398                     l5087:
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7882  003398  0E24               	movlw	low _time
  7883  00339A  0100               	movlb	0	; () banked
  7884  00339C  2583               	addwf	getRTC@i& (0+255),w,b
  7885  00339E  6ED9               	movwf	fsr2l,c
  7886  0033A0  0E01               	movlw	high _time
  7887  0033A2  0100               	movlb	0	; () banked
  7888  0033A4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7889  0033A6  6EDA               	movwf	fsr2h,c
  7890  0033A8  0E01               	movlw	1
  7891  0033AA  EC48  F01E         	call	_I2C_Master_Read
  7892  0033AE  6EDF               	movwf	indf2,c
  7893  0033B0  0100               	movlb	0	; () banked
  7894  0033B2  4B83               	infsnz	getRTC@i& (0+255),f,b
  7895  0033B4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7896  0033B6  D7E5               	goto	l5083
  7897  0033B8                     l5093:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;RTC.c: 58: }
  7901                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7902  0033B8  0E00               	movlw	0
  7903  0033BA  EC48  F01E         	call	_I2C_Master_Read
  7904  0033BE  0101               	movlb	1	; () banked
  7905  0033C0  6F2A               	movwf	(_time+6)& (0+255),b
  7906                           
  7907                           ;RTC.c: 60: I2C_Master_Stop();
  7908  0033C2  ECA5  F01F         	call	_I2C_Master_Stop	;wreg free
  7909  0033C6  0012               	return		;funcret
  7910  0033C8                     __end_of_getRTC:
  7911                           	opt stack 0
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           intcon3	equ	0xFF0
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postdec1	equ	0xFE5
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function _I2C_Master_Write *****************
  7933 ;; Defined at:
  7934 ;;		line 49 in file "I2C.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  d               2    1[BANK0 ] unsigned int 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;Total ram usage:        2 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    8
  7955 ;; This function calls:
  7956 ;;		_I2C_Master_Wait
  7957 ;; This function is called by:
  7958 ;;		_loadRTC
  7959 ;;		_getRTC
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text25
  7964  003F2E                     __ptext25:
  7965                           	opt stack 0
  7966  003F2E                     _I2C_Master_Write:
  7967                           	opt stack 18
  7968                           
  7969                           ;I2C.c: 51: I2C_Master_Wait();
  7970                           
  7971                           ;incstack = 0
  7972  003F2E  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  7973                           
  7974                           ;I2C.c: 52: SSPBUF = d;
  7975  003F32  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7976  003F36  0012               	return		;funcret
  7977  003F38                     __end_of_I2C_Master_Write:
  7978                           	opt stack 0
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           intcon	equ	0xFF2
  7986                           intcon2	equ	0xFF1
  7987                           intcon3	equ	0xFF0
  7988                           postinc0	equ	0xFEE
  7989                           wreg	equ	0xFE8
  7990                           postdec1	equ	0xFE5
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function _I2C_Master_Stop *****************
  8000 ;; Defined at:
  8001 ;;		line 43 in file "I2C.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;Total ram usage:        0 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    8
  8022 ;; This function calls:
  8023 ;;		_I2C_Master_Wait
  8024 ;; This function is called by:
  8025 ;;		_loadRTC
  8026 ;;		_getRTC
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text26
  8031  003F4A                     __ptext26:
  8032                           	opt stack 0
  8033  003F4A                     _I2C_Master_Stop:
  8034                           	opt stack 18
  8035                           
  8036                           ;I2C.c: 45: I2C_Master_Wait();
  8037                           
  8038                           ;incstack = 0
  8039  003F4A  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  8040                           
  8041                           ;I2C.c: 46: PEN = 1;
  8042  003F4E  84C5               	bsf	4037,2,c	;volatile
  8043  003F50  0012               	return		;funcret
  8044  003F52                     __end_of_I2C_Master_Stop:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           intcon2	equ	0xFF1
  8054                           intcon3	equ	0xFF0
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           postdec1	equ	0xFE5
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           postdec2	equ	0xFDD
  8062                           fsr2h	equ	0xFDA
  8063                           fsr2l	equ	0xFD9
  8064                           status	equ	0xFD8
  8065                           
  8066 ;; *************** function _I2C_Master_Start *****************
  8067 ;; Defined at:
  8068 ;;		line 31 in file "I2C.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;		None
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;		None
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      void 
  8075 ;; Registers used:
  8076 ;;		wreg, status,2, status,0, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;Total ram usage:        0 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    8
  8089 ;; This function calls:
  8090 ;;		_I2C_Master_Wait
  8091 ;; This function is called by:
  8092 ;;		_loadRTC
  8093 ;;		_getRTC
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text27
  8098  003F52                     __ptext27:
  8099                           	opt stack 0
  8100  003F52                     _I2C_Master_Start:
  8101                           	opt stack 18
  8102                           
  8103                           ;I2C.c: 33: I2C_Master_Wait();
  8104                           
  8105                           ;incstack = 0
  8106  003F52  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  8107                           
  8108                           ;I2C.c: 34: SEN = 1;
  8109  003F56  80C5               	bsf	4037,0,c	;volatile
  8110  003F58  0012               	return		;funcret
  8111  003F5A                     __end_of_I2C_Master_Start:
  8112                           	opt stack 0
  8113                           tblptru	equ	0xFF8
  8114                           tblptrh	equ	0xFF7
  8115                           tblptrl	equ	0xFF6
  8116                           tablat	equ	0xFF5
  8117                           prodh	equ	0xFF4
  8118                           prodl	equ	0xFF3
  8119                           intcon	equ	0xFF2
  8120                           intcon2	equ	0xFF1
  8121                           intcon3	equ	0xFF0
  8122                           postinc0	equ	0xFEE
  8123                           wreg	equ	0xFE8
  8124                           postdec1	equ	0xFE5
  8125                           fsr1l	equ	0xFE1
  8126                           indf2	equ	0xFDF
  8127                           postinc2	equ	0xFDE
  8128                           postdec2	equ	0xFDD
  8129                           fsr2h	equ	0xFDA
  8130                           fsr2l	equ	0xFD9
  8131                           status	equ	0xFD8
  8132                           
  8133 ;; *************** function _I2C_Master_Read *****************
  8134 ;; Defined at:
  8135 ;;		line 55 in file "I2C.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;  a               1    wreg     unsigned char 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  a               1    1[BANK0 ] unsigned char 
  8140 ;;  temp            1    2[BANK0 ] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2, status,0, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        2 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    8
  8157 ;; This function calls:
  8158 ;;		_I2C_Master_Wait
  8159 ;; This function is called by:
  8160 ;;		_getRTC
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text28
  8165  003C90                     __ptext28:
  8166                           	opt stack 0
  8167  003C90                     _I2C_Master_Read:
  8168                           	opt stack 18
  8169                           
  8170                           ;incstack = 0
  8171                           ;I2C_Master_Read@a stored from wreg
  8172  003C90  0100               	movlb	0	; () banked
  8173  003C92  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8174                           
  8175                           ;I2C.c: 57: unsigned char temp;
  8176                           ;I2C.c: 58: I2C_Master_Wait();
  8177  003C94  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  8178                           
  8179                           ;I2C.c: 59: RCEN = 1;
  8180  003C98  86C5               	bsf	4037,3,c	;volatile
  8181                           
  8182                           ;I2C.c: 60: I2C_Master_Wait();
  8183  003C9A  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  8184                           
  8185                           ;I2C.c: 61: temp = SSPBUF;
  8186  003C9E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8187                           
  8188                           ;I2C.c: 62: I2C_Master_Wait();
  8189  003CA2  EC68  F01F         	call	_I2C_Master_Wait	;wreg free
  8190                           
  8191                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8192  003CA6  0100               	movlb	0	; () banked
  8193  003CA8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8194  003CAA  0100               	movlb	0	; () banked
  8195  003CAC  A4D8               	btfss	status,2,c
  8196  003CAE  D002               	goto	u3260
  8197  003CB0  8AC5               	bsf	4037,5,c	;volatile
  8198  003CB2  D001               	goto	l4777
  8199  003CB4                     u3260:
  8200  003CB4  9AC5               	bcf	4037,5,c	;volatile
  8201  003CB6                     l4777:
  8202                           
  8203                           ;I2C.c: 64: ACKEN = 1;
  8204  003CB6  88C5               	bsf	4037,4,c	;volatile
  8205                           
  8206                           ;I2C.c: 65: return temp;
  8207  003CB8  0100               	movlb	0	; () banked
  8208  003CBA  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8209  003CBC  0012               	return	
  8210  003CBE                     __end_of_I2C_Master_Read:
  8211                           	opt stack 0
  8212                           tblptru	equ	0xFF8
  8213                           tblptrh	equ	0xFF7
  8214                           tblptrl	equ	0xFF6
  8215                           tablat	equ	0xFF5
  8216                           prodh	equ	0xFF4
  8217                           prodl	equ	0xFF3
  8218                           intcon	equ	0xFF2
  8219                           intcon2	equ	0xFF1
  8220                           intcon3	equ	0xFF0
  8221                           postinc0	equ	0xFEE
  8222                           wreg	equ	0xFE8
  8223                           postdec1	equ	0xFE5
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _I2C_Master_Wait *****************
  8233 ;; Defined at:
  8234 ;;		line 26 in file "I2C.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg, status,2, status,0
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;Total ram usage:        1 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    7
  8255 ;; This function calls:
  8256 ;;		Nothing
  8257 ;; This function is called by:
  8258 ;;		_I2C_Master_Start
  8259 ;;		_I2C_Master_Stop
  8260 ;;		_I2C_Master_Write
  8261 ;;		_I2C_Master_Read
  8262 ;;		_I2C_Master_RepeatedStart
  8263 ;; This function uses a non-reentrant model
  8264 ;;
  8265                           
  8266                           	psect	text29
  8267  003ED0                     __ptext29:
  8268                           	opt stack 0
  8269  003ED0                     _I2C_Master_Wait:
  8270                           	opt stack 18
  8271  003ED0                     l66:
  8272  003ED0  B4C7               	btfsc	4039,2,c	;volatile
  8273  003ED2  D7FE               	goto	l66
  8274  003ED4  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8275  003ED8  0E1F               	movlw	31
  8276  003EDA  0100               	movlb	0	; () banked
  8277  003EDC  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8278  003EDE  B4D8               	btfsc	status,2,c
  8279  003EE0  0012               	return	
  8280  003EE2  D7F6               	goto	l66
  8281  003EE4                     __end_of_I2C_Master_Wait:
  8282                           	opt stack 0
  8283                           tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodh	equ	0xFF4
  8288                           prodl	equ	0xFF3
  8289                           intcon	equ	0xFF2
  8290                           intcon2	equ	0xFF1
  8291                           intcon3	equ	0xFF0
  8292                           postinc0	equ	0xFEE
  8293                           wreg	equ	0xFE8
  8294                           postdec1	equ	0xFE5
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function _change_state_to_menu_22 *****************
  8304 ;; Defined at:
  8305 ;;		line 496 in file "UI.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;		None
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;		None
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;Total ram usage:        0 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:   10
  8326 ;; This function calls:
  8327 ;;		_lcdInst
  8328 ;;		_printf
  8329 ;; This function is called by:
  8330 ;;		_UI
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text30
  8335  0039D2                     __ptext30:
  8336                           	opt stack 0
  8337  0039D2                     _change_state_to_menu_22:
  8338                           	opt stack 19
  8339                           
  8340                           ;UI.c: 497: cur_state = 22;
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;incstack = 0
  8344  0039D2  0E00               	movlw	0
  8345  0039D4  0100               	movlb	0	; () banked
  8346  0039D6  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8347  0039D8  0E16               	movlw	22
  8348  0039DA  6FDE               	movwf	_cur_state& (0+255),b
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;UI.c: 499: lcdInst(0b10000000);;
  8352  0039DC  0E80               	movlw	128
  8353  0039DE  EC83  F01F         	call	_lcdInst
  8354                           
  8355                           ;UI.c: 500: printf("2. SORT        <");
  8356  0039E2  0E00               	movlw	low STR_34
  8357  0039E4  0100               	movlb	0	; () banked
  8358  0039E6  6F8E               	movwf	printf@f& (0+255),b
  8359  0039E8  0EFE               	movlw	high STR_34
  8360  0039EA  0100               	movlb	0	; () banked
  8361  0039EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8362  0039EE  EC93  F008         	call	_printf	;wreg free
  8363                           
  8364                           ;UI.c: 501: lcdInst(0b11000000);;
  8365  0039F2  0EC0               	movlw	192
  8366  0039F4  EC83  F01F         	call	_lcdInst
  8367                           
  8368                           ;UI.c: 502: printf("3. LOGS         ");
  8369  0039F8  0E45               	movlw	low STR_36
  8370  0039FA  0100               	movlb	0	; () banked
  8371  0039FC  6F8E               	movwf	printf@f& (0+255),b
  8372  0039FE  0EFD               	movlw	high STR_36
  8373  003A00  0100               	movlb	0	; () banked
  8374  003A02  6F8F               	movwf	(printf@f+1)& (0+255),b
  8375  003A04  EC93  F008         	call	_printf	;wreg free
  8376  003A08  0012               	return		;funcret
  8377  003A0A                     __end_of_change_state_to_menu_22:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon2	equ	0xFF1
  8387                           intcon3	equ	0xFF0
  8388                           postinc0	equ	0xFEE
  8389                           wreg	equ	0xFE8
  8390                           postdec1	equ	0xFE5
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           fsr2h	equ	0xFDA
  8396                           fsr2l	equ	0xFD9
  8397                           status	equ	0xFD8
  8398                           
  8399 ;; *************** function _change_state_to_menu_12 *****************
  8400 ;; Defined at:
  8401 ;;		line 488 in file "UI.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;		None
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;		None
  8406 ;; Return value:  Size  Location     Type
  8407 ;;                  1    wreg      void 
  8408 ;; Registers used:
  8409 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8410 ;; Tracked objects:
  8411 ;;		On entry : 0/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;Total ram usage:        0 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:   10
  8422 ;; This function calls:
  8423 ;;		_lcdInst
  8424 ;;		_printf
  8425 ;; This function is called by:
  8426 ;;		_UI
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text31
  8431  003A0A                     __ptext31:
  8432                           	opt stack 0
  8433  003A0A                     _change_state_to_menu_12:
  8434                           	opt stack 19
  8435                           
  8436                           ;UI.c: 489: cur_state = 12;
  8437                           
  8438                           ;incstack = 0
  8439  003A0A  0E00               	movlw	0
  8440  003A0C  0100               	movlb	0	; () banked
  8441  003A0E  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8442  003A10  0E0C               	movlw	12
  8443  003A12  6FDE               	movwf	_cur_state& (0+255),b
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;UI.c: 491: lcdInst(0b10000000);;
  8447  003A14  0E80               	movlw	128
  8448  003A16  EC83  F01F         	call	_lcdInst
  8449                           
  8450                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8451  003A1A  0E67               	movlw	low STR_33
  8452  003A1C  0100               	movlb	0	; () banked
  8453  003A1E  6F8E               	movwf	printf@f& (0+255),b
  8454  003A20  0EFD               	movlw	high STR_33
  8455  003A22  0100               	movlb	0	; () banked
  8456  003A24  6F8F               	movwf	(printf@f+1)& (0+255),b
  8457  003A26  EC93  F008         	call	_printf	;wreg free
  8458                           
  8459                           ;UI.c: 493: lcdInst(0b11000000);;
  8460  003A2A  0EC0               	movlw	192
  8461  003A2C  EC83  F01F         	call	_lcdInst
  8462                           
  8463                           ;UI.c: 494: printf("2. SORT        <");
  8464  003A30  0E00               	movlw	low STR_34
  8465  003A32  0100               	movlb	0	; () banked
  8466  003A34  6F8E               	movwf	printf@f& (0+255),b
  8467  003A36  0EFE               	movlw	high STR_34
  8468  003A38  0100               	movlb	0	; () banked
  8469  003A3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8470  003A3C  EC93  F008         	call	_printf	;wreg free
  8471  003A40  0012               	return		;funcret
  8472  003A42                     __end_of_change_state_to_menu_12:
  8473                           	opt stack 0
  8474                           tblptru	equ	0xFF8
  8475                           tblptrh	equ	0xFF7
  8476                           tblptrl	equ	0xFF6
  8477                           tablat	equ	0xFF5
  8478                           prodh	equ	0xFF4
  8479                           prodl	equ	0xFF3
  8480                           intcon	equ	0xFF2
  8481                           intcon2	equ	0xFF1
  8482                           intcon3	equ	0xFF0
  8483                           postinc0	equ	0xFEE
  8484                           wreg	equ	0xFE8
  8485                           postdec1	equ	0xFE5
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function ___awmod *****************
  8495 ;; Defined at:
  8496 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  dividend        2    0[BANK0 ] int 
  8499 ;;  divisor         2    2[BANK0 ] int 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  sign            1    5[BANK0 ] unsigned char 
  8502 ;;  counter         1    4[BANK0 ] unsigned char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  2    0[BANK0 ] int 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;Total ram usage:        6 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    7
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_UI
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text32
  8527  003178                     __ptext32:
  8528                           	opt stack 0
  8529  003178                     ___awmod:
  8530                           	opt stack 22
  8531                           
  8532                           ;incstack = 0
  8533  003178  0E00               	movlw	0
  8534  00317A  0100               	movlb	0	; () banked
  8535  00317C  6F85               	movwf	___awmod@sign& (0+255),b
  8536                           
  8537                           ; BSR set to: 0
  8538  00317E  0100               	movlb	0	; () banked
  8539  003180  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8540  003182  D008               	goto	l6541
  8541                           
  8542                           ; BSR set to: 0
  8543  003184  0100               	movlb	0	; () banked
  8544  003186  6D80               	negf	___awmod@dividend& (0+255),b
  8545  003188  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8546  00318A  B0D8               	btfsc	status,0,c
  8547  00318C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8548                           
  8549                           ; BSR set to: 0
  8550  00318E  0E01               	movlw	1
  8551  003190  0100               	movlb	0	; () banked
  8552  003192  6F85               	movwf	___awmod@sign& (0+255),b
  8553  003194                     l6541:
  8554                           
  8555                           ; BSR set to: 0
  8556  003194  0100               	movlb	0	; () banked
  8557  003196  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8558  003198  D005               	goto	l6545
  8559                           
  8560                           ; BSR set to: 0
  8561  00319A  0100               	movlb	0	; () banked
  8562  00319C  6D82               	negf	___awmod@divisor& (0+255),b
  8563  00319E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8564  0031A0  B0D8               	btfsc	status,0,c
  8565  0031A2  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8566  0031A4                     l6545:
  8567                           
  8568                           ; BSR set to: 0
  8569  0031A4  0100               	movlb	0	; () banked
  8570  0031A6  5182               	movf	___awmod@divisor& (0+255),w,b
  8571  0031A8  0100               	movlb	0	; () banked
  8572  0031AA  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8573  0031AC  B4D8               	btfsc	status,2,c
  8574  0031AE  D026               	goto	l6561
  8575                           
  8576                           ; BSR set to: 0
  8577  0031B0  0E01               	movlw	1
  8578  0031B2  0100               	movlb	0	; () banked
  8579  0031B4  6F84               	movwf	___awmod@counter& (0+255),b
  8580  0031B6  D006               	goto	l6551
  8581  0031B8                     l6549:
  8582                           
  8583                           ; BSR set to: 0
  8584  0031B8  0100               	movlb	0	; () banked
  8585  0031BA  90D8               	bcf	status,0,c
  8586  0031BC  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8587  0031BE  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8588  0031C0  0100               	movlb	0	; () banked
  8589  0031C2  2B84               	incf	___awmod@counter& (0+255),f,b
  8590  0031C4                     l6551:
  8591                           
  8592                           ; BSR set to: 0
  8593  0031C4  0100               	movlb	0	; () banked
  8594  0031C6  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8595  0031C8  D7F7               	goto	l6549
  8596  0031CA                     l6553:
  8597                           
  8598                           ; BSR set to: 0
  8599  0031CA  0100               	movlb	0	; () banked
  8600  0031CC  5182               	movf	___awmod@divisor& (0+255),w,b
  8601  0031CE  0100               	movlb	0	; () banked
  8602  0031D0  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8603  0031D2  0100               	movlb	0	; () banked
  8604  0031D4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8605  0031D6  0100               	movlb	0	; () banked
  8606  0031D8  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8607  0031DA  A0D8               	btfss	status,0,c
  8608  0031DC  D008               	goto	l6557
  8609                           
  8610                           ; BSR set to: 0
  8611  0031DE  0100               	movlb	0	; () banked
  8612  0031E0  5182               	movf	___awmod@divisor& (0+255),w,b
  8613  0031E2  0100               	movlb	0	; () banked
  8614  0031E4  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8615  0031E6  0100               	movlb	0	; () banked
  8616  0031E8  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8617  0031EA  0100               	movlb	0	; () banked
  8618  0031EC  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8619  0031EE                     l6557:
  8620                           
  8621                           ; BSR set to: 0
  8622  0031EE  0100               	movlb	0	; () banked
  8623  0031F0  90D8               	bcf	status,0,c
  8624  0031F2  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8625  0031F4  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8626                           
  8627                           ; BSR set to: 0
  8628  0031F6  0100               	movlb	0	; () banked
  8629  0031F8  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8630  0031FA  D7E7               	goto	l6553
  8631  0031FC                     l6561:
  8632                           
  8633                           ; BSR set to: 0
  8634  0031FC  0100               	movlb	0	; () banked
  8635  0031FE  5185               	movf	___awmod@sign& (0+255),w,b
  8636  003200  0100               	movlb	0	; () banked
  8637  003202  B4D8               	btfsc	status,2,c
  8638  003204  D005               	goto	l6565
  8639                           
  8640                           ; BSR set to: 0
  8641  003206  0100               	movlb	0	; () banked
  8642  003208  6D80               	negf	___awmod@dividend& (0+255),b
  8643  00320A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8644  00320C  B0D8               	btfsc	status,0,c
  8645  00320E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8646  003210                     l6565:
  8647                           
  8648                           ; BSR set to: 0
  8649  003210  C080  F080         	movff	___awmod@dividend,?___awmod
  8650  003214  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8651  003218  0012               	return	
  8652  00321A                     __end_of___awmod:
  8653                           	opt stack 0
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           intcon2	equ	0xFF1
  8662                           intcon3	equ	0xFF0
  8663                           postinc0	equ	0xFEE
  8664                           wreg	equ	0xFE8
  8665                           postdec1	equ	0xFE5
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function ___awdiv *****************
  8675 ;; Defined at:
  8676 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  dividend        2    6[BANK0 ] int 
  8679 ;;  divisor         2    8[BANK0 ] int 
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  quotient        2   12[BANK0 ] int 
  8682 ;;  sign            1   11[BANK0 ] unsigned char 
  8683 ;;  counter         1   10[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  2    6[BANK0 ] int 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;Total ram usage:        8 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    7
  8700 ;; This function calls:
  8701 ;;		Nothing
  8702 ;; This function is called by:
  8703 ;;		_UI
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text33
  8708  002E9C                     __ptext33:
  8709                           	opt stack 0
  8710  002E9C                     ___awdiv:
  8711                           	opt stack 22
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;incstack = 0
  8715  002E9C  0E00               	movlw	0
  8716  002E9E  0100               	movlb	0	; () banked
  8717  002EA0  6F8B               	movwf	___awdiv@sign& (0+255),b
  8718                           
  8719                           ; BSR set to: 0
  8720  002EA2  0100               	movlb	0	; () banked
  8721  002EA4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8722  002EA6  D008               	goto	l6497
  8723                           
  8724                           ; BSR set to: 0
  8725  002EA8  0100               	movlb	0	; () banked
  8726  002EAA  6D88               	negf	___awdiv@divisor& (0+255),b
  8727  002EAC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8728  002EAE  B0D8               	btfsc	status,0,c
  8729  002EB0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8730                           
  8731                           ; BSR set to: 0
  8732  002EB2  0E01               	movlw	1
  8733  002EB4  0100               	movlb	0	; () banked
  8734  002EB6  6F8B               	movwf	___awdiv@sign& (0+255),b
  8735  002EB8                     l6497:
  8736                           
  8737                           ; BSR set to: 0
  8738  002EB8  0100               	movlb	0	; () banked
  8739  002EBA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8740  002EBC  D008               	goto	l6503
  8741                           
  8742                           ; BSR set to: 0
  8743  002EBE  0100               	movlb	0	; () banked
  8744  002EC0  6D86               	negf	___awdiv@dividend& (0+255),b
  8745  002EC2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8746  002EC4  B0D8               	btfsc	status,0,c
  8747  002EC6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8748                           
  8749                           ; BSR set to: 0
  8750  002EC8  0E01               	movlw	1
  8751  002ECA  0100               	movlb	0	; () banked
  8752  002ECC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8753  002ECE                     l6503:
  8754                           
  8755                           ; BSR set to: 0
  8756  002ECE  0E00               	movlw	0
  8757  002ED0  0100               	movlb	0	; () banked
  8758  002ED2  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8759  002ED4  0E00               	movlw	0
  8760  002ED6  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8761                           
  8762                           ; BSR set to: 0
  8763  002ED8  0100               	movlb	0	; () banked
  8764  002EDA  5188               	movf	___awdiv@divisor& (0+255),w,b
  8765  002EDC  0100               	movlb	0	; () banked
  8766  002EDE  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8767  002EE0  B4D8               	btfsc	status,2,c
  8768  002EE2  D02C               	goto	l6525
  8769                           
  8770                           ; BSR set to: 0
  8771  002EE4  0E01               	movlw	1
  8772  002EE6  0100               	movlb	0	; () banked
  8773  002EE8  6F8A               	movwf	___awdiv@counter& (0+255),b
  8774  002EEA  D006               	goto	l6511
  8775  002EEC                     l6509:
  8776                           
  8777                           ; BSR set to: 0
  8778  002EEC  0100               	movlb	0	; () banked
  8779  002EEE  90D8               	bcf	status,0,c
  8780  002EF0  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8781  002EF2  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8782  002EF4  0100               	movlb	0	; () banked
  8783  002EF6  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8784  002EF8                     l6511:
  8785                           
  8786                           ; BSR set to: 0
  8787  002EF8  0100               	movlb	0	; () banked
  8788  002EFA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8789  002EFC  D7F7               	goto	l6509
  8790  002EFE                     l6513:
  8791                           
  8792                           ; BSR set to: 0
  8793  002EFE  0100               	movlb	0	; () banked
  8794  002F00  90D8               	bcf	status,0,c
  8795  002F02  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8796  002F04  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8797                           
  8798                           ; BSR set to: 0
  8799  002F06  0100               	movlb	0	; () banked
  8800  002F08  5188               	movf	___awdiv@divisor& (0+255),w,b
  8801  002F0A  0100               	movlb	0	; () banked
  8802  002F0C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8803  002F0E  0100               	movlb	0	; () banked
  8804  002F10  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8805  002F12  0100               	movlb	0	; () banked
  8806  002F14  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8807  002F16  A0D8               	btfss	status,0,c
  8808  002F18  D00A               	goto	l6521
  8809                           
  8810                           ; BSR set to: 0
  8811  002F1A  0100               	movlb	0	; () banked
  8812  002F1C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8813  002F1E  0100               	movlb	0	; () banked
  8814  002F20  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8815  002F22  0100               	movlb	0	; () banked
  8816  002F24  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8817  002F26  0100               	movlb	0	; () banked
  8818  002F28  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8819                           
  8820                           ; BSR set to: 0
  8821  002F2A  0100               	movlb	0	; () banked
  8822  002F2C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8823  002F2E                     l6521:
  8824                           
  8825                           ; BSR set to: 0
  8826  002F2E  0100               	movlb	0	; () banked
  8827  002F30  90D8               	bcf	status,0,c
  8828  002F32  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8829  002F34  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8830                           
  8831                           ; BSR set to: 0
  8832  002F36  0100               	movlb	0	; () banked
  8833  002F38  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8834  002F3A  D7E1               	goto	l6513
  8835  002F3C                     l6525:
  8836                           
  8837                           ; BSR set to: 0
  8838  002F3C  0100               	movlb	0	; () banked
  8839  002F3E  518B               	movf	___awdiv@sign& (0+255),w,b
  8840  002F40  0100               	movlb	0	; () banked
  8841  002F42  B4D8               	btfsc	status,2,c
  8842  002F44  D005               	goto	l6529
  8843                           
  8844                           ; BSR set to: 0
  8845  002F46  0100               	movlb	0	; () banked
  8846  002F48  6D8C               	negf	___awdiv@quotient& (0+255),b
  8847  002F4A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8848  002F4C  B0D8               	btfsc	status,0,c
  8849  002F4E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8850  002F50                     l6529:
  8851                           
  8852                           ; BSR set to: 0
  8853  002F50  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8854  002F54  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8855  002F58  0012               	return	
  8856  002F5A                     __end_of___awdiv:
  8857                           	opt stack 0
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           intcon2	equ	0xFF1
  8866                           intcon3	equ	0xFF0
  8867                           postinc0	equ	0xFEE
  8868                           wreg	equ	0xFE8
  8869                           postdec1	equ	0xFE5
  8870                           fsr1l	equ	0xFE1
  8871                           indf2	equ	0xFDF
  8872                           postinc2	equ	0xFDE
  8873                           postdec2	equ	0xFDD
  8874                           fsr2h	equ	0xFDA
  8875                           fsr2l	equ	0xFD9
  8876                           status	equ	0xFD8
  8877                           
  8878 ;; *************** function _Test *****************
  8879 ;; Defined at:
  8880 ;;		line 23 in file "Test.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  2  451[None  ] int 
  8887 ;; Registers used:
  8888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;Total ram usage:        2 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:   11
  8901 ;; This function calls:
  8902 ;;		_actuatorTest
  8903 ;;		_algorithmTest
  8904 ;;		_lcdInst
  8905 ;;		_printf
  8906 ;;		_sensorTest
  8907 ;; This function is called by:
  8908 ;;		_main
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           	psect	text34
  8913  003016                     __ptext34:
  8914                           	opt stack 0
  8915  003016                     _Test:
  8916                           	opt stack 19
  8917  003016                     
  8918                           ;Test.c: 26: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  8919  003016  0E01               	movlw	1
  8920  003018  EC83  F01F         	call	_lcdInst
  8921  00301C  0E68               	movlw	104
  8922  00301E  0100               	movlb	0	; () banked
  8923  003020  6FC4               	movwf	??_Test& (0+255),b
  8924  003022  0EE4               	movlw	228
  8925  003024                     u6757:
  8926  003024  2EE8               	decfsz	wreg,f,c
  8927  003026  D7FE               	bra	u6757
  8928  003028  2FC4               	decfsz	??_Test& (0+255),f,b
  8929  00302A  D7FC               	bra	u6757
  8930  00302C  F000               	nop	
  8931  00302E  0E80               	movlw	128
  8932  003030  EC83  F01F         	call	_lcdInst
  8933                           
  8934                           ;Test.c: 27: printf("1. ALG  2. SNSRS");
  8935  003034  0EF0               	movlw	low STR_68
  8936  003036  0100               	movlb	0	; () banked
  8937  003038  6F8E               	movwf	printf@f& (0+255),b
  8938  00303A  0EFC               	movlw	high STR_68
  8939  00303C  0100               	movlb	0	; () banked
  8940  00303E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8941  003040  EC93  F008         	call	_printf	;wreg free
  8942                           
  8943                           ;Test.c: 28: lcdInst(0b11000000);;
  8944  003044  0EC0               	movlw	192
  8945  003046  EC83  F01F         	call	_lcdInst
  8946                           
  8947                           ;Test.c: 29: printf("3. ACTUATORS");
  8948  00304A  0E5C               	movlw	low STR_69
  8949  00304C  0100               	movlb	0	; () banked
  8950  00304E  6F8E               	movwf	printf@f& (0+255),b
  8951  003050  0EFF               	movlw	high STR_69
  8952  003052  0100               	movlb	0	; () banked
  8953  003054  6F8F               	movwf	(printf@f+1)& (0+255),b
  8954  003056  EC93  F008         	call	_printf	;wreg free
  8955                           
  8956                           ;Test.c: 30: _delay((unsigned long)((100)*(32000000/4000.0)));
  8957  00305A  0E05               	movlw	5
  8958  00305C  0100               	movlb	0	; () banked
  8959  00305E  6FC5               	movwf	(??_Test+1)& (0+255),b
  8960  003060  0E0F               	movlw	15
  8961  003062  0100               	movlb	0	; () banked
  8962  003064  6FC4               	movwf	??_Test& (0+255),b
  8963  003066  0EF1               	movlw	241
  8964  003068                     u6767:
  8965  003068  2EE8               	decfsz	wreg,f,c
  8966  00306A  D7FE               	bra	u6767
  8967  00306C  2FC4               	decfsz	??_Test& (0+255),f,b
  8968  00306E  D7FC               	bra	u6767
  8969  003070  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  8970  003072  D7FA               	bra	u6767
  8971  003074                     l978:
  8972  003074  A281               	btfss	3969,1,c	;volatile
  8973  003076  D7FE               	goto	l978
  8974                           
  8975                           ;Test.c: 32: var = PORTB >> 4;
  8976  003078  CF81 F0C4          	movff	3969,??_Test	;volatile
  8977  00307C  0100               	movlb	0	; () banked
  8978  00307E  3BC4               	swapf	??_Test& (0+255),f,b
  8979  003080  0E0F               	movlw	15
  8980  003082  17C4               	andwf	??_Test& (0+255),f,b
  8981  003084  0100               	movlb	0	; () banked
  8982  003086  51C4               	movf	??_Test& (0+255),w,b
  8983  003088  6E77               	movwf	_var,c
  8984  00308A  6A78               	clrf	_var+1,c
  8985  00308C                     l981:
  8986  00308C  A281               	btfss	3969,1,c	;volatile
  8987  00308E  D00A               	goto	l7247
  8988  003090  D7FD               	goto	l981
  8989  003092                     l7239:
  8990                           
  8991                           ;Test.c: 36: algorithmTest();
  8992  003092  ECE3  F016         	call	_algorithmTest	;wreg free
  8993                           
  8994                           ;Test.c: 37: break;
  8995  003096  D7BF               	goto	l7223
  8996  003098                     l7241:
  8997                           
  8998                           ;Test.c: 39: sensorTest();
  8999  003098  EC32  F012         	call	_sensorTest	;wreg free
  9000                           
  9001                           ;Test.c: 40: break;
  9002  00309C  D7BC               	goto	l7223
  9003  00309E                     l7243:
  9004                           
  9005                           ;Test.c: 42: actuatorTest();
  9006  00309E  EC5C  F004         	call	_actuatorTest	;wreg free
  9007                           
  9008                           ;Test.c: 46: }
  9009                           
  9010                           ;Test.c: 45: break;
  9011                           
  9012                           ;Test.c: 44: default:
  9013                           
  9014                           ;Test.c: 43: break;
  9015  0030A2  D7B9               	goto	l7223
  9016  0030A4                     l7247:
  9017  0030A4  C077  F0C4         	movff	_var,??_Test
  9018  0030A8  C078  F0C5         	movff	_var+1,??_Test+1
  9019                           
  9020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9021                           ; Switch size 1, requested type "space"
  9022                           ; Number of cases is 1, Range of values is 0 to 0
  9023                           ; switch strategies available:
  9024                           ; Name         Instructions Cycles
  9025                           ; simple_byte            4     3 (average)
  9026                           ;	Chosen strategy is simple_byte
  9027  0030AC  0100               	movlb	0	; () banked
  9028  0030AE  51C5               	movf	(??_Test+1)& (0+255),w,b
  9029  0030B0  0A00               	xorlw	0	; case 0
  9030  0030B2  A4D8               	btfss	status,2,c
  9031  0030B4  D7B0               	goto	l7223
  9032                           
  9033                           ; BSR set to: 0
  9034                           ; Switch size 1, requested type "space"
  9035                           ; Number of cases is 3, Range of values is 0 to 2
  9036                           ; switch strategies available:
  9037                           ; Name         Instructions Cycles
  9038                           ; simple_byte           10     6 (average)
  9039                           ;	Chosen strategy is simple_byte
  9040  0030B6  0100               	movlb	0	; () banked
  9041  0030B8  51C4               	movf	??_Test& (0+255),w,b
  9042  0030BA  0A00               	xorlw	0	; case 0
  9043  0030BC  B4D8               	btfsc	status,2,c
  9044  0030BE  D7E9               	goto	l7239
  9045  0030C0  0A01               	xorlw	1	; case 1
  9046  0030C2  B4D8               	btfsc	status,2,c
  9047  0030C4  D7E9               	goto	l7241
  9048  0030C6  0A03               	xorlw	3	; case 2
  9049  0030C8  B4D8               	btfsc	status,2,c
  9050  0030CA  D7E9               	goto	l7243
  9051                           
  9052                           ; BSR set to: 0
  9053                           
  9054                           ; BSR set to: 0
  9055  0030CC  D7A4               	goto	l7223
  9056  0030CE                     __end_of_Test:
  9057                           	opt stack 0
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           intcon2	equ	0xFF1
  9066                           intcon3	equ	0xFF0
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           postdec1	equ	0xFE5
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function _sensorTest *****************
  9079 ;; Defined at:
  9080 ;;		line 94 in file "Test.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;		None
  9083 ;; Auto vars:     Size  Location     Type
  9084 ;;		None
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  1    wreg      void 
  9087 ;; Registers used:
  9088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;Total ram usage:        2 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:   10
  9101 ;; This function calls:
  9102 ;;		_lcdInst
  9103 ;;		_printf
  9104 ;;		_readIR
  9105 ;;		_readMAG
  9106 ;; This function is called by:
  9107 ;;		_Test
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text35
  9112  002464                     __ptext35:
  9113                           	opt stack 0
  9114  002464                     _sensorTest:
  9115                           	opt stack 19
  9116                           
  9117                           ;Test.c: 96: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;incstack = 0
  9121  002464  0E01               	movlw	1
  9122  002466  EC83  F01F         	call	_lcdInst
  9123  00246A  0E68               	movlw	104
  9124  00246C  0100               	movlb	0	; () banked
  9125  00246E  6FAB               	movwf	??_sensorTest& (0+255),b
  9126  002470  0EE4               	movlw	228
  9127  002472                     u6777:
  9128  002472  2EE8               	decfsz	wreg,f,c
  9129  002474  D7FE               	bra	u6777
  9130  002476  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9131  002478  D7FC               	bra	u6777
  9132  00247A  F000               	nop	
  9133  00247C  0E80               	movlw	128
  9134  00247E  EC83  F01F         	call	_lcdInst
  9135                           
  9136                           ;Test.c: 97: printf("SENSORS");
  9137  002482  0EAD               	movlw	low STR_77
  9138  002484  0100               	movlb	0	; () banked
  9139  002486  6F8E               	movwf	printf@f& (0+255),b
  9140  002488  0EFF               	movlw	high STR_77
  9141  00248A  0100               	movlb	0	; () banked
  9142  00248C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9143  00248E  EC93  F008         	call	_printf	;wreg free
  9144                           
  9145                           ;Test.c: 98: lcdInst(0b11000000);;
  9146  002492  0EC0               	movlw	192
  9147  002494  EC83  F01F         	call	_lcdInst
  9148                           
  9149                           ;Test.c: 99: printf("PUSH TO START");
  9150  002498  0E25               	movlw	low STR_71
  9151  00249A  0100               	movlb	0	; () banked
  9152  00249C  6F8E               	movwf	printf@f& (0+255),b
  9153  00249E  0EFF               	movlw	high STR_71
  9154  0024A0  0100               	movlb	0	; () banked
  9155  0024A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9156  0024A4  EC93  F008         	call	_printf	;wreg free
  9157                           
  9158                           ;Test.c: 100: _delay((unsigned long)((100)*(32000000/4000.0)));
  9159  0024A8  0E05               	movlw	5
  9160  0024AA  0100               	movlb	0	; () banked
  9161  0024AC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9162  0024AE  0E0F               	movlw	15
  9163  0024B0  0100               	movlb	0	; () banked
  9164  0024B2  6FAB               	movwf	??_sensorTest& (0+255),b
  9165  0024B4  0EF1               	movlw	241
  9166  0024B6                     u6787:
  9167  0024B6  2EE8               	decfsz	wreg,f,c
  9168  0024B8  D7FE               	bra	u6787
  9169  0024BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9170  0024BC  D7FC               	bra	u6787
  9171  0024BE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9172  0024C0  D7FA               	bra	u6787
  9173  0024C2                     l1004:
  9174  0024C2  A281               	btfss	3969,1,c	;volatile
  9175  0024C4  D7FE               	goto	l1004
  9176  0024C6                     l1007:
  9177  0024C6  B281               	btfsc	3969,1,c	;volatile
  9178  0024C8  D7FE               	goto	l1007
  9179                           
  9180                           ;Test.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9181  0024CA  0E01               	movlw	1
  9182  0024CC  EC83  F01F         	call	_lcdInst
  9183  0024D0  0E68               	movlw	104
  9184  0024D2  0100               	movlb	0	; () banked
  9185  0024D4  6FAB               	movwf	??_sensorTest& (0+255),b
  9186  0024D6  0EE4               	movlw	228
  9187  0024D8                     u6797:
  9188  0024D8  2EE8               	decfsz	wreg,f,c
  9189  0024DA  D7FE               	bra	u6797
  9190  0024DC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9191  0024DE  D7FC               	bra	u6797
  9192  0024E0  F000               	nop	
  9193  0024E2  0E80               	movlw	128
  9194  0024E4  EC83  F01F         	call	_lcdInst
  9195                           
  9196                           ;Test.c: 108: printf("TST: IR SNSR");
  9197  0024E8  0E4F               	movlw	low STR_79
  9198  0024EA  0100               	movlb	0	; () banked
  9199  0024EC  6F8E               	movwf	printf@f& (0+255),b
  9200  0024EE  0EFF               	movlw	high STR_79
  9201  0024F0  0100               	movlb	0	; () banked
  9202  0024F2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9203  0024F4  EC93  F008         	call	_printf	;wreg free
  9204                           
  9205                           ;Test.c: 109: _delay((unsigned long)((100)*(32000000/4000.0)));
  9206  0024F8  0E05               	movlw	5
  9207  0024FA  0100               	movlb	0	; () banked
  9208  0024FC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9209  0024FE  0E0F               	movlw	15
  9210  002500  0100               	movlb	0	; () banked
  9211  002502  6FAB               	movwf	??_sensorTest& (0+255),b
  9212  002504  0EF1               	movlw	241
  9213  002506                     u6807:
  9214  002506  2EE8               	decfsz	wreg,f,c
  9215  002508  D7FE               	bra	u6807
  9216  00250A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9217  00250C  D7FC               	bra	u6807
  9218  00250E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9219  002510  D7FA               	bra	u6807
  9220                           
  9221                           ;Test.c: 110: while(PORTBbits.RB1 == 0){
  9222  002512  D021               	goto	l6059
  9223  002514                     l6053:
  9224                           
  9225                           ;Test.c: 111: readIR();
  9226  002514  EC7F  F01C         	call	_readIR	;wreg free
  9227                           
  9228                           ;Test.c: 112: lcdInst(0b10000000);;
  9229  002518  0E80               	movlw	128
  9230  00251A  EC83  F01F         	call	_lcdInst
  9231                           
  9232                           ;Test.c: 113: lcdInst(0b11000000);;
  9233  00251E  0EC0               	movlw	192
  9234  002520  EC83  F01F         	call	_lcdInst
  9235                           
  9236                           ;Test.c: 114: printf("IR_signal: %d ", IR_signal);
  9237  002524  0E74               	movlw	low STR_80
  9238  002526  0100               	movlb	0	; () banked
  9239  002528  6F8E               	movwf	printf@f& (0+255),b
  9240  00252A  0EFE               	movlw	high STR_80
  9241  00252C  0100               	movlb	0	; () banked
  9242  00252E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9243  002530  C0DA  F090         	movff	_IR_signal,?_printf+2
  9244  002534  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9245  002538  EC93  F008         	call	_printf	;wreg free
  9246                           
  9247                           ;Test.c: 115: _delay((unsigned long)((100)*(32000000/4000.0)));
  9248  00253C  0E05               	movlw	5
  9249  00253E  0100               	movlb	0	; () banked
  9250  002540  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9251  002542  0E0F               	movlw	15
  9252  002544  0100               	movlb	0	; () banked
  9253  002546  6FAB               	movwf	??_sensorTest& (0+255),b
  9254  002548  0EF1               	movlw	241
  9255  00254A                     u6817:
  9256  00254A  2EE8               	decfsz	wreg,f,c
  9257  00254C  D7FE               	bra	u6817
  9258  00254E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9259  002550  D7FC               	bra	u6817
  9260  002552  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9261  002554  D7FA               	bra	u6817
  9262  002556                     l6059:
  9263  002556  A281               	btfss	3969,1,c	;volatile
  9264  002558  D7DD               	goto	l6053
  9265                           
  9266                           ;Test.c: 116: }
  9267                           ;Test.c: 117: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9268  00255A  0E01               	movlw	1
  9269  00255C  EC83  F01F         	call	_lcdInst
  9270  002560  0E68               	movlw	104
  9271  002562  0100               	movlb	0	; () banked
  9272  002564  6FAB               	movwf	??_sensorTest& (0+255),b
  9273  002566  0EE4               	movlw	228
  9274  002568                     u6827:
  9275  002568  2EE8               	decfsz	wreg,f,c
  9276  00256A  D7FE               	bra	u6827
  9277  00256C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9278  00256E  D7FC               	bra	u6827
  9279  002570  F000               	nop	
  9280  002572  0E80               	movlw	128
  9281  002574  EC83  F01F         	call	_lcdInst
  9282  002578                     l1013:
  9283  002578  B281               	btfsc	3969,1,c	;volatile
  9284  00257A  D7FE               	goto	l1013
  9285                           
  9286                           ;Test.c: 125: printf("TST: MAGNETISM");
  9287  00257C  0EA1               	movlw	low STR_81
  9288  00257E  0100               	movlb	0	; () banked
  9289  002580  6F8E               	movwf	printf@f& (0+255),b
  9290  002582  0EFE               	movlw	high STR_81
  9291  002584  0100               	movlb	0	; () banked
  9292  002586  6F8F               	movwf	(printf@f+1)& (0+255),b
  9293  002588  EC93  F008         	call	_printf	;wreg free
  9294                           
  9295                           ;Test.c: 126: _delay((unsigned long)((100)*(32000000/4000.0)));
  9296  00258C  0E05               	movlw	5
  9297  00258E  0100               	movlb	0	; () banked
  9298  002590  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9299  002592  0E0F               	movlw	15
  9300  002594  0100               	movlb	0	; () banked
  9301  002596  6FAB               	movwf	??_sensorTest& (0+255),b
  9302  002598  0EF1               	movlw	241
  9303  00259A                     u6837:
  9304  00259A  2EE8               	decfsz	wreg,f,c
  9305  00259C  D7FE               	bra	u6837
  9306  00259E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9307  0025A0  D7FC               	bra	u6837
  9308  0025A2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9309  0025A4  D7FA               	bra	u6837
  9310                           
  9311                           ;Test.c: 127: while(PORTBbits.RB1 == 0){
  9312  0025A6  D021               	goto	l6077
  9313  0025A8                     l6071:
  9314                           
  9315                           ;Test.c: 128: readMAG();
  9316  0025A8  EC59  F01C         	call	_readMAG	;wreg free
  9317                           
  9318                           ;Test.c: 129: lcdInst(0b10000000);;
  9319  0025AC  0E80               	movlw	128
  9320  0025AE  EC83  F01F         	call	_lcdInst
  9321                           
  9322                           ;Test.c: 130: lcdInst(0b11000000);;
  9323  0025B2  0EC0               	movlw	192
  9324  0025B4  EC83  F01F         	call	_lcdInst
  9325                           
  9326                           ;Test.c: 131: printf("MAG_signal: %d ", MAG_signal);
  9327  0025B8  0E44               	movlw	low STR_82
  9328  0025BA  0100               	movlb	0	; () banked
  9329  0025BC  6F8E               	movwf	printf@f& (0+255),b
  9330  0025BE  0EFE               	movlw	high STR_82
  9331  0025C0  0100               	movlb	0	; () banked
  9332  0025C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9333  0025C4  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9334  0025C8  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9335  0025CC  EC93  F008         	call	_printf	;wreg free
  9336                           
  9337                           ;Test.c: 132: _delay((unsigned long)((100)*(32000000/4000.0)));
  9338  0025D0  0E05               	movlw	5
  9339  0025D2  0100               	movlb	0	; () banked
  9340  0025D4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9341  0025D6  0E0F               	movlw	15
  9342  0025D8  0100               	movlb	0	; () banked
  9343  0025DA  6FAB               	movwf	??_sensorTest& (0+255),b
  9344  0025DC  0EF1               	movlw	241
  9345  0025DE                     u6847:
  9346  0025DE  2EE8               	decfsz	wreg,f,c
  9347  0025E0  D7FE               	bra	u6847
  9348  0025E2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9349  0025E4  D7FC               	bra	u6847
  9350  0025E6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9351  0025E8  D7FA               	bra	u6847
  9352  0025EA                     l6077:
  9353  0025EA  B281               	btfsc	3969,1,c	;volatile
  9354  0025EC  0012               	return	
  9355  0025EE  D7DC               	goto	l6071
  9356  0025F0                     __end_of_sensorTest:
  9357                           	opt stack 0
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           intcon2	equ	0xFF1
  9366                           intcon3	equ	0xFF0
  9367                           postinc0	equ	0xFEE
  9368                           wreg	equ	0xFE8
  9369                           postdec1	equ	0xFE5
  9370                           fsr1l	equ	0xFE1
  9371                           indf2	equ	0xFDF
  9372                           postinc2	equ	0xFDE
  9373                           postdec2	equ	0xFDD
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function _readMAG *****************
  9379 ;; Defined at:
  9380 ;;		line 29 in file "ADCFunctionality.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  res             2    4[BANK0 ] int 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        4 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    8
  9401 ;; This function calls:
  9402 ;;		_readADC
  9403 ;; This function is called by:
  9404 ;;		_ID
  9405 ;;		_sensorTest
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text36
  9410  0038B2                     __ptext36:
  9411                           	opt stack 0
  9412  0038B2                     _readMAG:
  9413                           	opt stack 20
  9414                           
  9415                           ;ADCFunctionality.c: 30: readADC(1);
  9416                           
  9417                           ;incstack = 0
  9418  0038B2  0E01               	movlw	1
  9419  0038B4  EC8C  F01E         	call	_readADC
  9420                           
  9421                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9422  0038B8  50C3               	movf	4035,w,c	;volatile
  9423  0038BA  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9424  0038BE  0100               	movlb	0	; () banked
  9425  0038C0  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9426  0038C2  C082  F083         	movff	??_readMAG,??_readMAG+1
  9427  0038C6  0100               	movlb	0	; () banked
  9428  0038C8  6B82               	clrf	??_readMAG& (0+255),b
  9429  0038CA  0100               	movlb	0	; () banked
  9430  0038CC  1182               	iorwf	??_readMAG& (0+255),w,b
  9431  0038CE  0100               	movlb	0	; () banked
  9432  0038D0  6F84               	movwf	readMAG@res& (0+255),b
  9433  0038D2  0100               	movlb	0	; () banked
  9434  0038D4  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9435  0038D6  0100               	movlb	0	; () banked
  9436  0038D8  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9440  0038DA  0100               	movlb	0	; () banked
  9441  0038DC  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9442  0038DE  D008               	goto	u4131
  9443  0038E0  0100               	movlb	0	; () banked
  9444  0038E2  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9445  0038E4  E107               	bnz	u4130
  9446  0038E6  0E96               	movlw	150
  9447  0038E8  0100               	movlb	0	; () banked
  9448  0038EA  5D84               	subwf	readMAG@res& (0+255),w,b
  9449  0038EC  B0D8               	btfsc	status,0,c
  9450  0038EE  D002               	goto	u4130
  9451  0038F0                     u4131:
  9452  0038F0  0E01               	movlw	1
  9453  0038F2  D001               	goto	u4140
  9454  0038F4                     u4130:
  9455  0038F4  0E00               	movlw	0
  9456  0038F6                     u4140:
  9457  0038F6  0100               	movlb	0	; () banked
  9458  0038F8  6FDC               	movwf	_MAG_signal& (0+255),b
  9459  0038FA  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9460                           
  9461                           ; BSR set to: 0
  9462  0038FC  0012               	return		;funcret
  9463  0038FE                     __end_of_readMAG:
  9464                           	opt stack 0
  9465                           tblptru	equ	0xFF8
  9466                           tblptrh	equ	0xFF7
  9467                           tblptrl	equ	0xFF6
  9468                           tablat	equ	0xFF5
  9469                           prodh	equ	0xFF4
  9470                           prodl	equ	0xFF3
  9471                           intcon	equ	0xFF2
  9472                           intcon2	equ	0xFF1
  9473                           intcon3	equ	0xFF0
  9474                           postinc0	equ	0xFEE
  9475                           wreg	equ	0xFE8
  9476                           postdec1	equ	0xFE5
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485 ;; *************** function _readIR *****************
  9486 ;; Defined at:
  9487 ;;		line 23 in file "ADCFunctionality.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  res             2    4[BANK0 ] int 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  1    wreg      void 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;Total ram usage:        4 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    8
  9508 ;; This function calls:
  9509 ;;		_readADC
  9510 ;; This function is called by:
  9511 ;;		_getIR
  9512 ;;		_sensorTest
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text37
  9517  0038FE                     __ptext37:
  9518                           	opt stack 0
  9519  0038FE                     _readIR:
  9520                           	opt stack 19
  9521                           
  9522                           ;ADCFunctionality.c: 24: readADC(0);
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;incstack = 0
  9526  0038FE  0E00               	movlw	0
  9527  003900  EC8C  F01E         	call	_readADC
  9528                           
  9529                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9530  003904  50C3               	movf	4035,w,c	;volatile
  9531  003906  CFC4 F082          	movff	4036,??_readIR	;volatile
  9532  00390A  0100               	movlb	0	; () banked
  9533  00390C  6B83               	clrf	(??_readIR+1)& (0+255),b
  9534  00390E  C082  F083         	movff	??_readIR,??_readIR+1
  9535  003912  0100               	movlb	0	; () banked
  9536  003914  6B82               	clrf	??_readIR& (0+255),b
  9537  003916  0100               	movlb	0	; () banked
  9538  003918  1182               	iorwf	??_readIR& (0+255),w,b
  9539  00391A  0100               	movlb	0	; () banked
  9540  00391C  6F84               	movwf	readIR@res& (0+255),b
  9541  00391E  0100               	movlb	0	; () banked
  9542  003920  5183               	movf	(??_readIR+1)& (0+255),w,b
  9543  003922  0100               	movlb	0	; () banked
  9544  003924  6F85               	movwf	(readIR@res+1)& (0+255),b
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9548  003926  0100               	movlb	0	; () banked
  9549  003928  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9550  00392A  D008               	goto	u3461
  9551  00392C  0100               	movlb	0	; () banked
  9552  00392E  5185               	movf	(readIR@res+1)& (0+255),w,b
  9553  003930  E107               	bnz	u3460
  9554  003932  0E96               	movlw	150
  9555  003934  0100               	movlb	0	; () banked
  9556  003936  5D84               	subwf	readIR@res& (0+255),w,b
  9557  003938  B0D8               	btfsc	status,0,c
  9558  00393A  D002               	goto	u3460
  9559  00393C                     u3461:
  9560  00393C  0E01               	movlw	1
  9561  00393E  D001               	goto	u3470
  9562  003940                     u3460:
  9563  003940  0E00               	movlw	0
  9564  003942                     u3470:
  9565  003942  0100               	movlb	0	; () banked
  9566  003944  6FDA               	movwf	_IR_signal& (0+255),b
  9567  003946  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9568                           
  9569                           ; BSR set to: 0
  9570  003948  0012               	return		;funcret
  9571  00394A                     __end_of_readIR:
  9572                           	opt stack 0
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           intcon2	equ	0xFF1
  9581                           intcon3	equ	0xFF0
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           postdec1	equ	0xFE5
  9585                           fsr1l	equ	0xFE1
  9586                           indf2	equ	0xFDF
  9587                           postinc2	equ	0xFDE
  9588                           postdec2	equ	0xFDD
  9589                           fsr2h	equ	0xFDA
  9590                           fsr2l	equ	0xFD9
  9591                           status	equ	0xFD8
  9592                           
  9593 ;; *************** function _readADC *****************
  9594 ;; Defined at:
  9595 ;;		line 15 in file "ADCFunctionality.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;  channel         1    wreg     unsigned char 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;  channel         1    1[BANK0 ] unsigned char 
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  1    wreg      void 
  9602 ;; Registers used:
  9603 ;;		wreg, status,2, status,0, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;Total ram usage:        2 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    7
  9616 ;; This function calls:
  9617 ;;		Nothing
  9618 ;; This function is called by:
  9619 ;;		_readIR
  9620 ;;		_readMAG
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text38
  9625  003D18                     __ptext38:
  9626                           	opt stack 0
  9627  003D18                     _readADC:
  9628                           	opt stack 19
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;incstack = 0
  9632                           ;readADC@channel stored from wreg
  9633  003D18  0100               	movlb	0	; () banked
  9634  003D1A  6F81               	movwf	readADC@channel& (0+255),b
  9635                           
  9636                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9637  003D1C  0100               	movlb	0	; () banked
  9638  003D1E  4581               	rlncf	readADC@channel& (0+255),w,b
  9639  003D20  46E8               	rlncf	wreg,f,c
  9640  003D22  0BFC               	andlw	252
  9641  003D24  6EC2               	movwf	4034,c	;volatile
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9645  003D26  80C2               	bsf	4034,0,c	;volatile
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9649  003D28  82C2               	bsf	4034,1,c	;volatile
  9650                           
  9651                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9652  003D2A  D009               	goto	l4755
  9653  003D2C                     l4753:
  9654  003D2C  0E34               	movlw	52
  9655  003D2E  0100               	movlb	0	; () banked
  9656  003D30  6F80               	movwf	??_readADC& (0+255),b
  9657  003D32  0EF1               	movlw	241
  9658  003D34                     u6857:
  9659  003D34  2EE8               	decfsz	wreg,f,c
  9660  003D36  D7FE               	bra	u6857
  9661  003D38  2F80               	decfsz	??_readADC& (0+255),f,b
  9662  003D3A  D7FC               	bra	u6857
  9663  003D3C  D000               	nop2	
  9664  003D3E                     l4755:
  9665  003D3E  A2C2               	btfss	4034,1,c	;volatile
  9666  003D40  0012               	return	
  9667  003D42  D7F4               	goto	l4753
  9668  003D44                     __end_of_readADC:
  9669                           	opt stack 0
  9670                           tblptru	equ	0xFF8
  9671                           tblptrh	equ	0xFF7
  9672                           tblptrl	equ	0xFF6
  9673                           tablat	equ	0xFF5
  9674                           prodh	equ	0xFF4
  9675                           prodl	equ	0xFF3
  9676                           intcon	equ	0xFF2
  9677                           intcon2	equ	0xFF1
  9678                           intcon3	equ	0xFF0
  9679                           postinc0	equ	0xFEE
  9680                           wreg	equ	0xFE8
  9681                           postdec1	equ	0xFE5
  9682                           fsr1l	equ	0xFE1
  9683                           indf2	equ	0xFDF
  9684                           postinc2	equ	0xFDE
  9685                           postdec2	equ	0xFDD
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _algorithmTest *****************
  9691 ;; Defined at:
  9692 ;;		line 50 in file "Test.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;		None
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;Total ram usage:        2 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:   10
  9713 ;; This function calls:
  9714 ;;		_lcdInst
  9715 ;;		_printf
  9716 ;; This function is called by:
  9717 ;;		_Test
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text39
  9722  002DC6                     __ptext39:
  9723                           	opt stack 0
  9724  002DC6                     _algorithmTest:
  9725                           	opt stack 19
  9726                           
  9727                           ;Test.c: 52: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9728                           
  9729                           ;incstack = 0
  9730  002DC6  0E01               	movlw	1
  9731  002DC8  EC83  F01F         	call	_lcdInst
  9732  002DCC  0E68               	movlw	104
  9733  002DCE  0100               	movlb	0	; () banked
  9734  002DD0  6FAB               	movwf	??_algorithmTest& (0+255),b
  9735  002DD2  0EE4               	movlw	228
  9736  002DD4                     u6867:
  9737  002DD4  2EE8               	decfsz	wreg,f,c
  9738  002DD6  D7FE               	bra	u6867
  9739  002DD8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9740  002DDA  D7FC               	bra	u6867
  9741  002DDC  F000               	nop	
  9742  002DDE  0E80               	movlw	128
  9743  002DE0  EC83  F01F         	call	_lcdInst
  9744                           
  9745                           ;Test.c: 53: printf("ALGORITHM TEST");
  9746  002DE4  0EEC               	movlw	low STR_70
  9747  002DE6  0100               	movlb	0	; () banked
  9748  002DE8  6F8E               	movwf	printf@f& (0+255),b
  9749  002DEA  0EFE               	movlw	high STR_70
  9750  002DEC  0100               	movlb	0	; () banked
  9751  002DEE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9752  002DF0  EC93  F008         	call	_printf	;wreg free
  9753                           
  9754                           ;Test.c: 54: lcdInst(0b11000000);;
  9755  002DF4  0EC0               	movlw	192
  9756  002DF6  EC83  F01F         	call	_lcdInst
  9757                           
  9758                           ;Test.c: 55: printf("PUSH TO START");
  9759  002DFA  0E25               	movlw	low STR_71
  9760  002DFC  0100               	movlb	0	; () banked
  9761  002DFE  6F8E               	movwf	printf@f& (0+255),b
  9762  002E00  0EFF               	movlw	high STR_71
  9763  002E02  0100               	movlb	0	; () banked
  9764  002E04  6F8F               	movwf	(printf@f+1)& (0+255),b
  9765  002E06  EC93  F008         	call	_printf	;wreg free
  9766                           
  9767                           ;Test.c: 56: _delay((unsigned long)((100)*(32000000/4000.0)));
  9768  002E0A  0E05               	movlw	5
  9769  002E0C  0100               	movlb	0	; () banked
  9770  002E0E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9771  002E10  0E0F               	movlw	15
  9772  002E12  0100               	movlb	0	; () banked
  9773  002E14  6FAB               	movwf	??_algorithmTest& (0+255),b
  9774  002E16  0EF1               	movlw	241
  9775  002E18                     u6877:
  9776  002E18  2EE8               	decfsz	wreg,f,c
  9777  002E1A  D7FE               	bra	u6877
  9778  002E1C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9779  002E1E  D7FC               	bra	u6877
  9780  002E20  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9781  002E22  D7FA               	bra	u6877
  9782  002E24                     l995:
  9783  002E24  A281               	btfss	3969,1,c	;volatile
  9784  002E26  D7FE               	goto	l995
  9785  002E28                     l998:
  9786  002E28  B281               	btfsc	3969,1,c	;volatile
  9787  002E2A  D7FE               	goto	l998
  9788                           
  9789                           ;Test.c: 59: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9790  002E2C  0E01               	movlw	1
  9791  002E2E  EC83  F01F         	call	_lcdInst
  9792  002E32  0E68               	movlw	104
  9793  002E34  0100               	movlb	0	; () banked
  9794  002E36  6FAB               	movwf	??_algorithmTest& (0+255),b
  9795  002E38  0EE4               	movlw	228
  9796  002E3A                     u6887:
  9797  002E3A  2EE8               	decfsz	wreg,f,c
  9798  002E3C  D7FE               	bra	u6887
  9799  002E3E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9800  002E40  D7FC               	bra	u6887
  9801  002E42  F000               	nop	
  9802  002E44  0E80               	movlw	128
  9803  002E46  EC83  F01F         	call	_lcdInst
  9804                           
  9805                           ;Test.c: 64: printf("ALG1: 9 POPNOTAB");
  9806  002E4A  0EBD               	movlw	low STR_72
  9807  002E4C  0100               	movlb	0	; () banked
  9808  002E4E  6F8E               	movwf	printf@f& (0+255),b
  9809  002E50  0EFC               	movlw	high STR_72
  9810  002E52  0100               	movlb	0	; () banked
  9811  002E54  6F8F               	movwf	(printf@f+1)& (0+255),b
  9812  002E56  EC93  F008         	call	_printf	;wreg free
  9813                           
  9814                           ;Test.c: 71: printf("ALG2: 12 CANS");
  9815  002E5A  0E09               	movlw	low STR_73
  9816  002E5C  0100               	movlb	0	; () banked
  9817  002E5E  6F8E               	movwf	printf@f& (0+255),b
  9818  002E60  0EFF               	movlw	high STR_73
  9819  002E62  0100               	movlb	0	; () banked
  9820  002E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  9821  002E66  EC93  F008         	call	_printf	;wreg free
  9822                           
  9823                           ;Test.c: 80: printf("ALG3: 1 CAN");
  9824  002E6A  0E76               	movlw	low STR_74
  9825  002E6C  0100               	movlb	0	; () banked
  9826  002E6E  6F8E               	movwf	printf@f& (0+255),b
  9827  002E70  0EFF               	movlw	high STR_74
  9828  002E72  0100               	movlb	0	; () banked
  9829  002E74  6F8F               	movwf	(printf@f+1)& (0+255),b
  9830  002E76  EC93  F008         	call	_printf	;wreg free
  9831                           
  9832                           ;Test.c: 86: printf("ALG4: ALL CANS");
  9833  002E7A  0ECE               	movlw	low STR_75
  9834  002E7C  0100               	movlb	0	; () banked
  9835  002E7E  6F8E               	movwf	printf@f& (0+255),b
  9836  002E80  0EFE               	movlw	high STR_75
  9837  002E82  0100               	movlb	0	; () banked
  9838  002E84  6F8F               	movwf	(printf@f+1)& (0+255),b
  9839  002E86  EC93  F008         	call	_printf	;wreg free
  9840                           
  9841                           ;Test.c: 91: printf("ALG5: NO CANS");
  9842  002E8A  0E17               	movlw	low STR_76
  9843  002E8C  0100               	movlb	0	; () banked
  9844  002E8E  6F8E               	movwf	printf@f& (0+255),b
  9845  002E90  0EFF               	movlw	high STR_76
  9846  002E92  0100               	movlb	0	; () banked
  9847  002E94  6F8F               	movwf	(printf@f+1)& (0+255),b
  9848  002E96  EC93  F008         	call	_printf	;wreg free
  9849  002E9A  0012               	return		;funcret
  9850  002E9C                     __end_of_algorithmTest:
  9851                           	opt stack 0
  9852                           tblptru	equ	0xFF8
  9853                           tblptrh	equ	0xFF7
  9854                           tblptrl	equ	0xFF6
  9855                           tablat	equ	0xFF5
  9856                           prodh	equ	0xFF4
  9857                           prodl	equ	0xFF3
  9858                           intcon	equ	0xFF2
  9859                           intcon2	equ	0xFF1
  9860                           intcon3	equ	0xFF0
  9861                           postinc0	equ	0xFEE
  9862                           wreg	equ	0xFE8
  9863                           postdec1	equ	0xFE5
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           postinc2	equ	0xFDE
  9867                           postdec2	equ	0xFDD
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872 ;; *************** function _actuatorTest *****************
  9873 ;; Defined at:
  9874 ;;		line 136 in file "Test.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  i               1   45[BANK0 ] unsigned char 
  9879 ;;  i               1   67[BANK0 ] unsigned char 
  9880 ;;  i               1   66[BANK0 ] unsigned char 
  9881 ;;  i               1   65[BANK0 ] unsigned char 
  9882 ;;  i               1   64[BANK0 ] unsigned char 
  9883 ;;  i               1   63[BANK0 ] unsigned char 
  9884 ;;  i               1   62[BANK0 ] unsigned char 
  9885 ;;  i               1   61[BANK0 ] unsigned char 
  9886 ;;  i               1   60[BANK0 ] unsigned char 
  9887 ;;  i               1   59[BANK0 ] unsigned char 
  9888 ;;  i               1   58[BANK0 ] unsigned char 
  9889 ;;  i               1   57[BANK0 ] unsigned char 
  9890 ;;  i               1   56[BANK0 ] unsigned char 
  9891 ;;  i               1   55[BANK0 ] unsigned char 
  9892 ;;  i               1   54[BANK0 ] unsigned char 
  9893 ;;  i               1   53[BANK0 ] unsigned char 
  9894 ;;  i               1   52[BANK0 ] unsigned char 
  9895 ;;  i               1   51[BANK0 ] unsigned char 
  9896 ;;  i               1   50[BANK0 ] unsigned char 
  9897 ;;  i               1   49[BANK0 ] unsigned char 
  9898 ;;  i               1   48[BANK0 ] unsigned char 
  9899 ;;  i               1   47[BANK0 ] unsigned char 
  9900 ;;  i               1   46[BANK0 ] unsigned char 
  9901 ;; Return value:  Size  Location     Type
  9902 ;;                  1    wreg      void 
  9903 ;; Registers used:
  9904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;Total ram usage:       25 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:   10
  9917 ;; This function calls:
  9918 ;;		_lcdInst
  9919 ;;		_printf
  9920 ;;		_updateServoPosition
  9921 ;; This function is called by:
  9922 ;;		_Test
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           	psect	text40
  9927  0008B8                     __ptext40:
  9928                           	opt stack 0
  9929  0008B8                     _actuatorTest:
  9930                           	opt stack 19
  9931                           
  9932                           ;Test.c: 138: (INTCONbits.GIE = 1);
  9933                           
  9934                           ;incstack = 0
  9935  0008B8  8EF2               	bsf	intcon,7,c	;volatile
  9936                           
  9937                           ;Test.c: 139: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9938  0008BA  0E01               	movlw	1
  9939  0008BC  EC83  F01F         	call	_lcdInst
  9940  0008C0  0E68               	movlw	104
  9941  0008C2  0100               	movlb	0	; () banked
  9942  0008C4  6FAB               	movwf	??_actuatorTest& (0+255),b
  9943  0008C6  0EE4               	movlw	228
  9944  0008C8                     u6897:
  9945  0008C8  2EE8               	decfsz	wreg,f,c
  9946  0008CA  D7FE               	bra	u6897
  9947  0008CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
  9948  0008CE  D7FC               	bra	u6897
  9949  0008D0  F000               	nop	
  9950  0008D2  0E80               	movlw	128
  9951  0008D4  EC83  F01F         	call	_lcdInst
  9952                           
  9953                           ;Test.c: 140: printf("ACTUATORS");
  9954  0008D8  0E5F               	movlw	low (STR_69+3)
  9955  0008DA  0100               	movlb	0	; () banked
  9956  0008DC  6F8E               	movwf	printf@f& (0+255),b
  9957  0008DE  0EFF               	movlw	high (STR_69+3)
  9958  0008E0  0100               	movlb	0	; () banked
  9959  0008E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9960  0008E4  EC93  F008         	call	_printf	;wreg free
  9961                           
  9962                           ;Test.c: 141: lcdInst(0b11000000);;
  9963  0008E8  0EC0               	movlw	192
  9964  0008EA  EC83  F01F         	call	_lcdInst
  9965                           
  9966                           ;Test.c: 142: printf("PUSH TO START");
  9967  0008EE  0E25               	movlw	low STR_71
  9968  0008F0  0100               	movlb	0	; () banked
  9969  0008F2  6F8E               	movwf	printf@f& (0+255),b
  9970  0008F4  0EFF               	movlw	high STR_71
  9971  0008F6  0100               	movlb	0	; () banked
  9972  0008F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9973  0008FA  EC93  F008         	call	_printf	;wreg free
  9974                           
  9975                           ;Test.c: 143: _delay((unsigned long)((100)*(32000000/4000.0)));
  9976  0008FE  0E05               	movlw	5
  9977  000900  0100               	movlb	0	; () banked
  9978  000902  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
  9979  000904  0E0F               	movlw	15
  9980  000906  0100               	movlb	0	; () banked
  9981  000908  6FAB               	movwf	??_actuatorTest& (0+255),b
  9982  00090A  0EF1               	movlw	241
  9983  00090C                     u6907:
  9984  00090C  2EE8               	decfsz	wreg,f,c
  9985  00090E  D7FE               	bra	u6907
  9986  000910  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
  9987  000912  D7FC               	bra	u6907
  9988  000914  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
  9989  000916  D7FA               	bra	u6907
  9990  000918                     l1022:
  9991  000918  A281               	btfss	3969,1,c	;volatile
  9992  00091A  D7FE               	goto	l1022
  9993  00091C                     l1025:
  9994  00091C  B281               	btfsc	3969,1,c	;volatile
  9995  00091E  D7FE               	goto	l1025
  9996                           
  9997                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9998  000920  0E01               	movlw	1
  9999  000922  EC83  F01F         	call	_lcdInst
 10000  000926  0E68               	movlw	104
 10001  000928  0100               	movlb	0	; () banked
 10002  00092A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10003  00092C  0EE4               	movlw	228
 10004  00092E                     u6917:
 10005  00092E  2EE8               	decfsz	wreg,f,c
 10006  000930  D7FE               	bra	u6917
 10007  000932  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10008  000934  D7FC               	bra	u6917
 10009  000936  F000               	nop	
 10010  000938  0E80               	movlw	128
 10011  00093A  EC83  F01F         	call	_lcdInst
 10012                           
 10013                           ;Test.c: 151: printf("TST: DC MOTORS");
 10014  00093E  0EDD               	movlw	low STR_85
 10015  000940  0100               	movlb	0	; () banked
 10016  000942  6F8E               	movwf	printf@f& (0+255),b
 10017  000944  0EFE               	movlw	high STR_85
 10018  000946  0100               	movlb	0	; () banked
 10019  000948  6F8F               	movwf	(printf@f+1)& (0+255),b
 10020  00094A  EC93  F008         	call	_printf	;wreg free
 10021                           
 10022                           ;Test.c: 152: lcdInst(0b11000000);;
 10023  00094E  0EC0               	movlw	192
 10024  000950  EC83  F01F         	call	_lcdInst
 10025                           
 10026                           ;Test.c: 153: printf("PIN RA5 HIGH.");
 10027  000954  0EFB               	movlw	low STR_86
 10028  000956  0100               	movlb	0	; () banked
 10029  000958  6F8E               	movwf	printf@f& (0+255),b
 10030  00095A  0EFE               	movlw	high STR_86
 10031  00095C  0100               	movlb	0	; () banked
 10032  00095E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10033  000960  EC93  F008         	call	_printf	;wreg free
 10034                           
 10035                           ;Test.c: 154: LATAbits.LATA5 = 1;
 10036  000964  8A89               	bsf	3977,5,c	;volatile
 10037                           
 10038                           ;Test.c: 155: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10039  000966  0E00               	movlw	0
 10040  000968  0100               	movlb	0	; () banked
 10041  00096A  6FE7               	movwf	(_i+1)& (0+255),b
 10042  00096C  0E00               	movlw	0
 10043  00096E  6FE6               	movwf	_i& (0+255),b
 10044                           
 10045                           ; BSR set to: 0
 10046  000970  0100               	movlb	0	; () banked
 10047  000972  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10048  000974  D008               	goto	l6115
 10049  000976  0100               	movlb	0	; () banked
 10050  000978  51E7               	movf	(_i+1)& (0+255),w,b
 10051  00097A  E123               	bnz	l1029
 10052  00097C  0E05               	movlw	5
 10053  00097E  0100               	movlb	0	; () banked
 10054  000980  5DE6               	subwf	_i& (0+255),w,b
 10055  000982  B0D8               	btfsc	status,0,c
 10056  000984  D01E               	goto	l1029
 10057  000986                     l6115:
 10058                           
 10059                           ; BSR set to: 0
 10060  000986  0E00               	movlw	0
 10061  000988  0100               	movlb	0	; () banked
 10062  00098A  6FAD               	movwf	actuatorTest@i& (0+255),b
 10063  00098C                     l6117:
 10064                           
 10065                           ; BSR set to: 0
 10066  00098C  0E63               	movlw	99
 10067  00098E  0100               	movlb	0	; () banked
 10068  000990  65AD               	cpfsgt	actuatorTest@i& (0+255),b
 10069  000992  D001               	goto	l6121
 10070  000994  D00C               	goto	l6125
 10071  000996                     l6121:
 10072                           
 10073                           ; BSR set to: 0
 10074  000996  0E68               	movlw	104
 10075  000998  0100               	movlb	0	; () banked
 10076  00099A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10077  00099C  0EE4               	movlw	228
 10078  00099E                     u6927:
 10079  00099E  2EE8               	decfsz	wreg,f,c
 10080  0009A0  D7FE               	bra	u6927
 10081  0009A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10082  0009A4  D7FC               	bra	u6927
 10083  0009A6  F000               	nop	
 10084  0009A8  0100               	movlb	0	; () banked
 10085  0009AA  2BAD               	incf	actuatorTest@i& (0+255),f,b
 10086  0009AC  D7EF               	goto	l6117
 10087  0009AE                     l6125:
 10088                           
 10089                           ; BSR set to: 0
 10090  0009AE  0100               	movlb	0	; () banked
 10091  0009B0  4BE6               	infsnz	_i& (0+255),f,b
 10092  0009B2  2BE7               	incf	(_i+1)& (0+255),f,b
 10093                           
 10094                           ; BSR set to: 0
 10095  0009B4  0100               	movlb	0	; () banked
 10096  0009B6  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10097  0009B8  D7E6               	goto	l6115
 10098  0009BA  0100               	movlb	0	; () banked
 10099  0009BC  51E7               	movf	(_i+1)& (0+255),w,b
 10100  0009BE  E101               	bnz	u4720
 10101  0009C0  D7DD               	goto	L6
 10102  0009C2                     u4720:
 10103  0009C2                     l1029:
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;Test.c: 156: LATAbits.LATA5 = 0;
 10107  0009C2  9A89               	bcf	3977,5,c	;volatile
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;Test.c: 157: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10111  0009C4  0E01               	movlw	1
 10112  0009C6  EC83  F01F         	call	_lcdInst
 10113  0009CA  0E68               	movlw	104
 10114  0009CC  0100               	movlb	0	; () banked
 10115  0009CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10116  0009D0  0EE4               	movlw	228
 10117  0009D2                     u6937:
 10118  0009D2  2EE8               	decfsz	wreg,f,c
 10119  0009D4  D7FE               	bra	u6937
 10120  0009D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10121  0009D8  D7FC               	bra	u6937
 10122  0009DA  F000               	nop	
 10123  0009DC  0E80               	movlw	128
 10124  0009DE  EC83  F01F         	call	_lcdInst
 10125                           
 10126                           ;Test.c: 163: printf("TST: COND SOLN'D");
 10127  0009E2  0ECE               	movlw	low STR_87
 10128  0009E4  0100               	movlb	0	; () banked
 10129  0009E6  6F8E               	movwf	printf@f& (0+255),b
 10130  0009E8  0EFC               	movlw	high STR_87
 10131  0009EA  0100               	movlb	0	; () banked
 10132  0009EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10133  0009EE  EC93  F008         	call	_printf	;wreg free
 10134                           
 10135                           ;Test.c: 164: lcdInst(0b11000000);;
 10136  0009F2  0EC0               	movlw	192
 10137  0009F4  EC83  F01F         	call	_lcdInst
 10138                           
 10139                           ;Test.c: 165: printf("PIN RA3...");
 10140  0009F8  0E82               	movlw	low STR_88
 10141  0009FA  0100               	movlb	0	; () banked
 10142  0009FC  6F8E               	movwf	printf@f& (0+255),b
 10143  0009FE  0EFF               	movlw	high STR_88
 10144  000A00  0100               	movlb	0	; () banked
 10145  000A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 10146  000A04  EC93  F008         	call	_printf	;wreg free
 10147                           
 10148                           ;Test.c: 166: for(i=0;i<5;i++){
 10149  000A08  0E00               	movlw	0
 10150  000A0A  0100               	movlb	0	; () banked
 10151  000A0C  6FE7               	movwf	(_i+1)& (0+255),b
 10152  000A0E  0E00               	movlw	0
 10153  000A10  6FE6               	movwf	_i& (0+255),b
 10154                           
 10155                           ; BSR set to: 0
 10156  000A12  0100               	movlb	0	; () banked
 10157  000A14  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10158  000A16  D008               	goto	l1032
 10159  000A18  0100               	movlb	0	; () banked
 10160  000A1A  51E7               	movf	(_i+1)& (0+255),w,b
 10161  000A1C  E12C               	bnz	l1033
 10162  000A1E  0E05               	movlw	5
 10163  000A20  0100               	movlb	0	; () banked
 10164  000A22  5DE6               	subwf	_i& (0+255),w,b
 10165  000A24  B0D8               	btfsc	status,0,c
 10166  000A26  D027               	goto	l1033
 10167  000A28                     l1032:
 10168                           
 10169                           ; BSR set to: 0
 10170                           ;Test.c: 167: LATAbits.LATA3 = 1;
 10171  000A28  8689               	bsf	3977,3,c	;volatile
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 10175  000A2A  0E05               	movlw	5
 10176  000A2C  0100               	movlb	0	; () banked
 10177  000A2E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10178  000A30  0E0F               	movlw	15
 10179  000A32  0100               	movlb	0	; () banked
 10180  000A34  6FAB               	movwf	??_actuatorTest& (0+255),b
 10181  000A36  0EF1               	movlw	241
 10182  000A38                     u6947:
 10183  000A38  2EE8               	decfsz	wreg,f,c
 10184  000A3A  D7FE               	bra	u6947
 10185  000A3C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10186  000A3E  D7FC               	bra	u6947
 10187  000A40  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10188  000A42  D7FA               	bra	u6947
 10189                           
 10190                           ;Test.c: 169: LATAbits.LATA3 = ~1;
 10191  000A44  9689               	bcf	3977,3,c	;volatile
 10192                           
 10193                           ;Test.c: 170: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10194  000A46  0E25               	movlw	37
 10195  000A48  0100               	movlb	0	; () banked
 10196  000A4A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10197  000A4C  0E87               	movlw	135
 10198  000A4E  0100               	movlb	0	; () banked
 10199  000A50  6FAB               	movwf	??_actuatorTest& (0+255),b
 10200  000A52  0E8B               	movlw	139
 10201  000A54                     u6957:
 10202  000A54  2EE8               	decfsz	wreg,f,c
 10203  000A56  D7FE               	bra	u6957
 10204  000A58  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10205  000A5A  D7FC               	bra	u6957
 10206  000A5C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10207  000A5E  D7FA               	bra	u6957
 10208  000A60  D000               	nop2	
 10209  000A62  0100               	movlb	0	; () banked
 10210  000A64  4BE6               	infsnz	_i& (0+255),f,b
 10211  000A66  2BE7               	incf	(_i+1)& (0+255),f,b
 10212  000A68  0100               	movlb	0	; () banked
 10213  000A6A  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10214  000A6C  D7DD               	goto	l1032
 10215  000A6E  0100               	movlb	0	; () banked
 10216  000A70  51E7               	movf	(_i+1)& (0+255),w,b
 10217  000A72  E101               	bnz	u4740
 10218  000A74  D7D4               	goto	L7
 10219  000A76                     u4740:
 10220  000A76                     l1033:
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;Test.c: 171: }
 10224                           ;Test.c: 172: LATAbits.LATA3 = ~1;
 10225  000A76  9689               	bcf	3977,3,c	;volatile
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10229  000A78  0E01               	movlw	1
 10230  000A7A  EC83  F01F         	call	_lcdInst
 10231  000A7E  0E68               	movlw	104
 10232  000A80  0100               	movlb	0	; () banked
 10233  000A82  6FAB               	movwf	??_actuatorTest& (0+255),b
 10234  000A84  0EE4               	movlw	228
 10235  000A86                     u6967:
 10236  000A86  2EE8               	decfsz	wreg,f,c
 10237  000A88  D7FE               	bra	u6967
 10238  000A8A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10239  000A8C  D7FC               	bra	u6967
 10240  000A8E  F000               	nop	
 10241  000A90  0E80               	movlw	128
 10242  000A92  EC83  F01F         	call	_lcdInst
 10243                           
 10244                           ;Test.c: 179: printf("TST: PUSH SOLN'D");
 10245  000A96  0EDF               	movlw	low STR_89
 10246  000A98  0100               	movlb	0	; () banked
 10247  000A9A  6F8E               	movwf	printf@f& (0+255),b
 10248  000A9C  0EFC               	movlw	high STR_89
 10249  000A9E  0100               	movlb	0	; () banked
 10250  000AA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10251  000AA2  EC93  F008         	call	_printf	;wreg free
 10252                           
 10253                           ;Test.c: 180: lcdInst(0b11000000);;
 10254  000AA6  0EC0               	movlw	192
 10255  000AA8  EC83  F01F         	call	_lcdInst
 10256                           
 10257                           ;Test.c: 181: printf("PIN RA4...");
 10258  000AAC  0E8D               	movlw	low STR_90
 10259  000AAE  0100               	movlb	0	; () banked
 10260  000AB0  6F8E               	movwf	printf@f& (0+255),b
 10261  000AB2  0EFF               	movlw	high STR_90
 10262  000AB4  0100               	movlb	0	; () banked
 10263  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10264  000AB8  EC93  F008         	call	_printf	;wreg free
 10265                           
 10266                           ;Test.c: 182: for(i=0;i<5;i++){
 10267  000ABC  0E00               	movlw	0
 10268  000ABE  0100               	movlb	0	; () banked
 10269  000AC0  6FE7               	movwf	(_i+1)& (0+255),b
 10270  000AC2  0E00               	movlw	0
 10271  000AC4  6FE6               	movwf	_i& (0+255),b
 10272                           
 10273                           ; BSR set to: 0
 10274  000AC6  0100               	movlb	0	; () banked
 10275  000AC8  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10276  000ACA  D008               	goto	l1034
 10277  000ACC  0100               	movlb	0	; () banked
 10278  000ACE  51E7               	movf	(_i+1)& (0+255),w,b
 10279  000AD0  E12C               	bnz	l1035
 10280  000AD2  0E05               	movlw	5
 10281  000AD4  0100               	movlb	0	; () banked
 10282  000AD6  5DE6               	subwf	_i& (0+255),w,b
 10283  000AD8  B0D8               	btfsc	status,0,c
 10284  000ADA  D027               	goto	l1035
 10285  000ADC                     l1034:
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;Test.c: 183: LATAbits.LATA4 = 1;
 10289  000ADC  8889               	bsf	3977,4,c	;volatile
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;Test.c: 184: _delay((unsigned long)((100)*(32000000/4000.0)));
 10293  000ADE  0E05               	movlw	5
 10294  000AE0  0100               	movlb	0	; () banked
 10295  000AE2  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10296  000AE4  0E0F               	movlw	15
 10297  000AE6  0100               	movlb	0	; () banked
 10298  000AE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10299  000AEA  0EF1               	movlw	241
 10300  000AEC                     u6977:
 10301  000AEC  2EE8               	decfsz	wreg,f,c
 10302  000AEE  D7FE               	bra	u6977
 10303  000AF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10304  000AF2  D7FC               	bra	u6977
 10305  000AF4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10306  000AF6  D7FA               	bra	u6977
 10307                           
 10308                           ;Test.c: 185: LATAbits.LATA4 = ~1;
 10309  000AF8  9889               	bcf	3977,4,c	;volatile
 10310                           
 10311                           ;Test.c: 186: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10312  000AFA  0E25               	movlw	37
 10313  000AFC  0100               	movlb	0	; () banked
 10314  000AFE  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10315  000B00  0E87               	movlw	135
 10316  000B02  0100               	movlb	0	; () banked
 10317  000B04  6FAB               	movwf	??_actuatorTest& (0+255),b
 10318  000B06  0E8B               	movlw	139
 10319  000B08                     u6987:
 10320  000B08  2EE8               	decfsz	wreg,f,c
 10321  000B0A  D7FE               	bra	u6987
 10322  000B0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10323  000B0E  D7FC               	bra	u6987
 10324  000B10  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10325  000B12  D7FA               	bra	u6987
 10326  000B14  D000               	nop2	
 10327  000B16  0100               	movlb	0	; () banked
 10328  000B18  4BE6               	infsnz	_i& (0+255),f,b
 10329  000B1A  2BE7               	incf	(_i+1)& (0+255),f,b
 10330  000B1C  0100               	movlb	0	; () banked
 10331  000B1E  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10332  000B20  D7DD               	goto	l1034
 10333  000B22  0100               	movlb	0	; () banked
 10334  000B24  51E7               	movf	(_i+1)& (0+255),w,b
 10335  000B26  E101               	bnz	u4760
 10336  000B28  D7D4               	goto	L8
 10337  000B2A                     u4760:
 10338  000B2A                     l1035:
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;Test.c: 187: }
 10342                           ;Test.c: 188: LATAbits.LATA4 = ~1;
 10343  000B2A  9889               	bcf	3977,4,c	;volatile
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;Test.c: 189: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10347  000B2C  0E01               	movlw	1
 10348  000B2E  EC83  F01F         	call	_lcdInst
 10349  000B32  0E68               	movlw	104
 10350  000B34  0100               	movlb	0	; () banked
 10351  000B36  6FAB               	movwf	??_actuatorTest& (0+255),b
 10352  000B38  0EE4               	movlw	228
 10353  000B3A                     u6997:
 10354  000B3A  2EE8               	decfsz	wreg,f,c
 10355  000B3C  D7FE               	bra	u6997
 10356  000B3E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10357  000B40  D7FC               	bra	u6997
 10358  000B42  F000               	nop	
 10359  000B44  0E80               	movlw	128
 10360  000B46  EC83  F01F         	call	_lcdInst
 10361                           
 10362                           ;Test.c: 192: machine_state = Sorting_state;
 10363  000B4A  0E01               	movlw	1
 10364  000B4C  0100               	movlb	0	; () banked
 10365  000B4E  6FFC               	movwf	_machine_state& (0+255),b
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;Test.c: 193: was_low_1 = 0;
 10369  000B50  0E00               	movlw	0
 10370  000B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 10371  000B54  0E00               	movlw	0
 10372  000B56  6E79               	movwf	_was_low_1,c	;volatile
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;Test.c: 194: was_low_1 = 0;
 10376  000B58  0E00               	movlw	0
 10377  000B5A  6E7A               	movwf	_was_low_1+1,c	;volatile
 10378  000B5C  0E00               	movlw	0
 10379  000B5E  6E79               	movwf	_was_low_1,c	;volatile
 10380                           
 10381                           ; BSR set to: 0
 10382                           ;Test.c: 201: printf("TST: PAN SERVO");
 10383  000B60  0EBF               	movlw	low STR_91
 10384  000B62  0100               	movlb	0	; () banked
 10385  000B64  6F8E               	movwf	printf@f& (0+255),b
 10386  000B66  0EFE               	movlw	high STR_91
 10387  000B68  0100               	movlb	0	; () banked
 10388  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10389  000B6C  EC93  F008         	call	_printf	;wreg free
 10390                           
 10391                           ;Test.c: 202: lcdInst(0b11000000);;
 10392  000B70  0EC0               	movlw	192
 10393  000B72  EC83  F01F         	call	_lcdInst
 10394                           
 10395                           ;Test.c: 203: printf("MIDDLE -- 2s    ");
 10396  000B76  0E8A               	movlw	low STR_92
 10397  000B78  0100               	movlb	0	; () banked
 10398  000B7A  6F8E               	movwf	printf@f& (0+255),b
 10399  000B7C  0EFC               	movlw	high STR_92
 10400  000B7E  0100               	movlb	0	; () banked
 10401  000B80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10402  000B82  EC93  F008         	call	_printf	;wreg free
 10403                           
 10404                           ;Test.c: 204: updateServoPosition(1500, 1);
 10405  000B86  0E05               	movlw	5
 10406  000B88  0100               	movlb	0	; () banked
 10407  000B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10408  000B8C  0EDC               	movlw	220
 10409  000B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10410  000B90  0E00               	movlw	0
 10411  000B92  0100               	movlb	0	; () banked
 10412  000B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10413  000B96  0E01               	movlw	1
 10414  000B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10415  000B9A  EC20  F01A         	call	_updateServoPosition	;wreg free
 10416                           
 10417                           ;Test.c: 205: TMR1ON = 1;
 10418  000B9E  80CD               	bsf	4045,0,c	;volatile
 10419                           
 10420                           ;Test.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10421  000BA0  0E00               	movlw	0
 10422  000BA2  0100               	movlb	0	; () banked
 10423  000BA4  6FAE               	movwf	actuatorTest@i_1505& (0+255),b
 10424  000BA6                     l6201:
 10425                           
 10426                           ; BSR set to: 0
 10427  000BA6  0E63               	movlw	99
 10428  000BA8  0100               	movlb	0	; () banked
 10429  000BAA  65AE               	cpfsgt	actuatorTest@i_1505& (0+255),b
 10430  000BAC  D001               	goto	l6205
 10431  000BAE  D00C               	goto	l6209
 10432  000BB0                     l6205:
 10433                           
 10434                           ; BSR set to: 0
 10435  000BB0  0E68               	movlw	104
 10436  000BB2  0100               	movlb	0	; () banked
 10437  000BB4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10438  000BB6  0EE4               	movlw	228
 10439  000BB8                     u7007:
 10440  000BB8  2EE8               	decfsz	wreg,f,c
 10441  000BBA  D7FE               	bra	u7007
 10442  000BBC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10443  000BBE  D7FC               	bra	u7007
 10444  000BC0  F000               	nop	
 10445  000BC2  0100               	movlb	0	; () banked
 10446  000BC4  2BAE               	incf	actuatorTest@i_1505& (0+255),f,b
 10447  000BC6  D7EF               	goto	l6201
 10448  000BC8                     l6209:
 10449                           
 10450                           ; BSR set to: 0
 10451  000BC8  0E00               	movlw	0
 10452  000BCA  0100               	movlb	0	; () banked
 10453  000BCC  6FAF               	movwf	actuatorTest@i_1506& (0+255),b
 10454  000BCE                     l6211:
 10455                           
 10456                           ; BSR set to: 0
 10457  000BCE  0E63               	movlw	99
 10458  000BD0  0100               	movlb	0	; () banked
 10459  000BD2  65AF               	cpfsgt	actuatorTest@i_1506& (0+255),b
 10460  000BD4  D001               	goto	l6215
 10461  000BD6  D00C               	goto	l6219
 10462  000BD8                     l6215:
 10463                           
 10464                           ; BSR set to: 0
 10465  000BD8  0E68               	movlw	104
 10466  000BDA  0100               	movlb	0	; () banked
 10467  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10468  000BDE  0EE4               	movlw	228
 10469  000BE0                     u7017:
 10470  000BE0  2EE8               	decfsz	wreg,f,c
 10471  000BE2  D7FE               	bra	u7017
 10472  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10473  000BE6  D7FC               	bra	u7017
 10474  000BE8  F000               	nop	
 10475  000BEA  0100               	movlb	0	; () banked
 10476  000BEC  2BAF               	incf	actuatorTest@i_1506& (0+255),f,b
 10477  000BEE  D7EF               	goto	l6211
 10478  000BF0                     l6219:
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;Test.c: 208: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10482  000BF0  0E80               	movlw	128
 10483  000BF2  EC83  F01F         	call	_lcdInst
 10484  000BF6  0EC0               	movlw	192
 10485  000BF8  EC83  F01F         	call	_lcdInst
 10486                           
 10487                           ;Test.c: 209: printf("RIGHT -- 2s     ");
 10488  000BFC  0E79               	movlw	low STR_93
 10489  000BFE  0100               	movlb	0	; () banked
 10490  000C00  6F8E               	movwf	printf@f& (0+255),b
 10491  000C02  0EFC               	movlw	high STR_93
 10492  000C04  0100               	movlb	0	; () banked
 10493  000C06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10494  000C08  EC93  F008         	call	_printf	;wreg free
 10495                           
 10496                           ;Test.c: 210: updateServoPosition(1000, 1);
 10497  000C0C  0E03               	movlw	3
 10498  000C0E  0100               	movlb	0	; () banked
 10499  000C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10500  000C12  0EE8               	movlw	232
 10501  000C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10502  000C16  0E00               	movlw	0
 10503  000C18  0100               	movlb	0	; () banked
 10504  000C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10505  000C1C  0E01               	movlw	1
 10506  000C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10507  000C20  EC20  F01A         	call	_updateServoPosition	;wreg free
 10508                           
 10509                           ;Test.c: 211: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10510  000C24  0E00               	movlw	0
 10511  000C26  0100               	movlb	0	; () banked
 10512  000C28  6FB0               	movwf	actuatorTest@i_1508& (0+255),b
 10513  000C2A                     l6227:
 10514                           
 10515                           ; BSR set to: 0
 10516  000C2A  0E63               	movlw	99
 10517  000C2C  0100               	movlb	0	; () banked
 10518  000C2E  65B0               	cpfsgt	actuatorTest@i_1508& (0+255),b
 10519  000C30  D001               	goto	l6231
 10520  000C32  D00C               	goto	l6235
 10521  000C34                     l6231:
 10522                           
 10523                           ; BSR set to: 0
 10524  000C34  0E68               	movlw	104
 10525  000C36  0100               	movlb	0	; () banked
 10526  000C38  6FAB               	movwf	??_actuatorTest& (0+255),b
 10527  000C3A  0EE4               	movlw	228
 10528  000C3C                     u7027:
 10529  000C3C  2EE8               	decfsz	wreg,f,c
 10530  000C3E  D7FE               	bra	u7027
 10531  000C40  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10532  000C42  D7FC               	bra	u7027
 10533  000C44  F000               	nop	
 10534  000C46  0100               	movlb	0	; () banked
 10535  000C48  2BB0               	incf	actuatorTest@i_1508& (0+255),f,b
 10536  000C4A  D7EF               	goto	l6227
 10537  000C4C                     l6235:
 10538                           
 10539                           ; BSR set to: 0
 10540  000C4C  0E00               	movlw	0
 10541  000C4E  0100               	movlb	0	; () banked
 10542  000C50  6FB1               	movwf	actuatorTest@i_1509& (0+255),b
 10543  000C52                     l6237:
 10544                           
 10545                           ; BSR set to: 0
 10546  000C52  0E63               	movlw	99
 10547  000C54  0100               	movlb	0	; () banked
 10548  000C56  65B1               	cpfsgt	actuatorTest@i_1509& (0+255),b
 10549  000C58  D001               	goto	l6241
 10550  000C5A  D00C               	goto	l6245
 10551  000C5C                     l6241:
 10552                           
 10553                           ; BSR set to: 0
 10554  000C5C  0E68               	movlw	104
 10555  000C5E  0100               	movlb	0	; () banked
 10556  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 10557  000C62  0EE4               	movlw	228
 10558  000C64                     u7037:
 10559  000C64  2EE8               	decfsz	wreg,f,c
 10560  000C66  D7FE               	bra	u7037
 10561  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10562  000C6A  D7FC               	bra	u7037
 10563  000C6C  F000               	nop	
 10564  000C6E  0100               	movlb	0	; () banked
 10565  000C70  2BB1               	incf	actuatorTest@i_1509& (0+255),f,b
 10566  000C72  D7EF               	goto	l6237
 10567  000C74                     l6245:
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;Test.c: 213: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10571  000C74  0E80               	movlw	128
 10572  000C76  EC83  F01F         	call	_lcdInst
 10573  000C7A  0EC0               	movlw	192
 10574  000C7C  EC83  F01F         	call	_lcdInst
 10575                           
 10576                           ;Test.c: 214: printf("LEFT -- 2s      ");
 10577  000C80  0E57               	movlw	low STR_94
 10578  000C82  0100               	movlb	0	; () banked
 10579  000C84  6F8E               	movwf	printf@f& (0+255),b
 10580  000C86  0EFC               	movlw	high STR_94
 10581  000C88  0100               	movlb	0	; () banked
 10582  000C8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10583  000C8C  EC93  F008         	call	_printf	;wreg free
 10584                           
 10585                           ;Test.c: 215: updateServoPosition(2000, 1);
 10586  000C90  0E07               	movlw	7
 10587  000C92  0100               	movlb	0	; () banked
 10588  000C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10589  000C96  0ED0               	movlw	208
 10590  000C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10591  000C9A  0E00               	movlw	0
 10592  000C9C  0100               	movlb	0	; () banked
 10593  000C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10594  000CA0  0E01               	movlw	1
 10595  000CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10596  000CA4  EC20  F01A         	call	_updateServoPosition	;wreg free
 10597                           
 10598                           ;Test.c: 216: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10599  000CA8  0E00               	movlw	0
 10600  000CAA  0100               	movlb	0	; () banked
 10601  000CAC  6FB2               	movwf	actuatorTest@i_1511& (0+255),b
 10602  000CAE                     l6253:
 10603                           
 10604                           ; BSR set to: 0
 10605  000CAE  0E63               	movlw	99
 10606  000CB0  0100               	movlb	0	; () banked
 10607  000CB2  65B2               	cpfsgt	actuatorTest@i_1511& (0+255),b
 10608  000CB4  D001               	goto	l6257
 10609  000CB6  D00C               	goto	l6261
 10610  000CB8                     l6257:
 10611                           
 10612                           ; BSR set to: 0
 10613  000CB8  0E68               	movlw	104
 10614  000CBA  0100               	movlb	0	; () banked
 10615  000CBC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10616  000CBE  0EE4               	movlw	228
 10617  000CC0                     u7047:
 10618  000CC0  2EE8               	decfsz	wreg,f,c
 10619  000CC2  D7FE               	bra	u7047
 10620  000CC4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10621  000CC6  D7FC               	bra	u7047
 10622  000CC8  F000               	nop	
 10623  000CCA  0100               	movlb	0	; () banked
 10624  000CCC  2BB2               	incf	actuatorTest@i_1511& (0+255),f,b
 10625  000CCE  D7EF               	goto	l6253
 10626  000CD0                     l6261:
 10627                           
 10628                           ; BSR set to: 0
 10629  000CD0  0E00               	movlw	0
 10630  000CD2  0100               	movlb	0	; () banked
 10631  000CD4  6FB3               	movwf	actuatorTest@i_1512& (0+255),b
 10632  000CD6                     l6263:
 10633                           
 10634                           ; BSR set to: 0
 10635  000CD6  0E63               	movlw	99
 10636  000CD8  0100               	movlb	0	; () banked
 10637  000CDA  65B3               	cpfsgt	actuatorTest@i_1512& (0+255),b
 10638  000CDC  D001               	goto	l6267
 10639  000CDE  D00C               	goto	l6271
 10640  000CE0                     l6267:
 10641                           
 10642                           ; BSR set to: 0
 10643  000CE0  0E68               	movlw	104
 10644  000CE2  0100               	movlb	0	; () banked
 10645  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10646  000CE6  0EE4               	movlw	228
 10647  000CE8                     u7057:
 10648  000CE8  2EE8               	decfsz	wreg,f,c
 10649  000CEA  D7FE               	bra	u7057
 10650  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10651  000CEE  D7FC               	bra	u7057
 10652  000CF0  F000               	nop	
 10653  000CF2  0100               	movlb	0	; () banked
 10654  000CF4  2BB3               	incf	actuatorTest@i_1512& (0+255),f,b
 10655  000CF6  D7EF               	goto	l6263
 10656  000CF8                     l6271:
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;Test.c: 218: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10660  000CF8  0E80               	movlw	128
 10661  000CFA  EC83  F01F         	call	_lcdInst
 10662  000CFE  0EC0               	movlw	192
 10663  000D00  EC83  F01F         	call	_lcdInst
 10664                           
 10665                           ;Test.c: 219: printf("MID-LEFT -- 2s  ");
 10666  000D04  0E9B               	movlw	low STR_95
 10667  000D06  0100               	movlb	0	; () banked
 10668  000D08  6F8E               	movwf	printf@f& (0+255),b
 10669  000D0A  0EFC               	movlw	high STR_95
 10670  000D0C  0100               	movlb	0	; () banked
 10671  000D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10672  000D10  EC93  F008         	call	_printf	;wreg free
 10673                           
 10674                           ;Test.c: 220: updateServoPosition(1666, 1);
 10675  000D14  0E06               	movlw	6
 10676  000D16  0100               	movlb	0	; () banked
 10677  000D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10678  000D1A  0E82               	movlw	130
 10679  000D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10680  000D1E  0E00               	movlw	0
 10681  000D20  0100               	movlb	0	; () banked
 10682  000D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10683  000D24  0E01               	movlw	1
 10684  000D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10685  000D28  EC20  F01A         	call	_updateServoPosition	;wreg free
 10686                           
 10687                           ;Test.c: 221: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10688  000D2C  0E00               	movlw	0
 10689  000D2E  0100               	movlb	0	; () banked
 10690  000D30  6FB4               	movwf	actuatorTest@i_1514& (0+255),b
 10691  000D32                     l6279:
 10692                           
 10693                           ; BSR set to: 0
 10694  000D32  0E63               	movlw	99
 10695  000D34  0100               	movlb	0	; () banked
 10696  000D36  65B4               	cpfsgt	actuatorTest@i_1514& (0+255),b
 10697  000D38  D001               	goto	l6283
 10698  000D3A  D00C               	goto	l6287
 10699  000D3C                     l6283:
 10700                           
 10701                           ; BSR set to: 0
 10702  000D3C  0E68               	movlw	104
 10703  000D3E  0100               	movlb	0	; () banked
 10704  000D40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10705  000D42  0EE4               	movlw	228
 10706  000D44                     u7067:
 10707  000D44  2EE8               	decfsz	wreg,f,c
 10708  000D46  D7FE               	bra	u7067
 10709  000D48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10710  000D4A  D7FC               	bra	u7067
 10711  000D4C  F000               	nop	
 10712  000D4E  0100               	movlb	0	; () banked
 10713  000D50  2BB4               	incf	actuatorTest@i_1514& (0+255),f,b
 10714  000D52  D7EF               	goto	l6279
 10715  000D54                     l6287:
 10716                           
 10717                           ; BSR set to: 0
 10718  000D54  0E00               	movlw	0
 10719  000D56  0100               	movlb	0	; () banked
 10720  000D58  6FB5               	movwf	actuatorTest@i_1515& (0+255),b
 10721  000D5A                     l6289:
 10722                           
 10723                           ; BSR set to: 0
 10724  000D5A  0E63               	movlw	99
 10725  000D5C  0100               	movlb	0	; () banked
 10726  000D5E  65B5               	cpfsgt	actuatorTest@i_1515& (0+255),b
 10727  000D60  D001               	goto	l6293
 10728  000D62  D00C               	goto	l6297
 10729  000D64                     l6293:
 10730                           
 10731                           ; BSR set to: 0
 10732  000D64  0E68               	movlw	104
 10733  000D66  0100               	movlb	0	; () banked
 10734  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 10735  000D6A  0EE4               	movlw	228
 10736  000D6C                     u7077:
 10737  000D6C  2EE8               	decfsz	wreg,f,c
 10738  000D6E  D7FE               	bra	u7077
 10739  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10740  000D72  D7FC               	bra	u7077
 10741  000D74  F000               	nop	
 10742  000D76  0100               	movlb	0	; () banked
 10743  000D78  2BB5               	incf	actuatorTest@i_1515& (0+255),f,b
 10744  000D7A  D7EF               	goto	l6289
 10745  000D7C                     l6297:
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;Test.c: 223: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10749  000D7C  0E80               	movlw	128
 10750  000D7E  EC83  F01F         	call	_lcdInst
 10751  000D82  0EC0               	movlw	192
 10752  000D84  EC83  F01F         	call	_lcdInst
 10753                           
 10754                           ;Test.c: 224: printf("MID-RIGHT -- 2s ");
 10755  000D88  0EAC               	movlw	low STR_96
 10756  000D8A  0100               	movlb	0	; () banked
 10757  000D8C  6F8E               	movwf	printf@f& (0+255),b
 10758  000D8E  0EFC               	movlw	high STR_96
 10759  000D90  0100               	movlb	0	; () banked
 10760  000D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10761  000D94  EC93  F008         	call	_printf	;wreg free
 10762                           
 10763                           ;Test.c: 225: updateServoPosition(1333, 1);
 10764  000D98  0E05               	movlw	5
 10765  000D9A  0100               	movlb	0	; () banked
 10766  000D9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10767  000D9E  0E35               	movlw	53
 10768  000DA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10769  000DA2  0E00               	movlw	0
 10770  000DA4  0100               	movlb	0	; () banked
 10771  000DA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10772  000DA8  0E01               	movlw	1
 10773  000DAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10774  000DAC  EC20  F01A         	call	_updateServoPosition	;wreg free
 10775                           
 10776                           ;Test.c: 226: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10777  000DB0  0E00               	movlw	0
 10778  000DB2  0100               	movlb	0	; () banked
 10779  000DB4  6FB6               	movwf	actuatorTest@i_1517& (0+255),b
 10780  000DB6                     l6305:
 10781                           
 10782                           ; BSR set to: 0
 10783  000DB6  0E63               	movlw	99
 10784  000DB8  0100               	movlb	0	; () banked
 10785  000DBA  65B6               	cpfsgt	actuatorTest@i_1517& (0+255),b
 10786  000DBC  D001               	goto	l6309
 10787  000DBE  D00C               	goto	l6313
 10788  000DC0                     l6309:
 10789                           
 10790                           ; BSR set to: 0
 10791  000DC0  0E68               	movlw	104
 10792  000DC2  0100               	movlb	0	; () banked
 10793  000DC4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10794  000DC6  0EE4               	movlw	228
 10795  000DC8                     u7087:
 10796  000DC8  2EE8               	decfsz	wreg,f,c
 10797  000DCA  D7FE               	bra	u7087
 10798  000DCC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10799  000DCE  D7FC               	bra	u7087
 10800  000DD0  F000               	nop	
 10801  000DD2  0100               	movlb	0	; () banked
 10802  000DD4  2BB6               	incf	actuatorTest@i_1517& (0+255),f,b
 10803  000DD6  D7EF               	goto	l6305
 10804  000DD8                     l6313:
 10805                           
 10806                           ; BSR set to: 0
 10807  000DD8  0E00               	movlw	0
 10808  000DDA  0100               	movlb	0	; () banked
 10809  000DDC  6FB7               	movwf	actuatorTest@i_1518& (0+255),b
 10810  000DDE                     l6315:
 10811                           
 10812                           ; BSR set to: 0
 10813  000DDE  0E63               	movlw	99
 10814  000DE0  0100               	movlb	0	; () banked
 10815  000DE2  65B7               	cpfsgt	actuatorTest@i_1518& (0+255),b
 10816  000DE4  D001               	goto	l6319
 10817  000DE6  D00C               	goto	l6323
 10818  000DE8                     l6319:
 10819                           
 10820                           ; BSR set to: 0
 10821  000DE8  0E68               	movlw	104
 10822  000DEA  0100               	movlb	0	; () banked
 10823  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10824  000DEE  0EE4               	movlw	228
 10825  000DF0                     u7097:
 10826  000DF0  2EE8               	decfsz	wreg,f,c
 10827  000DF2  D7FE               	bra	u7097
 10828  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10829  000DF6  D7FC               	bra	u7097
 10830  000DF8  F000               	nop	
 10831  000DFA  0100               	movlb	0	; () banked
 10832  000DFC  2BB7               	incf	actuatorTest@i_1518& (0+255),f,b
 10833  000DFE  D7EF               	goto	l6315
 10834  000E00                     l6323:
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;Test.c: 228: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10838  000E00  0E80               	movlw	128
 10839  000E02  EC83  F01F         	call	_lcdInst
 10840  000E06  0EC0               	movlw	192
 10841  000E08  EC83  F01F         	call	_lcdInst
 10842                           
 10843                           ;Test.c: 229: printf("MID -- 2s       ");
 10844  000E0C  0E35               	movlw	low STR_97
 10845  000E0E  0100               	movlb	0	; () banked
 10846  000E10  6F8E               	movwf	printf@f& (0+255),b
 10847  000E12  0EFC               	movlw	high STR_97
 10848  000E14  0100               	movlb	0	; () banked
 10849  000E16  6F8F               	movwf	(printf@f+1)& (0+255),b
 10850  000E18  EC93  F008         	call	_printf	;wreg free
 10851                           
 10852                           ;Test.c: 230: updateServoPosition(1500, 1);
 10853  000E1C  0E05               	movlw	5
 10854  000E1E  0100               	movlb	0	; () banked
 10855  000E20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10856  000E22  0EDC               	movlw	220
 10857  000E24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10858  000E26  0E00               	movlw	0
 10859  000E28  0100               	movlb	0	; () banked
 10860  000E2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10861  000E2C  0E01               	movlw	1
 10862  000E2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10863  000E30  EC20  F01A         	call	_updateServoPosition	;wreg free
 10864                           
 10865                           ;Test.c: 231: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10866  000E34  0E00               	movlw	0
 10867  000E36  0100               	movlb	0	; () banked
 10868  000E38  6FB8               	movwf	actuatorTest@i_1520& (0+255),b
 10869  000E3A                     l6331:
 10870                           
 10871                           ; BSR set to: 0
 10872  000E3A  0E63               	movlw	99
 10873  000E3C  0100               	movlb	0	; () banked
 10874  000E3E  65B8               	cpfsgt	actuatorTest@i_1520& (0+255),b
 10875  000E40  D001               	goto	l6335
 10876  000E42  D00C               	goto	l6339
 10877  000E44                     l6335:
 10878                           
 10879                           ; BSR set to: 0
 10880  000E44  0E68               	movlw	104
 10881  000E46  0100               	movlb	0	; () banked
 10882  000E48  6FAB               	movwf	??_actuatorTest& (0+255),b
 10883  000E4A  0EE4               	movlw	228
 10884  000E4C                     u7107:
 10885  000E4C  2EE8               	decfsz	wreg,f,c
 10886  000E4E  D7FE               	bra	u7107
 10887  000E50  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10888  000E52  D7FC               	bra	u7107
 10889  000E54  F000               	nop	
 10890  000E56  0100               	movlb	0	; () banked
 10891  000E58  2BB8               	incf	actuatorTest@i_1520& (0+255),f,b
 10892  000E5A  D7EF               	goto	l6331
 10893  000E5C                     l6339:
 10894                           
 10895                           ; BSR set to: 0
 10896  000E5C  0E00               	movlw	0
 10897  000E5E  0100               	movlb	0	; () banked
 10898  000E60  6FB9               	movwf	actuatorTest@i_1521& (0+255),b
 10899  000E62                     l6341:
 10900                           
 10901                           ; BSR set to: 0
 10902  000E62  0E63               	movlw	99
 10903  000E64  0100               	movlb	0	; () banked
 10904  000E66  65B9               	cpfsgt	actuatorTest@i_1521& (0+255),b
 10905  000E68  D001               	goto	l6345
 10906  000E6A  D00C               	goto	l1059
 10907  000E6C                     l6345:
 10908                           
 10909                           ; BSR set to: 0
 10910  000E6C  0E68               	movlw	104
 10911  000E6E  0100               	movlb	0	; () banked
 10912  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 10913  000E72  0EE4               	movlw	228
 10914  000E74                     u7117:
 10915  000E74  2EE8               	decfsz	wreg,f,c
 10916  000E76  D7FE               	bra	u7117
 10917  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10918  000E7A  D7FC               	bra	u7117
 10919  000E7C  F000               	nop	
 10920  000E7E  0100               	movlb	0	; () banked
 10921  000E80  2BB9               	incf	actuatorTest@i_1521& (0+255),f,b
 10922  000E82  D7EF               	goto	l6341
 10923  000E84                     l1059:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;Test.c: 232: TMR1ON = 0;
 10927  000E84  90CD               	bcf	4045,0,c	;volatile
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;Test.c: 239: printf("TST: TILT SERVO");
 10931  000E86  0E54               	movlw	low STR_98
 10932  000E88  0100               	movlb	0	; () banked
 10933  000E8A  6F8E               	movwf	printf@f& (0+255),b
 10934  000E8C  0EFE               	movlw	high STR_98
 10935  000E8E  0100               	movlb	0	; () banked
 10936  000E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 10937  000E92  EC93  F008         	call	_printf	;wreg free
 10938                           
 10939                           ;Test.c: 240: lcdInst(0b11000000);;
 10940  000E96  0EC0               	movlw	192
 10941  000E98  EC83  F01F         	call	_lcdInst
 10942                           
 10943                           ;Test.c: 241: printf("LEVEL -- 2s     ");
 10944  000E9C  0E68               	movlw	low STR_99
 10945  000E9E  0100               	movlb	0	; () banked
 10946  000EA0  6F8E               	movwf	printf@f& (0+255),b
 10947  000EA2  0EFC               	movlw	high STR_99
 10948  000EA4  0100               	movlb	0	; () banked
 10949  000EA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10950  000EA8  EC93  F008         	call	_printf	;wreg free
 10951                           
 10952                           ;Test.c: 242: updateServoPosition(1000, 3);
 10953  000EAC  0E03               	movlw	3
 10954  000EAE  0100               	movlb	0	; () banked
 10955  000EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10956  000EB2  0EE8               	movlw	232
 10957  000EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10958  000EB6  0E00               	movlw	0
 10959  000EB8  0100               	movlb	0	; () banked
 10960  000EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10961  000EBC  0E03               	movlw	3
 10962  000EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10963  000EC0  EC20  F01A         	call	_updateServoPosition	;wreg free
 10964                           
 10965                           ;Test.c: 243: TMR3ON = 1;
 10966  000EC4  80B1               	bsf	4017,0,c	;volatile
 10967                           
 10968                           ;Test.c: 244: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10969  000EC6  0E00               	movlw	0
 10970  000EC8  0100               	movlb	0	; () banked
 10971  000ECA  6FBA               	movwf	actuatorTest@i_1524& (0+255),b
 10972  000ECC                     l6359:
 10973                           
 10974                           ; BSR set to: 0
 10975  000ECC  0E63               	movlw	99
 10976  000ECE  0100               	movlb	0	; () banked
 10977  000ED0  65BA               	cpfsgt	actuatorTest@i_1524& (0+255),b
 10978  000ED2  D001               	goto	l6363
 10979  000ED4  D00C               	goto	l6367
 10980  000ED6                     l6363:
 10981                           
 10982                           ; BSR set to: 0
 10983  000ED6  0E68               	movlw	104
 10984  000ED8  0100               	movlb	0	; () banked
 10985  000EDA  6FAB               	movwf	??_actuatorTest& (0+255),b
 10986  000EDC  0EE4               	movlw	228
 10987  000EDE                     u7127:
 10988  000EDE  2EE8               	decfsz	wreg,f,c
 10989  000EE0  D7FE               	bra	u7127
 10990  000EE2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10991  000EE4  D7FC               	bra	u7127
 10992  000EE6  F000               	nop	
 10993  000EE8  0100               	movlb	0	; () banked
 10994  000EEA  2BBA               	incf	actuatorTest@i_1524& (0+255),f,b
 10995  000EEC  D7EF               	goto	l6359
 10996  000EEE                     l6367:
 10997                           
 10998                           ; BSR set to: 0
 10999  000EEE  0E00               	movlw	0
 11000  000EF0  0100               	movlb	0	; () banked
 11001  000EF2  6FBB               	movwf	actuatorTest@i_1525& (0+255),b
 11002  000EF4                     l6369:
 11003                           
 11004                           ; BSR set to: 0
 11005  000EF4  0E63               	movlw	99
 11006  000EF6  0100               	movlb	0	; () banked
 11007  000EF8  65BB               	cpfsgt	actuatorTest@i_1525& (0+255),b
 11008  000EFA  D001               	goto	l6373
 11009  000EFC  D00C               	goto	l6377
 11010  000EFE                     l6373:
 11011                           
 11012                           ; BSR set to: 0
 11013  000EFE  0E68               	movlw	104
 11014  000F00  0100               	movlb	0	; () banked
 11015  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 11016  000F04  0EE4               	movlw	228
 11017  000F06                     u7137:
 11018  000F06  2EE8               	decfsz	wreg,f,c
 11019  000F08  D7FE               	bra	u7137
 11020  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11021  000F0C  D7FC               	bra	u7137
 11022  000F0E  F000               	nop	
 11023  000F10  0100               	movlb	0	; () banked
 11024  000F12  2BBB               	incf	actuatorTest@i_1525& (0+255),f,b
 11025  000F14  D7EF               	goto	l6369
 11026  000F16                     l6377:
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;Test.c: 246: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11030  000F16  0E80               	movlw	128
 11031  000F18  EC83  F01F         	call	_lcdInst
 11032  000F1C  0EC0               	movlw	192
 11033  000F1E  EC83  F01F         	call	_lcdInst
 11034                           
 11035                           ;Test.c: 247: printf("DROP -- 2s      ");
 11036  000F22  0E46               	movlw	low STR_100
 11037  000F24  0100               	movlb	0	; () banked
 11038  000F26  6F8E               	movwf	printf@f& (0+255),b
 11039  000F28  0EFC               	movlw	high STR_100
 11040  000F2A  0100               	movlb	0	; () banked
 11041  000F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11042  000F2E  EC93  F008         	call	_printf	;wreg free
 11043                           
 11044                           ;Test.c: 248: updateServoPosition(1500, 3);
 11045  000F32  0E05               	movlw	5
 11046  000F34  0100               	movlb	0	; () banked
 11047  000F36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11048  000F38  0EDC               	movlw	220
 11049  000F3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11050  000F3C  0E00               	movlw	0
 11051  000F3E  0100               	movlb	0	; () banked
 11052  000F40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11053  000F42  0E03               	movlw	3
 11054  000F44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11055  000F46  EC20  F01A         	call	_updateServoPosition	;wreg free
 11056                           
 11057                           ;Test.c: 249: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11058  000F4A  0E00               	movlw	0
 11059  000F4C  0100               	movlb	0	; () banked
 11060  000F4E  6FBC               	movwf	actuatorTest@i_1527& (0+255),b
 11061  000F50                     l6385:
 11062                           
 11063                           ; BSR set to: 0
 11064  000F50  0E63               	movlw	99
 11065  000F52  0100               	movlb	0	; () banked
 11066  000F54  65BC               	cpfsgt	actuatorTest@i_1527& (0+255),b
 11067  000F56  D001               	goto	l6389
 11068  000F58  D00C               	goto	l6393
 11069  000F5A                     l6389:
 11070                           
 11071                           ; BSR set to: 0
 11072  000F5A  0E68               	movlw	104
 11073  000F5C  0100               	movlb	0	; () banked
 11074  000F5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11075  000F60  0EE4               	movlw	228
 11076  000F62                     u7147:
 11077  000F62  2EE8               	decfsz	wreg,f,c
 11078  000F64  D7FE               	bra	u7147
 11079  000F66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11080  000F68  D7FC               	bra	u7147
 11081  000F6A  F000               	nop	
 11082  000F6C  0100               	movlb	0	; () banked
 11083  000F6E  2BBC               	incf	actuatorTest@i_1527& (0+255),f,b
 11084  000F70  D7EF               	goto	l6385
 11085  000F72                     l6393:
 11086                           
 11087                           ; BSR set to: 0
 11088  000F72  0E00               	movlw	0
 11089  000F74  0100               	movlb	0	; () banked
 11090  000F76  6FBD               	movwf	actuatorTest@i_1528& (0+255),b
 11091  000F78                     l6395:
 11092                           
 11093                           ; BSR set to: 0
 11094  000F78  0E63               	movlw	99
 11095  000F7A  0100               	movlb	0	; () banked
 11096  000F7C  65BD               	cpfsgt	actuatorTest@i_1528& (0+255),b
 11097  000F7E  D001               	goto	l6399
 11098  000F80  D00C               	goto	l6403
 11099  000F82                     l6399:
 11100                           
 11101                           ; BSR set to: 0
 11102  000F82  0E68               	movlw	104
 11103  000F84  0100               	movlb	0	; () banked
 11104  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 11105  000F88  0EE4               	movlw	228
 11106  000F8A                     u7157:
 11107  000F8A  2EE8               	decfsz	wreg,f,c
 11108  000F8C  D7FE               	bra	u7157
 11109  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11110  000F90  D7FC               	bra	u7157
 11111  000F92  F000               	nop	
 11112  000F94  0100               	movlb	0	; () banked
 11113  000F96  2BBD               	incf	actuatorTest@i_1528& (0+255),f,b
 11114  000F98  D7EF               	goto	l6395
 11115  000F9A                     l6403:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;Test.c: 251: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11119  000F9A  0E80               	movlw	128
 11120  000F9C  EC83  F01F         	call	_lcdInst
 11121  000FA0  0EC0               	movlw	192
 11122  000FA2  EC83  F01F         	call	_lcdInst
 11123                           
 11124                           ;Test.c: 252: printf("LEVEL -- 2s     ");
 11125  000FA6  0E68               	movlw	low STR_99
 11126  000FA8  0100               	movlb	0	; () banked
 11127  000FAA  6F8E               	movwf	printf@f& (0+255),b
 11128  000FAC  0EFC               	movlw	high STR_99
 11129  000FAE  0100               	movlb	0	; () banked
 11130  000FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11131  000FB2  EC93  F008         	call	_printf	;wreg free
 11132                           
 11133                           ;Test.c: 253: updateServoPosition(1000, 3);
 11134  000FB6  0E03               	movlw	3
 11135  000FB8  0100               	movlb	0	; () banked
 11136  000FBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11137  000FBC  0EE8               	movlw	232
 11138  000FBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11139  000FC0  0E00               	movlw	0
 11140  000FC2  0100               	movlb	0	; () banked
 11141  000FC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11142  000FC6  0E03               	movlw	3
 11143  000FC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11144  000FCA  EC20  F01A         	call	_updateServoPosition	;wreg free
 11145                           
 11146                           ;Test.c: 254: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11147  000FCE  0E00               	movlw	0
 11148  000FD0  0100               	movlb	0	; () banked
 11149  000FD2  6FBE               	movwf	actuatorTest@i_1530& (0+255),b
 11150  000FD4                     l6411:
 11151                           
 11152                           ; BSR set to: 0
 11153  000FD4  0E63               	movlw	99
 11154  000FD6  0100               	movlb	0	; () banked
 11155  000FD8  65BE               	cpfsgt	actuatorTest@i_1530& (0+255),b
 11156  000FDA  D001               	goto	l6415
 11157  000FDC  D00C               	goto	l6419
 11158  000FDE                     l6415:
 11159                           
 11160                           ; BSR set to: 0
 11161  000FDE  0E68               	movlw	104
 11162  000FE0  0100               	movlb	0	; () banked
 11163  000FE2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11164  000FE4  0EE4               	movlw	228
 11165  000FE6                     u7167:
 11166  000FE6  2EE8               	decfsz	wreg,f,c
 11167  000FE8  D7FE               	bra	u7167
 11168  000FEA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11169  000FEC  D7FC               	bra	u7167
 11170  000FEE  F000               	nop	
 11171  000FF0  0100               	movlb	0	; () banked
 11172  000FF2  2BBE               	incf	actuatorTest@i_1530& (0+255),f,b
 11173  000FF4  D7EF               	goto	l6411
 11174  000FF6                     l6419:
 11175                           
 11176                           ; BSR set to: 0
 11177  000FF6  0E00               	movlw	0
 11178  000FF8  0100               	movlb	0	; () banked
 11179  000FFA  6FBF               	movwf	actuatorTest@i_1531& (0+255),b
 11180  000FFC                     l6421:
 11181                           
 11182                           ; BSR set to: 0
 11183  000FFC  0E63               	movlw	99
 11184  000FFE  0100               	movlb	0	; () banked
 11185  001000  65BF               	cpfsgt	actuatorTest@i_1531& (0+255),b
 11186  001002  D001               	goto	l6425
 11187  001004  D00C               	goto	l1071
 11188  001006                     l6425:
 11189                           
 11190                           ; BSR set to: 0
 11191  001006  0E68               	movlw	104
 11192  001008  0100               	movlb	0	; () banked
 11193  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11194  00100C  0EE4               	movlw	228
 11195  00100E                     u7177:
 11196  00100E  2EE8               	decfsz	wreg,f,c
 11197  001010  D7FE               	bra	u7177
 11198  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11199  001014  D7FC               	bra	u7177
 11200  001016  F000               	nop	
 11201  001018  0100               	movlb	0	; () banked
 11202  00101A  2BBF               	incf	actuatorTest@i_1531& (0+255),f,b
 11203  00101C  D7EF               	goto	l6421
 11204  00101E                     l1071:
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;Test.c: 256: TMR3ON = 0;
 11208  00101E  90B1               	bcf	4017,0,c	;volatile
 11209                           
 11210                           ;Test.c: 257: (INTCONbits.GIE = 0);
 11211  001020  9EF2               	bcf	intcon,7,c	;volatile
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;Test.c: 262: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11215  001022  0E01               	movlw	1
 11216  001024  EC83  F01F         	call	_lcdInst
 11217  001028  0E68               	movlw	104
 11218  00102A  0100               	movlb	0	; () banked
 11219  00102C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11220  00102E  0EE4               	movlw	228
 11221  001030                     u7187:
 11222  001030  2EE8               	decfsz	wreg,f,c
 11223  001032  D7FE               	bra	u7187
 11224  001034  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11225  001036  D7FC               	bra	u7187
 11226  001038  F000               	nop	
 11227  00103A  0E80               	movlw	128
 11228  00103C  EC83  F01F         	call	_lcdInst
 11229                           
 11230                           ;Test.c: 263: printf("TST: CAM SERVO");
 11231  001040  0EB0               	movlw	low STR_102
 11232  001042  0100               	movlb	0	; () banked
 11233  001044  6F8E               	movwf	printf@f& (0+255),b
 11234  001046  0EFE               	movlw	high STR_102
 11235  001048  0100               	movlb	0	; () banked
 11236  00104A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11237  00104C  EC93  F008         	call	_printf	;wreg free
 11238                           
 11239                           ;Test.c: 264: lcdInst(0b11000000);;
 11240  001050  0EC0               	movlw	192
 11241  001052  EC83  F01F         	call	_lcdInst
 11242                           
 11243                           ;Test.c: 265: printf("CAM UP  |RC0=1");
 11244  001056  0E92               	movlw	low STR_103
 11245  001058  0100               	movlb	0	; () banked
 11246  00105A  6F8E               	movwf	printf@f& (0+255),b
 11247  00105C  0EFE               	movlw	high STR_103
 11248  00105E  0100               	movlb	0	; () banked
 11249  001060  6F8F               	movwf	(printf@f+1)& (0+255),b
 11250  001062  EC93  F008         	call	_printf	;wreg free
 11251                           
 11252                           ;Test.c: 266: LATCbits.LATC0 = 0;
 11253  001066  908B               	bcf	3979,0,c	;volatile
 11254                           
 11255                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11256  001068  0E00               	movlw	0
 11257  00106A  0100               	movlb	0	; () banked
 11258  00106C  6FC0               	movwf	actuatorTest@i_1534& (0+255),b
 11259  00106E                     l6445:
 11260                           
 11261                           ; BSR set to: 0
 11262  00106E  0E63               	movlw	99
 11263  001070  0100               	movlb	0	; () banked
 11264  001072  65C0               	cpfsgt	actuatorTest@i_1534& (0+255),b
 11265  001074  D001               	goto	l6449
 11266  001076  D00C               	goto	l6453
 11267  001078                     l6449:
 11268                           
 11269                           ; BSR set to: 0
 11270  001078  0E68               	movlw	104
 11271  00107A  0100               	movlb	0	; () banked
 11272  00107C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11273  00107E  0EE4               	movlw	228
 11274  001080                     u7197:
 11275  001080  2EE8               	decfsz	wreg,f,c
 11276  001082  D7FE               	bra	u7197
 11277  001084  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11278  001086  D7FC               	bra	u7197
 11279  001088  F000               	nop	
 11280  00108A  0100               	movlb	0	; () banked
 11281  00108C  2BC0               	incf	actuatorTest@i_1534& (0+255),f,b
 11282  00108E  D7EF               	goto	l6445
 11283  001090                     l6453:
 11284                           
 11285                           ; BSR set to: 0
 11286  001090  0E00               	movlw	0
 11287  001092  0100               	movlb	0	; () banked
 11288  001094  6FC1               	movwf	actuatorTest@i_1535& (0+255),b
 11289  001096                     l6455:
 11290                           
 11291                           ; BSR set to: 0
 11292  001096  0E63               	movlw	99
 11293  001098  0100               	movlb	0	; () banked
 11294  00109A  65C1               	cpfsgt	actuatorTest@i_1535& (0+255),b
 11295  00109C  D001               	goto	l6459
 11296  00109E  D00C               	goto	l6463
 11297  0010A0                     l6459:
 11298                           
 11299                           ; BSR set to: 0
 11300  0010A0  0E68               	movlw	104
 11301  0010A2  0100               	movlb	0	; () banked
 11302  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11303  0010A6  0EE4               	movlw	228
 11304  0010A8                     u7207:
 11305  0010A8  2EE8               	decfsz	wreg,f,c
 11306  0010AA  D7FE               	bra	u7207
 11307  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11308  0010AE  D7FC               	bra	u7207
 11309  0010B0  F000               	nop	
 11310  0010B2  0100               	movlb	0	; () banked
 11311  0010B4  2BC1               	incf	actuatorTest@i_1535& (0+255),f,b
 11312  0010B6  D7EF               	goto	l6455
 11313  0010B8                     l6463:
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;Test.c: 268: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11317  0010B8  0E80               	movlw	128
 11318  0010BA  EC83  F01F         	call	_lcdInst
 11319  0010BE  0EC0               	movlw	192
 11320  0010C0  EC83  F01F         	call	_lcdInst
 11321                           
 11322                           ;Test.c: 269: LATCbits.LATC0 = 1;
 11323  0010C4  808B               	bsf	3979,0,c	;volatile
 11324                           
 11325                           ;Test.c: 270: printf("CAM DWN |RC0=0");
 11326  0010C6  0E83               	movlw	low STR_104
 11327  0010C8  0100               	movlb	0	; () banked
 11328  0010CA  6F8E               	movwf	printf@f& (0+255),b
 11329  0010CC  0EFE               	movlw	high STR_104
 11330  0010CE  0100               	movlb	0	; () banked
 11331  0010D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11332  0010D2  EC93  F008         	call	_printf	;wreg free
 11333                           
 11334                           ;Test.c: 271: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11335  0010D6  0E00               	movlw	0
 11336  0010D8  0100               	movlb	0	; () banked
 11337  0010DA  6FC2               	movwf	actuatorTest@i_1537& (0+255),b
 11338  0010DC                     l6471:
 11339                           
 11340                           ; BSR set to: 0
 11341  0010DC  0E63               	movlw	99
 11342  0010DE  0100               	movlb	0	; () banked
 11343  0010E0  65C2               	cpfsgt	actuatorTest@i_1537& (0+255),b
 11344  0010E2  D001               	goto	l6475
 11345  0010E4  D00C               	goto	l6479
 11346  0010E6                     l6475:
 11347                           
 11348                           ; BSR set to: 0
 11349  0010E6  0E68               	movlw	104
 11350  0010E8  0100               	movlb	0	; () banked
 11351  0010EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11352  0010EC  0EE4               	movlw	228
 11353  0010EE                     u7217:
 11354  0010EE  2EE8               	decfsz	wreg,f,c
 11355  0010F0  D7FE               	bra	u7217
 11356  0010F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11357  0010F4  D7FC               	bra	u7217
 11358  0010F6  F000               	nop	
 11359  0010F8  0100               	movlb	0	; () banked
 11360  0010FA  2BC2               	incf	actuatorTest@i_1537& (0+255),f,b
 11361  0010FC  D7EF               	goto	l6471
 11362  0010FE                     l6479:
 11363                           
 11364                           ; BSR set to: 0
 11365  0010FE  0E00               	movlw	0
 11366  001100  0100               	movlb	0	; () banked
 11367  001102  6FC3               	movwf	actuatorTest@i_1538& (0+255),b
 11368  001104                     l6481:
 11369                           
 11370                           ; BSR set to: 0
 11371  001104  0E63               	movlw	99
 11372  001106  0100               	movlb	0	; () banked
 11373  001108  65C3               	cpfsgt	actuatorTest@i_1538& (0+255),b
 11374  00110A  D001               	goto	l6485
 11375  00110C  0012               	return	
 11376  00110E                     l6485:
 11377                           
 11378                           ; BSR set to: 0
 11379  00110E  0E68               	movlw	104
 11380  001110  0100               	movlb	0	; () banked
 11381  001112  6FAB               	movwf	??_actuatorTest& (0+255),b
 11382  001114  0EE4               	movlw	228
 11383  001116                     u7227:
 11384  001116  2EE8               	decfsz	wreg,f,c
 11385  001118  D7FE               	bra	u7227
 11386  00111A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11387  00111C  D7FC               	bra	u7227
 11388  00111E  F000               	nop	
 11389  001120  0100               	movlb	0	; () banked
 11390  001122  2BC3               	incf	actuatorTest@i_1538& (0+255),f,b
 11391  001124  D7EF               	goto	l6481
 11392  001126                     __end_of_actuatorTest:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           intcon3	equ	0xFF0
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           postdec1	equ	0xFE5
 11406                           fsr1l	equ	0xFE1
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           fsr2h	equ	0xFDA
 11411                           fsr2l	equ	0xFD9
 11412                           status	equ	0xFD8
 11413                           
 11414 ;; *************** function _updateServoPosition *****************
 11415 ;; Defined at:
 11416 ;;		line 295 in file "sort.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;  time_us         2    0[BANK0 ] int 
 11419 ;;  timer           2    2[BANK0 ] int 
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;  my_time         2    6[BANK0 ] unsigned int 
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  1    wreg      void 
 11424 ;; Registers used:
 11425 ;;		wreg, status,2, status,0
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11434 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11435 ;;Total ram usage:        8 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; Hardware stack levels required when called:    7
 11438 ;; This function calls:
 11439 ;;		Nothing
 11440 ;; This function is called by:
 11441 ;;		_Distribution
 11442 ;;		_initServos
 11443 ;;		_actuatorTest
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           	psect	text41
 11448  003440                     __ptext41:
 11449                           	opt stack 0
 11450  003440                     _updateServoPosition:
 11451                           	opt stack 20
 11452                           
 11453                           ;sort.c: 296: unsigned int my_time = 65535 - time_us;
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;incstack = 0
 11457  003440  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11458  003444  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11459  003448  0100               	movlb	0	; () banked
 11460  00344A  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11461  00344C  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11462  00344E  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11463  003450  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11464  003452  0EFF               	movlw	255
 11465  003454  0100               	movlb	0	; () banked
 11466  003456  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11467  003458  0100               	movlb	0	; () banked
 11468  00345A  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11469  00345C  0EFF               	movlw	255
 11470  00345E  0100               	movlb	0	; () banked
 11471  003460  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11472  003462  0100               	movlb	0	; () banked
 11473  003464  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11474                           
 11475                           ;sort.c: 297: switch(timer){
 11476  003466  D015               	goto	l5113
 11477  003468                     l5111:
 11478                           
 11479                           ; BSR set to: 0
 11480                           ;sort.c: 299: servoTimes[0] = my_time >> 8;
 11481  003468  0100               	movlb	0	; () banked
 11482  00346A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11483  00346C  0101               	movlb	1	; () banked
 11484  00346E  6F1C               	movwf	_servoTimes& (0+255),b
 11485  003470  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11486                           
 11487                           ;sort.c: 300: servoTimes[1] = my_time & 0xFF;
 11488  003472  0100               	movlb	0	; () banked
 11489  003474  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11490  003476  0101               	movlb	1	; () banked
 11491  003478  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11492  00347A  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11493  00347C                     l772:
 11494                           
 11495                           ;sort.c: 302: servoTimes[2] = my_time >> 8;
 11496  00347C  0100               	movlb	0	; () banked
 11497  00347E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11498  003480  0101               	movlb	1	; () banked
 11499  003482  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11500  003484  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11501                           
 11502                           ;sort.c: 303: servoTimes[3] = my_time & 0xFF;
 11503  003486  0100               	movlb	0	; () banked
 11504  003488  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11505  00348A  0101               	movlb	1	; () banked
 11506  00348C  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11507  00348E  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11508                           
 11509                           ;sort.c: 304: }
 11510  003490  0012               	return	
 11511  003492                     l5113:
 11512  003492  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11513  003496  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11514                           
 11515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11516                           ; Switch size 1, requested type "space"
 11517                           ; Number of cases is 1, Range of values is 0 to 0
 11518                           ; switch strategies available:
 11519                           ; Name         Instructions Cycles
 11520                           ; simple_byte            4     3 (average)
 11521                           ;	Chosen strategy is simple_byte
 11522  00349A  0100               	movlb	0	; () banked
 11523  00349C  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11524  00349E  0A00               	xorlw	0	; case 0
 11525  0034A0  A4D8               	btfss	status,2,c
 11526  0034A2  0012               	return	
 11527                           
 11528                           ; BSR set to: 0
 11529                           ; Switch size 1, requested type "space"
 11530                           ; Number of cases is 2, Range of values is 1 to 3
 11531                           ; switch strategies available:
 11532                           ; Name         Instructions Cycles
 11533                           ; simple_byte            7     4 (average)
 11534                           ;	Chosen strategy is simple_byte
 11535  0034A4  0100               	movlb	0	; () banked
 11536  0034A6  5184               	movf	??_updateServoPosition& (0+255),w,b
 11537  0034A8  0A01               	xorlw	1	; case 1
 11538  0034AA  B4D8               	btfsc	status,2,c
 11539  0034AC  D7DD               	goto	l5111
 11540  0034AE  0A02               	xorlw	2	; case 3
 11541  0034B0  A4D8               	btfss	status,2,c
 11542  0034B2  0012               	return	
 11543  0034B4  D7E3               	goto	l772
 11544  0034B6                     __end_of_updateServoPosition:
 11545                           	opt stack 0
 11546                           tblptru	equ	0xFF8
 11547                           tblptrh	equ	0xFF7
 11548                           tblptrl	equ	0xFF6
 11549                           tablat	equ	0xFF5
 11550                           prodh	equ	0xFF4
 11551                           prodl	equ	0xFF3
 11552                           intcon	equ	0xFF2
 11553                           intcon2	equ	0xFF1
 11554                           intcon3	equ	0xFF0
 11555                           postinc0	equ	0xFEE
 11556                           wreg	equ	0xFE8
 11557                           postdec1	equ	0xFE5
 11558                           fsr1l	equ	0xFE1
 11559                           indf2	equ	0xFDF
 11560                           postinc2	equ	0xFDE
 11561                           postdec2	equ	0xFDD
 11562                           fsr2h	equ	0xFDA
 11563                           fsr2l	equ	0xFD9
 11564                           status	equ	0xFD8
 11565                           
 11566 ;; *************** function _printf *****************
 11567 ;; Defined at:
 11568 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 11571 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 11572 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 11573 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 11574 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 11575 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 11576 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 11577 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 11578 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 11579 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(13), 
 11580 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 11581 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 11582 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 11583 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 11584 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 11585 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 11586 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 11587 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 11588 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 11589 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 11590 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  tmpval          4    0        struct .
 11593 ;;  width           2   41[BANK0 ] int 
 11594 ;;  val             2   37[BANK0 ] unsigned int 
 11595 ;;  len             2   35[BANK0 ] unsigned int 
 11596 ;;  ap              2   33[BANK0 ] PTR void [1]
 11597 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11598 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 11599 ;;		 -> STR_105(7), count_total(2), printRTC@month(4), UI@month(4), 
 11600 ;;  c               1   40[BANK0 ] char 
 11601 ;;  flag            1   39[BANK0 ] unsigned char 
 11602 ;;  prec            1   30[BANK0 ] char 
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  2   14[BANK0 ] int 
 11605 ;; Registers used:
 11606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11612 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11616 ;;Total ram usage:       29 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    9
 11619 ;; This function calls:
 11620 ;;		___lwdiv
 11621 ;;		___lwmod
 11622 ;;		___wmul
 11623 ;;		_isdigit
 11624 ;;		_putch
 11625 ;; This function is called by:
 11626 ;;		_UI
 11627 ;;		_change_state_to_menu_start
 11628 ;;		_change_state_to_menu_12
 11629 ;;		_change_state_to_menu_22
 11630 ;;		_printRTC
 11631 ;;		_EEPROM_write
 11632 ;;		_Test
 11633 ;;		_algorithmTest
 11634 ;;		_sensorTest
 11635 ;;		_actuatorTest
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639                           	psect	text42
 11640  001126                     __ptext42:
 11641                           	opt stack 0
 11642  001126                     _printf:
 11643                           	opt stack 18
 11644                           
 11645                           ;doprnt.c: 466: va_list ap;
 11646                           ;doprnt.c: 499: signed char c;
 11647                           ;doprnt.c: 501: int width;
 11648                           ;doprnt.c: 506: signed char prec;
 11649                           ;doprnt.c: 508: unsigned char flag;
 11650                           ;doprnt.c: 523: union {
 11651                           ;doprnt.c: 524: unsigned long vd;
 11652                           ;doprnt.c: 525: double integ;
 11653                           ;doprnt.c: 526: } tmpval;
 11654                           ;doprnt.c: 528: unsigned int val;
 11655                           ;doprnt.c: 529: unsigned len;
 11656                           ;doprnt.c: 530: const char * cp;
 11657                           ;doprnt.c: 533: *ap = __va_start();
 11658                           
 11659                           ;incstack = 0
 11660  001126  0E90               	movlw	low (?_printf+2)
 11661  001128  0100               	movlb	0	; () banked
 11662  00112A  6FA1               	movwf	printf@ap& (0+255),b
 11663  00112C  0E00               	movlw	high (?_printf+2)
 11664  00112E  0100               	movlb	0	; () banked
 11665  001130  6FA2               	movwf	(printf@ap+1)& (0+255),b
 11666                           
 11667                           ;doprnt.c: 536: while(c = *f++) {
 11668  001132  D205               	goto	l5071
 11669  001134                     l4941:
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;doprnt.c: 538: if(c != '%')
 11673  001134  0E25               	movlw	37
 11674  001136  0100               	movlb	0	; () banked
 11675  001138  19A8               	xorwf	printf@c& (0+255),w,b
 11676  00113A  B4D8               	btfsc	status,2,c
 11677  00113C  D005               	goto	l4945
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;doprnt.c: 540: {
 11681                           ;doprnt.c: 541: (putch(c) );
 11682  00113E  0100               	movlb	0	; () banked
 11683  001140  51A8               	movf	printf@c& (0+255),w,b
 11684  001142  EC7B  F01F         	call	_putch
 11685                           
 11686                           ;doprnt.c: 542: continue;
 11687  001146  D1FB               	goto	l5071
 11688  001148                     l4945:
 11689                           
 11690                           ;doprnt.c: 543: }
 11691                           ;doprnt.c: 546: width = 0;
 11692  001148  0E00               	movlw	0
 11693  00114A  0100               	movlb	0	; () banked
 11694  00114C  6FAA               	movwf	(printf@width+1)& (0+255),b
 11695  00114E  0E00               	movlw	0
 11696  001150  6FA9               	movwf	printf@width& (0+255),b
 11697                           
 11698                           ;doprnt.c: 548: flag = 0;
 11699  001152  0E00               	movlw	0
 11700  001154  0100               	movlb	0	; () banked
 11701  001156  6FA7               	movwf	printf@flag& (0+255),b
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;doprnt.c: 551: switch(*f) {
 11705                           
 11706                           ;doprnt.c: 550: for(;;) {
 11707  001158  D005               	goto	l4951
 11708  00115A                     l4947:
 11709                           
 11710                           ;doprnt.c: 580: flag |= 0x04;
 11711  00115A  0100               	movlb	0	; () banked
 11712  00115C  85A7               	bsf	printf@flag& (0+255),2,b
 11713                           
 11714                           ;doprnt.c: 581: f++;
 11715  00115E  0100               	movlb	0	; () banked
 11716  001160  4B8E               	infsnz	printf@f& (0+255),f,b
 11717  001162  2B8F               	incf	(printf@f+1)& (0+255),f,b
 11718  001164                     l4951:
 11719  001164  C08E  FFF6         	movff	printf@f,tblptrl
 11720  001168  C08F  FFF7         	movff	printf@f+1,tblptrh
 11721  00116C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11722  00116C  6AF8               	clrf	tblptru,c
 11723  00116E                     	endif
 11724  00116E                     	if	0	;tblptru may be non-zero
 11725  00116E                     	endif
 11726  00116E  0008               	tblrd		*
 11727  001170  50F5               	movf	tablat,w,c
 11728                           
 11729                           ; Switch size 1, requested type "space"
 11730                           ; Number of cases is 1, Range of values is 48 to 48
 11731                           ; switch strategies available:
 11732                           ; Name         Instructions Cycles
 11733                           ; simple_byte            4     3 (average)
 11734                           ;	Chosen strategy is simple_byte
 11735  001172  0A30               	xorlw	48	; case 48
 11736  001174  B4D8               	btfsc	status,2,c
 11737  001176  D7F1               	goto	l4947
 11738                           
 11739                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11740                           
 11741                           ;doprnt.c: 586: }
 11742                           
 11743                           ;doprnt.c: 585: break;
 11744  001178  C08E  FFF6         	movff	printf@f,tblptrl
 11745  00117C  C08F  FFF7         	movff	printf@f+1,tblptrh
 11746  001180                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11747  001180  6AF8               	clrf	tblptru,c
 11748  001182                     	endif
 11749  001182                     	if	0	;tblptru may be non-zero
 11750  001182                     	endif
 11751  001182  0008               	tblrd		*
 11752  001184  50F5               	movf	tablat,w,c
 11753  001186  ECA2  F01E         	call	_isdigit
 11754  00118A  A0D8               	btfss	status,0,c
 11755  00118C  D0D2               	goto	l4999
 11756                           
 11757                           ;doprnt.c: 598: width = 0;
 11758  00118E  0E00               	movlw	0
 11759  001190  0100               	movlb	0	; () banked
 11760  001192  6FAA               	movwf	(printf@width+1)& (0+255),b
 11761  001194  0E00               	movlw	0
 11762  001196  6FA9               	movwf	printf@width& (0+255),b
 11763  001198                     l4957:
 11764                           
 11765                           ;doprnt.c: 600: width *= 10;
 11766  001198  C0A9  F080         	movff	printf@width,___wmul@multiplier
 11767  00119C  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 11768  0011A0  0E00               	movlw	0
 11769  0011A2  0100               	movlb	0	; () banked
 11770  0011A4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11771  0011A6  0E0A               	movlw	10
 11772  0011A8  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11773  0011AA  EC3C  F01D         	call	___wmul	;wreg free
 11774  0011AE  C080  F0A9         	movff	?___wmul,printf@width
 11775  0011B2  C081  F0AA         	movff	?___wmul+1,printf@width+1
 11776                           
 11777                           ;doprnt.c: 601: width += *f++ - '0';
 11778  0011B6  0ED0               	movlw	208
 11779  0011B8  0100               	movlb	0	; () banked
 11780  0011BA  6F9A               	movwf	??_printf& (0+255),b
 11781  0011BC  0EFF               	movlw	255
 11782  0011BE  0100               	movlb	0	; () banked
 11783  0011C0  6F9B               	movwf	(??_printf+1)& (0+255),b
 11784  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 11785  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 11786  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11787  0011CA  6AF8               	clrf	tblptru,c
 11788  0011CC                     	endif
 11789  0011CC                     	if	0	;tblptru may be non-zero
 11790  0011CC                     	endif
 11791  0011CC  0008               	tblrd		*
 11792  0011CE  50F5               	movf	tablat,w,c
 11793  0011D0  0100               	movlb	0	; () banked
 11794  0011D2  6F9C               	movwf	(??_printf+2)& (0+255),b
 11795  0011D4  6B9D               	clrf	(??_printf+3)& (0+255),b
 11796  0011D6  0100               	movlb	0	; () banked
 11797  0011D8  519A               	movf	??_printf& (0+255),w,b
 11798  0011DA  0100               	movlb	0	; () banked
 11799  0011DC  279C               	addwf	(??_printf+2)& (0+255),f,b
 11800  0011DE  0100               	movlb	0	; () banked
 11801  0011E0  519B               	movf	(??_printf+1)& (0+255),w,b
 11802  0011E2  0100               	movlb	0	; () banked
 11803  0011E4  239D               	addwfc	(??_printf+3)& (0+255),f,b
 11804  0011E6  0100               	movlb	0	; () banked
 11805  0011E8  519C               	movf	(??_printf+2)& (0+255),w,b
 11806  0011EA  0100               	movlb	0	; () banked
 11807  0011EC  27A9               	addwf	printf@width& (0+255),f,b
 11808  0011EE  0100               	movlb	0	; () banked
 11809  0011F0  519D               	movf	(??_printf+3)& (0+255),w,b
 11810  0011F2  0100               	movlb	0	; () banked
 11811  0011F4  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 11812                           
 11813                           ; BSR set to: 0
 11814  0011F6  0100               	movlb	0	; () banked
 11815  0011F8  4B8E               	infsnz	printf@f& (0+255),f,b
 11816  0011FA  2B8F               	incf	(printf@f+1)& (0+255),f,b
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11820  0011FC  C08E  FFF6         	movff	printf@f,tblptrl
 11821  001200  C08F  FFF7         	movff	printf@f+1,tblptrh
 11822  001204                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11823  001204  6AF8               	clrf	tblptru,c
 11824  001206                     	endif
 11825  001206                     	if	0	;tblptru may be non-zero
 11826  001206                     	endif
 11827  001206  0008               	tblrd		*
 11828  001208  50F5               	movf	tablat,w,c
 11829  00120A  ECA2  F01E         	call	_isdigit
 11830  00120E  A0D8               	btfss	status,0,c
 11831  001210  D090               	goto	l4999
 11832  001212  D7C2               	goto	l4957
 11833  001214                     l4965:
 11834                           
 11835                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11836  001214  C0A1  FFD9         	movff	printf@ap,fsr2l
 11837  001218  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 11838  00121C  CFDE F09F          	movff	postinc2,printf@cp
 11839  001220  CFDD F0A0          	movff	postdec2,printf@cp+1
 11840  001224  0E02               	movlw	2
 11841  001226  0100               	movlb	0	; () banked
 11842  001228  27A1               	addwf	printf@ap& (0+255),f,b
 11843  00122A  0E00               	movlw	0
 11844  00122C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;doprnt.c: 740: if(!cp)
 11848  00122E  0100               	movlb	0	; () banked
 11849  001230  519F               	movf	printf@cp& (0+255),w,b
 11850  001232  0100               	movlb	0	; () banked
 11851  001234  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 11852  001236  A4D8               	btfss	status,2,c
 11853  001238  D006               	goto	l4973
 11854                           
 11855                           ; BSR set to: 0
 11856                           ;doprnt.c: 741: cp = "(null)";
 11857  00123A  0EB5               	movlw	low STR_105
 11858  00123C  0100               	movlb	0	; () banked
 11859  00123E  6F9F               	movwf	printf@cp& (0+255),b
 11860  001240  0EFF               	movlw	high STR_105
 11861  001242  0100               	movlb	0	; () banked
 11862  001244  6FA0               	movwf	(printf@cp+1)& (0+255),b
 11863  001246                     l4973:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;doprnt.c: 745: len = 0;
 11867  001246  0E00               	movlw	0
 11868  001248  0100               	movlb	0	; () banked
 11869  00124A  6FA4               	movwf	(printf@len+1)& (0+255),b
 11870  00124C  0E00               	movlw	0
 11871  00124E  6FA3               	movwf	printf@len& (0+255),b
 11872                           
 11873                           ;doprnt.c: 746: while(cp[len])
 11874  001250  D003               	goto	l4977
 11875  001252                     l4975:
 11876                           
 11877                           ;doprnt.c: 747: len++;
 11878  001252  0100               	movlb	0	; () banked
 11879  001254  4BA3               	infsnz	printf@len& (0+255),f,b
 11880  001256  2BA4               	incf	(printf@len+1)& (0+255),f,b
 11881  001258                     l4977:
 11882                           
 11883                           ; BSR set to: 0
 11884  001258  0100               	movlb	0	; () banked
 11885  00125A  51A3               	movf	printf@len& (0+255),w,b
 11886  00125C  0100               	movlb	0	; () banked
 11887  00125E  259F               	addwf	printf@cp& (0+255),w,b
 11888  001260  0100               	movlb	0	; () banked
 11889  001262  6F9A               	movwf	??_printf& (0+255),b
 11890  001264  0100               	movlb	0	; () banked
 11891  001266  51A4               	movf	(printf@len+1)& (0+255),w,b
 11892  001268  0100               	movlb	0	; () banked
 11893  00126A  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 11894  00126C  0100               	movlb	0	; () banked
 11895  00126E  6F9B               	movwf	(??_printf+1)& (0+255),b
 11896  001270  C09A  FFF6         	movff	??_printf,tblptrl
 11897  001274  C09B  FFF7         	movff	??_printf+1,tblptrh
 11898  001278  0E00               	movlw	low (__mediumconst shr (0+16))
 11899  00127A  6EF8               	movwf	tblptru,c
 11900  00127C  0E0F               	movlw	(high __ramtop+-1)
 11901  00127E  64F7               	cpfsgt	tblptrh,c
 11902  001280  D003               	bra	u3527
 11903  001282  0008               	tblrd		*
 11904  001284  50F5               	movf	tablat,w,c
 11905  001286  D005               	bra	u3520
 11906  001288                     u3527:
 11907  001288  CFF6 FFE9          	movff	tblptrl,fsr0l
 11908  00128C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11909  001290  50EF               	movf	indf0,w,c
 11910  001292                     u3520:
 11911  001292  0900               	iorlw	0
 11912  001294  A4D8               	btfss	status,2,c
 11913  001296  D7DD               	goto	l4975
 11914                           
 11915                           ;doprnt.c: 757: if(width > len)
 11916  001298  0100               	movlb	0	; () banked
 11917  00129A  51A9               	movf	printf@width& (0+255),w,b
 11918  00129C  0100               	movlb	0	; () banked
 11919  00129E  5DA3               	subwf	printf@len& (0+255),w,b
 11920  0012A0  0100               	movlb	0	; () banked
 11921  0012A2  51AA               	movf	(printf@width+1)& (0+255),w,b
 11922  0012A4  0100               	movlb	0	; () banked
 11923  0012A6  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 11924  0012A8  B0D8               	btfsc	status,0,c
 11925  0012AA  D009               	goto	l4983
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;doprnt.c: 758: width -= len;
 11929  0012AC  0100               	movlb	0	; () banked
 11930  0012AE  51A3               	movf	printf@len& (0+255),w,b
 11931  0012B0  0100               	movlb	0	; () banked
 11932  0012B2  5FA9               	subwf	printf@width& (0+255),f,b
 11933  0012B4  0100               	movlb	0	; () banked
 11934  0012B6  51A4               	movf	(printf@len+1)& (0+255),w,b
 11935  0012B8  0100               	movlb	0	; () banked
 11936  0012BA  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 11937  0012BC  D009               	goto	l4987
 11938  0012BE                     l4983:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;doprnt.c: 759: else
 11942                           ;doprnt.c: 760: width = 0;
 11943  0012BE  0E00               	movlw	0
 11944  0012C0  0100               	movlb	0	; () banked
 11945  0012C2  6FAA               	movwf	(printf@width+1)& (0+255),b
 11946  0012C4  0E00               	movlw	0
 11947  0012C6  6FA9               	movwf	printf@width& (0+255),b
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;doprnt.c: 764: while(width--)
 11951  0012C8  D003               	goto	l4987
 11952  0012CA                     l4985:
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;doprnt.c: 765: (putch(' ') );
 11956  0012CA  0E20               	movlw	32
 11957  0012CC  EC7B  F01F         	call	_putch
 11958  0012D0                     l4987:
 11959  0012D0  0100               	movlb	0	; () banked
 11960  0012D2  07A9               	decf	printf@width& (0+255),f,b
 11961  0012D4  A0D8               	btfss	status,0,c
 11962  0012D6  07AA               	decf	(printf@width+1)& (0+255),f,b
 11963  0012D8  0100               	movlb	0	; () banked
 11964  0012DA  29A9               	incf	printf@width& (0+255),w,b
 11965  0012DC  E1F6               	bnz	l4985
 11966  0012DE  0100               	movlb	0	; () banked
 11967  0012E0  29AA               	incf	(printf@width+1)& (0+255),w,b
 11968  0012E2  B4D8               	btfsc	status,2,c
 11969  0012E4  D017               	goto	l4993
 11970  0012E6  D7F1               	goto	l4985
 11971  0012E8                     l4989:
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;doprnt.c: 768: (putch(*cp++) );
 11975  0012E8  C09F  FFF6         	movff	printf@cp,tblptrl
 11976  0012EC  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 11977  0012F0  0E00               	movlw	low (__mediumconst shr (0+16))
 11978  0012F2  6EF8               	movwf	tblptru,c
 11979  0012F4  0E0F               	movlw	(high __ramtop+-1)
 11980  0012F6  64F7               	cpfsgt	tblptrh,c
 11981  0012F8  D003               	bra	u3567
 11982  0012FA  0008               	tblrd		*
 11983  0012FC  50F5               	movf	tablat,w,c
 11984  0012FE  D005               	bra	u3560
 11985  001300                     u3567:
 11986  001300  CFF6 FFE9          	movff	tblptrl,fsr0l
 11987  001304  CFF7 FFEA          	movff	tblptrh,fsr0h
 11988  001308  50EF               	movf	indf0,w,c
 11989  00130A                     u3560:
 11990  00130A  EC7B  F01F         	call	_putch
 11991  00130E  0100               	movlb	0	; () banked
 11992  001310  4B9F               	infsnz	printf@cp& (0+255),f,b
 11993  001312  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 11994  001314                     l4993:
 11995                           
 11996                           ; BSR set to: 0
 11997  001314  0100               	movlb	0	; () banked
 11998  001316  07A3               	decf	printf@len& (0+255),f,b
 11999  001318  A0D8               	btfss	status,0,c
 12000  00131A  07A4               	decf	(printf@len+1)& (0+255),f,b
 12001  00131C  0100               	movlb	0	; () banked
 12002  00131E  29A3               	incf	printf@len& (0+255),w,b
 12003  001320  E1E3               	bnz	l4989
 12004  001322  0100               	movlb	0	; () banked
 12005  001324  29A4               	incf	(printf@len+1)& (0+255),w,b
 12006  001326  B4D8               	btfsc	status,2,c
 12007  001328  D10A               	goto	l5071
 12008  00132A  D7DE               	goto	l4989
 12009  00132C                     l4995:
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;doprnt.c: 818: flag |= 0x40;
 12013  00132C  0100               	movlb	0	; () banked
 12014  00132E  8DA7               	bsf	printf@flag& (0+255),6,b
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;doprnt.c: 822: }
 12018                           
 12019                           ;doprnt.c: 819: break;
 12020  001330  D01D               	goto	l1119
 12021  001332                     l4999:
 12022  001332  C08E  FFF6         	movff	printf@f,tblptrl
 12023  001336  C08F  FFF7         	movff	printf@f+1,tblptrh
 12024  00133A  0100               	movlb	0	; () banked
 12025  00133C  4B8E               	infsnz	printf@f& (0+255),f,b
 12026  00133E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12027  001340                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12028  001340  6AF8               	clrf	tblptru,c
 12029  001342                     	endif
 12030  001342                     	if	0	;tblptru may be non-zero
 12031  001342                     	endif
 12032  001342  0008               	tblrd		*
 12033  001344  CFF5 F0A8          	movff	tablat,printf@c
 12034  001348  0100               	movlb	0	; () banked
 12035  00134A  51A8               	movf	printf@c& (0+255),w,b
 12036                           
 12037                           ; Switch size 1, requested type "space"
 12038                           ; Number of cases is 5, Range of values is 0 to 117
 12039                           ; switch strategies available:
 12040                           ; Name         Instructions Cycles
 12041                           ; simple_byte           16     9 (average)
 12042                           ;	Chosen strategy is simple_byte
 12043  00134C  0A00               	xorlw	0	; case 0
 12044  00134E  B4D8               	btfsc	status,2,c
 12045  001350  0012               	return	
 12046  001352  0A64               	xorlw	100	; case 100
 12047  001354  B4D8               	btfsc	status,2,c
 12048  001356  D00A               	goto	l1119
 12049  001358  0A0D               	xorlw	13	; case 105
 12050  00135A  B4D8               	btfsc	status,2,c
 12051  00135C  D007               	goto	l1119
 12052  00135E  0A1A               	xorlw	26	; case 115
 12053  001360  B4D8               	btfsc	status,2,c
 12054  001362  D758               	goto	l4965
 12055  001364  0A06               	xorlw	6	; case 117
 12056  001366  B4D8               	btfsc	status,2,c
 12057  001368  D7E1               	goto	l4995
 12058  00136A  D0E9               	goto	l5071
 12059  00136C                     l1119:
 12060                           
 12061                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12062  00136C  0100               	movlb	0	; () banked
 12063  00136E  BDA7               	btfsc	printf@flag& (0+255),6,b
 12064  001370  D019               	goto	l5011
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;doprnt.c: 1253: {
 12068                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12069  001372  C0A1  FFD9         	movff	printf@ap,fsr2l
 12070  001376  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12071  00137A  CFDE F0A5          	movff	postinc2,printf@val
 12072  00137E  CFDD F0A6          	movff	postdec2,printf@val+1
 12073                           
 12074                           ; BSR set to: 0
 12075  001382  0E02               	movlw	2
 12076  001384  0100               	movlb	0	; () banked
 12077  001386  27A1               	addwf	printf@ap& (0+255),f,b
 12078  001388  0E00               	movlw	0
 12079  00138A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;doprnt.c: 1261: if((int)val < 0) {
 12083  00138C  0100               	movlb	0	; () banked
 12084  00138E  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12085  001390  D016               	goto	l5015
 12086                           
 12087                           ; BSR set to: 0
 12088                           ;doprnt.c: 1262: flag |= 0x03;
 12089  001392  0E03               	movlw	3
 12090  001394  0100               	movlb	0	; () banked
 12091  001396  13A7               	iorwf	printf@flag& (0+255),f,b
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;doprnt.c: 1263: val = -val;
 12095  001398  0100               	movlb	0	; () banked
 12096  00139A  6DA5               	negf	printf@val& (0+255),b
 12097  00139C  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12098  00139E  B0D8               	btfsc	status,0,c
 12099  0013A0  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;doprnt.c: 1264: }
 12103                           ;doprnt.c: 1266: }
 12104  0013A2  D00D               	goto	l5015
 12105  0013A4                     l5011:
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;doprnt.c: 1268: else
 12109                           ;doprnt.c: 1273: {
 12110                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12111  0013A4  C0A1  FFD9         	movff	printf@ap,fsr2l
 12112  0013A8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12113  0013AC  CFDE F0A5          	movff	postinc2,printf@val
 12114  0013B0  CFDD F0A6          	movff	postdec2,printf@val+1
 12115                           
 12116                           ; BSR set to: 0
 12117  0013B4  0E02               	movlw	2
 12118  0013B6  0100               	movlb	0	; () banked
 12119  0013B8  27A1               	addwf	printf@ap& (0+255),f,b
 12120  0013BA  0E00               	movlw	0
 12121  0013BC  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12122  0013BE                     l5015:
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;doprnt.c: 1287: }
 12126                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12127  0013BE  0E01               	movlw	1
 12128  0013C0  0100               	movlb	0	; () banked
 12129  0013C2  6FA8               	movwf	printf@c& (0+255),b
 12130  0013C4                     l5017:
 12131                           
 12132                           ; BSR set to: 0
 12133  0013C4  0E05               	movlw	5
 12134  0013C6  0100               	movlb	0	; () banked
 12135  0013C8  19A8               	xorwf	printf@c& (0+255),w,b
 12136  0013CA  B4D8               	btfsc	status,2,c
 12137  0013CC  D019               	goto	l5029
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;doprnt.c: 1306: if(val < dpowers[c])
 12141                           
 12142                           ; BSR set to: 0
 12143                           
 12144                           ; BSR set to: 0
 12145  0013CE  0100               	movlb	0	; () banked
 12146  0013D0  51A8               	movf	printf@c& (0+255),w,b
 12147  0013D2  0D02               	mullw	2
 12148  0013D4  0EB4               	movlw	low _dpowers
 12149  0013D6  24F3               	addwf	prodl,w,c
 12150  0013D8  6EF6               	movwf	tblptrl,c
 12151  0013DA  0EFB               	movlw	high _dpowers
 12152  0013DC  20F4               	addwfc	prodh,w,c
 12153  0013DE  6EF7               	movwf	tblptrh,c
 12154  0013E0                     	if	1	;There are 3 active tblptr bytes
 12155  0013E0  6AF8               	clrf	tblptru,c
 12156  0013E2  0E00               	movlw	low (__mediumconst shr (0+16))
 12157  0013E4  22F8               	addwfc	tblptru,f,c
 12158  0013E6                     	endif
 12159  0013E6  0009               	tblrd		*+
 12160  0013E8  50F5               	movf	tablat,w,c
 12161  0013EA  0100               	movlb	0	; () banked
 12162  0013EC  5DA5               	subwf	printf@val& (0+255),w,b
 12163  0013EE  0009               	tblrd		*+
 12164  0013F0  50F5               	movf	tablat,w,c
 12165  0013F2  0100               	movlb	0	; () banked
 12166  0013F4  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12167  0013F6  A0D8               	btfss	status,0,c
 12168  0013F8  D003               	goto	l5029
 12169                           
 12170                           ; BSR set to: 0
 12171                           
 12172                           ; BSR set to: 0
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;doprnt.c: 1307: break;
 12176  0013FA  0100               	movlb	0	; () banked
 12177  0013FC  2BA8               	incf	printf@c& (0+255),f,b
 12178  0013FE  D7E2               	goto	l5017
 12179  001400                     l5029:
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12183  001400  0100               	movlb	0	; () banked
 12184  001402  51A9               	movf	printf@width& (0+255),w,b
 12185  001404  0100               	movlb	0	; () banked
 12186  001406  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12187  001408  B4D8               	btfsc	status,2,c
 12188  00140A  D00B               	goto	l5035
 12189                           
 12190                           ; BSR set to: 0
 12191  00140C  C0A7  F09A         	movff	printf@flag,??_printf
 12192  001410  0E03               	movlw	3
 12193  001412  0100               	movlb	0	; () banked
 12194  001414  179A               	andwf	??_printf& (0+255),f,b
 12195  001416  B4D8               	btfsc	status,2,c
 12196  001418  D004               	goto	l5035
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;doprnt.c: 1346: width--;
 12200  00141A  0100               	movlb	0	; () banked
 12201  00141C  07A9               	decf	printf@width& (0+255),f,b
 12202  00141E  A0D8               	btfss	status,0,c
 12203  001420  07AA               	decf	(printf@width+1)& (0+255),f,b
 12204  001422                     l5035:
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;doprnt.c: 1381: if(width > c)
 12208  001422  0E80               	movlw	128
 12209  001424  0100               	movlb	0	; () banked
 12210  001426  BFA8               	btfsc	printf@c& (0+255),7,b
 12211  001428  0E7F               	movlw	127
 12212  00142A  0100               	movlb	0	; () banked
 12213  00142C  6F9A               	movwf	??_printf& (0+255),b
 12214  00142E  0100               	movlb	0	; () banked
 12215  001430  51A9               	movf	printf@width& (0+255),w,b
 12216  001432  0100               	movlb	0	; () banked
 12217  001434  5DA8               	subwf	printf@c& (0+255),w,b
 12218  001436  0100               	movlb	0	; () banked
 12219  001438  51AA               	movf	(printf@width+1)& (0+255),w,b
 12220  00143A  0A80               	xorlw	128
 12221  00143C  0100               	movlb	0	; () banked
 12222  00143E  599A               	subwfb	??_printf& (0+255),w,b
 12223  001440  B0D8               	btfsc	status,0,c
 12224  001442  D00B               	goto	l5039
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;doprnt.c: 1382: width -= c;
 12228  001444  0100               	movlb	0	; () banked
 12229  001446  51A8               	movf	printf@c& (0+255),w,b
 12230  001448  0100               	movlb	0	; () banked
 12231  00144A  5FA9               	subwf	printf@width& (0+255),f,b
 12232  00144C  0E00               	movlw	0
 12233  00144E  0100               	movlb	0	; () banked
 12234  001450  BFA8               	btfsc	printf@c& (0+255),7,b
 12235  001452  0EFF               	movlw	255
 12236  001454  0100               	movlb	0	; () banked
 12237  001456  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12238  001458  D005               	goto	l5041
 12239  00145A                     l5039:
 12240                           
 12241                           ; BSR set to: 0
 12242                           ;doprnt.c: 1383: else
 12243                           ;doprnt.c: 1384: width = 0;
 12244  00145A  0E00               	movlw	0
 12245  00145C  0100               	movlb	0	; () banked
 12246  00145E  6FAA               	movwf	(printf@width+1)& (0+255),b
 12247  001460  0E00               	movlw	0
 12248  001462  6FA9               	movwf	printf@width& (0+255),b
 12249  001464                     l5041:
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;doprnt.c: 1387: if(flag & 0x04) {
 12253  001464  0100               	movlb	0	; () banked
 12254  001466  A5A7               	btfss	printf@flag& (0+255),2,b
 12255  001468  D018               	goto	l5053
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;doprnt.c: 1392: if(flag & 0x03)
 12259  00146A  C0A7  F09A         	movff	printf@flag,??_printf
 12260  00146E  0E03               	movlw	3
 12261  001470  0100               	movlb	0	; () banked
 12262  001472  179A               	andwf	??_printf& (0+255),f,b
 12263  001474  B4D8               	btfsc	status,2,c
 12264  001476  D003               	goto	l5047
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;doprnt.c: 1393: (putch('-') );
 12268  001478  0E2D               	movlw	45
 12269  00147A  EC7B  F01F         	call	_putch
 12270  00147E                     l5047:
 12271                           
 12272                           ;doprnt.c: 1415: if(width)
 12273  00147E  0100               	movlb	0	; () banked
 12274  001480  51A9               	movf	printf@width& (0+255),w,b
 12275  001482  0100               	movlb	0	; () banked
 12276  001484  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12277  001486  B4D8               	btfsc	status,2,c
 12278  001488  D025               	goto	l5063
 12279                           
 12280                           ; BSR set to: 0
 12281                           ;doprnt.c: 1417: (putch('0') );
 12282                           
 12283                           ; BSR set to: 0
 12284                           
 12285                           ;doprnt.c: 1416: do
 12286  00148A  0E30               	movlw	48
 12287  00148C  EC7B  F01F         	call	_putch
 12288                           
 12289                           ;doprnt.c: 1418: while(--width);
 12290  001490  0100               	movlb	0	; () banked
 12291  001492  07A9               	decf	printf@width& (0+255),f,b
 12292  001494  A0D8               	btfss	status,0,c
 12293  001496  07AA               	decf	(printf@width+1)& (0+255),f,b
 12294  001498  D7F2               	goto	l5047
 12295  00149A                     l5053:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;doprnt.c: 1422: {
 12299                           ;doprnt.c: 1424: if(width
 12300                           ;doprnt.c: 1428: )
 12301  00149A  0100               	movlb	0	; () banked
 12302  00149C  51A9               	movf	printf@width& (0+255),w,b
 12303  00149E  0100               	movlb	0	; () banked
 12304  0014A0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12305  0014A2  B4D8               	btfsc	status,2,c
 12306  0014A4  D00D               	goto	l5059
 12307  0014A6                     l5055:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;doprnt.c: 1430: (putch(' ') );
 12311  0014A6  0E20               	movlw	32
 12312  0014A8  EC7B  F01F         	call	_putch
 12313                           
 12314                           ;doprnt.c: 1431: while(--width);
 12315  0014AC  0100               	movlb	0	; () banked
 12316  0014AE  07A9               	decf	printf@width& (0+255),f,b
 12317  0014B0  A0D8               	btfss	status,0,c
 12318  0014B2  07AA               	decf	(printf@width+1)& (0+255),f,b
 12319  0014B4  0100               	movlb	0	; () banked
 12320  0014B6  51A9               	movf	printf@width& (0+255),w,b
 12321  0014B8  0100               	movlb	0	; () banked
 12322  0014BA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12323  0014BC  A4D8               	btfss	status,2,c
 12324  0014BE  D7F3               	goto	l5055
 12325  0014C0                     l5059:
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;doprnt.c: 1438: if(flag & 0x03)
 12329  0014C0  C0A7  F09A         	movff	printf@flag,??_printf
 12330  0014C4  0E03               	movlw	3
 12331  0014C6  0100               	movlb	0	; () banked
 12332  0014C8  179A               	andwf	??_printf& (0+255),f,b
 12333  0014CA  B4D8               	btfsc	status,2,c
 12334  0014CC  D003               	goto	l5063
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;doprnt.c: 1439: (putch('-') );
 12338  0014CE  0E2D               	movlw	45
 12339  0014D0  EC7B  F01F         	call	_putch
 12340  0014D4                     l5063:
 12341                           
 12342                           ;doprnt.c: 1469: }
 12343                           ;doprnt.c: 1472: prec = c;
 12344  0014D4  C0A8  F09E         	movff	printf@c,printf@prec
 12345                           
 12346                           ;doprnt.c: 1474: while(prec--) {
 12347  0014D8  D02C               	goto	l5069
 12348  0014DA                     l5065:
 12349                           
 12350                           ;doprnt.c: 1478: {
 12351                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12352  0014DA  0100               	movlb	0	; () banked
 12353  0014DC  519E               	movf	printf@prec& (0+255),w,b
 12354  0014DE  0D02               	mullw	2
 12355  0014E0  0EB4               	movlw	low _dpowers
 12356  0014E2  24F3               	addwf	prodl,w,c
 12357  0014E4  6EF6               	movwf	tblptrl,c
 12358  0014E6  0EFB               	movlw	high _dpowers
 12359  0014E8  20F4               	addwfc	prodh,w,c
 12360  0014EA  6EF7               	movwf	tblptrh,c
 12361  0014EC                     	if	1	;There are 3 active tblptr bytes
 12362  0014EC  6AF8               	clrf	tblptru,c
 12363  0014EE  0E00               	movlw	low (__mediumconst shr (0+16))
 12364  0014F0  22F8               	addwfc	tblptru,f,c
 12365  0014F2                     	endif
 12366  0014F2  0009               	tblrd		*+
 12367  0014F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
 12368  0014F8  000A               	tblrd		*-
 12369  0014FA  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 12370  0014FE  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 12371  001502  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 12372  001506  ECE4  F019         	call	___lwdiv	;wreg free
 12373  00150A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 12374  00150E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 12375  001512  0E00               	movlw	0
 12376  001514  0100               	movlb	0	; () banked
 12377  001516  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 12378  001518  0E0A               	movlw	10
 12379  00151A  6F89               	movwf	___lwmod@divisor& (0+255),b
 12380  00151C  ECFD  F01A         	call	___lwmod	;wreg free
 12381  001520  0100               	movlb	0	; () banked
 12382  001522  5187               	movf	?___lwmod& (0+255),w,b
 12383  001524  0F30               	addlw	48
 12384  001526  0100               	movlb	0	; () banked
 12385  001528  6FA8               	movwf	printf@c& (0+255),b
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;doprnt.c: 1523: }
 12389                           ;doprnt.c: 1524: (putch(c) );
 12390  00152A  0100               	movlb	0	; () banked
 12391  00152C  51A8               	movf	printf@c& (0+255),w,b
 12392  00152E  EC7B  F01F         	call	_putch
 12393  001532                     l5069:
 12394  001532  0100               	movlb	0	; () banked
 12395  001534  079E               	decf	printf@prec& (0+255),f,b
 12396  001536  0100               	movlb	0	; () banked
 12397  001538  299E               	incf	printf@prec& (0+255),w,b
 12398  00153A  A4D8               	btfss	status,2,c
 12399  00153C  D7CE               	goto	l5065
 12400  00153E                     l5071:
 12401  00153E  C08E  FFF6         	movff	printf@f,tblptrl
 12402  001542  C08F  FFF7         	movff	printf@f+1,tblptrh
 12403  001546  0100               	movlb	0	; () banked
 12404  001548  4B8E               	infsnz	printf@f& (0+255),f,b
 12405  00154A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12406  00154C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12407  00154C  6AF8               	clrf	tblptru,c
 12408  00154E                     	endif
 12409  00154E                     	if	0	;tblptru may be non-zero
 12410  00154E                     	endif
 12411  00154E  0008               	tblrd		*
 12412  001550  CFF5 F0A8          	movff	tablat,printf@c
 12413  001554  0100               	movlb	0	; () banked
 12414  001556  51A8               	movf	printf@c& (0+255),w,b
 12415  001558  B4D8               	btfsc	status,2,c
 12416  00155A  0012               	return	
 12417  00155C  D5EB               	goto	l4941
 12418  00155E                     __end_of_printf:
 12419                           	opt stack 0
 12420                           tblptru	equ	0xFF8
 12421                           tblptrh	equ	0xFF7
 12422                           tblptrl	equ	0xFF6
 12423                           tablat	equ	0xFF5
 12424                           prodh	equ	0xFF4
 12425                           prodl	equ	0xFF3
 12426                           intcon	equ	0xFF2
 12427                           intcon2	equ	0xFF1
 12428                           intcon3	equ	0xFF0
 12429                           indf0	equ	0xFEF
 12430                           postinc0	equ	0xFEE
 12431                           fsr0h	equ	0xFEA
 12432                           fsr0l	equ	0xFE9
 12433                           wreg	equ	0xFE8
 12434                           postdec1	equ	0xFE5
 12435                           fsr1l	equ	0xFE1
 12436                           indf2	equ	0xFDF
 12437                           postinc2	equ	0xFDE
 12438                           postdec2	equ	0xFDD
 12439                           fsr2h	equ	0xFDA
 12440                           fsr2l	equ	0xFD9
 12441                           status	equ	0xFD8
 12442                           
 12443 ;; *************** function _putch *****************
 12444 ;; Defined at:
 12445 ;;		line 20 in file "lcd.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;  data            1    wreg     unsigned char 
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  data            1    2[BANK0 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12462 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12463 ;;Total ram usage:        1 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    8
 12466 ;; This function calls:
 12467 ;;		_lcdNibble
 12468 ;; This function is called by:
 12469 ;;		_printf
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           	psect	text43
 12474  003EF6                     __ptext43:
 12475                           	opt stack 0
 12476  003EF6                     _putch:
 12477                           	opt stack 18
 12478                           
 12479                           ;incstack = 0
 12480                           ;putch@data stored from wreg
 12481  003EF6  0100               	movlb	0	; () banked
 12482  003EF8  6F82               	movwf	putch@data& (0+255),b
 12483                           
 12484                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 12485  003EFA  848C               	bsf	3980,2,c	;volatile
 12486                           
 12487                           ;lcd.c: 22: lcdNibble(data);
 12488  003EFC  0100               	movlb	0	; () banked
 12489  003EFE  5182               	movf	putch@data& (0+255),w,b
 12490  003F00  ECC9  F01A         	call	_lcdNibble
 12491  003F04  0012               	return		;funcret
 12492  003F06                     __end_of_putch:
 12493                           	opt stack 0
 12494                           tblptru	equ	0xFF8
 12495                           tblptrh	equ	0xFF7
 12496                           tblptrl	equ	0xFF6
 12497                           tablat	equ	0xFF5
 12498                           prodh	equ	0xFF4
 12499                           prodl	equ	0xFF3
 12500                           intcon	equ	0xFF2
 12501                           intcon2	equ	0xFF1
 12502                           intcon3	equ	0xFF0
 12503                           indf0	equ	0xFEF
 12504                           postinc0	equ	0xFEE
 12505                           fsr0h	equ	0xFEA
 12506                           fsr0l	equ	0xFE9
 12507                           wreg	equ	0xFE8
 12508                           postdec1	equ	0xFE5
 12509                           fsr1l	equ	0xFE1
 12510                           indf2	equ	0xFDF
 12511                           postinc2	equ	0xFDE
 12512                           postdec2	equ	0xFDD
 12513                           fsr2h	equ	0xFDA
 12514                           fsr2l	equ	0xFD9
 12515                           status	equ	0xFD8
 12516                           
 12517 ;; *************** function _isdigit *****************
 12518 ;; Defined at:
 12519 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;  c               1    wreg     unsigned char 
 12522 ;; Auto vars:     Size  Location     Type
 12523 ;;  c               1    2[BANK0 ] unsigned char 
 12524 ;; Return value:  Size  Location     Type
 12525 ;;		None               void
 12526 ;; Registers used:
 12527 ;;		wreg, status,2, status,0
 12528 ;; Tracked objects:
 12529 ;;		On entry : 0/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12536 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;Total ram usage:        3 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    7
 12540 ;; This function calls:
 12541 ;;		Nothing
 12542 ;; This function is called by:
 12543 ;;		_printf
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text44
 12548  003D44                     __ptext44:
 12549                           	opt stack 0
 12550  003D44                     _isdigit:
 12551                           	opt stack 19
 12552                           
 12553                           ;incstack = 0
 12554                           ;isdigit@c stored from wreg
 12555  003D44  0100               	movlb	0	; () banked
 12556  003D46  6F82               	movwf	isdigit@c& (0+255),b
 12557  003D48  0E00               	movlw	0
 12558  003D4A  0100               	movlb	0	; () banked
 12559  003D4C  6F81               	movwf	_isdigit$1788& (0+255),b
 12560                           
 12561                           ; BSR set to: 0
 12562  003D4E  0E3A               	movlw	58
 12563  003D50  0100               	movlb	0	; () banked
 12564  003D52  6182               	cpfslt	isdigit@c& (0+255),b
 12565  003D54  D007               	goto	l4795
 12566                           
 12567                           ; BSR set to: 0
 12568  003D56  0E2F               	movlw	47
 12569  003D58  0100               	movlb	0	; () banked
 12570  003D5A  6582               	cpfsgt	isdigit@c& (0+255),b
 12571  003D5C  D003               	goto	l4795
 12572                           
 12573                           ; BSR set to: 0
 12574  003D5E  0E01               	movlw	1
 12575  003D60  0100               	movlb	0	; () banked
 12576  003D62  6F81               	movwf	_isdigit$1788& (0+255),b
 12577  003D64                     l4795:
 12578                           
 12579                           ; BSR set to: 0
 12580  003D64  C081  F080         	movff	_isdigit$1788,??_isdigit
 12581  003D68  0100               	movlb	0	; () banked
 12582  003D6A  3180               	rrcf	??_isdigit& (0+255),w,b
 12583  003D6C  0012               	return	
 12584  003D6E                     __end_of_isdigit:
 12585                           	opt stack 0
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           intcon3	equ	0xFF0
 12595                           indf0	equ	0xFEF
 12596                           postinc0	equ	0xFEE
 12597                           fsr0h	equ	0xFEA
 12598                           fsr0l	equ	0xFE9
 12599                           wreg	equ	0xFE8
 12600                           postdec1	equ	0xFE5
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           fsr2h	equ	0xFDA
 12606                           fsr2l	equ	0xFD9
 12607                           status	equ	0xFD8
 12608                           
 12609 ;; *************** function ___wmul *****************
 12610 ;; Defined at:
 12611 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12614 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  product         2    4[BANK0 ] unsigned int 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  2    0[BANK0 ] unsigned int 
 12619 ;; Registers used:
 12620 ;;		wreg, status,2, status,0, prodl, prodh
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12629 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;Total ram usage:        6 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    7
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		_printf
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           	psect	text45
 12641  003A78                     __ptext45:
 12642                           	opt stack 0
 12643  003A78                     ___wmul:
 12644                           	opt stack 19
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;incstack = 0
 12648  003A78  0100               	movlb	0	; () banked
 12649  003A7A  5180               	movf	___wmul@multiplier& (0+255),w,b
 12650  003A7C  0100               	movlb	0	; () banked
 12651  003A7E  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12652  003A80  CFF3 F084          	movff	prodl,___wmul@product
 12653  003A84  CFF4 F085          	movff	prodh,___wmul@product+1
 12654  003A88  0100               	movlb	0	; () banked
 12655  003A8A  5180               	movf	___wmul@multiplier& (0+255),w,b
 12656  003A8C  0100               	movlb	0	; () banked
 12657  003A8E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12658  003A90  50F3               	movf	prodl,w,c
 12659  003A92  0100               	movlb	0	; () banked
 12660  003A94  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12661  003A96  0100               	movlb	0	; () banked
 12662  003A98  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12663  003A9A  0100               	movlb	0	; () banked
 12664  003A9C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12665  003A9E  50F3               	movf	prodl,w,c
 12666  003AA0  0100               	movlb	0	; () banked
 12667  003AA2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12668                           
 12669                           ; BSR set to: 0
 12670  003AA4  C084  F080         	movff	___wmul@product,?___wmul
 12671  003AA8  C085  F081         	movff	___wmul@product+1,?___wmul+1
 12672  003AAC  0012               	return	
 12673  003AAE                     __end_of___wmul:
 12674                           	opt stack 0
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           intcon	equ	0xFF2
 12682                           intcon2	equ	0xFF1
 12683                           intcon3	equ	0xFF0
 12684                           indf0	equ	0xFEF
 12685                           postinc0	equ	0xFEE
 12686                           fsr0h	equ	0xFEA
 12687                           fsr0l	equ	0xFE9
 12688                           wreg	equ	0xFE8
 12689                           postdec1	equ	0xFE5
 12690                           fsr1l	equ	0xFE1
 12691                           indf2	equ	0xFDF
 12692                           postinc2	equ	0xFDE
 12693                           postdec2	equ	0xFDD
 12694                           fsr2h	equ	0xFDA
 12695                           fsr2l	equ	0xFD9
 12696                           status	equ	0xFD8
 12697                           
 12698 ;; *************** function ___lwmod *****************
 12699 ;; Defined at:
 12700 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  dividend        2    7[BANK0 ] unsigned int 
 12703 ;;  divisor         2    9[BANK0 ] unsigned int 
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;  counter         1   11[BANK0 ] unsigned char 
 12706 ;; Return value:  Size  Location     Type
 12707 ;;                  2    7[BANK0 ] unsigned int 
 12708 ;; Registers used:
 12709 ;;		wreg, status,2, status,0
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12718 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12719 ;;Total ram usage:        5 bytes
 12720 ;; Hardware stack levels used:    1
 12721 ;; Hardware stack levels required when called:    7
 12722 ;; This function calls:
 12723 ;;		Nothing
 12724 ;; This function is called by:
 12725 ;;		_printf
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           	psect	text46
 12730  0035FA                     __ptext46:
 12731                           	opt stack 0
 12732  0035FA                     ___lwmod:
 12733                           	opt stack 19
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;incstack = 0
 12737  0035FA  0100               	movlb	0	; () banked
 12738  0035FC  5189               	movf	___lwmod@divisor& (0+255),w,b
 12739  0035FE  0100               	movlb	0	; () banked
 12740  003600  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12741  003602  B4D8               	btfsc	status,2,c
 12742  003604  D026               	goto	l1576
 12743                           
 12744                           ; BSR set to: 0
 12745  003606  0E01               	movlw	1
 12746  003608  0100               	movlb	0	; () banked
 12747  00360A  6F8B               	movwf	___lwmod@counter& (0+255),b
 12748  00360C  D006               	goto	l4833
 12749  00360E                     l4831:
 12750                           
 12751                           ; BSR set to: 0
 12752  00360E  0100               	movlb	0	; () banked
 12753  003610  90D8               	bcf	status,0,c
 12754  003612  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 12755  003614  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12756  003616  0100               	movlb	0	; () banked
 12757  003618  2B8B               	incf	___lwmod@counter& (0+255),f,b
 12758  00361A                     l4833:
 12759                           
 12760                           ; BSR set to: 0
 12761  00361A  0100               	movlb	0	; () banked
 12762  00361C  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12763  00361E  D7F7               	goto	l4831
 12764  003620                     l4835:
 12765                           
 12766                           ; BSR set to: 0
 12767  003620  0100               	movlb	0	; () banked
 12768  003622  5189               	movf	___lwmod@divisor& (0+255),w,b
 12769  003624  0100               	movlb	0	; () banked
 12770  003626  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 12771  003628  0100               	movlb	0	; () banked
 12772  00362A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12773  00362C  0100               	movlb	0	; () banked
 12774  00362E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12775  003630  A0D8               	btfss	status,0,c
 12776  003632  D008               	goto	l4839
 12777                           
 12778                           ; BSR set to: 0
 12779  003634  0100               	movlb	0	; () banked
 12780  003636  5189               	movf	___lwmod@divisor& (0+255),w,b
 12781  003638  0100               	movlb	0	; () banked
 12782  00363A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 12783  00363C  0100               	movlb	0	; () banked
 12784  00363E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12785  003640  0100               	movlb	0	; () banked
 12786  003642  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12787  003644                     l4839:
 12788                           
 12789                           ; BSR set to: 0
 12790  003644  0100               	movlb	0	; () banked
 12791  003646  90D8               	bcf	status,0,c
 12792  003648  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12793  00364A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 12794                           
 12795                           ; BSR set to: 0
 12796  00364C  0100               	movlb	0	; () banked
 12797  00364E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 12798  003650  D7E7               	goto	l4835
 12799  003652                     l1576:
 12800                           
 12801                           ; BSR set to: 0
 12802  003652  C087  F087         	movff	___lwmod@dividend,?___lwmod
 12803  003656  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 12804                           
 12805                           ; BSR set to: 0
 12806  00365A  0012               	return		;funcret
 12807  00365C                     __end_of___lwmod:
 12808                           	opt stack 0
 12809                           tblptru	equ	0xFF8
 12810                           tblptrh	equ	0xFF7
 12811                           tblptrl	equ	0xFF6
 12812                           tablat	equ	0xFF5
 12813                           prodh	equ	0xFF4
 12814                           prodl	equ	0xFF3
 12815                           intcon	equ	0xFF2
 12816                           intcon2	equ	0xFF1
 12817                           intcon3	equ	0xFF0
 12818                           indf0	equ	0xFEF
 12819                           postinc0	equ	0xFEE
 12820                           fsr0h	equ	0xFEA
 12821                           fsr0l	equ	0xFE9
 12822                           wreg	equ	0xFE8
 12823                           postdec1	equ	0xFE5
 12824                           fsr1l	equ	0xFE1
 12825                           indf2	equ	0xFDF
 12826                           postinc2	equ	0xFDE
 12827                           postdec2	equ	0xFDD
 12828                           fsr2h	equ	0xFDA
 12829                           fsr2l	equ	0xFD9
 12830                           status	equ	0xFD8
 12831                           
 12832 ;; *************** function ___lwdiv *****************
 12833 ;; Defined at:
 12834 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12835 ;; Parameters:    Size  Location     Type
 12836 ;;  dividend        2    0[BANK0 ] unsigned int 
 12837 ;;  divisor         2    2[BANK0 ] unsigned int 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  quotient        2    4[BANK0 ] unsigned int 
 12840 ;;  counter         1    6[BANK0 ] unsigned char 
 12841 ;; Return value:  Size  Location     Type
 12842 ;;                  2    0[BANK0 ] unsigned int 
 12843 ;; Registers used:
 12844 ;;		wreg, status,2, status,0
 12845 ;; Tracked objects:
 12846 ;;		On entry : 0/0
 12847 ;;		On exit  : 0/0
 12848 ;;		Unchanged: 0/0
 12849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;Total ram usage:        7 bytes
 12855 ;; Hardware stack levels used:    1
 12856 ;; Hardware stack levels required when called:    7
 12857 ;; This function calls:
 12858 ;;		Nothing
 12859 ;; This function is called by:
 12860 ;;		_printf
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text47
 12865  0033C8                     __ptext47:
 12866                           	opt stack 0
 12867  0033C8                     ___lwdiv:
 12868                           	opt stack 19
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;incstack = 0
 12872  0033C8  0E00               	movlw	0
 12873  0033CA  0100               	movlb	0	; () banked
 12874  0033CC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12875  0033CE  0E00               	movlw	0
 12876  0033D0  6F84               	movwf	___lwdiv@quotient& (0+255),b
 12877                           
 12878                           ; BSR set to: 0
 12879  0033D2  0100               	movlb	0	; () banked
 12880  0033D4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12881  0033D6  0100               	movlb	0	; () banked
 12882  0033D8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12883  0033DA  B4D8               	btfsc	status,2,c
 12884  0033DC  D02C               	goto	l1566
 12885                           
 12886                           ; BSR set to: 0
 12887  0033DE  0E01               	movlw	1
 12888  0033E0  0100               	movlb	0	; () banked
 12889  0033E2  6F86               	movwf	___lwdiv@counter& (0+255),b
 12890  0033E4  D006               	goto	l4813
 12891  0033E6                     l4811:
 12892                           
 12893                           ; BSR set to: 0
 12894  0033E6  0100               	movlb	0	; () banked
 12895  0033E8  90D8               	bcf	status,0,c
 12896  0033EA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 12897  0033EC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12898  0033EE  0100               	movlb	0	; () banked
 12899  0033F0  2B86               	incf	___lwdiv@counter& (0+255),f,b
 12900  0033F2                     l4813:
 12901                           
 12902                           ; BSR set to: 0
 12903  0033F2  0100               	movlb	0	; () banked
 12904  0033F4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12905  0033F6  D7F7               	goto	l4811
 12906  0033F8                     l4815:
 12907                           
 12908                           ; BSR set to: 0
 12909  0033F8  0100               	movlb	0	; () banked
 12910  0033FA  90D8               	bcf	status,0,c
 12911  0033FC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 12912  0033FE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12913                           
 12914                           ; BSR set to: 0
 12915  003400  0100               	movlb	0	; () banked
 12916  003402  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12917  003404  0100               	movlb	0	; () banked
 12918  003406  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 12919  003408  0100               	movlb	0	; () banked
 12920  00340A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12921  00340C  0100               	movlb	0	; () banked
 12922  00340E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12923  003410  A0D8               	btfss	status,0,c
 12924  003412  D00A               	goto	l4823
 12925                           
 12926                           ; BSR set to: 0
 12927  003414  0100               	movlb	0	; () banked
 12928  003416  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12929  003418  0100               	movlb	0	; () banked
 12930  00341A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 12931  00341C  0100               	movlb	0	; () banked
 12932  00341E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12933  003420  0100               	movlb	0	; () banked
 12934  003422  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12935                           
 12936                           ; BSR set to: 0
 12937  003424  0100               	movlb	0	; () banked
 12938  003426  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 12939  003428                     l4823:
 12940                           
 12941                           ; BSR set to: 0
 12942  003428  0100               	movlb	0	; () banked
 12943  00342A  90D8               	bcf	status,0,c
 12944  00342C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12945  00342E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 12946                           
 12947                           ; BSR set to: 0
 12948  003430  0100               	movlb	0	; () banked
 12949  003432  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 12950  003434  D7E1               	goto	l4815
 12951  003436                     l1566:
 12952                           
 12953                           ; BSR set to: 0
 12954  003436  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 12955  00343A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12956                           
 12957                           ; BSR set to: 0
 12958  00343E  0012               	return		;funcret
 12959  003440                     __end_of___lwdiv:
 12960                           	opt stack 0
 12961                           tblptru	equ	0xFF8
 12962                           tblptrh	equ	0xFF7
 12963                           tblptrl	equ	0xFF6
 12964                           tablat	equ	0xFF5
 12965                           prodh	equ	0xFF4
 12966                           prodl	equ	0xFF3
 12967                           intcon	equ	0xFF2
 12968                           intcon2	equ	0xFF1
 12969                           intcon3	equ	0xFF0
 12970                           indf0	equ	0xFEF
 12971                           postinc0	equ	0xFEE
 12972                           fsr0h	equ	0xFEA
 12973                           fsr0l	equ	0xFE9
 12974                           wreg	equ	0xFE8
 12975                           postdec1	equ	0xFE5
 12976                           fsr1l	equ	0xFE1
 12977                           indf2	equ	0xFDF
 12978                           postinc2	equ	0xFDE
 12979                           postdec2	equ	0xFDD
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function _lcdInst *****************
 12985 ;; Defined at:
 12986 ;;		line 15 in file "lcd.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  data            1    wreg     unsigned char 
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  data            1    2[BANK0 ] unsigned char 
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg, status,2, status,0, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;Total ram usage:        1 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    8
 13007 ;; This function calls:
 13008 ;;		_lcdNibble
 13009 ;; This function is called by:
 13010 ;;		_UI
 13011 ;;		_change_state_to_menu_start
 13012 ;;		_change_state_to_menu_12
 13013 ;;		_change_state_to_menu_22
 13014 ;;		_initLCD
 13015 ;;		_printRTC
 13016 ;;		_Loading
 13017 ;;		_EEPROM_write
 13018 ;;		_Test
 13019 ;;		_algorithmTest
 13020 ;;		_sensorTest
 13021 ;;		_actuatorTest
 13022 ;; This function uses a non-reentrant model
 13023 ;;
 13024                           
 13025                           	psect	text48
 13026  003F06                     __ptext48:
 13027                           	opt stack 0
 13028  003F06                     _lcdInst:
 13029                           	opt stack 20
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;incstack = 0
 13033                           ;lcdInst@data stored from wreg
 13034  003F06  0100               	movlb	0	; () banked
 13035  003F08  6F82               	movwf	lcdInst@data& (0+255),b
 13036                           
 13037                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13038  003F0A  948C               	bcf	3980,2,c	;volatile
 13039                           
 13040                           ;lcd.c: 17: lcdNibble(data);
 13041  003F0C  0100               	movlb	0	; () banked
 13042  003F0E  5182               	movf	lcdInst@data& (0+255),w,b
 13043  003F10  ECC9  F01A         	call	_lcdNibble
 13044  003F14  0012               	return		;funcret
 13045  003F16                     __end_of_lcdInst:
 13046                           	opt stack 0
 13047                           tblptru	equ	0xFF8
 13048                           tblptrh	equ	0xFF7
 13049                           tblptrl	equ	0xFF6
 13050                           tablat	equ	0xFF5
 13051                           prodh	equ	0xFF4
 13052                           prodl	equ	0xFF3
 13053                           intcon	equ	0xFF2
 13054                           intcon2	equ	0xFF1
 13055                           intcon3	equ	0xFF0
 13056                           indf0	equ	0xFEF
 13057                           postinc0	equ	0xFEE
 13058                           fsr0h	equ	0xFEA
 13059                           fsr0l	equ	0xFE9
 13060                           wreg	equ	0xFE8
 13061                           postdec1	equ	0xFE5
 13062                           fsr1l	equ	0xFE1
 13063                           indf2	equ	0xFDF
 13064                           postinc2	equ	0xFDE
 13065                           postdec2	equ	0xFDD
 13066                           fsr2h	equ	0xFDA
 13067                           fsr2l	equ	0xFD9
 13068                           status	equ	0xFD8
 13069                           
 13070 ;; *************** function _lcdNibble *****************
 13071 ;; Defined at:
 13072 ;;		line 25 in file "lcd.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;  data            1    wreg     unsigned char 
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;  data            1    1[BANK0 ] unsigned char 
 13077 ;;  temp            1    0[BANK0 ] unsigned char 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		wreg, status,2, status,0
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13091 ;;Total ram usage:        2 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    7
 13094 ;; This function calls:
 13095 ;;		Nothing
 13096 ;; This function is called by:
 13097 ;;		_lcdInst
 13098 ;;		_putch
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           	psect	text49
 13103  003592                     __ptext49:
 13104                           	opt stack 0
 13105  003592                     _lcdNibble:
 13106                           	opt stack 20
 13107                           
 13108                           ;incstack = 0
 13109                           ;lcdNibble@data stored from wreg
 13110  003592  0100               	movlb	0	; () banked
 13111  003594  6F81               	movwf	lcdNibble@data& (0+255),b
 13112                           
 13113                           ;lcd.c: 27: char temp = data & 0xF0;
 13114  003596  0100               	movlb	0	; () banked
 13115  003598  5181               	movf	lcdNibble@data& (0+255),w,b
 13116  00359A  0BF0               	andlw	240
 13117  00359C  0100               	movlb	0	; () banked
 13118  00359E  6F80               	movwf	lcdNibble@temp& (0+255),b
 13119                           
 13120                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13121  0035A0  508C               	movf	3980,w,c	;volatile
 13122  0035A2  0B0F               	andlw	15
 13123  0035A4  6E8C               	movwf	3980,c	;volatile
 13124                           
 13125                           ;lcd.c: 29: LATD = temp | LATD;
 13126  0035A6  0100               	movlb	0	; () banked
 13127  0035A8  5180               	movf	lcdNibble@temp& (0+255),w,b
 13128  0035AA  108C               	iorwf	3980,w,c	;volatile
 13129  0035AC  6E8C               	movwf	3980,c	;volatile
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13133  0035AE  868C               	bsf	3980,3,c	;volatile
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13137  0035B0  0E42               	movlw	66
 13138  0035B2                     u7237:
 13139  0035B2  2EE8               	decfsz	wreg,f,c
 13140  0035B4  D7FE               	bra	u7237
 13141  0035B6  D000               	nop2	
 13142                           
 13143                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13144  0035B8  968C               	bcf	3980,3,c	;volatile
 13145                           
 13146                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13147  0035BA  0E42               	movlw	66
 13148  0035BC                     u7247:
 13149  0035BC  2EE8               	decfsz	wreg,f,c
 13150  0035BE  D7FE               	bra	u7247
 13151  0035C0  D000               	nop2	
 13152                           
 13153                           ;lcd.c: 36: data = data << 4;
 13154  0035C2  0100               	movlb	0	; () banked
 13155  0035C4  3981               	swapf	lcdNibble@data& (0+255),w,b
 13156  0035C6  0BF0               	andlw	240
 13157  0035C8  0100               	movlb	0	; () banked
 13158  0035CA  6F81               	movwf	lcdNibble@data& (0+255),b
 13159                           
 13160                           ;lcd.c: 38: temp = data & 0xF0;
 13161  0035CC  0100               	movlb	0	; () banked
 13162  0035CE  5181               	movf	lcdNibble@data& (0+255),w,b
 13163  0035D0  0BF0               	andlw	240
 13164  0035D2  0100               	movlb	0	; () banked
 13165  0035D4  6F80               	movwf	lcdNibble@temp& (0+255),b
 13166                           
 13167                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13168  0035D6  508C               	movf	3980,w,c	;volatile
 13169  0035D8  0B0F               	andlw	15
 13170  0035DA  6E8C               	movwf	3980,c	;volatile
 13171                           
 13172                           ;lcd.c: 40: LATD = temp | LATD;
 13173  0035DC  0100               	movlb	0	; () banked
 13174  0035DE  5180               	movf	lcdNibble@temp& (0+255),w,b
 13175  0035E0  108C               	iorwf	3980,w,c	;volatile
 13176  0035E2  6E8C               	movwf	3980,c	;volatile
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13180  0035E4  868C               	bsf	3980,3,c	;volatile
 13181                           
 13182                           ; BSR set to: 0
 13183                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13184  0035E6  0E42               	movlw	66
 13185  0035E8                     u7257:
 13186  0035E8  2EE8               	decfsz	wreg,f,c
 13187  0035EA  D7FE               	bra	u7257
 13188  0035EC  D000               	nop2	
 13189                           
 13190                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13191  0035EE  968C               	bcf	3980,3,c	;volatile
 13192                           
 13193                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13194  0035F0  0E42               	movlw	66
 13195  0035F2                     u7267:
 13196  0035F2  2EE8               	decfsz	wreg,f,c
 13197  0035F4  D7FE               	bra	u7267
 13198  0035F6  D000               	nop2	
 13199  0035F8  0012               	return		;funcret
 13200  0035FA                     __end_of_lcdNibble:
 13201                           	opt stack 0
 13202                           tblptru	equ	0xFF8
 13203                           tblptrh	equ	0xFF7
 13204                           tblptrl	equ	0xFF6
 13205                           tablat	equ	0xFF5
 13206                           prodh	equ	0xFF4
 13207                           prodl	equ	0xFF3
 13208                           intcon	equ	0xFF2
 13209                           intcon2	equ	0xFF1
 13210                           intcon3	equ	0xFF0
 13211                           indf0	equ	0xFEF
 13212                           postinc0	equ	0xFEE
 13213                           fsr0h	equ	0xFEA
 13214                           fsr0l	equ	0xFE9
 13215                           wreg	equ	0xFE8
 13216                           postdec1	equ	0xFE5
 13217                           fsr1l	equ	0xFE1
 13218                           indf2	equ	0xFDF
 13219                           postinc2	equ	0xFDE
 13220                           postdec2	equ	0xFDD
 13221                           fsr2h	equ	0xFDA
 13222                           fsr2l	equ	0xFD9
 13223                           status	equ	0xFD8
 13224                           
 13225 ;; *************** function _handler *****************
 13226 ;; Defined at:
 13227 ;;		line 16 in file "interruptHandler.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;		None
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;		None
 13232 ;; Return value:  Size  Location     Type
 13233 ;;                  1    wreg      void 
 13234 ;; Registers used:
 13235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;Total ram usage:       16 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    6
 13248 ;; This function calls:
 13249 ;;		_printSortTimer
 13250 ;;		_updateMenu
 13251 ;; This function is called by:
 13252 ;;		Interrupt level 2
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           	psect	intcode
 13257  000008                     __pintcode:
 13258                           	opt stack 0
 13259  000008                     _handler:
 13260                           	opt stack 18
 13261                           
 13262                           ;incstack = 0
 13263  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13264  00000A  EDF8  F012         	call	int_func,f	;refresh shadow registers
 13265                           tblptru	equ	0xFF8
 13266                           tblptrh	equ	0xFF7
 13267                           tblptrl	equ	0xFF6
 13268                           tablat	equ	0xFF5
 13269                           prodh	equ	0xFF4
 13270                           prodl	equ	0xFF3
 13271                           intcon	equ	0xFF2
 13272                           intcon2	equ	0xFF1
 13273                           intcon3	equ	0xFF0
 13274                           indf0	equ	0xFEF
 13275                           postinc0	equ	0xFEE
 13276                           fsr0h	equ	0xFEA
 13277                           fsr0l	equ	0xFE9
 13278                           wreg	equ	0xFE8
 13279                           postdec1	equ	0xFE5
 13280                           fsr1l	equ	0xFE1
 13281                           indf2	equ	0xFDF
 13282                           postinc2	equ	0xFDE
 13283                           postdec2	equ	0xFDD
 13284                           fsr2h	equ	0xFDA
 13285                           fsr2l	equ	0xFD9
 13286                           status	equ	0xFD8
 13287                           
 13288                           	psect	intcode_body
 13289  0025F0                     __pintcode_body:
 13290                           	opt stack 18
 13291  0025F0                     int_func:
 13292                           	opt stack 18
 13293  0025F0  0006               	pop		; remove dummy address from shadow register refresh
 13294  0025F2  CFFA F04D          	movff	pclath,??_handler+2
 13295  0025F6  CFFB F04E          	movff	pclatu,??_handler+3
 13296  0025FA  CFE9 F04F          	movff	fsr0l,??_handler+4
 13297  0025FE  CFEA F050          	movff	fsr0h,??_handler+5
 13298  002602  CFE1 F051          	movff	fsr1l,??_handler+6
 13299  002606  CFE2 F052          	movff	fsr1h,??_handler+7
 13300  00260A  CFD9 F053          	movff	fsr2l,??_handler+8
 13301  00260E  CFDA F054          	movff	fsr2h,??_handler+9
 13302  002612  CFF3 F055          	movff	prodl,??_handler+10
 13303  002616  CFF4 F056          	movff	prodh,??_handler+11
 13304  00261A  CFF6 F057          	movff	tblptrl,??_handler+12
 13305  00261E  CFF7 F058          	movff	tblptrh,??_handler+13
 13306  002622  CFF8 F059          	movff	tblptru,??_handler+14
 13307  002626  CFF5 F05A          	movff	tablat,??_handler+15
 13308                           
 13309                           ;interruptHandler.c: 18: if(INT1IF){
 13310  00262A  A0F0               	btfss	intcon3,0,c	;volatile
 13311  00262C  D018               	goto	i2l7339
 13312                           
 13313                           ;interruptHandler.c: 19: INT1IF = 0;
 13314  00262E  90F0               	bcf	intcon3,0,c	;volatile
 13315                           
 13316                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 13317  002630  0100               	movlb	0	; () banked
 13318  002632  51FC               	movf	_machine_state& (0+255),w,b
 13319  002634  A4D8               	btfss	status,2,c
 13320  002636  D013               	goto	i2l7339
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 13324  002638  3881               	swapf	3969,w,c	;volatile
 13325  00263A  0B0F               	andlw	15
 13326  00263C  0B0F               	andlw	15
 13327  00263E  6E4B               	movwf	??_handler& (0+255),c
 13328  002640  6A4C               	clrf	(??_handler+1)& (0+255),c
 13329  002642  0EA3               	movlw	low _keys
 13330  002644  244B               	addwf	??_handler,w,c
 13331  002646  6EF6               	movwf	tblptrl,c
 13332  002648  0EFB               	movlw	high _keys
 13333  00264A  204C               	addwfc	??_handler+1,w,c
 13334  00264C  6EF7               	movwf	tblptrh,c
 13335  00264E                     	if	1	;There are 3 active tblptr bytes
 13336  00264E  6AF8               	clrf	tblptru,c
 13337  002650  0E00               	movlw	low (__mediumconst shr (0+16))
 13338  002652  22F8               	addwfc	tblptru,f,c
 13339  002654                     	endif
 13340  002654  0008               	tblrd		*
 13341  002656  CFF5 F07D          	movff	tablat,_input	;volatile
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;interruptHandler.c: 22: updateMenu();
 13345  00265A  ECCB  F00D         	call	_updateMenu	;wreg free
 13346  00265E                     i2l7339:
 13347                           
 13348                           ;interruptHandler.c: 23: }
 13349                           ;interruptHandler.c: 24: }
 13350                           ;interruptHandler.c: 27: if(TMR0IF){
 13351  00265E  A4F2               	btfss	intcon,2,c	;volatile
 13352  002660  D00C               	goto	i2l7353
 13353                           
 13354                           ;interruptHandler.c: 28: TMR0IF = 0;
 13355  002662  94F2               	bcf	intcon,2,c	;volatile
 13356                           
 13357                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 13358  002664  0100               	movlb	0	; () banked
 13359  002666  05FC               	decf	_machine_state& (0+255),w,b
 13360  002668  A4D8               	btfss	status,2,c
 13361  00266A  D007               	goto	i2l7353
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;interruptHandler.c: 30: printSortTimer();
 13365  00266C  EC46  F010         	call	_printSortTimer	;wreg free
 13366                           
 13367                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 13368  002670  0E85               	movlw	133
 13369  002672  6ED7               	movwf	4055,c	;volatile
 13370                           
 13371                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 13372  002674  0EEE               	movlw	238
 13373  002676  6ED6               	movwf	4054,c	;volatile
 13374                           
 13375                           ;interruptHandler.c: 34: TMR0ON = 1;
 13376  002678  8ED5               	bsf	4053,7,c	;volatile
 13377  00267A                     i2l7353:
 13378                           
 13379                           ;interruptHandler.c: 35: }
 13380                           ;interruptHandler.c: 36: }
 13381                           ;interruptHandler.c: 39: if(TMR1IF){
 13382  00267A  A09E               	btfss	3998,0,c	;volatile
 13383  00267C  D024               	goto	i2l7377
 13384                           
 13385                           ;interruptHandler.c: 40: TMR1IF = 0;
 13386  00267E  909E               	bcf	3998,0,c	;volatile
 13387                           
 13388                           ;interruptHandler.c: 41: TMR1ON = 0;
 13389  002680  90CD               	bcf	4045,0,c	;volatile
 13390                           
 13391                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 13392  002682  0100               	movlb	0	; () banked
 13393  002684  05FC               	decf	_machine_state& (0+255),w,b
 13394  002686  A4D8               	btfss	status,2,c
 13395  002688  D01E               	goto	i2l7377
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;interruptHandler.c: 43: if(was_low_1){
 13399  00268A  5079               	movf	_was_low_1,w,c	;volatile
 13400  00268C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 13401  00268E  B4D8               	btfsc	status,2,c
 13402  002690  D00A               	goto	i2l829
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 13406  002692  828B               	bsf	3979,1,c	;volatile
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;interruptHandler.c: 45: was_low_1 = 0;
 13410  002694  0E00               	movlw	0
 13411  002696  6E7A               	movwf	_was_low_1+1,c	;volatile
 13412  002698  0E00               	movlw	0
 13413  00269A  6E79               	movwf	_was_low_1,c	;volatile
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 13417  00269C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 13418                           
 13419                           ; BSR set to: 0
 13420                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 13421  0026A0  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 13422                           
 13423                           ;interruptHandler.c: 48: }
 13424  0026A4  D00F               	goto	i2l7375
 13425  0026A6                     i2l829:
 13426                           
 13427                           ; BSR set to: 0
 13428                           ;interruptHandler.c: 49: else{
 13429                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 13430  0026A6  928B               	bcf	3979,1,c	;volatile
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;interruptHandler.c: 51: was_low_1 = 1;
 13434  0026A8  0E00               	movlw	0
 13435  0026AA  6E7A               	movwf	_was_low_1+1,c	;volatile
 13436  0026AC  0E01               	movlw	1
 13437  0026AE  6E79               	movwf	_was_low_1,c	;volatile
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 13441  0026B0  0101               	movlb	1	; () banked
 13442  0026B2  511C               	movf	_servoTimes& (0+255),w,b
 13443  0026B4  0800               	sublw	0
 13444  0026B6  0F20               	addlw	32
 13445  0026B8  6ECF               	movwf	4047,c	;volatile
 13446                           
 13447                           ; BSR set to: 1
 13448                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 13449  0026BA  0101               	movlb	1	; () banked
 13450  0026BC  511E               	movf	(_servoTimes+2)& (0+255),w,b
 13451  0026BE  0800               	sublw	0
 13452  0026C0  0F20               	addlw	32
 13453  0026C2  6ECE               	movwf	4046,c	;volatile
 13454  0026C4                     i2l7375:
 13455                           
 13456                           ;interruptHandler.c: 54: }
 13457                           ;interruptHandler.c: 55: TMR1ON = 1;
 13458  0026C4  80CD               	bsf	4045,0,c	;volatile
 13459  0026C6                     i2l7377:
 13460                           
 13461                           ;interruptHandler.c: 56: }
 13462                           ;interruptHandler.c: 57: }
 13463                           ;interruptHandler.c: 59: if(TMR3IF){
 13464  0026C6  A2A1               	btfss	4001,1,c	;volatile
 13465  0026C8  D024               	goto	i2l835
 13466                           
 13467                           ;interruptHandler.c: 60: TMR3IF = 0;
 13468  0026CA  92A1               	bcf	4001,1,c	;volatile
 13469                           
 13470                           ;interruptHandler.c: 61: TMR3ON = 0;
 13471  0026CC  90B1               	bcf	4017,0,c	;volatile
 13472                           
 13473                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 13474  0026CE  0100               	movlb	0	; () banked
 13475  0026D0  05FC               	decf	_machine_state& (0+255),w,b
 13476  0026D2  A4D8               	btfss	status,2,c
 13477  0026D4  D01E               	goto	i2l835
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;interruptHandler.c: 63: if(was_low_3){
 13481  0026D6  507B               	movf	_was_low_3,w,c	;volatile
 13482  0026D8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 13483  0026DA  B4D8               	btfsc	status,2,c
 13484  0026DC  D00A               	goto	i2l833
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 13488  0026DE  848B               	bsf	3979,2,c	;volatile
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;interruptHandler.c: 65: was_low_3 = 0;
 13492  0026E0  0E00               	movlw	0
 13493  0026E2  6E7C               	movwf	_was_low_3+1,c	;volatile
 13494  0026E4  0E00               	movlw	0
 13495  0026E6  6E7B               	movwf	_was_low_3,c	;volatile
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 13499  0026E8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 13503  0026EC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 13504                           
 13505                           ;interruptHandler.c: 68: }
 13506  0026F0  D00F               	goto	i2l7399
 13507  0026F2                     i2l833:
 13508                           
 13509                           ; BSR set to: 0
 13510                           ;interruptHandler.c: 69: else{
 13511                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 13512  0026F2  948B               	bcf	3979,2,c	;volatile
 13513                           
 13514                           ; BSR set to: 0
 13515                           ;interruptHandler.c: 71: was_low_3 = 1;
 13516  0026F4  0E00               	movlw	0
 13517  0026F6  6E7C               	movwf	_was_low_3+1,c	;volatile
 13518  0026F8  0E01               	movlw	1
 13519  0026FA  6E7B               	movwf	_was_low_3,c	;volatile
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 13523  0026FC  0101               	movlb	1	; () banked
 13524  0026FE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 13525  002700  0800               	sublw	0
 13526  002702  0F20               	addlw	32
 13527  002704  6EB3               	movwf	4019,c	;volatile
 13528                           
 13529                           ; BSR set to: 1
 13530                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 13531  002706  0101               	movlb	1	; () banked
 13532  002708  5122               	movf	(_servoTimes+6)& (0+255),w,b
 13533  00270A  0800               	sublw	0
 13534  00270C  0F20               	addlw	32
 13535  00270E  6EB2               	movwf	4018,c	;volatile
 13536  002710                     i2l7399:
 13537                           
 13538                           ;interruptHandler.c: 74: }
 13539                           ;interruptHandler.c: 75: TMR3ON = 1;
 13540  002710  80B1               	bsf	4017,0,c	;volatile
 13541  002712                     i2l835:
 13542  002712  C05A  FFF5         	movff	??_handler+15,tablat
 13543  002716  C059  FFF8         	movff	??_handler+14,tblptru
 13544  00271A  C058  FFF7         	movff	??_handler+13,tblptrh
 13545  00271E  C057  FFF6         	movff	??_handler+12,tblptrl
 13546  002722  C056  FFF4         	movff	??_handler+11,prodh
 13547  002726  C055  FFF3         	movff	??_handler+10,prodl
 13548  00272A  C054  FFDA         	movff	??_handler+9,fsr2h
 13549  00272E  C053  FFD9         	movff	??_handler+8,fsr2l
 13550  002732  C052  FFE2         	movff	??_handler+7,fsr1h
 13551  002736  C051  FFE1         	movff	??_handler+6,fsr1l
 13552  00273A  C050  FFEA         	movff	??_handler+5,fsr0h
 13553  00273E  C04F  FFE9         	movff	??_handler+4,fsr0l
 13554  002742  C04E  FFFB         	movff	??_handler+3,pclatu
 13555  002746  C04D  FFFA         	movff	??_handler+2,pclath
 13556  00274A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13557  00274C  0011               	retfie		f
 13558  00274E                     __end_of_handler:
 13559                           	opt stack 0
 13560                           pclatu	equ	0xFFB
 13561                           pclath	equ	0xFFA
 13562                           tblptru	equ	0xFF8
 13563                           tblptrh	equ	0xFF7
 13564                           tblptrl	equ	0xFF6
 13565                           tablat	equ	0xFF5
 13566                           prodh	equ	0xFF4
 13567                           prodl	equ	0xFF3
 13568                           intcon	equ	0xFF2
 13569                           intcon2	equ	0xFF1
 13570                           intcon3	equ	0xFF0
 13571                           indf0	equ	0xFEF
 13572                           postinc0	equ	0xFEE
 13573                           fsr0h	equ	0xFEA
 13574                           fsr0l	equ	0xFE9
 13575                           wreg	equ	0xFE8
 13576                           postdec1	equ	0xFE5
 13577                           fsr1h	equ	0xFE2
 13578                           fsr1l	equ	0xFE1
 13579                           indf2	equ	0xFDF
 13580                           postinc2	equ	0xFDE
 13581                           postdec2	equ	0xFDD
 13582                           fsr2h	equ	0xFDA
 13583                           fsr2l	equ	0xFD9
 13584                           status	equ	0xFD8
 13585                           
 13586 ;; *************** function _updateMenu *****************
 13587 ;; Defined at:
 13588 ;;		line 211 in file "UI.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;		None
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;		None
 13593 ;; Return value:  Size  Location     Type
 13594 ;;                  1    wreg      void 
 13595 ;; Registers used:
 13596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;Total ram usage:        2 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; Hardware stack levels required when called:    5
 13609 ;; This function calls:
 13610 ;;		_change_state_to_logs_11
 13611 ;;		_change_state_to_logs_12
 13612 ;;		_change_state_to_logs_22
 13613 ;;		_change_state_to_logs_23
 13614 ;;		_change_state_to_logs_33
 13615 ;;		_change_state_to_logs_34
 13616 ;;		_change_state_to_menu_11
 13617 ;;		_change_state_to_menu_23
 13618 ;;		_dispLogs
 13619 ;;		_inputHandler
 13620 ;;		i2_change_state_to_menu_12
 13621 ;;		i2_change_state_to_menu_22
 13622 ;;		i2_change_state_to_menu_start
 13623 ;; This function is called by:
 13624 ;;		_handler
 13625 ;; This function uses a non-reentrant model
 13626 ;;
 13627                           
 13628                           	psect	text51
 13629  001B96                     __ptext51:
 13630                           	opt stack 0
 13631  001B96                     _updateMenu:
 13632                           	opt stack 18
 13633                           
 13634                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 13635                           
 13636                           ;incstack = 0
 13637  001B96  0E00               	movlw	0
 13638  001B98  6E76               	movwf	_up+1,c
 13639  001B9A  0E00               	movlw	0
 13640  001B9C  6E75               	movwf	_up,c
 13641  001B9E  0E00               	movlw	0
 13642  001BA0  6E68               	movwf	_down+1,c
 13643  001BA2  0E00               	movlw	0
 13644  001BA4  6E67               	movwf	_down,c
 13645  001BA6  0E00               	movlw	0
 13646  001BA8  6E6A               	movwf	_enter+1,c
 13647  001BAA  0E00               	movlw	0
 13648  001BAC  6E69               	movwf	_enter,c
 13649  001BAE  0E00               	movlw	0
 13650  001BB0  6E5C               	movwf	_back+1,c
 13651  001BB2  0E00               	movlw	0
 13652  001BB4  6E5B               	movwf	_back,c
 13653                           
 13654                           ;UI.c: 213: (INTCONbits.GIE = 0);
 13655  001BB6  9EF2               	bcf	intcon,7,c	;volatile
 13656                           
 13657                           ;UI.c: 215: if (inputHandler()
 13658                           ;UI.c: 218: ){
 13659  001BB8  EC3F  F011         	call	_inputHandler	;wreg free
 13660  001BBC  502A               	movf	?_inputHandler,w,c
 13661  001BBE  102B               	iorwf	?_inputHandler+1,w,c
 13662  001BC0  A4D8               	btfss	status,2,c
 13663  001BC2  D112               	goto	i2l7095
 13664  001BC4  D146               	goto	i2l254
 13665  001BC6                     i2l6947:
 13666                           
 13667                           ;UI.c: 222: change_state_to_menu_11();
 13668  001BC6  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 13669                           
 13670                           ;UI.c: 223: break;
 13671  001BCA  D143               	goto	i2l254
 13672  001BCC                     i2l6949:
 13673                           
 13674                           ;UI.c: 226: if(up){
 13675  001BCC  5075               	movf	_up,w,c
 13676  001BCE  1076               	iorwf	_up+1,w,c
 13677  001BD0  B4D8               	btfsc	status,2,c
 13678  001BD2  D003               	goto	i2l6953
 13679                           
 13680                           ;UI.c: 227: change_state_to_menu_23();
 13681  001BD4  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13682                           
 13683                           ;UI.c: 228: }
 13684  001BD8  D13C               	goto	i2l254
 13685  001BDA                     i2l6953:
 13686                           
 13687                           ;UI.c: 229: else if(down){
 13688  001BDA  5067               	movf	_down,w,c
 13689  001BDC  1068               	iorwf	_down+1,w,c
 13690  001BDE  B4D8               	btfsc	status,2,c
 13691  001BE0  D003               	goto	i2l6957
 13692                           
 13693                           ;UI.c: 230: change_state_to_menu_12();
 13694  001BE2  EC88  F01D         	call	i2_change_state_to_menu_12	;wreg free
 13695                           
 13696                           ;UI.c: 231: }
 13697  001BE6  D135               	goto	i2l254
 13698  001BE8                     i2l6957:
 13699                           
 13700                           ;UI.c: 232: else if(enter){
 13701  001BE8  5069               	movf	_enter,w,c
 13702  001BEA  106A               	iorwf	_enter+1,w,c
 13703  001BEC  B4D8               	btfsc	status,2,c
 13704  001BEE  D131               	goto	i2l254
 13705                           
 13706                           ;UI.c: 233: change_state_to_menu_start();
 13707  001BF0  ECB7  F01E         	call	i2_change_state_to_menu_start	;wreg free
 13708                           
 13709                           ;UI.c: 234: }
 13710                           ;UI.c: 235: break;
 13711  001BF4  D12E               	goto	i2l254
 13712  001BF6                     i2l6961:
 13713                           
 13714                           ;UI.c: 238: if(up){
 13715  001BF6  5075               	movf	_up,w,c
 13716  001BF8  1076               	iorwf	_up+1,w,c
 13717  001BFA  B4D8               	btfsc	status,2,c
 13718  001BFC  D003               	goto	i2l6965
 13719                           
 13720                           ;UI.c: 239: change_state_to_menu_11();
 13721  001BFE  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 13722                           
 13723                           ;UI.c: 240: }
 13724  001C02  D127               	goto	i2l254
 13725  001C04                     i2l6965:
 13726                           
 13727                           ;UI.c: 241: else if(down){
 13728  001C04  5067               	movf	_down,w,c
 13729  001C06  1068               	iorwf	_down+1,w,c
 13730  001C08  B4D8               	btfsc	status,2,c
 13731  001C0A  D011               	goto	i2l6981
 13732                           
 13733                           ;UI.c: 242: change_state_to_menu_23();
 13734  001C0C  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13735                           
 13736                           ;UI.c: 243: }
 13737  001C10  D120               	goto	i2l254
 13738  001C12                     i2l6973:
 13739                           
 13740                           ;UI.c: 250: if(up){
 13741  001C12  5075               	movf	_up,w,c
 13742  001C14  1076               	iorwf	_up+1,w,c
 13743  001C16  B4D8               	btfsc	status,2,c
 13744  001C18  D003               	goto	i2l6977
 13745                           
 13746                           ;UI.c: 251: change_state_to_menu_11();
 13747  001C1A  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 13748                           
 13749                           ;UI.c: 252: }
 13750  001C1E  D119               	goto	i2l254
 13751  001C20                     i2l6977:
 13752                           
 13753                           ;UI.c: 253: else if(down){
 13754  001C20  5067               	movf	_down,w,c
 13755  001C22  1068               	iorwf	_down+1,w,c
 13756  001C24  B4D8               	btfsc	status,2,c
 13757  001C26  D003               	goto	i2l6981
 13758                           
 13759                           ;UI.c: 254: change_state_to_menu_23();
 13760  001C28  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13761                           
 13762                           ;UI.c: 255: }
 13763  001C2C  D112               	goto	i2l254
 13764  001C2E                     i2l6981:
 13765                           
 13766                           ;UI.c: 256: else if(enter){
 13767  001C2E  5069               	movf	_enter,w,c
 13768  001C30  106A               	iorwf	_enter+1,w,c
 13769  001C32  B4D8               	btfsc	status,2,c
 13770  001C34  D10E               	goto	i2l254
 13771                           
 13772                           ;UI.c: 257: machine_state = Sorting_state;
 13773  001C36  0E01               	movlw	1
 13774  001C38  0100               	movlb	0	; () banked
 13775  001C3A  6FFC               	movwf	_machine_state& (0+255),b
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;UI.c: 258: }
 13779                           ;UI.c: 259: break;
 13780                           
 13781                           ; BSR set to: 0
 13782                           
 13783                           ; BSR set to: 0
 13784  001C3C  D10A               	goto	i2l254
 13785  001C3E                     i2l6985:
 13786                           
 13787                           ;UI.c: 262: if(up){
 13788  001C3E  5075               	movf	_up,w,c
 13789  001C40  1076               	iorwf	_up+1,w,c
 13790  001C42  B4D8               	btfsc	status,2,c
 13791  001C44  D003               	goto	i2l6989
 13792                           
 13793                           ;UI.c: 263: change_state_to_menu_22();
 13794  001C46  EC70  F01D         	call	i2_change_state_to_menu_22	;wreg free
 13795                           
 13796                           ;UI.c: 264: }
 13797  001C4A  D103               	goto	i2l254
 13798  001C4C                     i2l6989:
 13799                           
 13800                           ;UI.c: 265: else if(down){
 13801  001C4C  5067               	movf	_down,w,c
 13802  001C4E  1068               	iorwf	_down+1,w,c
 13803  001C50  B4D8               	btfsc	status,2,c
 13804  001C52  D003               	goto	i2l6993
 13805                           
 13806                           ;UI.c: 266: change_state_to_menu_11();
 13807  001C54  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 13808                           
 13809                           ;UI.c: 267: }
 13810  001C58  D0FC               	goto	i2l254
 13811  001C5A                     i2l6993:
 13812                           
 13813                           ;UI.c: 268: else if(enter){
 13814  001C5A  5069               	movf	_enter,w,c
 13815  001C5C  106A               	iorwf	_enter+1,w,c
 13816  001C5E  B4D8               	btfsc	status,2,c
 13817  001C60  D0F8               	goto	i2l254
 13818                           
 13819                           ;UI.c: 269: change_state_to_logs_11();
 13820  001C62  EC30  F01E         	call	_change_state_to_logs_11	;wreg free
 13821                           
 13822                           ;UI.c: 270: }
 13823                           ;UI.c: 271: break;
 13824  001C66  D0F5               	goto	i2l254
 13825  001C68                     i2l6997:
 13826                           
 13827                           ;UI.c: 274: if(up){
 13828  001C68  5075               	movf	_up,w,c
 13829  001C6A  1076               	iorwf	_up+1,w,c
 13830  001C6C  B4D8               	btfsc	status,2,c
 13831  001C6E  D003               	goto	i2l7001
 13832                           
 13833                           ;UI.c: 275: change_state_to_logs_34();
 13834  001C70  ECD0  F01D         	call	_change_state_to_logs_34	;wreg free
 13835                           
 13836                           ;UI.c: 276: }
 13837  001C74  D0EE               	goto	i2l254
 13838  001C76                     i2l7001:
 13839                           
 13840                           ;UI.c: 277: else if(down){
 13841  001C76  5067               	movf	_down,w,c
 13842  001C78  1068               	iorwf	_down+1,w,c
 13843  001C7A  B4D8               	btfsc	status,2,c
 13844  001C7C  D003               	goto	i2l7005
 13845                           
 13846                           ;UI.c: 278: change_state_to_logs_12();
 13847  001C7E  EC18  F01E         	call	_change_state_to_logs_12	;wreg free
 13848                           
 13849                           ;UI.c: 279: }
 13850  001C82  D0E7               	goto	i2l254
 13851  001C84                     i2l7005:
 13852                           
 13853                           ;UI.c: 280: else if(enter){
 13854  001C84  5069               	movf	_enter,w,c
 13855  001C86  106A               	iorwf	_enter+1,w,c
 13856  001C88  B4D8               	btfsc	status,2,c
 13857  001C8A  D007               	goto	i2l7009
 13858                           
 13859                           ;UI.c: 281: dispLogs(1);
 13860  001C8C  0E00               	movlw	0
 13861  001C8E  6E13               	movwf	dispLogs@myLog+1,c
 13862  001C90  0E01               	movlw	1
 13863  001C92  6E12               	movwf	dispLogs@myLog,c
 13864  001C94  EC03  F01F         	call	_dispLogs	;wreg free
 13865                           
 13866                           ;UI.c: 282: }
 13867  001C98  D0DC               	goto	i2l254
 13868  001C9A                     i2l7009:
 13869                           
 13870                           ;UI.c: 283: else if(back){
 13871  001C9A  505B               	movf	_back,w,c
 13872  001C9C  105C               	iorwf	_back+1,w,c
 13873  001C9E  B4D8               	btfsc	status,2,c
 13874  001CA0  D0D8               	goto	i2l254
 13875                           
 13876                           ;UI.c: 284: change_state_to_menu_23();
 13877  001CA2  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13878                           
 13879                           ;UI.c: 285: }
 13880                           ;UI.c: 286: break;
 13881  001CA6  D0D5               	goto	i2l254
 13882  001CA8                     i2l7013:
 13883                           
 13884                           ;UI.c: 289: if(up){
 13885  001CA8  5075               	movf	_up,w,c
 13886  001CAA  1076               	iorwf	_up+1,w,c
 13887  001CAC  B4D8               	btfsc	status,2,c
 13888  001CAE  D003               	goto	i2l7017
 13889                           
 13890                           ;UI.c: 290: change_state_to_logs_11();
 13891  001CB0  EC30  F01E         	call	_change_state_to_logs_11	;wreg free
 13892                           
 13893                           ;UI.c: 291: }
 13894  001CB4  D0CE               	goto	i2l254
 13895  001CB6                     i2l7017:
 13896                           
 13897                           ;UI.c: 292: else if(down){
 13898  001CB6  5067               	movf	_down,w,c
 13899  001CB8  1068               	iorwf	_down+1,w,c
 13900  001CBA  B4D8               	btfsc	status,2,c
 13901  001CBC  D003               	goto	i2l7021
 13902                           
 13903                           ;UI.c: 293: change_state_to_logs_23();
 13904  001CBE  EC5F  F01E         	call	_change_state_to_logs_23	;wreg free
 13905                           
 13906                           ;UI.c: 294: }
 13907  001CC2  D0C7               	goto	i2l254
 13908  001CC4                     i2l7021:
 13909                           
 13910                           ;UI.c: 295: else if(enter){
 13911  001CC4  5069               	movf	_enter,w,c
 13912  001CC6  106A               	iorwf	_enter+1,w,c
 13913  001CC8  B4D8               	btfsc	status,2,c
 13914  001CCA  D007               	goto	i2l7025
 13915                           
 13916                           ;UI.c: 296: dispLogs(2);
 13917  001CCC  0E00               	movlw	0
 13918  001CCE  6E13               	movwf	dispLogs@myLog+1,c
 13919  001CD0  0E02               	movlw	2
 13920  001CD2  6E12               	movwf	dispLogs@myLog,c
 13921  001CD4  EC03  F01F         	call	_dispLogs	;wreg free
 13922                           
 13923                           ;UI.c: 297: }
 13924  001CD8  D0BC               	goto	i2l254
 13925  001CDA                     i2l7025:
 13926                           
 13927                           ;UI.c: 298: else if(back){
 13928  001CDA  505B               	movf	_back,w,c
 13929  001CDC  105C               	iorwf	_back+1,w,c
 13930  001CDE  B4D8               	btfsc	status,2,c
 13931  001CE0  D0B8               	goto	i2l254
 13932                           
 13933                           ;UI.c: 299: change_state_to_menu_23();
 13934  001CE2  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13935                           
 13936                           ;UI.c: 300: }
 13937                           ;UI.c: 301: break;
 13938  001CE6  D0B5               	goto	i2l254
 13939  001CE8                     i2l7029:
 13940                           
 13941                           ;UI.c: 304: if(up){
 13942  001CE8  5075               	movf	_up,w,c
 13943  001CEA  1076               	iorwf	_up+1,w,c
 13944  001CEC  B4D8               	btfsc	status,2,c
 13945  001CEE  D003               	goto	i2l7033
 13946                           
 13947                           ;UI.c: 305: change_state_to_logs_11();
 13948  001CF0  EC30  F01E         	call	_change_state_to_logs_11	;wreg free
 13949                           
 13950                           ;UI.c: 306: }
 13951  001CF4  D0AE               	goto	i2l254
 13952  001CF6                     i2l7033:
 13953                           
 13954                           ;UI.c: 307: else if(down){
 13955  001CF6  5067               	movf	_down,w,c
 13956  001CF8  1068               	iorwf	_down+1,w,c
 13957  001CFA  B4D8               	btfsc	status,2,c
 13958  001CFC  D003               	goto	i2l7037
 13959                           
 13960                           ;UI.c: 308: change_state_to_logs_23();
 13961  001CFE  EC5F  F01E         	call	_change_state_to_logs_23	;wreg free
 13962                           
 13963                           ;UI.c: 309: }
 13964  001D02  D0A7               	goto	i2l254
 13965  001D04                     i2l7037:
 13966                           
 13967                           ;UI.c: 310: else if(enter){
 13968  001D04  5069               	movf	_enter,w,c
 13969  001D06  106A               	iorwf	_enter+1,w,c
 13970  001D08  B4D8               	btfsc	status,2,c
 13971  001D0A  D007               	goto	i2l7041
 13972                           
 13973                           ;UI.c: 311: dispLogs(2);
 13974  001D0C  0E00               	movlw	0
 13975  001D0E  6E13               	movwf	dispLogs@myLog+1,c
 13976  001D10  0E02               	movlw	2
 13977  001D12  6E12               	movwf	dispLogs@myLog,c
 13978  001D14  EC03  F01F         	call	_dispLogs	;wreg free
 13979                           
 13980                           ;UI.c: 312: }
 13981  001D18  D09C               	goto	i2l254
 13982  001D1A                     i2l7041:
 13983                           
 13984                           ;UI.c: 313: else if(back){
 13985  001D1A  505B               	movf	_back,w,c
 13986  001D1C  105C               	iorwf	_back+1,w,c
 13987  001D1E  B4D8               	btfsc	status,2,c
 13988  001D20  D098               	goto	i2l254
 13989                           
 13990                           ;UI.c: 314: change_state_to_menu_23();
 13991  001D22  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 13992                           
 13993                           ;UI.c: 315: }
 13994                           ;UI.c: 316: break;
 13995  001D26  D095               	goto	i2l254
 13996  001D28                     i2l7045:
 13997                           
 13998                           ;UI.c: 319: if(up){
 13999  001D28  5075               	movf	_up,w,c
 14000  001D2A  1076               	iorwf	_up+1,w,c
 14001  001D2C  B4D8               	btfsc	status,2,c
 14002  001D2E  D003               	goto	i2l7049
 14003                           
 14004                           ;UI.c: 320: change_state_to_logs_22();
 14005  001D30  EC00  F01E         	call	_change_state_to_logs_22	;wreg free
 14006                           
 14007                           ;UI.c: 321: }
 14008  001D34  D08E               	goto	i2l254
 14009  001D36                     i2l7049:
 14010                           
 14011                           ;UI.c: 322: else if(down){
 14012  001D36  5067               	movf	_down,w,c
 14013  001D38  1068               	iorwf	_down+1,w,c
 14014  001D3A  B4D8               	btfsc	status,2,c
 14015  001D3C  D003               	goto	i2l7053
 14016                           
 14017                           ;UI.c: 323: change_state_to_logs_34();
 14018  001D3E  ECD0  F01D         	call	_change_state_to_logs_34	;wreg free
 14019                           
 14020                           ;UI.c: 324: }
 14021  001D42  D087               	goto	i2l254
 14022  001D44                     i2l7053:
 14023                           
 14024                           ;UI.c: 325: else if(enter){
 14025  001D44  5069               	movf	_enter,w,c
 14026  001D46  106A               	iorwf	_enter+1,w,c
 14027  001D48  B4D8               	btfsc	status,2,c
 14028  001D4A  D007               	goto	i2l7057
 14029                           
 14030                           ;UI.c: 326: dispLogs(3);
 14031  001D4C  0E00               	movlw	0
 14032  001D4E  6E13               	movwf	dispLogs@myLog+1,c
 14033  001D50  0E03               	movlw	3
 14034  001D52  6E12               	movwf	dispLogs@myLog,c
 14035  001D54  EC03  F01F         	call	_dispLogs	;wreg free
 14036                           
 14037                           ;UI.c: 327: }
 14038  001D58  D07C               	goto	i2l254
 14039  001D5A                     i2l7057:
 14040                           
 14041                           ;UI.c: 328: else if(back){
 14042  001D5A  505B               	movf	_back,w,c
 14043  001D5C  105C               	iorwf	_back+1,w,c
 14044  001D5E  B4D8               	btfsc	status,2,c
 14045  001D60  D078               	goto	i2l254
 14046                           
 14047                           ;UI.c: 329: change_state_to_menu_23();
 14048  001D62  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 14049                           
 14050                           ;UI.c: 330: }
 14051                           ;UI.c: 331: break;
 14052  001D66  D075               	goto	i2l254
 14053  001D68                     i2l7061:
 14054                           
 14055                           ;UI.c: 334: if(up){
 14056  001D68  5075               	movf	_up,w,c
 14057  001D6A  1076               	iorwf	_up+1,w,c
 14058  001D6C  B4D8               	btfsc	status,2,c
 14059  001D6E  D003               	goto	i2l7065
 14060                           
 14061                           ;UI.c: 335: change_state_to_logs_22();
 14062  001D70  EC00  F01E         	call	_change_state_to_logs_22	;wreg free
 14063                           
 14064                           ;UI.c: 336: }
 14065  001D74  D06E               	goto	i2l254
 14066  001D76                     i2l7065:
 14067                           
 14068                           ;UI.c: 337: else if(down){
 14069  001D76  5067               	movf	_down,w,c
 14070  001D78  1068               	iorwf	_down+1,w,c
 14071  001D7A  B4D8               	btfsc	status,2,c
 14072  001D7C  D003               	goto	i2l7069
 14073                           
 14074                           ;UI.c: 338: change_state_to_logs_34();
 14075  001D7E  ECD0  F01D         	call	_change_state_to_logs_34	;wreg free
 14076                           
 14077                           ;UI.c: 339: }
 14078  001D82  D067               	goto	i2l254
 14079  001D84                     i2l7069:
 14080                           
 14081                           ;UI.c: 340: else if(enter){
 14082  001D84  5069               	movf	_enter,w,c
 14083  001D86  106A               	iorwf	_enter+1,w,c
 14084  001D88  B4D8               	btfsc	status,2,c
 14085  001D8A  D007               	goto	i2l7073
 14086                           
 14087                           ;UI.c: 341: dispLogs(3);
 14088  001D8C  0E00               	movlw	0
 14089  001D8E  6E13               	movwf	dispLogs@myLog+1,c
 14090  001D90  0E03               	movlw	3
 14091  001D92  6E12               	movwf	dispLogs@myLog,c
 14092  001D94  EC03  F01F         	call	_dispLogs	;wreg free
 14093                           
 14094                           ;UI.c: 342: }
 14095  001D98  D05C               	goto	i2l254
 14096  001D9A                     i2l7073:
 14097                           
 14098                           ;UI.c: 343: else if(back){
 14099  001D9A  505B               	movf	_back,w,c
 14100  001D9C  105C               	iorwf	_back+1,w,c
 14101  001D9E  B4D8               	btfsc	status,2,c
 14102  001DA0  D058               	goto	i2l254
 14103                           
 14104                           ;UI.c: 344: change_state_to_menu_23();
 14105  001DA2  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 14106                           
 14107                           ;UI.c: 345: }
 14108                           ;UI.c: 346: break;
 14109  001DA6  D055               	goto	i2l254
 14110  001DA8                     i2l7077:
 14111                           
 14112                           ;UI.c: 349: if(up){
 14113  001DA8  5075               	movf	_up,w,c
 14114  001DAA  1076               	iorwf	_up+1,w,c
 14115  001DAC  B4D8               	btfsc	status,2,c
 14116  001DAE  D003               	goto	i2l7081
 14117                           
 14118                           ;UI.c: 350: change_state_to_logs_33();
 14119  001DB0  ECE8  F01D         	call	_change_state_to_logs_33	;wreg free
 14120                           
 14121                           ;UI.c: 351: }
 14122  001DB4  D04E               	goto	i2l254
 14123  001DB6                     i2l7081:
 14124                           
 14125                           ;UI.c: 352: else if(down){
 14126  001DB6  5067               	movf	_down,w,c
 14127  001DB8  1068               	iorwf	_down+1,w,c
 14128  001DBA  B4D8               	btfsc	status,2,c
 14129  001DBC  D003               	goto	i2l7085
 14130                           
 14131                           ;UI.c: 353: change_state_to_logs_11();
 14132  001DBE  EC30  F01E         	call	_change_state_to_logs_11	;wreg free
 14133                           
 14134                           ;UI.c: 354: }
 14135  001DC2  D047               	goto	i2l254
 14136  001DC4                     i2l7085:
 14137                           
 14138                           ;UI.c: 355: else if(enter){
 14139  001DC4  5069               	movf	_enter,w,c
 14140  001DC6  106A               	iorwf	_enter+1,w,c
 14141  001DC8  B4D8               	btfsc	status,2,c
 14142  001DCA  D007               	goto	i2l7089
 14143                           
 14144                           ;UI.c: 356: dispLogs(4);
 14145  001DCC  0E00               	movlw	0
 14146  001DCE  6E13               	movwf	dispLogs@myLog+1,c
 14147  001DD0  0E04               	movlw	4
 14148  001DD2  6E12               	movwf	dispLogs@myLog,c
 14149  001DD4  EC03  F01F         	call	_dispLogs	;wreg free
 14150                           
 14151                           ;UI.c: 357: }
 14152  001DD8  D03C               	goto	i2l254
 14153  001DDA                     i2l7089:
 14154                           
 14155                           ;UI.c: 358: else if(back){
 14156  001DDA  505B               	movf	_back,w,c
 14157  001DDC  105C               	iorwf	_back+1,w,c
 14158  001DDE  B4D8               	btfsc	status,2,c
 14159  001DE0  D038               	goto	i2l254
 14160                           
 14161                           ;UI.c: 359: change_state_to_menu_23();
 14162  001DE2  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 14163                           
 14164                           ;UI.c: 365: }
 14165                           
 14166                           ;UI.c: 364: break;
 14167                           
 14168                           ;UI.c: 363: default:
 14169                           
 14170                           ;UI.c: 360: }
 14171                           ;UI.c: 361: break;
 14172  001DE6  D035               	goto	i2l254
 14173  001DE8                     i2l7095:
 14174  001DE8  C0DE  F043         	movff	_cur_state,??_updateMenu
 14175  001DEC  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14176                           
 14177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14178                           ; Switch size 1, requested type "space"
 14179                           ; Number of cases is 3, Range of values is 0 to 4
 14180                           ; switch strategies available:
 14181                           ; Name         Instructions Cycles
 14182                           ; simple_byte           10     6 (average)
 14183                           ;	Chosen strategy is simple_byte
 14184  001DF0  5044               	movf	??_updateMenu+1,w,c
 14185  001DF2  0A00               	xorlw	0	; case 0
 14186  001DF4  B4D8               	btfsc	status,2,c
 14187  001DF6  D007               	goto	i2l7631
 14188  001DF8  0A03               	xorlw	3	; case 3
 14189  001DFA  B4D8               	btfsc	status,2,c
 14190  001DFC  D015               	goto	i2l7633
 14191  001DFE  0A07               	xorlw	7	; case 4
 14192  001E00  B4D8               	btfsc	status,2,c
 14193  001E02  D020               	goto	i2l7635
 14194  001E04  D026               	goto	i2l254
 14195  001E06                     i2l7631:
 14196                           
 14197                           ; Switch size 1, requested type "space"
 14198                           ; Number of cases is 5, Range of values is 0 to 23
 14199                           ; switch strategies available:
 14200                           ; Name         Instructions Cycles
 14201                           ; simple_byte           16     9 (average)
 14202                           ;	Chosen strategy is simple_byte
 14203  001E06  5043               	movf	??_updateMenu,w,c
 14204  001E08  0A00               	xorlw	0	; case 0
 14205  001E0A  B4D8               	btfsc	status,2,c
 14206  001E0C  D6DC               	goto	i2l6947
 14207  001E0E  0A0B               	xorlw	11	; case 11
 14208  001E10  B4D8               	btfsc	status,2,c
 14209  001E12  D6DC               	goto	i2l6949
 14210  001E14  0A07               	xorlw	7	; case 12
 14211  001E16  B4D8               	btfsc	status,2,c
 14212  001E18  D6EE               	goto	i2l6961
 14213  001E1A  0A1A               	xorlw	26	; case 22
 14214  001E1C  B4D8               	btfsc	status,2,c
 14215  001E1E  D6F9               	goto	i2l6973
 14216  001E20  0A01               	xorlw	1	; case 23
 14217  001E22  B4D8               	btfsc	status,2,c
 14218  001E24  D70C               	goto	i2l6985
 14219  001E26  D015               	goto	i2l254
 14220  001E28                     i2l7633:
 14221                           
 14222                           ; Switch size 1, requested type "space"
 14223                           ; Number of cases is 4, Range of values is 243 to 255
 14224                           ; switch strategies available:
 14225                           ; Name         Instructions Cycles
 14226                           ; simple_byte           13     7 (average)
 14227                           ;	Chosen strategy is simple_byte
 14228  001E28  5043               	movf	??_updateMenu,w,c
 14229  001E2A  0AF3               	xorlw	243	; case 243
 14230  001E2C  B4D8               	btfsc	status,2,c
 14231  001E2E  D71C               	goto	i2l6997
 14232  001E30  0A07               	xorlw	7	; case 244
 14233  001E32  B4D8               	btfsc	status,2,c
 14234  001E34  D739               	goto	i2l7013
 14235  001E36  0A0A               	xorlw	10	; case 254
 14236  001E38  B4D8               	btfsc	status,2,c
 14237  001E3A  D756               	goto	i2l7029
 14238  001E3C  0A01               	xorlw	1	; case 255
 14239  001E3E  B4D8               	btfsc	status,2,c
 14240  001E40  D773               	goto	i2l7045
 14241  001E42  D007               	goto	i2l254
 14242  001E44                     i2l7635:
 14243                           
 14244                           ; Switch size 1, requested type "space"
 14245                           ; Number of cases is 2, Range of values is 9 to 10
 14246                           ; switch strategies available:
 14247                           ; Name         Instructions Cycles
 14248                           ; simple_byte            7     4 (average)
 14249                           ;	Chosen strategy is simple_byte
 14250  001E44  5043               	movf	??_updateMenu,w,c
 14251  001E46  0A09               	xorlw	9	; case 9
 14252  001E48  B4D8               	btfsc	status,2,c
 14253  001E4A  D78E               	goto	i2l7061
 14254  001E4C  0A03               	xorlw	3	; case 10
 14255  001E4E  B4D8               	btfsc	status,2,c
 14256  001E50  D7AB               	goto	i2l7077
 14257  001E52                     i2l254:
 14258                           
 14259                           ;UI.c: 366: }
 14260                           ;UI.c: 367: (INTCONbits.GIE = 1);
 14261  001E52  8EF2               	bsf	intcon,7,c	;volatile
 14262  001E54  0012               	return		;funcret
 14263  001E56                     __end_of_updateMenu:
 14264                           	opt stack 0
 14265                           pclatu	equ	0xFFB
 14266                           pclath	equ	0xFFA
 14267                           tblptru	equ	0xFF8
 14268                           tblptrh	equ	0xFF7
 14269                           tblptrl	equ	0xFF6
 14270                           tablat	equ	0xFF5
 14271                           prodh	equ	0xFF4
 14272                           prodl	equ	0xFF3
 14273                           intcon	equ	0xFF2
 14274                           intcon2	equ	0xFF1
 14275                           intcon3	equ	0xFF0
 14276                           indf0	equ	0xFEF
 14277                           postinc0	equ	0xFEE
 14278                           fsr0h	equ	0xFEA
 14279                           fsr0l	equ	0xFE9
 14280                           wreg	equ	0xFE8
 14281                           postdec1	equ	0xFE5
 14282                           fsr1h	equ	0xFE2
 14283                           fsr1l	equ	0xFE1
 14284                           indf2	equ	0xFDF
 14285                           postinc2	equ	0xFDE
 14286                           postdec2	equ	0xFDD
 14287                           fsr2h	equ	0xFDA
 14288                           fsr2l	equ	0xFD9
 14289                           status	equ	0xFD8
 14290                           
 14291 ;; *************** function i2_change_state_to_menu_start *****************
 14292 ;; Defined at:
 14293 ;;		line 472 in file "UI.c"
 14294 ;; Parameters:    Size  Location     Type
 14295 ;;		None
 14296 ;; Auto vars:     Size  Location     Type
 14297 ;;		None
 14298 ;; Return value:  Size  Location     Type
 14299 ;;                  1    wreg      void 
 14300 ;; Registers used:
 14301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14302 ;; Tracked objects:
 14303 ;;		On entry : 0/0
 14304 ;;		On exit  : 0/0
 14305 ;;		Unchanged: 0/0
 14306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;Total ram usage:        0 bytes
 14312 ;; Hardware stack levels used:    1
 14313 ;; Hardware stack levels required when called:    4
 14314 ;; This function calls:
 14315 ;;		i2_lcdInst
 14316 ;;		i2_printRTC
 14317 ;;		i2_printf
 14318 ;; This function is called by:
 14319 ;;		_updateMenu
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323                           	psect	text52
 14324  003D6E                     __ptext52:
 14325                           	opt stack 0
 14326  003D6E                     i2_change_state_to_menu_start:
 14327                           	opt stack 18
 14328                           
 14329                           ;UI.c: 473: cur_state = 0;
 14330                           
 14331                           ;incstack = 0
 14332  003D6E  0E00               	movlw	0
 14333  003D70  0100               	movlb	0	; () banked
 14334  003D72  6FDF               	movwf	(_cur_state+1)& (0+255),b
 14335  003D74  0E00               	movlw	0
 14336  003D76  6FDE               	movwf	_cur_state& (0+255),b
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;UI.c: 475: lcdInst(0b10000000);;
 14340  003D78  0E80               	movlw	128
 14341  003D7A  EC91  F01F         	call	i2_lcdInst
 14342                           
 14343                           ;UI.c: 476: printRTC();
 14344  003D7E  EC2B  F00F         	call	i2_printRTC	;wreg free
 14345                           
 14346                           ;UI.c: 477: lcdInst(0b11000000);;
 14347  003D82  0EC0               	movlw	192
 14348  003D84  EC91  F01F         	call	i2_lcdInst
 14349                           
 14350                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 14351  003D88  0E33               	movlw	low STR_30
 14352  003D8A  6E0D               	movwf	i2printf@f,c
 14353  003D8C  0EFE               	movlw	high STR_30
 14354  003D8E  6E0E               	movwf	i2printf@f+1,c
 14355  003D90  ECAF  F00A         	call	i2_printf	;wreg free
 14356  003D94  0012               	return		;funcret
 14357  003D96                     __end_ofi2_change_state_to_menu_start:
 14358                           	opt stack 0
 14359                           pclatu	equ	0xFFB
 14360                           pclath	equ	0xFFA
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           intcon	equ	0xFF2
 14368                           intcon2	equ	0xFF1
 14369                           intcon3	equ	0xFF0
 14370                           indf0	equ	0xFEF
 14371                           postinc0	equ	0xFEE
 14372                           fsr0h	equ	0xFEA
 14373                           fsr0l	equ	0xFE9
 14374                           wreg	equ	0xFE8
 14375                           postdec1	equ	0xFE5
 14376                           fsr1h	equ	0xFE2
 14377                           fsr1l	equ	0xFE1
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function i2_printRTC *****************
 14386 ;; Defined at:
 14387 ;;		line 63 in file "RTC.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;		None
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  printRTC       14   44[COMRAM] int [7]
 14392 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 14393 ;;  printRTC        2   64[COMRAM] int 
 14394 ;;  printRTC        2   58[COMRAM] int 
 14395 ;; Return value:  Size  Location     Type
 14396 ;;                  1    wreg      void 
 14397 ;; Registers used:
 14398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14399 ;; Tracked objects:
 14400 ;;		On entry : 0/0
 14401 ;;		On exit  : 0/0
 14402 ;;		Unchanged: 0/0
 14403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14407 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14408 ;;Total ram usage:       25 bytes
 14409 ;; Hardware stack levels used:    1
 14410 ;; Hardware stack levels required when called:    3
 14411 ;; This function calls:
 14412 ;;		i2_getRTC
 14413 ;;		i2_lcdInst
 14414 ;;		i2_printf
 14415 ;;		i2_strcpy
 14416 ;; This function is called by:
 14417 ;;		i2_change_state_to_menu_start
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           	psect	text53
 14422  001E56                     __ptext53:
 14423                           	opt stack 0
 14424  001E56                     i2_printRTC:
 14425                           	opt stack 18
 14426                           
 14427                           ;RTC.c: 64: getRTC();
 14428                           
 14429                           ;incstack = 0
 14430  001E56  EC5B  F01A         	call	i2_getRTC	;wreg free
 14431                           
 14432                           ;RTC.c: 65: char month[] = "MMM";
 14433  001E5A  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 14434  001E5E  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 14435  001E62  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 14436  001E66  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 14437                           
 14438                           ;RTC.c: 66: int INT_time[7];
 14439                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 14440  001E6A  0E00               	movlw	0
 14441  001E6C  6E42               	movwf	i2printRTC@i+1,c
 14442  001E6E  0E00               	movlw	0
 14443  001E70  6E41               	movwf	i2printRTC@i,c
 14444  001E72  BE42               	btfsc	i2printRTC@i+1,7,c
 14445  001E74  D006               	goto	i2l5631
 14446  001E76  5042               	movf	i2printRTC@i+1,w,c
 14447  001E78  E135               	bnz	i2l591
 14448  001E7A  0E07               	movlw	7
 14449  001E7C  5C41               	subwf	i2printRTC@i,w,c
 14450  001E7E  B0D8               	btfsc	status,0,c
 14451  001E80  D031               	goto	i2l591
 14452  001E82                     i2l5631:
 14453                           
 14454                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 14455  001E82  0E24               	movlw	low _time
 14456  001E84  2441               	addwf	i2printRTC@i,w,c
 14457  001E86  6ED9               	movwf	fsr2l,c
 14458  001E88  0E01               	movlw	high _time
 14459  001E8A  2042               	addwfc	i2printRTC@i+1,w,c
 14460  001E8C  6EDA               	movwf	fsr2h,c
 14461  001E8E  50DF               	movf	indf2,w,c
 14462  001E90  6E2A               	movwf	??i2_printRTC& (0+255),c
 14463  001E92  3A2A               	swapf	??i2_printRTC,f,c
 14464  001E94  0E0F               	movlw	15
 14465  001E96  162A               	andwf	??i2_printRTC,f,c
 14466  001E98  0E0F               	movlw	15
 14467  001E9A  162A               	andwf	??i2_printRTC,f,c
 14468  001E9C  502A               	movf	??i2_printRTC,w,c
 14469  001E9E  0D0A               	mullw	10
 14470  001EA0  0E24               	movlw	low _time
 14471  001EA2  2441               	addwf	i2printRTC@i,w,c
 14472  001EA4  6ED9               	movwf	fsr2l,c
 14473  001EA6  0E01               	movlw	high _time
 14474  001EA8  2042               	addwfc	i2printRTC@i+1,w,c
 14475  001EAA  6EDA               	movwf	fsr2h,c
 14476  001EAC  50DF               	movf	indf2,w,c
 14477  001EAE  0B0F               	andlw	15
 14478  001EB0  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 14479  001EB2  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 14480  001EB4  50F3               	movf	prodl,w,c
 14481  001EB6  262B               	addwf	??i2_printRTC+1,f,c
 14482  001EB8  50F4               	movf	prodh,w,c
 14483  001EBA  222C               	addwfc	??i2_printRTC+2,f,c
 14484  001EBC  90D8               	bcf	status,0,c
 14485  001EBE  3441               	rlcf	i2printRTC@i,w,c
 14486  001EC0  6ED9               	movwf	fsr2l,c
 14487  001EC2  3442               	rlcf	i2printRTC@i+1,w,c
 14488  001EC4  6EDA               	movwf	fsr2h,c
 14489  001EC6  0E2D               	movlw	low i2printRTC@INT_time
 14490  001EC8  26D9               	addwf	fsr2l,f,c
 14491  001ECA  0E00               	movlw	high i2printRTC@INT_time
 14492  001ECC  22DA               	addwfc	fsr2h,f,c
 14493  001ECE  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 14494  001ED2  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 14495  001ED6  4A41               	infsnz	i2printRTC@i,f,c
 14496  001ED8  2A42               	incf	i2printRTC@i+1,f,c
 14497  001EDA  BE42               	btfsc	i2printRTC@i+1,7,c
 14498  001EDC  D7D2               	goto	i2l5631
 14499  001EDE  5042               	movf	i2printRTC@i+1,w,c
 14500  001EE0  E101               	bnz	i2u432_40
 14501  001EE2  D7CB               	goto	L9
 14502  001EE4                     i2u432_40:
 14503  001EE4                     i2l591:
 14504                           
 14505                           ;RTC.c: 69: }
 14506                           ;RTC.c: 70: int RTC_month = INT_time[5];
 14507  001EE4  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 14508  001EE8  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 14509                           
 14510                           ;RTC.c: 71: switch(RTC_month){
 14511  001EEC  D084               	goto	i2l5663
 14512  001EEE                     i2l5637:
 14513                           
 14514                           ;RTC.c: 73: strcpy(month, "JAN");
 14515  001EEE  0E3D               	movlw	low i2printRTC@month
 14516  001EF0  6E01               	movwf	i2strcpy@to,c
 14517  001EF2  0E00               	movlw	high i2printRTC@month
 14518  001EF4  6E02               	movwf	i2strcpy@to+1,c
 14519  001EF6  0EDA               	movlw	low STR_8
 14520  001EF8  6E03               	movwf	i2strcpy@from,c
 14521  001EFA  0EFF               	movlw	high STR_8
 14522  001EFC  6E04               	movwf	i2strcpy@from+1,c
 14523  001EFE  EC57  F01D         	call	i2_strcpy	;wreg free
 14524                           
 14525                           ;RTC.c: 74: break;
 14526  001F02  D0A6               	goto	i2l5665
 14527  001F04                     i2l5639:
 14528                           
 14529                           ;RTC.c: 76: strcpy(month, "FEB");
 14530  001F04  0E3D               	movlw	low i2printRTC@month
 14531  001F06  6E01               	movwf	i2strcpy@to,c
 14532  001F08  0E00               	movlw	high i2printRTC@month
 14533  001F0A  6E02               	movwf	i2strcpy@to+1,c
 14534  001F0C  0ECA               	movlw	low STR_9
 14535  001F0E  6E03               	movwf	i2strcpy@from,c
 14536  001F10  0EFF               	movlw	high STR_9
 14537  001F12  6E04               	movwf	i2strcpy@from+1,c
 14538  001F14  EC57  F01D         	call	i2_strcpy	;wreg free
 14539                           
 14540                           ;RTC.c: 77: break;
 14541  001F18  D09B               	goto	i2l5665
 14542  001F1A                     i2l5641:
 14543                           
 14544                           ;RTC.c: 79: strcpy(month, "MAR");
 14545  001F1A  0E3D               	movlw	low i2printRTC@month
 14546  001F1C  6E01               	movwf	i2strcpy@to,c
 14547  001F1E  0E00               	movlw	high i2printRTC@month
 14548  001F20  6E02               	movwf	i2strcpy@to+1,c
 14549  001F22  0EE6               	movlw	low STR_10
 14550  001F24  6E03               	movwf	i2strcpy@from,c
 14551  001F26  0EFF               	movlw	high STR_10
 14552  001F28  6E04               	movwf	i2strcpy@from+1,c
 14553  001F2A  EC57  F01D         	call	i2_strcpy	;wreg free
 14554                           
 14555                           ;RTC.c: 80: break;
 14556  001F2E  D090               	goto	i2l5665
 14557  001F30                     i2l5643:
 14558                           
 14559                           ;RTC.c: 82: strcpy(month, "APR");
 14560  001F30  0E3D               	movlw	low i2printRTC@month
 14561  001F32  6E01               	movwf	i2strcpy@to,c
 14562  001F34  0E00               	movlw	high i2printRTC@month
 14563  001F36  6E02               	movwf	i2strcpy@to+1,c
 14564  001F38  0EEA               	movlw	low STR_11
 14565  001F3A  6E03               	movwf	i2strcpy@from,c
 14566  001F3C  0EFF               	movlw	high STR_11
 14567  001F3E  6E04               	movwf	i2strcpy@from+1,c
 14568  001F40  EC57  F01D         	call	i2_strcpy	;wreg free
 14569                           
 14570                           ;RTC.c: 83: break;
 14571  001F44  D085               	goto	i2l5665
 14572  001F46                     i2l5645:
 14573                           
 14574                           ;RTC.c: 85: strcpy(month, "MAY");
 14575  001F46  0E3D               	movlw	low i2printRTC@month
 14576  001F48  6E01               	movwf	i2strcpy@to,c
 14577  001F4A  0E00               	movlw	high i2printRTC@month
 14578  001F4C  6E02               	movwf	i2strcpy@to+1,c
 14579  001F4E  0EFA               	movlw	low STR_12
 14580  001F50  6E03               	movwf	i2strcpy@from,c
 14581  001F52  0EFF               	movlw	high STR_12
 14582  001F54  6E04               	movwf	i2strcpy@from+1,c
 14583  001F56  EC57  F01D         	call	i2_strcpy	;wreg free
 14584                           
 14585                           ;RTC.c: 86: break;
 14586  001F5A  D07A               	goto	i2l5665
 14587  001F5C                     i2l5647:
 14588                           
 14589                           ;RTC.c: 88: strcpy(month, "JUN");
 14590  001F5C  0E3D               	movlw	low i2printRTC@month
 14591  001F5E  6E01               	movwf	i2strcpy@to,c
 14592  001F60  0E00               	movlw	high i2printRTC@month
 14593  001F62  6E02               	movwf	i2strcpy@to+1,c
 14594  001F64  0EDE               	movlw	low STR_13
 14595  001F66  6E03               	movwf	i2strcpy@from,c
 14596  001F68  0EFF               	movlw	high STR_13
 14597  001F6A  6E04               	movwf	i2strcpy@from+1,c
 14598  001F6C  EC57  F01D         	call	i2_strcpy	;wreg free
 14599                           
 14600                           ;RTC.c: 89: break;
 14601  001F70  D06F               	goto	i2l5665
 14602  001F72                     i2l5649:
 14603                           
 14604                           ;RTC.c: 91: strcpy(month, "JUL");
 14605  001F72  0E3D               	movlw	low i2printRTC@month
 14606  001F74  6E01               	movwf	i2strcpy@to,c
 14607  001F76  0E00               	movlw	high i2printRTC@month
 14608  001F78  6E02               	movwf	i2strcpy@to+1,c
 14609  001F7A  0ED6               	movlw	low STR_14
 14610  001F7C  6E03               	movwf	i2strcpy@from,c
 14611  001F7E  0EFF               	movlw	high STR_14
 14612  001F80  6E04               	movwf	i2strcpy@from+1,c
 14613  001F82  EC57  F01D         	call	i2_strcpy	;wreg free
 14614                           
 14615                           ;RTC.c: 92: break;
 14616  001F86  D064               	goto	i2l5665
 14617  001F88                     i2l5651:
 14618                           
 14619                           ;RTC.c: 94: strcpy(month, "AUG");
 14620  001F88  0E3D               	movlw	low i2printRTC@month
 14621  001F8A  6E01               	movwf	i2strcpy@to,c
 14622  001F8C  0E00               	movlw	high i2printRTC@month
 14623  001F8E  6E02               	movwf	i2strcpy@to+1,c
 14624  001F90  0ED2               	movlw	low STR_15
 14625  001F92  6E03               	movwf	i2strcpy@from,c
 14626  001F94  0EFF               	movlw	high STR_15
 14627  001F96  6E04               	movwf	i2strcpy@from+1,c
 14628  001F98  EC57  F01D         	call	i2_strcpy	;wreg free
 14629                           
 14630                           ;RTC.c: 95: break;
 14631  001F9C  D059               	goto	i2l5665
 14632  001F9E                     i2l5653:
 14633                           
 14634                           ;RTC.c: 97: strcpy(month, "SEP");
 14635  001F9E  0E3D               	movlw	low i2printRTC@month
 14636  001FA0  6E01               	movwf	i2strcpy@to,c
 14637  001FA2  0E00               	movlw	high i2printRTC@month
 14638  001FA4  6E02               	movwf	i2strcpy@to+1,c
 14639  001FA6  0EE2               	movlw	low STR_16
 14640  001FA8  6E03               	movwf	i2strcpy@from,c
 14641  001FAA  0EFF               	movlw	high STR_16
 14642  001FAC  6E04               	movwf	i2strcpy@from+1,c
 14643  001FAE  EC57  F01D         	call	i2_strcpy	;wreg free
 14644                           
 14645                           ;RTC.c: 98: break;
 14646  001FB2  D04E               	goto	i2l5665
 14647  001FB4                     i2l5655:
 14648                           
 14649                           ;RTC.c: 100: strcpy(month, "OCT");
 14650  001FB4  0E3D               	movlw	low i2printRTC@month
 14651  001FB6  6E01               	movwf	i2strcpy@to,c
 14652  001FB8  0E00               	movlw	high i2printRTC@month
 14653  001FBA  6E02               	movwf	i2strcpy@to+1,c
 14654  001FBC  0EF2               	movlw	low STR_17
 14655  001FBE  6E03               	movwf	i2strcpy@from,c
 14656  001FC0  0EFF               	movlw	high STR_17
 14657  001FC2  6E04               	movwf	i2strcpy@from+1,c
 14658  001FC4  EC57  F01D         	call	i2_strcpy	;wreg free
 14659                           
 14660                           ;RTC.c: 101: break;
 14661  001FC8  D043               	goto	i2l5665
 14662  001FCA                     i2l5657:
 14663                           
 14664                           ;RTC.c: 103: strcpy(month, "NOV");
 14665  001FCA  0E3D               	movlw	low i2printRTC@month
 14666  001FCC  6E01               	movwf	i2strcpy@to,c
 14667  001FCE  0E00               	movlw	high i2printRTC@month
 14668  001FD0  6E02               	movwf	i2strcpy@to+1,c
 14669  001FD2  0EF6               	movlw	low STR_18
 14670  001FD4  6E03               	movwf	i2strcpy@from,c
 14671  001FD6  0EFF               	movlw	high STR_18
 14672  001FD8  6E04               	movwf	i2strcpy@from+1,c
 14673  001FDA  EC57  F01D         	call	i2_strcpy	;wreg free
 14674                           
 14675                           ;RTC.c: 104: break;
 14676  001FDE  D038               	goto	i2l5665
 14677  001FE0                     i2l5659:
 14678                           
 14679                           ;RTC.c: 106: strcpy(month, "DEC");
 14680  001FE0  0E3D               	movlw	low i2printRTC@month
 14681  001FE2  6E01               	movwf	i2strcpy@to,c
 14682  001FE4  0E00               	movlw	high i2printRTC@month
 14683  001FE6  6E02               	movwf	i2strcpy@to+1,c
 14684  001FE8  0ECE               	movlw	low STR_19
 14685  001FEA  6E03               	movwf	i2strcpy@from,c
 14686  001FEC  0EFF               	movlw	high STR_19
 14687  001FEE  6E04               	movwf	i2strcpy@from+1,c
 14688  001FF0  EC57  F01D         	call	i2_strcpy	;wreg free
 14689                           
 14690                           ;RTC.c: 108: }
 14691                           
 14692                           ;RTC.c: 107: break;
 14693  001FF4  D02D               	goto	i2l5665
 14694  001FF6                     i2l5663:
 14695  001FF6  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 14696  001FFA  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 14697                           
 14698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14699                           ; Switch size 1, requested type "space"
 14700                           ; Number of cases is 1, Range of values is 0 to 0
 14701                           ; switch strategies available:
 14702                           ; Name         Instructions Cycles
 14703                           ; simple_byte            4     3 (average)
 14704                           ;	Chosen strategy is simple_byte
 14705  001FFE  502B               	movf	??i2_printRTC+1,w,c
 14706  002000  0A00               	xorlw	0	; case 0
 14707  002002  A4D8               	btfss	status,2,c
 14708  002004  D025               	goto	i2l5665
 14709                           
 14710                           ; Switch size 1, requested type "space"
 14711                           ; Number of cases is 12, Range of values is 1 to 12
 14712                           ; switch strategies available:
 14713                           ; Name         Instructions Cycles
 14714                           ; simple_byte           37    19 (average)
 14715                           ;	Chosen strategy is simple_byte
 14716  002006  502A               	movf	??i2_printRTC,w,c
 14717  002008  0A01               	xorlw	1	; case 1
 14718  00200A  B4D8               	btfsc	status,2,c
 14719  00200C  D770               	goto	i2l5637
 14720  00200E  0A03               	xorlw	3	; case 2
 14721  002010  B4D8               	btfsc	status,2,c
 14722  002012  D778               	goto	i2l5639
 14723  002014  0A01               	xorlw	1	; case 3
 14724  002016  B4D8               	btfsc	status,2,c
 14725  002018  D780               	goto	i2l5641
 14726  00201A  0A07               	xorlw	7	; case 4
 14727  00201C  B4D8               	btfsc	status,2,c
 14728  00201E  D788               	goto	i2l5643
 14729  002020  0A01               	xorlw	1	; case 5
 14730  002022  B4D8               	btfsc	status,2,c
 14731  002024  D790               	goto	i2l5645
 14732  002026  0A03               	xorlw	3	; case 6
 14733  002028  B4D8               	btfsc	status,2,c
 14734  00202A  D798               	goto	i2l5647
 14735  00202C  0A01               	xorlw	1	; case 7
 14736  00202E  B4D8               	btfsc	status,2,c
 14737  002030  D7A0               	goto	i2l5649
 14738  002032  0A0F               	xorlw	15	; case 8
 14739  002034  B4D8               	btfsc	status,2,c
 14740  002036  D7A8               	goto	i2l5651
 14741  002038  0A01               	xorlw	1	; case 9
 14742  00203A  B4D8               	btfsc	status,2,c
 14743  00203C  D7B0               	goto	i2l5653
 14744  00203E  0A03               	xorlw	3	; case 10
 14745  002040  B4D8               	btfsc	status,2,c
 14746  002042  D7B8               	goto	i2l5655
 14747  002044  0A01               	xorlw	1	; case 11
 14748  002046  B4D8               	btfsc	status,2,c
 14749  002048  D7C0               	goto	i2l5657
 14750  00204A  0A07               	xorlw	7	; case 12
 14751  00204C  B4D8               	btfsc	status,2,c
 14752  00204E  D7C8               	goto	i2l5659
 14753  002050                     i2l5665:
 14754                           
 14755                           ;RTC.c: 109: lcdInst(0b10000000);;
 14756  002050  0E80               	movlw	128
 14757  002052  EC91  F01F         	call	i2_lcdInst
 14758                           
 14759                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 14760  002056  0EBE               	movlw	low STR_21
 14761  002058  6E0D               	movwf	i2printf@f,c
 14762  00205A  0EFB               	movlw	high STR_21
 14763  00205C  6E0E               	movwf	i2printf@f+1,c
 14764  00205E  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 14765  002062  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 14766  002066  0E3D               	movlw	low i2printRTC@month
 14767  002068  6E11               	movwf	?i2_printf+4,c
 14768  00206A  0E00               	movlw	high i2printRTC@month
 14769  00206C  6E12               	movwf	?i2_printf+5,c
 14770  00206E  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 14771  002072  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 14772  002076  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 14773  00207A  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 14774  00207E  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 14775  002082  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 14776  002086  ECAF  F00A         	call	i2_printf	;wreg free
 14777  00208A  0012               	return		;funcret
 14778  00208C                     __end_ofi2_printRTC:
 14779                           	opt stack 0
 14780                           pclatu	equ	0xFFB
 14781                           pclath	equ	0xFFA
 14782                           tblptru	equ	0xFF8
 14783                           tblptrh	equ	0xFF7
 14784                           tblptrl	equ	0xFF6
 14785                           tablat	equ	0xFF5
 14786                           prodh	equ	0xFF4
 14787                           prodl	equ	0xFF3
 14788                           intcon	equ	0xFF2
 14789                           intcon2	equ	0xFF1
 14790                           intcon3	equ	0xFF0
 14791                           indf0	equ	0xFEF
 14792                           postinc0	equ	0xFEE
 14793                           fsr0h	equ	0xFEA
 14794                           fsr0l	equ	0xFE9
 14795                           wreg	equ	0xFE8
 14796                           postdec1	equ	0xFE5
 14797                           fsr1h	equ	0xFE2
 14798                           fsr1l	equ	0xFE1
 14799                           indf2	equ	0xFDF
 14800                           postinc2	equ	0xFDE
 14801                           postdec2	equ	0xFDD
 14802                           fsr2h	equ	0xFDA
 14803                           fsr2l	equ	0xFD9
 14804                           status	equ	0xFD8
 14805                           
 14806 ;; *************** function i2_strcpy *****************
 14807 ;; Defined at:
 14808 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  to              2    0[COMRAM] PTR unsigned char 
 14811 ;;		 -> printRTC@month(4), UI@month(4), 
 14812 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14813 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 14814 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 14815 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 14816 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 14817 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 14818 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 14819 ;;		 -> STR_8(4), 
 14820 ;; Auto vars:     Size  Location     Type
 14821 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 14822 ;;		 -> printRTC@month(4), UI@month(4), 
 14823 ;; Return value:  Size  Location     Type
 14824 ;;                  2    0[COMRAM] PTR unsigned char 
 14825 ;; Registers used:
 14826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14827 ;; Tracked objects:
 14828 ;;		On entry : 0/0
 14829 ;;		On exit  : 0/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;Total ram usage:        6 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; This function calls:
 14839 ;;		Nothing
 14840 ;; This function is called by:
 14841 ;;		i2_printRTC
 14842 ;; This function uses a non-reentrant model
 14843 ;;
 14844                           
 14845                           	psect	text54
 14846  003AAE                     __ptext54:
 14847                           	opt stack 0
 14848  003AAE                     i2_strcpy:
 14849                           	opt stack 20
 14850                           
 14851                           ;incstack = 0
 14852  003AAE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 14853  003AB2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 14854  003AB6  D004               	goto	i2l5313
 14855  003AB8                     i2l5311:
 14856  003AB8  4A05               	infsnz	i2strcpy@cp,f,c
 14857  003ABA  2A06               	incf	i2strcpy@cp+1,f,c
 14858  003ABC  4A03               	infsnz	i2strcpy@from,f,c
 14859  003ABE  2A04               	incf	i2strcpy@from+1,f,c
 14860  003AC0                     i2l5313:
 14861  003AC0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 14862  003AC4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 14863  003AC8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14864  003AC8  6AF8               	clrf	tblptru,c
 14865  003ACA                     	endif
 14866  003ACA                     	if	0	;tblptru may be non-zero
 14867  003ACA                     	endif
 14868  003ACA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 14869  003ACE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 14870  003AD2  0008               	tblrd		*
 14871  003AD4  CFF5 FFDF          	movff	tablat,indf2
 14872  003AD8  50DF               	movf	indf2,w,c
 14873  003ADA  B4D8               	btfsc	status,2,c
 14874  003ADC  0012               	return	
 14875  003ADE  D7EC               	goto	i2l5311
 14876  003AE0                     __end_ofi2_strcpy:
 14877                           	opt stack 0
 14878                           pclatu	equ	0xFFB
 14879                           pclath	equ	0xFFA
 14880                           tblptru	equ	0xFF8
 14881                           tblptrh	equ	0xFF7
 14882                           tblptrl	equ	0xFF6
 14883                           tablat	equ	0xFF5
 14884                           prodh	equ	0xFF4
 14885                           prodl	equ	0xFF3
 14886                           intcon	equ	0xFF2
 14887                           intcon2	equ	0xFF1
 14888                           intcon3	equ	0xFF0
 14889                           indf0	equ	0xFEF
 14890                           postinc0	equ	0xFEE
 14891                           fsr0h	equ	0xFEA
 14892                           fsr0l	equ	0xFE9
 14893                           wreg	equ	0xFE8
 14894                           postdec1	equ	0xFE5
 14895                           fsr1h	equ	0xFE2
 14896                           fsr1l	equ	0xFE1
 14897                           indf2	equ	0xFDF
 14898                           postinc2	equ	0xFDE
 14899                           postdec2	equ	0xFDD
 14900                           fsr2h	equ	0xFDA
 14901                           fsr2l	equ	0xFD9
 14902                           status	equ	0xFD8
 14903                           
 14904 ;; *************** function _inputHandler *****************
 14905 ;; Defined at:
 14906 ;;		line 370 in file "UI.c"
 14907 ;; Parameters:    Size  Location     Type
 14908 ;;		None
 14909 ;; Auto vars:     Size  Location     Type
 14910 ;;		None
 14911 ;; Return value:  Size  Location     Type
 14912 ;;                  2   41[COMRAM] int 
 14913 ;; Registers used:
 14914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14915 ;; Tracked objects:
 14916 ;;		On entry : 0/0
 14917 ;;		On exit  : 0/0
 14918 ;;		Unchanged: 0/0
 14919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14924 ;;Total ram usage:        4 bytes
 14925 ;; Hardware stack levels used:    1
 14926 ;; Hardware stack levels required when called:    4
 14927 ;; This function calls:
 14928 ;;		_change_state_to_logs_11
 14929 ;;		_change_state_to_logs_12
 14930 ;;		_change_state_to_logs_22
 14931 ;;		_change_state_to_logs_23
 14932 ;;		_change_state_to_logs_33
 14933 ;;		_change_state_to_logs_34
 14934 ;;		_change_state_to_menu_11
 14935 ;;		_change_state_to_menu_23
 14936 ;;		i2_change_state_to_menu_12
 14937 ;;		i2_change_state_to_menu_22
 14938 ;; This function is called by:
 14939 ;;		_updateMenu
 14940 ;; This function uses a non-reentrant model
 14941 ;;
 14942                           
 14943                           	psect	text55
 14944  00227E                     __ptext55:
 14945                           	opt stack 0
 14946  00227E                     _inputHandler:
 14947                           	opt stack 18
 14948                           
 14949                           ;UI.c: 375: if(firstboot){
 14950                           
 14951                           ;incstack = 0
 14952  00227E  5073               	movf	_firstboot,w,c
 14953  002280  1074               	iorwf	_firstboot+1,w,c
 14954  002282  B4D8               	btfsc	status,2,c
 14955  002284  D00B               	goto	i2l5733
 14956                           
 14957                           ;UI.c: 376: change_state_to_menu_11();
 14958  002286  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 14959                           
 14960                           ;UI.c: 377: firstboot = 0;
 14961  00228A  0E00               	movlw	0
 14962  00228C  6E74               	movwf	_firstboot+1,c
 14963  00228E  0E00               	movlw	0
 14964  002290  6E73               	movwf	_firstboot,c
 14965                           
 14966                           ;UI.c: 378: return 0;
 14967  002292  0E00               	movlw	0
 14968  002294  6E2B               	movwf	?_inputHandler+1,c
 14969  002296  0E00               	movlw	0
 14970  002298  6E2A               	movwf	?_inputHandler,c
 14971  00229A  0012               	return	
 14972  00229C                     i2l5733:
 14973                           
 14974                           ;UI.c: 379: }
 14975                           ;UI.c: 380: if (logstate){
 14976  00229C  0100               	movlb	0	; () banked
 14977  00229E  51F8               	movf	_logstate& (0+255),w,b
 14978  0022A0  0100               	movlb	0	; () banked
 14979  0022A2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 14980  0022A4  B4D8               	btfsc	status,2,c
 14981  0022A6  D0C7               	goto	i2l5851
 14982                           
 14983                           ; BSR set to: 0
 14984                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 14985  0022A8  0E43               	movlw	67
 14986  0022AA  187D               	xorwf	_input,w,c	;volatile
 14987  0022AC  A4D8               	btfss	status,2,c
 14988  0022AE  D012               	goto	i2l5751
 14989                           
 14990                           ; BSR set to: 0
 14991  0022B0  B281               	btfsc	3969,1,c	;volatile
 14992  0022B2  D009               	goto	i2l5743
 14993  0022B4  D00F               	goto	i2l5751
 14994  0022B6                     i2l5741:
 14995                           
 14996                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 14997  0022B6  0E68               	movlw	104
 14998  0022B8  6E2C               	movwf	??_inputHandler& (0+255),c
 14999  0022BA  0EE4               	movlw	228
 15000  0022BC                     i2u727_47:
 15001  0022BC  2EE8               	decfsz	wreg,f,c
 15002  0022BE  D7FE               	bra	i2u727_47
 15003  0022C0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15004  0022C2  D7FC               	bra	i2u727_47
 15005  0022C4  D000               	nop2	
 15006  0022C6                     i2l5743:
 15007  0022C6  B281               	btfsc	3969,1,c	;volatile
 15008  0022C8  D7F6               	goto	i2l5741
 15009  0022CA                     i2l5745:
 15010                           
 15011                           ;UI.c: 385: }
 15012                           ;UI.c: 386: return 0;
 15013  0022CA  0E00               	movlw	0
 15014  0022CC  6E2B               	movwf	?_inputHandler+1,c
 15015  0022CE  0E00               	movlw	0
 15016  0022D0  6E2A               	movwf	?_inputHandler,c
 15017  0022D2  0012               	return	
 15018  0022D4                     i2l5751:
 15019                           
 15020                           ;UI.c: 388: else if (input == 'D'){
 15021  0022D4  0E44               	movlw	68
 15022  0022D6  187D               	xorwf	_input,w,c	;volatile
 15023  0022D8  A4D8               	btfss	status,2,c
 15024  0022DA  D7F7               	goto	i2l5745
 15025                           
 15026                           ;UI.c: 390: logstate = 0;
 15027  0022DC  0E00               	movlw	0
 15028  0022DE  0100               	movlb	0	; () banked
 15029  0022E0  6FF9               	movwf	(_logstate+1)& (0+255),b
 15030  0022E2  0E00               	movlw	0
 15031  0022E4  6FF8               	movwf	_logstate& (0+255),b
 15032                           
 15033                           ;UI.c: 391: switch(cur_state){
 15034  0022E6  D012               	goto	i2l5769
 15035  0022E8                     i2l5755:
 15036                           
 15037                           ;UI.c: 393: change_state_to_logs_11();
 15038  0022E8  EC30  F01E         	call	_change_state_to_logs_11	;wreg free
 15039                           
 15040                           ;UI.c: 394: break;
 15041  0022EC  D7EE               	goto	i2l5745
 15042  0022EE                     i2l5757:
 15043                           
 15044                           ;UI.c: 396: change_state_to_logs_12();
 15045  0022EE  EC18  F01E         	call	_change_state_to_logs_12	;wreg free
 15046                           
 15047                           ;UI.c: 397: break;
 15048  0022F2  D7EB               	goto	i2l5745
 15049  0022F4                     i2l5759:
 15050                           
 15051                           ;UI.c: 399: change_state_to_logs_22();
 15052  0022F4  EC00  F01E         	call	_change_state_to_logs_22	;wreg free
 15053                           
 15054                           ;UI.c: 400: break;
 15055  0022F8  D7E8               	goto	i2l5745
 15056  0022FA                     i2l5761:
 15057                           
 15058                           ;UI.c: 402: change_state_to_logs_23();
 15059  0022FA  EC5F  F01E         	call	_change_state_to_logs_23	;wreg free
 15060                           
 15061                           ;UI.c: 403: break;
 15062  0022FE  D7E5               	goto	i2l5745
 15063  002300                     i2l5763:
 15064                           
 15065                           ;UI.c: 405: change_state_to_logs_33();
 15066  002300  ECE8  F01D         	call	_change_state_to_logs_33	;wreg free
 15067                           
 15068                           ;UI.c: 406: break;
 15069  002304  D7E2               	goto	i2l5745
 15070  002306                     i2l5765:
 15071                           
 15072                           ;UI.c: 408: change_state_to_logs_34();
 15073  002306  ECD0  F01D         	call	_change_state_to_logs_34	;wreg free
 15074                           
 15075                           ;UI.c: 410: }
 15076                           
 15077                           ;UI.c: 409: break;
 15078  00230A  D7DF               	goto	i2l5745
 15079  00230C                     i2l5769:
 15080  00230C  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15081  002310  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15082                           
 15083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15084                           ; Switch size 1, requested type "space"
 15085                           ; Number of cases is 2, Range of values is 3 to 4
 15086                           ; switch strategies available:
 15087                           ; Name         Instructions Cycles
 15088                           ; simple_byte            7     4 (average)
 15089                           ;	Chosen strategy is simple_byte
 15090  002314  502D               	movf	??_inputHandler+1,w,c
 15091  002316  0A03               	xorlw	3	; case 3
 15092  002318  B4D8               	btfsc	status,2,c
 15093  00231A  D004               	goto	i2l7639
 15094  00231C  0A07               	xorlw	7	; case 4
 15095  00231E  B4D8               	btfsc	status,2,c
 15096  002320  D00F               	goto	i2l7641
 15097  002322  D7D3               	goto	i2l5745
 15098  002324                     i2l7639:
 15099                           
 15100                           ; Switch size 1, requested type "space"
 15101                           ; Number of cases is 4, Range of values is 243 to 255
 15102                           ; switch strategies available:
 15103                           ; Name         Instructions Cycles
 15104                           ; simple_byte           13     7 (average)
 15105                           ;	Chosen strategy is simple_byte
 15106  002324  502C               	movf	??_inputHandler,w,c
 15107  002326  0AF3               	xorlw	243	; case 243
 15108  002328  B4D8               	btfsc	status,2,c
 15109  00232A  D7DE               	goto	i2l5755
 15110  00232C  0A07               	xorlw	7	; case 244
 15111  00232E  B4D8               	btfsc	status,2,c
 15112  002330  D7DE               	goto	i2l5757
 15113  002332  0A0A               	xorlw	10	; case 254
 15114  002334  B4D8               	btfsc	status,2,c
 15115  002336  D7DE               	goto	i2l5759
 15116  002338  0A01               	xorlw	1	; case 255
 15117  00233A  B4D8               	btfsc	status,2,c
 15118  00233C  D7DE               	goto	i2l5761
 15119  00233E  D7C5               	goto	i2l5745
 15120  002340                     i2l7641:
 15121                           
 15122                           ; Switch size 1, requested type "space"
 15123                           ; Number of cases is 2, Range of values is 9 to 10
 15124                           ; switch strategies available:
 15125                           ; Name         Instructions Cycles
 15126                           ; simple_byte            7     4 (average)
 15127                           ;	Chosen strategy is simple_byte
 15128  002340  502C               	movf	??_inputHandler,w,c
 15129  002342  0A09               	xorlw	9	; case 9
 15130  002344  B4D8               	btfsc	status,2,c
 15131  002346  D7DC               	goto	i2l5763
 15132  002348  0A03               	xorlw	3	; case 10
 15133  00234A  B4D8               	btfsc	status,2,c
 15134  00234C  D7DC               	goto	i2l5765
 15135  00234E  D7BD               	goto	i2l5745
 15136  002350                     i2l5781:
 15137                           
 15138                           ;UI.c: 420: if(cur_state == 11){
 15139  002350  0E0B               	movlw	11
 15140  002352  0100               	movlb	0	; () banked
 15141  002354  19DE               	xorwf	_cur_state& (0+255),w,b
 15142  002356  0100               	movlb	0	; () banked
 15143  002358  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15144  00235A  A4D8               	btfss	status,2,c
 15145  00235C  D005               	goto	i2l5789
 15146                           
 15147                           ; BSR set to: 0
 15148                           ;UI.c: 421: return 0;
 15149  00235E  0E00               	movlw	0
 15150  002360  6E2B               	movwf	?_inputHandler+1,c
 15151  002362  0E00               	movlw	0
 15152  002364  6E2A               	movwf	?_inputHandler,c
 15153                           
 15154                           ; BSR set to: 0
 15155  002366  0012               	return	
 15156  002368                     i2l5789:
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;UI.c: 423: else{
 15160                           ;UI.c: 424: change_state_to_menu_11();
 15161  002368  ECB8  F01D         	call	_change_state_to_menu_11	;wreg free
 15162                           
 15163                           ;UI.c: 425: }
 15164                           ;UI.c: 426: return 0;
 15165  00236C  0E00               	movlw	0
 15166  00236E  6E2B               	movwf	?_inputHandler+1,c
 15167  002370  0E00               	movlw	0
 15168  002372  6E2A               	movwf	?_inputHandler,c
 15169  002374  0012               	return	
 15170  002376                     i2l5795:
 15171                           
 15172                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15173  002376  0E16               	movlw	22
 15174  002378  0100               	movlb	0	; () banked
 15175  00237A  19DE               	xorwf	_cur_state& (0+255),w,b
 15176  00237C  0100               	movlb	0	; () banked
 15177  00237E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15178  002380  B4D8               	btfsc	status,2,c
 15179  002382  D007               	goto	i2l5799
 15180                           
 15181                           ; BSR set to: 0
 15182  002384  0E0C               	movlw	12
 15183  002386  0100               	movlb	0	; () banked
 15184  002388  19DE               	xorwf	_cur_state& (0+255),w,b
 15185  00238A  0100               	movlb	0	; () banked
 15186  00238C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15187  00238E  A4D8               	btfss	status,2,c
 15188  002390  D005               	goto	i2l5805
 15189  002392                     i2l5799:
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;UI.c: 429: return 0;
 15193  002392  0E00               	movlw	0
 15194  002394  6E2B               	movwf	?_inputHandler+1,c
 15195  002396  0E00               	movlw	0
 15196  002398  6E2A               	movwf	?_inputHandler,c
 15197                           
 15198                           ; BSR set to: 0
 15199  00239A  0012               	return	
 15200  00239C                     i2l5805:
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;UI.c: 431: else if(cur_state == 23){
 15204  00239C  0E17               	movlw	23
 15205  00239E  0100               	movlb	0	; () banked
 15206  0023A0  19DE               	xorwf	_cur_state& (0+255),w,b
 15207  0023A2  0100               	movlb	0	; () banked
 15208  0023A4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15209  0023A6  A4D8               	btfss	status,2,c
 15210  0023A8  D003               	goto	i2l5809
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;UI.c: 432: change_state_to_menu_22();
 15214  0023AA  EC70  F01D         	call	i2_change_state_to_menu_22	;wreg free
 15215                           
 15216                           ;UI.c: 433: }
 15217  0023AE  D002               	goto	i2l5811
 15218  0023B0                     i2l5809:
 15219                           
 15220                           ;UI.c: 434: else{
 15221                           ;UI.c: 435: change_state_to_menu_12();
 15222  0023B0  EC88  F01D         	call	i2_change_state_to_menu_12	;wreg free
 15223  0023B4                     i2l5811:
 15224                           
 15225                           ;UI.c: 436: }
 15226                           ;UI.c: 437: return 0;
 15227  0023B4  0E00               	movlw	0
 15228  0023B6  6E2B               	movwf	?_inputHandler+1,c
 15229  0023B8  0E00               	movlw	0
 15230  0023BA  6E2A               	movwf	?_inputHandler,c
 15231  0023BC  0012               	return	
 15232  0023BE                     i2l5815:
 15233                           
 15234                           ;UI.c: 439: if(cur_state == 23){
 15235  0023BE  0E17               	movlw	23
 15236  0023C0  0100               	movlb	0	; () banked
 15237  0023C2  19DE               	xorwf	_cur_state& (0+255),w,b
 15238  0023C4  0100               	movlb	0	; () banked
 15239  0023C6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15240  0023C8  A4D8               	btfss	status,2,c
 15241  0023CA  D005               	goto	i2l5823
 15242                           
 15243                           ; BSR set to: 0
 15244                           ;UI.c: 440: return 0;
 15245  0023CC  0E00               	movlw	0
 15246  0023CE  6E2B               	movwf	?_inputHandler+1,c
 15247  0023D0  0E00               	movlw	0
 15248  0023D2  6E2A               	movwf	?_inputHandler,c
 15249                           
 15250                           ; BSR set to: 0
 15251  0023D4  0012               	return	
 15252  0023D6                     i2l5823:
 15253                           
 15254                           ; BSR set to: 0
 15255                           ;UI.c: 442: else{
 15256                           ;UI.c: 443: change_state_to_menu_23();
 15257  0023D6  ECA0  F01D         	call	_change_state_to_menu_23	;wreg free
 15258                           
 15259                           ;UI.c: 444: }
 15260                           ;UI.c: 445: return 0;
 15261  0023DA  0E00               	movlw	0
 15262  0023DC  6E2B               	movwf	?_inputHandler+1,c
 15263  0023DE  0E00               	movlw	0
 15264  0023E0  6E2A               	movwf	?_inputHandler,c
 15265  0023E2  0012               	return	
 15266  0023E4                     i2l5829:
 15267                           
 15268                           ;UI.c: 448: up = 1;
 15269  0023E4  0E00               	movlw	0
 15270  0023E6  6E76               	movwf	_up+1,c
 15271  0023E8  0E01               	movlw	1
 15272  0023EA  6E75               	movwf	_up,c
 15273                           
 15274                           ;UI.c: 449: return 1;
 15275  0023EC  0E00               	movlw	0
 15276  0023EE  6E2B               	movwf	?_inputHandler+1,c
 15277  0023F0  0E01               	movlw	1
 15278  0023F2  6E2A               	movwf	?_inputHandler,c
 15279  0023F4  0012               	return	
 15280  0023F6                     i2l5833:
 15281                           
 15282                           ;UI.c: 451: down = 1;
 15283  0023F6  0E00               	movlw	0
 15284  0023F8  6E68               	movwf	_down+1,c
 15285  0023FA  0E01               	movlw	1
 15286  0023FC  6E67               	movwf	_down,c
 15287                           
 15288                           ;UI.c: 452: return 1;
 15289  0023FE  0E00               	movlw	0
 15290  002400  6E2B               	movwf	?_inputHandler+1,c
 15291  002402  0E01               	movlw	1
 15292  002404  6E2A               	movwf	?_inputHandler,c
 15293  002406  0012               	return	
 15294  002408                     i2l5837:
 15295                           
 15296                           ;UI.c: 454: enter = 1;
 15297  002408  0E00               	movlw	0
 15298  00240A  6E6A               	movwf	_enter+1,c
 15299  00240C  0E01               	movlw	1
 15300  00240E  6E69               	movwf	_enter,c
 15301                           
 15302                           ;UI.c: 455: return 1;
 15303  002410  0E00               	movlw	0
 15304  002412  6E2B               	movwf	?_inputHandler+1,c
 15305  002414  0E01               	movlw	1
 15306  002416  6E2A               	movwf	?_inputHandler,c
 15307  002418  0012               	return	
 15308  00241A                     i2l5841:
 15309                           
 15310                           ;UI.c: 457: back = 1;
 15311  00241A  0E00               	movlw	0
 15312  00241C  6E5C               	movwf	_back+1,c
 15313  00241E  0E01               	movlw	1
 15314  002420  6E5B               	movwf	_back,c
 15315                           
 15316                           ;UI.c: 458: return 1;
 15317  002422  0E00               	movlw	0
 15318  002424  6E2B               	movwf	?_inputHandler+1,c
 15319  002426  0E01               	movlw	1
 15320  002428  6E2A               	movwf	?_inputHandler,c
 15321  00242A  0012               	return	
 15322  00242C                     i2l5845:
 15323                           
 15324                           ;UI.c: 461: return 1;
 15325  00242C  0E00               	movlw	0
 15326  00242E  6E2B               	movwf	?_inputHandler+1,c
 15327  002430  0E01               	movlw	1
 15328  002432  6E2A               	movwf	?_inputHandler,c
 15329                           
 15330                           ;UI.c: 462: }
 15331  002434  0012               	return	
 15332  002436                     i2l5851:
 15333  002436  507D               	movf	_input,w,c	;volatile
 15334                           
 15335                           ; Switch size 1, requested type "space"
 15336                           ; Number of cases is 7, Range of values is 49 to 68
 15337                           ; switch strategies available:
 15338                           ; Name         Instructions Cycles
 15339                           ; simple_byte           22    12 (average)
 15340                           ;	Chosen strategy is simple_byte
 15341  002438  0A31               	xorlw	49	; case 49
 15342  00243A  B4D8               	btfsc	status,2,c
 15343  00243C  D789               	goto	i2l5781
 15344  00243E  0A03               	xorlw	3	; case 50
 15345  002440  B4D8               	btfsc	status,2,c
 15346  002442  D799               	goto	i2l5795
 15347  002444  0A01               	xorlw	1	; case 51
 15348  002446  B4D8               	btfsc	status,2,c
 15349  002448  D7BA               	goto	i2l5815
 15350  00244A  0A72               	xorlw	114	; case 65
 15351  00244C  B4D8               	btfsc	status,2,c
 15352  00244E  D7CA               	goto	i2l5829
 15353  002450  0A03               	xorlw	3	; case 66
 15354  002452  B4D8               	btfsc	status,2,c
 15355  002454  D7D0               	goto	i2l5833
 15356  002456  0A01               	xorlw	1	; case 67
 15357  002458  B4D8               	btfsc	status,2,c
 15358  00245A  D7D6               	goto	i2l5837
 15359  00245C  0A07               	xorlw	7	; case 68
 15360  00245E  B4D8               	btfsc	status,2,c
 15361  002460  D7DC               	goto	i2l5841
 15362  002462  D7E4               	goto	i2l5845
 15363  002464                     __end_of_inputHandler:
 15364                           	opt stack 0
 15365                           pclatu	equ	0xFFB
 15366                           pclath	equ	0xFFA
 15367                           tblptru	equ	0xFF8
 15368                           tblptrh	equ	0xFF7
 15369                           tblptrl	equ	0xFF6
 15370                           tablat	equ	0xFF5
 15371                           prodh	equ	0xFF4
 15372                           prodl	equ	0xFF3
 15373                           intcon	equ	0xFF2
 15374                           intcon2	equ	0xFF1
 15375                           intcon3	equ	0xFF0
 15376                           indf0	equ	0xFEF
 15377                           postinc0	equ	0xFEE
 15378                           fsr0h	equ	0xFEA
 15379                           fsr0l	equ	0xFE9
 15380                           wreg	equ	0xFE8
 15381                           postdec1	equ	0xFE5
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           fsr2h	equ	0xFDA
 15388                           fsr2l	equ	0xFD9
 15389                           status	equ	0xFD8
 15390                           
 15391 ;; *************** function i2_change_state_to_menu_22 *****************
 15392 ;; Defined at:
 15393 ;;		line 496 in file "UI.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;		None
 15396 ;; Auto vars:     Size  Location     Type
 15397 ;;		None
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      void 
 15400 ;; Registers used:
 15401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15411 ;;Total ram usage:        0 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; Hardware stack levels required when called:    3
 15414 ;; This function calls:
 15415 ;;		i2_lcdInst
 15416 ;;		i2_printf
 15417 ;; This function is called by:
 15418 ;;		_updateMenu
 15419 ;;		_inputHandler
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text56
 15424  003AE0                     __ptext56:
 15425                           	opt stack 0
 15426  003AE0                     i2_change_state_to_menu_22:
 15427                           	opt stack 19
 15428                           
 15429                           ;UI.c: 497: cur_state = 22;
 15430                           
 15431                           ;incstack = 0
 15432  003AE0  0E00               	movlw	0
 15433  003AE2  0100               	movlb	0	; () banked
 15434  003AE4  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15435  003AE6  0E16               	movlw	22
 15436  003AE8  6FDE               	movwf	_cur_state& (0+255),b
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;UI.c: 499: lcdInst(0b10000000);;
 15440  003AEA  0E80               	movlw	128
 15441  003AEC  EC91  F01F         	call	i2_lcdInst
 15442                           
 15443                           ;UI.c: 500: printf("2. SORT        <");
 15444  003AF0  0E00               	movlw	low STR_34
 15445  003AF2  6E0D               	movwf	i2printf@f,c
 15446  003AF4  0EFE               	movlw	high STR_34
 15447  003AF6  6E0E               	movwf	i2printf@f+1,c
 15448  003AF8  ECAF  F00A         	call	i2_printf	;wreg free
 15449                           
 15450                           ;UI.c: 501: lcdInst(0b11000000);;
 15451  003AFC  0EC0               	movlw	192
 15452  003AFE  EC91  F01F         	call	i2_lcdInst
 15453                           
 15454                           ;UI.c: 502: printf("3. LOGS         ");
 15455  003B02  0E45               	movlw	low STR_36
 15456  003B04  6E0D               	movwf	i2printf@f,c
 15457  003B06  0EFD               	movlw	high STR_36
 15458  003B08  6E0E               	movwf	i2printf@f+1,c
 15459  003B0A  ECAF  F00A         	call	i2_printf	;wreg free
 15460  003B0E  0012               	return		;funcret
 15461  003B10                     __end_ofi2_change_state_to_menu_22:
 15462                           	opt stack 0
 15463                           pclatu	equ	0xFFB
 15464                           pclath	equ	0xFFA
 15465                           tblptru	equ	0xFF8
 15466                           tblptrh	equ	0xFF7
 15467                           tblptrl	equ	0xFF6
 15468                           tablat	equ	0xFF5
 15469                           prodh	equ	0xFF4
 15470                           prodl	equ	0xFF3
 15471                           intcon	equ	0xFF2
 15472                           intcon2	equ	0xFF1
 15473                           intcon3	equ	0xFF0
 15474                           indf0	equ	0xFEF
 15475                           postinc0	equ	0xFEE
 15476                           fsr0h	equ	0xFEA
 15477                           fsr0l	equ	0xFE9
 15478                           wreg	equ	0xFE8
 15479                           postdec1	equ	0xFE5
 15480                           fsr1h	equ	0xFE2
 15481                           fsr1l	equ	0xFE1
 15482                           indf2	equ	0xFDF
 15483                           postinc2	equ	0xFDE
 15484                           postdec2	equ	0xFDD
 15485                           fsr2h	equ	0xFDA
 15486                           fsr2l	equ	0xFD9
 15487                           status	equ	0xFD8
 15488                           
 15489 ;; *************** function i2_change_state_to_menu_12 *****************
 15490 ;; Defined at:
 15491 ;;		line 488 in file "UI.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;		None
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;		None
 15496 ;; Return value:  Size  Location     Type
 15497 ;;                  1    wreg      void 
 15498 ;; Registers used:
 15499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15500 ;; Tracked objects:
 15501 ;;		On entry : 0/0
 15502 ;;		On exit  : 0/0
 15503 ;;		Unchanged: 0/0
 15504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15509 ;;Total ram usage:        0 bytes
 15510 ;; Hardware stack levels used:    1
 15511 ;; Hardware stack levels required when called:    3
 15512 ;; This function calls:
 15513 ;;		i2_lcdInst
 15514 ;;		i2_printf
 15515 ;; This function is called by:
 15516 ;;		_updateMenu
 15517 ;;		_inputHandler
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           	psect	text57
 15522  003B10                     __ptext57:
 15523                           	opt stack 0
 15524  003B10                     i2_change_state_to_menu_12:
 15525                           	opt stack 19
 15526                           
 15527                           ;UI.c: 489: cur_state = 12;
 15528                           
 15529                           ;incstack = 0
 15530  003B10  0E00               	movlw	0
 15531  003B12  0100               	movlb	0	; () banked
 15532  003B14  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15533  003B16  0E0C               	movlw	12
 15534  003B18  6FDE               	movwf	_cur_state& (0+255),b
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;UI.c: 491: lcdInst(0b10000000);;
 15538  003B1A  0E80               	movlw	128
 15539  003B1C  EC91  F01F         	call	i2_lcdInst
 15540                           
 15541                           ;UI.c: 492: printf("1. DATE/TIME    ");
 15542  003B20  0E67               	movlw	low STR_33
 15543  003B22  6E0D               	movwf	i2printf@f,c
 15544  003B24  0EFD               	movlw	high STR_33
 15545  003B26  6E0E               	movwf	i2printf@f+1,c
 15546  003B28  ECAF  F00A         	call	i2_printf	;wreg free
 15547                           
 15548                           ;UI.c: 493: lcdInst(0b11000000);;
 15549  003B2C  0EC0               	movlw	192
 15550  003B2E  EC91  F01F         	call	i2_lcdInst
 15551                           
 15552                           ;UI.c: 494: printf("2. SORT        <");
 15553  003B32  0E00               	movlw	low STR_34
 15554  003B34  6E0D               	movwf	i2printf@f,c
 15555  003B36  0EFE               	movlw	high STR_34
 15556  003B38  6E0E               	movwf	i2printf@f+1,c
 15557  003B3A  ECAF  F00A         	call	i2_printf	;wreg free
 15558  003B3E  0012               	return		;funcret
 15559  003B40                     __end_ofi2_change_state_to_menu_12:
 15560                           	opt stack 0
 15561                           pclatu	equ	0xFFB
 15562                           pclath	equ	0xFFA
 15563                           tblptru	equ	0xFF8
 15564                           tblptrh	equ	0xFF7
 15565                           tblptrl	equ	0xFF6
 15566                           tablat	equ	0xFF5
 15567                           prodh	equ	0xFF4
 15568                           prodl	equ	0xFF3
 15569                           intcon	equ	0xFF2
 15570                           intcon2	equ	0xFF1
 15571                           intcon3	equ	0xFF0
 15572                           indf0	equ	0xFEF
 15573                           postinc0	equ	0xFEE
 15574                           fsr0h	equ	0xFEA
 15575                           fsr0l	equ	0xFE9
 15576                           wreg	equ	0xFE8
 15577                           postdec1	equ	0xFE5
 15578                           fsr1h	equ	0xFE2
 15579                           fsr1l	equ	0xFE1
 15580                           indf2	equ	0xFDF
 15581                           postinc2	equ	0xFDE
 15582                           postdec2	equ	0xFDD
 15583                           fsr2h	equ	0xFDA
 15584                           fsr2l	equ	0xFD9
 15585                           status	equ	0xFD8
 15586                           
 15587 ;; *************** function _change_state_to_menu_23 *****************
 15588 ;; Defined at:
 15589 ;;		line 504 in file "UI.c"
 15590 ;; Parameters:    Size  Location     Type
 15591 ;;		None
 15592 ;; Auto vars:     Size  Location     Type
 15593 ;;		None
 15594 ;; Return value:  Size  Location     Type
 15595 ;;                  1    wreg      void 
 15596 ;; Registers used:
 15597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15598 ;; Tracked objects:
 15599 ;;		On entry : 0/0
 15600 ;;		On exit  : 0/0
 15601 ;;		Unchanged: 0/0
 15602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15607 ;;Total ram usage:        0 bytes
 15608 ;; Hardware stack levels used:    1
 15609 ;; Hardware stack levels required when called:    3
 15610 ;; This function calls:
 15611 ;;		i2_lcdInst
 15612 ;;		i2_printf
 15613 ;; This function is called by:
 15614 ;;		_updateMenu
 15615 ;;		_inputHandler
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           	psect	text58
 15620  003B40                     __ptext58:
 15621                           	opt stack 0
 15622  003B40                     _change_state_to_menu_23:
 15623                           	opt stack 18
 15624                           
 15625                           ;UI.c: 505: cur_state = 23;
 15626                           
 15627                           ;incstack = 0
 15628  003B40  0E00               	movlw	0
 15629  003B42  0100               	movlb	0	; () banked
 15630  003B44  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15631  003B46  0E17               	movlw	23
 15632  003B48  6FDE               	movwf	_cur_state& (0+255),b
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;UI.c: 507: lcdInst(0b10000000);;
 15636  003B4A  0E80               	movlw	128
 15637  003B4C  EC91  F01F         	call	i2_lcdInst
 15638                           
 15639                           ;UI.c: 508: printf("2. SORT         ");
 15640  003B50  0E56               	movlw	low STR_32
 15641  003B52  6E0D               	movwf	i2printf@f,c
 15642  003B54  0EFD               	movlw	high STR_32
 15643  003B56  6E0E               	movwf	i2printf@f+1,c
 15644  003B58  ECAF  F00A         	call	i2_printf	;wreg free
 15645                           
 15646                           ;UI.c: 509: lcdInst(0b11000000);;
 15647  003B5C  0EC0               	movlw	192
 15648  003B5E  EC91  F01F         	call	i2_lcdInst
 15649                           
 15650                           ;UI.c: 510: printf("3. LOGS        <");
 15651  003B62  0EEF               	movlw	low STR_38
 15652  003B64  6E0D               	movwf	i2printf@f,c
 15653  003B66  0EFD               	movlw	high STR_38
 15654  003B68  6E0E               	movwf	i2printf@f+1,c
 15655  003B6A  ECAF  F00A         	call	i2_printf	;wreg free
 15656  003B6E  0012               	return		;funcret
 15657  003B70                     __end_of_change_state_to_menu_23:
 15658                           	opt stack 0
 15659                           pclatu	equ	0xFFB
 15660                           pclath	equ	0xFFA
 15661                           tblptru	equ	0xFF8
 15662                           tblptrh	equ	0xFF7
 15663                           tblptrl	equ	0xFF6
 15664                           tablat	equ	0xFF5
 15665                           prodh	equ	0xFF4
 15666                           prodl	equ	0xFF3
 15667                           intcon	equ	0xFF2
 15668                           intcon2	equ	0xFF1
 15669                           intcon3	equ	0xFF0
 15670                           indf0	equ	0xFEF
 15671                           postinc0	equ	0xFEE
 15672                           fsr0h	equ	0xFEA
 15673                           fsr0l	equ	0xFE9
 15674                           wreg	equ	0xFE8
 15675                           postdec1	equ	0xFE5
 15676                           fsr1h	equ	0xFE2
 15677                           fsr1l	equ	0xFE1
 15678                           indf2	equ	0xFDF
 15679                           postinc2	equ	0xFDE
 15680                           postdec2	equ	0xFDD
 15681                           fsr2h	equ	0xFDA
 15682                           fsr2l	equ	0xFD9
 15683                           status	equ	0xFD8
 15684                           
 15685 ;; *************** function _change_state_to_menu_11 *****************
 15686 ;; Defined at:
 15687 ;;		line 480 in file "UI.c"
 15688 ;; Parameters:    Size  Location     Type
 15689 ;;		None
 15690 ;; Auto vars:     Size  Location     Type
 15691 ;;		None
 15692 ;; Return value:  Size  Location     Type
 15693 ;;                  1    wreg      void 
 15694 ;; Registers used:
 15695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15696 ;; Tracked objects:
 15697 ;;		On entry : 0/0
 15698 ;;		On exit  : 0/0
 15699 ;;		Unchanged: 0/0
 15700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15705 ;;Total ram usage:        0 bytes
 15706 ;; Hardware stack levels used:    1
 15707 ;; Hardware stack levels required when called:    3
 15708 ;; This function calls:
 15709 ;;		i2_lcdInst
 15710 ;;		i2_printf
 15711 ;; This function is called by:
 15712 ;;		_updateMenu
 15713 ;;		_inputHandler
 15714 ;; This function uses a non-reentrant model
 15715 ;;
 15716                           
 15717                           	psect	text59
 15718  003B70                     __ptext59:
 15719                           	opt stack 0
 15720  003B70                     _change_state_to_menu_11:
 15721                           	opt stack 18
 15722                           
 15723                           ;UI.c: 481: cur_state = 11;
 15724                           
 15725                           ;incstack = 0
 15726  003B70  0E00               	movlw	0
 15727  003B72  0100               	movlb	0	; () banked
 15728  003B74  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15729  003B76  0E0B               	movlw	11
 15730  003B78  6FDE               	movwf	_cur_state& (0+255),b
 15731                           
 15732                           ; BSR set to: 0
 15733                           ;UI.c: 483: lcdInst(0b10000000);;
 15734  003B7A  0E80               	movlw	128
 15735  003B7C  EC91  F01F         	call	i2_lcdInst
 15736                           
 15737                           ;UI.c: 484: printf("1. DATE/TIME   <");
 15738  003B80  0E11               	movlw	low STR_31
 15739  003B82  6E0D               	movwf	i2printf@f,c
 15740  003B84  0EFE               	movlw	high STR_31
 15741  003B86  6E0E               	movwf	i2printf@f+1,c
 15742  003B88  ECAF  F00A         	call	i2_printf	;wreg free
 15743                           
 15744                           ;UI.c: 485: lcdInst(0b11000000);;
 15745  003B8C  0EC0               	movlw	192
 15746  003B8E  EC91  F01F         	call	i2_lcdInst
 15747                           
 15748                           ;UI.c: 486: printf("2. SORT         ");
 15749  003B92  0E56               	movlw	low STR_32
 15750  003B94  6E0D               	movwf	i2printf@f,c
 15751  003B96  0EFD               	movlw	high STR_32
 15752  003B98  6E0E               	movwf	i2printf@f+1,c
 15753  003B9A  ECAF  F00A         	call	i2_printf	;wreg free
 15754  003B9E  0012               	return		;funcret
 15755  003BA0                     __end_of_change_state_to_menu_11:
 15756                           	opt stack 0
 15757                           pclatu	equ	0xFFB
 15758                           pclath	equ	0xFFA
 15759                           tblptru	equ	0xFF8
 15760                           tblptrh	equ	0xFF7
 15761                           tblptrl	equ	0xFF6
 15762                           tablat	equ	0xFF5
 15763                           prodh	equ	0xFF4
 15764                           prodl	equ	0xFF3
 15765                           intcon	equ	0xFF2
 15766                           intcon2	equ	0xFF1
 15767                           intcon3	equ	0xFF0
 15768                           indf0	equ	0xFEF
 15769                           postinc0	equ	0xFEE
 15770                           fsr0h	equ	0xFEA
 15771                           fsr0l	equ	0xFE9
 15772                           wreg	equ	0xFE8
 15773                           postdec1	equ	0xFE5
 15774                           fsr1h	equ	0xFE2
 15775                           fsr1l	equ	0xFE1
 15776                           indf2	equ	0xFDF
 15777                           postinc2	equ	0xFDE
 15778                           postdec2	equ	0xFDD
 15779                           fsr2h	equ	0xFDA
 15780                           fsr2l	equ	0xFD9
 15781                           status	equ	0xFD8
 15782                           
 15783 ;; *************** function _change_state_to_logs_34 *****************
 15784 ;; Defined at:
 15785 ;;		line 547 in file "UI.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;		None
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;		None
 15790 ;; Return value:  Size  Location     Type
 15791 ;;                  1    wreg      void 
 15792 ;; Registers used:
 15793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15803 ;;Total ram usage:        0 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    3
 15806 ;; This function calls:
 15807 ;;		i2_lcdInst
 15808 ;;		i2_printf
 15809 ;; This function is called by:
 15810 ;;		_updateMenu
 15811 ;;		_inputHandler
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text60
 15816  003BA0                     __ptext60:
 15817                           	opt stack 0
 15818  003BA0                     _change_state_to_logs_34:
 15819                           	opt stack 18
 15820                           
 15821                           ;UI.c: 548: cur_state = 1034;
 15822                           
 15823                           ;incstack = 0
 15824  003BA0  0E04               	movlw	4
 15825  003BA2  0100               	movlb	0	; () banked
 15826  003BA4  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15827  003BA6  0E0A               	movlw	10
 15828  003BA8  6FDE               	movwf	_cur_state& (0+255),b
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;UI.c: 549: lcdInst(0b10000000);;
 15832  003BAA  0E80               	movlw	128
 15833  003BAC  EC91  F01F         	call	i2_lcdInst
 15834                           
 15835                           ;UI.c: 550: printf("LOG 3           ");
 15836  003BB0  0E23               	movlw	low STR_44
 15837  003BB2  6E0D               	movwf	i2printf@f,c
 15838  003BB4  0EFD               	movlw	high STR_44
 15839  003BB6  6E0E               	movwf	i2printf@f+1,c
 15840  003BB8  ECAF  F00A         	call	i2_printf	;wreg free
 15841                           
 15842                           ;UI.c: 551: lcdInst(0b11000000);;
 15843  003BBC  0EC0               	movlw	192
 15844  003BBE  EC91  F01F         	call	i2_lcdInst
 15845                           
 15846                           ;UI.c: 552: printf("LOG 4          <");
 15847  003BC2  0EDE               	movlw	low STR_50
 15848  003BC4  6E0D               	movwf	i2printf@f,c
 15849  003BC6  0EFD               	movlw	high STR_50
 15850  003BC8  6E0E               	movwf	i2printf@f+1,c
 15851  003BCA  ECAF  F00A         	call	i2_printf	;wreg free
 15852  003BCE  0012               	return		;funcret
 15853  003BD0                     __end_of_change_state_to_logs_34:
 15854                           	opt stack 0
 15855                           pclatu	equ	0xFFB
 15856                           pclath	equ	0xFFA
 15857                           tblptru	equ	0xFF8
 15858                           tblptrh	equ	0xFF7
 15859                           tblptrl	equ	0xFF6
 15860                           tablat	equ	0xFF5
 15861                           prodh	equ	0xFF4
 15862                           prodl	equ	0xFF3
 15863                           intcon	equ	0xFF2
 15864                           intcon2	equ	0xFF1
 15865                           intcon3	equ	0xFF0
 15866                           indf0	equ	0xFEF
 15867                           postinc0	equ	0xFEE
 15868                           fsr0h	equ	0xFEA
 15869                           fsr0l	equ	0xFE9
 15870                           wreg	equ	0xFE8
 15871                           postdec1	equ	0xFE5
 15872                           fsr1h	equ	0xFE2
 15873                           fsr1l	equ	0xFE1
 15874                           indf2	equ	0xFDF
 15875                           postinc2	equ	0xFDE
 15876                           postdec2	equ	0xFDD
 15877                           fsr2h	equ	0xFDA
 15878                           fsr2l	equ	0xFD9
 15879                           status	equ	0xFD8
 15880                           
 15881 ;; *************** function _change_state_to_logs_33 *****************
 15882 ;; Defined at:
 15883 ;;		line 540 in file "UI.c"
 15884 ;; Parameters:    Size  Location     Type
 15885 ;;		None
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;		None
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  1    wreg      void 
 15890 ;; Registers used:
 15891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15901 ;;Total ram usage:        0 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    3
 15904 ;; This function calls:
 15905 ;;		i2_lcdInst
 15906 ;;		i2_printf
 15907 ;; This function is called by:
 15908 ;;		_updateMenu
 15909 ;;		_inputHandler
 15910 ;; This function uses a non-reentrant model
 15911 ;;
 15912                           
 15913                           	psect	text61
 15914  003BD0                     __ptext61:
 15915                           	opt stack 0
 15916  003BD0                     _change_state_to_logs_33:
 15917                           	opt stack 18
 15918                           
 15919                           ;UI.c: 541: cur_state = 1033;
 15920                           
 15921                           ;incstack = 0
 15922  003BD0  0E04               	movlw	4
 15923  003BD2  0100               	movlb	0	; () banked
 15924  003BD4  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15925  003BD6  0E09               	movlw	9
 15926  003BD8  6FDE               	movwf	_cur_state& (0+255),b
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;UI.c: 542: lcdInst(0b10000000);;
 15930  003BDA  0E80               	movlw	128
 15931  003BDC  EC91  F01F         	call	i2_lcdInst
 15932                           
 15933                           ;UI.c: 543: printf("LOG 3          <");
 15934  003BE0  0ECD               	movlw	low STR_46
 15935  003BE2  6E0D               	movwf	i2printf@f,c
 15936  003BE4  0EFD               	movlw	high STR_46
 15937  003BE6  6E0E               	movwf	i2printf@f+1,c
 15938  003BE8  ECAF  F00A         	call	i2_printf	;wreg free
 15939                           
 15940                           ;UI.c: 544: lcdInst(0b11000000);;
 15941  003BEC  0EC0               	movlw	192
 15942  003BEE  EC91  F01F         	call	i2_lcdInst
 15943                           
 15944                           ;UI.c: 545: printf("LOG 4           ");
 15945  003BF2  0E34               	movlw	low STR_48
 15946  003BF4  6E0D               	movwf	i2printf@f,c
 15947  003BF6  0EFD               	movlw	high STR_48
 15948  003BF8  6E0E               	movwf	i2printf@f+1,c
 15949  003BFA  ECAF  F00A         	call	i2_printf	;wreg free
 15950  003BFE  0012               	return		;funcret
 15951  003C00                     __end_of_change_state_to_logs_33:
 15952                           	opt stack 0
 15953                           pclatu	equ	0xFFB
 15954                           pclath	equ	0xFFA
 15955                           tblptru	equ	0xFF8
 15956                           tblptrh	equ	0xFF7
 15957                           tblptrl	equ	0xFF6
 15958                           tablat	equ	0xFF5
 15959                           prodh	equ	0xFF4
 15960                           prodl	equ	0xFF3
 15961                           intcon	equ	0xFF2
 15962                           intcon2	equ	0xFF1
 15963                           intcon3	equ	0xFF0
 15964                           indf0	equ	0xFEF
 15965                           postinc0	equ	0xFEE
 15966                           fsr0h	equ	0xFEA
 15967                           fsr0l	equ	0xFE9
 15968                           wreg	equ	0xFE8
 15969                           postdec1	equ	0xFE5
 15970                           fsr1h	equ	0xFE2
 15971                           fsr1l	equ	0xFE1
 15972                           indf2	equ	0xFDF
 15973                           postinc2	equ	0xFDE
 15974                           postdec2	equ	0xFDD
 15975                           fsr2h	equ	0xFDA
 15976                           fsr2l	equ	0xFD9
 15977                           status	equ	0xFD8
 15978                           
 15979 ;; *************** function _change_state_to_logs_23 *****************
 15980 ;; Defined at:
 15981 ;;		line 533 in file "UI.c"
 15982 ;; Parameters:    Size  Location     Type
 15983 ;;		None
 15984 ;; Auto vars:     Size  Location     Type
 15985 ;;		None
 15986 ;; Return value:  Size  Location     Type
 15987 ;;                  1    wreg      void 
 15988 ;; Registers used:
 15989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15990 ;; Tracked objects:
 15991 ;;		On entry : 0/0
 15992 ;;		On exit  : 0/0
 15993 ;;		Unchanged: 0/0
 15994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15999 ;;Total ram usage:        0 bytes
 16000 ;; Hardware stack levels used:    1
 16001 ;; Hardware stack levels required when called:    3
 16002 ;; This function calls:
 16003 ;;		i2_lcdInst
 16004 ;;		i2_printf
 16005 ;; This function is called by:
 16006 ;;		_updateMenu
 16007 ;;		_inputHandler
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           	psect	text62
 16012  003CBE                     __ptext62:
 16013                           	opt stack 0
 16014  003CBE                     _change_state_to_logs_23:
 16015                           	opt stack 18
 16016                           
 16017                           ;UI.c: 534: cur_state = 1023;
 16018                           
 16019                           ;incstack = 0
 16020  003CBE  0E03               	movlw	3
 16021  003CC0  0100               	movlb	0	; () banked
 16022  003CC2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16023  003CC4  69DE               	setf	_cur_state& (0+255),b
 16024                           
 16025                           ; BSR set to: 0
 16026                           ;UI.c: 535: lcdInst(0b10000000);;
 16027  003CC6  0E80               	movlw	128
 16028  003CC8  EC91  F01F         	call	i2_lcdInst
 16029                           
 16030                           ;UI.c: 536: printf("LOG 2           ");
 16031  003CCC  0E12               	movlw	low STR_40
 16032  003CCE  6E0D               	movwf	i2printf@f,c
 16033  003CD0  0EFD               	movlw	high STR_40
 16034  003CD2  6E0E               	movwf	i2printf@f+1,c
 16035  003CD4  ECAF  F00A         	call	i2_printf	;wreg free
 16036                           
 16037                           ;UI.c: 537: lcdInst(0b11000000);;
 16038  003CD8  0EC0               	movlw	192
 16039  003CDA  EC91  F01F         	call	i2_lcdInst
 16040                           
 16041                           ;UI.c: 538: printf("LOG 3          <");
 16042  003CDE  0ECD               	movlw	low STR_46
 16043  003CE0  6E0D               	movwf	i2printf@f,c
 16044  003CE2  0EFD               	movlw	high STR_46
 16045  003CE4  6E0E               	movwf	i2printf@f+1,c
 16046  003CE6  ECAF  F00A         	call	i2_printf	;wreg free
 16047  003CEA  0012               	return		;funcret
 16048  003CEC                     __end_of_change_state_to_logs_23:
 16049                           	opt stack 0
 16050                           pclatu	equ	0xFFB
 16051                           pclath	equ	0xFFA
 16052                           tblptru	equ	0xFF8
 16053                           tblptrh	equ	0xFF7
 16054                           tblptrl	equ	0xFF6
 16055                           tablat	equ	0xFF5
 16056                           prodh	equ	0xFF4
 16057                           prodl	equ	0xFF3
 16058                           intcon	equ	0xFF2
 16059                           intcon2	equ	0xFF1
 16060                           intcon3	equ	0xFF0
 16061                           indf0	equ	0xFEF
 16062                           postinc0	equ	0xFEE
 16063                           fsr0h	equ	0xFEA
 16064                           fsr0l	equ	0xFE9
 16065                           wreg	equ	0xFE8
 16066                           postdec1	equ	0xFE5
 16067                           fsr1h	equ	0xFE2
 16068                           fsr1l	equ	0xFE1
 16069                           indf2	equ	0xFDF
 16070                           postinc2	equ	0xFDE
 16071                           postdec2	equ	0xFDD
 16072                           fsr2h	equ	0xFDA
 16073                           fsr2l	equ	0xFD9
 16074                           status	equ	0xFD8
 16075                           
 16076 ;; *************** function _change_state_to_logs_22 *****************
 16077 ;; Defined at:
 16078 ;;		line 526 in file "UI.c"
 16079 ;; Parameters:    Size  Location     Type
 16080 ;;		None
 16081 ;; Auto vars:     Size  Location     Type
 16082 ;;		None
 16083 ;; Return value:  Size  Location     Type
 16084 ;;                  1    wreg      void 
 16085 ;; Registers used:
 16086 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16087 ;; Tracked objects:
 16088 ;;		On entry : 0/0
 16089 ;;		On exit  : 0/0
 16090 ;;		Unchanged: 0/0
 16091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16096 ;;Total ram usage:        0 bytes
 16097 ;; Hardware stack levels used:    1
 16098 ;; Hardware stack levels required when called:    3
 16099 ;; This function calls:
 16100 ;;		i2_lcdInst
 16101 ;;		i2_printf
 16102 ;; This function is called by:
 16103 ;;		_updateMenu
 16104 ;;		_inputHandler
 16105 ;; This function uses a non-reentrant model
 16106 ;;
 16107                           
 16108                           	psect	text63
 16109  003C00                     __ptext63:
 16110                           	opt stack 0
 16111  003C00                     _change_state_to_logs_22:
 16112                           	opt stack 18
 16113                           
 16114                           ;UI.c: 527: cur_state = 1022;
 16115                           
 16116                           ;incstack = 0
 16117  003C00  0E03               	movlw	3
 16118  003C02  0100               	movlb	0	; () banked
 16119  003C04  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16120  003C06  0EFE               	movlw	254
 16121  003C08  6FDE               	movwf	_cur_state& (0+255),b
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;UI.c: 528: lcdInst(0b10000000);;
 16125  003C0A  0E80               	movlw	128
 16126  003C0C  EC91  F01F         	call	i2_lcdInst
 16127                           
 16128                           ;UI.c: 529: printf("LOG 2          <");
 16129  003C10  0EBC               	movlw	low STR_42
 16130  003C12  6E0D               	movwf	i2printf@f,c
 16131  003C14  0EFD               	movlw	high STR_42
 16132  003C16  6E0E               	movwf	i2printf@f+1,c
 16133  003C18  ECAF  F00A         	call	i2_printf	;wreg free
 16134                           
 16135                           ;UI.c: 530: lcdInst(0b11000000);;
 16136  003C1C  0EC0               	movlw	192
 16137  003C1E  EC91  F01F         	call	i2_lcdInst
 16138                           
 16139                           ;UI.c: 531: printf("LOG 3           ");
 16140  003C22  0E23               	movlw	low STR_44
 16141  003C24  6E0D               	movwf	i2printf@f,c
 16142  003C26  0EFD               	movlw	high STR_44
 16143  003C28  6E0E               	movwf	i2printf@f+1,c
 16144  003C2A  ECAF  F00A         	call	i2_printf	;wreg free
 16145  003C2E  0012               	return		;funcret
 16146  003C30                     __end_of_change_state_to_logs_22:
 16147                           	opt stack 0
 16148                           pclatu	equ	0xFFB
 16149                           pclath	equ	0xFFA
 16150                           tblptru	equ	0xFF8
 16151                           tblptrh	equ	0xFF7
 16152                           tblptrl	equ	0xFF6
 16153                           tablat	equ	0xFF5
 16154                           prodh	equ	0xFF4
 16155                           prodl	equ	0xFF3
 16156                           intcon	equ	0xFF2
 16157                           intcon2	equ	0xFF1
 16158                           intcon3	equ	0xFF0
 16159                           indf0	equ	0xFEF
 16160                           postinc0	equ	0xFEE
 16161                           fsr0h	equ	0xFEA
 16162                           fsr0l	equ	0xFE9
 16163                           wreg	equ	0xFE8
 16164                           postdec1	equ	0xFE5
 16165                           fsr1h	equ	0xFE2
 16166                           fsr1l	equ	0xFE1
 16167                           indf2	equ	0xFDF
 16168                           postinc2	equ	0xFDE
 16169                           postdec2	equ	0xFDD
 16170                           fsr2h	equ	0xFDA
 16171                           fsr2l	equ	0xFD9
 16172                           status	equ	0xFD8
 16173                           
 16174 ;; *************** function _change_state_to_logs_12 *****************
 16175 ;; Defined at:
 16176 ;;		line 519 in file "UI.c"
 16177 ;; Parameters:    Size  Location     Type
 16178 ;;		None
 16179 ;; Auto vars:     Size  Location     Type
 16180 ;;		None
 16181 ;; Return value:  Size  Location     Type
 16182 ;;                  1    wreg      void 
 16183 ;; Registers used:
 16184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16185 ;; Tracked objects:
 16186 ;;		On entry : 0/0
 16187 ;;		On exit  : 0/0
 16188 ;;		Unchanged: 0/0
 16189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;Total ram usage:        0 bytes
 16195 ;; Hardware stack levels used:    1
 16196 ;; Hardware stack levels required when called:    3
 16197 ;; This function calls:
 16198 ;;		i2_lcdInst
 16199 ;;		i2_printf
 16200 ;; This function is called by:
 16201 ;;		_updateMenu
 16202 ;;		_inputHandler
 16203 ;; This function uses a non-reentrant model
 16204 ;;
 16205                           
 16206                           	psect	text64
 16207  003C30                     __ptext64:
 16208                           	opt stack 0
 16209  003C30                     _change_state_to_logs_12:
 16210                           	opt stack 18
 16211                           
 16212                           ;UI.c: 520: cur_state = 1012;
 16213                           
 16214                           ;incstack = 0
 16215  003C30  0E03               	movlw	3
 16216  003C32  0100               	movlb	0	; () banked
 16217  003C34  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16218  003C36  0EF4               	movlw	244
 16219  003C38  6FDE               	movwf	_cur_state& (0+255),b
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;UI.c: 521: lcdInst(0b10000000);;
 16223  003C3A  0E80               	movlw	128
 16224  003C3C  EC91  F01F         	call	i2_lcdInst
 16225                           
 16226                           ;UI.c: 522: printf("LOG 1           ");
 16227  003C40  0E01               	movlw	low STR_41
 16228  003C42  6E0D               	movwf	i2printf@f,c
 16229  003C44  0EFD               	movlw	high STR_41
 16230  003C46  6E0E               	movwf	i2printf@f+1,c
 16231  003C48  ECAF  F00A         	call	i2_printf	;wreg free
 16232                           
 16233                           ;UI.c: 523: lcdInst(0b11000000);;
 16234  003C4C  0EC0               	movlw	192
 16235  003C4E  EC91  F01F         	call	i2_lcdInst
 16236                           
 16237                           ;UI.c: 524: printf("LOG 2          <");
 16238  003C52  0EBC               	movlw	low STR_42
 16239  003C54  6E0D               	movwf	i2printf@f,c
 16240  003C56  0EFD               	movlw	high STR_42
 16241  003C58  6E0E               	movwf	i2printf@f+1,c
 16242  003C5A  ECAF  F00A         	call	i2_printf	;wreg free
 16243  003C5E  0012               	return		;funcret
 16244  003C60                     __end_of_change_state_to_logs_12:
 16245                           	opt stack 0
 16246                           pclatu	equ	0xFFB
 16247                           pclath	equ	0xFFA
 16248                           tblptru	equ	0xFF8
 16249                           tblptrh	equ	0xFF7
 16250                           tblptrl	equ	0xFF6
 16251                           tablat	equ	0xFF5
 16252                           prodh	equ	0xFF4
 16253                           prodl	equ	0xFF3
 16254                           intcon	equ	0xFF2
 16255                           intcon2	equ	0xFF1
 16256                           intcon3	equ	0xFF0
 16257                           indf0	equ	0xFEF
 16258                           postinc0	equ	0xFEE
 16259                           fsr0h	equ	0xFEA
 16260                           fsr0l	equ	0xFE9
 16261                           wreg	equ	0xFE8
 16262                           postdec1	equ	0xFE5
 16263                           fsr1h	equ	0xFE2
 16264                           fsr1l	equ	0xFE1
 16265                           indf2	equ	0xFDF
 16266                           postinc2	equ	0xFDE
 16267                           postdec2	equ	0xFDD
 16268                           fsr2h	equ	0xFDA
 16269                           fsr2l	equ	0xFD9
 16270                           status	equ	0xFD8
 16271                           
 16272 ;; *************** function _change_state_to_logs_11 *****************
 16273 ;; Defined at:
 16274 ;;		line 512 in file "UI.c"
 16275 ;; Parameters:    Size  Location     Type
 16276 ;;		None
 16277 ;; Auto vars:     Size  Location     Type
 16278 ;;		None
 16279 ;; Return value:  Size  Location     Type
 16280 ;;                  1    wreg      void 
 16281 ;; Registers used:
 16282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16283 ;; Tracked objects:
 16284 ;;		On entry : 0/0
 16285 ;;		On exit  : 0/0
 16286 ;;		Unchanged: 0/0
 16287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16292 ;;Total ram usage:        0 bytes
 16293 ;; Hardware stack levels used:    1
 16294 ;; Hardware stack levels required when called:    3
 16295 ;; This function calls:
 16296 ;;		i2_lcdInst
 16297 ;;		i2_printf
 16298 ;; This function is called by:
 16299 ;;		_updateMenu
 16300 ;;		_inputHandler
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           	psect	text65
 16305  003C60                     __ptext65:
 16306                           	opt stack 0
 16307  003C60                     _change_state_to_logs_11:
 16308                           	opt stack 18
 16309                           
 16310                           ;UI.c: 513: cur_state = 1011;
 16311                           
 16312                           ;incstack = 0
 16313  003C60  0E03               	movlw	3
 16314  003C62  0100               	movlb	0	; () banked
 16315  003C64  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16316  003C66  0EF3               	movlw	243
 16317  003C68  6FDE               	movwf	_cur_state& (0+255),b
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;UI.c: 514: lcdInst(0b10000000);;
 16321  003C6A  0E80               	movlw	128
 16322  003C6C  EC91  F01F         	call	i2_lcdInst
 16323                           
 16324                           ;UI.c: 515: printf("LOG 1          <");
 16325  003C70  0EAB               	movlw	low STR_39
 16326  003C72  6E0D               	movwf	i2printf@f,c
 16327  003C74  0EFD               	movlw	high STR_39
 16328  003C76  6E0E               	movwf	i2printf@f+1,c
 16329  003C78  ECAF  F00A         	call	i2_printf	;wreg free
 16330                           
 16331                           ;UI.c: 516: lcdInst(0b11000000);;
 16332  003C7C  0EC0               	movlw	192
 16333  003C7E  EC91  F01F         	call	i2_lcdInst
 16334                           
 16335                           ;UI.c: 517: printf("LOG 2           ");
 16336  003C82  0E12               	movlw	low STR_40
 16337  003C84  6E0D               	movwf	i2printf@f,c
 16338  003C86  0EFD               	movlw	high STR_40
 16339  003C88  6E0E               	movwf	i2printf@f+1,c
 16340  003C8A  ECAF  F00A         	call	i2_printf	;wreg free
 16341  003C8E  0012               	return		;funcret
 16342  003C90                     __end_of_change_state_to_logs_11:
 16343                           	opt stack 0
 16344                           pclatu	equ	0xFFB
 16345                           pclath	equ	0xFFA
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           intcon2	equ	0xFF1
 16354                           intcon3	equ	0xFF0
 16355                           indf0	equ	0xFEF
 16356                           postinc0	equ	0xFEE
 16357                           fsr0h	equ	0xFEA
 16358                           fsr0l	equ	0xFE9
 16359                           wreg	equ	0xFE8
 16360                           postdec1	equ	0xFE5
 16361                           fsr1h	equ	0xFE2
 16362                           fsr1l	equ	0xFE1
 16363                           indf2	equ	0xFDF
 16364                           postinc2	equ	0xFDE
 16365                           postdec2	equ	0xFDD
 16366                           fsr2h	equ	0xFDA
 16367                           fsr2l	equ	0xFD9
 16368                           status	equ	0xFD8
 16369                           
 16370 ;; *************** function _dispLogs *****************
 16371 ;; Defined at:
 16372 ;;		line 465 in file "UI.c"
 16373 ;; Parameters:    Size  Location     Type
 16374 ;;  myLog           2   17[COMRAM] int 
 16375 ;; Auto vars:     Size  Location     Type
 16376 ;;		None
 16377 ;; Return value:  Size  Location     Type
 16378 ;;                  1    wreg      void 
 16379 ;; Registers used:
 16380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16381 ;; Tracked objects:
 16382 ;;		On entry : 0/0
 16383 ;;		On exit  : 0/0
 16384 ;;		Unchanged: 0/0
 16385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16390 ;;Total ram usage:        2 bytes
 16391 ;; Hardware stack levels used:    1
 16392 ;; Hardware stack levels required when called:    2
 16393 ;; This function calls:
 16394 ;;		_retrieveLog
 16395 ;; This function is called by:
 16396 ;;		_updateMenu
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           	psect	text66
 16401  003E06                     __ptext66:
 16402                           	opt stack 0
 16403  003E06                     _dispLogs:
 16404                           	opt stack 20
 16405                           
 16406                           ;UI.c: 466: logstate = 1;
 16407                           
 16408                           ;incstack = 0
 16409  003E06  0E00               	movlw	0
 16410  003E08  0100               	movlb	0	; () banked
 16411  003E0A  6FF9               	movwf	(_logstate+1)& (0+255),b
 16412  003E0C  0E01               	movlw	1
 16413  003E0E  6FF8               	movwf	_logstate& (0+255),b
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;UI.c: 467: log = myLog;
 16417  003E10  C012  F0E8         	movff	dispLogs@myLog,_log
 16418  003E14  C013  F0E9         	movff	dispLogs@myLog+1,_log+1
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;UI.c: 468: retrieveLog(myLog - 1);
 16422  003E18  0EFF               	movlw	255
 16423  003E1A  2412               	addwf	dispLogs@myLog,w,c
 16424  003E1C  6E07               	movwf	retrieveLog@logNum,c
 16425  003E1E  0EFF               	movlw	255
 16426  003E20  2013               	addwfc	dispLogs@myLog+1,w,c
 16427  003E22  6E08               	movwf	retrieveLog@logNum+1,c
 16428  003E24  EC6F  F015         	call	_retrieveLog	;wreg free
 16429  003E28  0012               	return		;funcret
 16430  003E2A                     __end_of_dispLogs:
 16431                           	opt stack 0
 16432                           pclatu	equ	0xFFB
 16433                           pclath	equ	0xFFA
 16434                           tblptru	equ	0xFF8
 16435                           tblptrh	equ	0xFF7
 16436                           tblptrl	equ	0xFF6
 16437                           tablat	equ	0xFF5
 16438                           prodh	equ	0xFF4
 16439                           prodl	equ	0xFF3
 16440                           intcon	equ	0xFF2
 16441                           intcon2	equ	0xFF1
 16442                           intcon3	equ	0xFF0
 16443                           indf0	equ	0xFEF
 16444                           postinc0	equ	0xFEE
 16445                           fsr0h	equ	0xFEA
 16446                           fsr0l	equ	0xFE9
 16447                           wreg	equ	0xFE8
 16448                           postdec1	equ	0xFE5
 16449                           fsr1h	equ	0xFE2
 16450                           fsr1l	equ	0xFE1
 16451                           indf2	equ	0xFDF
 16452                           postinc2	equ	0xFDE
 16453                           postdec2	equ	0xFDD
 16454                           fsr2h	equ	0xFDA
 16455                           fsr2l	equ	0xFD9
 16456                           status	equ	0xFD8
 16457                           
 16458 ;; *************** function _retrieveLog *****************
 16459 ;; Defined at:
 16460 ;;		line 134 in file "EEPROM.c"
 16461 ;; Parameters:    Size  Location     Type
 16462 ;;  logNum          2    6[COMRAM] int 
 16463 ;; Auto vars:     Size  Location     Type
 16464 ;;  i               2   13[COMRAM] int 
 16465 ;;  addr            2   15[COMRAM] unsigned short 
 16466 ;;  byte3           1   12[COMRAM] unsigned char 
 16467 ;;  byte2           1   11[COMRAM] unsigned char 
 16468 ;;  byte1           1   10[COMRAM] unsigned char 
 16469 ;; Return value:  Size  Location     Type
 16470 ;;                  1    wreg      void 
 16471 ;; Registers used:
 16472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16473 ;; Tracked objects:
 16474 ;;		On entry : 0/0
 16475 ;;		On exit  : 0/0
 16476 ;;		Unchanged: 0/0
 16477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16482 ;;Total ram usage:       11 bytes
 16483 ;; Hardware stack levels used:    1
 16484 ;; Hardware stack levels required when called:    1
 16485 ;; This function calls:
 16486 ;;		i2_EEPROM_read
 16487 ;;		i2___wmul
 16488 ;; This function is called by:
 16489 ;;		_dispLogs
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           	psect	text67
 16494  002ADE                     __ptext67:
 16495                           	opt stack 0
 16496  002ADE                     _retrieveLog:
 16497                           	opt stack 20
 16498                           
 16499                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 16500                           
 16501                           ;incstack = 0
 16502  002ADE  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 16503  002AE2  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 16504  002AE6  0E00               	movlw	0
 16505  002AE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 16506  002AEA  0E0B               	movlw	11
 16507  002AEC  6E03               	movwf	i2___wmul@multiplicand,c
 16508  002AEE  ECCB  F01E         	call	i2___wmul	;wreg free
 16509  002AF2  0E01               	movlw	1
 16510  002AF4  2401               	addwf	?i2___wmul,w,c
 16511  002AF6  6E10               	movwf	retrieveLog@addr,c
 16512  002AF8  0E00               	movlw	0
 16513  002AFA  2002               	addwfc	?i2___wmul+1,w,c
 16514  002AFC  6E11               	movwf	retrieveLog@addr+1,c
 16515                           
 16516                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 16517  002AFE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16518  002B02  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16519  002B06  EC5D  F01F         	call	i2_EEPROM_read	;wreg free
 16520  002B0A  6E0B               	movwf	retrieveLog@byte1,c
 16521                           
 16522                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 16523  002B0C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 16524  002B10  0E80               	movlw	128
 16525  002B12  1609               	andwf	??_retrieveLog,f,c
 16526  002B14  5009               	movf	??_retrieveLog,w,c
 16527  002B16  0100               	movlb	0	; () banked
 16528  002B18  6FEA               	movwf	_log_completion& (0+255),b
 16529  002B1A  6BEB               	clrf	(_log_completion+1)& (0+255),b
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 16533  002B1C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 16534  002B20  0E0F               	movlw	15
 16535  002B22  1609               	andwf	??_retrieveLog,f,c
 16536  002B24  5009               	movf	??_retrieveLog,w,c
 16537  002B26  0100               	movlb	0	; () banked
 16538  002B28  6FF4               	movwf	_log_count_total& (0+255),b
 16539  002B2A  6BF5               	clrf	(_log_count_total+1)& (0+255),b
 16540                           
 16541                           ; BSR set to: 0
 16542                           ;EEPROM.c: 146: addr++;
 16543  002B2C  4A10               	infsnz	retrieveLog@addr,f,c
 16544  002B2E  2A11               	incf	retrieveLog@addr+1,f,c
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 16548  002B30  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16549  002B34  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16550  002B38  EC5D  F01F         	call	i2_EEPROM_read	;wreg free
 16551  002B3C  6E0C               	movwf	retrieveLog@byte2,c
 16552                           
 16553                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 16554  002B3E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 16555  002B42  0EF0               	movlw	240
 16556  002B44  1609               	andwf	??_retrieveLog,f,c
 16557  002B46  5009               	movf	??_retrieveLog,w,c
 16558  002B48  0100               	movlb	0	; () banked
 16559  002B4A  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 16560  002B4C  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 16561                           
 16562                           ; BSR set to: 0
 16563                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 16564  002B4E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 16565  002B52  0E0F               	movlw	15
 16566  002B54  1609               	andwf	??_retrieveLog,f,c
 16567  002B56  5009               	movf	??_retrieveLog,w,c
 16568  002B58  0100               	movlb	0	; () banked
 16569  002B5A  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 16570  002B5C  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 16571                           
 16572                           ; BSR set to: 0
 16573                           ;EEPROM.c: 152: addr++;
 16574  002B5E  4A10               	infsnz	retrieveLog@addr,f,c
 16575  002B60  2A11               	incf	retrieveLog@addr+1,f,c
 16576                           
 16577                           ; BSR set to: 0
 16578                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 16579  002B62  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16580  002B66  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16581  002B6A  EC5D  F01F         	call	i2_EEPROM_read	;wreg free
 16582  002B6E  6E0D               	movwf	retrieveLog@byte3,c
 16583                           
 16584                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 16585  002B70  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 16586  002B74  0EF0               	movlw	240
 16587  002B76  1609               	andwf	??_retrieveLog,f,c
 16588  002B78  5009               	movf	??_retrieveLog,w,c
 16589  002B7A  0100               	movlb	0	; () banked
 16590  002B7C  6FEE               	movwf	_log_count_can_w_lab& (0+255),b
 16591  002B7E  6BEF               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 16595  002B80  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 16596  002B84  0E0F               	movlw	15
 16597  002B86  1609               	andwf	??_retrieveLog,f,c
 16598  002B88  5009               	movf	??_retrieveLog,w,c
 16599  002B8A  0100               	movlb	0	; () banked
 16600  002B8C  6FEC               	movwf	_log_count_can_no_lab& (0+255),b
 16601  002B8E  6BED               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 16602                           
 16603                           ; BSR set to: 0
 16604                           ;EEPROM.c: 156: addr++;
 16605  002B90  4A10               	infsnz	retrieveLog@addr,f,c
 16606  002B92  2A11               	incf	retrieveLog@addr+1,f,c
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 16610  002B94  0E00               	movlw	0
 16611  002B96  6E0F               	movwf	retrieveLog@i+1,c
 16612  002B98  0E00               	movlw	0
 16613  002B9A  6E0E               	movwf	retrieveLog@i,c
 16614  002B9C                     i2l5489:
 16615                           
 16616                           ; BSR set to: 0
 16617  002B9C  BE0F               	btfsc	retrieveLog@i+1,7,c
 16618  002B9E  D006               	goto	i2l5493
 16619  002BA0  500F               	movf	retrieveLog@i+1,w,c
 16620  002BA2  E11E               	bnz	i2l5501
 16621  002BA4  0E07               	movlw	7
 16622  002BA6  5C0E               	subwf	retrieveLog@i,w,c
 16623  002BA8  B0D8               	btfsc	status,0,c
 16624  002BAA  D01A               	goto	i2l5501
 16625  002BAC                     i2l5493:
 16626                           
 16627                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 16628  002BAC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16629  002BB0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16630  002BB4  EC5D  F01F         	call	i2_EEPROM_read	;wreg free
 16631  002BB8  6E09               	movwf	??_retrieveLog& (0+255),c
 16632  002BBA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 16633  002BBC  90D8               	bcf	status,0,c
 16634  002BBE  340E               	rlcf	retrieveLog@i,w,c
 16635  002BC0  6ED9               	movwf	fsr2l,c
 16636  002BC2  340F               	rlcf	retrieveLog@i+1,w,c
 16637  002BC4  6EDA               	movwf	fsr2h,c
 16638  002BC6  0E00               	movlw	low _log_startTime
 16639  002BC8  26D9               	addwf	fsr2l,f,c
 16640  002BCA  0E01               	movlw	high _log_startTime
 16641  002BCC  22DA               	addwfc	fsr2h,f,c
 16642  002BCE  C009  FFDE         	movff	??_retrieveLog,postinc2
 16643  002BD2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 16644                           
 16645                           ;EEPROM.c: 161: addr++;
 16646  002BD6  4A10               	infsnz	retrieveLog@addr,f,c
 16647  002BD8  2A11               	incf	retrieveLog@addr+1,f,c
 16648  002BDA  4A0E               	infsnz	retrieveLog@i,f,c
 16649  002BDC  2A0F               	incf	retrieveLog@i+1,f,c
 16650  002BDE  D7DE               	goto	i2l5489
 16651  002BE0                     i2l5501:
 16652                           
 16653                           ;EEPROM.c: 162: }
 16654                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 16655  002BE0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16656  002BE4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16657  002BE8  EC5D  F01F         	call	i2_EEPROM_read	;wreg free
 16658  002BEC  6E09               	movwf	??_retrieveLog& (0+255),c
 16659  002BEE  5009               	movf	??_retrieveLog,w,c
 16660  002BF0  0100               	movlb	0	; () banked
 16661  002BF2  6FF6               	movwf	_log_total_time& (0+255),b
 16662  002BF4  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 16663                           
 16664                           ; BSR set to: 0
 16665  002BF6  0012               	return		;funcret
 16666  002BF8                     __end_of_retrieveLog:
 16667                           	opt stack 0
 16668                           pclatu	equ	0xFFB
 16669                           pclath	equ	0xFFA
 16670                           tblptru	equ	0xFF8
 16671                           tblptrh	equ	0xFF7
 16672                           tblptrl	equ	0xFF6
 16673                           tablat	equ	0xFF5
 16674                           prodh	equ	0xFF4
 16675                           prodl	equ	0xFF3
 16676                           intcon	equ	0xFF2
 16677                           intcon2	equ	0xFF1
 16678                           intcon3	equ	0xFF0
 16679                           indf0	equ	0xFEF
 16680                           postinc0	equ	0xFEE
 16681                           fsr0h	equ	0xFEA
 16682                           fsr0l	equ	0xFE9
 16683                           wreg	equ	0xFE8
 16684                           postdec1	equ	0xFE5
 16685                           fsr1h	equ	0xFE2
 16686                           fsr1l	equ	0xFE1
 16687                           indf2	equ	0xFDF
 16688                           postinc2	equ	0xFDE
 16689                           postdec2	equ	0xFDD
 16690                           fsr2h	equ	0xFDA
 16691                           fsr2l	equ	0xFD9
 16692                           status	equ	0xFD8
 16693                           
 16694 ;; *************** function i2_EEPROM_read *****************
 16695 ;; Defined at:
 16696 ;;		line 68 in file "EEPROM.c"
 16697 ;; Parameters:    Size  Location     Type
 16698 ;;  address         2    0[COMRAM] unsigned short 
 16699 ;; Auto vars:     Size  Location     Type
 16700 ;;		None
 16701 ;; Return value:  Size  Location     Type
 16702 ;;                  1    wreg      unsigned char 
 16703 ;; Registers used:
 16704 ;;		wreg, status,2
 16705 ;; Tracked objects:
 16706 ;;		On entry : 0/0
 16707 ;;		On exit  : 0/0
 16708 ;;		Unchanged: 0/0
 16709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;Total ram usage:        2 bytes
 16715 ;; Hardware stack levels used:    1
 16716 ;; This function calls:
 16717 ;;		Nothing
 16718 ;; This function is called by:
 16719 ;;		_retrieveLog
 16720 ;; This function uses a non-reentrant model
 16721 ;;
 16722                           
 16723                           	psect	text68
 16724  003EBA                     __ptext68:
 16725                           	opt stack 0
 16726  003EBA                     i2_EEPROM_read:
 16727                           	opt stack 20
 16728                           
 16729                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;incstack = 0
 16733  003EBA  5002               	movf	i2EEPROM_read@address+1,w,c
 16734  003EBC  6EAA               	movwf	4010,c	;volatile
 16735                           
 16736                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 16737  003EBE  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 16738                           
 16739                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 16740  003EC2  9EA6               	bcf	4006,7,c	;volatile
 16741                           
 16742                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 16743  003EC4  9CA6               	bcf	4006,6,c	;volatile
 16744                           
 16745                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 16746  003EC6  80A6               	bsf	4006,0,c	;volatile
 16747  003EC8                     i2l911:
 16748  003EC8  B0A6               	btfsc	4006,0,c	;volatile
 16749  003ECA  D7FE               	goto	i2l911
 16750                           
 16751                           ;EEPROM.c: 81: return EEDATA;
 16752  003ECC  50A8               	movf	4008,w,c	;volatile
 16753  003ECE  0012               	return	
 16754  003ED0                     __end_ofi2_EEPROM_read:
 16755                           	opt stack 0
 16756                           pclatu	equ	0xFFB
 16757                           pclath	equ	0xFFA
 16758                           tblptru	equ	0xFF8
 16759                           tblptrh	equ	0xFF7
 16760                           tblptrl	equ	0xFF6
 16761                           tablat	equ	0xFF5
 16762                           prodh	equ	0xFF4
 16763                           prodl	equ	0xFF3
 16764                           intcon	equ	0xFF2
 16765                           intcon2	equ	0xFF1
 16766                           intcon3	equ	0xFF0
 16767                           indf0	equ	0xFEF
 16768                           postinc0	equ	0xFEE
 16769                           fsr0h	equ	0xFEA
 16770                           fsr0l	equ	0xFE9
 16771                           wreg	equ	0xFE8
 16772                           postdec1	equ	0xFE5
 16773                           fsr1h	equ	0xFE2
 16774                           fsr1l	equ	0xFE1
 16775                           indf2	equ	0xFDF
 16776                           postinc2	equ	0xFDE
 16777                           postdec2	equ	0xFDD
 16778                           fsr2h	equ	0xFDA
 16779                           fsr2l	equ	0xFD9
 16780                           status	equ	0xFD8
 16781                           
 16782 ;; *************** function _printSortTimer *****************
 16783 ;; Defined at:
 16784 ;;		line 255 in file "sort.c"
 16785 ;; Parameters:    Size  Location     Type
 16786 ;;		None
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;  i               2   72[COMRAM] int 
 16789 ;;  curTime        14   46[COMRAM] int [7]
 16790 ;;  timeDiff        2   70[COMRAM] unsigned int 
 16791 ;;  sec             2   66[COMRAM] int 
 16792 ;;  min             2   64[COMRAM] int 
 16793 ;;  cur_sec         2   62[COMRAM] unsigned int 
 16794 ;;  start_sec       2   60[COMRAM] unsigned int 
 16795 ;;  hour            2   44[COMRAM] int 
 16796 ;; Return value:  Size  Location     Type
 16797 ;;                  1    wreg      void 
 16798 ;; Registers used:
 16799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;Total ram usage:       33 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; Hardware stack levels required when called:    3
 16812 ;; This function calls:
 16813 ;;		i2___lwdiv
 16814 ;;		i2___lwmod
 16815 ;;		i2___wmul
 16816 ;;		i2_getRTC
 16817 ;;		i2_lcdInst
 16818 ;;		i2_printf
 16819 ;; This function is called by:
 16820 ;;		_handler
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           	psect	text69
 16825  00208C                     __ptext69:
 16826                           	opt stack 0
 16827  00208C                     _printSortTimer:
 16828                           	opt stack 20
 16829                           
 16830                           ;sort.c: 256: getRTC();
 16831                           
 16832                           ;incstack = 0
 16833  00208C  EC5B  F01A         	call	i2_getRTC	;wreg free
 16834                           
 16835                           ;sort.c: 257: int curTime[7];
 16836                           ;sort.c: 258: for(int i = 0; i < 7; i++){
 16837  002090  0E00               	movlw	0
 16838  002092  6E4A               	movwf	printSortTimer@i+1,c
 16839  002094  0E00               	movlw	0
 16840  002096  6E49               	movwf	printSortTimer@i,c
 16841  002098                     i2l7257:
 16842  002098  BE4A               	btfsc	printSortTimer@i+1,7,c
 16843  00209A  D006               	goto	i2l7261
 16844  00209C  504A               	movf	printSortTimer@i+1,w,c
 16845  00209E  E131               	bnz	i2l7267
 16846  0020A0  0E07               	movlw	7
 16847  0020A2  5C49               	subwf	printSortTimer@i,w,c
 16848  0020A4  B0D8               	btfsc	status,0,c
 16849  0020A6  D02D               	goto	i2l7267
 16850  0020A8                     i2l7261:
 16851                           
 16852                           ;sort.c: 259: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16853  0020A8  0E24               	movlw	low _time
 16854  0020AA  2449               	addwf	printSortTimer@i,w,c
 16855  0020AC  6ED9               	movwf	fsr2l,c
 16856  0020AE  0E01               	movlw	high _time
 16857  0020B0  204A               	addwfc	printSortTimer@i+1,w,c
 16858  0020B2  6EDA               	movwf	fsr2h,c
 16859  0020B4  50DF               	movf	indf2,w,c
 16860  0020B6  6E2A               	movwf	??_printSortTimer& (0+255),c
 16861  0020B8  3A2A               	swapf	??_printSortTimer,f,c
 16862  0020BA  0E0F               	movlw	15
 16863  0020BC  162A               	andwf	??_printSortTimer,f,c
 16864  0020BE  0E0F               	movlw	15
 16865  0020C0  162A               	andwf	??_printSortTimer,f,c
 16866  0020C2  502A               	movf	??_printSortTimer,w,c
 16867  0020C4  0D0A               	mullw	10
 16868  0020C6  0E24               	movlw	low _time
 16869  0020C8  2449               	addwf	printSortTimer@i,w,c
 16870  0020CA  6ED9               	movwf	fsr2l,c
 16871  0020CC  0E01               	movlw	high _time
 16872  0020CE  204A               	addwfc	printSortTimer@i+1,w,c
 16873  0020D0  6EDA               	movwf	fsr2h,c
 16874  0020D2  50DF               	movf	indf2,w,c
 16875  0020D4  0B0F               	andlw	15
 16876  0020D6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 16877  0020D8  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 16878  0020DA  50F3               	movf	prodl,w,c
 16879  0020DC  262B               	addwf	??_printSortTimer+1,f,c
 16880  0020DE  50F4               	movf	prodh,w,c
 16881  0020E0  222C               	addwfc	??_printSortTimer+2,f,c
 16882  0020E2  90D8               	bcf	status,0,c
 16883  0020E4  3449               	rlcf	printSortTimer@i,w,c
 16884  0020E6  6ED9               	movwf	fsr2l,c
 16885  0020E8  344A               	rlcf	printSortTimer@i+1,w,c
 16886  0020EA  6EDA               	movwf	fsr2h,c
 16887  0020EC  0E2F               	movlw	low printSortTimer@curTime
 16888  0020EE  26D9               	addwf	fsr2l,f,c
 16889  0020F0  0E00               	movlw	high printSortTimer@curTime
 16890  0020F2  22DA               	addwfc	fsr2h,f,c
 16891  0020F4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 16892  0020F8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 16893  0020FC  4A49               	infsnz	printSortTimer@i,f,c
 16894  0020FE  2A4A               	incf	printSortTimer@i+1,f,c
 16895  002100  D7CB               	goto	i2l7257
 16896  002102                     i2l7267:
 16897                           
 16898                           ;sort.c: 260: }
 16899                           ;sort.c: 261: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 16900  002102  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 16901  002106  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 16902  00210A  0E00               	movlw	0
 16903  00210C  6E04               	movwf	i2___wmul@multiplicand+1,c
 16904  00210E  0E3C               	movlw	60
 16905  002110  6E03               	movwf	i2___wmul@multiplicand,c
 16906  002112  ECCB  F01E         	call	i2___wmul	;wreg free
 16907  002116  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 16908  00211A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 16909  00211E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 16910  002122  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 16911  002126  0E0E               	movlw	14
 16912  002128  6E04               	movwf	i2___wmul@multiplicand+1,c
 16913  00212A  0E10               	movlw	16
 16914  00212C  6E03               	movwf	i2___wmul@multiplicand,c
 16915  00212E  ECCB  F01E         	call	i2___wmul	;wreg free
 16916  002132  5001               	movf	?i2___wmul,w,c
 16917  002134  262A               	addwf	??_printSortTimer,f,c
 16918  002136  5002               	movf	?i2___wmul+1,w,c
 16919  002138  222B               	addwfc	??_printSortTimer+1,f,c
 16920  00213A  0101               	movlb	1	; () banked
 16921  00213C  510E               	movf	_startTime& (0+255),w,b
 16922  00213E  242A               	addwf	??_printSortTimer,w,c
 16923  002140  6E3D               	movwf	printSortTimer@start_sec,c
 16924  002142  0101               	movlb	1	; () banked
 16925  002144  510F               	movf	(_startTime+1)& (0+255),w,b
 16926  002146  202B               	addwfc	??_printSortTimer+1,w,c
 16927  002148  6E3E               	movwf	printSortTimer@start_sec+1,c
 16928                           
 16929                           ;sort.c: 262: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 16930  00214A  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 16931  00214E  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 16932  002152  0E00               	movlw	0
 16933  002154  6E04               	movwf	i2___wmul@multiplicand+1,c
 16934  002156  0E3C               	movlw	60
 16935  002158  6E03               	movwf	i2___wmul@multiplicand,c
 16936  00215A  ECCB  F01E         	call	i2___wmul	;wreg free
 16937  00215E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 16938  002162  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 16939  002166  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 16940  00216A  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 16941  00216E  0E0E               	movlw	14
 16942  002170  6E04               	movwf	i2___wmul@multiplicand+1,c
 16943  002172  0E10               	movlw	16
 16944  002174  6E03               	movwf	i2___wmul@multiplicand,c
 16945  002176  ECCB  F01E         	call	i2___wmul	;wreg free
 16946  00217A  5001               	movf	?i2___wmul,w,c
 16947  00217C  262A               	addwf	??_printSortTimer,f,c
 16948  00217E  5002               	movf	?i2___wmul+1,w,c
 16949  002180  222B               	addwfc	??_printSortTimer+1,f,c
 16950  002182  502F               	movf	printSortTimer@curTime,w,c
 16951  002184  242A               	addwf	??_printSortTimer,w,c
 16952  002186  6E3F               	movwf	printSortTimer@cur_sec,c
 16953  002188  5030               	movf	printSortTimer@curTime+1,w,c
 16954  00218A  202B               	addwfc	??_printSortTimer+1,w,c
 16955  00218C  6E40               	movwf	printSortTimer@cur_sec+1,c
 16956                           
 16957                           ;sort.c: 263: unsigned int timeDiff = cur_sec - start_sec;
 16958  00218E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 16959  002192  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 16960  002196  1E2A               	comf	??_printSortTimer,f,c
 16961  002198  1E2B               	comf	??_printSortTimer+1,f,c
 16962  00219A  4A2A               	infsnz	??_printSortTimer,f,c
 16963  00219C  2A2B               	incf	??_printSortTimer+1,f,c
 16964  00219E  503F               	movf	printSortTimer@cur_sec,w,c
 16965  0021A0  242A               	addwf	??_printSortTimer,w,c
 16966  0021A2  6E47               	movwf	printSortTimer@timeDiff,c
 16967  0021A4  5040               	movf	printSortTimer@cur_sec+1,w,c
 16968  0021A6  202B               	addwfc	??_printSortTimer+1,w,c
 16969  0021A8  6E48               	movwf	printSortTimer@timeDiff+1,c
 16970                           
 16971                           ;sort.c: 265: total_time = timeDiff;
 16972  0021AA  C047  F0FA         	movff	printSortTimer@timeDiff,_total_time
 16973  0021AE  C048  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 16974                           
 16975                           ;sort.c: 267: if(timeDiff >= 10){
 16976  0021B2  5048               	movf	printSortTimer@timeDiff+1,w,c
 16977  0021B4  E104               	bnz	i2u628_40
 16978  0021B6  0E0A               	movlw	10
 16979  0021B8  5C47               	subwf	printSortTimer@timeDiff,w,c
 16980  0021BA  A0D8               	btfss	status,0,c
 16981  0021BC  D003               	goto	i2l7277
 16982  0021BE                     i2u628_40:
 16983                           
 16984                           ;sort.c: 268: machine_state = DoneSorting_state;
 16985  0021BE  0E02               	movlw	2
 16986  0021C0  0100               	movlb	0	; () banked
 16987  0021C2  6FFC               	movwf	_machine_state& (0+255),b
 16988  0021C4                     i2l7277:
 16989                           
 16990                           ;sort.c: 270: }
 16991                           ;sort.c: 272: int hour = timeDiff / 3600;
 16992  0021C4  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 16993  0021C8  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 16994  0021CC  0E0E               	movlw	14
 16995  0021CE  6E09               	movwf	i2___lwdiv@divisor+1,c
 16996  0021D0  0E10               	movlw	16
 16997  0021D2  6E08               	movwf	i2___lwdiv@divisor,c
 16998  0021D4  ECE2  F01B         	call	i2___lwdiv	;wreg free
 16999  0021D8  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17000  0021DC  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17001                           
 17002                           ;sort.c: 273: int min = (timeDiff % 3600) / 60;
 17003  0021E0  0E0E               	movlw	14
 17004  0021E2  6E04               	movwf	i2___lwmod@divisor+1,c
 17005  0021E4  0E10               	movlw	16
 17006  0021E6  6E03               	movwf	i2___lwmod@divisor,c
 17007  0021E8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17008  0021EC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17009  0021F0  ECC8  F01C         	call	i2___lwmod	;wreg free
 17010  0021F4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17011  0021F8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17012  0021FC  0E00               	movlw	0
 17013  0021FE  6E09               	movwf	i2___lwdiv@divisor+1,c
 17014  002200  0E3C               	movlw	60
 17015  002202  6E08               	movwf	i2___lwdiv@divisor,c
 17016  002204  ECE2  F01B         	call	i2___lwdiv	;wreg free
 17017  002208  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17018  00220C  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17019                           
 17020                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17021  002210  0E0E               	movlw	14
 17022  002212  6E04               	movwf	i2___lwmod@divisor+1,c
 17023  002214  0E10               	movlw	16
 17024  002216  6E03               	movwf	i2___lwmod@divisor,c
 17025  002218  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17026  00221C  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17027  002220  ECC8  F01C         	call	i2___lwmod	;wreg free
 17028  002224  C001  F045         	movff	?i2___lwmod,_printSortTimer$2264
 17029  002228  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2264+1
 17030                           
 17031                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17032  00222C  C045  F001         	movff	_printSortTimer$2264,i2___lwmod@dividend
 17033  002230  C046  F002         	movff	_printSortTimer$2264+1,i2___lwmod@dividend+1
 17034  002234  0E00               	movlw	0
 17035  002236  6E04               	movwf	i2___lwmod@divisor+1,c
 17036  002238  0E3C               	movlw	60
 17037  00223A  6E03               	movwf	i2___lwmod@divisor,c
 17038  00223C  ECC8  F01C         	call	i2___lwmod	;wreg free
 17039  002240  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17040  002244  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17041                           
 17042                           ;sort.c: 276: lcdInst(0b10000000);;
 17043  002248  0E80               	movlw	128
 17044  00224A  EC91  F01F         	call	i2_lcdInst
 17045                           
 17046                           ;sort.c: 277: printf("SORTING...");
 17047  00224E  0E98               	movlw	low STR_64
 17048  002250  6E0D               	movwf	i2printf@f,c
 17049  002252  0EFF               	movlw	high STR_64
 17050  002254  6E0E               	movwf	i2printf@f+1,c
 17051  002256  ECAF  F00A         	call	i2_printf	;wreg free
 17052                           
 17053                           ;sort.c: 278: lcdInst(0b11000000);;
 17054  00225A  0EC0               	movlw	192
 17055  00225C  EC91  F01F         	call	i2_lcdInst
 17056                           
 17057                           ;sort.c: 279: printf("TIME %d:%02d", min, sec);
 17058  002260  0E69               	movlw	low STR_65
 17059  002262  6E0D               	movwf	i2printf@f,c
 17060  002264  0EFF               	movlw	high STR_65
 17061  002266  6E0E               	movwf	i2printf@f+1,c
 17062  002268  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17063  00226C  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17064  002270  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17065  002274  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17066  002278  ECAF  F00A         	call	i2_printf	;wreg free
 17067  00227C  0012               	return		;funcret
 17068  00227E                     __end_of_printSortTimer:
 17069                           	opt stack 0
 17070                           pclatu	equ	0xFFB
 17071                           pclath	equ	0xFFA
 17072                           tblptru	equ	0xFF8
 17073                           tblptrh	equ	0xFF7
 17074                           tblptrl	equ	0xFF6
 17075                           tablat	equ	0xFF5
 17076                           prodh	equ	0xFF4
 17077                           prodl	equ	0xFF3
 17078                           intcon	equ	0xFF2
 17079                           intcon2	equ	0xFF1
 17080                           intcon3	equ	0xFF0
 17081                           indf0	equ	0xFEF
 17082                           postinc0	equ	0xFEE
 17083                           fsr0h	equ	0xFEA
 17084                           fsr0l	equ	0xFE9
 17085                           wreg	equ	0xFE8
 17086                           postdec1	equ	0xFE5
 17087                           fsr1h	equ	0xFE2
 17088                           fsr1l	equ	0xFE1
 17089                           indf2	equ	0xFDF
 17090                           postinc2	equ	0xFDE
 17091                           postdec2	equ	0xFDD
 17092                           fsr2h	equ	0xFDA
 17093                           fsr2l	equ	0xFD9
 17094                           status	equ	0xFD8
 17095                           
 17096 ;; *************** function i2_printf *****************
 17097 ;; Defined at:
 17098 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17101 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 17102 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 17103 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 17104 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 17105 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 17106 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 17107 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 17108 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17109 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(13), 
 17110 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 17111 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 17112 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17113 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17114 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17115 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17116 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17117 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 17118 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17119 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17120 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;  printf          4    0        struct .
 17123 ;;  printf          2   39[COMRAM] int 
 17124 ;;  printf          2   35[COMRAM] unsigned int 
 17125 ;;  printf          2   33[COMRAM] unsigned int 
 17126 ;;  printf          2   31[COMRAM] PTR void [1]
 17127 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17128 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17129 ;;		 -> STR_105(7), count_total(2), printRTC@month(4), UI@month(4), 
 17130 ;;  printf          1   38[COMRAM] char 
 17131 ;;  printf          1   37[COMRAM] unsigned char 
 17132 ;;  printf          1   28[COMRAM] char 
 17133 ;; Return value:  Size  Location     Type
 17134 ;;                  2   12[COMRAM] int 
 17135 ;; Registers used:
 17136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17137 ;; Tracked objects:
 17138 ;;		On entry : 0/0
 17139 ;;		On exit  : 0/0
 17140 ;;		Unchanged: 0/0
 17141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17142 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17143 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17144 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17145 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17146 ;;Total ram usage:       29 bytes
 17147 ;; Hardware stack levels used:    1
 17148 ;; Hardware stack levels required when called:    2
 17149 ;; This function calls:
 17150 ;;		i2___lwdiv
 17151 ;;		i2___lwmod
 17152 ;;		i2___wmul
 17153 ;;		i2_isdigit
 17154 ;;		i2_putch
 17155 ;; This function is called by:
 17156 ;;		_change_state_to_menu_11
 17157 ;;		_change_state_to_menu_23
 17158 ;;		_change_state_to_logs_11
 17159 ;;		_change_state_to_logs_12
 17160 ;;		_change_state_to_logs_22
 17161 ;;		_change_state_to_logs_23
 17162 ;;		_change_state_to_logs_33
 17163 ;;		_change_state_to_logs_34
 17164 ;;		_printSortTimer
 17165 ;;		i2_change_state_to_menu_start
 17166 ;;		i2_change_state_to_menu_12
 17167 ;;		i2_change_state_to_menu_22
 17168 ;;		i2_printRTC
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text70
 17173  00155E                     __ptext70:
 17174                           	opt stack 0
 17175  00155E                     i2_printf:
 17176                           	opt stack 19
 17177                           
 17178                           ;doprnt.c: 466: va_list ap;
 17179                           ;doprnt.c: 499: signed char c;
 17180                           ;doprnt.c: 501: int width;
 17181                           ;doprnt.c: 506: signed char prec;
 17182                           ;doprnt.c: 508: unsigned char flag;
 17183                           ;doprnt.c: 523: union {
 17184                           ;doprnt.c: 524: unsigned long vd;
 17185                           ;doprnt.c: 525: double integ;
 17186                           ;doprnt.c: 526: } tmpval;
 17187                           ;doprnt.c: 528: unsigned int val;
 17188                           ;doprnt.c: 529: unsigned len;
 17189                           ;doprnt.c: 530: const char * cp;
 17190                           ;doprnt.c: 533: *ap = __va_start();
 17191                           
 17192                           ;incstack = 0
 17193  00155E  0E0F               	movlw	low (?i2_printf+2)
 17194  001560  6E20               	movwf	i2printf@ap,c
 17195  001562  0E00               	movlw	high (?i2_printf+2)
 17196  001564  6E21               	movwf	i2printf@ap+1,c
 17197                           
 17198                           ;doprnt.c: 536: while(c = *f++) {
 17199  001566  D1A4               	goto	i2l5307
 17200  001568                     i2l5177:
 17201                           
 17202                           ;doprnt.c: 538: if(c != '%')
 17203  001568  0E25               	movlw	37
 17204  00156A  1827               	xorwf	i2printf@c,w,c
 17205  00156C  B4D8               	btfsc	status,2,c
 17206  00156E  D004               	goto	i2l5181
 17207                           
 17208                           ;doprnt.c: 540: {
 17209                           ;doprnt.c: 541: (putch(c) );
 17210  001570  5027               	movf	i2printf@c,w,c
 17211  001572  EC8B  F01F         	call	i2_putch
 17212                           
 17213                           ;doprnt.c: 542: continue;
 17214  001576  D19C               	goto	i2l5307
 17215  001578                     i2l5181:
 17216                           
 17217                           ;doprnt.c: 543: }
 17218                           ;doprnt.c: 546: width = 0;
 17219  001578  0E00               	movlw	0
 17220  00157A  6E29               	movwf	i2printf@width+1,c
 17221  00157C  0E00               	movlw	0
 17222  00157E  6E28               	movwf	i2printf@width,c
 17223                           
 17224                           ;doprnt.c: 548: flag = 0;
 17225  001580  0E00               	movlw	0
 17226  001582  6E26               	movwf	i2printf@flag,c
 17227                           
 17228                           ;doprnt.c: 551: switch(*f) {
 17229                           
 17230                           ;doprnt.c: 550: for(;;) {
 17231  001584  D003               	goto	i2l5187
 17232  001586                     i2l5183:
 17233                           
 17234                           ;doprnt.c: 580: flag |= 0x04;
 17235  001586  8426               	bsf	i2printf@flag,2,c
 17236                           
 17237                           ;doprnt.c: 581: f++;
 17238  001588  4A0D               	infsnz	i2printf@f,f,c
 17239  00158A  2A0E               	incf	i2printf@f+1,f,c
 17240  00158C                     i2l5187:
 17241  00158C  C00D  FFF6         	movff	i2printf@f,tblptrl
 17242  001590  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17243  001594                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17244  001594  6AF8               	clrf	tblptru,c
 17245  001596                     	endif
 17246  001596                     	if	0	;tblptru may be non-zero
 17247  001596                     	endif
 17248  001596  0008               	tblrd		*
 17249  001598  50F5               	movf	tablat,w,c
 17250                           
 17251                           ; Switch size 1, requested type "space"
 17252                           ; Number of cases is 1, Range of values is 48 to 48
 17253                           ; switch strategies available:
 17254                           ; Name         Instructions Cycles
 17255                           ; simple_byte            4     3 (average)
 17256                           ;	Chosen strategy is simple_byte
 17257  00159A  0A30               	xorlw	48	; case 48
 17258  00159C  B4D8               	btfsc	status,2,c
 17259  00159E  D7F3               	goto	i2l5183
 17260                           
 17261                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17262                           
 17263                           ;doprnt.c: 586: }
 17264                           
 17265                           ;doprnt.c: 585: break;
 17266  0015A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 17267  0015A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17268  0015A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17269  0015A8  6AF8               	clrf	tblptru,c
 17270  0015AA                     	endif
 17271  0015AA                     	if	0	;tblptru may be non-zero
 17272  0015AA                     	endif
 17273  0015AA  0008               	tblrd		*
 17274  0015AC  50F5               	movf	tablat,w,c
 17275  0015AE  EC37  F01F         	call	i2_isdigit
 17276  0015B2  A0D8               	btfss	status,0,c
 17277  0015B4  D0A6               	goto	i2l5235
 17278                           
 17279                           ;doprnt.c: 598: width = 0;
 17280  0015B6  0E00               	movlw	0
 17281  0015B8  6E29               	movwf	i2printf@width+1,c
 17282  0015BA  0E00               	movlw	0
 17283  0015BC  6E28               	movwf	i2printf@width,c
 17284  0015BE                     i2l5193:
 17285                           
 17286                           ;doprnt.c: 600: width *= 10;
 17287  0015BE  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 17288  0015C2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17289  0015C6  0E00               	movlw	0
 17290  0015C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 17291  0015CA  0E0A               	movlw	10
 17292  0015CC  6E03               	movwf	i2___wmul@multiplicand,c
 17293  0015CE  ECCB  F01E         	call	i2___wmul	;wreg free
 17294  0015D2  C001  F028         	movff	?i2___wmul,i2printf@width
 17295  0015D6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 17296                           
 17297                           ;doprnt.c: 601: width += *f++ - '0';
 17298  0015DA  0ED0               	movlw	208
 17299  0015DC  6E19               	movwf	??i2_printf& (0+255),c
 17300  0015DE  0EFF               	movlw	255
 17301  0015E0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17302  0015E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 17303  0015E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17304  0015EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17305  0015EA  6AF8               	clrf	tblptru,c
 17306  0015EC                     	endif
 17307  0015EC                     	if	0	;tblptru may be non-zero
 17308  0015EC                     	endif
 17309  0015EC  0008               	tblrd		*
 17310  0015EE  50F5               	movf	tablat,w,c
 17311  0015F0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 17312  0015F2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 17313  0015F4  5019               	movf	??i2_printf,w,c
 17314  0015F6  261B               	addwf	??i2_printf+2,f,c
 17315  0015F8  501A               	movf	??i2_printf+1,w,c
 17316  0015FA  221C               	addwfc	??i2_printf+3,f,c
 17317  0015FC  501B               	movf	??i2_printf+2,w,c
 17318  0015FE  2628               	addwf	i2printf@width,f,c
 17319  001600  501C               	movf	??i2_printf+3,w,c
 17320  001602  2229               	addwfc	i2printf@width+1,f,c
 17321  001604  4A0D               	infsnz	i2printf@f,f,c
 17322  001606  2A0E               	incf	i2printf@f+1,f,c
 17323                           
 17324                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17325  001608  C00D  FFF6         	movff	i2printf@f,tblptrl
 17326  00160C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17327  001610                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17328  001610  6AF8               	clrf	tblptru,c
 17329  001612                     	endif
 17330  001612                     	if	0	;tblptru may be non-zero
 17331  001612                     	endif
 17332  001612  0008               	tblrd		*
 17333  001614  50F5               	movf	tablat,w,c
 17334  001616  EC37  F01F         	call	i2_isdigit
 17335  00161A  A0D8               	btfss	status,0,c
 17336  00161C  D072               	goto	i2l5235
 17337  00161E  D7CF               	goto	i2l5193
 17338  001620                     i2l5201:
 17339                           
 17340                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17341  001620  C020  FFD9         	movff	i2printf@ap,fsr2l
 17342  001624  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17343  001628  CFDE F01E          	movff	postinc2,i2printf@cp
 17344  00162C  CFDD F01F          	movff	postdec2,i2printf@cp+1
 17345  001630  0E02               	movlw	2
 17346  001632  2620               	addwf	i2printf@ap,f,c
 17347  001634  0E00               	movlw	0
 17348  001636  2221               	addwfc	i2printf@ap+1,f,c
 17349                           
 17350                           ;doprnt.c: 740: if(!cp)
 17351  001638  501E               	movf	i2printf@cp,w,c
 17352  00163A  101F               	iorwf	i2printf@cp+1,w,c
 17353  00163C  A4D8               	btfss	status,2,c
 17354  00163E  D004               	goto	i2l5209
 17355                           
 17356                           ;doprnt.c: 741: cp = "(null)";
 17357  001640  0EB5               	movlw	low STR_105
 17358  001642  6E1E               	movwf	i2printf@cp,c
 17359  001644  0EFF               	movlw	high STR_105
 17360  001646  6E1F               	movwf	i2printf@cp+1,c
 17361  001648                     i2l5209:
 17362                           
 17363                           ;doprnt.c: 745: len = 0;
 17364  001648  0E00               	movlw	0
 17365  00164A  6E23               	movwf	i2printf@len+1,c
 17366  00164C  0E00               	movlw	0
 17367  00164E  6E22               	movwf	i2printf@len,c
 17368                           
 17369                           ;doprnt.c: 746: while(cp[len])
 17370  001650  D002               	goto	i2l5213
 17371  001652                     i2l5211:
 17372                           
 17373                           ;doprnt.c: 747: len++;
 17374  001652  4A22               	infsnz	i2printf@len,f,c
 17375  001654  2A23               	incf	i2printf@len+1,f,c
 17376  001656                     i2l5213:
 17377  001656  5022               	movf	i2printf@len,w,c
 17378  001658  241E               	addwf	i2printf@cp,w,c
 17379  00165A  6E19               	movwf	??i2_printf& (0+255),c
 17380  00165C  5023               	movf	i2printf@len+1,w,c
 17381  00165E  201F               	addwfc	i2printf@cp+1,w,c
 17382  001660  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17383  001662  C019  FFF6         	movff	??i2_printf,tblptrl
 17384  001666  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 17385  00166A  0E00               	movlw	low (__mediumconst shr (0+16))
 17386  00166C  6EF8               	movwf	tblptru,c
 17387  00166E  0E0F               	movlw	(high __ramtop+-1)
 17388  001670  64F7               	cpfsgt	tblptrh,c
 17389  001672  D003               	bra	i2u389_47
 17390  001674  0008               	tblrd		*
 17391  001676  50F5               	movf	tablat,w,c
 17392  001678  D005               	bra	i2u389_40
 17393  00167A                     i2u389_47:
 17394  00167A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17395  00167E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17396  001682  50EF               	movf	indf0,w,c
 17397  001684                     i2u389_40:
 17398  001684  0900               	iorlw	0
 17399  001686  A4D8               	btfss	status,2,c
 17400  001688  D7E4               	goto	i2l5211
 17401                           
 17402                           ;doprnt.c: 757: if(width > len)
 17403  00168A  5028               	movf	i2printf@width,w,c
 17404  00168C  5C22               	subwf	i2printf@len,w,c
 17405  00168E  5029               	movf	i2printf@width+1,w,c
 17406  001690  5823               	subwfb	i2printf@len+1,w,c
 17407  001692  B0D8               	btfsc	status,0,c
 17408  001694  D005               	goto	i2l5219
 17409                           
 17410                           ;doprnt.c: 758: width -= len;
 17411  001696  5022               	movf	i2printf@len,w,c
 17412  001698  5E28               	subwf	i2printf@width,f,c
 17413  00169A  5023               	movf	i2printf@len+1,w,c
 17414  00169C  5A29               	subwfb	i2printf@width+1,f,c
 17415  00169E  D008               	goto	i2l5223
 17416  0016A0                     i2l5219:
 17417                           
 17418                           ;doprnt.c: 759: else
 17419                           ;doprnt.c: 760: width = 0;
 17420  0016A0  0E00               	movlw	0
 17421  0016A2  6E29               	movwf	i2printf@width+1,c
 17422  0016A4  0E00               	movlw	0
 17423  0016A6  6E28               	movwf	i2printf@width,c
 17424                           
 17425                           ;doprnt.c: 764: while(width--)
 17426  0016A8  D003               	goto	i2l5223
 17427  0016AA                     i2l5221:
 17428                           
 17429                           ;doprnt.c: 765: (putch(' ') );
 17430  0016AA  0E20               	movlw	32
 17431  0016AC  EC8B  F01F         	call	i2_putch
 17432  0016B0                     i2l5223:
 17433  0016B0  0628               	decf	i2printf@width,f,c
 17434  0016B2  A0D8               	btfss	status,0,c
 17435  0016B4  0629               	decf	i2printf@width+1,f,c
 17436  0016B6  2828               	incf	i2printf@width,w,c
 17437  0016B8  E1F8               	bnz	i2l5221
 17438  0016BA  2829               	incf	i2printf@width+1,w,c
 17439  0016BC  B4D8               	btfsc	status,2,c
 17440  0016BE  D016               	goto	i2l5229
 17441  0016C0  D7F4               	goto	i2l5221
 17442  0016C2                     i2l5225:
 17443                           
 17444                           ;doprnt.c: 768: (putch(*cp++) );
 17445  0016C2  C01E  FFF6         	movff	i2printf@cp,tblptrl
 17446  0016C6  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 17447  0016CA  0E00               	movlw	low (__mediumconst shr (0+16))
 17448  0016CC  6EF8               	movwf	tblptru,c
 17449  0016CE  0E0F               	movlw	(high __ramtop+-1)
 17450  0016D0  64F7               	cpfsgt	tblptrh,c
 17451  0016D2  D003               	bra	i2u393_47
 17452  0016D4  0008               	tblrd		*
 17453  0016D6  50F5               	movf	tablat,w,c
 17454  0016D8  D005               	bra	i2u393_40
 17455  0016DA                     i2u393_47:
 17456  0016DA  CFF6 FFE9          	movff	tblptrl,fsr0l
 17457  0016DE  CFF7 FFEA          	movff	tblptrh,fsr0h
 17458  0016E2  50EF               	movf	indf0,w,c
 17459  0016E4                     i2u393_40:
 17460  0016E4  EC8B  F01F         	call	i2_putch
 17461  0016E8  4A1E               	infsnz	i2printf@cp,f,c
 17462  0016EA  2A1F               	incf	i2printf@cp+1,f,c
 17463  0016EC                     i2l5229:
 17464  0016EC  0622               	decf	i2printf@len,f,c
 17465  0016EE  A0D8               	btfss	status,0,c
 17466  0016F0  0623               	decf	i2printf@len+1,f,c
 17467  0016F2  2822               	incf	i2printf@len,w,c
 17468  0016F4  E1E6               	bnz	i2l5225
 17469  0016F6  2823               	incf	i2printf@len+1,w,c
 17470  0016F8  B4D8               	btfsc	status,2,c
 17471  0016FA  D0DA               	goto	i2l5307
 17472  0016FC  D7E2               	goto	i2l5225
 17473  0016FE                     i2l5231:
 17474                           
 17475                           ;doprnt.c: 818: flag |= 0x40;
 17476  0016FE  8C26               	bsf	i2printf@flag,6,c
 17477                           
 17478                           ;doprnt.c: 822: }
 17479                           
 17480                           ;doprnt.c: 819: break;
 17481  001700  D01B               	goto	i2l1119
 17482  001702                     i2l5235:
 17483  001702  C00D  FFF6         	movff	i2printf@f,tblptrl
 17484  001706  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17485  00170A  4A0D               	infsnz	i2printf@f,f,c
 17486  00170C  2A0E               	incf	i2printf@f+1,f,c
 17487  00170E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17488  00170E  6AF8               	clrf	tblptru,c
 17489  001710                     	endif
 17490  001710                     	if	0	;tblptru may be non-zero
 17491  001710                     	endif
 17492  001710  0008               	tblrd		*
 17493  001712  CFF5 F027          	movff	tablat,i2printf@c
 17494  001716  5027               	movf	i2printf@c,w,c
 17495                           
 17496                           ; Switch size 1, requested type "space"
 17497                           ; Number of cases is 5, Range of values is 0 to 117
 17498                           ; switch strategies available:
 17499                           ; Name         Instructions Cycles
 17500                           ; simple_byte           16     9 (average)
 17501                           ;	Chosen strategy is simple_byte
 17502  001718  0A00               	xorlw	0	; case 0
 17503  00171A  B4D8               	btfsc	status,2,c
 17504  00171C  0012               	return	
 17505  00171E  0A64               	xorlw	100	; case 100
 17506  001720  B4D8               	btfsc	status,2,c
 17507  001722  D00A               	goto	i2l1119
 17508  001724  0A0D               	xorlw	13	; case 105
 17509  001726  B4D8               	btfsc	status,2,c
 17510  001728  D007               	goto	i2l1119
 17511  00172A  0A1A               	xorlw	26	; case 115
 17512  00172C  B4D8               	btfsc	status,2,c
 17513  00172E  D778               	goto	i2l5201
 17514  001730  0A06               	xorlw	6	; case 117
 17515  001732  B4D8               	btfsc	status,2,c
 17516  001734  D7E4               	goto	i2l5231
 17517  001736  D0BC               	goto	i2l5307
 17518  001738                     i2l1119:
 17519                           
 17520                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17521  001738  BC26               	btfsc	i2printf@flag,6,c
 17522  00173A  D015               	goto	i2l5247
 17523                           
 17524                           ;doprnt.c: 1253: {
 17525                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17526  00173C  C020  FFD9         	movff	i2printf@ap,fsr2l
 17527  001740  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17528  001744  CFDE F024          	movff	postinc2,i2printf@val
 17529  001748  CFDD F025          	movff	postdec2,i2printf@val+1
 17530  00174C  0E02               	movlw	2
 17531  00174E  2620               	addwf	i2printf@ap,f,c
 17532  001750  0E00               	movlw	0
 17533  001752  2221               	addwfc	i2printf@ap+1,f,c
 17534                           
 17535                           ;doprnt.c: 1261: if((int)val < 0) {
 17536  001754  AE25               	btfss	i2printf@val+1,7,c
 17537  001756  D013               	goto	i2l5251
 17538                           
 17539                           ;doprnt.c: 1262: flag |= 0x03;
 17540  001758  0E03               	movlw	3
 17541  00175A  1226               	iorwf	i2printf@flag,f,c
 17542                           
 17543                           ;doprnt.c: 1263: val = -val;
 17544  00175C  6C24               	negf	i2printf@val,c
 17545  00175E  1E25               	comf	i2printf@val+1,f,c
 17546  001760  B0D8               	btfsc	status,0,c
 17547  001762  2A25               	incf	i2printf@val+1,f,c
 17548                           
 17549                           ;doprnt.c: 1264: }
 17550                           ;doprnt.c: 1266: }
 17551  001764  D00C               	goto	i2l5251
 17552  001766                     i2l5247:
 17553                           
 17554                           ;doprnt.c: 1268: else
 17555                           ;doprnt.c: 1273: {
 17556                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17557  001766  C020  FFD9         	movff	i2printf@ap,fsr2l
 17558  00176A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17559  00176E  CFDE F024          	movff	postinc2,i2printf@val
 17560  001772  CFDD F025          	movff	postdec2,i2printf@val+1
 17561  001776  0E02               	movlw	2
 17562  001778  2620               	addwf	i2printf@ap,f,c
 17563  00177A  0E00               	movlw	0
 17564  00177C  2221               	addwfc	i2printf@ap+1,f,c
 17565  00177E                     i2l5251:
 17566                           
 17567                           ;doprnt.c: 1287: }
 17568                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17569  00177E  0E01               	movlw	1
 17570  001780  6E27               	movwf	i2printf@c,c
 17571  001782                     i2l5253:
 17572  001782  0E05               	movlw	5
 17573  001784  1827               	xorwf	i2printf@c,w,c
 17574  001786  B4D8               	btfsc	status,2,c
 17575  001788  D015               	goto	i2l5265
 17576                           
 17577                           ;doprnt.c: 1306: if(val < dpowers[c])
 17578  00178A  5027               	movf	i2printf@c,w,c
 17579  00178C  0D02               	mullw	2
 17580  00178E  0EB4               	movlw	low _dpowers
 17581  001790  24F3               	addwf	prodl,w,c
 17582  001792  6EF6               	movwf	tblptrl,c
 17583  001794  0EFB               	movlw	high _dpowers
 17584  001796  20F4               	addwfc	prodh,w,c
 17585  001798  6EF7               	movwf	tblptrh,c
 17586  00179A                     	if	1	;There are 3 active tblptr bytes
 17587  00179A  6AF8               	clrf	tblptru,c
 17588  00179C  0E00               	movlw	low (__mediumconst shr (0+16))
 17589  00179E  22F8               	addwfc	tblptru,f,c
 17590  0017A0                     	endif
 17591  0017A0  0009               	tblrd		*+
 17592  0017A2  50F5               	movf	tablat,w,c
 17593  0017A4  5C24               	subwf	i2printf@val,w,c
 17594  0017A6  0009               	tblrd		*+
 17595  0017A8  50F5               	movf	tablat,w,c
 17596  0017AA  5825               	subwfb	i2printf@val+1,w,c
 17597  0017AC  A0D8               	btfss	status,0,c
 17598  0017AE  D002               	goto	i2l5265
 17599                           
 17600                           ;doprnt.c: 1307: break;
 17601  0017B0  2A27               	incf	i2printf@c,f,c
 17602  0017B2  D7E7               	goto	i2l5253
 17603  0017B4                     i2l5265:
 17604                           
 17605                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17606  0017B4  5028               	movf	i2printf@width,w,c
 17607  0017B6  1029               	iorwf	i2printf@width+1,w,c
 17608  0017B8  B4D8               	btfsc	status,2,c
 17609  0017BA  D009               	goto	i2l5271
 17610  0017BC  C026  F019         	movff	i2printf@flag,??i2_printf
 17611  0017C0  0E03               	movlw	3
 17612  0017C2  1619               	andwf	??i2_printf,f,c
 17613  0017C4  B4D8               	btfsc	status,2,c
 17614  0017C6  D003               	goto	i2l5271
 17615                           
 17616                           ;doprnt.c: 1346: width--;
 17617  0017C8  0628               	decf	i2printf@width,f,c
 17618  0017CA  A0D8               	btfss	status,0,c
 17619  0017CC  0629               	decf	i2printf@width+1,f,c
 17620  0017CE                     i2l5271:
 17621                           
 17622                           ;doprnt.c: 1381: if(width > c)
 17623  0017CE  0E80               	movlw	128
 17624  0017D0  BE27               	btfsc	i2printf@c,7,c
 17625  0017D2  0E7F               	movlw	127
 17626  0017D4  6E19               	movwf	??i2_printf& (0+255),c
 17627  0017D6  5028               	movf	i2printf@width,w,c
 17628  0017D8  5C27               	subwf	i2printf@c,w,c
 17629  0017DA  5029               	movf	i2printf@width+1,w,c
 17630  0017DC  0A80               	xorlw	128
 17631  0017DE  5819               	subwfb	??i2_printf& (0+255),w,c
 17632  0017E0  B0D8               	btfsc	status,0,c
 17633  0017E2  D007               	goto	i2l5275
 17634                           
 17635                           ;doprnt.c: 1382: width -= c;
 17636  0017E4  5027               	movf	i2printf@c,w,c
 17637  0017E6  5E28               	subwf	i2printf@width,f,c
 17638  0017E8  0E00               	movlw	0
 17639  0017EA  BE27               	btfsc	i2printf@c,7,c
 17640  0017EC  0EFF               	movlw	255
 17641  0017EE  5A29               	subwfb	i2printf@width+1,f,c
 17642  0017F0  D004               	goto	i2l5277
 17643  0017F2                     i2l5275:
 17644                           
 17645                           ;doprnt.c: 1383: else
 17646                           ;doprnt.c: 1384: width = 0;
 17647  0017F2  0E00               	movlw	0
 17648  0017F4  6E29               	movwf	i2printf@width+1,c
 17649  0017F6  0E00               	movlw	0
 17650  0017F8  6E28               	movwf	i2printf@width,c
 17651  0017FA                     i2l5277:
 17652                           
 17653                           ;doprnt.c: 1387: if(flag & 0x04) {
 17654  0017FA  A426               	btfss	i2printf@flag,2,c
 17655  0017FC  D014               	goto	i2l5289
 17656                           
 17657                           ;doprnt.c: 1392: if(flag & 0x03)
 17658  0017FE  C026  F019         	movff	i2printf@flag,??i2_printf
 17659  001802  0E03               	movlw	3
 17660  001804  1619               	andwf	??i2_printf,f,c
 17661  001806  B4D8               	btfsc	status,2,c
 17662  001808  D003               	goto	i2l5283
 17663                           
 17664                           ;doprnt.c: 1393: (putch('-') );
 17665  00180A  0E2D               	movlw	45
 17666  00180C  EC8B  F01F         	call	i2_putch
 17667  001810                     i2l5283:
 17668                           
 17669                           ;doprnt.c: 1415: if(width)
 17670  001810  5028               	movf	i2printf@width,w,c
 17671  001812  1029               	iorwf	i2printf@width+1,w,c
 17672  001814  B4D8               	btfsc	status,2,c
 17673  001816  D01E               	goto	i2l5299
 17674                           
 17675                           ;doprnt.c: 1417: (putch('0') );
 17676                           
 17677                           ;doprnt.c: 1416: do
 17678  001818  0E30               	movlw	48
 17679  00181A  EC8B  F01F         	call	i2_putch
 17680                           
 17681                           ;doprnt.c: 1418: while(--width);
 17682  00181E  0628               	decf	i2printf@width,f,c
 17683  001820  A0D8               	btfss	status,0,c
 17684  001822  0629               	decf	i2printf@width+1,f,c
 17685  001824  D7F5               	goto	i2l5283
 17686  001826                     i2l5289:
 17687                           
 17688                           ;doprnt.c: 1422: {
 17689                           ;doprnt.c: 1424: if(width
 17690                           ;doprnt.c: 1428: )
 17691  001826  5028               	movf	i2printf@width,w,c
 17692  001828  1029               	iorwf	i2printf@width+1,w,c
 17693  00182A  B4D8               	btfsc	status,2,c
 17694  00182C  D00A               	goto	i2l5295
 17695  00182E                     i2l5291:
 17696                           
 17697                           ;doprnt.c: 1430: (putch(' ') );
 17698  00182E  0E20               	movlw	32
 17699  001830  EC8B  F01F         	call	i2_putch
 17700                           
 17701                           ;doprnt.c: 1431: while(--width);
 17702  001834  0628               	decf	i2printf@width,f,c
 17703  001836  A0D8               	btfss	status,0,c
 17704  001838  0629               	decf	i2printf@width+1,f,c
 17705  00183A  5028               	movf	i2printf@width,w,c
 17706  00183C  1029               	iorwf	i2printf@width+1,w,c
 17707  00183E  A4D8               	btfss	status,2,c
 17708  001840  D7F6               	goto	i2l5291
 17709  001842                     i2l5295:
 17710                           
 17711                           ;doprnt.c: 1438: if(flag & 0x03)
 17712  001842  C026  F019         	movff	i2printf@flag,??i2_printf
 17713  001846  0E03               	movlw	3
 17714  001848  1619               	andwf	??i2_printf,f,c
 17715  00184A  B4D8               	btfsc	status,2,c
 17716  00184C  D003               	goto	i2l5299
 17717                           
 17718                           ;doprnt.c: 1439: (putch('-') );
 17719  00184E  0E2D               	movlw	45
 17720  001850  EC8B  F01F         	call	i2_putch
 17721  001854                     i2l5299:
 17722                           
 17723                           ;doprnt.c: 1469: }
 17724                           ;doprnt.c: 1472: prec = c;
 17725  001854  C027  F01D         	movff	i2printf@c,i2printf@prec
 17726                           
 17727                           ;doprnt.c: 1474: while(prec--) {
 17728  001858  D027               	goto	i2l5305
 17729  00185A                     i2l5301:
 17730                           
 17731                           ;doprnt.c: 1478: {
 17732                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17733  00185A  501D               	movf	i2printf@prec,w,c
 17734  00185C  0D02               	mullw	2
 17735  00185E  0EB4               	movlw	low _dpowers
 17736  001860  24F3               	addwf	prodl,w,c
 17737  001862  6EF6               	movwf	tblptrl,c
 17738  001864  0EFB               	movlw	high _dpowers
 17739  001866  20F4               	addwfc	prodh,w,c
 17740  001868  6EF7               	movwf	tblptrh,c
 17741  00186A                     	if	1	;There are 3 active tblptr bytes
 17742  00186A  6AF8               	clrf	tblptru,c
 17743  00186C  0E00               	movlw	low (__mediumconst shr (0+16))
 17744  00186E  22F8               	addwfc	tblptru,f,c
 17745  001870                     	endif
 17746  001870  0009               	tblrd		*+
 17747  001872  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 17748  001876  000A               	tblrd		*-
 17749  001878  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 17750  00187C  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 17751  001880  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17752  001884  ECE2  F01B         	call	i2___lwdiv	;wreg free
 17753  001888  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 17754  00188C  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 17755  001890  0E00               	movlw	0
 17756  001892  6E04               	movwf	i2___lwmod@divisor+1,c
 17757  001894  0E0A               	movlw	10
 17758  001896  6E03               	movwf	i2___lwmod@divisor,c
 17759  001898  ECC8  F01C         	call	i2___lwmod	;wreg free
 17760  00189C  5001               	movf	?i2___lwmod,w,c
 17761  00189E  0F30               	addlw	48
 17762  0018A0  6E27               	movwf	i2printf@c,c
 17763                           
 17764                           ;doprnt.c: 1523: }
 17765                           ;doprnt.c: 1524: (putch(c) );
 17766  0018A2  5027               	movf	i2printf@c,w,c
 17767  0018A4  EC8B  F01F         	call	i2_putch
 17768  0018A8                     i2l5305:
 17769  0018A8  061D               	decf	i2printf@prec,f,c
 17770  0018AA  281D               	incf	i2printf@prec,w,c
 17771  0018AC  A4D8               	btfss	status,2,c
 17772  0018AE  D7D5               	goto	i2l5301
 17773  0018B0                     i2l5307:
 17774  0018B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 17775  0018B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17776  0018B8  4A0D               	infsnz	i2printf@f,f,c
 17777  0018BA  2A0E               	incf	i2printf@f+1,f,c
 17778  0018BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17779  0018BC  6AF8               	clrf	tblptru,c
 17780  0018BE                     	endif
 17781  0018BE                     	if	0	;tblptru may be non-zero
 17782  0018BE                     	endif
 17783  0018BE  0008               	tblrd		*
 17784  0018C0  CFF5 F027          	movff	tablat,i2printf@c
 17785  0018C4  5027               	movf	i2printf@c,w,c
 17786  0018C6  B4D8               	btfsc	status,2,c
 17787  0018C8  0012               	return	
 17788  0018CA  D64E               	goto	i2l5177
 17789  0018CC                     __end_ofi2_printf:
 17790                           	opt stack 0
 17791                           pclatu	equ	0xFFB
 17792                           pclath	equ	0xFFA
 17793                           tblptru	equ	0xFF8
 17794                           tblptrh	equ	0xFF7
 17795                           tblptrl	equ	0xFF6
 17796                           tablat	equ	0xFF5
 17797                           prodh	equ	0xFF4
 17798                           prodl	equ	0xFF3
 17799                           intcon	equ	0xFF2
 17800                           intcon2	equ	0xFF1
 17801                           intcon3	equ	0xFF0
 17802                           indf0	equ	0xFEF
 17803                           postinc0	equ	0xFEE
 17804                           fsr0h	equ	0xFEA
 17805                           fsr0l	equ	0xFE9
 17806                           wreg	equ	0xFE8
 17807                           postdec1	equ	0xFE5
 17808                           fsr1h	equ	0xFE2
 17809                           fsr1l	equ	0xFE1
 17810                           indf2	equ	0xFDF
 17811                           postinc2	equ	0xFDE
 17812                           postdec2	equ	0xFDD
 17813                           fsr2h	equ	0xFDA
 17814                           fsr2l	equ	0xFD9
 17815                           status	equ	0xFD8
 17816                           
 17817 ;; *************** function i2_putch *****************
 17818 ;; Defined at:
 17819 ;;		line 20 in file "lcd.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;  data            1    wreg     unsigned char 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  data            1    2[COMRAM] unsigned char 
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1    wreg      void 
 17826 ;; Registers used:
 17827 ;;		wreg, status,2, status,0, cstack
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;Total ram usage:        1 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; Hardware stack levels required when called:    1
 17840 ;; This function calls:
 17841 ;;		i2_lcdNibble
 17842 ;; This function is called by:
 17843 ;;		i2_printf
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           	psect	text71
 17848  003F16                     __ptext71:
 17849                           	opt stack 0
 17850  003F16                     i2_putch:
 17851                           	opt stack 19
 17852                           
 17853                           ;incstack = 0
 17854                           ;i2putch@data stored from wreg
 17855  003F16  6E03               	movwf	i2putch@data,c
 17856                           
 17857                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17858  003F18  848C               	bsf	3980,2,c	;volatile
 17859                           
 17860                           ;lcd.c: 22: lcdNibble(data);
 17861  003F1A  5003               	movf	i2putch@data,w,c
 17862  003F1C  ECB7  F01B         	call	i2_lcdNibble
 17863  003F20  0012               	return		;funcret
 17864  003F22                     __end_ofi2_putch:
 17865                           	opt stack 0
 17866                           pclatu	equ	0xFFB
 17867                           pclath	equ	0xFFA
 17868                           tblptru	equ	0xFF8
 17869                           tblptrh	equ	0xFF7
 17870                           tblptrl	equ	0xFF6
 17871                           tablat	equ	0xFF5
 17872                           prodh	equ	0xFF4
 17873                           prodl	equ	0xFF3
 17874                           intcon	equ	0xFF2
 17875                           intcon2	equ	0xFF1
 17876                           intcon3	equ	0xFF0
 17877                           indf0	equ	0xFEF
 17878                           postinc0	equ	0xFEE
 17879                           fsr0h	equ	0xFEA
 17880                           fsr0l	equ	0xFE9
 17881                           wreg	equ	0xFE8
 17882                           postdec1	equ	0xFE5
 17883                           fsr1h	equ	0xFE2
 17884                           fsr1l	equ	0xFE1
 17885                           indf2	equ	0xFDF
 17886                           postinc2	equ	0xFDE
 17887                           postdec2	equ	0xFDD
 17888                           fsr2h	equ	0xFDA
 17889                           fsr2l	equ	0xFD9
 17890                           status	equ	0xFD8
 17891                           
 17892 ;; *************** function i2_isdigit *****************
 17893 ;; Defined at:
 17894 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17895 ;; Parameters:    Size  Location     Type
 17896 ;;  c               1    wreg     unsigned char 
 17897 ;; Auto vars:     Size  Location     Type
 17898 ;;  c               1    2[COMRAM] unsigned char 
 17899 ;; Return value:  Size  Location     Type
 17900 ;;		None               void
 17901 ;; Registers used:
 17902 ;;		wreg, status,2, status,0
 17903 ;; Tracked objects:
 17904 ;;		On entry : 0/0
 17905 ;;		On exit  : 0/0
 17906 ;;		Unchanged: 0/0
 17907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17912 ;;Total ram usage:        3 bytes
 17913 ;; Hardware stack levels used:    1
 17914 ;; This function calls:
 17915 ;;		Nothing
 17916 ;; This function is called by:
 17917 ;;		i2_printf
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text72
 17922  003E6E                     __ptext72:
 17923                           	opt stack 0
 17924  003E6E                     i2_isdigit:
 17925                           	opt stack 20
 17926                           
 17927                           ;incstack = 0
 17928                           ;i2isdigit@c stored from wreg
 17929  003E6E  6E03               	movwf	i2isdigit@c,c
 17930  003E70  0E00               	movlw	0
 17931  003E72  6E02               	movwf	i2_isdigit$1788,c
 17932  003E74  0E3A               	movlw	58
 17933  003E76  6003               	cpfslt	i2isdigit@c,c
 17934  003E78  D005               	goto	i2l4887
 17935  003E7A  0E2F               	movlw	47
 17936  003E7C  6403               	cpfsgt	i2isdigit@c,c
 17937  003E7E  D002               	goto	i2l4887
 17938  003E80  0E01               	movlw	1
 17939  003E82  6E02               	movwf	i2_isdigit$1788,c
 17940  003E84                     i2l4887:
 17941  003E84  C002  F001         	movff	i2_isdigit$1788,??i2_isdigit
 17942  003E88  3001               	rrcf	??i2_isdigit,w,c
 17943  003E8A  0012               	return	
 17944  003E8C                     __end_ofi2_isdigit:
 17945                           	opt stack 0
 17946                           pclatu	equ	0xFFB
 17947                           pclath	equ	0xFFA
 17948                           tblptru	equ	0xFF8
 17949                           tblptrh	equ	0xFF7
 17950                           tblptrl	equ	0xFF6
 17951                           tablat	equ	0xFF5
 17952                           prodh	equ	0xFF4
 17953                           prodl	equ	0xFF3
 17954                           intcon	equ	0xFF2
 17955                           intcon2	equ	0xFF1
 17956                           intcon3	equ	0xFF0
 17957                           indf0	equ	0xFEF
 17958                           postinc0	equ	0xFEE
 17959                           fsr0h	equ	0xFEA
 17960                           fsr0l	equ	0xFE9
 17961                           wreg	equ	0xFE8
 17962                           postdec1	equ	0xFE5
 17963                           fsr1h	equ	0xFE2
 17964                           fsr1l	equ	0xFE1
 17965                           indf2	equ	0xFDF
 17966                           postinc2	equ	0xFDE
 17967                           postdec2	equ	0xFDD
 17968                           fsr2h	equ	0xFDA
 17969                           fsr2l	equ	0xFD9
 17970                           status	equ	0xFD8
 17971                           
 17972 ;; *************** function i2___wmul *****************
 17973 ;; Defined at:
 17974 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;  multiplier      2    0[COMRAM] unsigned int 
 17977 ;;  multiplicand    2    2[COMRAM] unsigned int 
 17978 ;; Auto vars:     Size  Location     Type
 17979 ;;  __wmul          2    4[COMRAM] unsigned int 
 17980 ;; Return value:  Size  Location     Type
 17981 ;;                  2    0[COMRAM] unsigned int 
 17982 ;; Registers used:
 17983 ;;		wreg, status,2, status,0, prodl, prodh
 17984 ;; Tracked objects:
 17985 ;;		On entry : 0/0
 17986 ;;		On exit  : 0/0
 17987 ;;		Unchanged: 0/0
 17988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17992 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17993 ;;Total ram usage:        6 bytes
 17994 ;; Hardware stack levels used:    1
 17995 ;; This function calls:
 17996 ;;		Nothing
 17997 ;; This function is called by:
 17998 ;;		_printSortTimer
 17999 ;;		_retrieveLog
 18000 ;;		i2_printf
 18001 ;; This function uses a non-reentrant model
 18002 ;;
 18003                           
 18004                           	psect	text73
 18005  003D96                     __ptext73:
 18006                           	opt stack 0
 18007  003D96                     i2___wmul:
 18008                           	opt stack 20
 18009                           
 18010                           ;incstack = 0
 18011  003D96  5001               	movf	i2___wmul@multiplier,w,c
 18012  003D98  0203               	mulwf	i2___wmul@multiplicand,c
 18013  003D9A  CFF3 F005          	movff	prodl,i2___wmul@product
 18014  003D9E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18015  003DA2  5001               	movf	i2___wmul@multiplier,w,c
 18016  003DA4  0204               	mulwf	i2___wmul@multiplicand+1,c
 18017  003DA6  50F3               	movf	prodl,w,c
 18018  003DA8  2606               	addwf	i2___wmul@product+1,f,c
 18019  003DAA  5002               	movf	i2___wmul@multiplier+1,w,c
 18020  003DAC  0203               	mulwf	i2___wmul@multiplicand,c
 18021  003DAE  50F3               	movf	prodl,w,c
 18022  003DB0  2606               	addwf	i2___wmul@product+1,f,c
 18023  003DB2  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18024  003DB6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18025  003DBA  0012               	return	
 18026  003DBC                     __end_ofi2___wmul:
 18027                           	opt stack 0
 18028                           pclatu	equ	0xFFB
 18029                           pclath	equ	0xFFA
 18030                           tblptru	equ	0xFF8
 18031                           tblptrh	equ	0xFF7
 18032                           tblptrl	equ	0xFF6
 18033                           tablat	equ	0xFF5
 18034                           prodh	equ	0xFF4
 18035                           prodl	equ	0xFF3
 18036                           intcon	equ	0xFF2
 18037                           intcon2	equ	0xFF1
 18038                           intcon3	equ	0xFF0
 18039                           indf0	equ	0xFEF
 18040                           postinc0	equ	0xFEE
 18041                           fsr0h	equ	0xFEA
 18042                           fsr0l	equ	0xFE9
 18043                           wreg	equ	0xFE8
 18044                           postdec1	equ	0xFE5
 18045                           fsr1h	equ	0xFE2
 18046                           fsr1l	equ	0xFE1
 18047                           indf2	equ	0xFDF
 18048                           postinc2	equ	0xFDE
 18049                           postdec2	equ	0xFDD
 18050                           fsr2h	equ	0xFDA
 18051                           fsr2l	equ	0xFD9
 18052                           status	equ	0xFD8
 18053                           
 18054 ;; *************** function i2___lwmod *****************
 18055 ;; Defined at:
 18056 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18057 ;; Parameters:    Size  Location     Type
 18058 ;;  dividend        2    0[COMRAM] unsigned int 
 18059 ;;  divisor         2    2[COMRAM] unsigned int 
 18060 ;; Auto vars:     Size  Location     Type
 18061 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18062 ;; Return value:  Size  Location     Type
 18063 ;;                  2    0[COMRAM] unsigned int 
 18064 ;; Registers used:
 18065 ;;		wreg, status,2, status,0
 18066 ;; Tracked objects:
 18067 ;;		On entry : 0/0
 18068 ;;		On exit  : 0/0
 18069 ;;		Unchanged: 0/0
 18070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18074 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18075 ;;Total ram usage:        5 bytes
 18076 ;; Hardware stack levels used:    1
 18077 ;; This function calls:
 18078 ;;		Nothing
 18079 ;; This function is called by:
 18080 ;;		_printSortTimer
 18081 ;;		i2_printf
 18082 ;; This function uses a non-reentrant model
 18083 ;;
 18084                           
 18085                           	psect	text74
 18086  003990                     __ptext74:
 18087                           	opt stack 0
 18088  003990                     i2___lwmod:
 18089                           	opt stack 20
 18090                           
 18091                           ;incstack = 0
 18092  003990  5003               	movf	i2___lwmod@divisor,w,c
 18093  003992  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18094  003994  B4D8               	btfsc	status,2,c
 18095  003996  D018               	goto	i2l1576
 18096  003998  0E01               	movlw	1
 18097  00399A  6E05               	movwf	i2___lwmod@counter,c
 18098  00399C  D004               	goto	i2l4919
 18099  00399E                     i2l4917:
 18100  00399E  90D8               	bcf	status,0,c
 18101  0039A0  3603               	rlcf	i2___lwmod@divisor,f,c
 18102  0039A2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18103  0039A4  2A05               	incf	i2___lwmod@counter,f,c
 18104  0039A6                     i2l4919:
 18105  0039A6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18106  0039A8  D7FA               	goto	i2l4917
 18107  0039AA                     i2l4921:
 18108  0039AA  5003               	movf	i2___lwmod@divisor,w,c
 18109  0039AC  5C01               	subwf	i2___lwmod@dividend,w,c
 18110  0039AE  5004               	movf	i2___lwmod@divisor+1,w,c
 18111  0039B0  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18112  0039B2  A0D8               	btfss	status,0,c
 18113  0039B4  D004               	goto	i2l4925
 18114  0039B6  5003               	movf	i2___lwmod@divisor,w,c
 18115  0039B8  5E01               	subwf	i2___lwmod@dividend,f,c
 18116  0039BA  5004               	movf	i2___lwmod@divisor+1,w,c
 18117  0039BC  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18118  0039BE                     i2l4925:
 18119  0039BE  90D8               	bcf	status,0,c
 18120  0039C0  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18121  0039C2  3203               	rrcf	i2___lwmod@divisor,f,c
 18122  0039C4  2E05               	decfsz	i2___lwmod@counter,f,c
 18123  0039C6  D7F1               	goto	i2l4921
 18124  0039C8                     i2l1576:
 18125  0039C8  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18126  0039CC  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18127  0039D0  0012               	return		;funcret
 18128  0039D2                     __end_ofi2___lwmod:
 18129                           	opt stack 0
 18130                           pclatu	equ	0xFFB
 18131                           pclath	equ	0xFFA
 18132                           tblptru	equ	0xFF8
 18133                           tblptrh	equ	0xFF7
 18134                           tblptrl	equ	0xFF6
 18135                           tablat	equ	0xFF5
 18136                           prodh	equ	0xFF4
 18137                           prodl	equ	0xFF3
 18138                           intcon	equ	0xFF2
 18139                           intcon2	equ	0xFF1
 18140                           intcon3	equ	0xFF0
 18141                           indf0	equ	0xFEF
 18142                           postinc0	equ	0xFEE
 18143                           fsr0h	equ	0xFEA
 18144                           fsr0l	equ	0xFE9
 18145                           wreg	equ	0xFE8
 18146                           postdec1	equ	0xFE5
 18147                           fsr1h	equ	0xFE2
 18148                           fsr1l	equ	0xFE1
 18149                           indf2	equ	0xFDF
 18150                           postinc2	equ	0xFDE
 18151                           postdec2	equ	0xFDD
 18152                           fsr2h	equ	0xFDA
 18153                           fsr2l	equ	0xFD9
 18154                           status	equ	0xFD8
 18155                           
 18156 ;; *************** function i2___lwdiv *****************
 18157 ;; Defined at:
 18158 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18159 ;; Parameters:    Size  Location     Type
 18160 ;;  dividend        2    5[COMRAM] unsigned int 
 18161 ;;  divisor         2    7[COMRAM] unsigned int 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18164 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18165 ;; Return value:  Size  Location     Type
 18166 ;;                  2    5[COMRAM] unsigned int 
 18167 ;; Registers used:
 18168 ;;		wreg, status,2, status,0
 18169 ;; Tracked objects:
 18170 ;;		On entry : 0/0
 18171 ;;		On exit  : 0/0
 18172 ;;		Unchanged: 0/0
 18173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;Total ram usage:        7 bytes
 18179 ;; Hardware stack levels used:    1
 18180 ;; This function calls:
 18181 ;;		Nothing
 18182 ;; This function is called by:
 18183 ;;		_printSortTimer
 18184 ;;		i2_printf
 18185 ;; This function uses a non-reentrant model
 18186 ;;
 18187                           
 18188                           	psect	text75
 18189  0037C4                     __ptext75:
 18190                           	opt stack 0
 18191  0037C4                     i2___lwdiv:
 18192                           	opt stack 20
 18193                           
 18194                           ;incstack = 0
 18195  0037C4  0E00               	movlw	0
 18196  0037C6  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18197  0037C8  0E00               	movlw	0
 18198  0037CA  6E0A               	movwf	i2___lwdiv@quotient,c
 18199  0037CC  5008               	movf	i2___lwdiv@divisor,w,c
 18200  0037CE  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18201  0037D0  B4D8               	btfsc	status,2,c
 18202  0037D2  D01C               	goto	i2l1566
 18203  0037D4  0E01               	movlw	1
 18204  0037D6  6E0C               	movwf	i2___lwdiv@counter,c
 18205  0037D8  D004               	goto	i2l4899
 18206  0037DA                     i2l4897:
 18207  0037DA  90D8               	bcf	status,0,c
 18208  0037DC  3608               	rlcf	i2___lwdiv@divisor,f,c
 18209  0037DE  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18210  0037E0  2A0C               	incf	i2___lwdiv@counter,f,c
 18211  0037E2                     i2l4899:
 18212  0037E2  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18213  0037E4  D7FA               	goto	i2l4897
 18214  0037E6                     i2l4901:
 18215  0037E6  90D8               	bcf	status,0,c
 18216  0037E8  360A               	rlcf	i2___lwdiv@quotient,f,c
 18217  0037EA  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18218  0037EC  5008               	movf	i2___lwdiv@divisor,w,c
 18219  0037EE  5C06               	subwf	i2___lwdiv@dividend,w,c
 18220  0037F0  5009               	movf	i2___lwdiv@divisor+1,w,c
 18221  0037F2  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18222  0037F4  A0D8               	btfss	status,0,c
 18223  0037F6  D005               	goto	i2l4909
 18224  0037F8  5008               	movf	i2___lwdiv@divisor,w,c
 18225  0037FA  5E06               	subwf	i2___lwdiv@dividend,f,c
 18226  0037FC  5009               	movf	i2___lwdiv@divisor+1,w,c
 18227  0037FE  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18228  003800  800A               	bsf	i2___lwdiv@quotient,0,c
 18229  003802                     i2l4909:
 18230  003802  90D8               	bcf	status,0,c
 18231  003804  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18232  003806  3208               	rrcf	i2___lwdiv@divisor,f,c
 18233  003808  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18234  00380A  D7ED               	goto	i2l4901
 18235  00380C                     i2l1566:
 18236  00380C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18237  003810  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18238  003814  0012               	return		;funcret
 18239  003816                     __end_ofi2___lwdiv:
 18240                           	opt stack 0
 18241                           pclatu	equ	0xFFB
 18242                           pclath	equ	0xFFA
 18243                           tblptru	equ	0xFF8
 18244                           tblptrh	equ	0xFF7
 18245                           tblptrl	equ	0xFF6
 18246                           tablat	equ	0xFF5
 18247                           prodh	equ	0xFF4
 18248                           prodl	equ	0xFF3
 18249                           intcon	equ	0xFF2
 18250                           intcon2	equ	0xFF1
 18251                           intcon3	equ	0xFF0
 18252                           indf0	equ	0xFEF
 18253                           postinc0	equ	0xFEE
 18254                           fsr0h	equ	0xFEA
 18255                           fsr0l	equ	0xFE9
 18256                           wreg	equ	0xFE8
 18257                           postdec1	equ	0xFE5
 18258                           fsr1h	equ	0xFE2
 18259                           fsr1l	equ	0xFE1
 18260                           indf2	equ	0xFDF
 18261                           postinc2	equ	0xFDE
 18262                           postdec2	equ	0xFDD
 18263                           fsr2h	equ	0xFDA
 18264                           fsr2l	equ	0xFD9
 18265                           status	equ	0xFD8
 18266                           
 18267 ;; *************** function i2_lcdInst *****************
 18268 ;; Defined at:
 18269 ;;		line 15 in file "lcd.c"
 18270 ;; Parameters:    Size  Location     Type
 18271 ;;  data            1    wreg     unsigned char 
 18272 ;; Auto vars:     Size  Location     Type
 18273 ;;  data            1    2[COMRAM] unsigned char 
 18274 ;; Return value:  Size  Location     Type
 18275 ;;                  1    wreg      void 
 18276 ;; Registers used:
 18277 ;;		wreg, status,2, status,0, cstack
 18278 ;; Tracked objects:
 18279 ;;		On entry : 0/0
 18280 ;;		On exit  : 0/0
 18281 ;;		Unchanged: 0/0
 18282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18287 ;;Total ram usage:        1 bytes
 18288 ;; Hardware stack levels used:    1
 18289 ;; Hardware stack levels required when called:    1
 18290 ;; This function calls:
 18291 ;;		i2_lcdNibble
 18292 ;; This function is called by:
 18293 ;;		_change_state_to_menu_11
 18294 ;;		_change_state_to_menu_23
 18295 ;;		_change_state_to_logs_11
 18296 ;;		_change_state_to_logs_12
 18297 ;;		_change_state_to_logs_22
 18298 ;;		_change_state_to_logs_23
 18299 ;;		_change_state_to_logs_33
 18300 ;;		_change_state_to_logs_34
 18301 ;;		_printSortTimer
 18302 ;;		i2_change_state_to_menu_start
 18303 ;;		i2_change_state_to_menu_12
 18304 ;;		i2_change_state_to_menu_22
 18305 ;;		i2_printRTC
 18306 ;; This function uses a non-reentrant model
 18307 ;;
 18308                           
 18309                           	psect	text76
 18310  003F22                     __ptext76:
 18311                           	opt stack 0
 18312  003F22                     i2_lcdInst:
 18313                           	opt stack 19
 18314                           
 18315                           ;incstack = 0
 18316                           ;i2lcdInst@data stored from wreg
 18317  003F22  6E03               	movwf	i2lcdInst@data,c
 18318                           
 18319                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18320  003F24  948C               	bcf	3980,2,c	;volatile
 18321                           
 18322                           ;lcd.c: 17: lcdNibble(data);
 18323  003F26  5003               	movf	i2lcdInst@data,w,c
 18324  003F28  ECB7  F01B         	call	i2_lcdNibble
 18325  003F2C  0012               	return		;funcret
 18326  003F2E                     __end_ofi2_lcdInst:
 18327                           	opt stack 0
 18328                           pclatu	equ	0xFFB
 18329                           pclath	equ	0xFFA
 18330                           tblptru	equ	0xFF8
 18331                           tblptrh	equ	0xFF7
 18332                           tblptrl	equ	0xFF6
 18333                           tablat	equ	0xFF5
 18334                           prodh	equ	0xFF4
 18335                           prodl	equ	0xFF3
 18336                           intcon	equ	0xFF2
 18337                           intcon2	equ	0xFF1
 18338                           intcon3	equ	0xFF0
 18339                           indf0	equ	0xFEF
 18340                           postinc0	equ	0xFEE
 18341                           fsr0h	equ	0xFEA
 18342                           fsr0l	equ	0xFE9
 18343                           wreg	equ	0xFE8
 18344                           postdec1	equ	0xFE5
 18345                           fsr1h	equ	0xFE2
 18346                           fsr1l	equ	0xFE1
 18347                           indf2	equ	0xFDF
 18348                           postinc2	equ	0xFDE
 18349                           postdec2	equ	0xFDD
 18350                           fsr2h	equ	0xFDA
 18351                           fsr2l	equ	0xFD9
 18352                           status	equ	0xFD8
 18353                           
 18354 ;; *************** function i2_lcdNibble *****************
 18355 ;; Defined at:
 18356 ;;		line 25 in file "lcd.c"
 18357 ;; Parameters:    Size  Location     Type
 18358 ;;  data            1    wreg     unsigned char 
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;  data            1    1[COMRAM] unsigned char 
 18361 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18362 ;; Return value:  Size  Location     Type
 18363 ;;                  1    wreg      void 
 18364 ;; Registers used:
 18365 ;;		wreg, status,2, status,0
 18366 ;; Tracked objects:
 18367 ;;		On entry : 0/0
 18368 ;;		On exit  : 0/0
 18369 ;;		Unchanged: 0/0
 18370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18375 ;;Total ram usage:        2 bytes
 18376 ;; Hardware stack levels used:    1
 18377 ;; This function calls:
 18378 ;;		Nothing
 18379 ;; This function is called by:
 18380 ;;		i2_lcdInst
 18381 ;;		i2_putch
 18382 ;; This function uses a non-reentrant model
 18383 ;;
 18384                           
 18385                           	psect	text77
 18386  00376E                     __ptext77:
 18387                           	opt stack 0
 18388  00376E                     i2_lcdNibble:
 18389                           	opt stack 19
 18390                           
 18391                           ;incstack = 0
 18392                           ;i2lcdNibble@data stored from wreg
 18393  00376E  6E02               	movwf	i2lcdNibble@data,c
 18394                           
 18395                           ;lcd.c: 27: char temp = data & 0xF0;
 18396  003770  5002               	movf	i2lcdNibble@data,w,c
 18397  003772  0BF0               	andlw	240
 18398  003774  6E01               	movwf	i2lcdNibble@temp,c
 18399                           
 18400                           ;lcd.c: 28: LATD = LATD & 0x0F;
 18401  003776  508C               	movf	3980,w,c	;volatile
 18402  003778  0B0F               	andlw	15
 18403  00377A  6E8C               	movwf	3980,c	;volatile
 18404                           
 18405                           ;lcd.c: 29: LATD = temp | LATD;
 18406  00377C  5001               	movf	i2lcdNibble@temp,w,c
 18407  00377E  108C               	iorwf	3980,w,c	;volatile
 18408  003780  6E8C               	movwf	3980,c	;volatile
 18409                           
 18410                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 18411  003782  868C               	bsf	3980,3,c	;volatile
 18412                           
 18413                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18414  003784  0E42               	movlw	66
 18415  003786                     i2u728_47:
 18416  003786  2EE8               	decfsz	wreg,f,c
 18417  003788  D7FE               	bra	i2u728_47
 18418  00378A  D000               	nop2	
 18419                           
 18420                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 18421  00378C  968C               	bcf	3980,3,c	;volatile
 18422                           
 18423                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18424  00378E  0E42               	movlw	66
 18425  003790                     i2u729_47:
 18426  003790  2EE8               	decfsz	wreg,f,c
 18427  003792  D7FE               	bra	i2u729_47
 18428  003794  D000               	nop2	
 18429                           
 18430                           ;lcd.c: 36: data = data << 4;
 18431  003796  3802               	swapf	i2lcdNibble@data,w,c
 18432  003798  0BF0               	andlw	240
 18433  00379A  6E02               	movwf	i2lcdNibble@data,c
 18434                           
 18435                           ;lcd.c: 38: temp = data & 0xF0;
 18436  00379C  5002               	movf	i2lcdNibble@data,w,c
 18437  00379E  0BF0               	andlw	240
 18438  0037A0  6E01               	movwf	i2lcdNibble@temp,c
 18439                           
 18440                           ;lcd.c: 39: LATD = LATD & 0x0F;
 18441  0037A2  508C               	movf	3980,w,c	;volatile
 18442  0037A4  0B0F               	andlw	15
 18443  0037A6  6E8C               	movwf	3980,c	;volatile
 18444                           
 18445                           ;lcd.c: 40: LATD = temp | LATD;
 18446  0037A8  5001               	movf	i2lcdNibble@temp,w,c
 18447  0037AA  108C               	iorwf	3980,w,c	;volatile
 18448  0037AC  6E8C               	movwf	3980,c	;volatile
 18449                           
 18450                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 18451  0037AE  868C               	bsf	3980,3,c	;volatile
 18452                           
 18453                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18454  0037B0  0E42               	movlw	66
 18455  0037B2                     i2u730_47:
 18456  0037B2  2EE8               	decfsz	wreg,f,c
 18457  0037B4  D7FE               	bra	i2u730_47
 18458  0037B6  D000               	nop2	
 18459                           
 18460                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 18461  0037B8  968C               	bcf	3980,3,c	;volatile
 18462                           
 18463                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18464  0037BA  0E42               	movlw	66
 18465  0037BC                     i2u731_47:
 18466  0037BC  2EE8               	decfsz	wreg,f,c
 18467  0037BE  D7FE               	bra	i2u731_47
 18468  0037C0  D000               	nop2	
 18469  0037C2  0012               	return		;funcret
 18470  0037C4                     __end_ofi2_lcdNibble:
 18471                           	opt stack 0
 18472                           pclatu	equ	0xFFB
 18473                           pclath	equ	0xFFA
 18474                           tblptru	equ	0xFF8
 18475                           tblptrh	equ	0xFF7
 18476                           tblptrl	equ	0xFF6
 18477                           tablat	equ	0xFF5
 18478                           prodh	equ	0xFF4
 18479                           prodl	equ	0xFF3
 18480                           intcon	equ	0xFF2
 18481                           intcon2	equ	0xFF1
 18482                           intcon3	equ	0xFF0
 18483                           indf0	equ	0xFEF
 18484                           postinc0	equ	0xFEE
 18485                           fsr0h	equ	0xFEA
 18486                           fsr0l	equ	0xFE9
 18487                           wreg	equ	0xFE8
 18488                           postdec1	equ	0xFE5
 18489                           fsr1h	equ	0xFE2
 18490                           fsr1l	equ	0xFE1
 18491                           indf2	equ	0xFDF
 18492                           postinc2	equ	0xFDE
 18493                           postdec2	equ	0xFDD
 18494                           fsr2h	equ	0xFDA
 18495                           fsr2l	equ	0xFD9
 18496                           status	equ	0xFD8
 18497                           
 18498 ;; *************** function i2_getRTC *****************
 18499 ;; Defined at:
 18500 ;;		line 44 in file "RTC.c"
 18501 ;; Parameters:    Size  Location     Type
 18502 ;;		None
 18503 ;; Auto vars:     Size  Location     Type
 18504 ;;  getRTC          2    3[COMRAM] int 
 18505 ;; Return value:  Size  Location     Type
 18506 ;;                  1    wreg      void 
 18507 ;; Registers used:
 18508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18509 ;; Tracked objects:
 18510 ;;		On entry : 0/0
 18511 ;;		On exit  : 0/0
 18512 ;;		Unchanged: 0/0
 18513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;Total ram usage:        2 bytes
 18519 ;; Hardware stack levels used:    1
 18520 ;; Hardware stack levels required when called:    2
 18521 ;; This function calls:
 18522 ;;		i2_I2C_Master_Read
 18523 ;;		i2_I2C_Master_Start
 18524 ;;		i2_I2C_Master_Stop
 18525 ;;		i2_I2C_Master_Write
 18526 ;; This function is called by:
 18527 ;;		_printSortTimer
 18528 ;;		i2_printRTC
 18529 ;; This function uses a non-reentrant model
 18530 ;;
 18531                           
 18532                           	psect	text78
 18533  0034B6                     __ptext78:
 18534                           	opt stack 0
 18535  0034B6                     i2_getRTC:
 18536                           	opt stack 18
 18537                           
 18538                           ;RTC.c: 48: I2C_Master_Start();
 18539                           
 18540                           ;incstack = 0
 18541  0034B6  ECB1  F01F         	call	i2_I2C_Master_Start	;wreg free
 18542                           
 18543                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 18544  0034BA  0E00               	movlw	0
 18545  0034BC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18546  0034BE  0ED0               	movlw	208
 18547  0034C0  6E02               	movwf	i2I2C_Master_Write@d,c
 18548  0034C2  EC9C  F01F         	call	i2_I2C_Master_Write	;wreg free
 18549                           
 18550                           ;RTC.c: 50: I2C_Master_Write(0x00);
 18551  0034C6  0E00               	movlw	0
 18552  0034C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18553  0034CA  0E00               	movlw	0
 18554  0034CC  6E02               	movwf	i2I2C_Master_Write@d,c
 18555  0034CE  EC9C  F01F         	call	i2_I2C_Master_Write	;wreg free
 18556                           
 18557                           ;RTC.c: 51: I2C_Master_Stop();
 18558  0034D2  ECAD  F01F         	call	i2_I2C_Master_Stop	;wreg free
 18559                           
 18560                           ;RTC.c: 54: I2C_Master_Start();
 18561  0034D6  ECB1  F01F         	call	i2_I2C_Master_Start	;wreg free
 18562                           
 18563                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 18564  0034DA  0E00               	movlw	0
 18565  0034DC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18566  0034DE  0ED1               	movlw	209
 18567  0034E0  6E02               	movwf	i2I2C_Master_Write@d,c
 18568  0034E2  EC9C  F01F         	call	i2_I2C_Master_Write	;wreg free
 18569                           
 18570                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 18571  0034E6  0E00               	movlw	0
 18572  0034E8  6E05               	movwf	i2getRTC@i+1,c
 18573  0034EA  0E00               	movlw	0
 18574  0034EC  6E04               	movwf	i2getRTC@i,c
 18575  0034EE                     i2l5149:
 18576  0034EE  BE05               	btfsc	i2getRTC@i+1,7,c
 18577  0034F0  D006               	goto	i2l5153
 18578  0034F2  5005               	movf	i2getRTC@i+1,w,c
 18579  0034F4  E111               	bnz	i2l5159
 18580  0034F6  0E06               	movlw	6
 18581  0034F8  5C04               	subwf	i2getRTC@i,w,c
 18582  0034FA  B0D8               	btfsc	status,0,c
 18583  0034FC  D00D               	goto	i2l5159
 18584  0034FE                     i2l5153:
 18585                           
 18586                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 18587  0034FE  0E24               	movlw	low _time
 18588  003500  2404               	addwf	i2getRTC@i,w,c
 18589  003502  6ED9               	movwf	fsr2l,c
 18590  003504  0E01               	movlw	high _time
 18591  003506  2005               	addwfc	i2getRTC@i+1,w,c
 18592  003508  6EDA               	movwf	fsr2h,c
 18593  00350A  0E01               	movlw	1
 18594  00350C  ECDE  F01E         	call	i2_I2C_Master_Read
 18595  003510  6EDF               	movwf	indf2,c
 18596  003512  4A04               	infsnz	i2getRTC@i,f,c
 18597  003514  2A05               	incf	i2getRTC@i+1,f,c
 18598  003516  D7EB               	goto	i2l5149
 18599  003518                     i2l5159:
 18600                           
 18601                           ;RTC.c: 58: }
 18602                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 18603  003518  0E00               	movlw	0
 18604  00351A  ECDE  F01E         	call	i2_I2C_Master_Read
 18605  00351E  0101               	movlb	1	; () banked
 18606  003520  6F2A               	movwf	(_time+6)& (0+255),b
 18607                           
 18608                           ;RTC.c: 60: I2C_Master_Stop();
 18609  003522  ECAD  F01F         	call	i2_I2C_Master_Stop	;wreg free
 18610  003526  0012               	return		;funcret
 18611  003528                     __end_ofi2_getRTC:
 18612                           	opt stack 0
 18613                           pclatu	equ	0xFFB
 18614                           pclath	equ	0xFFA
 18615                           tblptru	equ	0xFF8
 18616                           tblptrh	equ	0xFF7
 18617                           tblptrl	equ	0xFF6
 18618                           tablat	equ	0xFF5
 18619                           prodh	equ	0xFF4
 18620                           prodl	equ	0xFF3
 18621                           intcon	equ	0xFF2
 18622                           intcon2	equ	0xFF1
 18623                           intcon3	equ	0xFF0
 18624                           indf0	equ	0xFEF
 18625                           postinc0	equ	0xFEE
 18626                           fsr0h	equ	0xFEA
 18627                           fsr0l	equ	0xFE9
 18628                           wreg	equ	0xFE8
 18629                           postdec1	equ	0xFE5
 18630                           fsr1h	equ	0xFE2
 18631                           fsr1l	equ	0xFE1
 18632                           indf2	equ	0xFDF
 18633                           postinc2	equ	0xFDE
 18634                           postdec2	equ	0xFDD
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function i2_I2C_Master_Write *****************
 18640 ;; Defined at:
 18641 ;;		line 49 in file "I2C.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  d               2    1[COMRAM] unsigned int 
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;		None
 18646 ;; Return value:  Size  Location     Type
 18647 ;;                  1    wreg      void 
 18648 ;; Registers used:
 18649 ;;		wreg, status,2, status,0, cstack
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;Total ram usage:        2 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    1
 18662 ;; This function calls:
 18663 ;;		i2_I2C_Master_Wait
 18664 ;; This function is called by:
 18665 ;;		i2_getRTC
 18666 ;; This function uses a non-reentrant model
 18667 ;;
 18668                           
 18669                           	psect	text79
 18670  003F38                     __ptext79:
 18671                           	opt stack 0
 18672  003F38                     i2_I2C_Master_Write:
 18673                           	opt stack 18
 18674                           
 18675                           ;I2C.c: 51: I2C_Master_Wait();
 18676                           
 18677                           ;incstack = 0
 18678  003F38  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18679                           
 18680                           ;I2C.c: 52: SSPBUF = d;
 18681  003F3C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 18682  003F40  0012               	return		;funcret
 18683  003F42                     __end_ofi2_I2C_Master_Write:
 18684                           	opt stack 0
 18685                           pclatu	equ	0xFFB
 18686                           pclath	equ	0xFFA
 18687                           tblptru	equ	0xFF8
 18688                           tblptrh	equ	0xFF7
 18689                           tblptrl	equ	0xFF6
 18690                           tablat	equ	0xFF5
 18691                           prodh	equ	0xFF4
 18692                           prodl	equ	0xFF3
 18693                           intcon	equ	0xFF2
 18694                           intcon2	equ	0xFF1
 18695                           intcon3	equ	0xFF0
 18696                           indf0	equ	0xFEF
 18697                           postinc0	equ	0xFEE
 18698                           fsr0h	equ	0xFEA
 18699                           fsr0l	equ	0xFE9
 18700                           wreg	equ	0xFE8
 18701                           postdec1	equ	0xFE5
 18702                           fsr1h	equ	0xFE2
 18703                           fsr1l	equ	0xFE1
 18704                           indf2	equ	0xFDF
 18705                           postinc2	equ	0xFDE
 18706                           postdec2	equ	0xFDD
 18707                           fsr2h	equ	0xFDA
 18708                           fsr2l	equ	0xFD9
 18709                           status	equ	0xFD8
 18710                           
 18711 ;; *************** function i2_I2C_Master_Stop *****************
 18712 ;; Defined at:
 18713 ;;		line 43 in file "I2C.c"
 18714 ;; Parameters:    Size  Location     Type
 18715 ;;		None
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;		None
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  1    wreg      void 
 18720 ;; Registers used:
 18721 ;;		wreg, status,2, status,0, cstack
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18731 ;;Total ram usage:        0 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    1
 18734 ;; This function calls:
 18735 ;;		i2_I2C_Master_Wait
 18736 ;; This function is called by:
 18737 ;;		i2_getRTC
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text80
 18742  003F5A                     __ptext80:
 18743                           	opt stack 0
 18744  003F5A                     i2_I2C_Master_Stop:
 18745                           	opt stack 18
 18746                           
 18747                           ;I2C.c: 45: I2C_Master_Wait();
 18748                           
 18749                           ;incstack = 0
 18750  003F5A  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18751                           
 18752                           ;I2C.c: 46: PEN = 1;
 18753  003F5E  84C5               	bsf	4037,2,c	;volatile
 18754  003F60  0012               	return		;funcret
 18755  003F62                     __end_ofi2_I2C_Master_Stop:
 18756                           	opt stack 0
 18757                           pclatu	equ	0xFFB
 18758                           pclath	equ	0xFFA
 18759                           tblptru	equ	0xFF8
 18760                           tblptrh	equ	0xFF7
 18761                           tblptrl	equ	0xFF6
 18762                           tablat	equ	0xFF5
 18763                           prodh	equ	0xFF4
 18764                           prodl	equ	0xFF3
 18765                           intcon	equ	0xFF2
 18766                           intcon2	equ	0xFF1
 18767                           intcon3	equ	0xFF0
 18768                           indf0	equ	0xFEF
 18769                           postinc0	equ	0xFEE
 18770                           fsr0h	equ	0xFEA
 18771                           fsr0l	equ	0xFE9
 18772                           wreg	equ	0xFE8
 18773                           postdec1	equ	0xFE5
 18774                           fsr1h	equ	0xFE2
 18775                           fsr1l	equ	0xFE1
 18776                           indf2	equ	0xFDF
 18777                           postinc2	equ	0xFDE
 18778                           postdec2	equ	0xFDD
 18779                           fsr2h	equ	0xFDA
 18780                           fsr2l	equ	0xFD9
 18781                           status	equ	0xFD8
 18782                           
 18783 ;; *************** function i2_I2C_Master_Start *****************
 18784 ;; Defined at:
 18785 ;;		line 31 in file "I2C.c"
 18786 ;; Parameters:    Size  Location     Type
 18787 ;;		None
 18788 ;; Auto vars:     Size  Location     Type
 18789 ;;		None
 18790 ;; Return value:  Size  Location     Type
 18791 ;;                  1    wreg      void 
 18792 ;; Registers used:
 18793 ;;		wreg, status,2, status,0, cstack
 18794 ;; Tracked objects:
 18795 ;;		On entry : 0/0
 18796 ;;		On exit  : 0/0
 18797 ;;		Unchanged: 0/0
 18798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18803 ;;Total ram usage:        0 bytes
 18804 ;; Hardware stack levels used:    1
 18805 ;; Hardware stack levels required when called:    1
 18806 ;; This function calls:
 18807 ;;		i2_I2C_Master_Wait
 18808 ;; This function is called by:
 18809 ;;		i2_getRTC
 18810 ;; This function uses a non-reentrant model
 18811 ;;
 18812                           
 18813                           	psect	text81
 18814  003F62                     __ptext81:
 18815                           	opt stack 0
 18816  003F62                     i2_I2C_Master_Start:
 18817                           	opt stack 18
 18818                           
 18819                           ;I2C.c: 33: I2C_Master_Wait();
 18820                           
 18821                           ;incstack = 0
 18822  003F62  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18823                           
 18824                           ;I2C.c: 34: SEN = 1;
 18825  003F66  80C5               	bsf	4037,0,c	;volatile
 18826  003F68  0012               	return		;funcret
 18827  003F6A                     __end_ofi2_I2C_Master_Start:
 18828                           	opt stack 0
 18829                           pclatu	equ	0xFFB
 18830                           pclath	equ	0xFFA
 18831                           tblptru	equ	0xFF8
 18832                           tblptrh	equ	0xFF7
 18833                           tblptrl	equ	0xFF6
 18834                           tablat	equ	0xFF5
 18835                           prodh	equ	0xFF4
 18836                           prodl	equ	0xFF3
 18837                           intcon	equ	0xFF2
 18838                           intcon2	equ	0xFF1
 18839                           intcon3	equ	0xFF0
 18840                           indf0	equ	0xFEF
 18841                           postinc0	equ	0xFEE
 18842                           fsr0h	equ	0xFEA
 18843                           fsr0l	equ	0xFE9
 18844                           wreg	equ	0xFE8
 18845                           postdec1	equ	0xFE5
 18846                           fsr1h	equ	0xFE2
 18847                           fsr1l	equ	0xFE1
 18848                           indf2	equ	0xFDF
 18849                           postinc2	equ	0xFDE
 18850                           postdec2	equ	0xFDD
 18851                           fsr2h	equ	0xFDA
 18852                           fsr2l	equ	0xFD9
 18853                           status	equ	0xFD8
 18854                           
 18855 ;; *************** function i2_I2C_Master_Read *****************
 18856 ;; Defined at:
 18857 ;;		line 55 in file "I2C.c"
 18858 ;; Parameters:    Size  Location     Type
 18859 ;;  a               1    wreg     unsigned char 
 18860 ;; Auto vars:     Size  Location     Type
 18861 ;;  a               1    1[COMRAM] unsigned char 
 18862 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 18863 ;; Return value:  Size  Location     Type
 18864 ;;                  1    wreg      unsigned char 
 18865 ;; Registers used:
 18866 ;;		wreg, status,2, status,0, cstack
 18867 ;; Tracked objects:
 18868 ;;		On entry : 0/0
 18869 ;;		On exit  : 0/0
 18870 ;;		Unchanged: 0/0
 18871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;Total ram usage:        2 bytes
 18877 ;; Hardware stack levels used:    1
 18878 ;; Hardware stack levels required when called:    1
 18879 ;; This function calls:
 18880 ;;		i2_I2C_Master_Wait
 18881 ;; This function is called by:
 18882 ;;		i2_getRTC
 18883 ;; This function uses a non-reentrant model
 18884 ;;
 18885                           
 18886                           	psect	text82
 18887  003DBC                     __ptext82:
 18888                           	opt stack 0
 18889  003DBC                     i2_I2C_Master_Read:
 18890                           	opt stack 18
 18891                           
 18892                           ;incstack = 0
 18893                           ;i2I2C_Master_Read@a stored from wreg
 18894  003DBC  6E02               	movwf	i2I2C_Master_Read@a,c
 18895                           
 18896                           ;I2C.c: 57: unsigned char temp;
 18897                           ;I2C.c: 58: I2C_Master_Wait();
 18898  003DBE  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18899                           
 18900                           ;I2C.c: 59: RCEN = 1;
 18901  003DC2  86C5               	bsf	4037,3,c	;volatile
 18902                           
 18903                           ;I2C.c: 60: I2C_Master_Wait();
 18904  003DC4  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18905                           
 18906                           ;I2C.c: 61: temp = SSPBUF;
 18907  003DC8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 18908                           
 18909                           ;I2C.c: 62: I2C_Master_Wait();
 18910  003DCC  EC72  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18911                           
 18912                           ;I2C.c: 63: ACKDT = (a)?0:1;
 18913  003DD0  5002               	movf	i2I2C_Master_Read@a,w,c
 18914  003DD2  A4D8               	btfss	status,2,c
 18915  003DD4  D002               	goto	i2u336_40
 18916  003DD6  8AC5               	bsf	4037,5,c	;volatile
 18917  003DD8  D001               	goto	i2l4863
 18918  003DDA                     i2u336_40:
 18919  003DDA  9AC5               	bcf	4037,5,c	;volatile
 18920  003DDC                     i2l4863:
 18921                           
 18922                           ;I2C.c: 64: ACKEN = 1;
 18923  003DDC  88C5               	bsf	4037,4,c	;volatile
 18924                           
 18925                           ;I2C.c: 65: return temp;
 18926  003DDE  5003               	movf	i2I2C_Master_Read@temp,w,c
 18927  003DE0  0012               	return	
 18928  003DE2                     __end_ofi2_I2C_Master_Read:
 18929                           	opt stack 0
 18930                           pclatu	equ	0xFFB
 18931                           pclath	equ	0xFFA
 18932                           tblptru	equ	0xFF8
 18933                           tblptrh	equ	0xFF7
 18934                           tblptrl	equ	0xFF6
 18935                           tablat	equ	0xFF5
 18936                           prodh	equ	0xFF4
 18937                           prodl	equ	0xFF3
 18938                           intcon	equ	0xFF2
 18939                           intcon2	equ	0xFF1
 18940                           intcon3	equ	0xFF0
 18941                           indf0	equ	0xFEF
 18942                           postinc0	equ	0xFEE
 18943                           fsr0h	equ	0xFEA
 18944                           fsr0l	equ	0xFE9
 18945                           wreg	equ	0xFE8
 18946                           postdec1	equ	0xFE5
 18947                           fsr1h	equ	0xFE2
 18948                           fsr1l	equ	0xFE1
 18949                           indf2	equ	0xFDF
 18950                           postinc2	equ	0xFDE
 18951                           postdec2	equ	0xFDD
 18952                           fsr2h	equ	0xFDA
 18953                           fsr2l	equ	0xFD9
 18954                           status	equ	0xFD8
 18955                           
 18956 ;; *************** function i2_I2C_Master_Wait *****************
 18957 ;; Defined at:
 18958 ;;		line 26 in file "I2C.c"
 18959 ;; Parameters:    Size  Location     Type
 18960 ;;		None
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;		None
 18963 ;; Return value:  Size  Location     Type
 18964 ;;                  1    wreg      void 
 18965 ;; Registers used:
 18966 ;;		wreg, status,2, status,0
 18967 ;; Tracked objects:
 18968 ;;		On entry : 0/0
 18969 ;;		On exit  : 0/0
 18970 ;;		Unchanged: 0/0
 18971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18974 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18976 ;;Total ram usage:        1 bytes
 18977 ;; Hardware stack levels used:    1
 18978 ;; This function calls:
 18979 ;;		Nothing
 18980 ;; This function is called by:
 18981 ;;		i2_I2C_Master_Start
 18982 ;;		i2_I2C_Master_Stop
 18983 ;;		i2_I2C_Master_Write
 18984 ;;		i2_I2C_Master_Read
 18985 ;; This function uses a non-reentrant model
 18986 ;;
 18987                           
 18988                           	psect	text83
 18989  003EE4                     __ptext83:
 18990                           	opt stack 0
 18991  003EE4                     i2_I2C_Master_Wait:
 18992                           	opt stack 18
 18993  003EE4                     i2l66:
 18994  003EE4  B4C7               	btfsc	4039,2,c	;volatile
 18995  003EE6  D7FE               	goto	i2l66
 18996  003EE8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 18997  003EEC  0E1F               	movlw	31
 18998  003EEE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 18999  003EF0  B4D8               	btfsc	status,2,c
 19000  003EF2  0012               	return	
 19001  003EF4  D7F7               	goto	i2l66
 19002  003EF6                     __end_ofi2_I2C_Master_Wait:
 19003                           	opt stack 0
 19004                           pclatu	equ	0xFFB
 19005                           pclath	equ	0xFFA
 19006                           tblptru	equ	0xFF8
 19007                           tblptrh	equ	0xFF7
 19008                           tblptrl	equ	0xFF6
 19009                           tablat	equ	0xFF5
 19010                           prodh	equ	0xFF4
 19011                           prodl	equ	0xFF3
 19012                           intcon	equ	0xFF2
 19013                           intcon2	equ	0xFF1
 19014                           intcon3	equ	0xFF0
 19015                           indf0	equ	0xFEF
 19016                           postinc0	equ	0xFEE
 19017                           fsr0h	equ	0xFEA
 19018                           fsr0l	equ	0xFE9
 19019                           wreg	equ	0xFE8
 19020                           postdec1	equ	0xFE5
 19021                           fsr1h	equ	0xFE2
 19022                           fsr1l	equ	0xFE1
 19023                           indf2	equ	0xFDF
 19024                           postinc2	equ	0xFDE
 19025                           postdec2	equ	0xFDD
 19026                           fsr2h	equ	0xFDA
 19027                           fsr2l	equ	0xFD9
 19028                           status	equ	0xFD8
 19029                           pclatu	equ	0xFFB
 19030                           pclath	equ	0xFFA
 19031                           tblptru	equ	0xFF8
 19032                           tblptrh	equ	0xFF7
 19033                           tblptrl	equ	0xFF6
 19034                           tablat	equ	0xFF5
 19035                           prodh	equ	0xFF4
 19036                           prodl	equ	0xFF3
 19037                           intcon	equ	0xFF2
 19038                           intcon2	equ	0xFF1
 19039                           intcon3	equ	0xFF0
 19040                           indf0	equ	0xFEF
 19041                           postinc0	equ	0xFEE
 19042                           fsr0h	equ	0xFEA
 19043                           fsr0l	equ	0xFE9
 19044                           wreg	equ	0xFE8
 19045                           postdec1	equ	0xFE5
 19046                           fsr1h	equ	0xFE2
 19047                           fsr1l	equ	0xFE1
 19048                           indf2	equ	0xFDF
 19049                           postinc2	equ	0xFDE
 19050                           postdec2	equ	0xFDD
 19051                           fsr2h	equ	0xFDA
 19052                           fsr2l	equ	0xFD9
 19053                           status	equ	0xFD8
 19054                           
 19055                           	psect	rparam
 19056  0000                     pclatu	equ	0xFFB
 19057                           pclath	equ	0xFFA
 19058                           tblptru	equ	0xFF8
 19059                           tblptrh	equ	0xFF7
 19060                           tblptrl	equ	0xFF6
 19061                           tablat	equ	0xFF5
 19062                           prodh	equ	0xFF4
 19063                           prodl	equ	0xFF3
 19064                           intcon	equ	0xFF2
 19065                           intcon2	equ	0xFF1
 19066                           intcon3	equ	0xFF0
 19067                           indf0	equ	0xFEF
 19068                           postinc0	equ	0xFEE
 19069                           fsr0h	equ	0xFEA
 19070                           fsr0l	equ	0xFE9
 19071                           wreg	equ	0xFE8
 19072                           postdec1	equ	0xFE5
 19073                           fsr1h	equ	0xFE2
 19074                           fsr1l	equ	0xFE1
 19075                           indf2	equ	0xFDF
 19076                           postinc2	equ	0xFDE
 19077                           postdec2	equ	0xFDD
 19078                           fsr2h	equ	0xFDA
 19079                           fsr2l	equ	0xFD9
 19080                           status	equ	0xFD8
 19081                           
 19082                           	psect	temp
 19083  00007E                     btemp:
 19084                           	opt stack 0
 19085  00007E                     	ds	1
 19086  0000                     int$flags	set	btemp
 19087                           pclatu	equ	0xFFB
 19088                           pclath	equ	0xFFA
 19089                           tblptru	equ	0xFF8
 19090                           tblptrh	equ	0xFF7
 19091                           tblptrl	equ	0xFF6
 19092                           tablat	equ	0xFF5
 19093                           prodh	equ	0xFF4
 19094                           prodl	equ	0xFF3
 19095                           intcon	equ	0xFF2
 19096                           intcon2	equ	0xFF1
 19097                           intcon3	equ	0xFF0
 19098                           indf0	equ	0xFEF
 19099                           postinc0	equ	0xFEE
 19100                           fsr0h	equ	0xFEA
 19101                           fsr0l	equ	0xFE9
 19102                           wreg	equ	0xFE8
 19103                           postdec1	equ	0xFE5
 19104                           fsr1h	equ	0xFE2
 19105                           fsr1l	equ	0xFE1
 19106                           indf2	equ	0xFDF
 19107                           postinc2	equ	0xFDE
 19108                           postdec2	equ	0xFDD
 19109                           fsr2h	equ	0xFDA
 19110                           fsr2l	equ	0xFD9
 19111                           status	equ	0xFD8


Data Sizes:
    Strings     1088
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_105(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[17]), STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), 
		 -> STR_88(CODE[11]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), 
		 -> STR_84(CODE[14]), STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[13]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  121195
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15635
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   12991
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10018
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9271
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20368
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   19518
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   40616
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   11943
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7575
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7575
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   33885
                                             68 BANK0      2     2      0
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7665
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7575
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        25    25      0   11070
                                             43 BANK0     25    25      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7440
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 12:52:28 2017

                                    _i 00E6                     i2_I2C_Master_Start 3F62  
                   i2_I2C_Master_Write 3F38                                     l66 3ED0  
                                   _ID 29BE                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l478 3290                                    l591 1982  
                                  l911 3E9C                                    l920 2874  
                                  l772 347C                                    l981 308C  
                                  l978 3074                                    l898 2C1A  
                                  l995 2E24                                    l998 2E28  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E8  
                                  _sel 00FD                                    _var 0077  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EE  
      __end_of_change_state_to_menu_11 3BA0        __end_of_change_state_to_menu_12 3A42  
      __end_of_change_state_to_menu_22 3A0A        __end_of_change_state_to_menu_23 3B70  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 3C90        __end_of_change_state_to_logs_12 3C60  
      __end_of_change_state_to_logs_22 3C30        __end_of_change_state_to_logs_23 3CEC  
      __end_of_change_state_to_logs_33 3C00        __end_of_change_state_to_logs_34 3BD0  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1004 24C2                                   l1013 2578  
                                 l1022 0918                                   l1007 24C6  
                                 l1032 0A28                                   l1033 0A76  
                                 l1025 091C                                   l1034 0ADC  
                                 l1035 0B2A                                   l1029 09C2  
                                 l1119 136C                                   l1071 101E  
                                 l1059 0E84                                   l1513 3004  
                                 l5011 13A4                                   l1566 3436  
                                 l5015 13BE                                   l5111 3468  
                                 l1576 3652                                   l5041 1464  
                                 l5017 13C4                                   l5113 3492  
                                 l5035 1422                                   l5053 149A  
                                 l5029 1400                                   l5125 2F88  
                                 l5055 14A6                                   l5063 14D4  
                                 l5047 147E                                   l5039 145A  
                                 l5071 153E                                   l5127 2F98  
                                 l5065 14DA                                   l6201 0BA6  
                                 l6121 0996                                   l5137 2FF2  
                                 l5129 2F9E                                   l5059 14C0  
                                 l6211 0BCE                                   l6115 0986  
                                 l5083 3382                                   l5075 3A4C  
                                 l5069 1532                                   l6205 0BB0  
                                 l6125 09AE                                   l6117 098C  
                                 l6053 2514                                   l5093 33B8  
                                 l5077 3A58                                   l6231 0C34  
                                 l6215 0BD8                                   l6071 25A8  
                                 l5087 3398                                   l5351 19E6  
                                 l6313 0DD8                                   l6305 0DB6  
                                 l6241 0C5C                                   l6209 0BC8  
                                 l5361 1A7C                                   l5353 1A04  
                                 l5345 198C                                   l5513 30F2  
                                 l4811 33E6                                   l6411 0FD4  
                                 l6403 0F9A                                   l6331 0E3A  
                                 l6323 0E00                                   l6315 0DDE  
                                 l6235 0C4C                                   l6227 0C2A  
                                 l6219 0BF0                                   l6059 2556  
                                 l5363 1A9A                                   l5355 1A22  
                                 l5347 19AA                                   l5371 1AF4  
                                 l5339 1900                                   l7211 282E  
                                 l4813 33F2                                   l6421 0FFC  
                                 l6341 0E62                                   l6309 0DC0  
                                 l6261 0CD0                                   l6253 0CAE  
                                 l6245 0C74                                   l6237 0C52  
                                 l6077 25EA                                   l5365 1AB8  
                                 l5357 1A40                                   l5349 19C8  
                                 l5373 1B52                                   l5509 30DC  
                                 l4823 3428                                   l4815 33F8  
                                 l4831 360E                                   l6415 0FDE  
                                 l6335 0E44                                   l6319 0DE8  
                                 l6271 0CF8                                   l6263 0CD6  
                                 l7223 3016                                   l6511 2EF8  
                                 l6503 2ECE                                   l5367 1AD6  
                                 l5359 1A5E                                   l5519 3168  
                                 l7311 3268                                   l4833 361A  
                                 l6425 1006                                   l6345 0E6C  
                                 l6257 0CB8                                   l4753 3D2C  
                                 l7241 3098                                   l6521 2F2E  
                                 l6513 2EFE                                   l7321 3286  
                                 l7313 326E                                   l4835 3620  
                                 l6419 0FF6                                   l6363 0ED6  
                                 l6339 0E5C                                   l6283 0D3C  
                                 l6267 0CE0                                   l4755 3D3E  
                                 l7243 309E                                   l6611 0100  
                                 l5571 2CC8                                   l5555 2C86  
                                 l5563 2CA8                                   l7323 328C  
                                 l4941 1134                                   l6453 1090  
                                 l6445 106E                                   l6373 0EFE  
                                 l6293 0D64                                   l6509 2EEC  
                                 l6525 2F3C                                   l6541 3194  
                                 l6621 0122                                   l6613 0106  
                                 l7309 3262                                   l4839 3644  
                                 l4951 1164                                   l6471 10DC  
                                 l6463 10B8                                   l6455 1096  
                                 l6367 0EEE                                   l6359 0ECC  
                                 l6287 0D54                                   l6279 0D32  
                                 l7239 3092                                   l7247 30A4  
                                 l6551 31C4                                   l6711 02D4  
                                 l5567 2CBE                                   l5559 2C90  
                                 l7327 3292                                   _ADIE 007CEE  
                                 l4945 1148                                   l6481 1104  
                                 l6449 1078                                   l6393 0F72  
                                 l6385 0F50                                   l6377 0F16  
                                 l6369 0EF4                                   l6297 0D7C  
                                 l6289 0D5A                                   l6529 2F50  
                                 l6553 31CA                                   l6561 31FC  
                                 l6545 31A4                                   l4777 3CB6  
                                 l6801 0650                                   l6721 036A  
                                 l6713 02F2                                   l6625 013A  
                                 l6617 0118                                   l7185 279A  
                                 l5905 2D8C                                   l4795 3D64  
                                 l4947 115A                                   l6475 10E6  
                                 l6459 10A0                                   l6395 0F78  
                                 l6731 0400                                   l6723 0388  
                                 l6715 0310                                   l6643 01A4  
                                 l5683 330E                                   l7187 27AE  
                                 l4973 1246                                   l4965 1214  
                                 l4957 1198                                   l6485 110E  
                                 l6389 0F5A                                   l6565 3210  
                                 l6557 31EE                                   l6549 31B8  
                                 l6805 065A                                   l6733 041E  
                                 l6725 03A6                                   l6717 032E  
                                 l6741 04BE                                   l6653 01CC  
                                 l6645 01AA                                   l6629 014C  
                                 l4983 12BE                                   l4975 1252  
                                 l6479 10FE                                   l6399 0F82  
                                 l6911 0852                                   l6831 06E2  
                                 l6735 043C                                   l6727 03C4  
                                 l6719 034C                                   l5679 32F8  
                                 l5951 2A94                                   l5599 38A6  
                                 l4993 1314                                   l4985 12CA  
                                 l4977 1258                                   l6497 2EB8  
                                 l6921 087C                                   l6841 070C  
                                 l6809 0672                                   l6753 0522  
                                 l6745 0500                                   l6729 03E2  
                                 l6681 024E                                   l6673 022C  
                                 l6649 01B4                                   l5689 333A  
                                 l5937 2A58                                   l4995 132C  
                                 l4987 12D0                                   l6915 086A  
                                 l6907 0848                                   l6835 06FA  
                                 l6827 06D8                                   l6763 053E  
                                 l6739 045A                                   l6691 026A  
                                 l6659 01DA                                   l5947 2A88  
                                 l5955 2AA0                                   l4989 12E8  
                                 l6925 0886                                   l6845 0716  
                                 l6749 050A                                   l6677 0236  
                                 l6933 08AA                                   l5973 2894  
                                 l4999 1332                                   l6871 079E  
                                 l6791 0626                                   l6767 0556  
                                 l6759 0534                                   l6695 0282  
                                 l6687 0260                                   l5975 28AE  
                                 l5983 28FC                                   l6929 089E  
                                 l6881 07C8                                   l6849 072E  
                                 l5977 28C8                                   l5985 292A  
                                 l5889 2D52                                   l6875 07B6  
                                 l6867 0794                                   l6795 063E  
                                 l6787 061C                                   l5979 28E2  
                                 l6885 07D2                                   l6889 07EA  
                                 STR_1 FC23                                   STR_2 FF41  
                                 STR_3 FC11                                   STR_4 FE64  
                                 STR_5 FC11                                   STR_6 FE22  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u4130 38F4                                   u4131 38F0  
                                 u4140 38F6                                   u3260 3CB4  
                                 u3520 1292                                   u4170 1982  
                                 u4155 368C                                   u3460 3940  
                                 u3461 393C                                   u3470 3942  
                                 u3527 1288                                   u3560 130A  
                                 u4520 29EE                                   _PEIE 007F96  
                                 u6230 2874                                   u4550 2A48  
                                 u3567 1300                                   u7007 0BB8  
                                 u4720 09C2                                   u4528 29F2  
                                 u7017 0BE0                                   u7107 0E4C  
                                 u7027 0C3C                                   u4740 0A76  
                                 _RCEN 007E2B                                   u7117 0E74  
                                 u7037 0C64                                   u4558 2A4C  
                                 u7207 10A8                                   u7127 0EDE  
                                 u7047 0CC0                                   u6407 2DB6  
                                 u4760 0B2A                                   u7217 10EE  
                                 u7137 0F06                                   u7057 0CE8  
                                 u6417 36FE                                   u7227 1116  
                                 u7147 0F62                                   u7067 0D44  
                                 u6507 2CD0                                   u6427 3882  
                                 u7237 35B2                                   u7157 0F8A  
                                 u7077 0D6C                                   u6517 3952  
                                 u6437 29D4                                   u7247 35BC  
                                 u7167 0FE6                                   u7087 0DC8  
                                 u6607 029C                                   u6527 3986  
                                 u6447 2A30                                   u7257 35E8  
                                 u7177 100E                                   u7097 0DF0  
                                 u6617 0512                                   u6537 002A  
                                 u6457 2AC4                                   i2l66 3EE4  
                                 u7267 35F2                                   u7187 1030  
                                 u6707 07A6                                   u6627 0546  
                                 u6547 012A                                   u6467 2938  
                                 u7197 1080                                   u6717 07DA  
                                 u6637 0570                                   u6557 0166  
                                 u6477 296C                                   u6397 2CFE  
                                 u6807 2506                                   u6727 0804  
                                 u6647 062E                                   u6567 01BC  
                                 u6487 2C3C                                   u6817 254A  
                                 u6737 085A                                   u6657 0662  
                                 u6577 01E8                                   u6497 2C98  
                                 u6907 090C                                   u6827 2568  
                                 u6747 088E                                   u6667 068C  
                                 u6587 023E                                   u6917 092E  
                                 u6837 259A                                   u6757 3024  
                                 u6677 06EA                                   u6597 0272  
                                 u6927 099E                                   u6847 25DE  
                                 u6767 3068                                   u6687 071E  
                                 u6937 09D2                                   u6857 3D34  
                                 u6777 2472                                   u6697 0748  
                                 u6947 0A38                                   u6867 2DD4  
                                 u6787 24B6                                   u6957 0A54  
                                 u6877 2E18                                   u6797 24D8  
                                 u6967 0A86                                   u6887 2E3A  
                                 u6977 0AEC                                   u6897 08C8  
                                 u6987 0B08                                   u6997 0B3A  
                                 _RSEN 007E29                            _stopSignals 3EA4  
                                 _Test 3016                                   _back 005B  
                                 _main 321A                                   _down 0067  
                                 _keys FBA3                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 3E2A  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EC  
                      __end_ofi2_putch 3F22                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E56  
                          i2_lcdNibble 376E                        __end_of_Loading 2DC6  
                 __end_of_actuatorTest 1126                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2CE0                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 2F5A                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FBBE  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE33                                  STR_15 FFD2  
                                STR_23 FF33                                  STR_31 FE11  
                                STR_16 FFE2                                  STR_24 FD78  
                                STR_32 FD56                                  STR_40 FD12  
                                STR_17 FFF2                                  STR_33 FD67  
                                STR_41 FD01                                  STR_25 FBFE  
                                STR_18 FFF6                                  STR_34 FE00  
                                STR_50 FDDE                                  STR_42 FDBC  
                                STR_26 FD89                                  STR_43 FDBC  
                                STR_35 FE00                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FBEB  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD9A                                  STR_36 FD45  
                                STR_44 FD23                        __end_of___awmod 321A  
                                STR_45 FD12                                  STR_37 FD56  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FBFB                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEEC  
                                STR_38 FDEF                                  STR_46 FDCD  
                                STR_47 FDCD                                  STR_55 FFFA  
                                STR_63 FBBE                                  STR_71 FF25  
                                STR_39 FDAB                                  STR_56 FFDE  
                                STR_64 FF98                                  STR_80 FE74  
                                STR_48 FD34                                  STR_72 FCBD  
                                STR_49 FD23                                  STR_57 FFD6  
                                STR_65 FF69                                  STR_73 FF09  
                                STR_81 FEA1                                  STR_58 FFD2  
                                STR_90 FF8D                                  STR_74 FF76  
                                STR_82 FE44                                  STR_66 FBD6  
                                STR_59 FFE2                                  STR_83 FF5F  
                                STR_67 FFBC                                  STR_75 FECE  
                                STR_91 FEBF                                  STR_84 FF25  
                                STR_76 FF17                                  STR_68 FCF0  
                                STR_92 FC8A                                  STR_77 FFAD  
                                STR_69 FF5C                                  STR_85 FEDD  
                                STR_93 FC79                                  STR_78 FF25  
                                STR_86 FEFB                                  STR_94 FC57  
                                STR_79 FF4F                                  STR_87 FCCE  
                                STR_95 FC9B                                  STR_88 FF82  
                                STR_96 FCAC                                  STR_89 FCDF  
                                STR_97 FC35                                  STR_98 FE54  
                                STR_99 FC68                                  ?_sort 0001  
                      __end_of___lldiv 3016                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 3440                        __end_of___lwmod 365C  
                                i2l254 1E52                                  i2l911 3EC8  
                                i2l591 1EE4                                  i2l833 26F2  
                                i2l835 2712                                  i2l829 26A6  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 3F16                        __end_of_handler 274E  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 3D44  
                      __end_of_initLCD 3990                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                                _getIR 3864                        __end_of_loadRTC 3342  
                      __end_of_readMAG 38FE                        __end_of_dpowers FBBE  
                                _first 00E4                                  _enter 0069  
                      __end_of_isdigit 3D6E                                  _input 007D  
                                _putch 3EF6                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3DBC  
                     __end_ofi2_getRTC 3528                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18CC  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3AE0                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3816                           __end_of_Test 30CE  
                   __size_ofi2_lcdInst 000C                           __end_of_main 32B6  
                         __end_of_keys FBB4                           __end_of_sort 3E4C  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C4  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC46  
                               STR_101 FC68                                 STR_102 FEB0  
                               STR_103 FE92                                 STR_104 FE83  
                               STR_105 FFB5                                 _ADRESH 000FC4  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3B10  
            i2_change_state_to_menu_22 3AE0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1119 1738                                 i2l1566 380C  
                               i2l1576 39C8                                 i2l5201 1620  
                               i2l5211 1652                                 i2l5301 185A  
                               i2l5221 16AA                                 i2l5213 1656  
                               i2l5231 16FE                                 i2l5223 16B0  
                               i2l5311 3AB8                                 i2l5153 34FE  
                               i2l5305 18A8                                 i2l5225 16C2  
                               i2l5209 1648                                 i2l5313 3AC0  
                               i2l7001 1C76                                 i2l5251 177E  
                               i2l5219 16A0                                 i2l5235 1702  
                               i2l5307 18B0                                 i2l5149 34EE  
                               i2l5253 1782                                 i2l5229 16EC  
                               i2l5181 1578                                 i2l5501 2BE0  
                               i2l7021 1CC4                                 i2l7013 1CA8  
                               i2l7005 1C84                                 i2l5159 3518  
                               i2l5271 17CE                                 i2l5247 1766  
                               i2l5183 1586                                 i2l5265 17B4  
                               i2l5193 15BE                                 i2l5177 1568  
                               i2l7041 1D1A                                 i2l7033 1CF6  
                               i2l7025 1CDA                                 i2l7017 1CB6  
                               i2l7009 1C9A                                 i2l5291 182E  
                               i2l5283 1810                                 i2l5275 17F2  
                               i2l5187 158C                                 i2l4901 37E6  
                               i2l5277 17FA                                 i2l7061 1D68  
                               i2l7053 1D44                                 i2l7045 1D28  
                               i2l7037 1D04                                 i2l7029 1CE8  
                               i2l5295 1842                                 i2l5631 1E82  
                               i2l4921 39AA                                 i2l5289 1826  
                               i2l5641 1F1A                                 i2l7081 1DB6  
                               i2l7073 1D9A                                 i2l7065 1D76  
                               i2l7057 1D5A                                 i2l7049 1D36  
                               i2l5299 1854                                 i2l5811 23B4  
                               i2l5651 1F88                                 i2l5643 1F30  
                               i2l4909 3802                                 i2l4925 39BE  
                               i2l4917 399E                                 i2l7261 20A8  
                               i2l5493 2BAC                                 i2l5805 239C  
                               i2l5741 22B6                                 i2l5733 229C  
                               i2l5653 1F9E                                 i2l5645 1F46  
                               i2l5637 1EEE                                 i2l7085 1DC4  
                               i2l7077 1DA8                                 i2l7069 1D84  
                               i2l4863 3DDC                                 i2l4919 39A6  
                               i2l5823 23D6                                 i2l5815 23BE  
                               i2l5743 22C6                                 i2l5751 22D4  
                               i2l5655 1FB4                                 i2l5647 1F5C  
                               i2l5639 1F04                                 i2l5663 1FF6  
                               i2l7095 1DE8                                 i2l7257 2098  
                               i2l5489 2B9C                                 i2l5841 241A  
                               i2l5833 23F6                                 i2l5809 23B0  
                               i2l5761 22FA                                 i2l5745 22CA  
                               i2l5657 1FCA                                 i2l5649 1F72  
                               i2l5665 2050                                 i2l7089 1DDA  
                               i2l7353 267A                                 i2l7267 2102  
                               i2l5763 2300                                 i2l5755 22E8  
                               i2l5851 2436                                 i2l5659 1FE0  
                               i2l7339 265E                                 i2l7277 21C4  
                               i2l5845 242C                                 i2l5837 2408  
                               i2l5829 23E4                                 i2l5781 2350  
                               i2l5765 2306                                 i2l5757 22EE  
                               i2l4887 3E84                                 i2l5759 22F4  
                               i2l7631 1E06                                 i2l7375 26C4  
                               i2l4897 37DA                                 i2l7641 2340  
                               i2l5769 230C                                 i2l7633 1E28  
                               i2l7377 26C6                                 i2l4899 37E2  
                               i2l5795 2376                                 i2l7635 1E44  
                               i2l5789 2368                                 i2l5799 2392  
                               i2l7639 2324                                 i2l7399 2710  
                               i2l6961 1BF6                                 i2l6953 1BDA  
                               i2l6947 1BC6                                 i2l6981 1C2E  
                               i2l6973 1C12                                 i2l6965 1C04  
                               i2l6957 1BE8                                 i2l6949 1BCC  
                               i2l6993 1C5A                                 i2l6985 1C3E  
                               i2l6977 1C20                                 i2l6997 1C68  
                               i2l6989 1C4C                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 3E2A                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 29BE  
                               ___wmul 3A78                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3342  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 3E6E                                 _initUI 3DE2  
                               _readIR 38FE                                 _logRun 274E  
                               clear_0 383C                                 clear_1 3848  
                               clear_2 3854                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1126  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 3A42  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 3D96  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 3D6E                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 3816                       __end_of_printRTC 1B96  
                         __mediumconst FBA2                      __end_ofi2___lwmod 39D2  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 2E9C                      __end_ofi2_lcdInst 3F2E  
                    __end_ofi2_isdigit 3E8C                             __accesstop 0080  
              __end_of__initialization 385A                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 086E                          i2_EEPROM_read 3EBA  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 3F42                          __end_of_getIR 38B2  
                          i2printRTC@i 0041                          _initSortTimer 30CE  
          __end_of_updateServoPosition 34B6                          __end_of_putch 3F06  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2ADE                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 3D18          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 3CEC                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08B8                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 2BF8  
                              UI@F3220 012D               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                                ?_printf 008E  
                              _UI$2144 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 3F16                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0134            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 35FA                                _Loading 2CE0  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 2E9C  
                              ___awmod 3178                             _initServos 36BC  
                              ___lldiv 2F5A                        __size_of___wmul 0036  
                              ___lwdiv 33C8                                ___lwmod 35FA  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3816  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3528                                _lcdInst 3F06  
                              _handler 0008                                __ptext0 321A  
                              __ptext1 3EA4                                __ptext2 3E2A  
                              __ptext3 2CE0                                __ptext4 30CE  
                              __ptext5 36BC                                __ptext6 3528  
                              __ptext7 3864                                __ptext8 29BE  
                              __ptext9 288A                        __size_of_printf 0438  
                              _readADC 3D18                        __size_of_strcpy 0036  
                              _initLCD 394A                                _cur_can 0065  
                              _loadRTC 32B6                                _readMAG 38B2  
                              _dpowers FBB4                     actuatorTest@i_1511 00B2  
                   actuatorTest@i_1520 00B8                     actuatorTest@i_1512 00B3  
                   actuatorTest@i_1521 00B9                     actuatorTest@i_1505 00AE  
                   actuatorTest@i_1530 00BE                     actuatorTest@i_1514 00B4  
                   actuatorTest@i_1506 00AF                     actuatorTest@i_1531 00BF  
                   actuatorTest@i_1515 00B5                     actuatorTest@i_1524 00BA  
                   actuatorTest@i_1508 00B0                     actuatorTest@i_1525 00BB  
                   actuatorTest@i_1517 00B6                     actuatorTest@i_1509 00B1  
                   actuatorTest@i_1534 00C0                     actuatorTest@i_1518 00B7  
                   actuatorTest@i_1535 00C1                     actuatorTest@i_1527 00BC  
                   actuatorTest@i_1528 00BD                     actuatorTest@i_1537 00C2  
                   actuatorTest@i_1538 00C3                                _isdigit 3D44  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 288A  
                       __pintcode_body 25F0                   end_of_initialization 385A  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 25F0  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3592  
                           _sensorTest 2464                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2464                  __end_of_machineConfig 376E  
                           _updateMenu 1B96                      i2_I2C_Master_Read 3DBC  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 3EE4  
                    i2_I2C_Master_Stop 3F5A                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F4                              i2___lwdiv 37C4  
                            i2___lwmod 3990                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 208C                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00AD           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 3F22                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 3E6E  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 3EA4  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3AAE                         __end_of_getRTC 33C8  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 3E06  
                       __end_of_readIR 394A                         __end_of_logRun 288A  
                     i2___wmul@product 0005                         __end_of_printf 155E  
                         i2printf@flag 0026                         __end_of_strcpy 3A78  
            __end_ofi2_I2C_Master_Read 3DE2              __end_ofi2_I2C_Master_Wait 3EF6  
                         i2printf@prec 001D                    start_initialization 3816  
            __end_ofi2_I2C_Master_Stop 3F62                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1310 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 012D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2264 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1788 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 3E8C                       _I2C_Master_Start 3F52  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 3F2E  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FBA2                              _lcdNibble 3592  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0073  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 2DC6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0120  
                          __size_of_UI 08A6                    __size_of_sensorTest 018C  
           __end_ofi2_I2C_Master_Start 3F6A             __end_ofi2_I2C_Master_Write 3F42  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 227E  
                          ??i2_isdigit 0001                               i2u336_40 3DDA  
                             i2u432_40 1EE4                               _PIR2bits 000FA1  
                             i2u393_40 16E4                               i2u393_47 16DA  
                             i2u730_47 37B2                               i2u731_47 37BC  
                             i2u628_40 21BE                               i2u389_40 1684  
                             i2u389_47 167A                               i2u727_47 22BC  
                             i2u728_47 3786                               i2u729_47 3790  
                  __size_of_updateMenu 02C0                         _log_completion 00EA  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 3D96                          lcdNibble@data 0081  
                             i2_getRTC 34B6                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 155E                               i2_strcpy 3AAE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 382A                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 3ED0                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00E6                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 3178                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 3B70             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3A0A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 39D2                _change_state_to_menu_23 3B40  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 3C60  
              _change_state_to_logs_12 3C30                _change_state_to_logs_22 3C00  
              _change_state_to_logs_23 3CBE                _change_state_to_logs_33 3BD0  
              _change_state_to_logs_34 3BA0                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2746  
                      _I2C_Master_Init 365C                       __size_of_readADC 002C  
                      _I2C_Master_Read 3C90                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 3ED0  
                      _I2C_Master_Stop 3F4A                       __size_of_isdigit 002A  
                       _printSortTimer 208C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 2BF8  
                             __ptext10 3716                               __ptext11 274E  
                             __ptext20 394A                               __ptext12 2BF8  
                             __ptext21 0012                               __ptext13 3E8C  
                             __ptext30 39D2                               __ptext22 18CC  
                             __ptext14 3DE2                               __ptext31 3A0A  
                             __ptext23 3A42                               __ptext15 32B6  
                             __ptext40 08B8                               __ptext32 3178  
                             __ptext24 3342                               __ptext16 365C  
                             __ptext41 3440                               __ptext33 2E9C  
                             __ptext25 3F2E                               __ptext17 2F5A  
                             __ptext42 1126                               __ptext34 3016  
                             __ptext26 3F4A                               __ptext18 3CEC  
                             __ptext51 1B96                               __ptext43 3EF6  
                             __ptext35 2464                               __ptext27 3F52  
                             __ptext19 3E4C                               __ptext60 3BA0  
                             __ptext52 3D6E                               __ptext44 3D44  
                             __ptext36 38B2                               __ptext28 3C90  
                             __ptext61 3BD0                               __ptext53 1E56  
                             __ptext45 3A78                               __ptext37 38FE  
                             __ptext29 3ED0                               __ptext70 155E  
                             __ptext62 3CBE                               __ptext54 3AAE  
                             __ptext46 35FA                               __ptext38 3D18  
                             __ptext71 3F16                               __ptext63 3C00  
                             __ptext55 227E                               __ptext47 33C8  
                             __ptext39 2DC6                               __ptext80 3F5A  
                             __ptext72 3E6E                               __ptext64 3C30  
                             __ptext56 3AE0                               __ptext48 3F06  
                             __ptext81 3F62                               __ptext73 3D96  
                             __ptext65 3C60                               __ptext57 3B10  
                             __ptext49 3592                               __ptext82 3DBC  
                             __ptext74 3990                               __ptext66 3E06  
                             __ptext58 3B40                               __ptext83 3EE4  
                             __ptext75 37C4                               __ptext67 2ADE  
                             __ptext59 3B70                               __ptext76 3F22  
                             __ptext68 3EBA                               __ptext77 376E  
                             __ptext69 208C                               __ptext78 34B6  
                             __ptext79 3F38                               _dispLogs 3E06  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1788 0002  
                   __end_of_initServos 3716                          __size_of_Test 00B8  
                        ?_EEPROM_write 00AB                               _initTime 3E4C  
                        __size_of_main 009C                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 3440                 __size_of_machineConfig 0058  
                        ??i2_lcdNibble 0001                               _printRTC 18CC  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 3B40      __end_ofi2_change_state_to_menu_22 3B10  
                             loadRTC@i 0096                 __end_of_printSortTimer 227E  
                            putch@data 0082               __end_of_I2C_Master_Start 3F5A  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 3F38  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 25F0  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 3EBA  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 1E56                __end_of_I2C_Master_Init 36BC  
              __end_of_I2C_Master_Read 3CBE                __end_of_I2C_Master_Wait 3EE4  
              __end_of_I2C_Master_Stop 3F52                          printRTC@F3211 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 2ADE                    __end_ofi2_lcdNibble 37C4  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 012B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3716                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
