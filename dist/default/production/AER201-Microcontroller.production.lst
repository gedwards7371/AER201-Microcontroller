

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 15:20:17 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  0047F4                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3223
   150  0047F4  4D                 	db	77
   151  0047F5  4D                 	db	77
   152  0047F6  4D                 	db	77
   153  0047F7  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3214
   156  0047F8  4D                 	db	77
   157  0047F9  4D                 	db	77
   158  0047FA  4D                 	db	77
   159  0047FB  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB14                     __pmediumconst:
   163                           	opt stack 0
   164  00FB14  00                 	db	0
   165  00FB15                     _keys:
   166                           	opt stack 0
   167  00FB15  31                 	db	49
   168  00FB16  32                 	db	50
   169  00FB17  33                 	db	51
   170  00FB18  41                 	db	65
   171  00FB19  34                 	db	52
   172  00FB1A  35                 	db	53
   173  00FB1B  36                 	db	54
   174  00FB1C  42                 	db	66
   175  00FB1D  37                 	db	55
   176  00FB1E  38                 	db	56
   177  00FB1F  39                 	db	57
   178  00FB20  43                 	db	67
   179  00FB21  2A                 	db	42
   180  00FB22  30                 	db	48
   181  00FB23  23                 	db	35
   182  00FB24  44                 	db	68
   183  00FB25  00                 	db	0
   184  00FB26                     __end_of_keys:
   185                           	opt stack 0
   186  00FB26                     _dpowers:
   187                           	opt stack 0
   188  00FB26  0001               	dw	1
   189  00FB28  000A               	dw	10
   190  00FB2A  0064               	dw	100
   191  00FB2C  03E8               	dw	1000
   192  00FB2E  2710               	dw	10000
   193  00FB30                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB30                     STR_21:
   267  00FB30  25                 	db	37
   268  00FB31  30                 	db	48	;'0'
   269  00FB32  32                 	db	50	;'2'
   270  00FB33  64                 	db	100	;'d'
   271  00FB34  25                 	db	37
   272  00FB35  73                 	db	115	;'s'
   273  00FB36  20                 	db	32
   274  00FB37  7C                 	db	124
   275  00FB38  20                 	db	32
   276  00FB39  25                 	db	37
   277  00FB3A  30                 	db	48	;'0'
   278  00FB3B  32                 	db	50	;'2'
   279  00FB3C  64                 	db	100	;'d'
   280  00FB3D  3A                 	db	58	;':'
   281  00FB3E  25                 	db	37
   282  00FB3F  30                 	db	48	;'0'
   283  00FB40  32                 	db	50	;'2'
   284  00FB41  64                 	db	100	;'d'
   285  00FB42  3A                 	db	58	;':'
   286  00FB43  25                 	db	37
   287  00FB44  30                 	db	48	;'0'
   288  00FB45  32                 	db	50	;'2'
   289  00FB46  64                 	db	100	;'d'
   290  00FB47  00                 	db	0
   291  00FB48                     STR_66:
   292  00FB48  28                 	db	40
   293  00FB49  64                 	db	100	;'d'
   294  00FB4A  61                 	db	97	;'a'
   295  00FB4B  74                 	db	116	;'t'
   296  00FB4C  61                 	db	97	;'a'
   297  00FB4D  3A                 	db	58	;':'
   298  00FB4E  20                 	db	32
   299  00FB4F  25                 	db	37
   300  00FB50  75                 	db	117	;'u'
   301  00FB51  2C                 	db	44
   302  00FB52  20                 	db	32
   303  00FB53  61                 	db	97	;'a'
   304  00FB54  64                 	db	100	;'d'
   305  00FB55  64                 	db	100	;'d'
   306  00FB56  72                 	db	114	;'r'
   307  00FB57  3A                 	db	58	;':'
   308  00FB58  20                 	db	32
   309  00FB59  25                 	db	37
   310  00FB5A  75                 	db	117	;'u'
   311  00FB5B  29                 	db	41
   312  00FB5C  00                 	db	0
   313  00FB5D                     STR_27:
   314  00FB5D  4E                 	db	78	;'N'
   315  00FB5E  4F                 	db	79	;'O'
   316  00FB5F  20                 	db	32
   317  00FB60  4C                 	db	76	;'L'
   318  00FB61  41                 	db	65	;'A'
   319  00FB62  42                 	db	66	;'B'
   320  00FB63  3A                 	db	58	;':'
   321  00FB64  20                 	db	32
   322  00FB65  25                 	db	37
   323  00FB66  64                 	db	100	;'d'
   324  00FB67  7C                 	db	124
   325  00FB68  4C                 	db	76	;'L'
   326  00FB69  41                 	db	65	;'A'
   327  00FB6A  42                 	db	66	;'B'
   328  00FB6B  3A                 	db	58	;':'
   329  00FB6C  20                 	db	32
   330  00FB6D  25                 	db	37
   331  00FB6E  64                 	db	100	;'d'
   332  00FB6F  00                 	db	0
   333  00FB70                     STR_25:
   334  00FB70  4E                 	db	78	;'N'
   335  00FB71  4F                 	db	79	;'O'
   336  00FB72  20                 	db	32
   337  00FB73  54                 	db	84	;'T'
   338  00FB74  41                 	db	65	;'A'
   339  00FB75  42                 	db	66	;'B'
   340  00FB76  3A                 	db	58	;':'
   341  00FB77  20                 	db	32
   342  00FB78  25                 	db	37
   343  00FB79  64                 	db	100	;'d'
   344  00FB7A  7C                 	db	124
   345  00FB7B  54                 	db	84	;'T'
   346  00FB7C  41                 	db	65	;'A'
   347  00FB7D  42                 	db	66	;'B'
   348  00FB7E  3A                 	db	58	;':'
   349  00FB7F  20                 	db	32
   350  00FB80  25                 	db	37
   351  00FB81  64                 	db	100	;'d'
   352  00FB82  00                 	db	0
   353  00FB83                     STR_111:
   354  00FB83  44                 	db	68	;'D'
   355  00FB84  20                 	db	32
   356  00FB85  57                 	db	87	;'W'
   357  00FB86  49                 	db	73	;'I'
   358  00FB87  4C                 	db	76	;'L'
   359  00FB88  4C                 	db	76	;'L'
   360  00FB89  20                 	db	32
   361  00FB8A  52                 	db	82	;'R'
   362  00FB8B  45                 	db	69	;'E'
   363  00FB8C  54                 	db	84	;'T'
   364  00FB8D  55                 	db	85	;'U'
   365  00FB8E  52                 	db	82	;'R'
   366  00FB8F  4E                 	db	78	;'N'
   367  00FB90  20                 	db	32
   368  00FB91  20                 	db	32
   369  00FB92  20                 	db	32
   370  00FB93  20                 	db	32
   371  00FB94  00                 	db	0
   372  00FB95                     STR_112:
   373  00FB95  4F                 	db	79	;'O'
   374  00FB96  54                 	db	84	;'T'
   375  00FB97  48                 	db	72	;'H'
   376  00FB98  45                 	db	69	;'E'
   377  00FB99  52                 	db	82	;'R'
   378  00FB9A  20                 	db	32
   379  00FB9B  53                 	db	83	;'S'
   380  00FB9C  45                 	db	69	;'E'
   381  00FB9D  54                 	db	84	;'T'
   382  00FB9E  53                 	db	83	;'S'
   383  00FB9F  20                 	db	32
   384  00FBA0  52                 	db	82	;'R'
   385  00FBA1  41                 	db	65	;'A'
   386  00FBA2  35                 	db	53	;'5'
   387  00FBA3  20                 	db	32
   388  00FBA4  20                 	db	32
   389  00FBA5  20                 	db	32
   390  00FBA6  00                 	db	0
   391  00FBA7                     STR_3:
   392  00FBA7  2D                 	db	45
   393  00FBA8  2D                 	db	45
   394  00FBA9  20                 	db	32
   395  00FBAA  4C                 	db	76	;'L'
   396  00FBAB  4F                 	db	79	;'O'
   397  00FBAC  47                 	db	71	;'G'
   398  00FBAD  20                 	db	32
   399  00FBAE  25                 	db	37
   400  00FBAF  32                 	db	50	;'2'
   401  00FBB0  64                 	db	100	;'d'
   402  00FBB1  20                 	db	32
   403  00FBB2  48                 	db	72	;'H'
   404  00FBB3  45                 	db	69	;'E'
   405  00FBB4  52                 	db	82	;'R'
   406  00FBB5  45                 	db	69	;'E'
   407  00FBB6  2D                 	db	45
   408  00FBB7  2D                 	db	45
   409  00FBB8  00                 	db	0
   410  00FBB9                     STR_1:
   411  00FBB9  52                 	db	82	;'R'
   412  00FBBA  45                 	db	69	;'E'
   413  00FBBB  53                 	db	83	;'S'
   414  00FBBC  55                 	db	85	;'U'
   415  00FBBD  4C                 	db	76	;'L'
   416  00FBBE  54                 	db	84	;'T'
   417  00FBBF  53                 	db	83	;'S'
   418  00FBC0  20                 	db	32
   419  00FBC1  49                 	db	73	;'I'
   420  00FBC2  4E                 	db	78	;'N'
   421  00FBC3  20                 	db	32
   422  00FBC4  4C                 	db	76	;'L'
   423  00FBC5  4F                 	db	79	;'O'
   424  00FBC6  47                 	db	71	;'G'
   425  00FBC7  20                 	db	32
   426  00FBC8  25                 	db	37
   427  00FBC9  64                 	db	100	;'d'
   428  00FBCA  00                 	db	0
   429  00FBCB                     STR_102:
   430  00FBCB  4D                 	db	77	;'M'
   431  00FBCC  49                 	db	73	;'I'
   432  00FBCD  44                 	db	68	;'D'
   433  00FBCE  20                 	db	32
   434  00FBCF  2D                 	db	45
   435  00FBD0  2D                 	db	45
   436  00FBD1  20                 	db	32
   437  00FBD2  32                 	db	50	;'2'
   438  00FBD3  73                 	db	115	;'s'
   439  00FBD4  20                 	db	32
   440  00FBD5  20                 	db	32
   441  00FBD6  20                 	db	32
   442  00FBD7  20                 	db	32
   443  00FBD8  20                 	db	32
   444  00FBD9  20                 	db	32
   445  00FBDA  20                 	db	32
   446  00FBDB  00                 	db	0
   447  00FBDC                     STR_105:
   448  00FBDC  44                 	db	68	;'D'
   449  00FBDD  52                 	db	82	;'R'
   450  00FBDE  4F                 	db	79	;'O'
   451  00FBDF  50                 	db	80	;'P'
   452  00FBE0  20                 	db	32
   453  00FBE1  2D                 	db	45
   454  00FBE2  2D                 	db	45
   455  00FBE3  20                 	db	32
   456  00FBE4  32                 	db	50	;'2'
   457  00FBE5  73                 	db	115	;'s'
   458  00FBE6  20                 	db	32
   459  00FBE7  20                 	db	32
   460  00FBE8  20                 	db	32
   461  00FBE9  20                 	db	32
   462  00FBEA  20                 	db	32
   463  00FBEB  20                 	db	32
   464  00FBEC  00                 	db	0
   465  00FBED                     STR_99:
   466  00FBED  4C                 	db	76	;'L'
   467  00FBEE  45                 	db	69	;'E'
   468  00FBEF  46                 	db	70	;'F'
   469  00FBF0  54                 	db	84	;'T'
   470  00FBF1  20                 	db	32
   471  00FBF2  2D                 	db	45
   472  00FBF3  2D                 	db	45
   473  00FBF4  20                 	db	32
   474  00FBF5  32                 	db	50	;'2'
   475  00FBF6  73                 	db	115	;'s'
   476  00FBF7  20                 	db	32
   477  00FBF8  20                 	db	32
   478  00FBF9  20                 	db	32
   479  00FBFA  20                 	db	32
   480  00FBFB  20                 	db	32
   481  00FBFC  20                 	db	32
   482  00FBFD  00                 	db	0
   483  00FBFE                     STR_104:
   484  00FBFE  4C                 	db	76	;'L'
   485  00FBFF  45                 	db	69	;'E'
   486  00FC00  56                 	db	86	;'V'
   487  00FC01  45                 	db	69	;'E'
   488  00FC02  4C                 	db	76	;'L'
   489  00FC03  20                 	db	32
   490  00FC04  2D                 	db	45
   491  00FC05  2D                 	db	45
   492  00FC06  20                 	db	32
   493  00FC07  32                 	db	50	;'2'
   494  00FC08  73                 	db	115	;'s'
   495  00FC09  20                 	db	32
   496  00FC0A  20                 	db	32
   497  00FC0B  20                 	db	32
   498  00FC0C  20                 	db	32
   499  00FC0D  20                 	db	32
   500  00FC0E  00                 	db	0
   501  00FC0F                     STR_98:
   502  00FC0F  52                 	db	82	;'R'
   503  00FC10  49                 	db	73	;'I'
   504  00FC11  47                 	db	71	;'G'
   505  00FC12  48                 	db	72	;'H'
   506  00FC13  54                 	db	84	;'T'
   507  00FC14  20                 	db	32
   508  00FC15  2D                 	db	45
   509  00FC16  2D                 	db	45
   510  00FC17  20                 	db	32
   511  00FC18  32                 	db	50	;'2'
   512  00FC19  73                 	db	115	;'s'
   513  00FC1A  20                 	db	32
   514  00FC1B  20                 	db	32
   515  00FC1C  20                 	db	32
   516  00FC1D  20                 	db	32
   517  00FC1E  20                 	db	32
   518  00FC1F  00                 	db	0
   519  00FC20                     STR_97:
   520  00FC20  4D                 	db	77	;'M'
   521  00FC21  49                 	db	73	;'I'
   522  00FC22  44                 	db	68	;'D'
   523  00FC23  44                 	db	68	;'D'
   524  00FC24  4C                 	db	76	;'L'
   525  00FC25  45                 	db	69	;'E'
   526  00FC26  20                 	db	32
   527  00FC27  2D                 	db	45
   528  00FC28  2D                 	db	45
   529  00FC29  20                 	db	32
   530  00FC2A  32                 	db	50	;'2'
   531  00FC2B  73                 	db	115	;'s'
   532  00FC2C  20                 	db	32
   533  00FC2D  20                 	db	32
   534  00FC2E  20                 	db	32
   535  00FC2F  20                 	db	32
   536  00FC30  00                 	db	0
   537  00FC31                     STR_115:
   538  00FC31  44                 	db	68	;'D'
   539  00FC32  20                 	db	32
   540  00FC33  57                 	db	87	;'W'
   541  00FC34  49                 	db	73	;'I'
   542  00FC35  4C                 	db	76	;'L'
   543  00FC36  4C                 	db	76	;'L'
   544  00FC37  20                 	db	32
   545  00FC38  52                 	db	82	;'R'
   546  00FC39  45                 	db	69	;'E'
   547  00FC3A  54                 	db	84	;'T'
   548  00FC3B  55                 	db	85	;'U'
   549  00FC3C  52                 	db	82	;'R'
   550  00FC3D  4E                 	db	78	;'N'
   551  00FC3E  20                 	db	32
   552  00FC3F  20                 	db	32
   553  00FC40  20                 	db	32
   554  00FC41  00                 	db	0
   555  00FC42                     STR_100:
   556  00FC42  4D                 	db	77	;'M'
   557  00FC43  49                 	db	73	;'I'
   558  00FC44  44                 	db	68	;'D'
   559  00FC45  2D                 	db	45
   560  00FC46  4C                 	db	76	;'L'
   561  00FC47  45                 	db	69	;'E'
   562  00FC48  46                 	db	70	;'F'
   563  00FC49  54                 	db	84	;'T'
   564  00FC4A  20                 	db	32
   565  00FC4B  2D                 	db	45
   566  00FC4C  2D                 	db	45
   567  00FC4D  20                 	db	32
   568  00FC4E  32                 	db	50	;'2'
   569  00FC4F  73                 	db	115	;'s'
   570  00FC50  20                 	db	32
   571  00FC51  20                 	db	32
   572  00FC52  00                 	db	0
   573  00FC53                     STR_101:
   574  00FC53  4D                 	db	77	;'M'
   575  00FC54  49                 	db	73	;'I'
   576  00FC55  44                 	db	68	;'D'
   577  00FC56  2D                 	db	45
   578  00FC57  52                 	db	82	;'R'
   579  00FC58  49                 	db	73	;'I'
   580  00FC59  47                 	db	71	;'G'
   581  00FC5A  48                 	db	72	;'H'
   582  00FC5B  54                 	db	84	;'T'
   583  00FC5C  20                 	db	32
   584  00FC5D  2D                 	db	45
   585  00FC5E  2D                 	db	45
   586  00FC5F  20                 	db	32
   587  00FC60  32                 	db	50	;'2'
   588  00FC61  73                 	db	115	;'s'
   589  00FC62  20                 	db	32
   590  00FC63  00                 	db	0
   591  00FC64                     STR_116:
   592  00FC64  45                 	db	69	;'E'
   593  00FC65  4C                 	db	76	;'L'
   594  00FC66  53                 	db	83	;'S'
   595  00FC67  45                 	db	69	;'E'
   596  00FC68  20                 	db	32
   597  00FC69  54                 	db	84	;'T'
   598  00FC6A  4F                 	db	79	;'O'
   599  00FC6B  47                 	db	71	;'G'
   600  00FC6C  47                 	db	71	;'G'
   601  00FC6D  4C                 	db	76	;'L'
   602  00FC6E  45                 	db	69	;'E'
   603  00FC6F  53                 	db	83	;'S'
   604  00FC70  20                 	db	32
   605  00FC71  52                 	db	82	;'R'
   606  00FC72  41                 	db	65	;'A'
   607  00FC73  35                 	db	53	;'5'
   608  00FC74  00                 	db	0
   609  00FC75                     STR_72:
   610  00FC75  41                 	db	65	;'A'
   611  00FC76  4C                 	db	76	;'L'
   612  00FC77  47                 	db	71	;'G'
   613  00FC78  31                 	db	49	;'1'
   614  00FC79  3A                 	db	58	;':'
   615  00FC7A  20                 	db	32
   616  00FC7B  39                 	db	57	;'9'
   617  00FC7C  20                 	db	32
   618  00FC7D  50                 	db	80	;'P'
   619  00FC7E  4F                 	db	79	;'O'
   620  00FC7F  50                 	db	80	;'P'
   621  00FC80  4E                 	db	78	;'N'
   622  00FC81  4F                 	db	79	;'O'
   623  00FC82  54                 	db	84	;'T'
   624  00FC83  41                 	db	65	;'A'
   625  00FC84  42                 	db	66	;'B'
   626  00FC85  00                 	db	0
   627  00FC86                     STR_68:
   628  00FC86  31                 	db	49	;'1'
   629  00FC87  2E                 	db	46
   630  00FC88  41                 	db	65	;'A'
   631  00FC89  4C                 	db	76	;'L'
   632  00FC8A  47                 	db	71	;'G'
   633  00FC8B  7C                 	db	124
   634  00FC8C  32                 	db	50	;'2'
   635  00FC8D  2E                 	db	46
   636  00FC8E  53                 	db	83	;'S'
   637  00FC8F  4E                 	db	78	;'N'
   638  00FC90  52                 	db	82	;'R'
   639  00FC91  7C                 	db	124
   640  00FC92  33                 	db	51	;'3'
   641  00FC93  2E                 	db	46
   642  00FC94  41                 	db	65	;'A'
   643  00FC95  43                 	db	67	;'C'
   644  00FC96  00                 	db	0
   645  00FC97                     STR_92:
   646  00FC97  54                 	db	84	;'T'
   647  00FC98  53                 	db	83	;'S'
   648  00FC99  54                 	db	84	;'T'
   649  00FC9A  3A                 	db	58	;':'
   650  00FC9B  20                 	db	32
   651  00FC9C  43                 	db	67	;'C'
   652  00FC9D  4F                 	db	79	;'O'
   653  00FC9E  4E                 	db	78	;'N'
   654  00FC9F  44                 	db	68	;'D'
   655  00FCA0  20                 	db	32
   656  00FCA1  53                 	db	83	;'S'
   657  00FCA2  4F                 	db	79	;'O'
   658  00FCA3  4C                 	db	76	;'L'
   659  00FCA4  4E                 	db	78	;'N'
   660  00FCA5  27                 	db	39
   661  00FCA6  44                 	db	68	;'D'
   662  00FCA7  00                 	db	0
   663  00FCA8                     STR_94:
   664  00FCA8  54                 	db	84	;'T'
   665  00FCA9  53                 	db	83	;'S'
   666  00FCAA  54                 	db	84	;'T'
   667  00FCAB  3A                 	db	58	;':'
   668  00FCAC  20                 	db	32
   669  00FCAD  50                 	db	80	;'P'
   670  00FCAE  55                 	db	85	;'U'
   671  00FCAF  53                 	db	83	;'S'
   672  00FCB0  48                 	db	72	;'H'
   673  00FCB1  20                 	db	32
   674  00FCB2  53                 	db	83	;'S'
   675  00FCB3  4F                 	db	79	;'O'
   676  00FCB4  4C                 	db	76	;'L'
   677  00FCB5  4E                 	db	78	;'N'
   678  00FCB6  27                 	db	39
   679  00FCB7  44                 	db	68	;'D'
   680  00FCB8  00                 	db	0
   681  00FCB9                     STR_69:
   682  00FCB9  34                 	db	52	;'4'
   683  00FCBA  2E                 	db	46
   684  00FCBB  48                 	db	72	;'H'
   685  00FCBC  49                 	db	73	;'I'
   686  00FCBD  7C                 	db	124
   687  00FCBE  35                 	db	53	;'5'
   688  00FCBF  2E                 	db	46
   689  00FCC0  54                 	db	84	;'T'
   690  00FCC1  4F                 	db	79	;'O'
   691  00FCC2  47                 	db	71	;'G'
   692  00FCC3  7C                 	db	124
   693  00FCC4  36                 	db	54	;'6'
   694  00FCC5  2E                 	db	46
   695  00FCC6  45                 	db	69	;'E'
   696  00FCC7  45                 	db	69	;'E'
   697  00FCC8  50                 	db	80	;'P'
   698  00FCC9  00                 	db	0
   699  00FCCA                     STR_110:
   700  00FCCA  54                 	db	84	;'T'
   701  00FCCB  53                 	db	83	;'S'
   702  00FCCC  54                 	db	84	;'T'
   703  00FCCD  3A                 	db	58	;':'
   704  00FCCE  20                 	db	32
   705  00FCCF  42                 	db	66	;'B'
   706  00FCD0  4F                 	db	79	;'O'
   707  00FCD1  54                 	db	84	;'T'
   708  00FCD2  48                 	db	72	;'H'
   709  00FCD3  20                 	db	32
   710  00FCD4  53                 	db	83	;'S'
   711  00FCD5  45                 	db	69	;'E'
   712  00FCD6  52                 	db	82	;'R'
   713  00FCD7  56                 	db	86	;'V'
   714  00FCD8  4F                 	db	79	;'O'
   715  00FCD9  53                 	db	83	;'S'
   716  00FCDA  00                 	db	0
   717  00FCDB                     STR_41:
   718  00FCDB  4C                 	db	76	;'L'
   719  00FCDC  4F                 	db	79	;'O'
   720  00FCDD  47                 	db	71	;'G'
   721  00FCDE  20                 	db	32
   722  00FCDF  31                 	db	49	;'1'
   723  00FCE0  20                 	db	32
   724  00FCE1  20                 	db	32
   725  00FCE2  20                 	db	32
   726  00FCE3  20                 	db	32
   727  00FCE4  20                 	db	32
   728  00FCE5  20                 	db	32
   729  00FCE6  20                 	db	32
   730  00FCE7  20                 	db	32
   731  00FCE8  20                 	db	32
   732  00FCE9  20                 	db	32
   733  00FCEA  20                 	db	32
   734  00FCEB  00                 	db	0
   735  00FCEC                     STR_40:
   736  00FCEC  4C                 	db	76	;'L'
   737  00FCED  4F                 	db	79	;'O'
   738  00FCEE  47                 	db	71	;'G'
   739  00FCEF  20                 	db	32
   740  00FCF0  32                 	db	50	;'2'
   741  00FCF1  20                 	db	32
   742  00FCF2  20                 	db	32
   743  00FCF3  20                 	db	32
   744  00FCF4  20                 	db	32
   745  00FCF5  20                 	db	32
   746  00FCF6  20                 	db	32
   747  00FCF7  20                 	db	32
   748  00FCF8  20                 	db	32
   749  00FCF9  20                 	db	32
   750  00FCFA  20                 	db	32
   751  00FCFB  20                 	db	32
   752  00FCFC  00                 	db	0
   753  00FCFD                     STR_44:
   754  00FCFD  4C                 	db	76	;'L'
   755  00FCFE  4F                 	db	79	;'O'
   756  00FCFF  47                 	db	71	;'G'
   757  00FD00  20                 	db	32
   758  00FD01  33                 	db	51	;'3'
   759  00FD02  20                 	db	32
   760  00FD03  20                 	db	32
   761  00FD04  20                 	db	32
   762  00FD05  20                 	db	32
   763  00FD06  20                 	db	32
   764  00FD07  20                 	db	32
   765  00FD08  20                 	db	32
   766  00FD09  20                 	db	32
   767  00FD0A  20                 	db	32
   768  00FD0B  20                 	db	32
   769  00FD0C  20                 	db	32
   770  00FD0D  00                 	db	0
   771  00FD0E                     STR_48:
   772  00FD0E  4C                 	db	76	;'L'
   773  00FD0F  4F                 	db	79	;'O'
   774  00FD10  47                 	db	71	;'G'
   775  00FD11  20                 	db	32
   776  00FD12  34                 	db	52	;'4'
   777  00FD13  20                 	db	32
   778  00FD14  20                 	db	32
   779  00FD15  20                 	db	32
   780  00FD16  20                 	db	32
   781  00FD17  20                 	db	32
   782  00FD18  20                 	db	32
   783  00FD19  20                 	db	32
   784  00FD1A  20                 	db	32
   785  00FD1B  20                 	db	32
   786  00FD1C  20                 	db	32
   787  00FD1D  20                 	db	32
   788  00FD1E  00                 	db	0
   789  00FD1F                     STR_36:
   790  00FD1F  33                 	db	51	;'3'
   791  00FD20  2E                 	db	46
   792  00FD21  20                 	db	32
   793  00FD22  4C                 	db	76	;'L'
   794  00FD23  4F                 	db	79	;'O'
   795  00FD24  47                 	db	71	;'G'
   796  00FD25  53                 	db	83	;'S'
   797  00FD26  20                 	db	32
   798  00FD27  20                 	db	32
   799  00FD28  20                 	db	32
   800  00FD29  20                 	db	32
   801  00FD2A  20                 	db	32
   802  00FD2B  20                 	db	32
   803  00FD2C  20                 	db	32
   804  00FD2D  20                 	db	32
   805  00FD2E  20                 	db	32
   806  00FD2F  00                 	db	0
   807  00FD30                     STR_32:
   808  00FD30  32                 	db	50	;'2'
   809  00FD31  2E                 	db	46
   810  00FD32  20                 	db	32
   811  00FD33  53                 	db	83	;'S'
   812  00FD34  4F                 	db	79	;'O'
   813  00FD35  52                 	db	82	;'R'
   814  00FD36  54                 	db	84	;'T'
   815  00FD37  20                 	db	32
   816  00FD38  20                 	db	32
   817  00FD39  20                 	db	32
   818  00FD3A  20                 	db	32
   819  00FD3B  20                 	db	32
   820  00FD3C  20                 	db	32
   821  00FD3D  20                 	db	32
   822  00FD3E  20                 	db	32
   823  00FD3F  20                 	db	32
   824  00FD40  00                 	db	0
   825  00FD41                     STR_33:
   826  00FD41  31                 	db	49	;'1'
   827  00FD42  2E                 	db	46
   828  00FD43  20                 	db	32
   829  00FD44  44                 	db	68	;'D'
   830  00FD45  41                 	db	65	;'A'
   831  00FD46  54                 	db	84	;'T'
   832  00FD47  45                 	db	69	;'E'
   833  00FD48  2F                 	db	47
   834  00FD49  54                 	db	84	;'T'
   835  00FD4A  49                 	db	73	;'I'
   836  00FD4B  4D                 	db	77	;'M'
   837  00FD4C  45                 	db	69	;'E'
   838  00FD4D  20                 	db	32
   839  00FD4E  20                 	db	32
   840  00FD4F  20                 	db	32
   841  00FD50  20                 	db	32
   842  00FD51  00                 	db	0
   843  00FD52                     STR_24:
   844  00FD52  20                 	db	32
   845  00FD53  2D                 	db	45
   846  00FD54  2D                 	db	45
   847  00FD55  20                 	db	32
   848  00FD56  50                 	db	80	;'P'
   849  00FD57  4F                 	db	79	;'O'
   850  00FD58  50                 	db	80	;'P'
   851  00FD59  20                 	db	32
   852  00FD5A  20                 	db	32
   853  00FD5B  43                 	db	67	;'C'
   854  00FD5C  41                 	db	65	;'A'
   855  00FD5D  4E                 	db	78	;'N'
   856  00FD5E  20                 	db	32
   857  00FD5F  2D                 	db	45
   858  00FD60  2D                 	db	45
   859  00FD61  20                 	db	32
   860  00FD62  00                 	db	0
   861  00FD63                     STR_26:
   862  00FD63  20                 	db	32
   863  00FD64  2D                 	db	45
   864  00FD65  2D                 	db	45
   865  00FD66  20                 	db	32
   866  00FD67  53                 	db	83	;'S'
   867  00FD68  4F                 	db	79	;'O'
   868  00FD69  55                 	db	85	;'U'
   869  00FD6A  50                 	db	80	;'P'
   870  00FD6B  20                 	db	32
   871  00FD6C  43                 	db	67	;'C'
   872  00FD6D  41                 	db	65	;'A'
   873  00FD6E  4E                 	db	78	;'N'
   874  00FD6F  20                 	db	32
   875  00FD70  2D                 	db	45
   876  00FD71  2D                 	db	45
   877  00FD72  20                 	db	32
   878  00FD73  00                 	db	0
   879  00FD74                     STR_28:
   880  00FD74  2D                 	db	45
   881  00FD75  2D                 	db	45
   882  00FD76  20                 	db	32
   883  00FD77  54                 	db	84	;'T'
   884  00FD78  4F                 	db	79	;'O'
   885  00FD79  54                 	db	84	;'T'
   886  00FD7A  41                 	db	65	;'A'
   887  00FD7B  4C                 	db	76	;'L'
   888  00FD7C  20                 	db	32
   889  00FD7D  43                 	db	67	;'C'
   890  00FD7E  41                 	db	65	;'A'
   891  00FD7F  4E                 	db	78	;'N'
   892  00FD80  53                 	db	83	;'S'
   893  00FD81  20                 	db	32
   894  00FD82  2D                 	db	45
   895  00FD83  2D                 	db	45
   896  00FD84  00                 	db	0
   897  00FD85                     STR_39:
   898  00FD85  4C                 	db	76	;'L'
   899  00FD86  4F                 	db	79	;'O'
   900  00FD87  47                 	db	71	;'G'
   901  00FD88  20                 	db	32
   902  00FD89  31                 	db	49	;'1'
   903  00FD8A  20                 	db	32
   904  00FD8B  20                 	db	32
   905  00FD8C  20                 	db	32
   906  00FD8D  20                 	db	32
   907  00FD8E  20                 	db	32
   908  00FD8F  20                 	db	32
   909  00FD90  20                 	db	32
   910  00FD91  20                 	db	32
   911  00FD92  20                 	db	32
   912  00FD93  20                 	db	32
   913  00FD94  3C                 	db	60	;'<'
   914  00FD95  00                 	db	0
   915  00FD96                     STR_42:
   916  00FD96  4C                 	db	76	;'L'
   917  00FD97  4F                 	db	79	;'O'
   918  00FD98  47                 	db	71	;'G'
   919  00FD99  20                 	db	32
   920  00FD9A  32                 	db	50	;'2'
   921  00FD9B  20                 	db	32
   922  00FD9C  20                 	db	32
   923  00FD9D  20                 	db	32
   924  00FD9E  20                 	db	32
   925  00FD9F  20                 	db	32
   926  00FDA0  20                 	db	32
   927  00FDA1  20                 	db	32
   928  00FDA2  20                 	db	32
   929  00FDA3  20                 	db	32
   930  00FDA4  20                 	db	32
   931  00FDA5  3C                 	db	60	;'<'
   932  00FDA6  00                 	db	0
   933  00FDA7                     STR_46:
   934  00FDA7  4C                 	db	76	;'L'
   935  00FDA8  4F                 	db	79	;'O'
   936  00FDA9  47                 	db	71	;'G'
   937  00FDAA  20                 	db	32
   938  00FDAB  33                 	db	51	;'3'
   939  00FDAC  20                 	db	32
   940  00FDAD  20                 	db	32
   941  00FDAE  20                 	db	32
   942  00FDAF  20                 	db	32
   943  00FDB0  20                 	db	32
   944  00FDB1  20                 	db	32
   945  00FDB2  20                 	db	32
   946  00FDB3  20                 	db	32
   947  00FDB4  20                 	db	32
   948  00FDB5  20                 	db	32
   949  00FDB6  3C                 	db	60	;'<'
   950  00FDB7  00                 	db	0
   951  00FDB8                     STR_50:
   952  00FDB8  4C                 	db	76	;'L'
   953  00FDB9  4F                 	db	79	;'O'
   954  00FDBA  47                 	db	71	;'G'
   955  00FDBB  20                 	db	32
   956  00FDBC  34                 	db	52	;'4'
   957  00FDBD  20                 	db	32
   958  00FDBE  20                 	db	32
   959  00FDBF  20                 	db	32
   960  00FDC0  20                 	db	32
   961  00FDC1  20                 	db	32
   962  00FDC2  20                 	db	32
   963  00FDC3  20                 	db	32
   964  00FDC4  20                 	db	32
   965  00FDC5  20                 	db	32
   966  00FDC6  20                 	db	32
   967  00FDC7  3C                 	db	60	;'<'
   968  00FDC8  00                 	db	0
   969  00FDC9                     STR_38:
   970  00FDC9  33                 	db	51	;'3'
   971  00FDCA  2E                 	db	46
   972  00FDCB  20                 	db	32
   973  00FDCC  4C                 	db	76	;'L'
   974  00FDCD  4F                 	db	79	;'O'
   975  00FDCE  47                 	db	71	;'G'
   976  00FDCF  53                 	db	83	;'S'
   977  00FDD0  20                 	db	32
   978  00FDD1  20                 	db	32
   979  00FDD2  20                 	db	32
   980  00FDD3  20                 	db	32
   981  00FDD4  20                 	db	32
   982  00FDD5  20                 	db	32
   983  00FDD6  20                 	db	32
   984  00FDD7  20                 	db	32
   985  00FDD8  3C                 	db	60	;'<'
   986  00FDD9  00                 	db	0
   987  00FDDA                     STR_34:
   988  00FDDA  32                 	db	50	;'2'
   989  00FDDB  2E                 	db	46
   990  00FDDC  20                 	db	32
   991  00FDDD  53                 	db	83	;'S'
   992  00FDDE  4F                 	db	79	;'O'
   993  00FDDF  52                 	db	82	;'R'
   994  00FDE0  54                 	db	84	;'T'
   995  00FDE1  20                 	db	32
   996  00FDE2  20                 	db	32
   997  00FDE3  20                 	db	32
   998  00FDE4  20                 	db	32
   999  00FDE5  20                 	db	32
  1000  00FDE6  20                 	db	32
  1001  00FDE7  20                 	db	32
  1002  00FDE8  20                 	db	32
  1003  00FDE9  3C                 	db	60	;'<'
  1004  00FDEA  00                 	db	0
  1005  00FDEB                     STR_31:
  1006  00FDEB  31                 	db	49	;'1'
  1007  00FDEC  2E                 	db	46
  1008  00FDED  20                 	db	32
  1009  00FDEE  44                 	db	68	;'D'
  1010  00FDEF  41                 	db	65	;'A'
  1011  00FDF0  54                 	db	84	;'T'
  1012  00FDF1  45                 	db	69	;'E'
  1013  00FDF2  2F                 	db	47
  1014  00FDF3  54                 	db	84	;'T'
  1015  00FDF4  49                 	db	73	;'I'
  1016  00FDF5  4D                 	db	77	;'M'
  1017  00FDF6  45                 	db	69	;'E'
  1018  00FDF7  20                 	db	32
  1019  00FDF8  20                 	db	32
  1020  00FDF9  20                 	db	32
  1021  00FDFA  3C                 	db	60	;'<'
  1022  00FDFB  00                 	db	0
  1023  00FDFC                     STR_6:
  1024  00FDFC  50                 	db	80	;'P'
  1025  00FDFD  41                 	db	65	;'A'
  1026  00FDFE  55                 	db	85	;'U'
  1027  00FDFF  53                 	db	83	;'S'
  1028  00FE00  45                 	db	69	;'E'
  1029  00FE01  20                 	db	32
  1030  00FE02  3C                 	db	60	;'<'
  1031  00FE03  20                 	db	32
  1032  00FE04  7C                 	db	124
  1033  00FE05  20                 	db	32
  1034  00FE06  42                 	db	66	;'B'
  1035  00FE07  41                 	db	65	;'A'
  1036  00FE08  43                 	db	67	;'C'
  1037  00FE09  4B                 	db	75	;'K'
  1038  00FE0A  20                 	db	32
  1039  00FE0B  3E                 	db	62	;'>'
  1040  00FE0C  00                 	db	0
  1041  00FE0D                     STR_30:
  1042  00FE0D  50                 	db	80	;'P'
  1043  00FE0E  55                 	db	85	;'U'
  1044  00FE0F  53                 	db	83	;'S'
  1045  00FE10  48                 	db	72	;'H'
  1046  00FE11  20                 	db	32
  1047  00FE12  54                 	db	84	;'T'
  1048  00FE13  4F                 	db	79	;'O'
  1049  00FE14  20                 	db	32
  1050  00FE15  43                 	db	67	;'C'
  1051  00FE16  4F                 	db	79	;'O'
  1052  00FE17  4E                 	db	78	;'N'
  1053  00FE18  54                 	db	84	;'T'
  1054  00FE19  49                 	db	73	;'I'
  1055  00FE1A  4E                 	db	78	;'N'
  1056  00FE1B  55                 	db	85	;'U'
  1057  00FE1C  45                 	db	69	;'E'
  1058  00FE1D  00                 	db	0
  1059  00FE1E                     STR_83:
  1060  00FE1E  4D                 	db	77	;'M'
  1061  00FE1F  41                 	db	65	;'A'
  1062  00FE20  47                 	db	71	;'G'
  1063  00FE21  5F                 	db	95	;'_'
  1064  00FE22  73                 	db	115	;'s'
  1065  00FE23  69                 	db	105	;'i'
  1066  00FE24  67                 	db	103	;'g'
  1067  00FE25  6E                 	db	110	;'n'
  1068  00FE26  61                 	db	97	;'a'
  1069  00FE27  6C                 	db	108	;'l'
  1070  00FE28  3A                 	db	58	;':'
  1071  00FE29  20                 	db	32
  1072  00FE2A  25                 	db	37
  1073  00FE2B  64                 	db	100	;'d'
  1074  00FE2C  20                 	db	32
  1075  00FE2D  00                 	db	0
  1076  00FE2E                     STR_103:
  1077  00FE2E  54                 	db	84	;'T'
  1078  00FE2F  53                 	db	83	;'S'
  1079  00FE30  54                 	db	84	;'T'
  1080  00FE31  3A                 	db	58	;':'
  1081  00FE32  20                 	db	32
  1082  00FE33  54                 	db	84	;'T'
  1083  00FE34  49                 	db	73	;'I'
  1084  00FE35  4C                 	db	76	;'L'
  1085  00FE36  54                 	db	84	;'T'
  1086  00FE37  20                 	db	32
  1087  00FE38  53                 	db	83	;'S'
  1088  00FE39  45                 	db	69	;'E'
  1089  00FE3A  52                 	db	82	;'R'
  1090  00FE3B  56                 	db	86	;'V'
  1091  00FE3C  4F                 	db	79	;'O'
  1092  00FE3D  00                 	db	0
  1093  00FE3E                     STR_4:
  1094  00FE3E  44                 	db	68	;'D'
  1095  00FE3F  49                 	db	73	;'I'
  1096  00FE40  44                 	db	68	;'D'
  1097  00FE41  4E                 	db	78	;'N'
  1098  00FE42  27                 	db	39
  1099  00FE43  54                 	db	84	;'T'
  1100  00FE44  20                 	db	32
  1101  00FE45  43                 	db	67	;'C'
  1102  00FE46  4F                 	db	79	;'O'
  1103  00FE47  4D                 	db	77	;'M'
  1104  00FE48  50                 	db	80	;'P'
  1105  00FE49  4C                 	db	76	;'L'
  1106  00FE4A  45                 	db	69	;'E'
  1107  00FE4B  54                 	db	84	;'T'
  1108  00FE4C  45                 	db	69	;'E'
  1109  00FE4D  00                 	db	0
  1110  00FE4E                     STR_80:
  1111  00FE4E  49                 	db	73	;'I'
  1112  00FE4F  52                 	db	82	;'R'
  1113  00FE50  5F                 	db	95	;'_'
  1114  00FE51  73                 	db	115	;'s'
  1115  00FE52  69                 	db	105	;'i'
  1116  00FE53  67                 	db	103	;'g'
  1117  00FE54  6E                 	db	110	;'n'
  1118  00FE55  61                 	db	97	;'a'
  1119  00FE56  6C                 	db	108	;'l'
  1120  00FE57  3A                 	db	58	;':'
  1121  00FE58  20                 	db	32
  1122  00FE59  25                 	db	37
  1123  00FE5A  64                 	db	100	;'d'
  1124  00FE5B  20                 	db	32
  1125  00FE5C  00                 	db	0
  1126  00FE5D                     STR_109:
  1127  00FE5D  43                 	db	67	;'C'
  1128  00FE5E  41                 	db	65	;'A'
  1129  00FE5F  4D                 	db	77	;'M'
  1130  00FE60  20                 	db	32
  1131  00FE61  44                 	db	68	;'D'
  1132  00FE62  57                 	db	87	;'W'
  1133  00FE63  4E                 	db	78	;'N'
  1134  00FE64  20                 	db	32
  1135  00FE65  7C                 	db	124
  1136  00FE66  52                 	db	82	;'R'
  1137  00FE67  43                 	db	67	;'C'
  1138  00FE68  30                 	db	48	;'0'
  1139  00FE69  3D                 	db	61	;'='
  1140  00FE6A  30                 	db	48	;'0'
  1141  00FE6B  00                 	db	0
  1142  00FE6C                     STR_108:
  1143  00FE6C  43                 	db	67	;'C'
  1144  00FE6D  41                 	db	65	;'A'
  1145  00FE6E  4D                 	db	77	;'M'
  1146  00FE6F  20                 	db	32
  1147  00FE70  55                 	db	85	;'U'
  1148  00FE71  50                 	db	80	;'P'
  1149  00FE72  20                 	db	32
  1150  00FE73  20                 	db	32
  1151  00FE74  7C                 	db	124
  1152  00FE75  52                 	db	82	;'R'
  1153  00FE76  43                 	db	67	;'C'
  1154  00FE77  30                 	db	48	;'0'
  1155  00FE78  3D                 	db	61	;'='
  1156  00FE79  31                 	db	49	;'1'
  1157  00FE7A  00                 	db	0
  1158  00FE7B                     STR_82:
  1159  00FE7B  54                 	db	84	;'T'
  1160  00FE7C  53                 	db	83	;'S'
  1161  00FE7D  54                 	db	84	;'T'
  1162  00FE7E  3A                 	db	58	;':'
  1163  00FE7F  20                 	db	32
  1164  00FE80  4D                 	db	77	;'M'
  1165  00FE81  41                 	db	65	;'A'
  1166  00FE82  47                 	db	71	;'G'
  1167  00FE83  4E                 	db	78	;'N'
  1168  00FE84  45                 	db	69	;'E'
  1169  00FE85  54                 	db	84	;'T'
  1170  00FE86  49                 	db	73	;'I'
  1171  00FE87  53                 	db	83	;'S'
  1172  00FE88  4D                 	db	77	;'M'
  1173  00FE89  00                 	db	0
  1174  00FE8A                     STR_107:
  1175  00FE8A  54                 	db	84	;'T'
  1176  00FE8B  53                 	db	83	;'S'
  1177  00FE8C  54                 	db	84	;'T'
  1178  00FE8D  3A                 	db	58	;':'
  1179  00FE8E  20                 	db	32
  1180  00FE8F  43                 	db	67	;'C'
  1181  00FE90  41                 	db	65	;'A'
  1182  00FE91  4D                 	db	77	;'M'
  1183  00FE92  20                 	db	32
  1184  00FE93  53                 	db	83	;'S'
  1185  00FE94  45                 	db	69	;'E'
  1186  00FE95  52                 	db	82	;'R'
  1187  00FE96  56                 	db	86	;'V'
  1188  00FE97  4F                 	db	79	;'O'
  1189  00FE98  00                 	db	0
  1190  00FE99                     STR_96:
  1191  00FE99  54                 	db	84	;'T'
  1192  00FE9A  53                 	db	83	;'S'
  1193  00FE9B  54                 	db	84	;'T'
  1194  00FE9C  3A                 	db	58	;':'
  1195  00FE9D  20                 	db	32
  1196  00FE9E  50                 	db	80	;'P'
  1197  00FE9F  41                 	db	65	;'A'
  1198  00FEA0  4E                 	db	78	;'N'
  1199  00FEA1  20                 	db	32
  1200  00FEA2  53                 	db	83	;'S'
  1201  00FEA3  45                 	db	69	;'E'
  1202  00FEA4  52                 	db	82	;'R'
  1203  00FEA5  56                 	db	86	;'V'
  1204  00FEA6  4F                 	db	79	;'O'
  1205  00FEA7  00                 	db	0
  1206  00FEA8                     STR_75:
  1207  00FEA8  41                 	db	65	;'A'
  1208  00FEA9  4C                 	db	76	;'L'
  1209  00FEAA  47                 	db	71	;'G'
  1210  00FEAB  34                 	db	52	;'4'
  1211  00FEAC  3A                 	db	58	;':'
  1212  00FEAD  20                 	db	32
  1213  00FEAE  41                 	db	65	;'A'
  1214  00FEAF  4C                 	db	76	;'L'
  1215  00FEB0  4C                 	db	76	;'L'
  1216  00FEB1  20                 	db	32
  1217  00FEB2  43                 	db	67	;'C'
  1218  00FEB3  41                 	db	65	;'A'
  1219  00FEB4  4E                 	db	78	;'N'
  1220  00FEB5  53                 	db	83	;'S'
  1221  00FEB6  00                 	db	0
  1222  00FEB7                     STR_90:
  1223  00FEB7  54                 	db	84	;'T'
  1224  00FEB8  53                 	db	83	;'S'
  1225  00FEB9  54                 	db	84	;'T'
  1226  00FEBA  3A                 	db	58	;':'
  1227  00FEBB  20                 	db	32
  1228  00FEBC  44                 	db	68	;'D'
  1229  00FEBD  43                 	db	67	;'C'
  1230  00FEBE  20                 	db	32
  1231  00FEBF  4D                 	db	77	;'M'
  1232  00FEC0  4F                 	db	79	;'O'
  1233  00FEC1  54                 	db	84	;'T'
  1234  00FEC2  4F                 	db	79	;'O'
  1235  00FEC3  52                 	db	82	;'R'
  1236  00FEC4  53                 	db	83	;'S'
  1237  00FEC5  00                 	db	0
  1238  00FEC6                     STR_70:
  1239  00FEC6  41                 	db	65	;'A'
  1240  00FEC7  4C                 	db	76	;'L'
  1241  00FEC8  47                 	db	71	;'G'
  1242  00FEC9  4F                 	db	79	;'O'
  1243  00FECA  52                 	db	82	;'R'
  1244  00FECB  49                 	db	73	;'I'
  1245  00FECC  54                 	db	84	;'T'
  1246  00FECD  48                 	db	72	;'H'
  1247  00FECE  4D                 	db	77	;'M'
  1248  00FECF  20                 	db	32
  1249  00FED0  54                 	db	84	;'T'
  1250  00FED1  45                 	db	69	;'E'
  1251  00FED2  53                 	db	83	;'S'
  1252  00FED3  54                 	db	84	;'T'
  1253  00FED4  00                 	db	0
  1254  00FED5                     STR_91:
  1255  00FED5  50                 	db	80	;'P'
  1256  00FED6  49                 	db	73	;'I'
  1257  00FED7  4E                 	db	78	;'N'
  1258  00FED8  20                 	db	32
  1259  00FED9  52                 	db	82	;'R'
  1260  00FEDA  41                 	db	65	;'A'
  1261  00FEDB  35                 	db	53	;'5'
  1262  00FEDC  20                 	db	32
  1263  00FEDD  48                 	db	72	;'H'
  1264  00FEDE  49                 	db	73	;'I'
  1265  00FEDF  47                 	db	71	;'G'
  1266  00FEE0  48                 	db	72	;'H'
  1267  00FEE1  2E                 	db	46
  1268  00FEE2  00                 	db	0
  1269  00FEE3                     STR_73:
  1270  00FEE3  41                 	db	65	;'A'
  1271  00FEE4  4C                 	db	76	;'L'
  1272  00FEE5  47                 	db	71	;'G'
  1273  00FEE6  32                 	db	50	;'2'
  1274  00FEE7  3A                 	db	58	;':'
  1275  00FEE8  20                 	db	32
  1276  00FEE9  31                 	db	49	;'1'
  1277  00FEEA  32                 	db	50	;'2'
  1278  00FEEB  20                 	db	32
  1279  00FEEC  43                 	db	67	;'C'
  1280  00FEED  41                 	db	65	;'A'
  1281  00FEEE  4E                 	db	78	;'N'
  1282  00FEEF  53                 	db	83	;'S'
  1283  00FEF0  00                 	db	0
  1284  00FEF1                     STR_76:
  1285  00FEF1  41                 	db	65	;'A'
  1286  00FEF2  4C                 	db	76	;'L'
  1287  00FEF3  47                 	db	71	;'G'
  1288  00FEF4  35                 	db	53	;'5'
  1289  00FEF5  3A                 	db	58	;':'
  1290  00FEF6  20                 	db	32
  1291  00FEF7  4E                 	db	78	;'N'
  1292  00FEF8  4F                 	db	79	;'O'
  1293  00FEF9  20                 	db	32
  1294  00FEFA  43                 	db	67	;'C'
  1295  00FEFB  41                 	db	65	;'A'
  1296  00FEFC  4E                 	db	78	;'N'
  1297  00FEFD  53                 	db	83	;'S'
  1298  00FEFE  00                 	db	0
  1299  00FEFF                     STR_71:
  1300  00FEFF  50                 	db	80	;'P'
  1301  00FF00  55                 	db	85	;'U'
  1302  00FF01  53                 	db	83	;'S'
  1303  00FF02  48                 	db	72	;'H'
  1304  00FF03  20                 	db	32
  1305  00FF04  54                 	db	84	;'T'
  1306  00FF05  4F                 	db	79	;'O'
  1307  00FF06  20                 	db	32
  1308  00FF07  53                 	db	83	;'S'
  1309  00FF08  54                 	db	84	;'T'
  1310  00FF09  41                 	db	65	;'A'
  1311  00FF0A  52                 	db	82	;'R'
  1312  00FF0B  54                 	db	84	;'T'
  1313  00FF0C  00                 	db	0
  1314  00FF0D                     STR_23:
  1315  00FF0D  25                 	db	37
  1316  00FF0E  64                 	db	100	;'d'
  1317  00FF0F  20                 	db	32
  1318  00FF10  4D                 	db	77	;'M'
  1319  00FF11  49                 	db	73	;'I'
  1320  00FF12  4E                 	db	78	;'N'
  1321  00FF13  20                 	db	32
  1322  00FF14  25                 	db	37
  1323  00FF15  64                 	db	100	;'d'
  1324  00FF16  20                 	db	32
  1325  00FF17  53                 	db	83	;'S'
  1326  00FF18  45                 	db	69	;'E'
  1327  00FF19  43                 	db	67	;'C'
  1328  00FF1A  00                 	db	0
  1329  00FF1B                     STR_2:
  1330  00FF1B  54                 	db	84	;'T'
  1331  00FF1C  49                 	db	73	;'I'
  1332  00FF1D  4D                 	db	77	;'M'
  1333  00FF1E  45                 	db	69	;'E'
  1334  00FF1F  3A                 	db	58	;':'
  1335  00FF20  20                 	db	32
  1336  00FF21  25                 	db	37
  1337  00FF22  64                 	db	100	;'d'
  1338  00FF23  3A                 	db	58	;':'
  1339  00FF24  25                 	db	37
  1340  00FF25  30                 	db	48	;'0'
  1341  00FF26  32                 	db	50	;'2'
  1342  00FF27  64                 	db	100	;'d'
  1343  00FF28  00                 	db	0
  1344  00FF29                     STR_79:
  1345  00FF29  54                 	db	84	;'T'
  1346  00FF2A  53                 	db	83	;'S'
  1347  00FF2B  54                 	db	84	;'T'
  1348  00FF2C  3A                 	db	58	;':'
  1349  00FF2D  20                 	db	32
  1350  00FF2E  49                 	db	73	;'I'
  1351  00FF2F  52                 	db	82	;'R'
  1352  00FF30  20                 	db	32
  1353  00FF31  53                 	db	83	;'S'
  1354  00FF32  4E                 	db	78	;'N'
  1355  00FF33  53                 	db	83	;'S'
  1356  00FF34  52                 	db	82	;'R'
  1357  00FF35  00                 	db	0
  1358  00FF36                     STR_113:
  1359  00FF36  53                 	db	83	;'S'
  1360  00FF37  4F                 	db	79	;'O'
  1361  00FF38  4C                 	db	76	;'L'
  1362  00FF39  45                 	db	69	;'E'
  1363  00FF3A  4E                 	db	78	;'N'
  1364  00FF3B  4F                 	db	79	;'O'
  1365  00FF3C  49                 	db	73	;'I'
  1366  00FF3D  44                 	db	68	;'D'
  1367  00FF3E  20                 	db	32
  1368  00FF3F  54                 	db	84	;'T'
  1369  00FF40  53                 	db	83	;'S'
  1370  00FF41  54                 	db	84	;'T'
  1371  00FF42  00                 	db	0
  1372  00FF43                     STR_65:
  1373  00FF43  54                 	db	84	;'T'
  1374  00FF44  49                 	db	73	;'I'
  1375  00FF45  4D                 	db	77	;'M'
  1376  00FF46  45                 	db	69	;'E'
  1377  00FF47  20                 	db	32
  1378  00FF48  25                 	db	37
  1379  00FF49  64                 	db	100	;'d'
  1380  00FF4A  3A                 	db	58	;':'
  1381  00FF4B  25                 	db	37
  1382  00FF4C  30                 	db	48	;'0'
  1383  00FF4D  32                 	db	50	;'2'
  1384  00FF4E  64                 	db	100	;'d'
  1385  00FF4F  00                 	db	0
  1386  00FF50                     STR_74:
  1387  00FF50  41                 	db	65	;'A'
  1388  00FF51  4C                 	db	76	;'L'
  1389  00FF52  47                 	db	71	;'G'
  1390  00FF53  33                 	db	51	;'3'
  1391  00FF54  3A                 	db	58	;':'
  1392  00FF55  20                 	db	32
  1393  00FF56  31                 	db	49	;'1'
  1394  00FF57  20                 	db	32
  1395  00FF58  43                 	db	67	;'C'
  1396  00FF59  41                 	db	65	;'A'
  1397  00FF5A  4E                 	db	78	;'N'
  1398  00FF5B  00                 	db	0
  1399  00FF5C                     STR_93:
  1400  00FF5C  50                 	db	80	;'P'
  1401  00FF5D  49                 	db	73	;'I'
  1402  00FF5E  4E                 	db	78	;'N'
  1403  00FF5F  20                 	db	32
  1404  00FF60  52                 	db	82	;'R'
  1405  00FF61  41                 	db	65	;'A'
  1406  00FF62  33                 	db	51	;'3'
  1407  00FF63  2E                 	db	46
  1408  00FF64  2E                 	db	46
  1409  00FF65  2E                 	db	46
  1410  00FF66  00                 	db	0
  1411  00FF67                     STR_95:
  1412  00FF67  50                 	db	80	;'P'
  1413  00FF68  49                 	db	73	;'I'
  1414  00FF69  4E                 	db	78	;'N'
  1415  00FF6A  20                 	db	32
  1416  00FF6B  52                 	db	82	;'R'
  1417  00FF6C  41                 	db	65	;'A'
  1418  00FF6D  34                 	db	52	;'4'
  1419  00FF6E  2E                 	db	46
  1420  00FF6F  2E                 	db	46
  1421  00FF70  2E                 	db	46
  1422  00FF71  00                 	db	0
  1423  00FF72                     STR_64:
  1424  00FF72  53                 	db	83	;'S'
  1425  00FF73  4F                 	db	79	;'O'
  1426  00FF74  52                 	db	82	;'R'
  1427  00FF75  54                 	db	84	;'T'
  1428  00FF76  49                 	db	73	;'I'
  1429  00FF77  4E                 	db	78	;'N'
  1430  00FF78  47                 	db	71	;'G'
  1431  00FF79  2E                 	db	46
  1432  00FF7A  2E                 	db	46
  1433  00FF7B  2E                 	db	46
  1434  00FF7C  00                 	db	0
  1435  00FF7D                     STR_84:
  1436  00FF7D  54                 	db	84	;'T'
  1437  00FF7E  53                 	db	83	;'S'
  1438  00FF7F  54                 	db	84	;'T'
  1439  00FF80  3A                 	db	58	;':'
  1440  00FF81  20                 	db	32
  1441  00FF82  43                 	db	67	;'C'
  1442  00FF83  4F                 	db	79	;'O'
  1443  00FF84  4E                 	db	78	;'N'
  1444  00FF85  44                 	db	68	;'D'
  1445  00FF86  00                 	db	0
  1446  00FF87                     STR_114:
  1447  00FF87  50                 	db	80	;'P'
  1448  00FF88  55                 	db	85	;'U'
  1449  00FF89  53                 	db	83	;'S'
  1450  00FF8A  48                 	db	72	;'H'
  1451  00FF8B  20                 	db	32
  1452  00FF8C  44                 	db	68	;'D'
  1453  00FF8D  4F                 	db	79	;'O'
  1454  00FF8E  4E                 	db	78	;'N'
  1455  00FF8F  45                 	db	69	;'E'
  1456  00FF90  00                 	db	0
  1457  00FF91                     STR_88:
  1458  00FF91  41                 	db	65	;'A'
  1459  00FF92  43                 	db	67	;'C'
  1460  00FF93  54                 	db	84	;'T'
  1461  00FF94  55                 	db	85	;'U'
  1462  00FF95  41                 	db	65	;'A'
  1463  00FF96  54                 	db	84	;'T'
  1464  00FF97  4F                 	db	79	;'O'
  1465  00FF98  52                 	db	82	;'R'
  1466  00FF99  53                 	db	83	;'S'
  1467  00FF9A  00                 	db	0
  1468  00FF9B                     STR_22:
  1469  00FF9B  44                 	db	68	;'D'
  1470  00FF9C  55                 	db	85	;'U'
  1471  00FF9D  52                 	db	82	;'R'
  1472  00FF9E  41                 	db	65	;'A'
  1473  00FF9F  54                 	db	84	;'T'
  1474  00FFA0  49                 	db	73	;'I'
  1475  00FFA1  4F                 	db	79	;'O'
  1476  00FFA2  4E                 	db	78	;'N'
  1477  00FFA3  3A                 	db	58	;':'
  1478  00FFA4  00                 	db	0
  1479  00FFA5                     STR_86:
  1480  00FFA5  43                 	db	67	;'C'
  1481  00FFA6  4F                 	db	79	;'O'
  1482  00FFA7  4E                 	db	78	;'N'
  1483  00FFA8  44                 	db	68	;'D'
  1484  00FFA9  3A                 	db	58	;':'
  1485  00FFAA  20                 	db	32
  1486  00FFAB  25                 	db	37
  1487  00FFAC  64                 	db	100	;'d'
  1488  00FFAD  00                 	db	0
  1489  00FFAE                     STR_77:
  1490  00FFAE  53                 	db	83	;'S'
  1491  00FFAF  45                 	db	69	;'E'
  1492  00FFB0  4E                 	db	78	;'N'
  1493  00FFB1  53                 	db	83	;'S'
  1494  00FFB2  4F                 	db	79	;'O'
  1495  00FFB3  52                 	db	82	;'R'
  1496  00FFB4  53                 	db	83	;'S'
  1497  00FFB5  00                 	db	0
  1498  00FFB6                     STR_117:
  1499  00FFB6  28                 	db	40
  1500  00FFB7  6E                 	db	110	;'n'
  1501  00FFB8  75                 	db	117	;'u'
  1502  00FFB9  6C                 	db	108	;'l'
  1503  00FFBA  6C                 	db	108	;'l'
  1504  00FFBB  29                 	db	41
  1505  00FFBC  00                 	db	0
  1506  00FFBD                     STR_67:
  1507  00FFBD  46                 	db	70	;'F'
  1508  00FFBE  41                 	db	65	;'A'
  1509  00FFBF  49                 	db	73	;'I'
  1510  00FFC0  4C                 	db	76	;'L'
  1511  00FFC1  45                 	db	69	;'E'
  1512  00FFC2  44                 	db	68	;'D'
  1513  00FFC3  00                 	db	0
  1514  00FFC4                     STR_7:
  1515  00FFC4  53                 	db	83	;'S'
  1516  00FFC5  54                 	db	84	;'T'
  1517  00FFC6  41                 	db	65	;'A'
  1518  00FFC7  52                 	db	82	;'R'
  1519  00FFC8  54                 	db	84	;'T'
  1520  00FFC9  3A                 	db	58	;':'
  1521  00FFCA  00                 	db	0
  1522  00FFCB                     STR_9:
  1523  00FFCB  46                 	db	70	;'F'
  1524  00FFCC  45                 	db	69	;'E'
  1525  00FFCD  42                 	db	66	;'B'
  1526  00FFCE  00                 	db	0
  1527  00FFCF                     STR_19:
  1528  00FFCF  44                 	db	68	;'D'
  1529  00FFD0  45                 	db	69	;'E'
  1530  00FFD1  43                 	db	67	;'C'
  1531  00FFD2  00                 	db	0
  1532  00FFD3                     STR_15:
  1533  00FFD3  41                 	db	65	;'A'
  1534  00FFD4  55                 	db	85	;'U'
  1535  00FFD5  47                 	db	71	;'G'
  1536  00FFD6  00                 	db	0
  1537  00FFD7                     STR_14:
  1538  00FFD7  4A                 	db	74	;'J'
  1539  00FFD8  55                 	db	85	;'U'
  1540  00FFD9  4C                 	db	76	;'L'
  1541  00FFDA  00                 	db	0
  1542  00FFDB                     STR_8:
  1543  00FFDB  4A                 	db	74	;'J'
  1544  00FFDC  41                 	db	65	;'A'
  1545  00FFDD  4E                 	db	78	;'N'
  1546  00FFDE  00                 	db	0
  1547  00FFDF                     STR_13:
  1548  00FFDF  4A                 	db	74	;'J'
  1549  00FFE0  55                 	db	85	;'U'
  1550  00FFE1  4E                 	db	78	;'N'
  1551  00FFE2  00                 	db	0
  1552  00FFE3                     STR_16:
  1553  00FFE3  53                 	db	83	;'S'
  1554  00FFE4  45                 	db	69	;'E'
  1555  00FFE5  50                 	db	80	;'P'
  1556  00FFE6  00                 	db	0
  1557  00FFE7                     STR_10:
  1558  00FFE7  4D                 	db	77	;'M'
  1559  00FFE8  41                 	db	65	;'A'
  1560  00FFE9  52                 	db	82	;'R'
  1561  00FFEA  00                 	db	0
  1562  00FFEB                     STR_11:
  1563  00FFEB  41                 	db	65	;'A'
  1564  00FFEC  50                 	db	80	;'P'
  1565  00FFED  52                 	db	82	;'R'
  1566  00FFEE  00                 	db	0
  1567  00FFEF                     STR_20:
  1568  00FFEF  45                 	db	69	;'E'
  1569  00FFF0  52                 	db	82	;'R'
  1570  00FFF1  52                 	db	82	;'R'
  1571  00FFF2  00                 	db	0
  1572  00FFF3                     STR_17:
  1573  00FFF3  4F                 	db	79	;'O'
  1574  00FFF4  43                 	db	67	;'C'
  1575  00FFF5  54                 	db	84	;'T'
  1576  00FFF6  00                 	db	0
  1577  00FFF7                     STR_18:
  1578  00FFF7  4E                 	db	78	;'N'
  1579  00FFF8  4F                 	db	79	;'O'
  1580  00FFF9  56                 	db	86	;'V'
  1581  00FFFA  00                 	db	0
  1582  00FFFB                     STR_12:
  1583  00FFFB  4D                 	db	77	;'M'
  1584  00FFFC  41                 	db	65	;'A'
  1585  00FFFD  59                 	db	89	;'Y'
  1586  00FFFE  00                 	db	0
  1587  0000                     
  1588                           ; #config settings
  1589  00FFFF  00                 	db	0	; dummy byte at the end
  1590  0000                     
  1591                           	psect	cinit
  1592  004096                     __pcinit:
  1593                           	opt stack 0
  1594  004096                     start_initialization:
  1595                           	opt stack 0
  1596  004096                     __initialization:
  1597                           	opt stack 0
  1598                           
  1599                           ; Initialize objects allocated to BANK1 (8 bytes)
  1600                           ; load TBLPTR registers with __pidataBANK1
  1601  004096  0EF4               	movlw	low __pidataBANK1
  1602  004098  6EF6               	movwf	tblptrl,c
  1603  00409A  0E47               	movlw	high __pidataBANK1
  1604  00409C  6EF7               	movwf	tblptrh,c
  1605  00409E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1606  0040A0  6EF8               	movwf	tblptru,c
  1607  0040A2  EE01  F02F         	lfsr	0,__pdataBANK1
  1608  0040A6  EE10 F008          	lfsr	1,8
  1609  0040AA                     copy_data0:
  1610  0040AA  0009               	tblrd		*+
  1611  0040AC  CFF5 FFEE          	movff	tablat,postinc0
  1612  0040B0  50E5               	movf	postdec1,w,c
  1613  0040B2  50E1               	movf	fsr1l,w,c
  1614  0040B4  E1FA               	bnz	copy_data0
  1615                           
  1616                           ; Clear objects allocated to BANK1 (47 bytes)
  1617  0040B6  EE01  F000         	lfsr	0,__pbssBANK1
  1618  0040BA  0E2F               	movlw	47
  1619  0040BC                     clear_0:
  1620  0040BC  6AEE               	clrf	postinc0,c
  1621  0040BE  06E8               	decf	wreg,f,c
  1622  0040C0  E1FD               	bnz	clear_0
  1623                           
  1624                           ; Clear objects allocated to BANK0 (38 bytes)
  1625  0040C2  EE00  F0DA         	lfsr	0,__pbssBANK0
  1626  0040C6  0E26               	movlw	38
  1627  0040C8                     clear_1:
  1628  0040C8  6AEE               	clrf	postinc0,c
  1629  0040CA  06E8               	decf	wreg,f,c
  1630  0040CC  E1FD               	bnz	clear_1
  1631                           
  1632                           ; Clear objects allocated to COMRAM (35 bytes)
  1633  0040CE  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1634  0040D2  0E23               	movlw	35
  1635  0040D4                     clear_2:
  1636  0040D4  6AEE               	clrf	postinc0,c
  1637  0040D6  06E8               	decf	wreg,f,c
  1638  0040D8  E1FD               	bnz	clear_2
  1639  0040DA                     end_of_initialization:
  1640                           	opt stack 0
  1641  0040DA                     __end_of__initialization:
  1642                           	opt stack 0
  1643  0040DA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1644  0040DC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1645  0040DE  0100               	movlb	0
  1646  0040E0  EF06  F01B         	goto	_main	;jump to C main() function
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	bssCOMRAM
  1657  00005B                     __pbssCOMRAM:
  1658                           	opt stack 0
  1659  00005B                     _back:
  1660                           	opt stack 0
  1661  00005B                     	ds	2
  1662  00005D                     _count_can_no_lab:
  1663                           	opt stack 0
  1664  00005D                     	ds	2
  1665  00005F                     _count_can_w_lab:
  1666                           	opt stack 0
  1667  00005F                     	ds	2
  1668  000061                     _count_pop_no_tab:
  1669                           	opt stack 0
  1670  000061                     	ds	2
  1671  000063                     _count_pop_w_tab:
  1672                           	opt stack 0
  1673  000063                     	ds	2
  1674  000065                     _debug:
  1675                           	opt stack 0
  1676  000065                     	ds	2
  1677  000067                     _down:
  1678                           	opt stack 0
  1679  000067                     	ds	2
  1680  000069                     _enter:
  1681                           	opt stack 0
  1682  000069                     	ds	2
  1683  00006B                     _f_ID_receive:
  1684                           	opt stack 0
  1685  00006B                     	ds	2
  1686  00006D                     _f_can_coming_to_ID:
  1687                           	opt stack 0
  1688  00006D                     	ds	2
  1689  00006F                     _f_can_coming_to_distribution:
  1690                           	opt stack 0
  1691  00006F                     	ds	2
  1692  000071                     _f_lastCan:
  1693                           	opt stack 0
  1694  000071                     	ds	2
  1695  000073                     _first:
  1696                           	opt stack 0
  1697  000073                     	ds	2
  1698  000075                     _firstboot:
  1699                           	opt stack 0
  1700  000075                     	ds	2
  1701  000077                     _up:
  1702                           	opt stack 0
  1703  000077                     	ds	2
  1704  000079                     _was_low_1:
  1705                           	opt stack 0
  1706  000079                     	ds	2
  1707  00007B                     _was_low_3:
  1708                           	opt stack 0
  1709  00007B                     	ds	2
  1710  00007D                     _input:
  1711                           	opt stack 0
  1712  00007D                     	ds	1
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           
  1722                           	psect	bssBANK0
  1723  0000DA                     __pbssBANK0:
  1724                           	opt stack 0
  1725  0000DA                     _IR_signal:
  1726                           	opt stack 0
  1727  0000DA                     	ds	2
  1728  0000DC                     _MAG_signal:
  1729                           	opt stack 0
  1730  0000DC                     	ds	2
  1731  0000DE                     _RTCflag:
  1732                           	opt stack 0
  1733  0000DE                     	ds	2
  1734  0000E0                     _cur_state:
  1735                           	opt stack 0
  1736  0000E0                     	ds	2
  1737  0000E2                     _f_loadingNewCan:
  1738                           	opt stack 0
  1739  0000E2                     	ds	2
  1740  0000E4                     _i:
  1741                           	opt stack 0
  1742  0000E4                     	ds	2
  1743  0000E6                     _log:
  1744                           	opt stack 0
  1745  0000E6                     	ds	2
  1746  0000E8                     _log_completion:
  1747                           	opt stack 0
  1748  0000E8                     	ds	2
  1749  0000EA                     _log_count_can_no_lab:
  1750                           	opt stack 0
  1751  0000EA                     	ds	2
  1752  0000EC                     _log_count_can_w_lab:
  1753                           	opt stack 0
  1754  0000EC                     	ds	2
  1755  0000EE                     _log_count_pop_no_tab:
  1756                           	opt stack 0
  1757  0000EE                     	ds	2
  1758  0000F0                     _log_count_pop_w_tab:
  1759                           	opt stack 0
  1760  0000F0                     	ds	2
  1761  0000F2                     _log_count_total:
  1762                           	opt stack 0
  1763  0000F2                     	ds	2
  1764  0000F4                     _log_total_time:
  1765                           	opt stack 0
  1766  0000F4                     	ds	2
  1767  0000F6                     _logstate:
  1768                           	opt stack 0
  1769  0000F6                     	ds	2
  1770  0000F8                     _total_time:
  1771                           	opt stack 0
  1772  0000F8                     	ds	2
  1773  0000FA                     _var:
  1774                           	opt stack 0
  1775  0000FA                     	ds	2
  1776  0000FC                     _machine_state:
  1777                           	opt stack 0
  1778  0000FC                     	ds	1
  1779  0000FD                     _sel:
  1780                           	opt stack 0
  1781  0000FD                     	ds	1
  1782  0000FE                     _count_total:
  1783                           	opt stack 0
  1784  0000FE                     	ds	2
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	bssBANK1
  1795  000100                     __pbssBANK1:
  1796                           	opt stack 0
  1797  000100                     _log_startTime:
  1798                           	opt stack 0
  1799  000100                     	ds	14
  1800  00010E                     _startTime:
  1801                           	opt stack 0
  1802  00010E                     	ds	14
  1803  00011C                     _servoTimes:
  1804                           	opt stack 0
  1805  00011C                     	ds	8
  1806  000124                     _time:
  1807                           	opt stack 0
  1808  000124                     	ds	7
  1809  00012B                     _cur_can:
  1810                           	opt stack 0
  1811  00012B                     	ds	2
  1812  00012D                     _f_can_distributed:
  1813                           	opt stack 0
  1814  00012D                     	ds	2
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           
  1824                           	psect	dataBANK1
  1825  00012F                     __pdataBANK1:
  1826                           	opt stack 0
  1827  00012F                     UI@F3223:
  1828                           	opt stack 0
  1829  00012F                     	ds	4
  1830  000133                     printRTC@F3214:
  1831                           	opt stack 0
  1832  000133                     	ds	4
  1833                           tblptru	equ	0xFF8
  1834                           tblptrh	equ	0xFF7
  1835                           tblptrl	equ	0xFF6
  1836                           tablat	equ	0xFF5
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           
  1842                           	psect	cstackBANK0
  1843  000080                     __pcstackBANK0:
  1844                           	opt stack 0
  1845  000080                     ??_delay_ms:
  1846  000080                     ??_PortTests:
  1847  000080                     ??_isdigit:
  1848  000080                     ??_readADC:
  1849  000080                     ??_I2C_Master_Wait:
  1850  000080                     ?___wmul:
  1851                           	opt stack 0
  1852  000080                     ?___awmod:
  1853                           	opt stack 0
  1854  000080                     ?___lwdiv:
  1855                           	opt stack 0
  1856  000080                     ?___lldiv:
  1857                           	opt stack 0
  1858  000080                     lcdNibble@temp:
  1859                           	opt stack 0
  1860  000080                     initTime@m:
  1861                           	opt stack 0
  1862  000080                     updateServoPosition@time_us:
  1863                           	opt stack 0
  1864  000080                     EEPROM_read@address:
  1865                           	opt stack 0
  1866  000080                     ___wmul@multiplier:
  1867                           	opt stack 0
  1868  000080                     ___awmod@dividend:
  1869                           	opt stack 0
  1870  000080                     ___lwdiv@dividend:
  1871                           	opt stack 0
  1872  000080                     strcpy@to:
  1873                           	opt stack 0
  1874  000080                     ___lldiv@dividend:
  1875                           	opt stack 0
  1876                           
  1877                           ; 4 bytes @ 0x0
  1878  000080                     	ds	1
  1879  000081                     readADC@channel:
  1880                           	opt stack 0
  1881  000081                     I2C_Master_Read@a:
  1882                           	opt stack 0
  1883  000081                     lcdNibble@data:
  1884                           	opt stack 0
  1885  000081                     initTime@h:
  1886                           	opt stack 0
  1887  000081                     delay_ms@milliseconds:
  1888                           	opt stack 0
  1889  000081                     _isdigit$1941:
  1890                           	opt stack 0
  1891  000081                     I2C_Master_Write@d:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x1
  1895  000081                     	ds	1
  1896  000082                     ??_readIR:
  1897  000082                     ??_readMAG:
  1898  000082                     I2C_Master_Read@temp:
  1899                           	opt stack 0
  1900  000082                     lcdInst@data:
  1901                           	opt stack 0
  1902  000082                     putch@data:
  1903                           	opt stack 0
  1904  000082                     initTime@w:
  1905                           	opt stack 0
  1906  000082                     isdigit@c:
  1907                           	opt stack 0
  1908  000082                     updateServoPosition@timer:
  1909                           	opt stack 0
  1910  000082                     ___wmul@multiplicand:
  1911                           	opt stack 0
  1912  000082                     ___awmod@divisor:
  1913                           	opt stack 0
  1914  000082                     ___lwdiv@divisor:
  1915                           	opt stack 0
  1916  000082                     strcpy@from:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x2
  1920  000082                     	ds	1
  1921  000083                     ??_initLCD:
  1922  000083                     initTime@DD:
  1923                           	opt stack 0
  1924  000083                     getRTC@i:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x3
  1928  000083                     	ds	1
  1929  000084                     ??_updateServoPosition:
  1930  000084                     initTime@MM:
  1931                           	opt stack 0
  1932  000084                     ___awmod@counter:
  1933                           	opt stack 0
  1934  000084                     readIR@res:
  1935                           	opt stack 0
  1936  000084                     readMAG@res:
  1937                           	opt stack 0
  1938  000084                     ___wmul@product:
  1939                           	opt stack 0
  1940  000084                     ___lwdiv@quotient:
  1941                           	opt stack 0
  1942  000084                     strcpy@cp:
  1943                           	opt stack 0
  1944  000084                     ___lldiv@divisor:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0x4
  1948  000084                     	ds	1
  1949  000085                     ??_initSortTimer:
  1950  000085                     initTime@YY:
  1951                           	opt stack 0
  1952  000085                     ___awmod@sign:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x5
  1956  000085                     	ds	1
  1957  000086                     ??_ID:
  1958  000086                     ??_getIR:
  1959  000086                     ?___awdiv:
  1960                           	opt stack 0
  1961  000086                     initTime@s:
  1962                           	opt stack 0
  1963  000086                     ___lwdiv@counter:
  1964                           	opt stack 0
  1965  000086                     updateServoPosition@my_time:
  1966                           	opt stack 0
  1967  000086                     ___awdiv@dividend:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x6
  1971  000086                     	ds	1
  1972  000087                     ?___lwmod:
  1973                           	opt stack 0
  1974  000087                     ___lwmod@dividend:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x7
  1978  000087                     	ds	1
  1979  000088                     ??_Distribution:
  1980  000088                     ??_initServos:
  1981  000088                     ID@i:
  1982                           	opt stack 0
  1983  000088                     initSortTimer@i:
  1984                           	opt stack 0
  1985  000088                     ___awdiv@divisor:
  1986                           	opt stack 0
  1987  000088                     ___lldiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 4 bytes @ 0x8
  1991  000088                     	ds	1
  1992  000089                     ___lwmod@divisor:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x9
  1996  000089                     	ds	1
  1997  00008A                     ___awdiv@counter:
  1998                           	opt stack 0
  1999  00008A                     ID@sensor_outputs:
  2000                           	opt stack 0
  2001                           
  2002                           ; 6 bytes @ 0xA
  2003  00008A                     	ds	1
  2004  00008B                     ___awdiv@sign:
  2005                           	opt stack 0
  2006  00008B                     ___lwmod@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xB
  2010  00008B                     	ds	1
  2011  00008C                     ___lldiv@counter:
  2012                           	opt stack 0
  2013  00008C                     ___awdiv@quotient:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0xC
  2017  00008C                     	ds	1
  2018  00008D                     I2C_Master_Init@c:
  2019                           	opt stack 0
  2020                           
  2021                           ; 4 bytes @ 0xD
  2022  00008D                     	ds	1
  2023  00008E                     ?_printf:
  2024                           	opt stack 0
  2025  00008E                     printf@f:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0xE
  2029  00008E                     	ds	3
  2030  000091                     ??_I2C_Master_Init:
  2031                           
  2032                           ; 1 bytes @ 0x11
  2033  000091                     	ds	4
  2034  000095                     ??_loadRTC:
  2035                           
  2036                           ; 1 bytes @ 0x15
  2037  000095                     	ds	1
  2038  000096                     loadRTC@i:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0x16
  2042  000096                     	ds	4
  2043  00009A                     ??_printf:
  2044                           
  2045                           ; 1 bytes @ 0x1A
  2046  00009A                     	ds	4
  2047  00009E                     printf@prec:
  2048                           	opt stack 0
  2049                           
  2050                           ; 1 bytes @ 0x1E
  2051  00009E                     	ds	1
  2052  00009F                     printf@cp:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x1F
  2056  00009F                     	ds	2
  2057  0000A1                     printf@ap:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x21
  2061  0000A1                     	ds	2
  2062  0000A3                     printf@len:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x23
  2066  0000A3                     	ds	2
  2067  0000A5                     printf@val:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x25
  2071  0000A5                     	ds	2
  2072  0000A7                     printf@flag:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x27
  2076  0000A7                     	ds	1
  2077  0000A8                     printf@c:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x28
  2081  0000A8                     	ds	1
  2082  0000A9                     printf@width:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x29
  2086  0000A9                     	ds	2
  2087  0000AB                     ??_printRTC:
  2088  0000AB                     ??_algorithmTest:
  2089  0000AB                     ??_sensorTest:
  2090  0000AB                     ??_actuatorTest:
  2091  0000AB                     ??_PortTestA5:
  2092  0000AB                     ??_ToggleTestA5:
  2093  0000AB                     ??_SolenoidTestA5:
  2094  0000AB                     ??_BothServos:
  2095  0000AB                     EEPROM_write@address:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x2B
  2099  0000AB                     	ds	1
  2100  0000AC                     ToggleTestA5@on:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x2C
  2104  0000AC                     	ds	1
  2105  0000AD                     EEPROM_write@data:
  2106                           	opt stack 0
  2107  0000AD                     actuatorTest@i_1632:
  2108                           	opt stack 0
  2109  0000AD                     sensorTest@res:
  2110                           	opt stack 0
  2111  0000AD                     SolenoidTestA5@i:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2D
  2115  0000AD                     	ds	1
  2116  0000AE                     ??_EEPROM_write:
  2117  0000AE                     actuatorTest@i_1639:
  2118                           	opt stack 0
  2119  0000AE                     printRTC@INT_time:
  2120                           	opt stack 0
  2121                           
  2122                           ; 14 bytes @ 0x2E
  2123  0000AE                     	ds	1
  2124  0000AF                     EEPROM_write@i:
  2125                           	opt stack 0
  2126  0000AF                     actuatorTest@i_1640:
  2127                           	opt stack 0
  2128  0000AF                     SolenoidTestA5@i_1685:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x2F
  2132  0000AF                     	ds	1
  2133  0000B0                     EEPROM_write@i_1323:
  2134                           	opt stack 0
  2135  0000B0                     actuatorTest@i_1642:
  2136                           	opt stack 0
  2137  0000B0                     SolenoidTestA5@i_1687:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x30
  2141  0000B0                     	ds	1
  2142  0000B1                     ??_Loading:
  2143  0000B1                     logRun@num:
  2144                           	opt stack 0
  2145  0000B1                     actuatorTest@i_1643:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x31
  2149  0000B1                     	ds	1
  2150  0000B2                     logRun@byte1:
  2151                           	opt stack 0
  2152  0000B2                     actuatorTest@i_1645:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x32
  2156  0000B2                     	ds	1
  2157  0000B3                     logRun@byte2:
  2158                           	opt stack 0
  2159  0000B3                     actuatorTest@i_1646:
  2160                           	opt stack 0
  2161  0000B3                     Loading@addr:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x33
  2165  0000B3                     	ds	1
  2166  0000B4                     logRun@byte3:
  2167                           	opt stack 0
  2168  0000B4                     actuatorTest@i_1648:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x34
  2172  0000B4                     	ds	1
  2173  0000B5                     Loading@byte1:
  2174                           	opt stack 0
  2175  0000B5                     logRun@byte_i:
  2176                           	opt stack 0
  2177  0000B5                     actuatorTest@i_1649:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x35
  2181  0000B5                     	ds	1
  2182  0000B6                     logRun@byte11:
  2183                           	opt stack 0
  2184  0000B6                     actuatorTest@i_1651:
  2185                           	opt stack 0
  2186  0000B6                     Loading@i:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x36
  2190  0000B6                     	ds	1
  2191  0000B7                     actuatorTest@i_1652:
  2192                           	opt stack 0
  2193  0000B7                     logRun@i:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x37
  2197  0000B7                     	ds	1
  2198  0000B8                     actuatorTest@i_1654:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x38
  2202  0000B8                     	ds	1
  2203  0000B9                     actuatorTest@i_1655:
  2204                           	opt stack 0
  2205  0000B9                     logRun@addr:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x39
  2209  0000B9                     	ds	1
  2210  0000BA                     actuatorTest@i_1658:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x3A
  2214  0000BA                     	ds	1
  2215  0000BB                     actuatorTest@i_1659:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x3B
  2219  0000BB                     	ds	1
  2220  0000BC                     actuatorTest@i_1661:
  2221                           	opt stack 0
  2222  0000BC                     printRTC@RTC_month:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x3C
  2226  0000BC                     	ds	1
  2227  0000BD                     actuatorTest@i_1662:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x3D
  2231  0000BD                     	ds	1
  2232  0000BE                     actuatorTest@i_1664:
  2233                           	opt stack 0
  2234  0000BE                     printRTC@month:
  2235                           	opt stack 0
  2236                           
  2237                           ; 4 bytes @ 0x3E
  2238  0000BE                     	ds	1
  2239  0000BF                     actuatorTest@i_1665:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x3F
  2243  0000BF                     	ds	1
  2244  0000C0                     actuatorTest@i_1668:
  2245                           	opt stack 0
  2246                           
  2247                           ; 1 bytes @ 0x40
  2248  0000C0                     	ds	1
  2249  0000C1                     actuatorTest@i_1669:
  2250                           	opt stack 0
  2251                           
  2252                           ; 1 bytes @ 0x41
  2253  0000C1                     	ds	1
  2254  0000C2                     actuatorTest@i_1671:
  2255                           	opt stack 0
  2256  0000C2                     printRTC@i:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x42
  2260  0000C2                     	ds	1
  2261  0000C3                     actuatorTest@i_1672:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x43
  2265  0000C3                     	ds	1
  2266  0000C4                     ??_UI:
  2267  0000C4                     actuatorTest@i:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x44
  2271  0000C4                     	ds	2
  2272  0000C6                     ??_Test:
  2273  0000C6                     _UI$2294:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x46
  2277  0000C6                     	ds	2
  2278  0000C8                     UI@i:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x48
  2282  0000C8                     	ds	1
  2283  0000C9                     UI@i_409:
  2284                           	opt stack 0
  2285                           
  2286                           ; 1 bytes @ 0x49
  2287  0000C9                     	ds	1
  2288  0000CA                     UI@i_412:
  2289                           	opt stack 0
  2290                           
  2291                           ; 1 bytes @ 0x4A
  2292  0000CA                     	ds	1
  2293  0000CB                     UI@i_413:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x4B
  2297  0000CB                     	ds	1
  2298  0000CC                     UI@i_431:
  2299                           	opt stack 0
  2300                           
  2301                           ; 1 bytes @ 0x4C
  2302  0000CC                     	ds	1
  2303  0000CD                     UI@i_432:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x4D
  2307  0000CD                     	ds	1
  2308  0000CE                     UI@i_435:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x4E
  2312  0000CE                     	ds	1
  2313  0000CF                     UI@i_436:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x4F
  2317  0000CF                     	ds	1
  2318  0000D0                     UI@i_439:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x50
  2322  0000D0                     	ds	1
  2323  0000D1                     UI@i_440:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x51
  2327  0000D1                     	ds	1
  2328  0000D2                     UI@i_443:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x52
  2332  0000D2                     	ds	1
  2333  0000D3                     UI@i_444:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x53
  2337  0000D3                     	ds	1
  2338  0000D4                     UI@i_447:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x54
  2342  0000D4                     	ds	1
  2343  0000D5                     UI@i_448:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x55
  2347  0000D5                     	ds	1
  2348  0000D6                     UI@month:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0x56
  2352  0000D6                     	ds	4
  2353  0000DA                     tblptru	equ	0xFF8
  2354                           tblptrh	equ	0xFF7
  2355                           tblptrl	equ	0xFF6
  2356                           tablat	equ	0xFF5
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           postdec1	equ	0xFE5
  2360                           fsr1l	equ	0xFE1
  2361                           
  2362                           ; 1 bytes @ 0x5A
  2363                           
  2364                           	psect	cstackCOMRAM
  2365  000001                     __pcstackCOMRAM:
  2366                           	opt stack 0
  2367  000001                     ??i2_I2C_Master_Wait:
  2368  000001                     ??i2_isdigit:
  2369  000001                     ?i2___wmul:
  2370                           	opt stack 0
  2371  000001                     ?i2___lwmod:
  2372                           	opt stack 0
  2373  000001                     i2lcdNibble@temp:
  2374                           	opt stack 0
  2375  000001                     i2EEPROM_read@address:
  2376                           	opt stack 0
  2377  000001                     i2___wmul@multiplier:
  2378                           	opt stack 0
  2379  000001                     i2___lwmod@dividend:
  2380                           	opt stack 0
  2381  000001                     i2strcpy@to:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x0
  2385  000001                     	ds	1
  2386  000002                     i2I2C_Master_Read@a:
  2387                           	opt stack 0
  2388  000002                     i2lcdNibble@data:
  2389                           	opt stack 0
  2390  000002                     i2_isdigit$1941:
  2391                           	opt stack 0
  2392  000002                     i2I2C_Master_Write@d:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x1
  2396  000002                     	ds	1
  2397  000003                     i2I2C_Master_Read@temp:
  2398                           	opt stack 0
  2399  000003                     i2lcdInst@data:
  2400                           	opt stack 0
  2401  000003                     i2putch@data:
  2402                           	opt stack 0
  2403  000003                     i2isdigit@c:
  2404                           	opt stack 0
  2405  000003                     i2___wmul@multiplicand:
  2406                           	opt stack 0
  2407  000003                     i2___lwmod@divisor:
  2408                           	opt stack 0
  2409  000003                     i2strcpy@from:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x2
  2413  000003                     	ds	1
  2414  000004                     i2getRTC@i:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x3
  2418  000004                     	ds	1
  2419  000005                     i2___lwmod@counter:
  2420                           	opt stack 0
  2421  000005                     i2___wmul@product:
  2422                           	opt stack 0
  2423  000005                     i2strcpy@cp:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x4
  2427  000005                     	ds	1
  2428  000006                     ?i2___lwdiv:
  2429                           	opt stack 0
  2430  000006                     i2___lwdiv@dividend:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x5
  2434  000006                     	ds	1
  2435  000007                     retrieveLog@logNum:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x6
  2439  000007                     	ds	1
  2440  000008                     i2___lwdiv@divisor:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x7
  2444  000008                     	ds	1
  2445  000009                     ??_retrieveLog:
  2446                           
  2447                           ; 1 bytes @ 0x8
  2448  000009                     	ds	1
  2449  00000A                     i2___lwdiv@quotient:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x9
  2453  00000A                     	ds	1
  2454  00000B                     retrieveLog@byte1:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0xA
  2458  00000B                     	ds	1
  2459  00000C                     retrieveLog@byte2:
  2460                           	opt stack 0
  2461  00000C                     i2___lwdiv@counter:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0xB
  2465  00000C                     	ds	1
  2466  00000D                     ?i2_printf:
  2467                           	opt stack 0
  2468  00000D                     retrieveLog@byte3:
  2469                           	opt stack 0
  2470  00000D                     i2printf@f:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0xC
  2474  00000D                     	ds	1
  2475  00000E                     retrieveLog@i:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0xD
  2479  00000E                     	ds	2
  2480  000010                     retrieveLog@addr:
  2481                           	opt stack 0
  2482                           
  2483                           ; 2 bytes @ 0xF
  2484  000010                     	ds	2
  2485  000012                     dispLogs@myLog:
  2486                           	opt stack 0
  2487                           
  2488                           ; 2 bytes @ 0x11
  2489  000012                     	ds	2
  2490  000014                     
  2491                           ; 1 bytes @ 0x13
  2492  000014                     	ds	5
  2493  000019                     ??i2_printf:
  2494                           
  2495                           ; 1 bytes @ 0x18
  2496  000019                     	ds	4
  2497  00001D                     i2printf@prec:
  2498                           	opt stack 0
  2499                           
  2500                           ; 1 bytes @ 0x1C
  2501  00001D                     	ds	1
  2502  00001E                     i2printf@cp:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x1D
  2506  00001E                     	ds	2
  2507  000020                     i2printf@ap:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x1F
  2511  000020                     	ds	2
  2512  000022                     i2printf@len:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0x21
  2516  000022                     	ds	2
  2517  000024                     i2printf@val:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x23
  2521  000024                     	ds	2
  2522  000026                     i2printf@flag:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x25
  2526  000026                     	ds	1
  2527  000027                     i2printf@c:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x26
  2531  000027                     	ds	1
  2532  000028                     i2printf@width:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x27
  2536  000028                     	ds	2
  2537  00002A                     ??_printSortTimer:
  2538  00002A                     ??i2_printRTC:
  2539  00002A                     ?_inputHandler:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x29
  2543  00002A                     	ds	2
  2544  00002C                     ??_inputHandler:
  2545                           
  2546                           ; 1 bytes @ 0x2B
  2547  00002C                     	ds	1
  2548  00002D                     printSortTimer@hour:
  2549                           	opt stack 0
  2550  00002D                     i2printRTC@INT_time:
  2551                           	opt stack 0
  2552                           
  2553                           ; 14 bytes @ 0x2C
  2554  00002D                     	ds	2
  2555  00002F                     printSortTimer@curTime:
  2556                           	opt stack 0
  2557                           
  2558                           ; 14 bytes @ 0x2E
  2559  00002F                     	ds	12
  2560  00003B                     i2printRTC@RTC_month:
  2561                           	opt stack 0
  2562                           
  2563                           ; 2 bytes @ 0x3A
  2564  00003B                     	ds	2
  2565  00003D                     printSortTimer@start_sec:
  2566                           	opt stack 0
  2567  00003D                     i2printRTC@month:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0x3C
  2571  00003D                     	ds	2
  2572  00003F                     printSortTimer@cur_sec:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x3E
  2576  00003F                     	ds	2
  2577  000041                     printSortTimer@min:
  2578                           	opt stack 0
  2579  000041                     i2printRTC@i:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x40
  2583  000041                     	ds	2
  2584  000043                     ??_updateMenu:
  2585  000043                     printSortTimer@sec:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0x42
  2589  000043                     	ds	2
  2590  000045                     _printSortTimer$2414:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x44
  2594  000045                     	ds	2
  2595  000047                     printSortTimer@timeDiff:
  2596                           	opt stack 0
  2597                           
  2598                           ; 2 bytes @ 0x46
  2599  000047                     	ds	2
  2600  000049                     printSortTimer@i:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x48
  2604  000049                     	ds	2
  2605  00004B                     ??_handler:
  2606                           
  2607                           ; 1 bytes @ 0x4A
  2608  00004B                     	ds	16
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           postdec1	equ	0xFE5
  2616                           fsr1l	equ	0xFE1
  2617                           
  2618 ;;
  2619 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2620 ;;
  2621 ;; *************** function _main *****************
  2622 ;; Defined at:
  2623 ;;		line 19 in file "main.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels required when called:   13
  2643 ;; This function calls:
  2644 ;;		_I2C_Master_Init
  2645 ;;		_Test
  2646 ;;		_UI
  2647 ;;		_initLCD
  2648 ;;		_initTime
  2649 ;;		_initUI
  2650 ;;		_logRun
  2651 ;;		_machineConfig
  2652 ;;		_sort
  2653 ;;		_stopSignals
  2654 ;; This function is called by:
  2655 ;;		Startup code after reset
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text0
  2660  00360C                     __ptext0:
  2661                           	opt stack 0
  2662  00360C                     _main:
  2663                           	opt stack 18
  2664                           
  2665                           ;main.c: 20: machineConfig();
  2666                           
  2667                           ;incstack = 0
  2668  00360C  EC9C  F01F         	call	_machineConfig	;wreg free
  2669                           
  2670                           ;main.c: 21: initLCD();
  2671  003610  ECE5  F020         	call	_initLCD	;wreg free
  2672                           
  2673                           ;main.c: 24: RTCflag = 0;
  2674  003614  0E00               	movlw	0
  2675  003616  0100               	movlb	0	; () banked
  2676  003618  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2677  00361A  0E00               	movlw	0
  2678  00361C  6FDE               	movwf	_RTCflag& (0+255),b
  2679                           
  2680                           ;main.c: 25: if(RTCflag){
  2681  00361E  0100               	movlb	0	; () banked
  2682  003620  51DE               	movf	_RTCflag& (0+255),w,b
  2683  003622  0100               	movlb	0	; () banked
  2684  003624  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2685  003626  B4D8               	btfsc	status,2,c
  2686  003628  D016               	goto	l8116
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2690  00362A  0E20               	movlw	32
  2691  00362C  0100               	movlb	0	; () banked
  2692  00362E  6F80               	movwf	initTime@m& (0+255),b
  2693  003630  0E15               	movlw	21
  2694  003632  0100               	movlb	0	; () banked
  2695  003634  6F81               	movwf	initTime@h& (0+255),b
  2696  003636  0E04               	movlw	4
  2697  003638  0100               	movlb	0	; () banked
  2698  00363A  6F82               	movwf	initTime@w& (0+255),b
  2699  00363C  0E15               	movlw	21
  2700  00363E  0100               	movlb	0	; () banked
  2701  003640  6F83               	movwf	initTime@DD& (0+255),b
  2702  003642  0E03               	movlw	3
  2703  003644  0100               	movlb	0	; () banked
  2704  003646  6F84               	movwf	initTime@MM& (0+255),b
  2705  003648  0E17               	movlw	23
  2706  00364A  0100               	movlb	0	; () banked
  2707  00364C  6F85               	movwf	initTime@YY& (0+255),b
  2708  00364E  0E42               	movlw	66
  2709  003650  EC7F  F023         	call	_initTime
  2710                           
  2711                           ;main.c: 27: }
  2712  003654  D00B               	goto	l8118
  2713  003656                     l8116:
  2714                           
  2715                           ;main.c: 28: else{
  2716                           ;main.c: 29: I2C_Master_Init(10000);
  2717  003656  0E10               	movlw	16
  2718  003658  0100               	movlb	0	; () banked
  2719  00365A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2720  00365C  0E27               	movlw	39
  2721  00365E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2722  003660  0E00               	movlw	0
  2723  003662  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2724  003664  0E00               	movlw	0
  2725  003666  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2726  003668  EC6C  F01F         	call	_I2C_Master_Init	;wreg free
  2727  00366C                     l8118:
  2728                           
  2729                           ;main.c: 30: }
  2730                           ;main.c: 32: initUI();
  2731  00366C  EC88  F022         	call	_initUI	;wreg free
  2732                           
  2733                           ;main.c: 33: first = 1;
  2734  003670  0E00               	movlw	0
  2735  003672  6E74               	movwf	_first+1,c
  2736  003674  0E01               	movlw	1
  2737  003676  6E73               	movwf	_first,c
  2738                           
  2739                           ;main.c: 44: switch(machine_state){
  2740                           
  2741                           ;main.c: 43: while(1){
  2742  003678  D017               	goto	l8140
  2743  00367A                     l8122:
  2744                           
  2745                           ;main.c: 46: UI();
  2746  00367A  EC65  F004         	call	_UI	;wreg free
  2747                           
  2748                           ;main.c: 47: break;
  2749  00367E  D014               	goto	l8140
  2750  003680                     l8124:
  2751                           
  2752                           ;main.c: 49: sort();
  2753  003680  EC6E  F023         	call	_sort	;wreg free
  2754                           
  2755                           ;main.c: 50: break;
  2756  003684  D011               	goto	l8140
  2757  003686                     l8126:
  2758                           
  2759                           ;main.c: 52: stopSignals();
  2760  003686  ECAB  F023         	call	_stopSignals	;wreg free
  2761                           
  2762                           ;main.c: 53: logRun();
  2763  00368A  ECFB  F017         	call	_logRun	;wreg free
  2764                           
  2765                           ;main.c: 54: first = 1;
  2766  00368E  0E00               	movlw	0
  2767  003690  6E74               	movwf	_first+1,c
  2768  003692  0E01               	movlw	1
  2769  003694  6E73               	movwf	_first,c
  2770                           
  2771                           ;main.c: 55: UI();
  2772  003696  EC65  F004         	call	_UI	;wreg free
  2773                           
  2774                           ;main.c: 56: break;
  2775  00369A  D006               	goto	l8140
  2776  00369C                     l8134:
  2777                           
  2778                           ;main.c: 58: Test();
  2779  00369C  EC26  F019         	call	_Test	;wreg free
  2780                           
  2781                           ;main.c: 59: break;
  2782  0036A0  D003               	goto	l8140
  2783  0036A2                     l8136:
  2784                           
  2785                           ;main.c: 61: stopSignals();
  2786  0036A2  ECAB  F023         	call	_stopSignals	;wreg free
  2787  0036A6                     l487:
  2788  0036A6  D7FF               	goto	l487
  2789  0036A8                     l8140:
  2790  0036A8  0100               	movlb	0	; () banked
  2791  0036AA  51FC               	movf	_machine_state& (0+255),w,b
  2792                           
  2793                           ; Switch size 1, requested type "space"
  2794                           ; Number of cases is 5, Range of values is 0 to 4
  2795                           ; switch strategies available:
  2796                           ; Name         Instructions Cycles
  2797                           ; simple_byte           16     9 (average)
  2798                           ;	Chosen strategy is simple_byte
  2799  0036AC  0A00               	xorlw	0	; case 0
  2800  0036AE  B4D8               	btfsc	status,2,c
  2801  0036B0  D7E4               	goto	l8122
  2802  0036B2  0A01               	xorlw	1	; case 1
  2803  0036B4  B4D8               	btfsc	status,2,c
  2804  0036B6  D7E4               	goto	l8124
  2805  0036B8  0A03               	xorlw	3	; case 2
  2806  0036BA  B4D8               	btfsc	status,2,c
  2807  0036BC  D7E4               	goto	l8126
  2808  0036BE  0A01               	xorlw	1	; case 3
  2809  0036C0  B4D8               	btfsc	status,2,c
  2810  0036C2  D7EC               	goto	l8134
  2811  0036C4  0A07               	xorlw	7	; case 4
  2812  0036C6  B4D8               	btfsc	status,2,c
  2813  0036C8  D7EC               	goto	l8136
  2814                           
  2815                           ; BSR set to: 0
  2816                           
  2817                           ; BSR set to: 0
  2818  0036CA  D7EE               	goto	l8140
  2819  0036CC                     __end_of_main:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           postinc0	equ	0xFEE
  2826                           wreg	equ	0xFE8
  2827                           postdec1	equ	0xFE5
  2828                           fsr1l	equ	0xFE1
  2829                           status	equ	0xFD8
  2830                           
  2831 ;; *************** function _stopSignals *****************
  2832 ;; Defined at:
  2833 ;;		line 70 in file "main.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;Total ram usage:        0 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    7
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_main
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text1
  2862  004756                     __ptext1:
  2863                           	opt stack 0
  2864  004756                     _stopSignals:
  2865                           	opt stack 23
  2866                           
  2867                           ;main.c: 71: LATA = 0x00;
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;incstack = 0
  2871  004756  0E00               	movlw	0
  2872  004758  6E89               	movwf	3977,c	;volatile
  2873                           
  2874                           ;main.c: 72: LATB = 0x00;
  2875  00475A  0E00               	movlw	0
  2876  00475C  6E8A               	movwf	3978,c	;volatile
  2877                           
  2878                           ;main.c: 73: LATC = 0x00;
  2879  00475E  0E00               	movlw	0
  2880  004760  6E8B               	movwf	3979,c	;volatile
  2881                           
  2882                           ;main.c: 74: LATD = 0x00;
  2883  004762  0E00               	movlw	0
  2884  004764  6E8C               	movwf	3980,c	;volatile
  2885                           
  2886                           ;main.c: 75: LATE = 0x00;
  2887  004766  0E00               	movlw	0
  2888  004768  6E8D               	movwf	3981,c	;volatile
  2889  00476A  0012               	return		;funcret
  2890  00476C                     __end_of_stopSignals:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           postinc0	equ	0xFEE
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1l	equ	0xFE1
  2900                           status	equ	0xFD8
  2901                           
  2902 ;; *************** function _sort *****************
  2903 ;; Defined at:
  2904 ;;		line 55 in file "sort.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;Total ram usage:        0 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:   12
  2925 ;; This function calls:
  2926 ;;		_Distribution
  2927 ;;		_ID
  2928 ;;		_Loading
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text2
  2935  0046DC                     __ptext2:
  2936                           	opt stack 0
  2937  0046DC                     _sort:
  2938                           	opt stack 18
  2939                           
  2940                           ;sort.c: 56: if(machine_state == Sorting_state){
  2941                           
  2942                           ;incstack = 0
  2943  0046DC  0100               	movlb	0	; () banked
  2944  0046DE  05FC               	decf	_machine_state& (0+255),w,b
  2945  0046E0  B4D8               	btfsc	status,2,c
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;sort.c: 57: Loading();
  2949  0046E2  ECB6  F016         	call	_Loading	;wreg free
  2950                           
  2951                           ;sort.c: 58: }
  2952                           ;sort.c: 59: if(machine_state == Sorting_state){
  2953  0046E6  0100               	movlb	0	; () banked
  2954  0046E8  05FC               	decf	_machine_state& (0+255),w,b
  2955  0046EA  B4D8               	btfsc	status,2,c
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;sort.c: 60: ID();
  2959  0046EC  EC05  F016         	call	_ID	;wreg free
  2960                           
  2961                           ;sort.c: 61: }
  2962                           ;sort.c: 62: if(machine_state == Sorting_state){
  2963  0046F0  0100               	movlb	0	; () banked
  2964  0046F2  05FC               	decf	_machine_state& (0+255),w,b
  2965  0046F4  A4D8               	btfss	status,2,c
  2966  0046F6  0012               	return	
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;sort.c: 63: Distribution();
  2970  0046F8  EC5B  F017         	call	_Distribution	;wreg free
  2971  0046FC  0012               	return	
  2972  0046FE                     __end_of_sort:
  2973                           	opt stack 0
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _Loading *****************
  2985 ;; Defined at:
  2986 ;;		line 67 in file "sort.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  i               2   54[BANK0 ] int 
  2991 ;;  addr            2   51[BANK0 ] unsigned short 
  2992 ;;  byte1           1   53[BANK0 ] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;Total ram usage:        7 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:   11
  3009 ;; This function calls:
  3010 ;;		_EEPROM_read
  3011 ;;		_EEPROM_write
  3012 ;;		_delay_ms
  3013 ;;		_getIR
  3014 ;;		_initGlobalVars
  3015 ;;		_initServos
  3016 ;;		_initSortTimer
  3017 ;;		_lcdInst
  3018 ;; This function is called by:
  3019 ;;		_sort
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text3
  3024  002D6C                     __ptext3:
  3025                           	opt stack 0
  3026  002D6C                     _Loading:
  3027                           	opt stack 18
  3028                           
  3029                           ;sort.c: 68: if(first){
  3030                           
  3031                           ;incstack = 0
  3032  002D6C  5073               	movf	_first,w,c
  3033  002D6E  1074               	iorwf	_first+1,w,c
  3034  002D70  B4D8               	btfsc	status,2,c
  3035  002D72  D066               	goto	l6404
  3036                           
  3037                           ;sort.c: 69: initGlobalVars();
  3038  002D74  ECD3  F01E         	call	_initGlobalVars	;wreg free
  3039                           
  3040                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3041  002D78  0E01               	movlw	1
  3042  002D7A  ECDC  F023         	call	_lcdInst
  3043  002D7E  0E68               	movlw	104
  3044  002D80  0100               	movlb	0	; () banked
  3045  002D82  6FB1               	movwf	??_Loading& (0+255),b
  3046  002D84  0EE4               	movlw	228
  3047  002D86                     u7117:
  3048  002D86  2EE8               	decfsz	wreg,f,c
  3049  002D88  D7FE               	bra	u7117
  3050  002D8A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3051  002D8C  D7FC               	bra	u7117
  3052  002D8E  F000               	nop	
  3053                           
  3054                           ;sort.c: 71: initSortTimer();
  3055  002D90  EC23  F01C         	call	_initSortTimer	;wreg free
  3056                           
  3057                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3058  002D94  8A8B               	bsf	3979,5,c	;volatile
  3059                           
  3060                           ;sort.c: 77: sel = EEPROM_read(0);
  3061  002D96  0E00               	movlw	0
  3062  002D98  0100               	movlb	0	; () banked
  3063  002D9A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3064  002D9C  0E00               	movlw	0
  3065  002D9E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3066  002DA0  EC9F  F023         	call	_EEPROM_read	;wreg free
  3067  002DA4  0100               	movlb	0	; () banked
  3068  002DA6  6FFD               	movwf	_sel& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3072  002DA8  0100               	movlb	0	; () banked
  3073  002DAA  51FD               	movf	_sel& (0+255),w,b
  3074  002DAC  0D0B               	mullw	11
  3075  002DAE  0E01               	movlw	1
  3076  002DB0  24F3               	addwf	prodl,w,c
  3077  002DB2  0100               	movlb	0	; () banked
  3078  002DB4  6FB3               	movwf	Loading@addr& (0+255),b
  3079  002DB6  0E00               	movlw	0
  3080  002DB8  20F4               	addwfc	prodh,w,c
  3081  002DBA  0100               	movlb	0	; () banked
  3082  002DBC  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3086  002DBE  0E7F               	movlw	127
  3087  002DC0  0100               	movlb	0	; () banked
  3088  002DC2  6FB5               	movwf	Loading@byte1& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3092  002DC4  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3093  002DC8  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3094  002DCC  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3095  002DD0  EC29  F01A         	call	_EEPROM_write	;wreg free
  3096                           
  3097                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3098  002DD4  9A89               	bcf	3977,5,c	;volatile
  3099                           
  3100                           ;sort.c: 84: for(int i=0; i<46; i++){
  3101  002DD6  0E00               	movlw	0
  3102  002DD8  0100               	movlb	0	; () banked
  3103  002DDA  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3104  002DDC  0E00               	movlw	0
  3105  002DDE  6FB6               	movwf	Loading@i& (0+255),b
  3106                           
  3107                           ; BSR set to: 0
  3108  002DE0  0100               	movlb	0	; () banked
  3109  002DE2  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3110  002DE4  D008               	goto	l6394
  3111  002DE6  0100               	movlb	0	; () banked
  3112  002DE8  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3113  002DEA  E126               	bnz	l728
  3114  002DEC  0E2E               	movlw	46
  3115  002DEE  0100               	movlb	0	; () banked
  3116  002DF0  5DB6               	subwf	Loading@i& (0+255),w,b
  3117  002DF2  B0D8               	btfsc	status,0,c
  3118  002DF4  D021               	goto	l728
  3119  002DF6                     l6394:
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3123  002DF6  BA89               	btfsc	3977,5,c	;volatile
  3124  002DF8  D004               	goto	u4840
  3125  002DFA  0100               	movlb	0	; () banked
  3126  002DFC  6BB1               	clrf	??_Loading& (0+255),b
  3127  002DFE  2BB1               	incf	??_Loading& (0+255),f,b
  3128  002E00  D002               	goto	u4858
  3129  002E02                     u4840:
  3130  002E02  0100               	movlb	0	; () banked
  3131  002E04  6BB1               	clrf	??_Loading& (0+255),b
  3132  002E06                     u4858:
  3133  002E06  0100               	movlb	0	; () banked
  3134  002E08  3BB1               	swapf	??_Loading& (0+255),f,b
  3135  002E0A  47B1               	rlncf	??_Loading& (0+255),f,b
  3136  002E0C  5089               	movf	3977,w,c	;volatile
  3137  002E0E  0100               	movlb	0	; () banked
  3138  002E10  19B1               	xorwf	??_Loading& (0+255),w,b
  3139  002E12  0BDF               	andlw	-33
  3140  002E14  19B1               	xorwf	??_Loading& (0+255),w,b
  3141  002E16  6E89               	movwf	3977,c	;volatile
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;sort.c: 86: delay_ms(45-i);
  3145  002E18  0100               	movlb	0	; () banked
  3146  002E1A  51B6               	movf	Loading@i& (0+255),w,b
  3147  002E1C  0800               	sublw	0
  3148  002E1E  0F2D               	addlw	45
  3149  002E20  EC0E  F023         	call	_delay_ms
  3150  002E24  0100               	movlb	0	; () banked
  3151  002E26  4BB6               	infsnz	Loading@i& (0+255),f,b
  3152  002E28  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3153                           
  3154                           ; BSR set to: 0
  3155  002E2A  0100               	movlb	0	; () banked
  3156  002E2C  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3157  002E2E  D7E3               	goto	l6394
  3158  002E30  0100               	movlb	0	; () banked
  3159  002E32  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3160  002E34  E101               	bnz	u4860
  3161  002E36  D7DA               	goto	L1
  3162  002E38                     u4860:
  3163  002E38                     l728:
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;sort.c: 87: }
  3167                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3168  002E38  8A89               	bsf	3977,5,c	;volatile
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 91: initServos();
  3172  002E3A  ECCA  F01F         	call	_initServos	;wreg free
  3173                           
  3174                           ;sort.c: 92: }
  3175  002E3E  0012               	return	
  3176  002E40                     l6404:
  3177                           
  3178                           ;sort.c: 93: else{
  3179                           ;sort.c: 96: if(!f_loadingNewCan){
  3180  002E40  0100               	movlb	0	; () banked
  3181  002E42  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3182  002E44  0100               	movlb	0	; () banked
  3183  002E46  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3184  002E48  A4D8               	btfss	status,2,c
  3185  002E4A  D017               	goto	l6420
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;sort.c: 98: getIR();
  3189  002E4C  EC72  F020         	call	_getIR	;wreg free
  3190                           
  3191                           ;sort.c: 100: if(!f_loadingNewCan){
  3192  002E50  0100               	movlb	0	; () banked
  3193  002E52  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3194  002E54  0100               	movlb	0	; () banked
  3195  002E56  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3196  002E58  B4D8               	btfsc	status,2,c
  3197  002E5A  0012               	return	
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sort.c: 104: else{
  3201                           ;sort.c: 105: count_total++;
  3202                           
  3203                           ; BSR set to: 0
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 102: }
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 101: return;
  3210  002E5C  0100               	movlb	0	; () banked
  3211  002E5E  4BFE               	infsnz	_count_total& (0+255),f,b
  3212  002E60  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 106: if(count_total == 12){
  3216  002E62  0E0C               	movlw	12
  3217  002E64  0100               	movlb	0	; () banked
  3218  002E66  19FE               	xorwf	_count_total& (0+255),w,b
  3219  002E68  0100               	movlb	0	; () banked
  3220  002E6A  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3221  002E6C  A4D8               	btfss	status,2,c
  3222  002E6E  0012               	return	
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;sort.c: 107: f_lastCan = 1;
  3226  002E70  0E00               	movlw	0
  3227  002E72  6E72               	movwf	_f_lastCan+1,c
  3228  002E74  0E01               	movlw	1
  3229  002E76  6E71               	movwf	_f_lastCan,c
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;sort.c: 108: }
  3233                           ;sort.c: 109: }
  3234                           ;sort.c: 110: }
  3235                           
  3236                           ; BSR set to: 0
  3237  002E78  0012               	return	
  3238  002E7A                     l6420:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 113: else if(f_ID_receive){
  3242  002E7A  506B               	movf	_f_ID_receive,w,c
  3243  002E7C  106C               	iorwf	_f_ID_receive+1,w,c
  3244  002E7E  B4D8               	btfsc	status,2,c
  3245  002E80  0012               	return	
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;sort.c: 114: f_loadingNewCan = 0;
  3249  002E82  0E00               	movlw	0
  3250  002E84  0100               	movlb	0	; () banked
  3251  002E86  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3252  002E88  0E00               	movlw	0
  3253  002E8A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3257  002E8C  8889               	bsf	3977,4,c	;volatile
  3258                           
  3259                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3260  002E8E  0E00               	movlw	0
  3261  002E90  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3262  002E92  0E01               	movlw	1
  3263  002E94  6E6D               	movwf	_f_can_coming_to_ID,c
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3267  002E96  0E0D               	movlw	13
  3268  002E98  0100               	movlb	0	; () banked
  3269  002E9A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3270  002E9C  0E2D               	movlw	45
  3271  002E9E  0100               	movlb	0	; () banked
  3272  002EA0  6FB1               	movwf	??_Loading& (0+255),b
  3273  002EA2  0ED7               	movlw	215
  3274  002EA4                     u7127:
  3275  002EA4  2EE8               	decfsz	wreg,f,c
  3276  002EA6  D7FE               	bra	u7127
  3277  002EA8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3278  002EAA  D7FC               	bra	u7127
  3279  002EAC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3280  002EAE  D7FA               	bra	u7127
  3281  002EB0  D000               	nop2	
  3282                           
  3283                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3284  002EB2  9889               	bcf	3977,4,c	;volatile
  3285  002EB4  0012               	return	
  3286  002EB6                     __end_of_Loading:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           postdec1	equ	0xFE5
  3297                           fsr1l	equ	0xFE1
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _initSortTimer *****************
  3301 ;; Defined at:
  3302 ;;		line 243 in file "sort.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  i               2    8[BANK0 ] int 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;Total ram usage:        5 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:   10
  3323 ;; This function calls:
  3324 ;;		_getRTC
  3325 ;; This function is called by:
  3326 ;;		_Loading
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text4
  3331  003846                     __ptext4:
  3332                           	opt stack 0
  3333  003846                     _initSortTimer:
  3334                           	opt stack 18
  3335                           
  3336                           ;sort.c: 245: getRTC();
  3337                           
  3338                           ;incstack = 0
  3339  003846  EC9E  F01D         	call	_getRTC	;wreg free
  3340                           
  3341                           ;sort.c: 246: for(int i = 0; i < 7; i++){
  3342  00384A  0E00               	movlw	0
  3343  00384C  0100               	movlb	0	; () banked
  3344  00384E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3345  003850  0E00               	movlw	0
  3346  003852  6F88               	movwf	initSortTimer@i& (0+255),b
  3347  003854                     l6000:
  3348                           
  3349                           ; BSR set to: 0
  3350  003854  0100               	movlb	0	; () banked
  3351  003856  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3352  003858  D008               	goto	l6004
  3353  00385A  0100               	movlb	0	; () banked
  3354  00385C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3355  00385E  E140               	bnz	l6010
  3356  003860  0E07               	movlw	7
  3357  003862  0100               	movlb	0	; () banked
  3358  003864  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3359  003866  B0D8               	btfsc	status,0,c
  3360  003868  D03B               	goto	l6010
  3361  00386A                     l6004:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;sort.c: 247: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3365  00386A  0E24               	movlw	low _time
  3366  00386C  0100               	movlb	0	; () banked
  3367  00386E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3368  003870  6ED9               	movwf	fsr2l,c
  3369  003872  0E01               	movlw	high _time
  3370  003874  0100               	movlb	0	; () banked
  3371  003876  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3372  003878  6EDA               	movwf	fsr2h,c
  3373  00387A  50DF               	movf	indf2,w,c
  3374  00387C  0100               	movlb	0	; () banked
  3375  00387E  6F85               	movwf	??_initSortTimer& (0+255),b
  3376  003880  0100               	movlb	0	; () banked
  3377  003882  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3378  003884  0E0F               	movlw	15
  3379  003886  1785               	andwf	??_initSortTimer& (0+255),f,b
  3380  003888  0E0F               	movlw	15
  3381  00388A  0100               	movlb	0	; () banked
  3382  00388C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3383  00388E  0100               	movlb	0	; () banked
  3384  003890  5185               	movf	??_initSortTimer& (0+255),w,b
  3385  003892  0D0A               	mullw	10
  3386  003894  0E24               	movlw	low _time
  3387  003896  0100               	movlb	0	; () banked
  3388  003898  2588               	addwf	initSortTimer@i& (0+255),w,b
  3389  00389A  6ED9               	movwf	fsr2l,c
  3390  00389C  0E01               	movlw	high _time
  3391  00389E  0100               	movlb	0	; () banked
  3392  0038A0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3393  0038A2  6EDA               	movwf	fsr2h,c
  3394  0038A4  50DF               	movf	indf2,w,c
  3395  0038A6  0B0F               	andlw	15
  3396  0038A8  0100               	movlb	0	; () banked
  3397  0038AA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3398  0038AC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3399  0038AE  50F3               	movf	prodl,w,c
  3400  0038B0  0100               	movlb	0	; () banked
  3401  0038B2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3402  0038B4  50F4               	movf	prodh,w,c
  3403  0038B6  0100               	movlb	0	; () banked
  3404  0038B8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3405  0038BA  90D8               	bcf	status,0,c
  3406  0038BC  0100               	movlb	0	; () banked
  3407  0038BE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3408  0038C0  6ED9               	movwf	fsr2l,c
  3409  0038C2  0100               	movlb	0	; () banked
  3410  0038C4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3411  0038C6  6EDA               	movwf	fsr2h,c
  3412  0038C8  0E0E               	movlw	low _startTime
  3413  0038CA  26D9               	addwf	fsr2l,f,c
  3414  0038CC  0E01               	movlw	high _startTime
  3415  0038CE  22DA               	addwfc	fsr2h,f,c
  3416  0038D0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3417  0038D4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3418                           
  3419                           ; BSR set to: 0
  3420  0038D8  0100               	movlb	0	; () banked
  3421  0038DA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3422  0038DC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3423  0038DE  D7BA               	goto	l6000
  3424  0038E0                     l6010:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;sort.c: 248: }
  3428                           ;sort.c: 250: T0CON = 0b00010111;
  3429  0038E0  0E17               	movlw	23
  3430  0038E2  6ED5               	movwf	4053,c	;volatile
  3431                           
  3432                           ;sort.c: 259: TMR0H = 0b10000101;
  3433  0038E4  0E85               	movlw	133
  3434  0038E6  6ED7               	movwf	4055,c	;volatile
  3435                           
  3436                           ;sort.c: 260: TMR0L = 0b11101110;
  3437  0038E8  0EEE               	movlw	238
  3438  0038EA  6ED6               	movwf	4054,c	;volatile
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;sort.c: 261: TMR0ON = 1;
  3442  0038EC  8ED5               	bsf	4053,7,c	;volatile
  3443                           
  3444                           ; BSR set to: 0
  3445  0038EE  0012               	return		;funcret
  3446  0038F0                     __end_of_initSortTimer:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           prodh	equ	0xFF4
  3453                           prodl	equ	0xFF3
  3454                           postinc0	equ	0xFEE
  3455                           wreg	equ	0xFE8
  3456                           postdec1	equ	0xFE5
  3457                           fsr1l	equ	0xFE1
  3458                           indf2	equ	0xFDF
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function _initGlobalVars *****************
  3466 ;; Defined at:
  3467 ;;		line 224 in file "sort.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;		None
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;		None
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;Total ram usage:        0 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    7
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_Loading
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text5
  3496  003DA6                     __ptext5:
  3497                           	opt stack 0
  3498  003DA6                     _initGlobalVars:
  3499                           	opt stack 21
  3500                           
  3501                           ;sort.c: 226: first = 0;
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;incstack = 0
  3505  003DA6  0E00               	movlw	0
  3506  003DA8  6E74               	movwf	_first+1,c
  3507  003DAA  0E00               	movlw	0
  3508  003DAC  6E73               	movwf	_first,c
  3509                           
  3510                           ;sort.c: 229: f_loadingNewCan = 0;
  3511  003DAE  0E00               	movlw	0
  3512  003DB0  0100               	movlb	0	; () banked
  3513  003DB2  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3514  003DB4  0E00               	movlw	0
  3515  003DB6  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3516                           
  3517                           ;sort.c: 230: f_lastCan = 0;
  3518  003DB8  0E00               	movlw	0
  3519  003DBA  6E72               	movwf	_f_lastCan+1,c
  3520  003DBC  0E00               	movlw	0
  3521  003DBE  6E71               	movwf	_f_lastCan,c
  3522                           
  3523                           ;sort.c: 231: f_ID_receive = 1;
  3524  003DC0  0E00               	movlw	0
  3525  003DC2  6E6C               	movwf	_f_ID_receive+1,c
  3526  003DC4  0E01               	movlw	1
  3527  003DC6  6E6B               	movwf	_f_ID_receive,c
  3528                           
  3529                           ;sort.c: 232: f_can_coming_to_ID = 0;
  3530  003DC8  0E00               	movlw	0
  3531  003DCA  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3532  003DCC  0E00               	movlw	0
  3533  003DCE  6E6D               	movwf	_f_can_coming_to_ID,c
  3534                           
  3535                           ;sort.c: 233: f_can_coming_to_distribution = 0;
  3536  003DD0  0E00               	movlw	0
  3537  003DD2  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3538  003DD4  0E00               	movlw	0
  3539  003DD6  6E6F               	movwf	_f_can_coming_to_distribution,c
  3540                           
  3541                           ;sort.c: 234: f_can_distributed = 0;
  3542  003DD8  0E00               	movlw	0
  3543  003DDA  0101               	movlb	1	; () banked
  3544  003DDC  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3545  003DDE  0E00               	movlw	0
  3546  003DE0  6F2D               	movwf	_f_can_distributed& (0+255),b
  3547                           
  3548                           ;sort.c: 237: count_total = 0;
  3549  003DE2  0E00               	movlw	0
  3550  003DE4  0100               	movlb	0	; () banked
  3551  003DE6  6FFF               	movwf	(_count_total+1)& (0+255),b
  3552  003DE8  0E00               	movlw	0
  3553  003DEA  6FFE               	movwf	_count_total& (0+255),b
  3554                           
  3555                           ;sort.c: 238: count_pop_no_tab = 0;
  3556  003DEC  0E00               	movlw	0
  3557  003DEE  6E62               	movwf	_count_pop_no_tab+1,c
  3558  003DF0  0E00               	movlw	0
  3559  003DF2  6E61               	movwf	_count_pop_no_tab,c
  3560                           
  3561                           ;sort.c: 239: count_pop_w_tab = 0;
  3562  003DF4  0E00               	movlw	0
  3563  003DF6  6E64               	movwf	_count_pop_w_tab+1,c
  3564  003DF8  0E00               	movlw	0
  3565  003DFA  6E63               	movwf	_count_pop_w_tab,c
  3566                           
  3567                           ;sort.c: 240: count_can_w_lab = 0;
  3568  003DFC  0E00               	movlw	0
  3569  003DFE  6E60               	movwf	_count_can_w_lab+1,c
  3570  003E00  0E00               	movlw	0
  3571  003E02  6E5F               	movwf	_count_can_w_lab,c
  3572                           
  3573                           ;sort.c: 241: count_can_no_lab = 0;
  3574  003E04  0E00               	movlw	0
  3575  003E06  6E5E               	movwf	_count_can_no_lab+1,c
  3576  003E08  0E00               	movlw	0
  3577  003E0A  6E5D               	movwf	_count_can_no_lab,c
  3578                           
  3579                           ; BSR set to: 0
  3580  003E0C  0012               	return		;funcret
  3581  003E0E                     __end_of_initGlobalVars:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postdec1	equ	0xFE5
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600 ;; *************** function _getIR *****************
  3601 ;; Defined at:
  3602 ;;		line 300 in file "sort.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;Total ram usage:        2 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    9
  3623 ;; This function calls:
  3624 ;;		_readIR
  3625 ;; This function is called by:
  3626 ;;		_Loading
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text6
  3631  0040E4                     __ptext6:
  3632                           	opt stack 0
  3633  0040E4                     _getIR:
  3634                           	opt stack 19
  3635                           
  3636                           ;sort.c: 301: readIR();
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;incstack = 0
  3640  0040E4  EC99  F020         	call	_readIR	;wreg free
  3641                           
  3642                           ;sort.c: 302: if(IR_signal==1){
  3643  0040E8  0100               	movlb	0	; () banked
  3644  0040EA  05DA               	decf	_IR_signal& (0+255),w,b
  3645  0040EC  0100               	movlb	0	; () banked
  3646  0040EE  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3647  0040F0  A4D8               	btfss	status,2,c
  3648  0040F2  0012               	return	
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;sort.c: 303: _delay((unsigned long)((100)*(32000000/4000.0)));
  3652  0040F4  0E05               	movlw	5
  3653  0040F6  0100               	movlb	0	; () banked
  3654  0040F8  6F87               	movwf	(??_getIR+1)& (0+255),b
  3655  0040FA  0E0F               	movlw	15
  3656  0040FC  0100               	movlb	0	; () banked
  3657  0040FE  6F86               	movwf	??_getIR& (0+255),b
  3658  004100  0EF1               	movlw	241
  3659  004102                     u7137:
  3660  004102  2EE8               	decfsz	wreg,f,c
  3661  004104  D7FE               	bra	u7137
  3662  004106  2F86               	decfsz	??_getIR& (0+255),f,b
  3663  004108  D7FC               	bra	u7137
  3664  00410A  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3665  00410C  D7FA               	bra	u7137
  3666                           
  3667                           ;sort.c: 304: if(IR_signal==1){
  3668  00410E  0100               	movlb	0	; () banked
  3669  004110  05DA               	decf	_IR_signal& (0+255),w,b
  3670  004112  0100               	movlb	0	; () banked
  3671  004114  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3672  004116  A4D8               	btfss	status,2,c
  3673  004118  D006               	goto	l6098
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;sort.c: 305: f_loadingNewCan = 1;
  3677  00411A  0E00               	movlw	0
  3678  00411C  0100               	movlb	0	; () banked
  3679  00411E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3680  004120  0E01               	movlw	1
  3681  004122  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3682                           
  3683                           ;sort.c: 306: }
  3684  004124  0012               	return	
  3685  004126                     l6098:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 307: else{
  3689                           ;sort.c: 308: f_loadingNewCan = 0;
  3690  004126  0E00               	movlw	0
  3691  004128  0100               	movlb	0	; () banked
  3692  00412A  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3693  00412C  0E00               	movlw	0
  3694  00412E  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697  004130  0012               	return	
  3698  004132                     __end_of_getIR:
  3699                           	opt stack 0
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postdec1	equ	0xFE5
  3709                           fsr1l	equ	0xFE1
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _readIR *****************
  3718 ;; Defined at:
  3719 ;;		line 23 in file "ADCFunctionality.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  res             2    4[BANK0 ] int 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;Total ram usage:        4 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    8
  3740 ;; This function calls:
  3741 ;;		_readADC
  3742 ;; This function is called by:
  3743 ;;		_getIR
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text7
  3748  004132                     __ptext7:
  3749                           	opt stack 0
  3750  004132                     _readIR:
  3751                           	opt stack 19
  3752                           
  3753                           ;ADCFunctionality.c: 24: readADC(0);
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;incstack = 0
  3757  004132  0E00               	movlw	0
  3758  004134  ECE3  F022         	call	_readADC
  3759                           
  3760                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3761  004138  50C3               	movf	4035,w,c	;volatile
  3762  00413A  CFC4 F082          	movff	4036,??_readIR	;volatile
  3763  00413E  0100               	movlb	0	; () banked
  3764  004140  6B83               	clrf	(??_readIR+1)& (0+255),b
  3765  004142  C082  F083         	movff	??_readIR,??_readIR+1
  3766  004146  0100               	movlb	0	; () banked
  3767  004148  6B82               	clrf	??_readIR& (0+255),b
  3768  00414A  0100               	movlb	0	; () banked
  3769  00414C  1182               	iorwf	??_readIR& (0+255),w,b
  3770  00414E  0100               	movlb	0	; () banked
  3771  004150  6F84               	movwf	readIR@res& (0+255),b
  3772  004152  0100               	movlb	0	; () banked
  3773  004154  5183               	movf	(??_readIR+1)& (0+255),w,b
  3774  004156  0100               	movlb	0	; () banked
  3775  004158  6F85               	movwf	(readIR@res+1)& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3779  00415A  0100               	movlb	0	; () banked
  3780  00415C  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3781  00415E  D00A               	goto	u3810
  3782  004160  0E85               	movlw	133
  3783  004162  0100               	movlb	0	; () banked
  3784  004164  5D84               	subwf	readIR@res& (0+255),w,b
  3785  004166  0E03               	movlw	3
  3786  004168  0100               	movlb	0	; () banked
  3787  00416A  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3788  00416C  A0D8               	btfss	status,0,c
  3789  00416E  D002               	goto	u3810
  3790  004170  0E01               	movlw	1
  3791  004172  D001               	goto	u3820
  3792  004174                     u3810:
  3793  004174  0E00               	movlw	0
  3794  004176                     u3820:
  3795  004176  0100               	movlb	0	; () banked
  3796  004178  6FDA               	movwf	_IR_signal& (0+255),b
  3797  00417A  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3798                           
  3799                           ; BSR set to: 0
  3800  00417C  0012               	return		;funcret
  3801  00417E                     __end_of_readIR:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodh	equ	0xFF4
  3808                           prodl	equ	0xFF3
  3809                           postinc0	equ	0xFEE
  3810                           wreg	equ	0xFE8
  3811                           postdec1	equ	0xFE5
  3812                           fsr1l	equ	0xFE1
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           postdec2	equ	0xFDD
  3816                           fsr2h	equ	0xFDA
  3817                           fsr2l	equ	0xFD9
  3818                           status	equ	0xFD8
  3819                           
  3820 ;; *************** function _delay_ms *****************
  3821 ;; Defined at:
  3822 ;;		line 325 in file "sort.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  milliseconds    1    wreg     unsigned char 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;Total ram usage:        2 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    7
  3843 ;; This function calls:
  3844 ;;		Nothing
  3845 ;; This function is called by:
  3846 ;;		_Loading
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text8
  3851  00461C                     __ptext8:
  3852                           	opt stack 0
  3853  00461C                     _delay_ms:
  3854                           	opt stack 21
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;incstack = 0
  3858                           ;delay_ms@milliseconds stored from wreg
  3859  00461C  0100               	movlb	0	; () banked
  3860  00461E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3861                           
  3862                           ;sort.c: 326: while(milliseconds > 0)
  3863  004620  D00B               	goto	l6072
  3864  004622                     l6068:
  3865                           
  3866                           ;sort.c: 327: {
  3867                           ;sort.c: 328: milliseconds--;
  3868  004622  0100               	movlb	0	; () banked
  3869  004624  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;sort.c: 329: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3873  004626  0E0B               	movlw	11
  3874  004628  0100               	movlb	0	; () banked
  3875  00462A  6F80               	movwf	??_delay_ms& (0+255),b
  3876  00462C  0E47               	movlw	71
  3877  00462E                     u7147:
  3878  00462E  2EE8               	decfsz	wreg,f,c
  3879  004630  D7FE               	bra	u7147
  3880  004632  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3881  004634  D7FC               	bra	u7147
  3882  004636  D000               	nop2	
  3883  004638                     l6072:
  3884  004638  0100               	movlb	0	; () banked
  3885  00463A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3886  00463C  0100               	movlb	0	; () banked
  3887  00463E  B4D8               	btfsc	status,2,c
  3888  004640  0012               	return	
  3889  004642  D7EF               	goto	l6068
  3890  004644                     __end_of_delay_ms:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postdec1	equ	0xFE5
  3901                           fsr1l	equ	0xFE1
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _ID *****************
  3910 ;; Defined at:
  3911 ;;		line 122 in file "sort.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  i               2    8[BANK0 ] int 
  3916 ;;  sensor_outpu    6   10[BANK0 ] int [3]
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;Total ram usage:       10 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    9
  3933 ;; This function calls:
  3934 ;;		_readMAG
  3935 ;; This function is called by:
  3936 ;;		_sort
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text9
  3941  002C0A                     __ptext9:
  3942                           	opt stack 0
  3943  002C0A                     _ID:
  3944                           	opt stack 20
  3945                           
  3946                           ;sort.c: 123: if(f_can_coming_to_ID){
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;incstack = 0
  3950  002C0A  506D               	movf	_f_can_coming_to_ID,w,c
  3951  002C0C  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3952  002C0E  B4D8               	btfsc	status,2,c
  3953  002C10  0012               	return	
  3954                           
  3955                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3956  002C12  0E15               	movlw	21
  3957  002C14  0100               	movlb	0	; () banked
  3958  002C16  6F87               	movwf	(??_ID+1)& (0+255),b
  3959  002C18  0E4B               	movlw	75
  3960  002C1A  0100               	movlb	0	; () banked
  3961  002C1C  6F86               	movwf	??_ID& (0+255),b
  3962  002C1E  0EBE               	movlw	190
  3963  002C20                     u7157:
  3964  002C20  2EE8               	decfsz	wreg,f,c
  3965  002C22  D7FE               	bra	u7157
  3966  002C24  2F86               	decfsz	??_ID& (0+255),f,b
  3967  002C26  D7FC               	bra	u7157
  3968  002C28  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3969  002C2A  D7FA               	bra	u7157
  3970  002C2C  F000               	nop	
  3971                           
  3972                           ;sort.c: 130: int sensor_outputs[3];
  3973                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3974  002C2E  A480               	btfss	3968,2,c	;volatile
  3975  002C30  D004               	goto	u4920
  3976  002C32  0100               	movlb	0	; () banked
  3977  002C34  6B86               	clrf	??_ID& (0+255),b
  3978  002C36  2B86               	incf	??_ID& (0+255),f,b
  3979  002C38  D002               	goto	u4928
  3980  002C3A                     u4920:
  3981  002C3A  0100               	movlb	0	; () banked
  3982  002C3C  6B86               	clrf	??_ID& (0+255),b
  3983  002C3E                     u4928:
  3984  002C3E  0100               	movlb	0	; () banked
  3985  002C40  5186               	movf	??_ID& (0+255),w,b
  3986  002C42  0100               	movlb	0	; () banked
  3987  002C44  6F8A               	movwf	ID@sensor_outputs& (0+255),b
  3988  002C46  6B8B               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;sort.c: 136: if(!sensor_outputs[0]){
  3992  002C48  0100               	movlb	0	; () banked
  3993  002C4A  518A               	movf	ID@sensor_outputs& (0+255),w,b
  3994  002C4C  0100               	movlb	0	; () banked
  3995  002C4E  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3996  002C50  A4D8               	btfss	status,2,c
  3997  002C52  D029               	goto	l6452
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;sort.c: 137: readMAG();
  4001  002C54  ECBF  F020         	call	_readMAG	;wreg free
  4002                           
  4003                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  4004  002C58  C0DC  F08C         	movff	_MAG_signal,ID@sensor_outputs+2
  4005  002C5C  C0DD  F08D         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4006                           
  4007                           ;sort.c: 139: if(!sensor_outputs[1]){
  4008  002C60  0100               	movlb	0	; () banked
  4009  002C62  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4010  002C64  0100               	movlb	0	; () banked
  4011  002C66  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4012  002C68  A4D8               	btfss	status,2,c
  4013  002C6A  D01D               	goto	l6452
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;sort.c: 140: LATAbits.LATA3 = 1;
  4017  002C6C  8689               	bsf	3977,3,c	;volatile
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  4021  002C6E  0E0D               	movlw	13
  4022  002C70  0100               	movlb	0	; () banked
  4023  002C72  6F87               	movwf	(??_ID+1)& (0+255),b
  4024  002C74  0E2D               	movlw	45
  4025  002C76  0100               	movlb	0	; () banked
  4026  002C78  6F86               	movwf	??_ID& (0+255),b
  4027  002C7A  0ED7               	movlw	215
  4028  002C7C                     u7167:
  4029  002C7C  2EE8               	decfsz	wreg,f,c
  4030  002C7E  D7FE               	bra	u7167
  4031  002C80  2F86               	decfsz	??_ID& (0+255),f,b
  4032  002C82  D7FC               	bra	u7167
  4033  002C84  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4034  002C86  D7FA               	bra	u7167
  4035  002C88  D000               	nop2	
  4036                           
  4037                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  4038  002C8A  A480               	btfss	3968,2,c	;volatile
  4039  002C8C  D004               	goto	u4950
  4040  002C8E  0100               	movlb	0	; () banked
  4041  002C90  6B86               	clrf	??_ID& (0+255),b
  4042  002C92  2B86               	incf	??_ID& (0+255),f,b
  4043  002C94  D002               	goto	u4958
  4044  002C96                     u4950:
  4045  002C96  0100               	movlb	0	; () banked
  4046  002C98  6B86               	clrf	??_ID& (0+255),b
  4047  002C9A                     u4958:
  4048  002C9A  0100               	movlb	0	; () banked
  4049  002C9C  5186               	movf	??_ID& (0+255),w,b
  4050  002C9E  0100               	movlb	0	; () banked
  4051  002CA0  6F8E               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4052  002CA2  6B8F               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4056  002CA4  9689               	bcf	3977,3,c	;volatile
  4057  002CA6                     l6452:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;sort.c: 145: }
  4061                           ;sort.c: 146: }
  4062                           ;sort.c: 149: if(!sensor_outputs[0]){
  4063  002CA6  0100               	movlb	0	; () banked
  4064  002CA8  518A               	movf	ID@sensor_outputs& (0+255),w,b
  4065  002CAA  0100               	movlb	0	; () banked
  4066  002CAC  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4067  002CAE  A4D8               	btfss	status,2,c
  4068  002CB0  D021               	goto	l6470
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;sort.c: 150: if(!sensor_outputs[1]){
  4072  002CB2  0100               	movlb	0	; () banked
  4073  002CB4  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4074  002CB6  0100               	movlb	0	; () banked
  4075  002CB8  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4076  002CBA  A4D8               	btfss	status,2,c
  4077  002CBC  D014               	goto	l6466
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;sort.c: 151: if(!sensor_outputs[2]){
  4081  002CBE  0100               	movlb	0	; () banked
  4082  002CC0  518E               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4083  002CC2  0100               	movlb	0	; () banked
  4084  002CC4  118F               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4085  002CC6  A4D8               	btfss	status,2,c
  4086  002CC8  D007               	goto	l6462
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;sort.c: 152: count_pop_no_tab++;
  4090  002CCA  4A61               	infsnz	_count_pop_no_tab,f,c
  4091  002CCC  2A62               	incf	_count_pop_no_tab+1,f,c
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;sort.c: 153: cur_can = 0;
  4095  002CCE  0E00               	movlw	0
  4096  002CD0  0101               	movlb	1	; () banked
  4097  002CD2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4098  002CD4  0E00               	movlw	0
  4099  002CD6  D014               	goto	L4
  4100  002CD8                     l6462:
  4101                           
  4102                           ;sort.c: 155: else{
  4103                           ;sort.c: 156: count_pop_w_tab++;
  4104  002CD8  4A63               	infsnz	_count_pop_w_tab,f,c
  4105  002CDA  2A64               	incf	_count_pop_w_tab+1,f,c
  4106                           
  4107                           ;sort.c: 157: cur_can = 1;
  4108  002CDC  0E00               	movlw	0
  4109  002CDE  0101               	movlb	1	; () banked
  4110  002CE0  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4111  002CE2  0E01               	movlw	1
  4112  002CE4  D00D               	goto	L4
  4113  002CE6                     l6466:
  4114                           
  4115                           ;sort.c: 160: else{
  4116                           ;sort.c: 161: count_can_w_lab++;
  4117  002CE6  4A5F               	infsnz	_count_can_w_lab,f,c
  4118  002CE8  2A60               	incf	_count_can_w_lab+1,f,c
  4119                           
  4120                           ;sort.c: 162: cur_can = 2;
  4121  002CEA  0E00               	movlw	0
  4122  002CEC  0101               	movlb	1	; () banked
  4123  002CEE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4124  002CF0  0E02               	movlw	2
  4125  002CF2  D006               	goto	L4
  4126  002CF4                     l6470:
  4127                           
  4128                           ;sort.c: 165: else{
  4129                           ;sort.c: 166: count_can_no_lab++;
  4130  002CF4  4A5D               	infsnz	_count_can_no_lab,f,c
  4131  002CF6  2A5E               	incf	_count_can_no_lab+1,f,c
  4132                           
  4133                           ;sort.c: 167: cur_can = 3;
  4134  002CF8  0E00               	movlw	0
  4135  002CFA  0101               	movlb	1	; () banked
  4136  002CFC  6F2C               	movwf	(_cur_can+1)& (0+255),b
  4137  002CFE  0E03               	movlw	3
  4138  002D00                     L4:
  4139  002D00  6F2B               	movwf	_cur_can& (0+255),b
  4140                           
  4141                           ; BSR set to: 1
  4142                           ;sort.c: 168: }
  4143                           ;sort.c: 172: for(int i=0;i<10000;i++)
  4144                           
  4145                           ; BSR set to: 1
  4146  002D02  0E00               	movlw	0
  4147  002D04  0100               	movlb	0	; () banked
  4148  002D06  6F89               	movwf	(ID@i+1)& (0+255),b
  4149  002D08  0E00               	movlw	0
  4150  002D0A  6F88               	movwf	ID@i& (0+255),b
  4151  002D0C                     l6476:
  4152                           
  4153                           ; BSR set to: 0
  4154  002D0C  0100               	movlb	0	; () banked
  4155  002D0E  BF89               	btfsc	(ID@i+1)& (0+255),7,b
  4156  002D10  D008               	goto	l748
  4157  002D12  0E10               	movlw	16
  4158  002D14  0100               	movlb	0	; () banked
  4159  002D16  5D88               	subwf	ID@i& (0+255),w,b
  4160  002D18  0E27               	movlw	39
  4161  002D1A  0100               	movlb	0	; () banked
  4162  002D1C  5989               	subwfb	(ID@i+1)& (0+255),w,b
  4163  002D1E  B0D8               	btfsc	status,0,c
  4164  002D20  D00D               	goto	l6486
  4165  002D22                     l748:
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;sort.c: 173: {
  4169                           ;sort.c: 174: LATCbits.LATC0 = 1;
  4170  002D22  808B               	bsf	3979,0,c	;volatile
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;sort.c: 175: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4174  002D24  0E1A               	movlw	26
  4175  002D26                     u7177:
  4176  002D26  2EE8               	decfsz	wreg,f,c
  4177  002D28  D7FE               	bra	u7177
  4178  002D2A  D000               	nop2	
  4179                           
  4180                           ;sort.c: 176: LATCbits.LATC0 = 0;
  4181  002D2C  908B               	bcf	3979,0,c	;volatile
  4182                           
  4183                           ;sort.c: 177: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4184  002D2E  0EF0               	movlw	240
  4185  002D30                     u7187:
  4186  002D30  2EE8               	decfsz	wreg,f,c
  4187  002D32  D7FE               	bra	u7187
  4188  002D34  0100               	movlb	0	; () banked
  4189  002D36  4B88               	infsnz	ID@i& (0+255),f,b
  4190  002D38  2B89               	incf	(ID@i+1)& (0+255),f,b
  4191  002D3A  D7E8               	goto	l6476
  4192  002D3C                     l6486:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 178: }
  4196                           ;sort.c: 180: f_can_coming_to_distribution = 1;
  4197  002D3C  0E00               	movlw	0
  4198  002D3E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4199  002D40  0E01               	movlw	1
  4200  002D42  6E6F               	movwf	_f_can_coming_to_distribution,c
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;sort.c: 181: _delay((unsigned long)((500)*(32000000/4000.0)));
  4204  002D44  0E15               	movlw	21
  4205  002D46  0100               	movlb	0	; () banked
  4206  002D48  6F87               	movwf	(??_ID+1)& (0+255),b
  4207  002D4A  0E4B               	movlw	75
  4208  002D4C  0100               	movlb	0	; () banked
  4209  002D4E  6F86               	movwf	??_ID& (0+255),b
  4210  002D50  0EBE               	movlw	190
  4211  002D52                     u7197:
  4212  002D52  2EE8               	decfsz	wreg,f,c
  4213  002D54  D7FE               	bra	u7197
  4214  002D56  2F86               	decfsz	??_ID& (0+255),f,b
  4215  002D58  D7FC               	bra	u7197
  4216  002D5A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4217  002D5C  D7FA               	bra	u7197
  4218  002D5E  F000               	nop	
  4219                           
  4220                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4221  002D60  808B               	bsf	3979,0,c	;volatile
  4222                           
  4223                           ;sort.c: 184: f_can_coming_to_ID = 0;
  4224  002D62  0E00               	movlw	0
  4225  002D64  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4226  002D66  0E00               	movlw	0
  4227  002D68  6E6D               	movwf	_f_can_coming_to_ID,c
  4228  002D6A  0012               	return	
  4229  002D6C                     __end_of_ID:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           postinc0	equ	0xFEE
  4238                           wreg	equ	0xFE8
  4239                           postdec1	equ	0xFE5
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _Distribution *****************
  4249 ;; Defined at:
  4250 ;;		line 187 in file "sort.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;Total ram usage:        2 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    8
  4271 ;; This function calls:
  4272 ;;		_updateServoPosition
  4273 ;; This function is called by:
  4274 ;;		_sort
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text10
  4279  002EB6                     __ptext10:
  4280                           	opt stack 0
  4281  002EB6                     _Distribution:
  4282                           	opt stack 21
  4283                           
  4284                           ;sort.c: 188: if(f_can_coming_to_distribution){
  4285                           
  4286                           ;incstack = 0
  4287  002EB6  506F               	movf	_f_can_coming_to_distribution,w,c
  4288  002EB8  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4289  002EBA  B4D8               	btfsc	status,2,c
  4290  002EBC  0012               	return	
  4291  002EBE  D034               	goto	l6508
  4292  002EC0                     l6498:
  4293                           
  4294                           ;sort.c: 193: updateServoPosition(500, 1);
  4295  002EC0  0E01               	movlw	1
  4296  002EC2  0100               	movlb	0	; () banked
  4297  002EC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4298  002EC6  0EF4               	movlw	244
  4299  002EC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4300  002ECA  0E00               	movlw	0
  4301  002ECC  0100               	movlb	0	; () banked
  4302  002ECE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4303  002ED0  0E01               	movlw	1
  4304  002ED2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4305  002ED4  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4306                           
  4307                           ;sort.c: 194: break;
  4308  002ED8  D03E               	goto	l6510
  4309  002EDA                     l6500:
  4310                           
  4311                           ;sort.c: 196: updateServoPosition(750, 1);
  4312  002EDA  0E02               	movlw	2
  4313  002EDC  0100               	movlb	0	; () banked
  4314  002EDE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4315  002EE0  0EEE               	movlw	238
  4316  002EE2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4317  002EE4  0E00               	movlw	0
  4318  002EE6  0100               	movlb	0	; () banked
  4319  002EE8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4320  002EEA  0E01               	movlw	1
  4321  002EEC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4322  002EEE  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4323                           
  4324                           ;sort.c: 197: break;
  4325  002EF2  D031               	goto	l6510
  4326  002EF4                     l6502:
  4327                           
  4328                           ;sort.c: 199: updateServoPosition(1700, 1);
  4329  002EF4  0E06               	movlw	6
  4330  002EF6  0100               	movlb	0	; () banked
  4331  002EF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4332  002EFA  0EA4               	movlw	164
  4333  002EFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4334  002EFE  0E00               	movlw	0
  4335  002F00  0100               	movlb	0	; () banked
  4336  002F02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4337  002F04  0E01               	movlw	1
  4338  002F06  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4339  002F08  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4340                           
  4341                           ;sort.c: 200: break;
  4342  002F0C  D024               	goto	l6510
  4343  002F0E                     l6504:
  4344                           
  4345                           ;sort.c: 202: updateServoPosition(2000, 1);
  4346  002F0E  0E07               	movlw	7
  4347  002F10  0100               	movlb	0	; () banked
  4348  002F12  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4349  002F14  0ED0               	movlw	208
  4350  002F16  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4351  002F18  0E00               	movlw	0
  4352  002F1A  0100               	movlb	0	; () banked
  4353  002F1C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4354  002F1E  0E01               	movlw	1
  4355  002F20  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4356  002F22  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4357                           
  4358                           ;sort.c: 206: }
  4359                           
  4360                           ;sort.c: 205: break;
  4361                           
  4362                           ;sort.c: 204: default:
  4363                           
  4364                           ;sort.c: 203: break;
  4365  002F26  D017               	goto	l6510
  4366  002F28                     l6508:
  4367  002F28  C12B  F088         	movff	_cur_can,??_Distribution
  4368  002F2C  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  4369                           
  4370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4371                           ; Switch size 1, requested type "space"
  4372                           ; Number of cases is 1, Range of values is 0 to 0
  4373                           ; switch strategies available:
  4374                           ; Name         Instructions Cycles
  4375                           ; simple_byte            4     3 (average)
  4376                           ;	Chosen strategy is simple_byte
  4377  002F30  0100               	movlb	0	; () banked
  4378  002F32  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4379  002F34  0A00               	xorlw	0	; case 0
  4380  002F36  A4D8               	btfss	status,2,c
  4381  002F38  D00E               	goto	l6510
  4382                           
  4383                           ; BSR set to: 0
  4384                           ; Switch size 1, requested type "space"
  4385                           ; Number of cases is 4, Range of values is 0 to 3
  4386                           ; switch strategies available:
  4387                           ; Name         Instructions Cycles
  4388                           ; simple_byte           13     7 (average)
  4389                           ;	Chosen strategy is simple_byte
  4390  002F3A  0100               	movlb	0	; () banked
  4391  002F3C  5188               	movf	??_Distribution& (0+255),w,b
  4392  002F3E  0A00               	xorlw	0	; case 0
  4393  002F40  B4D8               	btfsc	status,2,c
  4394  002F42  D7BE               	goto	l6498
  4395  002F44  0A01               	xorlw	1	; case 1
  4396  002F46  B4D8               	btfsc	status,2,c
  4397  002F48  D7C8               	goto	l6500
  4398  002F4A  0A03               	xorlw	3	; case 2
  4399  002F4C  B4D8               	btfsc	status,2,c
  4400  002F4E  D7D2               	goto	l6502
  4401  002F50  0A01               	xorlw	1	; case 3
  4402  002F52  B4D8               	btfsc	status,2,c
  4403  002F54  D7DC               	goto	l6504
  4404  002F56                     l6510:
  4405                           
  4406                           ;sort.c: 207: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4407  002F56  0E29               	movlw	41
  4408  002F58  0100               	movlb	0	; () banked
  4409  002F5A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4410  002F5C  0E96               	movlw	150
  4411  002F5E  0100               	movlb	0	; () banked
  4412  002F60  6F88               	movwf	??_Distribution& (0+255),b
  4413  002F62  0E7F               	movlw	127
  4414  002F64                     u7207:
  4415  002F64  2EE8               	decfsz	wreg,f,c
  4416  002F66  D7FE               	bra	u7207
  4417  002F68  2F88               	decfsz	??_Distribution& (0+255),f,b
  4418  002F6A  D7FC               	bra	u7207
  4419  002F6C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4420  002F6E  D7FA               	bra	u7207
  4421                           
  4422                           ;sort.c: 210: updateServoPosition(1350, 3);
  4423  002F70  0E05               	movlw	5
  4424  002F72  0100               	movlb	0	; () banked
  4425  002F74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4426  002F76  0E46               	movlw	70
  4427  002F78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4428  002F7A  0E00               	movlw	0
  4429  002F7C  0100               	movlb	0	; () banked
  4430  002F7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4431  002F80  0E03               	movlw	3
  4432  002F82  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4433  002F84  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4434                           
  4435                           ;sort.c: 211: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4436  002F88  0E3D               	movlw	61
  4437  002F8A  0100               	movlb	0	; () banked
  4438  002F8C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4439  002F8E  0EE1               	movlw	225
  4440  002F90  0100               	movlb	0	; () banked
  4441  002F92  6F88               	movwf	??_Distribution& (0+255),b
  4442  002F94  0E3F               	movlw	63
  4443  002F96                     u7217:
  4444  002F96  2EE8               	decfsz	wreg,f,c
  4445  002F98  D7FE               	bra	u7217
  4446  002F9A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4447  002F9C  D7FC               	bra	u7217
  4448  002F9E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4449  002FA0  D7FA               	bra	u7217
  4450  002FA2  D000               	nop2	
  4451                           
  4452                           ;sort.c: 214: updateServoPosition(1200, 1);
  4453  002FA4  0E04               	movlw	4
  4454  002FA6  0100               	movlb	0	; () banked
  4455  002FA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4456  002FAA  0EB0               	movlw	176
  4457  002FAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4458  002FAE  0E00               	movlw	0
  4459  002FB0  0100               	movlb	0	; () banked
  4460  002FB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4461  002FB4  0E01               	movlw	1
  4462  002FB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4463  002FB8  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4464                           
  4465                           ;sort.c: 215: updateServoPosition(1190, 3);
  4466  002FBC  0E04               	movlw	4
  4467  002FBE  0100               	movlb	0	; () banked
  4468  002FC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4469  002FC2  0EA6               	movlw	166
  4470  002FC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4471  002FC6  0E00               	movlw	0
  4472  002FC8  0100               	movlb	0	; () banked
  4473  002FCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4474  002FCC  0E03               	movlw	3
  4475  002FCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4476  002FD0  EC5F  F01E         	call	_updateServoPosition	;wreg free
  4477                           
  4478                           ;sort.c: 216: f_can_coming_to_distribution = 0;
  4479  002FD4  0E00               	movlw	0
  4480  002FD6  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4481  002FD8  0E00               	movlw	0
  4482  002FDA  6E6F               	movwf	_f_can_coming_to_distribution,c
  4483                           
  4484                           ;sort.c: 217: f_can_distributed = 1;
  4485  002FDC  0E00               	movlw	0
  4486  002FDE  0101               	movlb	1	; () banked
  4487  002FE0  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4488  002FE2  0E01               	movlw	1
  4489  002FE4  6F2D               	movwf	_f_can_distributed& (0+255),b
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;sort.c: 218: if(f_lastCan == 1){
  4493  002FE6  0471               	decf	_f_lastCan,w,c
  4494  002FE8  1072               	iorwf	_f_lastCan+1,w,c
  4495  002FEA  A4D8               	btfss	status,2,c
  4496  002FEC  0012               	return	
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;sort.c: 219: machine_state = DoneSorting_state;
  4500  002FEE  0E02               	movlw	2
  4501  002FF0  0100               	movlb	0	; () banked
  4502  002FF2  6FFC               	movwf	_machine_state& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505  002FF4  0012               	return	
  4506  002FF6                     __end_of_Distribution:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1l	equ	0xFE1
  4518                           indf2	equ	0xFDF
  4519                           postinc2	equ	0xFDE
  4520                           postdec2	equ	0xFDD
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function _machineConfig *****************
  4526 ;; Defined at:
  4527 ;;		line 15 in file "MachineConfig.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, status,2
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;Total ram usage:        0 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    7
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		_main
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text11
  4556  003F38                     __ptext11:
  4557                           	opt stack 0
  4558  003F38                     _machineConfig:
  4559                           	opt stack 23
  4560                           
  4561                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4562                           
  4563                           ;incstack = 0
  4564  003F38  0EF0               	movlw	240
  4565  003F3A  6ED3               	movwf	4051,c	;volatile
  4566                           
  4567                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4568  003F3C  8C9B               	bsf	3995,6,c	;volatile
  4569                           
  4570                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4571  003F3E  0E07               	movlw	7
  4572  003F40  6E92               	movwf	3986,c	;volatile
  4573                           
  4574                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4575  003F42  0EF2               	movlw	242
  4576  003F44  6E93               	movwf	3987,c	;volatile
  4577                           
  4578                           ;MachineConfig.c: 27: TRISC = 0x00;
  4579  003F46  0E00               	movlw	0
  4580  003F48  6E94               	movwf	3988,c	;volatile
  4581                           
  4582                           ;MachineConfig.c: 31: TRISD = 0x00;
  4583  003F4A  0E00               	movlw	0
  4584  003F4C  6E95               	movwf	3989,c	;volatile
  4585                           
  4586                           ;MachineConfig.c: 34: TRISE = 0x00;
  4587  003F4E  0E00               	movlw	0
  4588  003F50  6E96               	movwf	3990,c	;volatile
  4589                           
  4590                           ;MachineConfig.c: 37: LATA = 0x00;
  4591  003F52  0E00               	movlw	0
  4592  003F54  6E89               	movwf	3977,c	;volatile
  4593                           
  4594                           ;MachineConfig.c: 38: LATB = 0x00;
  4595  003F56  0E00               	movlw	0
  4596  003F58  6E8A               	movwf	3978,c	;volatile
  4597                           
  4598                           ;MachineConfig.c: 39: LATC = 0x00;
  4599  003F5A  0E00               	movlw	0
  4600  003F5C  6E8B               	movwf	3979,c	;volatile
  4601                           
  4602                           ;MachineConfig.c: 40: LATD = 0x00;
  4603  003F5E  0E00               	movlw	0
  4604  003F60  6E8C               	movwf	3980,c	;volatile
  4605                           
  4606                           ;MachineConfig.c: 41: LATE = 0x00;
  4607  003F62  0E00               	movlw	0
  4608  003F64  6E8D               	movwf	3981,c	;volatile
  4609                           
  4610                           ;MachineConfig.c: 43: nRBPU = 0;
  4611  003F66  9EF1               	bcf	intcon2,7,c	;volatile
  4612                           
  4613                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4614  003F68  0E00               	movlw	0
  4615  003F6A  6EC2               	movwf	4034,c	;volatile
  4616                           
  4617                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4618  003F6C  0E0D               	movlw	13
  4619  003F6E  6EC1               	movwf	4033,c	;volatile
  4620                           
  4621                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4622  003F70  0E00               	movlw	0
  4623  003F72  6EB5               	movwf	4021,c	;volatile
  4624                           
  4625                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4626  003F74  96B4               	bcf	4020,3,c	;volatile
  4627                           
  4628                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4629  003F76  0EB1               	movlw	177
  4630  003F78  6EC0               	movwf	4032,c	;volatile
  4631                           
  4632                           ;MachineConfig.c: 55: INT1IE = 1;
  4633  003F7A  86F0               	bsf	intcon3,3,c	;volatile
  4634                           
  4635                           ;MachineConfig.c: 57: TMR0IE = 1;
  4636  003F7C  8AF2               	bsf	intcon,5,c	;volatile
  4637                           
  4638                           ;MachineConfig.c: 58: TMR1IE = 1;
  4639  003F7E  809D               	bsf	3997,0,c	;volatile
  4640                           
  4641                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4642  003F80  0EB0               	movlw	176
  4643  003F82  6ECD               	movwf	4045,c	;volatile
  4644                           
  4645                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4646  003F84  0EB0               	movlw	176
  4647  003F86  6EB1               	movwf	4017,c	;volatile
  4648                           
  4649                           ;MachineConfig.c: 61: TMR2IE = 1;
  4650  003F88  829D               	bsf	3997,1,c	;volatile
  4651                           
  4652                           ;MachineConfig.c: 62: TMR3IE = 1;
  4653  003F8A  82A0               	bsf	4000,1,c	;volatile
  4654                           
  4655                           ;MachineConfig.c: 63: PEIE = 1;
  4656  003F8C  8CF2               	bsf	intcon,6,c	;volatile
  4657                           
  4658                           ;MachineConfig.c: 64: ADIE = 0;
  4659  003F8E  9C9D               	bcf	3997,6,c	;volatile
  4660                           
  4661                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4662  003F90  9EF2               	bcf	intcon,7,c	;volatile
  4663  003F92  0012               	return		;funcret
  4664  003F94                     __end_of_machineConfig:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           intcon2	equ	0xFF1
  4674                           intcon3	equ	0xFF0
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _logRun *****************
  4687 ;; Defined at:
  4688 ;;		line 84 in file "EEPROM.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4693 ;;  i               2   55[BANK0 ] int 
  4694 ;;  num             1   49[BANK0 ] unsigned char 
  4695 ;;  addr            2   57[BANK0 ] unsigned short 
  4696 ;;  byte11          1   54[BANK0 ] unsigned char 
  4697 ;;  byte3           1   52[BANK0 ] unsigned char 
  4698 ;;  byte2           1   51[BANK0 ] unsigned char 
  4699 ;;  byte1           1   50[BANK0 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;Total ram usage:       10 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:   11
  4716 ;; This function calls:
  4717 ;;		_EEPROM_read
  4718 ;;		_EEPROM_write
  4719 ;; This function is called by:
  4720 ;;		_main
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text12
  4725  002FF6                     __ptext12:
  4726                           	opt stack 0
  4727  002FF6                     _logRun:
  4728                           	opt stack 19
  4729                           
  4730                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4731                           
  4732                           ;incstack = 0
  4733  002FF6  0E00               	movlw	0
  4734  002FF8  0100               	movlb	0	; () banked
  4735  002FFA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4736  002FFC  0E00               	movlw	0
  4737  002FFE  6F80               	movwf	EEPROM_read@address& (0+255),b
  4738  003000  EC9F  F023         	call	_EEPROM_read	;wreg free
  4739  003004  0100               	movlb	0	; () banked
  4740  003006  6FFD               	movwf	_sel& (0+255),b
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4744  003008  0100               	movlb	0	; () banked
  4745  00300A  51FD               	movf	_sel& (0+255),w,b
  4746  00300C  0D0B               	mullw	11
  4747  00300E  0E01               	movlw	1
  4748  003010  24F3               	addwf	prodl,w,c
  4749  003012  0100               	movlb	0	; () banked
  4750  003014  6FB9               	movwf	logRun@addr& (0+255),b
  4751  003016  0E00               	movlw	0
  4752  003018  20F4               	addwfc	prodh,w,c
  4753  00301A  0100               	movlb	0	; () banked
  4754  00301C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;EEPROM.c: 101: if (sel < 3){
  4758  00301E  0E03               	movlw	3
  4759  003020  0100               	movlb	0	; () banked
  4760  003022  61FD               	cpfslt	_sel& (0+255),b
  4761  003024  D00E               	goto	l7982
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4765  003026  0100               	movlb	0	; () banked
  4766  003028  29FD               	incf	_sel& (0+255),w,b
  4767  00302A  0100               	movlb	0	; () banked
  4768  00302C  6FB1               	movwf	logRun@num& (0+255),b
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4772  00302E  0E00               	movlw	0
  4773  003030  0100               	movlb	0	; () banked
  4774  003032  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4775  003034  0E00               	movlw	0
  4776  003036  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4777  003038  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4778  00303C  EC29  F01A         	call	_EEPROM_write	;wreg free
  4779                           
  4780                           ;EEPROM.c: 104: }
  4781  003040  D00A               	goto	l7984
  4782  003042                     l7982:
  4783                           
  4784                           ;EEPROM.c: 105: else{
  4785                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4786  003042  0E00               	movlw	0
  4787  003044  0100               	movlb	0	; () banked
  4788  003046  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4789  003048  0E00               	movlw	0
  4790  00304A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4791  00304C  0E00               	movlw	0
  4792  00304E  0100               	movlb	0	; () banked
  4793  003050  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4794  003052  EC29  F01A         	call	_EEPROM_write	;wreg free
  4795  003056                     l7984:
  4796                           
  4797                           ;EEPROM.c: 107: }
  4798                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4799  003056  0100               	movlb	0	; () banked
  4800  003058  51FE               	movf	_count_total& (0+255),w,b
  4801  00305A  0980               	iorlw	128
  4802  00305C  0100               	movlb	0	; () banked
  4803  00305E  6FB2               	movwf	logRun@byte1& (0+255),b
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4807  003060  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4808  003064  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4809  003068  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4810  00306C  EC29  F01A         	call	_EEPROM_write	;wreg free
  4811                           
  4812                           ;EEPROM.c: 112: addr++;
  4813  003070  0100               	movlb	0	; () banked
  4814  003072  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4815  003074  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4819  003076  3861               	swapf	_count_pop_no_tab,w,c
  4820  003078  0BF0               	andlw	240
  4821  00307A  1063               	iorwf	_count_pop_w_tab,w,c
  4822  00307C  0100               	movlb	0	; () banked
  4823  00307E  6FB3               	movwf	logRun@byte2& (0+255),b
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4827  003080  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4828  003084  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4829  003088  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4830  00308C  EC29  F01A         	call	_EEPROM_write	;wreg free
  4831                           
  4832                           ;EEPROM.c: 117: addr++;
  4833  003090  0100               	movlb	0	; () banked
  4834  003092  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4835  003094  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4839  003096  385F               	swapf	_count_can_w_lab,w,c
  4840  003098  0BF0               	andlw	240
  4841  00309A  105D               	iorwf	_count_can_no_lab,w,c
  4842  00309C  0100               	movlb	0	; () banked
  4843  00309E  6FB4               	movwf	logRun@byte3& (0+255),b
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4847  0030A0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4848  0030A4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4849  0030A8  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4850  0030AC  EC29  F01A         	call	_EEPROM_write	;wreg free
  4851                           
  4852                           ;EEPROM.c: 120: addr++;
  4853  0030B0  0100               	movlb	0	; () banked
  4854  0030B2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4855  0030B4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4859  0030B6  0E00               	movlw	0
  4860  0030B8  0100               	movlb	0	; () banked
  4861  0030BA  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4862  0030BC  0E00               	movlw	0
  4863  0030BE  6FB7               	movwf	logRun@i& (0+255),b
  4864                           
  4865                           ; BSR set to: 0
  4866  0030C0  0100               	movlb	0	; () banked
  4867  0030C2  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4868  0030C4  D008               	goto	l8008
  4869  0030C6  0100               	movlb	0	; () banked
  4870  0030C8  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4871  0030CA  E128               	bnz	l946
  4872  0030CC  0E07               	movlw	7
  4873  0030CE  0100               	movlb	0	; () banked
  4874  0030D0  5DB7               	subwf	logRun@i& (0+255),w,b
  4875  0030D2  B0D8               	btfsc	status,0,c
  4876  0030D4  D023               	goto	l946
  4877  0030D6                     l8008:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4881  0030D6  90D8               	bcf	status,0,c
  4882  0030D8  0100               	movlb	0	; () banked
  4883  0030DA  35B7               	rlcf	logRun@i& (0+255),w,b
  4884  0030DC  6ED9               	movwf	fsr2l,c
  4885  0030DE  0100               	movlb	0	; () banked
  4886  0030E0  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4887  0030E2  6EDA               	movwf	fsr2h,c
  4888  0030E4  0E0E               	movlw	low _startTime
  4889  0030E6  26D9               	addwf	fsr2l,f,c
  4890  0030E8  0E01               	movlw	high _startTime
  4891  0030EA  22DA               	addwfc	fsr2h,f,c
  4892  0030EC  50DF               	movf	indf2,w,c
  4893  0030EE  0100               	movlb	0	; () banked
  4894  0030F0  6FB5               	movwf	logRun@byte_i& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4898  0030F2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4899  0030F6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4900  0030FA  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4901  0030FE  EC29  F01A         	call	_EEPROM_write	;wreg free
  4902                           
  4903                           ;EEPROM.c: 126: addr++;
  4904  003102  0100               	movlb	0	; () banked
  4905  003104  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4906  003106  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4907                           
  4908                           ; BSR set to: 0
  4909  003108  0100               	movlb	0	; () banked
  4910  00310A  4BB7               	infsnz	logRun@i& (0+255),f,b
  4911  00310C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4912                           
  4913                           ; BSR set to: 0
  4914  00310E  0100               	movlb	0	; () banked
  4915  003110  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4916  003112  D7E1               	goto	l8008
  4917  003114  0100               	movlb	0	; () banked
  4918  003116  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4919  003118  E101               	bnz	u6930
  4920  00311A  D7D8               	goto	L5
  4921  00311C                     u6930:
  4922  00311C                     l946:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;EEPROM.c: 127: }
  4926                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4927  00311C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4931  003120  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4932  003124  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4933  003128  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4934  00312C  EC29  F01A         	call	_EEPROM_write	;wreg free
  4935  003130  0012               	return		;funcret
  4936  003132                     __end_of_logRun:
  4937                           	opt stack 0
  4938                           tblptru	equ	0xFF8
  4939                           tblptrh	equ	0xFF7
  4940                           tblptrl	equ	0xFF6
  4941                           tablat	equ	0xFF5
  4942                           prodh	equ	0xFF4
  4943                           prodl	equ	0xFF3
  4944                           intcon	equ	0xFF2
  4945                           intcon2	equ	0xFF1
  4946                           intcon3	equ	0xFF0
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postdec1	equ	0xFE5
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function _EEPROM_write *****************
  4959 ;; Defined at:
  4960 ;;		line 32 in file "EEPROM.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  address         2   43[BANK0 ] unsigned short 
  4963 ;;  data            1   45[BANK0 ] unsigned char 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  i               1   48[BANK0 ] unsigned char 
  4966 ;;  i               1   47[BANK0 ] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1    wreg      void 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        6 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:   10
  4983 ;; This function calls:
  4984 ;;		_EEPROM_read
  4985 ;;		_lcdInst
  4986 ;;		_printf
  4987 ;; This function is called by:
  4988 ;;		_Loading
  4989 ;;		_logRun
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text13
  4994  003452                     __ptext13:
  4995                           	opt stack 0
  4996  003452                     _EEPROM_write:
  4997                           	opt stack 18
  4998                           
  4999                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5000                           
  5001                           ;incstack = 0
  5002  003452  84A6               	bsf	4006,2,c	;volatile
  5003                           
  5004                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5005  003454  0100               	movlb	0	; () banked
  5006  003456  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5007  003458  6EAA               	movwf	4010,c	;volatile
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5011  00345A  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;EEPROM.c: 39: EEDATA = data;
  5015  00345E  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5019  003462  9EA6               	bcf	4006,7,c	;volatile
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5023  003464  9CA6               	bcf	4006,6,c	;volatile
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5027  003466  9EF2               	bcf	intcon,7,c	;volatile
  5028                           
  5029                           ;EEPROM.c: 45: EECON2 = 0x55;
  5030  003468  0E55               	movlw	85
  5031  00346A  6EA7               	movwf	4007,c	;volatile
  5032                           
  5033                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5034  00346C  0EAA               	movlw	170
  5035  00346E  6EA7               	movwf	4007,c	;volatile
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5039  003470  82A6               	bsf	4006,1,c	;volatile
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5043  003472  8EF2               	bsf	intcon,7,c	;volatile
  5044  003474                     l924:
  5045  003474  A8A1               	btfss	4001,4,c	;volatile
  5046  003476  D7FE               	goto	l924
  5047                           
  5048                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5049  003478  98A1               	bcf	4001,4,c	;volatile
  5050                           
  5051                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5052  00347A  94A6               	bcf	4006,2,c	;volatile
  5053                           
  5054                           ;EEPROM.c: 57: if(debug){
  5055  00347C  5065               	movf	_debug,w,c
  5056  00347E  1066               	iorwf	_debug+1,w,c
  5057  003480  B4D8               	btfsc	status,2,c
  5058  003482  0012               	return	
  5059                           
  5060                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5061  003484  0E01               	movlw	1
  5062  003486  ECDC  F023         	call	_lcdInst
  5063  00348A  0E68               	movlw	104
  5064  00348C  0100               	movlb	0	; () banked
  5065  00348E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5066  003490  0EE4               	movlw	228
  5067  003492                     u7227:
  5068  003492  2EE8               	decfsz	wreg,f,c
  5069  003494  D7FE               	bra	u7227
  5070  003496  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5071  003498  D7FC               	bra	u7227
  5072  00349A  F000               	nop	
  5073                           
  5074                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5075  00349C  0E80               	movlw	128
  5076  00349E  ECDC  F023         	call	_lcdInst
  5077                           
  5078                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5079  0034A2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5080  0034A6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5081  0034AA  EC9F  F023         	call	_EEPROM_read	;wreg free
  5082  0034AE  0100               	movlb	0	; () banked
  5083  0034B0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5084  0034B2  A4D8               	btfss	status,2,c
  5085  0034B4  D024               	goto	l6054
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5089  0034B6  0E48               	movlw	low STR_66
  5090  0034B8  0100               	movlb	0	; () banked
  5091  0034BA  6F8E               	movwf	printf@f& (0+255),b
  5092  0034BC  0EFB               	movlw	high STR_66
  5093  0034BE  0100               	movlb	0	; () banked
  5094  0034C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5095  0034C2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5096  0034C6  0100               	movlb	0	; () banked
  5097  0034C8  6B91               	clrf	(?_printf+3)& (0+255),b
  5098  0034CA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5099  0034CE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5100  0034D2  ECB8  F008         	call	_printf	;wreg free
  5101                           
  5102                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5103  0034D6  0E00               	movlw	0
  5104  0034D8  0100               	movlb	0	; () banked
  5105  0034DA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5106  0034DC                     l6046:
  5107                           
  5108                           ; BSR set to: 0
  5109  0034DC  0E63               	movlw	99
  5110  0034DE  0100               	movlb	0	; () banked
  5111  0034E0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5112  0034E2  D001               	goto	l6050
  5113  0034E4  0012               	return	
  5114  0034E6                     l6050:
  5115                           
  5116                           ; BSR set to: 0
  5117  0034E6  0E68               	movlw	104
  5118  0034E8  0100               	movlb	0	; () banked
  5119  0034EA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5120  0034EC  0EE4               	movlw	228
  5121  0034EE                     u7237:
  5122  0034EE  2EE8               	decfsz	wreg,f,c
  5123  0034F0  D7FE               	bra	u7237
  5124  0034F2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5125  0034F4  D7FC               	bra	u7237
  5126  0034F6  F000               	nop	
  5127  0034F8  0100               	movlb	0	; () banked
  5128  0034FA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5129  0034FC  D7EF               	goto	l6046
  5130  0034FE                     l6054:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5134  0034FE  0EBD               	movlw	low STR_67
  5135  003500  0100               	movlb	0	; () banked
  5136  003502  6F8E               	movwf	printf@f& (0+255),b
  5137  003504  0EFF               	movlw	high STR_67
  5138  003506  0100               	movlb	0	; () banked
  5139  003508  6F8F               	movwf	(printf@f+1)& (0+255),b
  5140  00350A  ECB8  F008         	call	_printf	;wreg free
  5141  00350E  0E00               	movlw	0
  5142  003510  0100               	movlb	0	; () banked
  5143  003512  6FB0               	movwf	EEPROM_write@i_1323& (0+255),b
  5144  003514                     l6058:
  5145                           
  5146                           ; BSR set to: 0
  5147  003514  0E63               	movlw	99
  5148  003516  0100               	movlb	0	; () banked
  5149  003518  65B0               	cpfsgt	EEPROM_write@i_1323& (0+255),b
  5150  00351A  D001               	goto	l6062
  5151  00351C  0012               	return	
  5152  00351E                     l6062:
  5153                           
  5154                           ; BSR set to: 0
  5155  00351E  0E68               	movlw	104
  5156  003520  0100               	movlb	0	; () banked
  5157  003522  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5158  003524  0EE4               	movlw	228
  5159  003526                     u7247:
  5160  003526  2EE8               	decfsz	wreg,f,c
  5161  003528  D7FE               	bra	u7247
  5162  00352A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5163  00352C  D7FC               	bra	u7247
  5164  00352E  F000               	nop	
  5165  003530  0100               	movlb	0	; () banked
  5166  003532  2BB0               	incf	EEPROM_write@i_1323& (0+255),f,b
  5167  003534  D7EF               	goto	l6058
  5168  003536                     __end_of_EEPROM_write:
  5169                           	opt stack 0
  5170                           tblptru	equ	0xFF8
  5171                           tblptrh	equ	0xFF7
  5172                           tblptrl	equ	0xFF6
  5173                           tablat	equ	0xFF5
  5174                           prodh	equ	0xFF4
  5175                           prodl	equ	0xFF3
  5176                           intcon	equ	0xFF2
  5177                           intcon2	equ	0xFF1
  5178                           intcon3	equ	0xFF0
  5179                           postinc0	equ	0xFEE
  5180                           wreg	equ	0xFE8
  5181                           postdec1	equ	0xFE5
  5182                           fsr1l	equ	0xFE1
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _EEPROM_read *****************
  5191 ;; Defined at:
  5192 ;;		line 68 in file "EEPROM.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  address         2    0[BANK0 ] unsigned short 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      unsigned char 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:        2 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    7
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_Loading
  5217 ;;		_EEPROM_write
  5218 ;;		_logRun
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text14
  5223  00473E                     __ptext14:
  5224                           	opt stack 0
  5225  00473E                     _EEPROM_read:
  5226                           	opt stack 20
  5227                           
  5228                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5229                           
  5230                           ;incstack = 0
  5231  00473E  0100               	movlb	0	; () banked
  5232  004740  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5233  004742  6EAA               	movwf	4010,c	;volatile
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5237  004744  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5241  004748  9EA6               	bcf	4006,7,c	;volatile
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5245  00474A  9CA6               	bcf	4006,6,c	;volatile
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5249  00474C  80A6               	bsf	4006,0,c	;volatile
  5250  00474E                     l937:
  5251  00474E  B0A6               	btfsc	4006,0,c	;volatile
  5252  004750  D7FE               	goto	l937
  5253                           
  5254                           ;EEPROM.c: 81: return EEDATA;
  5255  004752  50A8               	movf	4008,w,c	;volatile
  5256  004754  0012               	return	
  5257  004756                     __end_of_EEPROM_read:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           intcon2	equ	0xFF1
  5267                           intcon3	equ	0xFF0
  5268                           postinc0	equ	0xFEE
  5269                           wreg	equ	0xFE8
  5270                           postdec1	equ	0xFE5
  5271                           fsr1l	equ	0xFE1
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function _initUI *****************
  5280 ;; Defined at:
  5281 ;;		line 62 in file "UI.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:   12
  5302 ;; This function calls:
  5303 ;;		_change_state_to_menu_start
  5304 ;;		_loadRTC
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text15
  5311  004510                     __ptext15:
  5312                           	opt stack 0
  5313  004510                     _initUI:
  5314                           	opt stack 18
  5315                           
  5316                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5317                           
  5318                           ;incstack = 0
  5319  004510  8EF2               	bsf	intcon,7,c	;volatile
  5320                           
  5321                           ;UI.c: 64: machine_state = UI_state;
  5322  004512  0E00               	movlw	0
  5323  004514  0100               	movlb	0	; () banked
  5324  004516  6FFC               	movwf	_machine_state& (0+255),b
  5325                           
  5326                           ;UI.c: 65: logstate = 0;
  5327  004518  0E00               	movlw	0
  5328  00451A  0100               	movlb	0	; () banked
  5329  00451C  6FF7               	movwf	(_logstate+1)& (0+255),b
  5330  00451E  0E00               	movlw	0
  5331  004520  6FF6               	movwf	_logstate& (0+255),b
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;UI.c: 67: if(RTCflag){
  5335  004522  0100               	movlb	0	; () banked
  5336  004524  51DE               	movf	_RTCflag& (0+255),w,b
  5337  004526  0100               	movlb	0	; () banked
  5338  004528  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5339  00452A  A4D8               	btfss	status,2,c
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;UI.c: 68: loadRTC();
  5343  00452C  EC14  F01D         	call	_loadRTC	;wreg free
  5344                           
  5345                           ;UI.c: 69: }
  5346                           ;UI.c: 71: change_state_to_menu_start();
  5347  004530  ECCD  F022         	call	_change_state_to_menu_start	;wreg free
  5348                           
  5349                           ;UI.c: 72: firstboot = 1;
  5350  004534  0E00               	movlw	0
  5351  004536  6E76               	movwf	_firstboot+1,c
  5352  004538  0E01               	movlw	1
  5353  00453A  6E75               	movwf	_firstboot,c
  5354  00453C  0012               	return		;funcret
  5355  00453E                     __end_of_initUI:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           intcon2	equ	0xFF1
  5365                           intcon3	equ	0xFF0
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           postdec1	equ	0xFE5
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _loadRTC *****************
  5378 ;; Defined at:
  5379 ;;		line 28 in file "RTC.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               2   22[BANK0 ] int 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;Total ram usage:        3 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    9
  5400 ;; This function calls:
  5401 ;;		_I2C_Master_Init
  5402 ;;		_I2C_Master_Start
  5403 ;;		_I2C_Master_Stop
  5404 ;;		_I2C_Master_Write
  5405 ;; This function is called by:
  5406 ;;		_initUI
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text16
  5411  003A28                     __ptext16:
  5412                           	opt stack 0
  5413  003A28                     _loadRTC:
  5414                           	opt stack 20
  5415                           
  5416                           ;RTC.c: 30: I2C_Master_Init(10000);
  5417                           
  5418                           ;incstack = 0
  5419  003A28  0E10               	movlw	16
  5420  003A2A  0100               	movlb	0	; () banked
  5421  003A2C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5422  003A2E  0E27               	movlw	39
  5423  003A30  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5424  003A32  0E00               	movlw	0
  5425  003A34  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5426  003A36  0E00               	movlw	0
  5427  003A38  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5428  003A3A  EC6C  F01F         	call	_I2C_Master_Init	;wreg free
  5429                           
  5430                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5431  003A3E  9EF2               	bcf	intcon,7,c	;volatile
  5432                           
  5433                           ;RTC.c: 34: I2C_Master_Start();
  5434  003A40  EC02  F024         	call	_I2C_Master_Start	;wreg free
  5435                           
  5436                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5437  003A44  0E00               	movlw	0
  5438  003A46  0100               	movlb	0	; () banked
  5439  003A48  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5440  003A4A  0ED0               	movlw	208
  5441  003A4C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5442  003A4E  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  5443                           
  5444                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5445  003A52  0E00               	movlw	0
  5446  003A54  0100               	movlb	0	; () banked
  5447  003A56  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5448  003A58  0E00               	movlw	0
  5449  003A5A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5450  003A5C  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  5451                           
  5452                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5453  003A60  0E00               	movlw	0
  5454  003A62  0100               	movlb	0	; () banked
  5455  003A64  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5456  003A66  0E00               	movlw	0
  5457  003A68  6F96               	movwf	loadRTC@i& (0+255),b
  5458  003A6A                     l6178:
  5459                           
  5460                           ; BSR set to: 0
  5461  003A6A  0100               	movlb	0	; () banked
  5462  003A6C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5463  003A6E  D008               	goto	l6182
  5464  003A70  0100               	movlb	0	; () banked
  5465  003A72  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5466  003A74  E11B               	bnz	l6188
  5467  003A76  0E07               	movlw	7
  5468  003A78  0100               	movlb	0	; () banked
  5469  003A7A  5D96               	subwf	loadRTC@i& (0+255),w,b
  5470  003A7C  B0D8               	btfsc	status,0,c
  5471  003A7E  D016               	goto	l6188
  5472  003A80                     l6182:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5476  003A80  0E24               	movlw	low _time
  5477  003A82  0100               	movlb	0	; () banked
  5478  003A84  2596               	addwf	loadRTC@i& (0+255),w,b
  5479  003A86  6ED9               	movwf	fsr2l,c
  5480  003A88  0E01               	movlw	high _time
  5481  003A8A  0100               	movlb	0	; () banked
  5482  003A8C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5483  003A8E  6EDA               	movwf	fsr2h,c
  5484  003A90  50DF               	movf	indf2,w,c
  5485  003A92  0100               	movlb	0	; () banked
  5486  003A94  6F95               	movwf	??_loadRTC& (0+255),b
  5487  003A96  0100               	movlb	0	; () banked
  5488  003A98  5195               	movf	??_loadRTC& (0+255),w,b
  5489  003A9A  0100               	movlb	0	; () banked
  5490  003A9C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5491  003A9E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5492  003AA0  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  5493  003AA4  0100               	movlb	0	; () banked
  5494  003AA6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5495  003AA8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5496  003AAA  D7DF               	goto	l6178
  5497  003AAC                     l6188:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;RTC.c: 39: }
  5501                           ;RTC.c: 40: I2C_Master_Stop();
  5502  003AAC  ECFE  F023         	call	_I2C_Master_Stop	;wreg free
  5503                           
  5504                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5505  003AB0  8EF2               	bsf	intcon,7,c	;volatile
  5506  003AB2  0012               	return		;funcret
  5507  003AB4                     __end_of_loadRTC:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           intcon2	equ	0xFF1
  5517                           intcon3	equ	0xFF0
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           postdec1	equ	0xFE5
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _I2C_Master_Init *****************
  5530 ;; Defined at:
  5531 ;;		line 15 in file "I2C.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  c               4   13[BANK0 ] const unsigned long 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5545 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;Total ram usage:        8 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    8
  5552 ;; This function calls:
  5553 ;;		___lldiv
  5554 ;; This function is called by:
  5555 ;;		_main
  5556 ;;		_loadRTC
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text17
  5561  003ED8                     __ptext17:
  5562                           	opt stack 0
  5563  003ED8                     _I2C_Master_Init:
  5564                           	opt stack 20
  5565                           
  5566                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5567                           
  5568                           ;incstack = 0
  5569  003ED8  0E00               	movlw	0
  5570  003EDA  6EC7               	movwf	4039,c	;volatile
  5571                           
  5572                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5573  003EDC  0E28               	movlw	40
  5574  003EDE  6EC6               	movwf	4038,c	;volatile
  5575                           
  5576                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5577  003EE0  0E00               	movlw	0
  5578  003EE2  6EC5               	movwf	4037,c	;volatile
  5579                           
  5580                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5581  003EE4  0E00               	movlw	0
  5582  003EE6  0100               	movlb	0	; () banked
  5583  003EE8  6F80               	movwf	___lldiv@dividend& (0+255),b
  5584  003EEA  0E48               	movlw	72
  5585  003EEC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5586  003EEE  0EE8               	movlw	232
  5587  003EF0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5588  003EF2  0E01               	movlw	1
  5589  003EF4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5590  003EF6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5591  003EFA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5592  003EFE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5593  003F02  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5594  003F06  0E02               	movlw	2
  5595  003F08                     u4505:
  5596  003F08  90D8               	bcf	status,0,c
  5597  003F0A  0100               	movlb	0	; () banked
  5598  003F0C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5599  003F0E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5600  003F10  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5601  003F12  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5602  003F14  2EE8               	decfsz	wreg,f,c
  5603  003F16  D7F8               	goto	u4505
  5604  003F18  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5605  003F1C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5606  003F20  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5607  003F24  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5608  003F28  ECC5  F01B         	call	___lldiv	;wreg free
  5609  003F2C  0100               	movlb	0	; () banked
  5610  003F2E  0580               	decf	?___lldiv& (0+255),w,b
  5611  003F30  6EC8               	movwf	4040,c	;volatile
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;I2C.c: 22: TRISC3 = 1;
  5615  003F32  8694               	bsf	3988,3,c	;volatile
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;I2C.c: 23: TRISC4 = 1;
  5619  003F34  8894               	bsf	3988,4,c	;volatile
  5620                           
  5621                           ; BSR set to: 0
  5622  003F36  0012               	return		;funcret
  5623  003F38                     __end_of_I2C_Master_Init:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           intcon	equ	0xFF2
  5632                           intcon2	equ	0xFF1
  5633                           intcon3	equ	0xFF0
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           postdec1	equ	0xFE5
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function ___lldiv *****************
  5646 ;; Defined at:
  5647 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  dividend        4    0[BANK0 ] unsigned long 
  5650 ;;  divisor         4    4[BANK0 ] unsigned long 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  quotient        4    8[BANK0 ] unsigned long 
  5653 ;;  counter         1   12[BANK0 ] unsigned char 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  4    0[BANK0 ] unsigned long 
  5656 ;; Registers used:
  5657 ;;		wreg, status,2, status,0
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5663 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;Total ram usage:       13 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:    7
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_I2C_Master_Init
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text18
  5678  00378A                     __ptext18:
  5679                           	opt stack 0
  5680  00378A                     ___lldiv:
  5681                           	opt stack 20
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;incstack = 0
  5685  00378A  0E00               	movlw	0
  5686  00378C  0100               	movlb	0	; () banked
  5687  00378E  6F88               	movwf	___lldiv@quotient& (0+255),b
  5688  003790  0E00               	movlw	0
  5689  003792  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5690  003794  0E00               	movlw	0
  5691  003796  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5692  003798  0E00               	movlw	0
  5693  00379A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5694                           
  5695                           ; BSR set to: 0
  5696  00379C  0100               	movlb	0	; () banked
  5697  00379E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5698  0037A0  0100               	movlb	0	; () banked
  5699  0037A2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5700  0037A4  0100               	movlb	0	; () banked
  5701  0037A6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5702  0037A8  0100               	movlb	0	; () banked
  5703  0037AA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5704  0037AC  B4D8               	btfsc	status,2,c
  5705  0037AE  D042               	goto	l1650
  5706                           
  5707                           ; BSR set to: 0
  5708  0037B0  0E01               	movlw	1
  5709  0037B2  0100               	movlb	0	; () banked
  5710  0037B4  6F8C               	movwf	___lldiv@counter& (0+255),b
  5711  0037B6  D008               	goto	l5618
  5712  0037B8                     l5616:
  5713                           
  5714                           ; BSR set to: 0
  5715  0037B8  0100               	movlb	0	; () banked
  5716  0037BA  90D8               	bcf	status,0,c
  5717  0037BC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5718  0037BE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5719  0037C0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5720  0037C2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5721  0037C4  0100               	movlb	0	; () banked
  5722  0037C6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5723  0037C8                     l5618:
  5724                           
  5725                           ; BSR set to: 0
  5726  0037C8  0100               	movlb	0	; () banked
  5727  0037CA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5728  0037CC  D7F5               	goto	l5616
  5729  0037CE                     l5620:
  5730                           
  5731                           ; BSR set to: 0
  5732  0037CE  0100               	movlb	0	; () banked
  5733  0037D0  90D8               	bcf	status,0,c
  5734  0037D2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5735  0037D4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5736  0037D6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5737  0037D8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5738                           
  5739                           ; BSR set to: 0
  5740  0037DA  0100               	movlb	0	; () banked
  5741  0037DC  5184               	movf	___lldiv@divisor& (0+255),w,b
  5742  0037DE  0100               	movlb	0	; () banked
  5743  0037E0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5744  0037E2  0100               	movlb	0	; () banked
  5745  0037E4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5746  0037E6  0100               	movlb	0	; () banked
  5747  0037E8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5748  0037EA  0100               	movlb	0	; () banked
  5749  0037EC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5750  0037EE  0100               	movlb	0	; () banked
  5751  0037F0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5752  0037F2  0100               	movlb	0	; () banked
  5753  0037F4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5754  0037F6  0100               	movlb	0	; () banked
  5755  0037F8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5756  0037FA  A0D8               	btfss	status,0,c
  5757  0037FC  D012               	goto	l5628
  5758                           
  5759                           ; BSR set to: 0
  5760  0037FE  0100               	movlb	0	; () banked
  5761  003800  5184               	movf	___lldiv@divisor& (0+255),w,b
  5762  003802  0100               	movlb	0	; () banked
  5763  003804  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5764  003806  0100               	movlb	0	; () banked
  5765  003808  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5766  00380A  0100               	movlb	0	; () banked
  5767  00380C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5768  00380E  0100               	movlb	0	; () banked
  5769  003810  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5770  003812  0100               	movlb	0	; () banked
  5771  003814  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5772  003816  0100               	movlb	0	; () banked
  5773  003818  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5774  00381A  0100               	movlb	0	; () banked
  5775  00381C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 0
  5778  00381E  0100               	movlb	0	; () banked
  5779  003820  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5780  003822                     l5628:
  5781                           
  5782                           ; BSR set to: 0
  5783  003822  0100               	movlb	0	; () banked
  5784  003824  90D8               	bcf	status,0,c
  5785  003826  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5786  003828  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5787  00382A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5788  00382C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5789                           
  5790                           ; BSR set to: 0
  5791  00382E  0100               	movlb	0	; () banked
  5792  003830  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5793  003832  D7CD               	goto	l5620
  5794  003834                     l1650:
  5795                           
  5796                           ; BSR set to: 0
  5797  003834  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5798  003838  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5799  00383C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5800  003840  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5801                           
  5802                           ; BSR set to: 0
  5803  003844  0012               	return		;funcret
  5804  003846                     __end_of___lldiv:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           intcon2	equ	0xFF1
  5814                           intcon3	equ	0xFF0
  5815                           postinc0	equ	0xFEE
  5816                           wreg	equ	0xFE8
  5817                           postdec1	equ	0xFE5
  5818                           fsr1l	equ	0xFE1
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _change_state_to_menu_start *****************
  5827 ;; Defined at:
  5828 ;;		line 474 in file "UI.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;Total ram usage:        0 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:   11
  5849 ;; This function calls:
  5850 ;;		_lcdInst
  5851 ;;		_printRTC
  5852 ;;		_printf
  5853 ;; This function is called by:
  5854 ;;		_initUI
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text19
  5859  00459A                     __ptext19:
  5860                           	opt stack 0
  5861  00459A                     _change_state_to_menu_start:
  5862                           	opt stack 18
  5863                           
  5864                           ;UI.c: 475: cur_state = 0;
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;incstack = 0
  5868  00459A  0E00               	movlw	0
  5869  00459C  0100               	movlb	0	; () banked
  5870  00459E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  5871  0045A0  0E00               	movlw	0
  5872  0045A2  6FE0               	movwf	_cur_state& (0+255),b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;UI.c: 477: lcdInst(0b10000000);;
  5876  0045A4  0E80               	movlw	128
  5877  0045A6  ECDC  F023         	call	_lcdInst
  5878                           
  5879                           ;UI.c: 478: printRTC();
  5880  0045AA  EC82  F00F         	call	_printRTC	;wreg free
  5881                           
  5882                           ;UI.c: 479: lcdInst(0b11000000);;
  5883  0045AE  0EC0               	movlw	192
  5884  0045B0  ECDC  F023         	call	_lcdInst
  5885                           
  5886                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  5887  0045B4  0E0D               	movlw	low STR_30
  5888  0045B6  0100               	movlb	0	; () banked
  5889  0045B8  6F8E               	movwf	printf@f& (0+255),b
  5890  0045BA  0EFE               	movlw	high STR_30
  5891  0045BC  0100               	movlb	0	; () banked
  5892  0045BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  5893  0045C0  ECB8  F008         	call	_printf	;wreg free
  5894  0045C4  0012               	return		;funcret
  5895  0045C6                     __end_of_change_state_to_menu_start:
  5896                           	opt stack 0
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           intcon2	equ	0xFF1
  5905                           intcon3	equ	0xFF0
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _initTime *****************
  5918 ;; Defined at:
  5919 ;;		line 17 in file "RTC.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  s               1    wreg     unsigned char 
  5922 ;;  m               1    0[BANK0 ] unsigned char 
  5923 ;;  h               1    1[BANK0 ] unsigned char 
  5924 ;;  w               1    2[BANK0 ] unsigned char 
  5925 ;;  DD              1    3[BANK0 ] unsigned char 
  5926 ;;  MM              1    4[BANK0 ] unsigned char 
  5927 ;;  YY              1    5[BANK0 ] unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  s               1    6[BANK0 ] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5939 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;Total ram usage:        7 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    7
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_main
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text20
  5954  0046FE                     __ptext20:
  5955                           	opt stack 0
  5956  0046FE                     _initTime:
  5957                           	opt stack 23
  5958                           
  5959                           ;incstack = 0
  5960                           ;initTime@s stored from wreg
  5961  0046FE  0100               	movlb	0	; () banked
  5962  004700  6F86               	movwf	initTime@s& (0+255),b
  5963                           
  5964                           ;RTC.c: 19: time[0] = s;
  5965  004702  C086  F124         	movff	initTime@s,_time
  5966                           
  5967                           ;RTC.c: 20: time[1] = m;
  5968  004706  C080  F125         	movff	initTime@m,_time+1
  5969                           
  5970                           ;RTC.c: 21: time[2] = h;
  5971  00470A  C081  F126         	movff	initTime@h,_time+2
  5972                           
  5973                           ;RTC.c: 22: time[3] = w;
  5974  00470E  C082  F127         	movff	initTime@w,_time+3
  5975                           
  5976                           ;RTC.c: 23: time[4] = DD;
  5977  004712  C083  F128         	movff	initTime@DD,_time+4
  5978                           
  5979                           ;RTC.c: 24: time[5] = MM;
  5980  004716  C084  F129         	movff	initTime@MM,_time+5
  5981                           
  5982                           ;RTC.c: 25: time[6] = YY;
  5983  00471A  C085  F12A         	movff	initTime@YY,_time+6
  5984  00471E  0012               	return		;funcret
  5985  004720                     __end_of_initTime:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           intcon2	equ	0xFF1
  5995                           intcon3	equ	0xFF0
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1l	equ	0xFE1
  6000                           indf2	equ	0xFDF
  6001                           postinc2	equ	0xFDE
  6002                           postdec2	equ	0xFDD
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _initLCD *****************
  6008 ;; Defined at:
  6009 ;;		line 48 in file "lcd.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;Total ram usage:        1 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    9
  6030 ;; This function calls:
  6031 ;;		_lcdInst
  6032 ;; This function is called by:
  6033 ;;		_main
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text21
  6038  0041CA                     __ptext21:
  6039                           	opt stack 0
  6040  0041CA                     _initLCD:
  6041                           	opt stack 21
  6042                           
  6043                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6044                           
  6045                           ;incstack = 0
  6046  0041CA  0E9C               	movlw	156
  6047  0041CC  0100               	movlb	0	; () banked
  6048  0041CE  6F83               	movwf	??_initLCD& (0+255),b
  6049  0041D0  0ED7               	movlw	215
  6050  0041D2                     u7257:
  6051  0041D2  2EE8               	decfsz	wreg,f,c
  6052  0041D4  D7FE               	bra	u7257
  6053  0041D6  2F83               	decfsz	??_initLCD& (0+255),f,b
  6054  0041D8  D7FC               	bra	u7257
  6055                           
  6056                           ;lcd.c: 50: lcdInst(0b00110011);
  6057  0041DA  0E33               	movlw	51
  6058  0041DC  ECDC  F023         	call	_lcdInst
  6059                           
  6060                           ;lcd.c: 51: lcdInst(0b00110010);
  6061  0041E0  0E32               	movlw	50
  6062  0041E2  ECDC  F023         	call	_lcdInst
  6063                           
  6064                           ;lcd.c: 53: lcdInst(0b00101000);
  6065  0041E6  0E28               	movlw	40
  6066  0041E8  ECDC  F023         	call	_lcdInst
  6067                           
  6068                           ;lcd.c: 54: lcdInst(0b00001100);
  6069  0041EC  0E0C               	movlw	12
  6070  0041EE  ECDC  F023         	call	_lcdInst
  6071                           
  6072                           ;lcd.c: 55: lcdInst(0b00000110);
  6073  0041F2  0E06               	movlw	6
  6074  0041F4  ECDC  F023         	call	_lcdInst
  6075                           
  6076                           ;lcd.c: 56: lcdInst(0b00000001);
  6077  0041F8  0E01               	movlw	1
  6078  0041FA  ECDC  F023         	call	_lcdInst
  6079                           
  6080                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6081  0041FE  0E9C               	movlw	156
  6082  004200  0100               	movlb	0	; () banked
  6083  004202  6F83               	movwf	??_initLCD& (0+255),b
  6084  004204  0ED7               	movlw	215
  6085  004206                     u7267:
  6086  004206  2EE8               	decfsz	wreg,f,c
  6087  004208  D7FE               	bra	u7267
  6088  00420A  2F83               	decfsz	??_initLCD& (0+255),f,b
  6089  00420C  D7FC               	bra	u7267
  6090  00420E  0012               	return		;funcret
  6091  004210                     __end_of_initLCD:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           intcon2	equ	0xFF1
  6101                           intcon3	equ	0xFF0
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _UI *****************
  6114 ;; Defined at:
  6115 ;;		line 76 in file "UI.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  i               1   73[BANK0 ] unsigned char 
  6120 ;;  i               1   85[BANK0 ] unsigned char 
  6121 ;;  i               1   84[BANK0 ] unsigned char 
  6122 ;;  i               1   83[BANK0 ] unsigned char 
  6123 ;;  i               1   82[BANK0 ] unsigned char 
  6124 ;;  i               1   81[BANK0 ] unsigned char 
  6125 ;;  i               1   80[BANK0 ] unsigned char 
  6126 ;;  i               1   79[BANK0 ] unsigned char 
  6127 ;;  i               1   78[BANK0 ] unsigned char 
  6128 ;;  i               1   77[BANK0 ] unsigned char 
  6129 ;;  i               1   76[BANK0 ] unsigned char 
  6130 ;;  i               1   75[BANK0 ] unsigned char 
  6131 ;;  i               1   74[BANK0 ] unsigned char 
  6132 ;;  month           4   86[BANK0 ] unsigned char [4]
  6133 ;;  i               1   72[BANK0 ] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      void 
  6136 ;; Registers used:
  6137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;Total ram usage:       22 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:   11
  6150 ;; This function calls:
  6151 ;;		___awdiv
  6152 ;;		___awmod
  6153 ;;		_change_state_to_menu_12
  6154 ;;		_change_state_to_menu_22
  6155 ;;		_lcdInst
  6156 ;;		_printRTC
  6157 ;;		_printf
  6158 ;;		_strcpy
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text22
  6165  0008CA                     __ptext22:
  6166                           	opt stack 0
  6167  0008CA                     _UI:
  6168                           	opt stack 19
  6169                           
  6170                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6171                           
  6172                           ;incstack = 0
  6173  0008CA  0E02               	movlw	2
  6174  0008CC  0100               	movlb	0	; () banked
  6175  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6176  0008D0  A4D8               	btfss	status,2,c
  6177  0008D2  D075               	goto	l7410
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6181  0008D4  0E01               	movlw	1
  6182  0008D6  ECDC  F023         	call	_lcdInst
  6183  0008DA  0E68               	movlw	104
  6184  0008DC  0100               	movlb	0	; () banked
  6185  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6186  0008E0  0EE4               	movlw	228
  6187  0008E2                     u7277:
  6188  0008E2  2EE8               	decfsz	wreg,f,c
  6189  0008E4  D7FE               	bra	u7277
  6190  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6191  0008E8  D7FC               	bra	u7277
  6192  0008EA  F000               	nop	
  6193                           
  6194                           ;UI.c: 79: lcdInst(0b10000000);;
  6195  0008EC  0E80               	movlw	128
  6196  0008EE  ECDC  F023         	call	_lcdInst
  6197                           
  6198                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6199  0008F2  0EB9               	movlw	low STR_1
  6200  0008F4  0100               	movlb	0	; () banked
  6201  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6202  0008F8  0EFB               	movlw	high STR_1
  6203  0008FA  0100               	movlb	0	; () banked
  6204  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6205  0008FE  0E01               	movlw	1
  6206  000900  0100               	movlb	0	; () banked
  6207  000902  25FD               	addwf	_sel& (0+255),w,b
  6208  000904  0100               	movlb	0	; () banked
  6209  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6210  000908  0100               	movlb	0	; () banked
  6211  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6212  00090C  0E00               	movlw	0
  6213  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6214  000910  ECB8  F008         	call	_printf	;wreg free
  6215                           
  6216                           ;UI.c: 81: lcdInst(0b11000000);;
  6217  000914  0EC0               	movlw	192
  6218  000916  ECDC  F023         	call	_lcdInst
  6219                           
  6220                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6221  00091A  0E0E               	movlw	14
  6222  00091C  0100               	movlb	0	; () banked
  6223  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6224  000920  0E10               	movlw	16
  6225  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6226  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6227  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6228  00092C  EC78  F01C         	call	___awmod	;wreg free
  6229  000930  C080  F0C6         	movff	?___awmod,_UI$2294
  6230  000934  C081  F0C7         	movff	?___awmod+1,_UI$2294+1
  6231                           
  6232                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6233  000938  0E1B               	movlw	low STR_2
  6234  00093A  0100               	movlb	0	; () banked
  6235  00093C  6F8E               	movwf	printf@f& (0+255),b
  6236  00093E  0EFF               	movlw	high STR_2
  6237  000940  0100               	movlb	0	; () banked
  6238  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6239  000944  0E0E               	movlw	14
  6240  000946  0100               	movlb	0	; () banked
  6241  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6242  00094A  0E10               	movlw	16
  6243  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6244  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6245  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6246  000956  EC78  F01C         	call	___awmod	;wreg free
  6247  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6248  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6249  000962  0E00               	movlw	0
  6250  000964  0100               	movlb	0	; () banked
  6251  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6252  000968  0E3C               	movlw	60
  6253  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6254  00096C  EC66  F01B         	call	___awdiv	;wreg free
  6255  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6256  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6257  000978  C0C6  F080         	movff	_UI$2294,___awmod@dividend
  6258  00097C  C0C7  F081         	movff	_UI$2294+1,___awmod@dividend+1
  6259  000980  0E00               	movlw	0
  6260  000982  0100               	movlb	0	; () banked
  6261  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6262  000986  0E3C               	movlw	60
  6263  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6264  00098A  EC78  F01C         	call	___awmod	;wreg free
  6265  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6266  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6267  000996  ECB8  F008         	call	_printf	;wreg free
  6268                           
  6269                           ;UI.c: 83: machine_state = UI_state;
  6270  00099A  0E00               	movlw	0
  6271  00099C  0100               	movlb	0	; () banked
  6272  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6273  0009A0                     l180:
  6274  0009A0  A281               	btfss	3969,1,c	;volatile
  6275  0009A2  D7FE               	goto	l180
  6276                           
  6277                           ;UI.c: 86: }
  6278                           ;UI.c: 87: if(cur_state==12){
  6279  0009A4  0E0C               	movlw	12
  6280  0009A6  0100               	movlb	0	; () banked
  6281  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6282  0009AA  0100               	movlb	0	; () banked
  6283  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6284  0009AE  A4D8               	btfss	status,2,c
  6285  0009B0  D003               	goto	l7408
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;UI.c: 88: change_state_to_menu_12();
  6289  0009B2  EC45  F021         	call	_change_state_to_menu_12	;wreg free
  6290                           
  6291                           ;UI.c: 89: }
  6292  0009B6  D3D5               	goto	l7730
  6293  0009B8                     l7408:
  6294                           
  6295                           ;UI.c: 90: else{
  6296                           ;UI.c: 91: change_state_to_menu_22();
  6297  0009B8  EC29  F021         	call	_change_state_to_menu_22	;wreg free
  6298                           
  6299                           ;UI.c: 92: }
  6300                           ;UI.c: 93: }
  6301  0009BC  D3D2               	goto	l7730
  6302  0009BE                     l7410:
  6303                           
  6304                           ;UI.c: 94: else if(cur_state == 0){
  6305  0009BE  0100               	movlb	0	; () banked
  6306  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6307  0009C2  0100               	movlb	0	; () banked
  6308  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6309  0009C6  A4D8               	btfss	status,2,c
  6310  0009C8  D3CC               	goto	l7730
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6314  0009CA  0E00               	movlw	0
  6315  0009CC  0100               	movlb	0	; () banked
  6316  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6317  0009D0                     l7414:
  6318                           
  6319                           ; BSR set to: 0
  6320  0009D0  0E63               	movlw	99
  6321  0009D2  0100               	movlb	0	; () banked
  6322  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6323  0009D6  D001               	goto	l7418
  6324  0009D8  D00C               	goto	l7422
  6325  0009DA                     l7418:
  6326                           
  6327                           ; BSR set to: 0
  6328  0009DA  0E68               	movlw	104
  6329  0009DC  0100               	movlb	0	; () banked
  6330  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6331  0009E0  0EE4               	movlw	228
  6332  0009E2                     u7287:
  6333  0009E2  2EE8               	decfsz	wreg,f,c
  6334  0009E4  D7FE               	bra	u7287
  6335  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6336  0009E8  D7FC               	bra	u7287
  6337  0009EA  F000               	nop	
  6338  0009EC  0100               	movlb	0	; () banked
  6339  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6340  0009F0  D7EF               	goto	l7414
  6341  0009F2                     l7422:
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;UI.c: 96: if(cur_state == 0){
  6345  0009F2  0100               	movlb	0	; () banked
  6346  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6347  0009F6  0100               	movlb	0	; () banked
  6348  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6349  0009FA  A4D8               	btfss	status,2,c
  6350  0009FC  D3B2               	goto	l7730
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;UI.c: 97: printRTC();
  6354  0009FE  EC82  F00F         	call	_printRTC	;wreg free
  6355                           
  6356                           ;UI.c: 98: }
  6357                           ;UI.c: 99: }
  6358                           ;UI.c: 100: while(logstate){
  6359  000A02  D3AF               	goto	l7730
  6360  000A04                     l7426:
  6361                           
  6362                           ;UI.c: 102: if(!log_completion){
  6363  000A04  0100               	movlb	0	; () banked
  6364  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6365  000A08  0100               	movlb	0	; () banked
  6366  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6367  000A0C  A4D8               	btfss	status,2,c
  6368  000A0E  D041               	goto	l7456
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6372  000A10  0E01               	movlw	1
  6373  000A12  ECDC  F023         	call	_lcdInst
  6374  000A16  0E68               	movlw	104
  6375  000A18  0100               	movlb	0	; () banked
  6376  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6377  000A1C  0EE4               	movlw	228
  6378  000A1E                     u7297:
  6379  000A1E  2EE8               	decfsz	wreg,f,c
  6380  000A20  D7FE               	bra	u7297
  6381  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6382  000A24  D7FC               	bra	u7297
  6383  000A26  F000               	nop	
  6384                           
  6385                           ;UI.c: 104: lcdInst(0b10000000);;
  6386  000A28  0E80               	movlw	128
  6387  000A2A  ECDC  F023         	call	_lcdInst
  6388                           
  6389                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6390  000A2E  0EA7               	movlw	low STR_3
  6391  000A30  0100               	movlb	0	; () banked
  6392  000A32  6F8E               	movwf	printf@f& (0+255),b
  6393  000A34  0EFB               	movlw	high STR_3
  6394  000A36  0100               	movlb	0	; () banked
  6395  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6396  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6397  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6398  000A42  ECB8  F008         	call	_printf	;wreg free
  6399                           
  6400                           ;UI.c: 106: lcdInst(0b11000000);;
  6401  000A46  0EC0               	movlw	192
  6402  000A48  ECDC  F023         	call	_lcdInst
  6403                           
  6404                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6405  000A4C  0E3E               	movlw	low STR_4
  6406  000A4E  0100               	movlb	0	; () banked
  6407  000A50  6F8E               	movwf	printf@f& (0+255),b
  6408  000A52  0EFE               	movlw	high STR_4
  6409  000A54  0100               	movlb	0	; () banked
  6410  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6411  000A58  ECB8  F008         	call	_printf	;wreg free
  6412  000A5C                     l7440:
  6413  000A5C  0E00               	movlw	0
  6414  000A5E  0100               	movlb	0	; () banked
  6415  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6416  000A62                     l7442:
  6417                           
  6418                           ; BSR set to: 0
  6419  000A62  0E63               	movlw	99
  6420  000A64  0100               	movlb	0	; () banked
  6421  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6422  000A68  D001               	goto	l7446
  6423  000A6A  D00C               	goto	l7450
  6424  000A6C                     l7446:
  6425                           
  6426                           ; BSR set to: 0
  6427  000A6C  0E68               	movlw	104
  6428  000A6E  0100               	movlb	0	; () banked
  6429  000A70  6FC4               	movwf	??_UI& (0+255),b
  6430  000A72  0EE4               	movlw	228
  6431  000A74                     u7307:
  6432  000A74  2EE8               	decfsz	wreg,f,c
  6433  000A76  D7FE               	bra	u7307
  6434  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6435  000A7A  D7FC               	bra	u7307
  6436  000A7C  F000               	nop	
  6437  000A7E  0100               	movlb	0	; () banked
  6438  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6439  000A82  D7EF               	goto	l7442
  6440  000A84                     l7450:
  6441                           
  6442                           ; BSR set to: 0
  6443  000A84  0100               	movlb	0	; () banked
  6444  000A86  51F6               	movf	_logstate& (0+255),w,b
  6445  000A88  0100               	movlb	0	; () banked
  6446  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6447  000A8C  B4D8               	btfsc	status,2,c
  6448  000A8E  0012               	return	
  6449  000A90  D7E5               	goto	l7440
  6450  000A92                     l7456:
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;UI.c: 111: else{
  6454                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6455  000A92  0E01               	movlw	1
  6456  000A94  ECDC  F023         	call	_lcdInst
  6457  000A98  0E68               	movlw	104
  6458  000A9A  0100               	movlb	0	; () banked
  6459  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6460  000A9E  0EE4               	movlw	228
  6461  000AA0                     u7317:
  6462  000AA0  2EE8               	decfsz	wreg,f,c
  6463  000AA2  D7FE               	bra	u7317
  6464  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6465  000AA6  D7FC               	bra	u7317
  6466  000AA8  F000               	nop	
  6467                           
  6468                           ;UI.c: 113: lcdInst(0b10000000);;
  6469  000AAA  0E80               	movlw	128
  6470  000AAC  ECDC  F023         	call	_lcdInst
  6471                           
  6472                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6473  000AB0  0EA7               	movlw	low STR_3
  6474  000AB2  0100               	movlb	0	; () banked
  6475  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6476  000AB6  0EFB               	movlw	high STR_3
  6477  000AB8  0100               	movlb	0	; () banked
  6478  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6479  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6480  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6481  000AC4  ECB8  F008         	call	_printf	;wreg free
  6482                           
  6483                           ;UI.c: 115: lcdInst(0b11000000);;
  6484  000AC8  0EC0               	movlw	192
  6485  000ACA  ECDC  F023         	call	_lcdInst
  6486                           
  6487                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6488  000ACE  0EFC               	movlw	low STR_6
  6489  000AD0  0100               	movlb	0	; () banked
  6490  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6491  000AD4  0EFD               	movlw	high STR_6
  6492  000AD6  0100               	movlb	0	; () banked
  6493  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6494  000ADA  ECB8  F008         	call	_printf	;wreg free
  6495                           
  6496                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6497  000ADE  0E00               	movlw	0
  6498  000AE0  0100               	movlb	0	; () banked
  6499  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6500  000AE4                     l7470:
  6501                           
  6502                           ; BSR set to: 0
  6503  000AE4  0E63               	movlw	99
  6504  000AE6  0100               	movlb	0	; () banked
  6505  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6506  000AEA  D001               	goto	l7474
  6507  000AEC  D00C               	goto	l7478
  6508  000AEE                     l7474:
  6509                           
  6510                           ; BSR set to: 0
  6511  000AEE  0E68               	movlw	104
  6512  000AF0  0100               	movlb	0	; () banked
  6513  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6514  000AF4  0EE4               	movlw	228
  6515  000AF6                     u7327:
  6516  000AF6  2EE8               	decfsz	wreg,f,c
  6517  000AF8  D7FE               	bra	u7327
  6518  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6519  000AFC  D7FC               	bra	u7327
  6520  000AFE  F000               	nop	
  6521  000B00  0100               	movlb	0	; () banked
  6522  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6523  000B04  D7EF               	goto	l7470
  6524  000B06                     l7478:
  6525                           
  6526                           ; BSR set to: 0
  6527  000B06  0100               	movlb	0	; () banked
  6528  000B08  51F6               	movf	_logstate& (0+255),w,b
  6529  000B0A  0100               	movlb	0	; () banked
  6530  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6531  000B0E  B4D8               	btfsc	status,2,c
  6532  000B10  0012               	return	
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6536                           
  6537                           ; BSR set to: 0
  6538                           
  6539                           ; BSR set to: 0
  6540  000B12  0E00               	movlw	0
  6541  000B14  0100               	movlb	0	; () banked
  6542  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6543  000B18                     l7484:
  6544                           
  6545                           ; BSR set to: 0
  6546  000B18  0E63               	movlw	99
  6547  000B1A  0100               	movlb	0	; () banked
  6548  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6549  000B1E  D001               	goto	l7488
  6550  000B20  D00C               	goto	l7492
  6551  000B22                     l7488:
  6552                           
  6553                           ; BSR set to: 0
  6554  000B22  0E68               	movlw	104
  6555  000B24  0100               	movlb	0	; () banked
  6556  000B26  6FC4               	movwf	??_UI& (0+255),b
  6557  000B28  0EE4               	movlw	228
  6558  000B2A                     u7337:
  6559  000B2A  2EE8               	decfsz	wreg,f,c
  6560  000B2C  D7FE               	bra	u7337
  6561  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6562  000B30  D7FC               	bra	u7337
  6563  000B32  F000               	nop	
  6564  000B34  0100               	movlb	0	; () banked
  6565  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6566  000B38  D7EF               	goto	l7484
  6567  000B3A                     l7492:
  6568                           
  6569                           ; BSR set to: 0
  6570  000B3A  0100               	movlb	0	; () banked
  6571  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6572  000B3E  0100               	movlb	0	; () banked
  6573  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6574  000B42  B4D8               	btfsc	status,2,c
  6575  000B44  0012               	return	
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6579                           
  6580                           ; BSR set to: 0
  6581                           
  6582                           ; BSR set to: 0
  6583  000B46  0E01               	movlw	1
  6584  000B48  ECDC  F023         	call	_lcdInst
  6585  000B4C  0E68               	movlw	104
  6586  000B4E  0100               	movlb	0	; () banked
  6587  000B50  6FC4               	movwf	??_UI& (0+255),b
  6588  000B52  0EE4               	movlw	228
  6589  000B54                     u7347:
  6590  000B54  2EE8               	decfsz	wreg,f,c
  6591  000B56  D7FE               	bra	u7347
  6592  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6593  000B5A  D7FC               	bra	u7347
  6594  000B5C  F000               	nop	
  6595                           
  6596                           ;UI.c: 122: lcdInst(0b10000000);;
  6597  000B5E  0E80               	movlw	128
  6598  000B60  ECDC  F023         	call	_lcdInst
  6599                           
  6600                           ;UI.c: 123: printf("START:");
  6601  000B64  0EC4               	movlw	low STR_7
  6602  000B66  0100               	movlb	0	; () banked
  6603  000B68  6F8E               	movwf	printf@f& (0+255),b
  6604  000B6A  0EFF               	movlw	high STR_7
  6605  000B6C  0100               	movlb	0	; () banked
  6606  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6607  000B70  ECB8  F008         	call	_printf	;wreg free
  6608                           
  6609                           ;UI.c: 124: lcdInst(0b11000000);;
  6610  000B74  0EC0               	movlw	192
  6611  000B76  ECDC  F023         	call	_lcdInst
  6612                           
  6613                           ;UI.c: 125: char month[] = "MMM";
  6614  000B7A  C12F  F0D6         	movff	UI@F3223,UI@month
  6615  000B7E  C130  F0D7         	movff	UI@F3223+1,UI@month+1
  6616  000B82  C131  F0D8         	movff	UI@F3223+2,UI@month+2
  6617  000B86  C132  F0D9         	movff	UI@F3223+3,UI@month+3
  6618                           
  6619                           ;UI.c: 126: switch(log_startTime[5]){
  6620  000B8A  D0C3               	goto	l7536
  6621  000B8C                     l7508:
  6622                           
  6623                           ;UI.c: 128: strcpy(month, "JAN");
  6624  000B8C  0ED6               	movlw	low UI@month
  6625  000B8E  0100               	movlb	0	; () banked
  6626  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6627  000B92  0E00               	movlw	high UI@month
  6628  000B94  0100               	movlb	0	; () banked
  6629  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6630  000B98  0EDB               	movlw	low STR_8
  6631  000B9A  0100               	movlb	0	; () banked
  6632  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6633  000B9E  0EFF               	movlw	high STR_8
  6634  000BA0  0100               	movlb	0	; () banked
  6635  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6636  000BA4  EC61  F021         	call	_strcpy	;wreg free
  6637                           
  6638                           ;UI.c: 129: break;
  6639  000BA8  D0E6               	goto	l7538
  6640  000BAA                     l7510:
  6641                           
  6642                           ;UI.c: 131: strcpy(month, "FEB");
  6643  000BAA  0ED6               	movlw	low UI@month
  6644  000BAC  0100               	movlb	0	; () banked
  6645  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6646  000BB0  0E00               	movlw	high UI@month
  6647  000BB2  0100               	movlb	0	; () banked
  6648  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6649  000BB6  0ECB               	movlw	low STR_9
  6650  000BB8  0100               	movlb	0	; () banked
  6651  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6652  000BBC  0EFF               	movlw	high STR_9
  6653  000BBE  0100               	movlb	0	; () banked
  6654  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6655  000BC2  EC61  F021         	call	_strcpy	;wreg free
  6656                           
  6657                           ;UI.c: 132: break;
  6658  000BC6  D0D7               	goto	l7538
  6659  000BC8                     l7512:
  6660                           
  6661                           ;UI.c: 134: strcpy(month, "MAR");
  6662  000BC8  0ED6               	movlw	low UI@month
  6663  000BCA  0100               	movlb	0	; () banked
  6664  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6665  000BCE  0E00               	movlw	high UI@month
  6666  000BD0  0100               	movlb	0	; () banked
  6667  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6668  000BD4  0EE7               	movlw	low STR_10
  6669  000BD6  0100               	movlb	0	; () banked
  6670  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6671  000BDA  0EFF               	movlw	high STR_10
  6672  000BDC  0100               	movlb	0	; () banked
  6673  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6674  000BE0  EC61  F021         	call	_strcpy	;wreg free
  6675                           
  6676                           ;UI.c: 135: break;
  6677  000BE4  D0C8               	goto	l7538
  6678  000BE6                     l7514:
  6679                           
  6680                           ;UI.c: 137: strcpy(month, "APR");
  6681  000BE6  0ED6               	movlw	low UI@month
  6682  000BE8  0100               	movlb	0	; () banked
  6683  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6684  000BEC  0E00               	movlw	high UI@month
  6685  000BEE  0100               	movlb	0	; () banked
  6686  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6687  000BF2  0EEB               	movlw	low STR_11
  6688  000BF4  0100               	movlb	0	; () banked
  6689  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6690  000BF8  0EFF               	movlw	high STR_11
  6691  000BFA  0100               	movlb	0	; () banked
  6692  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6693  000BFE  EC61  F021         	call	_strcpy	;wreg free
  6694                           
  6695                           ;UI.c: 138: break;
  6696  000C02  D0B9               	goto	l7538
  6697  000C04                     l7516:
  6698                           
  6699                           ;UI.c: 140: strcpy(month, "MAY");
  6700  000C04  0ED6               	movlw	low UI@month
  6701  000C06  0100               	movlb	0	; () banked
  6702  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6703  000C0A  0E00               	movlw	high UI@month
  6704  000C0C  0100               	movlb	0	; () banked
  6705  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6706  000C10  0EFB               	movlw	low STR_12
  6707  000C12  0100               	movlb	0	; () banked
  6708  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6709  000C16  0EFF               	movlw	high STR_12
  6710  000C18  0100               	movlb	0	; () banked
  6711  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6712  000C1C  EC61  F021         	call	_strcpy	;wreg free
  6713                           
  6714                           ;UI.c: 141: break;
  6715  000C20  D0AA               	goto	l7538
  6716  000C22                     l7518:
  6717                           
  6718                           ;UI.c: 143: strcpy(month, "JUN");
  6719  000C22  0ED6               	movlw	low UI@month
  6720  000C24  0100               	movlb	0	; () banked
  6721  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6722  000C28  0E00               	movlw	high UI@month
  6723  000C2A  0100               	movlb	0	; () banked
  6724  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6725  000C2E  0EDF               	movlw	low STR_13
  6726  000C30  0100               	movlb	0	; () banked
  6727  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6728  000C34  0EFF               	movlw	high STR_13
  6729  000C36  0100               	movlb	0	; () banked
  6730  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6731  000C3A  EC61  F021         	call	_strcpy	;wreg free
  6732                           
  6733                           ;UI.c: 144: break;
  6734  000C3E  D09B               	goto	l7538
  6735  000C40                     l7520:
  6736                           
  6737                           ;UI.c: 146: strcpy(month, "JUL");
  6738  000C40  0ED6               	movlw	low UI@month
  6739  000C42  0100               	movlb	0	; () banked
  6740  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6741  000C46  0E00               	movlw	high UI@month
  6742  000C48  0100               	movlb	0	; () banked
  6743  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6744  000C4C  0ED7               	movlw	low STR_14
  6745  000C4E  0100               	movlb	0	; () banked
  6746  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6747  000C52  0EFF               	movlw	high STR_14
  6748  000C54  0100               	movlb	0	; () banked
  6749  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6750  000C58  EC61  F021         	call	_strcpy	;wreg free
  6751                           
  6752                           ;UI.c: 147: break;
  6753  000C5C  D08C               	goto	l7538
  6754  000C5E                     l7522:
  6755                           
  6756                           ;UI.c: 149: strcpy(month, "AUG");
  6757  000C5E  0ED6               	movlw	low UI@month
  6758  000C60  0100               	movlb	0	; () banked
  6759  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6760  000C64  0E00               	movlw	high UI@month
  6761  000C66  0100               	movlb	0	; () banked
  6762  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6763  000C6A  0ED3               	movlw	low STR_15
  6764  000C6C  0100               	movlb	0	; () banked
  6765  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6766  000C70  0EFF               	movlw	high STR_15
  6767  000C72  0100               	movlb	0	; () banked
  6768  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6769  000C76  EC61  F021         	call	_strcpy	;wreg free
  6770                           
  6771                           ;UI.c: 150: break;
  6772  000C7A  D07D               	goto	l7538
  6773  000C7C                     l7524:
  6774                           
  6775                           ;UI.c: 152: strcpy(month, "SEP");
  6776  000C7C  0ED6               	movlw	low UI@month
  6777  000C7E  0100               	movlb	0	; () banked
  6778  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6779  000C82  0E00               	movlw	high UI@month
  6780  000C84  0100               	movlb	0	; () banked
  6781  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6782  000C88  0EE3               	movlw	low STR_16
  6783  000C8A  0100               	movlb	0	; () banked
  6784  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6785  000C8E  0EFF               	movlw	high STR_16
  6786  000C90  0100               	movlb	0	; () banked
  6787  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6788  000C94  EC61  F021         	call	_strcpy	;wreg free
  6789                           
  6790                           ;UI.c: 153: break;
  6791  000C98  D06E               	goto	l7538
  6792  000C9A                     l7526:
  6793                           
  6794                           ;UI.c: 155: strcpy(month, "OCT");
  6795  000C9A  0ED6               	movlw	low UI@month
  6796  000C9C  0100               	movlb	0	; () banked
  6797  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6798  000CA0  0E00               	movlw	high UI@month
  6799  000CA2  0100               	movlb	0	; () banked
  6800  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6801  000CA6  0EF3               	movlw	low STR_17
  6802  000CA8  0100               	movlb	0	; () banked
  6803  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6804  000CAC  0EFF               	movlw	high STR_17
  6805  000CAE  0100               	movlb	0	; () banked
  6806  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6807  000CB2  EC61  F021         	call	_strcpy	;wreg free
  6808                           
  6809                           ;UI.c: 156: break;
  6810  000CB6  D05F               	goto	l7538
  6811  000CB8                     l7528:
  6812                           
  6813                           ;UI.c: 158: strcpy(month, "NOV");
  6814  000CB8  0ED6               	movlw	low UI@month
  6815  000CBA  0100               	movlb	0	; () banked
  6816  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6817  000CBE  0E00               	movlw	high UI@month
  6818  000CC0  0100               	movlb	0	; () banked
  6819  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6820  000CC4  0EF7               	movlw	low STR_18
  6821  000CC6  0100               	movlb	0	; () banked
  6822  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6823  000CCA  0EFF               	movlw	high STR_18
  6824  000CCC  0100               	movlb	0	; () banked
  6825  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6826  000CD0  EC61  F021         	call	_strcpy	;wreg free
  6827                           
  6828                           ;UI.c: 159: break;
  6829  000CD4  D050               	goto	l7538
  6830  000CD6                     l7530:
  6831                           
  6832                           ;UI.c: 161: strcpy(month, "DEC");
  6833  000CD6  0ED6               	movlw	low UI@month
  6834  000CD8  0100               	movlb	0	; () banked
  6835  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6836  000CDC  0E00               	movlw	high UI@month
  6837  000CDE  0100               	movlb	0	; () banked
  6838  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6839  000CE2  0ECF               	movlw	low STR_19
  6840  000CE4  0100               	movlb	0	; () banked
  6841  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6842  000CE8  0EFF               	movlw	high STR_19
  6843  000CEA  0100               	movlb	0	; () banked
  6844  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6845  000CEE  EC61  F021         	call	_strcpy	;wreg free
  6846                           
  6847                           ;UI.c: 162: break;
  6848  000CF2  D041               	goto	l7538
  6849  000CF4                     l7532:
  6850                           
  6851                           ;UI.c: 164: strcpy(month, "ERR");
  6852  000CF4  0ED6               	movlw	low UI@month
  6853  000CF6  0100               	movlb	0	; () banked
  6854  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6855  000CFA  0E00               	movlw	high UI@month
  6856  000CFC  0100               	movlb	0	; () banked
  6857  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6858  000D00  0EEF               	movlw	low STR_20
  6859  000D02  0100               	movlb	0	; () banked
  6860  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6861  000D06  0EFF               	movlw	high STR_20
  6862  000D08  0100               	movlb	0	; () banked
  6863  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6864  000D0C  EC61  F021         	call	_strcpy	;wreg free
  6865                           
  6866                           ;UI.c: 166: }
  6867                           
  6868                           ;UI.c: 165: break;
  6869  000D10  D032               	goto	l7538
  6870  000D12                     l7536:
  6871  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6872  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6873  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6874                           
  6875                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6876                           ; Switch size 1, requested type "space"
  6877                           ; Number of cases is 1, Range of values is 0 to 0
  6878                           ; switch strategies available:
  6879                           ; Name         Instructions Cycles
  6880                           ; simple_byte            4     3 (average)
  6881                           ;	Chosen strategy is simple_byte
  6882  000D1E  0100               	movlb	0	; () banked
  6883  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6884  000D22  0A00               	xorlw	0	; case 0
  6885  000D24  A4D8               	btfss	status,2,c
  6886  000D26  D7E6               	goto	l7532
  6887                           
  6888                           ; BSR set to: 0
  6889                           ; Switch size 1, requested type "space"
  6890                           ; Number of cases is 12, Range of values is 1 to 12
  6891                           ; switch strategies available:
  6892                           ; Name         Instructions Cycles
  6893                           ; simple_byte           37    19 (average)
  6894                           ;	Chosen strategy is simple_byte
  6895  000D28  0100               	movlb	0	; () banked
  6896  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6897  000D2C  0A01               	xorlw	1	; case 1
  6898  000D2E  B4D8               	btfsc	status,2,c
  6899  000D30  D72D               	goto	l7508
  6900  000D32  0A03               	xorlw	3	; case 2
  6901  000D34  B4D8               	btfsc	status,2,c
  6902  000D36  D739               	goto	l7510
  6903  000D38  0A01               	xorlw	1	; case 3
  6904  000D3A  B4D8               	btfsc	status,2,c
  6905  000D3C  D745               	goto	l7512
  6906  000D3E  0A07               	xorlw	7	; case 4
  6907  000D40  B4D8               	btfsc	status,2,c
  6908  000D42  D751               	goto	l7514
  6909  000D44  0A01               	xorlw	1	; case 5
  6910  000D46  B4D8               	btfsc	status,2,c
  6911  000D48  D75D               	goto	l7516
  6912  000D4A  0A03               	xorlw	3	; case 6
  6913  000D4C  B4D8               	btfsc	status,2,c
  6914  000D4E  D769               	goto	l7518
  6915  000D50  0A01               	xorlw	1	; case 7
  6916  000D52  B4D8               	btfsc	status,2,c
  6917  000D54  D775               	goto	l7520
  6918  000D56  0A0F               	xorlw	15	; case 8
  6919  000D58  B4D8               	btfsc	status,2,c
  6920  000D5A  D781               	goto	l7522
  6921  000D5C  0A01               	xorlw	1	; case 9
  6922  000D5E  B4D8               	btfsc	status,2,c
  6923  000D60  D78D               	goto	l7524
  6924  000D62  0A03               	xorlw	3	; case 10
  6925  000D64  B4D8               	btfsc	status,2,c
  6926  000D66  D799               	goto	l7526
  6927  000D68  0A01               	xorlw	1	; case 11
  6928  000D6A  B4D8               	btfsc	status,2,c
  6929  000D6C  D7A5               	goto	l7528
  6930  000D6E  0A07               	xorlw	7	; case 12
  6931  000D70  B4D8               	btfsc	status,2,c
  6932  000D72  D7B1               	goto	l7530
  6933  000D74  D7BF               	goto	l7532
  6934  000D76                     l7538:
  6935                           
  6936                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6937  000D76  0E30               	movlw	low STR_21
  6938  000D78  0100               	movlb	0	; () banked
  6939  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6940  000D7C  0EFB               	movlw	high STR_21
  6941  000D7E  0100               	movlb	0	; () banked
  6942  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6943  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6944  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6945  000D8A  0ED6               	movlw	low UI@month
  6946  000D8C  0100               	movlb	0	; () banked
  6947  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6948  000D90  0E00               	movlw	high UI@month
  6949  000D92  0100               	movlb	0	; () banked
  6950  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6951  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6952  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6953  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6954  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6955  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6956  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6957  000DAE  ECB8  F008         	call	_printf	;wreg free
  6958                           
  6959                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6960  000DB2  0E00               	movlw	0
  6961  000DB4  0100               	movlb	0	; () banked
  6962  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  6963  000DB8                     l7542:
  6964                           
  6965                           ; BSR set to: 0
  6966  000DB8  0E63               	movlw	99
  6967  000DBA  0100               	movlb	0	; () banked
  6968  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  6969  000DBE  D001               	goto	l7546
  6970  000DC0  D00C               	goto	l7550
  6971  000DC2                     l7546:
  6972                           
  6973                           ; BSR set to: 0
  6974  000DC2  0E68               	movlw	104
  6975  000DC4  0100               	movlb	0	; () banked
  6976  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6977  000DC8  0EE4               	movlw	228
  6978  000DCA                     u7357:
  6979  000DCA  2EE8               	decfsz	wreg,f,c
  6980  000DCC  D7FE               	bra	u7357
  6981  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6982  000DD0  D7FC               	bra	u7357
  6983  000DD2  F000               	nop	
  6984  000DD4  0100               	movlb	0	; () banked
  6985  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  6986  000DD8  D7EF               	goto	l7542
  6987  000DDA                     l7550:
  6988                           
  6989                           ; BSR set to: 0
  6990  000DDA  0100               	movlb	0	; () banked
  6991  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6992  000DDE  0100               	movlb	0	; () banked
  6993  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6994  000DE2  B4D8               	btfsc	status,2,c
  6995  000DE4  0012               	return	
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6999                           
  7000                           ; BSR set to: 0
  7001                           
  7002                           ; BSR set to: 0
  7003  000DE6  0E00               	movlw	0
  7004  000DE8  0100               	movlb	0	; () banked
  7005  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7006  000DEC                     l7556:
  7007                           
  7008                           ; BSR set to: 0
  7009  000DEC  0E63               	movlw	99
  7010  000DEE  0100               	movlb	0	; () banked
  7011  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7012  000DF2  D001               	goto	l7560
  7013  000DF4  D00C               	goto	l7564
  7014  000DF6                     l7560:
  7015                           
  7016                           ; BSR set to: 0
  7017  000DF6  0E68               	movlw	104
  7018  000DF8  0100               	movlb	0	; () banked
  7019  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7020  000DFC  0EE4               	movlw	228
  7021  000DFE                     u7367:
  7022  000DFE  2EE8               	decfsz	wreg,f,c
  7023  000E00  D7FE               	bra	u7367
  7024  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7025  000E04  D7FC               	bra	u7367
  7026  000E06  F000               	nop	
  7027  000E08  0100               	movlb	0	; () banked
  7028  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7029  000E0C  D7EF               	goto	l7556
  7030  000E0E                     l7564:
  7031                           
  7032                           ; BSR set to: 0
  7033  000E0E  0100               	movlb	0	; () banked
  7034  000E10  51F6               	movf	_logstate& (0+255),w,b
  7035  000E12  0100               	movlb	0	; () banked
  7036  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7037  000E16  B4D8               	btfsc	status,2,c
  7038  000E18  0012               	return	
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7042                           
  7043                           ; BSR set to: 0
  7044                           
  7045                           ; BSR set to: 0
  7046  000E1A  0E01               	movlw	1
  7047  000E1C  ECDC  F023         	call	_lcdInst
  7048  000E20  0E68               	movlw	104
  7049  000E22  0100               	movlb	0	; () banked
  7050  000E24  6FC4               	movwf	??_UI& (0+255),b
  7051  000E26  0EE4               	movlw	228
  7052  000E28                     u7377:
  7053  000E28  2EE8               	decfsz	wreg,f,c
  7054  000E2A  D7FE               	bra	u7377
  7055  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7056  000E2E  D7FC               	bra	u7377
  7057  000E30  F000               	nop	
  7058                           
  7059                           ;UI.c: 173: lcdInst(0b10000000);;
  7060  000E32  0E80               	movlw	128
  7061  000E34  ECDC  F023         	call	_lcdInst
  7062                           
  7063                           ;UI.c: 174: printf("DURATION:");
  7064  000E38  0E9B               	movlw	low STR_22
  7065  000E3A  0100               	movlb	0	; () banked
  7066  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7067  000E3E  0EFF               	movlw	high STR_22
  7068  000E40  0100               	movlb	0	; () banked
  7069  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7070  000E44  ECB8  F008         	call	_printf	;wreg free
  7071                           
  7072                           ;UI.c: 175: lcdInst(0b11000000);;
  7073  000E48  0EC0               	movlw	192
  7074  000E4A  ECDC  F023         	call	_lcdInst
  7075                           
  7076                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7077  000E4E  0E0E               	movlw	14
  7078  000E50  0100               	movlb	0	; () banked
  7079  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7080  000E54  0E10               	movlw	16
  7081  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7082  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7083  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7084  000E60  EC78  F01C         	call	___awmod	;wreg free
  7085  000E64  C080  F0C6         	movff	?___awmod,_UI$2294
  7086  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2294+1
  7087                           
  7088                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7089  000E6C  0E0D               	movlw	low STR_23
  7090  000E6E  0100               	movlb	0	; () banked
  7091  000E70  6F8E               	movwf	printf@f& (0+255),b
  7092  000E72  0EFF               	movlw	high STR_23
  7093  000E74  0100               	movlb	0	; () banked
  7094  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7095  000E78  0E0E               	movlw	14
  7096  000E7A  0100               	movlb	0	; () banked
  7097  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7098  000E7E  0E10               	movlw	16
  7099  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7100  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7101  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7102  000E8A  EC78  F01C         	call	___awmod	;wreg free
  7103  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7104  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7105  000E96  0E00               	movlw	0
  7106  000E98  0100               	movlb	0	; () banked
  7107  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7108  000E9C  0E3C               	movlw	60
  7109  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7110  000EA0  EC66  F01B         	call	___awdiv	;wreg free
  7111  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7112  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7113  000EAC  C0C6  F080         	movff	_UI$2294,___awmod@dividend
  7114  000EB0  C0C7  F081         	movff	_UI$2294+1,___awmod@dividend+1
  7115  000EB4  0E00               	movlw	0
  7116  000EB6  0100               	movlb	0	; () banked
  7117  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7118  000EBA  0E3C               	movlw	60
  7119  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7120  000EBE  EC78  F01C         	call	___awmod	;wreg free
  7121  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7122  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7123  000ECA  ECB8  F008         	call	_printf	;wreg free
  7124                           
  7125                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7126  000ECE  0E00               	movlw	0
  7127  000ED0  0100               	movlb	0	; () banked
  7128  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7129  000ED4                     l7584:
  7130                           
  7131                           ; BSR set to: 0
  7132  000ED4  0E63               	movlw	99
  7133  000ED6  0100               	movlb	0	; () banked
  7134  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7135  000EDA  D001               	goto	l7588
  7136  000EDC  D00C               	goto	l7592
  7137  000EDE                     l7588:
  7138                           
  7139                           ; BSR set to: 0
  7140  000EDE  0E68               	movlw	104
  7141  000EE0  0100               	movlb	0	; () banked
  7142  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7143  000EE4  0EE4               	movlw	228
  7144  000EE6                     u7387:
  7145  000EE6  2EE8               	decfsz	wreg,f,c
  7146  000EE8  D7FE               	bra	u7387
  7147  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7148  000EEC  D7FC               	bra	u7387
  7149  000EEE  F000               	nop	
  7150  000EF0  0100               	movlb	0	; () banked
  7151  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7152  000EF4  D7EF               	goto	l7584
  7153  000EF6                     l7592:
  7154                           
  7155                           ; BSR set to: 0
  7156  000EF6  0100               	movlb	0	; () banked
  7157  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7158  000EFA  0100               	movlb	0	; () banked
  7159  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7160  000EFE  B4D8               	btfsc	status,2,c
  7161  000F00  0012               	return	
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7165                           
  7166                           ; BSR set to: 0
  7167                           
  7168                           ; BSR set to: 0
  7169  000F02  0E00               	movlw	0
  7170  000F04  0100               	movlb	0	; () banked
  7171  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7172  000F08                     l7598:
  7173                           
  7174                           ; BSR set to: 0
  7175  000F08  0E63               	movlw	99
  7176  000F0A  0100               	movlb	0	; () banked
  7177  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7178  000F0E  D001               	goto	l7602
  7179  000F10  D00C               	goto	l7606
  7180  000F12                     l7602:
  7181                           
  7182                           ; BSR set to: 0
  7183  000F12  0E68               	movlw	104
  7184  000F14  0100               	movlb	0	; () banked
  7185  000F16  6FC4               	movwf	??_UI& (0+255),b
  7186  000F18  0EE4               	movlw	228
  7187  000F1A                     u7397:
  7188  000F1A  2EE8               	decfsz	wreg,f,c
  7189  000F1C  D7FE               	bra	u7397
  7190  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7191  000F20  D7FC               	bra	u7397
  7192  000F22  F000               	nop	
  7193  000F24  0100               	movlb	0	; () banked
  7194  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7195  000F28  D7EF               	goto	l7598
  7196  000F2A                     l7606:
  7197                           
  7198                           ; BSR set to: 0
  7199  000F2A  0100               	movlb	0	; () banked
  7200  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7201  000F2E  0100               	movlb	0	; () banked
  7202  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7203  000F32  B4D8               	btfsc	status,2,c
  7204  000F34  0012               	return	
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7208                           
  7209                           ; BSR set to: 0
  7210                           
  7211                           ; BSR set to: 0
  7212  000F36  0E01               	movlw	1
  7213  000F38  ECDC  F023         	call	_lcdInst
  7214  000F3C  0E68               	movlw	104
  7215  000F3E  0100               	movlb	0	; () banked
  7216  000F40  6FC4               	movwf	??_UI& (0+255),b
  7217  000F42  0EE4               	movlw	228
  7218  000F44                     u7407:
  7219  000F44  2EE8               	decfsz	wreg,f,c
  7220  000F46  D7FE               	bra	u7407
  7221  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7222  000F4A  D7FC               	bra	u7407
  7223  000F4C  F000               	nop	
  7224                           
  7225                           ;UI.c: 182: lcdInst(0b10000000);;
  7226  000F4E  0E80               	movlw	128
  7227  000F50  ECDC  F023         	call	_lcdInst
  7228                           
  7229                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7230  000F54  0E52               	movlw	low STR_24
  7231  000F56  0100               	movlb	0	; () banked
  7232  000F58  6F8E               	movwf	printf@f& (0+255),b
  7233  000F5A  0EFD               	movlw	high STR_24
  7234  000F5C  0100               	movlb	0	; () banked
  7235  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7236  000F60  ECB8  F008         	call	_printf	;wreg free
  7237                           
  7238                           ;UI.c: 184: lcdInst(0b11000000);;
  7239  000F64  0EC0               	movlw	192
  7240  000F66  ECDC  F023         	call	_lcdInst
  7241                           
  7242                           ;UI.c: 185: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7243  000F6A  0E70               	movlw	low STR_25
  7244  000F6C  0100               	movlb	0	; () banked
  7245  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7246  000F70  0EFB               	movlw	high STR_25
  7247  000F72  0100               	movlb	0	; () banked
  7248  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7249  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7250  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7251  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7252  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7253  000F86  ECB8  F008         	call	_printf	;wreg free
  7254                           
  7255                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7256  000F8A  0E00               	movlw	0
  7257  000F8C  0100               	movlb	0	; () banked
  7258  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7259  000F90                     l7624:
  7260                           
  7261                           ; BSR set to: 0
  7262  000F90  0E63               	movlw	99
  7263  000F92  0100               	movlb	0	; () banked
  7264  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7265  000F96  D001               	goto	l7628
  7266  000F98  D00C               	goto	l7632
  7267  000F9A                     l7628:
  7268                           
  7269                           ; BSR set to: 0
  7270  000F9A  0E68               	movlw	104
  7271  000F9C  0100               	movlb	0	; () banked
  7272  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7273  000FA0  0EE4               	movlw	228
  7274  000FA2                     u7417:
  7275  000FA2  2EE8               	decfsz	wreg,f,c
  7276  000FA4  D7FE               	bra	u7417
  7277  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7278  000FA8  D7FC               	bra	u7417
  7279  000FAA  F000               	nop	
  7280  000FAC  0100               	movlb	0	; () banked
  7281  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7282  000FB0  D7EF               	goto	l7624
  7283  000FB2                     l7632:
  7284                           
  7285                           ; BSR set to: 0
  7286  000FB2  0100               	movlb	0	; () banked
  7287  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7288  000FB6  0100               	movlb	0	; () banked
  7289  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7290  000FBA  B4D8               	btfsc	status,2,c
  7291  000FBC  0012               	return	
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299  000FBE  0E00               	movlw	0
  7300  000FC0  0100               	movlb	0	; () banked
  7301  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7302  000FC4                     l7638:
  7303                           
  7304                           ; BSR set to: 0
  7305  000FC4  0E63               	movlw	99
  7306  000FC6  0100               	movlb	0	; () banked
  7307  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7308  000FCA  D001               	goto	l7642
  7309  000FCC  D00C               	goto	l7646
  7310  000FCE                     l7642:
  7311                           
  7312                           ; BSR set to: 0
  7313  000FCE  0E68               	movlw	104
  7314  000FD0  0100               	movlb	0	; () banked
  7315  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7316  000FD4  0EE4               	movlw	228
  7317  000FD6                     u7427:
  7318  000FD6  2EE8               	decfsz	wreg,f,c
  7319  000FD8  D7FE               	bra	u7427
  7320  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7321  000FDC  D7FC               	bra	u7427
  7322  000FDE  F000               	nop	
  7323  000FE0  0100               	movlb	0	; () banked
  7324  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7325  000FE4  D7EF               	goto	l7638
  7326  000FE6                     l7646:
  7327                           
  7328                           ; BSR set to: 0
  7329  000FE6  0100               	movlb	0	; () banked
  7330  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7331  000FEA  0100               	movlb	0	; () banked
  7332  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7333  000FEE  B4D8               	btfsc	status,2,c
  7334  000FF0  0012               	return	
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7338                           
  7339                           ; BSR set to: 0
  7340                           
  7341                           ; BSR set to: 0
  7342  000FF2  0E01               	movlw	1
  7343  000FF4  ECDC  F023         	call	_lcdInst
  7344  000FF8  0E68               	movlw	104
  7345  000FFA  0100               	movlb	0	; () banked
  7346  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7347  000FFE  0EE4               	movlw	228
  7348  001000                     u7437:
  7349  001000  2EE8               	decfsz	wreg,f,c
  7350  001002  D7FE               	bra	u7437
  7351  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7352  001006  D7FC               	bra	u7437
  7353  001008  F000               	nop	
  7354                           
  7355                           ;UI.c: 191: lcdInst(0b10000000);;
  7356  00100A  0E80               	movlw	128
  7357  00100C  ECDC  F023         	call	_lcdInst
  7358                           
  7359                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7360  001010  0E63               	movlw	low STR_26
  7361  001012  0100               	movlb	0	; () banked
  7362  001014  6F8E               	movwf	printf@f& (0+255),b
  7363  001016  0EFD               	movlw	high STR_26
  7364  001018  0100               	movlb	0	; () banked
  7365  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7366  00101C  ECB8  F008         	call	_printf	;wreg free
  7367                           
  7368                           ;UI.c: 193: lcdInst(0b11000000);;
  7369  001020  0EC0               	movlw	192
  7370  001022  ECDC  F023         	call	_lcdInst
  7371                           
  7372                           ;UI.c: 194: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7373  001026  0E5D               	movlw	low STR_27
  7374  001028  0100               	movlb	0	; () banked
  7375  00102A  6F8E               	movwf	printf@f& (0+255),b
  7376  00102C  0EFB               	movlw	high STR_27
  7377  00102E  0100               	movlb	0	; () banked
  7378  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7379  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7380  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7381  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7382  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7383  001042  ECB8  F008         	call	_printf	;wreg free
  7384                           
  7385                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7386  001046  0E00               	movlw	0
  7387  001048  0100               	movlb	0	; () banked
  7388  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7389  00104C                     l7664:
  7390                           
  7391                           ; BSR set to: 0
  7392  00104C  0E63               	movlw	99
  7393  00104E  0100               	movlb	0	; () banked
  7394  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7395  001052  D001               	goto	l7668
  7396  001054  D00C               	goto	l7672
  7397  001056                     l7668:
  7398                           
  7399                           ; BSR set to: 0
  7400  001056  0E68               	movlw	104
  7401  001058  0100               	movlb	0	; () banked
  7402  00105A  6FC4               	movwf	??_UI& (0+255),b
  7403  00105C  0EE4               	movlw	228
  7404  00105E                     u7447:
  7405  00105E  2EE8               	decfsz	wreg,f,c
  7406  001060  D7FE               	bra	u7447
  7407  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7408  001064  D7FC               	bra	u7447
  7409  001066  F000               	nop	
  7410  001068  0100               	movlb	0	; () banked
  7411  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7412  00106C  D7EF               	goto	l7664
  7413  00106E                     l7672:
  7414                           
  7415                           ; BSR set to: 0
  7416  00106E  0100               	movlb	0	; () banked
  7417  001070  51F6               	movf	_logstate& (0+255),w,b
  7418  001072  0100               	movlb	0	; () banked
  7419  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7420  001076  B4D8               	btfsc	status,2,c
  7421  001078  0012               	return	
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7425                           
  7426                           ; BSR set to: 0
  7427                           
  7428                           ; BSR set to: 0
  7429  00107A  0E00               	movlw	0
  7430  00107C  0100               	movlb	0	; () banked
  7431  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7432  001080                     l7678:
  7433                           
  7434                           ; BSR set to: 0
  7435  001080  0E63               	movlw	99
  7436  001082  0100               	movlb	0	; () banked
  7437  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7438  001086  D001               	goto	l7682
  7439  001088  D00C               	goto	l7686
  7440  00108A                     l7682:
  7441                           
  7442                           ; BSR set to: 0
  7443  00108A  0E68               	movlw	104
  7444  00108C  0100               	movlb	0	; () banked
  7445  00108E  6FC4               	movwf	??_UI& (0+255),b
  7446  001090  0EE4               	movlw	228
  7447  001092                     u7457:
  7448  001092  2EE8               	decfsz	wreg,f,c
  7449  001094  D7FE               	bra	u7457
  7450  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7451  001098  D7FC               	bra	u7457
  7452  00109A  F000               	nop	
  7453  00109C  0100               	movlb	0	; () banked
  7454  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7455  0010A0  D7EF               	goto	l7678
  7456  0010A2                     l7686:
  7457                           
  7458                           ; BSR set to: 0
  7459  0010A2  0100               	movlb	0	; () banked
  7460  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7461  0010A6  0100               	movlb	0	; () banked
  7462  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7463  0010AA  B4D8               	btfsc	status,2,c
  7464  0010AC  0012               	return	
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7468                           
  7469                           ; BSR set to: 0
  7470                           
  7471                           ; BSR set to: 0
  7472  0010AE  0E01               	movlw	1
  7473  0010B0  ECDC  F023         	call	_lcdInst
  7474  0010B4  0E68               	movlw	104
  7475  0010B6  0100               	movlb	0	; () banked
  7476  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7477  0010BA  0EE4               	movlw	228
  7478  0010BC                     u7467:
  7479  0010BC  2EE8               	decfsz	wreg,f,c
  7480  0010BE  D7FE               	bra	u7467
  7481  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7482  0010C2  D7FC               	bra	u7467
  7483  0010C4  F000               	nop	
  7484                           
  7485                           ;UI.c: 200: lcdInst(0b10000000);;
  7486  0010C6  0E80               	movlw	128
  7487  0010C8  ECDC  F023         	call	_lcdInst
  7488                           
  7489                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7490  0010CC  0E74               	movlw	low STR_28
  7491  0010CE  0100               	movlb	0	; () banked
  7492  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7493  0010D2  0EFD               	movlw	high STR_28
  7494  0010D4  0100               	movlb	0	; () banked
  7495  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7496  0010D8  ECB8  F008         	call	_printf	;wreg free
  7497                           
  7498                           ;UI.c: 202: lcdInst(0b11000000);;
  7499  0010DC  0EC0               	movlw	192
  7500  0010DE  ECDC  F023         	call	_lcdInst
  7501                           
  7502                           ;UI.c: 203: printf("%d", log_count_total);
  7503  0010E2  0E6D               	movlw	low (STR_27+16)
  7504  0010E4  0100               	movlb	0	; () banked
  7505  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7506  0010E8  0EFB               	movlw	high (STR_27+16)
  7507  0010EA  0100               	movlb	0	; () banked
  7508  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7509  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7510  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7511  0010F6  ECB8  F008         	call	_printf	;wreg free
  7512                           
  7513                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7514  0010FA  0E00               	movlw	0
  7515  0010FC  0100               	movlb	0	; () banked
  7516  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7517  001100                     l7704:
  7518                           
  7519                           ; BSR set to: 0
  7520  001100  0E63               	movlw	99
  7521  001102  0100               	movlb	0	; () banked
  7522  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7523  001106  D001               	goto	l7708
  7524  001108  D00C               	goto	l7712
  7525  00110A                     l7708:
  7526                           
  7527                           ; BSR set to: 0
  7528  00110A  0E68               	movlw	104
  7529  00110C  0100               	movlb	0	; () banked
  7530  00110E  6FC4               	movwf	??_UI& (0+255),b
  7531  001110  0EE4               	movlw	228
  7532  001112                     u7477:
  7533  001112  2EE8               	decfsz	wreg,f,c
  7534  001114  D7FE               	bra	u7477
  7535  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7536  001118  D7FC               	bra	u7477
  7537  00111A  F000               	nop	
  7538  00111C  0100               	movlb	0	; () banked
  7539  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7540  001120  D7EF               	goto	l7704
  7541  001122                     l7712:
  7542                           
  7543                           ; BSR set to: 0
  7544  001122  0100               	movlb	0	; () banked
  7545  001124  51F6               	movf	_logstate& (0+255),w,b
  7546  001126  0100               	movlb	0	; () banked
  7547  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7548  00112A  B4D8               	btfsc	status,2,c
  7549  00112C  0012               	return	
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7553                           
  7554                           ; BSR set to: 0
  7555                           
  7556                           ; BSR set to: 0
  7557  00112E  0E00               	movlw	0
  7558  001130  0100               	movlb	0	; () banked
  7559  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7560  001134                     l7718:
  7561                           
  7562                           ; BSR set to: 0
  7563  001134  0E63               	movlw	99
  7564  001136  0100               	movlb	0	; () banked
  7565  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7566  00113A  D001               	goto	l7722
  7567  00113C  D00C               	goto	l7726
  7568  00113E                     l7722:
  7569                           
  7570                           ; BSR set to: 0
  7571  00113E  0E68               	movlw	104
  7572  001140  0100               	movlb	0	; () banked
  7573  001142  6FC4               	movwf	??_UI& (0+255),b
  7574  001144  0EE4               	movlw	228
  7575  001146                     u7487:
  7576  001146  2EE8               	decfsz	wreg,f,c
  7577  001148  D7FE               	bra	u7487
  7578  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7579  00114C  D7FC               	bra	u7487
  7580  00114E  F000               	nop	
  7581  001150  0100               	movlb	0	; () banked
  7582  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7583  001154  D7EF               	goto	l7718
  7584  001156                     l7726:
  7585                           
  7586                           ; BSR set to: 0
  7587  001156  0100               	movlb	0	; () banked
  7588  001158  51F6               	movf	_logstate& (0+255),w,b
  7589  00115A  0100               	movlb	0	; () banked
  7590  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7591  00115E  B4D8               	btfsc	status,2,c
  7592  001160  0012               	return	
  7593  001162                     l7730:
  7594  001162  0100               	movlb	0	; () banked
  7595  001164  51F6               	movf	_logstate& (0+255),w,b
  7596  001166  0100               	movlb	0	; () banked
  7597  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7598  00116A  B4D8               	btfsc	status,2,c
  7599  00116C  0012               	return	
  7600  00116E  D44A               	goto	l7426
  7601  001170                     __end_of_UI:
  7602                           	opt stack 0
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon2	equ	0xFF1
  7611                           intcon3	equ	0xFF0
  7612                           postinc0	equ	0xFEE
  7613                           wreg	equ	0xFE8
  7614                           postdec1	equ	0xFE5
  7615                           fsr1l	equ	0xFE1
  7616                           indf2	equ	0xFDF
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _printRTC *****************
  7624 ;; Defined at:
  7625 ;;		line 63 in file "RTC.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  i               2   66[BANK0 ] int 
  7630 ;;  INT_time       14   46[BANK0 ] int [7]
  7631 ;;  month           4   62[BANK0 ] unsigned char [4]
  7632 ;;  RTC_month       2   60[BANK0 ] int 
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  1    wreg      void 
  7635 ;; Registers used:
  7636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;Total ram usage:       25 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; Hardware stack levels required when called:   10
  7649 ;; This function calls:
  7650 ;;		_getRTC
  7651 ;;		_lcdInst
  7652 ;;		_printf
  7653 ;;		_strcpy
  7654 ;; This function is called by:
  7655 ;;		_UI
  7656 ;;		_change_state_to_menu_start
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text23
  7661  001F04                     __ptext23:
  7662                           	opt stack 0
  7663  001F04                     _printRTC:
  7664                           	opt stack 18
  7665                           
  7666                           ;RTC.c: 64: getRTC();
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;incstack = 0
  7670  001F04  EC9E  F01D         	call	_getRTC	;wreg free
  7671                           
  7672                           ;RTC.c: 65: char month[] = "MMM";
  7673  001F08  C133  F0BE         	movff	printRTC@F3214,printRTC@month
  7674  001F0C  C134  F0BF         	movff	printRTC@F3214+1,printRTC@month+1
  7675  001F10  C135  F0C0         	movff	printRTC@F3214+2,printRTC@month+2
  7676  001F14  C136  F0C1         	movff	printRTC@F3214+3,printRTC@month+3
  7677                           
  7678                           ;RTC.c: 66: int INT_time[7];
  7679                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7680  001F18  0E00               	movlw	0
  7681  001F1A  0100               	movlb	0	; () banked
  7682  001F1C  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7683  001F1E  0E00               	movlw	0
  7684  001F20  6FC2               	movwf	printRTC@i& (0+255),b
  7685                           
  7686                           ; BSR set to: 0
  7687  001F22  0100               	movlb	0	; () banked
  7688  001F24  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7689  001F26  D008               	goto	l5830
  7690  001F28  0100               	movlb	0	; () banked
  7691  001F2A  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7692  001F2C  E146               	bnz	l602
  7693  001F2E  0E07               	movlw	7
  7694  001F30  0100               	movlb	0	; () banked
  7695  001F32  5DC2               	subwf	printRTC@i& (0+255),w,b
  7696  001F34  B0D8               	btfsc	status,0,c
  7697  001F36  D041               	goto	l602
  7698  001F38                     l5830:
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7702  001F38  0E24               	movlw	low _time
  7703  001F3A  0100               	movlb	0	; () banked
  7704  001F3C  25C2               	addwf	printRTC@i& (0+255),w,b
  7705  001F3E  6ED9               	movwf	fsr2l,c
  7706  001F40  0E01               	movlw	high _time
  7707  001F42  0100               	movlb	0	; () banked
  7708  001F44  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7709  001F46  6EDA               	movwf	fsr2h,c
  7710  001F48  50DF               	movf	indf2,w,c
  7711  001F4A  0100               	movlb	0	; () banked
  7712  001F4C  6FAB               	movwf	??_printRTC& (0+255),b
  7713  001F4E  0100               	movlb	0	; () banked
  7714  001F50  3BAB               	swapf	??_printRTC& (0+255),f,b
  7715  001F52  0E0F               	movlw	15
  7716  001F54  17AB               	andwf	??_printRTC& (0+255),f,b
  7717  001F56  0E0F               	movlw	15
  7718  001F58  0100               	movlb	0	; () banked
  7719  001F5A  17AB               	andwf	??_printRTC& (0+255),f,b
  7720  001F5C  0100               	movlb	0	; () banked
  7721  001F5E  51AB               	movf	??_printRTC& (0+255),w,b
  7722  001F60  0D0A               	mullw	10
  7723  001F62  0E24               	movlw	low _time
  7724  001F64  0100               	movlb	0	; () banked
  7725  001F66  25C2               	addwf	printRTC@i& (0+255),w,b
  7726  001F68  6ED9               	movwf	fsr2l,c
  7727  001F6A  0E01               	movlw	high _time
  7728  001F6C  0100               	movlb	0	; () banked
  7729  001F6E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7730  001F70  6EDA               	movwf	fsr2h,c
  7731  001F72  50DF               	movf	indf2,w,c
  7732  001F74  0B0F               	andlw	15
  7733  001F76  0100               	movlb	0	; () banked
  7734  001F78  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7735  001F7A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7736  001F7C  50F3               	movf	prodl,w,c
  7737  001F7E  0100               	movlb	0	; () banked
  7738  001F80  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7739  001F82  50F4               	movf	prodh,w,c
  7740  001F84  0100               	movlb	0	; () banked
  7741  001F86  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7742  001F88  90D8               	bcf	status,0,c
  7743  001F8A  0100               	movlb	0	; () banked
  7744  001F8C  35C2               	rlcf	printRTC@i& (0+255),w,b
  7745  001F8E  6ED9               	movwf	fsr2l,c
  7746  001F90  0100               	movlb	0	; () banked
  7747  001F92  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7748  001F94  6EDA               	movwf	fsr2h,c
  7749  001F96  0EAE               	movlw	low printRTC@INT_time
  7750  001F98  26D9               	addwf	fsr2l,f,c
  7751  001F9A  0E00               	movlw	high printRTC@INT_time
  7752  001F9C  22DA               	addwfc	fsr2h,f,c
  7753  001F9E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7754  001FA2  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7755                           
  7756                           ; BSR set to: 0
  7757  001FA6  0100               	movlb	0	; () banked
  7758  001FA8  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7759  001FAA  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7760                           
  7761                           ; BSR set to: 0
  7762  001FAC  0100               	movlb	0	; () banked
  7763  001FAE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7764  001FB0  D7C3               	goto	l5830
  7765  001FB2  0100               	movlb	0	; () banked
  7766  001FB4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7767  001FB6  E101               	bnz	u4520
  7768  001FB8  D7BA               	goto	L6
  7769  001FBA                     u4520:
  7770  001FBA                     l602:
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;RTC.c: 69: }
  7774                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7775  001FBA  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7776  001FBE  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7777                           
  7778                           ;RTC.c: 71: switch(RTC_month){
  7779  001FC2  D0B4               	goto	l5862
  7780  001FC4                     l5836:
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;RTC.c: 73: strcpy(month, "JAN");
  7784  001FC4  0EBE               	movlw	low printRTC@month
  7785  001FC6  0100               	movlb	0	; () banked
  7786  001FC8  6F80               	movwf	strcpy@to& (0+255),b
  7787  001FCA  0E00               	movlw	high printRTC@month
  7788  001FCC  0100               	movlb	0	; () banked
  7789  001FCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7790  001FD0  0EDB               	movlw	low STR_8
  7791  001FD2  0100               	movlb	0	; () banked
  7792  001FD4  6F82               	movwf	strcpy@from& (0+255),b
  7793  001FD6  0EFF               	movlw	high STR_8
  7794  001FD8  0100               	movlb	0	; () banked
  7795  001FDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7796  001FDC  EC61  F021         	call	_strcpy	;wreg free
  7797                           
  7798                           ;RTC.c: 74: break;
  7799  001FE0  D0D4               	goto	l5864
  7800  001FE2                     l5838:
  7801                           
  7802                           ;RTC.c: 76: strcpy(month, "FEB");
  7803  001FE2  0EBE               	movlw	low printRTC@month
  7804  001FE4  0100               	movlb	0	; () banked
  7805  001FE6  6F80               	movwf	strcpy@to& (0+255),b
  7806  001FE8  0E00               	movlw	high printRTC@month
  7807  001FEA  0100               	movlb	0	; () banked
  7808  001FEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7809  001FEE  0ECB               	movlw	low STR_9
  7810  001FF0  0100               	movlb	0	; () banked
  7811  001FF2  6F82               	movwf	strcpy@from& (0+255),b
  7812  001FF4  0EFF               	movlw	high STR_9
  7813  001FF6  0100               	movlb	0	; () banked
  7814  001FF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7815  001FFA  EC61  F021         	call	_strcpy	;wreg free
  7816                           
  7817                           ;RTC.c: 77: break;
  7818  001FFE  D0C5               	goto	l5864
  7819  002000                     l5840:
  7820                           
  7821                           ;RTC.c: 79: strcpy(month, "MAR");
  7822  002000  0EBE               	movlw	low printRTC@month
  7823  002002  0100               	movlb	0	; () banked
  7824  002004  6F80               	movwf	strcpy@to& (0+255),b
  7825  002006  0E00               	movlw	high printRTC@month
  7826  002008  0100               	movlb	0	; () banked
  7827  00200A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7828  00200C  0EE7               	movlw	low STR_10
  7829  00200E  0100               	movlb	0	; () banked
  7830  002010  6F82               	movwf	strcpy@from& (0+255),b
  7831  002012  0EFF               	movlw	high STR_10
  7832  002014  0100               	movlb	0	; () banked
  7833  002016  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7834  002018  EC61  F021         	call	_strcpy	;wreg free
  7835                           
  7836                           ;RTC.c: 80: break;
  7837  00201C  D0B6               	goto	l5864
  7838  00201E                     l5842:
  7839                           
  7840                           ;RTC.c: 82: strcpy(month, "APR");
  7841  00201E  0EBE               	movlw	low printRTC@month
  7842  002020  0100               	movlb	0	; () banked
  7843  002022  6F80               	movwf	strcpy@to& (0+255),b
  7844  002024  0E00               	movlw	high printRTC@month
  7845  002026  0100               	movlb	0	; () banked
  7846  002028  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7847  00202A  0EEB               	movlw	low STR_11
  7848  00202C  0100               	movlb	0	; () banked
  7849  00202E  6F82               	movwf	strcpy@from& (0+255),b
  7850  002030  0EFF               	movlw	high STR_11
  7851  002032  0100               	movlb	0	; () banked
  7852  002034  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7853  002036  EC61  F021         	call	_strcpy	;wreg free
  7854                           
  7855                           ;RTC.c: 83: break;
  7856  00203A  D0A7               	goto	l5864
  7857  00203C                     l5844:
  7858                           
  7859                           ;RTC.c: 85: strcpy(month, "MAY");
  7860  00203C  0EBE               	movlw	low printRTC@month
  7861  00203E  0100               	movlb	0	; () banked
  7862  002040  6F80               	movwf	strcpy@to& (0+255),b
  7863  002042  0E00               	movlw	high printRTC@month
  7864  002044  0100               	movlb	0	; () banked
  7865  002046  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7866  002048  0EFB               	movlw	low STR_12
  7867  00204A  0100               	movlb	0	; () banked
  7868  00204C  6F82               	movwf	strcpy@from& (0+255),b
  7869  00204E  0EFF               	movlw	high STR_12
  7870  002050  0100               	movlb	0	; () banked
  7871  002052  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7872  002054  EC61  F021         	call	_strcpy	;wreg free
  7873                           
  7874                           ;RTC.c: 86: break;
  7875  002058  D098               	goto	l5864
  7876  00205A                     l5846:
  7877                           
  7878                           ;RTC.c: 88: strcpy(month, "JUN");
  7879  00205A  0EBE               	movlw	low printRTC@month
  7880  00205C  0100               	movlb	0	; () banked
  7881  00205E  6F80               	movwf	strcpy@to& (0+255),b
  7882  002060  0E00               	movlw	high printRTC@month
  7883  002062  0100               	movlb	0	; () banked
  7884  002064  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7885  002066  0EDF               	movlw	low STR_13
  7886  002068  0100               	movlb	0	; () banked
  7887  00206A  6F82               	movwf	strcpy@from& (0+255),b
  7888  00206C  0EFF               	movlw	high STR_13
  7889  00206E  0100               	movlb	0	; () banked
  7890  002070  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7891  002072  EC61  F021         	call	_strcpy	;wreg free
  7892                           
  7893                           ;RTC.c: 89: break;
  7894  002076  D089               	goto	l5864
  7895  002078                     l5848:
  7896                           
  7897                           ;RTC.c: 91: strcpy(month, "JUL");
  7898  002078  0EBE               	movlw	low printRTC@month
  7899  00207A  0100               	movlb	0	; () banked
  7900  00207C  6F80               	movwf	strcpy@to& (0+255),b
  7901  00207E  0E00               	movlw	high printRTC@month
  7902  002080  0100               	movlb	0	; () banked
  7903  002082  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7904  002084  0ED7               	movlw	low STR_14
  7905  002086  0100               	movlb	0	; () banked
  7906  002088  6F82               	movwf	strcpy@from& (0+255),b
  7907  00208A  0EFF               	movlw	high STR_14
  7908  00208C  0100               	movlb	0	; () banked
  7909  00208E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7910  002090  EC61  F021         	call	_strcpy	;wreg free
  7911                           
  7912                           ;RTC.c: 92: break;
  7913  002094  D07A               	goto	l5864
  7914  002096                     l5850:
  7915                           
  7916                           ;RTC.c: 94: strcpy(month, "AUG");
  7917  002096  0EBE               	movlw	low printRTC@month
  7918  002098  0100               	movlb	0	; () banked
  7919  00209A  6F80               	movwf	strcpy@to& (0+255),b
  7920  00209C  0E00               	movlw	high printRTC@month
  7921  00209E  0100               	movlb	0	; () banked
  7922  0020A0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7923  0020A2  0ED3               	movlw	low STR_15
  7924  0020A4  0100               	movlb	0	; () banked
  7925  0020A6  6F82               	movwf	strcpy@from& (0+255),b
  7926  0020A8  0EFF               	movlw	high STR_15
  7927  0020AA  0100               	movlb	0	; () banked
  7928  0020AC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7929  0020AE  EC61  F021         	call	_strcpy	;wreg free
  7930                           
  7931                           ;RTC.c: 95: break;
  7932  0020B2  D06B               	goto	l5864
  7933  0020B4                     l5852:
  7934                           
  7935                           ;RTC.c: 97: strcpy(month, "SEP");
  7936  0020B4  0EBE               	movlw	low printRTC@month
  7937  0020B6  0100               	movlb	0	; () banked
  7938  0020B8  6F80               	movwf	strcpy@to& (0+255),b
  7939  0020BA  0E00               	movlw	high printRTC@month
  7940  0020BC  0100               	movlb	0	; () banked
  7941  0020BE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7942  0020C0  0EE3               	movlw	low STR_16
  7943  0020C2  0100               	movlb	0	; () banked
  7944  0020C4  6F82               	movwf	strcpy@from& (0+255),b
  7945  0020C6  0EFF               	movlw	high STR_16
  7946  0020C8  0100               	movlb	0	; () banked
  7947  0020CA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7948  0020CC  EC61  F021         	call	_strcpy	;wreg free
  7949                           
  7950                           ;RTC.c: 98: break;
  7951  0020D0  D05C               	goto	l5864
  7952  0020D2                     l5854:
  7953                           
  7954                           ;RTC.c: 100: strcpy(month, "OCT");
  7955  0020D2  0EBE               	movlw	low printRTC@month
  7956  0020D4  0100               	movlb	0	; () banked
  7957  0020D6  6F80               	movwf	strcpy@to& (0+255),b
  7958  0020D8  0E00               	movlw	high printRTC@month
  7959  0020DA  0100               	movlb	0	; () banked
  7960  0020DC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7961  0020DE  0EF3               	movlw	low STR_17
  7962  0020E0  0100               	movlb	0	; () banked
  7963  0020E2  6F82               	movwf	strcpy@from& (0+255),b
  7964  0020E4  0EFF               	movlw	high STR_17
  7965  0020E6  0100               	movlb	0	; () banked
  7966  0020E8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7967  0020EA  EC61  F021         	call	_strcpy	;wreg free
  7968                           
  7969                           ;RTC.c: 101: break;
  7970  0020EE  D04D               	goto	l5864
  7971  0020F0                     l5856:
  7972                           
  7973                           ;RTC.c: 103: strcpy(month, "NOV");
  7974  0020F0  0EBE               	movlw	low printRTC@month
  7975  0020F2  0100               	movlb	0	; () banked
  7976  0020F4  6F80               	movwf	strcpy@to& (0+255),b
  7977  0020F6  0E00               	movlw	high printRTC@month
  7978  0020F8  0100               	movlb	0	; () banked
  7979  0020FA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7980  0020FC  0EF7               	movlw	low STR_18
  7981  0020FE  0100               	movlb	0	; () banked
  7982  002100  6F82               	movwf	strcpy@from& (0+255),b
  7983  002102  0EFF               	movlw	high STR_18
  7984  002104  0100               	movlb	0	; () banked
  7985  002106  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7986  002108  EC61  F021         	call	_strcpy	;wreg free
  7987                           
  7988                           ;RTC.c: 104: break;
  7989  00210C  D03E               	goto	l5864
  7990  00210E                     l5858:
  7991                           
  7992                           ;RTC.c: 106: strcpy(month, "DEC");
  7993  00210E  0EBE               	movlw	low printRTC@month
  7994  002110  0100               	movlb	0	; () banked
  7995  002112  6F80               	movwf	strcpy@to& (0+255),b
  7996  002114  0E00               	movlw	high printRTC@month
  7997  002116  0100               	movlb	0	; () banked
  7998  002118  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7999  00211A  0ECF               	movlw	low STR_19
  8000  00211C  0100               	movlb	0	; () banked
  8001  00211E  6F82               	movwf	strcpy@from& (0+255),b
  8002  002120  0EFF               	movlw	high STR_19
  8003  002122  0100               	movlb	0	; () banked
  8004  002124  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8005  002126  EC61  F021         	call	_strcpy	;wreg free
  8006                           
  8007                           ;RTC.c: 108: }
  8008                           
  8009                           ;RTC.c: 107: break;
  8010  00212A  D02F               	goto	l5864
  8011  00212C                     l5862:
  8012  00212C  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8013  002130  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8014                           
  8015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8016                           ; Switch size 1, requested type "space"
  8017                           ; Number of cases is 1, Range of values is 0 to 0
  8018                           ; switch strategies available:
  8019                           ; Name         Instructions Cycles
  8020                           ; simple_byte            4     3 (average)
  8021                           ;	Chosen strategy is simple_byte
  8022  002134  0100               	movlb	0	; () banked
  8023  002136  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8024  002138  0A00               	xorlw	0	; case 0
  8025  00213A  A4D8               	btfss	status,2,c
  8026  00213C  D026               	goto	l5864
  8027                           
  8028                           ; BSR set to: 0
  8029                           ; Switch size 1, requested type "space"
  8030                           ; Number of cases is 12, Range of values is 1 to 12
  8031                           ; switch strategies available:
  8032                           ; Name         Instructions Cycles
  8033                           ; simple_byte           37    19 (average)
  8034                           ;	Chosen strategy is simple_byte
  8035  00213E  0100               	movlb	0	; () banked
  8036  002140  51AB               	movf	??_printRTC& (0+255),w,b
  8037  002142  0A01               	xorlw	1	; case 1
  8038  002144  B4D8               	btfsc	status,2,c
  8039  002146  D73E               	goto	l5836
  8040  002148  0A03               	xorlw	3	; case 2
  8041  00214A  B4D8               	btfsc	status,2,c
  8042  00214C  D74A               	goto	l5838
  8043  00214E  0A01               	xorlw	1	; case 3
  8044  002150  B4D8               	btfsc	status,2,c
  8045  002152  D756               	goto	l5840
  8046  002154  0A07               	xorlw	7	; case 4
  8047  002156  B4D8               	btfsc	status,2,c
  8048  002158  D762               	goto	l5842
  8049  00215A  0A01               	xorlw	1	; case 5
  8050  00215C  B4D8               	btfsc	status,2,c
  8051  00215E  D76E               	goto	l5844
  8052  002160  0A03               	xorlw	3	; case 6
  8053  002162  B4D8               	btfsc	status,2,c
  8054  002164  D77A               	goto	l5846
  8055  002166  0A01               	xorlw	1	; case 7
  8056  002168  B4D8               	btfsc	status,2,c
  8057  00216A  D786               	goto	l5848
  8058  00216C  0A0F               	xorlw	15	; case 8
  8059  00216E  B4D8               	btfsc	status,2,c
  8060  002170  D792               	goto	l5850
  8061  002172  0A01               	xorlw	1	; case 9
  8062  002174  B4D8               	btfsc	status,2,c
  8063  002176  D79E               	goto	l5852
  8064  002178  0A03               	xorlw	3	; case 10
  8065  00217A  B4D8               	btfsc	status,2,c
  8066  00217C  D7AA               	goto	l5854
  8067  00217E  0A01               	xorlw	1	; case 11
  8068  002180  B4D8               	btfsc	status,2,c
  8069  002182  D7B6               	goto	l5856
  8070  002184  0A07               	xorlw	7	; case 12
  8071  002186  B4D8               	btfsc	status,2,c
  8072  002188  D7C2               	goto	l5858
  8073  00218A                     l5864:
  8074                           
  8075                           ;RTC.c: 109: lcdInst(0b10000000);;
  8076  00218A  0E80               	movlw	128
  8077  00218C  ECDC  F023         	call	_lcdInst
  8078                           
  8079                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8080  002190  0E30               	movlw	low STR_21
  8081  002192  0100               	movlb	0	; () banked
  8082  002194  6F8E               	movwf	printf@f& (0+255),b
  8083  002196  0EFB               	movlw	high STR_21
  8084  002198  0100               	movlb	0	; () banked
  8085  00219A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8086  00219C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8087  0021A0  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8088  0021A4  0EBE               	movlw	low printRTC@month
  8089  0021A6  0100               	movlb	0	; () banked
  8090  0021A8  6F92               	movwf	(?_printf+4)& (0+255),b
  8091  0021AA  0E00               	movlw	high printRTC@month
  8092  0021AC  0100               	movlb	0	; () banked
  8093  0021AE  6F93               	movwf	(?_printf+5)& (0+255),b
  8094  0021B0  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8095  0021B4  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8096  0021B8  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8097  0021BC  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8098  0021C0  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8099  0021C4  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8100  0021C8  ECB8  F008         	call	_printf	;wreg free
  8101  0021CC  0012               	return		;funcret
  8102  0021CE                     __end_of_printRTC:
  8103                           	opt stack 0
  8104                           tblptru	equ	0xFF8
  8105                           tblptrh	equ	0xFF7
  8106                           tblptrl	equ	0xFF6
  8107                           tablat	equ	0xFF5
  8108                           prodh	equ	0xFF4
  8109                           prodl	equ	0xFF3
  8110                           intcon	equ	0xFF2
  8111                           intcon2	equ	0xFF1
  8112                           intcon3	equ	0xFF0
  8113                           postinc0	equ	0xFEE
  8114                           wreg	equ	0xFE8
  8115                           postdec1	equ	0xFE5
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _strcpy *****************
  8125 ;; Defined at:
  8126 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8129 ;;		 -> printRTC@month(4), UI@month(4), 
  8130 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8131 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8132 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8133 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8134 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8135 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8136 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8137 ;;		 -> STR_8(4), 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8140 ;;		 -> printRTC@month(4), UI@month(4), 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  2    0[BANK0 ] PTR unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        6 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    7
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_UI
  8161 ;;		_printRTC
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text24
  8166  0042C2                     __ptext24:
  8167                           	opt stack 0
  8168  0042C2                     _strcpy:
  8169                           	opt stack 20
  8170                           
  8171                           ;incstack = 0
  8172  0042C2  C080  F084         	movff	strcpy@to,strcpy@cp
  8173  0042C6  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8174  0042CA  D006               	goto	l5568
  8175  0042CC                     l5566:
  8176  0042CC  0100               	movlb	0	; () banked
  8177  0042CE  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8178  0042D0  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8179  0042D2  0100               	movlb	0	; () banked
  8180  0042D4  4B82               	infsnz	strcpy@from& (0+255),f,b
  8181  0042D6  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8182  0042D8                     l5568:
  8183  0042D8  C082  FFF6         	movff	strcpy@from,tblptrl
  8184  0042DC  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8185  0042E0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8186  0042E0  6AF8               	clrf	tblptru,c
  8187  0042E2                     	endif
  8188  0042E2                     	if	0	;tblptru may be non-zero
  8189  0042E2                     	endif
  8190  0042E2  C084  FFD9         	movff	strcpy@cp,fsr2l
  8191  0042E6  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8192  0042EA  0008               	tblrd		*
  8193  0042EC  CFF5 FFDF          	movff	tablat,indf2
  8194  0042F0  50DF               	movf	indf2,w,c
  8195  0042F2  B4D8               	btfsc	status,2,c
  8196  0042F4  0012               	return	
  8197  0042F6  D7EA               	goto	l5566
  8198  0042F8                     __end_of_strcpy:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           intcon	equ	0xFF2
  8207                           intcon2	equ	0xFF1
  8208                           intcon3	equ	0xFF0
  8209                           postinc0	equ	0xFEE
  8210                           wreg	equ	0xFE8
  8211                           postdec1	equ	0xFE5
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function _getRTC *****************
  8221 ;; Defined at:
  8222 ;;		line 44 in file "RTC.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;		None
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  i               2    3[BANK0 ] int 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:        2 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    9
  8243 ;; This function calls:
  8244 ;;		_I2C_Master_Read
  8245 ;;		_I2C_Master_Start
  8246 ;;		_I2C_Master_Stop
  8247 ;;		_I2C_Master_Write
  8248 ;; This function is called by:
  8249 ;;		_printRTC
  8250 ;;		_initSortTimer
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text25
  8255  003B3C                     __ptext25:
  8256                           	opt stack 0
  8257  003B3C                     _getRTC:
  8258                           	opt stack 18
  8259                           
  8260                           ;RTC.c: 48: I2C_Master_Start();
  8261                           
  8262                           ;incstack = 0
  8263  003B3C  EC02  F024         	call	_I2C_Master_Start	;wreg free
  8264                           
  8265                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8266  003B40  0E00               	movlw	0
  8267  003B42  0100               	movlb	0	; () banked
  8268  003B44  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8269  003B46  0ED0               	movlw	208
  8270  003B48  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8271  003B4A  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  8272                           
  8273                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8274  003B4E  0E00               	movlw	0
  8275  003B50  0100               	movlb	0	; () banked
  8276  003B52  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8277  003B54  0E00               	movlw	0
  8278  003B56  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8279  003B58  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  8280                           
  8281                           ;RTC.c: 51: I2C_Master_Stop();
  8282  003B5C  ECFE  F023         	call	_I2C_Master_Stop	;wreg free
  8283                           
  8284                           ;RTC.c: 54: I2C_Master_Start();
  8285  003B60  EC02  F024         	call	_I2C_Master_Start	;wreg free
  8286                           
  8287                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8288  003B64  0E00               	movlw	0
  8289  003B66  0100               	movlb	0	; () banked
  8290  003B68  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8291  003B6A  0ED1               	movlw	209
  8292  003B6C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8293  003B6E  ECF0  F023         	call	_I2C_Master_Write	;wreg free
  8294                           
  8295                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8296  003B72  0E00               	movlw	0
  8297  003B74  0100               	movlb	0	; () banked
  8298  003B76  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8299  003B78  0E00               	movlw	0
  8300  003B7A  6F83               	movwf	getRTC@i& (0+255),b
  8301  003B7C                     l5574:
  8302                           
  8303                           ; BSR set to: 0
  8304  003B7C  0100               	movlb	0	; () banked
  8305  003B7E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8306  003B80  D008               	goto	l5578
  8307  003B82  0100               	movlb	0	; () banked
  8308  003B84  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8309  003B86  E115               	bnz	l5584
  8310  003B88  0E06               	movlw	6
  8311  003B8A  0100               	movlb	0	; () banked
  8312  003B8C  5D83               	subwf	getRTC@i& (0+255),w,b
  8313  003B8E  B0D8               	btfsc	status,0,c
  8314  003B90  D010               	goto	l5584
  8315  003B92                     l5578:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8319  003B92  0E24               	movlw	low _time
  8320  003B94  0100               	movlb	0	; () banked
  8321  003B96  2583               	addwf	getRTC@i& (0+255),w,b
  8322  003B98  6ED9               	movwf	fsr2l,c
  8323  003B9A  0E01               	movlw	high _time
  8324  003B9C  0100               	movlb	0	; () banked
  8325  003B9E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8326  003BA0  6EDA               	movwf	fsr2h,c
  8327  003BA2  0E01               	movlw	1
  8328  003BA4  EC9F  F022         	call	_I2C_Master_Read
  8329  003BA8  6EDF               	movwf	indf2,c
  8330  003BAA  0100               	movlb	0	; () banked
  8331  003BAC  4B83               	infsnz	getRTC@i& (0+255),f,b
  8332  003BAE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8333  003BB0  D7E5               	goto	l5574
  8334  003BB2                     l5584:
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;RTC.c: 58: }
  8338                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8339  003BB2  0E00               	movlw	0
  8340  003BB4  EC9F  F022         	call	_I2C_Master_Read
  8341  003BB8  0101               	movlb	1	; () banked
  8342  003BBA  6F2A               	movwf	(_time+6)& (0+255),b
  8343                           
  8344                           ;RTC.c: 60: I2C_Master_Stop();
  8345  003BBC  ECFE  F023         	call	_I2C_Master_Stop	;wreg free
  8346  003BC0  0012               	return		;funcret
  8347  003BC2                     __end_of_getRTC:
  8348                           	opt stack 0
  8349                           tblptru	equ	0xFF8
  8350                           tblptrh	equ	0xFF7
  8351                           tblptrl	equ	0xFF6
  8352                           tablat	equ	0xFF5
  8353                           prodh	equ	0xFF4
  8354                           prodl	equ	0xFF3
  8355                           intcon	equ	0xFF2
  8356                           intcon2	equ	0xFF1
  8357                           intcon3	equ	0xFF0
  8358                           postinc0	equ	0xFEE
  8359                           wreg	equ	0xFE8
  8360                           postdec1	equ	0xFE5
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           fsr2h	equ	0xFDA
  8366                           fsr2l	equ	0xFD9
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function _I2C_Master_Write *****************
  8370 ;; Defined at:
  8371 ;;		line 49 in file "I2C.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  d               2    1[BANK0 ] unsigned int 
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;		None
  8376 ;; Return value:  Size  Location     Type
  8377 ;;                  1    wreg      void 
  8378 ;; Registers used:
  8379 ;;		wreg, status,2, status,0, cstack
  8380 ;; Tracked objects:
  8381 ;;		On entry : 0/0
  8382 ;;		On exit  : 0/0
  8383 ;;		Unchanged: 0/0
  8384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8385 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;Total ram usage:        2 bytes
  8390 ;; Hardware stack levels used:    1
  8391 ;; Hardware stack levels required when called:    8
  8392 ;; This function calls:
  8393 ;;		_I2C_Master_Wait
  8394 ;; This function is called by:
  8395 ;;		_loadRTC
  8396 ;;		_getRTC
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text26
  8401  0047E0                     __ptext26:
  8402                           	opt stack 0
  8403  0047E0                     _I2C_Master_Write:
  8404                           	opt stack 18
  8405                           
  8406                           ;I2C.c: 51: I2C_Master_Wait();
  8407                           
  8408                           ;incstack = 0
  8409  0047E0  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8410                           
  8411                           ;I2C.c: 52: SSPBUF = d;
  8412  0047E4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8413  0047E8  0012               	return		;funcret
  8414  0047EA                     __end_of_I2C_Master_Write:
  8415                           	opt stack 0
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           intcon	equ	0xFF2
  8423                           intcon2	equ	0xFF1
  8424                           intcon3	equ	0xFF0
  8425                           postinc0	equ	0xFEE
  8426                           wreg	equ	0xFE8
  8427                           postdec1	equ	0xFE5
  8428                           fsr1l	equ	0xFE1
  8429                           indf2	equ	0xFDF
  8430                           postinc2	equ	0xFDE
  8431                           postdec2	equ	0xFDD
  8432                           fsr2h	equ	0xFDA
  8433                           fsr2l	equ	0xFD9
  8434                           status	equ	0xFD8
  8435                           
  8436 ;; *************** function _I2C_Master_Stop *****************
  8437 ;; Defined at:
  8438 ;;		line 43 in file "I2C.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;		None
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;		None
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, status,2, status,0, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;Total ram usage:        0 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    8
  8459 ;; This function calls:
  8460 ;;		_I2C_Master_Wait
  8461 ;; This function is called by:
  8462 ;;		_loadRTC
  8463 ;;		_getRTC
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text27
  8468  0047FC                     __ptext27:
  8469                           	opt stack 0
  8470  0047FC                     _I2C_Master_Stop:
  8471                           	opt stack 18
  8472                           
  8473                           ;I2C.c: 45: I2C_Master_Wait();
  8474                           
  8475                           ;incstack = 0
  8476  0047FC  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8477                           
  8478                           ;I2C.c: 46: PEN = 1;
  8479  004800  84C5               	bsf	4037,2,c	;volatile
  8480  004802  0012               	return		;funcret
  8481  004804                     __end_of_I2C_Master_Stop:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           intcon2	equ	0xFF1
  8491                           intcon3	equ	0xFF0
  8492                           postinc0	equ	0xFEE
  8493                           wreg	equ	0xFE8
  8494                           postdec1	equ	0xFE5
  8495                           fsr1l	equ	0xFE1
  8496                           indf2	equ	0xFDF
  8497                           postinc2	equ	0xFDE
  8498                           postdec2	equ	0xFDD
  8499                           fsr2h	equ	0xFDA
  8500                           fsr2l	equ	0xFD9
  8501                           status	equ	0xFD8
  8502                           
  8503 ;; *************** function _I2C_Master_Start *****************
  8504 ;; Defined at:
  8505 ;;		line 31 in file "I2C.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      void 
  8512 ;; Registers used:
  8513 ;;		wreg, status,2, status,0, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;Total ram usage:        0 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    8
  8526 ;; This function calls:
  8527 ;;		_I2C_Master_Wait
  8528 ;; This function is called by:
  8529 ;;		_loadRTC
  8530 ;;		_getRTC
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text28
  8535  004804                     __ptext28:
  8536                           	opt stack 0
  8537  004804                     _I2C_Master_Start:
  8538                           	opt stack 18
  8539                           
  8540                           ;I2C.c: 33: I2C_Master_Wait();
  8541                           
  8542                           ;incstack = 0
  8543  004804  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8544                           
  8545                           ;I2C.c: 34: SEN = 1;
  8546  004808  80C5               	bsf	4037,0,c	;volatile
  8547  00480A  0012               	return		;funcret
  8548  00480C                     __end_of_I2C_Master_Start:
  8549                           	opt stack 0
  8550                           tblptru	equ	0xFF8
  8551                           tblptrh	equ	0xFF7
  8552                           tblptrl	equ	0xFF6
  8553                           tablat	equ	0xFF5
  8554                           prodh	equ	0xFF4
  8555                           prodl	equ	0xFF3
  8556                           intcon	equ	0xFF2
  8557                           intcon2	equ	0xFF1
  8558                           intcon3	equ	0xFF0
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           fsr1l	equ	0xFE1
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function _I2C_Master_Read *****************
  8571 ;; Defined at:
  8572 ;;		line 55 in file "I2C.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  a               1    wreg     unsigned char 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  a               1    1[BANK0 ] unsigned char 
  8577 ;;  temp            1    2[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      unsigned char 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    8
  8594 ;; This function calls:
  8595 ;;		_I2C_Master_Wait
  8596 ;; This function is called by:
  8597 ;;		_getRTC
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text29
  8602  00453E                     __ptext29:
  8603                           	opt stack 0
  8604  00453E                     _I2C_Master_Read:
  8605                           	opt stack 18
  8606                           
  8607                           ;incstack = 0
  8608                           ;I2C_Master_Read@a stored from wreg
  8609  00453E  0100               	movlb	0	; () banked
  8610  004540  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8611                           
  8612                           ;I2C.c: 57: unsigned char temp;
  8613                           ;I2C.c: 58: I2C_Master_Wait();
  8614  004542  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8615                           
  8616                           ;I2C.c: 59: RCEN = 1;
  8617  004546  86C5               	bsf	4037,3,c	;volatile
  8618                           
  8619                           ;I2C.c: 60: I2C_Master_Wait();
  8620  004548  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8621                           
  8622                           ;I2C.c: 61: temp = SSPBUF;
  8623  00454C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8624                           
  8625                           ;I2C.c: 62: I2C_Master_Wait();
  8626  004550  ECC1  F023         	call	_I2C_Master_Wait	;wreg free
  8627                           
  8628                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8629  004554  0100               	movlb	0	; () banked
  8630  004556  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8631  004558  0100               	movlb	0	; () banked
  8632  00455A  A4D8               	btfss	status,2,c
  8633  00455C  D002               	goto	u3610
  8634  00455E  8AC5               	bsf	4037,5,c	;volatile
  8635  004560  D001               	goto	l5268
  8636  004562                     u3610:
  8637  004562  9AC5               	bcf	4037,5,c	;volatile
  8638  004564                     l5268:
  8639                           
  8640                           ;I2C.c: 64: ACKEN = 1;
  8641  004564  88C5               	bsf	4037,4,c	;volatile
  8642                           
  8643                           ;I2C.c: 65: return temp;
  8644  004566  0100               	movlb	0	; () banked
  8645  004568  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8646  00456A  0012               	return	
  8647  00456C                     __end_of_I2C_Master_Read:
  8648                           	opt stack 0
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           intcon	equ	0xFF2
  8656                           intcon2	equ	0xFF1
  8657                           intcon3	equ	0xFF0
  8658                           postinc0	equ	0xFEE
  8659                           wreg	equ	0xFE8
  8660                           postdec1	equ	0xFE5
  8661                           fsr1l	equ	0xFE1
  8662                           indf2	equ	0xFDF
  8663                           postinc2	equ	0xFDE
  8664                           postdec2	equ	0xFDD
  8665                           fsr2h	equ	0xFDA
  8666                           fsr2l	equ	0xFD9
  8667                           status	equ	0xFD8
  8668                           
  8669 ;; *************** function _I2C_Master_Wait *****************
  8670 ;; Defined at:
  8671 ;;		line 26 in file "I2C.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;		None
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;		None
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  1    wreg      void 
  8678 ;; Registers used:
  8679 ;;		wreg, status,2, status,0
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;Total ram usage:        1 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    7
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_I2C_Master_Start
  8696 ;;		_I2C_Master_Stop
  8697 ;;		_I2C_Master_Write
  8698 ;;		_I2C_Master_Read
  8699 ;;		_I2C_Master_RepeatedStart
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text30
  8704  004782                     __ptext30:
  8705                           	opt stack 0
  8706  004782                     _I2C_Master_Wait:
  8707                           	opt stack 18
  8708  004782                     l66:
  8709  004782  B4C7               	btfsc	4039,2,c	;volatile
  8710  004784  D7FE               	goto	l66
  8711  004786  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8712  00478A  0E1F               	movlw	31
  8713  00478C  0100               	movlb	0	; () banked
  8714  00478E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8715  004790  B4D8               	btfsc	status,2,c
  8716  004792  0012               	return	
  8717  004794  D7F6               	goto	l66
  8718  004796                     __end_of_I2C_Master_Wait:
  8719                           	opt stack 0
  8720                           tblptru	equ	0xFF8
  8721                           tblptrh	equ	0xFF7
  8722                           tblptrl	equ	0xFF6
  8723                           tablat	equ	0xFF5
  8724                           prodh	equ	0xFF4
  8725                           prodl	equ	0xFF3
  8726                           intcon	equ	0xFF2
  8727                           intcon2	equ	0xFF1
  8728                           intcon3	equ	0xFF0
  8729                           postinc0	equ	0xFEE
  8730                           wreg	equ	0xFE8
  8731                           postdec1	equ	0xFE5
  8732                           fsr1l	equ	0xFE1
  8733                           indf2	equ	0xFDF
  8734                           postinc2	equ	0xFDE
  8735                           postdec2	equ	0xFDD
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8
  8739                           
  8740 ;; *************** function _change_state_to_menu_22 *****************
  8741 ;; Defined at:
  8742 ;;		line 498 in file "UI.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:   10
  8763 ;; This function calls:
  8764 ;;		_lcdInst
  8765 ;;		_printf
  8766 ;; This function is called by:
  8767 ;;		_UI
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text31
  8772  004252                     __ptext31:
  8773                           	opt stack 0
  8774  004252                     _change_state_to_menu_22:
  8775                           	opt stack 19
  8776                           
  8777                           ;UI.c: 499: cur_state = 22;
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;incstack = 0
  8781  004252  0E00               	movlw	0
  8782  004254  0100               	movlb	0	; () banked
  8783  004256  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8784  004258  0E16               	movlw	22
  8785  00425A  6FE0               	movwf	_cur_state& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;UI.c: 501: lcdInst(0b10000000);;
  8789  00425C  0E80               	movlw	128
  8790  00425E  ECDC  F023         	call	_lcdInst
  8791                           
  8792                           ;UI.c: 502: printf("2. SORT        <");
  8793  004262  0EDA               	movlw	low STR_34
  8794  004264  0100               	movlb	0	; () banked
  8795  004266  6F8E               	movwf	printf@f& (0+255),b
  8796  004268  0EFD               	movlw	high STR_34
  8797  00426A  0100               	movlb	0	; () banked
  8798  00426C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8799  00426E  ECB8  F008         	call	_printf	;wreg free
  8800                           
  8801                           ;UI.c: 503: lcdInst(0b11000000);;
  8802  004272  0EC0               	movlw	192
  8803  004274  ECDC  F023         	call	_lcdInst
  8804                           
  8805                           ;UI.c: 504: printf("3. LOGS         ");
  8806  004278  0E1F               	movlw	low STR_36
  8807  00427A  0100               	movlb	0	; () banked
  8808  00427C  6F8E               	movwf	printf@f& (0+255),b
  8809  00427E  0EFD               	movlw	high STR_36
  8810  004280  0100               	movlb	0	; () banked
  8811  004282  6F8F               	movwf	(printf@f+1)& (0+255),b
  8812  004284  ECB8  F008         	call	_printf	;wreg free
  8813  004288  0012               	return		;funcret
  8814  00428A                     __end_of_change_state_to_menu_22:
  8815                           	opt stack 0
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           intcon2	equ	0xFF1
  8824                           intcon3	equ	0xFF0
  8825                           postinc0	equ	0xFEE
  8826                           wreg	equ	0xFE8
  8827                           postdec1	equ	0xFE5
  8828                           fsr1l	equ	0xFE1
  8829                           indf2	equ	0xFDF
  8830                           postinc2	equ	0xFDE
  8831                           postdec2	equ	0xFDD
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function _change_state_to_menu_12 *****************
  8837 ;; Defined at:
  8838 ;;		line 490 in file "UI.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;Total ram usage:        0 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:   10
  8859 ;; This function calls:
  8860 ;;		_lcdInst
  8861 ;;		_printf
  8862 ;; This function is called by:
  8863 ;;		_UI
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text32
  8868  00428A                     __ptext32:
  8869                           	opt stack 0
  8870  00428A                     _change_state_to_menu_12:
  8871                           	opt stack 19
  8872                           
  8873                           ;UI.c: 491: cur_state = 12;
  8874                           
  8875                           ;incstack = 0
  8876  00428A  0E00               	movlw	0
  8877  00428C  0100               	movlb	0	; () banked
  8878  00428E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  8879  004290  0E0C               	movlw	12
  8880  004292  6FE0               	movwf	_cur_state& (0+255),b
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;UI.c: 493: lcdInst(0b10000000);;
  8884  004294  0E80               	movlw	128
  8885  004296  ECDC  F023         	call	_lcdInst
  8886                           
  8887                           ;UI.c: 494: printf("1. DATE/TIME    ");
  8888  00429A  0E41               	movlw	low STR_33
  8889  00429C  0100               	movlb	0	; () banked
  8890  00429E  6F8E               	movwf	printf@f& (0+255),b
  8891  0042A0  0EFD               	movlw	high STR_33
  8892  0042A2  0100               	movlb	0	; () banked
  8893  0042A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8894  0042A6  ECB8  F008         	call	_printf	;wreg free
  8895                           
  8896                           ;UI.c: 495: lcdInst(0b11000000);;
  8897  0042AA  0EC0               	movlw	192
  8898  0042AC  ECDC  F023         	call	_lcdInst
  8899                           
  8900                           ;UI.c: 496: printf("2. SORT        <");
  8901  0042B0  0EDA               	movlw	low STR_34
  8902  0042B2  0100               	movlb	0	; () banked
  8903  0042B4  6F8E               	movwf	printf@f& (0+255),b
  8904  0042B6  0EFD               	movlw	high STR_34
  8905  0042B8  0100               	movlb	0	; () banked
  8906  0042BA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8907  0042BC  ECB8  F008         	call	_printf	;wreg free
  8908  0042C0  0012               	return		;funcret
  8909  0042C2                     __end_of_change_state_to_menu_12:
  8910                           	opt stack 0
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           intcon3	equ	0xFF0
  8920                           postinc0	equ	0xFEE
  8921                           wreg	equ	0xFE8
  8922                           postdec1	equ	0xFE5
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           fsr2h	equ	0xFDA
  8928                           fsr2l	equ	0xFD9
  8929                           status	equ	0xFD8
  8930                           
  8931 ;; *************** function ___awmod *****************
  8932 ;; Defined at:
  8933 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;  dividend        2    0[BANK0 ] int 
  8936 ;;  divisor         2    2[BANK0 ] int 
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  sign            1    5[BANK0 ] unsigned char 
  8939 ;;  counter         1    4[BANK0 ] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  2    0[BANK0 ] int 
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;Total ram usage:        6 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    7
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		_UI
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text33
  8964  0038F0                     __ptext33:
  8965                           	opt stack 0
  8966  0038F0                     ___awmod:
  8967                           	opt stack 22
  8968                           
  8969                           ;incstack = 0
  8970  0038F0  0E00               	movlw	0
  8971  0038F2  0100               	movlb	0	; () banked
  8972  0038F4  6F85               	movwf	___awmod@sign& (0+255),b
  8973                           
  8974                           ; BSR set to: 0
  8975  0038F6  0100               	movlb	0	; () banked
  8976  0038F8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8977  0038FA  D008               	goto	l7336
  8978                           
  8979                           ; BSR set to: 0
  8980  0038FC  0100               	movlb	0	; () banked
  8981  0038FE  6D80               	negf	___awmod@dividend& (0+255),b
  8982  003900  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8983  003902  B0D8               	btfsc	status,0,c
  8984  003904  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8985                           
  8986                           ; BSR set to: 0
  8987  003906  0E01               	movlw	1
  8988  003908  0100               	movlb	0	; () banked
  8989  00390A  6F85               	movwf	___awmod@sign& (0+255),b
  8990  00390C                     l7336:
  8991                           
  8992                           ; BSR set to: 0
  8993  00390C  0100               	movlb	0	; () banked
  8994  00390E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8995  003910  D005               	goto	l7340
  8996                           
  8997                           ; BSR set to: 0
  8998  003912  0100               	movlb	0	; () banked
  8999  003914  6D82               	negf	___awmod@divisor& (0+255),b
  9000  003916  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9001  003918  B0D8               	btfsc	status,0,c
  9002  00391A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9003  00391C                     l7340:
  9004                           
  9005                           ; BSR set to: 0
  9006  00391C  0100               	movlb	0	; () banked
  9007  00391E  5182               	movf	___awmod@divisor& (0+255),w,b
  9008  003920  0100               	movlb	0	; () banked
  9009  003922  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9010  003924  B4D8               	btfsc	status,2,c
  9011  003926  D026               	goto	l7356
  9012                           
  9013                           ; BSR set to: 0
  9014  003928  0E01               	movlw	1
  9015  00392A  0100               	movlb	0	; () banked
  9016  00392C  6F84               	movwf	___awmod@counter& (0+255),b
  9017  00392E  D006               	goto	l7346
  9018  003930                     l7344:
  9019                           
  9020                           ; BSR set to: 0
  9021  003930  0100               	movlb	0	; () banked
  9022  003932  90D8               	bcf	status,0,c
  9023  003934  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9024  003936  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9025  003938  0100               	movlb	0	; () banked
  9026  00393A  2B84               	incf	___awmod@counter& (0+255),f,b
  9027  00393C                     l7346:
  9028                           
  9029                           ; BSR set to: 0
  9030  00393C  0100               	movlb	0	; () banked
  9031  00393E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9032  003940  D7F7               	goto	l7344
  9033  003942                     l7348:
  9034                           
  9035                           ; BSR set to: 0
  9036  003942  0100               	movlb	0	; () banked
  9037  003944  5182               	movf	___awmod@divisor& (0+255),w,b
  9038  003946  0100               	movlb	0	; () banked
  9039  003948  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9040  00394A  0100               	movlb	0	; () banked
  9041  00394C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9042  00394E  0100               	movlb	0	; () banked
  9043  003950  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9044  003952  A0D8               	btfss	status,0,c
  9045  003954  D008               	goto	l7352
  9046                           
  9047                           ; BSR set to: 0
  9048  003956  0100               	movlb	0	; () banked
  9049  003958  5182               	movf	___awmod@divisor& (0+255),w,b
  9050  00395A  0100               	movlb	0	; () banked
  9051  00395C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9052  00395E  0100               	movlb	0	; () banked
  9053  003960  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9054  003962  0100               	movlb	0	; () banked
  9055  003964  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9056  003966                     l7352:
  9057                           
  9058                           ; BSR set to: 0
  9059  003966  0100               	movlb	0	; () banked
  9060  003968  90D8               	bcf	status,0,c
  9061  00396A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9062  00396C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9063                           
  9064                           ; BSR set to: 0
  9065  00396E  0100               	movlb	0	; () banked
  9066  003970  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9067  003972  D7E7               	goto	l7348
  9068  003974                     l7356:
  9069                           
  9070                           ; BSR set to: 0
  9071  003974  0100               	movlb	0	; () banked
  9072  003976  5185               	movf	___awmod@sign& (0+255),w,b
  9073  003978  0100               	movlb	0	; () banked
  9074  00397A  B4D8               	btfsc	status,2,c
  9075  00397C  D005               	goto	l7360
  9076                           
  9077                           ; BSR set to: 0
  9078  00397E  0100               	movlb	0	; () banked
  9079  003980  6D80               	negf	___awmod@dividend& (0+255),b
  9080  003982  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9081  003984  B0D8               	btfsc	status,0,c
  9082  003986  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9083  003988                     l7360:
  9084                           
  9085                           ; BSR set to: 0
  9086  003988  C080  F080         	movff	___awmod@dividend,?___awmod
  9087  00398C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9088  003990  0012               	return	
  9089  003992                     __end_of___awmod:
  9090                           	opt stack 0
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodh	equ	0xFF4
  9096                           prodl	equ	0xFF3
  9097                           intcon	equ	0xFF2
  9098                           intcon2	equ	0xFF1
  9099                           intcon3	equ	0xFF0
  9100                           postinc0	equ	0xFEE
  9101                           wreg	equ	0xFE8
  9102                           postdec1	equ	0xFE5
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function ___awdiv *****************
  9112 ;; Defined at:
  9113 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  dividend        2    6[BANK0 ] int 
  9116 ;;  divisor         2    8[BANK0 ] int 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  quotient        2   12[BANK0 ] int 
  9119 ;;  sign            1   11[BANK0 ] unsigned char 
  9120 ;;  counter         1   10[BANK0 ] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  2    6[BANK0 ] int 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        8 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    7
  9137 ;; This function calls:
  9138 ;;		Nothing
  9139 ;; This function is called by:
  9140 ;;		_UI
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text34
  9145  0036CC                     __ptext34:
  9146                           	opt stack 0
  9147  0036CC                     ___awdiv:
  9148                           	opt stack 22
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;incstack = 0
  9152  0036CC  0E00               	movlw	0
  9153  0036CE  0100               	movlb	0	; () banked
  9154  0036D0  6F8B               	movwf	___awdiv@sign& (0+255),b
  9155                           
  9156                           ; BSR set to: 0
  9157  0036D2  0100               	movlb	0	; () banked
  9158  0036D4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9159  0036D6  D008               	goto	l7292
  9160                           
  9161                           ; BSR set to: 0
  9162  0036D8  0100               	movlb	0	; () banked
  9163  0036DA  6D88               	negf	___awdiv@divisor& (0+255),b
  9164  0036DC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9165  0036DE  B0D8               	btfsc	status,0,c
  9166  0036E0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9167                           
  9168                           ; BSR set to: 0
  9169  0036E2  0E01               	movlw	1
  9170  0036E4  0100               	movlb	0	; () banked
  9171  0036E6  6F8B               	movwf	___awdiv@sign& (0+255),b
  9172  0036E8                     l7292:
  9173                           
  9174                           ; BSR set to: 0
  9175  0036E8  0100               	movlb	0	; () banked
  9176  0036EA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9177  0036EC  D008               	goto	l7298
  9178                           
  9179                           ; BSR set to: 0
  9180  0036EE  0100               	movlb	0	; () banked
  9181  0036F0  6D86               	negf	___awdiv@dividend& (0+255),b
  9182  0036F2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9183  0036F4  B0D8               	btfsc	status,0,c
  9184  0036F6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9185                           
  9186                           ; BSR set to: 0
  9187  0036F8  0E01               	movlw	1
  9188  0036FA  0100               	movlb	0	; () banked
  9189  0036FC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9190  0036FE                     l7298:
  9191                           
  9192                           ; BSR set to: 0
  9193  0036FE  0E00               	movlw	0
  9194  003700  0100               	movlb	0	; () banked
  9195  003702  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9196  003704  0E00               	movlw	0
  9197  003706  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9198                           
  9199                           ; BSR set to: 0
  9200  003708  0100               	movlb	0	; () banked
  9201  00370A  5188               	movf	___awdiv@divisor& (0+255),w,b
  9202  00370C  0100               	movlb	0	; () banked
  9203  00370E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9204  003710  B4D8               	btfsc	status,2,c
  9205  003712  D02C               	goto	l7320
  9206                           
  9207                           ; BSR set to: 0
  9208  003714  0E01               	movlw	1
  9209  003716  0100               	movlb	0	; () banked
  9210  003718  6F8A               	movwf	___awdiv@counter& (0+255),b
  9211  00371A  D006               	goto	l7306
  9212  00371C                     l7304:
  9213                           
  9214                           ; BSR set to: 0
  9215  00371C  0100               	movlb	0	; () banked
  9216  00371E  90D8               	bcf	status,0,c
  9217  003720  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9218  003722  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9219  003724  0100               	movlb	0	; () banked
  9220  003726  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9221  003728                     l7306:
  9222                           
  9223                           ; BSR set to: 0
  9224  003728  0100               	movlb	0	; () banked
  9225  00372A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9226  00372C  D7F7               	goto	l7304
  9227  00372E                     l7308:
  9228                           
  9229                           ; BSR set to: 0
  9230  00372E  0100               	movlb	0	; () banked
  9231  003730  90D8               	bcf	status,0,c
  9232  003732  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9233  003734  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  003736  0100               	movlb	0	; () banked
  9237  003738  5188               	movf	___awdiv@divisor& (0+255),w,b
  9238  00373A  0100               	movlb	0	; () banked
  9239  00373C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9240  00373E  0100               	movlb	0	; () banked
  9241  003740  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9242  003742  0100               	movlb	0	; () banked
  9243  003744  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9244  003746  A0D8               	btfss	status,0,c
  9245  003748  D00A               	goto	l7316
  9246                           
  9247                           ; BSR set to: 0
  9248  00374A  0100               	movlb	0	; () banked
  9249  00374C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9250  00374E  0100               	movlb	0	; () banked
  9251  003750  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9252  003752  0100               	movlb	0	; () banked
  9253  003754  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9254  003756  0100               	movlb	0	; () banked
  9255  003758  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9256                           
  9257                           ; BSR set to: 0
  9258  00375A  0100               	movlb	0	; () banked
  9259  00375C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9260  00375E                     l7316:
  9261                           
  9262                           ; BSR set to: 0
  9263  00375E  0100               	movlb	0	; () banked
  9264  003760  90D8               	bcf	status,0,c
  9265  003762  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9266  003764  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9267                           
  9268                           ; BSR set to: 0
  9269  003766  0100               	movlb	0	; () banked
  9270  003768  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9271  00376A  D7E1               	goto	l7308
  9272  00376C                     l7320:
  9273                           
  9274                           ; BSR set to: 0
  9275  00376C  0100               	movlb	0	; () banked
  9276  00376E  518B               	movf	___awdiv@sign& (0+255),w,b
  9277  003770  0100               	movlb	0	; () banked
  9278  003772  B4D8               	btfsc	status,2,c
  9279  003774  D005               	goto	l7324
  9280                           
  9281                           ; BSR set to: 0
  9282  003776  0100               	movlb	0	; () banked
  9283  003778  6D8C               	negf	___awdiv@quotient& (0+255),b
  9284  00377A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9285  00377C  B0D8               	btfsc	status,0,c
  9286  00377E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9287  003780                     l7324:
  9288                           
  9289                           ; BSR set to: 0
  9290  003780  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9291  003784  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9292  003788  0012               	return	
  9293  00378A                     __end_of___awdiv:
  9294                           	opt stack 0
  9295                           tblptru	equ	0xFF8
  9296                           tblptrh	equ	0xFF7
  9297                           tblptrl	equ	0xFF6
  9298                           tablat	equ	0xFF5
  9299                           prodh	equ	0xFF4
  9300                           prodl	equ	0xFF3
  9301                           intcon	equ	0xFF2
  9302                           intcon2	equ	0xFF1
  9303                           intcon3	equ	0xFF0
  9304                           postinc0	equ	0xFEE
  9305                           wreg	equ	0xFE8
  9306                           postdec1	equ	0xFE5
  9307                           fsr1l	equ	0xFE1
  9308                           indf2	equ	0xFDF
  9309                           postinc2	equ	0xFDE
  9310                           postdec2	equ	0xFDD
  9311                           fsr2h	equ	0xFDA
  9312                           fsr2l	equ	0xFD9
  9313                           status	equ	0xFD8
  9314                           
  9315 ;; *************** function _Test *****************
  9316 ;; Defined at:
  9317 ;;		line 28 in file "Test.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;		None
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      void 
  9324 ;; Registers used:
  9325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;Total ram usage:        2 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:   11
  9338 ;; This function calls:
  9339 ;;		_BothServos
  9340 ;;		_EEPROMTest
  9341 ;;		_PortTestA5
  9342 ;;		_PortTests
  9343 ;;		_SolenoidTestA5
  9344 ;;		_ToggleTestA5
  9345 ;;		_actuatorTest
  9346 ;;		_algorithmTest
  9347 ;;		_lcdInst
  9348 ;;		_printf
  9349 ;;		_sensorTest
  9350 ;; This function is called by:
  9351 ;;		_main
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text35
  9356  00324C                     __ptext35:
  9357                           	opt stack 0
  9358  00324C                     _Test:
  9359                           	opt stack 19
  9360  00324C                     
  9361                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9362  00324C  0E01               	movlw	1
  9363  00324E  ECDC  F023         	call	_lcdInst
  9364  003252  0E68               	movlw	104
  9365  003254  0100               	movlb	0	; () banked
  9366  003256  6FC6               	movwf	??_Test& (0+255),b
  9367  003258  0EE4               	movlw	228
  9368  00325A                     u7497:
  9369  00325A  2EE8               	decfsz	wreg,f,c
  9370  00325C  D7FE               	bra	u7497
  9371  00325E  2FC6               	decfsz	??_Test& (0+255),f,b
  9372  003260  D7FC               	bra	u7497
  9373  003262  F000               	nop	
  9374  003264  0E80               	movlw	128
  9375  003266  ECDC  F023         	call	_lcdInst
  9376                           
  9377                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9378  00326A  0E86               	movlw	low STR_68
  9379  00326C  0100               	movlb	0	; () banked
  9380  00326E  6F8E               	movwf	printf@f& (0+255),b
  9381  003270  0EFC               	movlw	high STR_68
  9382  003272  0100               	movlb	0	; () banked
  9383  003274  6F8F               	movwf	(printf@f+1)& (0+255),b
  9384  003276  ECB8  F008         	call	_printf	;wreg free
  9385                           
  9386                           ;Test.c: 33: lcdInst(0b11000000);;
  9387  00327A  0EC0               	movlw	192
  9388  00327C  ECDC  F023         	call	_lcdInst
  9389                           
  9390                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9391  003280  0EB9               	movlw	low STR_69
  9392  003282  0100               	movlb	0	; () banked
  9393  003284  6F8E               	movwf	printf@f& (0+255),b
  9394  003286  0EFC               	movlw	high STR_69
  9395  003288  0100               	movlb	0	; () banked
  9396  00328A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9397  00328C  ECB8  F008         	call	_printf	;wreg free
  9398                           
  9399                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9400  003290  0E05               	movlw	5
  9401  003292  0100               	movlb	0	; () banked
  9402  003294  6FC7               	movwf	(??_Test+1)& (0+255),b
  9403  003296  0E0F               	movlw	15
  9404  003298  0100               	movlb	0	; () banked
  9405  00329A  6FC6               	movwf	??_Test& (0+255),b
  9406  00329C  0EF1               	movlw	241
  9407  00329E                     u7507:
  9408  00329E  2EE8               	decfsz	wreg,f,c
  9409  0032A0  D7FE               	bra	u7507
  9410  0032A2  2FC6               	decfsz	??_Test& (0+255),f,b
  9411  0032A4  D7FC               	bra	u7507
  9412  0032A6  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9413  0032A8  D7FA               	bra	u7507
  9414  0032AA                     l1034:
  9415  0032AA  A281               	btfss	3969,1,c	;volatile
  9416  0032AC  D7FE               	goto	l1034
  9417                           
  9418                           ;Test.c: 37: var = PORTB >> 4;
  9419  0032AE  CF81 F0C6          	movff	3969,??_Test	;volatile
  9420  0032B2  0100               	movlb	0	; () banked
  9421  0032B4  3BC6               	swapf	??_Test& (0+255),f,b
  9422  0032B6  0E0F               	movlw	15
  9423  0032B8  17C6               	andwf	??_Test& (0+255),f,b
  9424  0032BA  0100               	movlb	0	; () banked
  9425  0032BC  51C6               	movf	??_Test& (0+255),w,b
  9426  0032BE  0100               	movlb	0	; () banked
  9427  0032C0  6FFA               	movwf	_var& (0+255),b
  9428  0032C2  6BFB               	clrf	(_var+1)& (0+255),b
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;Test.c: 38: var++;
  9432  0032C4  0100               	movlb	0	; () banked
  9433  0032C6  4BFA               	infsnz	_var& (0+255),f,b
  9434  0032C8  2BFB               	incf	(_var+1)& (0+255),f,b
  9435  0032CA                     l1037:
  9436  0032CA  A281               	btfss	3969,1,c	;volatile
  9437  0032CC  D01C               	goto	l8058
  9438  0032CE  D7FD               	goto	l1037
  9439  0032D0                     l8038:
  9440                           
  9441                           ;Test.c: 42: algorithmTest();
  9442  0032D0  EC9B  F01A         	call	_algorithmTest	;wreg free
  9443                           
  9444                           ;Test.c: 43: break;
  9445  0032D4  D7BB               	goto	l8020
  9446  0032D6                     l8040:
  9447                           
  9448                           ;Test.c: 45: sensorTest();
  9449  0032D6  EC8B  F00C         	call	_sensorTest	;wreg free
  9450                           
  9451                           ;Test.c: 46: break;
  9452  0032DA  D7B8               	goto	l8020
  9453  0032DC                     l8042:
  9454                           
  9455                           ;Test.c: 48: actuatorTest();
  9456  0032DC  EC09  F000         	call	_actuatorTest	;wreg free
  9457                           
  9458                           ;Test.c: 49: break;
  9459  0032E0  D7B5               	goto	l8020
  9460  0032E2                     l8044:
  9461                           
  9462                           ;Test.c: 51: PortTestA5();
  9463  0032E2  ECC9  F01C         	call	_PortTestA5	;wreg free
  9464                           
  9465                           ;Test.c: 52: break;
  9466  0032E6  D7B2               	goto	l8020
  9467  0032E8                     l8046:
  9468                           
  9469                           ;Test.c: 54: ToggleTestA5();
  9470  0032E8  EC5A  F01D         	call	_ToggleTestA5	;wreg free
  9471                           
  9472                           ;Test.c: 55: break;
  9473  0032EC  D7AF               	goto	l8020
  9474  0032EE                     l8048:
  9475                           
  9476                           ;Test.c: 57: EEPROMTest();
  9477  0032EE  EC0E  F024         	call	_EEPROMTest	;wreg free
  9478                           
  9479                           ;Test.c: 58: break;
  9480  0032F2  D7AC               	goto	l8020
  9481  0032F4                     l8050:
  9482                           
  9483                           ;Test.c: 60: SolenoidTestA5();
  9484  0032F4  ECAA  F019         	call	_SolenoidTestA5	;wreg free
  9485                           
  9486                           ;Test.c: 61: break;
  9487  0032F8  D7A9               	goto	l8020
  9488  0032FA                     l8052:
  9489                           
  9490                           ;Test.c: 63: PortTests();
  9491  0032FA  ECE1  F01D         	call	_PortTests	;wreg free
  9492                           
  9493                           ;Test.c: 64: break;
  9494  0032FE  D7A6               	goto	l8020
  9495  003300                     l8054:
  9496                           
  9497                           ;Test.c: 66: BothServos();
  9498  003300  EC0A  F00E         	call	_BothServos	;wreg free
  9499                           
  9500                           ;Test.c: 70: }
  9501                           
  9502                           ;Test.c: 69: break;
  9503                           
  9504                           ;Test.c: 68: default:
  9505                           
  9506                           ;Test.c: 67: break;
  9507  003304  D7A3               	goto	l8020
  9508  003306                     l8058:
  9509  003306  C0FA  F0C6         	movff	_var,??_Test
  9510  00330A  C0FB  F0C7         	movff	_var+1,??_Test+1
  9511                           
  9512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9513                           ; Switch size 1, requested type "space"
  9514                           ; Number of cases is 1, Range of values is 0 to 0
  9515                           ; switch strategies available:
  9516                           ; Name         Instructions Cycles
  9517                           ; simple_byte            4     3 (average)
  9518                           ;	Chosen strategy is simple_byte
  9519  00330E  0100               	movlb	0	; () banked
  9520  003310  51C7               	movf	(??_Test+1)& (0+255),w,b
  9521  003312  0A00               	xorlw	0	; case 0
  9522  003314  A4D8               	btfss	status,2,c
  9523  003316  D79A               	goto	l8020
  9524                           
  9525                           ; BSR set to: 0
  9526                           ; Switch size 1, requested type "space"
  9527                           ; Number of cases is 9, Range of values is 1 to 10
  9528                           ; switch strategies available:
  9529                           ; Name         Instructions Cycles
  9530                           ; simple_byte           28    15 (average)
  9531                           ;	Chosen strategy is simple_byte
  9532  003318  0100               	movlb	0	; () banked
  9533  00331A  51C6               	movf	??_Test& (0+255),w,b
  9534  00331C  0A01               	xorlw	1	; case 1
  9535  00331E  B4D8               	btfsc	status,2,c
  9536  003320  D7D7               	goto	l8038
  9537  003322  0A03               	xorlw	3	; case 2
  9538  003324  B4D8               	btfsc	status,2,c
  9539  003326  D7D7               	goto	l8040
  9540  003328  0A01               	xorlw	1	; case 3
  9541  00332A  B4D8               	btfsc	status,2,c
  9542  00332C  D7D7               	goto	l8042
  9543  00332E  0A06               	xorlw	6	; case 5
  9544  003330  B4D8               	btfsc	status,2,c
  9545  003332  D7D7               	goto	l8044
  9546  003334  0A03               	xorlw	3	; case 6
  9547  003336  B4D8               	btfsc	status,2,c
  9548  003338  D7D7               	goto	l8046
  9549  00333A  0A01               	xorlw	1	; case 7
  9550  00333C  B4D8               	btfsc	status,2,c
  9551  00333E  D7D7               	goto	l8048
  9552  003340  0A0F               	xorlw	15	; case 8
  9553  003342  B4D8               	btfsc	status,2,c
  9554  003344  D7D7               	goto	l8050
  9555  003346  0A01               	xorlw	1	; case 9
  9556  003348  B4D8               	btfsc	status,2,c
  9557  00334A  D7D7               	goto	l8052
  9558  00334C  0A03               	xorlw	3	; case 10
  9559  00334E  B4D8               	btfsc	status,2,c
  9560  003350  D7D7               	goto	l8054
  9561                           
  9562                           ; BSR set to: 0
  9563                           
  9564                           ; BSR set to: 0
  9565  003352  D77C               	goto	l8020
  9566  003354                     __end_of_Test:
  9567                           	opt stack 0
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           intcon2	equ	0xFF1
  9576                           intcon3	equ	0xFF0
  9577                           postinc0	equ	0xFEE
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _sensorTest *****************
  9589 ;; Defined at:
  9590 ;;		line 118 in file "Test.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  res             2   45[BANK0 ] int 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      void 
  9597 ;; Registers used:
  9598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;Total ram usage:        4 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:   10
  9611 ;; This function calls:
  9612 ;;		_lcdInst
  9613 ;;		_printf
  9614 ;;		_readADC
  9615 ;;		_readMAG
  9616 ;; This function is called by:
  9617 ;;		_Test
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text36
  9622  001916                     __ptext36:
  9623                           	opt stack 0
  9624  001916                     _sensorTest:
  9625                           	opt stack 19
  9626                           
  9627                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;incstack = 0
  9631  001916  0E01               	movlw	1
  9632  001918  ECDC  F023         	call	_lcdInst
  9633  00191C  0E68               	movlw	104
  9634  00191E  0100               	movlb	0	; () banked
  9635  001920  6FAB               	movwf	??_sensorTest& (0+255),b
  9636  001922  0EE4               	movlw	228
  9637  001924                     u7517:
  9638  001924  2EE8               	decfsz	wreg,f,c
  9639  001926  D7FE               	bra	u7517
  9640  001928  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9641  00192A  D7FC               	bra	u7517
  9642  00192C  F000               	nop	
  9643  00192E  0E80               	movlw	128
  9644  001930  ECDC  F023         	call	_lcdInst
  9645                           
  9646                           ;Test.c: 121: printf("SENSORS");
  9647  001934  0EAE               	movlw	low STR_77
  9648  001936  0100               	movlb	0	; () banked
  9649  001938  6F8E               	movwf	printf@f& (0+255),b
  9650  00193A  0EFF               	movlw	high STR_77
  9651  00193C  0100               	movlb	0	; () banked
  9652  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9653  001940  ECB8  F008         	call	_printf	;wreg free
  9654                           
  9655                           ;Test.c: 122: lcdInst(0b11000000);;
  9656  001944  0EC0               	movlw	192
  9657  001946  ECDC  F023         	call	_lcdInst
  9658                           
  9659                           ;Test.c: 123: printf("PUSH TO START");
  9660  00194A  0EFF               	movlw	low STR_71
  9661  00194C  0100               	movlb	0	; () banked
  9662  00194E  6F8E               	movwf	printf@f& (0+255),b
  9663  001950  0EFE               	movlw	high STR_71
  9664  001952  0100               	movlb	0	; () banked
  9665  001954  6F8F               	movwf	(printf@f+1)& (0+255),b
  9666  001956  ECB8  F008         	call	_printf	;wreg free
  9667                           
  9668                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9669  00195A  0E05               	movlw	5
  9670  00195C  0100               	movlb	0	; () banked
  9671  00195E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9672  001960  0E0F               	movlw	15
  9673  001962  0100               	movlb	0	; () banked
  9674  001964  6FAB               	movwf	??_sensorTest& (0+255),b
  9675  001966  0EF1               	movlw	241
  9676  001968                     u7527:
  9677  001968  2EE8               	decfsz	wreg,f,c
  9678  00196A  D7FE               	bra	u7527
  9679  00196C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9680  00196E  D7FC               	bra	u7527
  9681  001970  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9682  001972  D7FA               	bra	u7527
  9683  001974                     l1066:
  9684  001974  A281               	btfss	3969,1,c	;volatile
  9685  001976  D7FE               	goto	l1066
  9686  001978                     l1069:
  9687  001978  B281               	btfsc	3969,1,c	;volatile
  9688  00197A  D7FE               	goto	l1069
  9689                           
  9690                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9691  00197C  0E01               	movlw	1
  9692  00197E  ECDC  F023         	call	_lcdInst
  9693  001982  0E68               	movlw	104
  9694  001984  0100               	movlb	0	; () banked
  9695  001986  6FAB               	movwf	??_sensorTest& (0+255),b
  9696  001988  0EE4               	movlw	228
  9697  00198A                     u7537:
  9698  00198A  2EE8               	decfsz	wreg,f,c
  9699  00198C  D7FE               	bra	u7537
  9700  00198E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9701  001990  D7FC               	bra	u7537
  9702  001992  F000               	nop	
  9703  001994  0E80               	movlw	128
  9704  001996  ECDC  F023         	call	_lcdInst
  9705                           
  9706                           ;Test.c: 132: printf("TST: IR SNSR");
  9707  00199A  0E29               	movlw	low STR_79
  9708  00199C  0100               	movlb	0	; () banked
  9709  00199E  6F8E               	movwf	printf@f& (0+255),b
  9710  0019A0  0EFF               	movlw	high STR_79
  9711  0019A2  0100               	movlb	0	; () banked
  9712  0019A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9713  0019A6  ECB8  F008         	call	_printf	;wreg free
  9714                           
  9715                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9716  0019AA  0E05               	movlw	5
  9717  0019AC  0100               	movlb	0	; () banked
  9718  0019AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9719  0019B0  0E0F               	movlw	15
  9720  0019B2  0100               	movlb	0	; () banked
  9721  0019B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9722  0019B6  0EF1               	movlw	241
  9723  0019B8                     u7547:
  9724  0019B8  2EE8               	decfsz	wreg,f,c
  9725  0019BA  D7FE               	bra	u7547
  9726  0019BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9727  0019BE  D7FC               	bra	u7547
  9728  0019C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9729  0019C2  D7FA               	bra	u7547
  9730                           
  9731                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9732  0019C4  8A8B               	bsf	3979,5,c	;volatile
  9733                           
  9734                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9735  0019C6  D05C               	goto	l6602
  9736  0019C8                     l6584:
  9737                           
  9738                           ;Test.c: 136: readADC(0);
  9739  0019C8  0E00               	movlw	0
  9740  0019CA  ECE3  F022         	call	_readADC
  9741                           
  9742                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9743  0019CE  50C3               	movf	4035,w,c	;volatile
  9744  0019D0  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9745  0019D4  0100               	movlb	0	; () banked
  9746  0019D6  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9747  0019D8  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9748  0019DC  0100               	movlb	0	; () banked
  9749  0019DE  6BAB               	clrf	??_sensorTest& (0+255),b
  9750  0019E0  0100               	movlb	0	; () banked
  9751  0019E2  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9752  0019E4  0100               	movlb	0	; () banked
  9753  0019E6  6FAD               	movwf	sensorTest@res& (0+255),b
  9754  0019E8  0100               	movlb	0	; () banked
  9755  0019EA  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9756  0019EC  0100               	movlb	0	; () banked
  9757  0019EE  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9761  0019F0  0100               	movlb	0	; () banked
  9762  0019F2  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9763  0019F4  D00A               	goto	u5070
  9764  0019F6  0E85               	movlw	133
  9765  0019F8  0100               	movlb	0	; () banked
  9766  0019FA  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9767  0019FC  0E03               	movlw	3
  9768  0019FE  0100               	movlb	0	; () banked
  9769  001A00  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9770  001A02  A0D8               	btfss	status,0,c
  9771  001A04  D002               	goto	u5070
  9772  001A06  0E01               	movlw	1
  9773  001A08  D001               	goto	u5080
  9774  001A0A                     u5070:
  9775  001A0A  0E00               	movlw	0
  9776  001A0C                     u5080:
  9777  001A0C  0100               	movlb	0	; () banked
  9778  001A0E  6FDA               	movwf	_IR_signal& (0+255),b
  9779  001A10  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9780                           
  9781                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9782  001A12  0E01               	movlw	1
  9783  001A14  ECDC  F023         	call	_lcdInst
  9784  001A18  0E68               	movlw	104
  9785  001A1A  0100               	movlb	0	; () banked
  9786  001A1C  6FAB               	movwf	??_sensorTest& (0+255),b
  9787  001A1E  0EE4               	movlw	228
  9788  001A20                     u7557:
  9789  001A20  2EE8               	decfsz	wreg,f,c
  9790  001A22  D7FE               	bra	u7557
  9791  001A24  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9792  001A26  D7FC               	bra	u7557
  9793  001A28  F000               	nop	
  9794  001A2A  0E80               	movlw	128
  9795  001A2C  ECDC  F023         	call	_lcdInst
  9796                           
  9797                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9798  001A30  0E4E               	movlw	low STR_80
  9799  001A32  0100               	movlb	0	; () banked
  9800  001A34  6F8E               	movwf	printf@f& (0+255),b
  9801  001A36  0EFE               	movlw	high STR_80
  9802  001A38  0100               	movlb	0	; () banked
  9803  001A3A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9804  001A3C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9805  001A40  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9806  001A44  ECB8  F008         	call	_printf	;wreg free
  9807                           
  9808                           ;Test.c: 142: lcdInst(0b11000000);;
  9809  001A48  0EC0               	movlw	192
  9810  001A4A  ECDC  F023         	call	_lcdInst
  9811                           
  9812                           ;Test.c: 143: printf("%d", res);
  9813  001A4E  0E6D               	movlw	low (STR_27+16)
  9814  001A50  0100               	movlb	0	; () banked
  9815  001A52  6F8E               	movwf	printf@f& (0+255),b
  9816  001A54  0EFB               	movlw	high (STR_27+16)
  9817  001A56  0100               	movlb	0	; () banked
  9818  001A58  6F8F               	movwf	(printf@f+1)& (0+255),b
  9819  001A5A  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9820  001A5E  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9821  001A62  ECB8  F008         	call	_printf	;wreg free
  9822                           
  9823                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9824  001A66  0E05               	movlw	5
  9825  001A68  0100               	movlb	0	; () banked
  9826  001A6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9827  001A6C  0E0F               	movlw	15
  9828  001A6E  0100               	movlb	0	; () banked
  9829  001A70  6FAB               	movwf	??_sensorTest& (0+255),b
  9830  001A72  0EF1               	movlw	241
  9831  001A74                     u7567:
  9832  001A74  2EE8               	decfsz	wreg,f,c
  9833  001A76  D7FE               	bra	u7567
  9834  001A78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9835  001A7A  D7FC               	bra	u7567
  9836  001A7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9837  001A7E  D7FA               	bra	u7567
  9838  001A80                     l6602:
  9839  001A80  A281               	btfss	3969,1,c	;volatile
  9840  001A82  D7A2               	goto	l6584
  9841                           
  9842                           ;Test.c: 145: }
  9843                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9844  001A84  9A8B               	bcf	3979,5,c	;volatile
  9845                           
  9846                           ;Test.c: 153: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9847  001A86  0E01               	movlw	1
  9848  001A88  ECDC  F023         	call	_lcdInst
  9849  001A8C  0E68               	movlw	104
  9850  001A8E  0100               	movlb	0	; () banked
  9851  001A90  6FAB               	movwf	??_sensorTest& (0+255),b
  9852  001A92  0EE4               	movlw	228
  9853  001A94                     u7577:
  9854  001A94  2EE8               	decfsz	wreg,f,c
  9855  001A96  D7FE               	bra	u7577
  9856  001A98  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9857  001A9A  D7FC               	bra	u7577
  9858  001A9C  F000               	nop	
  9859  001A9E  0E80               	movlw	128
  9860  001AA0  ECDC  F023         	call	_lcdInst
  9861                           
  9862                           ;Test.c: 154: printf("TST: MAGNETISM");
  9863  001AA4  0E7B               	movlw	low STR_82
  9864  001AA6  0100               	movlb	0	; () banked
  9865  001AA8  6F8E               	movwf	printf@f& (0+255),b
  9866  001AAA  0EFE               	movlw	high STR_82
  9867  001AAC  0100               	movlb	0	; () banked
  9868  001AAE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9869  001AB0  ECB8  F008         	call	_printf	;wreg free
  9870                           
  9871                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9872  001AB4  0E05               	movlw	5
  9873  001AB6  0100               	movlb	0	; () banked
  9874  001AB8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9875  001ABA  0E0F               	movlw	15
  9876  001ABC  0100               	movlb	0	; () banked
  9877  001ABE  6FAB               	movwf	??_sensorTest& (0+255),b
  9878  001AC0  0EF1               	movlw	241
  9879  001AC2                     u7587:
  9880  001AC2  2EE8               	decfsz	wreg,f,c
  9881  001AC4  D7FE               	bra	u7587
  9882  001AC6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9883  001AC8  D7FC               	bra	u7587
  9884  001ACA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9885  001ACC  D7FA               	bra	u7587
  9886                           
  9887                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9888  001ACE  D021               	goto	l6620
  9889  001AD0                     l6614:
  9890                           
  9891                           ;Test.c: 157: readMAG();
  9892  001AD0  ECBF  F020         	call	_readMAG	;wreg free
  9893                           
  9894                           ;Test.c: 158: lcdInst(0b10000000);;
  9895  001AD4  0E80               	movlw	128
  9896  001AD6  ECDC  F023         	call	_lcdInst
  9897                           
  9898                           ;Test.c: 159: lcdInst(0b11000000);;
  9899  001ADA  0EC0               	movlw	192
  9900  001ADC  ECDC  F023         	call	_lcdInst
  9901                           
  9902                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9903  001AE0  0E1E               	movlw	low STR_83
  9904  001AE2  0100               	movlb	0	; () banked
  9905  001AE4  6F8E               	movwf	printf@f& (0+255),b
  9906  001AE6  0EFE               	movlw	high STR_83
  9907  001AE8  0100               	movlb	0	; () banked
  9908  001AEA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9909  001AEC  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9910  001AF0  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9911  001AF4  ECB8  F008         	call	_printf	;wreg free
  9912                           
  9913                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9914  001AF8  0E05               	movlw	5
  9915  001AFA  0100               	movlb	0	; () banked
  9916  001AFC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9917  001AFE  0E0F               	movlw	15
  9918  001B00  0100               	movlb	0	; () banked
  9919  001B02  6FAB               	movwf	??_sensorTest& (0+255),b
  9920  001B04  0EF1               	movlw	241
  9921  001B06                     u7597:
  9922  001B06  2EE8               	decfsz	wreg,f,c
  9923  001B08  D7FE               	bra	u7597
  9924  001B0A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9925  001B0C  D7FC               	bra	u7597
  9926  001B0E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9927  001B10  D7FA               	bra	u7597
  9928  001B12                     l6620:
  9929  001B12  A281               	btfss	3969,1,c	;volatile
  9930  001B14  D7DD               	goto	l6614
  9931                           
  9932                           ;Test.c: 162: }
  9933                           ;Test.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9934  001B16  0E01               	movlw	1
  9935  001B18  ECDC  F023         	call	_lcdInst
  9936  001B1C  0E68               	movlw	104
  9937  001B1E  0100               	movlb	0	; () banked
  9938  001B20  6FAB               	movwf	??_sensorTest& (0+255),b
  9939  001B22  0EE4               	movlw	228
  9940  001B24                     u7607:
  9941  001B24  2EE8               	decfsz	wreg,f,c
  9942  001B26  D7FE               	bra	u7607
  9943  001B28  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9944  001B2A  D7FC               	bra	u7607
  9945  001B2C  F000               	nop	
  9946  001B2E  0E80               	movlw	128
  9947  001B30  ECDC  F023         	call	_lcdInst
  9948                           
  9949                           ;Test.c: 168: printf("TST: COND");
  9950  001B34  0E7D               	movlw	low STR_84
  9951  001B36  0100               	movlb	0	; () banked
  9952  001B38  6F8E               	movwf	printf@f& (0+255),b
  9953  001B3A  0EFF               	movlw	high STR_84
  9954  001B3C  0100               	movlb	0	; () banked
  9955  001B3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9956  001B40  ECB8  F008         	call	_printf	;wreg free
  9957                           
  9958                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
  9959  001B44  0E05               	movlw	5
  9960  001B46  0100               	movlb	0	; () banked
  9961  001B48  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9962  001B4A  0E0F               	movlw	15
  9963  001B4C  0100               	movlb	0	; () banked
  9964  001B4E  6FAB               	movwf	??_sensorTest& (0+255),b
  9965  001B50  0EF1               	movlw	241
  9966  001B52                     u7617:
  9967  001B52  2EE8               	decfsz	wreg,f,c
  9968  001B54  D7FE               	bra	u7617
  9969  001B56  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9970  001B58  D7FC               	bra	u7617
  9971  001B5A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9972  001B5C  D7FA               	bra	u7617
  9973  001B5E                     l6632:
  9974                           
  9975                           ;Test.c: 171: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9976  001B5E  0E01               	movlw	1
  9977  001B60  ECDC  F023         	call	_lcdInst
  9978  001B64  0E68               	movlw	104
  9979  001B66  0100               	movlb	0	; () banked
  9980  001B68  6FAB               	movwf	??_sensorTest& (0+255),b
  9981  001B6A  0EE4               	movlw	228
  9982  001B6C                     u7627:
  9983  001B6C  2EE8               	decfsz	wreg,f,c
  9984  001B6E  D7FE               	bra	u7627
  9985  001B70  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9986  001B72  D7FC               	bra	u7627
  9987  001B74  F000               	nop	
  9988  001B76  0E80               	movlw	128
  9989  001B78  ECDC  F023         	call	_lcdInst
  9990                           
  9991                           ;Test.c: 172: printf("TST: COND");
  9992  001B7C  0E7D               	movlw	low STR_84
  9993  001B7E  0100               	movlb	0	; () banked
  9994  001B80  6F8E               	movwf	printf@f& (0+255),b
  9995  001B82  0EFF               	movlw	high STR_84
  9996  001B84  0100               	movlb	0	; () banked
  9997  001B86  6F8F               	movwf	(printf@f+1)& (0+255),b
  9998  001B88  ECB8  F008         	call	_printf	;wreg free
  9999                           
 10000                           ;Test.c: 173: while(PORTBbits.RB1 == 0){
 10001  001B8C  D01B               	goto	l6644
 10002  001B8E                     l6640:
 10003                           
 10004                           ;Test.c: 177: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10005  001B8E  0E80               	movlw	128
 10006  001B90  ECDC  F023         	call	_lcdInst
 10007  001B94  0EC0               	movlw	192
 10008  001B96  ECDC  F023         	call	_lcdInst
 10009                           
 10010                           ;Test.c: 178: printf("COND: %d", PORTAbits.RA2);
 10011  001B9A  0EA5               	movlw	low STR_86
 10012  001B9C  0100               	movlb	0	; () banked
 10013  001B9E  6F8E               	movwf	printf@f& (0+255),b
 10014  001BA0  0EFF               	movlw	high STR_86
 10015  001BA2  0100               	movlb	0	; () banked
 10016  001BA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10017  001BA6  A480               	btfss	3968,2,c	;volatile
 10018  001BA8  D004               	goto	u5110
 10019  001BAA  0100               	movlb	0	; () banked
 10020  001BAC  6BAB               	clrf	??_sensorTest& (0+255),b
 10021  001BAE  2BAB               	incf	??_sensorTest& (0+255),f,b
 10022  001BB0  D002               	goto	u5118
 10023  001BB2                     u5110:
 10024  001BB2  0100               	movlb	0	; () banked
 10025  001BB4  6BAB               	clrf	??_sensorTest& (0+255),b
 10026  001BB6                     u5118:
 10027  001BB6  0100               	movlb	0	; () banked
 10028  001BB8  51AB               	movf	??_sensorTest& (0+255),w,b
 10029  001BBA  0100               	movlb	0	; () banked
 10030  001BBC  6F90               	movwf	(?_printf+2)& (0+255),b
 10031  001BBE  6B91               	clrf	(?_printf+3)& (0+255),b
 10032  001BC0  ECB8  F008         	call	_printf	;wreg free
 10033  001BC4                     l6644:
 10034  001BC4  A281               	btfss	3969,1,c	;volatile
 10035  001BC6  D7E3               	goto	l6640
 10036                           
 10037                           ;Test.c: 179: }
 10038                           ;Test.c: 180: if(PORTB >> 4 == 0b1111){
 10039  001BC8  3881               	swapf	3969,w,c	;volatile
 10040  001BCA  0B0F               	andlw	15
 10041  001BCC  0A0F               	xorlw	15
 10042  001BCE  B4D8               	btfsc	status,2,c
 10043  001BD0  0012               	return	
 10044                           
 10045                           ;Test.c: 183: else{
 10046                           ;Test.c: 184: LATAbits.LATA3 = 1;
 10047                           
 10048                           ;Test.c: 182: }
 10049                           
 10050                           ;Test.c: 181: break;
 10051  001BD2  8689               	bsf	3977,3,c	;volatile
 10052                           
 10053                           ;Test.c: 185: while(PORTBbits.RB1 == 1){
 10054  001BD4  D01B               	goto	l6656
 10055  001BD6                     l6652:
 10056                           
 10057                           ;Test.c: 187: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10058  001BD6  0E80               	movlw	128
 10059  001BD8  ECDC  F023         	call	_lcdInst
 10060  001BDC  0EC0               	movlw	192
 10061  001BDE  ECDC  F023         	call	_lcdInst
 10062                           
 10063                           ;Test.c: 188: printf("COND: %d", PORTAbits.RA2);
 10064  001BE2  0EA5               	movlw	low STR_86
 10065  001BE4  0100               	movlb	0	; () banked
 10066  001BE6  6F8E               	movwf	printf@f& (0+255),b
 10067  001BE8  0EFF               	movlw	high STR_86
 10068  001BEA  0100               	movlb	0	; () banked
 10069  001BEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10070  001BEE  A480               	btfss	3968,2,c	;volatile
 10071  001BF0  D004               	goto	u5140
 10072  001BF2  0100               	movlb	0	; () banked
 10073  001BF4  6BAB               	clrf	??_sensorTest& (0+255),b
 10074  001BF6  2BAB               	incf	??_sensorTest& (0+255),f,b
 10075  001BF8  D002               	goto	u5148
 10076  001BFA                     u5140:
 10077  001BFA  0100               	movlb	0	; () banked
 10078  001BFC  6BAB               	clrf	??_sensorTest& (0+255),b
 10079  001BFE                     u5148:
 10080  001BFE  0100               	movlb	0	; () banked
 10081  001C00  51AB               	movf	??_sensorTest& (0+255),w,b
 10082  001C02  0100               	movlb	0	; () banked
 10083  001C04  6F90               	movwf	(?_printf+2)& (0+255),b
 10084  001C06  6B91               	clrf	(?_printf+3)& (0+255),b
 10085  001C08  ECB8  F008         	call	_printf	;wreg free
 10086  001C0C                     l6656:
 10087  001C0C  B281               	btfsc	3969,1,c	;volatile
 10088  001C0E  D7E3               	goto	l6652
 10089                           
 10090                           ;Test.c: 189: }
 10091                           ;Test.c: 190: LATAbits.LATA3 = ~1;
 10092  001C10  9689               	bcf	3977,3,c	;volatile
 10093  001C12  D7A5               	goto	l6632
 10094  001C14                     __end_of_sensorTest:
 10095                           	opt stack 0
 10096                           tblptru	equ	0xFF8
 10097                           tblptrh	equ	0xFF7
 10098                           tblptrl	equ	0xFF6
 10099                           tablat	equ	0xFF5
 10100                           prodh	equ	0xFF4
 10101                           prodl	equ	0xFF3
 10102                           intcon	equ	0xFF2
 10103                           intcon2	equ	0xFF1
 10104                           intcon3	equ	0xFF0
 10105                           postinc0	equ	0xFEE
 10106                           wreg	equ	0xFE8
 10107                           postdec1	equ	0xFE5
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function _readMAG *****************
 10117 ;; Defined at:
 10118 ;;		line 29 in file "ADCFunctionality.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;		None
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  res             2    4[BANK0 ] int 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;                  1    wreg      void 
 10125 ;; Registers used:
 10126 ;;		wreg, status,2, status,0, cstack
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;Total ram usage:        4 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    8
 10139 ;; This function calls:
 10140 ;;		_readADC
 10141 ;; This function is called by:
 10142 ;;		_ID
 10143 ;;		_sensorTest
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	text37
 10148  00417E                     __ptext37:
 10149                           	opt stack 0
 10150  00417E                     _readMAG:
 10151                           	opt stack 20
 10152                           
 10153                           ;ADCFunctionality.c: 30: readADC(1);
 10154                           
 10155                           ;incstack = 0
 10156  00417E  0E01               	movlw	1
 10157  004180  ECE3  F022         	call	_readADC
 10158                           
 10159                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10160  004184  50C3               	movf	4035,w,c	;volatile
 10161  004186  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10162  00418A  0100               	movlb	0	; () banked
 10163  00418C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10164  00418E  C082  F083         	movff	??_readMAG,??_readMAG+1
 10165  004192  0100               	movlb	0	; () banked
 10166  004194  6B82               	clrf	??_readMAG& (0+255),b
 10167  004196  0100               	movlb	0	; () banked
 10168  004198  1182               	iorwf	??_readMAG& (0+255),w,b
 10169  00419A  0100               	movlb	0	; () banked
 10170  00419C  6F84               	movwf	readMAG@res& (0+255),b
 10171  00419E  0100               	movlb	0	; () banked
 10172  0041A0  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10173  0041A2  0100               	movlb	0	; () banked
 10174  0041A4  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10178  0041A6  0100               	movlb	0	; () banked
 10179  0041A8  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10180  0041AA  D008               	goto	u4481
 10181  0041AC  0100               	movlb	0	; () banked
 10182  0041AE  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10183  0041B0  E107               	bnz	u4480
 10184  0041B2  0E96               	movlw	150
 10185  0041B4  0100               	movlb	0	; () banked
 10186  0041B6  5D84               	subwf	readMAG@res& (0+255),w,b
 10187  0041B8  B0D8               	btfsc	status,0,c
 10188  0041BA  D002               	goto	u4480
 10189  0041BC                     u4481:
 10190  0041BC  0E01               	movlw	1
 10191  0041BE  D001               	goto	u4490
 10192  0041C0                     u4480:
 10193  0041C0  0E00               	movlw	0
 10194  0041C2                     u4490:
 10195  0041C2  0100               	movlb	0	; () banked
 10196  0041C4  6FDC               	movwf	_MAG_signal& (0+255),b
 10197  0041C6  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10198                           
 10199                           ; BSR set to: 0
 10200  0041C8  0012               	return		;funcret
 10201  0041CA                     __end_of_readMAG:
 10202                           	opt stack 0
 10203                           tblptru	equ	0xFF8
 10204                           tblptrh	equ	0xFF7
 10205                           tblptrl	equ	0xFF6
 10206                           tablat	equ	0xFF5
 10207                           prodh	equ	0xFF4
 10208                           prodl	equ	0xFF3
 10209                           intcon	equ	0xFF2
 10210                           intcon2	equ	0xFF1
 10211                           intcon3	equ	0xFF0
 10212                           postinc0	equ	0xFEE
 10213                           wreg	equ	0xFE8
 10214                           postdec1	equ	0xFE5
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           postdec2	equ	0xFDD
 10219                           fsr2h	equ	0xFDA
 10220                           fsr2l	equ	0xFD9
 10221                           status	equ	0xFD8
 10222                           
 10223 ;; *************** function _readADC *****************
 10224 ;; Defined at:
 10225 ;;		line 15 in file "ADCFunctionality.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  channel         1    wreg     unsigned char 
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;  channel         1    1[BANK0 ] unsigned char 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      void 
 10232 ;; Registers used:
 10233 ;;		wreg, status,2, status,0, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;Total ram usage:        2 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    7
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_readIR
 10250 ;;		_readMAG
 10251 ;;		_sensorTest
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text38
 10256  0045C6                     __ptext38:
 10257                           	opt stack 0
 10258  0045C6                     _readADC:
 10259                           	opt stack 19
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;incstack = 0
 10263                           ;readADC@channel stored from wreg
 10264  0045C6  0100               	movlb	0	; () banked
 10265  0045C8  6F81               	movwf	readADC@channel& (0+255),b
 10266                           
 10267                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10268  0045CA  0100               	movlb	0	; () banked
 10269  0045CC  4581               	rlncf	readADC@channel& (0+255),w,b
 10270  0045CE  46E8               	rlncf	wreg,f,c
 10271  0045D0  0BFC               	andlw	252
 10272  0045D2  6EC2               	movwf	4034,c	;volatile
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10276  0045D4  80C2               	bsf	4034,0,c	;volatile
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10280  0045D6  82C2               	bsf	4034,1,c	;volatile
 10281                           
 10282                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10283  0045D8  D009               	goto	l5246
 10284  0045DA                     l5244:
 10285  0045DA  0E34               	movlw	52
 10286  0045DC  0100               	movlb	0	; () banked
 10287  0045DE  6F80               	movwf	??_readADC& (0+255),b
 10288  0045E0  0EF1               	movlw	241
 10289  0045E2                     u7637:
 10290  0045E2  2EE8               	decfsz	wreg,f,c
 10291  0045E4  D7FE               	bra	u7637
 10292  0045E6  2F80               	decfsz	??_readADC& (0+255),f,b
 10293  0045E8  D7FC               	bra	u7637
 10294  0045EA  D000               	nop2	
 10295  0045EC                     l5246:
 10296  0045EC  A2C2               	btfss	4034,1,c	;volatile
 10297  0045EE  0012               	return	
 10298  0045F0  D7F4               	goto	l5244
 10299  0045F2                     __end_of_readADC:
 10300                           	opt stack 0
 10301                           tblptru	equ	0xFF8
 10302                           tblptrh	equ	0xFF7
 10303                           tblptrl	equ	0xFF6
 10304                           tablat	equ	0xFF5
 10305                           prodh	equ	0xFF4
 10306                           prodl	equ	0xFF3
 10307                           intcon	equ	0xFF2
 10308                           intcon2	equ	0xFF1
 10309                           intcon3	equ	0xFF0
 10310                           postinc0	equ	0xFEE
 10311                           wreg	equ	0xFE8
 10312                           postdec1	equ	0xFE5
 10313                           fsr1l	equ	0xFE1
 10314                           indf2	equ	0xFDF
 10315                           postinc2	equ	0xFDE
 10316                           postdec2	equ	0xFDD
 10317                           fsr2h	equ	0xFDA
 10318                           fsr2l	equ	0xFD9
 10319                           status	equ	0xFD8
 10320                           
 10321 ;; *************** function _algorithmTest *****************
 10322 ;; Defined at:
 10323 ;;		line 74 in file "Test.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;		None
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;		None
 10328 ;; Return value:  Size  Location     Type
 10329 ;;                  1    wreg      void 
 10330 ;; Registers used:
 10331 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;Total ram usage:        2 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; Hardware stack levels required when called:   10
 10344 ;; This function calls:
 10345 ;;		_lcdInst
 10346 ;;		_printf
 10347 ;; This function is called by:
 10348 ;;		_Test
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           	psect	text39
 10353  003536                     __ptext39:
 10354                           	opt stack 0
 10355  003536                     _algorithmTest:
 10356                           	opt stack 19
 10357                           
 10358                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10359                           
 10360                           ;incstack = 0
 10361  003536  0E01               	movlw	1
 10362  003538  ECDC  F023         	call	_lcdInst
 10363  00353C  0E68               	movlw	104
 10364  00353E  0100               	movlb	0	; () banked
 10365  003540  6FAB               	movwf	??_algorithmTest& (0+255),b
 10366  003542  0EE4               	movlw	228
 10367  003544                     u7647:
 10368  003544  2EE8               	decfsz	wreg,f,c
 10369  003546  D7FE               	bra	u7647
 10370  003548  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10371  00354A  D7FC               	bra	u7647
 10372  00354C  F000               	nop	
 10373  00354E  0E80               	movlw	128
 10374  003550  ECDC  F023         	call	_lcdInst
 10375                           
 10376                           ;Test.c: 77: printf("ALGORITHM TEST");
 10377  003554  0EC6               	movlw	low STR_70
 10378  003556  0100               	movlb	0	; () banked
 10379  003558  6F8E               	movwf	printf@f& (0+255),b
 10380  00355A  0EFE               	movlw	high STR_70
 10381  00355C  0100               	movlb	0	; () banked
 10382  00355E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10383  003560  ECB8  F008         	call	_printf	;wreg free
 10384                           
 10385                           ;Test.c: 78: lcdInst(0b11000000);;
 10386  003564  0EC0               	movlw	192
 10387  003566  ECDC  F023         	call	_lcdInst
 10388                           
 10389                           ;Test.c: 79: printf("PUSH TO START");
 10390  00356A  0EFF               	movlw	low STR_71
 10391  00356C  0100               	movlb	0	; () banked
 10392  00356E  6F8E               	movwf	printf@f& (0+255),b
 10393  003570  0EFE               	movlw	high STR_71
 10394  003572  0100               	movlb	0	; () banked
 10395  003574  6F8F               	movwf	(printf@f+1)& (0+255),b
 10396  003576  ECB8  F008         	call	_printf	;wreg free
 10397                           
 10398                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10399  00357A  0E05               	movlw	5
 10400  00357C  0100               	movlb	0	; () banked
 10401  00357E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10402  003580  0E0F               	movlw	15
 10403  003582  0100               	movlb	0	; () banked
 10404  003584  6FAB               	movwf	??_algorithmTest& (0+255),b
 10405  003586  0EF1               	movlw	241
 10406  003588                     u7657:
 10407  003588  2EE8               	decfsz	wreg,f,c
 10408  00358A  D7FE               	bra	u7657
 10409  00358C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10410  00358E  D7FC               	bra	u7657
 10411  003590  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10412  003592  D7FA               	bra	u7657
 10413  003594                     l1057:
 10414  003594  A281               	btfss	3969,1,c	;volatile
 10415  003596  D7FE               	goto	l1057
 10416  003598                     l1060:
 10417  003598  B281               	btfsc	3969,1,c	;volatile
 10418  00359A  D7FE               	goto	l1060
 10419                           
 10420                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10421  00359C  0E01               	movlw	1
 10422  00359E  ECDC  F023         	call	_lcdInst
 10423  0035A2  0E68               	movlw	104
 10424  0035A4  0100               	movlb	0	; () banked
 10425  0035A6  6FAB               	movwf	??_algorithmTest& (0+255),b
 10426  0035A8  0EE4               	movlw	228
 10427  0035AA                     u7667:
 10428  0035AA  2EE8               	decfsz	wreg,f,c
 10429  0035AC  D7FE               	bra	u7667
 10430  0035AE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10431  0035B0  D7FC               	bra	u7667
 10432  0035B2  F000               	nop	
 10433  0035B4  0E80               	movlw	128
 10434  0035B6  ECDC  F023         	call	_lcdInst
 10435                           
 10436                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10437  0035BA  0E75               	movlw	low STR_72
 10438  0035BC  0100               	movlb	0	; () banked
 10439  0035BE  6F8E               	movwf	printf@f& (0+255),b
 10440  0035C0  0EFC               	movlw	high STR_72
 10441  0035C2  0100               	movlb	0	; () banked
 10442  0035C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10443  0035C6  ECB8  F008         	call	_printf	;wreg free
 10444                           
 10445                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10446  0035CA  0EE3               	movlw	low STR_73
 10447  0035CC  0100               	movlb	0	; () banked
 10448  0035CE  6F8E               	movwf	printf@f& (0+255),b
 10449  0035D0  0EFE               	movlw	high STR_73
 10450  0035D2  0100               	movlb	0	; () banked
 10451  0035D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10452  0035D6  ECB8  F008         	call	_printf	;wreg free
 10453                           
 10454                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10455  0035DA  0E50               	movlw	low STR_74
 10456  0035DC  0100               	movlb	0	; () banked
 10457  0035DE  6F8E               	movwf	printf@f& (0+255),b
 10458  0035E0  0EFF               	movlw	high STR_74
 10459  0035E2  0100               	movlb	0	; () banked
 10460  0035E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10461  0035E6  ECB8  F008         	call	_printf	;wreg free
 10462                           
 10463                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10464  0035EA  0EA8               	movlw	low STR_75
 10465  0035EC  0100               	movlb	0	; () banked
 10466  0035EE  6F8E               	movwf	printf@f& (0+255),b
 10467  0035F0  0EFE               	movlw	high STR_75
 10468  0035F2  0100               	movlb	0	; () banked
 10469  0035F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10470  0035F6  ECB8  F008         	call	_printf	;wreg free
 10471                           
 10472                           ;Test.c: 115: printf("ALG5: NO CANS");
 10473  0035FA  0EF1               	movlw	low STR_76
 10474  0035FC  0100               	movlb	0	; () banked
 10475  0035FE  6F8E               	movwf	printf@f& (0+255),b
 10476  003600  0EFE               	movlw	high STR_76
 10477  003602  0100               	movlb	0	; () banked
 10478  003604  6F8F               	movwf	(printf@f+1)& (0+255),b
 10479  003606  ECB8  F008         	call	_printf	;wreg free
 10480  00360A  0012               	return		;funcret
 10481  00360C                     __end_of_algorithmTest:
 10482                           	opt stack 0
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           intcon2	equ	0xFF1
 10491                           intcon3	equ	0xFF0
 10492                           postinc0	equ	0xFEE
 10493                           wreg	equ	0xFE8
 10494                           postdec1	equ	0xFE5
 10495                           fsr1l	equ	0xFE1
 10496                           indf2	equ	0xFDF
 10497                           postinc2	equ	0xFDE
 10498                           postdec2	equ	0xFDD
 10499                           fsr2h	equ	0xFDA
 10500                           fsr2l	equ	0xFD9
 10501                           status	equ	0xFD8
 10502                           
 10503 ;; *************** function _actuatorTest *****************
 10504 ;; Defined at:
 10505 ;;		line 195 in file "Test.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;  i               1   45[BANK0 ] unsigned char 
 10510 ;;  i               1   67[BANK0 ] unsigned char 
 10511 ;;  i               1   66[BANK0 ] unsigned char 
 10512 ;;  i               1   65[BANK0 ] unsigned char 
 10513 ;;  i               1   64[BANK0 ] unsigned char 
 10514 ;;  i               1   63[BANK0 ] unsigned char 
 10515 ;;  i               1   62[BANK0 ] unsigned char 
 10516 ;;  i               1   61[BANK0 ] unsigned char 
 10517 ;;  i               1   60[BANK0 ] unsigned char 
 10518 ;;  i               1   59[BANK0 ] unsigned char 
 10519 ;;  i               1   58[BANK0 ] unsigned char 
 10520 ;;  i               1   57[BANK0 ] unsigned char 
 10521 ;;  i               1   56[BANK0 ] unsigned char 
 10522 ;;  i               1   55[BANK0 ] unsigned char 
 10523 ;;  i               1   54[BANK0 ] unsigned char 
 10524 ;;  i               1   53[BANK0 ] unsigned char 
 10525 ;;  i               1   52[BANK0 ] unsigned char 
 10526 ;;  i               1   51[BANK0 ] unsigned char 
 10527 ;;  i               1   50[BANK0 ] unsigned char 
 10528 ;;  i               1   49[BANK0 ] unsigned char 
 10529 ;;  i               1   48[BANK0 ] unsigned char 
 10530 ;;  i               1   47[BANK0 ] unsigned char 
 10531 ;;  i               1   46[BANK0 ] unsigned char 
 10532 ;;  i               2   68[BANK0 ] int 
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  1    wreg      void 
 10535 ;; Registers used:
 10536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;Total ram usage:       27 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:   10
 10549 ;; This function calls:
 10550 ;;		_lcdInst
 10551 ;;		_printf
 10552 ;;		_updateServoPosition
 10553 ;; This function is called by:
 10554 ;;		_Test
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           	psect	text40
 10559  000012                     __ptext40:
 10560                           	opt stack 0
 10561  000012                     _actuatorTest:
 10562                           	opt stack 19
 10563                           
 10564                           ;Test.c: 197: int i = 0;
 10565                           
 10566                           ;incstack = 0
 10567  000012  0E00               	movlw	0
 10568  000014  0100               	movlb	0	; () banked
 10569  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10570  000018  0E00               	movlw	0
 10571  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;Test.c: 199: (INTCONbits.GIE = 1);
 10575  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;Test.c: 200: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10579  00001E  0E01               	movlw	1
 10580  000020  ECDC  F023         	call	_lcdInst
 10581  000024  0E68               	movlw	104
 10582  000026  0100               	movlb	0	; () banked
 10583  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10584  00002A  0EE4               	movlw	228
 10585  00002C                     u7677:
 10586  00002C  2EE8               	decfsz	wreg,f,c
 10587  00002E  D7FE               	bra	u7677
 10588  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10589  000032  D7FC               	bra	u7677
 10590  000034  F000               	nop	
 10591  000036  0E80               	movlw	128
 10592  000038  ECDC  F023         	call	_lcdInst
 10593                           
 10594                           ;Test.c: 201: printf("ACTUATORS");
 10595  00003C  0E91               	movlw	low STR_88
 10596  00003E  0100               	movlb	0	; () banked
 10597  000040  6F8E               	movwf	printf@f& (0+255),b
 10598  000042  0EFF               	movlw	high STR_88
 10599  000044  0100               	movlb	0	; () banked
 10600  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10601  000048  ECB8  F008         	call	_printf	;wreg free
 10602                           
 10603                           ;Test.c: 202: lcdInst(0b11000000);;
 10604  00004C  0EC0               	movlw	192
 10605  00004E  ECDC  F023         	call	_lcdInst
 10606                           
 10607                           ;Test.c: 203: printf("PUSH TO START");
 10608  000052  0EFF               	movlw	low STR_71
 10609  000054  0100               	movlb	0	; () banked
 10610  000056  6F8E               	movwf	printf@f& (0+255),b
 10611  000058  0EFE               	movlw	high STR_71
 10612  00005A  0100               	movlb	0	; () banked
 10613  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10614  00005E  ECB8  F008         	call	_printf	;wreg free
 10615                           
 10616                           ;Test.c: 204: _delay((unsigned long)((100)*(32000000/4000.0)));
 10617  000062  0E05               	movlw	5
 10618  000064  0100               	movlb	0	; () banked
 10619  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10620  000068  0E0F               	movlw	15
 10621  00006A  0100               	movlb	0	; () banked
 10622  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10623  00006E  0EF1               	movlw	241
 10624  000070                     u7687:
 10625  000070  2EE8               	decfsz	wreg,f,c
 10626  000072  D7FE               	bra	u7687
 10627  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10628  000076  D7FC               	bra	u7687
 10629  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10630  00007A  D7FA               	bra	u7687
 10631  00007C                     l1092:
 10632  00007C  A281               	btfss	3969,1,c	;volatile
 10633  00007E  D7FE               	goto	l1092
 10634  000080                     l1095:
 10635  000080  B281               	btfsc	3969,1,c	;volatile
 10636  000082  D7FE               	goto	l1095
 10637                           
 10638                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10639  000084  0E01               	movlw	1
 10640  000086  ECDC  F023         	call	_lcdInst
 10641  00008A  0E68               	movlw	104
 10642  00008C  0100               	movlb	0	; () banked
 10643  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10644  000090  0EE4               	movlw	228
 10645  000092                     u7697:
 10646  000092  2EE8               	decfsz	wreg,f,c
 10647  000094  D7FE               	bra	u7697
 10648  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10649  000098  D7FC               	bra	u7697
 10650  00009A  F000               	nop	
 10651  00009C  0E80               	movlw	128
 10652  00009E  ECDC  F023         	call	_lcdInst
 10653                           
 10654                           ;Test.c: 212: printf("TST: DC MOTORS");
 10655  0000A2  0EB7               	movlw	low STR_90
 10656  0000A4  0100               	movlb	0	; () banked
 10657  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10658  0000A8  0EFE               	movlw	high STR_90
 10659  0000AA  0100               	movlb	0	; () banked
 10660  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10661  0000AE  ECB8  F008         	call	_printf	;wreg free
 10662                           
 10663                           ;Test.c: 213: lcdInst(0b11000000);;
 10664  0000B2  0EC0               	movlw	192
 10665  0000B4  ECDC  F023         	call	_lcdInst
 10666                           
 10667                           ;Test.c: 214: printf("PIN RA5 HIGH.");
 10668  0000B8  0ED5               	movlw	low STR_91
 10669  0000BA  0100               	movlb	0	; () banked
 10670  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10671  0000BE  0EFE               	movlw	high STR_91
 10672  0000C0  0100               	movlb	0	; () banked
 10673  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10674  0000C4  ECB8  F008         	call	_printf	;wreg free
 10675                           
 10676                           ;Test.c: 215: LATAbits.LATA5 = 1;
 10677  0000C8  8A89               	bsf	3977,5,c	;volatile
 10678                           
 10679                           ;Test.c: 216: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10680  0000CA  0E00               	movlw	0
 10681  0000CC  0100               	movlb	0	; () banked
 10682  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10683  0000D0  0E00               	movlw	0
 10684  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10685                           
 10686                           ; BSR set to: 0
 10687  0000D4  0100               	movlb	0	; () banked
 10688  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10689  0000D8  D008               	goto	l6696
 10690  0000DA  0100               	movlb	0	; () banked
 10691  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10692  0000DE  E123               	bnz	l1099
 10693  0000E0  0E05               	movlw	5
 10694  0000E2  0100               	movlb	0	; () banked
 10695  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10696  0000E6  B0D8               	btfsc	status,0,c
 10697  0000E8  D01E               	goto	l1099
 10698  0000EA                     l6696:
 10699                           
 10700                           ; BSR set to: 0
 10701  0000EA  0E00               	movlw	0
 10702  0000EC  0100               	movlb	0	; () banked
 10703  0000EE  6FAD               	movwf	actuatorTest@i_1632& (0+255),b
 10704  0000F0                     l6698:
 10705                           
 10706                           ; BSR set to: 0
 10707  0000F0  0E63               	movlw	99
 10708  0000F2  0100               	movlb	0	; () banked
 10709  0000F4  65AD               	cpfsgt	actuatorTest@i_1632& (0+255),b
 10710  0000F6  D001               	goto	l6702
 10711  0000F8  D00C               	goto	l6706
 10712  0000FA                     l6702:
 10713                           
 10714                           ; BSR set to: 0
 10715  0000FA  0E68               	movlw	104
 10716  0000FC  0100               	movlb	0	; () banked
 10717  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10718  000100  0EE4               	movlw	228
 10719  000102                     u7707:
 10720  000102  2EE8               	decfsz	wreg,f,c
 10721  000104  D7FE               	bra	u7707
 10722  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10723  000108  D7FC               	bra	u7707
 10724  00010A  F000               	nop	
 10725  00010C  0100               	movlb	0	; () banked
 10726  00010E  2BAD               	incf	actuatorTest@i_1632& (0+255),f,b
 10727  000110  D7EF               	goto	l6698
 10728  000112                     l6706:
 10729                           
 10730                           ; BSR set to: 0
 10731  000112  0100               	movlb	0	; () banked
 10732  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10733  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10734                           
 10735                           ; BSR set to: 0
 10736  000118  0100               	movlb	0	; () banked
 10737  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10738  00011C  D7E6               	goto	l6696
 10739  00011E  0100               	movlb	0	; () banked
 10740  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10741  000122  E101               	bnz	u5210
 10742  000124  D7DD               	goto	L7
 10743  000126                     u5210:
 10744  000126                     l1099:
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;Test.c: 217: LATAbits.LATA5 = 0;
 10748  000126  9A89               	bcf	3977,5,c	;volatile
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;Test.c: 218: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10752  000128  0E01               	movlw	1
 10753  00012A  ECDC  F023         	call	_lcdInst
 10754  00012E  0E68               	movlw	104
 10755  000130  0100               	movlb	0	; () banked
 10756  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10757  000134  0EE4               	movlw	228
 10758  000136                     u7717:
 10759  000136  2EE8               	decfsz	wreg,f,c
 10760  000138  D7FE               	bra	u7717
 10761  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10762  00013C  D7FC               	bra	u7717
 10763  00013E  F000               	nop	
 10764  000140  0E80               	movlw	128
 10765  000142  ECDC  F023         	call	_lcdInst
 10766                           
 10767                           ;Test.c: 224: printf("TST: COND SOLN'D");
 10768  000146  0E97               	movlw	low STR_92
 10769  000148  0100               	movlb	0	; () banked
 10770  00014A  6F8E               	movwf	printf@f& (0+255),b
 10771  00014C  0EFC               	movlw	high STR_92
 10772  00014E  0100               	movlb	0	; () banked
 10773  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10774  000152  ECB8  F008         	call	_printf	;wreg free
 10775                           
 10776                           ;Test.c: 225: lcdInst(0b11000000);;
 10777  000156  0EC0               	movlw	192
 10778  000158  ECDC  F023         	call	_lcdInst
 10779                           
 10780                           ;Test.c: 226: printf("PIN RA3...");
 10781  00015C  0E5C               	movlw	low STR_93
 10782  00015E  0100               	movlb	0	; () banked
 10783  000160  6F8E               	movwf	printf@f& (0+255),b
 10784  000162  0EFF               	movlw	high STR_93
 10785  000164  0100               	movlb	0	; () banked
 10786  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10787  000168  ECB8  F008         	call	_printf	;wreg free
 10788                           
 10789                           ;Test.c: 227: for(i=0;i<5;i++){
 10790  00016C  0E00               	movlw	0
 10791  00016E  0100               	movlb	0	; () banked
 10792  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10793  000172  0E00               	movlw	0
 10794  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10795                           
 10796                           ; BSR set to: 0
 10797  000176  0100               	movlb	0	; () banked
 10798  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10799  00017A  D008               	goto	l1102
 10800  00017C  0100               	movlb	0	; () banked
 10801  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10802  000180  E12C               	bnz	l1103
 10803  000182  0E05               	movlw	5
 10804  000184  0100               	movlb	0	; () banked
 10805  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10806  000188  B0D8               	btfsc	status,0,c
 10807  00018A  D027               	goto	l1103
 10808  00018C                     l1102:
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;Test.c: 228: LATAbits.LATA3 = 1;
 10812  00018C  8689               	bsf	3977,3,c	;volatile
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;Test.c: 229: _delay((unsigned long)((300)*(32000000/4000.0)));
 10816  00018E  0E0D               	movlw	13
 10817  000190  0100               	movlb	0	; () banked
 10818  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10819  000194  0E2D               	movlw	45
 10820  000196  0100               	movlb	0	; () banked
 10821  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10822  00019A  0ED7               	movlw	215
 10823  00019C                     u7727:
 10824  00019C  2EE8               	decfsz	wreg,f,c
 10825  00019E  D7FE               	bra	u7727
 10826  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10827  0001A2  D7FC               	bra	u7727
 10828  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10829  0001A6  D7FA               	bra	u7727
 10830  0001A8  D000               	nop2	
 10831                           
 10832                           ;Test.c: 230: LATAbits.LATA3 = ~1;
 10833  0001AA  9689               	bcf	3977,3,c	;volatile
 10834                           
 10835                           ;Test.c: 231: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10836  0001AC  0E1D               	movlw	29
 10837  0001AE  0100               	movlb	0	; () banked
 10838  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10839  0001B2  0E69               	movlw	105
 10840  0001B4  0100               	movlb	0	; () banked
 10841  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10842  0001B8  0EA5               	movlw	165
 10843  0001BA                     u7737:
 10844  0001BA  2EE8               	decfsz	wreg,f,c
 10845  0001BC  D7FE               	bra	u7737
 10846  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10847  0001C0  D7FC               	bra	u7737
 10848  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10849  0001C4  D7FA               	bra	u7737
 10850  0001C6  0100               	movlb	0	; () banked
 10851  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10852  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10853  0001CC  0100               	movlb	0	; () banked
 10854  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10855  0001D0  D7DD               	goto	l1102
 10856  0001D2  0100               	movlb	0	; () banked
 10857  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10858  0001D6  E101               	bnz	u5230
 10859  0001D8  D7D4               	goto	L8
 10860  0001DA                     u5230:
 10861  0001DA                     l1103:
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;Test.c: 232: }
 10865                           ;Test.c: 233: LATAbits.LATA3 = ~1;
 10866  0001DA  9689               	bcf	3977,3,c	;volatile
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;Test.c: 234: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10870  0001DC  0E01               	movlw	1
 10871  0001DE  ECDC  F023         	call	_lcdInst
 10872  0001E2  0E68               	movlw	104
 10873  0001E4  0100               	movlb	0	; () banked
 10874  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10875  0001E8  0EE4               	movlw	228
 10876  0001EA                     u7747:
 10877  0001EA  2EE8               	decfsz	wreg,f,c
 10878  0001EC  D7FE               	bra	u7747
 10879  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10880  0001F0  D7FC               	bra	u7747
 10881  0001F2  F000               	nop	
 10882  0001F4  0E80               	movlw	128
 10883  0001F6  ECDC  F023         	call	_lcdInst
 10884                           
 10885                           ;Test.c: 240: printf("TST: PUSH SOLN'D");
 10886  0001FA  0EA8               	movlw	low STR_94
 10887  0001FC  0100               	movlb	0	; () banked
 10888  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10889  000200  0EFC               	movlw	high STR_94
 10890  000202  0100               	movlb	0	; () banked
 10891  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10892  000206  ECB8  F008         	call	_printf	;wreg free
 10893                           
 10894                           ;Test.c: 241: lcdInst(0b11000000);;
 10895  00020A  0EC0               	movlw	192
 10896  00020C  ECDC  F023         	call	_lcdInst
 10897                           
 10898                           ;Test.c: 242: printf("PIN RA4...");
 10899  000210  0E67               	movlw	low STR_95
 10900  000212  0100               	movlb	0	; () banked
 10901  000214  6F8E               	movwf	printf@f& (0+255),b
 10902  000216  0EFF               	movlw	high STR_95
 10903  000218  0100               	movlb	0	; () banked
 10904  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10905  00021C  ECB8  F008         	call	_printf	;wreg free
 10906                           
 10907                           ;Test.c: 243: for(i=0;i<5;i++){
 10908  000220  0E00               	movlw	0
 10909  000222  0100               	movlb	0	; () banked
 10910  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10911  000226  0E00               	movlw	0
 10912  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10913                           
 10914                           ; BSR set to: 0
 10915  00022A  0100               	movlb	0	; () banked
 10916  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10917  00022E  D008               	goto	l1104
 10918  000230  0100               	movlb	0	; () banked
 10919  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10920  000234  E12C               	bnz	l1105
 10921  000236  0E05               	movlw	5
 10922  000238  0100               	movlb	0	; () banked
 10923  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10924  00023C  B0D8               	btfsc	status,0,c
 10925  00023E  D027               	goto	l1105
 10926  000240                     l1104:
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;Test.c: 244: LATAbits.LATA4 = 1;
 10930  000240  8889               	bsf	3977,4,c	;volatile
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;Test.c: 245: _delay((unsigned long)((300)*(32000000/4000.0)));
 10934  000242  0E0D               	movlw	13
 10935  000244  0100               	movlb	0	; () banked
 10936  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10937  000248  0E2D               	movlw	45
 10938  00024A  0100               	movlb	0	; () banked
 10939  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10940  00024E  0ED7               	movlw	215
 10941  000250                     u7757:
 10942  000250  2EE8               	decfsz	wreg,f,c
 10943  000252  D7FE               	bra	u7757
 10944  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10945  000256  D7FC               	bra	u7757
 10946  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10947  00025A  D7FA               	bra	u7757
 10948  00025C  D000               	nop2	
 10949                           
 10950                           ;Test.c: 246: LATAbits.LATA4 = ~1;
 10951  00025E  9889               	bcf	3977,4,c	;volatile
 10952                           
 10953                           ;Test.c: 247: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10954  000260  0E1D               	movlw	29
 10955  000262  0100               	movlb	0	; () banked
 10956  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10957  000266  0E69               	movlw	105
 10958  000268  0100               	movlb	0	; () banked
 10959  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10960  00026C  0EA5               	movlw	165
 10961  00026E                     u7767:
 10962  00026E  2EE8               	decfsz	wreg,f,c
 10963  000270  D7FE               	bra	u7767
 10964  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10965  000274  D7FC               	bra	u7767
 10966  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10967  000278  D7FA               	bra	u7767
 10968  00027A  0100               	movlb	0	; () banked
 10969  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10970  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10971  000280  0100               	movlb	0	; () banked
 10972  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10973  000284  D7DD               	goto	l1104
 10974  000286  0100               	movlb	0	; () banked
 10975  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10976  00028A  E101               	bnz	u5250
 10977  00028C  D7D4               	goto	L9
 10978  00028E                     u5250:
 10979  00028E                     l1105:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;Test.c: 248: }
 10983                           ;Test.c: 249: LATAbits.LATA4 = ~1;
 10984  00028E  9889               	bcf	3977,4,c	;volatile
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;Test.c: 250: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10988  000290  0E01               	movlw	1
 10989  000292  ECDC  F023         	call	_lcdInst
 10990  000296  0E68               	movlw	104
 10991  000298  0100               	movlb	0	; () banked
 10992  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10993  00029C  0EE4               	movlw	228
 10994  00029E                     u7777:
 10995  00029E  2EE8               	decfsz	wreg,f,c
 10996  0002A0  D7FE               	bra	u7777
 10997  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10998  0002A4  D7FC               	bra	u7777
 10999  0002A6  F000               	nop	
 11000  0002A8  0E80               	movlw	128
 11001  0002AA  ECDC  F023         	call	_lcdInst
 11002                           
 11003                           ;Test.c: 253: machine_state = Sorting_state;
 11004  0002AE  0E01               	movlw	1
 11005  0002B0  0100               	movlb	0	; () banked
 11006  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;Test.c: 254: was_low_1 = 0;
 11010  0002B4  0E00               	movlw	0
 11011  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11012  0002B8  0E00               	movlw	0
 11013  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;Test.c: 255: was_low_1 = 0;
 11017  0002BC  0E00               	movlw	0
 11018  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11019  0002C0  0E00               	movlw	0
 11020  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;Test.c: 262: printf("TST: PAN SERVO");
 11024  0002C4  0E99               	movlw	low STR_96
 11025  0002C6  0100               	movlb	0	; () banked
 11026  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11027  0002CA  0EFE               	movlw	high STR_96
 11028  0002CC  0100               	movlb	0	; () banked
 11029  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11030  0002D0  ECB8  F008         	call	_printf	;wreg free
 11031                           
 11032                           ;Test.c: 263: lcdInst(0b11000000);;
 11033  0002D4  0EC0               	movlw	192
 11034  0002D6  ECDC  F023         	call	_lcdInst
 11035                           
 11036                           ;Test.c: 264: printf("MIDDLE -- 2s    ");
 11037  0002DA  0E20               	movlw	low STR_97
 11038  0002DC  0100               	movlb	0	; () banked
 11039  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11040  0002E0  0EFC               	movlw	high STR_97
 11041  0002E2  0100               	movlb	0	; () banked
 11042  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11043  0002E6  ECB8  F008         	call	_printf	;wreg free
 11044                           
 11045                           ;Test.c: 265: updateServoPosition(1200, 1);
 11046  0002EA  0E04               	movlw	4
 11047  0002EC  0100               	movlb	0	; () banked
 11048  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11049  0002F0  0EB0               	movlw	176
 11050  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11051  0002F4  0E00               	movlw	0
 11052  0002F6  0100               	movlb	0	; () banked
 11053  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11054  0002FA  0E01               	movlw	1
 11055  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11056  0002FE  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11057                           
 11058                           ;Test.c: 266: TMR1ON = 1;
 11059  000302  80CD               	bsf	4045,0,c	;volatile
 11060                           
 11061                           ;Test.c: 267: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11062  000304  0E00               	movlw	0
 11063  000306  0100               	movlb	0	; () banked
 11064  000308  6FAE               	movwf	actuatorTest@i_1639& (0+255),b
 11065  00030A                     l6782:
 11066                           
 11067                           ; BSR set to: 0
 11068  00030A  0E63               	movlw	99
 11069  00030C  0100               	movlb	0	; () banked
 11070  00030E  65AE               	cpfsgt	actuatorTest@i_1639& (0+255),b
 11071  000310  D001               	goto	l6786
 11072  000312  D00C               	goto	l6790
 11073  000314                     l6786:
 11074                           
 11075                           ; BSR set to: 0
 11076  000314  0E68               	movlw	104
 11077  000316  0100               	movlb	0	; () banked
 11078  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11079  00031A  0EE4               	movlw	228
 11080  00031C                     u7787:
 11081  00031C  2EE8               	decfsz	wreg,f,c
 11082  00031E  D7FE               	bra	u7787
 11083  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11084  000322  D7FC               	bra	u7787
 11085  000324  F000               	nop	
 11086  000326  0100               	movlb	0	; () banked
 11087  000328  2BAE               	incf	actuatorTest@i_1639& (0+255),f,b
 11088  00032A  D7EF               	goto	l6782
 11089  00032C                     l6790:
 11090                           
 11091                           ; BSR set to: 0
 11092  00032C  0E00               	movlw	0
 11093  00032E  0100               	movlb	0	; () banked
 11094  000330  6FAF               	movwf	actuatorTest@i_1640& (0+255),b
 11095  000332                     l6792:
 11096                           
 11097                           ; BSR set to: 0
 11098  000332  0E63               	movlw	99
 11099  000334  0100               	movlb	0	; () banked
 11100  000336  65AF               	cpfsgt	actuatorTest@i_1640& (0+255),b
 11101  000338  D001               	goto	l6796
 11102  00033A  D00C               	goto	l6800
 11103  00033C                     l6796:
 11104                           
 11105                           ; BSR set to: 0
 11106  00033C  0E68               	movlw	104
 11107  00033E  0100               	movlb	0	; () banked
 11108  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11109  000342  0EE4               	movlw	228
 11110  000344                     u7797:
 11111  000344  2EE8               	decfsz	wreg,f,c
 11112  000346  D7FE               	bra	u7797
 11113  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11114  00034A  D7FC               	bra	u7797
 11115  00034C  F000               	nop	
 11116  00034E  0100               	movlb	0	; () banked
 11117  000350  2BAF               	incf	actuatorTest@i_1640& (0+255),f,b
 11118  000352  D7EF               	goto	l6792
 11119  000354                     l6800:
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;Test.c: 269: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11123  000354  0E80               	movlw	128
 11124  000356  ECDC  F023         	call	_lcdInst
 11125  00035A  0EC0               	movlw	192
 11126  00035C  ECDC  F023         	call	_lcdInst
 11127                           
 11128                           ;Test.c: 270: printf("RIGHT -- 2s     ");
 11129  000360  0E0F               	movlw	low STR_98
 11130  000362  0100               	movlb	0	; () banked
 11131  000364  6F8E               	movwf	printf@f& (0+255),b
 11132  000366  0EFC               	movlw	high STR_98
 11133  000368  0100               	movlb	0	; () banked
 11134  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11135  00036C  ECB8  F008         	call	_printf	;wreg free
 11136                           
 11137                           ;Test.c: 271: updateServoPosition(500, 1);
 11138  000370  0E01               	movlw	1
 11139  000372  0100               	movlb	0	; () banked
 11140  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11141  000376  0EF4               	movlw	244
 11142  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11143  00037A  0E00               	movlw	0
 11144  00037C  0100               	movlb	0	; () banked
 11145  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11146  000380  0E01               	movlw	1
 11147  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11148  000384  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11149                           
 11150                           ;Test.c: 272: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11151  000388  0E00               	movlw	0
 11152  00038A  0100               	movlb	0	; () banked
 11153  00038C  6FB0               	movwf	actuatorTest@i_1642& (0+255),b
 11154  00038E                     l6808:
 11155                           
 11156                           ; BSR set to: 0
 11157  00038E  0E63               	movlw	99
 11158  000390  0100               	movlb	0	; () banked
 11159  000392  65B0               	cpfsgt	actuatorTest@i_1642& (0+255),b
 11160  000394  D001               	goto	l6812
 11161  000396  D00C               	goto	l6816
 11162  000398                     l6812:
 11163                           
 11164                           ; BSR set to: 0
 11165  000398  0E68               	movlw	104
 11166  00039A  0100               	movlb	0	; () banked
 11167  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11168  00039E  0EE4               	movlw	228
 11169  0003A0                     u7807:
 11170  0003A0  2EE8               	decfsz	wreg,f,c
 11171  0003A2  D7FE               	bra	u7807
 11172  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11173  0003A6  D7FC               	bra	u7807
 11174  0003A8  F000               	nop	
 11175  0003AA  0100               	movlb	0	; () banked
 11176  0003AC  2BB0               	incf	actuatorTest@i_1642& (0+255),f,b
 11177  0003AE  D7EF               	goto	l6808
 11178  0003B0                     l6816:
 11179                           
 11180                           ; BSR set to: 0
 11181  0003B0  0E00               	movlw	0
 11182  0003B2  0100               	movlb	0	; () banked
 11183  0003B4  6FB1               	movwf	actuatorTest@i_1643& (0+255),b
 11184  0003B6                     l6818:
 11185                           
 11186                           ; BSR set to: 0
 11187  0003B6  0E63               	movlw	99
 11188  0003B8  0100               	movlb	0	; () banked
 11189  0003BA  65B1               	cpfsgt	actuatorTest@i_1643& (0+255),b
 11190  0003BC  D001               	goto	l6822
 11191  0003BE  D00C               	goto	l6826
 11192  0003C0                     l6822:
 11193                           
 11194                           ; BSR set to: 0
 11195  0003C0  0E68               	movlw	104
 11196  0003C2  0100               	movlb	0	; () banked
 11197  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11198  0003C6  0EE4               	movlw	228
 11199  0003C8                     u7817:
 11200  0003C8  2EE8               	decfsz	wreg,f,c
 11201  0003CA  D7FE               	bra	u7817
 11202  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11203  0003CE  D7FC               	bra	u7817
 11204  0003D0  F000               	nop	
 11205  0003D2  0100               	movlb	0	; () banked
 11206  0003D4  2BB1               	incf	actuatorTest@i_1643& (0+255),f,b
 11207  0003D6  D7EF               	goto	l6818
 11208  0003D8                     l6826:
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;Test.c: 274: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11212  0003D8  0E80               	movlw	128
 11213  0003DA  ECDC  F023         	call	_lcdInst
 11214  0003DE  0EC0               	movlw	192
 11215  0003E0  ECDC  F023         	call	_lcdInst
 11216                           
 11217                           ;Test.c: 275: printf("LEFT -- 2s      ");
 11218  0003E4  0EED               	movlw	low STR_99
 11219  0003E6  0100               	movlb	0	; () banked
 11220  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11221  0003EA  0EFB               	movlw	high STR_99
 11222  0003EC  0100               	movlb	0	; () banked
 11223  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11224  0003F0  ECB8  F008         	call	_printf	;wreg free
 11225                           
 11226                           ;Test.c: 276: updateServoPosition(2000, 1);
 11227  0003F4  0E07               	movlw	7
 11228  0003F6  0100               	movlb	0	; () banked
 11229  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11230  0003FA  0ED0               	movlw	208
 11231  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11232  0003FE  0E00               	movlw	0
 11233  000400  0100               	movlb	0	; () banked
 11234  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11235  000404  0E01               	movlw	1
 11236  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11237  000408  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11238                           
 11239                           ;Test.c: 277: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11240  00040C  0E00               	movlw	0
 11241  00040E  0100               	movlb	0	; () banked
 11242  000410  6FB2               	movwf	actuatorTest@i_1645& (0+255),b
 11243  000412                     l6834:
 11244                           
 11245                           ; BSR set to: 0
 11246  000412  0E63               	movlw	99
 11247  000414  0100               	movlb	0	; () banked
 11248  000416  65B2               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11249  000418  D001               	goto	l6838
 11250  00041A  D00C               	goto	l6842
 11251  00041C                     l6838:
 11252                           
 11253                           ; BSR set to: 0
 11254  00041C  0E68               	movlw	104
 11255  00041E  0100               	movlb	0	; () banked
 11256  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11257  000422  0EE4               	movlw	228
 11258  000424                     u7827:
 11259  000424  2EE8               	decfsz	wreg,f,c
 11260  000426  D7FE               	bra	u7827
 11261  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11262  00042A  D7FC               	bra	u7827
 11263  00042C  F000               	nop	
 11264  00042E  0100               	movlb	0	; () banked
 11265  000430  2BB2               	incf	actuatorTest@i_1645& (0+255),f,b
 11266  000432  D7EF               	goto	l6834
 11267  000434                     l6842:
 11268                           
 11269                           ; BSR set to: 0
 11270  000434  0E00               	movlw	0
 11271  000436  0100               	movlb	0	; () banked
 11272  000438  6FB3               	movwf	actuatorTest@i_1646& (0+255),b
 11273  00043A                     l6844:
 11274                           
 11275                           ; BSR set to: 0
 11276  00043A  0E63               	movlw	99
 11277  00043C  0100               	movlb	0	; () banked
 11278  00043E  65B3               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11279  000440  D001               	goto	l6848
 11280  000442  D00C               	goto	l6852
 11281  000444                     l6848:
 11282                           
 11283                           ; BSR set to: 0
 11284  000444  0E68               	movlw	104
 11285  000446  0100               	movlb	0	; () banked
 11286  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11287  00044A  0EE4               	movlw	228
 11288  00044C                     u7837:
 11289  00044C  2EE8               	decfsz	wreg,f,c
 11290  00044E  D7FE               	bra	u7837
 11291  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11292  000452  D7FC               	bra	u7837
 11293  000454  F000               	nop	
 11294  000456  0100               	movlb	0	; () banked
 11295  000458  2BB3               	incf	actuatorTest@i_1646& (0+255),f,b
 11296  00045A  D7EF               	goto	l6844
 11297  00045C                     l6852:
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;Test.c: 279: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11301  00045C  0E80               	movlw	128
 11302  00045E  ECDC  F023         	call	_lcdInst
 11303  000462  0EC0               	movlw	192
 11304  000464  ECDC  F023         	call	_lcdInst
 11305                           
 11306                           ;Test.c: 280: printf("MID-LEFT -- 2s  ");
 11307  000468  0E42               	movlw	low STR_100
 11308  00046A  0100               	movlb	0	; () banked
 11309  00046C  6F8E               	movwf	printf@f& (0+255),b
 11310  00046E  0EFC               	movlw	high STR_100
 11311  000470  0100               	movlb	0	; () banked
 11312  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11313  000474  ECB8  F008         	call	_printf	;wreg free
 11314                           
 11315                           ;Test.c: 281: updateServoPosition(1700, 1);
 11316  000478  0E06               	movlw	6
 11317  00047A  0100               	movlb	0	; () banked
 11318  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11319  00047E  0EA4               	movlw	164
 11320  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11321  000482  0E00               	movlw	0
 11322  000484  0100               	movlb	0	; () banked
 11323  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11324  000488  0E01               	movlw	1
 11325  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11326  00048C  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11327                           
 11328                           ;Test.c: 282: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11329  000490  0E00               	movlw	0
 11330  000492  0100               	movlb	0	; () banked
 11331  000494  6FB4               	movwf	actuatorTest@i_1648& (0+255),b
 11332  000496                     l6860:
 11333                           
 11334                           ; BSR set to: 0
 11335  000496  0E63               	movlw	99
 11336  000498  0100               	movlb	0	; () banked
 11337  00049A  65B4               	cpfsgt	actuatorTest@i_1648& (0+255),b
 11338  00049C  D001               	goto	l6864
 11339  00049E  D00C               	goto	l6868
 11340  0004A0                     l6864:
 11341                           
 11342                           ; BSR set to: 0
 11343  0004A0  0E68               	movlw	104
 11344  0004A2  0100               	movlb	0	; () banked
 11345  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11346  0004A6  0EE4               	movlw	228
 11347  0004A8                     u7847:
 11348  0004A8  2EE8               	decfsz	wreg,f,c
 11349  0004AA  D7FE               	bra	u7847
 11350  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11351  0004AE  D7FC               	bra	u7847
 11352  0004B0  F000               	nop	
 11353  0004B2  0100               	movlb	0	; () banked
 11354  0004B4  2BB4               	incf	actuatorTest@i_1648& (0+255),f,b
 11355  0004B6  D7EF               	goto	l6860
 11356  0004B8                     l6868:
 11357                           
 11358                           ; BSR set to: 0
 11359  0004B8  0E00               	movlw	0
 11360  0004BA  0100               	movlb	0	; () banked
 11361  0004BC  6FB5               	movwf	actuatorTest@i_1649& (0+255),b
 11362  0004BE                     l6870:
 11363                           
 11364                           ; BSR set to: 0
 11365  0004BE  0E63               	movlw	99
 11366  0004C0  0100               	movlb	0	; () banked
 11367  0004C2  65B5               	cpfsgt	actuatorTest@i_1649& (0+255),b
 11368  0004C4  D001               	goto	l6874
 11369  0004C6  D00C               	goto	l6878
 11370  0004C8                     l6874:
 11371                           
 11372                           ; BSR set to: 0
 11373  0004C8  0E68               	movlw	104
 11374  0004CA  0100               	movlb	0	; () banked
 11375  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11376  0004CE  0EE4               	movlw	228
 11377  0004D0                     u7857:
 11378  0004D0  2EE8               	decfsz	wreg,f,c
 11379  0004D2  D7FE               	bra	u7857
 11380  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11381  0004D6  D7FC               	bra	u7857
 11382  0004D8  F000               	nop	
 11383  0004DA  0100               	movlb	0	; () banked
 11384  0004DC  2BB5               	incf	actuatorTest@i_1649& (0+255),f,b
 11385  0004DE  D7EF               	goto	l6870
 11386  0004E0                     l6878:
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11390  0004E0  0E80               	movlw	128
 11391  0004E2  ECDC  F023         	call	_lcdInst
 11392  0004E6  0EC0               	movlw	192
 11393  0004E8  ECDC  F023         	call	_lcdInst
 11394                           
 11395                           ;Test.c: 285: printf("MID-RIGHT -- 2s ");
 11396  0004EC  0E53               	movlw	low STR_101
 11397  0004EE  0100               	movlb	0	; () banked
 11398  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11399  0004F2  0EFC               	movlw	high STR_101
 11400  0004F4  0100               	movlb	0	; () banked
 11401  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11402  0004F8  ECB8  F008         	call	_printf	;wreg free
 11403                           
 11404                           ;Test.c: 286: updateServoPosition(750, 1);
 11405  0004FC  0E02               	movlw	2
 11406  0004FE  0100               	movlb	0	; () banked
 11407  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11408  000502  0EEE               	movlw	238
 11409  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11410  000506  0E00               	movlw	0
 11411  000508  0100               	movlb	0	; () banked
 11412  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11413  00050C  0E01               	movlw	1
 11414  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11415  000510  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11416                           
 11417                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11418  000514  0E00               	movlw	0
 11419  000516  0100               	movlb	0	; () banked
 11420  000518  6FB6               	movwf	actuatorTest@i_1651& (0+255),b
 11421  00051A                     l6886:
 11422                           
 11423                           ; BSR set to: 0
 11424  00051A  0E63               	movlw	99
 11425  00051C  0100               	movlb	0	; () banked
 11426  00051E  65B6               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11427  000520  D001               	goto	l6890
 11428  000522  D00C               	goto	l6894
 11429  000524                     l6890:
 11430                           
 11431                           ; BSR set to: 0
 11432  000524  0E68               	movlw	104
 11433  000526  0100               	movlb	0	; () banked
 11434  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11435  00052A  0EE4               	movlw	228
 11436  00052C                     u7867:
 11437  00052C  2EE8               	decfsz	wreg,f,c
 11438  00052E  D7FE               	bra	u7867
 11439  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11440  000532  D7FC               	bra	u7867
 11441  000534  F000               	nop	
 11442  000536  0100               	movlb	0	; () banked
 11443  000538  2BB6               	incf	actuatorTest@i_1651& (0+255),f,b
 11444  00053A  D7EF               	goto	l6886
 11445  00053C                     l6894:
 11446                           
 11447                           ; BSR set to: 0
 11448  00053C  0E00               	movlw	0
 11449  00053E  0100               	movlb	0	; () banked
 11450  000540  6FB7               	movwf	actuatorTest@i_1652& (0+255),b
 11451  000542                     l6896:
 11452                           
 11453                           ; BSR set to: 0
 11454  000542  0E63               	movlw	99
 11455  000544  0100               	movlb	0	; () banked
 11456  000546  65B7               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11457  000548  D001               	goto	l6900
 11458  00054A  D00C               	goto	l6904
 11459  00054C                     l6900:
 11460                           
 11461                           ; BSR set to: 0
 11462  00054C  0E68               	movlw	104
 11463  00054E  0100               	movlb	0	; () banked
 11464  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11465  000552  0EE4               	movlw	228
 11466  000554                     u7877:
 11467  000554  2EE8               	decfsz	wreg,f,c
 11468  000556  D7FE               	bra	u7877
 11469  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11470  00055A  D7FC               	bra	u7877
 11471  00055C  F000               	nop	
 11472  00055E  0100               	movlb	0	; () banked
 11473  000560  2BB7               	incf	actuatorTest@i_1652& (0+255),f,b
 11474  000562  D7EF               	goto	l6896
 11475  000564                     l6904:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;Test.c: 289: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11479  000564  0E80               	movlw	128
 11480  000566  ECDC  F023         	call	_lcdInst
 11481  00056A  0EC0               	movlw	192
 11482  00056C  ECDC  F023         	call	_lcdInst
 11483                           
 11484                           ;Test.c: 290: printf("MID -- 2s       ");
 11485  000570  0ECB               	movlw	low STR_102
 11486  000572  0100               	movlb	0	; () banked
 11487  000574  6F8E               	movwf	printf@f& (0+255),b
 11488  000576  0EFB               	movlw	high STR_102
 11489  000578  0100               	movlb	0	; () banked
 11490  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11491  00057C  ECB8  F008         	call	_printf	;wreg free
 11492                           
 11493                           ;Test.c: 291: updateServoPosition(1200, 1);
 11494  000580  0E04               	movlw	4
 11495  000582  0100               	movlb	0	; () banked
 11496  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11497  000586  0EB0               	movlw	176
 11498  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11499  00058A  0E00               	movlw	0
 11500  00058C  0100               	movlb	0	; () banked
 11501  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11502  000590  0E01               	movlw	1
 11503  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11504  000594  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11505                           
 11506                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11507  000598  0E00               	movlw	0
 11508  00059A  0100               	movlb	0	; () banked
 11509  00059C  6FB8               	movwf	actuatorTest@i_1654& (0+255),b
 11510  00059E                     l6912:
 11511                           
 11512                           ; BSR set to: 0
 11513  00059E  0E63               	movlw	99
 11514  0005A0  0100               	movlb	0	; () banked
 11515  0005A2  65B8               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11516  0005A4  D001               	goto	l6916
 11517  0005A6  D00C               	goto	l6920
 11518  0005A8                     l6916:
 11519                           
 11520                           ; BSR set to: 0
 11521  0005A8  0E68               	movlw	104
 11522  0005AA  0100               	movlb	0	; () banked
 11523  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11524  0005AE  0EE4               	movlw	228
 11525  0005B0                     u7887:
 11526  0005B0  2EE8               	decfsz	wreg,f,c
 11527  0005B2  D7FE               	bra	u7887
 11528  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11529  0005B6  D7FC               	bra	u7887
 11530  0005B8  F000               	nop	
 11531  0005BA  0100               	movlb	0	; () banked
 11532  0005BC  2BB8               	incf	actuatorTest@i_1654& (0+255),f,b
 11533  0005BE  D7EF               	goto	l6912
 11534  0005C0                     l6920:
 11535                           
 11536                           ; BSR set to: 0
 11537  0005C0  0E00               	movlw	0
 11538  0005C2  0100               	movlb	0	; () banked
 11539  0005C4  6FB9               	movwf	actuatorTest@i_1655& (0+255),b
 11540  0005C6                     l6922:
 11541                           
 11542                           ; BSR set to: 0
 11543  0005C6  0E63               	movlw	99
 11544  0005C8  0100               	movlb	0	; () banked
 11545  0005CA  65B9               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11546  0005CC  D001               	goto	l6926
 11547  0005CE  D00C               	goto	l1129
 11548  0005D0                     l6926:
 11549                           
 11550                           ; BSR set to: 0
 11551  0005D0  0E68               	movlw	104
 11552  0005D2  0100               	movlb	0	; () banked
 11553  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11554  0005D6  0EE4               	movlw	228
 11555  0005D8                     u7897:
 11556  0005D8  2EE8               	decfsz	wreg,f,c
 11557  0005DA  D7FE               	bra	u7897
 11558  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11559  0005DE  D7FC               	bra	u7897
 11560  0005E0  F000               	nop	
 11561  0005E2  0100               	movlb	0	; () banked
 11562  0005E4  2BB9               	incf	actuatorTest@i_1655& (0+255),f,b
 11563  0005E6  D7EF               	goto	l6922
 11564  0005E8                     l1129:
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;Test.c: 293: TMR1ON = 0;
 11568  0005E8  90CD               	bcf	4045,0,c	;volatile
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;Test.c: 300: printf("TST: TILT SERVO");
 11572  0005EA  0E2E               	movlw	low STR_103
 11573  0005EC  0100               	movlb	0	; () banked
 11574  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11575  0005F0  0EFE               	movlw	high STR_103
 11576  0005F2  0100               	movlb	0	; () banked
 11577  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11578  0005F6  ECB8  F008         	call	_printf	;wreg free
 11579                           
 11580                           ;Test.c: 301: lcdInst(0b11000000);;
 11581  0005FA  0EC0               	movlw	192
 11582  0005FC  ECDC  F023         	call	_lcdInst
 11583                           
 11584                           ;Test.c: 302: printf("LEVEL -- 2s     ");
 11585  000600  0EFE               	movlw	low STR_104
 11586  000602  0100               	movlb	0	; () banked
 11587  000604  6F8E               	movwf	printf@f& (0+255),b
 11588  000606  0EFB               	movlw	high STR_104
 11589  000608  0100               	movlb	0	; () banked
 11590  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11591  00060C  ECB8  F008         	call	_printf	;wreg free
 11592                           
 11593                           ;Test.c: 303: updateServoPosition(1190, 3);
 11594  000610  0E04               	movlw	4
 11595  000612  0100               	movlb	0	; () banked
 11596  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11597  000616  0EA6               	movlw	166
 11598  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11599  00061A  0E00               	movlw	0
 11600  00061C  0100               	movlb	0	; () banked
 11601  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11602  000620  0E03               	movlw	3
 11603  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11604  000624  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11605                           
 11606                           ;Test.c: 304: TMR3ON = 1;
 11607  000628  80B1               	bsf	4017,0,c	;volatile
 11608                           
 11609                           ;Test.c: 305: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11610  00062A  0E00               	movlw	0
 11611  00062C  0100               	movlb	0	; () banked
 11612  00062E  6FBA               	movwf	actuatorTest@i_1658& (0+255),b
 11613  000630                     l6940:
 11614                           
 11615                           ; BSR set to: 0
 11616  000630  0E63               	movlw	99
 11617  000632  0100               	movlb	0	; () banked
 11618  000634  65BA               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11619  000636  D001               	goto	l6944
 11620  000638  D00C               	goto	l6948
 11621  00063A                     l6944:
 11622                           
 11623                           ; BSR set to: 0
 11624  00063A  0E68               	movlw	104
 11625  00063C  0100               	movlb	0	; () banked
 11626  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11627  000640  0EE4               	movlw	228
 11628  000642                     u7907:
 11629  000642  2EE8               	decfsz	wreg,f,c
 11630  000644  D7FE               	bra	u7907
 11631  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11632  000648  D7FC               	bra	u7907
 11633  00064A  F000               	nop	
 11634  00064C  0100               	movlb	0	; () banked
 11635  00064E  2BBA               	incf	actuatorTest@i_1658& (0+255),f,b
 11636  000650  D7EF               	goto	l6940
 11637  000652                     l6948:
 11638                           
 11639                           ; BSR set to: 0
 11640  000652  0E00               	movlw	0
 11641  000654  0100               	movlb	0	; () banked
 11642  000656  6FBB               	movwf	actuatorTest@i_1659& (0+255),b
 11643  000658                     l6950:
 11644                           
 11645                           ; BSR set to: 0
 11646  000658  0E63               	movlw	99
 11647  00065A  0100               	movlb	0	; () banked
 11648  00065C  65BB               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11649  00065E  D001               	goto	l6954
 11650  000660  D00C               	goto	l6958
 11651  000662                     l6954:
 11652                           
 11653                           ; BSR set to: 0
 11654  000662  0E68               	movlw	104
 11655  000664  0100               	movlb	0	; () banked
 11656  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11657  000668  0EE4               	movlw	228
 11658  00066A                     u7917:
 11659  00066A  2EE8               	decfsz	wreg,f,c
 11660  00066C  D7FE               	bra	u7917
 11661  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11662  000670  D7FC               	bra	u7917
 11663  000672  F000               	nop	
 11664  000674  0100               	movlb	0	; () banked
 11665  000676  2BBB               	incf	actuatorTest@i_1659& (0+255),f,b
 11666  000678  D7EF               	goto	l6950
 11667  00067A                     l6958:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;Test.c: 307: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11671  00067A  0E80               	movlw	128
 11672  00067C  ECDC  F023         	call	_lcdInst
 11673  000680  0EC0               	movlw	192
 11674  000682  ECDC  F023         	call	_lcdInst
 11675                           
 11676                           ;Test.c: 308: printf("DROP -- 2s      ");
 11677  000686  0EDC               	movlw	low STR_105
 11678  000688  0100               	movlb	0	; () banked
 11679  00068A  6F8E               	movwf	printf@f& (0+255),b
 11680  00068C  0EFB               	movlw	high STR_105
 11681  00068E  0100               	movlb	0	; () banked
 11682  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11683  000692  ECB8  F008         	call	_printf	;wreg free
 11684                           
 11685                           ;Test.c: 309: updateServoPosition(1350, 3);
 11686  000696  0E05               	movlw	5
 11687  000698  0100               	movlb	0	; () banked
 11688  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11689  00069C  0E46               	movlw	70
 11690  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11691  0006A0  0E00               	movlw	0
 11692  0006A2  0100               	movlb	0	; () banked
 11693  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11694  0006A6  0E03               	movlw	3
 11695  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11696  0006AA  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11697                           
 11698                           ;Test.c: 310: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11699  0006AE  0E00               	movlw	0
 11700  0006B0  0100               	movlb	0	; () banked
 11701  0006B2  6FBC               	movwf	actuatorTest@i_1661& (0+255),b
 11702  0006B4                     l6966:
 11703                           
 11704                           ; BSR set to: 0
 11705  0006B4  0E63               	movlw	99
 11706  0006B6  0100               	movlb	0	; () banked
 11707  0006B8  65BC               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11708  0006BA  D001               	goto	l6970
 11709  0006BC  D00C               	goto	l6974
 11710  0006BE                     l6970:
 11711                           
 11712                           ; BSR set to: 0
 11713  0006BE  0E68               	movlw	104
 11714  0006C0  0100               	movlb	0	; () banked
 11715  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11716  0006C4  0EE4               	movlw	228
 11717  0006C6                     u7927:
 11718  0006C6  2EE8               	decfsz	wreg,f,c
 11719  0006C8  D7FE               	bra	u7927
 11720  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11721  0006CC  D7FC               	bra	u7927
 11722  0006CE  F000               	nop	
 11723  0006D0  0100               	movlb	0	; () banked
 11724  0006D2  2BBC               	incf	actuatorTest@i_1661& (0+255),f,b
 11725  0006D4  D7EF               	goto	l6966
 11726  0006D6                     l6974:
 11727                           
 11728                           ; BSR set to: 0
 11729  0006D6  0E00               	movlw	0
 11730  0006D8  0100               	movlb	0	; () banked
 11731  0006DA  6FBD               	movwf	actuatorTest@i_1662& (0+255),b
 11732  0006DC                     l6976:
 11733                           
 11734                           ; BSR set to: 0
 11735  0006DC  0E63               	movlw	99
 11736  0006DE  0100               	movlb	0	; () banked
 11737  0006E0  65BD               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11738  0006E2  D001               	goto	l6980
 11739  0006E4  D00C               	goto	l6984
 11740  0006E6                     l6980:
 11741                           
 11742                           ; BSR set to: 0
 11743  0006E6  0E68               	movlw	104
 11744  0006E8  0100               	movlb	0	; () banked
 11745  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11746  0006EC  0EE4               	movlw	228
 11747  0006EE                     u7937:
 11748  0006EE  2EE8               	decfsz	wreg,f,c
 11749  0006F0  D7FE               	bra	u7937
 11750  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11751  0006F4  D7FC               	bra	u7937
 11752  0006F6  F000               	nop	
 11753  0006F8  0100               	movlb	0	; () banked
 11754  0006FA  2BBD               	incf	actuatorTest@i_1662& (0+255),f,b
 11755  0006FC  D7EF               	goto	l6976
 11756  0006FE                     l6984:
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;Test.c: 312: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11760  0006FE  0E80               	movlw	128
 11761  000700  ECDC  F023         	call	_lcdInst
 11762  000704  0EC0               	movlw	192
 11763  000706  ECDC  F023         	call	_lcdInst
 11764                           
 11765                           ;Test.c: 313: printf("LEVEL -- 2s     ");
 11766  00070A  0EFE               	movlw	low STR_104
 11767  00070C  0100               	movlb	0	; () banked
 11768  00070E  6F8E               	movwf	printf@f& (0+255),b
 11769  000710  0EFB               	movlw	high STR_104
 11770  000712  0100               	movlb	0	; () banked
 11771  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11772  000716  ECB8  F008         	call	_printf	;wreg free
 11773                           
 11774                           ;Test.c: 314: updateServoPosition(1190, 3);
 11775  00071A  0E04               	movlw	4
 11776  00071C  0100               	movlb	0	; () banked
 11777  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11778  000720  0EA6               	movlw	166
 11779  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11780  000724  0E00               	movlw	0
 11781  000726  0100               	movlb	0	; () banked
 11782  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11783  00072A  0E03               	movlw	3
 11784  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11785  00072E  EC5F  F01E         	call	_updateServoPosition	;wreg free
 11786                           
 11787                           ;Test.c: 315: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11788  000732  0E00               	movlw	0
 11789  000734  0100               	movlb	0	; () banked
 11790  000736  6FBE               	movwf	actuatorTest@i_1664& (0+255),b
 11791  000738                     l6992:
 11792                           
 11793                           ; BSR set to: 0
 11794  000738  0E63               	movlw	99
 11795  00073A  0100               	movlb	0	; () banked
 11796  00073C  65BE               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11797  00073E  D001               	goto	l6996
 11798  000740  D00C               	goto	l7000
 11799  000742                     l6996:
 11800                           
 11801                           ; BSR set to: 0
 11802  000742  0E68               	movlw	104
 11803  000744  0100               	movlb	0	; () banked
 11804  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11805  000748  0EE4               	movlw	228
 11806  00074A                     u7947:
 11807  00074A  2EE8               	decfsz	wreg,f,c
 11808  00074C  D7FE               	bra	u7947
 11809  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11810  000750  D7FC               	bra	u7947
 11811  000752  F000               	nop	
 11812  000754  0100               	movlb	0	; () banked
 11813  000756  2BBE               	incf	actuatorTest@i_1664& (0+255),f,b
 11814  000758  D7EF               	goto	l6992
 11815  00075A                     l7000:
 11816                           
 11817                           ; BSR set to: 0
 11818  00075A  0E00               	movlw	0
 11819  00075C  0100               	movlb	0	; () banked
 11820  00075E  6FBF               	movwf	actuatorTest@i_1665& (0+255),b
 11821  000760                     l7002:
 11822                           
 11823                           ; BSR set to: 0
 11824  000760  0E63               	movlw	99
 11825  000762  0100               	movlb	0	; () banked
 11826  000764  65BF               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11827  000766  D001               	goto	l7006
 11828  000768  D00C               	goto	l1141
 11829  00076A                     l7006:
 11830                           
 11831                           ; BSR set to: 0
 11832  00076A  0E68               	movlw	104
 11833  00076C  0100               	movlb	0	; () banked
 11834  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11835  000770  0EE4               	movlw	228
 11836  000772                     u7957:
 11837  000772  2EE8               	decfsz	wreg,f,c
 11838  000774  D7FE               	bra	u7957
 11839  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11840  000778  D7FC               	bra	u7957
 11841  00077A  F000               	nop	
 11842  00077C  0100               	movlb	0	; () banked
 11843  00077E  2BBF               	incf	actuatorTest@i_1665& (0+255),f,b
 11844  000780  D7EF               	goto	l7002
 11845  000782                     l1141:
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;Test.c: 316: TMR3ON = 0;
 11849  000782  90B1               	bcf	4017,0,c	;volatile
 11850                           
 11851                           ;Test.c: 317: (INTCONbits.GIE = 0);
 11852  000784  9EF2               	bcf	intcon,7,c	;volatile
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;Test.c: 322: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11856  000786  0E01               	movlw	1
 11857  000788  ECDC  F023         	call	_lcdInst
 11858  00078C  0E68               	movlw	104
 11859  00078E  0100               	movlb	0	; () banked
 11860  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11861  000792  0EE4               	movlw	228
 11862  000794                     u7967:
 11863  000794  2EE8               	decfsz	wreg,f,c
 11864  000796  D7FE               	bra	u7967
 11865  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11866  00079A  D7FC               	bra	u7967
 11867  00079C  F000               	nop	
 11868  00079E  0E80               	movlw	128
 11869  0007A0  ECDC  F023         	call	_lcdInst
 11870                           
 11871                           ;Test.c: 323: printf("TST: CAM SERVO");
 11872  0007A4  0E8A               	movlw	low STR_107
 11873  0007A6  0100               	movlb	0	; () banked
 11874  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11875  0007AA  0EFE               	movlw	high STR_107
 11876  0007AC  0100               	movlb	0	; () banked
 11877  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11878  0007B0  ECB8  F008         	call	_printf	;wreg free
 11879                           
 11880                           ;Test.c: 324: lcdInst(0b11000000);;
 11881  0007B4  0EC0               	movlw	192
 11882  0007B6  ECDC  F023         	call	_lcdInst
 11883                           
 11884                           ;Test.c: 325: printf("CAM UP  |RC0=1");
 11885  0007BA  0E6C               	movlw	low STR_108
 11886  0007BC  0100               	movlb	0	; () banked
 11887  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11888  0007C0  0EFE               	movlw	high STR_108
 11889  0007C2  0100               	movlb	0	; () banked
 11890  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11891  0007C6  ECB8  F008         	call	_printf	;wreg free
 11892                           
 11893                           ;Test.c: 326: LATCbits.LATC0 = 1;
 11894  0007CA  808B               	bsf	3979,0,c	;volatile
 11895                           
 11896                           ;Test.c: 327: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11897  0007CC  0E00               	movlw	0
 11898  0007CE  0100               	movlb	0	; () banked
 11899  0007D0  6FC0               	movwf	actuatorTest@i_1668& (0+255),b
 11900  0007D2                     l7026:
 11901                           
 11902                           ; BSR set to: 0
 11903  0007D2  0E63               	movlw	99
 11904  0007D4  0100               	movlb	0	; () banked
 11905  0007D6  65C0               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11906  0007D8  D001               	goto	l7030
 11907  0007DA  D00C               	goto	l7034
 11908  0007DC                     l7030:
 11909                           
 11910                           ; BSR set to: 0
 11911  0007DC  0E68               	movlw	104
 11912  0007DE  0100               	movlb	0	; () banked
 11913  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11914  0007E2  0EE4               	movlw	228
 11915  0007E4                     u7977:
 11916  0007E4  2EE8               	decfsz	wreg,f,c
 11917  0007E6  D7FE               	bra	u7977
 11918  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11919  0007EA  D7FC               	bra	u7977
 11920  0007EC  F000               	nop	
 11921  0007EE  0100               	movlb	0	; () banked
 11922  0007F0  2BC0               	incf	actuatorTest@i_1668& (0+255),f,b
 11923  0007F2  D7EF               	goto	l7026
 11924  0007F4                     l7034:
 11925                           
 11926                           ; BSR set to: 0
 11927  0007F4  0E00               	movlw	0
 11928  0007F6  0100               	movlb	0	; () banked
 11929  0007F8  6FC1               	movwf	actuatorTest@i_1669& (0+255),b
 11930  0007FA                     l7036:
 11931                           
 11932                           ; BSR set to: 0
 11933  0007FA  0E63               	movlw	99
 11934  0007FC  0100               	movlb	0	; () banked
 11935  0007FE  65C1               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11936  000800  D001               	goto	l7040
 11937  000802  D00C               	goto	l7044
 11938  000804                     l7040:
 11939                           
 11940                           ; BSR set to: 0
 11941  000804  0E68               	movlw	104
 11942  000806  0100               	movlb	0	; () banked
 11943  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11944  00080A  0EE4               	movlw	228
 11945  00080C                     u7987:
 11946  00080C  2EE8               	decfsz	wreg,f,c
 11947  00080E  D7FE               	bra	u7987
 11948  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11949  000812  D7FC               	bra	u7987
 11950  000814  F000               	nop	
 11951  000816  0100               	movlb	0	; () banked
 11952  000818  2BC1               	incf	actuatorTest@i_1669& (0+255),f,b
 11953  00081A  D7EF               	goto	l7036
 11954  00081C                     l7044:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;Test.c: 328: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11958  00081C  0E80               	movlw	128
 11959  00081E  ECDC  F023         	call	_lcdInst
 11960  000822  0EC0               	movlw	192
 11961  000824  ECDC  F023         	call	_lcdInst
 11962                           
 11963                           ;Test.c: 329: printf("CAM DWN |RC0=0");
 11964  000828  0E5D               	movlw	low STR_109
 11965  00082A  0100               	movlb	0	; () banked
 11966  00082C  6F8E               	movwf	printf@f& (0+255),b
 11967  00082E  0EFE               	movlw	high STR_109
 11968  000830  0100               	movlb	0	; () banked
 11969  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11970  000834  ECB8  F008         	call	_printf	;wreg free
 11971                           
 11972                           ;Test.c: 332: for(i=0;i<10000;i++)
 11973  000838  0E00               	movlw	0
 11974  00083A  0100               	movlb	0	; () banked
 11975  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11976  00083E  0E00               	movlw	0
 11977  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11978  000842                     l7050:
 11979                           
 11980                           ; BSR set to: 0
 11981  000842  0100               	movlb	0	; () banked
 11982  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11983  000846  D008               	goto	l1146
 11984  000848  0E10               	movlw	16
 11985  00084A  0100               	movlb	0	; () banked
 11986  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11987  00084E  0E27               	movlw	39
 11988  000850  0100               	movlb	0	; () banked
 11989  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11990  000854  B0D8               	btfsc	status,0,c
 11991  000856  D00D               	goto	l7060
 11992  000858                     l1146:
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;Test.c: 333: {
 11996                           ;Test.c: 334: LATCbits.LATC0 = 1;
 11997  000858  808B               	bsf	3979,0,c	;volatile
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;Test.c: 335: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12001  00085A  0E1A               	movlw	26
 12002  00085C                     u7997:
 12003  00085C  2EE8               	decfsz	wreg,f,c
 12004  00085E  D7FE               	bra	u7997
 12005  000860  D000               	nop2	
 12006                           
 12007                           ;Test.c: 336: LATCbits.LATC0 = 0;
 12008  000862  908B               	bcf	3979,0,c	;volatile
 12009                           
 12010                           ;Test.c: 337: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12011  000864  0EF0               	movlw	240
 12012  000866                     u8007:
 12013  000866  2EE8               	decfsz	wreg,f,c
 12014  000868  D7FE               	bra	u8007
 12015  00086A  0100               	movlb	0	; () banked
 12016  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12017  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12018  000870  D7E8               	goto	l7050
 12019  000872                     l7060:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;Test.c: 338: }
 12023                           ;Test.c: 340: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12024  000872  0E00               	movlw	0
 12025  000874  0100               	movlb	0	; () banked
 12026  000876  6FC2               	movwf	actuatorTest@i_1671& (0+255),b
 12027  000878                     l7062:
 12028                           
 12029                           ; BSR set to: 0
 12030  000878  0E63               	movlw	99
 12031  00087A  0100               	movlb	0	; () banked
 12032  00087C  65C2               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12033  00087E  D001               	goto	l7066
 12034  000880  D00C               	goto	l7070
 12035  000882                     l7066:
 12036                           
 12037                           ; BSR set to: 0
 12038  000882  0E68               	movlw	104
 12039  000884  0100               	movlb	0	; () banked
 12040  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12041  000888  0EE4               	movlw	228
 12042  00088A                     u8017:
 12043  00088A  2EE8               	decfsz	wreg,f,c
 12044  00088C  D7FE               	bra	u8017
 12045  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12046  000890  D7FC               	bra	u8017
 12047  000892  F000               	nop	
 12048  000894  0100               	movlb	0	; () banked
 12049  000896  2BC2               	incf	actuatorTest@i_1671& (0+255),f,b
 12050  000898  D7EF               	goto	l7062
 12051  00089A                     l7070:
 12052                           
 12053                           ; BSR set to: 0
 12054  00089A  0E00               	movlw	0
 12055  00089C  0100               	movlb	0	; () banked
 12056  00089E  6FC3               	movwf	actuatorTest@i_1672& (0+255),b
 12057  0008A0                     l7072:
 12058                           
 12059                           ; BSR set to: 0
 12060  0008A0  0E63               	movlw	99
 12061  0008A2  0100               	movlb	0	; () banked
 12062  0008A4  65C3               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12063  0008A6  D001               	goto	l7076
 12064  0008A8  D00C               	goto	l7080
 12065  0008AA                     l7076:
 12066                           
 12067                           ; BSR set to: 0
 12068  0008AA  0E68               	movlw	104
 12069  0008AC  0100               	movlb	0	; () banked
 12070  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12071  0008B0  0EE4               	movlw	228
 12072  0008B2                     u8027:
 12073  0008B2  2EE8               	decfsz	wreg,f,c
 12074  0008B4  D7FE               	bra	u8027
 12075  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12076  0008B8  D7FC               	bra	u8027
 12077  0008BA  F000               	nop	
 12078  0008BC  0100               	movlb	0	; () banked
 12079  0008BE  2BC3               	incf	actuatorTest@i_1672& (0+255),f,b
 12080  0008C0  D7EF               	goto	l7072
 12081  0008C2                     l7080:
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;Test.c: 341: machine_state = Testing_state;
 12085  0008C2  0E03               	movlw	3
 12086  0008C4  0100               	movlb	0	; () banked
 12087  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12088                           
 12089                           ; BSR set to: 0
 12090  0008C8  0012               	return		;funcret
 12091  0008CA                     __end_of_actuatorTest:
 12092                           	opt stack 0
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon2	equ	0xFF1
 12101                           intcon3	equ	0xFF0
 12102                           postinc0	equ	0xFEE
 12103                           wreg	equ	0xFE8
 12104                           postdec1	equ	0xFE5
 12105                           fsr1l	equ	0xFE1
 12106                           indf2	equ	0xFDF
 12107                           postinc2	equ	0xFDE
 12108                           postdec2	equ	0xFDD
 12109                           fsr2h	equ	0xFDA
 12110                           fsr2l	equ	0xFD9
 12111                           status	equ	0xFD8
 12112                           
 12113 ;; *************** function _ToggleTestA5 *****************
 12114 ;; Defined at:
 12115 ;;		line 485 in file "Test.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;  on              2   44[BANK0 ] int 
 12120 ;; Return value:  Size  Location     Type
 12121 ;;                  1    wreg      void 
 12122 ;; Registers used:
 12123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12133 ;;Total ram usage:        3 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:   10
 12136 ;; This function calls:
 12137 ;;		_lcdInst
 12138 ;;		_printf
 12139 ;; This function is called by:
 12140 ;;		_Test
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           	psect	text41
 12145  003AB4                     __ptext41:
 12146                           	opt stack 0
 12147  003AB4                     _ToggleTestA5:
 12148                           	opt stack 19
 12149                           
 12150                           ;Test.c: 486: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;incstack = 0
 12154  003AB4  0E01               	movlw	1
 12155  003AB6  ECDC  F023         	call	_lcdInst
 12156  003ABA  0E68               	movlw	104
 12157  003ABC  0100               	movlb	0	; () banked
 12158  003ABE  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 12159  003AC0  0EE4               	movlw	228
 12160  003AC2                     u8037:
 12161  003AC2  2EE8               	decfsz	wreg,f,c
 12162  003AC4  D7FE               	bra	u8037
 12163  003AC6  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 12164  003AC8  D7FC               	bra	u8037
 12165  003ACA  F000               	nop	
 12166  003ACC  0E80               	movlw	128
 12167  003ACE  ECDC  F023         	call	_lcdInst
 12168                           
 12169                           ;Test.c: 487: printf("D WILL RETURN   ");
 12170  003AD2  0E31               	movlw	low STR_115
 12171  003AD4  0100               	movlb	0	; () banked
 12172  003AD6  6F8E               	movwf	printf@f& (0+255),b
 12173  003AD8  0EFC               	movlw	high STR_115
 12174  003ADA  0100               	movlb	0	; () banked
 12175  003ADC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12176  003ADE  ECB8  F008         	call	_printf	;wreg free
 12177                           
 12178                           ;Test.c: 488: lcdInst(0b11000000);;
 12179  003AE2  0EC0               	movlw	192
 12180  003AE4  ECDC  F023         	call	_lcdInst
 12181                           
 12182                           ;Test.c: 489: printf("ELSE TOGGLES RA5");
 12183  003AE8  0E64               	movlw	low STR_116
 12184  003AEA  0100               	movlb	0	; () banked
 12185  003AEC  6F8E               	movwf	printf@f& (0+255),b
 12186  003AEE  0EFC               	movlw	high STR_116
 12187  003AF0  0100               	movlb	0	; () banked
 12188  003AF2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12189  003AF4  ECB8  F008         	call	_printf	;wreg free
 12190                           
 12191                           ;Test.c: 490: int on = 0;
 12192  003AF8  0E00               	movlw	0
 12193  003AFA  0100               	movlb	0	; () banked
 12194  003AFC  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12195  003AFE  0E00               	movlw	0
 12196  003B00  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12197  003B02                     l1211:
 12198  003B02  A281               	btfss	3969,1,c	;volatile
 12199  003B04  D7FE               	goto	l1211
 12200                           
 12201                           ;Test.c: 495: }
 12202                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 12203  003B06  3881               	swapf	3969,w,c	;volatile
 12204  003B08  0B0F               	andlw	15
 12205  003B0A  0A0F               	xorlw	15
 12206  003B0C  B4D8               	btfsc	status,2,c
 12207  003B0E  0012               	return	
 12208                           
 12209                           ;Test.c: 499: else{
 12210                           ;Test.c: 500: if(on == 0){
 12211                           
 12212                           ;Test.c: 498: }
 12213                           
 12214                           ;Test.c: 497: break;
 12215  003B10  0100               	movlb	0	; () banked
 12216  003B12  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 12217  003B14  0100               	movlb	0	; () banked
 12218  003B16  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 12219  003B18  A4D8               	btfss	status,2,c
 12220  003B1A  D007               	goto	l7138
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;Test.c: 501: on = 1;
 12224  003B1C  0E00               	movlw	0
 12225  003B1E  0100               	movlb	0	; () banked
 12226  003B20  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12227  003B22  0E01               	movlw	1
 12228  003B24  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;Test.c: 502: LATAbits.LATA5 = 1;
 12232  003B26  8A89               	bsf	3977,5,c	;volatile
 12233                           
 12234                           ;Test.c: 503: }
 12235  003B28  D006               	goto	l1219
 12236  003B2A                     l7138:
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;Test.c: 504: else{
 12240                           ;Test.c: 505: on = 0;
 12241  003B2A  0E00               	movlw	0
 12242  003B2C  0100               	movlb	0	; () banked
 12243  003B2E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12244  003B30  0E00               	movlw	0
 12245  003B32  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;Test.c: 506: LATAbits.LATA5 = 0;
 12249  003B34  9A89               	bcf	3977,5,c	;volatile
 12250  003B36                     l1219:
 12251  003B36  A281               	btfss	3969,1,c	;volatile
 12252  003B38  D7E4               	goto	l1211
 12253  003B3A  D7FD               	goto	l1219
 12254  003B3C                     __end_of_ToggleTestA5:
 12255                           	opt stack 0
 12256                           tblptru	equ	0xFF8
 12257                           tblptrh	equ	0xFF7
 12258                           tblptrl	equ	0xFF6
 12259                           tablat	equ	0xFF5
 12260                           prodh	equ	0xFF4
 12261                           prodl	equ	0xFF3
 12262                           intcon	equ	0xFF2
 12263                           intcon2	equ	0xFF1
 12264                           intcon3	equ	0xFF0
 12265                           postinc0	equ	0xFEE
 12266                           wreg	equ	0xFE8
 12267                           postdec1	equ	0xFE5
 12268                           fsr1l	equ	0xFE1
 12269                           indf2	equ	0xFDF
 12270                           postinc2	equ	0xFDE
 12271                           postdec2	equ	0xFDD
 12272                           fsr2h	equ	0xFDA
 12273                           fsr2l	equ	0xFD9
 12274                           status	equ	0xFD8
 12275                           
 12276 ;; *************** function _SolenoidTestA5 *****************
 12277 ;; Defined at:
 12278 ;;		line 461 in file "Test.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;		None
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  i               1   47[BANK0 ] unsigned char 
 12283 ;;  i               1   48[BANK0 ] unsigned char 
 12284 ;;  i               2   45[BANK0 ] int 
 12285 ;; Return value:  Size  Location     Type
 12286 ;;                  1    wreg      void 
 12287 ;; Registers used:
 12288 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;Total ram usage:        6 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; Hardware stack levels required when called:   10
 12301 ;; This function calls:
 12302 ;;		_lcdInst
 12303 ;;		_printf
 12304 ;; This function is called by:
 12305 ;;		_Test
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309                           	psect	text42
 12310  003354                     __ptext42:
 12311                           	opt stack 0
 12312  003354                     _SolenoidTestA5:
 12313                           	opt stack 19
 12314  003354                     
 12315                           ;Test.c: 463: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12316  003354  0E01               	movlw	1
 12317  003356  ECDC  F023         	call	_lcdInst
 12318  00335A  0E68               	movlw	104
 12319  00335C  0100               	movlb	0	; () banked
 12320  00335E  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12321  003360  0EE4               	movlw	228
 12322  003362                     u8047:
 12323  003362  2EE8               	decfsz	wreg,f,c
 12324  003364  D7FE               	bra	u8047
 12325  003366  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12326  003368  D7FC               	bra	u8047
 12327  00336A  F000               	nop	
 12328  00336C  0E80               	movlw	128
 12329  00336E  ECDC  F023         	call	_lcdInst
 12330                           
 12331                           ;Test.c: 464: printf("SOLENOID TST");
 12332  003372  0E36               	movlw	low STR_113
 12333  003374  0100               	movlb	0	; () banked
 12334  003376  6F8E               	movwf	printf@f& (0+255),b
 12335  003378  0EFF               	movlw	high STR_113
 12336  00337A  0100               	movlb	0	; () banked
 12337  00337C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12338  00337E  ECB8  F008         	call	_printf	;wreg free
 12339                           
 12340                           ;Test.c: 465: lcdInst(0b11000000);;
 12341  003382  0EC0               	movlw	192
 12342  003384  ECDC  F023         	call	_lcdInst
 12343  003388                     l1196:
 12344  003388  A281               	btfss	3969,1,c	;volatile
 12345  00338A  D7FE               	goto	l1196
 12346                           
 12347                           ;Test.c: 470: }
 12348                           ;Test.c: 472: for(int i = 0; i < 3; i++){
 12349  00338C  0E00               	movlw	0
 12350  00338E  0100               	movlb	0	; () banked
 12351  003390  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12352  003392  0E00               	movlw	0
 12353  003394  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12354  003396                     l7154:
 12355                           
 12356                           ; BSR set to: 0
 12357  003396  0100               	movlb	0	; () banked
 12358  003398  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12359  00339A  D008               	goto	l7158
 12360  00339C  0100               	movlb	0	; () banked
 12361  00339E  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12362  0033A0  E12D               	bnz	l7174
 12363  0033A2  0E03               	movlw	3
 12364  0033A4  0100               	movlb	0	; () banked
 12365  0033A6  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12366  0033A8  B0D8               	btfsc	status,0,c
 12367  0033AA  D028               	goto	l7174
 12368  0033AC                     l7158:
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;Test.c: 473: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12372  0033AC  0E00               	movlw	0
 12373  0033AE  0100               	movlb	0	; () banked
 12374  0033B0  6FAF               	movwf	SolenoidTestA5@i_1685& (0+255),b
 12375  0033B2                     l7160:
 12376                           
 12377                           ; BSR set to: 0
 12378  0033B2  0E63               	movlw	99
 12379  0033B4  0100               	movlb	0	; () banked
 12380  0033B6  65AF               	cpfsgt	SolenoidTestA5@i_1685& (0+255),b
 12381  0033B8  D001               	goto	l7164
 12382  0033BA  D00C               	goto	l1202
 12383  0033BC                     l7164:
 12384                           
 12385                           ; BSR set to: 0
 12386  0033BC  0E68               	movlw	104
 12387  0033BE  0100               	movlb	0	; () banked
 12388  0033C0  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12389  0033C2  0EE4               	movlw	228
 12390  0033C4                     u8057:
 12391  0033C4  2EE8               	decfsz	wreg,f,c
 12392  0033C6  D7FE               	bra	u8057
 12393  0033C8  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12394  0033CA  D7FC               	bra	u8057
 12395  0033CC  F000               	nop	
 12396  0033CE  0100               	movlb	0	; () banked
 12397  0033D0  2BAF               	incf	SolenoidTestA5@i_1685& (0+255),f,b
 12398  0033D2  D7EF               	goto	l7160
 12399  0033D4                     l1202:
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;Test.c: 474: LATAbits.LATA5 = 1;
 12403  0033D4  8A89               	bsf	3977,5,c	;volatile
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;Test.c: 475: _delay((unsigned long)((150)*(32000000/4000.0)));
 12407  0033D6  0E07               	movlw	7
 12408  0033D8  0100               	movlb	0	; () banked
 12409  0033DA  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12410  0033DC  0E17               	movlw	23
 12411  0033DE  0100               	movlb	0	; () banked
 12412  0033E0  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12413  0033E2  0E6A               	movlw	106
 12414  0033E4                     u8067:
 12415  0033E4  2EE8               	decfsz	wreg,f,c
 12416  0033E6  D7FE               	bra	u8067
 12417  0033E8  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12418  0033EA  D7FC               	bra	u8067
 12419  0033EC  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12420  0033EE  D7FA               	bra	u8067
 12421  0033F0  F000               	nop	
 12422                           
 12423                           ;Test.c: 476: LATAbits.LATA5 = 0;
 12424  0033F2  9A89               	bcf	3977,5,c	;volatile
 12425  0033F4  0100               	movlb	0	; () banked
 12426  0033F6  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12427  0033F8  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12428  0033FA  D7CD               	goto	l7154
 12429  0033FC                     l7174:
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;Test.c: 477: }
 12433                           ;Test.c: 479: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12434  0033FC  0E01               	movlw	1
 12435  0033FE  ECDC  F023         	call	_lcdInst
 12436  003402  0E68               	movlw	104
 12437  003404  0100               	movlb	0	; () banked
 12438  003406  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12439  003408  0EE4               	movlw	228
 12440  00340A                     u8077:
 12441  00340A  2EE8               	decfsz	wreg,f,c
 12442  00340C  D7FE               	bra	u8077
 12443  00340E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12444  003410  D7FC               	bra	u8077
 12445  003412  F000               	nop	
 12446  003414  0E80               	movlw	128
 12447  003416  ECDC  F023         	call	_lcdInst
 12448                           
 12449                           ;Test.c: 480: printf("PUSH DONE");
 12450  00341A  0E87               	movlw	low STR_114
 12451  00341C  0100               	movlb	0	; () banked
 12452  00341E  6F8E               	movwf	printf@f& (0+255),b
 12453  003420  0EFF               	movlw	high STR_114
 12454  003422  0100               	movlb	0	; () banked
 12455  003424  6F8F               	movwf	(printf@f+1)& (0+255),b
 12456  003426  ECB8  F008         	call	_printf	;wreg free
 12457                           
 12458                           ;Test.c: 481: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12459  00342A  0E00               	movlw	0
 12460  00342C  0100               	movlb	0	; () banked
 12461  00342E  6FB0               	movwf	SolenoidTestA5@i_1687& (0+255),b
 12462  003430                     l7184:
 12463                           
 12464                           ; BSR set to: 0
 12465  003430  0E63               	movlw	99
 12466  003432  0100               	movlb	0	; () banked
 12467  003434  65B0               	cpfsgt	SolenoidTestA5@i_1687& (0+255),b
 12468  003436  D001               	goto	l7188
 12469  003438  D78D               	goto	l7142
 12470  00343A                     l7188:
 12471                           
 12472                           ; BSR set to: 0
 12473  00343A  0E68               	movlw	104
 12474  00343C  0100               	movlb	0	; () banked
 12475  00343E  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12476  003440  0EE4               	movlw	228
 12477  003442                     u8087:
 12478  003442  2EE8               	decfsz	wreg,f,c
 12479  003444  D7FE               	bra	u8087
 12480  003446  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12481  003448  D7FC               	bra	u8087
 12482  00344A  F000               	nop	
 12483  00344C  0100               	movlb	0	; () banked
 12484  00344E  2BB0               	incf	SolenoidTestA5@i_1687& (0+255),f,b
 12485  003450  D7EF               	goto	l7184
 12486  003452                     __end_of_SolenoidTestA5:
 12487                           	opt stack 0
 12488                           tblptru	equ	0xFF8
 12489                           tblptrh	equ	0xFF7
 12490                           tblptrl	equ	0xFF6
 12491                           tablat	equ	0xFF5
 12492                           prodh	equ	0xFF4
 12493                           prodl	equ	0xFF3
 12494                           intcon	equ	0xFF2
 12495                           intcon2	equ	0xFF1
 12496                           intcon3	equ	0xFF0
 12497                           postinc0	equ	0xFEE
 12498                           wreg	equ	0xFE8
 12499                           postdec1	equ	0xFE5
 12500                           fsr1l	equ	0xFE1
 12501                           indf2	equ	0xFDF
 12502                           postinc2	equ	0xFDE
 12503                           postdec2	equ	0xFDD
 12504                           fsr2h	equ	0xFDA
 12505                           fsr2l	equ	0xFD9
 12506                           status	equ	0xFD8
 12507                           
 12508 ;; *************** function _PortTests *****************
 12509 ;; Defined at:
 12510 ;;		line 393 in file "Test.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;		None
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;		None
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  1    wreg      void 
 12517 ;; Registers used:
 12518 ;;		wreg, status,2, status,0
 12519 ;; Tracked objects:
 12520 ;;		On entry : 0/0
 12521 ;;		On exit  : 0/0
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12527 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;Total ram usage:        2 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:    7
 12531 ;; This function calls:
 12532 ;;		Nothing
 12533 ;; This function is called by:
 12534 ;;		_Test
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text43
 12539  003BC2                     __ptext43:
 12540                           	opt stack 0
 12541  003BC2                     _PortTests:
 12542                           	opt stack 22
 12543  003BC2                     l1159:
 12544  003BC2  A281               	btfss	3969,1,c	;volatile
 12545  003BC4  D7FE               	goto	l1159
 12546                           
 12547                           ;Test.c: 397: var = PORTB >> 4;
 12548  003BC6  CF81 F080          	movff	3969,??_PortTests	;volatile
 12549  003BCA  0100               	movlb	0	; () banked
 12550  003BCC  3B80               	swapf	??_PortTests& (0+255),f,b
 12551  003BCE  0E0F               	movlw	15
 12552  003BD0  1780               	andwf	??_PortTests& (0+255),f,b
 12553  003BD2  0100               	movlb	0	; () banked
 12554  003BD4  5180               	movf	??_PortTests& (0+255),w,b
 12555  003BD6  0100               	movlb	0	; () banked
 12556  003BD8  6FFA               	movwf	_var& (0+255),b
 12557  003BDA  6BFB               	clrf	(_var+1)& (0+255),b
 12558                           
 12559                           ;Test.c: 398: switch(var){
 12560  003BDC  D00C               	goto	l7196
 12561  003BDE                     l1163:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;Test.c: 400: LATEbits.LATE0 = 1;
 12565  003BDE  808D               	bsf	3981,0,c	;volatile
 12566                           
 12567                           ;Test.c: 401: break;
 12568  003BE0  D027               	goto	l1171
 12569  003BE2                     l1165:
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;Test.c: 403: LATEbits.LATE1 = 1;
 12573  003BE2  828D               	bsf	3981,1,c	;volatile
 12574                           
 12575                           ;Test.c: 404: break;
 12576  003BE4  D025               	goto	l1171
 12577  003BE6                     l1166:
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;Test.c: 406: LATDbits.LATD0 = 1;
 12581  003BE6  808C               	bsf	3980,0,c	;volatile
 12582                           
 12583                           ;Test.c: 407: break;
 12584  003BE8  D023               	goto	l1171
 12585  003BEA                     l1167:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;Test.c: 409: LATAbits.LATA3 = 1;
 12589  003BEA  8689               	bsf	3977,3,c	;volatile
 12590                           
 12591                           ;Test.c: 410: break;
 12592  003BEC  D021               	goto	l1171
 12593  003BEE                     l1168:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;Test.c: 412: LATAbits.LATA4 = 1;
 12597  003BEE  8889               	bsf	3977,4,c	;volatile
 12598                           
 12599                           ;Test.c: 413: break;
 12600  003BF0  D01F               	goto	l1171
 12601  003BF2                     l1169:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;Test.c: 415: LATAbits.LATA5 = 1;
 12605  003BF2  8A89               	bsf	3977,5,c	;volatile
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;Test.c: 419: }
 12609                           
 12610                           ; BSR set to: 0
 12611                           ;Test.c: 418: break;
 12612                           
 12613                           ;Test.c: 417: default:
 12614                           
 12615                           ;Test.c: 416: break;
 12616  003BF4  D01D               	goto	l1171
 12617  003BF6                     l7196:
 12618                           
 12619                           ; BSR set to: 0
 12620  003BF6  C0FA  F080         	movff	_var,??_PortTests
 12621  003BFA  C0FB  F081         	movff	_var+1,??_PortTests+1
 12622                           
 12623                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12624                           ; Switch size 1, requested type "space"
 12625                           ; Number of cases is 1, Range of values is 0 to 0
 12626                           ; switch strategies available:
 12627                           ; Name         Instructions Cycles
 12628                           ; simple_byte            4     3 (average)
 12629                           ;	Chosen strategy is simple_byte
 12630  003BFE  0100               	movlb	0	; () banked
 12631  003C00  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12632  003C02  0A00               	xorlw	0	; case 0
 12633  003C04  A4D8               	btfss	status,2,c
 12634  003C06  D014               	goto	l1171
 12635                           
 12636                           ; BSR set to: 0
 12637                           ; Switch size 1, requested type "space"
 12638                           ; Number of cases is 6, Range of values is 0 to 5
 12639                           ; switch strategies available:
 12640                           ; Name         Instructions Cycles
 12641                           ; simple_byte           19    10 (average)
 12642                           ;	Chosen strategy is simple_byte
 12643  003C08  0100               	movlb	0	; () banked
 12644  003C0A  5180               	movf	??_PortTests& (0+255),w,b
 12645  003C0C  0A00               	xorlw	0	; case 0
 12646  003C0E  B4D8               	btfsc	status,2,c
 12647  003C10  D7E6               	goto	l1163
 12648  003C12  0A01               	xorlw	1	; case 1
 12649  003C14  B4D8               	btfsc	status,2,c
 12650  003C16  D7E5               	goto	l1165
 12651  003C18  0A03               	xorlw	3	; case 2
 12652  003C1A  B4D8               	btfsc	status,2,c
 12653  003C1C  D7E4               	goto	l1166
 12654  003C1E  0A01               	xorlw	1	; case 3
 12655  003C20  B4D8               	btfsc	status,2,c
 12656  003C22  D7E3               	goto	l1167
 12657  003C24  0A07               	xorlw	7	; case 4
 12658  003C26  B4D8               	btfsc	status,2,c
 12659  003C28  D7E2               	goto	l1168
 12660  003C2A  0A01               	xorlw	1	; case 5
 12661  003C2C  B4D8               	btfsc	status,2,c
 12662  003C2E  D7E1               	goto	l1169
 12663  003C30                     l1171:
 12664  003C30  B281               	btfsc	3969,1,c	;volatile
 12665  003C32  D7FE               	goto	l1171
 12666                           
 12667                           ;Test.c: 421: __nop();
 12668  003C34  F000               	nop	
 12669                           
 12670                           ;Test.c: 422: __nop();
 12671  003C36  F000               	nop	
 12672                           
 12673                           ;Test.c: 423: LATA = 0x00;
 12674  003C38  0E00               	movlw	0
 12675  003C3A  6E89               	movwf	3977,c	;volatile
 12676                           
 12677                           ;Test.c: 424: LATE = 0x00;
 12678  003C3C  0E00               	movlw	0
 12679  003C3E  6E8D               	movwf	3981,c	;volatile
 12680                           
 12681                           ;Test.c: 425: LATD = 0x00; }
 12682  003C40  0E00               	movlw	0
 12683  003C42  6E8C               	movwf	3980,c	;volatile
 12684  003C44  D7BE               	goto	l1159
 12685  003C46                     __end_of_PortTests:
 12686                           	opt stack 0
 12687                           tblptru	equ	0xFF8
 12688                           tblptrh	equ	0xFF7
 12689                           tblptrl	equ	0xFF6
 12690                           tablat	equ	0xFF5
 12691                           prodh	equ	0xFF4
 12692                           prodl	equ	0xFF3
 12693                           intcon	equ	0xFF2
 12694                           intcon2	equ	0xFF1
 12695                           intcon3	equ	0xFF0
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postdec1	equ	0xFE5
 12699                           fsr1l	equ	0xFE1
 12700                           indf2	equ	0xFDF
 12701                           postinc2	equ	0xFDE
 12702                           postdec2	equ	0xFDD
 12703                           fsr2h	equ	0xFDA
 12704                           fsr2l	equ	0xFD9
 12705                           status	equ	0xFD8
 12706                           
 12707 ;; *************** function _PortTestA5 *****************
 12708 ;; Defined at:
 12709 ;;		line 428 in file "Test.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;		None
 12712 ;; Auto vars:     Size  Location     Type
 12713 ;;		None
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  1    wreg      void 
 12716 ;; Registers used:
 12717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12727 ;;Total ram usage:        1 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:   10
 12730 ;; This function calls:
 12731 ;;		_lcdInst
 12732 ;;		_printf
 12733 ;; This function is called by:
 12734 ;;		_Test
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           	psect	text44
 12739  003992                     __ptext44:
 12740                           	opt stack 0
 12741  003992                     _PortTestA5:
 12742                           	opt stack 19
 12743                           
 12744                           ;Test.c: 429: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12745                           
 12746                           ;incstack = 0
 12747  003992  0E01               	movlw	1
 12748  003994  ECDC  F023         	call	_lcdInst
 12749  003998  0E68               	movlw	104
 12750  00399A  0100               	movlb	0	; () banked
 12751  00399C  6FAB               	movwf	??_PortTestA5& (0+255),b
 12752  00399E  0EE4               	movlw	228
 12753  0039A0                     u8097:
 12754  0039A0  2EE8               	decfsz	wreg,f,c
 12755  0039A2  D7FE               	bra	u8097
 12756  0039A4  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12757  0039A6  D7FC               	bra	u8097
 12758  0039A8  F000               	nop	
 12759  0039AA  0E80               	movlw	128
 12760  0039AC  ECDC  F023         	call	_lcdInst
 12761                           
 12762                           ;Test.c: 430: printf("D WILL RETURN    ");
 12763  0039B0  0E83               	movlw	low STR_111
 12764  0039B2  0100               	movlb	0	; () banked
 12765  0039B4  6F8E               	movwf	printf@f& (0+255),b
 12766  0039B6  0EFB               	movlw	high STR_111
 12767  0039B8  0100               	movlb	0	; () banked
 12768  0039BA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12769  0039BC  ECB8  F008         	call	_printf	;wreg free
 12770                           
 12771                           ;Test.c: 431: lcdInst(0b11000000);;
 12772  0039C0  0EC0               	movlw	192
 12773  0039C2  ECDC  F023         	call	_lcdInst
 12774                           
 12775                           ;Test.c: 432: printf("OTHER SETS RA5   ");
 12776  0039C6  0E95               	movlw	low STR_112
 12777  0039C8  0100               	movlb	0	; () banked
 12778  0039CA  6F8E               	movwf	printf@f& (0+255),b
 12779  0039CC  0EFB               	movlw	high STR_112
 12780  0039CE  0100               	movlb	0	; () banked
 12781  0039D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12782  0039D2  ECB8  F008         	call	_printf	;wreg free
 12783  0039D6                     l1180:
 12784  0039D6  A281               	btfss	3969,1,c	;volatile
 12785  0039D8  D7FE               	goto	l1180
 12786                           
 12787                           ;Test.c: 437: }
 12788                           ;Test.c: 438: if(PORTB >> 4 == 0b1111){
 12789  0039DA  3881               	swapf	3969,w,c	;volatile
 12790  0039DC  0B0F               	andlw	15
 12791  0039DE  0A0F               	xorlw	15
 12792  0039E0  B4D8               	btfsc	status,2,c
 12793  0039E2  0012               	return	
 12794                           
 12795                           ;Test.c: 441: else{
 12796                           ;Test.c: 442: LATAbits.LATA5 = 1;
 12797                           
 12798                           ;Test.c: 440: }
 12799                           
 12800                           ;Test.c: 439: break;
 12801  0039E4  8A89               	bsf	3977,5,c	;volatile
 12802  0039E6                     l1186:
 12803  0039E6  B281               	btfsc	3969,1,c	;volatile
 12804  0039E8  D7FE               	goto	l1186
 12805                           
 12806                           ;Test.c: 445: }
 12807                           ;Test.c: 448: for(i=0;i<10000;i++)
 12808  0039EA  0E00               	movlw	0
 12809  0039EC  0100               	movlb	0	; () banked
 12810  0039EE  6FE5               	movwf	(_i+1)& (0+255),b
 12811  0039F0  0E00               	movlw	0
 12812  0039F2  6FE4               	movwf	_i& (0+255),b
 12813  0039F4                     l7102:
 12814                           
 12815                           ; BSR set to: 0
 12816  0039F4  0100               	movlb	0	; () banked
 12817  0039F6  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12818  0039F8  D008               	goto	l1189
 12819  0039FA  0E10               	movlw	16
 12820  0039FC  0100               	movlb	0	; () banked
 12821  0039FE  5DE4               	subwf	_i& (0+255),w,b
 12822  003A00  0E27               	movlw	39
 12823  003A02  0100               	movlb	0	; () banked
 12824  003A04  59E5               	subwfb	(_i+1)& (0+255),w,b
 12825  003A06  B0D8               	btfsc	status,0,c
 12826  003A08  D00D               	goto	l1190
 12827  003A0A                     l1189:
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;Test.c: 449: {
 12831                           ;Test.c: 450: LATAbits.LATA5 = 1;
 12832  003A0A  8A89               	bsf	3977,5,c	;volatile
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;Test.c: 451: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12836  003A0C  0E1A               	movlw	26
 12837  003A0E                     u8107:
 12838  003A0E  2EE8               	decfsz	wreg,f,c
 12839  003A10  D7FE               	bra	u8107
 12840  003A12  D000               	nop2	
 12841                           
 12842                           ;Test.c: 452: LATAbits.LATA5 = 0;
 12843  003A14  9A89               	bcf	3977,5,c	;volatile
 12844                           
 12845                           ;Test.c: 453: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12846  003A16  0EF0               	movlw	240
 12847  003A18                     u8117:
 12848  003A18  2EE8               	decfsz	wreg,f,c
 12849  003A1A  D7FE               	bra	u8117
 12850  003A1C  0100               	movlb	0	; () banked
 12851  003A1E  4BE4               	infsnz	_i& (0+255),f,b
 12852  003A20  2BE5               	incf	(_i+1)& (0+255),f,b
 12853  003A22  D7E8               	goto	l7102
 12854  003A24                     l1190:
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;Test.c: 454: }
 12858                           ;Test.c: 456: LATAbits.LATA5 = 0;
 12859  003A24  9A89               	bcf	3977,5,c	;volatile
 12860                           
 12861                           ; BSR set to: 0
 12862                           
 12863                           ; BSR set to: 0
 12864  003A26  D7D7               	goto	l1180
 12865  003A28                     __end_of_PortTestA5:
 12866                           	opt stack 0
 12867                           tblptru	equ	0xFF8
 12868                           tblptrh	equ	0xFF7
 12869                           tblptrl	equ	0xFF6
 12870                           tablat	equ	0xFF5
 12871                           prodh	equ	0xFF4
 12872                           prodl	equ	0xFF3
 12873                           intcon	equ	0xFF2
 12874                           intcon2	equ	0xFF1
 12875                           intcon3	equ	0xFF0
 12876                           postinc0	equ	0xFEE
 12877                           wreg	equ	0xFE8
 12878                           postdec1	equ	0xFE5
 12879                           fsr1l	equ	0xFE1
 12880                           indf2	equ	0xFDF
 12881                           postinc2	equ	0xFDE
 12882                           postdec2	equ	0xFDD
 12883                           fsr2h	equ	0xFDA
 12884                           fsr2l	equ	0xFD9
 12885                           status	equ	0xFD8
 12886                           
 12887 ;; *************** function _EEPROMTest *****************
 12888 ;; Defined at:
 12889 ;;		line 513 in file "Test.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;		None
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;		None
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  1    wreg      void 
 12896 ;; Registers used:
 12897 ;;		None
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12907 ;;Total ram usage:        0 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    7
 12910 ;; This function calls:
 12911 ;;		Nothing
 12912 ;; This function is called by:
 12913 ;;		_Test
 12914 ;; This function uses a non-reentrant model
 12915 ;;
 12916                           
 12917                           	psect	text45
 12918  00481C                     __ptext45:
 12919                           	opt stack 0
 12920  00481C                     _EEPROMTest:
 12921                           	opt stack 22
 12922                           
 12923                           ;incstack = 0
 12924  00481C  0012               	return		;funcret
 12925  00481E                     __end_of_EEPROMTest:
 12926                           	opt stack 0
 12927                           tblptru	equ	0xFF8
 12928                           tblptrh	equ	0xFF7
 12929                           tblptrl	equ	0xFF6
 12930                           tablat	equ	0xFF5
 12931                           prodh	equ	0xFF4
 12932                           prodl	equ	0xFF3
 12933                           intcon	equ	0xFF2
 12934                           intcon2	equ	0xFF1
 12935                           intcon3	equ	0xFF0
 12936                           postinc0	equ	0xFEE
 12937                           wreg	equ	0xFE8
 12938                           postdec1	equ	0xFE5
 12939                           fsr1l	equ	0xFE1
 12940                           indf2	equ	0xFDF
 12941                           postinc2	equ	0xFDE
 12942                           postdec2	equ	0xFDD
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function _BothServos *****************
 12948 ;; Defined at:
 12949 ;;		line 344 in file "Test.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;		None
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      void 
 12956 ;; Registers used:
 12957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;Total ram usage:        2 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:   10
 12970 ;; This function calls:
 12971 ;;		_initServos
 12972 ;;		_lcdInst
 12973 ;;		_printf
 12974 ;;		_updateServoPosition
 12975 ;; This function is called by:
 12976 ;;		_Test
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           	psect	text46
 12981  001C14                     __ptext46:
 12982                           	opt stack 0
 12983  001C14                     _BothServos:
 12984                           	opt stack 19
 12985                           
 12986                           ;Test.c: 345: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12987                           
 12988                           ;incstack = 0
 12989  001C14  0E01               	movlw	1
 12990  001C16  ECDC  F023         	call	_lcdInst
 12991  001C1A  0E68               	movlw	104
 12992  001C1C  0100               	movlb	0	; () banked
 12993  001C1E  6FAB               	movwf	??_BothServos& (0+255),b
 12994  001C20  0EE4               	movlw	228
 12995  001C22                     u8127:
 12996  001C22  2EE8               	decfsz	wreg,f,c
 12997  001C24  D7FE               	bra	u8127
 12998  001C26  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12999  001C28  D7FC               	bra	u8127
 13000  001C2A  F000               	nop	
 13001  001C2C  0E80               	movlw	128
 13002  001C2E  ECDC  F023         	call	_lcdInst
 13003                           
 13004                           ;Test.c: 346: printf("TST: BOTH SERVOS");
 13005  001C32  0ECA               	movlw	low STR_110
 13006  001C34  0100               	movlb	0	; () banked
 13007  001C36  6F8E               	movwf	printf@f& (0+255),b
 13008  001C38  0EFC               	movlw	high STR_110
 13009  001C3A  0100               	movlb	0	; () banked
 13010  001C3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13011  001C3E  ECB8  F008         	call	_printf	;wreg free
 13012                           
 13013                           ;Test.c: 347: TMR1ON = 1;
 13014  001C42  80CD               	bsf	4045,0,c	;volatile
 13015                           
 13016                           ;Test.c: 348: TMR3ON = 1;
 13017  001C44  80B1               	bsf	4017,0,c	;volatile
 13018                           
 13019                           ;Test.c: 349: machine_state = Sorting_state;
 13020  001C46  0E01               	movlw	1
 13021  001C48  0100               	movlb	0	; () banked
 13022  001C4A  6FFC               	movwf	_machine_state& (0+255),b
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;Test.c: 350: was_low_1 = 0;
 13026  001C4C  0E00               	movlw	0
 13027  001C4E  6E7A               	movwf	_was_low_1+1,c	;volatile
 13028  001C50  0E00               	movlw	0
 13029  001C52  6E79               	movwf	_was_low_1,c	;volatile
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;Test.c: 351: was_low_1 = 0;
 13033  001C54  0E00               	movlw	0
 13034  001C56  6E7A               	movwf	_was_low_1+1,c	;volatile
 13035  001C58  0E00               	movlw	0
 13036  001C5A  6E79               	movwf	_was_low_1,c	;volatile
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;Test.c: 357: initServos();
 13040  001C5C  ECCA  F01F         	call	_initServos	;wreg free
 13041                           
 13042                           ;Test.c: 358: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13043  001C60  0E3D               	movlw	61
 13044  001C62  0100               	movlb	0	; () banked
 13045  001C64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13046  001C66  0EE1               	movlw	225
 13047  001C68  0100               	movlb	0	; () banked
 13048  001C6A  6FAB               	movwf	??_BothServos& (0+255),b
 13049  001C6C  0E3F               	movlw	63
 13050  001C6E                     u8137:
 13051  001C6E  2EE8               	decfsz	wreg,f,c
 13052  001C70  D7FE               	bra	u8137
 13053  001C72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13054  001C74  D7FC               	bra	u8137
 13055  001C76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13056  001C78  D7FA               	bra	u8137
 13057  001C7A  D000               	nop2	
 13058                           
 13059                           ;Test.c: 359: updateServoPosition(500, 1);
 13060  001C7C  0E01               	movlw	1
 13061  001C7E  0100               	movlb	0	; () banked
 13062  001C80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13063  001C82  0EF4               	movlw	244
 13064  001C84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13065  001C86  0E00               	movlw	0
 13066  001C88  0100               	movlb	0	; () banked
 13067  001C8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13068  001C8C  0E01               	movlw	1
 13069  001C8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13070  001C90  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13071                           
 13072                           ;Test.c: 360: updateServoPosition(1350, 3);
 13073  001C94  0E05               	movlw	5
 13074  001C96  0100               	movlb	0	; () banked
 13075  001C98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13076  001C9A  0E46               	movlw	70
 13077  001C9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13078  001C9E  0E00               	movlw	0
 13079  001CA0  0100               	movlb	0	; () banked
 13080  001CA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13081  001CA4  0E03               	movlw	3
 13082  001CA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13083  001CA8  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13084                           
 13085                           ;Test.c: 361: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13086  001CAC  0E3D               	movlw	61
 13087  001CAE  0100               	movlb	0	; () banked
 13088  001CB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13089  001CB2  0EE1               	movlw	225
 13090  001CB4  0100               	movlb	0	; () banked
 13091  001CB6  6FAB               	movwf	??_BothServos& (0+255),b
 13092  001CB8  0E3F               	movlw	63
 13093  001CBA                     u8147:
 13094  001CBA  2EE8               	decfsz	wreg,f,c
 13095  001CBC  D7FE               	bra	u8147
 13096  001CBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13097  001CC0  D7FC               	bra	u8147
 13098  001CC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13099  001CC4  D7FA               	bra	u8147
 13100  001CC6  D000               	nop2	
 13101                           
 13102                           ;Test.c: 362: updateServoPosition(1190, 3);
 13103  001CC8  0E04               	movlw	4
 13104  001CCA  0100               	movlb	0	; () banked
 13105  001CCC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13106  001CCE  0EA6               	movlw	166
 13107  001CD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13108  001CD2  0E00               	movlw	0
 13109  001CD4  0100               	movlb	0	; () banked
 13110  001CD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13111  001CD8  0E03               	movlw	3
 13112  001CDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13113  001CDC  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13114                           
 13115                           ;Test.c: 363: _delay((unsigned long)((750)*(32000000/4000.0)));
 13116  001CE0  0E1F               	movlw	31
 13117  001CE2  0100               	movlb	0	; () banked
 13118  001CE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13119  001CE6  0E71               	movlw	113
 13120  001CE8  0100               	movlb	0	; () banked
 13121  001CEA  6FAB               	movwf	??_BothServos& (0+255),b
 13122  001CEC  0E1E               	movlw	30
 13123  001CEE                     u8157:
 13124  001CEE  2EE8               	decfsz	wreg,f,c
 13125  001CF0  D7FE               	bra	u8157
 13126  001CF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13127  001CF4  D7FC               	bra	u8157
 13128  001CF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13129  001CF8  D7FA               	bra	u8157
 13130  001CFA  F000               	nop	
 13131                           
 13132                           ;Test.c: 365: updateServoPosition(750, 1);
 13133  001CFC  0E02               	movlw	2
 13134  001CFE  0100               	movlb	0	; () banked
 13135  001D00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13136  001D02  0EEE               	movlw	238
 13137  001D04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13138  001D06  0E00               	movlw	0
 13139  001D08  0100               	movlb	0	; () banked
 13140  001D0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13141  001D0C  0E01               	movlw	1
 13142  001D0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13143  001D10  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13144                           
 13145                           ;Test.c: 366: updateServoPosition(1350, 3);
 13146  001D14  0E05               	movlw	5
 13147  001D16  0100               	movlb	0	; () banked
 13148  001D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13149  001D1A  0E46               	movlw	70
 13150  001D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13151  001D1E  0E00               	movlw	0
 13152  001D20  0100               	movlb	0	; () banked
 13153  001D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13154  001D24  0E03               	movlw	3
 13155  001D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13156  001D28  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13157                           
 13158                           ;Test.c: 367: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13159  001D2C  0E3D               	movlw	61
 13160  001D2E  0100               	movlb	0	; () banked
 13161  001D30  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13162  001D32  0EE1               	movlw	225
 13163  001D34  0100               	movlb	0	; () banked
 13164  001D36  6FAB               	movwf	??_BothServos& (0+255),b
 13165  001D38  0E3F               	movlw	63
 13166  001D3A                     u8167:
 13167  001D3A  2EE8               	decfsz	wreg,f,c
 13168  001D3C  D7FE               	bra	u8167
 13169  001D3E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13170  001D40  D7FC               	bra	u8167
 13171  001D42  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13172  001D44  D7FA               	bra	u8167
 13173  001D46  D000               	nop2	
 13174                           
 13175                           ;Test.c: 368: updateServoPosition(1190, 3);
 13176  001D48  0E04               	movlw	4
 13177  001D4A  0100               	movlb	0	; () banked
 13178  001D4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13179  001D4E  0EA6               	movlw	166
 13180  001D50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13181  001D52  0E00               	movlw	0
 13182  001D54  0100               	movlb	0	; () banked
 13183  001D56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13184  001D58  0E03               	movlw	3
 13185  001D5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13186  001D5C  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13187                           
 13188                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 13189  001D60  0E1F               	movlw	31
 13190  001D62  0100               	movlb	0	; () banked
 13191  001D64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13192  001D66  0E71               	movlw	113
 13193  001D68  0100               	movlb	0	; () banked
 13194  001D6A  6FAB               	movwf	??_BothServos& (0+255),b
 13195  001D6C  0E1E               	movlw	30
 13196  001D6E                     u8177:
 13197  001D6E  2EE8               	decfsz	wreg,f,c
 13198  001D70  D7FE               	bra	u8177
 13199  001D72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13200  001D74  D7FC               	bra	u8177
 13201  001D76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13202  001D78  D7FA               	bra	u8177
 13203  001D7A  F000               	nop	
 13204                           
 13205                           ;Test.c: 371: updateServoPosition(1200, 1);
 13206  001D7C  0E04               	movlw	4
 13207  001D7E  0100               	movlb	0	; () banked
 13208  001D80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13209  001D82  0EB0               	movlw	176
 13210  001D84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13211  001D86  0E00               	movlw	0
 13212  001D88  0100               	movlb	0	; () banked
 13213  001D8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13214  001D8C  0E01               	movlw	1
 13215  001D8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13216  001D90  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13217                           
 13218                           ;Test.c: 372: updateServoPosition(1350, 3);
 13219  001D94  0E05               	movlw	5
 13220  001D96  0100               	movlb	0	; () banked
 13221  001D98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13222  001D9A  0E46               	movlw	70
 13223  001D9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13224  001D9E  0E00               	movlw	0
 13225  001DA0  0100               	movlb	0	; () banked
 13226  001DA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13227  001DA4  0E03               	movlw	3
 13228  001DA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13229  001DA8  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13230                           
 13231                           ;Test.c: 373: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13232  001DAC  0E3D               	movlw	61
 13233  001DAE  0100               	movlb	0	; () banked
 13234  001DB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13235  001DB2  0EE1               	movlw	225
 13236  001DB4  0100               	movlb	0	; () banked
 13237  001DB6  6FAB               	movwf	??_BothServos& (0+255),b
 13238  001DB8  0E3F               	movlw	63
 13239  001DBA                     u8187:
 13240  001DBA  2EE8               	decfsz	wreg,f,c
 13241  001DBC  D7FE               	bra	u8187
 13242  001DBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13243  001DC0  D7FC               	bra	u8187
 13244  001DC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13245  001DC4  D7FA               	bra	u8187
 13246  001DC6  D000               	nop2	
 13247                           
 13248                           ;Test.c: 374: updateServoPosition(1190, 3);
 13249  001DC8  0E04               	movlw	4
 13250  001DCA  0100               	movlb	0	; () banked
 13251  001DCC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13252  001DCE  0EA6               	movlw	166
 13253  001DD0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13254  001DD2  0E00               	movlw	0
 13255  001DD4  0100               	movlb	0	; () banked
 13256  001DD6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13257  001DD8  0E03               	movlw	3
 13258  001DDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13259  001DDC  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13260                           
 13261                           ;Test.c: 375: _delay((unsigned long)((750)*(32000000/4000.0)));
 13262  001DE0  0E1F               	movlw	31
 13263  001DE2  0100               	movlb	0	; () banked
 13264  001DE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13265  001DE6  0E71               	movlw	113
 13266  001DE8  0100               	movlb	0	; () banked
 13267  001DEA  6FAB               	movwf	??_BothServos& (0+255),b
 13268  001DEC  0E1E               	movlw	30
 13269  001DEE                     u8197:
 13270  001DEE  2EE8               	decfsz	wreg,f,c
 13271  001DF0  D7FE               	bra	u8197
 13272  001DF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13273  001DF4  D7FC               	bra	u8197
 13274  001DF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13275  001DF8  D7FA               	bra	u8197
 13276  001DFA  F000               	nop	
 13277                           
 13278                           ;Test.c: 377: updateServoPosition(1700, 1);
 13279  001DFC  0E06               	movlw	6
 13280  001DFE  0100               	movlb	0	; () banked
 13281  001E00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13282  001E02  0EA4               	movlw	164
 13283  001E04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13284  001E06  0E00               	movlw	0
 13285  001E08  0100               	movlb	0	; () banked
 13286  001E0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13287  001E0C  0E01               	movlw	1
 13288  001E0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13289  001E10  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13290                           
 13291                           ;Test.c: 378: updateServoPosition(1350, 3);
 13292  001E14  0E05               	movlw	5
 13293  001E16  0100               	movlb	0	; () banked
 13294  001E18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13295  001E1A  0E46               	movlw	70
 13296  001E1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13297  001E1E  0E00               	movlw	0
 13298  001E20  0100               	movlb	0	; () banked
 13299  001E22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13300  001E24  0E03               	movlw	3
 13301  001E26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13302  001E28  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13303                           
 13304                           ;Test.c: 379: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13305  001E2C  0E3D               	movlw	61
 13306  001E2E  0100               	movlb	0	; () banked
 13307  001E30  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13308  001E32  0EE1               	movlw	225
 13309  001E34  0100               	movlb	0	; () banked
 13310  001E36  6FAB               	movwf	??_BothServos& (0+255),b
 13311  001E38  0E3F               	movlw	63
 13312  001E3A                     u8207:
 13313  001E3A  2EE8               	decfsz	wreg,f,c
 13314  001E3C  D7FE               	bra	u8207
 13315  001E3E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13316  001E40  D7FC               	bra	u8207
 13317  001E42  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13318  001E44  D7FA               	bra	u8207
 13319  001E46  D000               	nop2	
 13320                           
 13321                           ;Test.c: 380: updateServoPosition(1190, 3);
 13322  001E48  0E04               	movlw	4
 13323  001E4A  0100               	movlb	0	; () banked
 13324  001E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13325  001E4E  0EA6               	movlw	166
 13326  001E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13327  001E52  0E00               	movlw	0
 13328  001E54  0100               	movlb	0	; () banked
 13329  001E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13330  001E58  0E03               	movlw	3
 13331  001E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13332  001E5C  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13333                           
 13334                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 13335  001E60  0E1F               	movlw	31
 13336  001E62  0100               	movlb	0	; () banked
 13337  001E64  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13338  001E66  0E71               	movlw	113
 13339  001E68  0100               	movlb	0	; () banked
 13340  001E6A  6FAB               	movwf	??_BothServos& (0+255),b
 13341  001E6C  0E1E               	movlw	30
 13342  001E6E                     u8217:
 13343  001E6E  2EE8               	decfsz	wreg,f,c
 13344  001E70  D7FE               	bra	u8217
 13345  001E72  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13346  001E74  D7FC               	bra	u8217
 13347  001E76  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13348  001E78  D7FA               	bra	u8217
 13349  001E7A  F000               	nop	
 13350                           
 13351                           ;Test.c: 383: updateServoPosition(2000, 1);
 13352  001E7C  0E07               	movlw	7
 13353  001E7E  0100               	movlb	0	; () banked
 13354  001E80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13355  001E82  0ED0               	movlw	208
 13356  001E84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13357  001E86  0E00               	movlw	0
 13358  001E88  0100               	movlb	0	; () banked
 13359  001E8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13360  001E8C  0E01               	movlw	1
 13361  001E8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13362  001E90  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13363                           
 13364                           ;Test.c: 384: updateServoPosition(1350, 3);
 13365  001E94  0E05               	movlw	5
 13366  001E96  0100               	movlb	0	; () banked
 13367  001E98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13368  001E9A  0E46               	movlw	70
 13369  001E9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13370  001E9E  0E00               	movlw	0
 13371  001EA0  0100               	movlb	0	; () banked
 13372  001EA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13373  001EA4  0E03               	movlw	3
 13374  001EA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13375  001EA8  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13376                           
 13377                           ;Test.c: 385: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13378  001EAC  0E3D               	movlw	61
 13379  001EAE  0100               	movlb	0	; () banked
 13380  001EB0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13381  001EB2  0EE1               	movlw	225
 13382  001EB4  0100               	movlb	0	; () banked
 13383  001EB6  6FAB               	movwf	??_BothServos& (0+255),b
 13384  001EB8  0E3F               	movlw	63
 13385  001EBA                     u8227:
 13386  001EBA  2EE8               	decfsz	wreg,f,c
 13387  001EBC  D7FE               	bra	u8227
 13388  001EBE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13389  001EC0  D7FC               	bra	u8227
 13390  001EC2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13391  001EC4  D7FA               	bra	u8227
 13392  001EC6  D000               	nop2	
 13393                           
 13394                           ;Test.c: 386: updateServoPosition(1190, 3);
 13395  001EC8  0E04               	movlw	4
 13396  001ECA  0100               	movlb	0	; () banked
 13397  001ECC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13398  001ECE  0EA6               	movlw	166
 13399  001ED0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13400  001ED2  0E00               	movlw	0
 13401  001ED4  0100               	movlb	0	; () banked
 13402  001ED6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13403  001ED8  0E03               	movlw	3
 13404  001EDA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13405  001EDC  EC5F  F01E         	call	_updateServoPosition	;wreg free
 13406                           
 13407                           ;Test.c: 387: _delay((unsigned long)((750)*(32000000/4000.0)));
 13408  001EE0  0E1F               	movlw	31
 13409  001EE2  0100               	movlb	0	; () banked
 13410  001EE4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13411  001EE6  0E71               	movlw	113
 13412  001EE8  0100               	movlb	0	; () banked
 13413  001EEA  6FAB               	movwf	??_BothServos& (0+255),b
 13414  001EEC  0E1E               	movlw	30
 13415  001EEE                     u8237:
 13416  001EEE  2EE8               	decfsz	wreg,f,c
 13417  001EF0  D7FE               	bra	u8237
 13418  001EF2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13419  001EF4  D7FC               	bra	u8237
 13420  001EF6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13421  001EF8  D7FA               	bra	u8237
 13422  001EFA  F000               	nop	
 13423                           
 13424                           ;Test.c: 389: TMR1ON = 0;
 13425  001EFC  90CD               	bcf	4045,0,c	;volatile
 13426                           
 13427                           ;Test.c: 390: TMR3ON = 0;
 13428  001EFE  90B1               	bcf	4017,0,c	;volatile
 13429                           
 13430                           ;Test.c: 391: (INTCONbits.GIE = 0);
 13431  001F00  9EF2               	bcf	intcon,7,c	;volatile
 13432  001F02  0012               	return		;funcret
 13433  001F04                     __end_of_BothServos:
 13434                           	opt stack 0
 13435                           tblptru	equ	0xFF8
 13436                           tblptrh	equ	0xFF7
 13437                           tblptrl	equ	0xFF6
 13438                           tablat	equ	0xFF5
 13439                           prodh	equ	0xFF4
 13440                           prodl	equ	0xFF3
 13441                           intcon	equ	0xFF2
 13442                           intcon2	equ	0xFF1
 13443                           intcon3	equ	0xFF0
 13444                           postinc0	equ	0xFEE
 13445                           wreg	equ	0xFE8
 13446                           postdec1	equ	0xFE5
 13447                           fsr1l	equ	0xFE1
 13448                           indf2	equ	0xFDF
 13449                           postinc2	equ	0xFDE
 13450                           postdec2	equ	0xFDD
 13451                           fsr2h	equ	0xFDA
 13452                           fsr2l	equ	0xFD9
 13453                           status	equ	0xFD8
 13454                           
 13455 ;; *************** function _printf *****************
 13456 ;; Defined at:
 13457 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13458 ;; Parameters:    Size  Location     Type
 13459 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13460 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 13461 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 13462 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 13463 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 13464 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 13465 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 13466 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 13467 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 13468 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13469 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13470 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13471 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13472 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13473 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13474 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13475 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13476 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13477 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13478 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13479 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13480 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13481 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13482 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13483 ;; Auto vars:     Size  Location     Type
 13484 ;;  tmpval          4    0        struct .
 13485 ;;  width           2   41[BANK0 ] int 
 13486 ;;  val             2   37[BANK0 ] unsigned int 
 13487 ;;  len             2   35[BANK0 ] unsigned int 
 13488 ;;  ap              2   33[BANK0 ] PTR void [1]
 13489 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13490 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13491 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 13492 ;;  c               1   40[BANK0 ] char 
 13493 ;;  flag            1   39[BANK0 ] unsigned char 
 13494 ;;  prec            1   30[BANK0 ] char 
 13495 ;; Return value:  Size  Location     Type
 13496 ;;                  2   14[BANK0 ] int 
 13497 ;; Registers used:
 13498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13499 ;; Tracked objects:
 13500 ;;		On entry : 0/0
 13501 ;;		On exit  : 0/0
 13502 ;;		Unchanged: 0/0
 13503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13504 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13505 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13506 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;Total ram usage:       29 bytes
 13509 ;; Hardware stack levels used:    1
 13510 ;; Hardware stack levels required when called:    9
 13511 ;; This function calls:
 13512 ;;		___lwdiv
 13513 ;;		___lwmod
 13514 ;;		___wmul
 13515 ;;		_isdigit
 13516 ;;		_putch
 13517 ;; This function is called by:
 13518 ;;		_UI
 13519 ;;		_change_state_to_menu_start
 13520 ;;		_change_state_to_menu_12
 13521 ;;		_change_state_to_menu_22
 13522 ;;		_printRTC
 13523 ;;		_EEPROM_write
 13524 ;;		_Test
 13525 ;;		_algorithmTest
 13526 ;;		_sensorTest
 13527 ;;		_actuatorTest
 13528 ;;		_BothServos
 13529 ;;		_PortTestA5
 13530 ;;		_SolenoidTestA5
 13531 ;;		_ToggleTestA5
 13532 ;; This function uses a non-reentrant model
 13533 ;;
 13534                           
 13535                           	psect	text47
 13536  001170                     __ptext47:
 13537                           	opt stack 0
 13538  001170                     _printf:
 13539                           	opt stack 18
 13540                           
 13541                           ;doprnt.c: 466: va_list ap;
 13542                           ;doprnt.c: 499: signed char c;
 13543                           ;doprnt.c: 501: int width;
 13544                           ;doprnt.c: 506: signed char prec;
 13545                           ;doprnt.c: 508: unsigned char flag;
 13546                           ;doprnt.c: 523: union {
 13547                           ;doprnt.c: 524: unsigned long vd;
 13548                           ;doprnt.c: 525: double integ;
 13549                           ;doprnt.c: 526: } tmpval;
 13550                           ;doprnt.c: 528: unsigned int val;
 13551                           ;doprnt.c: 529: unsigned len;
 13552                           ;doprnt.c: 530: const char * cp;
 13553                           ;doprnt.c: 533: *ap = __va_start();
 13554                           
 13555                           ;incstack = 0
 13556  001170  0E90               	movlw	low (?_printf+2)
 13557  001172  0100               	movlb	0	; () banked
 13558  001174  6FA1               	movwf	printf@ap& (0+255),b
 13559  001176  0E00               	movlw	high (?_printf+2)
 13560  001178  0100               	movlb	0	; () banked
 13561  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13562                           
 13563                           ;doprnt.c: 536: while(c = *f++) {
 13564  00117C  D205               	goto	l5562
 13565  00117E                     l5432:
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;doprnt.c: 538: if(c != '%')
 13569  00117E  0E25               	movlw	37
 13570  001180  0100               	movlb	0	; () banked
 13571  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13572  001184  B4D8               	btfsc	status,2,c
 13573  001186  D005               	goto	l5436
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;doprnt.c: 540: {
 13577                           ;doprnt.c: 541: (putch(c) );
 13578  001188  0100               	movlb	0	; () banked
 13579  00118A  51A8               	movf	printf@c& (0+255),w,b
 13580  00118C  ECD4  F023         	call	_putch
 13581                           
 13582                           ;doprnt.c: 542: continue;
 13583  001190  D1FB               	goto	l5562
 13584  001192                     l5436:
 13585                           
 13586                           ;doprnt.c: 543: }
 13587                           ;doprnt.c: 546: width = 0;
 13588  001192  0E00               	movlw	0
 13589  001194  0100               	movlb	0	; () banked
 13590  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13591  001198  0E00               	movlw	0
 13592  00119A  6FA9               	movwf	printf@width& (0+255),b
 13593                           
 13594                           ;doprnt.c: 548: flag = 0;
 13595  00119C  0E00               	movlw	0
 13596  00119E  0100               	movlb	0	; () banked
 13597  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;doprnt.c: 551: switch(*f) {
 13601                           
 13602                           ;doprnt.c: 550: for(;;) {
 13603  0011A2  D005               	goto	l5442
 13604  0011A4                     l5438:
 13605                           
 13606                           ;doprnt.c: 580: flag |= 0x04;
 13607  0011A4  0100               	movlb	0	; () banked
 13608  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13609                           
 13610                           ;doprnt.c: 581: f++;
 13611  0011A8  0100               	movlb	0	; () banked
 13612  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13613  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13614  0011AE                     l5442:
 13615  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13616  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13617  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13618  0011B6  6AF8               	clrf	tblptru,c
 13619  0011B8                     	endif
 13620  0011B8                     	if	0	;tblptru may be non-zero
 13621  0011B8                     	endif
 13622  0011B8  0008               	tblrd		*
 13623  0011BA  50F5               	movf	tablat,w,c
 13624                           
 13625                           ; Switch size 1, requested type "space"
 13626                           ; Number of cases is 1, Range of values is 48 to 48
 13627                           ; switch strategies available:
 13628                           ; Name         Instructions Cycles
 13629                           ; simple_byte            4     3 (average)
 13630                           ;	Chosen strategy is simple_byte
 13631  0011BC  0A30               	xorlw	48	; case 48
 13632  0011BE  B4D8               	btfsc	status,2,c
 13633  0011C0  D7F1               	goto	l5438
 13634                           
 13635                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13636                           
 13637                           ;doprnt.c: 586: }
 13638                           
 13639                           ;doprnt.c: 585: break;
 13640  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13641  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13642  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13643  0011CA  6AF8               	clrf	tblptru,c
 13644  0011CC                     	endif
 13645  0011CC                     	if	0	;tblptru may be non-zero
 13646  0011CC                     	endif
 13647  0011CC  0008               	tblrd		*
 13648  0011CE  50F5               	movf	tablat,w,c
 13649  0011D0  ECF9  F022         	call	_isdigit
 13650  0011D4  A0D8               	btfss	status,0,c
 13651  0011D6  D0D2               	goto	l5490
 13652                           
 13653                           ;doprnt.c: 598: width = 0;
 13654  0011D8  0E00               	movlw	0
 13655  0011DA  0100               	movlb	0	; () banked
 13656  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13657  0011DE  0E00               	movlw	0
 13658  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13659  0011E2                     l5448:
 13660                           
 13661                           ;doprnt.c: 600: width *= 10;
 13662  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13663  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13664  0011EA  0E00               	movlw	0
 13665  0011EC  0100               	movlb	0	; () banked
 13666  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13667  0011F0  0E0A               	movlw	10
 13668  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13669  0011F4  EC7C  F021         	call	___wmul	;wreg free
 13670  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13671  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13672                           
 13673                           ;doprnt.c: 601: width += *f++ - '0';
 13674  001200  0ED0               	movlw	208
 13675  001202  0100               	movlb	0	; () banked
 13676  001204  6F9A               	movwf	??_printf& (0+255),b
 13677  001206  0EFF               	movlw	255
 13678  001208  0100               	movlb	0	; () banked
 13679  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13680  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13681  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13682  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13683  001214  6AF8               	clrf	tblptru,c
 13684  001216                     	endif
 13685  001216                     	if	0	;tblptru may be non-zero
 13686  001216                     	endif
 13687  001216  0008               	tblrd		*
 13688  001218  50F5               	movf	tablat,w,c
 13689  00121A  0100               	movlb	0	; () banked
 13690  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13691  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13692  001220  0100               	movlb	0	; () banked
 13693  001222  519A               	movf	??_printf& (0+255),w,b
 13694  001224  0100               	movlb	0	; () banked
 13695  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13696  001228  0100               	movlb	0	; () banked
 13697  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13698  00122C  0100               	movlb	0	; () banked
 13699  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13700  001230  0100               	movlb	0	; () banked
 13701  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13702  001234  0100               	movlb	0	; () banked
 13703  001236  27A9               	addwf	printf@width& (0+255),f,b
 13704  001238  0100               	movlb	0	; () banked
 13705  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13706  00123C  0100               	movlb	0	; () banked
 13707  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13708                           
 13709                           ; BSR set to: 0
 13710  001240  0100               	movlb	0	; () banked
 13711  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13712  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13716  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13717  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13718  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13719  00124E  6AF8               	clrf	tblptru,c
 13720  001250                     	endif
 13721  001250                     	if	0	;tblptru may be non-zero
 13722  001250                     	endif
 13723  001250  0008               	tblrd		*
 13724  001252  50F5               	movf	tablat,w,c
 13725  001254  ECF9  F022         	call	_isdigit
 13726  001258  A0D8               	btfss	status,0,c
 13727  00125A  D090               	goto	l5490
 13728  00125C  D7C2               	goto	l5448
 13729  00125E                     l5456:
 13730                           
 13731                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13732  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13733  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13734  001266  CFDE F09F          	movff	postinc2,printf@cp
 13735  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13736  00126E  0E02               	movlw	2
 13737  001270  0100               	movlb	0	; () banked
 13738  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13739  001274  0E00               	movlw	0
 13740  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;doprnt.c: 740: if(!cp)
 13744  001278  0100               	movlb	0	; () banked
 13745  00127A  519F               	movf	printf@cp& (0+255),w,b
 13746  00127C  0100               	movlb	0	; () banked
 13747  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13748  001280  A4D8               	btfss	status,2,c
 13749  001282  D006               	goto	l5464
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;doprnt.c: 741: cp = "(null)";
 13753  001284  0EB6               	movlw	low STR_117
 13754  001286  0100               	movlb	0	; () banked
 13755  001288  6F9F               	movwf	printf@cp& (0+255),b
 13756  00128A  0EFF               	movlw	high STR_117
 13757  00128C  0100               	movlb	0	; () banked
 13758  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13759  001290                     l5464:
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;doprnt.c: 745: len = 0;
 13763  001290  0E00               	movlw	0
 13764  001292  0100               	movlb	0	; () banked
 13765  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13766  001296  0E00               	movlw	0
 13767  001298  6FA3               	movwf	printf@len& (0+255),b
 13768                           
 13769                           ;doprnt.c: 746: while(cp[len])
 13770  00129A  D003               	goto	l5468
 13771  00129C                     l5466:
 13772                           
 13773                           ;doprnt.c: 747: len++;
 13774  00129C  0100               	movlb	0	; () banked
 13775  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13776  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13777  0012A2                     l5468:
 13778                           
 13779                           ; BSR set to: 0
 13780  0012A2  0100               	movlb	0	; () banked
 13781  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13782  0012A6  0100               	movlb	0	; () banked
 13783  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13784  0012AA  0100               	movlb	0	; () banked
 13785  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13786  0012AE  0100               	movlb	0	; () banked
 13787  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13788  0012B2  0100               	movlb	0	; () banked
 13789  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13790  0012B6  0100               	movlb	0	; () banked
 13791  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13792  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13793  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13794  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13795  0012C4  6EF8               	movwf	tblptru,c
 13796  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13797  0012C8  64F7               	cpfsgt	tblptrh,c
 13798  0012CA  D003               	bra	u3877
 13799  0012CC  0008               	tblrd		*
 13800  0012CE  50F5               	movf	tablat,w,c
 13801  0012D0  D005               	bra	u3870
 13802  0012D2                     u3877:
 13803  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13804  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13805  0012DA  50EF               	movf	indf0,w,c
 13806  0012DC                     u3870:
 13807  0012DC  0900               	iorlw	0
 13808  0012DE  A4D8               	btfss	status,2,c
 13809  0012E0  D7DD               	goto	l5466
 13810                           
 13811                           ;doprnt.c: 757: if(width > len)
 13812  0012E2  0100               	movlb	0	; () banked
 13813  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13814  0012E6  0100               	movlb	0	; () banked
 13815  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13816  0012EA  0100               	movlb	0	; () banked
 13817  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13818  0012EE  0100               	movlb	0	; () banked
 13819  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13820  0012F2  B0D8               	btfsc	status,0,c
 13821  0012F4  D009               	goto	l5474
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;doprnt.c: 758: width -= len;
 13825  0012F6  0100               	movlb	0	; () banked
 13826  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13827  0012FA  0100               	movlb	0	; () banked
 13828  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13829  0012FE  0100               	movlb	0	; () banked
 13830  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13831  001302  0100               	movlb	0	; () banked
 13832  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13833  001306  D009               	goto	l5478
 13834  001308                     l5474:
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;doprnt.c: 759: else
 13838                           ;doprnt.c: 760: width = 0;
 13839  001308  0E00               	movlw	0
 13840  00130A  0100               	movlb	0	; () banked
 13841  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13842  00130E  0E00               	movlw	0
 13843  001310  6FA9               	movwf	printf@width& (0+255),b
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;doprnt.c: 764: while(width--)
 13847  001312  D003               	goto	l5478
 13848  001314                     l5476:
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;doprnt.c: 765: (putch(' ') );
 13852  001314  0E20               	movlw	32
 13853  001316  ECD4  F023         	call	_putch
 13854  00131A                     l5478:
 13855  00131A  0100               	movlb	0	; () banked
 13856  00131C  07A9               	decf	printf@width& (0+255),f,b
 13857  00131E  A0D8               	btfss	status,0,c
 13858  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13859  001322  0100               	movlb	0	; () banked
 13860  001324  29A9               	incf	printf@width& (0+255),w,b
 13861  001326  E1F6               	bnz	l5476
 13862  001328  0100               	movlb	0	; () banked
 13863  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13864  00132C  B4D8               	btfsc	status,2,c
 13865  00132E  D017               	goto	l5484
 13866  001330  D7F1               	goto	l5476
 13867  001332                     l5480:
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;doprnt.c: 768: (putch(*cp++) );
 13871  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13872  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13873  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13874  00133C  6EF8               	movwf	tblptru,c
 13875  00133E  0E0F               	movlw	(high __ramtop+-1)
 13876  001340  64F7               	cpfsgt	tblptrh,c
 13877  001342  D003               	bra	u3917
 13878  001344  0008               	tblrd		*
 13879  001346  50F5               	movf	tablat,w,c
 13880  001348  D005               	bra	u3910
 13881  00134A                     u3917:
 13882  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13883  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13884  001352  50EF               	movf	indf0,w,c
 13885  001354                     u3910:
 13886  001354  ECD4  F023         	call	_putch
 13887  001358  0100               	movlb	0	; () banked
 13888  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13889  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13890  00135E                     l5484:
 13891                           
 13892                           ; BSR set to: 0
 13893  00135E  0100               	movlb	0	; () banked
 13894  001360  07A3               	decf	printf@len& (0+255),f,b
 13895  001362  A0D8               	btfss	status,0,c
 13896  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13897  001366  0100               	movlb	0	; () banked
 13898  001368  29A3               	incf	printf@len& (0+255),w,b
 13899  00136A  E1E3               	bnz	l5480
 13900  00136C  0100               	movlb	0	; () banked
 13901  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13902  001370  B4D8               	btfsc	status,2,c
 13903  001372  D10A               	goto	l5562
 13904  001374  D7DE               	goto	l5480
 13905  001376                     l5486:
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;doprnt.c: 818: flag |= 0x40;
 13909  001376  0100               	movlb	0	; () banked
 13910  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;doprnt.c: 822: }
 13914                           
 13915                           ;doprnt.c: 819: break;
 13916  00137A  D01D               	goto	l1256
 13917  00137C                     l5490:
 13918  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13919  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13920  001384  0100               	movlb	0	; () banked
 13921  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13922  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13923  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13924  00138A  6AF8               	clrf	tblptru,c
 13925  00138C                     	endif
 13926  00138C                     	if	0	;tblptru may be non-zero
 13927  00138C                     	endif
 13928  00138C  0008               	tblrd		*
 13929  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13930  001392  0100               	movlb	0	; () banked
 13931  001394  51A8               	movf	printf@c& (0+255),w,b
 13932                           
 13933                           ; Switch size 1, requested type "space"
 13934                           ; Number of cases is 5, Range of values is 0 to 117
 13935                           ; switch strategies available:
 13936                           ; Name         Instructions Cycles
 13937                           ; simple_byte           16     9 (average)
 13938                           ;	Chosen strategy is simple_byte
 13939  001396  0A00               	xorlw	0	; case 0
 13940  001398  B4D8               	btfsc	status,2,c
 13941  00139A  0012               	return	
 13942  00139C  0A64               	xorlw	100	; case 100
 13943  00139E  B4D8               	btfsc	status,2,c
 13944  0013A0  D00A               	goto	l1256
 13945  0013A2  0A0D               	xorlw	13	; case 105
 13946  0013A4  B4D8               	btfsc	status,2,c
 13947  0013A6  D007               	goto	l1256
 13948  0013A8  0A1A               	xorlw	26	; case 115
 13949  0013AA  B4D8               	btfsc	status,2,c
 13950  0013AC  D758               	goto	l5456
 13951  0013AE  0A06               	xorlw	6	; case 117
 13952  0013B0  B4D8               	btfsc	status,2,c
 13953  0013B2  D7E1               	goto	l5486
 13954  0013B4  D0E9               	goto	l5562
 13955  0013B6                     l1256:
 13956                           
 13957                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13958  0013B6  0100               	movlb	0	; () banked
 13959  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13960  0013BA  D019               	goto	l5502
 13961                           
 13962                           ; BSR set to: 0
 13963                           ;doprnt.c: 1253: {
 13964                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13965  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13966  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13967  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13968  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13969                           
 13970                           ; BSR set to: 0
 13971  0013CC  0E02               	movlw	2
 13972  0013CE  0100               	movlb	0	; () banked
 13973  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13974  0013D2  0E00               	movlw	0
 13975  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;doprnt.c: 1261: if((int)val < 0) {
 13979  0013D6  0100               	movlb	0	; () banked
 13980  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13981  0013DA  D016               	goto	l5506
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;doprnt.c: 1262: flag |= 0x03;
 13985  0013DC  0E03               	movlw	3
 13986  0013DE  0100               	movlb	0	; () banked
 13987  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;doprnt.c: 1263: val = -val;
 13991  0013E2  0100               	movlb	0	; () banked
 13992  0013E4  6DA5               	negf	printf@val& (0+255),b
 13993  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13994  0013E8  B0D8               	btfsc	status,0,c
 13995  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;doprnt.c: 1264: }
 13999                           ;doprnt.c: 1266: }
 14000  0013EC  D00D               	goto	l5506
 14001  0013EE                     l5502:
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;doprnt.c: 1268: else
 14005                           ;doprnt.c: 1273: {
 14006                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14007  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14008  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14009  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14010  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14011                           
 14012                           ; BSR set to: 0
 14013  0013FE  0E02               	movlw	2
 14014  001400  0100               	movlb	0	; () banked
 14015  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14016  001404  0E00               	movlw	0
 14017  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14018  001408                     l5506:
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;doprnt.c: 1287: }
 14022                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14023  001408  0E01               	movlw	1
 14024  00140A  0100               	movlb	0	; () banked
 14025  00140C  6FA8               	movwf	printf@c& (0+255),b
 14026  00140E                     l5508:
 14027                           
 14028                           ; BSR set to: 0
 14029  00140E  0E05               	movlw	5
 14030  001410  0100               	movlb	0	; () banked
 14031  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14032  001414  B4D8               	btfsc	status,2,c
 14033  001416  D019               	goto	l5520
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;doprnt.c: 1306: if(val < dpowers[c])
 14037                           
 14038                           ; BSR set to: 0
 14039                           
 14040                           ; BSR set to: 0
 14041  001418  0100               	movlb	0	; () banked
 14042  00141A  51A8               	movf	printf@c& (0+255),w,b
 14043  00141C  0D02               	mullw	2
 14044  00141E  0E26               	movlw	low _dpowers
 14045  001420  24F3               	addwf	prodl,w,c
 14046  001422  6EF6               	movwf	tblptrl,c
 14047  001424  0EFB               	movlw	high _dpowers
 14048  001426  20F4               	addwfc	prodh,w,c
 14049  001428  6EF7               	movwf	tblptrh,c
 14050  00142A                     	if	1	;There are 3 active tblptr bytes
 14051  00142A  6AF8               	clrf	tblptru,c
 14052  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14053  00142E  22F8               	addwfc	tblptru,f,c
 14054  001430                     	endif
 14055  001430  0009               	tblrd		*+
 14056  001432  50F5               	movf	tablat,w,c
 14057  001434  0100               	movlb	0	; () banked
 14058  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14059  001438  0009               	tblrd		*+
 14060  00143A  50F5               	movf	tablat,w,c
 14061  00143C  0100               	movlb	0	; () banked
 14062  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14063  001440  A0D8               	btfss	status,0,c
 14064  001442  D003               	goto	l5520
 14065                           
 14066                           ; BSR set to: 0
 14067                           
 14068                           ; BSR set to: 0
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;doprnt.c: 1307: break;
 14072  001444  0100               	movlb	0	; () banked
 14073  001446  2BA8               	incf	printf@c& (0+255),f,b
 14074  001448  D7E2               	goto	l5508
 14075  00144A                     l5520:
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14079  00144A  0100               	movlb	0	; () banked
 14080  00144C  51A9               	movf	printf@width& (0+255),w,b
 14081  00144E  0100               	movlb	0	; () banked
 14082  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14083  001452  B4D8               	btfsc	status,2,c
 14084  001454  D00B               	goto	l5526
 14085                           
 14086                           ; BSR set to: 0
 14087  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14088  00145A  0E03               	movlw	3
 14089  00145C  0100               	movlb	0	; () banked
 14090  00145E  179A               	andwf	??_printf& (0+255),f,b
 14091  001460  B4D8               	btfsc	status,2,c
 14092  001462  D004               	goto	l5526
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;doprnt.c: 1346: width--;
 14096  001464  0100               	movlb	0	; () banked
 14097  001466  07A9               	decf	printf@width& (0+255),f,b
 14098  001468  A0D8               	btfss	status,0,c
 14099  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14100  00146C                     l5526:
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;doprnt.c: 1381: if(width > c)
 14104  00146C  0E80               	movlw	128
 14105  00146E  0100               	movlb	0	; () banked
 14106  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14107  001472  0E7F               	movlw	127
 14108  001474  0100               	movlb	0	; () banked
 14109  001476  6F9A               	movwf	??_printf& (0+255),b
 14110  001478  0100               	movlb	0	; () banked
 14111  00147A  51A9               	movf	printf@width& (0+255),w,b
 14112  00147C  0100               	movlb	0	; () banked
 14113  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14114  001480  0100               	movlb	0	; () banked
 14115  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14116  001484  0A80               	xorlw	128
 14117  001486  0100               	movlb	0	; () banked
 14118  001488  599A               	subwfb	??_printf& (0+255),w,b
 14119  00148A  B0D8               	btfsc	status,0,c
 14120  00148C  D00B               	goto	l5530
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;doprnt.c: 1382: width -= c;
 14124  00148E  0100               	movlb	0	; () banked
 14125  001490  51A8               	movf	printf@c& (0+255),w,b
 14126  001492  0100               	movlb	0	; () banked
 14127  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14128  001496  0E00               	movlw	0
 14129  001498  0100               	movlb	0	; () banked
 14130  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14131  00149C  0EFF               	movlw	255
 14132  00149E  0100               	movlb	0	; () banked
 14133  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14134  0014A2  D005               	goto	l5532
 14135  0014A4                     l5530:
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;doprnt.c: 1383: else
 14139                           ;doprnt.c: 1384: width = 0;
 14140  0014A4  0E00               	movlw	0
 14141  0014A6  0100               	movlb	0	; () banked
 14142  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14143  0014AA  0E00               	movlw	0
 14144  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14145  0014AE                     l5532:
 14146                           
 14147                           ; BSR set to: 0
 14148                           ;doprnt.c: 1387: if(flag & 0x04) {
 14149  0014AE  0100               	movlb	0	; () banked
 14150  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14151  0014B2  D018               	goto	l5544
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;doprnt.c: 1392: if(flag & 0x03)
 14155  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14156  0014B8  0E03               	movlw	3
 14157  0014BA  0100               	movlb	0	; () banked
 14158  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14159  0014BE  B4D8               	btfsc	status,2,c
 14160  0014C0  D003               	goto	l5538
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;doprnt.c: 1393: (putch('-') );
 14164  0014C2  0E2D               	movlw	45
 14165  0014C4  ECD4  F023         	call	_putch
 14166  0014C8                     l5538:
 14167                           
 14168                           ;doprnt.c: 1415: if(width)
 14169  0014C8  0100               	movlb	0	; () banked
 14170  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14171  0014CC  0100               	movlb	0	; () banked
 14172  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14173  0014D0  B4D8               	btfsc	status,2,c
 14174  0014D2  D025               	goto	l5554
 14175                           
 14176                           ; BSR set to: 0
 14177                           ;doprnt.c: 1417: (putch('0') );
 14178                           
 14179                           ; BSR set to: 0
 14180                           
 14181                           ;doprnt.c: 1416: do
 14182  0014D4  0E30               	movlw	48
 14183  0014D6  ECD4  F023         	call	_putch
 14184                           
 14185                           ;doprnt.c: 1418: while(--width);
 14186  0014DA  0100               	movlb	0	; () banked
 14187  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14188  0014DE  A0D8               	btfss	status,0,c
 14189  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14190  0014E2  D7F2               	goto	l5538
 14191  0014E4                     l5544:
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;doprnt.c: 1422: {
 14195                           ;doprnt.c: 1424: if(width
 14196                           ;doprnt.c: 1428: )
 14197  0014E4  0100               	movlb	0	; () banked
 14198  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14199  0014E8  0100               	movlb	0	; () banked
 14200  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14201  0014EC  B4D8               	btfsc	status,2,c
 14202  0014EE  D00D               	goto	l5550
 14203  0014F0                     l5546:
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;doprnt.c: 1430: (putch(' ') );
 14207  0014F0  0E20               	movlw	32
 14208  0014F2  ECD4  F023         	call	_putch
 14209                           
 14210                           ;doprnt.c: 1431: while(--width);
 14211  0014F6  0100               	movlb	0	; () banked
 14212  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14213  0014FA  A0D8               	btfss	status,0,c
 14214  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14215  0014FE  0100               	movlb	0	; () banked
 14216  001500  51A9               	movf	printf@width& (0+255),w,b
 14217  001502  0100               	movlb	0	; () banked
 14218  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14219  001506  A4D8               	btfss	status,2,c
 14220  001508  D7F3               	goto	l5546
 14221  00150A                     l5550:
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;doprnt.c: 1438: if(flag & 0x03)
 14225  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14226  00150E  0E03               	movlw	3
 14227  001510  0100               	movlb	0	; () banked
 14228  001512  179A               	andwf	??_printf& (0+255),f,b
 14229  001514  B4D8               	btfsc	status,2,c
 14230  001516  D003               	goto	l5554
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;doprnt.c: 1439: (putch('-') );
 14234  001518  0E2D               	movlw	45
 14235  00151A  ECD4  F023         	call	_putch
 14236  00151E                     l5554:
 14237                           
 14238                           ;doprnt.c: 1469: }
 14239                           ;doprnt.c: 1472: prec = c;
 14240  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14241                           
 14242                           ;doprnt.c: 1474: while(prec--) {
 14243  001522  D02C               	goto	l5560
 14244  001524                     l5556:
 14245                           
 14246                           ;doprnt.c: 1478: {
 14247                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14248  001524  0100               	movlb	0	; () banked
 14249  001526  519E               	movf	printf@prec& (0+255),w,b
 14250  001528  0D02               	mullw	2
 14251  00152A  0E26               	movlw	low _dpowers
 14252  00152C  24F3               	addwf	prodl,w,c
 14253  00152E  6EF6               	movwf	tblptrl,c
 14254  001530  0EFB               	movlw	high _dpowers
 14255  001532  20F4               	addwfc	prodh,w,c
 14256  001534  6EF7               	movwf	tblptrh,c
 14257  001536                     	if	1	;There are 3 active tblptr bytes
 14258  001536  6AF8               	clrf	tblptru,c
 14259  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14260  00153A  22F8               	addwfc	tblptru,f,c
 14261  00153C                     	endif
 14262  00153C  0009               	tblrd		*+
 14263  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14264  001542  000A               	tblrd		*-
 14265  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14266  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14267  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14268  001550  EC23  F01E         	call	___lwdiv	;wreg free
 14269  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14270  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14271  00155C  0E00               	movlw	0
 14272  00155E  0100               	movlb	0	; () banked
 14273  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14274  001562  0E0A               	movlw	10
 14275  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14276  001566  EC3B  F01F         	call	___lwmod	;wreg free
 14277  00156A  0100               	movlb	0	; () banked
 14278  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14279  00156E  0F30               	addlw	48
 14280  001570  0100               	movlb	0	; () banked
 14281  001572  6FA8               	movwf	printf@c& (0+255),b
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;doprnt.c: 1523: }
 14285                           ;doprnt.c: 1524: (putch(c) );
 14286  001574  0100               	movlb	0	; () banked
 14287  001576  51A8               	movf	printf@c& (0+255),w,b
 14288  001578  ECD4  F023         	call	_putch
 14289  00157C                     l5560:
 14290  00157C  0100               	movlb	0	; () banked
 14291  00157E  079E               	decf	printf@prec& (0+255),f,b
 14292  001580  0100               	movlb	0	; () banked
 14293  001582  299E               	incf	printf@prec& (0+255),w,b
 14294  001584  A4D8               	btfss	status,2,c
 14295  001586  D7CE               	goto	l5556
 14296  001588                     l5562:
 14297  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14298  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14299  001590  0100               	movlb	0	; () banked
 14300  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14301  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14302  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14303  001596  6AF8               	clrf	tblptru,c
 14304  001598                     	endif
 14305  001598                     	if	0	;tblptru may be non-zero
 14306  001598                     	endif
 14307  001598  0008               	tblrd		*
 14308  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14309  00159E  0100               	movlb	0	; () banked
 14310  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14311  0015A2  B4D8               	btfsc	status,2,c
 14312  0015A4  0012               	return	
 14313  0015A6  D5EB               	goto	l5432
 14314  0015A8                     __end_of_printf:
 14315                           	opt stack 0
 14316                           tblptru	equ	0xFF8
 14317                           tblptrh	equ	0xFF7
 14318                           tblptrl	equ	0xFF6
 14319                           tablat	equ	0xFF5
 14320                           prodh	equ	0xFF4
 14321                           prodl	equ	0xFF3
 14322                           intcon	equ	0xFF2
 14323                           intcon2	equ	0xFF1
 14324                           intcon3	equ	0xFF0
 14325                           indf0	equ	0xFEF
 14326                           postinc0	equ	0xFEE
 14327                           fsr0h	equ	0xFEA
 14328                           fsr0l	equ	0xFE9
 14329                           wreg	equ	0xFE8
 14330                           postdec1	equ	0xFE5
 14331                           fsr1l	equ	0xFE1
 14332                           indf2	equ	0xFDF
 14333                           postinc2	equ	0xFDE
 14334                           postdec2	equ	0xFDD
 14335                           fsr2h	equ	0xFDA
 14336                           fsr2l	equ	0xFD9
 14337                           status	equ	0xFD8
 14338                           
 14339 ;; *************** function _putch *****************
 14340 ;; Defined at:
 14341 ;;		line 20 in file "lcd.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;  data            1    wreg     unsigned char 
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;  data            1    2[BANK0 ] unsigned char 
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      void 
 14348 ;; Registers used:
 14349 ;;		wreg, status,2, status,0, cstack
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;Total ram usage:        1 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    8
 14362 ;; This function calls:
 14363 ;;		_lcdNibble
 14364 ;; This function is called by:
 14365 ;;		_printf
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           	psect	text48
 14370  0047A8                     __ptext48:
 14371                           	opt stack 0
 14372  0047A8                     _putch:
 14373                           	opt stack 18
 14374                           
 14375                           ;incstack = 0
 14376                           ;putch@data stored from wreg
 14377  0047A8  0100               	movlb	0	; () banked
 14378  0047AA  6F82               	movwf	putch@data& (0+255),b
 14379                           
 14380                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14381  0047AC  848C               	bsf	3980,2,c	;volatile
 14382                           
 14383                           ;lcd.c: 22: lcdNibble(data);
 14384  0047AE  0100               	movlb	0	; () banked
 14385  0047B0  5182               	movf	putch@data& (0+255),w,b
 14386  0047B2  EC07  F01F         	call	_lcdNibble
 14387  0047B6  0012               	return		;funcret
 14388  0047B8                     __end_of_putch:
 14389                           	opt stack 0
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           intcon2	equ	0xFF1
 14398                           intcon3	equ	0xFF0
 14399                           indf0	equ	0xFEF
 14400                           postinc0	equ	0xFEE
 14401                           fsr0h	equ	0xFEA
 14402                           fsr0l	equ	0xFE9
 14403                           wreg	equ	0xFE8
 14404                           postdec1	equ	0xFE5
 14405                           fsr1l	equ	0xFE1
 14406                           indf2	equ	0xFDF
 14407                           postinc2	equ	0xFDE
 14408                           postdec2	equ	0xFDD
 14409                           fsr2h	equ	0xFDA
 14410                           fsr2l	equ	0xFD9
 14411                           status	equ	0xFD8
 14412                           
 14413 ;; *************** function _isdigit *****************
 14414 ;; Defined at:
 14415 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14416 ;; Parameters:    Size  Location     Type
 14417 ;;  c               1    wreg     unsigned char 
 14418 ;; Auto vars:     Size  Location     Type
 14419 ;;  c               1    2[BANK0 ] unsigned char 
 14420 ;; Return value:  Size  Location     Type
 14421 ;;		None               void
 14422 ;; Registers used:
 14423 ;;		wreg, status,2, status,0
 14424 ;; Tracked objects:
 14425 ;;		On entry : 0/0
 14426 ;;		On exit  : 0/0
 14427 ;;		Unchanged: 0/0
 14428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14433 ;;Total ram usage:        3 bytes
 14434 ;; Hardware stack levels used:    1
 14435 ;; Hardware stack levels required when called:    7
 14436 ;; This function calls:
 14437 ;;		Nothing
 14438 ;; This function is called by:
 14439 ;;		_printf
 14440 ;; This function uses a non-reentrant model
 14441 ;;
 14442                           
 14443                           	psect	text49
 14444  0045F2                     __ptext49:
 14445                           	opt stack 0
 14446  0045F2                     _isdigit:
 14447                           	opt stack 19
 14448                           
 14449                           ;incstack = 0
 14450                           ;isdigit@c stored from wreg
 14451  0045F2  0100               	movlb	0	; () banked
 14452  0045F4  6F82               	movwf	isdigit@c& (0+255),b
 14453  0045F6  0E00               	movlw	0
 14454  0045F8  0100               	movlb	0	; () banked
 14455  0045FA  6F81               	movwf	_isdigit$1941& (0+255),b
 14456                           
 14457                           ; BSR set to: 0
 14458  0045FC  0E3A               	movlw	58
 14459  0045FE  0100               	movlb	0	; () banked
 14460  004600  6182               	cpfslt	isdigit@c& (0+255),b
 14461  004602  D007               	goto	l5286
 14462                           
 14463                           ; BSR set to: 0
 14464  004604  0E2F               	movlw	47
 14465  004606  0100               	movlb	0	; () banked
 14466  004608  6582               	cpfsgt	isdigit@c& (0+255),b
 14467  00460A  D003               	goto	l5286
 14468                           
 14469                           ; BSR set to: 0
 14470  00460C  0E01               	movlw	1
 14471  00460E  0100               	movlb	0	; () banked
 14472  004610  6F81               	movwf	_isdigit$1941& (0+255),b
 14473  004612                     l5286:
 14474                           
 14475                           ; BSR set to: 0
 14476  004612  C081  F080         	movff	_isdigit$1941,??_isdigit
 14477  004616  0100               	movlb	0	; () banked
 14478  004618  3180               	rrcf	??_isdigit& (0+255),w,b
 14479  00461A  0012               	return	
 14480  00461C                     __end_of_isdigit:
 14481                           	opt stack 0
 14482                           tblptru	equ	0xFF8
 14483                           tblptrh	equ	0xFF7
 14484                           tblptrl	equ	0xFF6
 14485                           tablat	equ	0xFF5
 14486                           prodh	equ	0xFF4
 14487                           prodl	equ	0xFF3
 14488                           intcon	equ	0xFF2
 14489                           intcon2	equ	0xFF1
 14490                           intcon3	equ	0xFF0
 14491                           indf0	equ	0xFEF
 14492                           postinc0	equ	0xFEE
 14493                           fsr0h	equ	0xFEA
 14494                           fsr0l	equ	0xFE9
 14495                           wreg	equ	0xFE8
 14496                           postdec1	equ	0xFE5
 14497                           fsr1l	equ	0xFE1
 14498                           indf2	equ	0xFDF
 14499                           postinc2	equ	0xFDE
 14500                           postdec2	equ	0xFDD
 14501                           fsr2h	equ	0xFDA
 14502                           fsr2l	equ	0xFD9
 14503                           status	equ	0xFD8
 14504                           
 14505 ;; *************** function ___wmul *****************
 14506 ;; Defined at:
 14507 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14508 ;; Parameters:    Size  Location     Type
 14509 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14510 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14511 ;; Auto vars:     Size  Location     Type
 14512 ;;  product         2    4[BANK0 ] unsigned int 
 14513 ;; Return value:  Size  Location     Type
 14514 ;;                  2    0[BANK0 ] unsigned int 
 14515 ;; Registers used:
 14516 ;;		wreg, status,2, status,0, prodl, prodh
 14517 ;; Tracked objects:
 14518 ;;		On entry : 0/0
 14519 ;;		On exit  : 0/0
 14520 ;;		Unchanged: 0/0
 14521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14522 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14526 ;;Total ram usage:        6 bytes
 14527 ;; Hardware stack levels used:    1
 14528 ;; Hardware stack levels required when called:    7
 14529 ;; This function calls:
 14530 ;;		Nothing
 14531 ;; This function is called by:
 14532 ;;		_printf
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536                           	psect	text50
 14537  0042F8                     __ptext50:
 14538                           	opt stack 0
 14539  0042F8                     ___wmul:
 14540                           	opt stack 19
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;incstack = 0
 14544  0042F8  0100               	movlb	0	; () banked
 14545  0042FA  5180               	movf	___wmul@multiplier& (0+255),w,b
 14546  0042FC  0100               	movlb	0	; () banked
 14547  0042FE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14548  004300  CFF3 F084          	movff	prodl,___wmul@product
 14549  004304  CFF4 F085          	movff	prodh,___wmul@product+1
 14550  004308  0100               	movlb	0	; () banked
 14551  00430A  5180               	movf	___wmul@multiplier& (0+255),w,b
 14552  00430C  0100               	movlb	0	; () banked
 14553  00430E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14554  004310  50F3               	movf	prodl,w,c
 14555  004312  0100               	movlb	0	; () banked
 14556  004314  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14557  004316  0100               	movlb	0	; () banked
 14558  004318  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14559  00431A  0100               	movlb	0	; () banked
 14560  00431C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14561  00431E  50F3               	movf	prodl,w,c
 14562  004320  0100               	movlb	0	; () banked
 14563  004322  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14564                           
 14565                           ; BSR set to: 0
 14566  004324  C084  F080         	movff	___wmul@product,?___wmul
 14567  004328  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14568  00432C  0012               	return	
 14569  00432E                     __end_of___wmul:
 14570                           	opt stack 0
 14571                           tblptru	equ	0xFF8
 14572                           tblptrh	equ	0xFF7
 14573                           tblptrl	equ	0xFF6
 14574                           tablat	equ	0xFF5
 14575                           prodh	equ	0xFF4
 14576                           prodl	equ	0xFF3
 14577                           intcon	equ	0xFF2
 14578                           intcon2	equ	0xFF1
 14579                           intcon3	equ	0xFF0
 14580                           indf0	equ	0xFEF
 14581                           postinc0	equ	0xFEE
 14582                           fsr0h	equ	0xFEA
 14583                           fsr0l	equ	0xFE9
 14584                           wreg	equ	0xFE8
 14585                           postdec1	equ	0xFE5
 14586                           fsr1l	equ	0xFE1
 14587                           indf2	equ	0xFDF
 14588                           postinc2	equ	0xFDE
 14589                           postdec2	equ	0xFDD
 14590                           fsr2h	equ	0xFDA
 14591                           fsr2l	equ	0xFD9
 14592                           status	equ	0xFD8
 14593                           
 14594 ;; *************** function ___lwmod *****************
 14595 ;; Defined at:
 14596 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14597 ;; Parameters:    Size  Location     Type
 14598 ;;  dividend        2    7[BANK0 ] unsigned int 
 14599 ;;  divisor         2    9[BANK0 ] unsigned int 
 14600 ;; Auto vars:     Size  Location     Type
 14601 ;;  counter         1   11[BANK0 ] unsigned char 
 14602 ;; Return value:  Size  Location     Type
 14603 ;;                  2    7[BANK0 ] unsigned int 
 14604 ;; Registers used:
 14605 ;;		wreg, status,2, status,0
 14606 ;; Tracked objects:
 14607 ;;		On entry : 0/0
 14608 ;;		On exit  : 0/0
 14609 ;;		Unchanged: 0/0
 14610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14614 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14615 ;;Total ram usage:        5 bytes
 14616 ;; Hardware stack levels used:    1
 14617 ;; Hardware stack levels required when called:    7
 14618 ;; This function calls:
 14619 ;;		Nothing
 14620 ;; This function is called by:
 14621 ;;		_printf
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           	psect	text51
 14626  003E76                     __ptext51:
 14627                           	opt stack 0
 14628  003E76                     ___lwmod:
 14629                           	opt stack 19
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;incstack = 0
 14633  003E76  0100               	movlb	0	; () banked
 14634  003E78  5189               	movf	___lwmod@divisor& (0+255),w,b
 14635  003E7A  0100               	movlb	0	; () banked
 14636  003E7C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14637  003E7E  B4D8               	btfsc	status,2,c
 14638  003E80  D026               	goto	l1713
 14639                           
 14640                           ; BSR set to: 0
 14641  003E82  0E01               	movlw	1
 14642  003E84  0100               	movlb	0	; () banked
 14643  003E86  6F8B               	movwf	___lwmod@counter& (0+255),b
 14644  003E88  D006               	goto	l5324
 14645  003E8A                     l5322:
 14646                           
 14647                           ; BSR set to: 0
 14648  003E8A  0100               	movlb	0	; () banked
 14649  003E8C  90D8               	bcf	status,0,c
 14650  003E8E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14651  003E90  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14652  003E92  0100               	movlb	0	; () banked
 14653  003E94  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14654  003E96                     l5324:
 14655                           
 14656                           ; BSR set to: 0
 14657  003E96  0100               	movlb	0	; () banked
 14658  003E98  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14659  003E9A  D7F7               	goto	l5322
 14660  003E9C                     l5326:
 14661                           
 14662                           ; BSR set to: 0
 14663  003E9C  0100               	movlb	0	; () banked
 14664  003E9E  5189               	movf	___lwmod@divisor& (0+255),w,b
 14665  003EA0  0100               	movlb	0	; () banked
 14666  003EA2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14667  003EA4  0100               	movlb	0	; () banked
 14668  003EA6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14669  003EA8  0100               	movlb	0	; () banked
 14670  003EAA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14671  003EAC  A0D8               	btfss	status,0,c
 14672  003EAE  D008               	goto	l5330
 14673                           
 14674                           ; BSR set to: 0
 14675  003EB0  0100               	movlb	0	; () banked
 14676  003EB2  5189               	movf	___lwmod@divisor& (0+255),w,b
 14677  003EB4  0100               	movlb	0	; () banked
 14678  003EB6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14679  003EB8  0100               	movlb	0	; () banked
 14680  003EBA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14681  003EBC  0100               	movlb	0	; () banked
 14682  003EBE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14683  003EC0                     l5330:
 14684                           
 14685                           ; BSR set to: 0
 14686  003EC0  0100               	movlb	0	; () banked
 14687  003EC2  90D8               	bcf	status,0,c
 14688  003EC4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14689  003EC6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14690                           
 14691                           ; BSR set to: 0
 14692  003EC8  0100               	movlb	0	; () banked
 14693  003ECA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14694  003ECC  D7E7               	goto	l5326
 14695  003ECE                     l1713:
 14696                           
 14697                           ; BSR set to: 0
 14698  003ECE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14699  003ED2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14700                           
 14701                           ; BSR set to: 0
 14702  003ED6  0012               	return		;funcret
 14703  003ED8                     __end_of___lwmod:
 14704                           	opt stack 0
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           indf0	equ	0xFEF
 14715                           postinc0	equ	0xFEE
 14716                           fsr0h	equ	0xFEA
 14717                           fsr0l	equ	0xFE9
 14718                           wreg	equ	0xFE8
 14719                           postdec1	equ	0xFE5
 14720                           fsr1l	equ	0xFE1
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           postdec2	equ	0xFDD
 14724                           fsr2h	equ	0xFDA
 14725                           fsr2l	equ	0xFD9
 14726                           status	equ	0xFD8
 14727                           
 14728 ;; *************** function ___lwdiv *****************
 14729 ;; Defined at:
 14730 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;  dividend        2    0[BANK0 ] unsigned int 
 14733 ;;  divisor         2    2[BANK0 ] unsigned int 
 14734 ;; Auto vars:     Size  Location     Type
 14735 ;;  quotient        2    4[BANK0 ] unsigned int 
 14736 ;;  counter         1    6[BANK0 ] unsigned char 
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  2    0[BANK0 ] unsigned int 
 14739 ;; Registers used:
 14740 ;;		wreg, status,2, status,0
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14747 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14749 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14750 ;;Total ram usage:        7 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    7
 14753 ;; This function calls:
 14754 ;;		Nothing
 14755 ;; This function is called by:
 14756 ;;		_printf
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           	psect	text52
 14761  003C46                     __ptext52:
 14762                           	opt stack 0
 14763  003C46                     ___lwdiv:
 14764                           	opt stack 19
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;incstack = 0
 14768  003C46  0E00               	movlw	0
 14769  003C48  0100               	movlb	0	; () banked
 14770  003C4A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14771  003C4C  0E00               	movlw	0
 14772  003C4E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14773                           
 14774                           ; BSR set to: 0
 14775  003C50  0100               	movlb	0	; () banked
 14776  003C52  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14777  003C54  0100               	movlb	0	; () banked
 14778  003C56  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14779  003C58  B4D8               	btfsc	status,2,c
 14780  003C5A  D02C               	goto	l1703
 14781                           
 14782                           ; BSR set to: 0
 14783  003C5C  0E01               	movlw	1
 14784  003C5E  0100               	movlb	0	; () banked
 14785  003C60  6F86               	movwf	___lwdiv@counter& (0+255),b
 14786  003C62  D006               	goto	l5304
 14787  003C64                     l5302:
 14788                           
 14789                           ; BSR set to: 0
 14790  003C64  0100               	movlb	0	; () banked
 14791  003C66  90D8               	bcf	status,0,c
 14792  003C68  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14793  003C6A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14794  003C6C  0100               	movlb	0	; () banked
 14795  003C6E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14796  003C70                     l5304:
 14797                           
 14798                           ; BSR set to: 0
 14799  003C70  0100               	movlb	0	; () banked
 14800  003C72  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14801  003C74  D7F7               	goto	l5302
 14802  003C76                     l5306:
 14803                           
 14804                           ; BSR set to: 0
 14805  003C76  0100               	movlb	0	; () banked
 14806  003C78  90D8               	bcf	status,0,c
 14807  003C7A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14808  003C7C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14809                           
 14810                           ; BSR set to: 0
 14811  003C7E  0100               	movlb	0	; () banked
 14812  003C80  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14813  003C82  0100               	movlb	0	; () banked
 14814  003C84  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14815  003C86  0100               	movlb	0	; () banked
 14816  003C88  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14817  003C8A  0100               	movlb	0	; () banked
 14818  003C8C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14819  003C8E  A0D8               	btfss	status,0,c
 14820  003C90  D00A               	goto	l5314
 14821                           
 14822                           ; BSR set to: 0
 14823  003C92  0100               	movlb	0	; () banked
 14824  003C94  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14825  003C96  0100               	movlb	0	; () banked
 14826  003C98  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14827  003C9A  0100               	movlb	0	; () banked
 14828  003C9C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14829  003C9E  0100               	movlb	0	; () banked
 14830  003CA0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14831                           
 14832                           ; BSR set to: 0
 14833  003CA2  0100               	movlb	0	; () banked
 14834  003CA4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14835  003CA6                     l5314:
 14836                           
 14837                           ; BSR set to: 0
 14838  003CA6  0100               	movlb	0	; () banked
 14839  003CA8  90D8               	bcf	status,0,c
 14840  003CAA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14841  003CAC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14842                           
 14843                           ; BSR set to: 0
 14844  003CAE  0100               	movlb	0	; () banked
 14845  003CB0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14846  003CB2  D7E1               	goto	l5306
 14847  003CB4                     l1703:
 14848                           
 14849                           ; BSR set to: 0
 14850  003CB4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14851  003CB8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14852                           
 14853                           ; BSR set to: 0
 14854  003CBC  0012               	return		;funcret
 14855  003CBE                     __end_of___lwdiv:
 14856                           	opt stack 0
 14857                           tblptru	equ	0xFF8
 14858                           tblptrh	equ	0xFF7
 14859                           tblptrl	equ	0xFF6
 14860                           tablat	equ	0xFF5
 14861                           prodh	equ	0xFF4
 14862                           prodl	equ	0xFF3
 14863                           intcon	equ	0xFF2
 14864                           intcon2	equ	0xFF1
 14865                           intcon3	equ	0xFF0
 14866                           indf0	equ	0xFEF
 14867                           postinc0	equ	0xFEE
 14868                           fsr0h	equ	0xFEA
 14869                           fsr0l	equ	0xFE9
 14870                           wreg	equ	0xFE8
 14871                           postdec1	equ	0xFE5
 14872                           fsr1l	equ	0xFE1
 14873                           indf2	equ	0xFDF
 14874                           postinc2	equ	0xFDE
 14875                           postdec2	equ	0xFDD
 14876                           fsr2h	equ	0xFDA
 14877                           fsr2l	equ	0xFD9
 14878                           status	equ	0xFD8
 14879                           
 14880 ;; *************** function _lcdInst *****************
 14881 ;; Defined at:
 14882 ;;		line 15 in file "lcd.c"
 14883 ;; Parameters:    Size  Location     Type
 14884 ;;  data            1    wreg     unsigned char 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  data            1    2[BANK0 ] unsigned char 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;                  1    wreg      void 
 14889 ;; Registers used:
 14890 ;;		wreg, status,2, status,0, cstack
 14891 ;; Tracked objects:
 14892 ;;		On entry : 0/0
 14893 ;;		On exit  : 0/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;Total ram usage:        1 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    8
 14903 ;; This function calls:
 14904 ;;		_lcdNibble
 14905 ;; This function is called by:
 14906 ;;		_UI
 14907 ;;		_change_state_to_menu_start
 14908 ;;		_change_state_to_menu_12
 14909 ;;		_change_state_to_menu_22
 14910 ;;		_initLCD
 14911 ;;		_printRTC
 14912 ;;		_Loading
 14913 ;;		_EEPROM_write
 14914 ;;		_Test
 14915 ;;		_algorithmTest
 14916 ;;		_sensorTest
 14917 ;;		_actuatorTest
 14918 ;;		_BothServos
 14919 ;;		_PortTestA5
 14920 ;;		_SolenoidTestA5
 14921 ;;		_ToggleTestA5
 14922 ;; This function uses a non-reentrant model
 14923 ;;
 14924                           
 14925                           	psect	text53
 14926  0047B8                     __ptext53:
 14927                           	opt stack 0
 14928  0047B8                     _lcdInst:
 14929                           	opt stack 20
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;incstack = 0
 14933                           ;lcdInst@data stored from wreg
 14934  0047B8  0100               	movlb	0	; () banked
 14935  0047BA  6F82               	movwf	lcdInst@data& (0+255),b
 14936                           
 14937                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14938  0047BC  948C               	bcf	3980,2,c	;volatile
 14939                           
 14940                           ;lcd.c: 17: lcdNibble(data);
 14941  0047BE  0100               	movlb	0	; () banked
 14942  0047C0  5182               	movf	lcdInst@data& (0+255),w,b
 14943  0047C2  EC07  F01F         	call	_lcdNibble
 14944  0047C6  0012               	return		;funcret
 14945  0047C8                     __end_of_lcdInst:
 14946                           	opt stack 0
 14947                           tblptru	equ	0xFF8
 14948                           tblptrh	equ	0xFF7
 14949                           tblptrl	equ	0xFF6
 14950                           tablat	equ	0xFF5
 14951                           prodh	equ	0xFF4
 14952                           prodl	equ	0xFF3
 14953                           intcon	equ	0xFF2
 14954                           intcon2	equ	0xFF1
 14955                           intcon3	equ	0xFF0
 14956                           indf0	equ	0xFEF
 14957                           postinc0	equ	0xFEE
 14958                           fsr0h	equ	0xFEA
 14959                           fsr0l	equ	0xFE9
 14960                           wreg	equ	0xFE8
 14961                           postdec1	equ	0xFE5
 14962                           fsr1l	equ	0xFE1
 14963                           indf2	equ	0xFDF
 14964                           postinc2	equ	0xFDE
 14965                           postdec2	equ	0xFDD
 14966                           fsr2h	equ	0xFDA
 14967                           fsr2l	equ	0xFD9
 14968                           status	equ	0xFD8
 14969                           
 14970 ;; *************** function _lcdNibble *****************
 14971 ;; Defined at:
 14972 ;;		line 25 in file "lcd.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  data            1    wreg     unsigned char 
 14975 ;; Auto vars:     Size  Location     Type
 14976 ;;  data            1    1[BANK0 ] unsigned char 
 14977 ;;  temp            1    0[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;                  1    wreg      void 
 14980 ;; Registers used:
 14981 ;;		wreg, status,2, status,0
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14991 ;;Total ram usage:        2 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    7
 14994 ;; This function calls:
 14995 ;;		Nothing
 14996 ;; This function is called by:
 14997 ;;		_lcdInst
 14998 ;;		_putch
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           	psect	text54
 15003  003E0E                     __ptext54:
 15004                           	opt stack 0
 15005  003E0E                     _lcdNibble:
 15006                           	opt stack 20
 15007                           
 15008                           ;incstack = 0
 15009                           ;lcdNibble@data stored from wreg
 15010  003E0E  0100               	movlb	0	; () banked
 15011  003E10  6F81               	movwf	lcdNibble@data& (0+255),b
 15012                           
 15013                           ;lcd.c: 27: char temp = data & 0xF0;
 15014  003E12  0100               	movlb	0	; () banked
 15015  003E14  5181               	movf	lcdNibble@data& (0+255),w,b
 15016  003E16  0BF0               	andlw	240
 15017  003E18  0100               	movlb	0	; () banked
 15018  003E1A  6F80               	movwf	lcdNibble@temp& (0+255),b
 15019                           
 15020                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15021  003E1C  508C               	movf	3980,w,c	;volatile
 15022  003E1E  0B0F               	andlw	15
 15023  003E20  6E8C               	movwf	3980,c	;volatile
 15024                           
 15025                           ;lcd.c: 29: LATD = temp | LATD;
 15026  003E22  0100               	movlb	0	; () banked
 15027  003E24  5180               	movf	lcdNibble@temp& (0+255),w,b
 15028  003E26  108C               	iorwf	3980,w,c	;volatile
 15029  003E28  6E8C               	movwf	3980,c	;volatile
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15033  003E2A  868C               	bsf	3980,3,c	;volatile
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15037  003E2C  0E42               	movlw	66
 15038  003E2E                     u8247:
 15039  003E2E  2EE8               	decfsz	wreg,f,c
 15040  003E30  D7FE               	bra	u8247
 15041  003E32  D000               	nop2	
 15042                           
 15043                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15044  003E34  968C               	bcf	3980,3,c	;volatile
 15045                           
 15046                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15047  003E36  0E42               	movlw	66
 15048  003E38                     u8257:
 15049  003E38  2EE8               	decfsz	wreg,f,c
 15050  003E3A  D7FE               	bra	u8257
 15051  003E3C  D000               	nop2	
 15052                           
 15053                           ;lcd.c: 36: data = data << 4;
 15054  003E3E  0100               	movlb	0	; () banked
 15055  003E40  3981               	swapf	lcdNibble@data& (0+255),w,b
 15056  003E42  0BF0               	andlw	240
 15057  003E44  0100               	movlb	0	; () banked
 15058  003E46  6F81               	movwf	lcdNibble@data& (0+255),b
 15059                           
 15060                           ;lcd.c: 38: temp = data & 0xF0;
 15061  003E48  0100               	movlb	0	; () banked
 15062  003E4A  5181               	movf	lcdNibble@data& (0+255),w,b
 15063  003E4C  0BF0               	andlw	240
 15064  003E4E  0100               	movlb	0	; () banked
 15065  003E50  6F80               	movwf	lcdNibble@temp& (0+255),b
 15066                           
 15067                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15068  003E52  508C               	movf	3980,w,c	;volatile
 15069  003E54  0B0F               	andlw	15
 15070  003E56  6E8C               	movwf	3980,c	;volatile
 15071                           
 15072                           ;lcd.c: 40: LATD = temp | LATD;
 15073  003E58  0100               	movlb	0	; () banked
 15074  003E5A  5180               	movf	lcdNibble@temp& (0+255),w,b
 15075  003E5C  108C               	iorwf	3980,w,c	;volatile
 15076  003E5E  6E8C               	movwf	3980,c	;volatile
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15080  003E60  868C               	bsf	3980,3,c	;volatile
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15084  003E62  0E42               	movlw	66
 15085  003E64                     u8267:
 15086  003E64  2EE8               	decfsz	wreg,f,c
 15087  003E66  D7FE               	bra	u8267
 15088  003E68  D000               	nop2	
 15089                           
 15090                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15091  003E6A  968C               	bcf	3980,3,c	;volatile
 15092                           
 15093                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15094  003E6C  0E42               	movlw	66
 15095  003E6E                     u8277:
 15096  003E6E  2EE8               	decfsz	wreg,f,c
 15097  003E70  D7FE               	bra	u8277
 15098  003E72  D000               	nop2	
 15099  003E74  0012               	return		;funcret
 15100  003E76                     __end_of_lcdNibble:
 15101                           	opt stack 0
 15102                           tblptru	equ	0xFF8
 15103                           tblptrh	equ	0xFF7
 15104                           tblptrl	equ	0xFF6
 15105                           tablat	equ	0xFF5
 15106                           prodh	equ	0xFF4
 15107                           prodl	equ	0xFF3
 15108                           intcon	equ	0xFF2
 15109                           intcon2	equ	0xFF1
 15110                           intcon3	equ	0xFF0
 15111                           indf0	equ	0xFEF
 15112                           postinc0	equ	0xFEE
 15113                           fsr0h	equ	0xFEA
 15114                           fsr0l	equ	0xFE9
 15115                           wreg	equ	0xFE8
 15116                           postdec1	equ	0xFE5
 15117                           fsr1l	equ	0xFE1
 15118                           indf2	equ	0xFDF
 15119                           postinc2	equ	0xFDE
 15120                           postdec2	equ	0xFDD
 15121                           fsr2h	equ	0xFDA
 15122                           fsr2l	equ	0xFD9
 15123                           status	equ	0xFD8
 15124                           
 15125 ;; *************** function _initServos *****************
 15126 ;; Defined at:
 15127 ;;		line 263 in file "sort.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;		None
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;		None
 15132 ;; Return value:  Size  Location     Type
 15133 ;;                  1    wreg      void 
 15134 ;; Registers used:
 15135 ;;		wreg, status,2, status,0, cstack
 15136 ;; Tracked objects:
 15137 ;;		On entry : 0/0
 15138 ;;		On exit  : 0/0
 15139 ;;		Unchanged: 0/0
 15140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15145 ;;Total ram usage:        1 bytes
 15146 ;; Hardware stack levels used:    1
 15147 ;; Hardware stack levels required when called:    8
 15148 ;; This function calls:
 15149 ;;		_updateServoPosition
 15150 ;; This function is called by:
 15151 ;;		_Loading
 15152 ;;		_BothServos
 15153 ;; This function uses a non-reentrant model
 15154 ;;
 15155                           
 15156                           	psect	text55
 15157  003F94                     __ptext55:
 15158                           	opt stack 0
 15159  003F94                     _initServos:
 15160                           	opt stack 20
 15161                           
 15162                           ;sort.c: 264: updateServoPosition(1200, 1);
 15163                           
 15164                           ;incstack = 0
 15165  003F94  0E04               	movlw	4
 15166  003F96  0100               	movlb	0	; () banked
 15167  003F98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15168  003F9A  0EB0               	movlw	176
 15169  003F9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15170  003F9E  0E00               	movlw	0
 15171  003FA0  0100               	movlb	0	; () banked
 15172  003FA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15173  003FA4  0E01               	movlw	1
 15174  003FA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15175  003FA8  EC5F  F01E         	call	_updateServoPosition	;wreg free
 15176                           
 15177                           ;sort.c: 265: updateServoPosition(1190, 3);
 15178  003FAC  0E04               	movlw	4
 15179  003FAE  0100               	movlb	0	; () banked
 15180  003FB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15181  003FB2  0EA6               	movlw	166
 15182  003FB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15183  003FB6  0E00               	movlw	0
 15184  003FB8  0100               	movlb	0	; () banked
 15185  003FBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15186  003FBC  0E03               	movlw	3
 15187  003FBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15188  003FC0  EC5F  F01E         	call	_updateServoPosition	;wreg free
 15189                           
 15190                           ;sort.c: 266: TMR1ON = 1;
 15191  003FC4  80CD               	bsf	4045,0,c	;volatile
 15192                           
 15193                           ;sort.c: 267: was_low_1 = 0;
 15194  003FC6  0E00               	movlw	0
 15195  003FC8  6E7A               	movwf	_was_low_1+1,c	;volatile
 15196  003FCA  0E00               	movlw	0
 15197  003FCC  6E79               	movwf	_was_low_1,c	;volatile
 15198                           
 15199                           ;sort.c: 268: _delay((unsigned long)((5)*(32000000/4000.0)));
 15200  003FCE  0E34               	movlw	52
 15201  003FD0  0100               	movlb	0	; () banked
 15202  003FD2  6F88               	movwf	??_initServos& (0+255),b
 15203  003FD4  0EF1               	movlw	241
 15204  003FD6                     u8287:
 15205  003FD6  2EE8               	decfsz	wreg,f,c
 15206  003FD8  D7FE               	bra	u8287
 15207  003FDA  2F88               	decfsz	??_initServos& (0+255),f,b
 15208  003FDC  D7FC               	bra	u8287
 15209  003FDE  D000               	nop2	
 15210                           
 15211                           ;sort.c: 269: TMR3ON = 1;
 15212  003FE0  80B1               	bsf	4017,0,c	;volatile
 15213                           
 15214                           ;sort.c: 270: was_low_3 = 0;
 15215  003FE2  0E00               	movlw	0
 15216  003FE4  6E7C               	movwf	_was_low_3+1,c	;volatile
 15217  003FE6  0E00               	movlw	0
 15218  003FE8  6E7B               	movwf	_was_low_3,c	;volatile
 15219                           
 15220                           ;sort.c: 271: LATCbits.LATC0 = 1;
 15221  003FEA  808B               	bsf	3979,0,c	;volatile
 15222  003FEC  0012               	return		;funcret
 15223  003FEE                     __end_of_initServos:
 15224                           	opt stack 0
 15225                           tblptru	equ	0xFF8
 15226                           tblptrh	equ	0xFF7
 15227                           tblptrl	equ	0xFF6
 15228                           tablat	equ	0xFF5
 15229                           prodh	equ	0xFF4
 15230                           prodl	equ	0xFF3
 15231                           intcon	equ	0xFF2
 15232                           intcon2	equ	0xFF1
 15233                           intcon3	equ	0xFF0
 15234                           indf0	equ	0xFEF
 15235                           postinc0	equ	0xFEE
 15236                           fsr0h	equ	0xFEA
 15237                           fsr0l	equ	0xFE9
 15238                           wreg	equ	0xFE8
 15239                           postdec1	equ	0xFE5
 15240                           fsr1l	equ	0xFE1
 15241                           indf2	equ	0xFDF
 15242                           postinc2	equ	0xFDE
 15243                           postdec2	equ	0xFDD
 15244                           fsr2h	equ	0xFDA
 15245                           fsr2l	equ	0xFD9
 15246                           status	equ	0xFD8
 15247                           
 15248 ;; *************** function _updateServoPosition *****************
 15249 ;; Defined at:
 15250 ;;		line 313 in file "sort.c"
 15251 ;; Parameters:    Size  Location     Type
 15252 ;;  time_us         2    0[BANK0 ] int 
 15253 ;;  timer           2    2[BANK0 ] int 
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;  my_time         2    6[BANK0 ] unsigned int 
 15256 ;; Return value:  Size  Location     Type
 15257 ;;                  1    wreg      void 
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, status,0
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15265 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;Total ram usage:        8 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    7
 15272 ;; This function calls:
 15273 ;;		Nothing
 15274 ;; This function is called by:
 15275 ;;		_Distribution
 15276 ;;		_initServos
 15277 ;;		_actuatorTest
 15278 ;;		_BothServos
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           	psect	text56
 15283  003CBE                     __ptext56:
 15284                           	opt stack 0
 15285  003CBE                     _updateServoPosition:
 15286                           	opt stack 20
 15287                           
 15288                           ;sort.c: 314: unsigned int my_time = 65535 - time_us;
 15289                           
 15290                           ;incstack = 0
 15291  003CBE  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15292  003CC2  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15293  003CC6  0100               	movlb	0	; () banked
 15294  003CC8  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15295  003CCA  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15296  003CCC  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15297  003CCE  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15298  003CD0  0EFF               	movlw	255
 15299  003CD2  0100               	movlb	0	; () banked
 15300  003CD4  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15301  003CD6  0100               	movlb	0	; () banked
 15302  003CD8  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15303  003CDA  0EFF               	movlw	255
 15304  003CDC  0100               	movlb	0	; () banked
 15305  003CDE  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15306  003CE0  0100               	movlb	0	; () banked
 15307  003CE2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15308                           
 15309                           ;sort.c: 315: switch(timer){
 15310  003CE4  D015               	goto	l5604
 15311  003CE6                     l5602:
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;sort.c: 317: servoTimes[0] = my_time >> 8;
 15315  003CE6  0100               	movlb	0	; () banked
 15316  003CE8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15317  003CEA  0101               	movlb	1	; () banked
 15318  003CEC  6F1C               	movwf	_servoTimes& (0+255),b
 15319  003CEE  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15320                           
 15321                           ;sort.c: 318: servoTimes[1] = my_time & 0xFF;
 15322  003CF0  0100               	movlb	0	; () banked
 15323  003CF2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15324  003CF4  0101               	movlb	1	; () banked
 15325  003CF6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15326  003CF8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15327  003CFA                     l790:
 15328                           
 15329                           ;sort.c: 320: servoTimes[2] = my_time >> 8;
 15330  003CFA  0100               	movlb	0	; () banked
 15331  003CFC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15332  003CFE  0101               	movlb	1	; () banked
 15333  003D00  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15334  003D02  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15335                           
 15336                           ;sort.c: 321: servoTimes[3] = my_time & 0xFF;
 15337  003D04  0100               	movlb	0	; () banked
 15338  003D06  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15339  003D08  0101               	movlb	1	; () banked
 15340  003D0A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15341  003D0C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15342                           
 15343                           ;sort.c: 322: }
 15344  003D0E  0012               	return	
 15345  003D10                     l5604:
 15346  003D10  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15347  003D14  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15348                           
 15349                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15350                           ; Switch size 1, requested type "space"
 15351                           ; Number of cases is 1, Range of values is 0 to 0
 15352                           ; switch strategies available:
 15353                           ; Name         Instructions Cycles
 15354                           ; simple_byte            4     3 (average)
 15355                           ;	Chosen strategy is simple_byte
 15356  003D18  0100               	movlb	0	; () banked
 15357  003D1A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15358  003D1C  0A00               	xorlw	0	; case 0
 15359  003D1E  A4D8               	btfss	status,2,c
 15360  003D20  0012               	return	
 15361                           
 15362                           ; BSR set to: 0
 15363                           ; Switch size 1, requested type "space"
 15364                           ; Number of cases is 2, Range of values is 1 to 3
 15365                           ; switch strategies available:
 15366                           ; Name         Instructions Cycles
 15367                           ; simple_byte            7     4 (average)
 15368                           ;	Chosen strategy is simple_byte
 15369  003D22  0100               	movlb	0	; () banked
 15370  003D24  5184               	movf	??_updateServoPosition& (0+255),w,b
 15371  003D26  0A01               	xorlw	1	; case 1
 15372  003D28  B4D8               	btfsc	status,2,c
 15373  003D2A  D7DD               	goto	l5602
 15374  003D2C  0A02               	xorlw	2	; case 3
 15375  003D2E  A4D8               	btfss	status,2,c
 15376  003D30  0012               	return	
 15377  003D32  D7E3               	goto	l790
 15378  003D34                     __end_of_updateServoPosition:
 15379                           	opt stack 0
 15380                           tblptru	equ	0xFF8
 15381                           tblptrh	equ	0xFF7
 15382                           tblptrl	equ	0xFF6
 15383                           tablat	equ	0xFF5
 15384                           prodh	equ	0xFF4
 15385                           prodl	equ	0xFF3
 15386                           intcon	equ	0xFF2
 15387                           intcon2	equ	0xFF1
 15388                           intcon3	equ	0xFF0
 15389                           indf0	equ	0xFEF
 15390                           postinc0	equ	0xFEE
 15391                           fsr0h	equ	0xFEA
 15392                           fsr0l	equ	0xFE9
 15393                           wreg	equ	0xFE8
 15394                           postdec1	equ	0xFE5
 15395                           fsr1l	equ	0xFE1
 15396                           indf2	equ	0xFDF
 15397                           postinc2	equ	0xFDE
 15398                           postdec2	equ	0xFDD
 15399                           fsr2h	equ	0xFDA
 15400                           fsr2l	equ	0xFD9
 15401                           status	equ	0xFD8
 15402                           
 15403 ;; *************** function _handler *****************
 15404 ;; Defined at:
 15405 ;;		line 16 in file "interruptHandler.c"
 15406 ;; Parameters:    Size  Location     Type
 15407 ;;		None
 15408 ;; Auto vars:     Size  Location     Type
 15409 ;;		None
 15410 ;; Return value:  Size  Location     Type
 15411 ;;                  1    wreg      void 
 15412 ;; Registers used:
 15413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15414 ;; Tracked objects:
 15415 ;;		On entry : 0/0
 15416 ;;		On exit  : 0/0
 15417 ;;		Unchanged: 0/0
 15418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;Total ram usage:       16 bytes
 15424 ;; Hardware stack levels used:    1
 15425 ;; Hardware stack levels required when called:    6
 15426 ;; This function calls:
 15427 ;;		_printSortTimer
 15428 ;;		_updateMenu
 15429 ;; This function is called by:
 15430 ;;		Interrupt level 2
 15431 ;; This function uses a non-reentrant model
 15432 ;;
 15433                           
 15434                           	psect	intcode
 15435  000008                     __pintcode:
 15436                           	opt stack 0
 15437  000008                     _handler:
 15438                           	opt stack 18
 15439                           
 15440                           ;incstack = 0
 15441  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15442  00000A  ED4E  F015         	call	int_func,f	;refresh shadow registers
 15443                           tblptru	equ	0xFF8
 15444                           tblptrh	equ	0xFF7
 15445                           tblptrl	equ	0xFF6
 15446                           tablat	equ	0xFF5
 15447                           prodh	equ	0xFF4
 15448                           prodl	equ	0xFF3
 15449                           intcon	equ	0xFF2
 15450                           intcon2	equ	0xFF1
 15451                           intcon3	equ	0xFF0
 15452                           indf0	equ	0xFEF
 15453                           postinc0	equ	0xFEE
 15454                           fsr0h	equ	0xFEA
 15455                           fsr0l	equ	0xFE9
 15456                           wreg	equ	0xFE8
 15457                           postdec1	equ	0xFE5
 15458                           fsr1l	equ	0xFE1
 15459                           indf2	equ	0xFDF
 15460                           postinc2	equ	0xFDE
 15461                           postdec2	equ	0xFDD
 15462                           fsr2h	equ	0xFDA
 15463                           fsr2l	equ	0xFD9
 15464                           status	equ	0xFD8
 15465                           
 15466                           	psect	intcode_body
 15467  002A9C                     __pintcode_body:
 15468                           	opt stack 18
 15469  002A9C                     int_func:
 15470                           	opt stack 18
 15471  002A9C  0006               	pop		; remove dummy address from shadow register refresh
 15472  002A9E  CFFA F04D          	movff	pclath,??_handler+2
 15473  002AA2  CFFB F04E          	movff	pclatu,??_handler+3
 15474  002AA6  CFE9 F04F          	movff	fsr0l,??_handler+4
 15475  002AAA  CFEA F050          	movff	fsr0h,??_handler+5
 15476  002AAE  CFE1 F051          	movff	fsr1l,??_handler+6
 15477  002AB2  CFE2 F052          	movff	fsr1h,??_handler+7
 15478  002AB6  CFD9 F053          	movff	fsr2l,??_handler+8
 15479  002ABA  CFDA F054          	movff	fsr2h,??_handler+9
 15480  002ABE  CFF3 F055          	movff	prodl,??_handler+10
 15481  002AC2  CFF4 F056          	movff	prodh,??_handler+11
 15482  002AC6  CFF6 F057          	movff	tblptrl,??_handler+12
 15483  002ACA  CFF7 F058          	movff	tblptrh,??_handler+13
 15484  002ACE  CFF8 F059          	movff	tblptru,??_handler+14
 15485  002AD2  CFF5 F05A          	movff	tablat,??_handler+15
 15486                           
 15487                           ;interruptHandler.c: 18: if(INT1IF){
 15488  002AD6  A0F0               	btfss	intcon3,0,c	;volatile
 15489  002AD8  D020               	goto	i2l8156
 15490                           
 15491                           ;interruptHandler.c: 19: INT1IF = 0;
 15492  002ADA  90F0               	bcf	intcon3,0,c	;volatile
 15493                           
 15494                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15495  002ADC  0100               	movlb	0	; () banked
 15496  002ADE  51FC               	movf	_machine_state& (0+255),w,b
 15497  002AE0  A4D8               	btfss	status,2,c
 15498  002AE2  D01B               	goto	i2l8156
 15499                           
 15500                           ; BSR set to: 0
 15501                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15502  002AE4  3881               	swapf	3969,w,c	;volatile
 15503  002AE6  0B0F               	andlw	15
 15504  002AE8  0B0F               	andlw	15
 15505  002AEA  6E4B               	movwf	??_handler& (0+255),c
 15506  002AEC  6A4C               	clrf	(??_handler+1)& (0+255),c
 15507  002AEE  0E15               	movlw	low _keys
 15508  002AF0  244B               	addwf	??_handler,w,c
 15509  002AF2  6EF6               	movwf	tblptrl,c
 15510  002AF4  0EFB               	movlw	high _keys
 15511  002AF6  204C               	addwfc	??_handler+1,w,c
 15512  002AF8  6EF7               	movwf	tblptrh,c
 15513  002AFA                     	if	1	;There are 3 active tblptr bytes
 15514  002AFA  6AF8               	clrf	tblptru,c
 15515  002AFC  0E00               	movlw	low (__mediumconst shr (0+16))
 15516  002AFE  22F8               	addwfc	tblptru,f,c
 15517  002B00                     	endif
 15518  002B00  0008               	tblrd		*
 15519  002B02  CFF5 F07D          	movff	tablat,_input	;volatile
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;interruptHandler.c: 23: if(input == '*'){
 15523  002B06  0E2A               	movlw	42
 15524  002B08  187D               	xorwf	_input,w,c	;volatile
 15525  002B0A  A4D8               	btfss	status,2,c
 15526  002B0C  D004               	goto	i2l8154
 15527                           
 15528                           ; BSR set to: 0
 15529                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15530  002B0E  0E03               	movlw	3
 15531  002B10  0100               	movlb	0	; () banked
 15532  002B12  6FFC               	movwf	_machine_state& (0+255),b
 15533                           
 15534                           ;interruptHandler.c: 25: }
 15535  002B14  D002               	goto	i2l8156
 15536  002B16                     i2l8154:
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;interruptHandler.c: 26: else{
 15540                           ;interruptHandler.c: 27: updateMenu();
 15541  002B16  ECE7  F010         	call	_updateMenu	;wreg free
 15542  002B1A                     i2l8156:
 15543                           
 15544                           ;interruptHandler.c: 28: }
 15545                           ;interruptHandler.c: 29: }
 15546                           ;interruptHandler.c: 30: }
 15547                           ;interruptHandler.c: 33: if(TMR0IF){
 15548  002B1A  A4F2               	btfss	intcon,2,c	;volatile
 15549  002B1C  D00C               	goto	i2l8170
 15550                           
 15551                           ;interruptHandler.c: 34: TMR0IF = 0;
 15552  002B1E  94F2               	bcf	intcon,2,c	;volatile
 15553                           
 15554                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15555  002B20  0100               	movlb	0	; () banked
 15556  002B22  05FC               	decf	_machine_state& (0+255),w,b
 15557  002B24  A4D8               	btfss	status,2,c
 15558  002B26  D007               	goto	i2l8170
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;interruptHandler.c: 36: printSortTimer();
 15562  002B28  EC62  F013         	call	_printSortTimer	;wreg free
 15563                           
 15564                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15565  002B2C  0E85               	movlw	133
 15566  002B2E  6ED7               	movwf	4055,c	;volatile
 15567                           
 15568                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15569  002B30  0EEE               	movlw	238
 15570  002B32  6ED6               	movwf	4054,c	;volatile
 15571                           
 15572                           ;interruptHandler.c: 40: TMR0ON = 1;
 15573  002B34  8ED5               	bsf	4053,7,c	;volatile
 15574  002B36                     i2l8170:
 15575                           
 15576                           ;interruptHandler.c: 41: }
 15577                           ;interruptHandler.c: 42: }
 15578                           ;interruptHandler.c: 45: if(TMR1IF){
 15579  002B36  A09E               	btfss	3998,0,c	;volatile
 15580  002B38  D024               	goto	i2l8194
 15581                           
 15582                           ;interruptHandler.c: 46: TMR1IF = 0;
 15583  002B3A  909E               	bcf	3998,0,c	;volatile
 15584                           
 15585                           ;interruptHandler.c: 47: TMR1ON = 0;
 15586  002B3C  90CD               	bcf	4045,0,c	;volatile
 15587                           
 15588                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15589  002B3E  0100               	movlb	0	; () banked
 15590  002B40  05FC               	decf	_machine_state& (0+255),w,b
 15591  002B42  A4D8               	btfss	status,2,c
 15592  002B44  D01E               	goto	i2l8194
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;interruptHandler.c: 49: if(was_low_1){
 15596  002B46  5079               	movf	_was_low_1,w,c	;volatile
 15597  002B48  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15598  002B4A  B4D8               	btfsc	status,2,c
 15599  002B4C  D00A               	goto	i2l855
 15600                           
 15601                           ; BSR set to: 0
 15602                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15603  002B4E  828B               	bsf	3979,1,c	;volatile
 15604                           
 15605                           ; BSR set to: 0
 15606                           ;interruptHandler.c: 51: was_low_1 = 0;
 15607  002B50  0E00               	movlw	0
 15608  002B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 15609  002B54  0E00               	movlw	0
 15610  002B56  6E79               	movwf	_was_low_1,c	;volatile
 15611                           
 15612                           ; BSR set to: 0
 15613                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15614  002B58  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15615                           
 15616                           ; BSR set to: 0
 15617                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15618  002B5C  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15619                           
 15620                           ;interruptHandler.c: 54: }
 15621  002B60  D00F               	goto	i2l8192
 15622  002B62                     i2l855:
 15623                           
 15624                           ; BSR set to: 0
 15625                           ;interruptHandler.c: 55: else{
 15626                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15627  002B62  928B               	bcf	3979,1,c	;volatile
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;interruptHandler.c: 57: was_low_1 = 1;
 15631  002B64  0E00               	movlw	0
 15632  002B66  6E7A               	movwf	_was_low_1+1,c	;volatile
 15633  002B68  0E01               	movlw	1
 15634  002B6A  6E79               	movwf	_was_low_1,c	;volatile
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15638  002B6C  0101               	movlb	1	; () banked
 15639  002B6E  511C               	movf	_servoTimes& (0+255),w,b
 15640  002B70  0800               	sublw	0
 15641  002B72  0F20               	addlw	32
 15642  002B74  6ECF               	movwf	4047,c	;volatile
 15643                           
 15644                           ; BSR set to: 1
 15645                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15646  002B76  0101               	movlb	1	; () banked
 15647  002B78  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15648  002B7A  0800               	sublw	0
 15649  002B7C  0F20               	addlw	32
 15650  002B7E  6ECE               	movwf	4046,c	;volatile
 15651  002B80                     i2l8192:
 15652                           
 15653                           ;interruptHandler.c: 60: }
 15654                           ;interruptHandler.c: 61: TMR1ON = 1;
 15655  002B80  80CD               	bsf	4045,0,c	;volatile
 15656  002B82                     i2l8194:
 15657                           
 15658                           ;interruptHandler.c: 62: }
 15659                           ;interruptHandler.c: 63: }
 15660                           ;interruptHandler.c: 65: if(TMR3IF){
 15661  002B82  A2A1               	btfss	4001,1,c	;volatile
 15662  002B84  D024               	goto	i2l861
 15663                           
 15664                           ;interruptHandler.c: 66: TMR3IF = 0;
 15665  002B86  92A1               	bcf	4001,1,c	;volatile
 15666                           
 15667                           ;interruptHandler.c: 67: TMR3ON = 0;
 15668  002B88  90B1               	bcf	4017,0,c	;volatile
 15669                           
 15670                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15671  002B8A  0100               	movlb	0	; () banked
 15672  002B8C  05FC               	decf	_machine_state& (0+255),w,b
 15673  002B8E  A4D8               	btfss	status,2,c
 15674  002B90  D01E               	goto	i2l861
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;interruptHandler.c: 69: if(was_low_3){
 15678  002B92  507B               	movf	_was_low_3,w,c	;volatile
 15679  002B94  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15680  002B96  B4D8               	btfsc	status,2,c
 15681  002B98  D00A               	goto	i2l859
 15682                           
 15683                           ; BSR set to: 0
 15684                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15685  002B9A  848B               	bsf	3979,2,c	;volatile
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;interruptHandler.c: 71: was_low_3 = 0;
 15689  002B9C  0E00               	movlw	0
 15690  002B9E  6E7C               	movwf	_was_low_3+1,c	;volatile
 15691  002BA0  0E00               	movlw	0
 15692  002BA2  6E7B               	movwf	_was_low_3,c	;volatile
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15696  002BA4  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15700  002BA8  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15701                           
 15702                           ;interruptHandler.c: 74: }
 15703  002BAC  D00F               	goto	i2l8216
 15704  002BAE                     i2l859:
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;interruptHandler.c: 75: else{
 15708                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15709  002BAE  948B               	bcf	3979,2,c	;volatile
 15710                           
 15711                           ; BSR set to: 0
 15712                           ;interruptHandler.c: 77: was_low_3 = 1;
 15713  002BB0  0E00               	movlw	0
 15714  002BB2  6E7C               	movwf	_was_low_3+1,c	;volatile
 15715  002BB4  0E01               	movlw	1
 15716  002BB6  6E7B               	movwf	_was_low_3,c	;volatile
 15717                           
 15718                           ; BSR set to: 0
 15719                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15720  002BB8  0101               	movlb	1	; () banked
 15721  002BBA  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15722  002BBC  0800               	sublw	0
 15723  002BBE  0F20               	addlw	32
 15724  002BC0  6EB3               	movwf	4019,c	;volatile
 15725                           
 15726                           ; BSR set to: 1
 15727                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15728  002BC2  0101               	movlb	1	; () banked
 15729  002BC4  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15730  002BC6  0800               	sublw	0
 15731  002BC8  0F20               	addlw	32
 15732  002BCA  6EB2               	movwf	4018,c	;volatile
 15733  002BCC                     i2l8216:
 15734                           
 15735                           ;interruptHandler.c: 80: }
 15736                           ;interruptHandler.c: 81: TMR3ON = 1;
 15737  002BCC  80B1               	bsf	4017,0,c	;volatile
 15738  002BCE                     i2l861:
 15739  002BCE  C05A  FFF5         	movff	??_handler+15,tablat
 15740  002BD2  C059  FFF8         	movff	??_handler+14,tblptru
 15741  002BD6  C058  FFF7         	movff	??_handler+13,tblptrh
 15742  002BDA  C057  FFF6         	movff	??_handler+12,tblptrl
 15743  002BDE  C056  FFF4         	movff	??_handler+11,prodh
 15744  002BE2  C055  FFF3         	movff	??_handler+10,prodl
 15745  002BE6  C054  FFDA         	movff	??_handler+9,fsr2h
 15746  002BEA  C053  FFD9         	movff	??_handler+8,fsr2l
 15747  002BEE  C052  FFE2         	movff	??_handler+7,fsr1h
 15748  002BF2  C051  FFE1         	movff	??_handler+6,fsr1l
 15749  002BF6  C050  FFEA         	movff	??_handler+5,fsr0h
 15750  002BFA  C04F  FFE9         	movff	??_handler+4,fsr0l
 15751  002BFE  C04E  FFFB         	movff	??_handler+3,pclatu
 15752  002C02  C04D  FFFA         	movff	??_handler+2,pclath
 15753  002C06  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15754  002C08  0011               	retfie		f
 15755  002C0A                     __end_of_handler:
 15756                           	opt stack 0
 15757                           pclatu	equ	0xFFB
 15758                           pclath	equ	0xFFA
 15759                           tblptru	equ	0xFF8
 15760                           tblptrh	equ	0xFF7
 15761                           tblptrl	equ	0xFF6
 15762                           tablat	equ	0xFF5
 15763                           prodh	equ	0xFF4
 15764                           prodl	equ	0xFF3
 15765                           intcon	equ	0xFF2
 15766                           intcon2	equ	0xFF1
 15767                           intcon3	equ	0xFF0
 15768                           indf0	equ	0xFEF
 15769                           postinc0	equ	0xFEE
 15770                           fsr0h	equ	0xFEA
 15771                           fsr0l	equ	0xFE9
 15772                           wreg	equ	0xFE8
 15773                           postdec1	equ	0xFE5
 15774                           fsr1h	equ	0xFE2
 15775                           fsr1l	equ	0xFE1
 15776                           indf2	equ	0xFDF
 15777                           postinc2	equ	0xFDE
 15778                           postdec2	equ	0xFDD
 15779                           fsr2h	equ	0xFDA
 15780                           fsr2l	equ	0xFD9
 15781                           status	equ	0xFD8
 15782                           
 15783 ;; *************** function _updateMenu *****************
 15784 ;; Defined at:
 15785 ;;		line 213 in file "UI.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;		None
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;		None
 15790 ;; Return value:  Size  Location     Type
 15791 ;;                  1    wreg      void 
 15792 ;; Registers used:
 15793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15803 ;;Total ram usage:        2 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    5
 15806 ;; This function calls:
 15807 ;;		_change_state_to_logs_11
 15808 ;;		_change_state_to_logs_12
 15809 ;;		_change_state_to_logs_22
 15810 ;;		_change_state_to_logs_23
 15811 ;;		_change_state_to_logs_33
 15812 ;;		_change_state_to_logs_34
 15813 ;;		_change_state_to_menu_11
 15814 ;;		_change_state_to_menu_23
 15815 ;;		_dispLogs
 15816 ;;		_inputHandler
 15817 ;;		i2_change_state_to_menu_12
 15818 ;;		i2_change_state_to_menu_22
 15819 ;;		i2_change_state_to_menu_start
 15820 ;; This function is called by:
 15821 ;;		_handler
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           	psect	text58
 15826  0021CE                     __ptext58:
 15827                           	opt stack 0
 15828  0021CE                     _updateMenu:
 15829                           	opt stack 18
 15830                           
 15831                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 15832                           
 15833                           ;incstack = 0
 15834  0021CE  0E00               	movlw	0
 15835  0021D0  6E78               	movwf	_up+1,c
 15836  0021D2  0E00               	movlw	0
 15837  0021D4  6E77               	movwf	_up,c
 15838  0021D6  0E00               	movlw	0
 15839  0021D8  6E68               	movwf	_down+1,c
 15840  0021DA  0E00               	movlw	0
 15841  0021DC  6E67               	movwf	_down,c
 15842  0021DE  0E00               	movlw	0
 15843  0021E0  6E6A               	movwf	_enter+1,c
 15844  0021E2  0E00               	movlw	0
 15845  0021E4  6E69               	movwf	_enter,c
 15846  0021E6  0E00               	movlw	0
 15847  0021E8  6E5C               	movwf	_back+1,c
 15848  0021EA  0E00               	movlw	0
 15849  0021EC  6E5B               	movwf	_back,c
 15850                           
 15851                           ;UI.c: 215: (INTCONbits.GIE = 0);
 15852  0021EE  9EF2               	bcf	intcon,7,c	;volatile
 15853                           
 15854                           ;UI.c: 217: if (inputHandler()
 15855                           ;UI.c: 220: ){
 15856  0021F0  EC5B  F014         	call	_inputHandler	;wreg free
 15857  0021F4  502A               	movf	?_inputHandler,w,c
 15858  0021F6  102B               	iorwf	?_inputHandler+1,w,c
 15859  0021F8  A4D8               	btfss	status,2,c
 15860  0021FA  D112               	goto	i2l7892
 15861  0021FC  D146               	goto	i2l257
 15862  0021FE                     i2l7744:
 15863                           
 15864                           ;UI.c: 224: change_state_to_menu_11();
 15865  0021FE  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 15866                           
 15867                           ;UI.c: 225: break;
 15868  002202  D143               	goto	i2l257
 15869  002204                     i2l7746:
 15870                           
 15871                           ;UI.c: 228: if(up){
 15872  002204  5077               	movf	_up,w,c
 15873  002206  1078               	iorwf	_up+1,w,c
 15874  002208  B4D8               	btfsc	status,2,c
 15875  00220A  D003               	goto	i2l7750
 15876                           
 15877                           ;UI.c: 229: change_state_to_menu_23();
 15878  00220C  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 15879                           
 15880                           ;UI.c: 230: }
 15881  002210  D13C               	goto	i2l257
 15882  002212                     i2l7750:
 15883                           
 15884                           ;UI.c: 231: else if(down){
 15885  002212  5067               	movf	_down,w,c
 15886  002214  1068               	iorwf	_down+1,w,c
 15887  002216  B4D8               	btfsc	status,2,c
 15888  002218  D003               	goto	i2l7754
 15889                           
 15890                           ;UI.c: 232: change_state_to_menu_12();
 15891  00221A  ECC8  F021         	call	i2_change_state_to_menu_12	;wreg free
 15892                           
 15893                           ;UI.c: 233: }
 15894  00221E  D135               	goto	i2l257
 15895  002220                     i2l7754:
 15896                           
 15897                           ;UI.c: 234: else if(enter){
 15898  002220  5069               	movf	_enter,w,c
 15899  002222  106A               	iorwf	_enter+1,w,c
 15900  002224  B4D8               	btfsc	status,2,c
 15901  002226  D131               	goto	i2l257
 15902                           
 15903                           ;UI.c: 235: change_state_to_menu_start();
 15904  002228  EC22  F023         	call	i2_change_state_to_menu_start	;wreg free
 15905                           
 15906                           ;UI.c: 236: }
 15907                           ;UI.c: 237: break;
 15908  00222C  D12E               	goto	i2l257
 15909  00222E                     i2l7758:
 15910                           
 15911                           ;UI.c: 240: if(up){
 15912  00222E  5077               	movf	_up,w,c
 15913  002230  1078               	iorwf	_up+1,w,c
 15914  002232  B4D8               	btfsc	status,2,c
 15915  002234  D003               	goto	i2l7762
 15916                           
 15917                           ;UI.c: 241: change_state_to_menu_11();
 15918  002236  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 15919                           
 15920                           ;UI.c: 242: }
 15921  00223A  D127               	goto	i2l257
 15922  00223C                     i2l7762:
 15923                           
 15924                           ;UI.c: 243: else if(down){
 15925  00223C  5067               	movf	_down,w,c
 15926  00223E  1068               	iorwf	_down+1,w,c
 15927  002240  B4D8               	btfsc	status,2,c
 15928  002242  D011               	goto	i2l7778
 15929                           
 15930                           ;UI.c: 244: change_state_to_menu_23();
 15931  002244  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 15932                           
 15933                           ;UI.c: 245: }
 15934  002248  D120               	goto	i2l257
 15935  00224A                     i2l7770:
 15936                           
 15937                           ;UI.c: 252: if(up){
 15938  00224A  5077               	movf	_up,w,c
 15939  00224C  1078               	iorwf	_up+1,w,c
 15940  00224E  B4D8               	btfsc	status,2,c
 15941  002250  D003               	goto	i2l7774
 15942                           
 15943                           ;UI.c: 253: change_state_to_menu_11();
 15944  002252  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 15945                           
 15946                           ;UI.c: 254: }
 15947  002256  D119               	goto	i2l257
 15948  002258                     i2l7774:
 15949                           
 15950                           ;UI.c: 255: else if(down){
 15951  002258  5067               	movf	_down,w,c
 15952  00225A  1068               	iorwf	_down+1,w,c
 15953  00225C  B4D8               	btfsc	status,2,c
 15954  00225E  D003               	goto	i2l7778
 15955                           
 15956                           ;UI.c: 256: change_state_to_menu_23();
 15957  002260  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 15958                           
 15959                           ;UI.c: 257: }
 15960  002264  D112               	goto	i2l257
 15961  002266                     i2l7778:
 15962                           
 15963                           ;UI.c: 258: else if(enter){
 15964  002266  5069               	movf	_enter,w,c
 15965  002268  106A               	iorwf	_enter+1,w,c
 15966  00226A  B4D8               	btfsc	status,2,c
 15967  00226C  D10E               	goto	i2l257
 15968                           
 15969                           ;UI.c: 259: machine_state = Sorting_state;
 15970  00226E  0E01               	movlw	1
 15971  002270  0100               	movlb	0	; () banked
 15972  002272  6FFC               	movwf	_machine_state& (0+255),b
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;UI.c: 260: }
 15976                           ;UI.c: 261: break;
 15977                           
 15978                           ; BSR set to: 0
 15979                           
 15980                           ; BSR set to: 0
 15981  002274  D10A               	goto	i2l257
 15982  002276                     i2l7782:
 15983                           
 15984                           ;UI.c: 264: if(up){
 15985  002276  5077               	movf	_up,w,c
 15986  002278  1078               	iorwf	_up+1,w,c
 15987  00227A  B4D8               	btfsc	status,2,c
 15988  00227C  D003               	goto	i2l7786
 15989                           
 15990                           ;UI.c: 265: change_state_to_menu_22();
 15991  00227E  ECB0  F021         	call	i2_change_state_to_menu_22	;wreg free
 15992                           
 15993                           ;UI.c: 266: }
 15994  002282  D103               	goto	i2l257
 15995  002284                     i2l7786:
 15996                           
 15997                           ;UI.c: 267: else if(down){
 15998  002284  5067               	movf	_down,w,c
 15999  002286  1068               	iorwf	_down+1,w,c
 16000  002288  B4D8               	btfsc	status,2,c
 16001  00228A  D003               	goto	i2l7790
 16002                           
 16003                           ;UI.c: 268: change_state_to_menu_11();
 16004  00228C  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 16005                           
 16006                           ;UI.c: 269: }
 16007  002290  D0FC               	goto	i2l257
 16008  002292                     i2l7790:
 16009                           
 16010                           ;UI.c: 270: else if(enter){
 16011  002292  5069               	movf	_enter,w,c
 16012  002294  106A               	iorwf	_enter+1,w,c
 16013  002296  B4D8               	btfsc	status,2,c
 16014  002298  D0F8               	goto	i2l257
 16015                           
 16016                           ;UI.c: 271: change_state_to_logs_11();
 16017  00229A  EC70  F022         	call	_change_state_to_logs_11	;wreg free
 16018                           
 16019                           ;UI.c: 272: }
 16020                           ;UI.c: 273: break;
 16021  00229E  D0F5               	goto	i2l257
 16022  0022A0                     i2l7794:
 16023                           
 16024                           ;UI.c: 276: if(up){
 16025  0022A0  5077               	movf	_up,w,c
 16026  0022A2  1078               	iorwf	_up+1,w,c
 16027  0022A4  B4D8               	btfsc	status,2,c
 16028  0022A6  D003               	goto	i2l7798
 16029                           
 16030                           ;UI.c: 277: change_state_to_logs_34();
 16031  0022A8  EC10  F022         	call	_change_state_to_logs_34	;wreg free
 16032                           
 16033                           ;UI.c: 278: }
 16034  0022AC  D0EE               	goto	i2l257
 16035  0022AE                     i2l7798:
 16036                           
 16037                           ;UI.c: 279: else if(down){
 16038  0022AE  5067               	movf	_down,w,c
 16039  0022B0  1068               	iorwf	_down+1,w,c
 16040  0022B2  B4D8               	btfsc	status,2,c
 16041  0022B4  D003               	goto	i2l7802
 16042                           
 16043                           ;UI.c: 280: change_state_to_logs_12();
 16044  0022B6  EC58  F022         	call	_change_state_to_logs_12	;wreg free
 16045                           
 16046                           ;UI.c: 281: }
 16047  0022BA  D0E7               	goto	i2l257
 16048  0022BC                     i2l7802:
 16049                           
 16050                           ;UI.c: 282: else if(enter){
 16051  0022BC  5069               	movf	_enter,w,c
 16052  0022BE  106A               	iorwf	_enter+1,w,c
 16053  0022C0  B4D8               	btfsc	status,2,c
 16054  0022C2  D007               	goto	i2l7806
 16055                           
 16056                           ;UI.c: 283: dispLogs(1);
 16057  0022C4  0E00               	movlw	0
 16058  0022C6  6E13               	movwf	dispLogs@myLog+1,c
 16059  0022C8  0E01               	movlw	1
 16060  0022CA  6E12               	movwf	dispLogs@myLog,c
 16061  0022CC  EC5C  F023         	call	_dispLogs	;wreg free
 16062                           
 16063                           ;UI.c: 284: }
 16064  0022D0  D0DC               	goto	i2l257
 16065  0022D2                     i2l7806:
 16066                           
 16067                           ;UI.c: 285: else if(back){
 16068  0022D2  505B               	movf	_back,w,c
 16069  0022D4  105C               	iorwf	_back+1,w,c
 16070  0022D6  B4D8               	btfsc	status,2,c
 16071  0022D8  D0D8               	goto	i2l257
 16072                           
 16073                           ;UI.c: 286: change_state_to_menu_23();
 16074  0022DA  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16075                           
 16076                           ;UI.c: 287: }
 16077                           ;UI.c: 288: break;
 16078  0022DE  D0D5               	goto	i2l257
 16079  0022E0                     i2l7810:
 16080                           
 16081                           ;UI.c: 291: if(up){
 16082  0022E0  5077               	movf	_up,w,c
 16083  0022E2  1078               	iorwf	_up+1,w,c
 16084  0022E4  B4D8               	btfsc	status,2,c
 16085  0022E6  D003               	goto	i2l7814
 16086                           
 16087                           ;UI.c: 292: change_state_to_logs_11();
 16088  0022E8  EC70  F022         	call	_change_state_to_logs_11	;wreg free
 16089                           
 16090                           ;UI.c: 293: }
 16091  0022EC  D0CE               	goto	i2l257
 16092  0022EE                     i2l7814:
 16093                           
 16094                           ;UI.c: 294: else if(down){
 16095  0022EE  5067               	movf	_down,w,c
 16096  0022F0  1068               	iorwf	_down+1,w,c
 16097  0022F2  B4D8               	btfsc	status,2,c
 16098  0022F4  D003               	goto	i2l7818
 16099                           
 16100                           ;UI.c: 295: change_state_to_logs_23();
 16101  0022F6  ECB6  F022         	call	_change_state_to_logs_23	;wreg free
 16102                           
 16103                           ;UI.c: 296: }
 16104  0022FA  D0C7               	goto	i2l257
 16105  0022FC                     i2l7818:
 16106                           
 16107                           ;UI.c: 297: else if(enter){
 16108  0022FC  5069               	movf	_enter,w,c
 16109  0022FE  106A               	iorwf	_enter+1,w,c
 16110  002300  B4D8               	btfsc	status,2,c
 16111  002302  D007               	goto	i2l7822
 16112                           
 16113                           ;UI.c: 298: dispLogs(2);
 16114  002304  0E00               	movlw	0
 16115  002306  6E13               	movwf	dispLogs@myLog+1,c
 16116  002308  0E02               	movlw	2
 16117  00230A  6E12               	movwf	dispLogs@myLog,c
 16118  00230C  EC5C  F023         	call	_dispLogs	;wreg free
 16119                           
 16120                           ;UI.c: 299: }
 16121  002310  D0BC               	goto	i2l257
 16122  002312                     i2l7822:
 16123                           
 16124                           ;UI.c: 300: else if(back){
 16125  002312  505B               	movf	_back,w,c
 16126  002314  105C               	iorwf	_back+1,w,c
 16127  002316  B4D8               	btfsc	status,2,c
 16128  002318  D0B8               	goto	i2l257
 16129                           
 16130                           ;UI.c: 301: change_state_to_menu_23();
 16131  00231A  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16132                           
 16133                           ;UI.c: 302: }
 16134                           ;UI.c: 303: break;
 16135  00231E  D0B5               	goto	i2l257
 16136  002320                     i2l7826:
 16137                           
 16138                           ;UI.c: 306: if(up){
 16139  002320  5077               	movf	_up,w,c
 16140  002322  1078               	iorwf	_up+1,w,c
 16141  002324  B4D8               	btfsc	status,2,c
 16142  002326  D003               	goto	i2l7830
 16143                           
 16144                           ;UI.c: 307: change_state_to_logs_11();
 16145  002328  EC70  F022         	call	_change_state_to_logs_11	;wreg free
 16146                           
 16147                           ;UI.c: 308: }
 16148  00232C  D0AE               	goto	i2l257
 16149  00232E                     i2l7830:
 16150                           
 16151                           ;UI.c: 309: else if(down){
 16152  00232E  5067               	movf	_down,w,c
 16153  002330  1068               	iorwf	_down+1,w,c
 16154  002332  B4D8               	btfsc	status,2,c
 16155  002334  D003               	goto	i2l7834
 16156                           
 16157                           ;UI.c: 310: change_state_to_logs_23();
 16158  002336  ECB6  F022         	call	_change_state_to_logs_23	;wreg free
 16159                           
 16160                           ;UI.c: 311: }
 16161  00233A  D0A7               	goto	i2l257
 16162  00233C                     i2l7834:
 16163                           
 16164                           ;UI.c: 312: else if(enter){
 16165  00233C  5069               	movf	_enter,w,c
 16166  00233E  106A               	iorwf	_enter+1,w,c
 16167  002340  B4D8               	btfsc	status,2,c
 16168  002342  D007               	goto	i2l7838
 16169                           
 16170                           ;UI.c: 313: dispLogs(2);
 16171  002344  0E00               	movlw	0
 16172  002346  6E13               	movwf	dispLogs@myLog+1,c
 16173  002348  0E02               	movlw	2
 16174  00234A  6E12               	movwf	dispLogs@myLog,c
 16175  00234C  EC5C  F023         	call	_dispLogs	;wreg free
 16176                           
 16177                           ;UI.c: 314: }
 16178  002350  D09C               	goto	i2l257
 16179  002352                     i2l7838:
 16180                           
 16181                           ;UI.c: 315: else if(back){
 16182  002352  505B               	movf	_back,w,c
 16183  002354  105C               	iorwf	_back+1,w,c
 16184  002356  B4D8               	btfsc	status,2,c
 16185  002358  D098               	goto	i2l257
 16186                           
 16187                           ;UI.c: 316: change_state_to_menu_23();
 16188  00235A  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16189                           
 16190                           ;UI.c: 317: }
 16191                           ;UI.c: 318: break;
 16192  00235E  D095               	goto	i2l257
 16193  002360                     i2l7842:
 16194                           
 16195                           ;UI.c: 321: if(up){
 16196  002360  5077               	movf	_up,w,c
 16197  002362  1078               	iorwf	_up+1,w,c
 16198  002364  B4D8               	btfsc	status,2,c
 16199  002366  D003               	goto	i2l7846
 16200                           
 16201                           ;UI.c: 322: change_state_to_logs_22();
 16202  002368  EC40  F022         	call	_change_state_to_logs_22	;wreg free
 16203                           
 16204                           ;UI.c: 323: }
 16205  00236C  D08E               	goto	i2l257
 16206  00236E                     i2l7846:
 16207                           
 16208                           ;UI.c: 324: else if(down){
 16209  00236E  5067               	movf	_down,w,c
 16210  002370  1068               	iorwf	_down+1,w,c
 16211  002372  B4D8               	btfsc	status,2,c
 16212  002374  D003               	goto	i2l7850
 16213                           
 16214                           ;UI.c: 325: change_state_to_logs_34();
 16215  002376  EC10  F022         	call	_change_state_to_logs_34	;wreg free
 16216                           
 16217                           ;UI.c: 326: }
 16218  00237A  D087               	goto	i2l257
 16219  00237C                     i2l7850:
 16220                           
 16221                           ;UI.c: 327: else if(enter){
 16222  00237C  5069               	movf	_enter,w,c
 16223  00237E  106A               	iorwf	_enter+1,w,c
 16224  002380  B4D8               	btfsc	status,2,c
 16225  002382  D007               	goto	i2l7854
 16226                           
 16227                           ;UI.c: 328: dispLogs(3);
 16228  002384  0E00               	movlw	0
 16229  002386  6E13               	movwf	dispLogs@myLog+1,c
 16230  002388  0E03               	movlw	3
 16231  00238A  6E12               	movwf	dispLogs@myLog,c
 16232  00238C  EC5C  F023         	call	_dispLogs	;wreg free
 16233                           
 16234                           ;UI.c: 329: }
 16235  002390  D07C               	goto	i2l257
 16236  002392                     i2l7854:
 16237                           
 16238                           ;UI.c: 330: else if(back){
 16239  002392  505B               	movf	_back,w,c
 16240  002394  105C               	iorwf	_back+1,w,c
 16241  002396  B4D8               	btfsc	status,2,c
 16242  002398  D078               	goto	i2l257
 16243                           
 16244                           ;UI.c: 331: change_state_to_menu_23();
 16245  00239A  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16246                           
 16247                           ;UI.c: 332: }
 16248                           ;UI.c: 333: break;
 16249  00239E  D075               	goto	i2l257
 16250  0023A0                     i2l7858:
 16251                           
 16252                           ;UI.c: 336: if(up){
 16253  0023A0  5077               	movf	_up,w,c
 16254  0023A2  1078               	iorwf	_up+1,w,c
 16255  0023A4  B4D8               	btfsc	status,2,c
 16256  0023A6  D003               	goto	i2l7862
 16257                           
 16258                           ;UI.c: 337: change_state_to_logs_22();
 16259  0023A8  EC40  F022         	call	_change_state_to_logs_22	;wreg free
 16260                           
 16261                           ;UI.c: 338: }
 16262  0023AC  D06E               	goto	i2l257
 16263  0023AE                     i2l7862:
 16264                           
 16265                           ;UI.c: 339: else if(down){
 16266  0023AE  5067               	movf	_down,w,c
 16267  0023B0  1068               	iorwf	_down+1,w,c
 16268  0023B2  B4D8               	btfsc	status,2,c
 16269  0023B4  D003               	goto	i2l7866
 16270                           
 16271                           ;UI.c: 340: change_state_to_logs_34();
 16272  0023B6  EC10  F022         	call	_change_state_to_logs_34	;wreg free
 16273                           
 16274                           ;UI.c: 341: }
 16275  0023BA  D067               	goto	i2l257
 16276  0023BC                     i2l7866:
 16277                           
 16278                           ;UI.c: 342: else if(enter){
 16279  0023BC  5069               	movf	_enter,w,c
 16280  0023BE  106A               	iorwf	_enter+1,w,c
 16281  0023C0  B4D8               	btfsc	status,2,c
 16282  0023C2  D007               	goto	i2l7870
 16283                           
 16284                           ;UI.c: 343: dispLogs(3);
 16285  0023C4  0E00               	movlw	0
 16286  0023C6  6E13               	movwf	dispLogs@myLog+1,c
 16287  0023C8  0E03               	movlw	3
 16288  0023CA  6E12               	movwf	dispLogs@myLog,c
 16289  0023CC  EC5C  F023         	call	_dispLogs	;wreg free
 16290                           
 16291                           ;UI.c: 344: }
 16292  0023D0  D05C               	goto	i2l257
 16293  0023D2                     i2l7870:
 16294                           
 16295                           ;UI.c: 345: else if(back){
 16296  0023D2  505B               	movf	_back,w,c
 16297  0023D4  105C               	iorwf	_back+1,w,c
 16298  0023D6  B4D8               	btfsc	status,2,c
 16299  0023D8  D058               	goto	i2l257
 16300                           
 16301                           ;UI.c: 346: change_state_to_menu_23();
 16302  0023DA  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16303                           
 16304                           ;UI.c: 347: }
 16305                           ;UI.c: 348: break;
 16306  0023DE  D055               	goto	i2l257
 16307  0023E0                     i2l7874:
 16308                           
 16309                           ;UI.c: 351: if(up){
 16310  0023E0  5077               	movf	_up,w,c
 16311  0023E2  1078               	iorwf	_up+1,w,c
 16312  0023E4  B4D8               	btfsc	status,2,c
 16313  0023E6  D003               	goto	i2l7878
 16314                           
 16315                           ;UI.c: 352: change_state_to_logs_33();
 16316  0023E8  EC28  F022         	call	_change_state_to_logs_33	;wreg free
 16317                           
 16318                           ;UI.c: 353: }
 16319  0023EC  D04E               	goto	i2l257
 16320  0023EE                     i2l7878:
 16321                           
 16322                           ;UI.c: 354: else if(down){
 16323  0023EE  5067               	movf	_down,w,c
 16324  0023F0  1068               	iorwf	_down+1,w,c
 16325  0023F2  B4D8               	btfsc	status,2,c
 16326  0023F4  D003               	goto	i2l7882
 16327                           
 16328                           ;UI.c: 355: change_state_to_logs_11();
 16329  0023F6  EC70  F022         	call	_change_state_to_logs_11	;wreg free
 16330                           
 16331                           ;UI.c: 356: }
 16332  0023FA  D047               	goto	i2l257
 16333  0023FC                     i2l7882:
 16334                           
 16335                           ;UI.c: 357: else if(enter){
 16336  0023FC  5069               	movf	_enter,w,c
 16337  0023FE  106A               	iorwf	_enter+1,w,c
 16338  002400  B4D8               	btfsc	status,2,c
 16339  002402  D007               	goto	i2l7886
 16340                           
 16341                           ;UI.c: 358: dispLogs(4);
 16342  002404  0E00               	movlw	0
 16343  002406  6E13               	movwf	dispLogs@myLog+1,c
 16344  002408  0E04               	movlw	4
 16345  00240A  6E12               	movwf	dispLogs@myLog,c
 16346  00240C  EC5C  F023         	call	_dispLogs	;wreg free
 16347                           
 16348                           ;UI.c: 359: }
 16349  002410  D03C               	goto	i2l257
 16350  002412                     i2l7886:
 16351                           
 16352                           ;UI.c: 360: else if(back){
 16353  002412  505B               	movf	_back,w,c
 16354  002414  105C               	iorwf	_back+1,w,c
 16355  002416  B4D8               	btfsc	status,2,c
 16356  002418  D038               	goto	i2l257
 16357                           
 16358                           ;UI.c: 361: change_state_to_menu_23();
 16359  00241A  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 16360                           
 16361                           ;UI.c: 367: }
 16362                           
 16363                           ;UI.c: 366: break;
 16364                           
 16365                           ;UI.c: 365: default:
 16366                           
 16367                           ;UI.c: 362: }
 16368                           ;UI.c: 363: break;
 16369  00241E  D035               	goto	i2l257
 16370  002420                     i2l7892:
 16371  002420  C0E0  F043         	movff	_cur_state,??_updateMenu
 16372  002424  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16373                           
 16374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16375                           ; Switch size 1, requested type "space"
 16376                           ; Number of cases is 3, Range of values is 0 to 4
 16377                           ; switch strategies available:
 16378                           ; Name         Instructions Cycles
 16379                           ; simple_byte           10     6 (average)
 16380                           ;	Chosen strategy is simple_byte
 16381  002428  5044               	movf	??_updateMenu+1,w,c
 16382  00242A  0A00               	xorlw	0	; case 0
 16383  00242C  B4D8               	btfsc	status,2,c
 16384  00242E  D007               	goto	i2l8480
 16385  002430  0A03               	xorlw	3	; case 3
 16386  002432  B4D8               	btfsc	status,2,c
 16387  002434  D015               	goto	i2l8482
 16388  002436  0A07               	xorlw	7	; case 4
 16389  002438  B4D8               	btfsc	status,2,c
 16390  00243A  D020               	goto	i2l8484
 16391  00243C  D026               	goto	i2l257
 16392  00243E                     i2l8480:
 16393                           
 16394                           ; Switch size 1, requested type "space"
 16395                           ; Number of cases is 5, Range of values is 0 to 23
 16396                           ; switch strategies available:
 16397                           ; Name         Instructions Cycles
 16398                           ; simple_byte           16     9 (average)
 16399                           ;	Chosen strategy is simple_byte
 16400  00243E  5043               	movf	??_updateMenu,w,c
 16401  002440  0A00               	xorlw	0	; case 0
 16402  002442  B4D8               	btfsc	status,2,c
 16403  002444  D6DC               	goto	i2l7744
 16404  002446  0A0B               	xorlw	11	; case 11
 16405  002448  B4D8               	btfsc	status,2,c
 16406  00244A  D6DC               	goto	i2l7746
 16407  00244C  0A07               	xorlw	7	; case 12
 16408  00244E  B4D8               	btfsc	status,2,c
 16409  002450  D6EE               	goto	i2l7758
 16410  002452  0A1A               	xorlw	26	; case 22
 16411  002454  B4D8               	btfsc	status,2,c
 16412  002456  D6F9               	goto	i2l7770
 16413  002458  0A01               	xorlw	1	; case 23
 16414  00245A  B4D8               	btfsc	status,2,c
 16415  00245C  D70C               	goto	i2l7782
 16416  00245E  D015               	goto	i2l257
 16417  002460                     i2l8482:
 16418                           
 16419                           ; Switch size 1, requested type "space"
 16420                           ; Number of cases is 4, Range of values is 243 to 255
 16421                           ; switch strategies available:
 16422                           ; Name         Instructions Cycles
 16423                           ; simple_byte           13     7 (average)
 16424                           ;	Chosen strategy is simple_byte
 16425  002460  5043               	movf	??_updateMenu,w,c
 16426  002462  0AF3               	xorlw	243	; case 243
 16427  002464  B4D8               	btfsc	status,2,c
 16428  002466  D71C               	goto	i2l7794
 16429  002468  0A07               	xorlw	7	; case 244
 16430  00246A  B4D8               	btfsc	status,2,c
 16431  00246C  D739               	goto	i2l7810
 16432  00246E  0A0A               	xorlw	10	; case 254
 16433  002470  B4D8               	btfsc	status,2,c
 16434  002472  D756               	goto	i2l7826
 16435  002474  0A01               	xorlw	1	; case 255
 16436  002476  B4D8               	btfsc	status,2,c
 16437  002478  D773               	goto	i2l7842
 16438  00247A  D007               	goto	i2l257
 16439  00247C                     i2l8484:
 16440                           
 16441                           ; Switch size 1, requested type "space"
 16442                           ; Number of cases is 2, Range of values is 9 to 10
 16443                           ; switch strategies available:
 16444                           ; Name         Instructions Cycles
 16445                           ; simple_byte            7     4 (average)
 16446                           ;	Chosen strategy is simple_byte
 16447  00247C  5043               	movf	??_updateMenu,w,c
 16448  00247E  0A09               	xorlw	9	; case 9
 16449  002480  B4D8               	btfsc	status,2,c
 16450  002482  D78E               	goto	i2l7858
 16451  002484  0A03               	xorlw	3	; case 10
 16452  002486  B4D8               	btfsc	status,2,c
 16453  002488  D7AB               	goto	i2l7874
 16454  00248A                     i2l257:
 16455                           
 16456                           ;UI.c: 368: }
 16457                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16458  00248A  8EF2               	bsf	intcon,7,c	;volatile
 16459  00248C  0012               	return		;funcret
 16460  00248E                     __end_of_updateMenu:
 16461                           	opt stack 0
 16462                           pclatu	equ	0xFFB
 16463                           pclath	equ	0xFFA
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           intcon2	equ	0xFF1
 16472                           intcon3	equ	0xFF0
 16473                           indf0	equ	0xFEF
 16474                           postinc0	equ	0xFEE
 16475                           fsr0h	equ	0xFEA
 16476                           fsr0l	equ	0xFE9
 16477                           wreg	equ	0xFE8
 16478                           postdec1	equ	0xFE5
 16479                           fsr1h	equ	0xFE2
 16480                           fsr1l	equ	0xFE1
 16481                           indf2	equ	0xFDF
 16482                           postinc2	equ	0xFDE
 16483                           postdec2	equ	0xFDD
 16484                           fsr2h	equ	0xFDA
 16485                           fsr2l	equ	0xFD9
 16486                           status	equ	0xFD8
 16487                           
 16488 ;; *************** function i2_change_state_to_menu_start *****************
 16489 ;; Defined at:
 16490 ;;		line 474 in file "UI.c"
 16491 ;; Parameters:    Size  Location     Type
 16492 ;;		None
 16493 ;; Auto vars:     Size  Location     Type
 16494 ;;		None
 16495 ;; Return value:  Size  Location     Type
 16496 ;;                  1    wreg      void 
 16497 ;; Registers used:
 16498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16499 ;; Tracked objects:
 16500 ;;		On entry : 0/0
 16501 ;;		On exit  : 0/0
 16502 ;;		Unchanged: 0/0
 16503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;Total ram usage:        0 bytes
 16509 ;; Hardware stack levels used:    1
 16510 ;; Hardware stack levels required when called:    4
 16511 ;; This function calls:
 16512 ;;		i2_lcdInst
 16513 ;;		i2_printRTC
 16514 ;;		i2_printf
 16515 ;; This function is called by:
 16516 ;;		_updateMenu
 16517 ;; This function uses a non-reentrant model
 16518 ;;
 16519                           
 16520                           	psect	text59
 16521  004644                     __ptext59:
 16522                           	opt stack 0
 16523  004644                     i2_change_state_to_menu_start:
 16524                           	opt stack 18
 16525                           
 16526                           ;UI.c: 475: cur_state = 0;
 16527                           
 16528                           ;incstack = 0
 16529  004644  0E00               	movlw	0
 16530  004646  0100               	movlb	0	; () banked
 16531  004648  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16532  00464A  0E00               	movlw	0
 16533  00464C  6FE0               	movwf	_cur_state& (0+255),b
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;UI.c: 477: lcdInst(0b10000000);;
 16537  00464E  0E80               	movlw	128
 16538  004650  ECEA  F023         	call	i2_lcdInst
 16539                           
 16540                           ;UI.c: 478: printRTC();
 16541  004654  EC47  F012         	call	i2_printRTC	;wreg free
 16542                           
 16543                           ;UI.c: 479: lcdInst(0b11000000);;
 16544  004658  0EC0               	movlw	192
 16545  00465A  ECEA  F023         	call	i2_lcdInst
 16546                           
 16547                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16548  00465E  0E0D               	movlw	low STR_30
 16549  004660  6E0D               	movwf	i2printf@f,c
 16550  004662  0EFE               	movlw	high STR_30
 16551  004664  6E0E               	movwf	i2printf@f+1,c
 16552  004666  ECD4  F00A         	call	i2_printf	;wreg free
 16553  00466A  0012               	return		;funcret
 16554  00466C                     __end_ofi2_change_state_to_menu_start:
 16555                           	opt stack 0
 16556                           pclatu	equ	0xFFB
 16557                           pclath	equ	0xFFA
 16558                           tblptru	equ	0xFF8
 16559                           tblptrh	equ	0xFF7
 16560                           tblptrl	equ	0xFF6
 16561                           tablat	equ	0xFF5
 16562                           prodh	equ	0xFF4
 16563                           prodl	equ	0xFF3
 16564                           intcon	equ	0xFF2
 16565                           intcon2	equ	0xFF1
 16566                           intcon3	equ	0xFF0
 16567                           indf0	equ	0xFEF
 16568                           postinc0	equ	0xFEE
 16569                           fsr0h	equ	0xFEA
 16570                           fsr0l	equ	0xFE9
 16571                           wreg	equ	0xFE8
 16572                           postdec1	equ	0xFE5
 16573                           fsr1h	equ	0xFE2
 16574                           fsr1l	equ	0xFE1
 16575                           indf2	equ	0xFDF
 16576                           postinc2	equ	0xFDE
 16577                           postdec2	equ	0xFDD
 16578                           fsr2h	equ	0xFDA
 16579                           fsr2l	equ	0xFD9
 16580                           status	equ	0xFD8
 16581                           
 16582 ;; *************** function i2_printRTC *****************
 16583 ;; Defined at:
 16584 ;;		line 63 in file "RTC.c"
 16585 ;; Parameters:    Size  Location     Type
 16586 ;;		None
 16587 ;; Auto vars:     Size  Location     Type
 16588 ;;  printRTC       14   44[COMRAM] int [7]
 16589 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16590 ;;  printRTC        2   64[COMRAM] int 
 16591 ;;  printRTC        2   58[COMRAM] int 
 16592 ;; Return value:  Size  Location     Type
 16593 ;;                  1    wreg      void 
 16594 ;; Registers used:
 16595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16596 ;; Tracked objects:
 16597 ;;		On entry : 0/0
 16598 ;;		On exit  : 0/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16602 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16603 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16604 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16605 ;;Total ram usage:       25 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; Hardware stack levels required when called:    3
 16608 ;; This function calls:
 16609 ;;		i2_getRTC
 16610 ;;		i2_lcdInst
 16611 ;;		i2_printf
 16612 ;;		i2_strcpy
 16613 ;; This function is called by:
 16614 ;;		i2_change_state_to_menu_start
 16615 ;; This function uses a non-reentrant model
 16616 ;;
 16617                           
 16618                           	psect	text60
 16619  00248E                     __ptext60:
 16620                           	opt stack 0
 16621  00248E                     i2_printRTC:
 16622                           	opt stack 18
 16623                           
 16624                           ;RTC.c: 64: getRTC();
 16625                           
 16626                           ;incstack = 0
 16627  00248E  EC9A  F01E         	call	i2_getRTC	;wreg free
 16628                           
 16629                           ;RTC.c: 65: char month[] = "MMM";
 16630  002492  C133  F03D         	movff	printRTC@F3214,i2printRTC@month
 16631  002496  C134  F03E         	movff	printRTC@F3214+1,i2printRTC@month+1
 16632  00249A  C135  F03F         	movff	printRTC@F3214+2,i2printRTC@month+2
 16633  00249E  C136  F040         	movff	printRTC@F3214+3,i2printRTC@month+3
 16634                           
 16635                           ;RTC.c: 66: int INT_time[7];
 16636                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16637  0024A2  0E00               	movlw	0
 16638  0024A4  6E42               	movwf	i2printRTC@i+1,c
 16639  0024A6  0E00               	movlw	0
 16640  0024A8  6E41               	movwf	i2printRTC@i,c
 16641  0024AA  BE42               	btfsc	i2printRTC@i+1,7,c
 16642  0024AC  D006               	goto	i2l6130
 16643  0024AE  5042               	movf	i2printRTC@i+1,w,c
 16644  0024B0  E135               	bnz	i2l602
 16645  0024B2  0E07               	movlw	7
 16646  0024B4  5C41               	subwf	i2printRTC@i,w,c
 16647  0024B6  B0D8               	btfsc	status,0,c
 16648  0024B8  D031               	goto	i2l602
 16649  0024BA                     i2l6130:
 16650                           
 16651                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16652  0024BA  0E24               	movlw	low _time
 16653  0024BC  2441               	addwf	i2printRTC@i,w,c
 16654  0024BE  6ED9               	movwf	fsr2l,c
 16655  0024C0  0E01               	movlw	high _time
 16656  0024C2  2042               	addwfc	i2printRTC@i+1,w,c
 16657  0024C4  6EDA               	movwf	fsr2h,c
 16658  0024C6  50DF               	movf	indf2,w,c
 16659  0024C8  6E2A               	movwf	??i2_printRTC& (0+255),c
 16660  0024CA  3A2A               	swapf	??i2_printRTC,f,c
 16661  0024CC  0E0F               	movlw	15
 16662  0024CE  162A               	andwf	??i2_printRTC,f,c
 16663  0024D0  0E0F               	movlw	15
 16664  0024D2  162A               	andwf	??i2_printRTC,f,c
 16665  0024D4  502A               	movf	??i2_printRTC,w,c
 16666  0024D6  0D0A               	mullw	10
 16667  0024D8  0E24               	movlw	low _time
 16668  0024DA  2441               	addwf	i2printRTC@i,w,c
 16669  0024DC  6ED9               	movwf	fsr2l,c
 16670  0024DE  0E01               	movlw	high _time
 16671  0024E0  2042               	addwfc	i2printRTC@i+1,w,c
 16672  0024E2  6EDA               	movwf	fsr2h,c
 16673  0024E4  50DF               	movf	indf2,w,c
 16674  0024E6  0B0F               	andlw	15
 16675  0024E8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16676  0024EA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16677  0024EC  50F3               	movf	prodl,w,c
 16678  0024EE  262B               	addwf	??i2_printRTC+1,f,c
 16679  0024F0  50F4               	movf	prodh,w,c
 16680  0024F2  222C               	addwfc	??i2_printRTC+2,f,c
 16681  0024F4  90D8               	bcf	status,0,c
 16682  0024F6  3441               	rlcf	i2printRTC@i,w,c
 16683  0024F8  6ED9               	movwf	fsr2l,c
 16684  0024FA  3442               	rlcf	i2printRTC@i+1,w,c
 16685  0024FC  6EDA               	movwf	fsr2h,c
 16686  0024FE  0E2D               	movlw	low i2printRTC@INT_time
 16687  002500  26D9               	addwf	fsr2l,f,c
 16688  002502  0E00               	movlw	high i2printRTC@INT_time
 16689  002504  22DA               	addwfc	fsr2h,f,c
 16690  002506  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16691  00250A  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16692  00250E  4A41               	infsnz	i2printRTC@i,f,c
 16693  002510  2A42               	incf	i2printRTC@i+1,f,c
 16694  002512  BE42               	btfsc	i2printRTC@i+1,7,c
 16695  002514  D7D2               	goto	i2l6130
 16696  002516  5042               	movf	i2printRTC@i+1,w,c
 16697  002518  E101               	bnz	i2u468_40
 16698  00251A  D7CB               	goto	L10
 16699  00251C                     i2u468_40:
 16700  00251C                     i2l602:
 16701                           
 16702                           ;RTC.c: 69: }
 16703                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16704  00251C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16705  002520  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16706                           
 16707                           ;RTC.c: 71: switch(RTC_month){
 16708  002524  D084               	goto	i2l6162
 16709  002526                     i2l6136:
 16710                           
 16711                           ;RTC.c: 73: strcpy(month, "JAN");
 16712  002526  0E3D               	movlw	low i2printRTC@month
 16713  002528  6E01               	movwf	i2strcpy@to,c
 16714  00252A  0E00               	movlw	high i2printRTC@month
 16715  00252C  6E02               	movwf	i2strcpy@to+1,c
 16716  00252E  0EDB               	movlw	low STR_8
 16717  002530  6E03               	movwf	i2strcpy@from,c
 16718  002532  0EFF               	movlw	high STR_8
 16719  002534  6E04               	movwf	i2strcpy@from+1,c
 16720  002536  EC97  F021         	call	i2_strcpy	;wreg free
 16721                           
 16722                           ;RTC.c: 74: break;
 16723  00253A  D0A6               	goto	i2l6164
 16724  00253C                     i2l6138:
 16725                           
 16726                           ;RTC.c: 76: strcpy(month, "FEB");
 16727  00253C  0E3D               	movlw	low i2printRTC@month
 16728  00253E  6E01               	movwf	i2strcpy@to,c
 16729  002540  0E00               	movlw	high i2printRTC@month
 16730  002542  6E02               	movwf	i2strcpy@to+1,c
 16731  002544  0ECB               	movlw	low STR_9
 16732  002546  6E03               	movwf	i2strcpy@from,c
 16733  002548  0EFF               	movlw	high STR_9
 16734  00254A  6E04               	movwf	i2strcpy@from+1,c
 16735  00254C  EC97  F021         	call	i2_strcpy	;wreg free
 16736                           
 16737                           ;RTC.c: 77: break;
 16738  002550  D09B               	goto	i2l6164
 16739  002552                     i2l6140:
 16740                           
 16741                           ;RTC.c: 79: strcpy(month, "MAR");
 16742  002552  0E3D               	movlw	low i2printRTC@month
 16743  002554  6E01               	movwf	i2strcpy@to,c
 16744  002556  0E00               	movlw	high i2printRTC@month
 16745  002558  6E02               	movwf	i2strcpy@to+1,c
 16746  00255A  0EE7               	movlw	low STR_10
 16747  00255C  6E03               	movwf	i2strcpy@from,c
 16748  00255E  0EFF               	movlw	high STR_10
 16749  002560  6E04               	movwf	i2strcpy@from+1,c
 16750  002562  EC97  F021         	call	i2_strcpy	;wreg free
 16751                           
 16752                           ;RTC.c: 80: break;
 16753  002566  D090               	goto	i2l6164
 16754  002568                     i2l6142:
 16755                           
 16756                           ;RTC.c: 82: strcpy(month, "APR");
 16757  002568  0E3D               	movlw	low i2printRTC@month
 16758  00256A  6E01               	movwf	i2strcpy@to,c
 16759  00256C  0E00               	movlw	high i2printRTC@month
 16760  00256E  6E02               	movwf	i2strcpy@to+1,c
 16761  002570  0EEB               	movlw	low STR_11
 16762  002572  6E03               	movwf	i2strcpy@from,c
 16763  002574  0EFF               	movlw	high STR_11
 16764  002576  6E04               	movwf	i2strcpy@from+1,c
 16765  002578  EC97  F021         	call	i2_strcpy	;wreg free
 16766                           
 16767                           ;RTC.c: 83: break;
 16768  00257C  D085               	goto	i2l6164
 16769  00257E                     i2l6144:
 16770                           
 16771                           ;RTC.c: 85: strcpy(month, "MAY");
 16772  00257E  0E3D               	movlw	low i2printRTC@month
 16773  002580  6E01               	movwf	i2strcpy@to,c
 16774  002582  0E00               	movlw	high i2printRTC@month
 16775  002584  6E02               	movwf	i2strcpy@to+1,c
 16776  002586  0EFB               	movlw	low STR_12
 16777  002588  6E03               	movwf	i2strcpy@from,c
 16778  00258A  0EFF               	movlw	high STR_12
 16779  00258C  6E04               	movwf	i2strcpy@from+1,c
 16780  00258E  EC97  F021         	call	i2_strcpy	;wreg free
 16781                           
 16782                           ;RTC.c: 86: break;
 16783  002592  D07A               	goto	i2l6164
 16784  002594                     i2l6146:
 16785                           
 16786                           ;RTC.c: 88: strcpy(month, "JUN");
 16787  002594  0E3D               	movlw	low i2printRTC@month
 16788  002596  6E01               	movwf	i2strcpy@to,c
 16789  002598  0E00               	movlw	high i2printRTC@month
 16790  00259A  6E02               	movwf	i2strcpy@to+1,c
 16791  00259C  0EDF               	movlw	low STR_13
 16792  00259E  6E03               	movwf	i2strcpy@from,c
 16793  0025A0  0EFF               	movlw	high STR_13
 16794  0025A2  6E04               	movwf	i2strcpy@from+1,c
 16795  0025A4  EC97  F021         	call	i2_strcpy	;wreg free
 16796                           
 16797                           ;RTC.c: 89: break;
 16798  0025A8  D06F               	goto	i2l6164
 16799  0025AA                     i2l6148:
 16800                           
 16801                           ;RTC.c: 91: strcpy(month, "JUL");
 16802  0025AA  0E3D               	movlw	low i2printRTC@month
 16803  0025AC  6E01               	movwf	i2strcpy@to,c
 16804  0025AE  0E00               	movlw	high i2printRTC@month
 16805  0025B0  6E02               	movwf	i2strcpy@to+1,c
 16806  0025B2  0ED7               	movlw	low STR_14
 16807  0025B4  6E03               	movwf	i2strcpy@from,c
 16808  0025B6  0EFF               	movlw	high STR_14
 16809  0025B8  6E04               	movwf	i2strcpy@from+1,c
 16810  0025BA  EC97  F021         	call	i2_strcpy	;wreg free
 16811                           
 16812                           ;RTC.c: 92: break;
 16813  0025BE  D064               	goto	i2l6164
 16814  0025C0                     i2l6150:
 16815                           
 16816                           ;RTC.c: 94: strcpy(month, "AUG");
 16817  0025C0  0E3D               	movlw	low i2printRTC@month
 16818  0025C2  6E01               	movwf	i2strcpy@to,c
 16819  0025C4  0E00               	movlw	high i2printRTC@month
 16820  0025C6  6E02               	movwf	i2strcpy@to+1,c
 16821  0025C8  0ED3               	movlw	low STR_15
 16822  0025CA  6E03               	movwf	i2strcpy@from,c
 16823  0025CC  0EFF               	movlw	high STR_15
 16824  0025CE  6E04               	movwf	i2strcpy@from+1,c
 16825  0025D0  EC97  F021         	call	i2_strcpy	;wreg free
 16826                           
 16827                           ;RTC.c: 95: break;
 16828  0025D4  D059               	goto	i2l6164
 16829  0025D6                     i2l6152:
 16830                           
 16831                           ;RTC.c: 97: strcpy(month, "SEP");
 16832  0025D6  0E3D               	movlw	low i2printRTC@month
 16833  0025D8  6E01               	movwf	i2strcpy@to,c
 16834  0025DA  0E00               	movlw	high i2printRTC@month
 16835  0025DC  6E02               	movwf	i2strcpy@to+1,c
 16836  0025DE  0EE3               	movlw	low STR_16
 16837  0025E0  6E03               	movwf	i2strcpy@from,c
 16838  0025E2  0EFF               	movlw	high STR_16
 16839  0025E4  6E04               	movwf	i2strcpy@from+1,c
 16840  0025E6  EC97  F021         	call	i2_strcpy	;wreg free
 16841                           
 16842                           ;RTC.c: 98: break;
 16843  0025EA  D04E               	goto	i2l6164
 16844  0025EC                     i2l6154:
 16845                           
 16846                           ;RTC.c: 100: strcpy(month, "OCT");
 16847  0025EC  0E3D               	movlw	low i2printRTC@month
 16848  0025EE  6E01               	movwf	i2strcpy@to,c
 16849  0025F0  0E00               	movlw	high i2printRTC@month
 16850  0025F2  6E02               	movwf	i2strcpy@to+1,c
 16851  0025F4  0EF3               	movlw	low STR_17
 16852  0025F6  6E03               	movwf	i2strcpy@from,c
 16853  0025F8  0EFF               	movlw	high STR_17
 16854  0025FA  6E04               	movwf	i2strcpy@from+1,c
 16855  0025FC  EC97  F021         	call	i2_strcpy	;wreg free
 16856                           
 16857                           ;RTC.c: 101: break;
 16858  002600  D043               	goto	i2l6164
 16859  002602                     i2l6156:
 16860                           
 16861                           ;RTC.c: 103: strcpy(month, "NOV");
 16862  002602  0E3D               	movlw	low i2printRTC@month
 16863  002604  6E01               	movwf	i2strcpy@to,c
 16864  002606  0E00               	movlw	high i2printRTC@month
 16865  002608  6E02               	movwf	i2strcpy@to+1,c
 16866  00260A  0EF7               	movlw	low STR_18
 16867  00260C  6E03               	movwf	i2strcpy@from,c
 16868  00260E  0EFF               	movlw	high STR_18
 16869  002610  6E04               	movwf	i2strcpy@from+1,c
 16870  002612  EC97  F021         	call	i2_strcpy	;wreg free
 16871                           
 16872                           ;RTC.c: 104: break;
 16873  002616  D038               	goto	i2l6164
 16874  002618                     i2l6158:
 16875                           
 16876                           ;RTC.c: 106: strcpy(month, "DEC");
 16877  002618  0E3D               	movlw	low i2printRTC@month
 16878  00261A  6E01               	movwf	i2strcpy@to,c
 16879  00261C  0E00               	movlw	high i2printRTC@month
 16880  00261E  6E02               	movwf	i2strcpy@to+1,c
 16881  002620  0ECF               	movlw	low STR_19
 16882  002622  6E03               	movwf	i2strcpy@from,c
 16883  002624  0EFF               	movlw	high STR_19
 16884  002626  6E04               	movwf	i2strcpy@from+1,c
 16885  002628  EC97  F021         	call	i2_strcpy	;wreg free
 16886                           
 16887                           ;RTC.c: 108: }
 16888                           
 16889                           ;RTC.c: 107: break;
 16890  00262C  D02D               	goto	i2l6164
 16891  00262E                     i2l6162:
 16892  00262E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16893  002632  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16894                           
 16895                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16896                           ; Switch size 1, requested type "space"
 16897                           ; Number of cases is 1, Range of values is 0 to 0
 16898                           ; switch strategies available:
 16899                           ; Name         Instructions Cycles
 16900                           ; simple_byte            4     3 (average)
 16901                           ;	Chosen strategy is simple_byte
 16902  002636  502B               	movf	??i2_printRTC+1,w,c
 16903  002638  0A00               	xorlw	0	; case 0
 16904  00263A  A4D8               	btfss	status,2,c
 16905  00263C  D025               	goto	i2l6164
 16906                           
 16907                           ; Switch size 1, requested type "space"
 16908                           ; Number of cases is 12, Range of values is 1 to 12
 16909                           ; switch strategies available:
 16910                           ; Name         Instructions Cycles
 16911                           ; simple_byte           37    19 (average)
 16912                           ;	Chosen strategy is simple_byte
 16913  00263E  502A               	movf	??i2_printRTC,w,c
 16914  002640  0A01               	xorlw	1	; case 1
 16915  002642  B4D8               	btfsc	status,2,c
 16916  002644  D770               	goto	i2l6136
 16917  002646  0A03               	xorlw	3	; case 2
 16918  002648  B4D8               	btfsc	status,2,c
 16919  00264A  D778               	goto	i2l6138
 16920  00264C  0A01               	xorlw	1	; case 3
 16921  00264E  B4D8               	btfsc	status,2,c
 16922  002650  D780               	goto	i2l6140
 16923  002652  0A07               	xorlw	7	; case 4
 16924  002654  B4D8               	btfsc	status,2,c
 16925  002656  D788               	goto	i2l6142
 16926  002658  0A01               	xorlw	1	; case 5
 16927  00265A  B4D8               	btfsc	status,2,c
 16928  00265C  D790               	goto	i2l6144
 16929  00265E  0A03               	xorlw	3	; case 6
 16930  002660  B4D8               	btfsc	status,2,c
 16931  002662  D798               	goto	i2l6146
 16932  002664  0A01               	xorlw	1	; case 7
 16933  002666  B4D8               	btfsc	status,2,c
 16934  002668  D7A0               	goto	i2l6148
 16935  00266A  0A0F               	xorlw	15	; case 8
 16936  00266C  B4D8               	btfsc	status,2,c
 16937  00266E  D7A8               	goto	i2l6150
 16938  002670  0A01               	xorlw	1	; case 9
 16939  002672  B4D8               	btfsc	status,2,c
 16940  002674  D7B0               	goto	i2l6152
 16941  002676  0A03               	xorlw	3	; case 10
 16942  002678  B4D8               	btfsc	status,2,c
 16943  00267A  D7B8               	goto	i2l6154
 16944  00267C  0A01               	xorlw	1	; case 11
 16945  00267E  B4D8               	btfsc	status,2,c
 16946  002680  D7C0               	goto	i2l6156
 16947  002682  0A07               	xorlw	7	; case 12
 16948  002684  B4D8               	btfsc	status,2,c
 16949  002686  D7C8               	goto	i2l6158
 16950  002688                     i2l6164:
 16951                           
 16952                           ;RTC.c: 109: lcdInst(0b10000000);;
 16953  002688  0E80               	movlw	128
 16954  00268A  ECEA  F023         	call	i2_lcdInst
 16955                           
 16956                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16957  00268E  0E30               	movlw	low STR_21
 16958  002690  6E0D               	movwf	i2printf@f,c
 16959  002692  0EFB               	movlw	high STR_21
 16960  002694  6E0E               	movwf	i2printf@f+1,c
 16961  002696  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16962  00269A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16963  00269E  0E3D               	movlw	low i2printRTC@month
 16964  0026A0  6E11               	movwf	?i2_printf+4,c
 16965  0026A2  0E00               	movlw	high i2printRTC@month
 16966  0026A4  6E12               	movwf	?i2_printf+5,c
 16967  0026A6  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16968  0026AA  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16969  0026AE  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16970  0026B2  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16971  0026B6  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16972  0026BA  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16973  0026BE  ECD4  F00A         	call	i2_printf	;wreg free
 16974  0026C2  0012               	return		;funcret
 16975  0026C4                     __end_ofi2_printRTC:
 16976                           	opt stack 0
 16977                           pclatu	equ	0xFFB
 16978                           pclath	equ	0xFFA
 16979                           tblptru	equ	0xFF8
 16980                           tblptrh	equ	0xFF7
 16981                           tblptrl	equ	0xFF6
 16982                           tablat	equ	0xFF5
 16983                           prodh	equ	0xFF4
 16984                           prodl	equ	0xFF3
 16985                           intcon	equ	0xFF2
 16986                           intcon2	equ	0xFF1
 16987                           intcon3	equ	0xFF0
 16988                           indf0	equ	0xFEF
 16989                           postinc0	equ	0xFEE
 16990                           fsr0h	equ	0xFEA
 16991                           fsr0l	equ	0xFE9
 16992                           wreg	equ	0xFE8
 16993                           postdec1	equ	0xFE5
 16994                           fsr1h	equ	0xFE2
 16995                           fsr1l	equ	0xFE1
 16996                           indf2	equ	0xFDF
 16997                           postinc2	equ	0xFDE
 16998                           postdec2	equ	0xFDD
 16999                           fsr2h	equ	0xFDA
 17000                           fsr2l	equ	0xFD9
 17001                           status	equ	0xFD8
 17002                           
 17003 ;; *************** function i2_strcpy *****************
 17004 ;; Defined at:
 17005 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17006 ;; Parameters:    Size  Location     Type
 17007 ;;  to              2    0[COMRAM] PTR unsigned char 
 17008 ;;		 -> printRTC@month(4), UI@month(4), 
 17009 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17010 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17011 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17012 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17013 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17014 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17015 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17016 ;;		 -> STR_8(4), 
 17017 ;; Auto vars:     Size  Location     Type
 17018 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17019 ;;		 -> printRTC@month(4), UI@month(4), 
 17020 ;; Return value:  Size  Location     Type
 17021 ;;                  2    0[COMRAM] PTR unsigned char 
 17022 ;; Registers used:
 17023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17033 ;;Total ram usage:        6 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; This function calls:
 17036 ;;		Nothing
 17037 ;; This function is called by:
 17038 ;;		i2_printRTC
 17039 ;; This function uses a non-reentrant model
 17040 ;;
 17041                           
 17042                           	psect	text61
 17043  00432E                     __ptext61:
 17044                           	opt stack 0
 17045  00432E                     i2_strcpy:
 17046                           	opt stack 20
 17047                           
 17048                           ;incstack = 0
 17049  00432E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17050  004332  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17051  004336  D004               	goto	i2l5804
 17052  004338                     i2l5802:
 17053  004338  4A05               	infsnz	i2strcpy@cp,f,c
 17054  00433A  2A06               	incf	i2strcpy@cp+1,f,c
 17055  00433C  4A03               	infsnz	i2strcpy@from,f,c
 17056  00433E  2A04               	incf	i2strcpy@from+1,f,c
 17057  004340                     i2l5804:
 17058  004340  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17059  004344  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17060  004348                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17061  004348  6AF8               	clrf	tblptru,c
 17062  00434A                     	endif
 17063  00434A                     	if	0	;tblptru may be non-zero
 17064  00434A                     	endif
 17065  00434A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17066  00434E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17067  004352  0008               	tblrd		*
 17068  004354  CFF5 FFDF          	movff	tablat,indf2
 17069  004358  50DF               	movf	indf2,w,c
 17070  00435A  B4D8               	btfsc	status,2,c
 17071  00435C  0012               	return	
 17072  00435E  D7EC               	goto	i2l5802
 17073  004360                     __end_ofi2_strcpy:
 17074                           	opt stack 0
 17075                           pclatu	equ	0xFFB
 17076                           pclath	equ	0xFFA
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           intcon2	equ	0xFF1
 17085                           intcon3	equ	0xFF0
 17086                           indf0	equ	0xFEF
 17087                           postinc0	equ	0xFEE
 17088                           fsr0h	equ	0xFEA
 17089                           fsr0l	equ	0xFE9
 17090                           wreg	equ	0xFE8
 17091                           postdec1	equ	0xFE5
 17092                           fsr1h	equ	0xFE2
 17093                           fsr1l	equ	0xFE1
 17094                           indf2	equ	0xFDF
 17095                           postinc2	equ	0xFDE
 17096                           postdec2	equ	0xFDD
 17097                           fsr2h	equ	0xFDA
 17098                           fsr2l	equ	0xFD9
 17099                           status	equ	0xFD8
 17100                           
 17101 ;; *************** function _inputHandler *****************
 17102 ;; Defined at:
 17103 ;;		line 372 in file "UI.c"
 17104 ;; Parameters:    Size  Location     Type
 17105 ;;		None
 17106 ;; Auto vars:     Size  Location     Type
 17107 ;;		None
 17108 ;; Return value:  Size  Location     Type
 17109 ;;                  2   41[COMRAM] int 
 17110 ;; Registers used:
 17111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17112 ;; Tracked objects:
 17113 ;;		On entry : 0/0
 17114 ;;		On exit  : 0/0
 17115 ;;		Unchanged: 0/0
 17116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17121 ;;Total ram usage:        4 bytes
 17122 ;; Hardware stack levels used:    1
 17123 ;; Hardware stack levels required when called:    4
 17124 ;; This function calls:
 17125 ;;		_change_state_to_logs_11
 17126 ;;		_change_state_to_logs_12
 17127 ;;		_change_state_to_logs_22
 17128 ;;		_change_state_to_logs_23
 17129 ;;		_change_state_to_logs_33
 17130 ;;		_change_state_to_logs_34
 17131 ;;		_change_state_to_menu_11
 17132 ;;		_change_state_to_menu_23
 17133 ;;		i2_change_state_to_menu_12
 17134 ;;		i2_change_state_to_menu_22
 17135 ;; This function is called by:
 17136 ;;		_updateMenu
 17137 ;; This function uses a non-reentrant model
 17138 ;;
 17139                           
 17140                           	psect	text62
 17141  0028B6                     __ptext62:
 17142                           	opt stack 0
 17143  0028B6                     _inputHandler:
 17144                           	opt stack 18
 17145                           
 17146                           ;UI.c: 377: if(firstboot){
 17147                           
 17148                           ;incstack = 0
 17149  0028B6  5075               	movf	_firstboot,w,c
 17150  0028B8  1076               	iorwf	_firstboot+1,w,c
 17151  0028BA  B4D8               	btfsc	status,2,c
 17152  0028BC  D00B               	goto	i2l6232
 17153                           
 17154                           ;UI.c: 378: change_state_to_menu_11();
 17155  0028BE  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 17156                           
 17157                           ;UI.c: 379: firstboot = 0;
 17158  0028C2  0E00               	movlw	0
 17159  0028C4  6E76               	movwf	_firstboot+1,c
 17160  0028C6  0E00               	movlw	0
 17161  0028C8  6E75               	movwf	_firstboot,c
 17162                           
 17163                           ;UI.c: 380: return 0;
 17164  0028CA  0E00               	movlw	0
 17165  0028CC  6E2B               	movwf	?_inputHandler+1,c
 17166  0028CE  0E00               	movlw	0
 17167  0028D0  6E2A               	movwf	?_inputHandler,c
 17168  0028D2  0012               	return	
 17169  0028D4                     i2l6232:
 17170                           
 17171                           ;UI.c: 381: }
 17172                           ;UI.c: 382: if (logstate){
 17173  0028D4  0100               	movlb	0	; () banked
 17174  0028D6  51F6               	movf	_logstate& (0+255),w,b
 17175  0028D8  0100               	movlb	0	; () banked
 17176  0028DA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17177  0028DC  B4D8               	btfsc	status,2,c
 17178  0028DE  D0C7               	goto	i2l6350
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17182  0028E0  0E43               	movlw	67
 17183  0028E2  187D               	xorwf	_input,w,c	;volatile
 17184  0028E4  A4D8               	btfss	status,2,c
 17185  0028E6  D012               	goto	i2l6250
 17186                           
 17187                           ; BSR set to: 0
 17188  0028E8  B281               	btfsc	3969,1,c	;volatile
 17189  0028EA  D009               	goto	i2l6242
 17190  0028EC  D00F               	goto	i2l6250
 17191  0028EE                     i2l6240:
 17192                           
 17193                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17194  0028EE  0E68               	movlw	104
 17195  0028F0  6E2C               	movwf	??_inputHandler& (0+255),c
 17196  0028F2  0EE4               	movlw	228
 17197  0028F4                     i2u829_47:
 17198  0028F4  2EE8               	decfsz	wreg,f,c
 17199  0028F6  D7FE               	bra	i2u829_47
 17200  0028F8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17201  0028FA  D7FC               	bra	i2u829_47
 17202  0028FC  D000               	nop2	
 17203  0028FE                     i2l6242:
 17204  0028FE  B281               	btfsc	3969,1,c	;volatile
 17205  002900  D7F6               	goto	i2l6240
 17206  002902                     i2l6244:
 17207                           
 17208                           ;UI.c: 387: }
 17209                           ;UI.c: 388: return 0;
 17210  002902  0E00               	movlw	0
 17211  002904  6E2B               	movwf	?_inputHandler+1,c
 17212  002906  0E00               	movlw	0
 17213  002908  6E2A               	movwf	?_inputHandler,c
 17214  00290A  0012               	return	
 17215  00290C                     i2l6250:
 17216                           
 17217                           ;UI.c: 390: else if (input == 'D'){
 17218  00290C  0E44               	movlw	68
 17219  00290E  187D               	xorwf	_input,w,c	;volatile
 17220  002910  A4D8               	btfss	status,2,c
 17221  002912  D7F7               	goto	i2l6244
 17222                           
 17223                           ;UI.c: 392: logstate = 0;
 17224  002914  0E00               	movlw	0
 17225  002916  0100               	movlb	0	; () banked
 17226  002918  6FF7               	movwf	(_logstate+1)& (0+255),b
 17227  00291A  0E00               	movlw	0
 17228  00291C  6FF6               	movwf	_logstate& (0+255),b
 17229                           
 17230                           ;UI.c: 393: switch(cur_state){
 17231  00291E  D012               	goto	i2l6268
 17232  002920                     i2l6254:
 17233                           
 17234                           ;UI.c: 395: change_state_to_logs_11();
 17235  002920  EC70  F022         	call	_change_state_to_logs_11	;wreg free
 17236                           
 17237                           ;UI.c: 396: break;
 17238  002924  D7EE               	goto	i2l6244
 17239  002926                     i2l6256:
 17240                           
 17241                           ;UI.c: 398: change_state_to_logs_12();
 17242  002926  EC58  F022         	call	_change_state_to_logs_12	;wreg free
 17243                           
 17244                           ;UI.c: 399: break;
 17245  00292A  D7EB               	goto	i2l6244
 17246  00292C                     i2l6258:
 17247                           
 17248                           ;UI.c: 401: change_state_to_logs_22();
 17249  00292C  EC40  F022         	call	_change_state_to_logs_22	;wreg free
 17250                           
 17251                           ;UI.c: 402: break;
 17252  002930  D7E8               	goto	i2l6244
 17253  002932                     i2l6260:
 17254                           
 17255                           ;UI.c: 404: change_state_to_logs_23();
 17256  002932  ECB6  F022         	call	_change_state_to_logs_23	;wreg free
 17257                           
 17258                           ;UI.c: 405: break;
 17259  002936  D7E5               	goto	i2l6244
 17260  002938                     i2l6262:
 17261                           
 17262                           ;UI.c: 407: change_state_to_logs_33();
 17263  002938  EC28  F022         	call	_change_state_to_logs_33	;wreg free
 17264                           
 17265                           ;UI.c: 408: break;
 17266  00293C  D7E2               	goto	i2l6244
 17267  00293E                     i2l6264:
 17268                           
 17269                           ;UI.c: 410: change_state_to_logs_34();
 17270  00293E  EC10  F022         	call	_change_state_to_logs_34	;wreg free
 17271                           
 17272                           ;UI.c: 412: }
 17273                           
 17274                           ;UI.c: 411: break;
 17275  002942  D7DF               	goto	i2l6244
 17276  002944                     i2l6268:
 17277  002944  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17278  002948  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17279                           
 17280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17281                           ; Switch size 1, requested type "space"
 17282                           ; Number of cases is 2, Range of values is 3 to 4
 17283                           ; switch strategies available:
 17284                           ; Name         Instructions Cycles
 17285                           ; simple_byte            7     4 (average)
 17286                           ;	Chosen strategy is simple_byte
 17287  00294C  502D               	movf	??_inputHandler+1,w,c
 17288  00294E  0A03               	xorlw	3	; case 3
 17289  002950  B4D8               	btfsc	status,2,c
 17290  002952  D004               	goto	i2l8488
 17291  002954  0A07               	xorlw	7	; case 4
 17292  002956  B4D8               	btfsc	status,2,c
 17293  002958  D00F               	goto	i2l8490
 17294  00295A  D7D3               	goto	i2l6244
 17295  00295C                     i2l8488:
 17296                           
 17297                           ; Switch size 1, requested type "space"
 17298                           ; Number of cases is 4, Range of values is 243 to 255
 17299                           ; switch strategies available:
 17300                           ; Name         Instructions Cycles
 17301                           ; simple_byte           13     7 (average)
 17302                           ;	Chosen strategy is simple_byte
 17303  00295C  502C               	movf	??_inputHandler,w,c
 17304  00295E  0AF3               	xorlw	243	; case 243
 17305  002960  B4D8               	btfsc	status,2,c
 17306  002962  D7DE               	goto	i2l6254
 17307  002964  0A07               	xorlw	7	; case 244
 17308  002966  B4D8               	btfsc	status,2,c
 17309  002968  D7DE               	goto	i2l6256
 17310  00296A  0A0A               	xorlw	10	; case 254
 17311  00296C  B4D8               	btfsc	status,2,c
 17312  00296E  D7DE               	goto	i2l6258
 17313  002970  0A01               	xorlw	1	; case 255
 17314  002972  B4D8               	btfsc	status,2,c
 17315  002974  D7DE               	goto	i2l6260
 17316  002976  D7C5               	goto	i2l6244
 17317  002978                     i2l8490:
 17318                           
 17319                           ; Switch size 1, requested type "space"
 17320                           ; Number of cases is 2, Range of values is 9 to 10
 17321                           ; switch strategies available:
 17322                           ; Name         Instructions Cycles
 17323                           ; simple_byte            7     4 (average)
 17324                           ;	Chosen strategy is simple_byte
 17325  002978  502C               	movf	??_inputHandler,w,c
 17326  00297A  0A09               	xorlw	9	; case 9
 17327  00297C  B4D8               	btfsc	status,2,c
 17328  00297E  D7DC               	goto	i2l6262
 17329  002980  0A03               	xorlw	3	; case 10
 17330  002982  B4D8               	btfsc	status,2,c
 17331  002984  D7DC               	goto	i2l6264
 17332  002986  D7BD               	goto	i2l6244
 17333  002988                     i2l6280:
 17334                           
 17335                           ;UI.c: 422: if(cur_state == 11){
 17336  002988  0E0B               	movlw	11
 17337  00298A  0100               	movlb	0	; () banked
 17338  00298C  19E0               	xorwf	_cur_state& (0+255),w,b
 17339  00298E  0100               	movlb	0	; () banked
 17340  002990  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17341  002992  A4D8               	btfss	status,2,c
 17342  002994  D005               	goto	i2l6288
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;UI.c: 423: return 0;
 17346  002996  0E00               	movlw	0
 17347  002998  6E2B               	movwf	?_inputHandler+1,c
 17348  00299A  0E00               	movlw	0
 17349  00299C  6E2A               	movwf	?_inputHandler,c
 17350                           
 17351                           ; BSR set to: 0
 17352  00299E  0012               	return	
 17353  0029A0                     i2l6288:
 17354                           
 17355                           ; BSR set to: 0
 17356                           ;UI.c: 425: else{
 17357                           ;UI.c: 426: change_state_to_menu_11();
 17358  0029A0  ECF8  F021         	call	_change_state_to_menu_11	;wreg free
 17359                           
 17360                           ;UI.c: 427: }
 17361                           ;UI.c: 428: return 0;
 17362  0029A4  0E00               	movlw	0
 17363  0029A6  6E2B               	movwf	?_inputHandler+1,c
 17364  0029A8  0E00               	movlw	0
 17365  0029AA  6E2A               	movwf	?_inputHandler,c
 17366  0029AC  0012               	return	
 17367  0029AE                     i2l6294:
 17368                           
 17369                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17370  0029AE  0E16               	movlw	22
 17371  0029B0  0100               	movlb	0	; () banked
 17372  0029B2  19E0               	xorwf	_cur_state& (0+255),w,b
 17373  0029B4  0100               	movlb	0	; () banked
 17374  0029B6  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17375  0029B8  B4D8               	btfsc	status,2,c
 17376  0029BA  D007               	goto	i2l6298
 17377                           
 17378                           ; BSR set to: 0
 17379  0029BC  0E0C               	movlw	12
 17380  0029BE  0100               	movlb	0	; () banked
 17381  0029C0  19E0               	xorwf	_cur_state& (0+255),w,b
 17382  0029C2  0100               	movlb	0	; () banked
 17383  0029C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17384  0029C6  A4D8               	btfss	status,2,c
 17385  0029C8  D005               	goto	i2l6304
 17386  0029CA                     i2l6298:
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;UI.c: 431: return 0;
 17390  0029CA  0E00               	movlw	0
 17391  0029CC  6E2B               	movwf	?_inputHandler+1,c
 17392  0029CE  0E00               	movlw	0
 17393  0029D0  6E2A               	movwf	?_inputHandler,c
 17394                           
 17395                           ; BSR set to: 0
 17396  0029D2  0012               	return	
 17397  0029D4                     i2l6304:
 17398                           
 17399                           ; BSR set to: 0
 17400                           ;UI.c: 433: else if(cur_state == 23){
 17401  0029D4  0E17               	movlw	23
 17402  0029D6  0100               	movlb	0	; () banked
 17403  0029D8  19E0               	xorwf	_cur_state& (0+255),w,b
 17404  0029DA  0100               	movlb	0	; () banked
 17405  0029DC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17406  0029DE  A4D8               	btfss	status,2,c
 17407  0029E0  D003               	goto	i2l6308
 17408                           
 17409                           ; BSR set to: 0
 17410                           ;UI.c: 434: change_state_to_menu_22();
 17411  0029E2  ECB0  F021         	call	i2_change_state_to_menu_22	;wreg free
 17412                           
 17413                           ;UI.c: 435: }
 17414  0029E6  D002               	goto	i2l6310
 17415  0029E8                     i2l6308:
 17416                           
 17417                           ;UI.c: 436: else{
 17418                           ;UI.c: 437: change_state_to_menu_12();
 17419  0029E8  ECC8  F021         	call	i2_change_state_to_menu_12	;wreg free
 17420  0029EC                     i2l6310:
 17421                           
 17422                           ;UI.c: 438: }
 17423                           ;UI.c: 439: return 0;
 17424  0029EC  0E00               	movlw	0
 17425  0029EE  6E2B               	movwf	?_inputHandler+1,c
 17426  0029F0  0E00               	movlw	0
 17427  0029F2  6E2A               	movwf	?_inputHandler,c
 17428  0029F4  0012               	return	
 17429  0029F6                     i2l6314:
 17430                           
 17431                           ;UI.c: 441: if(cur_state == 23){
 17432  0029F6  0E17               	movlw	23
 17433  0029F8  0100               	movlb	0	; () banked
 17434  0029FA  19E0               	xorwf	_cur_state& (0+255),w,b
 17435  0029FC  0100               	movlb	0	; () banked
 17436  0029FE  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17437  002A00  A4D8               	btfss	status,2,c
 17438  002A02  D005               	goto	i2l6322
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;UI.c: 442: return 0;
 17442  002A04  0E00               	movlw	0
 17443  002A06  6E2B               	movwf	?_inputHandler+1,c
 17444  002A08  0E00               	movlw	0
 17445  002A0A  6E2A               	movwf	?_inputHandler,c
 17446                           
 17447                           ; BSR set to: 0
 17448  002A0C  0012               	return	
 17449  002A0E                     i2l6322:
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;UI.c: 444: else{
 17453                           ;UI.c: 445: change_state_to_menu_23();
 17454  002A0E  ECE0  F021         	call	_change_state_to_menu_23	;wreg free
 17455                           
 17456                           ;UI.c: 446: }
 17457                           ;UI.c: 447: return 0;
 17458  002A12  0E00               	movlw	0
 17459  002A14  6E2B               	movwf	?_inputHandler+1,c
 17460  002A16  0E00               	movlw	0
 17461  002A18  6E2A               	movwf	?_inputHandler,c
 17462  002A1A  0012               	return	
 17463  002A1C                     i2l6328:
 17464                           
 17465                           ;UI.c: 450: up = 1;
 17466  002A1C  0E00               	movlw	0
 17467  002A1E  6E78               	movwf	_up+1,c
 17468  002A20  0E01               	movlw	1
 17469  002A22  6E77               	movwf	_up,c
 17470                           
 17471                           ;UI.c: 451: return 1;
 17472  002A24  0E00               	movlw	0
 17473  002A26  6E2B               	movwf	?_inputHandler+1,c
 17474  002A28  0E01               	movlw	1
 17475  002A2A  6E2A               	movwf	?_inputHandler,c
 17476  002A2C  0012               	return	
 17477  002A2E                     i2l6332:
 17478                           
 17479                           ;UI.c: 453: down = 1;
 17480  002A2E  0E00               	movlw	0
 17481  002A30  6E68               	movwf	_down+1,c
 17482  002A32  0E01               	movlw	1
 17483  002A34  6E67               	movwf	_down,c
 17484                           
 17485                           ;UI.c: 454: return 1;
 17486  002A36  0E00               	movlw	0
 17487  002A38  6E2B               	movwf	?_inputHandler+1,c
 17488  002A3A  0E01               	movlw	1
 17489  002A3C  6E2A               	movwf	?_inputHandler,c
 17490  002A3E  0012               	return	
 17491  002A40                     i2l6336:
 17492                           
 17493                           ;UI.c: 456: enter = 1;
 17494  002A40  0E00               	movlw	0
 17495  002A42  6E6A               	movwf	_enter+1,c
 17496  002A44  0E01               	movlw	1
 17497  002A46  6E69               	movwf	_enter,c
 17498                           
 17499                           ;UI.c: 457: return 1;
 17500  002A48  0E00               	movlw	0
 17501  002A4A  6E2B               	movwf	?_inputHandler+1,c
 17502  002A4C  0E01               	movlw	1
 17503  002A4E  6E2A               	movwf	?_inputHandler,c
 17504  002A50  0012               	return	
 17505  002A52                     i2l6340:
 17506                           
 17507                           ;UI.c: 459: back = 1;
 17508  002A52  0E00               	movlw	0
 17509  002A54  6E5C               	movwf	_back+1,c
 17510  002A56  0E01               	movlw	1
 17511  002A58  6E5B               	movwf	_back,c
 17512                           
 17513                           ;UI.c: 460: return 1;
 17514  002A5A  0E00               	movlw	0
 17515  002A5C  6E2B               	movwf	?_inputHandler+1,c
 17516  002A5E  0E01               	movlw	1
 17517  002A60  6E2A               	movwf	?_inputHandler,c
 17518  002A62  0012               	return	
 17519  002A64                     i2l6344:
 17520                           
 17521                           ;UI.c: 463: return 1;
 17522  002A64  0E00               	movlw	0
 17523  002A66  6E2B               	movwf	?_inputHandler+1,c
 17524  002A68  0E01               	movlw	1
 17525  002A6A  6E2A               	movwf	?_inputHandler,c
 17526                           
 17527                           ;UI.c: 464: }
 17528  002A6C  0012               	return	
 17529  002A6E                     i2l6350:
 17530  002A6E  507D               	movf	_input,w,c	;volatile
 17531                           
 17532                           ; Switch size 1, requested type "space"
 17533                           ; Number of cases is 7, Range of values is 49 to 68
 17534                           ; switch strategies available:
 17535                           ; Name         Instructions Cycles
 17536                           ; simple_byte           22    12 (average)
 17537                           ;	Chosen strategy is simple_byte
 17538  002A70  0A31               	xorlw	49	; case 49
 17539  002A72  B4D8               	btfsc	status,2,c
 17540  002A74  D789               	goto	i2l6280
 17541  002A76  0A03               	xorlw	3	; case 50
 17542  002A78  B4D8               	btfsc	status,2,c
 17543  002A7A  D799               	goto	i2l6294
 17544  002A7C  0A01               	xorlw	1	; case 51
 17545  002A7E  B4D8               	btfsc	status,2,c
 17546  002A80  D7BA               	goto	i2l6314
 17547  002A82  0A72               	xorlw	114	; case 65
 17548  002A84  B4D8               	btfsc	status,2,c
 17549  002A86  D7CA               	goto	i2l6328
 17550  002A88  0A03               	xorlw	3	; case 66
 17551  002A8A  B4D8               	btfsc	status,2,c
 17552  002A8C  D7D0               	goto	i2l6332
 17553  002A8E  0A01               	xorlw	1	; case 67
 17554  002A90  B4D8               	btfsc	status,2,c
 17555  002A92  D7D6               	goto	i2l6336
 17556  002A94  0A07               	xorlw	7	; case 68
 17557  002A96  B4D8               	btfsc	status,2,c
 17558  002A98  D7DC               	goto	i2l6340
 17559  002A9A  D7E4               	goto	i2l6344
 17560  002A9C                     __end_of_inputHandler:
 17561                           	opt stack 0
 17562                           pclatu	equ	0xFFB
 17563                           pclath	equ	0xFFA
 17564                           tblptru	equ	0xFF8
 17565                           tblptrh	equ	0xFF7
 17566                           tblptrl	equ	0xFF6
 17567                           tablat	equ	0xFF5
 17568                           prodh	equ	0xFF4
 17569                           prodl	equ	0xFF3
 17570                           intcon	equ	0xFF2
 17571                           intcon2	equ	0xFF1
 17572                           intcon3	equ	0xFF0
 17573                           indf0	equ	0xFEF
 17574                           postinc0	equ	0xFEE
 17575                           fsr0h	equ	0xFEA
 17576                           fsr0l	equ	0xFE9
 17577                           wreg	equ	0xFE8
 17578                           postdec1	equ	0xFE5
 17579                           fsr1h	equ	0xFE2
 17580                           fsr1l	equ	0xFE1
 17581                           indf2	equ	0xFDF
 17582                           postinc2	equ	0xFDE
 17583                           postdec2	equ	0xFDD
 17584                           fsr2h	equ	0xFDA
 17585                           fsr2l	equ	0xFD9
 17586                           status	equ	0xFD8
 17587                           
 17588 ;; *************** function i2_change_state_to_menu_22 *****************
 17589 ;; Defined at:
 17590 ;;		line 498 in file "UI.c"
 17591 ;; Parameters:    Size  Location     Type
 17592 ;;		None
 17593 ;; Auto vars:     Size  Location     Type
 17594 ;;		None
 17595 ;; Return value:  Size  Location     Type
 17596 ;;                  1    wreg      void 
 17597 ;; Registers used:
 17598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17599 ;; Tracked objects:
 17600 ;;		On entry : 0/0
 17601 ;;		On exit  : 0/0
 17602 ;;		Unchanged: 0/0
 17603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17608 ;;Total ram usage:        0 bytes
 17609 ;; Hardware stack levels used:    1
 17610 ;; Hardware stack levels required when called:    3
 17611 ;; This function calls:
 17612 ;;		i2_lcdInst
 17613 ;;		i2_printf
 17614 ;; This function is called by:
 17615 ;;		_updateMenu
 17616 ;;		_inputHandler
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620                           	psect	text63
 17621  004360                     __ptext63:
 17622                           	opt stack 0
 17623  004360                     i2_change_state_to_menu_22:
 17624                           	opt stack 19
 17625                           
 17626                           ;UI.c: 499: cur_state = 22;
 17627                           
 17628                           ;incstack = 0
 17629  004360  0E00               	movlw	0
 17630  004362  0100               	movlb	0	; () banked
 17631  004364  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17632  004366  0E16               	movlw	22
 17633  004368  6FE0               	movwf	_cur_state& (0+255),b
 17634                           
 17635                           ; BSR set to: 0
 17636                           ;UI.c: 501: lcdInst(0b10000000);;
 17637  00436A  0E80               	movlw	128
 17638  00436C  ECEA  F023         	call	i2_lcdInst
 17639                           
 17640                           ;UI.c: 502: printf("2. SORT        <");
 17641  004370  0EDA               	movlw	low STR_34
 17642  004372  6E0D               	movwf	i2printf@f,c
 17643  004374  0EFD               	movlw	high STR_34
 17644  004376  6E0E               	movwf	i2printf@f+1,c
 17645  004378  ECD4  F00A         	call	i2_printf	;wreg free
 17646                           
 17647                           ;UI.c: 503: lcdInst(0b11000000);;
 17648  00437C  0EC0               	movlw	192
 17649  00437E  ECEA  F023         	call	i2_lcdInst
 17650                           
 17651                           ;UI.c: 504: printf("3. LOGS         ");
 17652  004382  0E1F               	movlw	low STR_36
 17653  004384  6E0D               	movwf	i2printf@f,c
 17654  004386  0EFD               	movlw	high STR_36
 17655  004388  6E0E               	movwf	i2printf@f+1,c
 17656  00438A  ECD4  F00A         	call	i2_printf	;wreg free
 17657  00438E  0012               	return		;funcret
 17658  004390                     __end_ofi2_change_state_to_menu_22:
 17659                           	opt stack 0
 17660                           pclatu	equ	0xFFB
 17661                           pclath	equ	0xFFA
 17662                           tblptru	equ	0xFF8
 17663                           tblptrh	equ	0xFF7
 17664                           tblptrl	equ	0xFF6
 17665                           tablat	equ	0xFF5
 17666                           prodh	equ	0xFF4
 17667                           prodl	equ	0xFF3
 17668                           intcon	equ	0xFF2
 17669                           intcon2	equ	0xFF1
 17670                           intcon3	equ	0xFF0
 17671                           indf0	equ	0xFEF
 17672                           postinc0	equ	0xFEE
 17673                           fsr0h	equ	0xFEA
 17674                           fsr0l	equ	0xFE9
 17675                           wreg	equ	0xFE8
 17676                           postdec1	equ	0xFE5
 17677                           fsr1h	equ	0xFE2
 17678                           fsr1l	equ	0xFE1
 17679                           indf2	equ	0xFDF
 17680                           postinc2	equ	0xFDE
 17681                           postdec2	equ	0xFDD
 17682                           fsr2h	equ	0xFDA
 17683                           fsr2l	equ	0xFD9
 17684                           status	equ	0xFD8
 17685                           
 17686 ;; *************** function i2_change_state_to_menu_12 *****************
 17687 ;; Defined at:
 17688 ;;		line 490 in file "UI.c"
 17689 ;; Parameters:    Size  Location     Type
 17690 ;;		None
 17691 ;; Auto vars:     Size  Location     Type
 17692 ;;		None
 17693 ;; Return value:  Size  Location     Type
 17694 ;;                  1    wreg      void 
 17695 ;; Registers used:
 17696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17697 ;; Tracked objects:
 17698 ;;		On entry : 0/0
 17699 ;;		On exit  : 0/0
 17700 ;;		Unchanged: 0/0
 17701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17706 ;;Total ram usage:        0 bytes
 17707 ;; Hardware stack levels used:    1
 17708 ;; Hardware stack levels required when called:    3
 17709 ;; This function calls:
 17710 ;;		i2_lcdInst
 17711 ;;		i2_printf
 17712 ;; This function is called by:
 17713 ;;		_updateMenu
 17714 ;;		_inputHandler
 17715 ;; This function uses a non-reentrant model
 17716 ;;
 17717                           
 17718                           	psect	text64
 17719  004390                     __ptext64:
 17720                           	opt stack 0
 17721  004390                     i2_change_state_to_menu_12:
 17722                           	opt stack 19
 17723                           
 17724                           ;UI.c: 491: cur_state = 12;
 17725                           
 17726                           ;incstack = 0
 17727  004390  0E00               	movlw	0
 17728  004392  0100               	movlb	0	; () banked
 17729  004394  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17730  004396  0E0C               	movlw	12
 17731  004398  6FE0               	movwf	_cur_state& (0+255),b
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;UI.c: 493: lcdInst(0b10000000);;
 17735  00439A  0E80               	movlw	128
 17736  00439C  ECEA  F023         	call	i2_lcdInst
 17737                           
 17738                           ;UI.c: 494: printf("1. DATE/TIME    ");
 17739  0043A0  0E41               	movlw	low STR_33
 17740  0043A2  6E0D               	movwf	i2printf@f,c
 17741  0043A4  0EFD               	movlw	high STR_33
 17742  0043A6  6E0E               	movwf	i2printf@f+1,c
 17743  0043A8  ECD4  F00A         	call	i2_printf	;wreg free
 17744                           
 17745                           ;UI.c: 495: lcdInst(0b11000000);;
 17746  0043AC  0EC0               	movlw	192
 17747  0043AE  ECEA  F023         	call	i2_lcdInst
 17748                           
 17749                           ;UI.c: 496: printf("2. SORT        <");
 17750  0043B2  0EDA               	movlw	low STR_34
 17751  0043B4  6E0D               	movwf	i2printf@f,c
 17752  0043B6  0EFD               	movlw	high STR_34
 17753  0043B8  6E0E               	movwf	i2printf@f+1,c
 17754  0043BA  ECD4  F00A         	call	i2_printf	;wreg free
 17755  0043BE  0012               	return		;funcret
 17756  0043C0                     __end_ofi2_change_state_to_menu_12:
 17757                           	opt stack 0
 17758                           pclatu	equ	0xFFB
 17759                           pclath	equ	0xFFA
 17760                           tblptru	equ	0xFF8
 17761                           tblptrh	equ	0xFF7
 17762                           tblptrl	equ	0xFF6
 17763                           tablat	equ	0xFF5
 17764                           prodh	equ	0xFF4
 17765                           prodl	equ	0xFF3
 17766                           intcon	equ	0xFF2
 17767                           intcon2	equ	0xFF1
 17768                           intcon3	equ	0xFF0
 17769                           indf0	equ	0xFEF
 17770                           postinc0	equ	0xFEE
 17771                           fsr0h	equ	0xFEA
 17772                           fsr0l	equ	0xFE9
 17773                           wreg	equ	0xFE8
 17774                           postdec1	equ	0xFE5
 17775                           fsr1h	equ	0xFE2
 17776                           fsr1l	equ	0xFE1
 17777                           indf2	equ	0xFDF
 17778                           postinc2	equ	0xFDE
 17779                           postdec2	equ	0xFDD
 17780                           fsr2h	equ	0xFDA
 17781                           fsr2l	equ	0xFD9
 17782                           status	equ	0xFD8
 17783                           
 17784 ;; *************** function _change_state_to_menu_23 *****************
 17785 ;; Defined at:
 17786 ;;		line 506 in file "UI.c"
 17787 ;; Parameters:    Size  Location     Type
 17788 ;;		None
 17789 ;; Auto vars:     Size  Location     Type
 17790 ;;		None
 17791 ;; Return value:  Size  Location     Type
 17792 ;;                  1    wreg      void 
 17793 ;; Registers used:
 17794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17795 ;; Tracked objects:
 17796 ;;		On entry : 0/0
 17797 ;;		On exit  : 0/0
 17798 ;;		Unchanged: 0/0
 17799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;Total ram usage:        0 bytes
 17805 ;; Hardware stack levels used:    1
 17806 ;; Hardware stack levels required when called:    3
 17807 ;; This function calls:
 17808 ;;		i2_lcdInst
 17809 ;;		i2_printf
 17810 ;; This function is called by:
 17811 ;;		_updateMenu
 17812 ;;		_inputHandler
 17813 ;; This function uses a non-reentrant model
 17814 ;;
 17815                           
 17816                           	psect	text65
 17817  0043C0                     __ptext65:
 17818                           	opt stack 0
 17819  0043C0                     _change_state_to_menu_23:
 17820                           	opt stack 18
 17821                           
 17822                           ;UI.c: 507: cur_state = 23;
 17823                           
 17824                           ;incstack = 0
 17825  0043C0  0E00               	movlw	0
 17826  0043C2  0100               	movlb	0	; () banked
 17827  0043C4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17828  0043C6  0E17               	movlw	23
 17829  0043C8  6FE0               	movwf	_cur_state& (0+255),b
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;UI.c: 509: lcdInst(0b10000000);;
 17833  0043CA  0E80               	movlw	128
 17834  0043CC  ECEA  F023         	call	i2_lcdInst
 17835                           
 17836                           ;UI.c: 510: printf("2. SORT         ");
 17837  0043D0  0E30               	movlw	low STR_32
 17838  0043D2  6E0D               	movwf	i2printf@f,c
 17839  0043D4  0EFD               	movlw	high STR_32
 17840  0043D6  6E0E               	movwf	i2printf@f+1,c
 17841  0043D8  ECD4  F00A         	call	i2_printf	;wreg free
 17842                           
 17843                           ;UI.c: 511: lcdInst(0b11000000);;
 17844  0043DC  0EC0               	movlw	192
 17845  0043DE  ECEA  F023         	call	i2_lcdInst
 17846                           
 17847                           ;UI.c: 512: printf("3. LOGS        <");
 17848  0043E2  0EC9               	movlw	low STR_38
 17849  0043E4  6E0D               	movwf	i2printf@f,c
 17850  0043E6  0EFD               	movlw	high STR_38
 17851  0043E8  6E0E               	movwf	i2printf@f+1,c
 17852  0043EA  ECD4  F00A         	call	i2_printf	;wreg free
 17853  0043EE  0012               	return		;funcret
 17854  0043F0                     __end_of_change_state_to_menu_23:
 17855                           	opt stack 0
 17856                           pclatu	equ	0xFFB
 17857                           pclath	equ	0xFFA
 17858                           tblptru	equ	0xFF8
 17859                           tblptrh	equ	0xFF7
 17860                           tblptrl	equ	0xFF6
 17861                           tablat	equ	0xFF5
 17862                           prodh	equ	0xFF4
 17863                           prodl	equ	0xFF3
 17864                           intcon	equ	0xFF2
 17865                           intcon2	equ	0xFF1
 17866                           intcon3	equ	0xFF0
 17867                           indf0	equ	0xFEF
 17868                           postinc0	equ	0xFEE
 17869                           fsr0h	equ	0xFEA
 17870                           fsr0l	equ	0xFE9
 17871                           wreg	equ	0xFE8
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           fsr2h	equ	0xFDA
 17879                           fsr2l	equ	0xFD9
 17880                           status	equ	0xFD8
 17881                           
 17882 ;; *************** function _change_state_to_menu_11 *****************
 17883 ;; Defined at:
 17884 ;;		line 482 in file "UI.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;		None
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;		None
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  1    wreg      void 
 17891 ;; Registers used:
 17892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;Total ram usage:        0 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    3
 17905 ;; This function calls:
 17906 ;;		i2_lcdInst
 17907 ;;		i2_printf
 17908 ;; This function is called by:
 17909 ;;		_updateMenu
 17910 ;;		_inputHandler
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           	psect	text66
 17915  0043F0                     __ptext66:
 17916                           	opt stack 0
 17917  0043F0                     _change_state_to_menu_11:
 17918                           	opt stack 18
 17919                           
 17920                           ;UI.c: 483: cur_state = 11;
 17921                           
 17922                           ;incstack = 0
 17923  0043F0  0E00               	movlw	0
 17924  0043F2  0100               	movlb	0	; () banked
 17925  0043F4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 17926  0043F6  0E0B               	movlw	11
 17927  0043F8  6FE0               	movwf	_cur_state& (0+255),b
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;UI.c: 485: lcdInst(0b10000000);;
 17931  0043FA  0E80               	movlw	128
 17932  0043FC  ECEA  F023         	call	i2_lcdInst
 17933                           
 17934                           ;UI.c: 486: printf("1. DATE/TIME   <");
 17935  004400  0EEB               	movlw	low STR_31
 17936  004402  6E0D               	movwf	i2printf@f,c
 17937  004404  0EFD               	movlw	high STR_31
 17938  004406  6E0E               	movwf	i2printf@f+1,c
 17939  004408  ECD4  F00A         	call	i2_printf	;wreg free
 17940                           
 17941                           ;UI.c: 487: lcdInst(0b11000000);;
 17942  00440C  0EC0               	movlw	192
 17943  00440E  ECEA  F023         	call	i2_lcdInst
 17944                           
 17945                           ;UI.c: 488: printf("2. SORT         ");
 17946  004412  0E30               	movlw	low STR_32
 17947  004414  6E0D               	movwf	i2printf@f,c
 17948  004416  0EFD               	movlw	high STR_32
 17949  004418  6E0E               	movwf	i2printf@f+1,c
 17950  00441A  ECD4  F00A         	call	i2_printf	;wreg free
 17951  00441E  0012               	return		;funcret
 17952  004420                     __end_of_change_state_to_menu_11:
 17953                           	opt stack 0
 17954                           pclatu	equ	0xFFB
 17955                           pclath	equ	0xFFA
 17956                           tblptru	equ	0xFF8
 17957                           tblptrh	equ	0xFF7
 17958                           tblptrl	equ	0xFF6
 17959                           tablat	equ	0xFF5
 17960                           prodh	equ	0xFF4
 17961                           prodl	equ	0xFF3
 17962                           intcon	equ	0xFF2
 17963                           intcon2	equ	0xFF1
 17964                           intcon3	equ	0xFF0
 17965                           indf0	equ	0xFEF
 17966                           postinc0	equ	0xFEE
 17967                           fsr0h	equ	0xFEA
 17968                           fsr0l	equ	0xFE9
 17969                           wreg	equ	0xFE8
 17970                           postdec1	equ	0xFE5
 17971                           fsr1h	equ	0xFE2
 17972                           fsr1l	equ	0xFE1
 17973                           indf2	equ	0xFDF
 17974                           postinc2	equ	0xFDE
 17975                           postdec2	equ	0xFDD
 17976                           fsr2h	equ	0xFDA
 17977                           fsr2l	equ	0xFD9
 17978                           status	equ	0xFD8
 17979                           
 17980 ;; *************** function _change_state_to_logs_34 *****************
 17981 ;; Defined at:
 17982 ;;		line 549 in file "UI.c"
 17983 ;; Parameters:    Size  Location     Type
 17984 ;;		None
 17985 ;; Auto vars:     Size  Location     Type
 17986 ;;		None
 17987 ;; Return value:  Size  Location     Type
 17988 ;;                  1    wreg      void 
 17989 ;; Registers used:
 17990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17991 ;; Tracked objects:
 17992 ;;		On entry : 0/0
 17993 ;;		On exit  : 0/0
 17994 ;;		Unchanged: 0/0
 17995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18000 ;;Total ram usage:        0 bytes
 18001 ;; Hardware stack levels used:    1
 18002 ;; Hardware stack levels required when called:    3
 18003 ;; This function calls:
 18004 ;;		i2_lcdInst
 18005 ;;		i2_printf
 18006 ;; This function is called by:
 18007 ;;		_updateMenu
 18008 ;;		_inputHandler
 18009 ;; This function uses a non-reentrant model
 18010 ;;
 18011                           
 18012                           	psect	text67
 18013  004420                     __ptext67:
 18014                           	opt stack 0
 18015  004420                     _change_state_to_logs_34:
 18016                           	opt stack 18
 18017                           
 18018                           ;UI.c: 550: cur_state = 1034;
 18019                           
 18020                           ;incstack = 0
 18021  004420  0E04               	movlw	4
 18022  004422  0100               	movlb	0	; () banked
 18023  004424  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18024  004426  0E0A               	movlw	10
 18025  004428  6FE0               	movwf	_cur_state& (0+255),b
 18026                           
 18027                           ; BSR set to: 0
 18028                           ;UI.c: 551: lcdInst(0b10000000);;
 18029  00442A  0E80               	movlw	128
 18030  00442C  ECEA  F023         	call	i2_lcdInst
 18031                           
 18032                           ;UI.c: 552: printf("LOG 3           ");
 18033  004430  0EFD               	movlw	low STR_44
 18034  004432  6E0D               	movwf	i2printf@f,c
 18035  004434  0EFC               	movlw	high STR_44
 18036  004436  6E0E               	movwf	i2printf@f+1,c
 18037  004438  ECD4  F00A         	call	i2_printf	;wreg free
 18038                           
 18039                           ;UI.c: 553: lcdInst(0b11000000);;
 18040  00443C  0EC0               	movlw	192
 18041  00443E  ECEA  F023         	call	i2_lcdInst
 18042                           
 18043                           ;UI.c: 554: printf("LOG 4          <");
 18044  004442  0EB8               	movlw	low STR_50
 18045  004444  6E0D               	movwf	i2printf@f,c
 18046  004446  0EFD               	movlw	high STR_50
 18047  004448  6E0E               	movwf	i2printf@f+1,c
 18048  00444A  ECD4  F00A         	call	i2_printf	;wreg free
 18049  00444E  0012               	return		;funcret
 18050  004450                     __end_of_change_state_to_logs_34:
 18051                           	opt stack 0
 18052                           pclatu	equ	0xFFB
 18053                           pclath	equ	0xFFA
 18054                           tblptru	equ	0xFF8
 18055                           tblptrh	equ	0xFF7
 18056                           tblptrl	equ	0xFF6
 18057                           tablat	equ	0xFF5
 18058                           prodh	equ	0xFF4
 18059                           prodl	equ	0xFF3
 18060                           intcon	equ	0xFF2
 18061                           intcon2	equ	0xFF1
 18062                           intcon3	equ	0xFF0
 18063                           indf0	equ	0xFEF
 18064                           postinc0	equ	0xFEE
 18065                           fsr0h	equ	0xFEA
 18066                           fsr0l	equ	0xFE9
 18067                           wreg	equ	0xFE8
 18068                           postdec1	equ	0xFE5
 18069                           fsr1h	equ	0xFE2
 18070                           fsr1l	equ	0xFE1
 18071                           indf2	equ	0xFDF
 18072                           postinc2	equ	0xFDE
 18073                           postdec2	equ	0xFDD
 18074                           fsr2h	equ	0xFDA
 18075                           fsr2l	equ	0xFD9
 18076                           status	equ	0xFD8
 18077                           
 18078 ;; *************** function _change_state_to_logs_33 *****************
 18079 ;; Defined at:
 18080 ;;		line 542 in file "UI.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;		None
 18083 ;; Auto vars:     Size  Location     Type
 18084 ;;		None
 18085 ;; Return value:  Size  Location     Type
 18086 ;;                  1    wreg      void 
 18087 ;; Registers used:
 18088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18089 ;; Tracked objects:
 18090 ;;		On entry : 0/0
 18091 ;;		On exit  : 0/0
 18092 ;;		Unchanged: 0/0
 18093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;Total ram usage:        0 bytes
 18099 ;; Hardware stack levels used:    1
 18100 ;; Hardware stack levels required when called:    3
 18101 ;; This function calls:
 18102 ;;		i2_lcdInst
 18103 ;;		i2_printf
 18104 ;; This function is called by:
 18105 ;;		_updateMenu
 18106 ;;		_inputHandler
 18107 ;; This function uses a non-reentrant model
 18108 ;;
 18109                           
 18110                           	psect	text68
 18111  004450                     __ptext68:
 18112                           	opt stack 0
 18113  004450                     _change_state_to_logs_33:
 18114                           	opt stack 18
 18115                           
 18116                           ;UI.c: 543: cur_state = 1033;
 18117                           
 18118                           ;incstack = 0
 18119  004450  0E04               	movlw	4
 18120  004452  0100               	movlb	0	; () banked
 18121  004454  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18122  004456  0E09               	movlw	9
 18123  004458  6FE0               	movwf	_cur_state& (0+255),b
 18124                           
 18125                           ; BSR set to: 0
 18126                           ;UI.c: 544: lcdInst(0b10000000);;
 18127  00445A  0E80               	movlw	128
 18128  00445C  ECEA  F023         	call	i2_lcdInst
 18129                           
 18130                           ;UI.c: 545: printf("LOG 3          <");
 18131  004460  0EA7               	movlw	low STR_46
 18132  004462  6E0D               	movwf	i2printf@f,c
 18133  004464  0EFD               	movlw	high STR_46
 18134  004466  6E0E               	movwf	i2printf@f+1,c
 18135  004468  ECD4  F00A         	call	i2_printf	;wreg free
 18136                           
 18137                           ;UI.c: 546: lcdInst(0b11000000);;
 18138  00446C  0EC0               	movlw	192
 18139  00446E  ECEA  F023         	call	i2_lcdInst
 18140                           
 18141                           ;UI.c: 547: printf("LOG 4           ");
 18142  004472  0E0E               	movlw	low STR_48
 18143  004474  6E0D               	movwf	i2printf@f,c
 18144  004476  0EFD               	movlw	high STR_48
 18145  004478  6E0E               	movwf	i2printf@f+1,c
 18146  00447A  ECD4  F00A         	call	i2_printf	;wreg free
 18147  00447E  0012               	return		;funcret
 18148  004480                     __end_of_change_state_to_logs_33:
 18149                           	opt stack 0
 18150                           pclatu	equ	0xFFB
 18151                           pclath	equ	0xFFA
 18152                           tblptru	equ	0xFF8
 18153                           tblptrh	equ	0xFF7
 18154                           tblptrl	equ	0xFF6
 18155                           tablat	equ	0xFF5
 18156                           prodh	equ	0xFF4
 18157                           prodl	equ	0xFF3
 18158                           intcon	equ	0xFF2
 18159                           intcon2	equ	0xFF1
 18160                           intcon3	equ	0xFF0
 18161                           indf0	equ	0xFEF
 18162                           postinc0	equ	0xFEE
 18163                           fsr0h	equ	0xFEA
 18164                           fsr0l	equ	0xFE9
 18165                           wreg	equ	0xFE8
 18166                           postdec1	equ	0xFE5
 18167                           fsr1h	equ	0xFE2
 18168                           fsr1l	equ	0xFE1
 18169                           indf2	equ	0xFDF
 18170                           postinc2	equ	0xFDE
 18171                           postdec2	equ	0xFDD
 18172                           fsr2h	equ	0xFDA
 18173                           fsr2l	equ	0xFD9
 18174                           status	equ	0xFD8
 18175                           
 18176 ;; *************** function _change_state_to_logs_23 *****************
 18177 ;; Defined at:
 18178 ;;		line 535 in file "UI.c"
 18179 ;; Parameters:    Size  Location     Type
 18180 ;;		None
 18181 ;; Auto vars:     Size  Location     Type
 18182 ;;		None
 18183 ;; Return value:  Size  Location     Type
 18184 ;;                  1    wreg      void 
 18185 ;; Registers used:
 18186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18187 ;; Tracked objects:
 18188 ;;		On entry : 0/0
 18189 ;;		On exit  : 0/0
 18190 ;;		Unchanged: 0/0
 18191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;Total ram usage:        0 bytes
 18197 ;; Hardware stack levels used:    1
 18198 ;; Hardware stack levels required when called:    3
 18199 ;; This function calls:
 18200 ;;		i2_lcdInst
 18201 ;;		i2_printf
 18202 ;; This function is called by:
 18203 ;;		_updateMenu
 18204 ;;		_inputHandler
 18205 ;; This function uses a non-reentrant model
 18206 ;;
 18207                           
 18208                           	psect	text69
 18209  00456C                     __ptext69:
 18210                           	opt stack 0
 18211  00456C                     _change_state_to_logs_23:
 18212                           	opt stack 18
 18213                           
 18214                           ;UI.c: 536: cur_state = 1023;
 18215                           
 18216                           ;incstack = 0
 18217  00456C  0E03               	movlw	3
 18218  00456E  0100               	movlb	0	; () banked
 18219  004570  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18220  004572  69E0               	setf	_cur_state& (0+255),b
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;UI.c: 537: lcdInst(0b10000000);;
 18224  004574  0E80               	movlw	128
 18225  004576  ECEA  F023         	call	i2_lcdInst
 18226                           
 18227                           ;UI.c: 538: printf("LOG 2           ");
 18228  00457A  0EEC               	movlw	low STR_40
 18229  00457C  6E0D               	movwf	i2printf@f,c
 18230  00457E  0EFC               	movlw	high STR_40
 18231  004580  6E0E               	movwf	i2printf@f+1,c
 18232  004582  ECD4  F00A         	call	i2_printf	;wreg free
 18233                           
 18234                           ;UI.c: 539: lcdInst(0b11000000);;
 18235  004586  0EC0               	movlw	192
 18236  004588  ECEA  F023         	call	i2_lcdInst
 18237                           
 18238                           ;UI.c: 540: printf("LOG 3          <");
 18239  00458C  0EA7               	movlw	low STR_46
 18240  00458E  6E0D               	movwf	i2printf@f,c
 18241  004590  0EFD               	movlw	high STR_46
 18242  004592  6E0E               	movwf	i2printf@f+1,c
 18243  004594  ECD4  F00A         	call	i2_printf	;wreg free
 18244  004598  0012               	return		;funcret
 18245  00459A                     __end_of_change_state_to_logs_23:
 18246                           	opt stack 0
 18247                           pclatu	equ	0xFFB
 18248                           pclath	equ	0xFFA
 18249                           tblptru	equ	0xFF8
 18250                           tblptrh	equ	0xFF7
 18251                           tblptrl	equ	0xFF6
 18252                           tablat	equ	0xFF5
 18253                           prodh	equ	0xFF4
 18254                           prodl	equ	0xFF3
 18255                           intcon	equ	0xFF2
 18256                           intcon2	equ	0xFF1
 18257                           intcon3	equ	0xFF0
 18258                           indf0	equ	0xFEF
 18259                           postinc0	equ	0xFEE
 18260                           fsr0h	equ	0xFEA
 18261                           fsr0l	equ	0xFE9
 18262                           wreg	equ	0xFE8
 18263                           postdec1	equ	0xFE5
 18264                           fsr1h	equ	0xFE2
 18265                           fsr1l	equ	0xFE1
 18266                           indf2	equ	0xFDF
 18267                           postinc2	equ	0xFDE
 18268                           postdec2	equ	0xFDD
 18269                           fsr2h	equ	0xFDA
 18270                           fsr2l	equ	0xFD9
 18271                           status	equ	0xFD8
 18272                           
 18273 ;; *************** function _change_state_to_logs_22 *****************
 18274 ;; Defined at:
 18275 ;;		line 528 in file "UI.c"
 18276 ;; Parameters:    Size  Location     Type
 18277 ;;		None
 18278 ;; Auto vars:     Size  Location     Type
 18279 ;;		None
 18280 ;; Return value:  Size  Location     Type
 18281 ;;                  1    wreg      void 
 18282 ;; Registers used:
 18283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18284 ;; Tracked objects:
 18285 ;;		On entry : 0/0
 18286 ;;		On exit  : 0/0
 18287 ;;		Unchanged: 0/0
 18288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18293 ;;Total ram usage:        0 bytes
 18294 ;; Hardware stack levels used:    1
 18295 ;; Hardware stack levels required when called:    3
 18296 ;; This function calls:
 18297 ;;		i2_lcdInst
 18298 ;;		i2_printf
 18299 ;; This function is called by:
 18300 ;;		_updateMenu
 18301 ;;		_inputHandler
 18302 ;; This function uses a non-reentrant model
 18303 ;;
 18304                           
 18305                           	psect	text70
 18306  004480                     __ptext70:
 18307                           	opt stack 0
 18308  004480                     _change_state_to_logs_22:
 18309                           	opt stack 18
 18310                           
 18311                           ;UI.c: 529: cur_state = 1022;
 18312                           
 18313                           ;incstack = 0
 18314  004480  0E03               	movlw	3
 18315  004482  0100               	movlb	0	; () banked
 18316  004484  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18317  004486  0EFE               	movlw	254
 18318  004488  6FE0               	movwf	_cur_state& (0+255),b
 18319                           
 18320                           ; BSR set to: 0
 18321                           ;UI.c: 530: lcdInst(0b10000000);;
 18322  00448A  0E80               	movlw	128
 18323  00448C  ECEA  F023         	call	i2_lcdInst
 18324                           
 18325                           ;UI.c: 531: printf("LOG 2          <");
 18326  004490  0E96               	movlw	low STR_42
 18327  004492  6E0D               	movwf	i2printf@f,c
 18328  004494  0EFD               	movlw	high STR_42
 18329  004496  6E0E               	movwf	i2printf@f+1,c
 18330  004498  ECD4  F00A         	call	i2_printf	;wreg free
 18331                           
 18332                           ;UI.c: 532: lcdInst(0b11000000);;
 18333  00449C  0EC0               	movlw	192
 18334  00449E  ECEA  F023         	call	i2_lcdInst
 18335                           
 18336                           ;UI.c: 533: printf("LOG 3           ");
 18337  0044A2  0EFD               	movlw	low STR_44
 18338  0044A4  6E0D               	movwf	i2printf@f,c
 18339  0044A6  0EFC               	movlw	high STR_44
 18340  0044A8  6E0E               	movwf	i2printf@f+1,c
 18341  0044AA  ECD4  F00A         	call	i2_printf	;wreg free
 18342  0044AE  0012               	return		;funcret
 18343  0044B0                     __end_of_change_state_to_logs_22:
 18344                           	opt stack 0
 18345                           pclatu	equ	0xFFB
 18346                           pclath	equ	0xFFA
 18347                           tblptru	equ	0xFF8
 18348                           tblptrh	equ	0xFF7
 18349                           tblptrl	equ	0xFF6
 18350                           tablat	equ	0xFF5
 18351                           prodh	equ	0xFF4
 18352                           prodl	equ	0xFF3
 18353                           intcon	equ	0xFF2
 18354                           intcon2	equ	0xFF1
 18355                           intcon3	equ	0xFF0
 18356                           indf0	equ	0xFEF
 18357                           postinc0	equ	0xFEE
 18358                           fsr0h	equ	0xFEA
 18359                           fsr0l	equ	0xFE9
 18360                           wreg	equ	0xFE8
 18361                           postdec1	equ	0xFE5
 18362                           fsr1h	equ	0xFE2
 18363                           fsr1l	equ	0xFE1
 18364                           indf2	equ	0xFDF
 18365                           postinc2	equ	0xFDE
 18366                           postdec2	equ	0xFDD
 18367                           fsr2h	equ	0xFDA
 18368                           fsr2l	equ	0xFD9
 18369                           status	equ	0xFD8
 18370                           
 18371 ;; *************** function _change_state_to_logs_12 *****************
 18372 ;; Defined at:
 18373 ;;		line 521 in file "UI.c"
 18374 ;; Parameters:    Size  Location     Type
 18375 ;;		None
 18376 ;; Auto vars:     Size  Location     Type
 18377 ;;		None
 18378 ;; Return value:  Size  Location     Type
 18379 ;;                  1    wreg      void 
 18380 ;; Registers used:
 18381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18382 ;; Tracked objects:
 18383 ;;		On entry : 0/0
 18384 ;;		On exit  : 0/0
 18385 ;;		Unchanged: 0/0
 18386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18391 ;;Total ram usage:        0 bytes
 18392 ;; Hardware stack levels used:    1
 18393 ;; Hardware stack levels required when called:    3
 18394 ;; This function calls:
 18395 ;;		i2_lcdInst
 18396 ;;		i2_printf
 18397 ;; This function is called by:
 18398 ;;		_updateMenu
 18399 ;;		_inputHandler
 18400 ;; This function uses a non-reentrant model
 18401 ;;
 18402                           
 18403                           	psect	text71
 18404  0044B0                     __ptext71:
 18405                           	opt stack 0
 18406  0044B0                     _change_state_to_logs_12:
 18407                           	opt stack 18
 18408                           
 18409                           ;UI.c: 522: cur_state = 1012;
 18410                           
 18411                           ;incstack = 0
 18412  0044B0  0E03               	movlw	3
 18413  0044B2  0100               	movlb	0	; () banked
 18414  0044B4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18415  0044B6  0EF4               	movlw	244
 18416  0044B8  6FE0               	movwf	_cur_state& (0+255),b
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;UI.c: 523: lcdInst(0b10000000);;
 18420  0044BA  0E80               	movlw	128
 18421  0044BC  ECEA  F023         	call	i2_lcdInst
 18422                           
 18423                           ;UI.c: 524: printf("LOG 1           ");
 18424  0044C0  0EDB               	movlw	low STR_41
 18425  0044C2  6E0D               	movwf	i2printf@f,c
 18426  0044C4  0EFC               	movlw	high STR_41
 18427  0044C6  6E0E               	movwf	i2printf@f+1,c
 18428  0044C8  ECD4  F00A         	call	i2_printf	;wreg free
 18429                           
 18430                           ;UI.c: 525: lcdInst(0b11000000);;
 18431  0044CC  0EC0               	movlw	192
 18432  0044CE  ECEA  F023         	call	i2_lcdInst
 18433                           
 18434                           ;UI.c: 526: printf("LOG 2          <");
 18435  0044D2  0E96               	movlw	low STR_42
 18436  0044D4  6E0D               	movwf	i2printf@f,c
 18437  0044D6  0EFD               	movlw	high STR_42
 18438  0044D8  6E0E               	movwf	i2printf@f+1,c
 18439  0044DA  ECD4  F00A         	call	i2_printf	;wreg free
 18440  0044DE  0012               	return		;funcret
 18441  0044E0                     __end_of_change_state_to_logs_12:
 18442                           	opt stack 0
 18443                           pclatu	equ	0xFFB
 18444                           pclath	equ	0xFFA
 18445                           tblptru	equ	0xFF8
 18446                           tblptrh	equ	0xFF7
 18447                           tblptrl	equ	0xFF6
 18448                           tablat	equ	0xFF5
 18449                           prodh	equ	0xFF4
 18450                           prodl	equ	0xFF3
 18451                           intcon	equ	0xFF2
 18452                           intcon2	equ	0xFF1
 18453                           intcon3	equ	0xFF0
 18454                           indf0	equ	0xFEF
 18455                           postinc0	equ	0xFEE
 18456                           fsr0h	equ	0xFEA
 18457                           fsr0l	equ	0xFE9
 18458                           wreg	equ	0xFE8
 18459                           postdec1	equ	0xFE5
 18460                           fsr1h	equ	0xFE2
 18461                           fsr1l	equ	0xFE1
 18462                           indf2	equ	0xFDF
 18463                           postinc2	equ	0xFDE
 18464                           postdec2	equ	0xFDD
 18465                           fsr2h	equ	0xFDA
 18466                           fsr2l	equ	0xFD9
 18467                           status	equ	0xFD8
 18468                           
 18469 ;; *************** function _change_state_to_logs_11 *****************
 18470 ;; Defined at:
 18471 ;;		line 514 in file "UI.c"
 18472 ;; Parameters:    Size  Location     Type
 18473 ;;		None
 18474 ;; Auto vars:     Size  Location     Type
 18475 ;;		None
 18476 ;; Return value:  Size  Location     Type
 18477 ;;                  1    wreg      void 
 18478 ;; Registers used:
 18479 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18480 ;; Tracked objects:
 18481 ;;		On entry : 0/0
 18482 ;;		On exit  : 0/0
 18483 ;;		Unchanged: 0/0
 18484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;Total ram usage:        0 bytes
 18490 ;; Hardware stack levels used:    1
 18491 ;; Hardware stack levels required when called:    3
 18492 ;; This function calls:
 18493 ;;		i2_lcdInst
 18494 ;;		i2_printf
 18495 ;; This function is called by:
 18496 ;;		_updateMenu
 18497 ;;		_inputHandler
 18498 ;; This function uses a non-reentrant model
 18499 ;;
 18500                           
 18501                           	psect	text72
 18502  0044E0                     __ptext72:
 18503                           	opt stack 0
 18504  0044E0                     _change_state_to_logs_11:
 18505                           	opt stack 18
 18506                           
 18507                           ;UI.c: 515: cur_state = 1011;
 18508                           
 18509                           ;incstack = 0
 18510  0044E0  0E03               	movlw	3
 18511  0044E2  0100               	movlb	0	; () banked
 18512  0044E4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18513  0044E6  0EF3               	movlw	243
 18514  0044E8  6FE0               	movwf	_cur_state& (0+255),b
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;UI.c: 516: lcdInst(0b10000000);;
 18518  0044EA  0E80               	movlw	128
 18519  0044EC  ECEA  F023         	call	i2_lcdInst
 18520                           
 18521                           ;UI.c: 517: printf("LOG 1          <");
 18522  0044F0  0E85               	movlw	low STR_39
 18523  0044F2  6E0D               	movwf	i2printf@f,c
 18524  0044F4  0EFD               	movlw	high STR_39
 18525  0044F6  6E0E               	movwf	i2printf@f+1,c
 18526  0044F8  ECD4  F00A         	call	i2_printf	;wreg free
 18527                           
 18528                           ;UI.c: 518: lcdInst(0b11000000);;
 18529  0044FC  0EC0               	movlw	192
 18530  0044FE  ECEA  F023         	call	i2_lcdInst
 18531                           
 18532                           ;UI.c: 519: printf("LOG 2           ");
 18533  004502  0EEC               	movlw	low STR_40
 18534  004504  6E0D               	movwf	i2printf@f,c
 18535  004506  0EFC               	movlw	high STR_40
 18536  004508  6E0E               	movwf	i2printf@f+1,c
 18537  00450A  ECD4  F00A         	call	i2_printf	;wreg free
 18538  00450E  0012               	return		;funcret
 18539  004510                     __end_of_change_state_to_logs_11:
 18540                           	opt stack 0
 18541                           pclatu	equ	0xFFB
 18542                           pclath	equ	0xFFA
 18543                           tblptru	equ	0xFF8
 18544                           tblptrh	equ	0xFF7
 18545                           tblptrl	equ	0xFF6
 18546                           tablat	equ	0xFF5
 18547                           prodh	equ	0xFF4
 18548                           prodl	equ	0xFF3
 18549                           intcon	equ	0xFF2
 18550                           intcon2	equ	0xFF1
 18551                           intcon3	equ	0xFF0
 18552                           indf0	equ	0xFEF
 18553                           postinc0	equ	0xFEE
 18554                           fsr0h	equ	0xFEA
 18555                           fsr0l	equ	0xFE9
 18556                           wreg	equ	0xFE8
 18557                           postdec1	equ	0xFE5
 18558                           fsr1h	equ	0xFE2
 18559                           fsr1l	equ	0xFE1
 18560                           indf2	equ	0xFDF
 18561                           postinc2	equ	0xFDE
 18562                           postdec2	equ	0xFDD
 18563                           fsr2h	equ	0xFDA
 18564                           fsr2l	equ	0xFD9
 18565                           status	equ	0xFD8
 18566                           
 18567 ;; *************** function _dispLogs *****************
 18568 ;; Defined at:
 18569 ;;		line 467 in file "UI.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;  myLog           2   17[COMRAM] int 
 18572 ;; Auto vars:     Size  Location     Type
 18573 ;;		None
 18574 ;; Return value:  Size  Location     Type
 18575 ;;                  1    wreg      void 
 18576 ;; Registers used:
 18577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18578 ;; Tracked objects:
 18579 ;;		On entry : 0/0
 18580 ;;		On exit  : 0/0
 18581 ;;		Unchanged: 0/0
 18582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;Total ram usage:        2 bytes
 18588 ;; Hardware stack levels used:    1
 18589 ;; Hardware stack levels required when called:    2
 18590 ;; This function calls:
 18591 ;;		_retrieveLog
 18592 ;; This function is called by:
 18593 ;;		_updateMenu
 18594 ;; This function uses a non-reentrant model
 18595 ;;
 18596                           
 18597                           	psect	text73
 18598  0046B8                     __ptext73:
 18599                           	opt stack 0
 18600  0046B8                     _dispLogs:
 18601                           	opt stack 20
 18602                           
 18603                           ;UI.c: 468: logstate = 1;
 18604                           
 18605                           ;incstack = 0
 18606  0046B8  0E00               	movlw	0
 18607  0046BA  0100               	movlb	0	; () banked
 18608  0046BC  6FF7               	movwf	(_logstate+1)& (0+255),b
 18609  0046BE  0E01               	movlw	1
 18610  0046C0  6FF6               	movwf	_logstate& (0+255),b
 18611                           
 18612                           ; BSR set to: 0
 18613                           ;UI.c: 469: log = myLog;
 18614  0046C2  C012  F0E6         	movff	dispLogs@myLog,_log
 18615  0046C6  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18616                           
 18617                           ; BSR set to: 0
 18618                           ;UI.c: 470: retrieveLog(myLog - 1);
 18619  0046CA  0EFF               	movlw	255
 18620  0046CC  2412               	addwf	dispLogs@myLog,w,c
 18621  0046CE  6E07               	movwf	retrieveLog@logNum,c
 18622  0046D0  0EFF               	movlw	255
 18623  0046D2  2013               	addwfc	dispLogs@myLog+1,w,c
 18624  0046D4  6E08               	movwf	retrieveLog@logNum+1,c
 18625  0046D6  EC99  F018         	call	_retrieveLog	;wreg free
 18626  0046DA  0012               	return		;funcret
 18627  0046DC                     __end_of_dispLogs:
 18628                           	opt stack 0
 18629                           pclatu	equ	0xFFB
 18630                           pclath	equ	0xFFA
 18631                           tblptru	equ	0xFF8
 18632                           tblptrh	equ	0xFF7
 18633                           tblptrl	equ	0xFF6
 18634                           tablat	equ	0xFF5
 18635                           prodh	equ	0xFF4
 18636                           prodl	equ	0xFF3
 18637                           intcon	equ	0xFF2
 18638                           intcon2	equ	0xFF1
 18639                           intcon3	equ	0xFF0
 18640                           indf0	equ	0xFEF
 18641                           postinc0	equ	0xFEE
 18642                           fsr0h	equ	0xFEA
 18643                           fsr0l	equ	0xFE9
 18644                           wreg	equ	0xFE8
 18645                           postdec1	equ	0xFE5
 18646                           fsr1h	equ	0xFE2
 18647                           fsr1l	equ	0xFE1
 18648                           indf2	equ	0xFDF
 18649                           postinc2	equ	0xFDE
 18650                           postdec2	equ	0xFDD
 18651                           fsr2h	equ	0xFDA
 18652                           fsr2l	equ	0xFD9
 18653                           status	equ	0xFD8
 18654                           
 18655 ;; *************** function _retrieveLog *****************
 18656 ;; Defined at:
 18657 ;;		line 134 in file "EEPROM.c"
 18658 ;; Parameters:    Size  Location     Type
 18659 ;;  logNum          2    6[COMRAM] int 
 18660 ;; Auto vars:     Size  Location     Type
 18661 ;;  i               2   13[COMRAM] int 
 18662 ;;  addr            2   15[COMRAM] unsigned short 
 18663 ;;  byte3           1   12[COMRAM] unsigned char 
 18664 ;;  byte2           1   11[COMRAM] unsigned char 
 18665 ;;  byte1           1   10[COMRAM] unsigned char 
 18666 ;; Return value:  Size  Location     Type
 18667 ;;                  1    wreg      void 
 18668 ;; Registers used:
 18669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18670 ;; Tracked objects:
 18671 ;;		On entry : 0/0
 18672 ;;		On exit  : 0/0
 18673 ;;		Unchanged: 0/0
 18674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18678 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18679 ;;Total ram usage:       11 bytes
 18680 ;; Hardware stack levels used:    1
 18681 ;; Hardware stack levels required when called:    1
 18682 ;; This function calls:
 18683 ;;		i2_EEPROM_read
 18684 ;;		i2___wmul
 18685 ;; This function is called by:
 18686 ;;		_dispLogs
 18687 ;; This function uses a non-reentrant model
 18688 ;;
 18689                           
 18690                           	psect	text74
 18691  003132                     __ptext74:
 18692                           	opt stack 0
 18693  003132                     _retrieveLog:
 18694                           	opt stack 20
 18695                           
 18696                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18697                           
 18698                           ;incstack = 0
 18699  003132  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18700  003136  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18701  00313A  0E00               	movlw	0
 18702  00313C  6E04               	movwf	i2___wmul@multiplicand+1,c
 18703  00313E  0E0B               	movlw	11
 18704  003140  6E03               	movwf	i2___wmul@multiplicand,c
 18705  003142  EC36  F023         	call	i2___wmul	;wreg free
 18706  003146  0E01               	movlw	1
 18707  003148  2401               	addwf	?i2___wmul,w,c
 18708  00314A  6E10               	movwf	retrieveLog@addr,c
 18709  00314C  0E00               	movlw	0
 18710  00314E  2002               	addwfc	?i2___wmul+1,w,c
 18711  003150  6E11               	movwf	retrieveLog@addr+1,c
 18712                           
 18713                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18714  003152  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18715  003156  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18716  00315A  ECB6  F023         	call	i2_EEPROM_read	;wreg free
 18717  00315E  6E0B               	movwf	retrieveLog@byte1,c
 18718                           
 18719                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18720  003160  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18721  003164  0E80               	movlw	128
 18722  003166  1609               	andwf	??_retrieveLog,f,c
 18723  003168  5009               	movf	??_retrieveLog,w,c
 18724  00316A  0100               	movlb	0	; () banked
 18725  00316C  6FE8               	movwf	_log_completion& (0+255),b
 18726  00316E  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18727                           
 18728                           ; BSR set to: 0
 18729                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18730  003170  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18731  003174  0E0F               	movlw	15
 18732  003176  1609               	andwf	??_retrieveLog,f,c
 18733  003178  5009               	movf	??_retrieveLog,w,c
 18734  00317A  0100               	movlb	0	; () banked
 18735  00317C  6FF2               	movwf	_log_count_total& (0+255),b
 18736  00317E  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18737                           
 18738                           ; BSR set to: 0
 18739                           ;EEPROM.c: 146: addr++;
 18740  003180  4A10               	infsnz	retrieveLog@addr,f,c
 18741  003182  2A11               	incf	retrieveLog@addr+1,f,c
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18745  003184  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18746  003188  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18747  00318C  ECB6  F023         	call	i2_EEPROM_read	;wreg free
 18748  003190  6E0C               	movwf	retrieveLog@byte2,c
 18749                           
 18750                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18751  003192  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18752  003196  0EF0               	movlw	240
 18753  003198  1609               	andwf	??_retrieveLog,f,c
 18754  00319A  5009               	movf	??_retrieveLog,w,c
 18755  00319C  0100               	movlb	0	; () banked
 18756  00319E  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18757  0031A0  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18758                           
 18759                           ; BSR set to: 0
 18760                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18761  0031A2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18762  0031A6  0E0F               	movlw	15
 18763  0031A8  1609               	andwf	??_retrieveLog,f,c
 18764  0031AA  5009               	movf	??_retrieveLog,w,c
 18765  0031AC  0100               	movlb	0	; () banked
 18766  0031AE  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18767  0031B0  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;EEPROM.c: 152: addr++;
 18771  0031B2  4A10               	infsnz	retrieveLog@addr,f,c
 18772  0031B4  2A11               	incf	retrieveLog@addr+1,f,c
 18773                           
 18774                           ; BSR set to: 0
 18775                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18776  0031B6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18777  0031BA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18778  0031BE  ECB6  F023         	call	i2_EEPROM_read	;wreg free
 18779  0031C2  6E0D               	movwf	retrieveLog@byte3,c
 18780                           
 18781                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18782  0031C4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18783  0031C8  0EF0               	movlw	240
 18784  0031CA  1609               	andwf	??_retrieveLog,f,c
 18785  0031CC  5009               	movf	??_retrieveLog,w,c
 18786  0031CE  0100               	movlb	0	; () banked
 18787  0031D0  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18788  0031D2  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18792  0031D4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18793  0031D8  0E0F               	movlw	15
 18794  0031DA  1609               	andwf	??_retrieveLog,f,c
 18795  0031DC  5009               	movf	??_retrieveLog,w,c
 18796  0031DE  0100               	movlb	0	; () banked
 18797  0031E0  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18798  0031E2  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18799                           
 18800                           ; BSR set to: 0
 18801                           ;EEPROM.c: 156: addr++;
 18802  0031E4  4A10               	infsnz	retrieveLog@addr,f,c
 18803  0031E6  2A11               	incf	retrieveLog@addr+1,f,c
 18804                           
 18805                           ; BSR set to: 0
 18806                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18807  0031E8  0E00               	movlw	0
 18808  0031EA  6E0F               	movwf	retrieveLog@i+1,c
 18809  0031EC  0E00               	movlw	0
 18810  0031EE  6E0E               	movwf	retrieveLog@i,c
 18811  0031F0                     i2l5980:
 18812                           
 18813                           ; BSR set to: 0
 18814  0031F0  BE0F               	btfsc	retrieveLog@i+1,7,c
 18815  0031F2  D006               	goto	i2l5984
 18816  0031F4  500F               	movf	retrieveLog@i+1,w,c
 18817  0031F6  E11E               	bnz	i2l5992
 18818  0031F8  0E07               	movlw	7
 18819  0031FA  5C0E               	subwf	retrieveLog@i,w,c
 18820  0031FC  B0D8               	btfsc	status,0,c
 18821  0031FE  D01A               	goto	i2l5992
 18822  003200                     i2l5984:
 18823                           
 18824                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18825  003200  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18826  003204  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18827  003208  ECB6  F023         	call	i2_EEPROM_read	;wreg free
 18828  00320C  6E09               	movwf	??_retrieveLog& (0+255),c
 18829  00320E  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18830  003210  90D8               	bcf	status,0,c
 18831  003212  340E               	rlcf	retrieveLog@i,w,c
 18832  003214  6ED9               	movwf	fsr2l,c
 18833  003216  340F               	rlcf	retrieveLog@i+1,w,c
 18834  003218  6EDA               	movwf	fsr2h,c
 18835  00321A  0E00               	movlw	low _log_startTime
 18836  00321C  26D9               	addwf	fsr2l,f,c
 18837  00321E  0E01               	movlw	high _log_startTime
 18838  003220  22DA               	addwfc	fsr2h,f,c
 18839  003222  C009  FFDE         	movff	??_retrieveLog,postinc2
 18840  003226  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18841                           
 18842                           ;EEPROM.c: 161: addr++;
 18843  00322A  4A10               	infsnz	retrieveLog@addr,f,c
 18844  00322C  2A11               	incf	retrieveLog@addr+1,f,c
 18845  00322E  4A0E               	infsnz	retrieveLog@i,f,c
 18846  003230  2A0F               	incf	retrieveLog@i+1,f,c
 18847  003232  D7DE               	goto	i2l5980
 18848  003234                     i2l5992:
 18849                           
 18850                           ;EEPROM.c: 162: }
 18851                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18852  003234  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18853  003238  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18854  00323C  ECB6  F023         	call	i2_EEPROM_read	;wreg free
 18855  003240  6E09               	movwf	??_retrieveLog& (0+255),c
 18856  003242  5009               	movf	??_retrieveLog,w,c
 18857  003244  0100               	movlb	0	; () banked
 18858  003246  6FF4               	movwf	_log_total_time& (0+255),b
 18859  003248  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18860                           
 18861                           ; BSR set to: 0
 18862  00324A  0012               	return		;funcret
 18863  00324C                     __end_of_retrieveLog:
 18864                           	opt stack 0
 18865                           pclatu	equ	0xFFB
 18866                           pclath	equ	0xFFA
 18867                           tblptru	equ	0xFF8
 18868                           tblptrh	equ	0xFF7
 18869                           tblptrl	equ	0xFF6
 18870                           tablat	equ	0xFF5
 18871                           prodh	equ	0xFF4
 18872                           prodl	equ	0xFF3
 18873                           intcon	equ	0xFF2
 18874                           intcon2	equ	0xFF1
 18875                           intcon3	equ	0xFF0
 18876                           indf0	equ	0xFEF
 18877                           postinc0	equ	0xFEE
 18878                           fsr0h	equ	0xFEA
 18879                           fsr0l	equ	0xFE9
 18880                           wreg	equ	0xFE8
 18881                           postdec1	equ	0xFE5
 18882                           fsr1h	equ	0xFE2
 18883                           fsr1l	equ	0xFE1
 18884                           indf2	equ	0xFDF
 18885                           postinc2	equ	0xFDE
 18886                           postdec2	equ	0xFDD
 18887                           fsr2h	equ	0xFDA
 18888                           fsr2l	equ	0xFD9
 18889                           status	equ	0xFD8
 18890                           
 18891 ;; *************** function i2_EEPROM_read *****************
 18892 ;; Defined at:
 18893 ;;		line 68 in file "EEPROM.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;  address         2    0[COMRAM] unsigned short 
 18896 ;; Auto vars:     Size  Location     Type
 18897 ;;		None
 18898 ;; Return value:  Size  Location     Type
 18899 ;;                  1    wreg      unsigned char 
 18900 ;; Registers used:
 18901 ;;		wreg, status,2
 18902 ;; Tracked objects:
 18903 ;;		On entry : 0/0
 18904 ;;		On exit  : 0/0
 18905 ;;		Unchanged: 0/0
 18906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18910 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;Total ram usage:        2 bytes
 18912 ;; Hardware stack levels used:    1
 18913 ;; This function calls:
 18914 ;;		Nothing
 18915 ;; This function is called by:
 18916 ;;		_retrieveLog
 18917 ;; This function uses a non-reentrant model
 18918 ;;
 18919                           
 18920                           	psect	text75
 18921  00476C                     __ptext75:
 18922                           	opt stack 0
 18923  00476C                     i2_EEPROM_read:
 18924                           	opt stack 20
 18925                           
 18926                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18927                           
 18928                           ; BSR set to: 0
 18929                           ;incstack = 0
 18930  00476C  5002               	movf	i2EEPROM_read@address+1,w,c
 18931  00476E  6EAA               	movwf	4010,c	;volatile
 18932                           
 18933                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18934  004770  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18935                           
 18936                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18937  004774  9EA6               	bcf	4006,7,c	;volatile
 18938                           
 18939                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18940  004776  9CA6               	bcf	4006,6,c	;volatile
 18941                           
 18942                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18943  004778  80A6               	bsf	4006,0,c	;volatile
 18944  00477A                     i2l937:
 18945  00477A  B0A6               	btfsc	4006,0,c	;volatile
 18946  00477C  D7FE               	goto	i2l937
 18947                           
 18948                           ;EEPROM.c: 81: return EEDATA;
 18949  00477E  50A8               	movf	4008,w,c	;volatile
 18950  004780  0012               	return	
 18951  004782                     __end_ofi2_EEPROM_read:
 18952                           	opt stack 0
 18953                           pclatu	equ	0xFFB
 18954                           pclath	equ	0xFFA
 18955                           tblptru	equ	0xFF8
 18956                           tblptrh	equ	0xFF7
 18957                           tblptrl	equ	0xFF6
 18958                           tablat	equ	0xFF5
 18959                           prodh	equ	0xFF4
 18960                           prodl	equ	0xFF3
 18961                           intcon	equ	0xFF2
 18962                           intcon2	equ	0xFF1
 18963                           intcon3	equ	0xFF0
 18964                           indf0	equ	0xFEF
 18965                           postinc0	equ	0xFEE
 18966                           fsr0h	equ	0xFEA
 18967                           fsr0l	equ	0xFE9
 18968                           wreg	equ	0xFE8
 18969                           postdec1	equ	0xFE5
 18970                           fsr1h	equ	0xFE2
 18971                           fsr1l	equ	0xFE1
 18972                           indf2	equ	0xFDF
 18973                           postinc2	equ	0xFDE
 18974                           postdec2	equ	0xFDD
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979 ;; *************** function _printSortTimer *****************
 18980 ;; Defined at:
 18981 ;;		line 273 in file "sort.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;		None
 18984 ;; Auto vars:     Size  Location     Type
 18985 ;;  i               2   72[COMRAM] int 
 18986 ;;  curTime        14   46[COMRAM] int [7]
 18987 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18988 ;;  sec             2   66[COMRAM] int 
 18989 ;;  min             2   64[COMRAM] int 
 18990 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18991 ;;  start_sec       2   60[COMRAM] unsigned int 
 18992 ;;  hour            2   44[COMRAM] int 
 18993 ;; Return value:  Size  Location     Type
 18994 ;;                  1    wreg      void 
 18995 ;; Registers used:
 18996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18997 ;; Tracked objects:
 18998 ;;		On entry : 0/0
 18999 ;;		On exit  : 0/0
 19000 ;;		Unchanged: 0/0
 19001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19003 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19004 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19005 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19006 ;;Total ram usage:       33 bytes
 19007 ;; Hardware stack levels used:    1
 19008 ;; Hardware stack levels required when called:    3
 19009 ;; This function calls:
 19010 ;;		i2___lwdiv
 19011 ;;		i2___lwmod
 19012 ;;		i2___wmul
 19013 ;;		i2_getRTC
 19014 ;;		i2_lcdInst
 19015 ;;		i2_printf
 19016 ;; This function is called by:
 19017 ;;		_handler
 19018 ;; This function uses a non-reentrant model
 19019 ;;
 19020                           
 19021                           	psect	text76
 19022  0026C4                     __ptext76:
 19023                           	opt stack 0
 19024  0026C4                     _printSortTimer:
 19025                           	opt stack 20
 19026                           
 19027                           ;sort.c: 274: getRTC();
 19028                           
 19029                           ;incstack = 0
 19030  0026C4  EC9A  F01E         	call	i2_getRTC	;wreg free
 19031                           
 19032                           ;sort.c: 275: int curTime[7];
 19033                           ;sort.c: 276: for(int i = 0; i < 7; i++){
 19034  0026C8  0E00               	movlw	0
 19035  0026CA  6E4A               	movwf	printSortTimer@i+1,c
 19036  0026CC  0E00               	movlw	0
 19037  0026CE  6E49               	movwf	printSortTimer@i,c
 19038  0026D0                     i2l8068:
 19039  0026D0  BE4A               	btfsc	printSortTimer@i+1,7,c
 19040  0026D2  D006               	goto	i2l8072
 19041  0026D4  504A               	movf	printSortTimer@i+1,w,c
 19042  0026D6  E131               	bnz	i2l8078
 19043  0026D8  0E07               	movlw	7
 19044  0026DA  5C49               	subwf	printSortTimer@i,w,c
 19045  0026DC  B0D8               	btfsc	status,0,c
 19046  0026DE  D02D               	goto	i2l8078
 19047  0026E0                     i2l8072:
 19048                           
 19049                           ;sort.c: 277: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19050  0026E0  0E24               	movlw	low _time
 19051  0026E2  2449               	addwf	printSortTimer@i,w,c
 19052  0026E4  6ED9               	movwf	fsr2l,c
 19053  0026E6  0E01               	movlw	high _time
 19054  0026E8  204A               	addwfc	printSortTimer@i+1,w,c
 19055  0026EA  6EDA               	movwf	fsr2h,c
 19056  0026EC  50DF               	movf	indf2,w,c
 19057  0026EE  6E2A               	movwf	??_printSortTimer& (0+255),c
 19058  0026F0  3A2A               	swapf	??_printSortTimer,f,c
 19059  0026F2  0E0F               	movlw	15
 19060  0026F4  162A               	andwf	??_printSortTimer,f,c
 19061  0026F6  0E0F               	movlw	15
 19062  0026F8  162A               	andwf	??_printSortTimer,f,c
 19063  0026FA  502A               	movf	??_printSortTimer,w,c
 19064  0026FC  0D0A               	mullw	10
 19065  0026FE  0E24               	movlw	low _time
 19066  002700  2449               	addwf	printSortTimer@i,w,c
 19067  002702  6ED9               	movwf	fsr2l,c
 19068  002704  0E01               	movlw	high _time
 19069  002706  204A               	addwfc	printSortTimer@i+1,w,c
 19070  002708  6EDA               	movwf	fsr2h,c
 19071  00270A  50DF               	movf	indf2,w,c
 19072  00270C  0B0F               	andlw	15
 19073  00270E  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19074  002710  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19075  002712  50F3               	movf	prodl,w,c
 19076  002714  262B               	addwf	??_printSortTimer+1,f,c
 19077  002716  50F4               	movf	prodh,w,c
 19078  002718  222C               	addwfc	??_printSortTimer+2,f,c
 19079  00271A  90D8               	bcf	status,0,c
 19080  00271C  3449               	rlcf	printSortTimer@i,w,c
 19081  00271E  6ED9               	movwf	fsr2l,c
 19082  002720  344A               	rlcf	printSortTimer@i+1,w,c
 19083  002722  6EDA               	movwf	fsr2h,c
 19084  002724  0E2F               	movlw	low printSortTimer@curTime
 19085  002726  26D9               	addwf	fsr2l,f,c
 19086  002728  0E00               	movlw	high printSortTimer@curTime
 19087  00272A  22DA               	addwfc	fsr2h,f,c
 19088  00272C  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19089  002730  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19090  002734  4A49               	infsnz	printSortTimer@i,f,c
 19091  002736  2A4A               	incf	printSortTimer@i+1,f,c
 19092  002738  D7CB               	goto	i2l8068
 19093  00273A                     i2l8078:
 19094                           
 19095                           ;sort.c: 278: }
 19096                           ;sort.c: 279: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19097  00273A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19098  00273E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19099  002742  0E00               	movlw	0
 19100  002744  6E04               	movwf	i2___wmul@multiplicand+1,c
 19101  002746  0E3C               	movlw	60
 19102  002748  6E03               	movwf	i2___wmul@multiplicand,c
 19103  00274A  EC36  F023         	call	i2___wmul	;wreg free
 19104  00274E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19105  002752  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19106  002756  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19107  00275A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19108  00275E  0E0E               	movlw	14
 19109  002760  6E04               	movwf	i2___wmul@multiplicand+1,c
 19110  002762  0E10               	movlw	16
 19111  002764  6E03               	movwf	i2___wmul@multiplicand,c
 19112  002766  EC36  F023         	call	i2___wmul	;wreg free
 19113  00276A  5001               	movf	?i2___wmul,w,c
 19114  00276C  262A               	addwf	??_printSortTimer,f,c
 19115  00276E  5002               	movf	?i2___wmul+1,w,c
 19116  002770  222B               	addwfc	??_printSortTimer+1,f,c
 19117  002772  0101               	movlb	1	; () banked
 19118  002774  510E               	movf	_startTime& (0+255),w,b
 19119  002776  242A               	addwf	??_printSortTimer,w,c
 19120  002778  6E3D               	movwf	printSortTimer@start_sec,c
 19121  00277A  0101               	movlb	1	; () banked
 19122  00277C  510F               	movf	(_startTime+1)& (0+255),w,b
 19123  00277E  202B               	addwfc	??_printSortTimer+1,w,c
 19124  002780  6E3E               	movwf	printSortTimer@start_sec+1,c
 19125                           
 19126                           ;sort.c: 280: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19127  002782  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19128  002786  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19129  00278A  0E00               	movlw	0
 19130  00278C  6E04               	movwf	i2___wmul@multiplicand+1,c
 19131  00278E  0E3C               	movlw	60
 19132  002790  6E03               	movwf	i2___wmul@multiplicand,c
 19133  002792  EC36  F023         	call	i2___wmul	;wreg free
 19134  002796  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19135  00279A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19136  00279E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19137  0027A2  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19138  0027A6  0E0E               	movlw	14
 19139  0027A8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19140  0027AA  0E10               	movlw	16
 19141  0027AC  6E03               	movwf	i2___wmul@multiplicand,c
 19142  0027AE  EC36  F023         	call	i2___wmul	;wreg free
 19143  0027B2  5001               	movf	?i2___wmul,w,c
 19144  0027B4  262A               	addwf	??_printSortTimer,f,c
 19145  0027B6  5002               	movf	?i2___wmul+1,w,c
 19146  0027B8  222B               	addwfc	??_printSortTimer+1,f,c
 19147  0027BA  502F               	movf	printSortTimer@curTime,w,c
 19148  0027BC  242A               	addwf	??_printSortTimer,w,c
 19149  0027BE  6E3F               	movwf	printSortTimer@cur_sec,c
 19150  0027C0  5030               	movf	printSortTimer@curTime+1,w,c
 19151  0027C2  202B               	addwfc	??_printSortTimer+1,w,c
 19152  0027C4  6E40               	movwf	printSortTimer@cur_sec+1,c
 19153                           
 19154                           ;sort.c: 281: unsigned int timeDiff = cur_sec - start_sec;
 19155  0027C6  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19156  0027CA  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19157  0027CE  1E2A               	comf	??_printSortTimer,f,c
 19158  0027D0  1E2B               	comf	??_printSortTimer+1,f,c
 19159  0027D2  4A2A               	infsnz	??_printSortTimer,f,c
 19160  0027D4  2A2B               	incf	??_printSortTimer+1,f,c
 19161  0027D6  503F               	movf	printSortTimer@cur_sec,w,c
 19162  0027D8  242A               	addwf	??_printSortTimer,w,c
 19163  0027DA  6E47               	movwf	printSortTimer@timeDiff,c
 19164  0027DC  5040               	movf	printSortTimer@cur_sec+1,w,c
 19165  0027DE  202B               	addwfc	??_printSortTimer+1,w,c
 19166  0027E0  6E48               	movwf	printSortTimer@timeDiff+1,c
 19167                           
 19168                           ;sort.c: 283: total_time = timeDiff;
 19169  0027E2  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19170  0027E6  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19171                           
 19172                           ;sort.c: 285: if(timeDiff >= 10){
 19173  0027EA  5048               	movf	printSortTimer@timeDiff+1,w,c
 19174  0027EC  E104               	bnz	i2u698_40
 19175  0027EE  0E0A               	movlw	10
 19176  0027F0  5C47               	subwf	printSortTimer@timeDiff,w,c
 19177  0027F2  A0D8               	btfss	status,0,c
 19178  0027F4  D003               	goto	i2l8088
 19179  0027F6                     i2u698_40:
 19180                           
 19181                           ;sort.c: 286: machine_state = DoneSorting_state;
 19182  0027F6  0E02               	movlw	2
 19183  0027F8  0100               	movlb	0	; () banked
 19184  0027FA  6FFC               	movwf	_machine_state& (0+255),b
 19185  0027FC                     i2l8088:
 19186                           
 19187                           ;sort.c: 288: }
 19188                           ;sort.c: 290: int hour = timeDiff / 3600;
 19189  0027FC  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19190  002800  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19191  002804  0E0E               	movlw	14
 19192  002806  6E09               	movwf	i2___lwdiv@divisor+1,c
 19193  002808  0E10               	movlw	16
 19194  00280A  6E08               	movwf	i2___lwdiv@divisor,c
 19195  00280C  EC22  F020         	call	i2___lwdiv	;wreg free
 19196  002810  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19197  002814  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19198                           
 19199                           ;sort.c: 291: int min = (timeDiff % 3600) / 60;
 19200  002818  0E0E               	movlw	14
 19201  00281A  6E04               	movwf	i2___lwmod@divisor+1,c
 19202  00281C  0E10               	movlw	16
 19203  00281E  6E03               	movwf	i2___lwmod@divisor,c
 19204  002820  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19205  002824  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19206  002828  EC08  F021         	call	i2___lwmod	;wreg free
 19207  00282C  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19208  002830  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19209  002834  0E00               	movlw	0
 19210  002836  6E09               	movwf	i2___lwdiv@divisor+1,c
 19211  002838  0E3C               	movlw	60
 19212  00283A  6E08               	movwf	i2___lwdiv@divisor,c
 19213  00283C  EC22  F020         	call	i2___lwdiv	;wreg free
 19214  002840  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19215  002844  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19216                           
 19217                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19218  002848  0E0E               	movlw	14
 19219  00284A  6E04               	movwf	i2___lwmod@divisor+1,c
 19220  00284C  0E10               	movlw	16
 19221  00284E  6E03               	movwf	i2___lwmod@divisor,c
 19222  002850  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19223  002854  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19224  002858  EC08  F021         	call	i2___lwmod	;wreg free
 19225  00285C  C001  F045         	movff	?i2___lwmod,_printSortTimer$2414
 19226  002860  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2414+1
 19227                           
 19228                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 19229  002864  C045  F001         	movff	_printSortTimer$2414,i2___lwmod@dividend
 19230  002868  C046  F002         	movff	_printSortTimer$2414+1,i2___lwmod@dividend+1
 19231  00286C  0E00               	movlw	0
 19232  00286E  6E04               	movwf	i2___lwmod@divisor+1,c
 19233  002870  0E3C               	movlw	60
 19234  002872  6E03               	movwf	i2___lwmod@divisor,c
 19235  002874  EC08  F021         	call	i2___lwmod	;wreg free
 19236  002878  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19237  00287C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19238                           
 19239                           ;sort.c: 294: lcdInst(0b10000000);;
 19240  002880  0E80               	movlw	128
 19241  002882  ECEA  F023         	call	i2_lcdInst
 19242                           
 19243                           ;sort.c: 295: printf("SORTING...");
 19244  002886  0E72               	movlw	low STR_64
 19245  002888  6E0D               	movwf	i2printf@f,c
 19246  00288A  0EFF               	movlw	high STR_64
 19247  00288C  6E0E               	movwf	i2printf@f+1,c
 19248  00288E  ECD4  F00A         	call	i2_printf	;wreg free
 19249                           
 19250                           ;sort.c: 296: lcdInst(0b11000000);;
 19251  002892  0EC0               	movlw	192
 19252  002894  ECEA  F023         	call	i2_lcdInst
 19253                           
 19254                           ;sort.c: 297: printf("TIME %d:%02d", min, sec);
 19255  002898  0E43               	movlw	low STR_65
 19256  00289A  6E0D               	movwf	i2printf@f,c
 19257  00289C  0EFF               	movlw	high STR_65
 19258  00289E  6E0E               	movwf	i2printf@f+1,c
 19259  0028A0  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19260  0028A4  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19261  0028A8  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19262  0028AC  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19263  0028B0  ECD4  F00A         	call	i2_printf	;wreg free
 19264  0028B4  0012               	return		;funcret
 19265  0028B6                     __end_of_printSortTimer:
 19266                           	opt stack 0
 19267                           pclatu	equ	0xFFB
 19268                           pclath	equ	0xFFA
 19269                           tblptru	equ	0xFF8
 19270                           tblptrh	equ	0xFF7
 19271                           tblptrl	equ	0xFF6
 19272                           tablat	equ	0xFF5
 19273                           prodh	equ	0xFF4
 19274                           prodl	equ	0xFF3
 19275                           intcon	equ	0xFF2
 19276                           intcon2	equ	0xFF1
 19277                           intcon3	equ	0xFF0
 19278                           indf0	equ	0xFEF
 19279                           postinc0	equ	0xFEE
 19280                           fsr0h	equ	0xFEA
 19281                           fsr0l	equ	0xFE9
 19282                           wreg	equ	0xFE8
 19283                           postdec1	equ	0xFE5
 19284                           fsr1h	equ	0xFE2
 19285                           fsr1l	equ	0xFE1
 19286                           indf2	equ	0xFDF
 19287                           postinc2	equ	0xFDE
 19288                           postdec2	equ	0xFDD
 19289                           fsr2h	equ	0xFDA
 19290                           fsr2l	equ	0xFD9
 19291                           status	equ	0xFD8
 19292                           
 19293 ;; *************** function i2_printf *****************
 19294 ;; Defined at:
 19295 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19298 ;;		 -> STR_116(17), STR_115(17), STR_114(10), STR_113(13), 
 19299 ;;		 -> STR_112(18), STR_111(18), STR_110(17), STR_109(15), 
 19300 ;;		 -> STR_108(15), STR_107(15), STR_106(17), STR_105(17), 
 19301 ;;		 -> STR_104(17), STR_103(16), STR_102(17), STR_101(17), 
 19302 ;;		 -> STR_100(17), STR_99(17), STR_98(17), STR_97(17), 
 19303 ;;		 -> STR_96(15), STR_95(11), STR_94(17), STR_93(11), 
 19304 ;;		 -> STR_92(17), STR_91(14), STR_90(15), STR_89(14), 
 19305 ;;		 -> STR_88(10), STR_87(9), STR_86(9), STR_85(10), 
 19306 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 19307 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 19308 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 19309 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 19310 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 19311 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 19312 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 19313 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 19314 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 19315 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 19316 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 19317 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 19318 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 19319 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 19320 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 19321 ;; Auto vars:     Size  Location     Type
 19322 ;;  printf          4    0        struct .
 19323 ;;  printf          2   39[COMRAM] int 
 19324 ;;  printf          2   35[COMRAM] unsigned int 
 19325 ;;  printf          2   33[COMRAM] unsigned int 
 19326 ;;  printf          2   31[COMRAM] PTR void [1]
 19327 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19328 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19329 ;;		 -> STR_117(7), count_total(2), printRTC@month(4), UI@month(4), 
 19330 ;;  printf          1   38[COMRAM] char 
 19331 ;;  printf          1   37[COMRAM] unsigned char 
 19332 ;;  printf          1   28[COMRAM] char 
 19333 ;; Return value:  Size  Location     Type
 19334 ;;                  2   12[COMRAM] int 
 19335 ;; Registers used:
 19336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19337 ;; Tracked objects:
 19338 ;;		On entry : 0/0
 19339 ;;		On exit  : 0/0
 19340 ;;		Unchanged: 0/0
 19341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19342 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19345 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;Total ram usage:       29 bytes
 19347 ;; Hardware stack levels used:    1
 19348 ;; Hardware stack levels required when called:    2
 19349 ;; This function calls:
 19350 ;;		i2___lwdiv
 19351 ;;		i2___lwmod
 19352 ;;		i2___wmul
 19353 ;;		i2_isdigit
 19354 ;;		i2_putch
 19355 ;; This function is called by:
 19356 ;;		_change_state_to_menu_11
 19357 ;;		_change_state_to_menu_23
 19358 ;;		_change_state_to_logs_11
 19359 ;;		_change_state_to_logs_12
 19360 ;;		_change_state_to_logs_22
 19361 ;;		_change_state_to_logs_23
 19362 ;;		_change_state_to_logs_33
 19363 ;;		_change_state_to_logs_34
 19364 ;;		_printSortTimer
 19365 ;;		i2_change_state_to_menu_start
 19366 ;;		i2_change_state_to_menu_12
 19367 ;;		i2_change_state_to_menu_22
 19368 ;;		i2_printRTC
 19369 ;; This function uses a non-reentrant model
 19370 ;;
 19371                           
 19372                           	psect	text77
 19373  0015A8                     __ptext77:
 19374                           	opt stack 0
 19375  0015A8                     i2_printf:
 19376                           	opt stack 19
 19377                           
 19378                           ;doprnt.c: 466: va_list ap;
 19379                           ;doprnt.c: 499: signed char c;
 19380                           ;doprnt.c: 501: int width;
 19381                           ;doprnt.c: 506: signed char prec;
 19382                           ;doprnt.c: 508: unsigned char flag;
 19383                           ;doprnt.c: 523: union {
 19384                           ;doprnt.c: 524: unsigned long vd;
 19385                           ;doprnt.c: 525: double integ;
 19386                           ;doprnt.c: 526: } tmpval;
 19387                           ;doprnt.c: 528: unsigned int val;
 19388                           ;doprnt.c: 529: unsigned len;
 19389                           ;doprnt.c: 530: const char * cp;
 19390                           ;doprnt.c: 533: *ap = __va_start();
 19391                           
 19392                           ;incstack = 0
 19393  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19394  0015AA  6E20               	movwf	i2printf@ap,c
 19395  0015AC  0E00               	movlw	high (?i2_printf+2)
 19396  0015AE  6E21               	movwf	i2printf@ap+1,c
 19397                           
 19398                           ;doprnt.c: 536: while(c = *f++) {
 19399  0015B0  D1A4               	goto	i2l5798
 19400  0015B2                     i2l5668:
 19401                           
 19402                           ;doprnt.c: 538: if(c != '%')
 19403  0015B2  0E25               	movlw	37
 19404  0015B4  1827               	xorwf	i2printf@c,w,c
 19405  0015B6  B4D8               	btfsc	status,2,c
 19406  0015B8  D004               	goto	i2l5672
 19407                           
 19408                           ;doprnt.c: 540: {
 19409                           ;doprnt.c: 541: (putch(c) );
 19410  0015BA  5027               	movf	i2printf@c,w,c
 19411  0015BC  ECE4  F023         	call	i2_putch
 19412                           
 19413                           ;doprnt.c: 542: continue;
 19414  0015C0  D19C               	goto	i2l5798
 19415  0015C2                     i2l5672:
 19416                           
 19417                           ;doprnt.c: 543: }
 19418                           ;doprnt.c: 546: width = 0;
 19419  0015C2  0E00               	movlw	0
 19420  0015C4  6E29               	movwf	i2printf@width+1,c
 19421  0015C6  0E00               	movlw	0
 19422  0015C8  6E28               	movwf	i2printf@width,c
 19423                           
 19424                           ;doprnt.c: 548: flag = 0;
 19425  0015CA  0E00               	movlw	0
 19426  0015CC  6E26               	movwf	i2printf@flag,c
 19427                           
 19428                           ;doprnt.c: 551: switch(*f) {
 19429                           
 19430                           ;doprnt.c: 550: for(;;) {
 19431  0015CE  D003               	goto	i2l5678
 19432  0015D0                     i2l5674:
 19433                           
 19434                           ;doprnt.c: 580: flag |= 0x04;
 19435  0015D0  8426               	bsf	i2printf@flag,2,c
 19436                           
 19437                           ;doprnt.c: 581: f++;
 19438  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19439  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19440  0015D6                     i2l5678:
 19441  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19442  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19443  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19444  0015DE  6AF8               	clrf	tblptru,c
 19445  0015E0                     	endif
 19446  0015E0                     	if	0	;tblptru may be non-zero
 19447  0015E0                     	endif
 19448  0015E0  0008               	tblrd		*
 19449  0015E2  50F5               	movf	tablat,w,c
 19450                           
 19451                           ; Switch size 1, requested type "space"
 19452                           ; Number of cases is 1, Range of values is 48 to 48
 19453                           ; switch strategies available:
 19454                           ; Name         Instructions Cycles
 19455                           ; simple_byte            4     3 (average)
 19456                           ;	Chosen strategy is simple_byte
 19457  0015E4  0A30               	xorlw	48	; case 48
 19458  0015E6  B4D8               	btfsc	status,2,c
 19459  0015E8  D7F3               	goto	i2l5674
 19460                           
 19461                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19462                           
 19463                           ;doprnt.c: 586: }
 19464                           
 19465                           ;doprnt.c: 585: break;
 19466  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19467  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19468  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19469  0015F2  6AF8               	clrf	tblptru,c
 19470  0015F4                     	endif
 19471  0015F4                     	if	0	;tblptru may be non-zero
 19472  0015F4                     	endif
 19473  0015F4  0008               	tblrd		*
 19474  0015F6  50F5               	movf	tablat,w,c
 19475  0015F8  EC90  F023         	call	i2_isdigit
 19476  0015FC  A0D8               	btfss	status,0,c
 19477  0015FE  D0A6               	goto	i2l5726
 19478                           
 19479                           ;doprnt.c: 598: width = 0;
 19480  001600  0E00               	movlw	0
 19481  001602  6E29               	movwf	i2printf@width+1,c
 19482  001604  0E00               	movlw	0
 19483  001606  6E28               	movwf	i2printf@width,c
 19484  001608                     i2l5684:
 19485                           
 19486                           ;doprnt.c: 600: width *= 10;
 19487  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19488  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19489  001610  0E00               	movlw	0
 19490  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19491  001614  0E0A               	movlw	10
 19492  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19493  001618  EC36  F023         	call	i2___wmul	;wreg free
 19494  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19495  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19496                           
 19497                           ;doprnt.c: 601: width += *f++ - '0';
 19498  001624  0ED0               	movlw	208
 19499  001626  6E19               	movwf	??i2_printf& (0+255),c
 19500  001628  0EFF               	movlw	255
 19501  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19502  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19503  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19504  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19505  001634  6AF8               	clrf	tblptru,c
 19506  001636                     	endif
 19507  001636                     	if	0	;tblptru may be non-zero
 19508  001636                     	endif
 19509  001636  0008               	tblrd		*
 19510  001638  50F5               	movf	tablat,w,c
 19511  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19512  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19513  00163E  5019               	movf	??i2_printf,w,c
 19514  001640  261B               	addwf	??i2_printf+2,f,c
 19515  001642  501A               	movf	??i2_printf+1,w,c
 19516  001644  221C               	addwfc	??i2_printf+3,f,c
 19517  001646  501B               	movf	??i2_printf+2,w,c
 19518  001648  2628               	addwf	i2printf@width,f,c
 19519  00164A  501C               	movf	??i2_printf+3,w,c
 19520  00164C  2229               	addwfc	i2printf@width+1,f,c
 19521  00164E  4A0D               	infsnz	i2printf@f,f,c
 19522  001650  2A0E               	incf	i2printf@f+1,f,c
 19523                           
 19524                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19525  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19526  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19527  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19528  00165A  6AF8               	clrf	tblptru,c
 19529  00165C                     	endif
 19530  00165C                     	if	0	;tblptru may be non-zero
 19531  00165C                     	endif
 19532  00165C  0008               	tblrd		*
 19533  00165E  50F5               	movf	tablat,w,c
 19534  001660  EC90  F023         	call	i2_isdigit
 19535  001664  A0D8               	btfss	status,0,c
 19536  001666  D072               	goto	i2l5726
 19537  001668  D7CF               	goto	i2l5684
 19538  00166A                     i2l5692:
 19539                           
 19540                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19541  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19542  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19543  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19544  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19545  00167A  0E02               	movlw	2
 19546  00167C  2620               	addwf	i2printf@ap,f,c
 19547  00167E  0E00               	movlw	0
 19548  001680  2221               	addwfc	i2printf@ap+1,f,c
 19549                           
 19550                           ;doprnt.c: 740: if(!cp)
 19551  001682  501E               	movf	i2printf@cp,w,c
 19552  001684  101F               	iorwf	i2printf@cp+1,w,c
 19553  001686  A4D8               	btfss	status,2,c
 19554  001688  D004               	goto	i2l5700
 19555                           
 19556                           ;doprnt.c: 741: cp = "(null)";
 19557  00168A  0EB6               	movlw	low STR_117
 19558  00168C  6E1E               	movwf	i2printf@cp,c
 19559  00168E  0EFF               	movlw	high STR_117
 19560  001690  6E1F               	movwf	i2printf@cp+1,c
 19561  001692                     i2l5700:
 19562                           
 19563                           ;doprnt.c: 745: len = 0;
 19564  001692  0E00               	movlw	0
 19565  001694  6E23               	movwf	i2printf@len+1,c
 19566  001696  0E00               	movlw	0
 19567  001698  6E22               	movwf	i2printf@len,c
 19568                           
 19569                           ;doprnt.c: 746: while(cp[len])
 19570  00169A  D002               	goto	i2l5704
 19571  00169C                     i2l5702:
 19572                           
 19573                           ;doprnt.c: 747: len++;
 19574  00169C  4A22               	infsnz	i2printf@len,f,c
 19575  00169E  2A23               	incf	i2printf@len+1,f,c
 19576  0016A0                     i2l5704:
 19577  0016A0  5022               	movf	i2printf@len,w,c
 19578  0016A2  241E               	addwf	i2printf@cp,w,c
 19579  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19580  0016A6  5023               	movf	i2printf@len+1,w,c
 19581  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19582  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19583  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19584  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19585  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19586  0016B6  6EF8               	movwf	tblptru,c
 19587  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19588  0016BA  64F7               	cpfsgt	tblptrh,c
 19589  0016BC  D003               	bra	i2u424_47
 19590  0016BE  0008               	tblrd		*
 19591  0016C0  50F5               	movf	tablat,w,c
 19592  0016C2  D005               	bra	i2u424_40
 19593  0016C4                     i2u424_47:
 19594  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19595  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19596  0016CC  50EF               	movf	indf0,w,c
 19597  0016CE                     i2u424_40:
 19598  0016CE  0900               	iorlw	0
 19599  0016D0  A4D8               	btfss	status,2,c
 19600  0016D2  D7E4               	goto	i2l5702
 19601                           
 19602                           ;doprnt.c: 757: if(width > len)
 19603  0016D4  5028               	movf	i2printf@width,w,c
 19604  0016D6  5C22               	subwf	i2printf@len,w,c
 19605  0016D8  5029               	movf	i2printf@width+1,w,c
 19606  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19607  0016DC  B0D8               	btfsc	status,0,c
 19608  0016DE  D005               	goto	i2l5710
 19609                           
 19610                           ;doprnt.c: 758: width -= len;
 19611  0016E0  5022               	movf	i2printf@len,w,c
 19612  0016E2  5E28               	subwf	i2printf@width,f,c
 19613  0016E4  5023               	movf	i2printf@len+1,w,c
 19614  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19615  0016E8  D008               	goto	i2l5714
 19616  0016EA                     i2l5710:
 19617                           
 19618                           ;doprnt.c: 759: else
 19619                           ;doprnt.c: 760: width = 0;
 19620  0016EA  0E00               	movlw	0
 19621  0016EC  6E29               	movwf	i2printf@width+1,c
 19622  0016EE  0E00               	movlw	0
 19623  0016F0  6E28               	movwf	i2printf@width,c
 19624                           
 19625                           ;doprnt.c: 764: while(width--)
 19626  0016F2  D003               	goto	i2l5714
 19627  0016F4                     i2l5712:
 19628                           
 19629                           ;doprnt.c: 765: (putch(' ') );
 19630  0016F4  0E20               	movlw	32
 19631  0016F6  ECE4  F023         	call	i2_putch
 19632  0016FA                     i2l5714:
 19633  0016FA  0628               	decf	i2printf@width,f,c
 19634  0016FC  A0D8               	btfss	status,0,c
 19635  0016FE  0629               	decf	i2printf@width+1,f,c
 19636  001700  2828               	incf	i2printf@width,w,c
 19637  001702  E1F8               	bnz	i2l5712
 19638  001704  2829               	incf	i2printf@width+1,w,c
 19639  001706  B4D8               	btfsc	status,2,c
 19640  001708  D016               	goto	i2l5720
 19641  00170A  D7F4               	goto	i2l5712
 19642  00170C                     i2l5716:
 19643                           
 19644                           ;doprnt.c: 768: (putch(*cp++) );
 19645  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19646  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19647  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19648  001716  6EF8               	movwf	tblptru,c
 19649  001718  0E0F               	movlw	(high __ramtop+-1)
 19650  00171A  64F7               	cpfsgt	tblptrh,c
 19651  00171C  D003               	bra	i2u428_47
 19652  00171E  0008               	tblrd		*
 19653  001720  50F5               	movf	tablat,w,c
 19654  001722  D005               	bra	i2u428_40
 19655  001724                     i2u428_47:
 19656  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19657  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19658  00172C  50EF               	movf	indf0,w,c
 19659  00172E                     i2u428_40:
 19660  00172E  ECE4  F023         	call	i2_putch
 19661  001732  4A1E               	infsnz	i2printf@cp,f,c
 19662  001734  2A1F               	incf	i2printf@cp+1,f,c
 19663  001736                     i2l5720:
 19664  001736  0622               	decf	i2printf@len,f,c
 19665  001738  A0D8               	btfss	status,0,c
 19666  00173A  0623               	decf	i2printf@len+1,f,c
 19667  00173C  2822               	incf	i2printf@len,w,c
 19668  00173E  E1E6               	bnz	i2l5716
 19669  001740  2823               	incf	i2printf@len+1,w,c
 19670  001742  B4D8               	btfsc	status,2,c
 19671  001744  D0DA               	goto	i2l5798
 19672  001746  D7E2               	goto	i2l5716
 19673  001748                     i2l5722:
 19674                           
 19675                           ;doprnt.c: 818: flag |= 0x40;
 19676  001748  8C26               	bsf	i2printf@flag,6,c
 19677                           
 19678                           ;doprnt.c: 822: }
 19679                           
 19680                           ;doprnt.c: 819: break;
 19681  00174A  D01B               	goto	i2l1256
 19682  00174C                     i2l5726:
 19683  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19684  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19685  001754  4A0D               	infsnz	i2printf@f,f,c
 19686  001756  2A0E               	incf	i2printf@f+1,f,c
 19687  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19688  001758  6AF8               	clrf	tblptru,c
 19689  00175A                     	endif
 19690  00175A                     	if	0	;tblptru may be non-zero
 19691  00175A                     	endif
 19692  00175A  0008               	tblrd		*
 19693  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19694  001760  5027               	movf	i2printf@c,w,c
 19695                           
 19696                           ; Switch size 1, requested type "space"
 19697                           ; Number of cases is 5, Range of values is 0 to 117
 19698                           ; switch strategies available:
 19699                           ; Name         Instructions Cycles
 19700                           ; simple_byte           16     9 (average)
 19701                           ;	Chosen strategy is simple_byte
 19702  001762  0A00               	xorlw	0	; case 0
 19703  001764  B4D8               	btfsc	status,2,c
 19704  001766  0012               	return	
 19705  001768  0A64               	xorlw	100	; case 100
 19706  00176A  B4D8               	btfsc	status,2,c
 19707  00176C  D00A               	goto	i2l1256
 19708  00176E  0A0D               	xorlw	13	; case 105
 19709  001770  B4D8               	btfsc	status,2,c
 19710  001772  D007               	goto	i2l1256
 19711  001774  0A1A               	xorlw	26	; case 115
 19712  001776  B4D8               	btfsc	status,2,c
 19713  001778  D778               	goto	i2l5692
 19714  00177A  0A06               	xorlw	6	; case 117
 19715  00177C  B4D8               	btfsc	status,2,c
 19716  00177E  D7E4               	goto	i2l5722
 19717  001780  D0BC               	goto	i2l5798
 19718  001782                     i2l1256:
 19719                           
 19720                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19721  001782  BC26               	btfsc	i2printf@flag,6,c
 19722  001784  D015               	goto	i2l5738
 19723                           
 19724                           ;doprnt.c: 1253: {
 19725                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19726  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19727  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19728  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19729  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19730  001796  0E02               	movlw	2
 19731  001798  2620               	addwf	i2printf@ap,f,c
 19732  00179A  0E00               	movlw	0
 19733  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19734                           
 19735                           ;doprnt.c: 1261: if((int)val < 0) {
 19736  00179E  AE25               	btfss	i2printf@val+1,7,c
 19737  0017A0  D013               	goto	i2l5742
 19738                           
 19739                           ;doprnt.c: 1262: flag |= 0x03;
 19740  0017A2  0E03               	movlw	3
 19741  0017A4  1226               	iorwf	i2printf@flag,f,c
 19742                           
 19743                           ;doprnt.c: 1263: val = -val;
 19744  0017A6  6C24               	negf	i2printf@val,c
 19745  0017A8  1E25               	comf	i2printf@val+1,f,c
 19746  0017AA  B0D8               	btfsc	status,0,c
 19747  0017AC  2A25               	incf	i2printf@val+1,f,c
 19748                           
 19749                           ;doprnt.c: 1264: }
 19750                           ;doprnt.c: 1266: }
 19751  0017AE  D00C               	goto	i2l5742
 19752  0017B0                     i2l5738:
 19753                           
 19754                           ;doprnt.c: 1268: else
 19755                           ;doprnt.c: 1273: {
 19756                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19757  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19758  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19759  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19760  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19761  0017C0  0E02               	movlw	2
 19762  0017C2  2620               	addwf	i2printf@ap,f,c
 19763  0017C4  0E00               	movlw	0
 19764  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19765  0017C8                     i2l5742:
 19766                           
 19767                           ;doprnt.c: 1287: }
 19768                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19769  0017C8  0E01               	movlw	1
 19770  0017CA  6E27               	movwf	i2printf@c,c
 19771  0017CC                     i2l5744:
 19772  0017CC  0E05               	movlw	5
 19773  0017CE  1827               	xorwf	i2printf@c,w,c
 19774  0017D0  B4D8               	btfsc	status,2,c
 19775  0017D2  D015               	goto	i2l5756
 19776                           
 19777                           ;doprnt.c: 1306: if(val < dpowers[c])
 19778  0017D4  5027               	movf	i2printf@c,w,c
 19779  0017D6  0D02               	mullw	2
 19780  0017D8  0E26               	movlw	low _dpowers
 19781  0017DA  24F3               	addwf	prodl,w,c
 19782  0017DC  6EF6               	movwf	tblptrl,c
 19783  0017DE  0EFB               	movlw	high _dpowers
 19784  0017E0  20F4               	addwfc	prodh,w,c
 19785  0017E2  6EF7               	movwf	tblptrh,c
 19786  0017E4                     	if	1	;There are 3 active tblptr bytes
 19787  0017E4  6AF8               	clrf	tblptru,c
 19788  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19789  0017E8  22F8               	addwfc	tblptru,f,c
 19790  0017EA                     	endif
 19791  0017EA  0009               	tblrd		*+
 19792  0017EC  50F5               	movf	tablat,w,c
 19793  0017EE  5C24               	subwf	i2printf@val,w,c
 19794  0017F0  0009               	tblrd		*+
 19795  0017F2  50F5               	movf	tablat,w,c
 19796  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19797  0017F6  A0D8               	btfss	status,0,c
 19798  0017F8  D002               	goto	i2l5756
 19799                           
 19800                           ;doprnt.c: 1307: break;
 19801  0017FA  2A27               	incf	i2printf@c,f,c
 19802  0017FC  D7E7               	goto	i2l5744
 19803  0017FE                     i2l5756:
 19804                           
 19805                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19806  0017FE  5028               	movf	i2printf@width,w,c
 19807  001800  1029               	iorwf	i2printf@width+1,w,c
 19808  001802  B4D8               	btfsc	status,2,c
 19809  001804  D009               	goto	i2l5762
 19810  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19811  00180A  0E03               	movlw	3
 19812  00180C  1619               	andwf	??i2_printf,f,c
 19813  00180E  B4D8               	btfsc	status,2,c
 19814  001810  D003               	goto	i2l5762
 19815                           
 19816                           ;doprnt.c: 1346: width--;
 19817  001812  0628               	decf	i2printf@width,f,c
 19818  001814  A0D8               	btfss	status,0,c
 19819  001816  0629               	decf	i2printf@width+1,f,c
 19820  001818                     i2l5762:
 19821                           
 19822                           ;doprnt.c: 1381: if(width > c)
 19823  001818  0E80               	movlw	128
 19824  00181A  BE27               	btfsc	i2printf@c,7,c
 19825  00181C  0E7F               	movlw	127
 19826  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19827  001820  5028               	movf	i2printf@width,w,c
 19828  001822  5C27               	subwf	i2printf@c,w,c
 19829  001824  5029               	movf	i2printf@width+1,w,c
 19830  001826  0A80               	xorlw	128
 19831  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19832  00182A  B0D8               	btfsc	status,0,c
 19833  00182C  D007               	goto	i2l5766
 19834                           
 19835                           ;doprnt.c: 1382: width -= c;
 19836  00182E  5027               	movf	i2printf@c,w,c
 19837  001830  5E28               	subwf	i2printf@width,f,c
 19838  001832  0E00               	movlw	0
 19839  001834  BE27               	btfsc	i2printf@c,7,c
 19840  001836  0EFF               	movlw	255
 19841  001838  5A29               	subwfb	i2printf@width+1,f,c
 19842  00183A  D004               	goto	i2l5768
 19843  00183C                     i2l5766:
 19844                           
 19845                           ;doprnt.c: 1383: else
 19846                           ;doprnt.c: 1384: width = 0;
 19847  00183C  0E00               	movlw	0
 19848  00183E  6E29               	movwf	i2printf@width+1,c
 19849  001840  0E00               	movlw	0
 19850  001842  6E28               	movwf	i2printf@width,c
 19851  001844                     i2l5768:
 19852                           
 19853                           ;doprnt.c: 1387: if(flag & 0x04) {
 19854  001844  A426               	btfss	i2printf@flag,2,c
 19855  001846  D014               	goto	i2l5780
 19856                           
 19857                           ;doprnt.c: 1392: if(flag & 0x03)
 19858  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19859  00184C  0E03               	movlw	3
 19860  00184E  1619               	andwf	??i2_printf,f,c
 19861  001850  B4D8               	btfsc	status,2,c
 19862  001852  D003               	goto	i2l5774
 19863                           
 19864                           ;doprnt.c: 1393: (putch('-') );
 19865  001854  0E2D               	movlw	45
 19866  001856  ECE4  F023         	call	i2_putch
 19867  00185A                     i2l5774:
 19868                           
 19869                           ;doprnt.c: 1415: if(width)
 19870  00185A  5028               	movf	i2printf@width,w,c
 19871  00185C  1029               	iorwf	i2printf@width+1,w,c
 19872  00185E  B4D8               	btfsc	status,2,c
 19873  001860  D01E               	goto	i2l5790
 19874                           
 19875                           ;doprnt.c: 1417: (putch('0') );
 19876                           
 19877                           ;doprnt.c: 1416: do
 19878  001862  0E30               	movlw	48
 19879  001864  ECE4  F023         	call	i2_putch
 19880                           
 19881                           ;doprnt.c: 1418: while(--width);
 19882  001868  0628               	decf	i2printf@width,f,c
 19883  00186A  A0D8               	btfss	status,0,c
 19884  00186C  0629               	decf	i2printf@width+1,f,c
 19885  00186E  D7F5               	goto	i2l5774
 19886  001870                     i2l5780:
 19887                           
 19888                           ;doprnt.c: 1422: {
 19889                           ;doprnt.c: 1424: if(width
 19890                           ;doprnt.c: 1428: )
 19891  001870  5028               	movf	i2printf@width,w,c
 19892  001872  1029               	iorwf	i2printf@width+1,w,c
 19893  001874  B4D8               	btfsc	status,2,c
 19894  001876  D00A               	goto	i2l5786
 19895  001878                     i2l5782:
 19896                           
 19897                           ;doprnt.c: 1430: (putch(' ') );
 19898  001878  0E20               	movlw	32
 19899  00187A  ECE4  F023         	call	i2_putch
 19900                           
 19901                           ;doprnt.c: 1431: while(--width);
 19902  00187E  0628               	decf	i2printf@width,f,c
 19903  001880  A0D8               	btfss	status,0,c
 19904  001882  0629               	decf	i2printf@width+1,f,c
 19905  001884  5028               	movf	i2printf@width,w,c
 19906  001886  1029               	iorwf	i2printf@width+1,w,c
 19907  001888  A4D8               	btfss	status,2,c
 19908  00188A  D7F6               	goto	i2l5782
 19909  00188C                     i2l5786:
 19910                           
 19911                           ;doprnt.c: 1438: if(flag & 0x03)
 19912  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19913  001890  0E03               	movlw	3
 19914  001892  1619               	andwf	??i2_printf,f,c
 19915  001894  B4D8               	btfsc	status,2,c
 19916  001896  D003               	goto	i2l5790
 19917                           
 19918                           ;doprnt.c: 1439: (putch('-') );
 19919  001898  0E2D               	movlw	45
 19920  00189A  ECE4  F023         	call	i2_putch
 19921  00189E                     i2l5790:
 19922                           
 19923                           ;doprnt.c: 1469: }
 19924                           ;doprnt.c: 1472: prec = c;
 19925  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19926                           
 19927                           ;doprnt.c: 1474: while(prec--) {
 19928  0018A2  D027               	goto	i2l5796
 19929  0018A4                     i2l5792:
 19930                           
 19931                           ;doprnt.c: 1478: {
 19932                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19933  0018A4  501D               	movf	i2printf@prec,w,c
 19934  0018A6  0D02               	mullw	2
 19935  0018A8  0E26               	movlw	low _dpowers
 19936  0018AA  24F3               	addwf	prodl,w,c
 19937  0018AC  6EF6               	movwf	tblptrl,c
 19938  0018AE  0EFB               	movlw	high _dpowers
 19939  0018B0  20F4               	addwfc	prodh,w,c
 19940  0018B2  6EF7               	movwf	tblptrh,c
 19941  0018B4                     	if	1	;There are 3 active tblptr bytes
 19942  0018B4  6AF8               	clrf	tblptru,c
 19943  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19944  0018B8  22F8               	addwfc	tblptru,f,c
 19945  0018BA                     	endif
 19946  0018BA  0009               	tblrd		*+
 19947  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19948  0018C0  000A               	tblrd		*-
 19949  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19950  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19951  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19952  0018CE  EC22  F020         	call	i2___lwdiv	;wreg free
 19953  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19954  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19955  0018DA  0E00               	movlw	0
 19956  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19957  0018DE  0E0A               	movlw	10
 19958  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19959  0018E2  EC08  F021         	call	i2___lwmod	;wreg free
 19960  0018E6  5001               	movf	?i2___lwmod,w,c
 19961  0018E8  0F30               	addlw	48
 19962  0018EA  6E27               	movwf	i2printf@c,c
 19963                           
 19964                           ;doprnt.c: 1523: }
 19965                           ;doprnt.c: 1524: (putch(c) );
 19966  0018EC  5027               	movf	i2printf@c,w,c
 19967  0018EE  ECE4  F023         	call	i2_putch
 19968  0018F2                     i2l5796:
 19969  0018F2  061D               	decf	i2printf@prec,f,c
 19970  0018F4  281D               	incf	i2printf@prec,w,c
 19971  0018F6  A4D8               	btfss	status,2,c
 19972  0018F8  D7D5               	goto	i2l5792
 19973  0018FA                     i2l5798:
 19974  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19975  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19976  001902  4A0D               	infsnz	i2printf@f,f,c
 19977  001904  2A0E               	incf	i2printf@f+1,f,c
 19978  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19979  001906  6AF8               	clrf	tblptru,c
 19980  001908                     	endif
 19981  001908                     	if	0	;tblptru may be non-zero
 19982  001908                     	endif
 19983  001908  0008               	tblrd		*
 19984  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19985  00190E  5027               	movf	i2printf@c,w,c
 19986  001910  B4D8               	btfsc	status,2,c
 19987  001912  0012               	return	
 19988  001914  D64E               	goto	i2l5668
 19989  001916                     __end_ofi2_printf:
 19990                           	opt stack 0
 19991                           pclatu	equ	0xFFB
 19992                           pclath	equ	0xFFA
 19993                           tblptru	equ	0xFF8
 19994                           tblptrh	equ	0xFF7
 19995                           tblptrl	equ	0xFF6
 19996                           tablat	equ	0xFF5
 19997                           prodh	equ	0xFF4
 19998                           prodl	equ	0xFF3
 19999                           intcon	equ	0xFF2
 20000                           intcon2	equ	0xFF1
 20001                           intcon3	equ	0xFF0
 20002                           indf0	equ	0xFEF
 20003                           postinc0	equ	0xFEE
 20004                           fsr0h	equ	0xFEA
 20005                           fsr0l	equ	0xFE9
 20006                           wreg	equ	0xFE8
 20007                           postdec1	equ	0xFE5
 20008                           fsr1h	equ	0xFE2
 20009                           fsr1l	equ	0xFE1
 20010                           indf2	equ	0xFDF
 20011                           postinc2	equ	0xFDE
 20012                           postdec2	equ	0xFDD
 20013                           fsr2h	equ	0xFDA
 20014                           fsr2l	equ	0xFD9
 20015                           status	equ	0xFD8
 20016                           
 20017 ;; *************** function i2_putch *****************
 20018 ;; Defined at:
 20019 ;;		line 20 in file "lcd.c"
 20020 ;; Parameters:    Size  Location     Type
 20021 ;;  data            1    wreg     unsigned char 
 20022 ;; Auto vars:     Size  Location     Type
 20023 ;;  data            1    2[COMRAM] unsigned char 
 20024 ;; Return value:  Size  Location     Type
 20025 ;;                  1    wreg      void 
 20026 ;; Registers used:
 20027 ;;		wreg, status,2, status,0, cstack
 20028 ;; Tracked objects:
 20029 ;;		On entry : 0/0
 20030 ;;		On exit  : 0/0
 20031 ;;		Unchanged: 0/0
 20032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20037 ;;Total ram usage:        1 bytes
 20038 ;; Hardware stack levels used:    1
 20039 ;; Hardware stack levels required when called:    1
 20040 ;; This function calls:
 20041 ;;		i2_lcdNibble
 20042 ;; This function is called by:
 20043 ;;		i2_printf
 20044 ;; This function uses a non-reentrant model
 20045 ;;
 20046                           
 20047                           	psect	text78
 20048  0047C8                     __ptext78:
 20049                           	opt stack 0
 20050  0047C8                     i2_putch:
 20051                           	opt stack 19
 20052                           
 20053                           ;incstack = 0
 20054                           ;i2putch@data stored from wreg
 20055  0047C8  6E03               	movwf	i2putch@data,c
 20056                           
 20057                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20058  0047CA  848C               	bsf	3980,2,c	;volatile
 20059                           
 20060                           ;lcd.c: 22: lcdNibble(data);
 20061  0047CC  5003               	movf	i2putch@data,w,c
 20062  0047CE  ECF7  F01F         	call	i2_lcdNibble
 20063  0047D2  0012               	return		;funcret
 20064  0047D4                     __end_ofi2_putch:
 20065                           	opt stack 0
 20066                           pclatu	equ	0xFFB
 20067                           pclath	equ	0xFFA
 20068                           tblptru	equ	0xFF8
 20069                           tblptrh	equ	0xFF7
 20070                           tblptrl	equ	0xFF6
 20071                           tablat	equ	0xFF5
 20072                           prodh	equ	0xFF4
 20073                           prodl	equ	0xFF3
 20074                           intcon	equ	0xFF2
 20075                           intcon2	equ	0xFF1
 20076                           intcon3	equ	0xFF0
 20077                           indf0	equ	0xFEF
 20078                           postinc0	equ	0xFEE
 20079                           fsr0h	equ	0xFEA
 20080                           fsr0l	equ	0xFE9
 20081                           wreg	equ	0xFE8
 20082                           postdec1	equ	0xFE5
 20083                           fsr1h	equ	0xFE2
 20084                           fsr1l	equ	0xFE1
 20085                           indf2	equ	0xFDF
 20086                           postinc2	equ	0xFDE
 20087                           postdec2	equ	0xFDD
 20088                           fsr2h	equ	0xFDA
 20089                           fsr2l	equ	0xFD9
 20090                           status	equ	0xFD8
 20091                           
 20092 ;; *************** function i2_isdigit *****************
 20093 ;; Defined at:
 20094 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20095 ;; Parameters:    Size  Location     Type
 20096 ;;  c               1    wreg     unsigned char 
 20097 ;; Auto vars:     Size  Location     Type
 20098 ;;  c               1    2[COMRAM] unsigned char 
 20099 ;; Return value:  Size  Location     Type
 20100 ;;		None               void
 20101 ;; Registers used:
 20102 ;;		wreg, status,2, status,0
 20103 ;; Tracked objects:
 20104 ;;		On entry : 0/0
 20105 ;;		On exit  : 0/0
 20106 ;;		Unchanged: 0/0
 20107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20111 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20112 ;;Total ram usage:        3 bytes
 20113 ;; Hardware stack levels used:    1
 20114 ;; This function calls:
 20115 ;;		Nothing
 20116 ;; This function is called by:
 20117 ;;		i2_printf
 20118 ;; This function uses a non-reentrant model
 20119 ;;
 20120                           
 20121                           	psect	text79
 20122  004720                     __ptext79:
 20123                           	opt stack 0
 20124  004720                     i2_isdigit:
 20125                           	opt stack 20
 20126                           
 20127                           ;incstack = 0
 20128                           ;i2isdigit@c stored from wreg
 20129  004720  6E03               	movwf	i2isdigit@c,c
 20130  004722  0E00               	movlw	0
 20131  004724  6E02               	movwf	i2_isdigit$1941,c
 20132  004726  0E3A               	movlw	58
 20133  004728  6003               	cpfslt	i2isdigit@c,c
 20134  00472A  D005               	goto	i2l5378
 20135  00472C  0E2F               	movlw	47
 20136  00472E  6403               	cpfsgt	i2isdigit@c,c
 20137  004730  D002               	goto	i2l5378
 20138  004732  0E01               	movlw	1
 20139  004734  6E02               	movwf	i2_isdigit$1941,c
 20140  004736                     i2l5378:
 20141  004736  C002  F001         	movff	i2_isdigit$1941,??i2_isdigit
 20142  00473A  3001               	rrcf	??i2_isdigit,w,c
 20143  00473C  0012               	return	
 20144  00473E                     __end_ofi2_isdigit:
 20145                           	opt stack 0
 20146                           pclatu	equ	0xFFB
 20147                           pclath	equ	0xFFA
 20148                           tblptru	equ	0xFF8
 20149                           tblptrh	equ	0xFF7
 20150                           tblptrl	equ	0xFF6
 20151                           tablat	equ	0xFF5
 20152                           prodh	equ	0xFF4
 20153                           prodl	equ	0xFF3
 20154                           intcon	equ	0xFF2
 20155                           intcon2	equ	0xFF1
 20156                           intcon3	equ	0xFF0
 20157                           indf0	equ	0xFEF
 20158                           postinc0	equ	0xFEE
 20159                           fsr0h	equ	0xFEA
 20160                           fsr0l	equ	0xFE9
 20161                           wreg	equ	0xFE8
 20162                           postdec1	equ	0xFE5
 20163                           fsr1h	equ	0xFE2
 20164                           fsr1l	equ	0xFE1
 20165                           indf2	equ	0xFDF
 20166                           postinc2	equ	0xFDE
 20167                           postdec2	equ	0xFDD
 20168                           fsr2h	equ	0xFDA
 20169                           fsr2l	equ	0xFD9
 20170                           status	equ	0xFD8
 20171                           
 20172 ;; *************** function i2___wmul *****************
 20173 ;; Defined at:
 20174 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20175 ;; Parameters:    Size  Location     Type
 20176 ;;  multiplier      2    0[COMRAM] unsigned int 
 20177 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20178 ;; Auto vars:     Size  Location     Type
 20179 ;;  __wmul          2    4[COMRAM] unsigned int 
 20180 ;; Return value:  Size  Location     Type
 20181 ;;                  2    0[COMRAM] unsigned int 
 20182 ;; Registers used:
 20183 ;;		wreg, status,2, status,0, prodl, prodh
 20184 ;; Tracked objects:
 20185 ;;		On entry : 0/0
 20186 ;;		On exit  : 0/0
 20187 ;;		Unchanged: 0/0
 20188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20192 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20193 ;;Total ram usage:        6 bytes
 20194 ;; Hardware stack levels used:    1
 20195 ;; This function calls:
 20196 ;;		Nothing
 20197 ;; This function is called by:
 20198 ;;		_printSortTimer
 20199 ;;		_retrieveLog
 20200 ;;		i2_printf
 20201 ;; This function uses a non-reentrant model
 20202 ;;
 20203                           
 20204                           	psect	text80
 20205  00466C                     __ptext80:
 20206                           	opt stack 0
 20207  00466C                     i2___wmul:
 20208                           	opt stack 20
 20209                           
 20210                           ;incstack = 0
 20211  00466C  5001               	movf	i2___wmul@multiplier,w,c
 20212  00466E  0203               	mulwf	i2___wmul@multiplicand,c
 20213  004670  CFF3 F005          	movff	prodl,i2___wmul@product
 20214  004674  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20215  004678  5001               	movf	i2___wmul@multiplier,w,c
 20216  00467A  0204               	mulwf	i2___wmul@multiplicand+1,c
 20217  00467C  50F3               	movf	prodl,w,c
 20218  00467E  2606               	addwf	i2___wmul@product+1,f,c
 20219  004680  5002               	movf	i2___wmul@multiplier+1,w,c
 20220  004682  0203               	mulwf	i2___wmul@multiplicand,c
 20221  004684  50F3               	movf	prodl,w,c
 20222  004686  2606               	addwf	i2___wmul@product+1,f,c
 20223  004688  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20224  00468C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20225  004690  0012               	return	
 20226  004692                     __end_ofi2___wmul:
 20227                           	opt stack 0
 20228                           pclatu	equ	0xFFB
 20229                           pclath	equ	0xFFA
 20230                           tblptru	equ	0xFF8
 20231                           tblptrh	equ	0xFF7
 20232                           tblptrl	equ	0xFF6
 20233                           tablat	equ	0xFF5
 20234                           prodh	equ	0xFF4
 20235                           prodl	equ	0xFF3
 20236                           intcon	equ	0xFF2
 20237                           intcon2	equ	0xFF1
 20238                           intcon3	equ	0xFF0
 20239                           indf0	equ	0xFEF
 20240                           postinc0	equ	0xFEE
 20241                           fsr0h	equ	0xFEA
 20242                           fsr0l	equ	0xFE9
 20243                           wreg	equ	0xFE8
 20244                           postdec1	equ	0xFE5
 20245                           fsr1h	equ	0xFE2
 20246                           fsr1l	equ	0xFE1
 20247                           indf2	equ	0xFDF
 20248                           postinc2	equ	0xFDE
 20249                           postdec2	equ	0xFDD
 20250                           fsr2h	equ	0xFDA
 20251                           fsr2l	equ	0xFD9
 20252                           status	equ	0xFD8
 20253                           
 20254 ;; *************** function i2___lwmod *****************
 20255 ;; Defined at:
 20256 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20257 ;; Parameters:    Size  Location     Type
 20258 ;;  dividend        2    0[COMRAM] unsigned int 
 20259 ;;  divisor         2    2[COMRAM] unsigned int 
 20260 ;; Auto vars:     Size  Location     Type
 20261 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20262 ;; Return value:  Size  Location     Type
 20263 ;;                  2    0[COMRAM] unsigned int 
 20264 ;; Registers used:
 20265 ;;		wreg, status,2, status,0
 20266 ;; Tracked objects:
 20267 ;;		On entry : 0/0
 20268 ;;		On exit  : 0/0
 20269 ;;		Unchanged: 0/0
 20270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20274 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20275 ;;Total ram usage:        5 bytes
 20276 ;; Hardware stack levels used:    1
 20277 ;; This function calls:
 20278 ;;		Nothing
 20279 ;; This function is called by:
 20280 ;;		_printSortTimer
 20281 ;;		i2_printf
 20282 ;; This function uses a non-reentrant model
 20283 ;;
 20284                           
 20285                           	psect	text81
 20286  004210                     __ptext81:
 20287                           	opt stack 0
 20288  004210                     i2___lwmod:
 20289                           	opt stack 20
 20290                           
 20291                           ;incstack = 0
 20292  004210  5003               	movf	i2___lwmod@divisor,w,c
 20293  004212  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20294  004214  B4D8               	btfsc	status,2,c
 20295  004216  D018               	goto	i2l1713
 20296  004218  0E01               	movlw	1
 20297  00421A  6E05               	movwf	i2___lwmod@counter,c
 20298  00421C  D004               	goto	i2l5410
 20299  00421E                     i2l5408:
 20300  00421E  90D8               	bcf	status,0,c
 20301  004220  3603               	rlcf	i2___lwmod@divisor,f,c
 20302  004222  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20303  004224  2A05               	incf	i2___lwmod@counter,f,c
 20304  004226                     i2l5410:
 20305  004226  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20306  004228  D7FA               	goto	i2l5408
 20307  00422A                     i2l5412:
 20308  00422A  5003               	movf	i2___lwmod@divisor,w,c
 20309  00422C  5C01               	subwf	i2___lwmod@dividend,w,c
 20310  00422E  5004               	movf	i2___lwmod@divisor+1,w,c
 20311  004230  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20312  004232  A0D8               	btfss	status,0,c
 20313  004234  D004               	goto	i2l5416
 20314  004236  5003               	movf	i2___lwmod@divisor,w,c
 20315  004238  5E01               	subwf	i2___lwmod@dividend,f,c
 20316  00423A  5004               	movf	i2___lwmod@divisor+1,w,c
 20317  00423C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20318  00423E                     i2l5416:
 20319  00423E  90D8               	bcf	status,0,c
 20320  004240  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20321  004242  3203               	rrcf	i2___lwmod@divisor,f,c
 20322  004244  2E05               	decfsz	i2___lwmod@counter,f,c
 20323  004246  D7F1               	goto	i2l5412
 20324  004248                     i2l1713:
 20325  004248  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20326  00424C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20327  004250  0012               	return		;funcret
 20328  004252                     __end_ofi2___lwmod:
 20329                           	opt stack 0
 20330                           pclatu	equ	0xFFB
 20331                           pclath	equ	0xFFA
 20332                           tblptru	equ	0xFF8
 20333                           tblptrh	equ	0xFF7
 20334                           tblptrl	equ	0xFF6
 20335                           tablat	equ	0xFF5
 20336                           prodh	equ	0xFF4
 20337                           prodl	equ	0xFF3
 20338                           intcon	equ	0xFF2
 20339                           intcon2	equ	0xFF1
 20340                           intcon3	equ	0xFF0
 20341                           indf0	equ	0xFEF
 20342                           postinc0	equ	0xFEE
 20343                           fsr0h	equ	0xFEA
 20344                           fsr0l	equ	0xFE9
 20345                           wreg	equ	0xFE8
 20346                           postdec1	equ	0xFE5
 20347                           fsr1h	equ	0xFE2
 20348                           fsr1l	equ	0xFE1
 20349                           indf2	equ	0xFDF
 20350                           postinc2	equ	0xFDE
 20351                           postdec2	equ	0xFDD
 20352                           fsr2h	equ	0xFDA
 20353                           fsr2l	equ	0xFD9
 20354                           status	equ	0xFD8
 20355                           
 20356 ;; *************** function i2___lwdiv *****************
 20357 ;; Defined at:
 20358 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20359 ;; Parameters:    Size  Location     Type
 20360 ;;  dividend        2    5[COMRAM] unsigned int 
 20361 ;;  divisor         2    7[COMRAM] unsigned int 
 20362 ;; Auto vars:     Size  Location     Type
 20363 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20364 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20365 ;; Return value:  Size  Location     Type
 20366 ;;                  2    5[COMRAM] unsigned int 
 20367 ;; Registers used:
 20368 ;;		wreg, status,2, status,0
 20369 ;; Tracked objects:
 20370 ;;		On entry : 0/0
 20371 ;;		On exit  : 0/0
 20372 ;;		Unchanged: 0/0
 20373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20375 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20377 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20378 ;;Total ram usage:        7 bytes
 20379 ;; Hardware stack levels used:    1
 20380 ;; This function calls:
 20381 ;;		Nothing
 20382 ;; This function is called by:
 20383 ;;		_printSortTimer
 20384 ;;		i2_printf
 20385 ;; This function uses a non-reentrant model
 20386 ;;
 20387                           
 20388                           	psect	text82
 20389  004044                     __ptext82:
 20390                           	opt stack 0
 20391  004044                     i2___lwdiv:
 20392                           	opt stack 20
 20393                           
 20394                           ;incstack = 0
 20395  004044  0E00               	movlw	0
 20396  004046  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20397  004048  0E00               	movlw	0
 20398  00404A  6E0A               	movwf	i2___lwdiv@quotient,c
 20399  00404C  5008               	movf	i2___lwdiv@divisor,w,c
 20400  00404E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20401  004050  B4D8               	btfsc	status,2,c
 20402  004052  D01C               	goto	i2l1703
 20403  004054  0E01               	movlw	1
 20404  004056  6E0C               	movwf	i2___lwdiv@counter,c
 20405  004058  D004               	goto	i2l5390
 20406  00405A                     i2l5388:
 20407  00405A  90D8               	bcf	status,0,c
 20408  00405C  3608               	rlcf	i2___lwdiv@divisor,f,c
 20409  00405E  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20410  004060  2A0C               	incf	i2___lwdiv@counter,f,c
 20411  004062                     i2l5390:
 20412  004062  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20413  004064  D7FA               	goto	i2l5388
 20414  004066                     i2l5392:
 20415  004066  90D8               	bcf	status,0,c
 20416  004068  360A               	rlcf	i2___lwdiv@quotient,f,c
 20417  00406A  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20418  00406C  5008               	movf	i2___lwdiv@divisor,w,c
 20419  00406E  5C06               	subwf	i2___lwdiv@dividend,w,c
 20420  004070  5009               	movf	i2___lwdiv@divisor+1,w,c
 20421  004072  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20422  004074  A0D8               	btfss	status,0,c
 20423  004076  D005               	goto	i2l5400
 20424  004078  5008               	movf	i2___lwdiv@divisor,w,c
 20425  00407A  5E06               	subwf	i2___lwdiv@dividend,f,c
 20426  00407C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20427  00407E  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20428  004080  800A               	bsf	i2___lwdiv@quotient,0,c
 20429  004082                     i2l5400:
 20430  004082  90D8               	bcf	status,0,c
 20431  004084  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20432  004086  3208               	rrcf	i2___lwdiv@divisor,f,c
 20433  004088  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20434  00408A  D7ED               	goto	i2l5392
 20435  00408C                     i2l1703:
 20436  00408C  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20437  004090  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20438  004094  0012               	return		;funcret
 20439  004096                     __end_ofi2___lwdiv:
 20440                           	opt stack 0
 20441                           pclatu	equ	0xFFB
 20442                           pclath	equ	0xFFA
 20443                           tblptru	equ	0xFF8
 20444                           tblptrh	equ	0xFF7
 20445                           tblptrl	equ	0xFF6
 20446                           tablat	equ	0xFF5
 20447                           prodh	equ	0xFF4
 20448                           prodl	equ	0xFF3
 20449                           intcon	equ	0xFF2
 20450                           intcon2	equ	0xFF1
 20451                           intcon3	equ	0xFF0
 20452                           indf0	equ	0xFEF
 20453                           postinc0	equ	0xFEE
 20454                           fsr0h	equ	0xFEA
 20455                           fsr0l	equ	0xFE9
 20456                           wreg	equ	0xFE8
 20457                           postdec1	equ	0xFE5
 20458                           fsr1h	equ	0xFE2
 20459                           fsr1l	equ	0xFE1
 20460                           indf2	equ	0xFDF
 20461                           postinc2	equ	0xFDE
 20462                           postdec2	equ	0xFDD
 20463                           fsr2h	equ	0xFDA
 20464                           fsr2l	equ	0xFD9
 20465                           status	equ	0xFD8
 20466                           
 20467 ;; *************** function i2_lcdInst *****************
 20468 ;; Defined at:
 20469 ;;		line 15 in file "lcd.c"
 20470 ;; Parameters:    Size  Location     Type
 20471 ;;  data            1    wreg     unsigned char 
 20472 ;; Auto vars:     Size  Location     Type
 20473 ;;  data            1    2[COMRAM] unsigned char 
 20474 ;; Return value:  Size  Location     Type
 20475 ;;                  1    wreg      void 
 20476 ;; Registers used:
 20477 ;;		wreg, status,2, status,0, cstack
 20478 ;; Tracked objects:
 20479 ;;		On entry : 0/0
 20480 ;;		On exit  : 0/0
 20481 ;;		Unchanged: 0/0
 20482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20484 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20487 ;;Total ram usage:        1 bytes
 20488 ;; Hardware stack levels used:    1
 20489 ;; Hardware stack levels required when called:    1
 20490 ;; This function calls:
 20491 ;;		i2_lcdNibble
 20492 ;; This function is called by:
 20493 ;;		_change_state_to_menu_11
 20494 ;;		_change_state_to_menu_23
 20495 ;;		_change_state_to_logs_11
 20496 ;;		_change_state_to_logs_12
 20497 ;;		_change_state_to_logs_22
 20498 ;;		_change_state_to_logs_23
 20499 ;;		_change_state_to_logs_33
 20500 ;;		_change_state_to_logs_34
 20501 ;;		_printSortTimer
 20502 ;;		i2_change_state_to_menu_start
 20503 ;;		i2_change_state_to_menu_12
 20504 ;;		i2_change_state_to_menu_22
 20505 ;;		i2_printRTC
 20506 ;; This function uses a non-reentrant model
 20507 ;;
 20508                           
 20509                           	psect	text83
 20510  0047D4                     __ptext83:
 20511                           	opt stack 0
 20512  0047D4                     i2_lcdInst:
 20513                           	opt stack 19
 20514                           
 20515                           ;incstack = 0
 20516                           ;i2lcdInst@data stored from wreg
 20517  0047D4  6E03               	movwf	i2lcdInst@data,c
 20518                           
 20519                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20520  0047D6  948C               	bcf	3980,2,c	;volatile
 20521                           
 20522                           ;lcd.c: 17: lcdNibble(data);
 20523  0047D8  5003               	movf	i2lcdInst@data,w,c
 20524  0047DA  ECF7  F01F         	call	i2_lcdNibble
 20525  0047DE  0012               	return		;funcret
 20526  0047E0                     __end_ofi2_lcdInst:
 20527                           	opt stack 0
 20528                           pclatu	equ	0xFFB
 20529                           pclath	equ	0xFFA
 20530                           tblptru	equ	0xFF8
 20531                           tblptrh	equ	0xFF7
 20532                           tblptrl	equ	0xFF6
 20533                           tablat	equ	0xFF5
 20534                           prodh	equ	0xFF4
 20535                           prodl	equ	0xFF3
 20536                           intcon	equ	0xFF2
 20537                           intcon2	equ	0xFF1
 20538                           intcon3	equ	0xFF0
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           postdec1	equ	0xFE5
 20545                           fsr1h	equ	0xFE2
 20546                           fsr1l	equ	0xFE1
 20547                           indf2	equ	0xFDF
 20548                           postinc2	equ	0xFDE
 20549                           postdec2	equ	0xFDD
 20550                           fsr2h	equ	0xFDA
 20551                           fsr2l	equ	0xFD9
 20552                           status	equ	0xFD8
 20553                           
 20554 ;; *************** function i2_lcdNibble *****************
 20555 ;; Defined at:
 20556 ;;		line 25 in file "lcd.c"
 20557 ;; Parameters:    Size  Location     Type
 20558 ;;  data            1    wreg     unsigned char 
 20559 ;; Auto vars:     Size  Location     Type
 20560 ;;  data            1    1[COMRAM] unsigned char 
 20561 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20562 ;; Return value:  Size  Location     Type
 20563 ;;                  1    wreg      void 
 20564 ;; Registers used:
 20565 ;;		wreg, status,2, status,0
 20566 ;; Tracked objects:
 20567 ;;		On entry : 0/0
 20568 ;;		On exit  : 0/0
 20569 ;;		Unchanged: 0/0
 20570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20575 ;;Total ram usage:        2 bytes
 20576 ;; Hardware stack levels used:    1
 20577 ;; This function calls:
 20578 ;;		Nothing
 20579 ;; This function is called by:
 20580 ;;		i2_lcdInst
 20581 ;;		i2_putch
 20582 ;; This function uses a non-reentrant model
 20583 ;;
 20584                           
 20585                           	psect	text84
 20586  003FEE                     __ptext84:
 20587                           	opt stack 0
 20588  003FEE                     i2_lcdNibble:
 20589                           	opt stack 19
 20590                           
 20591                           ;incstack = 0
 20592                           ;i2lcdNibble@data stored from wreg
 20593  003FEE  6E02               	movwf	i2lcdNibble@data,c
 20594                           
 20595                           ;lcd.c: 27: char temp = data & 0xF0;
 20596  003FF0  5002               	movf	i2lcdNibble@data,w,c
 20597  003FF2  0BF0               	andlw	240
 20598  003FF4  6E01               	movwf	i2lcdNibble@temp,c
 20599                           
 20600                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20601  003FF6  508C               	movf	3980,w,c	;volatile
 20602  003FF8  0B0F               	andlw	15
 20603  003FFA  6E8C               	movwf	3980,c	;volatile
 20604                           
 20605                           ;lcd.c: 29: LATD = temp | LATD;
 20606  003FFC  5001               	movf	i2lcdNibble@temp,w,c
 20607  003FFE  108C               	iorwf	3980,w,c	;volatile
 20608  004000  6E8C               	movwf	3980,c	;volatile
 20609                           
 20610                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20611  004002  868C               	bsf	3980,3,c	;volatile
 20612                           
 20613                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20614  004004  0E42               	movlw	66
 20615  004006                     i2u830_47:
 20616  004006  2EE8               	decfsz	wreg,f,c
 20617  004008  D7FE               	bra	i2u830_47
 20618  00400A  D000               	nop2	
 20619                           
 20620                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20621  00400C  968C               	bcf	3980,3,c	;volatile
 20622                           
 20623                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20624  00400E  0E42               	movlw	66
 20625  004010                     i2u831_47:
 20626  004010  2EE8               	decfsz	wreg,f,c
 20627  004012  D7FE               	bra	i2u831_47
 20628  004014  D000               	nop2	
 20629                           
 20630                           ;lcd.c: 36: data = data << 4;
 20631  004016  3802               	swapf	i2lcdNibble@data,w,c
 20632  004018  0BF0               	andlw	240
 20633  00401A  6E02               	movwf	i2lcdNibble@data,c
 20634                           
 20635                           ;lcd.c: 38: temp = data & 0xF0;
 20636  00401C  5002               	movf	i2lcdNibble@data,w,c
 20637  00401E  0BF0               	andlw	240
 20638  004020  6E01               	movwf	i2lcdNibble@temp,c
 20639                           
 20640                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20641  004022  508C               	movf	3980,w,c	;volatile
 20642  004024  0B0F               	andlw	15
 20643  004026  6E8C               	movwf	3980,c	;volatile
 20644                           
 20645                           ;lcd.c: 40: LATD = temp | LATD;
 20646  004028  5001               	movf	i2lcdNibble@temp,w,c
 20647  00402A  108C               	iorwf	3980,w,c	;volatile
 20648  00402C  6E8C               	movwf	3980,c	;volatile
 20649                           
 20650                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20651  00402E  868C               	bsf	3980,3,c	;volatile
 20652                           
 20653                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20654  004030  0E42               	movlw	66
 20655  004032                     i2u832_47:
 20656  004032  2EE8               	decfsz	wreg,f,c
 20657  004034  D7FE               	bra	i2u832_47
 20658  004036  D000               	nop2	
 20659                           
 20660                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20661  004038  968C               	bcf	3980,3,c	;volatile
 20662                           
 20663                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20664  00403A  0E42               	movlw	66
 20665  00403C                     i2u833_47:
 20666  00403C  2EE8               	decfsz	wreg,f,c
 20667  00403E  D7FE               	bra	i2u833_47
 20668  004040  D000               	nop2	
 20669  004042  0012               	return		;funcret
 20670  004044                     __end_ofi2_lcdNibble:
 20671                           	opt stack 0
 20672                           pclatu	equ	0xFFB
 20673                           pclath	equ	0xFFA
 20674                           tblptru	equ	0xFF8
 20675                           tblptrh	equ	0xFF7
 20676                           tblptrl	equ	0xFF6
 20677                           tablat	equ	0xFF5
 20678                           prodh	equ	0xFF4
 20679                           prodl	equ	0xFF3
 20680                           intcon	equ	0xFF2
 20681                           intcon2	equ	0xFF1
 20682                           intcon3	equ	0xFF0
 20683                           indf0	equ	0xFEF
 20684                           postinc0	equ	0xFEE
 20685                           fsr0h	equ	0xFEA
 20686                           fsr0l	equ	0xFE9
 20687                           wreg	equ	0xFE8
 20688                           postdec1	equ	0xFE5
 20689                           fsr1h	equ	0xFE2
 20690                           fsr1l	equ	0xFE1
 20691                           indf2	equ	0xFDF
 20692                           postinc2	equ	0xFDE
 20693                           postdec2	equ	0xFDD
 20694                           fsr2h	equ	0xFDA
 20695                           fsr2l	equ	0xFD9
 20696                           status	equ	0xFD8
 20697                           
 20698 ;; *************** function i2_getRTC *****************
 20699 ;; Defined at:
 20700 ;;		line 44 in file "RTC.c"
 20701 ;; Parameters:    Size  Location     Type
 20702 ;;		None
 20703 ;; Auto vars:     Size  Location     Type
 20704 ;;  getRTC          2    3[COMRAM] int 
 20705 ;; Return value:  Size  Location     Type
 20706 ;;                  1    wreg      void 
 20707 ;; Registers used:
 20708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20709 ;; Tracked objects:
 20710 ;;		On entry : 0/0
 20711 ;;		On exit  : 0/0
 20712 ;;		Unchanged: 0/0
 20713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20717 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20718 ;;Total ram usage:        2 bytes
 20719 ;; Hardware stack levels used:    1
 20720 ;; Hardware stack levels required when called:    2
 20721 ;; This function calls:
 20722 ;;		i2_I2C_Master_Read
 20723 ;;		i2_I2C_Master_Start
 20724 ;;		i2_I2C_Master_Stop
 20725 ;;		i2_I2C_Master_Write
 20726 ;; This function is called by:
 20727 ;;		_printSortTimer
 20728 ;;		i2_printRTC
 20729 ;; This function uses a non-reentrant model
 20730 ;;
 20731                           
 20732                           	psect	text85
 20733  003D34                     __ptext85:
 20734                           	opt stack 0
 20735  003D34                     i2_getRTC:
 20736                           	opt stack 18
 20737                           
 20738                           ;RTC.c: 48: I2C_Master_Start();
 20739                           
 20740                           ;incstack = 0
 20741  003D34  EC0A  F024         	call	i2_I2C_Master_Start	;wreg free
 20742                           
 20743                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20744  003D38  0E00               	movlw	0
 20745  003D3A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20746  003D3C  0ED0               	movlw	208
 20747  003D3E  6E02               	movwf	i2I2C_Master_Write@d,c
 20748  003D40  ECF5  F023         	call	i2_I2C_Master_Write	;wreg free
 20749                           
 20750                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20751  003D44  0E00               	movlw	0
 20752  003D46  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20753  003D48  0E00               	movlw	0
 20754  003D4A  6E02               	movwf	i2I2C_Master_Write@d,c
 20755  003D4C  ECF5  F023         	call	i2_I2C_Master_Write	;wreg free
 20756                           
 20757                           ;RTC.c: 51: I2C_Master_Stop();
 20758  003D50  EC06  F024         	call	i2_I2C_Master_Stop	;wreg free
 20759                           
 20760                           ;RTC.c: 54: I2C_Master_Start();
 20761  003D54  EC0A  F024         	call	i2_I2C_Master_Start	;wreg free
 20762                           
 20763                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20764  003D58  0E00               	movlw	0
 20765  003D5A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20766  003D5C  0ED1               	movlw	209
 20767  003D5E  6E02               	movwf	i2I2C_Master_Write@d,c
 20768  003D60  ECF5  F023         	call	i2_I2C_Master_Write	;wreg free
 20769                           
 20770                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20771  003D64  0E00               	movlw	0
 20772  003D66  6E05               	movwf	i2getRTC@i+1,c
 20773  003D68  0E00               	movlw	0
 20774  003D6A  6E04               	movwf	i2getRTC@i,c
 20775  003D6C                     i2l5640:
 20776  003D6C  BE05               	btfsc	i2getRTC@i+1,7,c
 20777  003D6E  D006               	goto	i2l5644
 20778  003D70  5005               	movf	i2getRTC@i+1,w,c
 20779  003D72  E111               	bnz	i2l5650
 20780  003D74  0E06               	movlw	6
 20781  003D76  5C04               	subwf	i2getRTC@i,w,c
 20782  003D78  B0D8               	btfsc	status,0,c
 20783  003D7A  D00D               	goto	i2l5650
 20784  003D7C                     i2l5644:
 20785                           
 20786                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20787  003D7C  0E24               	movlw	low _time
 20788  003D7E  2404               	addwf	i2getRTC@i,w,c
 20789  003D80  6ED9               	movwf	fsr2l,c
 20790  003D82  0E01               	movlw	high _time
 20791  003D84  2005               	addwfc	i2getRTC@i+1,w,c
 20792  003D86  6EDA               	movwf	fsr2h,c
 20793  003D88  0E01               	movlw	1
 20794  003D8A  EC49  F023         	call	i2_I2C_Master_Read
 20795  003D8E  6EDF               	movwf	indf2,c
 20796  003D90  4A04               	infsnz	i2getRTC@i,f,c
 20797  003D92  2A05               	incf	i2getRTC@i+1,f,c
 20798  003D94  D7EB               	goto	i2l5640
 20799  003D96                     i2l5650:
 20800                           
 20801                           ;RTC.c: 58: }
 20802                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20803  003D96  0E00               	movlw	0
 20804  003D98  EC49  F023         	call	i2_I2C_Master_Read
 20805  003D9C  0101               	movlb	1	; () banked
 20806  003D9E  6F2A               	movwf	(_time+6)& (0+255),b
 20807                           
 20808                           ;RTC.c: 60: I2C_Master_Stop();
 20809  003DA0  EC06  F024         	call	i2_I2C_Master_Stop	;wreg free
 20810  003DA4  0012               	return		;funcret
 20811  003DA6                     __end_ofi2_getRTC:
 20812                           	opt stack 0
 20813                           pclatu	equ	0xFFB
 20814                           pclath	equ	0xFFA
 20815                           tblptru	equ	0xFF8
 20816                           tblptrh	equ	0xFF7
 20817                           tblptrl	equ	0xFF6
 20818                           tablat	equ	0xFF5
 20819                           prodh	equ	0xFF4
 20820                           prodl	equ	0xFF3
 20821                           intcon	equ	0xFF2
 20822                           intcon2	equ	0xFF1
 20823                           intcon3	equ	0xFF0
 20824                           indf0	equ	0xFEF
 20825                           postinc0	equ	0xFEE
 20826                           fsr0h	equ	0xFEA
 20827                           fsr0l	equ	0xFE9
 20828                           wreg	equ	0xFE8
 20829                           postdec1	equ	0xFE5
 20830                           fsr1h	equ	0xFE2
 20831                           fsr1l	equ	0xFE1
 20832                           indf2	equ	0xFDF
 20833                           postinc2	equ	0xFDE
 20834                           postdec2	equ	0xFDD
 20835                           fsr2h	equ	0xFDA
 20836                           fsr2l	equ	0xFD9
 20837                           status	equ	0xFD8
 20838                           
 20839 ;; *************** function i2_I2C_Master_Write *****************
 20840 ;; Defined at:
 20841 ;;		line 49 in file "I2C.c"
 20842 ;; Parameters:    Size  Location     Type
 20843 ;;  d               2    1[COMRAM] unsigned int 
 20844 ;; Auto vars:     Size  Location     Type
 20845 ;;		None
 20846 ;; Return value:  Size  Location     Type
 20847 ;;                  1    wreg      void 
 20848 ;; Registers used:
 20849 ;;		wreg, status,2, status,0, cstack
 20850 ;; Tracked objects:
 20851 ;;		On entry : 0/0
 20852 ;;		On exit  : 0/0
 20853 ;;		Unchanged: 0/0
 20854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20859 ;;Total ram usage:        2 bytes
 20860 ;; Hardware stack levels used:    1
 20861 ;; Hardware stack levels required when called:    1
 20862 ;; This function calls:
 20863 ;;		i2_I2C_Master_Wait
 20864 ;; This function is called by:
 20865 ;;		i2_getRTC
 20866 ;; This function uses a non-reentrant model
 20867 ;;
 20868                           
 20869                           	psect	text86
 20870  0047EA                     __ptext86:
 20871                           	opt stack 0
 20872  0047EA                     i2_I2C_Master_Write:
 20873                           	opt stack 18
 20874                           
 20875                           ;I2C.c: 51: I2C_Master_Wait();
 20876                           
 20877                           ;incstack = 0
 20878  0047EA  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 20879                           
 20880                           ;I2C.c: 52: SSPBUF = d;
 20881  0047EE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20882  0047F2  0012               	return		;funcret
 20883  0047F4                     __end_ofi2_I2C_Master_Write:
 20884                           	opt stack 0
 20885                           pclatu	equ	0xFFB
 20886                           pclath	equ	0xFFA
 20887                           tblptru	equ	0xFF8
 20888                           tblptrh	equ	0xFF7
 20889                           tblptrl	equ	0xFF6
 20890                           tablat	equ	0xFF5
 20891                           prodh	equ	0xFF4
 20892                           prodl	equ	0xFF3
 20893                           intcon	equ	0xFF2
 20894                           intcon2	equ	0xFF1
 20895                           intcon3	equ	0xFF0
 20896                           indf0	equ	0xFEF
 20897                           postinc0	equ	0xFEE
 20898                           fsr0h	equ	0xFEA
 20899                           fsr0l	equ	0xFE9
 20900                           wreg	equ	0xFE8
 20901                           postdec1	equ	0xFE5
 20902                           fsr1h	equ	0xFE2
 20903                           fsr1l	equ	0xFE1
 20904                           indf2	equ	0xFDF
 20905                           postinc2	equ	0xFDE
 20906                           postdec2	equ	0xFDD
 20907                           fsr2h	equ	0xFDA
 20908                           fsr2l	equ	0xFD9
 20909                           status	equ	0xFD8
 20910                           
 20911 ;; *************** function i2_I2C_Master_Stop *****************
 20912 ;; Defined at:
 20913 ;;		line 43 in file "I2C.c"
 20914 ;; Parameters:    Size  Location     Type
 20915 ;;		None
 20916 ;; Auto vars:     Size  Location     Type
 20917 ;;		None
 20918 ;; Return value:  Size  Location     Type
 20919 ;;                  1    wreg      void 
 20920 ;; Registers used:
 20921 ;;		wreg, status,2, status,0, cstack
 20922 ;; Tracked objects:
 20923 ;;		On entry : 0/0
 20924 ;;		On exit  : 0/0
 20925 ;;		Unchanged: 0/0
 20926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20931 ;;Total ram usage:        0 bytes
 20932 ;; Hardware stack levels used:    1
 20933 ;; Hardware stack levels required when called:    1
 20934 ;; This function calls:
 20935 ;;		i2_I2C_Master_Wait
 20936 ;; This function is called by:
 20937 ;;		i2_getRTC
 20938 ;; This function uses a non-reentrant model
 20939 ;;
 20940                           
 20941                           	psect	text87
 20942  00480C                     __ptext87:
 20943                           	opt stack 0
 20944  00480C                     i2_I2C_Master_Stop:
 20945                           	opt stack 18
 20946                           
 20947                           ;I2C.c: 45: I2C_Master_Wait();
 20948                           
 20949                           ;incstack = 0
 20950  00480C  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 20951                           
 20952                           ;I2C.c: 46: PEN = 1;
 20953  004810  84C5               	bsf	4037,2,c	;volatile
 20954  004812  0012               	return		;funcret
 20955  004814                     __end_ofi2_I2C_Master_Stop:
 20956                           	opt stack 0
 20957                           pclatu	equ	0xFFB
 20958                           pclath	equ	0xFFA
 20959                           tblptru	equ	0xFF8
 20960                           tblptrh	equ	0xFF7
 20961                           tblptrl	equ	0xFF6
 20962                           tablat	equ	0xFF5
 20963                           prodh	equ	0xFF4
 20964                           prodl	equ	0xFF3
 20965                           intcon	equ	0xFF2
 20966                           intcon2	equ	0xFF1
 20967                           intcon3	equ	0xFF0
 20968                           indf0	equ	0xFEF
 20969                           postinc0	equ	0xFEE
 20970                           fsr0h	equ	0xFEA
 20971                           fsr0l	equ	0xFE9
 20972                           wreg	equ	0xFE8
 20973                           postdec1	equ	0xFE5
 20974                           fsr1h	equ	0xFE2
 20975                           fsr1l	equ	0xFE1
 20976                           indf2	equ	0xFDF
 20977                           postinc2	equ	0xFDE
 20978                           postdec2	equ	0xFDD
 20979                           fsr2h	equ	0xFDA
 20980                           fsr2l	equ	0xFD9
 20981                           status	equ	0xFD8
 20982                           
 20983 ;; *************** function i2_I2C_Master_Start *****************
 20984 ;; Defined at:
 20985 ;;		line 31 in file "I2C.c"
 20986 ;; Parameters:    Size  Location     Type
 20987 ;;		None
 20988 ;; Auto vars:     Size  Location     Type
 20989 ;;		None
 20990 ;; Return value:  Size  Location     Type
 20991 ;;                  1    wreg      void 
 20992 ;; Registers used:
 20993 ;;		wreg, status,2, status,0, cstack
 20994 ;; Tracked objects:
 20995 ;;		On entry : 0/0
 20996 ;;		On exit  : 0/0
 20997 ;;		Unchanged: 0/0
 20998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21003 ;;Total ram usage:        0 bytes
 21004 ;; Hardware stack levels used:    1
 21005 ;; Hardware stack levels required when called:    1
 21006 ;; This function calls:
 21007 ;;		i2_I2C_Master_Wait
 21008 ;; This function is called by:
 21009 ;;		i2_getRTC
 21010 ;; This function uses a non-reentrant model
 21011 ;;
 21012                           
 21013                           	psect	text88
 21014  004814                     __ptext88:
 21015                           	opt stack 0
 21016  004814                     i2_I2C_Master_Start:
 21017                           	opt stack 18
 21018                           
 21019                           ;I2C.c: 33: I2C_Master_Wait();
 21020                           
 21021                           ;incstack = 0
 21022  004814  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21023                           
 21024                           ;I2C.c: 34: SEN = 1;
 21025  004818  80C5               	bsf	4037,0,c	;volatile
 21026  00481A  0012               	return		;funcret
 21027  00481C                     __end_ofi2_I2C_Master_Start:
 21028                           	opt stack 0
 21029                           pclatu	equ	0xFFB
 21030                           pclath	equ	0xFFA
 21031                           tblptru	equ	0xFF8
 21032                           tblptrh	equ	0xFF7
 21033                           tblptrl	equ	0xFF6
 21034                           tablat	equ	0xFF5
 21035                           prodh	equ	0xFF4
 21036                           prodl	equ	0xFF3
 21037                           intcon	equ	0xFF2
 21038                           intcon2	equ	0xFF1
 21039                           intcon3	equ	0xFF0
 21040                           indf0	equ	0xFEF
 21041                           postinc0	equ	0xFEE
 21042                           fsr0h	equ	0xFEA
 21043                           fsr0l	equ	0xFE9
 21044                           wreg	equ	0xFE8
 21045                           postdec1	equ	0xFE5
 21046                           fsr1h	equ	0xFE2
 21047                           fsr1l	equ	0xFE1
 21048                           indf2	equ	0xFDF
 21049                           postinc2	equ	0xFDE
 21050                           postdec2	equ	0xFDD
 21051                           fsr2h	equ	0xFDA
 21052                           fsr2l	equ	0xFD9
 21053                           status	equ	0xFD8
 21054                           
 21055 ;; *************** function i2_I2C_Master_Read *****************
 21056 ;; Defined at:
 21057 ;;		line 55 in file "I2C.c"
 21058 ;; Parameters:    Size  Location     Type
 21059 ;;  a               1    wreg     unsigned char 
 21060 ;; Auto vars:     Size  Location     Type
 21061 ;;  a               1    1[COMRAM] unsigned char 
 21062 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21063 ;; Return value:  Size  Location     Type
 21064 ;;                  1    wreg      unsigned char 
 21065 ;; Registers used:
 21066 ;;		wreg, status,2, status,0, cstack
 21067 ;; Tracked objects:
 21068 ;;		On entry : 0/0
 21069 ;;		On exit  : 0/0
 21070 ;;		Unchanged: 0/0
 21071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;Total ram usage:        2 bytes
 21077 ;; Hardware stack levels used:    1
 21078 ;; Hardware stack levels required when called:    1
 21079 ;; This function calls:
 21080 ;;		i2_I2C_Master_Wait
 21081 ;; This function is called by:
 21082 ;;		i2_getRTC
 21083 ;; This function uses a non-reentrant model
 21084 ;;
 21085                           
 21086                           	psect	text89
 21087  004692                     __ptext89:
 21088                           	opt stack 0
 21089  004692                     i2_I2C_Master_Read:
 21090                           	opt stack 18
 21091                           
 21092                           ;incstack = 0
 21093                           ;i2I2C_Master_Read@a stored from wreg
 21094  004692  6E02               	movwf	i2I2C_Master_Read@a,c
 21095                           
 21096                           ;I2C.c: 57: unsigned char temp;
 21097                           ;I2C.c: 58: I2C_Master_Wait();
 21098  004694  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21099                           
 21100                           ;I2C.c: 59: RCEN = 1;
 21101  004698  86C5               	bsf	4037,3,c	;volatile
 21102                           
 21103                           ;I2C.c: 60: I2C_Master_Wait();
 21104  00469A  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21105                           
 21106                           ;I2C.c: 61: temp = SSPBUF;
 21107  00469E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21108                           
 21109                           ;I2C.c: 62: I2C_Master_Wait();
 21110  0046A2  ECCB  F023         	call	i2_I2C_Master_Wait	;wreg free
 21111                           
 21112                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21113  0046A6  5002               	movf	i2I2C_Master_Read@a,w,c
 21114  0046A8  A4D8               	btfss	status,2,c
 21115  0046AA  D002               	goto	i2u371_40
 21116  0046AC  8AC5               	bsf	4037,5,c	;volatile
 21117  0046AE  D001               	goto	i2l5354
 21118  0046B0                     i2u371_40:
 21119  0046B0  9AC5               	bcf	4037,5,c	;volatile
 21120  0046B2                     i2l5354:
 21121                           
 21122                           ;I2C.c: 64: ACKEN = 1;
 21123  0046B2  88C5               	bsf	4037,4,c	;volatile
 21124                           
 21125                           ;I2C.c: 65: return temp;
 21126  0046B4  5003               	movf	i2I2C_Master_Read@temp,w,c
 21127  0046B6  0012               	return	
 21128  0046B8                     __end_ofi2_I2C_Master_Read:
 21129                           	opt stack 0
 21130                           pclatu	equ	0xFFB
 21131                           pclath	equ	0xFFA
 21132                           tblptru	equ	0xFF8
 21133                           tblptrh	equ	0xFF7
 21134                           tblptrl	equ	0xFF6
 21135                           tablat	equ	0xFF5
 21136                           prodh	equ	0xFF4
 21137                           prodl	equ	0xFF3
 21138                           intcon	equ	0xFF2
 21139                           intcon2	equ	0xFF1
 21140                           intcon3	equ	0xFF0
 21141                           indf0	equ	0xFEF
 21142                           postinc0	equ	0xFEE
 21143                           fsr0h	equ	0xFEA
 21144                           fsr0l	equ	0xFE9
 21145                           wreg	equ	0xFE8
 21146                           postdec1	equ	0xFE5
 21147                           fsr1h	equ	0xFE2
 21148                           fsr1l	equ	0xFE1
 21149                           indf2	equ	0xFDF
 21150                           postinc2	equ	0xFDE
 21151                           postdec2	equ	0xFDD
 21152                           fsr2h	equ	0xFDA
 21153                           fsr2l	equ	0xFD9
 21154                           status	equ	0xFD8
 21155                           
 21156 ;; *************** function i2_I2C_Master_Wait *****************
 21157 ;; Defined at:
 21158 ;;		line 26 in file "I2C.c"
 21159 ;; Parameters:    Size  Location     Type
 21160 ;;		None
 21161 ;; Auto vars:     Size  Location     Type
 21162 ;;		None
 21163 ;; Return value:  Size  Location     Type
 21164 ;;                  1    wreg      void 
 21165 ;; Registers used:
 21166 ;;		wreg, status,2, status,0
 21167 ;; Tracked objects:
 21168 ;;		On entry : 0/0
 21169 ;;		On exit  : 0/0
 21170 ;;		Unchanged: 0/0
 21171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21175 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21176 ;;Total ram usage:        1 bytes
 21177 ;; Hardware stack levels used:    1
 21178 ;; This function calls:
 21179 ;;		Nothing
 21180 ;; This function is called by:
 21181 ;;		i2_I2C_Master_Start
 21182 ;;		i2_I2C_Master_Stop
 21183 ;;		i2_I2C_Master_Write
 21184 ;;		i2_I2C_Master_Read
 21185 ;; This function uses a non-reentrant model
 21186 ;;
 21187                           
 21188                           	psect	text90
 21189  004796                     __ptext90:
 21190                           	opt stack 0
 21191  004796                     i2_I2C_Master_Wait:
 21192                           	opt stack 18
 21193  004796                     i2l66:
 21194  004796  B4C7               	btfsc	4039,2,c	;volatile
 21195  004798  D7FE               	goto	i2l66
 21196  00479A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21197  00479E  0E1F               	movlw	31
 21198  0047A0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21199  0047A2  B4D8               	btfsc	status,2,c
 21200  0047A4  0012               	return	
 21201  0047A6  D7F7               	goto	i2l66
 21202  0047A8                     __end_ofi2_I2C_Master_Wait:
 21203                           	opt stack 0
 21204                           pclatu	equ	0xFFB
 21205                           pclath	equ	0xFFA
 21206                           tblptru	equ	0xFF8
 21207                           tblptrh	equ	0xFF7
 21208                           tblptrl	equ	0xFF6
 21209                           tablat	equ	0xFF5
 21210                           prodh	equ	0xFF4
 21211                           prodl	equ	0xFF3
 21212                           intcon	equ	0xFF2
 21213                           intcon2	equ	0xFF1
 21214                           intcon3	equ	0xFF0
 21215                           indf0	equ	0xFEF
 21216                           postinc0	equ	0xFEE
 21217                           fsr0h	equ	0xFEA
 21218                           fsr0l	equ	0xFE9
 21219                           wreg	equ	0xFE8
 21220                           postdec1	equ	0xFE5
 21221                           fsr1h	equ	0xFE2
 21222                           fsr1l	equ	0xFE1
 21223                           indf2	equ	0xFDF
 21224                           postinc2	equ	0xFDE
 21225                           postdec2	equ	0xFDD
 21226                           fsr2h	equ	0xFDA
 21227                           fsr2l	equ	0xFD9
 21228                           status	equ	0xFD8
 21229                           pclatu	equ	0xFFB
 21230                           pclath	equ	0xFFA
 21231                           tblptru	equ	0xFF8
 21232                           tblptrh	equ	0xFF7
 21233                           tblptrl	equ	0xFF6
 21234                           tablat	equ	0xFF5
 21235                           prodh	equ	0xFF4
 21236                           prodl	equ	0xFF3
 21237                           intcon	equ	0xFF2
 21238                           intcon2	equ	0xFF1
 21239                           intcon3	equ	0xFF0
 21240                           indf0	equ	0xFEF
 21241                           postinc0	equ	0xFEE
 21242                           fsr0h	equ	0xFEA
 21243                           fsr0l	equ	0xFE9
 21244                           wreg	equ	0xFE8
 21245                           postdec1	equ	0xFE5
 21246                           fsr1h	equ	0xFE2
 21247                           fsr1l	equ	0xFE1
 21248                           indf2	equ	0xFDF
 21249                           postinc2	equ	0xFDE
 21250                           postdec2	equ	0xFDD
 21251                           fsr2h	equ	0xFDA
 21252                           fsr2l	equ	0xFD9
 21253                           status	equ	0xFD8
 21254                           
 21255                           	psect	rparam
 21256  0000                     pclatu	equ	0xFFB
 21257                           pclath	equ	0xFFA
 21258                           tblptru	equ	0xFF8
 21259                           tblptrh	equ	0xFF7
 21260                           tblptrl	equ	0xFF6
 21261                           tablat	equ	0xFF5
 21262                           prodh	equ	0xFF4
 21263                           prodl	equ	0xFF3
 21264                           intcon	equ	0xFF2
 21265                           intcon2	equ	0xFF1
 21266                           intcon3	equ	0xFF0
 21267                           indf0	equ	0xFEF
 21268                           postinc0	equ	0xFEE
 21269                           fsr0h	equ	0xFEA
 21270                           fsr0l	equ	0xFE9
 21271                           wreg	equ	0xFE8
 21272                           postdec1	equ	0xFE5
 21273                           fsr1h	equ	0xFE2
 21274                           fsr1l	equ	0xFE1
 21275                           indf2	equ	0xFDF
 21276                           postinc2	equ	0xFDE
 21277                           postdec2	equ	0xFDD
 21278                           fsr2h	equ	0xFDA
 21279                           fsr2l	equ	0xFD9
 21280                           status	equ	0xFD8
 21281                           
 21282                           	psect	temp
 21283  00007E                     btemp:
 21284                           	opt stack 0
 21285  00007E                     	ds	1
 21286  0000                     int$flags	set	btemp
 21287                           pclatu	equ	0xFFB
 21288                           pclath	equ	0xFFA
 21289                           tblptru	equ	0xFF8
 21290                           tblptrh	equ	0xFF7
 21291                           tblptrl	equ	0xFF6
 21292                           tablat	equ	0xFF5
 21293                           prodh	equ	0xFF4
 21294                           prodl	equ	0xFF3
 21295                           intcon	equ	0xFF2
 21296                           intcon2	equ	0xFF1
 21297                           intcon3	equ	0xFF0
 21298                           indf0	equ	0xFEF
 21299                           postinc0	equ	0xFEE
 21300                           fsr0h	equ	0xFEA
 21301                           fsr0l	equ	0xFE9
 21302                           wreg	equ	0xFE8
 21303                           postdec1	equ	0xFE5
 21304                           fsr1h	equ	0xFE2
 21305                           fsr1l	equ	0xFE1
 21306                           indf2	equ	0xFDF
 21307                           postinc2	equ	0xFDE
 21308                           postdec2	equ	0xFDD
 21309                           fsr2h	equ	0xFDA
 21310                           fsr2l	equ	0xFD9
 21311                           status	equ	0xFD8


Data Sizes:
    Strings     1231
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_117(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[10]), STR_113(CODE[13]), 
		 -> STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), 
		 -> STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), 
		 -> STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), 
		 -> STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), 
		 -> STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  179268
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20380
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15770
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              6 BANK0     10    10      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10786
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10039
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   43688
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12711
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8343
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   81333
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8455
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8343
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13943
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8368
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8481
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8343
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   17057
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8208
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 15:20:17 2017

                                    _i 00E4                     i2_I2C_Master_Start 4814  
                   i2_I2C_Master_Write 47EA                                     l66 4782  
                                   _ID 2C0A                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0088  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 1FBA                                    l487 36A6  
                                  l728 2E38                                    l924 3474  
                                  l748 2D22                                    l790 3CFA  
                                  l937 474E                                    l946 311C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 4420  
      __end_of_change_state_to_menu_12 42C2        __end_of_change_state_to_menu_22 428A  
      __end_of_change_state_to_menu_23 43F0           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4510  
      __end_of_change_state_to_logs_12 44E0        __end_of_change_state_to_logs_22 44B0  
      __end_of_change_state_to_logs_23 459A        __end_of_change_state_to_logs_33 4480  
      __end_of_change_state_to_logs_34 4450                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1102 018C  
                                 l1103 01DA                                   l1104 0240  
                                 l1105 028E                                   l1202 33D4  
                                 l1034 32AA                                   l1211 3B02  
                                 l1060 3598                                   l1141 0782  
                                 l1037 32CA                                   l1129 05E8  
                                 l1057 3594                                   l1146 0858  
                                 l1066 1974                                   l1171 3C30  
                                 l1163 3BDE                                   l1219 3B36  
                                 l1180 39D6                                   l1092 007C  
                                 l1165 3BE2                                   l1069 1978  
                                 l1190 3A24                                   l1166 3BE6  
                                 l1167 3BEA                                   l1159 3BC2  
                                 l1095 0080                                   l1256 13B6  
                                 l1168 3BEE                                   l1169 3BF2  
                                 l1186 39E6                                   l1099 0126  
                                 l1196 3388                                   l1189 3A0A  
                                 l1703 3CB4                                   l1713 3ECE  
                                 l1650 3834                                   l6000 3854  
                                 l6010 38E0                                   l6004 386A  
                                 l5302 3C64                                   l5304 3C70  
                                 l7000 075A                                   l5314 3CA6  
                                 l5306 3C76                                   l5330 3EC0  
                                 l5322 3E8A                                   l7002 0760  
                                 l6050 34E6                                   l5324 3E96  
                                 l5244 45DA                                   l5326 3E9C  
                                 l5502 13EE                                   l7102 39F4  
                                 l7030 07DC                                   l7006 076A  
                                 l5246 45EC                                   l6062 351E  
                                 l6046 34DC                                   l6054 34FE  
                                 l5520 144A                                   l5432 117E  
                                 l7040 0804                                   l6072 4638  
                                 l5602 3CE6                                   l5530 14A4  
                                 l5506 1408                                   l5442 11AE  
                                 l7050 0842                                   l7034 07F4  
                                 l7026 07D2                                   l6058 3514  
                                 l5604 3D10                                   l5532 14AE  
                                 l5508 140E                                   l5436 1192  
                                 l7060 0872                                   l7044 081C  
                                 l7036 07FA                                   l8020 324C  
                                 l5268 4564                                   l5620 37CE  
                                 l6500 2EDA                                   l6068 4622  
                                 l6420 2E7A                                   l6404 2E40  
                                 l5286 4612                                   l5550 150A  
                                 l5526 146C                                   l5438 11A4  
                                 l7142 3354                                   l7070 089A  
                                 l7062 0878                                   l6182 3A80  
                                 l6502 2EF4                                   l6510 2F56  
                                 l5560 157C                                   l5544 14E4  
                                 l5480 1332                                   l5464 1290  
                                 l5456 125E                                   l5448 11E2  
                                 l7160 33B2                                   l7080 08C2  
                                 l7072 08A0                                   l8040 32D6  
                                 l7304 371C                                   l7320 376C  
                                 l5616 37B8                                   l8008 30D6  
                                 l6504 2F0E                                   l5546 14F0  
                                 l5554 151E                                   l5538 14C8  
                                 l5474 1308                                   l5466 129C  
                                 l5490 137C                                   l5562 1588  
                                 l7154 3396                                   l7138 3B2A  
                                 l7066 0882                                   l6602 1A80  
                                 l8050 32F4                                   l8042 32DC  
                                 l7306 3728                                   l7410 09BE  
                                 l5618 37C8                                   l6178 3A6A  
                                 l6098 4126                                   l8122 367A  
                                 l5556 1524                                   l5484 135E  
                                 l5476 1314                                   l5468 12A2  
                                 l7164 33BC                                   l7076 08AA  
                                 l6620 1B12                                   l8052 32FA  
                                 l8044 32E2                                   l7324 3780  
                                 l7316 375E                                   l7308 372E  
                                 l7340 391C                                   l5628 3822  
                                 l6188 3AAC                                   l6508 2F28  
                                 l6452 2CA6                                   l8124 3680  
                                 l8140 36A8                                   l8116 3656  
                                 l5486 1376                                   l5478 131A  
                                 l7174 33FC                                   l7158 33AC  
                                 l6702 00FA                                   l6614 1AD0  
                                 l8054 3300                                   l8046 32E8  
                                 l8038 32D0                                   l5574 3B7C  
                                 l5566 42CC                                   l5830 1F38  
                                 l7510 0BAA                                   l7422 09F2  
                                 l7414 09D0                                   l6462 2CD8  
                                 l6470 2CF4                                   l8134 369C  
                                 l8126 3686                                   l8118 366C  
                                 _ADIE 007CEE                                   l7184 3430  
                                 l6800 0354                                   l6640 1B8E  
                                 l6632 1B5E                                   l8048 32EE  
                                 l7360 3988                                   l7352 3966  
                                 l7344 3930                                   l7336 390C  
                                 l5584 3BB2                                   l5568 42D8  
                                 l5840 2000                                   l7520 0C40  
                                 l7512 0BC8                                   l7440 0A5C  
                                 l7408 09B8                                   l8136 36A2  
                                 l6706 0112                                   l8058 3306  
                                 l7346 393C                                   l5578 3B92  
                                 l5850 2096                                   l5842 201E  
                                 l7602 0F12                                   l7530 0CD6  
                                 l7522 0C5E                                   l7514 0BE6  
                                 l7450 0A84                                   l7442 0A62  
                                 l7426 0A04                                   l7418 09DA  
                                 l6466 2CE6                                   l6394 2DF6  
                                 l7196 3BF6                                   l7188 343A  
                                 l6900 054C                                   l6812 0398  
                                 l6652 1BD6                                   l6644 1BC4  
                                 l7292 36E8                                   l7348 3942  
                                 l7356 3974                                   l5852 20B4  
                                 l5844 203C                                   l5836 1FC4  
                                 l7532 0CF4                                   l7524 0C7C  
                                 l7516 0C04                                   l7508 0B8C  
                                 l6476 2D0C                                   l6822 03C0  
                                 l5854 20D2                                   l5846 205A  
                                 l5838 1FE2                                   l5862 212C  
                                 l7606 0F2A                                   l7550 0DDA  
                                 l7542 0DB8                                   l7526 0C9A  
                                 l7518 0C22                                   l7470 0AE4  
                                 l7446 0A6C                                   l6486 2D3C  
                                 l6920 05C0                                   l6912 059E  
                                 l6904 0564                                   l6816 03B0  
                                 l6808 038E                                   l6656 1C0C  
                                 l6584 19C8                                   l5856 20F0  
                                 l5848 2078                                   l5864 218A  
                                 l7712 1122                                   l7704 1100  
                                 l7632 0FB2                                   l7624 0F90  
                                 l7560 0DF6                                   l7528 0CB8  
                                 l7536 0D12                                   l7456 0A92  
                                 l6922 05C6                                   l6842 0434  
                                 l6834 0412                                   l6826 03D8  
                                 l6818 03B6                                   l7298 36FE  
                                 l5858 210E                                   l7722 113E  
                                 l7642 0FCE                                   l7546 0DC2  
                                 l7538 0D76                                   l7474 0AEE  
                                 l7730 1162                                   l6498 2EC0  
                                 l6940 0630                                   l6916 05A8  
                                 l6860 0496                                   l6852 045C  
                                 l6844 043A                                   l7708 110A  
                                 l7628 0F9A                                   l7564 0E0E  
                                 l7556 0DEC                                   l7492 0B3A  
                                 l7484 0B18                                   l6950 0658  
                                 l6926 05D0                                   l6870 04BE  
                                 l6838 041C                                   l6790 032C  
                                 l6782 030A                                   l7726 1156  
                                 l7718 1134                                   l7646 0FE6  
                                 l7638 0FC4                                   l7478 0B06  
                                 l6944 063A                                   l6864 04A0  
                                 l6848 0444                                   l6792 0332  
                                 l6696 00EA                                   l7672 106E  
                                 l7664 104C                                   l7592 0EF6  
                                 l7584 0ED4                                   l7488 0B22  
                                 l6970 06BE                                   l6954 0662  
                                 l6890 0524                                   l6874 04C8  
                                 l6786 0314                                   l6698 00F0  
                                 l7682 108A                                   l6980 06E6  
                                 l6948 0652                                   l6868 04B8  
                                 l6796 033C                                   l7668 1056  
                                 l7588 0EDE                                   l6974 06D6  
                                 l6966 06B4                                   l6958 067A  
                                 l6894 053C                                   l6886 051A  
                                 l6878 04E0                                   l7686 10A2  
                                 l7678 1080                                   l7598 0F08  
                                 l6992 0738                                   l6984 06FE  
                                 l6976 06DC                                   l6896 0542  
                                 l6996 0742                                   l7982 3042  
                                 l7984 3056                                   STR_1 FBB9  
                                 STR_2 FF1B                                   STR_3 FBA7  
                                 STR_4 FE3E                                   STR_5 FBA7  
                                 STR_6 FDFC                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5110 1BB2  
                                 u5210 0126                                   u3610 4562  
                                 u5140 1BFA                                   u5230 01DA  
                                 u5118 1BB6                                   u5070 1A0A  
                                 u5080 1A0C                                   u4520 1FBA  
                                 u4505 3F08                                   u5250 028E  
                                 u3810 4174                                   _PEIE 007F96  
                                 u5148 1BFE                                   u3820 4176  
                                 u3910 1354                                   u4480 41C0  
                                 u4481 41BC                                   u4490 41C2  
                                 _RCEN 007E2B                                   u3917 134A  
                                 u7117 2D86                                   u3870 12DC  
                                 u8007 0866                                   u7207 2F64  
                                 u7127 2EA4                                   u4920 2C3A  
                                 u4840 2E02                                   u8017 088A  
                                 u7217 2F96                                   u7137 4102  
                                 u8107 3A0E                                   u8027 08B2  
                                 u7307 0A74                                   u7227 3492  
                                 u7147 462E                                   u4860 2E38  
                                 u3877 12D2                                   u8117 3A18  
                                 u8037 3AC2                                   u7317 0AA0  
                                 u7237 34EE                                   u7157 2C20  
                                 u4950 2C96                                   u8207 1E3A  
                                 u8127 1C22                                   u8047 3362  
                                 u7407 0F44                                   u7327 0AF6  
                                 u7247 3526                                   u7167 2C7C  
                                 u4928 2C3E                                   u8217 1E6E  
                                 u8137 1C6E                                   u8057 33C4  
                                 u7417 0FA2                                   u7337 0B2A  
                                 u7257 41D2                                   u7177 2D26  
                                 i2l66 4796                                   u4858 2E06  
                                 u8227 1EBA                                   u8147 1CBA  
                                 u8067 33E4                                   u7507 329E  
                                 u7427 0FD6                                   u7347 0B54  
                                 u7267 4206                                   u7187 2D30  
                                 u8237 1EEE                                   u8157 1CEE  
                                 u8077 340A                                   u7517 1924  
                                 u7437 1000                                   u7357 0DCA  
                                 u7277 08E2                                   u7197 2D52  
                                 u4958 2C9A                                   u8247 3E2E  
                                 u8167 1D3A                                   u8087 3442  
                                 u7607 1B24                                   u7527 1968  
                                 u7447 105E                                   u7367 0DFE  
                                 u7287 09E2                                   u8257 3E38  
                                 u8177 1D6E                                   u8097 39A0  
                                 u7617 1B52                                   u7537 198A  
                                 u7457 1092                                   u7377 0E28  
                                 u7297 0A1E                                   u6930 311C  
                                 u8267 3E64                                   u8187 1DBA  
                                 u7707 0102                                   u7627 1B6C  
                                 u7547 19B8                                   u7467 10BC  
                                 u7387 0EE6                                   u8277 3E6E  
                                 u8197 1DEE                                   u7717 0136  
                                 u7637 45E2                                   u7557 1A20  
                                 u7477 1112                                   u7397 0F1A  
                                 u8287 3FD6                                   u7807 03A0  
                                 u7727 019C                                   u7647 3544  
                                 u7567 1A74                                   u7487 1146  
                                 u7817 03C8                                   u7737 01BA  
                                 u7657 3588                                   u7577 1A94  
                                 u7497 325A                                   u7907 0642  
                                 u7827 0424                                   u7747 01EA  
                                 u7667 35AA                                   u7587 1AC2  
                                 u7917 066A                                   u7837 044C  
                                 u7757 0250                                   u7677 002C  
                                 u7597 1B06                                   u7927 06C6  
                                 u7847 04A8                                   u7767 026E  
                                 u7687 0070                                   u7937 06EE  
                                 u7857 04D0                                   u7777 029E  
                                 u7697 0092                                   u7947 074A  
                                 u7867 052C                                   u7787 031C  
                                 u7957 0772                                   u7877 0554  
                                 u7797 0344                                   u7967 0794  
                                 u7887 05B0                                   u7977 07E4  
                                 u7897 05D8                                   u7987 080C  
                                 u7997 085C                                   _RSEN 007E29  
                          _stopSignals 4756                                   _Test 324C  
                                 _back 005B                                   _main 360C  
                                 _down 0067                                   _keys FB15  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 46DC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 47D4                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 248E                            i2_lcdNibble 3FEE  
                      __end_of_Loading 2EB6                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3536  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 378A  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB30                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FE0D  
                                STR_15 FFD3                                  STR_23 FF0D  
                                STR_31 FDEB                                  STR_16 FFE3  
                                STR_24 FD52                                  STR_32 FD30  
                                STR_40 FCEC                                  STR_17 FFF3  
                                STR_33 FD41                                  STR_41 FCDB  
                                STR_25 FB70                                  STR_18 FFF7  
                                STR_34 FDDA                                  STR_50 FDB8  
                                STR_42 FD96                                  STR_26 FD63  
                                STR_43 FD96                                  STR_35 FDDA  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FB5D                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD74  
                                STR_36 FD1F                                  STR_44 FCFD  
                      __end_of___awmod 3992                                  STR_45 FCEC  
                                STR_37 FD30                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FB6D  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FEC6                                  STR_38 FDC9  
                                STR_46 FDA7                                  STR_47 FDA7  
                                STR_55 FFFB                                  STR_63 FB30  
                                STR_71 FEFF                                  STR_39 FD85  
                                STR_56 FFDF                                  STR_64 FF72  
                                STR_80 FE4E                                  STR_48 FD0E  
                                STR_72 FC75                                  STR_49 FCFD  
                                STR_57 FFD7                                  STR_81 FB6D  
                                STR_65 FF43                                  STR_73 FEE3  
                                STR_58 FFD3                                  STR_74 FF50  
                                STR_90 FEB7                                  STR_82 FE7B  
                                STR_66 FB48                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FED5  
                                STR_75 FEA8                                  STR_83 FE1E  
                                STR_84 FF7D                                  STR_76 FEF1  
                                STR_92 FC97                                  STR_68 FC86  
                                STR_85 FF7D                                  STR_77 FFAE  
                                STR_93 FF5C                                  STR_69 FCB9  
                                STR_78 FEFF                                  STR_86 FFA5  
                                STR_94 FCA8                                  STR_87 FFA5  
                                STR_95 FF67                                  STR_79 FF29  
                                STR_88 FF91                                  STR_96 FE99  
                                STR_89 FEFF                                  STR_97 FC20  
                                STR_98 FC0F                                  STR_99 FBED  
                                ?_sort 0001                        __end_of___lldiv 3846  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3CBE                        __end_of___lwmod 3ED8  
                                i2l257 248A                                  i2l602 251C  
                                i2l861 2BCE                                  i2l855 2B62  
                                i2l937 477A                                  i2l859 2BAE  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1C14  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 47C8  
                      __end_of_handler 2C0A                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 45F2                        __end_of_initLCD 4210  
                       __CFG_EBTRB$OFF 000000                                  _debug 0065  
                           i2isdigit@c 0003                                  _getIR 40E4  
                      __end_of_loadRTC 3AB4                        __end_of_readMAG 41CA  
                      __end_of_dpowers FB30                                  _first 0073  
                                _enter 0069                        __end_of_isdigit 461C  
                                _input 007D                                  _putch 47A8  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4692                       __end_ofi2_getRTC 3DA6  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1916                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4360  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 4096  
                         __end_of_Test 3354                     __size_ofi2_lcdInst 000C  
                         __end_of_main 36CC                           __end_of_keys FB26  
                         __end_of_sort 46FE                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC42                                 STR_101 FC53  
                               STR_110 FCCA                                 STR_102 FBCB  
                               STR_103 FE2E                                 STR_111 FB83  
                               STR_104 FBFE                                 STR_112 FB95  
                               STR_113 FF36                                 STR_105 FBDC  
                               STR_106 FBFE                                 STR_114 FF87  
                               _ADRESH 000FC4                                 STR_107 FE8A  
                               STR_115 FC31                                 STR_108 FE6C  
                               STR_116 FC64                                 _EEADRH 000FAA  
                               STR_117 FFB6                                 STR_109 FE5D  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4390              i2_change_state_to_menu_22 4360  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1256 1782  
                               i2l1703 408C                                 i2l1713 4248  
                               i2l5400 4082                                 i2l5410 4226  
                               i2l6130 24BA                                 i2l5412 422A  
                               i2l6140 2552                                 i2l6310 29EC  
                               i2l6150 25C0                                 i2l6142 2568  
                               i2l5416 423E                                 i2l5408 421E  
                               i2l6304 29D4                                 i2l6240 28EE  
                               i2l6232 28D4                                 i2l6152 25D6  
                               i2l6144 257E                                 i2l6136 2526  
                               i2l5354 46B2                                 i2l6322 2A0E  
                               i2l6314 29F6                                 i2l6242 28FE  
                               i2l6250 290C                                 i2l6154 25EC  
                               i2l6146 2594                                 i2l6138 253C  
                               i2l6162 262E                                 i2l5700 1692  
                               i2l6340 2A52                                 i2l6332 2A2E  
                               i2l6308 29E8                                 i2l6260 2932  
                               i2l6244 2902                                 i2l6156 2602  
                               i2l6148 25AA                                 i2l6164 2688  
                               i2l5390 4062                                 i2l5710 16EA  
                               i2l5702 169C                                 i2l6262 2938  
                               i2l6254 2920                                 i2l6350 2A6E  
                               i2l6158 2618                                 i2l5640 3D6C  
                               i2l5392 4066                                 i2l5720 1736  
                               i2l5712 16F4                                 i2l5704 16A0  
                               i2l6344 2A64                                 i2l6336 2A40  
                               i2l6328 2A1C                                 i2l6280 2988  
                               i2l6264 293E                                 i2l6256 2926  
                               i2l5650 3D96                                 i2l5378 4736  
                               i2l5722 1748                                 i2l5714 16FA  
                               i2l6258 292C                                 i2l5802 4338  
                               i2l5644 3D7C                                 i2l5388 405A  
                               i2l5716 170C                                 i2l6268 2944  
                               i2l5804 4340                                 i2l5742 17C8  
                               i2l5726 174C                                 i2l6294 29AE  
                               i2l5744 17CC                                 i2l5672 15C2  
                               i2l8072 26E0                                 i2l6288 29A0  
                               i2l8216 2BCC                                 i2l5762 1818  
                               i2l5738 17B0                                 i2l5674 15D0  
                               i2l6298 29CA                                 i2l8170 2B36  
                               i2l8154 2B16                                 i2l5780 1870  
                               i2l5756 17FE                                 i2l5692 166A  
                               i2l5684 1608                                 i2l5668 15B2  
                               i2l8068 26D0                                 i2l8156 2B1A  
                               i2l5782 1878                                 i2l5790 189E  
                               i2l5774 185A                                 i2l5766 183C  
                               i2l5678 15D6                                 i2l8078 273A  
                               i2l5792 18A4                                 i2l5768 1844  
                               i2l8088 27FC                                 i2l8192 2B80  
                               i2l5786 188C                                 i2l7810 22E0  
                               i2l7802 22BC                                 i2l8194 2B82  
                               i2l5796 18F2                                 i2l5980 31F0  
                               i2l5798 18FA                                 i2l7830 232E  
                               i2l7822 2312                                 i2l7814 22EE  
                               i2l7806 22D2                                 i2l7750 2212  
                               i2l5992 3234                                 i2l5984 3200  
                               i2l8480 243E                                 i2l7744 21FE  
                               i2l8490 2978                                 i2l8482 2460  
                               i2l7850 237C                                 i2l7842 2360  
                               i2l7834 233C                                 i2l7826 2320  
                               i2l7818 22FC                                 i2l7770 224A  
                               i2l7762 223C                                 i2l7754 2220  
                               i2l7746 2204                                 i2l8484 247C  
                               i2l7870 23D2                                 i2l7862 23AE  
                               i2l7854 2392                                 i2l7846 236E  
                               i2l7838 2352                                 i2l7790 2292  
                               i2l7782 2276                                 i2l7774 2258  
                               i2l7758 222E                                 i2l8488 295C  
                               i2l7882 23FC                                 i2l7874 23E0  
                               i2l7866 23BC                                 i2l7858 23A0  
                               i2l7794 22A0                                 i2l7786 2284  
                               i2l7778 2266                                 i2l7892 2420  
                               i2l7886 2412                                 i2l7878 23EE  
                               i2l7798 22AE                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4644                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008A  
                     __end_of_dispLogs 46DC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2FF6  
                               ___wmul 42F8                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3B3C  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4720                                 _initUI 4510  
                               _readIR 4132                                 _logRun 2FF6  
                               clear_0 40BC                                 clear_1 40C8  
                               clear_2 40D4                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 3992  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 004B  
              __size_of_initGlobalVars 0068                           ?_retrieveLog 0007  
                               _strcpy 42C2                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 466C  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4644  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4096                       __end_of_printRTC 21CE  
                         __mediumconst FB14                      __end_ofi2___lwmod 4252  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 360C                      __end_ofi2_lcdInst 47E0  
                    __end_ofi2_isdigit 473E                             __accesstop 0080  
              __end_of__initialization 40DA                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 476C  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 481E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 47F4  
                        __end_of_getIR 4132                            i2printRTC@i 0041  
                        _initSortTimer 3846            __end_of_updateServoPosition 3D34  
                        __end_of_putch 47B8                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2D6C  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 45C6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 459A  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 3452               ?_change_state_to_menu_11 0001  
                              UI@F3223 012F               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 02F0  
                    __end_of_PortTests 3C46                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2294 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 47C8                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3E76                                _Loading 2D6C  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 36CC  
                              ___awmod 38F0                             _initServos 3F94  
                              ___lldiv 378A                        __size_of___wmul 0036  
                              ___lwdiv 3C46                                ___lwmod 3E76  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 4096  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3DA6                                _lcdInst 47B8  
                              _handler 0008                                __ptext0 360C  
                              __ptext1 4756                                __ptext2 46DC  
                              __ptext3 2D6C                                __ptext4 3846  
                              __ptext5 3DA6                                __ptext6 40E4  
                              __ptext7 4132                                __ptext8 461C  
                              __ptext9 2C0A                        __size_of_printf 0438  
                              _readADC 45C6                        __size_of_strcpy 0036  
                              _initLCD 41CA                                _cur_can 012B  
                              _loadRTC 3A28                                _readMAG 417E  
                              _dpowers FB26                     actuatorTest@i_1640 00AF  
                   actuatorTest@i_1632 00AD                     actuatorTest@i_1642 00B0  
                   actuatorTest@i_1651 00B6                     actuatorTest@i_1643 00B1  
                   actuatorTest@i_1652 00B7                     actuatorTest@i_1661 00BC  
                   actuatorTest@i_1645 00B2                     actuatorTest@i_1662 00BD  
                   actuatorTest@i_1654 00B8                     actuatorTest@i_1646 00B3  
                   actuatorTest@i_1671 00C2                     actuatorTest@i_1655 00B9  
                   actuatorTest@i_1639 00AE                     actuatorTest@i_1672 00C3  
                   actuatorTest@i_1664 00BE                     actuatorTest@i_1648 00B4  
                   actuatorTest@i_1665 00BF                     actuatorTest@i_1649 00B5  
                   actuatorTest@i_1658 00BA                     actuatorTest@i_1659 00BB  
                   actuatorTest@i_1668 00C0                     actuatorTest@i_1669 00C1  
                              _isdigit 45F2                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2EB6                         __pintcode_body 2A9C  
                 end_of_initialization 40DA                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1685 00AF                   SolenoidTestA5@i_1687 00B0  
                              int_func 2A9C                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 0096  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3E0E  
                           _sensorTest 1916                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2A9C  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3F94                             _updateMenu 21CE  
                    i2_I2C_Master_Read 4692                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 4796                      i2_I2C_Master_Stop 480C  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 4044                              i2___lwmod 4210  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 26C4  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 47D4  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4720                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1F04                    __end_of_EEPROM_read 4756  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 432E                         __end_of_getRTC 3BC2  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 453E  
                       __end_of_readIR 417E                         __end_of_logRun 3132  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 42F8  
            __end_ofi2_I2C_Master_Read 46B8              __end_ofi2_I2C_Master_Wait 47A8  
                         i2printf@prec 001D                    start_initialization 4096  
            __end_ofi2_I2C_Master_Stop 4814                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1323 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3BC2  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2414 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1941 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 473E  
                   __end_of_PortTestA5 3A28                       _I2C_Master_Start 4804  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 47E0  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 3B3C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB14  
                            _lcdNibble 3E0E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 3354                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 3536                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0162                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 481C             __end_ofi2_I2C_Master_Write 47F4  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 28B6                            ??i2_isdigit 0001  
                             i2u424_40 16CE                               i2u424_47 16C4  
                             i2u371_40 46B0                               _PIR2bits 000FA1  
                             i2u428_40 172E                               i2u428_47 1724  
                             i2u468_40 251C                               i2u830_47 4006  
                             i2u831_47 4010                               i2u832_47 4032  
                             i2u833_47 403C                               i2u829_47 28F4  
                             i2u698_40 27F6                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 3452                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 466C                          lcdNibble@data 0081  
                             i2_getRTC 3D34                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 15A8  
                             i2_strcpy 432E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 40AA  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4782  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 014A                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 38F0  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 43F0             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 428A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4252                _change_state_to_menu_23 43C0  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 44E0  
              _change_state_to_logs_12 44B0                _change_state_to_logs_22 4480  
              _change_state_to_logs_23 456C                _change_state_to_logs_33 4450  
              _change_state_to_logs_34 4420                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2C02  
                           _EEPROMTest 481C                        _I2C_Master_Init 3ED8  
                     __size_of_readADC 002C                        _I2C_Master_Read 453E  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4782                        _I2C_Master_Stop 47FC  
                     __size_of_isdigit 002A                               _delay_ms 461C  
                       _printSortTimer 26C4                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 324C  
                             __ptext10 2EB6                               __ptext11 3F38  
                             __ptext20 46FE                               __ptext12 2FF6  
                             __ptext21 41CA                               __ptext13 3452  
                             __ptext30 4782                               __ptext22 08CA  
                             __ptext14 473E                               __ptext31 4252  
                             __ptext23 1F04                               __ptext15 4510  
                             __ptext40 0012                               __ptext32 428A  
                             __ptext24 42C2                               __ptext16 3A28  
                             __ptext41 3AB4                               __ptext33 38F0  
                             __ptext25 3B3C                               __ptext17 3ED8  
                             __ptext50 42F8                               __ptext42 3354  
                             __ptext34 36CC                               __ptext26 47E0  
                             __ptext18 378A                               __ptext51 3E76  
                             __ptext43 3BC2                               __ptext35 324C  
                             __ptext27 47FC                               __ptext19 459A  
                             __ptext60 248E                               __ptext52 3C46  
                             __ptext44 3992                               __ptext36 1916  
                             __ptext28 4804                               __ptext61 432E  
                             __ptext53 47B8                               __ptext45 481C  
                             __ptext37 417E                               __ptext29 453E  
                             __ptext70 4480                               __ptext62 28B6  
                             __ptext54 3E0E                               __ptext46 1C14  
                             __ptext38 45C6                               __ptext71 44B0  
                             __ptext63 4360                               __ptext55 3F94  
                             __ptext47 1170                               __ptext39 3536  
                             __ptext80 466C                               __ptext72 44E0  
                             __ptext64 4390                               __ptext56 3CBE  
                             __ptext48 47A8                               __ptext81 4210  
                             __ptext73 46B8                               __ptext65 43C0  
                             __ptext49 45F2                               __ptext90 4796  
                             __ptext82 4044                               __ptext74 3132  
                             __ptext66 43F0                               __ptext58 21CE  
                             __ptext83 47D4                               __ptext75 476C  
                             __ptext67 4420                               __ptext59 4644  
                             __ptext84 3FEE                               __ptext76 26C4  
                             __ptext68 4450                               __ptext85 3D34  
                             __ptext77 15A8                               __ptext69 456C  
                             __ptext86 47EA                               __ptext78 47C8  
                             __ptext87 480C                               __ptext79 4720  
                             __ptext88 4814                               __ptext89 4692  
                             _dispLogs 46B8                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1941 0002  
                   __end_of_initServos 3FEE                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 46FE  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3CBE                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F04  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 43C0      __end_ofi2_change_state_to_menu_22 4390  
                             loadRTC@i 0096                 __end_of_printSortTimer 28B6  
                            putch@data 0082               __end_of_I2C_Master_Start 480C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 47EA  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3AB4                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1C14  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 476C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 248E                __end_of_I2C_Master_Init 3F38  
              __end_of_I2C_Master_Read 456C                __end_of_I2C_Master_Wait 4796  
              __end_of_I2C_Master_Stop 4804                          printRTC@F3214 0133  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 3132                    __end_ofi2_lcdNibble 4044  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012D                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3F38  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
