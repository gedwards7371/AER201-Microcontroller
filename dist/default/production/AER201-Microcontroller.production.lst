

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 23:40:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   116                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   117                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   118  0000                     
   119                           ; Version 1.40
   120                           ; Generated 01/12/2016 GMT
   121                           ; 
   122                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   123                           ; All rights reserved.
   124                           ; 
   125                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   126                           ; 
   127                           ; Redistribution and use in source and binary forms, with or without modification, are
   128                           ; permitted provided that the following conditions are met:
   129                           ; 
   130                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   131                           ;        conditions and the following disclaimer.
   132                           ; 
   133                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   134                           ;        of conditions and the following disclaimer in the documentation and/or other
   135                           ;        materials provided with the distribution.
   136                           ; 
   137                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   138                           ;        software without specific prior written permission.
   139                           ; 
   140                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   141                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   142                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   143                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   144                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   145                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   146                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   147                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   148                           ; 
   149                           ; 
   150                           ; Code-generator required, PIC18F4620 Definitions
   151                           ; 
   152                           ; SFR Addresses
   153  0000                     
   154                           	psect	idataBANK1
   155  005BD2                     __pidataBANK1:
   156                           	opt stack 0
   157                           
   158                           ;initializer for UI@F3241
   159  005BD2  4D                 	db	77
   160  005BD3  4D                 	db	77
   161  005BD4  4D                 	db	77
   162  005BD5  00                 	db	0
   163                           
   164                           ;initializer for printRTC@F3231
   165  005BD6  4D                 	db	77
   166  005BD7  4D                 	db	77
   167  005BD8  4D                 	db	77
   168  005BD9  00                 	db	0
   169                           
   170                           	psect	mediumconst
   171  00FA88                     __pmediumconst:
   172                           	opt stack 0
   173  00FA88  00                 	db	0
   174  00FA89                     _keys:
   175                           	opt stack 0
   176  00FA89  31                 	db	49
   177  00FA8A  32                 	db	50
   178  00FA8B  33                 	db	51
   179  00FA8C  41                 	db	65
   180  00FA8D  34                 	db	52
   181  00FA8E  35                 	db	53
   182  00FA8F  36                 	db	54
   183  00FA90  42                 	db	66
   184  00FA91  37                 	db	55
   185  00FA92  38                 	db	56
   186  00FA93  39                 	db	57
   187  00FA94  43                 	db	67
   188  00FA95  2A                 	db	42
   189  00FA96  30                 	db	48
   190  00FA97  23                 	db	35
   191  00FA98  44                 	db	68
   192  00FA99  00                 	db	0
   193  00FA9A                     __end_of_keys:
   194                           	opt stack 0
   195  00FA9A                     _dpowers:
   196                           	opt stack 0
   197  00FA9A  0001               	dw	1
   198  00FA9C  000A               	dw	10
   199  00FA9E  0064               	dw	100
   200  00FAA0  03E8               	dw	1000
   201  00FAA2  2710               	dw	10000
   202  00FAA4                     __end_of_dpowers:
   203                           	opt stack 0
   204  0000                     _ADCON0	set	4034
   205  0000                     _ADCON0bits	set	4034
   206  0000                     _ADCON1	set	4033
   207  0000                     _ADCON2	set	4032
   208  0000                     _ADRESH	set	4036
   209  0000                     _ADRESL	set	4035
   210  0000                     _CMCONbits	set	4020
   211  0000                     _CVRCON	set	4021
   212  0000                     _EEADR	set	4009
   213  0000                     _EEADRH	set	4010
   214  0000                     _EECON1bits	set	4006
   215  0000                     _EECON2	set	4007
   216  0000                     _EEDATA	set	4008
   217  0000                     _INTCONbits	set	4082
   218  0000                     _LATA	set	3977
   219  0000                     _LATAbits	set	3977
   220  0000                     _LATB	set	3978
   221  0000                     _LATBbits	set	3978
   222  0000                     _LATC	set	3979
   223  0000                     _LATCbits	set	3979
   224  0000                     _LATD	set	3980
   225  0000                     _LATDbits	set	3980
   226  0000                     _LATE	set	3981
   227  0000                     _OSCCON	set	4051
   228  0000                     _OSCTUNEbits	set	3995
   229  0000                     _PIR2bits	set	4001
   230  0000                     _PORTAbits	set	3968
   231  0000                     _PORTB	set	3969
   232  0000                     _PORTBbits	set	3969
   233  0000                     _PR2	set	4043
   234  0000                     _SSPADD	set	4040
   235  0000                     _SSPBUF	set	4041
   236  0000                     _SSPCON1	set	4038
   237  0000                     _SSPCON2	set	4037
   238  0000                     _SSPSTAT	set	4039
   239  0000                     _T0CON	set	4053
   240  0000                     _T1CON	set	4045
   241  0000                     _T2CON	set	4042
   242  0000                     _T3CON	set	4017
   243  0000                     _TMR0H	set	4055
   244  0000                     _TMR0L	set	4054
   245  0000                     _TMR1H	set	4047
   246  0000                     _TMR1L	set	4046
   247  0000                     _TMR3H	set	4019
   248  0000                     _TMR3L	set	4018
   249  0000                     _TRISA	set	3986
   250  0000                     _TRISB	set	3987
   251  0000                     _TRISC	set	3988
   252  0000                     _TRISD	set	3989
   253  0000                     _TRISE	set	3990
   254  0000                     _ACKDT	set	32301
   255  0000                     _ACKEN	set	32300
   256  0000                     _ADIE	set	31982
   257  0000                     _INT1IE	set	32643
   258  0000                     _INT1IF	set	32640
   259  0000                     _PEIE	set	32662
   260  0000                     _PEN	set	32298
   261  0000                     _RCEN	set	32299
   262  0000                     _RSEN	set	32297
   263  0000                     _SEN	set	32296
   264  0000                     _TMR0IE	set	32661
   265  0000                     _TMR0IF	set	32658
   266  0000                     _TMR0ON	set	32431
   267  0000                     _TMR1IE	set	31976
   268  0000                     _TMR1IF	set	31984
   269  0000                     _TMR1ON	set	32360
   270  0000                     _TMR2IE	set	31977
   271  0000                     _TMR2IF	set	31985
   272  0000                     _TMR2ON	set	32338
   273  0000                     _TMR3IE	set	32001
   274  0000                     _TMR3IF	set	32009
   275  0000                     _TMR3ON	set	32136
   276  0000                     _TRISC3	set	31907
   277  0000                     _TRISC4	set	31908
   278  0000                     _nRBPU	set	32655
   279  00FAA4                     STR_21:
   280  00FAA4  25                 	db	37
   281  00FAA5  30                 	db	48	;'0'
   282  00FAA6  32                 	db	50	;'2'
   283  00FAA7  64                 	db	100	;'d'
   284  00FAA8  25                 	db	37
   285  00FAA9  73                 	db	115	;'s'
   286  00FAAA  20                 	db	32
   287  00FAAB  7C                 	db	124
   288  00FAAC  20                 	db	32
   289  00FAAD  25                 	db	37
   290  00FAAE  30                 	db	48	;'0'
   291  00FAAF  32                 	db	50	;'2'
   292  00FAB0  64                 	db	100	;'d'
   293  00FAB1  3A                 	db	58	;':'
   294  00FAB2  25                 	db	37
   295  00FAB3  30                 	db	48	;'0'
   296  00FAB4  32                 	db	50	;'2'
   297  00FAB5  64                 	db	100	;'d'
   298  00FAB6  3A                 	db	58	;':'
   299  00FAB7  25                 	db	37
   300  00FAB8  30                 	db	48	;'0'
   301  00FAB9  32                 	db	50	;'2'
   302  00FABA  64                 	db	100	;'d'
   303  00FABB  00                 	db	0
   304  00FABC                     STR_68:
   305  00FABC  28                 	db	40
   306  00FABD  64                 	db	100	;'d'
   307  00FABE  61                 	db	97	;'a'
   308  00FABF  74                 	db	116	;'t'
   309  00FAC0  61                 	db	97	;'a'
   310  00FAC1  3A                 	db	58	;':'
   311  00FAC2  20                 	db	32
   312  00FAC3  25                 	db	37
   313  00FAC4  75                 	db	117	;'u'
   314  00FAC5  2C                 	db	44
   315  00FAC6  20                 	db	32
   316  00FAC7  61                 	db	97	;'a'
   317  00FAC8  64                 	db	100	;'d'
   318  00FAC9  64                 	db	100	;'d'
   319  00FACA  72                 	db	114	;'r'
   320  00FACB  3A                 	db	58	;':'
   321  00FACC  20                 	db	32
   322  00FACD  25                 	db	37
   323  00FACE  75                 	db	117	;'u'
   324  00FACF  29                 	db	41
   325  00FAD0  00                 	db	0
   326  00FAD1                     STR_113:
   327  00FAD1  44                 	db	68	;'D'
   328  00FAD2  20                 	db	32
   329  00FAD3  57                 	db	87	;'W'
   330  00FAD4  49                 	db	73	;'I'
   331  00FAD5  4C                 	db	76	;'L'
   332  00FAD6  4C                 	db	76	;'L'
   333  00FAD7  20                 	db	32
   334  00FAD8  52                 	db	82	;'R'
   335  00FAD9  45                 	db	69	;'E'
   336  00FADA  54                 	db	84	;'T'
   337  00FADB  55                 	db	85	;'U'
   338  00FADC  52                 	db	82	;'R'
   339  00FADD  4E                 	db	78	;'N'
   340  00FADE  20                 	db	32
   341  00FADF  20                 	db	32
   342  00FAE0  20                 	db	32
   343  00FAE1  20                 	db	32
   344  00FAE2  00                 	db	0
   345  00FAE3                     STR_123:
   346  00FAE3  4F                 	db	79	;'O'
   347  00FAE4  54                 	db	84	;'T'
   348  00FAE5  48                 	db	72	;'H'
   349  00FAE6  45                 	db	69	;'E'
   350  00FAE7  52                 	db	82	;'R'
   351  00FAE8  20                 	db	32
   352  00FAE9  53                 	db	83	;'S'
   353  00FAEA  45                 	db	69	;'E'
   354  00FAEB  54                 	db	84	;'T'
   355  00FAEC  53                 	db	83	;'S'
   356  00FAED  20                 	db	32
   357  00FAEE  52                 	db	82	;'R'
   358  00FAEF  41                 	db	65	;'A'
   359  00FAF0  35                 	db	53	;'5'
   360  00FAF1  20                 	db	32
   361  00FAF2  20                 	db	32
   362  00FAF3  20                 	db	32
   363  00FAF4  00                 	db	0
   364  00FAF5                     STR_122:
   365  00FAF5  53                 	db	83	;'S'
   366  00FAF6  3A                 	db	58	;':'
   367  00FAF7  20                 	db	32
   368  00FAF8  44                 	db	68	;'D'
   369  00FAF9  20                 	db	32
   370  00FAFA  57                 	db	87	;'W'
   371  00FAFB  49                 	db	73	;'I'
   372  00FAFC  4C                 	db	76	;'L'
   373  00FAFD  4C                 	db	76	;'L'
   374  00FAFE  20                 	db	32
   375  00FAFF  52                 	db	82	;'R'
   376  00FB00  45                 	db	69	;'E'
   377  00FB01  54                 	db	84	;'T'
   378  00FB02  55                 	db	85	;'U'
   379  00FB03  52                 	db	82	;'R'
   380  00FB04  4E                 	db	78	;'N'
   381  00FB05  20                 	db	32
   382  00FB06  00                 	db	0
   383  00FB07                     STR_125:
   384  00FB07  4F                 	db	79	;'O'
   385  00FB08  54                 	db	84	;'T'
   386  00FB09  48                 	db	72	;'H'
   387  00FB0A  45                 	db	69	;'E'
   388  00FB0B  52                 	db	82	;'R'
   389  00FB0C  3A                 	db	58	;':'
   390  00FB0D  20                 	db	32
   391  00FB0E  43                 	db	67	;'C'
   392  00FB0F  41                 	db	65	;'A'
   393  00FB10  4D                 	db	77	;'M'
   394  00FB11  20                 	db	32
   395  00FB12  54                 	db	84	;'T'
   396  00FB13  4F                 	db	79	;'O'
   397  00FB14  47                 	db	71	;'G'
   398  00FB15  47                 	db	71	;'G'
   399  00FB16  4C                 	db	76	;'L'
   400  00FB17  45                 	db	69	;'E'
   401  00FB18  00                 	db	0
   402  00FB19                     STR_131:
   403  00FB19  4F                 	db	79	;'O'
   404  00FB1A  54                 	db	84	;'T'
   405  00FB1B  48                 	db	72	;'H'
   406  00FB1C  45                 	db	69	;'E'
   407  00FB1D  52                 	db	82	;'R'
   408  00FB1E  20                 	db	32
   409  00FB1F  53                 	db	83	;'S'
   410  00FB20  45                 	db	69	;'E'
   411  00FB21  54                 	db	84	;'T'
   412  00FB22  53                 	db	83	;'S'
   413  00FB23  20                 	db	32
   414  00FB24  50                 	db	80	;'P'
   415  00FB25  55                 	db	85	;'U'
   416  00FB26  53                 	db	83	;'S'
   417  00FB27  48                 	db	72	;'H'
   418  00FB28  45                 	db	69	;'E'
   419  00FB29  52                 	db	82	;'R'
   420  00FB2A  00                 	db	0
   421  00FB2B                     STR_124:
   422  00FB2B  44                 	db	68	;'D'
   423  00FB2C  3A                 	db	58	;':'
   424  00FB2D  20                 	db	32
   425  00FB2E  52                 	db	82	;'R'
   426  00FB2F  45                 	db	69	;'E'
   427  00FB30  54                 	db	84	;'T'
   428  00FB31  7C                 	db	124
   429  00FB32  32                 	db	50	;'2'
   430  00FB33  3A                 	db	58	;':'
   431  00FB34  20                 	db	32
   432  00FB35  43                 	db	67	;'C'
   433  00FB36  4F                 	db	79	;'O'
   434  00FB37  4E                 	db	78	;'N'
   435  00FB38  44                 	db	68	;'D'
   436  00FB39  20                 	db	32
   437  00FB3A  25                 	db	37
   438  00FB3B  64                 	db	100	;'d'
   439  00FB3C  00                 	db	0
   440  00FB3D                     STR_64:
   441  00FB3D  72                 	db	114	;'r'
   442  00FB3E  65                 	db	101	;'e'
   443  00FB3F  73                 	db	115	;'s'
   444  00FB40  31                 	db	49	;'1'
   445  00FB41  3A                 	db	58	;':'
   446  00FB42  20                 	db	32
   447  00FB43  25                 	db	37
   448  00FB44  64                 	db	100	;'d'
   449  00FB45  7C                 	db	124
   450  00FB46  72                 	db	114	;'r'
   451  00FB47  65                 	db	101	;'e'
   452  00FB48  73                 	db	115	;'s'
   453  00FB49  32                 	db	50	;'2'
   454  00FB4A  3A                 	db	58	;':'
   455  00FB4B  20                 	db	32
   456  00FB4C  25                 	db	37
   457  00FB4D  64                 	db	100	;'d'
   458  00FB4E  00                 	db	0
   459  00FB4F                     STR_3:
   460  00FB4F  2D                 	db	45
   461  00FB50  2D                 	db	45
   462  00FB51  20                 	db	32
   463  00FB52  4C                 	db	76	;'L'
   464  00FB53  4F                 	db	79	;'O'
   465  00FB54  47                 	db	71	;'G'
   466  00FB55  20                 	db	32
   467  00FB56  25                 	db	37
   468  00FB57  32                 	db	50	;'2'
   469  00FB58  64                 	db	100	;'d'
   470  00FB59  20                 	db	32
   471  00FB5A  48                 	db	72	;'H'
   472  00FB5B  45                 	db	69	;'E'
   473  00FB5C  52                 	db	82	;'R'
   474  00FB5D  45                 	db	69	;'E'
   475  00FB5E  2D                 	db	45
   476  00FB5F  2D                 	db	45
   477  00FB60  00                 	db	0
   478  00FB61                     STR_1:
   479  00FB61  52                 	db	82	;'R'
   480  00FB62  45                 	db	69	;'E'
   481  00FB63  53                 	db	83	;'S'
   482  00FB64  55                 	db	85	;'U'
   483  00FB65  4C                 	db	76	;'L'
   484  00FB66  54                 	db	84	;'T'
   485  00FB67  53                 	db	83	;'S'
   486  00FB68  20                 	db	32
   487  00FB69  49                 	db	73	;'I'
   488  00FB6A  4E                 	db	78	;'N'
   489  00FB6B  20                 	db	32
   490  00FB6C  4C                 	db	76	;'L'
   491  00FB6D  4F                 	db	79	;'O'
   492  00FB6E  47                 	db	71	;'G'
   493  00FB6F  20                 	db	32
   494  00FB70  25                 	db	37
   495  00FB71  64                 	db	100	;'d'
   496  00FB72  00                 	db	0
   497  00FB73                     STR_104:
   498  00FB73  4D                 	db	77	;'M'
   499  00FB74  49                 	db	73	;'I'
   500  00FB75  44                 	db	68	;'D'
   501  00FB76  20                 	db	32
   502  00FB77  2D                 	db	45
   503  00FB78  2D                 	db	45
   504  00FB79  20                 	db	32
   505  00FB7A  32                 	db	50	;'2'
   506  00FB7B  73                 	db	115	;'s'
   507  00FB7C  20                 	db	32
   508  00FB7D  20                 	db	32
   509  00FB7E  20                 	db	32
   510  00FB7F  20                 	db	32
   511  00FB80  20                 	db	32
   512  00FB81  20                 	db	32
   513  00FB82  20                 	db	32
   514  00FB83  00                 	db	0
   515  00FB84                     STR_107:
   516  00FB84  44                 	db	68	;'D'
   517  00FB85  52                 	db	82	;'R'
   518  00FB86  4F                 	db	79	;'O'
   519  00FB87  50                 	db	80	;'P'
   520  00FB88  20                 	db	32
   521  00FB89  2D                 	db	45
   522  00FB8A  2D                 	db	45
   523  00FB8B  20                 	db	32
   524  00FB8C  32                 	db	50	;'2'
   525  00FB8D  73                 	db	115	;'s'
   526  00FB8E  20                 	db	32
   527  00FB8F  20                 	db	32
   528  00FB90  20                 	db	32
   529  00FB91  20                 	db	32
   530  00FB92  20                 	db	32
   531  00FB93  20                 	db	32
   532  00FB94  00                 	db	0
   533  00FB95                     STR_101:
   534  00FB95  4C                 	db	76	;'L'
   535  00FB96  45                 	db	69	;'E'
   536  00FB97  46                 	db	70	;'F'
   537  00FB98  54                 	db	84	;'T'
   538  00FB99  20                 	db	32
   539  00FB9A  2D                 	db	45
   540  00FB9B  2D                 	db	45
   541  00FB9C  20                 	db	32
   542  00FB9D  32                 	db	50	;'2'
   543  00FB9E  73                 	db	115	;'s'
   544  00FB9F  20                 	db	32
   545  00FBA0  20                 	db	32
   546  00FBA1  20                 	db	32
   547  00FBA2  20                 	db	32
   548  00FBA3  20                 	db	32
   549  00FBA4  20                 	db	32
   550  00FBA5  00                 	db	0
   551  00FBA6                     STR_106:
   552  00FBA6  4C                 	db	76	;'L'
   553  00FBA7  45                 	db	69	;'E'
   554  00FBA8  56                 	db	86	;'V'
   555  00FBA9  45                 	db	69	;'E'
   556  00FBAA  4C                 	db	76	;'L'
   557  00FBAB  20                 	db	32
   558  00FBAC  2D                 	db	45
   559  00FBAD  2D                 	db	45
   560  00FBAE  20                 	db	32
   561  00FBAF  32                 	db	50	;'2'
   562  00FBB0  73                 	db	115	;'s'
   563  00FBB1  20                 	db	32
   564  00FBB2  20                 	db	32
   565  00FBB3  20                 	db	32
   566  00FBB4  20                 	db	32
   567  00FBB5  20                 	db	32
   568  00FBB6  00                 	db	0
   569  00FBB7                     STR_100:
   570  00FBB7  52                 	db	82	;'R'
   571  00FBB8  49                 	db	73	;'I'
   572  00FBB9  47                 	db	71	;'G'
   573  00FBBA  48                 	db	72	;'H'
   574  00FBBB  54                 	db	84	;'T'
   575  00FBBC  20                 	db	32
   576  00FBBD  2D                 	db	45
   577  00FBBE  2D                 	db	45
   578  00FBBF  20                 	db	32
   579  00FBC0  32                 	db	50	;'2'
   580  00FBC1  73                 	db	115	;'s'
   581  00FBC2  20                 	db	32
   582  00FBC3  20                 	db	32
   583  00FBC4  20                 	db	32
   584  00FBC5  20                 	db	32
   585  00FBC6  20                 	db	32
   586  00FBC7  00                 	db	0
   587  00FBC8                     STR_99:
   588  00FBC8  4D                 	db	77	;'M'
   589  00FBC9  49                 	db	73	;'I'
   590  00FBCA  44                 	db	68	;'D'
   591  00FBCB  44                 	db	68	;'D'
   592  00FBCC  4C                 	db	76	;'L'
   593  00FBCD  45                 	db	69	;'E'
   594  00FBCE  20                 	db	32
   595  00FBCF  2D                 	db	45
   596  00FBD0  2D                 	db	45
   597  00FBD1  20                 	db	32
   598  00FBD2  32                 	db	50	;'2'
   599  00FBD3  73                 	db	115	;'s'
   600  00FBD4  20                 	db	32
   601  00FBD5  20                 	db	32
   602  00FBD6  20                 	db	32
   603  00FBD7  20                 	db	32
   604  00FBD8  00                 	db	0
   605  00FBD9                     STR_114:
   606  00FBD9  4F                 	db	79	;'O'
   607  00FBDA  54                 	db	84	;'T'
   608  00FBDB  48                 	db	72	;'H'
   609  00FBDC  45                 	db	69	;'E'
   610  00FBDD  52                 	db	82	;'R'
   611  00FBDE  20                 	db	32
   612  00FBDF  53                 	db	83	;'S'
   613  00FBE0  45                 	db	69	;'E'
   614  00FBE1  54                 	db	84	;'T'
   615  00FBE2  53                 	db	83	;'S'
   616  00FBE3  20                 	db	32
   617  00FBE4  44                 	db	68	;'D'
   618  00FBE5  43                 	db	67	;'C'
   619  00FBE6  20                 	db	32
   620  00FBE7  20                 	db	32
   621  00FBE8  20                 	db	32
   622  00FBE9  00                 	db	0
   623  00FBEA                     STR_120:
   624  00FBEA  44                 	db	68	;'D'
   625  00FBEB  20                 	db	32
   626  00FBEC  57                 	db	87	;'W'
   627  00FBED  49                 	db	73	;'I'
   628  00FBEE  4C                 	db	76	;'L'
   629  00FBEF  4C                 	db	76	;'L'
   630  00FBF0  20                 	db	32
   631  00FBF1  52                 	db	82	;'R'
   632  00FBF2  45                 	db	69	;'E'
   633  00FBF3  54                 	db	84	;'T'
   634  00FBF4  55                 	db	85	;'U'
   635  00FBF5  52                 	db	82	;'R'
   636  00FBF6  4E                 	db	78	;'N'
   637  00FBF7  20                 	db	32
   638  00FBF8  20                 	db	32
   639  00FBF9  20                 	db	32
   640  00FBFA  00                 	db	0
   641  00FBFB                     STR_117:
   642  00FBFB  35                 	db	53	;'5'
   643  00FBFC  3A                 	db	58	;':'
   644  00FBFD  48                 	db	72	;'H'
   645  00FBFE  7C                 	db	124
   646  00FBFF  36                 	db	54	;'6'
   647  00FC00  3A                 	db	58	;':'
   648  00FC01  4C                 	db	76	;'L'
   649  00FC02  7C                 	db	124
   650  00FC03  49                 	db	73	;'I'
   651  00FC04  52                 	db	82	;'R'
   652  00FC05  3A                 	db	58	;':'
   653  00FC06  25                 	db	37
   654  00FC07  64                 	db	100	;'d'
   655  00FC08  20                 	db	32
   656  00FC09  20                 	db	32
   657  00FC0A  20                 	db	32
   658  00FC0B  00                 	db	0
   659  00FC0C                     STR_115:
   660  00FC0C  31                 	db	49	;'1'
   661  00FC0D  3A                 	db	58	;':'
   662  00FC0E  20                 	db	32
   663  00FC0F  44                 	db	68	;'D'
   664  00FC10  43                 	db	67	;'C'
   665  00FC11  20                 	db	32
   666  00FC12  7C                 	db	124
   667  00FC13  20                 	db	32
   668  00FC14  41                 	db	65	;'A'
   669  00FC15  3A                 	db	58	;':'
   670  00FC16  20                 	db	32
   671  00FC17  41                 	db	65	;'A'
   672  00FC18  52                 	db	82	;'R'
   673  00FC19  4D                 	db	77	;'M'
   674  00FC1A  20                 	db	32
   675  00FC1B  20                 	db	32
   676  00FC1C  00                 	db	0
   677  00FC1D                     STR_102:
   678  00FC1D  4D                 	db	77	;'M'
   679  00FC1E  49                 	db	73	;'I'
   680  00FC1F  44                 	db	68	;'D'
   681  00FC20  2D                 	db	45
   682  00FC21  4C                 	db	76	;'L'
   683  00FC22  45                 	db	69	;'E'
   684  00FC23  46                 	db	70	;'F'
   685  00FC24  54                 	db	84	;'T'
   686  00FC25  20                 	db	32
   687  00FC26  2D                 	db	45
   688  00FC27  2D                 	db	45
   689  00FC28  20                 	db	32
   690  00FC29  32                 	db	50	;'2'
   691  00FC2A  73                 	db	115	;'s'
   692  00FC2B  20                 	db	32
   693  00FC2C  20                 	db	32
   694  00FC2D  00                 	db	0
   695  00FC2E                     STR_103:
   696  00FC2E  4D                 	db	77	;'M'
   697  00FC2F  49                 	db	73	;'I'
   698  00FC30  44                 	db	68	;'D'
   699  00FC31  2D                 	db	45
   700  00FC32  52                 	db	82	;'R'
   701  00FC33  49                 	db	73	;'I'
   702  00FC34  47                 	db	71	;'G'
   703  00FC35  48                 	db	72	;'H'
   704  00FC36  54                 	db	84	;'T'
   705  00FC37  20                 	db	32
   706  00FC38  2D                 	db	45
   707  00FC39  2D                 	db	45
   708  00FC3A  20                 	db	32
   709  00FC3B  32                 	db	50	;'2'
   710  00FC3C  73                 	db	115	;'s'
   711  00FC3D  20                 	db	32
   712  00FC3E  00                 	db	0
   713  00FC3F  45                 	db	69	;'E'
   714  00FC40  4C                 	db	76	;'L'
   715  00FC41  53                 	db	83	;'S'
   716  00FC42  45                 	db	69	;'E'
   717  00FC43  20                 	db	32
   718  00FC44  54                 	db	84	;'T'
   719  00FC45  4F                 	db	79	;'O'
   720  00FC46  47                 	db	71	;'G'
   721  00FC47  47                 	db	71	;'G'
   722  00FC48  4C                 	db	76	;'L'
   723  00FC49  45                 	db	69	;'E'
   724  00FC4A  53                 	db	83	;'S'
   725  00FC4B  20                 	db	32
   726  00FC4C  52                 	db	82	;'R'
   727  00FC4D  41                 	db	65	;'A'
   728  00FC4E  35                 	db	53	;'5'
   729  00FC4F  00                 	db	0
   730  00FC50                     STR_74:
   731  00FC50  41                 	db	65	;'A'
   732  00FC51  4C                 	db	76	;'L'
   733  00FC52  47                 	db	71	;'G'
   734  00FC53  31                 	db	49	;'1'
   735  00FC54  3A                 	db	58	;':'
   736  00FC55  20                 	db	32
   737  00FC56  39                 	db	57	;'9'
   738  00FC57  20                 	db	32
   739  00FC58  50                 	db	80	;'P'
   740  00FC59  4F                 	db	79	;'O'
   741  00FC5A  50                 	db	80	;'P'
   742  00FC5B  4E                 	db	78	;'N'
   743  00FC5C  4F                 	db	79	;'O'
   744  00FC5D  54                 	db	84	;'T'
   745  00FC5E  41                 	db	65	;'A'
   746  00FC5F  42                 	db	66	;'B'
   747  00FC60  00                 	db	0
   748  00FC61                     STR_94:
   749  00FC61  54                 	db	84	;'T'
   750  00FC62  53                 	db	83	;'S'
   751  00FC63  54                 	db	84	;'T'
   752  00FC64  3A                 	db	58	;':'
   753  00FC65  20                 	db	32
   754  00FC66  43                 	db	67	;'C'
   755  00FC67  4F                 	db	79	;'O'
   756  00FC68  4E                 	db	78	;'N'
   757  00FC69  44                 	db	68	;'D'
   758  00FC6A  20                 	db	32
   759  00FC6B  53                 	db	83	;'S'
   760  00FC6C  4F                 	db	79	;'O'
   761  00FC6D  4C                 	db	76	;'L'
   762  00FC6E  4E                 	db	78	;'N'
   763  00FC6F  27                 	db	39
   764  00FC70  44                 	db	68	;'D'
   765  00FC71  00                 	db	0
   766  00FC72                     STR_96:
   767  00FC72  54                 	db	84	;'T'
   768  00FC73  53                 	db	83	;'S'
   769  00FC74  54                 	db	84	;'T'
   770  00FC75  3A                 	db	58	;':'
   771  00FC76  20                 	db	32
   772  00FC77  50                 	db	80	;'P'
   773  00FC78  55                 	db	85	;'U'
   774  00FC79  53                 	db	83	;'S'
   775  00FC7A  48                 	db	72	;'H'
   776  00FC7B  20                 	db	32
   777  00FC7C  53                 	db	83	;'S'
   778  00FC7D  4F                 	db	79	;'O'
   779  00FC7E  4C                 	db	76	;'L'
   780  00FC7F  4E                 	db	78	;'N'
   781  00FC80  27                 	db	39
   782  00FC81  44                 	db	68	;'D'
   783  00FC82  00                 	db	0
   784  00FC83                     STR_70:
   785  00FC83  32                 	db	50	;'2'
   786  00FC84  2E                 	db	46
   787  00FC85  53                 	db	83	;'S'
   788  00FC86  4E                 	db	78	;'N'
   789  00FC87  52                 	db	82	;'R'
   790  00FC88  7C                 	db	124
   791  00FC89  34                 	db	52	;'4'
   792  00FC8A  2E                 	db	46
   793  00FC8B  48                 	db	72	;'H'
   794  00FC8C  49                 	db	73	;'I'
   795  00FC8D  7C                 	db	124
   796  00FC8E  35                 	db	53	;'5'
   797  00FC8F  2E                 	db	46
   798  00FC90  4D                 	db	77	;'M'
   799  00FC91  45                 	db	69	;'E'
   800  00FC92  44                 	db	68	;'D'
   801  00FC93  00                 	db	0
   802  00FC94                     STR_71:
   803  00FC94  42                 	db	66	;'B'
   804  00FC95  2E                 	db	46
   805  00FC96  50                 	db	80	;'P'
   806  00FC97  4C                 	db	76	;'L'
   807  00FC98  41                 	db	65	;'A'
   808  00FC99  7C                 	db	124
   809  00FC9A  38                 	db	56	;'8'
   810  00FC9B  2E                 	db	46
   811  00FC9C  53                 	db	83	;'S'
   812  00FC9D  56                 	db	86	;'V'
   813  00FC9E  7C                 	db	124
   814  00FC9F  39                 	db	57	;'9'
   815  00FCA0  2E                 	db	46
   816  00FCA1  42                 	db	66	;'B'
   817  00FCA2  4C                 	db	76	;'L'
   818  00FCA3  4B                 	db	75	;'K'
   819  00FCA4  00                 	db	0
   820  00FCA5                     STR_129:
   821  00FCA5  45                 	db	69	;'E'
   822  00FCA6  4C                 	db	76	;'L'
   823  00FCA7  53                 	db	83	;'S'
   824  00FCA8  45                 	db	69	;'E'
   825  00FCA9  20                 	db	32
   826  00FCAA  54                 	db	84	;'T'
   827  00FCAB  4F                 	db	79	;'O'
   828  00FCAC  47                 	db	71	;'G'
   829  00FCAD  47                 	db	71	;'G'
   830  00FCAE  4C                 	db	76	;'L'
   831  00FCAF  45                 	db	69	;'E'
   832  00FCB0  53                 	db	83	;'S'
   833  00FCB1  20                 	db	32
   834  00FCB2  41                 	db	65	;'A'
   835  00FCB3  52                 	db	82	;'R'
   836  00FCB4  4D                 	db	77	;'M'
   837  00FCB5  00                 	db	0
   838  00FCB6                     STR_112:
   839  00FCB6  54                 	db	84	;'T'
   840  00FCB7  53                 	db	83	;'S'
   841  00FCB8  54                 	db	84	;'T'
   842  00FCB9  3A                 	db	58	;':'
   843  00FCBA  20                 	db	32
   844  00FCBB  42                 	db	66	;'B'
   845  00FCBC  4F                 	db	79	;'O'
   846  00FCBD  54                 	db	84	;'T'
   847  00FCBE  48                 	db	72	;'H'
   848  00FCBF  20                 	db	32
   849  00FCC0  53                 	db	83	;'S'
   850  00FCC1  45                 	db	69	;'E'
   851  00FCC2  52                 	db	82	;'R'
   852  00FCC3  56                 	db	86	;'V'
   853  00FCC4  4F                 	db	79	;'O'
   854  00FCC5  53                 	db	83	;'S'
   855  00FCC6  00                 	db	0
   856  00FCC7                     STR_41:
   857  00FCC7  4C                 	db	76	;'L'
   858  00FCC8  4F                 	db	79	;'O'
   859  00FCC9  47                 	db	71	;'G'
   860  00FCCA  20                 	db	32
   861  00FCCB  31                 	db	49	;'1'
   862  00FCCC  20                 	db	32
   863  00FCCD  20                 	db	32
   864  00FCCE  20                 	db	32
   865  00FCCF  20                 	db	32
   866  00FCD0  20                 	db	32
   867  00FCD1  20                 	db	32
   868  00FCD2  20                 	db	32
   869  00FCD3  20                 	db	32
   870  00FCD4  20                 	db	32
   871  00FCD5  20                 	db	32
   872  00FCD6  20                 	db	32
   873  00FCD7  00                 	db	0
   874  00FCD8                     STR_40:
   875  00FCD8  4C                 	db	76	;'L'
   876  00FCD9  4F                 	db	79	;'O'
   877  00FCDA  47                 	db	71	;'G'
   878  00FCDB  20                 	db	32
   879  00FCDC  32                 	db	50	;'2'
   880  00FCDD  20                 	db	32
   881  00FCDE  20                 	db	32
   882  00FCDF  20                 	db	32
   883  00FCE0  20                 	db	32
   884  00FCE1  20                 	db	32
   885  00FCE2  20                 	db	32
   886  00FCE3  20                 	db	32
   887  00FCE4  20                 	db	32
   888  00FCE5  20                 	db	32
   889  00FCE6  20                 	db	32
   890  00FCE7  20                 	db	32
   891  00FCE8  00                 	db	0
   892  00FCE9                     STR_44:
   893  00FCE9  4C                 	db	76	;'L'
   894  00FCEA  4F                 	db	79	;'O'
   895  00FCEB  47                 	db	71	;'G'
   896  00FCEC  20                 	db	32
   897  00FCED  33                 	db	51	;'3'
   898  00FCEE  20                 	db	32
   899  00FCEF  20                 	db	32
   900  00FCF0  20                 	db	32
   901  00FCF1  20                 	db	32
   902  00FCF2  20                 	db	32
   903  00FCF3  20                 	db	32
   904  00FCF4  20                 	db	32
   905  00FCF5  20                 	db	32
   906  00FCF6  20                 	db	32
   907  00FCF7  20                 	db	32
   908  00FCF8  20                 	db	32
   909  00FCF9  00                 	db	0
   910  00FCFA                     STR_48:
   911  00FCFA  4C                 	db	76	;'L'
   912  00FCFB  4F                 	db	79	;'O'
   913  00FCFC  47                 	db	71	;'G'
   914  00FCFD  20                 	db	32
   915  00FCFE  34                 	db	52	;'4'
   916  00FCFF  20                 	db	32
   917  00FD00  20                 	db	32
   918  00FD01  20                 	db	32
   919  00FD02  20                 	db	32
   920  00FD03  20                 	db	32
   921  00FD04  20                 	db	32
   922  00FD05  20                 	db	32
   923  00FD06  20                 	db	32
   924  00FD07  20                 	db	32
   925  00FD08  20                 	db	32
   926  00FD09  20                 	db	32
   927  00FD0A  00                 	db	0
   928  00FD0B                     STR_36:
   929  00FD0B  33                 	db	51	;'3'
   930  00FD0C  2E                 	db	46
   931  00FD0D  20                 	db	32
   932  00FD0E  4C                 	db	76	;'L'
   933  00FD0F  4F                 	db	79	;'O'
   934  00FD10  47                 	db	71	;'G'
   935  00FD11  53                 	db	83	;'S'
   936  00FD12  20                 	db	32
   937  00FD13  20                 	db	32
   938  00FD14  20                 	db	32
   939  00FD15  20                 	db	32
   940  00FD16  20                 	db	32
   941  00FD17  20                 	db	32
   942  00FD18  20                 	db	32
   943  00FD19  20                 	db	32
   944  00FD1A  20                 	db	32
   945  00FD1B  00                 	db	0
   946  00FD1C                     STR_32:
   947  00FD1C  32                 	db	50	;'2'
   948  00FD1D  2E                 	db	46
   949  00FD1E  20                 	db	32
   950  00FD1F  53                 	db	83	;'S'
   951  00FD20  4F                 	db	79	;'O'
   952  00FD21  52                 	db	82	;'R'
   953  00FD22  54                 	db	84	;'T'
   954  00FD23  20                 	db	32
   955  00FD24  20                 	db	32
   956  00FD25  20                 	db	32
   957  00FD26  20                 	db	32
   958  00FD27  20                 	db	32
   959  00FD28  20                 	db	32
   960  00FD29  20                 	db	32
   961  00FD2A  20                 	db	32
   962  00FD2B  20                 	db	32
   963  00FD2C  00                 	db	0
   964  00FD2D                     STR_33:
   965  00FD2D  31                 	db	49	;'1'
   966  00FD2E  2E                 	db	46
   967  00FD2F  20                 	db	32
   968  00FD30  44                 	db	68	;'D'
   969  00FD31  41                 	db	65	;'A'
   970  00FD32  54                 	db	84	;'T'
   971  00FD33  45                 	db	69	;'E'
   972  00FD34  2F                 	db	47
   973  00FD35  54                 	db	84	;'T'
   974  00FD36  49                 	db	73	;'I'
   975  00FD37  4D                 	db	77	;'M'
   976  00FD38  45                 	db	69	;'E'
   977  00FD39  20                 	db	32
   978  00FD3A  20                 	db	32
   979  00FD3B  20                 	db	32
   980  00FD3C  20                 	db	32
   981  00FD3D  00                 	db	0
   982  00FD3E                     STR_24:
   983  00FD3E  20                 	db	32
   984  00FD3F  2D                 	db	45
   985  00FD40  2D                 	db	45
   986  00FD41  20                 	db	32
   987  00FD42  50                 	db	80	;'P'
   988  00FD43  4F                 	db	79	;'O'
   989  00FD44  50                 	db	80	;'P'
   990  00FD45  20                 	db	32
   991  00FD46  20                 	db	32
   992  00FD47  43                 	db	67	;'C'
   993  00FD48  41                 	db	65	;'A'
   994  00FD49  4E                 	db	78	;'N'
   995  00FD4A  20                 	db	32
   996  00FD4B  2D                 	db	45
   997  00FD4C  2D                 	db	45
   998  00FD4D  20                 	db	32
   999  00FD4E  00                 	db	0
  1000  00FD4F                     STR_26:
  1001  00FD4F  20                 	db	32
  1002  00FD50  2D                 	db	45
  1003  00FD51  2D                 	db	45
  1004  00FD52  20                 	db	32
  1005  00FD53  53                 	db	83	;'S'
  1006  00FD54  4F                 	db	79	;'O'
  1007  00FD55  55                 	db	85	;'U'
  1008  00FD56  50                 	db	80	;'P'
  1009  00FD57  20                 	db	32
  1010  00FD58  43                 	db	67	;'C'
  1011  00FD59  41                 	db	65	;'A'
  1012  00FD5A  4E                 	db	78	;'N'
  1013  00FD5B  20                 	db	32
  1014  00FD5C  2D                 	db	45
  1015  00FD5D  2D                 	db	45
  1016  00FD5E  20                 	db	32
  1017  00FD5F  00                 	db	0
  1018  00FD60                     STR_28:
  1019  00FD60  2D                 	db	45
  1020  00FD61  2D                 	db	45
  1021  00FD62  20                 	db	32
  1022  00FD63  54                 	db	84	;'T'
  1023  00FD64  4F                 	db	79	;'O'
  1024  00FD65  54                 	db	84	;'T'
  1025  00FD66  41                 	db	65	;'A'
  1026  00FD67  4C                 	db	76	;'L'
  1027  00FD68  20                 	db	32
  1028  00FD69  43                 	db	67	;'C'
  1029  00FD6A  41                 	db	65	;'A'
  1030  00FD6B  4E                 	db	78	;'N'
  1031  00FD6C  53                 	db	83	;'S'
  1032  00FD6D  20                 	db	32
  1033  00FD6E  2D                 	db	45
  1034  00FD6F  2D                 	db	45
  1035  00FD70  00                 	db	0
  1036  00FD71                     STR_39:
  1037  00FD71  4C                 	db	76	;'L'
  1038  00FD72  4F                 	db	79	;'O'
  1039  00FD73  47                 	db	71	;'G'
  1040  00FD74  20                 	db	32
  1041  00FD75  31                 	db	49	;'1'
  1042  00FD76  20                 	db	32
  1043  00FD77  20                 	db	32
  1044  00FD78  20                 	db	32
  1045  00FD79  20                 	db	32
  1046  00FD7A  20                 	db	32
  1047  00FD7B  20                 	db	32
  1048  00FD7C  20                 	db	32
  1049  00FD7D  20                 	db	32
  1050  00FD7E  20                 	db	32
  1051  00FD7F  20                 	db	32
  1052  00FD80  3C                 	db	60	;'<'
  1053  00FD81  00                 	db	0
  1054  00FD82                     STR_42:
  1055  00FD82  4C                 	db	76	;'L'
  1056  00FD83  4F                 	db	79	;'O'
  1057  00FD84  47                 	db	71	;'G'
  1058  00FD85  20                 	db	32
  1059  00FD86  32                 	db	50	;'2'
  1060  00FD87  20                 	db	32
  1061  00FD88  20                 	db	32
  1062  00FD89  20                 	db	32
  1063  00FD8A  20                 	db	32
  1064  00FD8B  20                 	db	32
  1065  00FD8C  20                 	db	32
  1066  00FD8D  20                 	db	32
  1067  00FD8E  20                 	db	32
  1068  00FD8F  20                 	db	32
  1069  00FD90  20                 	db	32
  1070  00FD91  3C                 	db	60	;'<'
  1071  00FD92  00                 	db	0
  1072  00FD93                     STR_46:
  1073  00FD93  4C                 	db	76	;'L'
  1074  00FD94  4F                 	db	79	;'O'
  1075  00FD95  47                 	db	71	;'G'
  1076  00FD96  20                 	db	32
  1077  00FD97  33                 	db	51	;'3'
  1078  00FD98  20                 	db	32
  1079  00FD99  20                 	db	32
  1080  00FD9A  20                 	db	32
  1081  00FD9B  20                 	db	32
  1082  00FD9C  20                 	db	32
  1083  00FD9D  20                 	db	32
  1084  00FD9E  20                 	db	32
  1085  00FD9F  20                 	db	32
  1086  00FDA0  20                 	db	32
  1087  00FDA1  20                 	db	32
  1088  00FDA2  3C                 	db	60	;'<'
  1089  00FDA3  00                 	db	0
  1090  00FDA4                     STR_50:
  1091  00FDA4  4C                 	db	76	;'L'
  1092  00FDA5  4F                 	db	79	;'O'
  1093  00FDA6  47                 	db	71	;'G'
  1094  00FDA7  20                 	db	32
  1095  00FDA8  34                 	db	52	;'4'
  1096  00FDA9  20                 	db	32
  1097  00FDAA  20                 	db	32
  1098  00FDAB  20                 	db	32
  1099  00FDAC  20                 	db	32
  1100  00FDAD  20                 	db	32
  1101  00FDAE  20                 	db	32
  1102  00FDAF  20                 	db	32
  1103  00FDB0  20                 	db	32
  1104  00FDB1  20                 	db	32
  1105  00FDB2  20                 	db	32
  1106  00FDB3  3C                 	db	60	;'<'
  1107  00FDB4  00                 	db	0
  1108  00FDB5                     STR_38:
  1109  00FDB5  33                 	db	51	;'3'
  1110  00FDB6  2E                 	db	46
  1111  00FDB7  20                 	db	32
  1112  00FDB8  4C                 	db	76	;'L'
  1113  00FDB9  4F                 	db	79	;'O'
  1114  00FDBA  47                 	db	71	;'G'
  1115  00FDBB  53                 	db	83	;'S'
  1116  00FDBC  20                 	db	32
  1117  00FDBD  20                 	db	32
  1118  00FDBE  20                 	db	32
  1119  00FDBF  20                 	db	32
  1120  00FDC0  20                 	db	32
  1121  00FDC1  20                 	db	32
  1122  00FDC2  20                 	db	32
  1123  00FDC3  20                 	db	32
  1124  00FDC4  3C                 	db	60	;'<'
  1125  00FDC5  00                 	db	0
  1126  00FDC6                     STR_34:
  1127  00FDC6  32                 	db	50	;'2'
  1128  00FDC7  2E                 	db	46
  1129  00FDC8  20                 	db	32
  1130  00FDC9  53                 	db	83	;'S'
  1131  00FDCA  4F                 	db	79	;'O'
  1132  00FDCB  52                 	db	82	;'R'
  1133  00FDCC  54                 	db	84	;'T'
  1134  00FDCD  20                 	db	32
  1135  00FDCE  20                 	db	32
  1136  00FDCF  20                 	db	32
  1137  00FDD0  20                 	db	32
  1138  00FDD1  20                 	db	32
  1139  00FDD2  20                 	db	32
  1140  00FDD3  20                 	db	32
  1141  00FDD4  20                 	db	32
  1142  00FDD5  3C                 	db	60	;'<'
  1143  00FDD6  00                 	db	0
  1144  00FDD7                     STR_31:
  1145  00FDD7  31                 	db	49	;'1'
  1146  00FDD8  2E                 	db	46
  1147  00FDD9  20                 	db	32
  1148  00FDDA  44                 	db	68	;'D'
  1149  00FDDB  41                 	db	65	;'A'
  1150  00FDDC  54                 	db	84	;'T'
  1151  00FDDD  45                 	db	69	;'E'
  1152  00FDDE  2F                 	db	47
  1153  00FDDF  54                 	db	84	;'T'
  1154  00FDE0  49                 	db	73	;'I'
  1155  00FDE1  4D                 	db	77	;'M'
  1156  00FDE2  45                 	db	69	;'E'
  1157  00FDE3  20                 	db	32
  1158  00FDE4  20                 	db	32
  1159  00FDE5  20                 	db	32
  1160  00FDE6  3C                 	db	60	;'<'
  1161  00FDE7  00                 	db	0
  1162  00FDE8                     STR_6:
  1163  00FDE8  50                 	db	80	;'P'
  1164  00FDE9  41                 	db	65	;'A'
  1165  00FDEA  55                 	db	85	;'U'
  1166  00FDEB  53                 	db	83	;'S'
  1167  00FDEC  45                 	db	69	;'E'
  1168  00FDED  20                 	db	32
  1169  00FDEE  3C                 	db	60	;'<'
  1170  00FDEF  20                 	db	32
  1171  00FDF0  7C                 	db	124
  1172  00FDF1  20                 	db	32
  1173  00FDF2  42                 	db	66	;'B'
  1174  00FDF3  41                 	db	65	;'A'
  1175  00FDF4  43                 	db	67	;'C'
  1176  00FDF5  4B                 	db	75	;'K'
  1177  00FDF6  20                 	db	32
  1178  00FDF7  3E                 	db	62	;'>'
  1179  00FDF8  00                 	db	0
  1180  00FDF9                     STR_30:
  1181  00FDF9  50                 	db	80	;'P'
  1182  00FDFA  55                 	db	85	;'U'
  1183  00FDFB  53                 	db	83	;'S'
  1184  00FDFC  48                 	db	72	;'H'
  1185  00FDFD  20                 	db	32
  1186  00FDFE  54                 	db	84	;'T'
  1187  00FDFF  4F                 	db	79	;'O'
  1188  00FE00  20                 	db	32
  1189  00FE01  43                 	db	67	;'C'
  1190  00FE02  4F                 	db	79	;'O'
  1191  00FE03  4E                 	db	78	;'N'
  1192  00FE04  54                 	db	84	;'T'
  1193  00FE05  49                 	db	73	;'I'
  1194  00FE06  4E                 	db	78	;'N'
  1195  00FE07  55                 	db	85	;'U'
  1196  00FE08  45                 	db	69	;'E'
  1197  00FE09  00                 	db	0
  1198  00FE0A                     STR_27:
  1199  00FE0A  4E                 	db	78	;'N'
  1200  00FE0B  4C                 	db	76	;'L'
  1201  00FE0C  41                 	db	65	;'A'
  1202  00FE0D  42                 	db	66	;'B'
  1203  00FE0E  3A                 	db	58	;':'
  1204  00FE0F  20                 	db	32
  1205  00FE10  25                 	db	37
  1206  00FE11  64                 	db	100	;'d'
  1207  00FE12  7C                 	db	124
  1208  00FE13  4C                 	db	76	;'L'
  1209  00FE14  41                 	db	65	;'A'
  1210  00FE15  42                 	db	66	;'B'
  1211  00FE16  3A                 	db	58	;':'
  1212  00FE17  20                 	db	32
  1213  00FE18  25                 	db	37
  1214  00FE19  64                 	db	100	;'d'
  1215  00FE1A  00                 	db	0
  1216  00FE1B                     STR_25:
  1217  00FE1B  4E                 	db	78	;'N'
  1218  00FE1C  54                 	db	84	;'T'
  1219  00FE1D  41                 	db	65	;'A'
  1220  00FE1E  42                 	db	66	;'B'
  1221  00FE1F  3A                 	db	58	;':'
  1222  00FE20  20                 	db	32
  1223  00FE21  25                 	db	37
  1224  00FE22  64                 	db	100	;'d'
  1225  00FE23  7C                 	db	124
  1226  00FE24  54                 	db	84	;'T'
  1227  00FE25  41                 	db	65	;'A'
  1228  00FE26  42                 	db	66	;'B'
  1229  00FE27  3A                 	db	58	;':'
  1230  00FE28  20                 	db	32
  1231  00FE29  25                 	db	37
  1232  00FE2A  64                 	db	100	;'d'
  1233  00FE2B  00                 	db	0
  1234  00FE2C                     STR_85:
  1235  00FE2C  4D                 	db	77	;'M'
  1236  00FE2D  41                 	db	65	;'A'
  1237  00FE2E  47                 	db	71	;'G'
  1238  00FE2F  5F                 	db	95	;'_'
  1239  00FE30  73                 	db	115	;'s'
  1240  00FE31  69                 	db	105	;'i'
  1241  00FE32  67                 	db	103	;'g'
  1242  00FE33  6E                 	db	110	;'n'
  1243  00FE34  61                 	db	97	;'a'
  1244  00FE35  6C                 	db	108	;'l'
  1245  00FE36  3A                 	db	58	;':'
  1246  00FE37  20                 	db	32
  1247  00FE38  25                 	db	37
  1248  00FE39  64                 	db	100	;'d'
  1249  00FE3A  20                 	db	32
  1250  00FE3B  00                 	db	0
  1251  00FE3C                     STR_105:
  1252  00FE3C  54                 	db	84	;'T'
  1253  00FE3D  53                 	db	83	;'S'
  1254  00FE3E  54                 	db	84	;'T'
  1255  00FE3F  3A                 	db	58	;':'
  1256  00FE40  20                 	db	32
  1257  00FE41  54                 	db	84	;'T'
  1258  00FE42  49                 	db	73	;'I'
  1259  00FE43  4C                 	db	76	;'L'
  1260  00FE44  54                 	db	84	;'T'
  1261  00FE45  20                 	db	32
  1262  00FE46  53                 	db	83	;'S'
  1263  00FE47  45                 	db	69	;'E'
  1264  00FE48  52                 	db	82	;'R'
  1265  00FE49  56                 	db	86	;'V'
  1266  00FE4A  4F                 	db	79	;'O'
  1267  00FE4B  00                 	db	0
  1268  00FE4C                     STR_4:
  1269  00FE4C  44                 	db	68	;'D'
  1270  00FE4D  49                 	db	73	;'I'
  1271  00FE4E  44                 	db	68	;'D'
  1272  00FE4F  4E                 	db	78	;'N'
  1273  00FE50  27                 	db	39
  1274  00FE51  54                 	db	84	;'T'
  1275  00FE52  20                 	db	32
  1276  00FE53  43                 	db	67	;'C'
  1277  00FE54  4F                 	db	79	;'O'
  1278  00FE55  4D                 	db	77	;'M'
  1279  00FE56  50                 	db	80	;'P'
  1280  00FE57  4C                 	db	76	;'L'
  1281  00FE58  45                 	db	69	;'E'
  1282  00FE59  54                 	db	84	;'T'
  1283  00FE5A  45                 	db	69	;'E'
  1284  00FE5B  00                 	db	0
  1285  00FE5C                     STR_82:
  1286  00FE5C  49                 	db	73	;'I'
  1287  00FE5D  52                 	db	82	;'R'
  1288  00FE5E  5F                 	db	95	;'_'
  1289  00FE5F  73                 	db	115	;'s'
  1290  00FE60  69                 	db	105	;'i'
  1291  00FE61  67                 	db	103	;'g'
  1292  00FE62  6E                 	db	110	;'n'
  1293  00FE63  61                 	db	97	;'a'
  1294  00FE64  6C                 	db	108	;'l'
  1295  00FE65  3A                 	db	58	;':'
  1296  00FE66  20                 	db	32
  1297  00FE67  25                 	db	37
  1298  00FE68  64                 	db	100	;'d'
  1299  00FE69  20                 	db	32
  1300  00FE6A  00                 	db	0
  1301  00FE6B                     STR_111:
  1302  00FE6B  43                 	db	67	;'C'
  1303  00FE6C  41                 	db	65	;'A'
  1304  00FE6D  4D                 	db	77	;'M'
  1305  00FE6E  20                 	db	32
  1306  00FE6F  44                 	db	68	;'D'
  1307  00FE70  57                 	db	87	;'W'
  1308  00FE71  4E                 	db	78	;'N'
  1309  00FE72  20                 	db	32
  1310  00FE73  7C                 	db	124
  1311  00FE74  52                 	db	82	;'R'
  1312  00FE75  43                 	db	67	;'C'
  1313  00FE76  30                 	db	48	;'0'
  1314  00FE77  3D                 	db	61	;'='
  1315  00FE78  30                 	db	48	;'0'
  1316  00FE79  00                 	db	0
  1317  00FE7A                     STR_110:
  1318  00FE7A  43                 	db	67	;'C'
  1319  00FE7B  41                 	db	65	;'A'
  1320  00FE7C  4D                 	db	77	;'M'
  1321  00FE7D  20                 	db	32
  1322  00FE7E  55                 	db	85	;'U'
  1323  00FE7F  50                 	db	80	;'P'
  1324  00FE80  20                 	db	32
  1325  00FE81  20                 	db	32
  1326  00FE82  7C                 	db	124
  1327  00FE83  52                 	db	82	;'R'
  1328  00FE84  43                 	db	67	;'C'
  1329  00FE85  30                 	db	48	;'0'
  1330  00FE86  3D                 	db	61	;'='
  1331  00FE87  31                 	db	49	;'1'
  1332  00FE88  00                 	db	0
  1333  00FE89                     STR_84:
  1334  00FE89  54                 	db	84	;'T'
  1335  00FE8A  53                 	db	83	;'S'
  1336  00FE8B  54                 	db	84	;'T'
  1337  00FE8C  3A                 	db	58	;':'
  1338  00FE8D  20                 	db	32
  1339  00FE8E  4D                 	db	77	;'M'
  1340  00FE8F  41                 	db	65	;'A'
  1341  00FE90  47                 	db	71	;'G'
  1342  00FE91  4E                 	db	78	;'N'
  1343  00FE92  45                 	db	69	;'E'
  1344  00FE93  54                 	db	84	;'T'
  1345  00FE94  49                 	db	73	;'I'
  1346  00FE95  53                 	db	83	;'S'
  1347  00FE96  4D                 	db	77	;'M'
  1348  00FE97  00                 	db	0
  1349  00FE98                     STR_109:
  1350  00FE98  54                 	db	84	;'T'
  1351  00FE99  53                 	db	83	;'S'
  1352  00FE9A  54                 	db	84	;'T'
  1353  00FE9B  3A                 	db	58	;':'
  1354  00FE9C  20                 	db	32
  1355  00FE9D  43                 	db	67	;'C'
  1356  00FE9E  41                 	db	65	;'A'
  1357  00FE9F  4D                 	db	77	;'M'
  1358  00FEA0  20                 	db	32
  1359  00FEA1  53                 	db	83	;'S'
  1360  00FEA2  45                 	db	69	;'E'
  1361  00FEA3  52                 	db	82	;'R'
  1362  00FEA4  56                 	db	86	;'V'
  1363  00FEA5  4F                 	db	79	;'O'
  1364  00FEA6  00                 	db	0
  1365  00FEA7                     STR_98:
  1366  00FEA7  54                 	db	84	;'T'
  1367  00FEA8  53                 	db	83	;'S'
  1368  00FEA9  54                 	db	84	;'T'
  1369  00FEAA  3A                 	db	58	;':'
  1370  00FEAB  20                 	db	32
  1371  00FEAC  50                 	db	80	;'P'
  1372  00FEAD  41                 	db	65	;'A'
  1373  00FEAE  4E                 	db	78	;'N'
  1374  00FEAF  20                 	db	32
  1375  00FEB0  53                 	db	83	;'S'
  1376  00FEB1  45                 	db	69	;'E'
  1377  00FEB2  52                 	db	82	;'R'
  1378  00FEB3  56                 	db	86	;'V'
  1379  00FEB4  4F                 	db	79	;'O'
  1380  00FEB5  00                 	db	0
  1381  00FEB6                     STR_77:
  1382  00FEB6  41                 	db	65	;'A'
  1383  00FEB7  4C                 	db	76	;'L'
  1384  00FEB8  47                 	db	71	;'G'
  1385  00FEB9  34                 	db	52	;'4'
  1386  00FEBA  3A                 	db	58	;':'
  1387  00FEBB  20                 	db	32
  1388  00FEBC  41                 	db	65	;'A'
  1389  00FEBD  4C                 	db	76	;'L'
  1390  00FEBE  4C                 	db	76	;'L'
  1391  00FEBF  20                 	db	32
  1392  00FEC0  43                 	db	67	;'C'
  1393  00FEC1  41                 	db	65	;'A'
  1394  00FEC2  4E                 	db	78	;'N'
  1395  00FEC3  53                 	db	83	;'S'
  1396  00FEC4  00                 	db	0
  1397  00FEC5                     STR_92:
  1398  00FEC5  54                 	db	84	;'T'
  1399  00FEC6  53                 	db	83	;'S'
  1400  00FEC7  54                 	db	84	;'T'
  1401  00FEC8  3A                 	db	58	;':'
  1402  00FEC9  20                 	db	32
  1403  00FECA  44                 	db	68	;'D'
  1404  00FECB  43                 	db	67	;'C'
  1405  00FECC  20                 	db	32
  1406  00FECD  4D                 	db	77	;'M'
  1407  00FECE  4F                 	db	79	;'O'
  1408  00FECF  54                 	db	84	;'T'
  1409  00FED0  4F                 	db	79	;'O'
  1410  00FED1  52                 	db	82	;'R'
  1411  00FED2  53                 	db	83	;'S'
  1412  00FED3  00                 	db	0
  1413  00FED4                     STR_72:
  1414  00FED4  41                 	db	65	;'A'
  1415  00FED5  4C                 	db	76	;'L'
  1416  00FED6  47                 	db	71	;'G'
  1417  00FED7  4F                 	db	79	;'O'
  1418  00FED8  52                 	db	82	;'R'
  1419  00FED9  49                 	db	73	;'I'
  1420  00FEDA  54                 	db	84	;'T'
  1421  00FEDB  48                 	db	72	;'H'
  1422  00FEDC  4D                 	db	77	;'M'
  1423  00FEDD  20                 	db	32
  1424  00FEDE  54                 	db	84	;'T'
  1425  00FEDF  45                 	db	69	;'E'
  1426  00FEE0  53                 	db	83	;'S'
  1427  00FEE1  54                 	db	84	;'T'
  1428  00FEE2  00                 	db	0
  1429  00FEE3                     STR_93:
  1430  00FEE3  50                 	db	80	;'P'
  1431  00FEE4  49                 	db	73	;'I'
  1432  00FEE5  4E                 	db	78	;'N'
  1433  00FEE6  20                 	db	32
  1434  00FEE7  52                 	db	82	;'R'
  1435  00FEE8  41                 	db	65	;'A'
  1436  00FEE9  35                 	db	53	;'5'
  1437  00FEEA  20                 	db	32
  1438  00FEEB  48                 	db	72	;'H'
  1439  00FEEC  49                 	db	73	;'I'
  1440  00FEED  47                 	db	71	;'G'
  1441  00FEEE  48                 	db	72	;'H'
  1442  00FEEF  2E                 	db	46
  1443  00FEF0  00                 	db	0
  1444  00FEF1                     STR_75:
  1445  00FEF1  41                 	db	65	;'A'
  1446  00FEF2  4C                 	db	76	;'L'
  1447  00FEF3  47                 	db	71	;'G'
  1448  00FEF4  32                 	db	50	;'2'
  1449  00FEF5  3A                 	db	58	;':'
  1450  00FEF6  20                 	db	32
  1451  00FEF7  31                 	db	49	;'1'
  1452  00FEF8  32                 	db	50	;'2'
  1453  00FEF9  20                 	db	32
  1454  00FEFA  43                 	db	67	;'C'
  1455  00FEFB  41                 	db	65	;'A'
  1456  00FEFC  4E                 	db	78	;'N'
  1457  00FEFD  53                 	db	83	;'S'
  1458  00FEFE  00                 	db	0
  1459  00FEFF                     STR_78:
  1460  00FEFF  41                 	db	65	;'A'
  1461  00FF00  4C                 	db	76	;'L'
  1462  00FF01  47                 	db	71	;'G'
  1463  00FF02  35                 	db	53	;'5'
  1464  00FF03  3A                 	db	58	;':'
  1465  00FF04  20                 	db	32
  1466  00FF05  4E                 	db	78	;'N'
  1467  00FF06  4F                 	db	79	;'O'
  1468  00FF07  20                 	db	32
  1469  00FF08  43                 	db	67	;'C'
  1470  00FF09  41                 	db	65	;'A'
  1471  00FF0A  4E                 	db	78	;'N'
  1472  00FF0B  53                 	db	83	;'S'
  1473  00FF0C  00                 	db	0
  1474  00FF0D                     STR_73:
  1475  00FF0D  50                 	db	80	;'P'
  1476  00FF0E  55                 	db	85	;'U'
  1477  00FF0F  53                 	db	83	;'S'
  1478  00FF10  48                 	db	72	;'H'
  1479  00FF11  20                 	db	32
  1480  00FF12  54                 	db	84	;'T'
  1481  00FF13  4F                 	db	79	;'O'
  1482  00FF14  20                 	db	32
  1483  00FF15  53                 	db	83	;'S'
  1484  00FF16  54                 	db	84	;'T'
  1485  00FF17  41                 	db	65	;'A'
  1486  00FF18  52                 	db	82	;'R'
  1487  00FF19  54                 	db	84	;'T'
  1488  00FF1A  00                 	db	0
  1489  00FF1B                     STR_23:
  1490  00FF1B  25                 	db	37
  1491  00FF1C  64                 	db	100	;'d'
  1492  00FF1D  20                 	db	32
  1493  00FF1E  4D                 	db	77	;'M'
  1494  00FF1F  49                 	db	73	;'I'
  1495  00FF20  4E                 	db	78	;'N'
  1496  00FF21  20                 	db	32
  1497  00FF22  25                 	db	37
  1498  00FF23  64                 	db	100	;'d'
  1499  00FF24  20                 	db	32
  1500  00FF25  53                 	db	83	;'S'
  1501  00FF26  45                 	db	69	;'E'
  1502  00FF27  43                 	db	67	;'C'
  1503  00FF28  00                 	db	0
  1504  00FF29                     STR_2:
  1505  00FF29  54                 	db	84	;'T'
  1506  00FF2A  49                 	db	73	;'I'
  1507  00FF2B  4D                 	db	77	;'M'
  1508  00FF2C  45                 	db	69	;'E'
  1509  00FF2D  3A                 	db	58	;':'
  1510  00FF2E  20                 	db	32
  1511  00FF2F  25                 	db	37
  1512  00FF30  64                 	db	100	;'d'
  1513  00FF31  3A                 	db	58	;':'
  1514  00FF32  25                 	db	37
  1515  00FF33  30                 	db	48	;'0'
  1516  00FF34  32                 	db	50	;'2'
  1517  00FF35  64                 	db	100	;'d'
  1518  00FF36  00                 	db	0
  1519  00FF37                     STR_81:
  1520  00FF37  54                 	db	84	;'T'
  1521  00FF38  53                 	db	83	;'S'
  1522  00FF39  54                 	db	84	;'T'
  1523  00FF3A  3A                 	db	58	;':'
  1524  00FF3B  20                 	db	32
  1525  00FF3C  49                 	db	73	;'I'
  1526  00FF3D  52                 	db	82	;'R'
  1527  00FF3E  20                 	db	32
  1528  00FF3F  53                 	db	83	;'S'
  1529  00FF40  4E                 	db	78	;'N'
  1530  00FF41  53                 	db	83	;'S'
  1531  00FF42  52                 	db	82	;'R'
  1532  00FF43  00                 	db	0
  1533  00FF44                     STR_67:
  1534  00FF44  54                 	db	84	;'T'
  1535  00FF45  49                 	db	73	;'I'
  1536  00FF46  4D                 	db	77	;'M'
  1537  00FF47  45                 	db	69	;'E'
  1538  00FF48  20                 	db	32
  1539  00FF49  25                 	db	37
  1540  00FF4A  64                 	db	100	;'d'
  1541  00FF4B  3A                 	db	58	;':'
  1542  00FF4C  25                 	db	37
  1543  00FF4D  30                 	db	48	;'0'
  1544  00FF4E  32                 	db	50	;'2'
  1545  00FF4F  64                 	db	100	;'d'
  1546  00FF50  00                 	db	0
  1547  00FF51                     STR_76:
  1548  00FF51  41                 	db	65	;'A'
  1549  00FF52  4C                 	db	76	;'L'
  1550  00FF53  47                 	db	71	;'G'
  1551  00FF54  33                 	db	51	;'3'
  1552  00FF55  3A                 	db	58	;':'
  1553  00FF56  20                 	db	32
  1554  00FF57  31                 	db	49	;'1'
  1555  00FF58  20                 	db	32
  1556  00FF59  43                 	db	67	;'C'
  1557  00FF5A  41                 	db	65	;'A'
  1558  00FF5B  4E                 	db	78	;'N'
  1559  00FF5C  00                 	db	0
  1560  00FF5D                     STR_95:
  1561  00FF5D  50                 	db	80	;'P'
  1562  00FF5E  49                 	db	73	;'I'
  1563  00FF5F  4E                 	db	78	;'N'
  1564  00FF60  20                 	db	32
  1565  00FF61  52                 	db	82	;'R'
  1566  00FF62  41                 	db	65	;'A'
  1567  00FF63  33                 	db	51	;'3'
  1568  00FF64  2E                 	db	46
  1569  00FF65  2E                 	db	46
  1570  00FF66  2E                 	db	46
  1571  00FF67  00                 	db	0
  1572  00FF68                     STR_97:
  1573  00FF68  50                 	db	80	;'P'
  1574  00FF69  49                 	db	73	;'I'
  1575  00FF6A  4E                 	db	78	;'N'
  1576  00FF6B  20                 	db	32
  1577  00FF6C  52                 	db	82	;'R'
  1578  00FF6D  41                 	db	65	;'A'
  1579  00FF6E  34                 	db	52	;'4'
  1580  00FF6F  2E                 	db	46
  1581  00FF70  2E                 	db	46
  1582  00FF71  2E                 	db	46
  1583  00FF72  00                 	db	0
  1584  00FF73                     STR_66:
  1585  00FF73  53                 	db	83	;'S'
  1586  00FF74  4F                 	db	79	;'O'
  1587  00FF75  52                 	db	82	;'R'
  1588  00FF76  54                 	db	84	;'T'
  1589  00FF77  49                 	db	73	;'I'
  1590  00FF78  4E                 	db	78	;'N'
  1591  00FF79  47                 	db	71	;'G'
  1592  00FF7A  2E                 	db	46
  1593  00FF7B  2E                 	db	46
  1594  00FF7C  2E                 	db	46
  1595  00FF7D  00                 	db	0
  1596  00FF7E                     STR_86:
  1597  00FF7E  54                 	db	84	;'T'
  1598  00FF7F  53                 	db	83	;'S'
  1599  00FF80  54                 	db	84	;'T'
  1600  00FF81  3A                 	db	58	;':'
  1601  00FF82  20                 	db	32
  1602  00FF83  43                 	db	67	;'C'
  1603  00FF84  4F                 	db	79	;'O'
  1604  00FF85  4E                 	db	78	;'N'
  1605  00FF86  44                 	db	68	;'D'
  1606  00FF87  00                 	db	0
  1607  00FF88                     STR_90:
  1608  00FF88  41                 	db	65	;'A'
  1609  00FF89  43                 	db	67	;'C'
  1610  00FF8A  54                 	db	84	;'T'
  1611  00FF8B  55                 	db	85	;'U'
  1612  00FF8C  41                 	db	65	;'A'
  1613  00FF8D  54                 	db	84	;'T'
  1614  00FF8E  4F                 	db	79	;'O'
  1615  00FF8F  52                 	db	82	;'R'
  1616  00FF90  53                 	db	83	;'S'
  1617  00FF91  00                 	db	0
  1618  00FF92                     STR_22:
  1619  00FF92  44                 	db	68	;'D'
  1620  00FF93  55                 	db	85	;'U'
  1621  00FF94  52                 	db	82	;'R'
  1622  00FF95  41                 	db	65	;'A'
  1623  00FF96  54                 	db	84	;'T'
  1624  00FF97  49                 	db	73	;'I'
  1625  00FF98  4F                 	db	79	;'O'
  1626  00FF99  4E                 	db	78	;'N'
  1627  00FF9A  3A                 	db	58	;':'
  1628  00FF9B  00                 	db	0
  1629  00FF9C                     STR_88:
  1630  00FF9C  43                 	db	67	;'C'
  1631  00FF9D  4F                 	db	79	;'O'
  1632  00FF9E  4E                 	db	78	;'N'
  1633  00FF9F  44                 	db	68	;'D'
  1634  00FFA0  3A                 	db	58	;':'
  1635  00FFA1  20                 	db	32
  1636  00FFA2  25                 	db	37
  1637  00FFA3  64                 	db	100	;'d'
  1638  00FFA4  00                 	db	0
  1639  00FFA5                     STR_79:
  1640  00FFA5  53                 	db	83	;'S'
  1641  00FFA6  45                 	db	69	;'E'
  1642  00FFA7  4E                 	db	78	;'N'
  1643  00FFA8  53                 	db	83	;'S'
  1644  00FFA9  4F                 	db	79	;'O'
  1645  00FFAA  52                 	db	82	;'R'
  1646  00FFAB  53                 	db	83	;'S'
  1647  00FFAC  00                 	db	0
  1648  00FFAD                     STR_65:
  1649  00FFAD  6F                 	db	111	;'o'
  1650  00FFAE  75                 	db	117	;'u'
  1651  00FFAF  74                 	db	116	;'t'
  1652  00FFB0  3A                 	db	58	;':'
  1653  00FFB1  20                 	db	32
  1654  00FFB2  25                 	db	37
  1655  00FFB3  64                 	db	100	;'d'
  1656  00FFB4  00                 	db	0
  1657  00FFB5                     STR_132:
  1658  00FFB5  28                 	db	40
  1659  00FFB6  6E                 	db	110	;'n'
  1660  00FFB7  75                 	db	117	;'u'
  1661  00FFB8  6C                 	db	108	;'l'
  1662  00FFB9  6C                 	db	108	;'l'
  1663  00FFBA  29                 	db	41
  1664  00FFBB  00                 	db	0
  1665  00FFBC                     STR_69:
  1666  00FFBC  46                 	db	70	;'F'
  1667  00FFBD  41                 	db	65	;'A'
  1668  00FFBE  49                 	db	73	;'I'
  1669  00FFBF  4C                 	db	76	;'L'
  1670  00FFC0  45                 	db	69	;'E'
  1671  00FFC1  44                 	db	68	;'D'
  1672  00FFC2  00                 	db	0
  1673  00FFC3                     STR_7:
  1674  00FFC3  53                 	db	83	;'S'
  1675  00FFC4  54                 	db	84	;'T'
  1676  00FFC5  41                 	db	65	;'A'
  1677  00FFC6  52                 	db	82	;'R'
  1678  00FFC7  54                 	db	84	;'T'
  1679  00FFC8  3A                 	db	58	;':'
  1680  00FFC9  00                 	db	0
  1681  00FFCA                     STR_9:
  1682  00FFCA  46                 	db	70	;'F'
  1683  00FFCB  45                 	db	69	;'E'
  1684  00FFCC  42                 	db	66	;'B'
  1685  00FFCD  00                 	db	0
  1686  00FFCE                     STR_19:
  1687  00FFCE  44                 	db	68	;'D'
  1688  00FFCF  45                 	db	69	;'E'
  1689  00FFD0  43                 	db	67	;'C'
  1690  00FFD1  00                 	db	0
  1691  00FFD2                     STR_15:
  1692  00FFD2  41                 	db	65	;'A'
  1693  00FFD3  55                 	db	85	;'U'
  1694  00FFD4  47                 	db	71	;'G'
  1695  00FFD5  00                 	db	0
  1696  00FFD6                     STR_14:
  1697  00FFD6  4A                 	db	74	;'J'
  1698  00FFD7  55                 	db	85	;'U'
  1699  00FFD8  4C                 	db	76	;'L'
  1700  00FFD9  00                 	db	0
  1701  00FFDA                     STR_8:
  1702  00FFDA  4A                 	db	74	;'J'
  1703  00FFDB  41                 	db	65	;'A'
  1704  00FFDC  4E                 	db	78	;'N'
  1705  00FFDD  00                 	db	0
  1706  00FFDE                     STR_13:
  1707  00FFDE  4A                 	db	74	;'J'
  1708  00FFDF  55                 	db	85	;'U'
  1709  00FFE0  4E                 	db	78	;'N'
  1710  00FFE1  00                 	db	0
  1711  00FFE2                     STR_16:
  1712  00FFE2  53                 	db	83	;'S'
  1713  00FFE3  45                 	db	69	;'E'
  1714  00FFE4  50                 	db	80	;'P'
  1715  00FFE5  00                 	db	0
  1716  00FFE6                     STR_10:
  1717  00FFE6  4D                 	db	77	;'M'
  1718  00FFE7  41                 	db	65	;'A'
  1719  00FFE8  52                 	db	82	;'R'
  1720  00FFE9  00                 	db	0
  1721  00FFEA                     STR_11:
  1722  00FFEA  41                 	db	65	;'A'
  1723  00FFEB  50                 	db	80	;'P'
  1724  00FFEC  52                 	db	82	;'R'
  1725  00FFED  00                 	db	0
  1726  00FFEE                     STR_20:
  1727  00FFEE  45                 	db	69	;'E'
  1728  00FFEF  52                 	db	82	;'R'
  1729  00FFF0  52                 	db	82	;'R'
  1730  00FFF1  00                 	db	0
  1731  00FFF2                     STR_17:
  1732  00FFF2  4F                 	db	79	;'O'
  1733  00FFF3  43                 	db	67	;'C'
  1734  00FFF4  54                 	db	84	;'T'
  1735  00FFF5  00                 	db	0
  1736  00FFF6                     STR_18:
  1737  00FFF6  4E                 	db	78	;'N'
  1738  00FFF7  4F                 	db	79	;'O'
  1739  00FFF8  56                 	db	86	;'V'
  1740  00FFF9  00                 	db	0
  1741  00FFFA                     STR_12:
  1742  00FFFA  4D                 	db	77	;'M'
  1743  00FFFB  41                 	db	65	;'A'
  1744  00FFFC  59                 	db	89	;'Y'
  1745  00FFFD  00                 	db	0
  1746  0000                     
  1747                           ; #config settings
  1748  00FFFE  00                 	db	0	; dummy byte at the end
  1749  0000                     
  1750                           	psect	cinit
  1751  0053EE                     __pcinit:
  1752                           	opt stack 0
  1753  0053EE                     start_initialization:
  1754                           	opt stack 0
  1755  0053EE                     __initialization:
  1756                           	opt stack 0
  1757                           
  1758                           ; Initialize objects allocated to BANK1 (8 bytes)
  1759                           ; load TBLPTR registers with __pidataBANK1
  1760  0053EE  0ED2               	movlw	low __pidataBANK1
  1761  0053F0  6EF6               	movwf	tblptrl,c
  1762  0053F2  0E5B               	movlw	high __pidataBANK1
  1763  0053F4  6EF7               	movwf	tblptrh,c
  1764  0053F6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1765  0053F8  6EF8               	movwf	tblptru,c
  1766  0053FA  EE01  F047         	lfsr	0,__pdataBANK1
  1767  0053FE  EE10 F008          	lfsr	1,8
  1768  005402                     copy_data0:
  1769  005402  0009               	tblrd		*+
  1770  005404  CFF5 FFEE          	movff	tablat,postinc0
  1771  005408  50E5               	movf	postdec1,w,c
  1772  00540A  50E1               	movf	fsr1l,w,c
  1773  00540C  E1FA               	bnz	copy_data0
  1774                           
  1775                           ; Clear objects allocated to BANK1 (71 bytes)
  1776  00540E  EE01  F000         	lfsr	0,__pbssBANK1
  1777  005412  0E47               	movlw	71
  1778  005414                     clear_0:
  1779  005414  6AEE               	clrf	postinc0,c
  1780  005416  06E8               	decf	wreg,f,c
  1781  005418  E1FD               	bnz	clear_0
  1782                           
  1783                           ; Clear objects allocated to BANK0 (38 bytes)
  1784  00541A  EE00  F0DA         	lfsr	0,__pbssBANK0
  1785  00541E  0E26               	movlw	38
  1786  005420                     clear_1:
  1787  005420  6AEE               	clrf	postinc0,c
  1788  005422  06E8               	decf	wreg,f,c
  1789  005424  E1FD               	bnz	clear_1
  1790                           
  1791                           ; Clear objects allocated to COMRAM (35 bytes)
  1792  005426  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1793  00542A  0E23               	movlw	35
  1794  00542C                     clear_2:
  1795  00542C  6AEE               	clrf	postinc0,c
  1796  00542E  06E8               	decf	wreg,f,c
  1797  005430  E1FD               	bnz	clear_2
  1798  005432                     end_of_initialization:
  1799                           	opt stack 0
  1800  005432                     __end_of__initialization:
  1801                           	opt stack 0
  1802  005432  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1803  005434  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1804  005436  0100               	movlb	0
  1805  005438  EF28  F024         	goto	_main	;jump to C main() function
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssCOMRAM
  1816  00005B                     __pbssCOMRAM:
  1817                           	opt stack 0
  1818  00005B                     _back:
  1819                           	opt stack 0
  1820  00005B                     	ds	2
  1821  00005D                     _down:
  1822                           	opt stack 0
  1823  00005D                     	ds	2
  1824  00005F                     _enter:
  1825                           	opt stack 0
  1826  00005F                     	ds	2
  1827  000061                     _f_panning_to_bin:
  1828                           	opt stack 0
  1829  000061                     	ds	2
  1830  000063                     _log_completion:
  1831                           	opt stack 0
  1832  000063                     	ds	2
  1833  000065                     _log_count_pop_no_tab:
  1834                           	opt stack 0
  1835  000065                     	ds	2
  1836  000067                     _log_count_pop_w_tab:
  1837                           	opt stack 0
  1838  000067                     	ds	2
  1839  000069                     _most_recent_sort_time:
  1840                           	opt stack 0
  1841  000069                     	ds	2
  1842  00006B                     _pan_servo_state:
  1843                           	opt stack 0
  1844  00006B                     	ds	2
  1845  00006D                     _servo_timer_counter:
  1846                           	opt stack 0
  1847  00006D                     	ds	2
  1848  00006F                     _servo_timer_target:
  1849                           	opt stack 0
  1850  00006F                     	ds	2
  1851  000071                     _tilt_servo_state:
  1852                           	opt stack 0
  1853  000071                     	ds	2
  1854  000073                     _timer2_counter:
  1855                           	opt stack 0
  1856  000073                     	ds	2
  1857  000075                     _up:
  1858                           	opt stack 0
  1859  000075                     	ds	2
  1860  000077                     _was_low_1:
  1861                           	opt stack 0
  1862  000077                     	ds	2
  1863  000079                     _was_low_2:
  1864                           	opt stack 0
  1865  000079                     	ds	2
  1866  00007B                     _was_low_3:
  1867                           	opt stack 0
  1868  00007B                     	ds	2
  1869  00007D                     _input:
  1870                           	opt stack 0
  1871  00007D                     	ds	1
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           
  1881                           	psect	bssBANK0
  1882  0000DA                     __pbssBANK0:
  1883                           	opt stack 0
  1884  0000DA                     _servoTimes:
  1885                           	opt stack 0
  1886  0000DA                     	ds	8
  1887  0000E2                     _sensor_outputs:
  1888                           	opt stack 0
  1889  0000E2                     	ds	4
  1890  0000E6                     _IR_signal:
  1891                           	opt stack 0
  1892  0000E6                     	ds	2
  1893  0000E8                     _MAG_signal:
  1894                           	opt stack 0
  1895  0000E8                     	ds	2
  1896  0000EA                     _RTCflag:
  1897                           	opt stack 0
  1898  0000EA                     	ds	2
  1899  0000EC                     _cur_state:
  1900                           	opt stack 0
  1901  0000EC                     	ds	2
  1902  0000EE                     _f_arm_position:
  1903                           	opt stack 0
  1904  0000EE                     	ds	2
  1905  0000F0                     _f_lastCan:
  1906                           	opt stack 0
  1907  0000F0                     	ds	2
  1908  0000F2                     _f_loadingNewCan:
  1909                           	opt stack 0
  1910  0000F2                     	ds	2
  1911  0000F4                     _log:
  1912                           	opt stack 0
  1913  0000F4                     	ds	2
  1914  0000F6                     _log_total_time:
  1915                           	opt stack 0
  1916  0000F6                     	ds	2
  1917  0000F8                     _logstate:
  1918                           	opt stack 0
  1919  0000F8                     	ds	2
  1920  0000FA                     _total_time:
  1921                           	opt stack 0
  1922  0000FA                     	ds	2
  1923  0000FC                     _machine_state:
  1924                           	opt stack 0
  1925  0000FC                     	ds	1
  1926  0000FD                     _sel:
  1927                           	opt stack 0
  1928  0000FD                     	ds	1
  1929  0000FE                     _count_total:
  1930                           	opt stack 0
  1931  0000FE                     	ds	2
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	bssBANK1
  1942  000100                     __pbssBANK1:
  1943                           	opt stack 0
  1944  000100                     _log_startTime:
  1945                           	opt stack 0
  1946  000100                     	ds	14
  1947  00010E                     _startTime:
  1948                           	opt stack 0
  1949  00010E                     	ds	14
  1950  00011C                     _time:
  1951                           	opt stack 0
  1952  00011C                     	ds	7
  1953  000123                     _count_can_no_lab:
  1954                           	opt stack 0
  1955  000123                     	ds	2
  1956  000125                     _count_can_w_lab:
  1957                           	opt stack 0
  1958  000125                     	ds	2
  1959  000127                     _count_pop_no_tab:
  1960                           	opt stack 0
  1961  000127                     	ds	2
  1962  000129                     _count_pop_w_tab:
  1963                           	opt stack 0
  1964  000129                     	ds	2
  1965  00012B                     _cur_can:
  1966                           	opt stack 0
  1967  00012B                     	ds	2
  1968  00012D                     _debug:
  1969                           	opt stack 0
  1970  00012D                     	ds	2
  1971  00012F                     _f_ID_receive:
  1972                           	opt stack 0
  1973  00012F                     	ds	2
  1974  000131                     _f_can_coming_to_ID:
  1975                           	opt stack 0
  1976  000131                     	ds	2
  1977  000133                     _f_can_coming_to_distribution:
  1978                           	opt stack 0
  1979  000133                     	ds	2
  1980  000135                     _f_can_distributed:
  1981                           	opt stack 0
  1982  000135                     	ds	2
  1983  000137                     _f_most_recent_sort_time:
  1984                           	opt stack 0
  1985  000137                     	ds	2
  1986  000139                     _first:
  1987                           	opt stack 0
  1988  000139                     	ds	2
  1989  00013B                     _firstboot:
  1990                           	opt stack 0
  1991  00013B                     	ds	2
  1992  00013D                     _i:
  1993                           	opt stack 0
  1994  00013D                     	ds	2
  1995  00013F                     _log_count_can_no_lab:
  1996                           	opt stack 0
  1997  00013F                     	ds	2
  1998  000141                     _log_count_can_w_lab:
  1999                           	opt stack 0
  2000  000141                     	ds	2
  2001  000143                     _log_count_total:
  2002                           	opt stack 0
  2003  000143                     	ds	2
  2004  000145                     _var:
  2005                           	opt stack 0
  2006  000145                     	ds	2
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           postdec1	equ	0xFE5
  2014                           fsr1l	equ	0xFE1
  2015                           
  2016                           	psect	dataBANK1
  2017  000147                     __pdataBANK1:
  2018                           	opt stack 0
  2019  000147                     UI@F3241:
  2020                           	opt stack 0
  2021  000147                     	ds	4
  2022  00014B                     printRTC@F3231:
  2023                           	opt stack 0
  2024  00014B                     	ds	4
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           
  2034                           	psect	cstackBANK0
  2035  000080                     __pcstackBANK0:
  2036                           	opt stack 0
  2037  000080                     ??_delay_ms:
  2038  000080                     ??_isdigit:
  2039  000080                     ??_readADC:
  2040  000080                     ??_I2C_Master_Wait:
  2041  000080                     ?___wmul:
  2042                           	opt stack 0
  2043  000080                     ?___awmod:
  2044                           	opt stack 0
  2045  000080                     ?___lwdiv:
  2046                           	opt stack 0
  2047  000080                     ?___ftpack:
  2048                           	opt stack 0
  2049  000080                     ?___lldiv:
  2050                           	opt stack 0
  2051  000080                     lcdNibble@temp:
  2052                           	opt stack 0
  2053  000080                     initTime@m:
  2054                           	opt stack 0
  2055  000080                     updateServoPosition@time_us:
  2056                           	opt stack 0
  2057  000080                     EEPROM_read@address:
  2058                           	opt stack 0
  2059  000080                     ___wmul@multiplier:
  2060                           	opt stack 0
  2061  000080                     ___awmod@dividend:
  2062                           	opt stack 0
  2063  000080                     ___lwdiv@dividend:
  2064                           	opt stack 0
  2065  000080                     strcpy@to:
  2066                           	opt stack 0
  2067  000080                     ___ftpack@arg:
  2068                           	opt stack 0
  2069  000080                     ___lldiv@dividend:
  2070                           	opt stack 0
  2071                           
  2072                           ; 4 bytes @ 0x0
  2073  000080                     	ds	1
  2074  000081                     readADC@channel:
  2075                           	opt stack 0
  2076  000081                     I2C_Master_Read@a:
  2077                           	opt stack 0
  2078  000081                     lcdNibble@data:
  2079                           	opt stack 0
  2080  000081                     initTime@h:
  2081                           	opt stack 0
  2082  000081                     delay_ms@milliseconds:
  2083                           	opt stack 0
  2084  000081                     _isdigit$2094:
  2085                           	opt stack 0
  2086  000081                     I2C_Master_Write@d:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x1
  2090  000081                     	ds	1
  2091  000082                     ??_readIR:
  2092  000082                     ??_readMAG:
  2093  000082                     I2C_Master_Read@temp:
  2094                           	opt stack 0
  2095  000082                     lcdInst@data:
  2096                           	opt stack 0
  2097  000082                     putch@data:
  2098                           	opt stack 0
  2099  000082                     initTime@w:
  2100                           	opt stack 0
  2101  000082                     isdigit@c:
  2102                           	opt stack 0
  2103  000082                     updateServoPosition@timer:
  2104                           	opt stack 0
  2105  000082                     ___wmul@multiplicand:
  2106                           	opt stack 0
  2107  000082                     ___awmod@divisor:
  2108                           	opt stack 0
  2109  000082                     ___lwdiv@divisor:
  2110                           	opt stack 0
  2111  000082                     strcpy@from:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2
  2115  000082                     	ds	1
  2116  000083                     ??_initLCD:
  2117  000083                     initTime@DD:
  2118                           	opt stack 0
  2119  000083                     ___ftpack@exp:
  2120                           	opt stack 0
  2121  000083                     getRTC@i:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x3
  2125  000083                     	ds	1
  2126  000084                     ??_updateServoPosition:
  2127  000084                     initTime@MM:
  2128                           	opt stack 0
  2129  000084                     ___awmod@counter:
  2130                           	opt stack 0
  2131  000084                     ___ftpack@sign:
  2132                           	opt stack 0
  2133  000084                     readIR@res:
  2134                           	opt stack 0
  2135  000084                     readMAG@res:
  2136                           	opt stack 0
  2137  000084                     ___wmul@product:
  2138                           	opt stack 0
  2139  000084                     ___lwdiv@quotient:
  2140                           	opt stack 0
  2141  000084                     strcpy@cp:
  2142                           	opt stack 0
  2143  000084                     ___lldiv@divisor:
  2144                           	opt stack 0
  2145                           
  2146                           ; 4 bytes @ 0x4
  2147  000084                     	ds	1
  2148  000085                     ??_initSortTimer:
  2149  000085                     ??___ftpack:
  2150  000085                     initTime@YY:
  2151                           	opt stack 0
  2152  000085                     ___awmod@sign:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x5
  2156  000085                     	ds	1
  2157  000086                     ??_getIR:
  2158  000086                     ??_getMAG:
  2159  000086                     ?___awdiv:
  2160                           	opt stack 0
  2161  000086                     initTime@s:
  2162                           	opt stack 0
  2163  000086                     ___lwdiv@counter:
  2164                           	opt stack 0
  2165  000086                     updateServoPosition@my_time:
  2166                           	opt stack 0
  2167  000086                     ___awdiv@dividend:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x6
  2171  000086                     	ds	1
  2172  000087                     ?___lwmod:
  2173                           	opt stack 0
  2174  000087                     getIR@i:
  2175                           	opt stack 0
  2176  000087                     ___lwmod@dividend:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x7
  2180  000087                     	ds	1
  2181  000088                     ??_Distribution:
  2182  000088                     ??_initServos:
  2183  000088                     initSortTimer@i:
  2184                           	opt stack 0
  2185  000088                     ___awdiv@divisor:
  2186                           	opt stack 0
  2187  000088                     ___lldiv@quotient:
  2188                           	opt stack 0
  2189                           
  2190                           ; 4 bytes @ 0x8
  2191  000088                     	ds	1
  2192  000089                     ___lwmod@divisor:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x9
  2196  000089                     	ds	1
  2197  00008A                     ___awdiv@counter:
  2198                           	opt stack 0
  2199                           
  2200                           ; 1 bytes @ 0xA
  2201  00008A                     	ds	1
  2202  00008B                     ___awdiv@sign:
  2203                           	opt stack 0
  2204  00008B                     ___lwmod@counter:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0xB
  2208  00008B                     	ds	1
  2209  00008C                     ___lldiv@counter:
  2210                           	opt stack 0
  2211  00008C                     ___awdiv@quotient:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0xC
  2215  00008C                     	ds	1
  2216  00008D                     I2C_Master_Init@c:
  2217                           	opt stack 0
  2218                           
  2219                           ; 4 bytes @ 0xD
  2220  00008D                     	ds	1
  2221  00008E                     ?_printf:
  2222                           	opt stack 0
  2223  00008E                     ?___awtoft:
  2224                           	opt stack 0
  2225  00008E                     printf@f:
  2226                           	opt stack 0
  2227  00008E                     ___awtoft@c:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0xE
  2231  00008E                     	ds	3
  2232  000091                     ??_I2C_Master_Init:
  2233  000091                     ___awtoft@sign:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x11
  2237  000091                     	ds	1
  2238  000092                     ___ftge@ff1:
  2239                           	opt stack 0
  2240                           
  2241                           ; 3 bytes @ 0x12
  2242  000092                     	ds	3
  2243  000095                     ??_loadRTC:
  2244  000095                     ___ftge@ff2:
  2245                           	opt stack 0
  2246                           
  2247                           ; 3 bytes @ 0x15
  2248  000095                     	ds	1
  2249  000096                     loadRTC@i:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x16
  2253  000096                     	ds	2
  2254  000098                     ??___ftge:
  2255                           
  2256                           ; 1 bytes @ 0x18
  2257  000098                     	ds	2
  2258  00009A                     ??_printf:
  2259                           
  2260                           ; 1 bytes @ 0x1A
  2261  00009A                     	ds	4
  2262  00009E                     printf@prec:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x1E
  2266  00009E                     	ds	1
  2267  00009F                     printf@cp:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x1F
  2271  00009F                     	ds	2
  2272  0000A1                     printf@ap:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x21
  2276  0000A1                     	ds	2
  2277  0000A3                     printf@len:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x23
  2281  0000A3                     	ds	2
  2282  0000A5                     printf@val:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x25
  2286  0000A5                     	ds	2
  2287  0000A7                     printf@flag:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x27
  2291  0000A7                     	ds	1
  2292  0000A8                     printf@c:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x28
  2296  0000A8                     	ds	1
  2297  0000A9                     printf@width:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x29
  2301  0000A9                     	ds	2
  2302  0000AB                     ??_printRTC:
  2303  0000AB                     ??_ID:
  2304  0000AB                     ??_algorithmTest:
  2305  0000AB                     ??_sensorTest:
  2306  0000AB                     ??_actuatorTest:
  2307  0000AB                     ??_arm:
  2308  0000AB                     ??_PortTestDC:
  2309  0000AB                     ??_SpeedTest:
  2310  0000AB                     ??_PortTestPusher:
  2311  0000AB                     ??_PlatformTest:
  2312  0000AB                     ??_BothServos:
  2313  0000AB                     ??_BlockerTest:
  2314  0000AB                     EEPROM_write@address:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x2B
  2318  0000AB                     	ds	1
  2319  0000AC                     BlockerTest@i:
  2320                           	opt stack 0
  2321  0000AC                     arm@on:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x2C
  2325  0000AC                     	ds	1
  2326  0000AD                     _ID$1213:
  2327                           	opt stack 0
  2328  0000AD                     EEPROM_write@data:
  2329                           	opt stack 0
  2330  0000AD                     actuatorTest@i_1764:
  2331                           	opt stack 0
  2332  0000AD                     sensorTest@res:
  2333                           	opt stack 0
  2334  0000AD                     PlatformTest@res:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x2D
  2338  0000AD                     	ds	1
  2339  0000AE                     ??_EEPROM_write:
  2340  0000AE                     actuatorTest@i_1771:
  2341                           	opt stack 0
  2342  0000AE                     ID@time:
  2343                           	opt stack 0
  2344  0000AE                     BlockerTest@cam_flag:
  2345                           	opt stack 0
  2346  0000AE                     printRTC@INT_time:
  2347                           	opt stack 0
  2348                           
  2349                           ; 14 bytes @ 0x2E
  2350  0000AE                     	ds	1
  2351  0000AF                     EEPROM_write@i:
  2352                           	opt stack 0
  2353  0000AF                     actuatorTest@i_1772:
  2354                           	opt stack 0
  2355  0000AF                     PlatformTest@res_1816:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x2F
  2359  0000AF                     	ds	1
  2360  0000B0                     EEPROM_write@i_1472:
  2361                           	opt stack 0
  2362  0000B0                     actuatorTest@i_1774:
  2363                           	opt stack 0
  2364  0000B0                     ID@i:
  2365                           	opt stack 0
  2366  0000B0                     BlockerTest@cond_flag:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x30
  2370  0000B0                     	ds	1
  2371  0000B1                     ??_Loading:
  2372  0000B1                     logRun@num:
  2373                           	opt stack 0
  2374  0000B1                     actuatorTest@i_1775:
  2375                           	opt stack 0
  2376  0000B1                     PlatformTest@i:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x31
  2380  0000B1                     	ds	1
  2381  0000B2                     logRun@byte1:
  2382                           	opt stack 0
  2383  0000B2                     actuatorTest@i_1777:
  2384                           	opt stack 0
  2385  0000B2                     ID@i_1212:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x32
  2389  0000B2                     	ds	1
  2390  0000B3                     logRun@byte2:
  2391                           	opt stack 0
  2392  0000B3                     actuatorTest@i_1778:
  2393                           	opt stack 0
  2394  0000B3                     Loading@addr:
  2395                           	opt stack 0
  2396  0000B3                     PlatformTest@i_1820:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x33
  2400  0000B3                     	ds	1
  2401  0000B4                     logRun@byte3:
  2402                           	opt stack 0
  2403  0000B4                     actuatorTest@i_1780:
  2404                           	opt stack 0
  2405  0000B4                     ID@i_1216:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x34
  2409  0000B4                     	ds	1
  2410  0000B5                     Loading@byte1:
  2411                           	opt stack 0
  2412  0000B5                     logRun@byte_i:
  2413                           	opt stack 0
  2414  0000B5                     actuatorTest@i_1781:
  2415                           	opt stack 0
  2416  0000B5                     PlatformTest@i_1821:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x35
  2420  0000B5                     	ds	1
  2421  0000B6                     logRun@byte11:
  2422                           	opt stack 0
  2423  0000B6                     actuatorTest@i_1783:
  2424                           	opt stack 0
  2425  0000B6                     Loading@i_1183:
  2426                           	opt stack 0
  2427  0000B6                     ID@i_1217:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x36
  2431  0000B6                     	ds	1
  2432  0000B7                     actuatorTest@i_1784:
  2433                           	opt stack 0
  2434  0000B7                     logRun@i:
  2435                           	opt stack 0
  2436  0000B7                     PlatformTest@i_1822:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x37
  2440  0000B7                     	ds	1
  2441  0000B8                     actuatorTest@i_1786:
  2442                           	opt stack 0
  2443  0000B8                     Loading@i_1192:
  2444                           	opt stack 0
  2445  0000B8                     ID@i_1218:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x38
  2449  0000B8                     	ds	1
  2450  0000B9                     actuatorTest@i_1787:
  2451                           	opt stack 0
  2452  0000B9                     logRun@addr:
  2453                           	opt stack 0
  2454  0000B9                     PlatformTest@on:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x39
  2458  0000B9                     	ds	1
  2459  0000BA                     actuatorTest@i_1790:
  2460                           	opt stack 0
  2461  0000BA                     Loading@i_1194:
  2462                           	opt stack 0
  2463  0000BA                     ID@res1:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x3A
  2467  0000BA                     	ds	1
  2468  0000BB                     actuatorTest@i_1791:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x3B
  2472  0000BB                     	ds	1
  2473  0000BC                     actuatorTest@i_1793:
  2474                           	opt stack 0
  2475  0000BC                     printRTC@RTC_month:
  2476                           	opt stack 0
  2477  0000BC                     Loading@i_1195:
  2478                           	opt stack 0
  2479  0000BC                     ID@res2:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x3C
  2483  0000BC                     	ds	1
  2484  0000BD                     actuatorTest@i_1794:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x3D
  2488  0000BD                     	ds	1
  2489  0000BE                     actuatorTest@i_1796:
  2490                           	opt stack 0
  2491  0000BE                     Loading@i_1197:
  2492                           	opt stack 0
  2493  0000BE                     ID@n:
  2494                           	opt stack 0
  2495  0000BE                     printRTC@month:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x3E
  2499  0000BE                     	ds	1
  2500  0000BF                     actuatorTest@i_1797:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x3F
  2504  0000BF                     	ds	1
  2505  0000C0                     actuatorTest@i_1800:
  2506                           	opt stack 0
  2507  0000C0                     Loading@i:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x40
  2511  0000C0                     	ds	1
  2512  0000C1                     actuatorTest@i_1801:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x41
  2516  0000C1                     	ds	1
  2517  0000C2                     actuatorTest@i_1803:
  2518                           	opt stack 0
  2519  0000C2                     printRTC@i:
  2520                           	opt stack 0
  2521  0000C2                     Loading@j:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x42
  2525  0000C2                     	ds	1
  2526  0000C3                     actuatorTest@i_1804:
  2527                           	opt stack 0
  2528                           
  2529                           ; 1 bytes @ 0x43
  2530  0000C3                     	ds	1
  2531  0000C4                     ??_UI:
  2532  0000C4                     actuatorTest@i:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x44
  2536  0000C4                     	ds	2
  2537  0000C6                     ??_Test:
  2538  0000C6                     _UI$2457:
  2539                           	opt stack 0
  2540                           
  2541                           ; 2 bytes @ 0x46
  2542  0000C6                     	ds	2
  2543  0000C8                     UI@i:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x48
  2547  0000C8                     	ds	1
  2548  0000C9                     UI@i_409:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x49
  2552  0000C9                     	ds	1
  2553  0000CA                     UI@i_412:
  2554                           	opt stack 0
  2555                           
  2556                           ; 1 bytes @ 0x4A
  2557  0000CA                     	ds	1
  2558  0000CB                     UI@i_413:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x4B
  2562  0000CB                     	ds	1
  2563  0000CC                     UI@i_431:
  2564                           	opt stack 0
  2565                           
  2566                           ; 1 bytes @ 0x4C
  2567  0000CC                     	ds	1
  2568  0000CD                     UI@i_432:
  2569                           	opt stack 0
  2570                           
  2571                           ; 1 bytes @ 0x4D
  2572  0000CD                     	ds	1
  2573  0000CE                     UI@i_435:
  2574                           	opt stack 0
  2575                           
  2576                           ; 1 bytes @ 0x4E
  2577  0000CE                     	ds	1
  2578  0000CF                     UI@i_436:
  2579                           	opt stack 0
  2580                           
  2581                           ; 1 bytes @ 0x4F
  2582  0000CF                     	ds	1
  2583  0000D0                     UI@i_439:
  2584                           	opt stack 0
  2585                           
  2586                           ; 1 bytes @ 0x50
  2587  0000D0                     	ds	1
  2588  0000D1                     UI@i_440:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x51
  2592  0000D1                     	ds	1
  2593  0000D2                     UI@i_443:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x52
  2597  0000D2                     	ds	1
  2598  0000D3                     UI@i_444:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x53
  2602  0000D3                     	ds	1
  2603  0000D4                     UI@i_447:
  2604                           	opt stack 0
  2605                           
  2606                           ; 1 bytes @ 0x54
  2607  0000D4                     	ds	1
  2608  0000D5                     UI@i_448:
  2609                           	opt stack 0
  2610                           
  2611                           ; 1 bytes @ 0x55
  2612  0000D5                     	ds	1
  2613  0000D6                     UI@month:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x56
  2617  0000D6                     	ds	4
  2618  0000DA                     tblptru	equ	0xFF8
  2619                           tblptrh	equ	0xFF7
  2620                           tblptrl	equ	0xFF6
  2621                           tablat	equ	0xFF5
  2622                           postinc0	equ	0xFEE
  2623                           wreg	equ	0xFE8
  2624                           postdec1	equ	0xFE5
  2625                           fsr1l	equ	0xFE1
  2626                           
  2627                           ; 1 bytes @ 0x5A
  2628                           
  2629                           	psect	cstackCOMRAM
  2630  000001                     __pcstackCOMRAM:
  2631                           	opt stack 0
  2632  000001                     ??_updateArmState:
  2633  000001                     ??i2_I2C_Master_Wait:
  2634  000001                     ??i2_delay_ms:
  2635  000001                     ??i2_isdigit:
  2636  000001                     ?i2___wmul:
  2637                           	opt stack 0
  2638  000001                     ?i2___lwmod:
  2639                           	opt stack 0
  2640  000001                     i2lcdNibble@temp:
  2641                           	opt stack 0
  2642  000001                     i2updateServoPosition@time_us:
  2643                           	opt stack 0
  2644  000001                     i2EEPROM_read@address:
  2645                           	opt stack 0
  2646  000001                     i2___wmul@multiplier:
  2647                           	opt stack 0
  2648  000001                     i2___lwmod@dividend:
  2649                           	opt stack 0
  2650  000001                     i2strcpy@to:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x0
  2654  000001                     	ds	1
  2655  000002                     i2I2C_Master_Read@a:
  2656                           	opt stack 0
  2657  000002                     i2lcdNibble@data:
  2658                           	opt stack 0
  2659  000002                     i2delay_ms@milliseconds:
  2660                           	opt stack 0
  2661  000002                     i2_isdigit$2094:
  2662                           	opt stack 0
  2663  000002                     i2I2C_Master_Write@d:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x1
  2667  000002                     	ds	1
  2668  000003                     i2I2C_Master_Read@temp:
  2669                           	opt stack 0
  2670  000003                     i2lcdInst@data:
  2671                           	opt stack 0
  2672  000003                     i2putch@data:
  2673                           	opt stack 0
  2674  000003                     i2isdigit@c:
  2675                           	opt stack 0
  2676  000003                     i2updateServoPosition@timer:
  2677                           	opt stack 0
  2678  000003                     i2___wmul@multiplicand:
  2679                           	opt stack 0
  2680  000003                     i2___lwmod@divisor:
  2681                           	opt stack 0
  2682  000003                     i2strcpy@from:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x2
  2686  000003                     	ds	1
  2687  000004                     i2getRTC@i:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x3
  2691  000004                     	ds	1
  2692  000005                     ??i2_updateServoPosition:
  2693  000005                     i2___lwmod@counter:
  2694                           	opt stack 0
  2695  000005                     i2___wmul@product:
  2696                           	opt stack 0
  2697  000005                     i2strcpy@cp:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x4
  2701  000005                     	ds	1
  2702  000006                     ?i2___lwdiv:
  2703                           	opt stack 0
  2704  000006                     i2___lwdiv@dividend:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x5
  2708  000006                     	ds	1
  2709  000007                     retrieveLog@logNum:
  2710                           	opt stack 0
  2711  000007                     i2updateServoPosition@my_time:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x6
  2715  000007                     	ds	1
  2716  000008                     i2___lwdiv@divisor:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x7
  2720  000008                     	ds	1
  2721  000009                     ??_retrieveLog:
  2722  000009                     ??_updateServoStates:
  2723                           
  2724                           ; 1 bytes @ 0x8
  2725  000009                     	ds	1
  2726  00000A                     i2___lwdiv@quotient:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0x9
  2730  00000A                     	ds	1
  2731  00000B                     retrieveLog@byte1:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0xA
  2735  00000B                     	ds	1
  2736  00000C                     retrieveLog@byte2:
  2737                           	opt stack 0
  2738  00000C                     i2___lwdiv@counter:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0xB
  2742  00000C                     	ds	1
  2743  00000D                     ?i2_printf:
  2744                           	opt stack 0
  2745  00000D                     retrieveLog@byte3:
  2746                           	opt stack 0
  2747  00000D                     i2printf@f:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0xC
  2751  00000D                     	ds	1
  2752  00000E                     retrieveLog@i:
  2753                           	opt stack 0
  2754                           
  2755                           ; 2 bytes @ 0xD
  2756  00000E                     	ds	2
  2757  000010                     retrieveLog@addr:
  2758                           	opt stack 0
  2759                           
  2760                           ; 2 bytes @ 0xF
  2761  000010                     	ds	2
  2762  000012                     dispLogs@myLog:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x11
  2766  000012                     	ds	2
  2767  000014                     
  2768                           ; 1 bytes @ 0x13
  2769  000014                     	ds	5
  2770  000019                     ??i2_printf:
  2771                           
  2772                           ; 1 bytes @ 0x18
  2773  000019                     	ds	4
  2774  00001D                     i2printf@prec:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0x1C
  2778  00001D                     	ds	1
  2779  00001E                     i2printf@cp:
  2780                           	opt stack 0
  2781                           
  2782                           ; 2 bytes @ 0x1D
  2783  00001E                     	ds	2
  2784  000020                     i2printf@ap:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x1F
  2788  000020                     	ds	2
  2789  000022                     i2printf@len:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x21
  2793  000022                     	ds	2
  2794  000024                     i2printf@val:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x23
  2798  000024                     	ds	2
  2799  000026                     i2printf@flag:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x25
  2803  000026                     	ds	1
  2804  000027                     i2printf@c:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x26
  2808  000027                     	ds	1
  2809  000028                     i2printf@width:
  2810                           	opt stack 0
  2811                           
  2812                           ; 2 bytes @ 0x27
  2813  000028                     	ds	2
  2814  00002A                     ??_printSortTimer:
  2815  00002A                     ??i2_printRTC:
  2816  00002A                     ?_inputHandler:
  2817                           	opt stack 0
  2818                           
  2819                           ; 2 bytes @ 0x29
  2820  00002A                     	ds	2
  2821  00002C                     ??_inputHandler:
  2822                           
  2823                           ; 1 bytes @ 0x2B
  2824  00002C                     	ds	1
  2825  00002D                     printSortTimer@curTime:
  2826                           	opt stack 0
  2827  00002D                     i2printRTC@INT_time:
  2828                           	opt stack 0
  2829                           
  2830                           ; 14 bytes @ 0x2C
  2831  00002D                     	ds	14
  2832  00003B                     printSortTimer@start_sec:
  2833                           	opt stack 0
  2834  00003B                     i2printRTC@RTC_month:
  2835                           	opt stack 0
  2836                           
  2837                           ; 2 bytes @ 0x3A
  2838  00003B                     	ds	2
  2839  00003D                     printSortTimer@cur_sec:
  2840                           	opt stack 0
  2841  00003D                     i2printRTC@month:
  2842                           	opt stack 0
  2843                           
  2844                           ; 4 bytes @ 0x3C
  2845  00003D                     	ds	2
  2846  00003F                     printSortTimer@min:
  2847                           	opt stack 0
  2848                           
  2849                           ; 2 bytes @ 0x3E
  2850  00003F                     	ds	2
  2851  000041                     printSortTimer@sec:
  2852                           	opt stack 0
  2853  000041                     i2printRTC@i:
  2854                           	opt stack 0
  2855                           
  2856                           ; 2 bytes @ 0x40
  2857  000041                     	ds	2
  2858  000043                     ??_updateMenu:
  2859  000043                     _printSortTimer$2589:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x42
  2863  000043                     	ds	2
  2864  000045                     printSortTimer@timeDiff:
  2865                           	opt stack 0
  2866                           
  2867                           ; 2 bytes @ 0x44
  2868  000045                     	ds	2
  2869  000047                     printSortTimer@i_1230:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0x46
  2873  000047                     	ds	2
  2874  000049                     printSortTimer@i:
  2875                           	opt stack 0
  2876                           
  2877                           ; 2 bytes @ 0x48
  2878  000049                     	ds	2
  2879  00004B                     ??_handler:
  2880                           
  2881                           ; 1 bytes @ 0x4A
  2882  00004B                     	ds	16
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1l	equ	0xFE1
  2891                           
  2892 ;;
  2893 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2894 ;;
  2895 ;; *************** function _main *****************
  2896 ;; Defined at:
  2897 ;;		line 19 in file "main.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;Total ram usage:        0 bytes
  2916 ;; Hardware stack levels required when called:   13
  2917 ;; This function calls:
  2918 ;;		_I2C_Master_Init
  2919 ;;		_Test
  2920 ;;		_UI
  2921 ;;		_initLCD
  2922 ;;		_initTime
  2923 ;;		_initUI
  2924 ;;		_logRun
  2925 ;;		_machineConfig
  2926 ;;		_sort
  2927 ;;		_stopSignals
  2928 ;; This function is called by:
  2929 ;;		Startup code after reset
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text0
  2934  004850                     __ptext0:
  2935                           	opt stack 0
  2936  004850                     _main:
  2937                           	opt stack 18
  2938                           
  2939                           ;main.c: 20: machineConfig();
  2940                           
  2941                           ;incstack = 0
  2942  004850  ECB2  F028         	call	_machineConfig	;wreg free
  2943                           
  2944                           ;main.c: 21: initLCD();
  2945  004854  EC6A  F02A         	call	_initLCD	;wreg free
  2946                           
  2947                           ;main.c: 24: RTCflag = 0;
  2948  004858  0E00               	movlw	0
  2949  00485A  0100               	movlb	0	; () banked
  2950  00485C  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2951  00485E  0E00               	movlw	0
  2952  004860  6FEA               	movwf	_RTCflag& (0+255),b
  2953                           
  2954                           ;main.c: 25: if(RTCflag){
  2955  004862  0100               	movlb	0	; () banked
  2956  004864  51EA               	movf	_RTCflag& (0+255),w,b
  2957  004866  0100               	movlb	0	; () banked
  2958  004868  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2959  00486A  B4D8               	btfsc	status,2,c
  2960  00486C  D016               	goto	l10096
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2964  00486E  0E47               	movlw	71
  2965  004870  0100               	movlb	0	; () banked
  2966  004872  6F80               	movwf	initTime@m& (0+255),b
  2967  004874  0E17               	movlw	23
  2968  004876  0100               	movlb	0	; () banked
  2969  004878  6F81               	movwf	initTime@h& (0+255),b
  2970  00487A  0E07               	movlw	7
  2971  00487C  0100               	movlb	0	; () banked
  2972  00487E  6F82               	movwf	initTime@w& (0+255),b
  2973  004880  0E08               	movlw	8
  2974  004882  0100               	movlb	0	; () banked
  2975  004884  6F83               	movwf	initTime@DD& (0+255),b
  2976  004886  0E04               	movlw	4
  2977  004888  0100               	movlb	0	; () banked
  2978  00488A  6F84               	movwf	initTime@MM& (0+255),b
  2979  00488C  0E17               	movlw	23
  2980  00488E  0100               	movlb	0	; () banked
  2981  004890  6F85               	movwf	initTime@YY& (0+255),b
  2982  004892  0E42               	movlw	66
  2983  004894  EC5D  F02D         	call	_initTime
  2984                           
  2985                           ;main.c: 27: }
  2986  004898  D00B               	goto	l10098
  2987  00489A                     l10096:
  2988                           
  2989                           ;main.c: 28: else{
  2990                           ;main.c: 29: I2C_Master_Init(10000);
  2991  00489A  0E10               	movlw	16
  2992  00489C  0100               	movlb	0	; () banked
  2993  00489E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2994  0048A0  0E27               	movlw	39
  2995  0048A2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2996  0048A4  0E00               	movlw	0
  2997  0048A6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2998  0048A8  0E00               	movlw	0
  2999  0048AA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3000  0048AC  EC15  F029         	call	_I2C_Master_Init	;wreg free
  3001  0048B0                     l10098:
  3002                           
  3003                           ;main.c: 30: }
  3004                           ;main.c: 32: initUI();
  3005  0048B0  EC8D  F02B         	call	_initUI	;wreg free
  3006                           
  3007                           ;main.c: 33: first = 1;
  3008  0048B4  0E00               	movlw	0
  3009  0048B6  0101               	movlb	1	; () banked
  3010  0048B8  6F3A               	movwf	(_first+1)& (0+255),b
  3011  0048BA  0E01               	movlw	1
  3012  0048BC  6F39               	movwf	_first& (0+255),b
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;main.c: 44: switch(machine_state){
  3016                           
  3017                           ;main.c: 43: while(1){
  3018  0048BE  D018               	goto	l10120
  3019  0048C0                     l10102:
  3020                           
  3021                           ;main.c: 46: UI();
  3022  0048C0  EC09  F000         	call	_UI	;wreg free
  3023                           
  3024                           ;main.c: 47: break;
  3025  0048C4  D015               	goto	l10120
  3026  0048C6                     l10104:
  3027                           
  3028                           ;main.c: 49: sort();
  3029  0048C6  EC4C  F02D         	call	_sort	;wreg free
  3030                           
  3031                           ;main.c: 50: break;
  3032  0048CA  D012               	goto	l10120
  3033  0048CC                     l10106:
  3034                           
  3035                           ;main.c: 52: stopSignals();
  3036  0048CC  EC7D  F02D         	call	_stopSignals	;wreg free
  3037                           
  3038                           ;main.c: 53: logRun();
  3039  0048D0  ECBA  F01F         	call	_logRun	;wreg free
  3040                           
  3041                           ;main.c: 54: first = 1;
  3042  0048D4  0E00               	movlw	0
  3043  0048D6  0101               	movlb	1	; () banked
  3044  0048D8  6F3A               	movwf	(_first+1)& (0+255),b
  3045  0048DA  0E01               	movlw	1
  3046  0048DC  6F39               	movwf	_first& (0+255),b
  3047                           
  3048                           ; BSR set to: 1
  3049                           ;main.c: 55: UI();
  3050  0048DE  EC09  F000         	call	_UI	;wreg free
  3051                           
  3052                           ;main.c: 56: break;
  3053  0048E2  D006               	goto	l10120
  3054  0048E4                     l10114:
  3055                           
  3056                           ;main.c: 58: Test();
  3057  0048E4  EC72  F021         	call	_Test	;wreg free
  3058                           
  3059                           ;main.c: 59: break;
  3060  0048E8  D003               	goto	l10120
  3061  0048EA                     l10116:
  3062                           
  3063                           ;main.c: 61: stopSignals();
  3064  0048EA  EC7D  F02D         	call	_stopSignals	;wreg free
  3065  0048EE                     l501:
  3066  0048EE  D7FF               	goto	l501
  3067  0048F0                     l10120:
  3068  0048F0  0100               	movlb	0	; () banked
  3069  0048F2  51FC               	movf	_machine_state& (0+255),w,b
  3070                           
  3071                           ; Switch size 1, requested type "space"
  3072                           ; Number of cases is 5, Range of values is 0 to 4
  3073                           ; switch strategies available:
  3074                           ; Name         Instructions Cycles
  3075                           ; simple_byte           16     9 (average)
  3076                           ;	Chosen strategy is simple_byte
  3077  0048F4  0A00               	xorlw	0	; case 0
  3078  0048F6  B4D8               	btfsc	status,2,c
  3079  0048F8  D7E3               	goto	l10102
  3080  0048FA  0A01               	xorlw	1	; case 1
  3081  0048FC  B4D8               	btfsc	status,2,c
  3082  0048FE  D7E3               	goto	l10104
  3083  004900  0A03               	xorlw	3	; case 2
  3084  004902  B4D8               	btfsc	status,2,c
  3085  004904  D7E3               	goto	l10106
  3086  004906  0A01               	xorlw	1	; case 3
  3087  004908  B4D8               	btfsc	status,2,c
  3088  00490A  D7EC               	goto	l10114
  3089  00490C  0A07               	xorlw	7	; case 4
  3090  00490E  B4D8               	btfsc	status,2,c
  3091  004910  D7EC               	goto	l10116
  3092                           
  3093                           ; BSR set to: 0
  3094                           
  3095                           ; BSR set to: 0
  3096  004912  D7EE               	goto	l10120
  3097  004914                     __end_of_main:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           postinc0	equ	0xFEE
  3104                           wreg	equ	0xFE8
  3105                           postdec1	equ	0xFE5
  3106                           fsr1l	equ	0xFE1
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _sort *****************
  3110 ;; Defined at:
  3111 ;;		line 66 in file "sort.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;		None
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:        0 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:   12
  3132 ;; This function calls:
  3133 ;;		_Distribution
  3134 ;;		_ID
  3135 ;;		_Loading
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text1
  3142  005A98                     __ptext1:
  3143                           	opt stack 0
  3144  005A98                     _sort:
  3145                           	opt stack 18
  3146                           
  3147                           ;sort.c: 67: if(machine_state == Sorting_state){
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;incstack = 0
  3151  005A98  0100               	movlb	0	; () banked
  3152  005A9A  05FC               	decf	_machine_state& (0+255),w,b
  3153  005A9C  B4D8               	btfsc	status,2,c
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;sort.c: 68: Loading();
  3157  005A9E  ECC7  F008         	call	_Loading	;wreg free
  3158                           
  3159                           ;sort.c: 69: }
  3160                           ;sort.c: 70: if(machine_state == Sorting_state){
  3161  005AA2  0100               	movlb	0	; () banked
  3162  005AA4  05FC               	decf	_machine_state& (0+255),w,b
  3163  005AA6  B4D8               	btfsc	status,2,c
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;sort.c: 71: ID();
  3167  005AA8  ECDD  F00D         	call	_ID	;wreg free
  3168                           
  3169                           ;sort.c: 72: }
  3170                           ;sort.c: 73: if(machine_state == Sorting_state){
  3171  005AAC  0100               	movlb	0	; () banked
  3172  005AAE  05FC               	decf	_machine_state& (0+255),w,b
  3173  005AB0  A4D8               	btfss	status,2,c
  3174  005AB2  0012               	return	
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 74: Distribution();
  3178  005AB4  ECE8  F022         	call	_Distribution	;wreg free
  3179  005AB8  0012               	return	
  3180  005ABA                     __end_of_sort:
  3181                           	opt stack 0
  3182                           tblptru	equ	0xFF8
  3183                           tblptrh	equ	0xFF7
  3184                           tblptrl	equ	0xFF6
  3185                           tablat	equ	0xFF5
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           postdec1	equ	0xFE5
  3189                           fsr1l	equ	0xFE1
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _Loading *****************
  3193 ;; Defined at:
  3194 ;;		line 78 in file "sort.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  i               2   62[BANK0 ] int 
  3199 ;;  i               2   60[BANK0 ] int 
  3200 ;;  i               2   58[BANK0 ] int 
  3201 ;;  i               2   56[BANK0 ] int 
  3202 ;;  i               2   54[BANK0 ] int 
  3203 ;;  j               2   66[BANK0 ] int 
  3204 ;;  i               2   64[BANK0 ] int 
  3205 ;;  addr            2   51[BANK0 ] unsigned short 
  3206 ;;  byte1           1   53[BANK0 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;Total ram usage:       19 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:   11
  3223 ;; This function calls:
  3224 ;;		_EEPROM_read
  3225 ;;		_EEPROM_write
  3226 ;;		_delay_ms
  3227 ;;		_getIR
  3228 ;;		_getMAG
  3229 ;;		_initGlobalVars
  3230 ;;		_initServos
  3231 ;;		_initSortTimer
  3232 ;;		_lcdInst
  3233 ;;		_readIR
  3234 ;; This function is called by:
  3235 ;;		_sort
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text2
  3240  00118E                     __ptext2:
  3241                           	opt stack 0
  3242  00118E                     _Loading:
  3243                           	opt stack 18
  3244                           
  3245                           ;sort.c: 79: if(first){
  3246                           
  3247                           ;incstack = 0
  3248  00118E  0101               	movlb	1	; () banked
  3249  001190  5139               	movf	_first& (0+255),w,b
  3250  001192  0101               	movlb	1	; () banked
  3251  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3252  001196  B4D8               	btfsc	status,2,c
  3253  001198  D066               	goto	l7806
  3254                           
  3255                           ; BSR set to: 1
  3256                           ;sort.c: 80: initGlobalVars();
  3257  00119A  EC8A  F024         	call	_initGlobalVars	;wreg free
  3258                           
  3259                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3260  00119E  0E01               	movlw	1
  3261  0011A0  ECCB  F02D         	call	_lcdInst
  3262  0011A4  0E68               	movlw	104
  3263  0011A6  0100               	movlb	0	; () banked
  3264  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3265  0011AA  0EE4               	movlw	228
  3266  0011AC                     u9837:
  3267  0011AC  2EE8               	decfsz	wreg,f,c
  3268  0011AE  D7FE               	bra	u9837
  3269  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3270  0011B2  D7FC               	bra	u9837
  3271  0011B4  F000               	nop	
  3272                           
  3273                           ;sort.c: 82: initSortTimer();
  3274  0011B6  ECA6  F025         	call	_initSortTimer	;wreg free
  3275                           
  3276                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3277  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3278                           
  3279                           ;sort.c: 88: sel = EEPROM_read(0);
  3280  0011BC  0E00               	movlw	0
  3281  0011BE  0100               	movlb	0	; () banked
  3282  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3283  0011C2  0E00               	movlw	0
  3284  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3285  0011C6  EC99  F02D         	call	_EEPROM_read	;wreg free
  3286  0011CA  0100               	movlb	0	; () banked
  3287  0011CC  6FFD               	movwf	_sel& (0+255),b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3291  0011CE  0100               	movlb	0	; () banked
  3292  0011D0  51FD               	movf	_sel& (0+255),w,b
  3293  0011D2  0D0B               	mullw	11
  3294  0011D4  0E01               	movlw	1
  3295  0011D6  24F3               	addwf	prodl,w,c
  3296  0011D8  0100               	movlb	0	; () banked
  3297  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3298  0011DC  0E00               	movlw	0
  3299  0011DE  20F4               	addwfc	prodh,w,c
  3300  0011E0  0100               	movlb	0	; () banked
  3301  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3305  0011E4  0E7F               	movlw	127
  3306  0011E6  0100               	movlb	0	; () banked
  3307  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3311  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3312  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3313  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3314  0011F6  EC74  F022         	call	_EEPROM_write	;wreg free
  3315                           
  3316                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3317  0011FA  948A               	bcf	3978,2,c	;volatile
  3318                           
  3319                           ;sort.c: 96: for(int i=0; i<46; i++){
  3320  0011FC  0E00               	movlw	0
  3321  0011FE  0100               	movlb	0	; () banked
  3322  001200  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3323  001202  0E00               	movlw	0
  3324  001204  6FC0               	movwf	Loading@i& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327  001206  0100               	movlb	0	; () banked
  3328  001208  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3329  00120A  D008               	goto	l7796
  3330  00120C  0100               	movlb	0	; () banked
  3331  00120E  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3332  001210  E126               	bnz	l776
  3333  001212  0E2E               	movlw	46
  3334  001214  0100               	movlb	0	; () banked
  3335  001216  5DC0               	subwf	Loading@i& (0+255),w,b
  3336  001218  B0D8               	btfsc	status,0,c
  3337  00121A  D021               	goto	l776
  3338  00121C                     l7796:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3342  00121C  B48A               	btfsc	3978,2,c	;volatile
  3343  00121E  D004               	goto	u6410
  3344  001220  0100               	movlb	0	; () banked
  3345  001222  6BB1               	clrf	??_Loading& (0+255),b
  3346  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3347  001226  D002               	goto	u6428
  3348  001228                     u6410:
  3349  001228  0100               	movlb	0	; () banked
  3350  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3351  00122C                     u6428:
  3352  00122C  0100               	movlb	0	; () banked
  3353  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3354  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3355  001232  508A               	movf	3978,w,c	;volatile
  3356  001234  0100               	movlb	0	; () banked
  3357  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3358  001238  0BFB               	andlw	-5
  3359  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3360  00123C  6E8A               	movwf	3978,c	;volatile
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;sort.c: 98: delay_ms(45-i);
  3364  00123E  0100               	movlb	0	; () banked
  3365  001240  51C0               	movf	Loading@i& (0+255),w,b
  3366  001242  0800               	sublw	0
  3367  001244  0F2D               	addlw	45
  3368  001246  ECEC  F02C         	call	_delay_ms
  3369  00124A  0100               	movlb	0	; () banked
  3370  00124C  4BC0               	infsnz	Loading@i& (0+255),f,b
  3371  00124E  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374  001250  0100               	movlb	0	; () banked
  3375  001252  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3376  001254  D7E3               	goto	l7796
  3377  001256  0100               	movlb	0	; () banked
  3378  001258  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3379  00125A  E101               	bnz	u6430
  3380  00125C  D7DA               	goto	L1
  3381  00125E                     u6430:
  3382  00125E                     l776:
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;sort.c: 99: }
  3386                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3387  00125E  848A               	bsf	3978,2,c	;volatile
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;sort.c: 103: initServos();
  3391  001260  EC5A  F027         	call	_initServos	;wreg free
  3392                           
  3393                           ;sort.c: 104: }
  3394  001264  0012               	return	
  3395  001266                     l7806:
  3396                           
  3397                           ;sort.c: 105: else{
  3398                           ;sort.c: 108: if(!f_loadingNewCan){
  3399  001266  0100               	movlb	0	; () banked
  3400  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3401  00126A  0100               	movlb	0	; () banked
  3402  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3403  00126E  A4D8               	btfss	status,2,c
  3404  001270  D018               	goto	l7822
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;sort.c: 110: getIR();
  3408  001272  ECD2  F027         	call	_getIR	;wreg free
  3409                           
  3410                           ;sort.c: 112: if(!f_loadingNewCan){
  3411  001276  0100               	movlb	0	; () banked
  3412  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3413  00127A  0100               	movlb	0	; () banked
  3414  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3415  00127E  B4D8               	btfsc	status,2,c
  3416  001280  0012               	return	
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 116: else{
  3420                           ;sort.c: 117: count_total++;
  3421                           
  3422                           ; BSR set to: 0
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;sort.c: 114: }
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;sort.c: 113: return;
  3429  001282  0100               	movlb	0	; () banked
  3430  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3431  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;sort.c: 118: if(count_total == 12){
  3435  001288  0E0C               	movlw	12
  3436  00128A  0100               	movlb	0	; () banked
  3437  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3438  00128E  0100               	movlb	0	; () banked
  3439  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3440  001292  A4D8               	btfss	status,2,c
  3441  001294  0012               	return	
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;sort.c: 119: f_lastCan = 1;
  3445  001296  0E00               	movlw	0
  3446  001298  0100               	movlb	0	; () banked
  3447  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3448  00129C  0E01               	movlw	1
  3449  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;sort.c: 120: }
  3453                           ;sort.c: 121: }
  3454                           ;sort.c: 122: }
  3455                           
  3456                           ; BSR set to: 0
  3457  0012A0  0012               	return	
  3458  0012A2                     l7822:
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;sort.c: 125: else if(f_ID_receive){
  3462  0012A2  0101               	movlb	1	; () banked
  3463  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3464  0012A6  0101               	movlb	1	; () banked
  3465  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3466  0012AA  B4D8               	btfsc	status,2,c
  3467  0012AC  0012               	return	
  3468                           
  3469                           ; BSR set to: 1
  3470                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3471  0012AE  0E00               	movlw	0
  3472  0012B0  0101               	movlb	1	; () banked
  3473  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3474  0012B4  0E01               	movlw	1
  3475  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3476                           
  3477                           ;sort.c: 127: f_loadingNewCan = 0;
  3478  0012B8  0E00               	movlw	0
  3479  0012BA  0100               	movlb	0	; () banked
  3480  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3481  0012BE  0E00               	movlw	0
  3482  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3486  0012C2  0E1F               	movlw	31
  3487  0012C4  0100               	movlb	0	; () banked
  3488  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3489  0012C8  0E71               	movlw	113
  3490  0012CA  0100               	movlb	0	; () banked
  3491  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3492  0012CE  0E1E               	movlw	30
  3493  0012D0                     u9847:
  3494  0012D0  2EE8               	decfsz	wreg,f,c
  3495  0012D2  D7FE               	bra	u9847
  3496  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3497  0012D6  D7FC               	bra	u9847
  3498  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3499  0012DA  D7FA               	bra	u9847
  3500  0012DC  F000               	nop	
  3501                           
  3502                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3503  0012DE  948A               	bcf	3978,2,c	;volatile
  3504                           
  3505                           ;sort.c: 133: f_arm_position = 1;
  3506  0012E0  0E00               	movlw	0
  3507  0012E2  0100               	movlb	0	; () banked
  3508  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3509  0012E6  0E01               	movlw	1
  3510  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;sort.c: 135: delay_ms(400);
  3514  0012EA  0E90               	movlw	144
  3515  0012EC  ECEC  F02C         	call	_delay_ms
  3516                           
  3517                           ;sort.c: 136: getMAG();
  3518  0012F0  EC5B  F02B         	call	_getMAG	;wreg free
  3519                           
  3520                           ;sort.c: 137: sensor_outputs[0] = MAG_signal;
  3521  0012F4  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3522  0012F8  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3523                           
  3524                           ;sort.c: 139: if(sensor_outputs[0]){
  3525  0012FC  0100               	movlb	0	; () banked
  3526  0012FE  51E2               	movf	_sensor_outputs& (0+255),w,b
  3527  001300  0100               	movlb	0	; () banked
  3528  001302  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3529  001304  B4D8               	btfsc	status,2,c
  3530  001306  D027               	goto	l7852
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;sort.c: 140: for(int i = 0; i<25; i++){
  3534  001308  0E00               	movlw	0
  3535  00130A  0100               	movlb	0	; () banked
  3536  00130C  6FB7               	movwf	(Loading@i_1183+1)& (0+255),b
  3537  00130E  0E00               	movlw	0
  3538  001310  6FB6               	movwf	Loading@i_1183& (0+255),b
  3539  001312                     l7842:
  3540                           
  3541                           ; BSR set to: 0
  3542  001312  0100               	movlb	0	; () banked
  3543  001314  BFB7               	btfsc	(Loading@i_1183+1)& (0+255),7,b
  3544  001316  D008               	goto	l786
  3545  001318  0100               	movlb	0	; () banked
  3546  00131A  51B7               	movf	(Loading@i_1183+1)& (0+255),w,b
  3547  00131C  E143               	bnz	l7864
  3548  00131E  0E19               	movlw	25
  3549  001320  0100               	movlb	0	; () banked
  3550  001322  5DB6               	subwf	Loading@i_1183& (0+255),w,b
  3551  001324  B0D8               	btfsc	status,0,c
  3552  001326  D03E               	goto	l7864
  3553  001328                     l786:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;sort.c: 141: LATAbits.LATA4 = 1;
  3557  001328  8889               	bsf	3977,4,c	;volatile
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;sort.c: 142: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3561  00132A  0E4E               	movlw	78
  3562  00132C  0100               	movlb	0	; () banked
  3563  00132E  6FB1               	movwf	??_Loading& (0+255),b
  3564  001330  0EEB               	movlw	235
  3565  001332                     u9857:
  3566  001332  2EE8               	decfsz	wreg,f,c
  3567  001334  D7FE               	bra	u9857
  3568  001336  2FB1               	decfsz	??_Loading& (0+255),f,b
  3569  001338  D7FC               	bra	u9857
  3570                           
  3571                           ;sort.c: 143: LATAbits.LATA4 = 0;
  3572  00133A  9889               	bcf	3977,4,c	;volatile
  3573                           
  3574                           ;sort.c: 144: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3575  00133C  0E1A               	movlw	26
  3576  00133E  0100               	movlb	0	; () banked
  3577  001340  6FB1               	movwf	??_Loading& (0+255),b
  3578  001342  0EF8               	movlw	248
  3579  001344                     u9867:
  3580  001344  2EE8               	decfsz	wreg,f,c
  3581  001346  D7FE               	bra	u9867
  3582  001348  2FB1               	decfsz	??_Loading& (0+255),f,b
  3583  00134A  D7FC               	bra	u9867
  3584  00134C  F000               	nop	
  3585  00134E  0100               	movlb	0	; () banked
  3586  001350  4BB6               	infsnz	Loading@i_1183& (0+255),f,b
  3587  001352  2BB7               	incf	(Loading@i_1183+1)& (0+255),f,b
  3588  001354  D7DE               	goto	l7842
  3589  001356                     l7852:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;sort.c: 147: else{
  3593                           ;sort.c: 148: for(int i = 0; i<25; i++){
  3594  001356  0E00               	movlw	0
  3595  001358  0100               	movlb	0	; () banked
  3596  00135A  6FB9               	movwf	(Loading@i_1192+1)& (0+255),b
  3597  00135C  0E00               	movlw	0
  3598  00135E  6FB8               	movwf	Loading@i_1192& (0+255),b
  3599  001360                     l7854:
  3600                           
  3601                           ; BSR set to: 0
  3602  001360  0100               	movlb	0	; () banked
  3603  001362  BFB9               	btfsc	(Loading@i_1192+1)& (0+255),7,b
  3604  001364  D008               	goto	l789
  3605  001366  0100               	movlb	0	; () banked
  3606  001368  51B9               	movf	(Loading@i_1192+1)& (0+255),w,b
  3607  00136A  E11C               	bnz	l7864
  3608  00136C  0E19               	movlw	25
  3609  00136E  0100               	movlb	0	; () banked
  3610  001370  5DB8               	subwf	Loading@i_1192& (0+255),w,b
  3611  001372  B0D8               	btfsc	status,0,c
  3612  001374  D017               	goto	l7864
  3613  001376                     l789:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 149: LATAbits.LATA4 = 1;
  3617  001376  8889               	bsf	3977,4,c	;volatile
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;sort.c: 150: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3621  001378  0E3D               	movlw	61
  3622  00137A  0100               	movlb	0	; () banked
  3623  00137C  6FB1               	movwf	??_Loading& (0+255),b
  3624  00137E  0E41               	movlw	65
  3625  001380                     u9877:
  3626  001380  2EE8               	decfsz	wreg,f,c
  3627  001382  D7FE               	bra	u9877
  3628  001384  2FB1               	decfsz	??_Loading& (0+255),f,b
  3629  001386  D7FC               	bra	u9877
  3630                           
  3631                           ;sort.c: 151: LATAbits.LATA4 = 0;
  3632  001388  9889               	bcf	3977,4,c	;volatile
  3633                           
  3634                           ;sort.c: 152: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3635  00138A  0E2C               	movlw	44
  3636  00138C  0100               	movlb	0	; () banked
  3637  00138E  6FB1               	movwf	??_Loading& (0+255),b
  3638  001390  0EA1               	movlw	161
  3639  001392                     u9887:
  3640  001392  2EE8               	decfsz	wreg,f,c
  3641  001394  D7FE               	bra	u9887
  3642  001396  2FB1               	decfsz	??_Loading& (0+255),f,b
  3643  001398  D7FC               	bra	u9887
  3644  00139A  D000               	nop2	
  3645  00139C  0100               	movlb	0	; () banked
  3646  00139E  4BB8               	infsnz	Loading@i_1192& (0+255),f,b
  3647  0013A0  2BB9               	incf	(Loading@i_1192+1)& (0+255),f,b
  3648  0013A2  D7DE               	goto	l7854
  3649  0013A4                     l7864:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;sort.c: 153: }
  3653                           ;sort.c: 154: }
  3654                           ;sort.c: 156: _delay((unsigned long)((350)*(32000000/4000.0)));
  3655  0013A4  0E0F               	movlw	15
  3656  0013A6  0100               	movlb	0	; () banked
  3657  0013A8  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3658  0013AA  0E35               	movlw	53
  3659  0013AC  0100               	movlb	0	; () banked
  3660  0013AE  6FB1               	movwf	??_Loading& (0+255),b
  3661  0013B0  0E51               	movlw	81
  3662  0013B2                     u9897:
  3663  0013B2  2EE8               	decfsz	wreg,f,c
  3664  0013B4  D7FE               	bra	u9897
  3665  0013B6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3666  0013B8  D7FC               	bra	u9897
  3667  0013BA  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3668  0013BC  D7FA               	bra	u9897
  3669                           
  3670                           ;sort.c: 158: readIR();
  3671  0013BE  EC1E  F02A         	call	_readIR	;wreg free
  3672                           
  3673                           ;sort.c: 159: if(IR_signal==1){
  3674  0013C2  0100               	movlb	0	; () banked
  3675  0013C4  05E6               	decf	_IR_signal& (0+255),w,b
  3676  0013C6  0100               	movlb	0	; () banked
  3677  0013C8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3678  0013CA  A4D8               	btfss	status,2,c
  3679  0013CC  D1D4               	goto	l7992
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;sort.c: 160: _delay((unsigned long)((30)*(32000000/4000.0)));
  3683  0013CE  0E02               	movlw	2
  3684  0013D0  0100               	movlb	0	; () banked
  3685  0013D2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3686  0013D4  0E38               	movlw	56
  3687  0013D6  0100               	movlb	0	; () banked
  3688  0013D8  6FB1               	movwf	??_Loading& (0+255),b
  3689  0013DA  0EAD               	movlw	173
  3690  0013DC                     u9907:
  3691  0013DC  2EE8               	decfsz	wreg,f,c
  3692  0013DE  D7FE               	bra	u9907
  3693  0013E0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3694  0013E2  D7FC               	bra	u9907
  3695  0013E4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3696  0013E6  D7FA               	bra	u9907
  3697                           
  3698                           ;sort.c: 161: readIR();
  3699  0013E8  EC1E  F02A         	call	_readIR	;wreg free
  3700                           
  3701                           ;sort.c: 162: if(IR_signal==1){
  3702  0013EC  0100               	movlb	0	; () banked
  3703  0013EE  05E6               	decf	_IR_signal& (0+255),w,b
  3704  0013F0  0100               	movlb	0	; () banked
  3705  0013F2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3706  0013F4  A4D8               	btfss	status,2,c
  3707  0013F6  D054               	goto	l7902
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;sort.c: 163: if(sensor_outputs[0]){
  3711  0013F8  0100               	movlb	0	; () banked
  3712  0013FA  51E2               	movf	_sensor_outputs& (0+255),w,b
  3713  0013FC  0100               	movlb	0	; () banked
  3714  0013FE  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3715  001400  B4D8               	btfsc	status,2,c
  3716  001402  D027               	goto	l7890
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;sort.c: 164: for(int i = 0; i<25; i++){
  3720  001404  0E00               	movlw	0
  3721  001406  0100               	movlb	0	; () banked
  3722  001408  6FBB               	movwf	(Loading@i_1194+1)& (0+255),b
  3723  00140A  0E00               	movlw	0
  3724  00140C  6FBA               	movwf	Loading@i_1194& (0+255),b
  3725  00140E                     l7880:
  3726                           
  3727                           ; BSR set to: 0
  3728  00140E  0100               	movlb	0	; () banked
  3729  001410  BFBB               	btfsc	(Loading@i_1194+1)& (0+255),7,b
  3730  001412  D008               	goto	l794
  3731  001414  0100               	movlb	0	; () banked
  3732  001416  51BB               	movf	(Loading@i_1194+1)& (0+255),w,b
  3733  001418  E143               	bnz	l7902
  3734  00141A  0E19               	movlw	25
  3735  00141C  0100               	movlb	0	; () banked
  3736  00141E  5DBA               	subwf	Loading@i_1194& (0+255),w,b
  3737  001420  B0D8               	btfsc	status,0,c
  3738  001422  D03E               	goto	l7902
  3739  001424                     l794:
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;sort.c: 165: LATAbits.LATA4 = 1;
  3743  001424  8889               	bsf	3977,4,c	;volatile
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;sort.c: 166: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3747  001426  0E4E               	movlw	78
  3748  001428  0100               	movlb	0	; () banked
  3749  00142A  6FB1               	movwf	??_Loading& (0+255),b
  3750  00142C  0EEB               	movlw	235
  3751  00142E                     u9917:
  3752  00142E  2EE8               	decfsz	wreg,f,c
  3753  001430  D7FE               	bra	u9917
  3754  001432  2FB1               	decfsz	??_Loading& (0+255),f,b
  3755  001434  D7FC               	bra	u9917
  3756                           
  3757                           ;sort.c: 167: LATAbits.LATA4 = 0;
  3758  001436  9889               	bcf	3977,4,c	;volatile
  3759                           
  3760                           ;sort.c: 168: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3761  001438  0E1A               	movlw	26
  3762  00143A  0100               	movlb	0	; () banked
  3763  00143C  6FB1               	movwf	??_Loading& (0+255),b
  3764  00143E  0EF8               	movlw	248
  3765  001440                     u9927:
  3766  001440  2EE8               	decfsz	wreg,f,c
  3767  001442  D7FE               	bra	u9927
  3768  001444  2FB1               	decfsz	??_Loading& (0+255),f,b
  3769  001446  D7FC               	bra	u9927
  3770  001448  F000               	nop	
  3771  00144A  0100               	movlb	0	; () banked
  3772  00144C  4BBA               	infsnz	Loading@i_1194& (0+255),f,b
  3773  00144E  2BBB               	incf	(Loading@i_1194+1)& (0+255),f,b
  3774  001450  D7DE               	goto	l7880
  3775  001452                     l7890:
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;sort.c: 171: else{
  3779                           ;sort.c: 172: for(int i = 0; i<25; i++){
  3780  001452  0E00               	movlw	0
  3781  001454  0100               	movlb	0	; () banked
  3782  001456  6FBD               	movwf	(Loading@i_1195+1)& (0+255),b
  3783  001458  0E00               	movlw	0
  3784  00145A  6FBC               	movwf	Loading@i_1195& (0+255),b
  3785  00145C                     l7892:
  3786                           
  3787                           ; BSR set to: 0
  3788  00145C  0100               	movlb	0	; () banked
  3789  00145E  BFBD               	btfsc	(Loading@i_1195+1)& (0+255),7,b
  3790  001460  D008               	goto	l797
  3791  001462  0100               	movlb	0	; () banked
  3792  001464  51BD               	movf	(Loading@i_1195+1)& (0+255),w,b
  3793  001466  E11C               	bnz	l7902
  3794  001468  0E19               	movlw	25
  3795  00146A  0100               	movlb	0	; () banked
  3796  00146C  5DBC               	subwf	Loading@i_1195& (0+255),w,b
  3797  00146E  B0D8               	btfsc	status,0,c
  3798  001470  D017               	goto	l7902
  3799  001472                     l797:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;sort.c: 173: LATAbits.LATA4 = 1;
  3803  001472  8889               	bsf	3977,4,c	;volatile
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;sort.c: 174: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3807  001474  0E3D               	movlw	61
  3808  001476  0100               	movlb	0	; () banked
  3809  001478  6FB1               	movwf	??_Loading& (0+255),b
  3810  00147A  0E41               	movlw	65
  3811  00147C                     u9937:
  3812  00147C  2EE8               	decfsz	wreg,f,c
  3813  00147E  D7FE               	bra	u9937
  3814  001480  2FB1               	decfsz	??_Loading& (0+255),f,b
  3815  001482  D7FC               	bra	u9937
  3816                           
  3817                           ;sort.c: 175: LATAbits.LATA4 = 0;
  3818  001484  9889               	bcf	3977,4,c	;volatile
  3819                           
  3820                           ;sort.c: 176: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3821  001486  0E2C               	movlw	44
  3822  001488  0100               	movlb	0	; () banked
  3823  00148A  6FB1               	movwf	??_Loading& (0+255),b
  3824  00148C  0EA1               	movlw	161
  3825  00148E                     u9947:
  3826  00148E  2EE8               	decfsz	wreg,f,c
  3827  001490  D7FE               	bra	u9947
  3828  001492  2FB1               	decfsz	??_Loading& (0+255),f,b
  3829  001494  D7FC               	bra	u9947
  3830  001496  D000               	nop2	
  3831  001498  0100               	movlb	0	; () banked
  3832  00149A  4BBC               	infsnz	Loading@i_1195& (0+255),f,b
  3833  00149C  2BBD               	incf	(Loading@i_1195+1)& (0+255),f,b
  3834  00149E  D7DE               	goto	l7892
  3835  0014A0                     l7902:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;sort.c: 177: }
  3839                           ;sort.c: 178: }
  3840                           ;sort.c: 179: }
  3841                           ;sort.c: 181: _delay((unsigned long)((350)*(32000000/4000.0)));
  3842  0014A0  0E0F               	movlw	15
  3843  0014A2  0100               	movlb	0	; () banked
  3844  0014A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3845  0014A6  0E35               	movlw	53
  3846  0014A8  0100               	movlb	0	; () banked
  3847  0014AA  6FB1               	movwf	??_Loading& (0+255),b
  3848  0014AC  0E51               	movlw	81
  3849  0014AE                     u9957:
  3850  0014AE  2EE8               	decfsz	wreg,f,c
  3851  0014B0  D7FE               	bra	u9957
  3852  0014B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3853  0014B4  D7FC               	bra	u9957
  3854  0014B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3855  0014B8  D7FA               	bra	u9957
  3856                           
  3857                           ;sort.c: 183: int j = 0;
  3858  0014BA  0E00               	movlw	0
  3859  0014BC  0100               	movlb	0	; () banked
  3860  0014BE  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3861  0014C0  0E00               	movlw	0
  3862  0014C2  6FC2               	movwf	Loading@j& (0+255),b
  3863                           
  3864                           ;sort.c: 184: while(IR_signal == 1){
  3865  0014C4  D151               	goto	l7990
  3866  0014C6                     l7906:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;sort.c: 185: readIR();
  3870  0014C6  EC1E  F02A         	call	_readIR	;wreg free
  3871                           
  3872                           ;sort.c: 186: if(j == 3 || j == 4){
  3873  0014CA  0E03               	movlw	3
  3874  0014CC  0100               	movlb	0	; () banked
  3875  0014CE  19C2               	xorwf	Loading@j& (0+255),w,b
  3876  0014D0  0100               	movlb	0	; () banked
  3877  0014D2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3878  0014D4  B4D8               	btfsc	status,2,c
  3879  0014D6  D007               	goto	l7912
  3880                           
  3881                           ; BSR set to: 0
  3882  0014D8  0E04               	movlw	4
  3883  0014DA  0100               	movlb	0	; () banked
  3884  0014DC  19C2               	xorwf	Loading@j& (0+255),w,b
  3885  0014DE  0100               	movlb	0	; () banked
  3886  0014E0  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3887  0014E2  A4D8               	btfss	status,2,c
  3888  0014E4  D005               	goto	l7914
  3889  0014E6                     l7912:
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;sort.c: 187: f_arm_position = 0;
  3893  0014E6  0E00               	movlw	0
  3894  0014E8  0100               	movlb	0	; () banked
  3895  0014EA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3896  0014EC  0E00               	movlw	0
  3897  0014EE  D022               	goto	L2
  3898  0014F0                     l7914:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;sort.c: 189: else if(j == 5 || j == 6){
  3902  0014F0  0E05               	movlw	5
  3903  0014F2  0100               	movlb	0	; () banked
  3904  0014F4  19C2               	xorwf	Loading@j& (0+255),w,b
  3905  0014F6  0100               	movlb	0	; () banked
  3906  0014F8  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3907  0014FA  B4D8               	btfsc	status,2,c
  3908  0014FC  D007               	goto	l807
  3909                           
  3910                           ; BSR set to: 0
  3911  0014FE  0E06               	movlw	6
  3912  001500  0100               	movlb	0	; () banked
  3913  001502  19C2               	xorwf	Loading@j& (0+255),w,b
  3914  001504  0100               	movlb	0	; () banked
  3915  001506  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3916  001508  A4D8               	btfss	status,2,c
  3917  00150A  D002               	goto	l7918
  3918  00150C                     l807:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;sort.c: 190: LATBbits.LATB2 = 1;
  3922  00150C  848A               	bsf	3978,2,c	;volatile
  3923                           
  3924                           ;sort.c: 191: }
  3925  00150E  D034               	goto	l804
  3926  001510                     l7918:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;sort.c: 192: else if(j == 7 || j == 8){
  3930  001510  0E07               	movlw	7
  3931  001512  0100               	movlb	0	; () banked
  3932  001514  19C2               	xorwf	Loading@j& (0+255),w,b
  3933  001516  0100               	movlb	0	; () banked
  3934  001518  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3935  00151A  B4D8               	btfsc	status,2,c
  3936  00151C  D007               	goto	l7922
  3937                           
  3938                           ; BSR set to: 0
  3939  00151E  0E08               	movlw	8
  3940  001520  0100               	movlb	0	; () banked
  3941  001522  19C2               	xorwf	Loading@j& (0+255),w,b
  3942  001524  0100               	movlb	0	; () banked
  3943  001526  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3944  001528  A4D8               	btfss	status,2,c
  3945  00152A  D006               	goto	l809
  3946  00152C                     l7922:
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;sort.c: 193: f_arm_position = 1;
  3950  00152C  0E00               	movlw	0
  3951  00152E  0100               	movlb	0	; () banked
  3952  001530  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3953  001532  0E01               	movlw	1
  3954  001534                     L2:
  3955  001534  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3956                           
  3957                           ;sort.c: 194: }
  3958  001536  D020               	goto	l804
  3959  001538                     l809:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;sort.c: 195: else if(j % 2 == 0){
  3963  001538  0100               	movlb	0	; () banked
  3964  00153A  B1C2               	btfsc	Loading@j& (0+255),0,b
  3965  00153C  D01D               	goto	l804
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;sort.c: 196: LATBbits.LATB2 = !LATBbits.LATB2;
  3969  00153E  B48A               	btfsc	3978,2,c	;volatile
  3970  001540  D004               	goto	u6670
  3971  001542  0100               	movlb	0	; () banked
  3972  001544  6BB1               	clrf	??_Loading& (0+255),b
  3973  001546  2BB1               	incf	??_Loading& (0+255),f,b
  3974  001548  D002               	goto	u6688
  3975  00154A                     u6670:
  3976  00154A  0100               	movlb	0	; () banked
  3977  00154C  6BB1               	clrf	??_Loading& (0+255),b
  3978  00154E                     u6688:
  3979  00154E  0100               	movlb	0	; () banked
  3980  001550  47B1               	rlncf	??_Loading& (0+255),f,b
  3981  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3982  001554  508A               	movf	3978,w,c	;volatile
  3983  001556  0100               	movlb	0	; () banked
  3984  001558  19B1               	xorwf	??_Loading& (0+255),w,b
  3985  00155A  0BFB               	andlw	-5
  3986  00155C  19B1               	xorwf	??_Loading& (0+255),w,b
  3987  00155E  6E8A               	movwf	3978,c	;volatile
  3988                           
  3989                           ;sort.c: 197: f_arm_position = !f_arm_position;
  3990  001560  0100               	movlb	0	; () banked
  3991  001562  51EE               	movf	_f_arm_position& (0+255),w,b	;volatile
  3992  001564  0100               	movlb	0	; () banked
  3993  001566  11EF               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3994  001568  A4D8               	btfss	status,2,c
  3995  00156A  D002               	goto	u6690
  3996  00156C  0E01               	movlw	1
  3997  00156E  D001               	goto	u6700
  3998  001570                     u6690:
  3999  001570  0E00               	movlw	0
  4000  001572                     u6700:
  4001  001572  0100               	movlb	0	; () banked
  4002  001574  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4003  001576  6BEF               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4004  001578                     l804:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;sort.c: 198: }
  4008                           ;sort.c: 201: if(IR_signal==1){
  4009  001578  0100               	movlb	0	; () banked
  4010  00157A  05E6               	decf	_IR_signal& (0+255),w,b
  4011  00157C  0100               	movlb	0	; () banked
  4012  00157E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4013  001580  A4D8               	btfss	status,2,c
  4014  001582  D0D6               	goto	l7978
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;sort.c: 202: _delay((unsigned long)((350)*(32000000/4000.0)));
  4018  001584  0E0F               	movlw	15
  4019  001586  0100               	movlb	0	; () banked
  4020  001588  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4021  00158A  0E35               	movlw	53
  4022  00158C  0100               	movlb	0	; () banked
  4023  00158E  6FB1               	movwf	??_Loading& (0+255),b
  4024  001590  0E51               	movlw	81
  4025  001592                     u9967:
  4026  001592  2EE8               	decfsz	wreg,f,c
  4027  001594  D7FE               	bra	u9967
  4028  001596  2FB1               	decfsz	??_Loading& (0+255),f,b
  4029  001598  D7FC               	bra	u9967
  4030  00159A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4031  00159C  D7FA               	bra	u9967
  4032                           
  4033                           ;sort.c: 203: readIR();
  4034  00159E  EC1E  F02A         	call	_readIR	;wreg free
  4035                           
  4036                           ;sort.c: 204: if(IR_signal==1){
  4037  0015A2  0100               	movlb	0	; () banked
  4038  0015A4  05E6               	decf	_IR_signal& (0+255),w,b
  4039  0015A6  0100               	movlb	0	; () banked
  4040  0015A8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4041  0015AA  A4D8               	btfss	status,2,c
  4042  0015AC  D0BD               	goto	l815
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;sort.c: 205: if(sensor_outputs[0]){
  4046  0015AE  0100               	movlb	0	; () banked
  4047  0015B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  4048  0015B2  0100               	movlb	0	; () banked
  4049  0015B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4050  0015B6  B4D8               	btfsc	status,2,c
  4051  0015B8  D011               	goto	l7940
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;sort.c: 206: LATAbits.LATA4 = 1;
  4055  0015BA  8889               	bsf	3977,4,c	;volatile
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;sort.c: 207: _delay((unsigned long)((250)*(32000000/4000.0)));
  4059  0015BC  0E0B               	movlw	11
  4060  0015BE  0100               	movlb	0	; () banked
  4061  0015C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4062  0015C2  0E26               	movlw	38
  4063  0015C4  0100               	movlb	0	; () banked
  4064  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  4065  0015C8  0E5D               	movlw	93
  4066  0015CA                     u9977:
  4067  0015CA  2EE8               	decfsz	wreg,f,c
  4068  0015CC  D7FE               	bra	u9977
  4069  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4070  0015D0  D7FC               	bra	u9977
  4071  0015D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4072  0015D4  D7FA               	bra	u9977
  4073  0015D6  D000               	nop2	
  4074                           
  4075                           ;sort.c: 208: LATAbits.LATA4 = 0;
  4076  0015D8  9889               	bcf	3977,4,c	;volatile
  4077                           
  4078                           ;sort.c: 209: }
  4079  0015DA  D0A6               	goto	l815
  4080  0015DC                     l7940:
  4081                           
  4082                           ;sort.c: 210: else{
  4083                           ;sort.c: 211: for(int i = 0; i<25; i++){
  4084  0015DC  0E00               	movlw	0
  4085  0015DE  0100               	movlb	0	; () banked
  4086  0015E0  6FBF               	movwf	(Loading@i_1197+1)& (0+255),b
  4087  0015E2  0E00               	movlw	0
  4088  0015E4  6FBE               	movwf	Loading@i_1197& (0+255),b
  4089                           
  4090                           ; BSR set to: 0
  4091  0015E6  0100               	movlb	0	; () banked
  4092  0015E8  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4093  0015EA  D079               	goto	l7970
  4094  0015EC  0100               	movlb	0	; () banked
  4095  0015EE  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4096  0015F0  E106               	bnz	u6740
  4097  0015F2  0E19               	movlw	25
  4098  0015F4  0100               	movlb	0	; () banked
  4099  0015F6  5DBE               	subwf	Loading@i_1197& (0+255),w,b
  4100  0015F8  B0D8               	btfsc	status,0,c
  4101  0015FA  D096               	goto	l815
  4102  0015FC  D070               	goto	l7970
  4103  0015FE                     u6740:
  4104                           
  4105                           ; BSR set to: 0
  4106  0015FE  D094               	goto	l815
  4107  001600                     l821:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 214: LATAbits.LATA4 = 1;
  4111  001600  8889               	bsf	3977,4,c	;volatile
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;sort.c: 215: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4115  001602  0E4E               	movlw	78
  4116  001604  0100               	movlb	0	; () banked
  4117  001606  6FB1               	movwf	??_Loading& (0+255),b
  4118  001608  0EEB               	movlw	235
  4119  00160A                     u9987:
  4120  00160A  2EE8               	decfsz	wreg,f,c
  4121  00160C  D7FE               	bra	u9987
  4122  00160E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4123  001610  D7FC               	bra	u9987
  4124                           
  4125                           ;sort.c: 216: LATAbits.LATA4 = 0;
  4126  001612  9889               	bcf	3977,4,c	;volatile
  4127                           
  4128                           ;sort.c: 217: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4129  001614  0E1A               	movlw	26
  4130  001616  0100               	movlb	0	; () banked
  4131  001618  6FB1               	movwf	??_Loading& (0+255),b
  4132  00161A  0EF8               	movlw	248
  4133  00161C                     u9997:
  4134  00161C  2EE8               	decfsz	wreg,f,c
  4135  00161E  D7FE               	bra	u9997
  4136  001620  2FB1               	decfsz	??_Loading& (0+255),f,b
  4137  001622  D7FC               	bra	u9997
  4138  001624  D05A               	goto	L6
  4139  001626                     l823:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;sort.c: 220: LATAbits.LATA4 = 1;
  4143  001626  8889               	bsf	3977,4,c	;volatile
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;sort.c: 221: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4147  001628  0E54               	movlw	84
  4148  00162A  0100               	movlb	0	; () banked
  4149  00162C  6FB1               	movwf	??_Loading& (0+255),b
  4150  00162E  0E1C               	movlw	28
  4151  001630                     u10007:
  4152  001630  2EE8               	decfsz	wreg,f,c
  4153  001632  D7FE               	bra	u10007
  4154  001634  2FB1               	decfsz	??_Loading& (0+255),f,b
  4155  001636  D7FC               	bra	u10007
  4156  001638  F000               	nop	
  4157                           
  4158                           ;sort.c: 222: LATAbits.LATA4 = 0;
  4159  00163A  9889               	bcf	3977,4,c	;volatile
  4160                           
  4161                           ;sort.c: 223: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4162  00163C  0E15               	movlw	21
  4163  00163E  0100               	movlb	0	; () banked
  4164  001640  6FB1               	movwf	??_Loading& (0+255),b
  4165  001642  0EC6               	movlw	198
  4166  001644                     u10017:
  4167  001644  2EE8               	decfsz	wreg,f,c
  4168  001646  D7FE               	bra	u10017
  4169  001648  2FB1               	decfsz	??_Loading& (0+255),f,b
  4170  00164A  D7FC               	bra	u10017
  4171  00164C  D046               	goto	L6
  4172  00164E                     l824:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 226: LATAbits.LATA4 = 1;
  4176  00164E  8889               	bsf	3977,4,c	;volatile
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;sort.c: 227: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4180  001650  0E59               	movlw	89
  4181  001652  0100               	movlb	0	; () banked
  4182  001654  6FB1               	movwf	??_Loading& (0+255),b
  4183  001656  0E4E               	movlw	78
  4184  001658                     u10027:
  4185  001658  2EE8               	decfsz	wreg,f,c
  4186  00165A  D7FE               	bra	u10027
  4187  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4188  00165E  D7FC               	bra	u10027
  4189  001660  F000               	nop	
  4190                           
  4191                           ;sort.c: 228: LATAbits.LATA4 = 0;
  4192  001662  9889               	bcf	3977,4,c	;volatile
  4193                           
  4194                           ;sort.c: 229: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4195  001664  0E10               	movlw	16
  4196  001666  0100               	movlb	0	; () banked
  4197  001668  6FB1               	movwf	??_Loading& (0+255),b
  4198  00166A  0E94               	movlw	148
  4199  00166C                     u10037:
  4200  00166C  2EE8               	decfsz	wreg,f,c
  4201  00166E  D7FE               	bra	u10037
  4202  001670  2FB1               	decfsz	??_Loading& (0+255),f,b
  4203  001672  D7FC               	bra	u10037
  4204  001674  D032               	goto	L6
  4205  001676                     l825:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;sort.c: 232: LATAbits.LATA4 = 1;
  4209  001676  8889               	bsf	3977,4,c	;volatile
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;sort.c: 233: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4213  001678  0E5E               	movlw	94
  4214  00167A  0100               	movlb	0	; () banked
  4215  00167C  6FB1               	movwf	??_Loading& (0+255),b
  4216  00167E  0E80               	movlw	128
  4217  001680                     u10047:
  4218  001680  2EE8               	decfsz	wreg,f,c
  4219  001682  D7FE               	bra	u10047
  4220  001684  2FB1               	decfsz	??_Loading& (0+255),f,b
  4221  001686  D7FC               	bra	u10047
  4222  001688  F000               	nop	
  4223                           
  4224                           ;sort.c: 234: LATAbits.LATA4 = 0;
  4225  00168A  9889               	bcf	3977,4,c	;volatile
  4226                           
  4227                           ;sort.c: 235: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4228  00168C  0E0B               	movlw	11
  4229  00168E  0100               	movlb	0	; () banked
  4230  001690  6FB1               	movwf	??_Loading& (0+255),b
  4231  001692  0E62               	movlw	98
  4232  001694                     u10057:
  4233  001694  2EE8               	decfsz	wreg,f,c
  4234  001696  D7FE               	bra	u10057
  4235  001698  2FB1               	decfsz	??_Loading& (0+255),f,b
  4236  00169A  D7FC               	bra	u10057
  4237  00169C  D01E               	goto	L6
  4238  00169E                     l826:
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;sort.c: 238: LATAbits.LATA4 = 1;
  4242  00169E  8889               	bsf	3977,4,c	;volatile
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;sort.c: 239: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4246  0016A0  0E63               	movlw	99
  4247  0016A2  0100               	movlb	0	; () banked
  4248  0016A4  6FB1               	movwf	??_Loading& (0+255),b
  4249  0016A6  0EB2               	movlw	178
  4250  0016A8                     u10067:
  4251  0016A8  2EE8               	decfsz	wreg,f,c
  4252  0016AA  D7FE               	bra	u10067
  4253  0016AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  4254  0016AE  D7FC               	bra	u10067
  4255  0016B0  F000               	nop	
  4256                           
  4257                           ;sort.c: 240: LATAbits.LATA4 = 0;
  4258  0016B2  9889               	bcf	3977,4,c	;volatile
  4259                           
  4260                           ;sort.c: 241: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4261  0016B4  0E34               	movlw	52
  4262  0016B6  0100               	movlb	0	; () banked
  4263  0016B8  6FB1               	movwf	??_Loading& (0+255),b
  4264  0016BA  0EF1               	movlw	241
  4265  0016BC                     u10077:
  4266  0016BC  2EE8               	decfsz	wreg,f,c
  4267  0016BE  D7FE               	bra	u10077
  4268  0016C0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4269  0016C2  D7FC               	bra	u10077
  4270  0016C4  D000               	nop2	
  4271                           
  4272                           ;sort.c: 242: break;
  4273  0016C6  D026               	goto	l7972
  4274  0016C8                     l827:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;sort.c: 244: LATAbits.LATA4 = 1;
  4278  0016C8  8889               	bsf	3977,4,c	;volatile
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;sort.c: 245: _delay((unsigned long)((10)*(32000000/4000.0)));
  4282  0016CA  0E68               	movlw	104
  4283  0016CC  0100               	movlb	0	; () banked
  4284  0016CE  6FB1               	movwf	??_Loading& (0+255),b
  4285  0016D0  0EE4               	movlw	228
  4286  0016D2                     u10087:
  4287  0016D2  2EE8               	decfsz	wreg,f,c
  4288  0016D4  D7FE               	bra	u10087
  4289  0016D6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4290  0016D8  D7FC               	bra	u10087
  4291  0016DA                     L6:
  4292  0016DA  F000               	nop	
  4293                           
  4294                           ;sort.c: 247: }
  4295                           
  4296                           ;sort.c: 246: break;
  4297  0016DC  D01B               	goto	l7972
  4298  0016DE                     l7970:
  4299  0016DE  C0C2  F0B1         	movff	Loading@j,??_Loading
  4300  0016E2  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4301                           
  4302                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4303                           ; Switch size 1, requested type "space"
  4304                           ; Number of cases is 1, Range of values is 0 to 0
  4305                           ; switch strategies available:
  4306                           ; Name         Instructions Cycles
  4307                           ; simple_byte            4     3 (average)
  4308                           ;	Chosen strategy is simple_byte
  4309  0016E6  0100               	movlb	0	; () banked
  4310  0016E8  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4311  0016EA  0A00               	xorlw	0	; case 0
  4312  0016EC  A4D8               	btfss	status,2,c
  4313  0016EE  D7EC               	goto	l827
  4314                           
  4315                           ; BSR set to: 0
  4316                           ; Switch size 1, requested type "space"
  4317                           ; Number of cases is 5, Range of values is 0 to 4
  4318                           ; switch strategies available:
  4319                           ; Name         Instructions Cycles
  4320                           ; simple_byte           16     9 (average)
  4321                           ;	Chosen strategy is simple_byte
  4322  0016F0  0100               	movlb	0	; () banked
  4323  0016F2  51B1               	movf	??_Loading& (0+255),w,b
  4324  0016F4  0A00               	xorlw	0	; case 0
  4325  0016F6  B4D8               	btfsc	status,2,c
  4326  0016F8  D783               	goto	l821
  4327  0016FA  0A01               	xorlw	1	; case 1
  4328  0016FC  B4D8               	btfsc	status,2,c
  4329  0016FE  D793               	goto	l823
  4330  001700  0A03               	xorlw	3	; case 2
  4331  001702  B4D8               	btfsc	status,2,c
  4332  001704  D7A4               	goto	l824
  4333  001706  0A01               	xorlw	1	; case 3
  4334  001708  B4D8               	btfsc	status,2,c
  4335  00170A  D7B5               	goto	l825
  4336  00170C  0A07               	xorlw	7	; case 4
  4337  00170E  B4D8               	btfsc	status,2,c
  4338  001710  D7C6               	goto	l826
  4339  001712  D7DA               	goto	l827
  4340  001714                     l7972:
  4341  001714  0100               	movlb	0	; () banked
  4342  001716  4BBE               	infsnz	Loading@i_1197& (0+255),f,b
  4343  001718  2BBF               	incf	(Loading@i_1197+1)& (0+255),f,b
  4344                           
  4345                           ; BSR set to: 0
  4346  00171A  0100               	movlb	0	; () banked
  4347  00171C  BFBF               	btfsc	(Loading@i_1197+1)& (0+255),7,b
  4348  00171E  D7DF               	goto	l7970
  4349  001720  0100               	movlb	0	; () banked
  4350  001722  51BF               	movf	(Loading@i_1197+1)& (0+255),w,b
  4351  001724  E101               	bnz	l815
  4352  001726  D765               	goto	L7
  4353  001728                     l815:
  4354                           
  4355                           ;sort.c: 248: }
  4356                           ;sort.c: 249: }
  4357                           ;sort.c: 250: }
  4358                           ;sort.c: 251: LATAbits.LATA4 = 0;
  4359  001728  9889               	bcf	3977,4,c	;volatile
  4360                           
  4361                           ;sort.c: 252: j++;
  4362  00172A  0100               	movlb	0	; () banked
  4363  00172C  4BC2               	infsnz	Loading@j& (0+255),f,b
  4364  00172E  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4365  001730                     l7978:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;sort.c: 253: }
  4369                           ;sort.c: 255: if(!IR_signal){
  4370  001730  0100               	movlb	0	; () banked
  4371  001732  51E6               	movf	_IR_signal& (0+255),w,b
  4372  001734  0100               	movlb	0	; () banked
  4373  001736  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4374  001738  A4D8               	btfss	status,2,c
  4375  00173A  D016               	goto	l7990
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;sort.c: 256: _delay((unsigned long)((500)*(32000000/4000.0)));
  4379  00173C  0E15               	movlw	21
  4380  00173E  0100               	movlb	0	; () banked
  4381  001740  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4382  001742  0E4B               	movlw	75
  4383  001744  0100               	movlb	0	; () banked
  4384  001746  6FB1               	movwf	??_Loading& (0+255),b
  4385  001748  0EBE               	movlw	190
  4386  00174A                     u10097:
  4387  00174A  2EE8               	decfsz	wreg,f,c
  4388  00174C  D7FE               	bra	u10097
  4389  00174E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4390  001750  D7FC               	bra	u10097
  4391  001752  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4392  001754  D7FA               	bra	u10097
  4393  001756  F000               	nop	
  4394                           
  4395                           ;sort.c: 257: readIR();
  4396  001758  EC1E  F02A         	call	_readIR	;wreg free
  4397                           
  4398                           ;sort.c: 258: if(IR_signal==1){
  4399  00175C  0100               	movlb	0	; () banked
  4400  00175E  05E6               	decf	_IR_signal& (0+255),w,b
  4401  001760  0100               	movlb	0	; () banked
  4402  001762  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4403  001764  A4D8               	btfss	status,2,c
  4404  001766  D006               	goto	l831
  4405  001768                     l7990:
  4406                           
  4407                           ; BSR set to: 0
  4408  001768  0100               	movlb	0	; () banked
  4409  00176A  05E6               	decf	_IR_signal& (0+255),w,b
  4410  00176C  0100               	movlb	0	; () banked
  4411  00176E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4412  001770  B4D8               	btfsc	status,2,c
  4413  001772  D6A9               	goto	l7906
  4414  001774                     l831:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;sort.c: 263: }
  4418                           ;sort.c: 264: }
  4419                           ;sort.c: 265: }
  4420                           ;sort.c: 266: LATBbits.LATB2 = 0;
  4421  001774  948A               	bcf	3978,2,c	;volatile
  4422  001776                     l7992:
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;sort.c: 267: }
  4426                           ;sort.c: 268: f_can_coming_to_ID = 1;
  4427  001776  0E00               	movlw	0
  4428  001778  0101               	movlb	1	; () banked
  4429  00177A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4430  00177C  0E01               	movlw	1
  4431  00177E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4432                           
  4433                           ; BSR set to: 1
  4434                           
  4435                           ; BSR set to: 1
  4436  001780  0012               	return	
  4437  001782                     __end_of_Loading:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           postdec1	equ	0xFE5
  4448                           fsr1l	equ	0xFE1
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function _initSortTimer *****************
  4452 ;; Defined at:
  4453 ;;		line 451 in file "sort.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  i               2    8[BANK0 ] int 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        5 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:   10
  4474 ;; This function calls:
  4475 ;;		_getRTC
  4476 ;; This function is called by:
  4477 ;;		_Loading
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text3
  4482  004B4C                     __ptext3:
  4483                           	opt stack 0
  4484  004B4C                     _initSortTimer:
  4485                           	opt stack 18
  4486                           
  4487                           ;sort.c: 453: getRTC();
  4488                           
  4489                           ;incstack = 0
  4490  004B4C  EC92  F026         	call	_getRTC	;wreg free
  4491                           
  4492                           ;sort.c: 454: for(int i = 0; i < 7; i++){
  4493  004B50  0E00               	movlw	0
  4494  004B52  0100               	movlb	0	; () banked
  4495  004B54  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4496  004B56  0E00               	movlw	0
  4497  004B58  6F88               	movwf	initSortTimer@i& (0+255),b
  4498  004B5A                     l7298:
  4499                           
  4500                           ; BSR set to: 0
  4501  004B5A  0100               	movlb	0	; () banked
  4502  004B5C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4503  004B5E  D008               	goto	l7302
  4504  004B60  0100               	movlb	0	; () banked
  4505  004B62  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4506  004B64  E140               	bnz	l7308
  4507  004B66  0E07               	movlw	7
  4508  004B68  0100               	movlb	0	; () banked
  4509  004B6A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4510  004B6C  B0D8               	btfsc	status,0,c
  4511  004B6E  D03B               	goto	l7308
  4512  004B70                     l7302:
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;sort.c: 455: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4516  004B70  0E1C               	movlw	low _time
  4517  004B72  0100               	movlb	0	; () banked
  4518  004B74  2588               	addwf	initSortTimer@i& (0+255),w,b
  4519  004B76  6ED9               	movwf	fsr2l,c
  4520  004B78  0E01               	movlw	high _time
  4521  004B7A  0100               	movlb	0	; () banked
  4522  004B7C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4523  004B7E  6EDA               	movwf	fsr2h,c
  4524  004B80  50DF               	movf	indf2,w,c
  4525  004B82  0100               	movlb	0	; () banked
  4526  004B84  6F85               	movwf	??_initSortTimer& (0+255),b
  4527  004B86  0100               	movlb	0	; () banked
  4528  004B88  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4529  004B8A  0E0F               	movlw	15
  4530  004B8C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4531  004B8E  0E0F               	movlw	15
  4532  004B90  0100               	movlb	0	; () banked
  4533  004B92  1785               	andwf	??_initSortTimer& (0+255),f,b
  4534  004B94  0100               	movlb	0	; () banked
  4535  004B96  5185               	movf	??_initSortTimer& (0+255),w,b
  4536  004B98  0D0A               	mullw	10
  4537  004B9A  0E1C               	movlw	low _time
  4538  004B9C  0100               	movlb	0	; () banked
  4539  004B9E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4540  004BA0  6ED9               	movwf	fsr2l,c
  4541  004BA2  0E01               	movlw	high _time
  4542  004BA4  0100               	movlb	0	; () banked
  4543  004BA6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4544  004BA8  6EDA               	movwf	fsr2h,c
  4545  004BAA  50DF               	movf	indf2,w,c
  4546  004BAC  0B0F               	andlw	15
  4547  004BAE  0100               	movlb	0	; () banked
  4548  004BB0  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4549  004BB2  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4550  004BB4  50F3               	movf	prodl,w,c
  4551  004BB6  0100               	movlb	0	; () banked
  4552  004BB8  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4553  004BBA  50F4               	movf	prodh,w,c
  4554  004BBC  0100               	movlb	0	; () banked
  4555  004BBE  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4556  004BC0  90D8               	bcf	status,0,c
  4557  004BC2  0100               	movlb	0	; () banked
  4558  004BC4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4559  004BC6  6ED9               	movwf	fsr2l,c
  4560  004BC8  0100               	movlb	0	; () banked
  4561  004BCA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4562  004BCC  6EDA               	movwf	fsr2h,c
  4563  004BCE  0E0E               	movlw	low _startTime
  4564  004BD0  26D9               	addwf	fsr2l,f,c
  4565  004BD2  0E01               	movlw	high _startTime
  4566  004BD4  22DA               	addwfc	fsr2h,f,c
  4567  004BD6  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4568  004BDA  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4569                           
  4570                           ; BSR set to: 0
  4571  004BDE  0100               	movlb	0	; () banked
  4572  004BE0  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4573  004BE2  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4574  004BE4  D7BA               	goto	l7298
  4575  004BE6                     l7308:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;sort.c: 456: }
  4579                           ;sort.c: 458: T0CON = 0b00010111;
  4580  004BE6  0E17               	movlw	23
  4581  004BE8  6ED5               	movwf	4053,c	;volatile
  4582                           
  4583                           ;sort.c: 467: TMR0H = 0b10000101;
  4584  004BEA  0E85               	movlw	133
  4585  004BEC  6ED7               	movwf	4055,c	;volatile
  4586                           
  4587                           ;sort.c: 468: TMR0L = 0b11101110;
  4588  004BEE  0EEE               	movlw	238
  4589  004BF0  6ED6               	movwf	4054,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;sort.c: 469: TMR0ON = 1;
  4593  004BF2  8ED5               	bsf	4053,7,c	;volatile
  4594                           
  4595                           ; BSR set to: 0
  4596  004BF4  0012               	return		;funcret
  4597  004BF6                     __end_of_initSortTimer:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           postdec1	equ	0xFE5
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _initGlobalVars *****************
  4617 ;; Defined at:
  4618 ;;		line 419 in file "sort.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        0 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    7
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_Loading
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text4
  4647  004914                     __ptext4:
  4648                           	opt stack 0
  4649  004914                     _initGlobalVars:
  4650                           	opt stack 21
  4651                           
  4652                           ;sort.c: 421: first = 0;
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;incstack = 0
  4656  004914  0E00               	movlw	0
  4657  004916  0101               	movlb	1	; () banked
  4658  004918  6F3A               	movwf	(_first+1)& (0+255),b
  4659  00491A  0E00               	movlw	0
  4660  00491C  6F39               	movwf	_first& (0+255),b
  4661                           
  4662                           ;sort.c: 424: f_loadingNewCan = 0;
  4663  00491E  0E00               	movlw	0
  4664  004920  0100               	movlb	0	; () banked
  4665  004922  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4666  004924  0E00               	movlw	0
  4667  004926  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4668                           
  4669                           ;sort.c: 425: f_lastCan = 0;
  4670  004928  0E00               	movlw	0
  4671  00492A  0100               	movlb	0	; () banked
  4672  00492C  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4673  00492E  0E00               	movlw	0
  4674  004930  6FF0               	movwf	_f_lastCan& (0+255),b
  4675                           
  4676                           ;sort.c: 426: f_ID_receive = 1;
  4677  004932  0E00               	movlw	0
  4678  004934  0101               	movlb	1	; () banked
  4679  004936  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4680  004938  0E01               	movlw	1
  4681  00493A  6F2F               	movwf	_f_ID_receive& (0+255),b
  4682                           
  4683                           ;sort.c: 427: f_can_coming_to_ID = 0;
  4684  00493C  0E00               	movlw	0
  4685  00493E  0101               	movlb	1	; () banked
  4686  004940  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4687  004942  0E00               	movlw	0
  4688  004944  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4689                           
  4690                           ;sort.c: 428: f_can_coming_to_distribution = 0;
  4691  004946  0E00               	movlw	0
  4692  004948  0101               	movlb	1	; () banked
  4693  00494A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4694  00494C  0E00               	movlw	0
  4695  00494E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4696                           
  4697                           ;sort.c: 429: f_can_distributed = 1;
  4698  004950  0E00               	movlw	0
  4699  004952  0101               	movlb	1	; () banked
  4700  004954  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4701  004956  0E01               	movlw	1
  4702  004958  6F35               	movwf	_f_can_distributed& (0+255),b
  4703                           
  4704                           ;sort.c: 430: f_most_recent_sort_time = 0;
  4705  00495A  0E00               	movlw	0
  4706  00495C  0101               	movlb	1	; () banked
  4707  00495E  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4708  004960  0E00               	movlw	0
  4709  004962  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4710                           
  4711                           ;sort.c: 433: count_total = 0;
  4712  004964  0E00               	movlw	0
  4713  004966  0100               	movlb	0	; () banked
  4714  004968  6FFF               	movwf	(_count_total+1)& (0+255),b
  4715  00496A  0E00               	movlw	0
  4716  00496C  6FFE               	movwf	_count_total& (0+255),b
  4717                           
  4718                           ;sort.c: 434: count_pop_no_tab = 0;
  4719  00496E  0E00               	movlw	0
  4720  004970  0101               	movlb	1	; () banked
  4721  004972  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4722  004974  0E00               	movlw	0
  4723  004976  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4724                           
  4725                           ;sort.c: 435: count_pop_w_tab = 0;
  4726  004978  0E00               	movlw	0
  4727  00497A  0101               	movlb	1	; () banked
  4728  00497C  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4729  00497E  0E00               	movlw	0
  4730  004980  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4731                           
  4732                           ;sort.c: 436: count_can_w_lab = 0;
  4733  004982  0E00               	movlw	0
  4734  004984  0101               	movlb	1	; () banked
  4735  004986  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4736  004988  0E00               	movlw	0
  4737  00498A  6F25               	movwf	_count_can_w_lab& (0+255),b
  4738                           
  4739                           ;sort.c: 437: count_can_no_lab = 0;
  4740  00498C  0E00               	movlw	0
  4741  00498E  0101               	movlb	1	; () banked
  4742  004990  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4743  004992  0E00               	movlw	0
  4744  004994  6F23               	movwf	_count_can_no_lab& (0+255),b
  4745                           
  4746                           ;sort.c: 440: most_recent_sort_time = 999;
  4747  004996  0E03               	movlw	3
  4748  004998  6E6A               	movwf	_most_recent_sort_time+1,c
  4749  00499A  0EE7               	movlw	231
  4750  00499C  6E69               	movwf	_most_recent_sort_time,c
  4751                           
  4752                           ;sort.c: 443: servo_timer_counter = 0;
  4753  00499E  0E00               	movlw	0
  4754  0049A0  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4755  0049A2  0E00               	movlw	0
  4756  0049A4  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4757                           
  4758                           ;sort.c: 444: servo_timer_target = 9999;
  4759  0049A6  0E27               	movlw	39
  4760  0049A8  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4761  0049AA  0E0F               	movlw	15
  4762  0049AC  6E6F               	movwf	_servo_timer_target,c	;volatile
  4763                           
  4764                           ;sort.c: 445: timer2_counter = 0;
  4765  0049AE  0E00               	movlw	0
  4766  0049B0  6E74               	movwf	_timer2_counter+1,c	;volatile
  4767  0049B2  0E00               	movlw	0
  4768  0049B4  6E73               	movwf	_timer2_counter,c	;volatile
  4769                           
  4770                           ;sort.c: 446: f_arm_position = 0;
  4771  0049B6  0E00               	movlw	0
  4772  0049B8  0100               	movlb	0	; () banked
  4773  0049BA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4774  0049BC  0E00               	movlw	0
  4775  0049BE  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;sort.c: 447: pan_servo_state = -1;
  4779  0049C0  686B               	setf	_pan_servo_state,c	;volatile
  4780  0049C2  686C               	setf	_pan_servo_state+1,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;sort.c: 448: tilt_servo_state = -1;
  4784  0049C4  6871               	setf	_tilt_servo_state,c	;volatile
  4785  0049C6  6872               	setf	_tilt_servo_state+1,c	;volatile
  4786                           
  4787                           ;sort.c: 449: f_panning_to_bin = 0;
  4788  0049C8  0E00               	movlw	0
  4789  0049CA  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4790  0049CC  0E00               	movlw	0
  4791  0049CE  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4792                           
  4793                           ; BSR set to: 0
  4794  0049D0  0012               	return		;funcret
  4795  0049D2                     __end_of_initGlobalVars:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           postdec1	equ	0xFE5
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _getMAG *****************
  4815 ;; Defined at:
  4816 ;;		line 548 in file "sort.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    9
  4837 ;; This function calls:
  4838 ;;		_readMAG
  4839 ;; This function is called by:
  4840 ;;		_Loading
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text5
  4845  0056B6                     __ptext5:
  4846                           	opt stack 0
  4847  0056B6                     _getMAG:
  4848                           	opt stack 19
  4849                           
  4850                           ;sort.c: 549: readMAG();
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854  0056B6  EC44  F02A         	call	_readMAG	;wreg free
  4855                           
  4856                           ;sort.c: 551: if(MAG_signal==1){
  4857  0056BA  0100               	movlb	0	; () banked
  4858  0056BC  05E8               	decf	_MAG_signal& (0+255),w,b
  4859  0056BE  0100               	movlb	0	; () banked
  4860  0056C0  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4861  0056C2  A4D8               	btfss	status,2,c
  4862  0056C4  0012               	return	
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;sort.c: 552: _delay((unsigned long)((500)*(32000000/4000.0)));
  4866  0056C6  0E15               	movlw	21
  4867  0056C8  0100               	movlb	0	; () banked
  4868  0056CA  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4869  0056CC  0E4B               	movlw	75
  4870  0056CE  0100               	movlb	0	; () banked
  4871  0056D0  6F86               	movwf	??_getMAG& (0+255),b
  4872  0056D2  0EBE               	movlw	190
  4873  0056D4                     u10107:
  4874  0056D4  2EE8               	decfsz	wreg,f,c
  4875  0056D6  D7FE               	bra	u10107
  4876  0056D8  2F86               	decfsz	??_getMAG& (0+255),f,b
  4877  0056DA  D7FC               	bra	u10107
  4878  0056DC  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4879  0056DE  D7FA               	bra	u10107
  4880  0056E0  F000               	nop	
  4881                           
  4882                           ;sort.c: 553: readMAG();
  4883  0056E2  EC44  F02A         	call	_readMAG	;wreg free
  4884  0056E6  0012               	return	
  4885  0056E8                     __end_of_getMAG:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postdec1	equ	0xFE5
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _getIR *****************
  4905 ;; Defined at:
  4906 ;;		line 532 in file "sort.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  i               2    7[BANK0 ] int 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;Total ram usage:        3 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    9
  4927 ;; This function calls:
  4928 ;;		_readIR
  4929 ;; This function is called by:
  4930 ;;		_Loading
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text6
  4935  004FA4                     __ptext6:
  4936                           	opt stack 0
  4937  004FA4                     _getIR:
  4938                           	opt stack 19
  4939                           
  4940                           ;sort.c: 533: readIR();
  4941                           
  4942                           ;incstack = 0
  4943  004FA4  EC1E  F02A         	call	_readIR	;wreg free
  4944                           
  4945                           ;sort.c: 534: for(int i = 0; i < 150; i++){
  4946  004FA8  0E00               	movlw	0
  4947  004FAA  0100               	movlb	0	; () banked
  4948  004FAC  6F88               	movwf	(getIR@i+1)& (0+255),b
  4949  004FAE  0E00               	movlw	0
  4950  004FB0  6F87               	movwf	getIR@i& (0+255),b
  4951  004FB2                     l7398:
  4952                           
  4953                           ; BSR set to: 0
  4954  004FB2  0100               	movlb	0	; () banked
  4955  004FB4  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4956  004FB6  D008               	goto	l7402
  4957  004FB8  0100               	movlb	0	; () banked
  4958  004FBA  5188               	movf	(getIR@i+1)& (0+255),w,b
  4959  004FBC  E11A               	bnz	l7414
  4960  004FBE  0E96               	movlw	150
  4961  004FC0  0100               	movlb	0	; () banked
  4962  004FC2  5D87               	subwf	getIR@i& (0+255),w,b
  4963  004FC4  B0D8               	btfsc	status,0,c
  4964  004FC6  D015               	goto	l7414
  4965  004FC8                     l7402:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;sort.c: 535: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4969  004FC8  0E06               	movlw	6
  4970  004FCA  0100               	movlb	0	; () banked
  4971  004FCC  6F86               	movwf	??_getIR& (0+255),b
  4972  004FCE  0E30               	movlw	48
  4973  004FD0                     u10117:
  4974  004FD0  2EE8               	decfsz	wreg,f,c
  4975  004FD2  D7FE               	bra	u10117
  4976  004FD4  2F86               	decfsz	??_getIR& (0+255),f,b
  4977  004FD6  D7FC               	bra	u10117
  4978  004FD8  F000               	nop	
  4979                           
  4980                           ;sort.c: 536: readIR();
  4981  004FDA  EC1E  F02A         	call	_readIR	;wreg free
  4982                           
  4983                           ;sort.c: 537: if(!IR_signal){
  4984  004FDE  0100               	movlb	0	; () banked
  4985  004FE0  51E6               	movf	_IR_signal& (0+255),w,b
  4986  004FE2  0100               	movlb	0	; () banked
  4987  004FE4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4988  004FE6  B4D8               	btfsc	status,2,c
  4989  004FE8  D004               	goto	l7414
  4990                           
  4991                           ; BSR set to: 0
  4992                           
  4993                           ; BSR set to: 0
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;sort.c: 538: break;
  4997  004FEA  0100               	movlb	0	; () banked
  4998  004FEC  4B87               	infsnz	getIR@i& (0+255),f,b
  4999  004FEE  2B88               	incf	(getIR@i+1)& (0+255),f,b
  5000  004FF0  D7E0               	goto	l7398
  5001  004FF2                     l7414:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;sort.c: 539: }
  5005                           ;sort.c: 540: }
  5006                           ;sort.c: 541: if(IR_signal==1){
  5007  004FF2  0100               	movlb	0	; () banked
  5008  004FF4  05E6               	decf	_IR_signal& (0+255),w,b
  5009  004FF6  0100               	movlb	0	; () banked
  5010  004FF8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  5011  004FFA  A4D8               	btfss	status,2,c
  5012  004FFC  D006               	goto	l7418
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;sort.c: 542: f_loadingNewCan = 1;
  5016  004FFE  0E00               	movlw	0
  5017  005000  0100               	movlb	0	; () banked
  5018  005002  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5019  005004  0E01               	movlw	1
  5020  005006  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  5021                           
  5022                           ;sort.c: 543: }
  5023  005008  0012               	return	
  5024  00500A                     l7418:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;sort.c: 544: else{
  5028                           ;sort.c: 545: f_loadingNewCan = 0;
  5029  00500A  0E00               	movlw	0
  5030  00500C  0100               	movlb	0	; () banked
  5031  00500E  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5032  005010  0E00               	movlw	0
  5033  005012  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  5034  005014  0012               	return	
  5035  005016                     __end_of_getIR:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           postinc0	equ	0xFEE
  5044                           wreg	equ	0xFE8
  5045                           postdec1	equ	0xFE5
  5046                           fsr1l	equ	0xFE1
  5047                           indf2	equ	0xFDF
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _readIR *****************
  5055 ;; Defined at:
  5056 ;;		line 23 in file "ADCFunctionality.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  res             2    4[BANK0 ] int 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;Total ram usage:        4 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    8
  5077 ;; This function calls:
  5078 ;;		_readADC
  5079 ;; This function is called by:
  5080 ;;		_Loading
  5081 ;;		_getIR
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text7
  5086  00543C                     __ptext7:
  5087                           	opt stack 0
  5088  00543C                     _readIR:
  5089                           	opt stack 20
  5090                           
  5091                           ;ADCFunctionality.c: 24: readADC(0);
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;incstack = 0
  5095  00543C  0E00               	movlw	0
  5096  00543E  ECC1  F02C         	call	_readADC
  5097                           
  5098                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5099  005442  50C3               	movf	4035,w,c	;volatile
  5100  005444  CFC4 F082          	movff	4036,??_readIR	;volatile
  5101  005448  0100               	movlb	0	; () banked
  5102  00544A  6B83               	clrf	(??_readIR+1)& (0+255),b
  5103  00544C  C082  F083         	movff	??_readIR,??_readIR+1
  5104  005450  0100               	movlb	0	; () banked
  5105  005452  6B82               	clrf	??_readIR& (0+255),b
  5106  005454  0100               	movlb	0	; () banked
  5107  005456  1182               	iorwf	??_readIR& (0+255),w,b
  5108  005458  0100               	movlb	0	; () banked
  5109  00545A  6F84               	movwf	readIR@res& (0+255),b
  5110  00545C  0100               	movlb	0	; () banked
  5111  00545E  5183               	movf	(??_readIR+1)& (0+255),w,b
  5112  005460  0100               	movlb	0	; () banked
  5113  005462  6F85               	movwf	(readIR@res+1)& (0+255),b
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5117  005464  0100               	movlb	0	; () banked
  5118  005466  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5119  005468  D00A               	goto	u5170
  5120  00546A  0E21               	movlw	33
  5121  00546C  0100               	movlb	0	; () banked
  5122  00546E  5D84               	subwf	readIR@res& (0+255),w,b
  5123  005470  0E03               	movlw	3
  5124  005472  0100               	movlb	0	; () banked
  5125  005474  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5126  005476  A0D8               	btfss	status,0,c
  5127  005478  D002               	goto	u5170
  5128  00547A  0E01               	movlw	1
  5129  00547C  D001               	goto	u5180
  5130  00547E                     u5170:
  5131  00547E  0E00               	movlw	0
  5132  005480                     u5180:
  5133  005480  0100               	movlb	0	; () banked
  5134  005482  6FE6               	movwf	_IR_signal& (0+255),b
  5135  005484  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  5136                           
  5137                           ; BSR set to: 0
  5138  005486  0012               	return		;funcret
  5139  005488                     __end_of_readIR:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           postdec1	equ	0xFE5
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _ID *****************
  5159 ;; Defined at:
  5160 ;;		line 272 in file "sort.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  i               2   56[BANK0 ] int 
  5165 ;;  i               2   54[BANK0 ] int 
  5166 ;;  i               2   52[BANK0 ] int 
  5167 ;;  i               2   50[BANK0 ] int 
  5168 ;;  i               2   48[BANK0 ] int 
  5169 ;;  n               2   62[BANK0 ] const int 
  5170 ;;  res2            2   60[BANK0 ] int 
  5171 ;;  res1            2   58[BANK0 ] int 
  5172 ;;  time            2   46[BANK0 ] const int 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      void 
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:       21 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:   10
  5189 ;; This function calls:
  5190 ;;		___awdiv
  5191 ;;		___awtoft
  5192 ;;		___ftge
  5193 ;;		_delay_ms
  5194 ;;		_lcdInst
  5195 ;;		_printf
  5196 ;; This function is called by:
  5197 ;;		_sort
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text8
  5202  001BBA                     __ptext8:
  5203                           	opt stack 0
  5204  001BBA                     _ID:
  5205                           	opt stack 19
  5206                           
  5207                           ;sort.c: 273: if(f_can_coming_to_ID){
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;incstack = 0
  5211  001BBA  0101               	movlb	1	; () banked
  5212  001BBC  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5213  001BBE  0101               	movlb	1	; () banked
  5214  001BC0  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5215  001BC2  B4D8               	btfsc	status,2,c
  5216  001BC4  0012               	return	
  5217                           
  5218                           ; BSR set to: 1
  5219                           ;sort.c: 275: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5220  001BC6  0E29               	movlw	41
  5221  001BC8  0100               	movlb	0	; () banked
  5222  001BCA  6FAC               	movwf	(??_ID+1)& (0+255),b
  5223  001BCC  0E96               	movlw	150
  5224  001BCE  0100               	movlb	0	; () banked
  5225  001BD0  6FAB               	movwf	??_ID& (0+255),b
  5226  001BD2  0E7F               	movlw	127
  5227  001BD4                     u10127:
  5228  001BD4  2EE8               	decfsz	wreg,f,c
  5229  001BD6  D7FE               	bra	u10127
  5230  001BD8  2FAB               	decfsz	??_ID& (0+255),f,b
  5231  001BDA  D7FC               	bra	u10127
  5232  001BDC  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5233  001BDE  D7FA               	bra	u10127
  5234                           
  5235                           ;sort.c: 277: f_arm_position = 0;
  5236  001BE0  0E00               	movlw	0
  5237  001BE2  0100               	movlb	0	; () banked
  5238  001BE4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5239  001BE6  0E00               	movlw	0
  5240  001BE8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;sort.c: 279: LATAbits.LATA3 = 1;
  5244  001BEA  8689               	bsf	3977,3,c	;volatile
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;sort.c: 282: const int n = 10;
  5248  001BEC  0E00               	movlw	0
  5249  001BEE  0100               	movlb	0	; () banked
  5250  001BF0  6FBF               	movwf	(ID@n+1)& (0+255),b
  5251  001BF2  0E0A               	movlw	10
  5252  001BF4  6FBE               	movwf	ID@n& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;sort.c: 283: const int time = (600 / n);
  5256  001BF6  0E02               	movlw	2
  5257  001BF8  0100               	movlb	0	; () banked
  5258  001BFA  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5259  001BFC  0E58               	movlw	88
  5260  001BFE  6F86               	movwf	___awdiv@dividend& (0+255),b
  5261  001C00  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5262  001C04  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5263  001C08  ECE9  F024         	call	___awdiv	;wreg free
  5264  001C0C  C086  F0AE         	movff	?___awdiv,ID@time
  5265  001C10  C087  F0AF         	movff	?___awdiv+1,ID@time+1
  5266                           
  5267                           ;sort.c: 284: int res1 = 0;
  5268  001C14  0E00               	movlw	0
  5269  001C16  0100               	movlb	0	; () banked
  5270  001C18  6FBB               	movwf	(ID@res1+1)& (0+255),b
  5271  001C1A  0E00               	movlw	0
  5272  001C1C  6FBA               	movwf	ID@res1& (0+255),b
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;sort.c: 285: int res2 = 0;
  5276  001C1E  0E00               	movlw	0
  5277  001C20  0100               	movlb	0	; () banked
  5278  001C22  6FBD               	movwf	(ID@res2+1)& (0+255),b
  5279  001C24  0E00               	movlw	0
  5280  001C26  6FBC               	movwf	ID@res2& (0+255),b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;sort.c: 286: for(int i = 0; i<n; i++){
  5284  001C28  0E00               	movlw	0
  5285  001C2A  0100               	movlb	0	; () banked
  5286  001C2C  6FB1               	movwf	(ID@i+1)& (0+255),b
  5287  001C2E  0E00               	movlw	0
  5288  001C30  6FB0               	movwf	ID@i& (0+255),b
  5289  001C32                     l8018:
  5290                           
  5291                           ; BSR set to: 0
  5292  001C32  0100               	movlb	0	; () banked
  5293  001C34  51BE               	movf	ID@n& (0+255),w,b
  5294  001C36  0100               	movlb	0	; () banked
  5295  001C38  5DB0               	subwf	ID@i& (0+255),w,b
  5296  001C3A  0100               	movlb	0	; () banked
  5297  001C3C  51B1               	movf	(ID@i+1)& (0+255),w,b
  5298  001C3E  0A80               	xorlw	128
  5299  001C40  0100               	movlb	0	; () banked
  5300  001C42  6FAB               	movwf	??_ID& (0+255),b
  5301  001C44  0100               	movlb	0	; () banked
  5302  001C46  51BF               	movf	(ID@n+1)& (0+255),w,b
  5303  001C48  0A80               	xorlw	128
  5304  001C4A  0100               	movlb	0	; () banked
  5305  001C4C  59AB               	subwfb	??_ID& (0+255),w,b
  5306  001C4E  B0D8               	btfsc	status,0,c
  5307  001C50  D016               	goto	l836
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;sort.c: 287: delay_ms(time);
  5311                           
  5312                           ; BSR set to: 0
  5313                           
  5314                           ; BSR set to: 0
  5315  001C52  0100               	movlb	0	; () banked
  5316  001C54  51AE               	movf	ID@time& (0+255),w,b
  5317  001C56  ECEC  F02C         	call	_delay_ms
  5318                           
  5319                           ;sort.c: 288: res1 += PORTAbits.RA2;
  5320  001C5A  A480               	btfss	3968,2,c	;volatile
  5321  001C5C  D004               	goto	u6810
  5322  001C5E  0100               	movlb	0	; () banked
  5323  001C60  6BAB               	clrf	??_ID& (0+255),b
  5324  001C62  2BAB               	incf	??_ID& (0+255),f,b
  5325  001C64  D002               	goto	u6818
  5326  001C66                     u6810:
  5327  001C66  0100               	movlb	0	; () banked
  5328  001C68  6BAB               	clrf	??_ID& (0+255),b
  5329  001C6A                     u6818:
  5330  001C6A  0100               	movlb	0	; () banked
  5331  001C6C  51AB               	movf	??_ID& (0+255),w,b
  5332  001C6E  0100               	movlb	0	; () banked
  5333  001C70  27BA               	addwf	ID@res1& (0+255),f,b
  5334  001C72  0E00               	movlw	0
  5335  001C74  23BB               	addwfc	(ID@res1+1)& (0+255),f,b
  5336                           
  5337                           ; BSR set to: 0
  5338  001C76  0100               	movlb	0	; () banked
  5339  001C78  4BB0               	infsnz	ID@i& (0+255),f,b
  5340  001C7A  2BB1               	incf	(ID@i+1)& (0+255),f,b
  5341  001C7C  D7DA               	goto	l8018
  5342  001C7E                     l836:
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;sort.c: 289: }
  5346                           ;sort.c: 290: LATAbits.LATA3 = 0;
  5347  001C7E  9689               	bcf	3977,3,c	;volatile
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;sort.c: 291: _delay((unsigned long)((200)*(32000000/4000.0)));
  5351  001C80  0E09               	movlw	9
  5352  001C82  0100               	movlb	0	; () banked
  5353  001C84  6FAC               	movwf	(??_ID+1)& (0+255),b
  5354  001C86  0E1E               	movlw	30
  5355  001C88  0100               	movlb	0	; () banked
  5356  001C8A  6FAB               	movwf	??_ID& (0+255),b
  5357  001C8C  0EE4               	movlw	228
  5358  001C8E                     u10137:
  5359  001C8E  2EE8               	decfsz	wreg,f,c
  5360  001C90  D7FE               	bra	u10137
  5361  001C92  2FAB               	decfsz	??_ID& (0+255),f,b
  5362  001C94  D7FC               	bra	u10137
  5363  001C96  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5364  001C98  D7FA               	bra	u10137
  5365  001C9A  F000               	nop	
  5366                           
  5367                           ;sort.c: 292: LATAbits.LATA3 = 1;
  5368  001C9C  8689               	bsf	3977,3,c	;volatile
  5369                           
  5370                           ;sort.c: 293: for(int i = 0; i<n; i++){
  5371  001C9E  0E00               	movlw	0
  5372  001CA0  0100               	movlb	0	; () banked
  5373  001CA2  6FB3               	movwf	(ID@i_1212+1)& (0+255),b
  5374  001CA4  0E00               	movlw	0
  5375  001CA6  6FB2               	movwf	ID@i_1212& (0+255),b
  5376  001CA8                     l8036:
  5377                           
  5378                           ; BSR set to: 0
  5379  001CA8  0100               	movlb	0	; () banked
  5380  001CAA  51BE               	movf	ID@n& (0+255),w,b
  5381  001CAC  0100               	movlb	0	; () banked
  5382  001CAE  5DB2               	subwf	ID@i_1212& (0+255),w,b
  5383  001CB0  0100               	movlb	0	; () banked
  5384  001CB2  51B3               	movf	(ID@i_1212+1)& (0+255),w,b
  5385  001CB4  0A80               	xorlw	128
  5386  001CB6  0100               	movlb	0	; () banked
  5387  001CB8  6FAB               	movwf	??_ID& (0+255),b
  5388  001CBA  0100               	movlb	0	; () banked
  5389  001CBC  51BF               	movf	(ID@n+1)& (0+255),w,b
  5390  001CBE  0A80               	xorlw	128
  5391  001CC0  0100               	movlb	0	; () banked
  5392  001CC2  59AB               	subwfb	??_ID& (0+255),w,b
  5393  001CC4  B0D8               	btfsc	status,0,c
  5394  001CC6  D016               	goto	l8048
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;sort.c: 294: delay_ms(time);
  5398                           
  5399                           ; BSR set to: 0
  5400                           
  5401                           ; BSR set to: 0
  5402  001CC8  0100               	movlb	0	; () banked
  5403  001CCA  51AE               	movf	ID@time& (0+255),w,b
  5404  001CCC  ECEC  F02C         	call	_delay_ms
  5405                           
  5406                           ;sort.c: 295: res2 += PORTAbits.RA2;
  5407  001CD0  A480               	btfss	3968,2,c	;volatile
  5408  001CD2  D004               	goto	u6840
  5409  001CD4  0100               	movlb	0	; () banked
  5410  001CD6  6BAB               	clrf	??_ID& (0+255),b
  5411  001CD8  2BAB               	incf	??_ID& (0+255),f,b
  5412  001CDA  D002               	goto	u6848
  5413  001CDC                     u6840:
  5414  001CDC  0100               	movlb	0	; () banked
  5415  001CDE  6BAB               	clrf	??_ID& (0+255),b
  5416  001CE0                     u6848:
  5417  001CE0  0100               	movlb	0	; () banked
  5418  001CE2  51AB               	movf	??_ID& (0+255),w,b
  5419  001CE4  0100               	movlb	0	; () banked
  5420  001CE6  27BC               	addwf	ID@res2& (0+255),f,b
  5421  001CE8  0E00               	movlw	0
  5422  001CEA  23BD               	addwfc	(ID@res2+1)& (0+255),f,b
  5423                           
  5424                           ; BSR set to: 0
  5425  001CEC  0100               	movlb	0	; () banked
  5426  001CEE  4BB2               	infsnz	ID@i_1212& (0+255),f,b
  5427  001CF0  2BB3               	incf	(ID@i_1212+1)& (0+255),f,b
  5428  001CF2  D7DA               	goto	l8036
  5429  001CF4                     l8048:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;sort.c: 296: }
  5433                           ;sort.c: 297: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5434  001CF4  0E9A               	movlw	154
  5435  001CF6  0100               	movlb	0	; () banked
  5436  001CF8  6F92               	movwf	___ftge@ff1& (0+255),b
  5437  001CFA  0E99               	movlw	153
  5438  001CFC  0100               	movlb	0	; () banked
  5439  001CFE  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5440  001D00  0E3E               	movlw	62
  5441  001D02  0100               	movlb	0	; () banked
  5442  001D04  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5443  001D06  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5444  001D0A  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5445  001D0E  C0BA  F086         	movff	ID@res1,___awdiv@dividend
  5446  001D12  C0BB  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5447  001D16  ECE9  F024         	call	___awdiv	;wreg free
  5448  001D1A  C086  F08E         	movff	?___awdiv,___awtoft@c
  5449  001D1E  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5450  001D22  EC8D  F02A         	call	___awtoft	;wreg free
  5451  001D26  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5452  001D2A  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5453  001D2E  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5454  001D32  ECC4  F023         	call	___ftge	;wreg free
  5455  001D36  0100               	movlb	0	; () banked
  5456  001D38  B0D8               	btfsc	status,0,c
  5457  001D3A  D002               	goto	u6860
  5458  001D3C  0E01               	movlw	1
  5459  001D3E  D001               	goto	u6870
  5460  001D40                     u6860:
  5461  001D40  0E00               	movlw	0
  5462  001D42                     u6870:
  5463  001D42  0100               	movlb	0	; () banked
  5464  001D44  6FBA               	movwf	ID@res1& (0+255),b
  5465  001D46  6BBB               	clrf	(ID@res1+1)& (0+255),b
  5466                           
  5467                           ;sort.c: 298: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5468  001D48  0E9A               	movlw	154
  5469  001D4A  0100               	movlb	0	; () banked
  5470  001D4C  6F92               	movwf	___ftge@ff1& (0+255),b
  5471  001D4E  0E99               	movlw	153
  5472  001D50  0100               	movlb	0	; () banked
  5473  001D52  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5474  001D54  0E3E               	movlw	62
  5475  001D56  0100               	movlb	0	; () banked
  5476  001D58  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5477  001D5A  C0BE  F088         	movff	ID@n,___awdiv@divisor
  5478  001D5E  C0BF  F089         	movff	ID@n+1,___awdiv@divisor+1
  5479  001D62  C0BC  F086         	movff	ID@res2,___awdiv@dividend
  5480  001D66  C0BD  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5481  001D6A  ECE9  F024         	call	___awdiv	;wreg free
  5482  001D6E  C086  F08E         	movff	?___awdiv,___awtoft@c
  5483  001D72  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5484  001D76  EC8D  F02A         	call	___awtoft	;wreg free
  5485  001D7A  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5486  001D7E  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5487  001D82  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5488  001D86  ECC4  F023         	call	___ftge	;wreg free
  5489  001D8A  0100               	movlb	0	; () banked
  5490  001D8C  B0D8               	btfsc	status,0,c
  5491  001D8E  D002               	goto	u6880
  5492  001D90  0E01               	movlw	1
  5493  001D92  D001               	goto	u6890
  5494  001D94                     u6880:
  5495  001D94  0E00               	movlw	0
  5496  001D96                     u6890:
  5497  001D96  0100               	movlb	0	; () banked
  5498  001D98  6FBC               	movwf	ID@res2& (0+255),b
  5499  001D9A  6BBD               	clrf	(ID@res2+1)& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;sort.c: 301: sensor_outputs[1] = (res1 || res2);
  5503  001D9C  0E01               	movlw	1
  5504  001D9E  0100               	movlb	0	; () banked
  5505  001DA0  6FAD               	movwf	_ID$1213& (0+255),b
  5506                           
  5507                           ; BSR set to: 0
  5508  001DA2  0100               	movlb	0	; () banked
  5509  001DA4  51BA               	movf	ID@res1& (0+255),w,b
  5510  001DA6  0100               	movlb	0	; () banked
  5511  001DA8  11BB               	iorwf	(ID@res1+1)& (0+255),w,b
  5512  001DAA  A4D8               	btfss	status,2,c
  5513  001DAC  D009               	goto	l8058
  5514                           
  5515                           ; BSR set to: 0
  5516  001DAE  0100               	movlb	0	; () banked
  5517  001DB0  51BC               	movf	ID@res2& (0+255),w,b
  5518  001DB2  0100               	movlb	0	; () banked
  5519  001DB4  11BD               	iorwf	(ID@res2+1)& (0+255),w,b
  5520  001DB6  A4D8               	btfss	status,2,c
  5521  001DB8  D003               	goto	l8058
  5522                           
  5523                           ; BSR set to: 0
  5524  001DBA  0E00               	movlw	0
  5525  001DBC  0100               	movlb	0	; () banked
  5526  001DBE  6FAD               	movwf	_ID$1213& (0+255),b
  5527  001DC0                     l8058:
  5528                           
  5529                           ; BSR set to: 0
  5530  001DC0  C0AD  F0E4         	movff	_ID$1213,_sensor_outputs+2
  5531  001DC4  0100               	movlb	0	; () banked
  5532  001DC6  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;sort.c: 304: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5536  001DC8  0E01               	movlw	1
  5537  001DCA  ECCB  F02D         	call	_lcdInst
  5538  001DCE  0E68               	movlw	104
  5539  001DD0  0100               	movlb	0	; () banked
  5540  001DD2  6FAB               	movwf	??_ID& (0+255),b
  5541  001DD4  0EE4               	movlw	228
  5542  001DD6                     u10147:
  5543  001DD6  2EE8               	decfsz	wreg,f,c
  5544  001DD8  D7FE               	bra	u10147
  5545  001DDA  2FAB               	decfsz	??_ID& (0+255),f,b
  5546  001DDC  D7FC               	bra	u10147
  5547  001DDE  F000               	nop	
  5548  001DE0  0E80               	movlw	128
  5549  001DE2  ECCB  F02D         	call	_lcdInst
  5550                           
  5551                           ;sort.c: 305: printf("res1: %d|res2: %d", res1, res2);
  5552  001DE6  0E3D               	movlw	low STR_64
  5553  001DE8  0100               	movlb	0	; () banked
  5554  001DEA  6F8E               	movwf	printf@f& (0+255),b
  5555  001DEC  0EFB               	movlw	high STR_64
  5556  001DEE  0100               	movlb	0	; () banked
  5557  001DF0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5558  001DF2  C0BA  F090         	movff	ID@res1,?_printf+2
  5559  001DF6  C0BB  F091         	movff	ID@res1+1,?_printf+3
  5560  001DFA  C0BC  F092         	movff	ID@res2,?_printf+4
  5561  001DFE  C0BD  F093         	movff	ID@res2+1,?_printf+5
  5562  001E02  ECC1  F00B         	call	_printf	;wreg free
  5563                           
  5564                           ;sort.c: 306: lcdInst(0b11000000);;
  5565  001E06  0EC0               	movlw	192
  5566  001E08  ECCB  F02D         	call	_lcdInst
  5567                           
  5568                           ;sort.c: 307: printf("out: %d", sensor_outputs[1]);
  5569  001E0C  0EAD               	movlw	low STR_65
  5570  001E0E  0100               	movlb	0	; () banked
  5571  001E10  6F8E               	movwf	printf@f& (0+255),b
  5572  001E12  0EFF               	movlw	high STR_65
  5573  001E14  0100               	movlb	0	; () banked
  5574  001E16  6F8F               	movwf	(printf@f+1)& (0+255),b
  5575  001E18  C0E4  F090         	movff	_sensor_outputs+2,?_printf+2
  5576  001E1C  C0E5  F091         	movff	_sensor_outputs+3,?_printf+3
  5577  001E20  ECC1  F00B         	call	_printf	;wreg free
  5578                           
  5579                           ;sort.c: 308: _delay((unsigned long)((5000)*(32000000/4000.0)));
  5580  001E24  0ECB               	movlw	203
  5581  001E26  0100               	movlb	0	; () banked
  5582  001E28  6FAC               	movwf	(??_ID+1)& (0+255),b
  5583  001E2A  0EEC               	movlw	236
  5584  001E2C  0100               	movlb	0	; () banked
  5585  001E2E  6FAB               	movwf	??_ID& (0+255),b
  5586  001E30  0E84               	movlw	132
  5587  001E32                     u10157:
  5588  001E32  2EE8               	decfsz	wreg,f,c
  5589  001E34  D7FE               	bra	u10157
  5590  001E36  2FAB               	decfsz	??_ID& (0+255),f,b
  5591  001E38  D7FC               	bra	u10157
  5592  001E3A  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5593  001E3C  D7FA               	bra	u10157
  5594  001E3E  F000               	nop	
  5595                           
  5596                           ;sort.c: 317: if(!sensor_outputs[0]){
  5597  001E40  0100               	movlb	0	; () banked
  5598  001E42  51E2               	movf	_sensor_outputs& (0+255),w,b
  5599  001E44  0100               	movlb	0	; () banked
  5600  001E46  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5601  001E48  A4D8               	btfss	status,2,c
  5602  001E4A  D016               	goto	l8086
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;sort.c: 318: if(!sensor_outputs[1]){
  5606  001E4C  0100               	movlb	0	; () banked
  5607  001E4E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5608  001E50  0100               	movlb	0	; () banked
  5609  001E52  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5610  001E54  A4D8               	btfss	status,2,c
  5611  001E56  D008               	goto	l8082
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;sort.c: 319: count_pop_no_tab++;
  5615  001E58  0101               	movlb	1	; () banked
  5616  001E5A  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5617  001E5C  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5618                           
  5619                           ; BSR set to: 1
  5620                           ;sort.c: 320: cur_can = 0;
  5621  001E5E  0E00               	movlw	0
  5622  001E60  0101               	movlb	1	; () banked
  5623  001E62  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5624  001E64  0E00               	movlw	0
  5625  001E66  D007               	goto	L8
  5626  001E68                     l8082:
  5627                           
  5628                           ;sort.c: 322: else{
  5629                           ;sort.c: 323: count_pop_w_tab++;
  5630  001E68  0101               	movlb	1	; () banked
  5631  001E6A  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5632  001E6C  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5633                           
  5634                           ; BSR set to: 1
  5635                           ;sort.c: 324: cur_can = 1;
  5636  001E6E  0E00               	movlw	0
  5637  001E70  0101               	movlb	1	; () banked
  5638  001E72  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5639  001E74  0E01               	movlw	1
  5640  001E76                     L8:
  5641  001E76  6F2B               	movwf	_cur_can& (0+255),b
  5642  001E78                     l8086:
  5643                           
  5644                           ;sort.c: 325: }
  5645                           ;sort.c: 326: }
  5646                           ;sort.c: 327: if(sensor_outputs[0]){
  5647  001E78  0100               	movlb	0	; () banked
  5648  001E7A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5649  001E7C  0100               	movlb	0	; () banked
  5650  001E7E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5651  001E80  B4D8               	btfsc	status,2,c
  5652  001E82  D016               	goto	l8098
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;sort.c: 328: if(!sensor_outputs[1]){
  5656  001E84  0100               	movlb	0	; () banked
  5657  001E86  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5658  001E88  0100               	movlb	0	; () banked
  5659  001E8A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5660  001E8C  A4D8               	btfss	status,2,c
  5661  001E8E  D008               	goto	l8094
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;sort.c: 329: count_can_w_lab++;
  5665  001E90  0101               	movlb	1	; () banked
  5666  001E92  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5667  001E94  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5668                           
  5669                           ; BSR set to: 1
  5670                           ;sort.c: 330: cur_can = 2;
  5671  001E96  0E00               	movlw	0
  5672  001E98  0101               	movlb	1	; () banked
  5673  001E9A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5674  001E9C  0E02               	movlw	2
  5675  001E9E  D007               	goto	L9
  5676  001EA0                     l8094:
  5677                           
  5678                           ;sort.c: 332: else{
  5679                           ;sort.c: 333: count_can_no_lab++;
  5680  001EA0  0101               	movlb	1	; () banked
  5681  001EA2  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5682  001EA4  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5683                           
  5684                           ; BSR set to: 1
  5685                           ;sort.c: 334: cur_can = 3;
  5686  001EA6  0E00               	movlw	0
  5687  001EA8  0101               	movlb	1	; () banked
  5688  001EAA  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5689  001EAC  0E03               	movlw	3
  5690  001EAE                     L9:
  5691  001EAE  6F2B               	movwf	_cur_can& (0+255),b
  5692  001EB0                     l8098:
  5693                           
  5694                           ;sort.c: 335: }
  5695                           ;sort.c: 336: }
  5696                           ;sort.c: 337: LATAbits.LATA3 = 0;
  5697  001EB0  9689               	bcf	3977,3,c	;volatile
  5698  001EB2                     l8100:
  5699  001EB2  0101               	movlb	1	; () banked
  5700  001EB4  5135               	movf	_f_can_distributed& (0+255),w,b
  5701  001EB6  0101               	movlb	1	; () banked
  5702  001EB8  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5703  001EBA  B4D8               	btfsc	status,2,c
  5704  001EBC  D7FA               	goto	l8100
  5705                           
  5706                           ; BSR set to: 1
  5707                           ;sort.c: 341: if(sensor_outputs[0]){
  5708                           
  5709                           ; BSR set to: 1
  5710  001EBE  0100               	movlb	0	; () banked
  5711  001EC0  51E2               	movf	_sensor_outputs& (0+255),w,b
  5712  001EC2  0100               	movlb	0	; () banked
  5713  001EC4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5714  001EC6  B4D8               	btfsc	status,2,c
  5715  001EC8  D020               	goto	l8118
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;sort.c: 343: LATAbits.LATA3 = 1;
  5719  001ECA  8689               	bsf	3977,3,c	;volatile
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;sort.c: 346: for(int i=0;i<10000;i++)
  5723  001ECC  0E00               	movlw	0
  5724  001ECE  0100               	movlb	0	; () banked
  5725  001ED0  6FB5               	movwf	(ID@i_1216+1)& (0+255),b
  5726  001ED2  0E00               	movlw	0
  5727  001ED4  6FB4               	movwf	ID@i_1216& (0+255),b
  5728  001ED6                     l8108:
  5729                           
  5730                           ; BSR set to: 0
  5731  001ED6  0100               	movlb	0	; () banked
  5732  001ED8  BFB5               	btfsc	(ID@i_1216+1)& (0+255),7,b
  5733  001EDA  D008               	goto	l851
  5734  001EDC  0E10               	movlw	16
  5735  001EDE  0100               	movlb	0	; () banked
  5736  001EE0  5DB4               	subwf	ID@i_1216& (0+255),w,b
  5737  001EE2  0E27               	movlw	39
  5738  001EE4  0100               	movlb	0	; () banked
  5739  001EE6  59B5               	subwfb	(ID@i_1216+1)& (0+255),w,b
  5740  001EE8  B0D8               	btfsc	status,0,c
  5741  001EEA  D00D               	goto	l852
  5742  001EEC                     l851:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;sort.c: 347: {
  5746                           ;sort.c: 348: LATCbits.LATC0 = 1;
  5747  001EEC  808B               	bsf	3979,0,c	;volatile
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;sort.c: 349: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5751  001EEE  0E1A               	movlw	26
  5752  001EF0                     u10167:
  5753  001EF0  2EE8               	decfsz	wreg,f,c
  5754  001EF2  D7FE               	bra	u10167
  5755  001EF4  D000               	nop2	
  5756                           
  5757                           ;sort.c: 350: LATCbits.LATC0 = 0;
  5758  001EF6  908B               	bcf	3979,0,c	;volatile
  5759                           
  5760                           ;sort.c: 351: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5761  001EF8  0EF0               	movlw	240
  5762  001EFA                     u10177:
  5763  001EFA  2EE8               	decfsz	wreg,f,c
  5764  001EFC  D7FE               	bra	u10177
  5765  001EFE  0100               	movlb	0	; () banked
  5766  001F00  4BB4               	infsnz	ID@i_1216& (0+255),f,b
  5767  001F02  2BB5               	incf	(ID@i_1216+1)& (0+255),f,b
  5768  001F04  D7E8               	goto	l8108
  5769  001F06                     l852:
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;sort.c: 352: }
  5773                           ;sort.c: 354: LATAbits.LATA3 = 0;
  5774  001F06  9689               	bcf	3977,3,c	;volatile
  5775                           
  5776                           ;sort.c: 357: }
  5777  001F08  D01D               	goto	l853
  5778  001F0A                     l8118:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;sort.c: 358: else{
  5782                           ;sort.c: 360: for(int i=0;i<10000;i++)
  5783  001F0A  0E00               	movlw	0
  5784  001F0C  0100               	movlb	0	; () banked
  5785  001F0E  6FB7               	movwf	(ID@i_1217+1)& (0+255),b
  5786  001F10  0E00               	movlw	0
  5787  001F12  6FB6               	movwf	ID@i_1217& (0+255),b
  5788  001F14                     l8120:
  5789                           
  5790                           ; BSR set to: 0
  5791  001F14  0100               	movlb	0	; () banked
  5792  001F16  BFB7               	btfsc	(ID@i_1217+1)& (0+255),7,b
  5793  001F18  D008               	goto	l854
  5794  001F1A  0E10               	movlw	16
  5795  001F1C  0100               	movlb	0	; () banked
  5796  001F1E  5DB6               	subwf	ID@i_1217& (0+255),w,b
  5797  001F20  0E27               	movlw	39
  5798  001F22  0100               	movlb	0	; () banked
  5799  001F24  59B7               	subwfb	(ID@i_1217+1)& (0+255),w,b
  5800  001F26  B0D8               	btfsc	status,0,c
  5801  001F28  D00D               	goto	l853
  5802  001F2A                     l854:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;sort.c: 361: {
  5806                           ;sort.c: 362: LATCbits.LATC0 = 1;
  5807  001F2A  808B               	bsf	3979,0,c	;volatile
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;sort.c: 363: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5811  001F2C  0E1A               	movlw	26
  5812  001F2E                     u10187:
  5813  001F2E  2EE8               	decfsz	wreg,f,c
  5814  001F30  D7FE               	bra	u10187
  5815  001F32  D000               	nop2	
  5816                           
  5817                           ;sort.c: 364: LATCbits.LATC0 = 0;
  5818  001F34  908B               	bcf	3979,0,c	;volatile
  5819                           
  5820                           ;sort.c: 365: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5821  001F36  0EF0               	movlw	240
  5822  001F38                     u10197:
  5823  001F38  2EE8               	decfsz	wreg,f,c
  5824  001F3A  D7FE               	bra	u10197
  5825  001F3C  0100               	movlb	0	; () banked
  5826  001F3E  4BB6               	infsnz	ID@i_1217& (0+255),f,b
  5827  001F40  2BB7               	incf	(ID@i_1217+1)& (0+255),f,b
  5828  001F42  D7E8               	goto	l8120
  5829  001F44                     l853:
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;sort.c: 366: }
  5833                           ;sort.c: 367: }
  5834                           ;sort.c: 369: LATCbits.LATC0 = 0;
  5835  001F44  908B               	bcf	3979,0,c	;volatile
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;sort.c: 371: f_can_coming_to_distribution = 1;
  5839  001F46  0E00               	movlw	0
  5840  001F48  0101               	movlb	1	; () banked
  5841  001F4A  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5842  001F4C  0E01               	movlw	1
  5843  001F4E  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5844                           
  5845                           ; BSR set to: 1
  5846                           ;sort.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
  5847  001F50  0E1F               	movlw	31
  5848  001F52  0100               	movlb	0	; () banked
  5849  001F54  6FAC               	movwf	(??_ID+1)& (0+255),b
  5850  001F56  0E71               	movlw	113
  5851  001F58  0100               	movlb	0	; () banked
  5852  001F5A  6FAB               	movwf	??_ID& (0+255),b
  5853  001F5C  0E1E               	movlw	30
  5854  001F5E                     u10207:
  5855  001F5E  2EE8               	decfsz	wreg,f,c
  5856  001F60  D7FE               	bra	u10207
  5857  001F62  2FAB               	decfsz	??_ID& (0+255),f,b
  5858  001F64  D7FC               	bra	u10207
  5859  001F66  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5860  001F68  D7FA               	bra	u10207
  5861  001F6A  F000               	nop	
  5862                           
  5863                           ;sort.c: 373: LATCbits.LATC0 = 1;
  5864  001F6C  808B               	bsf	3979,0,c	;volatile
  5865                           
  5866                           ;sort.c: 376: if(!f_lastCan){
  5867  001F6E  0100               	movlb	0	; () banked
  5868  001F70  51F0               	movf	_f_lastCan& (0+255),w,b
  5869  001F72  0100               	movlb	0	; () banked
  5870  001F74  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5871  001F76  A4D8               	btfss	status,2,c
  5872  001F78  D032               	goto	l8152
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;sort.c: 377: for(int i=0; i<46; i++){
  5876  001F7A  0E00               	movlw	0
  5877  001F7C  0100               	movlb	0	; () banked
  5878  001F7E  6FB9               	movwf	(ID@i_1218+1)& (0+255),b
  5879  001F80  0E00               	movlw	0
  5880  001F82  6FB8               	movwf	ID@i_1218& (0+255),b
  5881                           
  5882                           ; BSR set to: 0
  5883  001F84  0100               	movlb	0	; () banked
  5884  001F86  BFB9               	btfsc	(ID@i_1218+1)& (0+255),7,b
  5885  001F88  D008               	goto	l8144
  5886  001F8A  0100               	movlb	0	; () banked
  5887  001F8C  51B9               	movf	(ID@i_1218+1)& (0+255),w,b
  5888  001F8E  E126               	bnz	l858
  5889  001F90  0E2E               	movlw	46
  5890  001F92  0100               	movlb	0	; () banked
  5891  001F94  5DB8               	subwf	ID@i_1218& (0+255),w,b
  5892  001F96  B0D8               	btfsc	status,0,c
  5893  001F98  D021               	goto	l858
  5894  001F9A                     l8144:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;sort.c: 378: LATBbits.LATB2 = !LATBbits.LATB2;
  5898  001F9A  B48A               	btfsc	3978,2,c	;volatile
  5899  001F9C  D004               	goto	u7040
  5900  001F9E  0100               	movlb	0	; () banked
  5901  001FA0  6BAB               	clrf	??_ID& (0+255),b
  5902  001FA2  2BAB               	incf	??_ID& (0+255),f,b
  5903  001FA4  D002               	goto	u7058
  5904  001FA6                     u7040:
  5905  001FA6  0100               	movlb	0	; () banked
  5906  001FA8  6BAB               	clrf	??_ID& (0+255),b
  5907  001FAA                     u7058:
  5908  001FAA  0100               	movlb	0	; () banked
  5909  001FAC  47AB               	rlncf	??_ID& (0+255),f,b
  5910  001FAE  47AB               	rlncf	??_ID& (0+255),f,b
  5911  001FB0  508A               	movf	3978,w,c	;volatile
  5912  001FB2  0100               	movlb	0	; () banked
  5913  001FB4  19AB               	xorwf	??_ID& (0+255),w,b
  5914  001FB6  0BFB               	andlw	-5
  5915  001FB8  19AB               	xorwf	??_ID& (0+255),w,b
  5916  001FBA  6E8A               	movwf	3978,c	;volatile
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;sort.c: 379: delay_ms(45-i);
  5920  001FBC  0100               	movlb	0	; () banked
  5921  001FBE  51B8               	movf	ID@i_1218& (0+255),w,b
  5922  001FC0  0800               	sublw	0
  5923  001FC2  0F2D               	addlw	45
  5924  001FC4  ECEC  F02C         	call	_delay_ms
  5925  001FC8  0100               	movlb	0	; () banked
  5926  001FCA  4BB8               	infsnz	ID@i_1218& (0+255),f,b
  5927  001FCC  2BB9               	incf	(ID@i_1218+1)& (0+255),f,b
  5928                           
  5929                           ; BSR set to: 0
  5930  001FCE  0100               	movlb	0	; () banked
  5931  001FD0  BFB9               	btfsc	(ID@i_1218+1)& (0+255),7,b
  5932  001FD2  D7E3               	goto	l8144
  5933  001FD4  0100               	movlb	0	; () banked
  5934  001FD6  51B9               	movf	(ID@i_1218+1)& (0+255),w,b
  5935  001FD8  E101               	bnz	u7060
  5936  001FDA  D7DA               	goto	L10
  5937  001FDC                     u7060:
  5938  001FDC                     l858:
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;sort.c: 380: }
  5942                           ;sort.c: 381: LATBbits.LATB2 = 1;
  5943  001FDC  848A               	bsf	3978,2,c	;volatile
  5944  001FDE                     l8152:
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;sort.c: 382: }
  5948                           ;sort.c: 384: f_can_coming_to_ID = 0;
  5949  001FDE  0E00               	movlw	0
  5950  001FE0  0101               	movlb	1	; () banked
  5951  001FE2  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5952  001FE4  0E00               	movlw	0
  5953  001FE6  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5954  001FE8  0012               	return	
  5955  001FEA                     __end_of_ID:
  5956                           	opt stack 0
  5957                           tblptru	equ	0xFF8
  5958                           tblptrh	equ	0xFF7
  5959                           tblptrl	equ	0xFF6
  5960                           tablat	equ	0xFF5
  5961                           prodh	equ	0xFF4
  5962                           prodl	equ	0xFF3
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _delay_ms *****************
  5975 ;; Defined at:
  5976 ;;		line 667 in file "sort.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  milliseconds    1    wreg     unsigned char 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;Total ram usage:        2 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    7
  5997 ;; This function calls:
  5998 ;;		Nothing
  5999 ;; This function is called by:
  6000 ;;		_Loading
  6001 ;;		_ID
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           	psect	text9
  6006  0059D8                     __ptext9:
  6007                           	opt stack 0
  6008  0059D8                     _delay_ms:
  6009                           	opt stack 21
  6010                           
  6011                           ; BSR set to: 1
  6012                           ;incstack = 0
  6013                           ;delay_ms@milliseconds stored from wreg
  6014  0059D8  0100               	movlb	0	; () banked
  6015  0059DA  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6016                           
  6017                           ;sort.c: 668: while(milliseconds > 0)
  6018  0059DC  D00B               	goto	l7370
  6019  0059DE                     l7366:
  6020                           
  6021                           ;sort.c: 669: {
  6022                           ;sort.c: 670: milliseconds--;
  6023  0059DE  0100               	movlb	0	; () banked
  6024  0059E0  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;sort.c: 671: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6028  0059E2  0E0B               	movlw	11
  6029  0059E4  0100               	movlb	0	; () banked
  6030  0059E6  6F80               	movwf	??_delay_ms& (0+255),b
  6031  0059E8  0E47               	movlw	71
  6032  0059EA                     u10217:
  6033  0059EA  2EE8               	decfsz	wreg,f,c
  6034  0059EC  D7FE               	bra	u10217
  6035  0059EE  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6036  0059F0  D7FC               	bra	u10217
  6037  0059F2  D000               	nop2	
  6038  0059F4                     l7370:
  6039  0059F4  0100               	movlb	0	; () banked
  6040  0059F6  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6041  0059F8  0100               	movlb	0	; () banked
  6042  0059FA  B4D8               	btfsc	status,2,c
  6043  0059FC  0012               	return	
  6044  0059FE  D7EF               	goto	l7366
  6045  005A00                     __end_of_delay_ms:
  6046                           	opt stack 0
  6047                           tblptru	equ	0xFF8
  6048                           tblptrh	equ	0xFF7
  6049                           tblptrl	equ	0xFF6
  6050                           tablat	equ	0xFF5
  6051                           prodh	equ	0xFF4
  6052                           prodl	equ	0xFF3
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           postdec1	equ	0xFE5
  6056                           fsr1l	equ	0xFE1
  6057                           indf2	equ	0xFDF
  6058                           postinc2	equ	0xFDE
  6059                           postdec2	equ	0xFDD
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064 ;; *************** function ___ftge *****************
  6065 ;; Defined at:
  6066 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  ff1             3   18[BANK0 ] float 
  6069 ;;  ff2             3   21[BANK0 ] float 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6081 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;Total ram usage:        9 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    7
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_ID
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text10
  6096  004788                     __ptext10:
  6097                           	opt stack 0
  6098  004788                     ___ftge:
  6099                           	opt stack 21
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;incstack = 0
  6103  004788  0100               	movlb	0	; () banked
  6104  00478A  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6105  00478C  D01D               	goto	l7488
  6106                           
  6107                           ; BSR set to: 0
  6108  00478E  C092  F098         	movff	___ftge@ff1,??___ftge
  6109  004792  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6110  004796  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6111  00479A  0100               	movlb	0	; () banked
  6112  00479C  1F98               	comf	??___ftge& (0+255),f,b
  6113  00479E  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6114  0047A0  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6115  0047A2  2B98               	incf	??___ftge& (0+255),f,b
  6116  0047A4  0E00               	movlw	0
  6117  0047A6  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6118  0047A8  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6119  0047AA  0E00               	movlw	0
  6120  0047AC  0100               	movlb	0	; () banked
  6121  0047AE  2598               	addwf	??___ftge& (0+255),w,b
  6122  0047B0  0100               	movlb	0	; () banked
  6123  0047B2  6F92               	movwf	___ftge@ff1& (0+255),b
  6124  0047B4  0E00               	movlw	0
  6125  0047B6  0100               	movlb	0	; () banked
  6126  0047B8  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6127  0047BA  0100               	movlb	0	; () banked
  6128  0047BC  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6129  0047BE  0E80               	movlw	128
  6130  0047C0  0100               	movlb	0	; () banked
  6131  0047C2  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6132  0047C4  0100               	movlb	0	; () banked
  6133  0047C6  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6134  0047C8                     l7488:
  6135                           
  6136                           ; BSR set to: 0
  6137  0047C8  0100               	movlb	0	; () banked
  6138  0047CA  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6139  0047CC  D01D               	goto	l7492
  6140                           
  6141                           ; BSR set to: 0
  6142  0047CE  C095  F098         	movff	___ftge@ff2,??___ftge
  6143  0047D2  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6144  0047D6  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6145  0047DA  0100               	movlb	0	; () banked
  6146  0047DC  1F98               	comf	??___ftge& (0+255),f,b
  6147  0047DE  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6148  0047E0  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6149  0047E2  2B98               	incf	??___ftge& (0+255),f,b
  6150  0047E4  0E00               	movlw	0
  6151  0047E6  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6152  0047E8  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6153  0047EA  0E00               	movlw	0
  6154  0047EC  0100               	movlb	0	; () banked
  6155  0047EE  2598               	addwf	??___ftge& (0+255),w,b
  6156  0047F0  0100               	movlb	0	; () banked
  6157  0047F2  6F95               	movwf	___ftge@ff2& (0+255),b
  6158  0047F4  0E00               	movlw	0
  6159  0047F6  0100               	movlb	0	; () banked
  6160  0047F8  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6161  0047FA  0100               	movlb	0	; () banked
  6162  0047FC  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6163  0047FE  0E80               	movlw	128
  6164  004800  0100               	movlb	0	; () banked
  6165  004802  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6166  004804  0100               	movlb	0	; () banked
  6167  004806  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6168  004808                     l7492:
  6169                           
  6170                           ; BSR set to: 0
  6171  004808  0E00               	movlw	0
  6172  00480A  0100               	movlb	0	; () banked
  6173  00480C  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6174  00480E  0E00               	movlw	0
  6175  004810  0100               	movlb	0	; () banked
  6176  004812  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6177  004814  0E80               	movlw	128
  6178  004816  0100               	movlb	0	; () banked
  6179  004818  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6180                           
  6181                           ; BSR set to: 0
  6182  00481A  0E00               	movlw	0
  6183  00481C  0100               	movlb	0	; () banked
  6184  00481E  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6185  004820  0E00               	movlw	0
  6186  004822  0100               	movlb	0	; () banked
  6187  004824  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6188  004826  0E80               	movlw	128
  6189  004828  0100               	movlb	0	; () banked
  6190  00482A  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6191  00482C  0100               	movlb	0	; () banked
  6192  00482E  5195               	movf	___ftge@ff2& (0+255),w,b
  6193  004830  0100               	movlb	0	; () banked
  6194  004832  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6195  004834  0100               	movlb	0	; () banked
  6196  004836  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6197  004838  0100               	movlb	0	; () banked
  6198  00483A  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6199  00483C  0100               	movlb	0	; () banked
  6200  00483E  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6201  004840  0100               	movlb	0	; () banked
  6202  004842  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6203  004844  B0D8               	btfsc	status,0,c
  6204  004846  D002               	goto	l7498
  6205                           
  6206                           ; BSR set to: 0
  6207  004848  90D8               	bcf	status,0,c
  6208  00484A  0012               	return	
  6209  00484C                     l7498:
  6210                           
  6211                           ; BSR set to: 0
  6212  00484C  80D8               	bsf	status,0,c
  6213                           
  6214                           ; BSR set to: 0
  6215  00484E  0012               	return	
  6216  004850                     __end_of___ftge:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           postinc0	equ	0xFEE
  6225                           wreg	equ	0xFE8
  6226                           postdec1	equ	0xFE5
  6227                           fsr1l	equ	0xFE1
  6228                           indf2	equ	0xFDF
  6229                           postinc2	equ	0xFDE
  6230                           postdec2	equ	0xFDD
  6231                           fsr2h	equ	0xFDA
  6232                           fsr2l	equ	0xFD9
  6233                           status	equ	0xFD8
  6234                           
  6235 ;; *************** function ___awtoft *****************
  6236 ;; Defined at:
  6237 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  c               2   14[BANK0 ] int 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  sign            1   17[BANK0 ] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  3   14[BANK0 ] float 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6251 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;Total ram usage:        4 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    8
  6258 ;; This function calls:
  6259 ;;		___ftpack
  6260 ;; This function is called by:
  6261 ;;		_ID
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text11
  6266  00551A                     __ptext11:
  6267                           	opt stack 0
  6268  00551A                     ___awtoft:
  6269                           	opt stack 20
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;incstack = 0
  6273  00551A  0E00               	movlw	0
  6274  00551C  0100               	movlb	0	; () banked
  6275  00551E  6F91               	movwf	___awtoft@sign& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278  005520  0100               	movlb	0	; () banked
  6279  005522  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6280  005524  D008               	goto	l7480
  6281                           
  6282                           ; BSR set to: 0
  6283  005526  0100               	movlb	0	; () banked
  6284  005528  6D8E               	negf	___awtoft@c& (0+255),b
  6285  00552A  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6286  00552C  B0D8               	btfsc	status,0,c
  6287  00552E  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6288                           
  6289                           ; BSR set to: 0
  6290  005530  0E01               	movlw	1
  6291  005532  0100               	movlb	0	; () banked
  6292  005534  6F91               	movwf	___awtoft@sign& (0+255),b
  6293  005536                     l7480:
  6294                           
  6295                           ; BSR set to: 0
  6296  005536  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6297  00553A  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6298  00553E  0100               	movlb	0	; () banked
  6299  005540  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6300  005542  0E8E               	movlw	142
  6301  005544  0100               	movlb	0	; () banked
  6302  005546  6F83               	movwf	___ftpack@exp& (0+255),b
  6303  005548  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6304  00554C  ECEC  F020         	call	___ftpack	;wreg free
  6305  005550  C080  F08E         	movff	?___ftpack,?___awtoft
  6306  005554  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6307  005558  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6308  00555C  0012               	return	
  6309  00555E                     __end_of___awtoft:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           postinc0	equ	0xFEE
  6318                           wreg	equ	0xFE8
  6319                           postdec1	equ	0xFE5
  6320                           fsr1l	equ	0xFE1
  6321                           indf2	equ	0xFDF
  6322                           postinc2	equ	0xFDE
  6323                           postdec2	equ	0xFDD
  6324                           fsr2h	equ	0xFDA
  6325                           fsr2l	equ	0xFD9
  6326                           status	equ	0xFD8
  6327                           
  6328 ;; *************** function ___ftpack *****************
  6329 ;; Defined at:
  6330 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  arg             3    0[BANK0 ] unsigned um
  6333 ;;  exp             1    3[BANK0 ] unsigned char 
  6334 ;;  sign            1    4[BANK0 ] unsigned char 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  3    0[BANK0 ] float 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6346 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;Total ram usage:        8 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    7
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		___awtoft
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text12
  6361  0041D8                     __ptext12:
  6362                           	opt stack 0
  6363  0041D8                     ___ftpack:
  6364                           	opt stack 20
  6365                           
  6366                           ;incstack = 0
  6367  0041D8  0100               	movlb	0	; () banked
  6368  0041DA  5183               	movf	___ftpack@exp& (0+255),w,b
  6369  0041DC  0100               	movlb	0	; () banked
  6370  0041DE  B4D8               	btfsc	status,2,c
  6371  0041E0  D008               	goto	l6870
  6372                           
  6373                           ; BSR set to: 0
  6374  0041E2  0100               	movlb	0	; () banked
  6375  0041E4  5180               	movf	___ftpack@arg& (0+255),w,b
  6376  0041E6  0100               	movlb	0	; () banked
  6377  0041E8  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6378  0041EA  0100               	movlb	0	; () banked
  6379  0041EC  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6380  0041EE  A4D8               	btfss	status,2,c
  6381  0041F0  D011               	goto	l6876
  6382  0041F2                     l6870:
  6383                           
  6384                           ; BSR set to: 0
  6385  0041F2  0E00               	movlw	0
  6386  0041F4  0100               	movlb	0	; () banked
  6387  0041F6  6F80               	movwf	?___ftpack& (0+255),b
  6388  0041F8  0E00               	movlw	0
  6389  0041FA  0100               	movlb	0	; () banked
  6390  0041FC  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6391  0041FE  0E00               	movlw	0
  6392  004200  0100               	movlb	0	; () banked
  6393  004202  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6394                           
  6395                           ; BSR set to: 0
  6396  004204  0012               	return	
  6397  004206                     l6874:
  6398                           
  6399                           ; BSR set to: 0
  6400  004206  0100               	movlb	0	; () banked
  6401  004208  2B83               	incf	___ftpack@exp& (0+255),f,b
  6402  00420A  0100               	movlb	0	; () banked
  6403  00420C  90D8               	bcf	status,0,c
  6404  00420E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6405  004210  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6406  004212  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6407  004214                     l6876:
  6408                           
  6409                           ; BSR set to: 0
  6410  004214  0E00               	movlw	0
  6411  004216  0100               	movlb	0	; () banked
  6412  004218  1580               	andwf	___ftpack@arg& (0+255),w,b
  6413  00421A  0100               	movlb	0	; () banked
  6414  00421C  6F85               	movwf	??___ftpack& (0+255),b
  6415  00421E  0E00               	movlw	0
  6416  004220  0100               	movlb	0	; () banked
  6417  004222  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6418  004224  0100               	movlb	0	; () banked
  6419  004226  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6420  004228  0EFE               	movlw	254
  6421  00422A  0100               	movlb	0	; () banked
  6422  00422C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6423  00422E  0100               	movlb	0	; () banked
  6424  004230  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6425  004232  0100               	movlb	0	; () banked
  6426  004234  5185               	movf	??___ftpack& (0+255),w,b
  6427  004236  0100               	movlb	0	; () banked
  6428  004238  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6429  00423A  0100               	movlb	0	; () banked
  6430  00423C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6431  00423E  B4D8               	btfsc	status,2,c
  6432  004240  D011               	goto	l6882
  6433  004242  D7E1               	goto	l6874
  6434  004244                     l6878:
  6435                           
  6436                           ; BSR set to: 0
  6437  004244  0100               	movlb	0	; () banked
  6438  004246  2B83               	incf	___ftpack@exp& (0+255),f,b
  6439                           
  6440                           ; BSR set to: 0
  6441  004248  0E01               	movlw	1
  6442  00424A  0100               	movlb	0	; () banked
  6443  00424C  2780               	addwf	___ftpack@arg& (0+255),f,b
  6444  00424E  0E00               	movlw	0
  6445  004250  0100               	movlb	0	; () banked
  6446  004252  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6447  004254  0E00               	movlw	0
  6448  004256  0100               	movlb	0	; () banked
  6449  004258  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6450  00425A  0100               	movlb	0	; () banked
  6451  00425C  90D8               	bcf	status,0,c
  6452  00425E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6453  004260  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6454  004262  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6455  004264                     l6882:
  6456                           
  6457                           ; BSR set to: 0
  6458  004264  0E00               	movlw	0
  6459  004266  0100               	movlb	0	; () banked
  6460  004268  1580               	andwf	___ftpack@arg& (0+255),w,b
  6461  00426A  0100               	movlb	0	; () banked
  6462  00426C  6F85               	movwf	??___ftpack& (0+255),b
  6463  00426E  0E00               	movlw	0
  6464  004270  0100               	movlb	0	; () banked
  6465  004272  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6466  004274  0100               	movlb	0	; () banked
  6467  004276  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6468  004278  0EFF               	movlw	255
  6469  00427A  0100               	movlb	0	; () banked
  6470  00427C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6471  00427E  0100               	movlb	0	; () banked
  6472  004280  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6473  004282  0100               	movlb	0	; () banked
  6474  004284  5185               	movf	??___ftpack& (0+255),w,b
  6475  004286  0100               	movlb	0	; () banked
  6476  004288  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6477  00428A  0100               	movlb	0	; () banked
  6478  00428C  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6479  00428E  B4D8               	btfsc	status,2,c
  6480  004290  D008               	goto	l6886
  6481  004292  D7D8               	goto	l6878
  6482  004294                     l6884:
  6483                           
  6484                           ; BSR set to: 0
  6485  004294  0100               	movlb	0	; () banked
  6486  004296  0783               	decf	___ftpack@exp& (0+255),f,b
  6487  004298  0100               	movlb	0	; () banked
  6488  00429A  90D8               	bcf	status,0,c
  6489  00429C  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6490  00429E  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6491  0042A0  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6492  0042A2                     l6886:
  6493                           
  6494                           ; BSR set to: 0
  6495  0042A2  0100               	movlb	0	; () banked
  6496  0042A4  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6497  0042A6  D004               	goto	l1774
  6498                           
  6499                           ; BSR set to: 0
  6500  0042A8  0E02               	movlw	2
  6501  0042AA  0100               	movlb	0	; () banked
  6502  0042AC  6183               	cpfslt	___ftpack@exp& (0+255),b
  6503  0042AE  D7F2               	goto	l6884
  6504  0042B0                     l1774:
  6505                           
  6506                           ; BSR set to: 0
  6507  0042B0  0100               	movlb	0	; () banked
  6508  0042B2  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6509  0042B4  D002               	goto	l6892
  6510                           
  6511                           ; BSR set to: 0
  6512  0042B6  0100               	movlb	0	; () banked
  6513  0042B8  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6514  0042BA                     l6892:
  6515                           
  6516                           ; BSR set to: 0
  6517  0042BA  0100               	movlb	0	; () banked
  6518  0042BC  90D8               	bcf	status,0,c
  6519  0042BE  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6520  0042C0  0100               	movlb	0	; () banked
  6521  0042C2  5183               	movf	___ftpack@exp& (0+255),w,b
  6522  0042C4  0100               	movlb	0	; () banked
  6523  0042C6  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6524                           
  6525                           ; BSR set to: 0
  6526  0042C8  0100               	movlb	0	; () banked
  6527  0042CA  5184               	movf	___ftpack@sign& (0+255),w,b
  6528  0042CC  0100               	movlb	0	; () banked
  6529  0042CE  B4D8               	btfsc	status,2,c
  6530  0042D0  D002               	goto	l6898
  6531                           
  6532                           ; BSR set to: 0
  6533  0042D2  0100               	movlb	0	; () banked
  6534  0042D4  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6535  0042D6                     l6898:
  6536                           
  6537                           ; BSR set to: 0
  6538  0042D6  C080  F080         	movff	___ftpack@arg,?___ftpack
  6539  0042DA  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6540  0042DE  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6541  0042E2  0012               	return	
  6542  0042E4                     __end_of___ftpack:
  6543                           	opt stack 0
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           postdec1	equ	0xFE5
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function _Distribution *****************
  6562 ;; Defined at:
  6563 ;;		line 387 in file "sort.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  1    wreg      void 
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:        2 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    8
  6584 ;; This function calls:
  6585 ;;		_updateServoPosition
  6586 ;; This function is called by:
  6587 ;;		_sort
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text13
  6592  0045D0                     __ptext13:
  6593                           	opt stack 0
  6594  0045D0                     _Distribution:
  6595                           	opt stack 21
  6596                           
  6597                           ;sort.c: 388: if(f_can_coming_to_distribution){
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;incstack = 0
  6601  0045D0  0101               	movlb	1	; () banked
  6602  0045D2  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6603  0045D4  0101               	movlb	1	; () banked
  6604  0045D6  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6605  0045D8  B4D8               	btfsc	status,2,c
  6606  0045DA  0012               	return	
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;sort.c: 389: f_can_distributed = 0;
  6610  0045DC  0E00               	movlw	0
  6611  0045DE  0101               	movlb	1	; () banked
  6612  0045E0  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  6613  0045E2  0E00               	movlw	0
  6614  0045E4  6F35               	movwf	_f_can_distributed& (0+255),b
  6615                           
  6616                           ;sort.c: 396: switch(cur_can){
  6617  0045E6  D034               	goto	l8168
  6618  0045E8                     l8158:
  6619                           
  6620                           ;sort.c: 398: updateServoPosition(500, 1);
  6621  0045E8  0E01               	movlw	1
  6622  0045EA  0100               	movlb	0	; () banked
  6623  0045EC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6624  0045EE  0EF4               	movlw	244
  6625  0045F0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6626  0045F2  0E00               	movlw	0
  6627  0045F4  0100               	movlb	0	; () banked
  6628  0045F6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6629  0045F8  0E01               	movlw	1
  6630  0045FA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6631  0045FC  ECD5  F026         	call	_updateServoPosition	;wreg free
  6632                           
  6633                           ;sort.c: 399: break;
  6634  004600  D03E               	goto	l8170
  6635  004602                     l8160:
  6636                           
  6637                           ;sort.c: 401: updateServoPosition(850, 1);
  6638  004602  0E03               	movlw	3
  6639  004604  0100               	movlb	0	; () banked
  6640  004606  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6641  004608  0E52               	movlw	82
  6642  00460A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6643  00460C  0E00               	movlw	0
  6644  00460E  0100               	movlb	0	; () banked
  6645  004610  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6646  004612  0E01               	movlw	1
  6647  004614  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6648  004616  ECD5  F026         	call	_updateServoPosition	;wreg free
  6649                           
  6650                           ;sort.c: 402: break;
  6651  00461A  D031               	goto	l8170
  6652  00461C                     l8162:
  6653                           
  6654                           ;sort.c: 404: updateServoPosition(1670, 1);
  6655  00461C  0E06               	movlw	6
  6656  00461E  0100               	movlb	0	; () banked
  6657  004620  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6658  004622  0E86               	movlw	134
  6659  004624  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6660  004626  0E00               	movlw	0
  6661  004628  0100               	movlb	0	; () banked
  6662  00462A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6663  00462C  0E01               	movlw	1
  6664  00462E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6665  004630  ECD5  F026         	call	_updateServoPosition	;wreg free
  6666                           
  6667                           ;sort.c: 405: break;
  6668  004634  D024               	goto	l8170
  6669  004636                     l8164:
  6670                           
  6671                           ;sort.c: 407: updateServoPosition(2400, 1);
  6672  004636  0E09               	movlw	9
  6673  004638  0100               	movlb	0	; () banked
  6674  00463A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6675  00463C  0E60               	movlw	96
  6676  00463E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6677  004640  0E00               	movlw	0
  6678  004642  0100               	movlb	0	; () banked
  6679  004644  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6680  004646  0E01               	movlw	1
  6681  004648  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6682  00464A  ECD5  F026         	call	_updateServoPosition	;wreg free
  6683                           
  6684                           ;sort.c: 411: }
  6685                           
  6686                           ;sort.c: 410: break;
  6687                           
  6688                           ;sort.c: 409: default:
  6689                           
  6690                           ;sort.c: 408: break;
  6691  00464E  D017               	goto	l8170
  6692  004650                     l8168:
  6693  004650  C12B  F088         	movff	_cur_can,??_Distribution
  6694  004654  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  6695                           
  6696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6697                           ; Switch size 1, requested type "space"
  6698                           ; Number of cases is 1, Range of values is 0 to 0
  6699                           ; switch strategies available:
  6700                           ; Name         Instructions Cycles
  6701                           ; simple_byte            4     3 (average)
  6702                           ;	Chosen strategy is simple_byte
  6703  004658  0100               	movlb	0	; () banked
  6704  00465A  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6705  00465C  0A00               	xorlw	0	; case 0
  6706  00465E  A4D8               	btfss	status,2,c
  6707  004660  D00E               	goto	l8170
  6708                           
  6709                           ; BSR set to: 0
  6710                           ; Switch size 1, requested type "space"
  6711                           ; Number of cases is 4, Range of values is 0 to 3
  6712                           ; switch strategies available:
  6713                           ; Name         Instructions Cycles
  6714                           ; simple_byte           13     7 (average)
  6715                           ;	Chosen strategy is simple_byte
  6716  004662  0100               	movlb	0	; () banked
  6717  004664  5188               	movf	??_Distribution& (0+255),w,b
  6718  004666  0A00               	xorlw	0	; case 0
  6719  004668  B4D8               	btfsc	status,2,c
  6720  00466A  D7BE               	goto	l8158
  6721  00466C  0A01               	xorlw	1	; case 1
  6722  00466E  B4D8               	btfsc	status,2,c
  6723  004670  D7C8               	goto	l8160
  6724  004672  0A03               	xorlw	3	; case 2
  6725  004674  B4D8               	btfsc	status,2,c
  6726  004676  D7D2               	goto	l8162
  6727  004678  0A01               	xorlw	1	; case 3
  6728  00467A  B4D8               	btfsc	status,2,c
  6729  00467C  D7DC               	goto	l8164
  6730  00467E                     l8170:
  6731                           
  6732                           ;sort.c: 412: updateServoPosition(1050, 3);
  6733  00467E  0E04               	movlw	4
  6734  004680  0100               	movlb	0	; () banked
  6735  004682  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6736  004684  0E1A               	movlw	26
  6737  004686  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6738  004688  0E00               	movlw	0
  6739  00468A  0100               	movlb	0	; () banked
  6740  00468C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6741  00468E  0E03               	movlw	3
  6742  004690  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6743  004692  ECD5  F026         	call	_updateServoPosition	;wreg free
  6744                           
  6745                           ;sort.c: 413: servo_timer_target = 750;
  6746  004696  0E02               	movlw	2
  6747  004698  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6748  00469A  0EEE               	movlw	238
  6749  00469C  6E6F               	movwf	_servo_timer_target,c	;volatile
  6750                           
  6751                           ;sort.c: 414: f_panning_to_bin = 1;
  6752  00469E  0E00               	movlw	0
  6753  0046A0  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  6754  0046A2  0E01               	movlw	1
  6755  0046A4  6E61               	movwf	_f_panning_to_bin,c	;volatile
  6756                           
  6757                           ;sort.c: 415: f_can_coming_to_distribution = 0;
  6758  0046A6  0E00               	movlw	0
  6759  0046A8  0101               	movlb	1	; () banked
  6760  0046AA  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6761  0046AC  0E00               	movlw	0
  6762  0046AE  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  6763  0046B0  0012               	return	
  6764  0046B2                     __end_of_Distribution:
  6765                           	opt stack 0
  6766                           tblptru	equ	0xFF8
  6767                           tblptrh	equ	0xFF7
  6768                           tblptrl	equ	0xFF6
  6769                           tablat	equ	0xFF5
  6770                           prodh	equ	0xFF4
  6771                           prodl	equ	0xFF3
  6772                           postinc0	equ	0xFEE
  6773                           wreg	equ	0xFE8
  6774                           postdec1	equ	0xFE5
  6775                           fsr1l	equ	0xFE1
  6776                           indf2	equ	0xFDF
  6777                           postinc2	equ	0xFDE
  6778                           postdec2	equ	0xFDD
  6779                           fsr2h	equ	0xFDA
  6780                           fsr2l	equ	0xFD9
  6781                           status	equ	0xFD8
  6782                           
  6783 ;; *************** function _machineConfig *****************
  6784 ;; Defined at:
  6785 ;;		line 15 in file "MachineConfig.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, status,2
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    7
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text14
  6814  005164                     __ptext14:
  6815                           	opt stack 0
  6816  005164                     _machineConfig:
  6817                           	opt stack 23
  6818                           
  6819                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;incstack = 0
  6823  005164  0EF0               	movlw	240
  6824  005166  6ED3               	movwf	4051,c	;volatile
  6825                           
  6826                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6827  005168  8C9B               	bsf	3995,6,c	;volatile
  6828                           
  6829                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6830  00516A  0E07               	movlw	7
  6831  00516C  6E92               	movwf	3986,c	;volatile
  6832                           
  6833                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6834  00516E  0EF2               	movlw	242
  6835  005170  6E93               	movwf	3987,c	;volatile
  6836                           
  6837                           ;MachineConfig.c: 27: TRISC = 0x00;
  6838  005172  0E00               	movlw	0
  6839  005174  6E94               	movwf	3988,c	;volatile
  6840                           
  6841                           ;MachineConfig.c: 31: TRISD = 0x00;
  6842  005176  0E00               	movlw	0
  6843  005178  6E95               	movwf	3989,c	;volatile
  6844                           
  6845                           ;MachineConfig.c: 34: TRISE = 0x00;
  6846  00517A  0E00               	movlw	0
  6847  00517C  6E96               	movwf	3990,c	;volatile
  6848                           
  6849                           ;MachineConfig.c: 37: LATA = 0x00;
  6850  00517E  0E00               	movlw	0
  6851  005180  6E89               	movwf	3977,c	;volatile
  6852                           
  6853                           ;MachineConfig.c: 38: LATB = 0x00;
  6854  005182  0E00               	movlw	0
  6855  005184  6E8A               	movwf	3978,c	;volatile
  6856                           
  6857                           ;MachineConfig.c: 39: LATC = 0x00;
  6858  005186  0E00               	movlw	0
  6859  005188  6E8B               	movwf	3979,c	;volatile
  6860                           
  6861                           ;MachineConfig.c: 40: LATD = 0x00;
  6862  00518A  0E00               	movlw	0
  6863  00518C  6E8C               	movwf	3980,c	;volatile
  6864                           
  6865                           ;MachineConfig.c: 41: LATE = 0x00;
  6866  00518E  0E00               	movlw	0
  6867  005190  6E8D               	movwf	3981,c	;volatile
  6868                           
  6869                           ;MachineConfig.c: 43: nRBPU = 0;
  6870  005192  9EF1               	bcf	intcon2,7,c	;volatile
  6871                           
  6872                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6873  005194  0E00               	movlw	0
  6874  005196  6EC2               	movwf	4034,c	;volatile
  6875                           
  6876                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  6877  005198  0E0D               	movlw	13
  6878  00519A  6EC1               	movwf	4033,c	;volatile
  6879                           
  6880                           ;MachineConfig.c: 50: CVRCON = 0x00;
  6881  00519C  0E00               	movlw	0
  6882  00519E  6EB5               	movwf	4021,c	;volatile
  6883                           
  6884                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  6885  0051A0  96B4               	bcf	4020,3,c	;volatile
  6886                           
  6887                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  6888  0051A2  0EB1               	movlw	177
  6889  0051A4  6EC0               	movwf	4032,c	;volatile
  6890                           
  6891                           ;MachineConfig.c: 55: INT1IE = 1;
  6892  0051A6  86F0               	bsf	intcon3,3,c	;volatile
  6893                           
  6894                           ;MachineConfig.c: 57: TMR0IE = 1;
  6895  0051A8  8AF2               	bsf	intcon,5,c	;volatile
  6896                           
  6897                           ;MachineConfig.c: 58: TMR1IE = 1;
  6898  0051AA  809D               	bsf	3997,0,c	;volatile
  6899                           
  6900                           ;MachineConfig.c: 59: TMR2IE = 1;
  6901  0051AC  829D               	bsf	3997,1,c	;volatile
  6902                           
  6903                           ;MachineConfig.c: 60: TMR3IE = 1;
  6904  0051AE  82A0               	bsf	4000,1,c	;volatile
  6905                           
  6906                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  6907  0051B0  0EB0               	movlw	176
  6908  0051B2  6ECD               	movwf	4045,c	;volatile
  6909                           
  6910                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  6911  0051B4  0E7B               	movlw	123
  6912  0051B6  6ECA               	movwf	4042,c	;volatile
  6913                           
  6914                           ;MachineConfig.c: 64: PR2 = 0x22;
  6915  0051B8  0E22               	movlw	34
  6916  0051BA  6ECB               	movwf	4043,c	;volatile
  6917                           
  6918                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  6919  0051BC  0EB0               	movlw	176
  6920  0051BE  6EB1               	movwf	4017,c	;volatile
  6921                           
  6922                           ;MachineConfig.c: 66: PEIE = 1;
  6923  0051C0  8CF2               	bsf	intcon,6,c	;volatile
  6924                           
  6925                           ;MachineConfig.c: 67: ADIE = 0;
  6926  0051C2  9C9D               	bcf	3997,6,c	;volatile
  6927                           
  6928                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  6929  0051C4  9EF2               	bcf	intcon,7,c	;volatile
  6930  0051C6  0012               	return		;funcret
  6931  0051C8                     __end_of_machineConfig:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           prodh	equ	0xFF4
  6938                           prodl	equ	0xFF3
  6939                           intcon	equ	0xFF2
  6940                           intcon2	equ	0xFF1
  6941                           intcon3	equ	0xFF0
  6942                           postinc0	equ	0xFEE
  6943                           wreg	equ	0xFE8
  6944                           postdec1	equ	0xFE5
  6945                           fsr1l	equ	0xFE1
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           postdec2	equ	0xFDD
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function _logRun *****************
  6954 ;; Defined at:
  6955 ;;		line 84 in file "EEPROM.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6960 ;;  i               2   55[BANK0 ] int 
  6961 ;;  num             1   49[BANK0 ] unsigned char 
  6962 ;;  addr            2   57[BANK0 ] unsigned short 
  6963 ;;  byte11          1   54[BANK0 ] unsigned char 
  6964 ;;  byte3           1   52[BANK0 ] unsigned char 
  6965 ;;  byte2           1   51[BANK0 ] unsigned char 
  6966 ;;  byte1           1   50[BANK0 ] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;Total ram usage:       10 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:   11
  6983 ;; This function calls:
  6984 ;;		_EEPROM_read
  6985 ;;		_EEPROM_write
  6986 ;; This function is called by:
  6987 ;;		_main
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text15
  6992  003F74                     __ptext15:
  6993                           	opt stack 0
  6994  003F74                     _logRun:
  6995                           	opt stack 19
  6996                           
  6997                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6998                           
  6999                           ;incstack = 0
  7000  003F74  0E00               	movlw	0
  7001  003F76  0100               	movlb	0	; () banked
  7002  003F78  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  7003  003F7A  0E00               	movlw	0
  7004  003F7C  6F80               	movwf	EEPROM_read@address& (0+255),b
  7005  003F7E  EC99  F02D         	call	_EEPROM_read	;wreg free
  7006  003F82  0100               	movlb	0	; () banked
  7007  003F84  6FFD               	movwf	_sel& (0+255),b
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  7011  003F86  0100               	movlb	0	; () banked
  7012  003F88  51FD               	movf	_sel& (0+255),w,b
  7013  003F8A  0D0B               	mullw	11
  7014  003F8C  0E01               	movlw	1
  7015  003F8E  24F3               	addwf	prodl,w,c
  7016  003F90  0100               	movlb	0	; () banked
  7017  003F92  6FB9               	movwf	logRun@addr& (0+255),b
  7018  003F94  0E00               	movlw	0
  7019  003F96  20F4               	addwfc	prodh,w,c
  7020  003F98  0100               	movlb	0	; () banked
  7021  003F9A  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;EEPROM.c: 101: if (sel < 3){
  7025  003F9C  0E03               	movlw	3
  7026  003F9E  0100               	movlb	0	; () banked
  7027  003FA0  61FD               	cpfslt	_sel& (0+255),b
  7028  003FA2  D00E               	goto	l9824
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;EEPROM.c: 102: unsigned char num = sel+1;
  7032  003FA4  0100               	movlb	0	; () banked
  7033  003FA6  29FD               	incf	_sel& (0+255),w,b
  7034  003FA8  0100               	movlb	0	; () banked
  7035  003FAA  6FB1               	movwf	logRun@num& (0+255),b
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;EEPROM.c: 103: EEPROM_write(0, num);
  7039  003FAC  0E00               	movlw	0
  7040  003FAE  0100               	movlb	0	; () banked
  7041  003FB0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7042  003FB2  0E00               	movlw	0
  7043  003FB4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7044  003FB6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7045  003FBA  EC74  F022         	call	_EEPROM_write	;wreg free
  7046                           
  7047                           ;EEPROM.c: 104: }
  7048  003FBE  D00A               	goto	l9826
  7049  003FC0                     l9824:
  7050                           
  7051                           ;EEPROM.c: 105: else{
  7052                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  7053  003FC0  0E00               	movlw	0
  7054  003FC2  0100               	movlb	0	; () banked
  7055  003FC4  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7056  003FC6  0E00               	movlw	0
  7057  003FC8  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7058  003FCA  0E00               	movlw	0
  7059  003FCC  0100               	movlb	0	; () banked
  7060  003FCE  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7061  003FD0  EC74  F022         	call	_EEPROM_write	;wreg free
  7062  003FD4                     l9826:
  7063                           
  7064                           ;EEPROM.c: 107: }
  7065                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  7066  003FD4  0100               	movlb	0	; () banked
  7067  003FD6  51FE               	movf	_count_total& (0+255),w,b
  7068  003FD8  0980               	iorlw	128
  7069  003FDA  0100               	movlb	0	; () banked
  7070  003FDC  6FB2               	movwf	logRun@byte1& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  7074  003FDE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7075  003FE2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7076  003FE6  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7077  003FEA  EC74  F022         	call	_EEPROM_write	;wreg free
  7078                           
  7079                           ;EEPROM.c: 112: addr++;
  7080  003FEE  0100               	movlb	0	; () banked
  7081  003FF0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7082  003FF2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7086  003FF4  0101               	movlb	1	; () banked
  7087  003FF6  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  7088  003FF8  0BF0               	andlw	240
  7089  003FFA  0101               	movlb	1	; () banked
  7090  003FFC  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  7091  003FFE  0100               	movlb	0	; () banked
  7092  004000  6FB3               	movwf	logRun@byte2& (0+255),b
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  7096  004002  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7097  004006  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7098  00400A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7099  00400E  EC74  F022         	call	_EEPROM_write	;wreg free
  7100                           
  7101                           ;EEPROM.c: 117: addr++;
  7102  004012  0100               	movlb	0	; () banked
  7103  004014  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7104  004016  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7108  004018  0101               	movlb	1	; () banked
  7109  00401A  3925               	swapf	_count_can_w_lab& (0+255),w,b
  7110  00401C  0BF0               	andlw	240
  7111  00401E  0101               	movlb	1	; () banked
  7112  004020  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  7113  004022  0100               	movlb	0	; () banked
  7114  004024  6FB4               	movwf	logRun@byte3& (0+255),b
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  7118  004026  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7119  00402A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7120  00402E  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7121  004032  EC74  F022         	call	_EEPROM_write	;wreg free
  7122                           
  7123                           ;EEPROM.c: 120: addr++;
  7124  004036  0100               	movlb	0	; () banked
  7125  004038  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7126  00403A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  7130  00403C  0E00               	movlw	0
  7131  00403E  0100               	movlb	0	; () banked
  7132  004040  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7133  004042  0E00               	movlw	0
  7134  004044  6FB7               	movwf	logRun@i& (0+255),b
  7135                           
  7136                           ; BSR set to: 0
  7137  004046  0100               	movlb	0	; () banked
  7138  004048  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7139  00404A  D008               	goto	l9850
  7140  00404C  0100               	movlb	0	; () banked
  7141  00404E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7142  004050  E128               	bnz	l1125
  7143  004052  0E07               	movlw	7
  7144  004054  0100               	movlb	0	; () banked
  7145  004056  5DB7               	subwf	logRun@i& (0+255),w,b
  7146  004058  B0D8               	btfsc	status,0,c
  7147  00405A  D023               	goto	l1125
  7148  00405C                     l9850:
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  7152  00405C  90D8               	bcf	status,0,c
  7153  00405E  0100               	movlb	0	; () banked
  7154  004060  35B7               	rlcf	logRun@i& (0+255),w,b
  7155  004062  6ED9               	movwf	fsr2l,c
  7156  004064  0100               	movlb	0	; () banked
  7157  004066  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7158  004068  6EDA               	movwf	fsr2h,c
  7159  00406A  0E0E               	movlw	low _startTime
  7160  00406C  26D9               	addwf	fsr2l,f,c
  7161  00406E  0E01               	movlw	high _startTime
  7162  004070  22DA               	addwfc	fsr2h,f,c
  7163  004072  50DF               	movf	indf2,w,c
  7164  004074  0100               	movlb	0	; () banked
  7165  004076  6FB5               	movwf	logRun@byte_i& (0+255),b
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  7169  004078  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7170  00407C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7171  004080  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7172  004084  EC74  F022         	call	_EEPROM_write	;wreg free
  7173                           
  7174                           ;EEPROM.c: 126: addr++;
  7175  004088  0100               	movlb	0	; () banked
  7176  00408A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7177  00408C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7178                           
  7179                           ; BSR set to: 0
  7180  00408E  0100               	movlb	0	; () banked
  7181  004090  4BB7               	infsnz	logRun@i& (0+255),f,b
  7182  004092  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7183                           
  7184                           ; BSR set to: 0
  7185  004094  0100               	movlb	0	; () banked
  7186  004096  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7187  004098  D7E1               	goto	l9850
  7188  00409A  0100               	movlb	0	; () banked
  7189  00409C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7190  00409E  E101               	bnz	u9450
  7191  0040A0  D7D8               	goto	L11
  7192  0040A2                     u9450:
  7193  0040A2                     l1125:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;EEPROM.c: 127: }
  7197                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  7198  0040A2  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  7202  0040A6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7203  0040AA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7204  0040AE  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7205  0040B2  EC74  F022         	call	_EEPROM_write	;wreg free
  7206  0040B6  0012               	return		;funcret
  7207  0040B8                     __end_of_logRun:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           intcon	equ	0xFF2
  7216                           intcon2	equ	0xFF1
  7217                           intcon3	equ	0xFF0
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           postdec1	equ	0xFE5
  7221                           fsr1l	equ	0xFE1
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _EEPROM_write *****************
  7230 ;; Defined at:
  7231 ;;		line 32 in file "EEPROM.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  address         2   43[BANK0 ] unsigned short 
  7234 ;;  data            1   45[BANK0 ] unsigned char 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  i               1   48[BANK0 ] unsigned char 
  7237 ;;  i               1   47[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7247 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;Total ram usage:        6 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:   10
  7254 ;; This function calls:
  7255 ;;		_EEPROM_read
  7256 ;;		_lcdInst
  7257 ;;		_printf
  7258 ;; This function is called by:
  7259 ;;		_Loading
  7260 ;;		_logRun
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text16
  7265  0044E8                     __ptext16:
  7266                           	opt stack 0
  7267  0044E8                     _EEPROM_write:
  7268                           	opt stack 18
  7269                           
  7270                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  7271                           
  7272                           ;incstack = 0
  7273  0044E8  84A6               	bsf	4006,2,c	;volatile
  7274                           
  7275                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  7276  0044EA  0100               	movlb	0	; () banked
  7277  0044EC  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  7278  0044EE  6EAA               	movwf	4010,c	;volatile
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  7282  0044F0  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;EEPROM.c: 39: EEDATA = data;
  7286  0044F4  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  7290  0044F8  9EA6               	bcf	4006,7,c	;volatile
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  7294  0044FA  9CA6               	bcf	4006,6,c	;volatile
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  7298  0044FC  9EF2               	bcf	intcon,7,c	;volatile
  7299                           
  7300                           ;EEPROM.c: 45: EECON2 = 0x55;
  7301  0044FE  0E55               	movlw	85
  7302  004500  6EA7               	movwf	4007,c	;volatile
  7303                           
  7304                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  7305  004502  0EAA               	movlw	170
  7306  004504  6EA7               	movwf	4007,c	;volatile
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  7310  004506  82A6               	bsf	4006,1,c	;volatile
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  7314  004508  8EF2               	bsf	intcon,7,c	;volatile
  7315  00450A                     l1103:
  7316  00450A  A8A1               	btfss	4001,4,c	;volatile
  7317  00450C  D7FE               	goto	l1103
  7318                           
  7319                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  7320  00450E  98A1               	bcf	4001,4,c	;volatile
  7321                           
  7322                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  7323  004510  94A6               	bcf	4006,2,c	;volatile
  7324                           
  7325                           ;EEPROM.c: 57: if(debug){
  7326  004512  0101               	movlb	1	; () banked
  7327  004514  512D               	movf	_debug& (0+255),w,b
  7328  004516  0101               	movlb	1	; () banked
  7329  004518  112E               	iorwf	(_debug+1)& (0+255),w,b
  7330  00451A  B4D8               	btfsc	status,2,c
  7331  00451C  0012               	return	
  7332                           
  7333                           ; BSR set to: 1
  7334                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7335  00451E  0E01               	movlw	1
  7336  004520  ECCB  F02D         	call	_lcdInst
  7337  004524  0E68               	movlw	104
  7338  004526  0100               	movlb	0	; () banked
  7339  004528  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7340  00452A  0EE4               	movlw	228
  7341  00452C                     u10227:
  7342  00452C  2EE8               	decfsz	wreg,f,c
  7343  00452E  D7FE               	bra	u10227
  7344  004530  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7345  004532  D7FC               	bra	u10227
  7346  004534  F000               	nop	
  7347                           
  7348                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  7349  004536  0E80               	movlw	128
  7350  004538  ECCB  F02D         	call	_lcdInst
  7351                           
  7352                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  7353  00453C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  7354  004540  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  7355  004544  EC99  F02D         	call	_EEPROM_read	;wreg free
  7356  004548  0100               	movlb	0	; () banked
  7357  00454A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  7358  00454C  A4D8               	btfss	status,2,c
  7359  00454E  D024               	goto	l7352
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  7363  004550  0EBC               	movlw	low STR_68
  7364  004552  0100               	movlb	0	; () banked
  7365  004554  6F8E               	movwf	printf@f& (0+255),b
  7366  004556  0EFA               	movlw	high STR_68
  7367  004558  0100               	movlb	0	; () banked
  7368  00455A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7369  00455C  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  7370  004560  0100               	movlb	0	; () banked
  7371  004562  6B91               	clrf	(?_printf+3)& (0+255),b
  7372  004564  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  7373  004568  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  7374  00456C  ECC1  F00B         	call	_printf	;wreg free
  7375                           
  7376                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  7377  004570  0E00               	movlw	0
  7378  004572  0100               	movlb	0	; () banked
  7379  004574  6FAF               	movwf	EEPROM_write@i& (0+255),b
  7380  004576                     l7344:
  7381                           
  7382                           ; BSR set to: 0
  7383  004576  0E63               	movlw	99
  7384  004578  0100               	movlb	0	; () banked
  7385  00457A  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  7386  00457C  D001               	goto	l7348
  7387  00457E  0012               	return	
  7388  004580                     l7348:
  7389                           
  7390                           ; BSR set to: 0
  7391  004580  0E68               	movlw	104
  7392  004582  0100               	movlb	0	; () banked
  7393  004584  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7394  004586  0EE4               	movlw	228
  7395  004588                     u10237:
  7396  004588  2EE8               	decfsz	wreg,f,c
  7397  00458A  D7FE               	bra	u10237
  7398  00458C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7399  00458E  D7FC               	bra	u10237
  7400  004590  F000               	nop	
  7401  004592  0100               	movlb	0	; () banked
  7402  004594  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  7403  004596  D7EF               	goto	l7344
  7404  004598                     l7352:
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  7408  004598  0EBC               	movlw	low STR_69
  7409  00459A  0100               	movlb	0	; () banked
  7410  00459C  6F8E               	movwf	printf@f& (0+255),b
  7411  00459E  0EFF               	movlw	high STR_69
  7412  0045A0  0100               	movlb	0	; () banked
  7413  0045A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  7414  0045A4  ECC1  F00B         	call	_printf	;wreg free
  7415  0045A8  0E00               	movlw	0
  7416  0045AA  0100               	movlb	0	; () banked
  7417  0045AC  6FB0               	movwf	EEPROM_write@i_1472& (0+255),b
  7418  0045AE                     l7356:
  7419                           
  7420                           ; BSR set to: 0
  7421  0045AE  0E63               	movlw	99
  7422  0045B0  0100               	movlb	0	; () banked
  7423  0045B2  65B0               	cpfsgt	EEPROM_write@i_1472& (0+255),b
  7424  0045B4  D001               	goto	l7360
  7425  0045B6  0012               	return	
  7426  0045B8                     l7360:
  7427                           
  7428                           ; BSR set to: 0
  7429  0045B8  0E68               	movlw	104
  7430  0045BA  0100               	movlb	0	; () banked
  7431  0045BC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7432  0045BE  0EE4               	movlw	228
  7433  0045C0                     u10247:
  7434  0045C0  2EE8               	decfsz	wreg,f,c
  7435  0045C2  D7FE               	bra	u10247
  7436  0045C4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7437  0045C6  D7FC               	bra	u10247
  7438  0045C8  F000               	nop	
  7439  0045CA  0100               	movlb	0	; () banked
  7440  0045CC  2BB0               	incf	EEPROM_write@i_1472& (0+255),f,b
  7441  0045CE  D7EF               	goto	l7356
  7442  0045D0                     __end_of_EEPROM_write:
  7443                           	opt stack 0
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           intcon	equ	0xFF2
  7451                           intcon2	equ	0xFF1
  7452                           intcon3	equ	0xFF0
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           postdec1	equ	0xFE5
  7456                           fsr1l	equ	0xFE1
  7457                           indf2	equ	0xFDF
  7458                           postinc2	equ	0xFDE
  7459                           postdec2	equ	0xFDD
  7460                           fsr2h	equ	0xFDA
  7461                           fsr2l	equ	0xFD9
  7462                           status	equ	0xFD8
  7463                           
  7464 ;; *************** function _EEPROM_read *****************
  7465 ;; Defined at:
  7466 ;;		line 68 in file "EEPROM.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  address         2    0[BANK0 ] unsigned short 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      unsigned char 
  7473 ;; Registers used:
  7474 ;;		wreg, status,2
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;Total ram usage:        2 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    7
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_Loading
  7491 ;;		_EEPROM_write
  7492 ;;		_logRun
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text17
  7497  005B32                     __ptext17:
  7498                           	opt stack 0
  7499  005B32                     _EEPROM_read:
  7500                           	opt stack 20
  7501                           
  7502                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  7503                           
  7504                           ;incstack = 0
  7505  005B32  0100               	movlb	0	; () banked
  7506  005B34  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  7507  005B36  6EAA               	movwf	4010,c	;volatile
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  7511  005B38  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  7515  005B3C  9EA6               	bcf	4006,7,c	;volatile
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  7519  005B3E  9CA6               	bcf	4006,6,c	;volatile
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  7523  005B40  80A6               	bsf	4006,0,c	;volatile
  7524  005B42                     l1116:
  7525  005B42  B0A6               	btfsc	4006,0,c	;volatile
  7526  005B44  D7FE               	goto	l1116
  7527                           
  7528                           ;EEPROM.c: 81: return EEDATA;
  7529  005B46  50A8               	movf	4008,w,c	;volatile
  7530  005B48  0012               	return	
  7531  005B4A                     __end_of_EEPROM_read:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           intcon2	equ	0xFF1
  7541                           intcon3	equ	0xFF0
  7542                           postinc0	equ	0xFEE
  7543                           wreg	equ	0xFE8
  7544                           postdec1	equ	0xFE5
  7545                           fsr1l	equ	0xFE1
  7546                           indf2	equ	0xFDF
  7547                           postinc2	equ	0xFDE
  7548                           postdec2	equ	0xFDD
  7549                           fsr2h	equ	0xFDA
  7550                           fsr2l	equ	0xFD9
  7551                           status	equ	0xFD8
  7552                           
  7553 ;; *************** function _initUI *****************
  7554 ;; Defined at:
  7555 ;;		line 62 in file "UI.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;		None
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;		None
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  1    wreg      void 
  7562 ;; Registers used:
  7563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;Total ram usage:        0 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:   12
  7576 ;; This function calls:
  7577 ;;		_change_state_to_menu_start
  7578 ;;		_loadRTC
  7579 ;; This function is called by:
  7580 ;;		_main
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text18
  7585  00571A                     __ptext18:
  7586                           	opt stack 0
  7587  00571A                     _initUI:
  7588                           	opt stack 18
  7589                           
  7590                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7591                           
  7592                           ;incstack = 0
  7593  00571A  8EF2               	bsf	intcon,7,c	;volatile
  7594                           
  7595                           ;UI.c: 64: machine_state = UI_state;
  7596  00571C  0E00               	movlw	0
  7597  00571E  0100               	movlb	0	; () banked
  7598  005720  6FFC               	movwf	_machine_state& (0+255),b
  7599                           
  7600                           ;UI.c: 65: logstate = 0;
  7601  005722  0E00               	movlw	0
  7602  005724  0100               	movlb	0	; () banked
  7603  005726  6FF9               	movwf	(_logstate+1)& (0+255),b
  7604  005728  0E00               	movlw	0
  7605  00572A  6FF8               	movwf	_logstate& (0+255),b
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;UI.c: 67: if(RTCflag){
  7609  00572C  0100               	movlb	0	; () banked
  7610  00572E  51EA               	movf	_RTCflag& (0+255),w,b
  7611  005730  0100               	movlb	0	; () banked
  7612  005732  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  7613  005734  A4D8               	btfss	status,2,c
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;UI.c: 68: loadRTC();
  7617  005736  EC4C  F026         	call	_loadRTC	;wreg free
  7618                           
  7619                           ;UI.c: 69: }
  7620                           ;UI.c: 71: change_state_to_menu_start();
  7621  00573A  ECAB  F02C         	call	_change_state_to_menu_start	;wreg free
  7622                           
  7623                           ;UI.c: 72: firstboot = 1;
  7624  00573E  0E00               	movlw	0
  7625  005740  0101               	movlb	1	; () banked
  7626  005742  6F3C               	movwf	(_firstboot+1)& (0+255),b
  7627  005744  0E01               	movlw	1
  7628  005746  6F3B               	movwf	_firstboot& (0+255),b
  7629                           
  7630                           ; BSR set to: 1
  7631  005748  0012               	return		;funcret
  7632  00574A                     __end_of_initUI:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           intcon3	equ	0xFF0
  7643                           postinc0	equ	0xFEE
  7644                           wreg	equ	0xFE8
  7645                           postdec1	equ	0xFE5
  7646                           fsr1l	equ	0xFE1
  7647                           indf2	equ	0xFDF
  7648                           postinc2	equ	0xFDE
  7649                           postdec2	equ	0xFDD
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654 ;; *************** function _loadRTC *****************
  7655 ;; Defined at:
  7656 ;;		line 28 in file "RTC.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;  i               2   22[BANK0 ] int 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;Total ram usage:        3 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    9
  7677 ;; This function calls:
  7678 ;;		_I2C_Master_Init
  7679 ;;		_I2C_Master_Start
  7680 ;;		_I2C_Master_Stop
  7681 ;;		_I2C_Master_Write
  7682 ;; This function is called by:
  7683 ;;		_initUI
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text19
  7688  004C98                     __ptext19:
  7689                           	opt stack 0
  7690  004C98                     _loadRTC:
  7691                           	opt stack 20
  7692                           
  7693                           ;RTC.c: 30: I2C_Master_Init(10000);
  7694                           
  7695                           ; BSR set to: 1
  7696                           ;incstack = 0
  7697  004C98  0E10               	movlw	16
  7698  004C9A  0100               	movlb	0	; () banked
  7699  004C9C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7700  004C9E  0E27               	movlw	39
  7701  004CA0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7702  004CA2  0E00               	movlw	0
  7703  004CA4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7704  004CA6  0E00               	movlw	0
  7705  004CA8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7706  004CAA  EC15  F029         	call	_I2C_Master_Init	;wreg free
  7707                           
  7708                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7709  004CAE  9EF2               	bcf	intcon,7,c	;volatile
  7710                           
  7711                           ;RTC.c: 34: I2C_Master_Start();
  7712  004CB0  ECF1  F02D         	call	_I2C_Master_Start	;wreg free
  7713                           
  7714                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7715  004CB4  0E00               	movlw	0
  7716  004CB6  0100               	movlb	0	; () banked
  7717  004CB8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7718  004CBA  0ED0               	movlw	208
  7719  004CBC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7720  004CBE  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
  7721                           
  7722                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7723  004CC2  0E00               	movlw	0
  7724  004CC4  0100               	movlb	0	; () banked
  7725  004CC6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7726  004CC8  0E00               	movlw	0
  7727  004CCA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7728  004CCC  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
  7729                           
  7730                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7731  004CD0  0E00               	movlw	0
  7732  004CD2  0100               	movlb	0	; () banked
  7733  004CD4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7734  004CD6  0E00               	movlw	0
  7735  004CD8  6F96               	movwf	loadRTC@i& (0+255),b
  7736  004CDA                     l7580:
  7737                           
  7738                           ; BSR set to: 0
  7739  004CDA  0100               	movlb	0	; () banked
  7740  004CDC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7741  004CDE  D008               	goto	l7584
  7742  004CE0  0100               	movlb	0	; () banked
  7743  004CE2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7744  004CE4  E11B               	bnz	l7590
  7745  004CE6  0E07               	movlw	7
  7746  004CE8  0100               	movlb	0	; () banked
  7747  004CEA  5D96               	subwf	loadRTC@i& (0+255),w,b
  7748  004CEC  B0D8               	btfsc	status,0,c
  7749  004CEE  D016               	goto	l7590
  7750  004CF0                     l7584:
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7754  004CF0  0E1C               	movlw	low _time
  7755  004CF2  0100               	movlb	0	; () banked
  7756  004CF4  2596               	addwf	loadRTC@i& (0+255),w,b
  7757  004CF6  6ED9               	movwf	fsr2l,c
  7758  004CF8  0E01               	movlw	high _time
  7759  004CFA  0100               	movlb	0	; () banked
  7760  004CFC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7761  004CFE  6EDA               	movwf	fsr2h,c
  7762  004D00  50DF               	movf	indf2,w,c
  7763  004D02  0100               	movlb	0	; () banked
  7764  004D04  6F95               	movwf	??_loadRTC& (0+255),b
  7765  004D06  0100               	movlb	0	; () banked
  7766  004D08  5195               	movf	??_loadRTC& (0+255),w,b
  7767  004D0A  0100               	movlb	0	; () banked
  7768  004D0C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7769  004D0E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7770  004D10  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
  7771  004D14  0100               	movlb	0	; () banked
  7772  004D16  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7773  004D18  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7774  004D1A  D7DF               	goto	l7580
  7775  004D1C                     l7590:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;RTC.c: 39: }
  7779                           ;RTC.c: 40: I2C_Master_Stop();
  7780  004D1C  ECED  F02D         	call	_I2C_Master_Stop	;wreg free
  7781                           
  7782                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7783  004D20  8EF2               	bsf	intcon,7,c	;volatile
  7784  004D22  0012               	return		;funcret
  7785  004D24                     __end_of_loadRTC:
  7786                           	opt stack 0
  7787                           tblptru	equ	0xFF8
  7788                           tblptrh	equ	0xFF7
  7789                           tblptrl	equ	0xFF6
  7790                           tablat	equ	0xFF5
  7791                           prodh	equ	0xFF4
  7792                           prodl	equ	0xFF3
  7793                           intcon	equ	0xFF2
  7794                           intcon2	equ	0xFF1
  7795                           intcon3	equ	0xFF0
  7796                           postinc0	equ	0xFEE
  7797                           wreg	equ	0xFE8
  7798                           postdec1	equ	0xFE5
  7799                           fsr1l	equ	0xFE1
  7800                           indf2	equ	0xFDF
  7801                           postinc2	equ	0xFDE
  7802                           postdec2	equ	0xFDD
  7803                           fsr2h	equ	0xFDA
  7804                           fsr2l	equ	0xFD9
  7805                           status	equ	0xFD8
  7806                           
  7807 ;; *************** function _I2C_Master_Init *****************
  7808 ;; Defined at:
  7809 ;;		line 15 in file "I2C.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;  c               4   13[BANK0 ] const unsigned long 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;		None
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		wreg, status,2, status,0, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;Total ram usage:        8 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    8
  7830 ;; This function calls:
  7831 ;;		___lldiv
  7832 ;; This function is called by:
  7833 ;;		_main
  7834 ;;		_loadRTC
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text20
  7839  00522A                     __ptext20:
  7840                           	opt stack 0
  7841  00522A                     _I2C_Master_Init:
  7842                           	opt stack 20
  7843                           
  7844                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7845                           
  7846                           ;incstack = 0
  7847  00522A  0E00               	movlw	0
  7848  00522C  6EC7               	movwf	4039,c	;volatile
  7849                           
  7850                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7851  00522E  0E28               	movlw	40
  7852  005230  6EC6               	movwf	4038,c	;volatile
  7853                           
  7854                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7855  005232  0E00               	movlw	0
  7856  005234  6EC5               	movwf	4037,c	;volatile
  7857                           
  7858                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7859  005236  0E00               	movlw	0
  7860  005238  0100               	movlb	0	; () banked
  7861  00523A  6F80               	movwf	___lldiv@dividend& (0+255),b
  7862  00523C  0E48               	movlw	72
  7863  00523E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7864  005240  0EE8               	movlw	232
  7865  005242  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7866  005244  0E01               	movlw	1
  7867  005246  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7868  005248  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7869  00524C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7870  005250  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7871  005254  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7872  005258  0E02               	movlw	2
  7873  00525A                     u5945:
  7874  00525A  90D8               	bcf	status,0,c
  7875  00525C  0100               	movlb	0	; () banked
  7876  00525E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7877  005260  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7878  005262  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7879  005264  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7880  005266  2EE8               	decfsz	wreg,f,c
  7881  005268  D7F8               	goto	u5945
  7882  00526A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7883  00526E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7884  005272  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7885  005276  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7886  00527A  EC48  F025         	call	___lldiv	;wreg free
  7887  00527E  0100               	movlb	0	; () banked
  7888  005280  0580               	decf	?___lldiv& (0+255),w,b
  7889  005282  6EC8               	movwf	4040,c	;volatile
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;I2C.c: 22: TRISC3 = 1;
  7893  005284  8694               	bsf	3988,3,c	;volatile
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;I2C.c: 23: TRISC4 = 1;
  7897  005286  8894               	bsf	3988,4,c	;volatile
  7898                           
  7899                           ; BSR set to: 0
  7900  005288  0012               	return		;funcret
  7901  00528A                     __end_of_I2C_Master_Init:
  7902                           	opt stack 0
  7903                           tblptru	equ	0xFF8
  7904                           tblptrh	equ	0xFF7
  7905                           tblptrl	equ	0xFF6
  7906                           tablat	equ	0xFF5
  7907                           prodh	equ	0xFF4
  7908                           prodl	equ	0xFF3
  7909                           intcon	equ	0xFF2
  7910                           intcon2	equ	0xFF1
  7911                           intcon3	equ	0xFF0
  7912                           postinc0	equ	0xFEE
  7913                           wreg	equ	0xFE8
  7914                           postdec1	equ	0xFE5
  7915                           fsr1l	equ	0xFE1
  7916                           indf2	equ	0xFDF
  7917                           postinc2	equ	0xFDE
  7918                           postdec2	equ	0xFDD
  7919                           fsr2h	equ	0xFDA
  7920                           fsr2l	equ	0xFD9
  7921                           status	equ	0xFD8
  7922                           
  7923 ;; *************** function ___lldiv *****************
  7924 ;; Defined at:
  7925 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  dividend        4    0[BANK0 ] unsigned long 
  7928 ;;  divisor         4    4[BANK0 ] unsigned long 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  quotient        4    8[BANK0 ] unsigned long 
  7931 ;;  counter         1   12[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  4    0[BANK0 ] unsigned long 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7941 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;Total ram usage:       13 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    7
  7948 ;; This function calls:
  7949 ;;		Nothing
  7950 ;; This function is called by:
  7951 ;;		_I2C_Master_Init
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text21
  7956  004A90                     __ptext21:
  7957                           	opt stack 0
  7958  004A90                     ___lldiv:
  7959                           	opt stack 20
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;incstack = 0
  7963  004A90  0E00               	movlw	0
  7964  004A92  0100               	movlb	0	; () banked
  7965  004A94  6F88               	movwf	___lldiv@quotient& (0+255),b
  7966  004A96  0E00               	movlw	0
  7967  004A98  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7968  004A9A  0E00               	movlw	0
  7969  004A9C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7970  004A9E  0E00               	movlw	0
  7971  004AA0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7972                           
  7973                           ; BSR set to: 0
  7974  004AA2  0100               	movlb	0	; () banked
  7975  004AA4  5184               	movf	___lldiv@divisor& (0+255),w,b
  7976  004AA6  0100               	movlb	0	; () banked
  7977  004AA8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7978  004AAA  0100               	movlb	0	; () banked
  7979  004AAC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7980  004AAE  0100               	movlb	0	; () banked
  7981  004AB0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7982  004AB2  B4D8               	btfsc	status,2,c
  7983  004AB4  D042               	goto	l1904
  7984                           
  7985                           ; BSR set to: 0
  7986  004AB6  0E01               	movlw	1
  7987  004AB8  0100               	movlb	0	; () banked
  7988  004ABA  6F8C               	movwf	___lldiv@counter& (0+255),b
  7989  004ABC  D008               	goto	l6910
  7990  004ABE                     l6908:
  7991                           
  7992                           ; BSR set to: 0
  7993  004ABE  0100               	movlb	0	; () banked
  7994  004AC0  90D8               	bcf	status,0,c
  7995  004AC2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7996  004AC4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7997  004AC6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7998  004AC8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7999  004ACA  0100               	movlb	0	; () banked
  8000  004ACC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8001  004ACE                     l6910:
  8002                           
  8003                           ; BSR set to: 0
  8004  004ACE  0100               	movlb	0	; () banked
  8005  004AD0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8006  004AD2  D7F5               	goto	l6908
  8007  004AD4                     l6912:
  8008                           
  8009                           ; BSR set to: 0
  8010  004AD4  0100               	movlb	0	; () banked
  8011  004AD6  90D8               	bcf	status,0,c
  8012  004AD8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8013  004ADA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8014  004ADC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8015  004ADE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8016                           
  8017                           ; BSR set to: 0
  8018  004AE0  0100               	movlb	0	; () banked
  8019  004AE2  5184               	movf	___lldiv@divisor& (0+255),w,b
  8020  004AE4  0100               	movlb	0	; () banked
  8021  004AE6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8022  004AE8  0100               	movlb	0	; () banked
  8023  004AEA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8024  004AEC  0100               	movlb	0	; () banked
  8025  004AEE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8026  004AF0  0100               	movlb	0	; () banked
  8027  004AF2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8028  004AF4  0100               	movlb	0	; () banked
  8029  004AF6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8030  004AF8  0100               	movlb	0	; () banked
  8031  004AFA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8032  004AFC  0100               	movlb	0	; () banked
  8033  004AFE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8034  004B00  A0D8               	btfss	status,0,c
  8035  004B02  D012               	goto	l6920
  8036                           
  8037                           ; BSR set to: 0
  8038  004B04  0100               	movlb	0	; () banked
  8039  004B06  5184               	movf	___lldiv@divisor& (0+255),w,b
  8040  004B08  0100               	movlb	0	; () banked
  8041  004B0A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8042  004B0C  0100               	movlb	0	; () banked
  8043  004B0E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8044  004B10  0100               	movlb	0	; () banked
  8045  004B12  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8046  004B14  0100               	movlb	0	; () banked
  8047  004B16  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8048  004B18  0100               	movlb	0	; () banked
  8049  004B1A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8050  004B1C  0100               	movlb	0	; () banked
  8051  004B1E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8052  004B20  0100               	movlb	0	; () banked
  8053  004B22  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8054                           
  8055                           ; BSR set to: 0
  8056  004B24  0100               	movlb	0	; () banked
  8057  004B26  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8058  004B28                     l6920:
  8059                           
  8060                           ; BSR set to: 0
  8061  004B28  0100               	movlb	0	; () banked
  8062  004B2A  90D8               	bcf	status,0,c
  8063  004B2C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8064  004B2E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8065  004B30  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8066  004B32  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8067                           
  8068                           ; BSR set to: 0
  8069  004B34  0100               	movlb	0	; () banked
  8070  004B36  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8071  004B38  D7CD               	goto	l6912
  8072  004B3A                     l1904:
  8073                           
  8074                           ; BSR set to: 0
  8075  004B3A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8076  004B3E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8077  004B42  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8078  004B46  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8079                           
  8080                           ; BSR set to: 0
  8081  004B4A  0012               	return		;funcret
  8082  004B4C                     __end_of___lldiv:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           intcon	equ	0xFF2
  8091                           intcon2	equ	0xFF1
  8092                           intcon3	equ	0xFF0
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _change_state_to_menu_start *****************
  8105 ;; Defined at:
  8106 ;;		line 477 in file "UI.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;		None
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;		None
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      void 
  8113 ;; Registers used:
  8114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;Total ram usage:        0 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:   11
  8127 ;; This function calls:
  8128 ;;		_lcdInst
  8129 ;;		_printRTC
  8130 ;;		_printf
  8131 ;; This function is called by:
  8132 ;;		_initUI
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text22
  8137  005956                     __ptext22:
  8138                           	opt stack 0
  8139  005956                     _change_state_to_menu_start:
  8140                           	opt stack 18
  8141                           
  8142                           ;UI.c: 478: cur_state = 0;
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;incstack = 0
  8146  005956  0E00               	movlw	0
  8147  005958  0100               	movlb	0	; () banked
  8148  00595A  6FED               	movwf	(_cur_state+1)& (0+255),b
  8149  00595C  0E00               	movlw	0
  8150  00595E  6FEC               	movwf	_cur_state& (0+255),b
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;UI.c: 480: lcdInst(0b10000000);;
  8154  005960  0E80               	movlw	128
  8155  005962  ECCB  F02D         	call	_lcdInst
  8156                           
  8157                           ;UI.c: 481: printRTC();
  8158  005966  ECF1  F016         	call	_printRTC	;wreg free
  8159                           
  8160                           ;UI.c: 482: lcdInst(0b11000000);;
  8161  00596A  0EC0               	movlw	192
  8162  00596C  ECCB  F02D         	call	_lcdInst
  8163                           
  8164                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8165  005970  0EF9               	movlw	low STR_30
  8166  005972  0100               	movlb	0	; () banked
  8167  005974  6F8E               	movwf	printf@f& (0+255),b
  8168  005976  0EFD               	movlw	high STR_30
  8169  005978  0100               	movlb	0	; () banked
  8170  00597A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8171  00597C  ECC1  F00B         	call	_printf	;wreg free
  8172  005980  0012               	return		;funcret
  8173  005982                     __end_of_change_state_to_menu_start:
  8174                           	opt stack 0
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           intcon	equ	0xFF2
  8182                           intcon2	equ	0xFF1
  8183                           intcon3	equ	0xFF0
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           postdec1	equ	0xFE5
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           postdec2	equ	0xFDD
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _initTime *****************
  8196 ;; Defined at:
  8197 ;;		line 17 in file "RTC.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  s               1    wreg     unsigned char 
  8200 ;;  m               1    0[BANK0 ] unsigned char 
  8201 ;;  h               1    1[BANK0 ] unsigned char 
  8202 ;;  w               1    2[BANK0 ] unsigned char 
  8203 ;;  DD              1    3[BANK0 ] unsigned char 
  8204 ;;  MM              1    4[BANK0 ] unsigned char 
  8205 ;;  YY              1    5[BANK0 ] unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  s               1    6[BANK0 ] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		wreg
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        7 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    7
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_main
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text23
  8232  005ABA                     __ptext23:
  8233                           	opt stack 0
  8234  005ABA                     _initTime:
  8235                           	opt stack 23
  8236                           
  8237                           ;incstack = 0
  8238                           ;initTime@s stored from wreg
  8239  005ABA  0100               	movlb	0	; () banked
  8240  005ABC  6F86               	movwf	initTime@s& (0+255),b
  8241                           
  8242                           ;RTC.c: 19: time[0] = s;
  8243  005ABE  C086  F11C         	movff	initTime@s,_time
  8244                           
  8245                           ;RTC.c: 20: time[1] = m;
  8246  005AC2  C080  F11D         	movff	initTime@m,_time+1
  8247                           
  8248                           ;RTC.c: 21: time[2] = h;
  8249  005AC6  C081  F11E         	movff	initTime@h,_time+2
  8250                           
  8251                           ;RTC.c: 22: time[3] = w;
  8252  005ACA  C082  F11F         	movff	initTime@w,_time+3
  8253                           
  8254                           ;RTC.c: 23: time[4] = DD;
  8255  005ACE  C083  F120         	movff	initTime@DD,_time+4
  8256                           
  8257                           ;RTC.c: 24: time[5] = MM;
  8258  005AD2  C084  F121         	movff	initTime@MM,_time+5
  8259                           
  8260                           ;RTC.c: 25: time[6] = YY;
  8261  005AD6  C085  F122         	movff	initTime@YY,_time+6
  8262  005ADA  0012               	return		;funcret
  8263  005ADC                     __end_of_initTime:
  8264                           	opt stack 0
  8265                           tblptru	equ	0xFF8
  8266                           tblptrh	equ	0xFF7
  8267                           tblptrl	equ	0xFF6
  8268                           tablat	equ	0xFF5
  8269                           prodh	equ	0xFF4
  8270                           prodl	equ	0xFF3
  8271                           intcon	equ	0xFF2
  8272                           intcon2	equ	0xFF1
  8273                           intcon3	equ	0xFF0
  8274                           postinc0	equ	0xFEE
  8275                           wreg	equ	0xFE8
  8276                           postdec1	equ	0xFE5
  8277                           fsr1l	equ	0xFE1
  8278                           indf2	equ	0xFDF
  8279                           postinc2	equ	0xFDE
  8280                           postdec2	equ	0xFDD
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _initLCD *****************
  8286 ;; Defined at:
  8287 ;;		line 50 in file "lcd.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;		None
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;		None
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  1    wreg      void 
  8294 ;; Registers used:
  8295 ;;		wreg, status,2, status,0, cstack
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;Total ram usage:        1 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    9
  8308 ;; This function calls:
  8309 ;;		_lcdInst
  8310 ;; This function is called by:
  8311 ;;		_main
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text24
  8316  0054D4                     __ptext24:
  8317                           	opt stack 0
  8318  0054D4                     _initLCD:
  8319                           	opt stack 21
  8320                           
  8321                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8322                           
  8323                           ;incstack = 0
  8324  0054D4  0E9C               	movlw	156
  8325  0054D6  0100               	movlb	0	; () banked
  8326  0054D8  6F83               	movwf	??_initLCD& (0+255),b
  8327  0054DA  0ED7               	movlw	215
  8328  0054DC                     u10257:
  8329  0054DC  2EE8               	decfsz	wreg,f,c
  8330  0054DE  D7FE               	bra	u10257
  8331  0054E0  2F83               	decfsz	??_initLCD& (0+255),f,b
  8332  0054E2  D7FC               	bra	u10257
  8333                           
  8334                           ;lcd.c: 52: lcdInst(0b00110011);
  8335  0054E4  0E33               	movlw	51
  8336  0054E6  ECCB  F02D         	call	_lcdInst
  8337                           
  8338                           ;lcd.c: 53: lcdInst(0b00110010);
  8339  0054EA  0E32               	movlw	50
  8340  0054EC  ECCB  F02D         	call	_lcdInst
  8341                           
  8342                           ;lcd.c: 55: lcdInst(0b00101000);
  8343  0054F0  0E28               	movlw	40
  8344  0054F2  ECCB  F02D         	call	_lcdInst
  8345                           
  8346                           ;lcd.c: 56: lcdInst(0b00001100);
  8347  0054F6  0E0C               	movlw	12
  8348  0054F8  ECCB  F02D         	call	_lcdInst
  8349                           
  8350                           ;lcd.c: 57: lcdInst(0b00000110);
  8351  0054FC  0E06               	movlw	6
  8352  0054FE  ECCB  F02D         	call	_lcdInst
  8353                           
  8354                           ;lcd.c: 58: lcdInst(0b00000001);
  8355  005502  0E01               	movlw	1
  8356  005504  ECCB  F02D         	call	_lcdInst
  8357                           
  8358                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8359  005508  0E9C               	movlw	156
  8360  00550A  0100               	movlb	0	; () banked
  8361  00550C  6F83               	movwf	??_initLCD& (0+255),b
  8362  00550E  0ED7               	movlw	215
  8363  005510                     u10267:
  8364  005510  2EE8               	decfsz	wreg,f,c
  8365  005512  D7FE               	bra	u10267
  8366  005514  2F83               	decfsz	??_initLCD& (0+255),f,b
  8367  005516  D7FC               	bra	u10267
  8368  005518  0012               	return		;funcret
  8369  00551A                     __end_of_initLCD:
  8370                           	opt stack 0
  8371                           tblptru	equ	0xFF8
  8372                           tblptrh	equ	0xFF7
  8373                           tblptrl	equ	0xFF6
  8374                           tablat	equ	0xFF5
  8375                           prodh	equ	0xFF4
  8376                           prodl	equ	0xFF3
  8377                           intcon	equ	0xFF2
  8378                           intcon2	equ	0xFF1
  8379                           intcon3	equ	0xFF0
  8380                           postinc0	equ	0xFEE
  8381                           wreg	equ	0xFE8
  8382                           postdec1	equ	0xFE5
  8383                           fsr1l	equ	0xFE1
  8384                           indf2	equ	0xFDF
  8385                           postinc2	equ	0xFDE
  8386                           postdec2	equ	0xFDD
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8
  8390                           
  8391 ;; *************** function _UI *****************
  8392 ;; Defined at:
  8393 ;;		line 76 in file "UI.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  i               1   73[BANK0 ] unsigned char 
  8398 ;;  i               1   85[BANK0 ] unsigned char 
  8399 ;;  i               1   84[BANK0 ] unsigned char 
  8400 ;;  i               1   83[BANK0 ] unsigned char 
  8401 ;;  i               1   82[BANK0 ] unsigned char 
  8402 ;;  i               1   81[BANK0 ] unsigned char 
  8403 ;;  i               1   80[BANK0 ] unsigned char 
  8404 ;;  i               1   79[BANK0 ] unsigned char 
  8405 ;;  i               1   78[BANK0 ] unsigned char 
  8406 ;;  i               1   77[BANK0 ] unsigned char 
  8407 ;;  i               1   76[BANK0 ] unsigned char 
  8408 ;;  i               1   75[BANK0 ] unsigned char 
  8409 ;;  i               1   74[BANK0 ] unsigned char 
  8410 ;;  month           4   86[BANK0 ] unsigned char [4]
  8411 ;;  i               1   72[BANK0 ] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:       22 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:   11
  8428 ;; This function calls:
  8429 ;;		___awdiv
  8430 ;;		___awmod
  8431 ;;		_change_state_to_menu_12
  8432 ;;		_change_state_to_menu_22
  8433 ;;		_lcdInst
  8434 ;;		_printRTC
  8435 ;;		_printf
  8436 ;;		_strcpy
  8437 ;; This function is called by:
  8438 ;;		_main
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text25
  8443  000012                     __ptext25:
  8444                           	opt stack 0
  8445  000012                     _UI:
  8446                           	opt stack 19
  8447                           
  8448                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8449                           
  8450                           ;incstack = 0
  8451  000012  0E02               	movlw	2
  8452  000014  0100               	movlb	0	; () banked
  8453  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8454  000018  A4D8               	btfss	status,2,c
  8455  00001A  D086               	goto	l9254
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8459  00001C  0E01               	movlw	1
  8460  00001E  ECCB  F02D         	call	_lcdInst
  8461  000022  0E68               	movlw	104
  8462  000024  0100               	movlb	0	; () banked
  8463  000026  6FC4               	movwf	??_UI& (0+255),b
  8464  000028  0EE4               	movlw	228
  8465  00002A                     u10277:
  8466  00002A  2EE8               	decfsz	wreg,f,c
  8467  00002C  D7FE               	bra	u10277
  8468  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8469  000030  D7FC               	bra	u10277
  8470  000032  F000               	nop	
  8471                           
  8472                           ;UI.c: 79: lcdInst(0b10000000);;
  8473  000034  0E80               	movlw	128
  8474  000036  ECCB  F02D         	call	_lcdInst
  8475                           
  8476                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8477  00003A  0E61               	movlw	low STR_1
  8478  00003C  0100               	movlb	0	; () banked
  8479  00003E  6F8E               	movwf	printf@f& (0+255),b
  8480  000040  0EFB               	movlw	high STR_1
  8481  000042  0100               	movlb	0	; () banked
  8482  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8483  000046  0E01               	movlw	1
  8484  000048  0100               	movlb	0	; () banked
  8485  00004A  25FD               	addwf	_sel& (0+255),w,b
  8486  00004C  0100               	movlb	0	; () banked
  8487  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8488  000050  0100               	movlb	0	; () banked
  8489  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8490  000054  0E00               	movlw	0
  8491  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8492  000058  ECC1  F00B         	call	_printf	;wreg free
  8493                           
  8494                           ;UI.c: 81: lcdInst(0b11000000);;
  8495  00005C  0EC0               	movlw	192
  8496  00005E  ECCB  F02D         	call	_lcdInst
  8497                           
  8498                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8499  000062  0E0E               	movlw	14
  8500  000064  0100               	movlb	0	; () banked
  8501  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8502  000068  0E10               	movlw	16
  8503  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8504  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8505  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8506  000074  ECFB  F025         	call	___awmod	;wreg free
  8507  000078  C080  F0C6         	movff	?___awmod,_UI$2457
  8508  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2457+1
  8509                           
  8510                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8511  000080  0E29               	movlw	low STR_2
  8512  000082  0100               	movlb	0	; () banked
  8513  000084  6F8E               	movwf	printf@f& (0+255),b
  8514  000086  0EFF               	movlw	high STR_2
  8515  000088  0100               	movlb	0	; () banked
  8516  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8517  00008C  0E0E               	movlw	14
  8518  00008E  0100               	movlb	0	; () banked
  8519  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8520  000092  0E10               	movlw	16
  8521  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8522  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8523  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8524  00009E  ECFB  F025         	call	___awmod	;wreg free
  8525  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8526  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8527  0000AA  0E00               	movlw	0
  8528  0000AC  0100               	movlb	0	; () banked
  8529  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8530  0000B0  0E3C               	movlw	60
  8531  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8532  0000B4  ECE9  F024         	call	___awdiv	;wreg free
  8533  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8534  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8535  0000C0  C0C6  F080         	movff	_UI$2457,___awmod@dividend
  8536  0000C4  C0C7  F081         	movff	_UI$2457+1,___awmod@dividend+1
  8537  0000C8  0E00               	movlw	0
  8538  0000CA  0100               	movlb	0	; () banked
  8539  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8540  0000CE  0E3C               	movlw	60
  8541  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8542  0000D2  ECFB  F025         	call	___awmod	;wreg free
  8543  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8544  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8545  0000DE  ECC1  F00B         	call	_printf	;wreg free
  8546  0000E2                     l180:
  8547  0000E2  B281               	btfsc	3969,1,c	;volatile
  8548  0000E4  D7FE               	goto	l180
  8549  0000E6                     l183:
  8550  0000E6  A281               	btfss	3969,1,c	;volatile
  8551  0000E8  D7FE               	goto	l183
  8552                           
  8553                           ;UI.c: 86: }
  8554                           ;UI.c: 87: if(cur_state == 12){
  8555  0000EA  0E0C               	movlw	12
  8556  0000EC  0100               	movlb	0	; () banked
  8557  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  8558  0000F0  0100               	movlb	0	; () banked
  8559  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  8560  0000F4  A4D8               	btfss	status,2,c
  8561  0000F6  D003               	goto	l9248
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;UI.c: 88: change_state_to_menu_12();
  8565  0000F8  EC09  F02B         	call	_change_state_to_menu_12	;wreg free
  8566                           
  8567                           ;UI.c: 89: }
  8568  0000FC  D002               	goto	l188
  8569  0000FE                     l9248:
  8570                           
  8571                           ;UI.c: 90: else{
  8572                           ;UI.c: 91: change_state_to_menu_22();
  8573  0000FE  ECED  F02A         	call	_change_state_to_menu_22	;wreg free
  8574  000102                     l188:
  8575  000102  B281               	btfsc	3969,1,c	;volatile
  8576  000104  D7FE               	goto	l188
  8577                           
  8578                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8579  000106  0E05               	movlw	5
  8580  000108  0100               	movlb	0	; () banked
  8581  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8582  00010C  0E0F               	movlw	15
  8583  00010E  0100               	movlb	0	; () banked
  8584  000110  6FC4               	movwf	??_UI& (0+255),b
  8585  000112  0EF1               	movlw	241
  8586  000114                     u10287:
  8587  000114  2EE8               	decfsz	wreg,f,c
  8588  000116  D7FE               	bra	u10287
  8589  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8590  00011A  D7FC               	bra	u10287
  8591  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8592  00011E  D7FA               	bra	u10287
  8593                           
  8594                           ;UI.c: 95: machine_state = UI_state;
  8595  000120  0E00               	movlw	0
  8596  000122  0100               	movlb	0	; () banked
  8597  000124  6FFC               	movwf	_machine_state& (0+255),b
  8598                           
  8599                           ;UI.c: 96: }
  8600  000126  D3D0               	goto	l9574
  8601  000128                     l9254:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;UI.c: 97: else if(cur_state == 0){
  8605  000128  0100               	movlb	0	; () banked
  8606  00012A  51EC               	movf	_cur_state& (0+255),w,b
  8607  00012C  0100               	movlb	0	; () banked
  8608  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  8609  000130  A4D8               	btfss	status,2,c
  8610  000132  D3CA               	goto	l9574
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8614  000134  0E00               	movlw	0
  8615  000136  0100               	movlb	0	; () banked
  8616  000138  6FC8               	movwf	UI@i& (0+255),b
  8617  00013A                     l9258:
  8618                           
  8619                           ; BSR set to: 0
  8620  00013A  0E63               	movlw	99
  8621  00013C  0100               	movlb	0	; () banked
  8622  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8623  000140  D001               	goto	l9262
  8624  000142  D00C               	goto	l9266
  8625  000144                     l9262:
  8626                           
  8627                           ; BSR set to: 0
  8628  000144  0E68               	movlw	104
  8629  000146  0100               	movlb	0	; () banked
  8630  000148  6FC4               	movwf	??_UI& (0+255),b
  8631  00014A  0EE4               	movlw	228
  8632  00014C                     u10297:
  8633  00014C  2EE8               	decfsz	wreg,f,c
  8634  00014E  D7FE               	bra	u10297
  8635  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8636  000152  D7FC               	bra	u10297
  8637  000154  F000               	nop	
  8638  000156  0100               	movlb	0	; () banked
  8639  000158  2BC8               	incf	UI@i& (0+255),f,b
  8640  00015A  D7EF               	goto	l9258
  8641  00015C                     l9266:
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;UI.c: 99: if(cur_state == 0){
  8645  00015C  0100               	movlb	0	; () banked
  8646  00015E  51EC               	movf	_cur_state& (0+255),w,b
  8647  000160  0100               	movlb	0	; () banked
  8648  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  8649  000164  A4D8               	btfss	status,2,c
  8650  000166  D3B0               	goto	l9574
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;UI.c: 100: printRTC();
  8654  000168  ECF1  F016         	call	_printRTC	;wreg free
  8655                           
  8656                           ;UI.c: 101: }
  8657                           ;UI.c: 102: }
  8658                           ;UI.c: 103: while(logstate){
  8659  00016C  D3AD               	goto	l9574
  8660  00016E                     l9270:
  8661                           
  8662                           ;UI.c: 105: if(!log_completion){
  8663  00016E  5063               	movf	_log_completion,w,c
  8664  000170  1064               	iorwf	_log_completion+1,w,c
  8665  000172  A4D8               	btfss	status,2,c
  8666  000174  D041               	goto	l9300
  8667                           
  8668                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8669  000176  0E01               	movlw	1
  8670  000178  ECCB  F02D         	call	_lcdInst
  8671  00017C  0E68               	movlw	104
  8672  00017E  0100               	movlb	0	; () banked
  8673  000180  6FC4               	movwf	??_UI& (0+255),b
  8674  000182  0EE4               	movlw	228
  8675  000184                     u10307:
  8676  000184  2EE8               	decfsz	wreg,f,c
  8677  000186  D7FE               	bra	u10307
  8678  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  8679  00018A  D7FC               	bra	u10307
  8680  00018C  F000               	nop	
  8681                           
  8682                           ;UI.c: 107: lcdInst(0b10000000);;
  8683  00018E  0E80               	movlw	128
  8684  000190  ECCB  F02D         	call	_lcdInst
  8685                           
  8686                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8687  000194  0E4F               	movlw	low STR_3
  8688  000196  0100               	movlb	0	; () banked
  8689  000198  6F8E               	movwf	printf@f& (0+255),b
  8690  00019A  0EFB               	movlw	high STR_3
  8691  00019C  0100               	movlb	0	; () banked
  8692  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8693  0001A0  C0F4  F090         	movff	_log,?_printf+2
  8694  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  8695  0001A8  ECC1  F00B         	call	_printf	;wreg free
  8696                           
  8697                           ;UI.c: 109: lcdInst(0b11000000);;
  8698  0001AC  0EC0               	movlw	192
  8699  0001AE  ECCB  F02D         	call	_lcdInst
  8700                           
  8701                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8702  0001B2  0E4C               	movlw	low STR_4
  8703  0001B4  0100               	movlb	0	; () banked
  8704  0001B6  6F8E               	movwf	printf@f& (0+255),b
  8705  0001B8  0EFE               	movlw	high STR_4
  8706  0001BA  0100               	movlb	0	; () banked
  8707  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8708  0001BE  ECC1  F00B         	call	_printf	;wreg free
  8709  0001C2                     l9284:
  8710  0001C2  0E00               	movlw	0
  8711  0001C4  0100               	movlb	0	; () banked
  8712  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  8713  0001C8                     l9286:
  8714                           
  8715                           ; BSR set to: 0
  8716  0001C8  0E63               	movlw	99
  8717  0001CA  0100               	movlb	0	; () banked
  8718  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  8719  0001CE  D001               	goto	l9290
  8720  0001D0  D00C               	goto	l9294
  8721  0001D2                     l9290:
  8722                           
  8723                           ; BSR set to: 0
  8724  0001D2  0E68               	movlw	104
  8725  0001D4  0100               	movlb	0	; () banked
  8726  0001D6  6FC4               	movwf	??_UI& (0+255),b
  8727  0001D8  0EE4               	movlw	228
  8728  0001DA                     u10317:
  8729  0001DA  2EE8               	decfsz	wreg,f,c
  8730  0001DC  D7FE               	bra	u10317
  8731  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  8732  0001E0  D7FC               	bra	u10317
  8733  0001E2  F000               	nop	
  8734  0001E4  0100               	movlb	0	; () banked
  8735  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  8736  0001E8  D7EF               	goto	l9286
  8737  0001EA                     l9294:
  8738                           
  8739                           ; BSR set to: 0
  8740  0001EA  0100               	movlb	0	; () banked
  8741  0001EC  51F8               	movf	_logstate& (0+255),w,b
  8742  0001EE  0100               	movlb	0	; () banked
  8743  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8744  0001F2  B4D8               	btfsc	status,2,c
  8745  0001F4  0012               	return	
  8746  0001F6  D7E5               	goto	l9284
  8747  0001F8                     l9300:
  8748                           
  8749                           ;UI.c: 114: else{
  8750                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8751  0001F8  0E01               	movlw	1
  8752  0001FA  ECCB  F02D         	call	_lcdInst
  8753  0001FE  0E68               	movlw	104
  8754  000200  0100               	movlb	0	; () banked
  8755  000202  6FC4               	movwf	??_UI& (0+255),b
  8756  000204  0EE4               	movlw	228
  8757  000206                     u10327:
  8758  000206  2EE8               	decfsz	wreg,f,c
  8759  000208  D7FE               	bra	u10327
  8760  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  8761  00020C  D7FC               	bra	u10327
  8762  00020E  F000               	nop	
  8763                           
  8764                           ;UI.c: 116: lcdInst(0b10000000);;
  8765  000210  0E80               	movlw	128
  8766  000212  ECCB  F02D         	call	_lcdInst
  8767                           
  8768                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8769  000216  0E4F               	movlw	low STR_3
  8770  000218  0100               	movlb	0	; () banked
  8771  00021A  6F8E               	movwf	printf@f& (0+255),b
  8772  00021C  0EFB               	movlw	high STR_3
  8773  00021E  0100               	movlb	0	; () banked
  8774  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  8775  000222  C0F4  F090         	movff	_log,?_printf+2
  8776  000226  C0F5  F091         	movff	_log+1,?_printf+3
  8777  00022A  ECC1  F00B         	call	_printf	;wreg free
  8778                           
  8779                           ;UI.c: 118: lcdInst(0b11000000);;
  8780  00022E  0EC0               	movlw	192
  8781  000230  ECCB  F02D         	call	_lcdInst
  8782                           
  8783                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8784  000234  0EE8               	movlw	low STR_6
  8785  000236  0100               	movlb	0	; () banked
  8786  000238  6F8E               	movwf	printf@f& (0+255),b
  8787  00023A  0EFD               	movlw	high STR_6
  8788  00023C  0100               	movlb	0	; () banked
  8789  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8790  000240  ECC1  F00B         	call	_printf	;wreg free
  8791                           
  8792                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8793  000244  0E00               	movlw	0
  8794  000246  0100               	movlb	0	; () banked
  8795  000248  6FCA               	movwf	UI@i_412& (0+255),b
  8796  00024A                     l9314:
  8797                           
  8798                           ; BSR set to: 0
  8799  00024A  0E63               	movlw	99
  8800  00024C  0100               	movlb	0	; () banked
  8801  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  8802  000250  D001               	goto	l9318
  8803  000252  D00C               	goto	l9322
  8804  000254                     l9318:
  8805                           
  8806                           ; BSR set to: 0
  8807  000254  0E68               	movlw	104
  8808  000256  0100               	movlb	0	; () banked
  8809  000258  6FC4               	movwf	??_UI& (0+255),b
  8810  00025A  0EE4               	movlw	228
  8811  00025C                     u10337:
  8812  00025C  2EE8               	decfsz	wreg,f,c
  8813  00025E  D7FE               	bra	u10337
  8814  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  8815  000262  D7FC               	bra	u10337
  8816  000264  F000               	nop	
  8817  000266  0100               	movlb	0	; () banked
  8818  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  8819  00026A  D7EF               	goto	l9314
  8820  00026C                     l9322:
  8821                           
  8822                           ; BSR set to: 0
  8823  00026C  0100               	movlb	0	; () banked
  8824  00026E  51F8               	movf	_logstate& (0+255),w,b
  8825  000270  0100               	movlb	0	; () banked
  8826  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8827  000274  B4D8               	btfsc	status,2,c
  8828  000276  0012               	return	
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8832                           
  8833                           ; BSR set to: 0
  8834                           
  8835                           ; BSR set to: 0
  8836  000278  0E00               	movlw	0
  8837  00027A  0100               	movlb	0	; () banked
  8838  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  8839  00027E                     l9328:
  8840                           
  8841                           ; BSR set to: 0
  8842  00027E  0E63               	movlw	99
  8843  000280  0100               	movlb	0	; () banked
  8844  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  8845  000284  D001               	goto	l9332
  8846  000286  D00C               	goto	l9336
  8847  000288                     l9332:
  8848                           
  8849                           ; BSR set to: 0
  8850  000288  0E68               	movlw	104
  8851  00028A  0100               	movlb	0	; () banked
  8852  00028C  6FC4               	movwf	??_UI& (0+255),b
  8853  00028E  0EE4               	movlw	228
  8854  000290                     u10347:
  8855  000290  2EE8               	decfsz	wreg,f,c
  8856  000292  D7FE               	bra	u10347
  8857  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  8858  000296  D7FC               	bra	u10347
  8859  000298  F000               	nop	
  8860  00029A  0100               	movlb	0	; () banked
  8861  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  8862  00029E  D7EF               	goto	l9328
  8863  0002A0                     l9336:
  8864                           
  8865                           ; BSR set to: 0
  8866  0002A0  0100               	movlb	0	; () banked
  8867  0002A2  51F8               	movf	_logstate& (0+255),w,b
  8868  0002A4  0100               	movlb	0	; () banked
  8869  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8870  0002A8  B4D8               	btfsc	status,2,c
  8871  0002AA  0012               	return	
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8875                           
  8876                           ; BSR set to: 0
  8877                           
  8878                           ; BSR set to: 0
  8879  0002AC  0E01               	movlw	1
  8880  0002AE  ECCB  F02D         	call	_lcdInst
  8881  0002B2  0E68               	movlw	104
  8882  0002B4  0100               	movlb	0	; () banked
  8883  0002B6  6FC4               	movwf	??_UI& (0+255),b
  8884  0002B8  0EE4               	movlw	228
  8885  0002BA                     u10357:
  8886  0002BA  2EE8               	decfsz	wreg,f,c
  8887  0002BC  D7FE               	bra	u10357
  8888  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  8889  0002C0  D7FC               	bra	u10357
  8890  0002C2  F000               	nop	
  8891                           
  8892                           ;UI.c: 125: lcdInst(0b10000000);;
  8893  0002C4  0E80               	movlw	128
  8894  0002C6  ECCB  F02D         	call	_lcdInst
  8895                           
  8896                           ;UI.c: 126: printf("START:");
  8897  0002CA  0EC3               	movlw	low STR_7
  8898  0002CC  0100               	movlb	0	; () banked
  8899  0002CE  6F8E               	movwf	printf@f& (0+255),b
  8900  0002D0  0EFF               	movlw	high STR_7
  8901  0002D2  0100               	movlb	0	; () banked
  8902  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8903  0002D6  ECC1  F00B         	call	_printf	;wreg free
  8904                           
  8905                           ;UI.c: 127: lcdInst(0b11000000);;
  8906  0002DA  0EC0               	movlw	192
  8907  0002DC  ECCB  F02D         	call	_lcdInst
  8908                           
  8909                           ;UI.c: 128: char month[] = "MMM";
  8910  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  8911  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  8912  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  8913  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  8914                           
  8915                           ;UI.c: 129: switch(log_startTime[5]){
  8916  0002F0  D0C3               	goto	l9380
  8917  0002F2                     l9352:
  8918                           
  8919                           ;UI.c: 131: strcpy(month, "JAN");
  8920  0002F2  0ED6               	movlw	low UI@month
  8921  0002F4  0100               	movlb	0	; () banked
  8922  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  8923  0002F8  0E00               	movlw	high UI@month
  8924  0002FA  0100               	movlb	0	; () banked
  8925  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8926  0002FE  0EDA               	movlw	low STR_8
  8927  000300  0100               	movlb	0	; () banked
  8928  000302  6F82               	movwf	strcpy@from& (0+255),b
  8929  000304  0EFF               	movlw	high STR_8
  8930  000306  0100               	movlb	0	; () banked
  8931  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8932  00030A  EC25  F02B         	call	_strcpy	;wreg free
  8933                           
  8934                           ;UI.c: 132: break;
  8935  00030E  D0E6               	goto	l9382
  8936  000310                     l9354:
  8937                           
  8938                           ;UI.c: 134: strcpy(month, "FEB");
  8939  000310  0ED6               	movlw	low UI@month
  8940  000312  0100               	movlb	0	; () banked
  8941  000314  6F80               	movwf	strcpy@to& (0+255),b
  8942  000316  0E00               	movlw	high UI@month
  8943  000318  0100               	movlb	0	; () banked
  8944  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8945  00031C  0ECA               	movlw	low STR_9
  8946  00031E  0100               	movlb	0	; () banked
  8947  000320  6F82               	movwf	strcpy@from& (0+255),b
  8948  000322  0EFF               	movlw	high STR_9
  8949  000324  0100               	movlb	0	; () banked
  8950  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8951  000328  EC25  F02B         	call	_strcpy	;wreg free
  8952                           
  8953                           ;UI.c: 135: break;
  8954  00032C  D0D7               	goto	l9382
  8955  00032E                     l9356:
  8956                           
  8957                           ;UI.c: 137: strcpy(month, "MAR");
  8958  00032E  0ED6               	movlw	low UI@month
  8959  000330  0100               	movlb	0	; () banked
  8960  000332  6F80               	movwf	strcpy@to& (0+255),b
  8961  000334  0E00               	movlw	high UI@month
  8962  000336  0100               	movlb	0	; () banked
  8963  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8964  00033A  0EE6               	movlw	low STR_10
  8965  00033C  0100               	movlb	0	; () banked
  8966  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8967  000340  0EFF               	movlw	high STR_10
  8968  000342  0100               	movlb	0	; () banked
  8969  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8970  000346  EC25  F02B         	call	_strcpy	;wreg free
  8971                           
  8972                           ;UI.c: 138: break;
  8973  00034A  D0C8               	goto	l9382
  8974  00034C                     l9358:
  8975                           
  8976                           ;UI.c: 140: strcpy(month, "APR");
  8977  00034C  0ED6               	movlw	low UI@month
  8978  00034E  0100               	movlb	0	; () banked
  8979  000350  6F80               	movwf	strcpy@to& (0+255),b
  8980  000352  0E00               	movlw	high UI@month
  8981  000354  0100               	movlb	0	; () banked
  8982  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8983  000358  0EEA               	movlw	low STR_11
  8984  00035A  0100               	movlb	0	; () banked
  8985  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8986  00035E  0EFF               	movlw	high STR_11
  8987  000360  0100               	movlb	0	; () banked
  8988  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8989  000364  EC25  F02B         	call	_strcpy	;wreg free
  8990                           
  8991                           ;UI.c: 141: break;
  8992  000368  D0B9               	goto	l9382
  8993  00036A                     l9360:
  8994                           
  8995                           ;UI.c: 143: strcpy(month, "MAY");
  8996  00036A  0ED6               	movlw	low UI@month
  8997  00036C  0100               	movlb	0	; () banked
  8998  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8999  000370  0E00               	movlw	high UI@month
  9000  000372  0100               	movlb	0	; () banked
  9001  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9002  000376  0EFA               	movlw	low STR_12
  9003  000378  0100               	movlb	0	; () banked
  9004  00037A  6F82               	movwf	strcpy@from& (0+255),b
  9005  00037C  0EFF               	movlw	high STR_12
  9006  00037E  0100               	movlb	0	; () banked
  9007  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9008  000382  EC25  F02B         	call	_strcpy	;wreg free
  9009                           
  9010                           ;UI.c: 144: break;
  9011  000386  D0AA               	goto	l9382
  9012  000388                     l9362:
  9013                           
  9014                           ;UI.c: 146: strcpy(month, "JUN");
  9015  000388  0ED6               	movlw	low UI@month
  9016  00038A  0100               	movlb	0	; () banked
  9017  00038C  6F80               	movwf	strcpy@to& (0+255),b
  9018  00038E  0E00               	movlw	high UI@month
  9019  000390  0100               	movlb	0	; () banked
  9020  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9021  000394  0EDE               	movlw	low STR_13
  9022  000396  0100               	movlb	0	; () banked
  9023  000398  6F82               	movwf	strcpy@from& (0+255),b
  9024  00039A  0EFF               	movlw	high STR_13
  9025  00039C  0100               	movlb	0	; () banked
  9026  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9027  0003A0  EC25  F02B         	call	_strcpy	;wreg free
  9028                           
  9029                           ;UI.c: 147: break;
  9030  0003A4  D09B               	goto	l9382
  9031  0003A6                     l9364:
  9032                           
  9033                           ;UI.c: 149: strcpy(month, "JUL");
  9034  0003A6  0ED6               	movlw	low UI@month
  9035  0003A8  0100               	movlb	0	; () banked
  9036  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  9037  0003AC  0E00               	movlw	high UI@month
  9038  0003AE  0100               	movlb	0	; () banked
  9039  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9040  0003B2  0ED6               	movlw	low STR_14
  9041  0003B4  0100               	movlb	0	; () banked
  9042  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  9043  0003B8  0EFF               	movlw	high STR_14
  9044  0003BA  0100               	movlb	0	; () banked
  9045  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9046  0003BE  EC25  F02B         	call	_strcpy	;wreg free
  9047                           
  9048                           ;UI.c: 150: break;
  9049  0003C2  D08C               	goto	l9382
  9050  0003C4                     l9366:
  9051                           
  9052                           ;UI.c: 152: strcpy(month, "AUG");
  9053  0003C4  0ED6               	movlw	low UI@month
  9054  0003C6  0100               	movlb	0	; () banked
  9055  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  9056  0003CA  0E00               	movlw	high UI@month
  9057  0003CC  0100               	movlb	0	; () banked
  9058  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9059  0003D0  0ED2               	movlw	low STR_15
  9060  0003D2  0100               	movlb	0	; () banked
  9061  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  9062  0003D6  0EFF               	movlw	high STR_15
  9063  0003D8  0100               	movlb	0	; () banked
  9064  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9065  0003DC  EC25  F02B         	call	_strcpy	;wreg free
  9066                           
  9067                           ;UI.c: 153: break;
  9068  0003E0  D07D               	goto	l9382
  9069  0003E2                     l9368:
  9070                           
  9071                           ;UI.c: 155: strcpy(month, "SEP");
  9072  0003E2  0ED6               	movlw	low UI@month
  9073  0003E4  0100               	movlb	0	; () banked
  9074  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  9075  0003E8  0E00               	movlw	high UI@month
  9076  0003EA  0100               	movlb	0	; () banked
  9077  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9078  0003EE  0EE2               	movlw	low STR_16
  9079  0003F0  0100               	movlb	0	; () banked
  9080  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  9081  0003F4  0EFF               	movlw	high STR_16
  9082  0003F6  0100               	movlb	0	; () banked
  9083  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9084  0003FA  EC25  F02B         	call	_strcpy	;wreg free
  9085                           
  9086                           ;UI.c: 156: break;
  9087  0003FE  D06E               	goto	l9382
  9088  000400                     l9370:
  9089                           
  9090                           ;UI.c: 158: strcpy(month, "OCT");
  9091  000400  0ED6               	movlw	low UI@month
  9092  000402  0100               	movlb	0	; () banked
  9093  000404  6F80               	movwf	strcpy@to& (0+255),b
  9094  000406  0E00               	movlw	high UI@month
  9095  000408  0100               	movlb	0	; () banked
  9096  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9097  00040C  0EF2               	movlw	low STR_17
  9098  00040E  0100               	movlb	0	; () banked
  9099  000410  6F82               	movwf	strcpy@from& (0+255),b
  9100  000412  0EFF               	movlw	high STR_17
  9101  000414  0100               	movlb	0	; () banked
  9102  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9103  000418  EC25  F02B         	call	_strcpy	;wreg free
  9104                           
  9105                           ;UI.c: 159: break;
  9106  00041C  D05F               	goto	l9382
  9107  00041E                     l9372:
  9108                           
  9109                           ;UI.c: 161: strcpy(month, "NOV");
  9110  00041E  0ED6               	movlw	low UI@month
  9111  000420  0100               	movlb	0	; () banked
  9112  000422  6F80               	movwf	strcpy@to& (0+255),b
  9113  000424  0E00               	movlw	high UI@month
  9114  000426  0100               	movlb	0	; () banked
  9115  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9116  00042A  0EF6               	movlw	low STR_18
  9117  00042C  0100               	movlb	0	; () banked
  9118  00042E  6F82               	movwf	strcpy@from& (0+255),b
  9119  000430  0EFF               	movlw	high STR_18
  9120  000432  0100               	movlb	0	; () banked
  9121  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9122  000436  EC25  F02B         	call	_strcpy	;wreg free
  9123                           
  9124                           ;UI.c: 162: break;
  9125  00043A  D050               	goto	l9382
  9126  00043C                     l9374:
  9127                           
  9128                           ;UI.c: 164: strcpy(month, "DEC");
  9129  00043C  0ED6               	movlw	low UI@month
  9130  00043E  0100               	movlb	0	; () banked
  9131  000440  6F80               	movwf	strcpy@to& (0+255),b
  9132  000442  0E00               	movlw	high UI@month
  9133  000444  0100               	movlb	0	; () banked
  9134  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9135  000448  0ECE               	movlw	low STR_19
  9136  00044A  0100               	movlb	0	; () banked
  9137  00044C  6F82               	movwf	strcpy@from& (0+255),b
  9138  00044E  0EFF               	movlw	high STR_19
  9139  000450  0100               	movlb	0	; () banked
  9140  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9141  000454  EC25  F02B         	call	_strcpy	;wreg free
  9142                           
  9143                           ;UI.c: 165: break;
  9144  000458  D041               	goto	l9382
  9145  00045A                     l9376:
  9146                           
  9147                           ;UI.c: 167: strcpy(month, "ERR");
  9148  00045A  0ED6               	movlw	low UI@month
  9149  00045C  0100               	movlb	0	; () banked
  9150  00045E  6F80               	movwf	strcpy@to& (0+255),b
  9151  000460  0E00               	movlw	high UI@month
  9152  000462  0100               	movlb	0	; () banked
  9153  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9154  000466  0EEE               	movlw	low STR_20
  9155  000468  0100               	movlb	0	; () banked
  9156  00046A  6F82               	movwf	strcpy@from& (0+255),b
  9157  00046C  0EFF               	movlw	high STR_20
  9158  00046E  0100               	movlb	0	; () banked
  9159  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9160  000472  EC25  F02B         	call	_strcpy	;wreg free
  9161                           
  9162                           ;UI.c: 169: }
  9163                           
  9164                           ;UI.c: 168: break;
  9165  000476  D032               	goto	l9382
  9166  000478                     l9380:
  9167  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  9168  00047C  CFDE F0C4          	movff	postinc2,??_UI
  9169  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  9170                           
  9171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9172                           ; Switch size 1, requested type "space"
  9173                           ; Number of cases is 1, Range of values is 0 to 0
  9174                           ; switch strategies available:
  9175                           ; Name         Instructions Cycles
  9176                           ; simple_byte            4     3 (average)
  9177                           ;	Chosen strategy is simple_byte
  9178  000484  0100               	movlb	0	; () banked
  9179  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  9180  000488  0A00               	xorlw	0	; case 0
  9181  00048A  A4D8               	btfss	status,2,c
  9182  00048C  D7E6               	goto	l9376
  9183                           
  9184                           ; BSR set to: 0
  9185                           ; Switch size 1, requested type "space"
  9186                           ; Number of cases is 12, Range of values is 1 to 12
  9187                           ; switch strategies available:
  9188                           ; Name         Instructions Cycles
  9189                           ; simple_byte           37    19 (average)
  9190                           ;	Chosen strategy is simple_byte
  9191  00048E  0100               	movlb	0	; () banked
  9192  000490  51C4               	movf	??_UI& (0+255),w,b
  9193  000492  0A01               	xorlw	1	; case 1
  9194  000494  B4D8               	btfsc	status,2,c
  9195  000496  D72D               	goto	l9352
  9196  000498  0A03               	xorlw	3	; case 2
  9197  00049A  B4D8               	btfsc	status,2,c
  9198  00049C  D739               	goto	l9354
  9199  00049E  0A01               	xorlw	1	; case 3
  9200  0004A0  B4D8               	btfsc	status,2,c
  9201  0004A2  D745               	goto	l9356
  9202  0004A4  0A07               	xorlw	7	; case 4
  9203  0004A6  B4D8               	btfsc	status,2,c
  9204  0004A8  D751               	goto	l9358
  9205  0004AA  0A01               	xorlw	1	; case 5
  9206  0004AC  B4D8               	btfsc	status,2,c
  9207  0004AE  D75D               	goto	l9360
  9208  0004B0  0A03               	xorlw	3	; case 6
  9209  0004B2  B4D8               	btfsc	status,2,c
  9210  0004B4  D769               	goto	l9362
  9211  0004B6  0A01               	xorlw	1	; case 7
  9212  0004B8  B4D8               	btfsc	status,2,c
  9213  0004BA  D775               	goto	l9364
  9214  0004BC  0A0F               	xorlw	15	; case 8
  9215  0004BE  B4D8               	btfsc	status,2,c
  9216  0004C0  D781               	goto	l9366
  9217  0004C2  0A01               	xorlw	1	; case 9
  9218  0004C4  B4D8               	btfsc	status,2,c
  9219  0004C6  D78D               	goto	l9368
  9220  0004C8  0A03               	xorlw	3	; case 10
  9221  0004CA  B4D8               	btfsc	status,2,c
  9222  0004CC  D799               	goto	l9370
  9223  0004CE  0A01               	xorlw	1	; case 11
  9224  0004D0  B4D8               	btfsc	status,2,c
  9225  0004D2  D7A5               	goto	l9372
  9226  0004D4  0A07               	xorlw	7	; case 12
  9227  0004D6  B4D8               	btfsc	status,2,c
  9228  0004D8  D7B1               	goto	l9374
  9229  0004DA  D7BF               	goto	l9376
  9230  0004DC                     l9382:
  9231                           
  9232                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9233  0004DC  0EA4               	movlw	low STR_21
  9234  0004DE  0100               	movlb	0	; () banked
  9235  0004E0  6F8E               	movwf	printf@f& (0+255),b
  9236  0004E2  0EFA               	movlw	high STR_21
  9237  0004E4  0100               	movlb	0	; () banked
  9238  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9239  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  9240  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  9241  0004F0  0ED6               	movlw	low UI@month
  9242  0004F2  0100               	movlb	0	; () banked
  9243  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  9244  0004F6  0E00               	movlw	high UI@month
  9245  0004F8  0100               	movlb	0	; () banked
  9246  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  9247  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  9248  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  9249  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  9250  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  9251  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  9252  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  9253  000514  ECC1  F00B         	call	_printf	;wreg free
  9254                           
  9255                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9256  000518  0E00               	movlw	0
  9257  00051A  0100               	movlb	0	; () banked
  9258  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  9259  00051E                     l9386:
  9260                           
  9261                           ; BSR set to: 0
  9262  00051E  0E63               	movlw	99
  9263  000520  0100               	movlb	0	; () banked
  9264  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  9265  000524  D001               	goto	l9390
  9266  000526  D00C               	goto	l9394
  9267  000528                     l9390:
  9268                           
  9269                           ; BSR set to: 0
  9270  000528  0E68               	movlw	104
  9271  00052A  0100               	movlb	0	; () banked
  9272  00052C  6FC4               	movwf	??_UI& (0+255),b
  9273  00052E  0EE4               	movlw	228
  9274  000530                     u10367:
  9275  000530  2EE8               	decfsz	wreg,f,c
  9276  000532  D7FE               	bra	u10367
  9277  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  9278  000536  D7FC               	bra	u10367
  9279  000538  F000               	nop	
  9280  00053A  0100               	movlb	0	; () banked
  9281  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  9282  00053E  D7EF               	goto	l9386
  9283  000540                     l9394:
  9284                           
  9285                           ; BSR set to: 0
  9286  000540  0100               	movlb	0	; () banked
  9287  000542  51F8               	movf	_logstate& (0+255),w,b
  9288  000544  0100               	movlb	0	; () banked
  9289  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9290  000548  B4D8               	btfsc	status,2,c
  9291  00054A  0012               	return	
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9295                           
  9296                           ; BSR set to: 0
  9297                           
  9298                           ; BSR set to: 0
  9299  00054C  0E00               	movlw	0
  9300  00054E  0100               	movlb	0	; () banked
  9301  000550  6FCD               	movwf	UI@i_432& (0+255),b
  9302  000552                     l9400:
  9303                           
  9304                           ; BSR set to: 0
  9305  000552  0E63               	movlw	99
  9306  000554  0100               	movlb	0	; () banked
  9307  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  9308  000558  D001               	goto	l9404
  9309  00055A  D00C               	goto	l9408
  9310  00055C                     l9404:
  9311                           
  9312                           ; BSR set to: 0
  9313  00055C  0E68               	movlw	104
  9314  00055E  0100               	movlb	0	; () banked
  9315  000560  6FC4               	movwf	??_UI& (0+255),b
  9316  000562  0EE4               	movlw	228
  9317  000564                     u10377:
  9318  000564  2EE8               	decfsz	wreg,f,c
  9319  000566  D7FE               	bra	u10377
  9320  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  9321  00056A  D7FC               	bra	u10377
  9322  00056C  F000               	nop	
  9323  00056E  0100               	movlb	0	; () banked
  9324  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  9325  000572  D7EF               	goto	l9400
  9326  000574                     l9408:
  9327                           
  9328                           ; BSR set to: 0
  9329  000574  0100               	movlb	0	; () banked
  9330  000576  51F8               	movf	_logstate& (0+255),w,b
  9331  000578  0100               	movlb	0	; () banked
  9332  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9333  00057C  B4D8               	btfsc	status,2,c
  9334  00057E  0012               	return	
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9338                           
  9339                           ; BSR set to: 0
  9340                           
  9341                           ; BSR set to: 0
  9342  000580  0E01               	movlw	1
  9343  000582  ECCB  F02D         	call	_lcdInst
  9344  000586  0E68               	movlw	104
  9345  000588  0100               	movlb	0	; () banked
  9346  00058A  6FC4               	movwf	??_UI& (0+255),b
  9347  00058C  0EE4               	movlw	228
  9348  00058E                     u10387:
  9349  00058E  2EE8               	decfsz	wreg,f,c
  9350  000590  D7FE               	bra	u10387
  9351  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  9352  000594  D7FC               	bra	u10387
  9353  000596  F000               	nop	
  9354                           
  9355                           ;UI.c: 176: lcdInst(0b10000000);;
  9356  000598  0E80               	movlw	128
  9357  00059A  ECCB  F02D         	call	_lcdInst
  9358                           
  9359                           ;UI.c: 177: printf("DURATION:");
  9360  00059E  0E92               	movlw	low STR_22
  9361  0005A0  0100               	movlb	0	; () banked
  9362  0005A2  6F8E               	movwf	printf@f& (0+255),b
  9363  0005A4  0EFF               	movlw	high STR_22
  9364  0005A6  0100               	movlb	0	; () banked
  9365  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9366  0005AA  ECC1  F00B         	call	_printf	;wreg free
  9367                           
  9368                           ;UI.c: 178: lcdInst(0b11000000);;
  9369  0005AE  0EC0               	movlw	192
  9370  0005B0  ECCB  F02D         	call	_lcdInst
  9371                           
  9372                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9373  0005B4  0E0E               	movlw	14
  9374  0005B6  0100               	movlb	0	; () banked
  9375  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9376  0005BA  0E10               	movlw	16
  9377  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  9378  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9379  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9380  0005C6  ECFB  F025         	call	___awmod	;wreg free
  9381  0005CA  C080  F0C6         	movff	?___awmod,_UI$2457
  9382  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2457+1
  9383                           
  9384                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9385  0005D2  0E1B               	movlw	low STR_23
  9386  0005D4  0100               	movlb	0	; () banked
  9387  0005D6  6F8E               	movwf	printf@f& (0+255),b
  9388  0005D8  0EFF               	movlw	high STR_23
  9389  0005DA  0100               	movlb	0	; () banked
  9390  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9391  0005DE  0E0E               	movlw	14
  9392  0005E0  0100               	movlb	0	; () banked
  9393  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9394  0005E4  0E10               	movlw	16
  9395  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  9396  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9397  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9398  0005F0  ECFB  F025         	call	___awmod	;wreg free
  9399  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  9400  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9401  0005FC  0E00               	movlw	0
  9402  0005FE  0100               	movlb	0	; () banked
  9403  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9404  000602  0E3C               	movlw	60
  9405  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  9406  000606  ECE9  F024         	call	___awdiv	;wreg free
  9407  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  9408  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  9409  000612  C0C6  F080         	movff	_UI$2457,___awmod@dividend
  9410  000616  C0C7  F081         	movff	_UI$2457+1,___awmod@dividend+1
  9411  00061A  0E00               	movlw	0
  9412  00061C  0100               	movlb	0	; () banked
  9413  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9414  000620  0E3C               	movlw	60
  9415  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  9416  000624  ECFB  F025         	call	___awmod	;wreg free
  9417  000628  C080  F092         	movff	?___awmod,?_printf+4
  9418  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  9419  000630  ECC1  F00B         	call	_printf	;wreg free
  9420                           
  9421                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9422  000634  0E00               	movlw	0
  9423  000636  0100               	movlb	0	; () banked
  9424  000638  6FCE               	movwf	UI@i_435& (0+255),b
  9425  00063A                     l9428:
  9426                           
  9427                           ; BSR set to: 0
  9428  00063A  0E63               	movlw	99
  9429  00063C  0100               	movlb	0	; () banked
  9430  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  9431  000640  D001               	goto	l9432
  9432  000642  D00C               	goto	l9436
  9433  000644                     l9432:
  9434                           
  9435                           ; BSR set to: 0
  9436  000644  0E68               	movlw	104
  9437  000646  0100               	movlb	0	; () banked
  9438  000648  6FC4               	movwf	??_UI& (0+255),b
  9439  00064A  0EE4               	movlw	228
  9440  00064C                     u10397:
  9441  00064C  2EE8               	decfsz	wreg,f,c
  9442  00064E  D7FE               	bra	u10397
  9443  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  9444  000652  D7FC               	bra	u10397
  9445  000654  F000               	nop	
  9446  000656  0100               	movlb	0	; () banked
  9447  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  9448  00065A  D7EF               	goto	l9428
  9449  00065C                     l9436:
  9450                           
  9451                           ; BSR set to: 0
  9452  00065C  0100               	movlb	0	; () banked
  9453  00065E  51F8               	movf	_logstate& (0+255),w,b
  9454  000660  0100               	movlb	0	; () banked
  9455  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9456  000664  B4D8               	btfsc	status,2,c
  9457  000666  0012               	return	
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  000668  0E00               	movlw	0
  9466  00066A  0100               	movlb	0	; () banked
  9467  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  9468  00066E                     l9442:
  9469                           
  9470                           ; BSR set to: 0
  9471  00066E  0E63               	movlw	99
  9472  000670  0100               	movlb	0	; () banked
  9473  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  9474  000674  D001               	goto	l9446
  9475  000676  D00C               	goto	l9450
  9476  000678                     l9446:
  9477                           
  9478                           ; BSR set to: 0
  9479  000678  0E68               	movlw	104
  9480  00067A  0100               	movlb	0	; () banked
  9481  00067C  6FC4               	movwf	??_UI& (0+255),b
  9482  00067E  0EE4               	movlw	228
  9483  000680                     u10407:
  9484  000680  2EE8               	decfsz	wreg,f,c
  9485  000682  D7FE               	bra	u10407
  9486  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  9487  000686  D7FC               	bra	u10407
  9488  000688  F000               	nop	
  9489  00068A  0100               	movlb	0	; () banked
  9490  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  9491  00068E  D7EF               	goto	l9442
  9492  000690                     l9450:
  9493                           
  9494                           ; BSR set to: 0
  9495  000690  0100               	movlb	0	; () banked
  9496  000692  51F8               	movf	_logstate& (0+255),w,b
  9497  000694  0100               	movlb	0	; () banked
  9498  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9499  000698  B4D8               	btfsc	status,2,c
  9500  00069A  0012               	return	
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9504                           
  9505                           ; BSR set to: 0
  9506                           
  9507                           ; BSR set to: 0
  9508  00069C  0E01               	movlw	1
  9509  00069E  ECCB  F02D         	call	_lcdInst
  9510  0006A2  0E68               	movlw	104
  9511  0006A4  0100               	movlb	0	; () banked
  9512  0006A6  6FC4               	movwf	??_UI& (0+255),b
  9513  0006A8  0EE4               	movlw	228
  9514  0006AA                     u10417:
  9515  0006AA  2EE8               	decfsz	wreg,f,c
  9516  0006AC  D7FE               	bra	u10417
  9517  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  9518  0006B0  D7FC               	bra	u10417
  9519  0006B2  F000               	nop	
  9520                           
  9521                           ;UI.c: 185: lcdInst(0b10000000);;
  9522  0006B4  0E80               	movlw	128
  9523  0006B6  ECCB  F02D         	call	_lcdInst
  9524                           
  9525                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9526  0006BA  0E3E               	movlw	low STR_24
  9527  0006BC  0100               	movlb	0	; () banked
  9528  0006BE  6F8E               	movwf	printf@f& (0+255),b
  9529  0006C0  0EFD               	movlw	high STR_24
  9530  0006C2  0100               	movlb	0	; () banked
  9531  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9532  0006C6  ECC1  F00B         	call	_printf	;wreg free
  9533                           
  9534                           ;UI.c: 187: lcdInst(0b11000000);;
  9535  0006CA  0EC0               	movlw	192
  9536  0006CC  ECCB  F02D         	call	_lcdInst
  9537                           
  9538                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9539  0006D0  0E1B               	movlw	low STR_25
  9540  0006D2  0100               	movlb	0	; () banked
  9541  0006D4  6F8E               	movwf	printf@f& (0+255),b
  9542  0006D6  0EFE               	movlw	high STR_25
  9543  0006D8  0100               	movlb	0	; () banked
  9544  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9545  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9546  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9547  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9548  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9549  0006EC  ECC1  F00B         	call	_printf	;wreg free
  9550                           
  9551                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9552  0006F0  0E00               	movlw	0
  9553  0006F2  0100               	movlb	0	; () banked
  9554  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  9555  0006F6                     l9468:
  9556                           
  9557                           ; BSR set to: 0
  9558  0006F6  0E63               	movlw	99
  9559  0006F8  0100               	movlb	0	; () banked
  9560  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  9561  0006FC  D001               	goto	l9472
  9562  0006FE  D00C               	goto	l9476
  9563  000700                     l9472:
  9564                           
  9565                           ; BSR set to: 0
  9566  000700  0E68               	movlw	104
  9567  000702  0100               	movlb	0	; () banked
  9568  000704  6FC4               	movwf	??_UI& (0+255),b
  9569  000706  0EE4               	movlw	228
  9570  000708                     u10427:
  9571  000708  2EE8               	decfsz	wreg,f,c
  9572  00070A  D7FE               	bra	u10427
  9573  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  9574  00070E  D7FC               	bra	u10427
  9575  000710  F000               	nop	
  9576  000712  0100               	movlb	0	; () banked
  9577  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  9578  000716  D7EF               	goto	l9468
  9579  000718                     l9476:
  9580                           
  9581                           ; BSR set to: 0
  9582  000718  0100               	movlb	0	; () banked
  9583  00071A  51F8               	movf	_logstate& (0+255),w,b
  9584  00071C  0100               	movlb	0	; () banked
  9585  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9586  000720  B4D8               	btfsc	status,2,c
  9587  000722  0012               	return	
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9591                           
  9592                           ; BSR set to: 0
  9593                           
  9594                           ; BSR set to: 0
  9595  000724  0E00               	movlw	0
  9596  000726  0100               	movlb	0	; () banked
  9597  000728  6FD1               	movwf	UI@i_440& (0+255),b
  9598  00072A                     l9482:
  9599                           
  9600                           ; BSR set to: 0
  9601  00072A  0E63               	movlw	99
  9602  00072C  0100               	movlb	0	; () banked
  9603  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  9604  000730  D001               	goto	l9486
  9605  000732  D00C               	goto	l9490
  9606  000734                     l9486:
  9607                           
  9608                           ; BSR set to: 0
  9609  000734  0E68               	movlw	104
  9610  000736  0100               	movlb	0	; () banked
  9611  000738  6FC4               	movwf	??_UI& (0+255),b
  9612  00073A  0EE4               	movlw	228
  9613  00073C                     u10437:
  9614  00073C  2EE8               	decfsz	wreg,f,c
  9615  00073E  D7FE               	bra	u10437
  9616  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  9617  000742  D7FC               	bra	u10437
  9618  000744  F000               	nop	
  9619  000746  0100               	movlb	0	; () banked
  9620  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  9621  00074A  D7EF               	goto	l9482
  9622  00074C                     l9490:
  9623                           
  9624                           ; BSR set to: 0
  9625  00074C  0100               	movlb	0	; () banked
  9626  00074E  51F8               	movf	_logstate& (0+255),w,b
  9627  000750  0100               	movlb	0	; () banked
  9628  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9629  000754  B4D8               	btfsc	status,2,c
  9630  000756  0012               	return	
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9634                           
  9635                           ; BSR set to: 0
  9636                           
  9637                           ; BSR set to: 0
  9638  000758  0E01               	movlw	1
  9639  00075A  ECCB  F02D         	call	_lcdInst
  9640  00075E  0E68               	movlw	104
  9641  000760  0100               	movlb	0	; () banked
  9642  000762  6FC4               	movwf	??_UI& (0+255),b
  9643  000764  0EE4               	movlw	228
  9644  000766                     u10447:
  9645  000766  2EE8               	decfsz	wreg,f,c
  9646  000768  D7FE               	bra	u10447
  9647  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  9648  00076C  D7FC               	bra	u10447
  9649  00076E  F000               	nop	
  9650                           
  9651                           ;UI.c: 194: lcdInst(0b10000000);;
  9652  000770  0E80               	movlw	128
  9653  000772  ECCB  F02D         	call	_lcdInst
  9654                           
  9655                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9656  000776  0E4F               	movlw	low STR_26
  9657  000778  0100               	movlb	0	; () banked
  9658  00077A  6F8E               	movwf	printf@f& (0+255),b
  9659  00077C  0EFD               	movlw	high STR_26
  9660  00077E  0100               	movlb	0	; () banked
  9661  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  9662  000782  ECC1  F00B         	call	_printf	;wreg free
  9663                           
  9664                           ;UI.c: 196: lcdInst(0b11000000);;
  9665  000786  0EC0               	movlw	192
  9666  000788  ECCB  F02D         	call	_lcdInst
  9667                           
  9668                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9669  00078C  0E0A               	movlw	low STR_27
  9670  00078E  0100               	movlb	0	; () banked
  9671  000790  6F8E               	movwf	printf@f& (0+255),b
  9672  000792  0EFE               	movlw	high STR_27
  9673  000794  0100               	movlb	0	; () banked
  9674  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  9675  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  9676  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9677  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  9678  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9679  0007A8  ECC1  F00B         	call	_printf	;wreg free
  9680                           
  9681                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9682  0007AC  0E00               	movlw	0
  9683  0007AE  0100               	movlb	0	; () banked
  9684  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  9685  0007B2                     l9508:
  9686                           
  9687                           ; BSR set to: 0
  9688  0007B2  0E63               	movlw	99
  9689  0007B4  0100               	movlb	0	; () banked
  9690  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  9691  0007B8  D001               	goto	l9512
  9692  0007BA  D00C               	goto	l9516
  9693  0007BC                     l9512:
  9694                           
  9695                           ; BSR set to: 0
  9696  0007BC  0E68               	movlw	104
  9697  0007BE  0100               	movlb	0	; () banked
  9698  0007C0  6FC4               	movwf	??_UI& (0+255),b
  9699  0007C2  0EE4               	movlw	228
  9700  0007C4                     u10457:
  9701  0007C4  2EE8               	decfsz	wreg,f,c
  9702  0007C6  D7FE               	bra	u10457
  9703  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  9704  0007CA  D7FC               	bra	u10457
  9705  0007CC  F000               	nop	
  9706  0007CE  0100               	movlb	0	; () banked
  9707  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  9708  0007D2  D7EF               	goto	l9508
  9709  0007D4                     l9516:
  9710                           
  9711                           ; BSR set to: 0
  9712  0007D4  0100               	movlb	0	; () banked
  9713  0007D6  51F8               	movf	_logstate& (0+255),w,b
  9714  0007D8  0100               	movlb	0	; () banked
  9715  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9716  0007DC  B4D8               	btfsc	status,2,c
  9717  0007DE  0012               	return	
  9718                           
  9719                           ; BSR set to: 0
  9720                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9721                           
  9722                           ; BSR set to: 0
  9723                           
  9724                           ; BSR set to: 0
  9725  0007E0  0E00               	movlw	0
  9726  0007E2  0100               	movlb	0	; () banked
  9727  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  9728  0007E6                     l9522:
  9729                           
  9730                           ; BSR set to: 0
  9731  0007E6  0E63               	movlw	99
  9732  0007E8  0100               	movlb	0	; () banked
  9733  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  9734  0007EC  D001               	goto	l9526
  9735  0007EE  D00C               	goto	l9530
  9736  0007F0                     l9526:
  9737                           
  9738                           ; BSR set to: 0
  9739  0007F0  0E68               	movlw	104
  9740  0007F2  0100               	movlb	0	; () banked
  9741  0007F4  6FC4               	movwf	??_UI& (0+255),b
  9742  0007F6  0EE4               	movlw	228
  9743  0007F8                     u10467:
  9744  0007F8  2EE8               	decfsz	wreg,f,c
  9745  0007FA  D7FE               	bra	u10467
  9746  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  9747  0007FE  D7FC               	bra	u10467
  9748  000800  F000               	nop	
  9749  000802  0100               	movlb	0	; () banked
  9750  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  9751  000806  D7EF               	goto	l9522
  9752  000808                     l9530:
  9753                           
  9754                           ; BSR set to: 0
  9755  000808  0100               	movlb	0	; () banked
  9756  00080A  51F8               	movf	_logstate& (0+255),w,b
  9757  00080C  0100               	movlb	0	; () banked
  9758  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9759  000810  B4D8               	btfsc	status,2,c
  9760  000812  0012               	return	
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9764                           
  9765                           ; BSR set to: 0
  9766                           
  9767                           ; BSR set to: 0
  9768  000814  0E01               	movlw	1
  9769  000816  ECCB  F02D         	call	_lcdInst
  9770  00081A  0E68               	movlw	104
  9771  00081C  0100               	movlb	0	; () banked
  9772  00081E  6FC4               	movwf	??_UI& (0+255),b
  9773  000820  0EE4               	movlw	228
  9774  000822                     u10477:
  9775  000822  2EE8               	decfsz	wreg,f,c
  9776  000824  D7FE               	bra	u10477
  9777  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  9778  000828  D7FC               	bra	u10477
  9779  00082A  F000               	nop	
  9780                           
  9781                           ;UI.c: 203: lcdInst(0b10000000);;
  9782  00082C  0E80               	movlw	128
  9783  00082E  ECCB  F02D         	call	_lcdInst
  9784                           
  9785                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9786  000832  0E60               	movlw	low STR_28
  9787  000834  0100               	movlb	0	; () banked
  9788  000836  6F8E               	movwf	printf@f& (0+255),b
  9789  000838  0EFD               	movlw	high STR_28
  9790  00083A  0100               	movlb	0	; () banked
  9791  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9792  00083E  ECC1  F00B         	call	_printf	;wreg free
  9793                           
  9794                           ;UI.c: 205: lcdInst(0b11000000);;
  9795  000842  0EC0               	movlw	192
  9796  000844  ECCB  F02D         	call	_lcdInst
  9797                           
  9798                           ;UI.c: 206: printf("%d", log_count_total);
  9799  000848  0E4C               	movlw	low (STR_64+15)
  9800  00084A  0100               	movlb	0	; () banked
  9801  00084C  6F8E               	movwf	printf@f& (0+255),b
  9802  00084E  0EFB               	movlw	high (STR_64+15)
  9803  000850  0100               	movlb	0	; () banked
  9804  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  9805  000854  C143  F090         	movff	_log_count_total,?_printf+2
  9806  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  9807  00085C  ECC1  F00B         	call	_printf	;wreg free
  9808                           
  9809                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9810  000860  0E00               	movlw	0
  9811  000862  0100               	movlb	0	; () banked
  9812  000864  6FD4               	movwf	UI@i_447& (0+255),b
  9813  000866                     l9548:
  9814                           
  9815                           ; BSR set to: 0
  9816  000866  0E63               	movlw	99
  9817  000868  0100               	movlb	0	; () banked
  9818  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  9819  00086C  D001               	goto	l9552
  9820  00086E  D00C               	goto	l9556
  9821  000870                     l9552:
  9822                           
  9823                           ; BSR set to: 0
  9824  000870  0E68               	movlw	104
  9825  000872  0100               	movlb	0	; () banked
  9826  000874  6FC4               	movwf	??_UI& (0+255),b
  9827  000876  0EE4               	movlw	228
  9828  000878                     u10487:
  9829  000878  2EE8               	decfsz	wreg,f,c
  9830  00087A  D7FE               	bra	u10487
  9831  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  9832  00087E  D7FC               	bra	u10487
  9833  000880  F000               	nop	
  9834  000882  0100               	movlb	0	; () banked
  9835  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  9836  000886  D7EF               	goto	l9548
  9837  000888                     l9556:
  9838                           
  9839                           ; BSR set to: 0
  9840  000888  0100               	movlb	0	; () banked
  9841  00088A  51F8               	movf	_logstate& (0+255),w,b
  9842  00088C  0100               	movlb	0	; () banked
  9843  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9844  000890  B4D8               	btfsc	status,2,c
  9845  000892  0012               	return	
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9849                           
  9850                           ; BSR set to: 0
  9851                           
  9852                           ; BSR set to: 0
  9853  000894  0E00               	movlw	0
  9854  000896  0100               	movlb	0	; () banked
  9855  000898  6FD5               	movwf	UI@i_448& (0+255),b
  9856  00089A                     l9562:
  9857                           
  9858                           ; BSR set to: 0
  9859  00089A  0E63               	movlw	99
  9860  00089C  0100               	movlb	0	; () banked
  9861  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  9862  0008A0  D001               	goto	l9566
  9863  0008A2  D00C               	goto	l9570
  9864  0008A4                     l9566:
  9865                           
  9866                           ; BSR set to: 0
  9867  0008A4  0E68               	movlw	104
  9868  0008A6  0100               	movlb	0	; () banked
  9869  0008A8  6FC4               	movwf	??_UI& (0+255),b
  9870  0008AA  0EE4               	movlw	228
  9871  0008AC                     u10497:
  9872  0008AC  2EE8               	decfsz	wreg,f,c
  9873  0008AE  D7FE               	bra	u10497
  9874  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  9875  0008B2  D7FC               	bra	u10497
  9876  0008B4  F000               	nop	
  9877  0008B6  0100               	movlb	0	; () banked
  9878  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  9879  0008BA  D7EF               	goto	l9562
  9880  0008BC                     l9570:
  9881                           
  9882                           ; BSR set to: 0
  9883  0008BC  0100               	movlb	0	; () banked
  9884  0008BE  51F8               	movf	_logstate& (0+255),w,b
  9885  0008C0  0100               	movlb	0	; () banked
  9886  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9887  0008C4  B4D8               	btfsc	status,2,c
  9888  0008C6  0012               	return	
  9889  0008C8                     l9574:
  9890  0008C8  0100               	movlb	0	; () banked
  9891  0008CA  51F8               	movf	_logstate& (0+255),w,b
  9892  0008CC  0100               	movlb	0	; () banked
  9893  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9894  0008D0  B4D8               	btfsc	status,2,c
  9895  0008D2  0012               	return	
  9896  0008D4  D44C               	goto	l9270
  9897  0008D6                     __end_of_UI:
  9898                           	opt stack 0
  9899                           tblptru	equ	0xFF8
  9900                           tblptrh	equ	0xFF7
  9901                           tblptrl	equ	0xFF6
  9902                           tablat	equ	0xFF5
  9903                           prodh	equ	0xFF4
  9904                           prodl	equ	0xFF3
  9905                           intcon	equ	0xFF2
  9906                           intcon2	equ	0xFF1
  9907                           intcon3	equ	0xFF0
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           postdec1	equ	0xFE5
  9911                           fsr1l	equ	0xFE1
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _printRTC *****************
  9920 ;; Defined at:
  9921 ;;		line 63 in file "RTC.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  i               2   66[BANK0 ] int 
  9926 ;;  INT_time       14   46[BANK0 ] int [7]
  9927 ;;  month           4   62[BANK0 ] unsigned char [4]
  9928 ;;  RTC_month       2   60[BANK0 ] int 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;Total ram usage:       25 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:   10
  9945 ;; This function calls:
  9946 ;;		_getRTC
  9947 ;;		_lcdInst
  9948 ;;		_printf
  9949 ;;		_strcpy
  9950 ;; This function is called by:
  9951 ;;		_UI
  9952 ;;		_change_state_to_menu_start
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text26
  9957  002DE2                     __ptext26:
  9958                           	opt stack 0
  9959  002DE2                     _printRTC:
  9960                           	opt stack 18
  9961                           
  9962                           ;RTC.c: 64: getRTC();
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;incstack = 0
  9966  002DE2  EC92  F026         	call	_getRTC	;wreg free
  9967                           
  9968                           ;RTC.c: 65: char month[] = "MMM";
  9969  002DE6  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9970  002DEA  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9971  002DEE  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9972  002DF2  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9973                           
  9974                           ;RTC.c: 66: int INT_time[7];
  9975                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9976  002DF6  0E00               	movlw	0
  9977  002DF8  0100               	movlb	0	; () banked
  9978  002DFA  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9979  002DFC  0E00               	movlw	0
  9980  002DFE  6FC2               	movwf	printRTC@i& (0+255),b
  9981                           
  9982                           ; BSR set to: 0
  9983  002E00  0100               	movlb	0	; () banked
  9984  002E02  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9985  002E04  D008               	goto	l7116
  9986  002E06  0100               	movlb	0	; () banked
  9987  002E08  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9988  002E0A  E146               	bnz	l620
  9989  002E0C  0E07               	movlw	7
  9990  002E0E  0100               	movlb	0	; () banked
  9991  002E10  5DC2               	subwf	printRTC@i& (0+255),w,b
  9992  002E12  B0D8               	btfsc	status,0,c
  9993  002E14  D041               	goto	l620
  9994  002E16                     l7116:
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9998  002E16  0E1C               	movlw	low _time
  9999  002E18  0100               	movlb	0	; () banked
 10000  002E1A  25C2               	addwf	printRTC@i& (0+255),w,b
 10001  002E1C  6ED9               	movwf	fsr2l,c
 10002  002E1E  0E01               	movlw	high _time
 10003  002E20  0100               	movlb	0	; () banked
 10004  002E22  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10005  002E24  6EDA               	movwf	fsr2h,c
 10006  002E26  50DF               	movf	indf2,w,c
 10007  002E28  0100               	movlb	0	; () banked
 10008  002E2A  6FAB               	movwf	??_printRTC& (0+255),b
 10009  002E2C  0100               	movlb	0	; () banked
 10010  002E2E  3BAB               	swapf	??_printRTC& (0+255),f,b
 10011  002E30  0E0F               	movlw	15
 10012  002E32  17AB               	andwf	??_printRTC& (0+255),f,b
 10013  002E34  0E0F               	movlw	15
 10014  002E36  0100               	movlb	0	; () banked
 10015  002E38  17AB               	andwf	??_printRTC& (0+255),f,b
 10016  002E3A  0100               	movlb	0	; () banked
 10017  002E3C  51AB               	movf	??_printRTC& (0+255),w,b
 10018  002E3E  0D0A               	mullw	10
 10019  002E40  0E1C               	movlw	low _time
 10020  002E42  0100               	movlb	0	; () banked
 10021  002E44  25C2               	addwf	printRTC@i& (0+255),w,b
 10022  002E46  6ED9               	movwf	fsr2l,c
 10023  002E48  0E01               	movlw	high _time
 10024  002E4A  0100               	movlb	0	; () banked
 10025  002E4C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10026  002E4E  6EDA               	movwf	fsr2h,c
 10027  002E50  50DF               	movf	indf2,w,c
 10028  002E52  0B0F               	andlw	15
 10029  002E54  0100               	movlb	0	; () banked
 10030  002E56  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10031  002E58  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10032  002E5A  50F3               	movf	prodl,w,c
 10033  002E5C  0100               	movlb	0	; () banked
 10034  002E5E  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10035  002E60  50F4               	movf	prodh,w,c
 10036  002E62  0100               	movlb	0	; () banked
 10037  002E64  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10038  002E66  90D8               	bcf	status,0,c
 10039  002E68  0100               	movlb	0	; () banked
 10040  002E6A  35C2               	rlcf	printRTC@i& (0+255),w,b
 10041  002E6C  6ED9               	movwf	fsr2l,c
 10042  002E6E  0100               	movlb	0	; () banked
 10043  002E70  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10044  002E72  6EDA               	movwf	fsr2h,c
 10045  002E74  0EAE               	movlw	low printRTC@INT_time
 10046  002E76  26D9               	addwf	fsr2l,f,c
 10047  002E78  0E00               	movlw	high printRTC@INT_time
 10048  002E7A  22DA               	addwfc	fsr2h,f,c
 10049  002E7C  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10050  002E80  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10051                           
 10052                           ; BSR set to: 0
 10053  002E84  0100               	movlb	0	; () banked
 10054  002E86  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10055  002E88  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10056                           
 10057                           ; BSR set to: 0
 10058  002E8A  0100               	movlb	0	; () banked
 10059  002E8C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10060  002E8E  D7C3               	goto	l7116
 10061  002E90  0100               	movlb	0	; () banked
 10062  002E92  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10063  002E94  E101               	bnz	u5960
 10064  002E96  D7BA               	goto	L12
 10065  002E98                     u5960:
 10066  002E98                     l620:
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;RTC.c: 69: }
 10070                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10071  002E98  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10072  002E9C  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10073                           
 10074                           ;RTC.c: 72: switch(RTC_month){
 10075  002EA0  D0B4               	goto	l7148
 10076  002EA2                     l7122:
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;RTC.c: 74: strcpy(month, "JAN");
 10080  002EA2  0EBE               	movlw	low printRTC@month
 10081  002EA4  0100               	movlb	0	; () banked
 10082  002EA6  6F80               	movwf	strcpy@to& (0+255),b
 10083  002EA8  0E00               	movlw	high printRTC@month
 10084  002EAA  0100               	movlb	0	; () banked
 10085  002EAC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10086  002EAE  0EDA               	movlw	low STR_8
 10087  002EB0  0100               	movlb	0	; () banked
 10088  002EB2  6F82               	movwf	strcpy@from& (0+255),b
 10089  002EB4  0EFF               	movlw	high STR_8
 10090  002EB6  0100               	movlb	0	; () banked
 10091  002EB8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10092  002EBA  EC25  F02B         	call	_strcpy	;wreg free
 10093                           
 10094                           ;RTC.c: 75: break;
 10095  002EBE  D0D4               	goto	l7150
 10096  002EC0                     l7124:
 10097                           
 10098                           ;RTC.c: 77: strcpy(month, "FEB");
 10099  002EC0  0EBE               	movlw	low printRTC@month
 10100  002EC2  0100               	movlb	0	; () banked
 10101  002EC4  6F80               	movwf	strcpy@to& (0+255),b
 10102  002EC6  0E00               	movlw	high printRTC@month
 10103  002EC8  0100               	movlb	0	; () banked
 10104  002ECA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10105  002ECC  0ECA               	movlw	low STR_9
 10106  002ECE  0100               	movlb	0	; () banked
 10107  002ED0  6F82               	movwf	strcpy@from& (0+255),b
 10108  002ED2  0EFF               	movlw	high STR_9
 10109  002ED4  0100               	movlb	0	; () banked
 10110  002ED6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10111  002ED8  EC25  F02B         	call	_strcpy	;wreg free
 10112                           
 10113                           ;RTC.c: 78: break;
 10114  002EDC  D0C5               	goto	l7150
 10115  002EDE                     l7126:
 10116                           
 10117                           ;RTC.c: 80: strcpy(month, "MAR");
 10118  002EDE  0EBE               	movlw	low printRTC@month
 10119  002EE0  0100               	movlb	0	; () banked
 10120  002EE2  6F80               	movwf	strcpy@to& (0+255),b
 10121  002EE4  0E00               	movlw	high printRTC@month
 10122  002EE6  0100               	movlb	0	; () banked
 10123  002EE8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10124  002EEA  0EE6               	movlw	low STR_10
 10125  002EEC  0100               	movlb	0	; () banked
 10126  002EEE  6F82               	movwf	strcpy@from& (0+255),b
 10127  002EF0  0EFF               	movlw	high STR_10
 10128  002EF2  0100               	movlb	0	; () banked
 10129  002EF4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10130  002EF6  EC25  F02B         	call	_strcpy	;wreg free
 10131                           
 10132                           ;RTC.c: 81: break;
 10133  002EFA  D0B6               	goto	l7150
 10134  002EFC                     l7128:
 10135                           
 10136                           ;RTC.c: 83: strcpy(month, "APR");
 10137  002EFC  0EBE               	movlw	low printRTC@month
 10138  002EFE  0100               	movlb	0	; () banked
 10139  002F00  6F80               	movwf	strcpy@to& (0+255),b
 10140  002F02  0E00               	movlw	high printRTC@month
 10141  002F04  0100               	movlb	0	; () banked
 10142  002F06  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10143  002F08  0EEA               	movlw	low STR_11
 10144  002F0A  0100               	movlb	0	; () banked
 10145  002F0C  6F82               	movwf	strcpy@from& (0+255),b
 10146  002F0E  0EFF               	movlw	high STR_11
 10147  002F10  0100               	movlb	0	; () banked
 10148  002F12  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10149  002F14  EC25  F02B         	call	_strcpy	;wreg free
 10150                           
 10151                           ;RTC.c: 84: break;
 10152  002F18  D0A7               	goto	l7150
 10153  002F1A                     l7130:
 10154                           
 10155                           ;RTC.c: 86: strcpy(month, "MAY");
 10156  002F1A  0EBE               	movlw	low printRTC@month
 10157  002F1C  0100               	movlb	0	; () banked
 10158  002F1E  6F80               	movwf	strcpy@to& (0+255),b
 10159  002F20  0E00               	movlw	high printRTC@month
 10160  002F22  0100               	movlb	0	; () banked
 10161  002F24  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10162  002F26  0EFA               	movlw	low STR_12
 10163  002F28  0100               	movlb	0	; () banked
 10164  002F2A  6F82               	movwf	strcpy@from& (0+255),b
 10165  002F2C  0EFF               	movlw	high STR_12
 10166  002F2E  0100               	movlb	0	; () banked
 10167  002F30  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10168  002F32  EC25  F02B         	call	_strcpy	;wreg free
 10169                           
 10170                           ;RTC.c: 87: break;
 10171  002F36  D098               	goto	l7150
 10172  002F38                     l7132:
 10173                           
 10174                           ;RTC.c: 89: strcpy(month, "JUN");
 10175  002F38  0EBE               	movlw	low printRTC@month
 10176  002F3A  0100               	movlb	0	; () banked
 10177  002F3C  6F80               	movwf	strcpy@to& (0+255),b
 10178  002F3E  0E00               	movlw	high printRTC@month
 10179  002F40  0100               	movlb	0	; () banked
 10180  002F42  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10181  002F44  0EDE               	movlw	low STR_13
 10182  002F46  0100               	movlb	0	; () banked
 10183  002F48  6F82               	movwf	strcpy@from& (0+255),b
 10184  002F4A  0EFF               	movlw	high STR_13
 10185  002F4C  0100               	movlb	0	; () banked
 10186  002F4E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10187  002F50  EC25  F02B         	call	_strcpy	;wreg free
 10188                           
 10189                           ;RTC.c: 90: break;
 10190  002F54  D089               	goto	l7150
 10191  002F56                     l7134:
 10192                           
 10193                           ;RTC.c: 92: strcpy(month, "JUL");
 10194  002F56  0EBE               	movlw	low printRTC@month
 10195  002F58  0100               	movlb	0	; () banked
 10196  002F5A  6F80               	movwf	strcpy@to& (0+255),b
 10197  002F5C  0E00               	movlw	high printRTC@month
 10198  002F5E  0100               	movlb	0	; () banked
 10199  002F60  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10200  002F62  0ED6               	movlw	low STR_14
 10201  002F64  0100               	movlb	0	; () banked
 10202  002F66  6F82               	movwf	strcpy@from& (0+255),b
 10203  002F68  0EFF               	movlw	high STR_14
 10204  002F6A  0100               	movlb	0	; () banked
 10205  002F6C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10206  002F6E  EC25  F02B         	call	_strcpy	;wreg free
 10207                           
 10208                           ;RTC.c: 93: break;
 10209  002F72  D07A               	goto	l7150
 10210  002F74                     l7136:
 10211                           
 10212                           ;RTC.c: 95: strcpy(month, "AUG");
 10213  002F74  0EBE               	movlw	low printRTC@month
 10214  002F76  0100               	movlb	0	; () banked
 10215  002F78  6F80               	movwf	strcpy@to& (0+255),b
 10216  002F7A  0E00               	movlw	high printRTC@month
 10217  002F7C  0100               	movlb	0	; () banked
 10218  002F7E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10219  002F80  0ED2               	movlw	low STR_15
 10220  002F82  0100               	movlb	0	; () banked
 10221  002F84  6F82               	movwf	strcpy@from& (0+255),b
 10222  002F86  0EFF               	movlw	high STR_15
 10223  002F88  0100               	movlb	0	; () banked
 10224  002F8A  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10225  002F8C  EC25  F02B         	call	_strcpy	;wreg free
 10226                           
 10227                           ;RTC.c: 96: break;
 10228  002F90  D06B               	goto	l7150
 10229  002F92                     l7138:
 10230                           
 10231                           ;RTC.c: 98: strcpy(month, "SEP");
 10232  002F92  0EBE               	movlw	low printRTC@month
 10233  002F94  0100               	movlb	0	; () banked
 10234  002F96  6F80               	movwf	strcpy@to& (0+255),b
 10235  002F98  0E00               	movlw	high printRTC@month
 10236  002F9A  0100               	movlb	0	; () banked
 10237  002F9C  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10238  002F9E  0EE2               	movlw	low STR_16
 10239  002FA0  0100               	movlb	0	; () banked
 10240  002FA2  6F82               	movwf	strcpy@from& (0+255),b
 10241  002FA4  0EFF               	movlw	high STR_16
 10242  002FA6  0100               	movlb	0	; () banked
 10243  002FA8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10244  002FAA  EC25  F02B         	call	_strcpy	;wreg free
 10245                           
 10246                           ;RTC.c: 99: break;
 10247  002FAE  D05C               	goto	l7150
 10248  002FB0                     l7140:
 10249                           
 10250                           ;RTC.c: 101: strcpy(month, "OCT");
 10251  002FB0  0EBE               	movlw	low printRTC@month
 10252  002FB2  0100               	movlb	0	; () banked
 10253  002FB4  6F80               	movwf	strcpy@to& (0+255),b
 10254  002FB6  0E00               	movlw	high printRTC@month
 10255  002FB8  0100               	movlb	0	; () banked
 10256  002FBA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10257  002FBC  0EF2               	movlw	low STR_17
 10258  002FBE  0100               	movlb	0	; () banked
 10259  002FC0  6F82               	movwf	strcpy@from& (0+255),b
 10260  002FC2  0EFF               	movlw	high STR_17
 10261  002FC4  0100               	movlb	0	; () banked
 10262  002FC6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10263  002FC8  EC25  F02B         	call	_strcpy	;wreg free
 10264                           
 10265                           ;RTC.c: 102: break;
 10266  002FCC  D04D               	goto	l7150
 10267  002FCE                     l7142:
 10268                           
 10269                           ;RTC.c: 104: strcpy(month, "NOV");
 10270  002FCE  0EBE               	movlw	low printRTC@month
 10271  002FD0  0100               	movlb	0	; () banked
 10272  002FD2  6F80               	movwf	strcpy@to& (0+255),b
 10273  002FD4  0E00               	movlw	high printRTC@month
 10274  002FD6  0100               	movlb	0	; () banked
 10275  002FD8  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10276  002FDA  0EF6               	movlw	low STR_18
 10277  002FDC  0100               	movlb	0	; () banked
 10278  002FDE  6F82               	movwf	strcpy@from& (0+255),b
 10279  002FE0  0EFF               	movlw	high STR_18
 10280  002FE2  0100               	movlb	0	; () banked
 10281  002FE4  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10282  002FE6  EC25  F02B         	call	_strcpy	;wreg free
 10283                           
 10284                           ;RTC.c: 105: break;
 10285  002FEA  D03E               	goto	l7150
 10286  002FEC                     l7144:
 10287                           
 10288                           ;RTC.c: 107: strcpy(month, "DEC");
 10289  002FEC  0EBE               	movlw	low printRTC@month
 10290  002FEE  0100               	movlb	0	; () banked
 10291  002FF0  6F80               	movwf	strcpy@to& (0+255),b
 10292  002FF2  0E00               	movlw	high printRTC@month
 10293  002FF4  0100               	movlb	0	; () banked
 10294  002FF6  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10295  002FF8  0ECE               	movlw	low STR_19
 10296  002FFA  0100               	movlb	0	; () banked
 10297  002FFC  6F82               	movwf	strcpy@from& (0+255),b
 10298  002FFE  0EFF               	movlw	high STR_19
 10299  003000  0100               	movlb	0	; () banked
 10300  003002  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10301  003004  EC25  F02B         	call	_strcpy	;wreg free
 10302                           
 10303                           ;RTC.c: 109: }
 10304                           
 10305                           ;RTC.c: 108: break;
 10306  003008  D02F               	goto	l7150
 10307  00300A                     l7148:
 10308  00300A  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10309  00300E  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10310                           
 10311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10312                           ; Switch size 1, requested type "space"
 10313                           ; Number of cases is 1, Range of values is 0 to 0
 10314                           ; switch strategies available:
 10315                           ; Name         Instructions Cycles
 10316                           ; simple_byte            4     3 (average)
 10317                           ;	Chosen strategy is simple_byte
 10318  003012  0100               	movlb	0	; () banked
 10319  003014  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10320  003016  0A00               	xorlw	0	; case 0
 10321  003018  A4D8               	btfss	status,2,c
 10322  00301A  D026               	goto	l7150
 10323                           
 10324                           ; BSR set to: 0
 10325                           ; Switch size 1, requested type "space"
 10326                           ; Number of cases is 12, Range of values is 1 to 12
 10327                           ; switch strategies available:
 10328                           ; Name         Instructions Cycles
 10329                           ; simple_byte           37    19 (average)
 10330                           ;	Chosen strategy is simple_byte
 10331  00301C  0100               	movlb	0	; () banked
 10332  00301E  51AB               	movf	??_printRTC& (0+255),w,b
 10333  003020  0A01               	xorlw	1	; case 1
 10334  003022  B4D8               	btfsc	status,2,c
 10335  003024  D73E               	goto	l7122
 10336  003026  0A03               	xorlw	3	; case 2
 10337  003028  B4D8               	btfsc	status,2,c
 10338  00302A  D74A               	goto	l7124
 10339  00302C  0A01               	xorlw	1	; case 3
 10340  00302E  B4D8               	btfsc	status,2,c
 10341  003030  D756               	goto	l7126
 10342  003032  0A07               	xorlw	7	; case 4
 10343  003034  B4D8               	btfsc	status,2,c
 10344  003036  D762               	goto	l7128
 10345  003038  0A01               	xorlw	1	; case 5
 10346  00303A  B4D8               	btfsc	status,2,c
 10347  00303C  D76E               	goto	l7130
 10348  00303E  0A03               	xorlw	3	; case 6
 10349  003040  B4D8               	btfsc	status,2,c
 10350  003042  D77A               	goto	l7132
 10351  003044  0A01               	xorlw	1	; case 7
 10352  003046  B4D8               	btfsc	status,2,c
 10353  003048  D786               	goto	l7134
 10354  00304A  0A0F               	xorlw	15	; case 8
 10355  00304C  B4D8               	btfsc	status,2,c
 10356  00304E  D792               	goto	l7136
 10357  003050  0A01               	xorlw	1	; case 9
 10358  003052  B4D8               	btfsc	status,2,c
 10359  003054  D79E               	goto	l7138
 10360  003056  0A03               	xorlw	3	; case 10
 10361  003058  B4D8               	btfsc	status,2,c
 10362  00305A  D7AA               	goto	l7140
 10363  00305C  0A01               	xorlw	1	; case 11
 10364  00305E  B4D8               	btfsc	status,2,c
 10365  003060  D7B6               	goto	l7142
 10366  003062  0A07               	xorlw	7	; case 12
 10367  003064  B4D8               	btfsc	status,2,c
 10368  003066  D7C2               	goto	l7144
 10369  003068                     l7150:
 10370                           
 10371                           ;RTC.c: 110: lcdInst(0b10000000);;
 10372  003068  0E80               	movlw	128
 10373  00306A  ECCB  F02D         	call	_lcdInst
 10374                           
 10375                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10376  00306E  0EA4               	movlw	low STR_21
 10377  003070  0100               	movlb	0	; () banked
 10378  003072  6F8E               	movwf	printf@f& (0+255),b
 10379  003074  0EFA               	movlw	high STR_21
 10380  003076  0100               	movlb	0	; () banked
 10381  003078  6F8F               	movwf	(printf@f+1)& (0+255),b
 10382  00307A  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10383  00307E  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10384  003082  0EBE               	movlw	low printRTC@month
 10385  003084  0100               	movlb	0	; () banked
 10386  003086  6F92               	movwf	(?_printf+4)& (0+255),b
 10387  003088  0E00               	movlw	high printRTC@month
 10388  00308A  0100               	movlb	0	; () banked
 10389  00308C  6F93               	movwf	(?_printf+5)& (0+255),b
 10390  00308E  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10391  003092  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10392  003096  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10393  00309A  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10394  00309E  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10395  0030A2  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10396  0030A6  ECC1  F00B         	call	_printf	;wreg free
 10397  0030AA  0012               	return		;funcret
 10398  0030AC                     __end_of_printRTC:
 10399                           	opt stack 0
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           intcon2	equ	0xFF1
 10408                           intcon3	equ	0xFF0
 10409                           postinc0	equ	0xFEE
 10410                           wreg	equ	0xFE8
 10411                           postdec1	equ	0xFE5
 10412                           fsr1l	equ	0xFE1
 10413                           indf2	equ	0xFDF
 10414                           postinc2	equ	0xFDE
 10415                           postdec2	equ	0xFDD
 10416                           fsr2h	equ	0xFDA
 10417                           fsr2l	equ	0xFD9
 10418                           status	equ	0xFD8
 10419                           
 10420 ;; *************** function _strcpy *****************
 10421 ;; Defined at:
 10422 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10425 ;;		 -> printRTC@month(4), UI@month(4), 
 10426 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10427 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10428 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10429 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10430 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10431 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10432 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10433 ;;		 -> STR_8(4), 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10436 ;;		 -> printRTC@month(4), UI@month(4), 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2    0[BANK0 ] PTR unsigned char 
 10439 ;; Registers used:
 10440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10446 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;Total ram usage:        6 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    7
 10453 ;; This function calls:
 10454 ;;		Nothing
 10455 ;; This function is called by:
 10456 ;;		_UI
 10457 ;;		_printRTC
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text27
 10462  00564A                     __ptext27:
 10463                           	opt stack 0
 10464  00564A                     _strcpy:
 10465                           	opt stack 20
 10466                           
 10467                           ;incstack = 0
 10468  00564A  C080  F084         	movff	strcpy@to,strcpy@cp
 10469  00564E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10470  005652  D006               	goto	l6820
 10471  005654                     l6818:
 10472  005654  0100               	movlb	0	; () banked
 10473  005656  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10474  005658  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10475  00565A  0100               	movlb	0	; () banked
 10476  00565C  4B82               	infsnz	strcpy@from& (0+255),f,b
 10477  00565E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10478  005660                     l6820:
 10479  005660  C082  FFF6         	movff	strcpy@from,tblptrl
 10480  005664  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10481  005668                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10482  005668  6AF8               	clrf	tblptru,c
 10483  00566A                     	endif
 10484  00566A                     	if	0	;tblptru may be non-zero
 10485  00566A                     	endif
 10486  00566A  C084  FFD9         	movff	strcpy@cp,fsr2l
 10487  00566E  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10488  005672  0008               	tblrd		*
 10489  005674  CFF5 FFDF          	movff	tablat,indf2
 10490  005678  50DF               	movf	indf2,w,c
 10491  00567A  B4D8               	btfsc	status,2,c
 10492  00567C  0012               	return	
 10493  00567E  D7EA               	goto	l6818
 10494  005680                     __end_of_strcpy:
 10495                           	opt stack 0
 10496                           tblptru	equ	0xFF8
 10497                           tblptrh	equ	0xFF7
 10498                           tblptrl	equ	0xFF6
 10499                           tablat	equ	0xFF5
 10500                           prodh	equ	0xFF4
 10501                           prodl	equ	0xFF3
 10502                           intcon	equ	0xFF2
 10503                           intcon2	equ	0xFF1
 10504                           intcon3	equ	0xFF0
 10505                           postinc0	equ	0xFEE
 10506                           wreg	equ	0xFE8
 10507                           postdec1	equ	0xFE5
 10508                           fsr1l	equ	0xFE1
 10509                           indf2	equ	0xFDF
 10510                           postinc2	equ	0xFDE
 10511                           postdec2	equ	0xFDD
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function _getRTC *****************
 10517 ;; Defined at:
 10518 ;;		line 44 in file "RTC.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  i               2    3[BANK0 ] int 
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  1    wreg      void 
 10525 ;; Registers used:
 10526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;Total ram usage:        2 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    9
 10539 ;; This function calls:
 10540 ;;		_I2C_Master_Read
 10541 ;;		_I2C_Master_Start
 10542 ;;		_I2C_Master_Stop
 10543 ;;		_I2C_Master_Write
 10544 ;; This function is called by:
 10545 ;;		_printRTC
 10546 ;;		_initSortTimer
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           	psect	text28
 10551  004D24                     __ptext28:
 10552                           	opt stack 0
 10553  004D24                     _getRTC:
 10554                           	opt stack 18
 10555                           
 10556                           ;RTC.c: 48: I2C_Master_Start();
 10557                           
 10558                           ;incstack = 0
 10559  004D24  ECF1  F02D         	call	_I2C_Master_Start	;wreg free
 10560                           
 10561                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10562  004D28  0E00               	movlw	0
 10563  004D2A  0100               	movlb	0	; () banked
 10564  004D2C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10565  004D2E  0ED0               	movlw	208
 10566  004D30  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10567  004D32  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
 10568                           
 10569                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10570  004D36  0E00               	movlw	0
 10571  004D38  0100               	movlb	0	; () banked
 10572  004D3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10573  004D3C  0E00               	movlw	0
 10574  004D3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10575  004D40  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
 10576                           
 10577                           ;RTC.c: 51: I2C_Master_Stop();
 10578  004D44  ECED  F02D         	call	_I2C_Master_Stop	;wreg free
 10579                           
 10580                           ;RTC.c: 54: I2C_Master_Start();
 10581  004D48  ECF1  F02D         	call	_I2C_Master_Start	;wreg free
 10582                           
 10583                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10584  004D4C  0E00               	movlw	0
 10585  004D4E  0100               	movlb	0	; () banked
 10586  004D50  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10587  004D52  0ED1               	movlw	209
 10588  004D54  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10589  004D56  ECDF  F02D         	call	_I2C_Master_Write	;wreg free
 10590                           
 10591                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10592  004D5A  0E00               	movlw	0
 10593  004D5C  0100               	movlb	0	; () banked
 10594  004D5E  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10595  004D60  0E00               	movlw	0
 10596  004D62  6F83               	movwf	getRTC@i& (0+255),b
 10597  004D64                     l6826:
 10598                           
 10599                           ; BSR set to: 0
 10600  004D64  0100               	movlb	0	; () banked
 10601  004D66  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10602  004D68  D008               	goto	l6830
 10603  004D6A  0100               	movlb	0	; () banked
 10604  004D6C  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10605  004D6E  E115               	bnz	l6836
 10606  004D70  0E06               	movlw	6
 10607  004D72  0100               	movlb	0	; () banked
 10608  004D74  5D83               	subwf	getRTC@i& (0+255),w,b
 10609  004D76  B0D8               	btfsc	status,0,c
 10610  004D78  D010               	goto	l6836
 10611  004D7A                     l6830:
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10615  004D7A  0E1C               	movlw	low _time
 10616  004D7C  0100               	movlb	0	; () banked
 10617  004D7E  2583               	addwf	getRTC@i& (0+255),w,b
 10618  004D80  6ED9               	movwf	fsr2l,c
 10619  004D82  0E01               	movlw	high _time
 10620  004D84  0100               	movlb	0	; () banked
 10621  004D86  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10622  004D88  6EDA               	movwf	fsr2h,c
 10623  004D8A  0E01               	movlw	1
 10624  004D8C  EC7D  F02C         	call	_I2C_Master_Read
 10625  004D90  6EDF               	movwf	indf2,c
 10626  004D92  0100               	movlb	0	; () banked
 10627  004D94  4B83               	infsnz	getRTC@i& (0+255),f,b
 10628  004D96  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10629  004D98  D7E5               	goto	l6826
 10630  004D9A                     l6836:
 10631                           
 10632                           ; BSR set to: 0
 10633                           ;RTC.c: 58: }
 10634                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10635  004D9A  0E00               	movlw	0
 10636  004D9C  EC7D  F02C         	call	_I2C_Master_Read
 10637  004DA0  0101               	movlb	1	; () banked
 10638  004DA2  6F22               	movwf	(_time+6)& (0+255),b
 10639                           
 10640                           ;RTC.c: 60: I2C_Master_Stop();
 10641  004DA4  ECED  F02D         	call	_I2C_Master_Stop	;wreg free
 10642  004DA8  0012               	return		;funcret
 10643  004DAA                     __end_of_getRTC:
 10644                           	opt stack 0
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           intcon	equ	0xFF2
 10652                           intcon2	equ	0xFF1
 10653                           intcon3	equ	0xFF0
 10654                           postinc0	equ	0xFEE
 10655                           wreg	equ	0xFE8
 10656                           postdec1	equ	0xFE5
 10657                           fsr1l	equ	0xFE1
 10658                           indf2	equ	0xFDF
 10659                           postinc2	equ	0xFDE
 10660                           postdec2	equ	0xFDD
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _I2C_Master_Write *****************
 10666 ;; Defined at:
 10667 ;;		line 49 in file "I2C.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  d               2    1[BANK0 ] unsigned int 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;		None
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10681 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;Total ram usage:        2 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    8
 10688 ;; This function calls:
 10689 ;;		_I2C_Master_Wait
 10690 ;; This function is called by:
 10691 ;;		_loadRTC
 10692 ;;		_getRTC
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           	psect	text29
 10697  005BBE                     __ptext29:
 10698                           	opt stack 0
 10699  005BBE                     _I2C_Master_Write:
 10700                           	opt stack 18
 10701                           
 10702                           ;I2C.c: 51: I2C_Master_Wait();
 10703                           
 10704                           ;incstack = 0
 10705  005BBE  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10706                           
 10707                           ;I2C.c: 52: SSPBUF = d;
 10708  005BC2  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10709  005BC6  0012               	return		;funcret
 10710  005BC8                     __end_of_I2C_Master_Write:
 10711                           	opt stack 0
 10712                           tblptru	equ	0xFF8
 10713                           tblptrh	equ	0xFF7
 10714                           tblptrl	equ	0xFF6
 10715                           tablat	equ	0xFF5
 10716                           prodh	equ	0xFF4
 10717                           prodl	equ	0xFF3
 10718                           intcon	equ	0xFF2
 10719                           intcon2	equ	0xFF1
 10720                           intcon3	equ	0xFF0
 10721                           postinc0	equ	0xFEE
 10722                           wreg	equ	0xFE8
 10723                           postdec1	equ	0xFE5
 10724                           fsr1l	equ	0xFE1
 10725                           indf2	equ	0xFDF
 10726                           postinc2	equ	0xFDE
 10727                           postdec2	equ	0xFDD
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function _I2C_Master_Stop *****************
 10733 ;; Defined at:
 10734 ;;		line 43 in file "I2C.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  1    wreg      void 
 10741 ;; Registers used:
 10742 ;;		wreg, status,2, status,0, cstack
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10752 ;;Total ram usage:        0 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    8
 10755 ;; This function calls:
 10756 ;;		_I2C_Master_Wait
 10757 ;; This function is called by:
 10758 ;;		_loadRTC
 10759 ;;		_getRTC
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           	psect	text30
 10764  005BDA                     __ptext30:
 10765                           	opt stack 0
 10766  005BDA                     _I2C_Master_Stop:
 10767                           	opt stack 18
 10768                           
 10769                           ;I2C.c: 45: I2C_Master_Wait();
 10770                           
 10771                           ;incstack = 0
 10772  005BDA  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10773                           
 10774                           ;I2C.c: 46: PEN = 1;
 10775  005BDE  84C5               	bsf	4037,2,c	;volatile
 10776  005BE0  0012               	return		;funcret
 10777  005BE2                     __end_of_I2C_Master_Stop:
 10778                           	opt stack 0
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           intcon2	equ	0xFF1
 10787                           intcon3	equ	0xFF0
 10788                           postinc0	equ	0xFEE
 10789                           wreg	equ	0xFE8
 10790                           postdec1	equ	0xFE5
 10791                           fsr1l	equ	0xFE1
 10792                           indf2	equ	0xFDF
 10793                           postinc2	equ	0xFDE
 10794                           postdec2	equ	0xFDD
 10795                           fsr2h	equ	0xFDA
 10796                           fsr2l	equ	0xFD9
 10797                           status	equ	0xFD8
 10798                           
 10799 ;; *************** function _I2C_Master_Start *****************
 10800 ;; Defined at:
 10801 ;;		line 31 in file "I2C.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  1    wreg      void 
 10808 ;; Registers used:
 10809 ;;		wreg, status,2, status,0, cstack
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;Total ram usage:        0 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    8
 10822 ;; This function calls:
 10823 ;;		_I2C_Master_Wait
 10824 ;; This function is called by:
 10825 ;;		_loadRTC
 10826 ;;		_getRTC
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           	psect	text31
 10831  005BE2                     __ptext31:
 10832                           	opt stack 0
 10833  005BE2                     _I2C_Master_Start:
 10834                           	opt stack 18
 10835                           
 10836                           ;I2C.c: 33: I2C_Master_Wait();
 10837                           
 10838                           ;incstack = 0
 10839  005BE2  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10840                           
 10841                           ;I2C.c: 34: SEN = 1;
 10842  005BE6  80C5               	bsf	4037,0,c	;volatile
 10843  005BE8  0012               	return		;funcret
 10844  005BEA                     __end_of_I2C_Master_Start:
 10845                           	opt stack 0
 10846                           tblptru	equ	0xFF8
 10847                           tblptrh	equ	0xFF7
 10848                           tblptrl	equ	0xFF6
 10849                           tablat	equ	0xFF5
 10850                           prodh	equ	0xFF4
 10851                           prodl	equ	0xFF3
 10852                           intcon	equ	0xFF2
 10853                           intcon2	equ	0xFF1
 10854                           intcon3	equ	0xFF0
 10855                           postinc0	equ	0xFEE
 10856                           wreg	equ	0xFE8
 10857                           postdec1	equ	0xFE5
 10858                           fsr1l	equ	0xFE1
 10859                           indf2	equ	0xFDF
 10860                           postinc2	equ	0xFDE
 10861                           postdec2	equ	0xFDD
 10862                           fsr2h	equ	0xFDA
 10863                           fsr2l	equ	0xFD9
 10864                           status	equ	0xFD8
 10865                           
 10866 ;; *************** function _I2C_Master_Read *****************
 10867 ;; Defined at:
 10868 ;;		line 55 in file "I2C.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;  a               1    wreg     unsigned char 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  a               1    1[BANK0 ] unsigned char 
 10873 ;;  temp            1    2[BANK0 ] unsigned char 
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  1    wreg      unsigned char 
 10876 ;; Registers used:
 10877 ;;		wreg, status,2, status,0, cstack
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;Total ram usage:        2 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    8
 10890 ;; This function calls:
 10891 ;;		_I2C_Master_Wait
 10892 ;; This function is called by:
 10893 ;;		_getRTC
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           	psect	text32
 10898  0058FA                     __ptext32:
 10899                           	opt stack 0
 10900  0058FA                     _I2C_Master_Read:
 10901                           	opt stack 18
 10902                           
 10903                           ;incstack = 0
 10904                           ;I2C_Master_Read@a stored from wreg
 10905  0058FA  0100               	movlb	0	; () banked
 10906  0058FC  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 10907                           
 10908                           ;I2C.c: 57: unsigned char temp;
 10909                           ;I2C.c: 58: I2C_Master_Wait();
 10910  0058FE  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10911                           
 10912                           ;I2C.c: 59: RCEN = 1;
 10913  005902  86C5               	bsf	4037,3,c	;volatile
 10914                           
 10915                           ;I2C.c: 60: I2C_Master_Wait();
 10916  005904  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10917                           
 10918                           ;I2C.c: 61: temp = SSPBUF;
 10919  005908  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 10920                           
 10921                           ;I2C.c: 62: I2C_Master_Wait();
 10922  00590C  ECB0  F02D         	call	_I2C_Master_Wait	;wreg free
 10923                           
 10924                           ;I2C.c: 63: ACKDT = (a)?0:1;
 10925  005910  0100               	movlb	0	; () banked
 10926  005912  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 10927  005914  0100               	movlb	0	; () banked
 10928  005916  A4D8               	btfss	status,2,c
 10929  005918  D002               	goto	u4970
 10930  00591A  8AC5               	bsf	4037,5,c	;volatile
 10931  00591C  D001               	goto	l6514
 10932  00591E                     u4970:
 10933  00591E  9AC5               	bcf	4037,5,c	;volatile
 10934  005920                     l6514:
 10935                           
 10936                           ;I2C.c: 64: ACKEN = 1;
 10937  005920  88C5               	bsf	4037,4,c	;volatile
 10938                           
 10939                           ;I2C.c: 65: return temp;
 10940  005922  0100               	movlb	0	; () banked
 10941  005924  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10942  005926  0012               	return	
 10943  005928                     __end_of_I2C_Master_Read:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           intcon3	equ	0xFF0
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           postdec1	equ	0xFE5
 10957                           fsr1l	equ	0xFE1
 10958                           indf2	equ	0xFDF
 10959                           postinc2	equ	0xFDE
 10960                           postdec2	equ	0xFDD
 10961                           fsr2h	equ	0xFDA
 10962                           fsr2l	equ	0xFD9
 10963                           status	equ	0xFD8
 10964                           
 10965 ;; *************** function _I2C_Master_Wait *****************
 10966 ;; Defined at:
 10967 ;;		line 26 in file "I2C.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;Total ram usage:        1 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    7
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_I2C_Master_Start
 10992 ;;		_I2C_Master_Stop
 10993 ;;		_I2C_Master_Write
 10994 ;;		_I2C_Master_Read
 10995 ;;		_I2C_Master_RepeatedStart
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text33
 11000  005B60                     __ptext33:
 11001                           	opt stack 0
 11002  005B60                     _I2C_Master_Wait:
 11003                           	opt stack 18
 11004  005B60                     l66:
 11005  005B60  B4C7               	btfsc	4039,2,c	;volatile
 11006  005B62  D7FE               	goto	l66
 11007  005B64  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11008  005B68  0E1F               	movlw	31
 11009  005B6A  0100               	movlb	0	; () banked
 11010  005B6C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11011  005B6E  B4D8               	btfsc	status,2,c
 11012  005B70  0012               	return	
 11013  005B72  D7F6               	goto	l66
 11014  005B74                     __end_of_I2C_Master_Wait:
 11015                           	opt stack 0
 11016                           tblptru	equ	0xFF8
 11017                           tblptrh	equ	0xFF7
 11018                           tblptrl	equ	0xFF6
 11019                           tablat	equ	0xFF5
 11020                           prodh	equ	0xFF4
 11021                           prodl	equ	0xFF3
 11022                           intcon	equ	0xFF2
 11023                           intcon2	equ	0xFF1
 11024                           intcon3	equ	0xFF0
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           postdec1	equ	0xFE5
 11028                           fsr1l	equ	0xFE1
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _change_state_to_menu_22 *****************
 11037 ;; Defined at:
 11038 ;;		line 501 in file "UI.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;		None
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;		None
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  1    wreg      void 
 11045 ;; Registers used:
 11046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;Total ram usage:        0 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:   10
 11059 ;; This function calls:
 11060 ;;		_lcdInst
 11061 ;;		_printf
 11062 ;; This function is called by:
 11063 ;;		_UI
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           	psect	text34
 11068  0055DA                     __ptext34:
 11069                           	opt stack 0
 11070  0055DA                     _change_state_to_menu_22:
 11071                           	opt stack 19
 11072                           
 11073                           ;UI.c: 502: cur_state = 22;
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;incstack = 0
 11077  0055DA  0E00               	movlw	0
 11078  0055DC  0100               	movlb	0	; () banked
 11079  0055DE  6FED               	movwf	(_cur_state+1)& (0+255),b
 11080  0055E0  0E16               	movlw	22
 11081  0055E2  6FEC               	movwf	_cur_state& (0+255),b
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;UI.c: 504: lcdInst(0b10000000);;
 11085  0055E4  0E80               	movlw	128
 11086  0055E6  ECCB  F02D         	call	_lcdInst
 11087                           
 11088                           ;UI.c: 505: printf("2. SORT        <");
 11089  0055EA  0EC6               	movlw	low STR_34
 11090  0055EC  0100               	movlb	0	; () banked
 11091  0055EE  6F8E               	movwf	printf@f& (0+255),b
 11092  0055F0  0EFD               	movlw	high STR_34
 11093  0055F2  0100               	movlb	0	; () banked
 11094  0055F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11095  0055F6  ECC1  F00B         	call	_printf	;wreg free
 11096                           
 11097                           ;UI.c: 506: lcdInst(0b11000000);;
 11098  0055FA  0EC0               	movlw	192
 11099  0055FC  ECCB  F02D         	call	_lcdInst
 11100                           
 11101                           ;UI.c: 507: printf("3. LOGS         ");
 11102  005600  0E0B               	movlw	low STR_36
 11103  005602  0100               	movlb	0	; () banked
 11104  005604  6F8E               	movwf	printf@f& (0+255),b
 11105  005606  0EFD               	movlw	high STR_36
 11106  005608  0100               	movlb	0	; () banked
 11107  00560A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11108  00560C  ECC1  F00B         	call	_printf	;wreg free
 11109  005610  0012               	return		;funcret
 11110  005612                     __end_of_change_state_to_menu_22:
 11111                           	opt stack 0
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           intcon	equ	0xFF2
 11119                           intcon2	equ	0xFF1
 11120                           intcon3	equ	0xFF0
 11121                           postinc0	equ	0xFEE
 11122                           wreg	equ	0xFE8
 11123                           postdec1	equ	0xFE5
 11124                           fsr1l	equ	0xFE1
 11125                           indf2	equ	0xFDF
 11126                           postinc2	equ	0xFDE
 11127                           postdec2	equ	0xFDD
 11128                           fsr2h	equ	0xFDA
 11129                           fsr2l	equ	0xFD9
 11130                           status	equ	0xFD8
 11131                           
 11132 ;; *************** function _change_state_to_menu_12 *****************
 11133 ;; Defined at:
 11134 ;;		line 493 in file "UI.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;		None
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  1    wreg      void 
 11141 ;; Registers used:
 11142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11152 ;;Total ram usage:        0 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:   10
 11155 ;; This function calls:
 11156 ;;		_lcdInst
 11157 ;;		_printf
 11158 ;; This function is called by:
 11159 ;;		_UI
 11160 ;; This function uses a non-reentrant model
 11161 ;;
 11162                           
 11163                           	psect	text35
 11164  005612                     __ptext35:
 11165                           	opt stack 0
 11166  005612                     _change_state_to_menu_12:
 11167                           	opt stack 19
 11168                           
 11169                           ;UI.c: 494: cur_state = 12;
 11170                           
 11171                           ;incstack = 0
 11172  005612  0E00               	movlw	0
 11173  005614  0100               	movlb	0	; () banked
 11174  005616  6FED               	movwf	(_cur_state+1)& (0+255),b
 11175  005618  0E0C               	movlw	12
 11176  00561A  6FEC               	movwf	_cur_state& (0+255),b
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;UI.c: 496: lcdInst(0b10000000);;
 11180  00561C  0E80               	movlw	128
 11181  00561E  ECCB  F02D         	call	_lcdInst
 11182                           
 11183                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11184  005622  0E2D               	movlw	low STR_33
 11185  005624  0100               	movlb	0	; () banked
 11186  005626  6F8E               	movwf	printf@f& (0+255),b
 11187  005628  0EFD               	movlw	high STR_33
 11188  00562A  0100               	movlb	0	; () banked
 11189  00562C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11190  00562E  ECC1  F00B         	call	_printf	;wreg free
 11191                           
 11192                           ;UI.c: 498: lcdInst(0b11000000);;
 11193  005632  0EC0               	movlw	192
 11194  005634  ECCB  F02D         	call	_lcdInst
 11195                           
 11196                           ;UI.c: 499: printf("2. SORT        <");
 11197  005638  0EC6               	movlw	low STR_34
 11198  00563A  0100               	movlb	0	; () banked
 11199  00563C  6F8E               	movwf	printf@f& (0+255),b
 11200  00563E  0EFD               	movlw	high STR_34
 11201  005640  0100               	movlb	0	; () banked
 11202  005642  6F8F               	movwf	(printf@f+1)& (0+255),b
 11203  005644  ECC1  F00B         	call	_printf	;wreg free
 11204  005648  0012               	return		;funcret
 11205  00564A                     __end_of_change_state_to_menu_12:
 11206                           	opt stack 0
 11207                           tblptru	equ	0xFF8
 11208                           tblptrh	equ	0xFF7
 11209                           tblptrl	equ	0xFF6
 11210                           tablat	equ	0xFF5
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           intcon	equ	0xFF2
 11214                           intcon2	equ	0xFF1
 11215                           intcon3	equ	0xFF0
 11216                           postinc0	equ	0xFEE
 11217                           wreg	equ	0xFE8
 11218                           postdec1	equ	0xFE5
 11219                           fsr1l	equ	0xFE1
 11220                           indf2	equ	0xFDF
 11221                           postinc2	equ	0xFDE
 11222                           postdec2	equ	0xFDD
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function ___awmod *****************
 11228 ;; Defined at:
 11229 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  dividend        2    0[BANK0 ] int 
 11232 ;;  divisor         2    2[BANK0 ] int 
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;  sign            1    5[BANK0 ] unsigned char 
 11235 ;;  counter         1    4[BANK0 ] unsigned char 
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  2    0[BANK0 ] int 
 11238 ;; Registers used:
 11239 ;;		wreg, status,2, status,0
 11240 ;; Tracked objects:
 11241 ;;		On entry : 0/0
 11242 ;;		On exit  : 0/0
 11243 ;;		Unchanged: 0/0
 11244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;Total ram usage:        6 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    7
 11252 ;; This function calls:
 11253 ;;		Nothing
 11254 ;; This function is called by:
 11255 ;;		_UI
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           	psect	text36
 11260  004BF6                     __ptext36:
 11261                           	opt stack 0
 11262  004BF6                     ___awmod:
 11263                           	opt stack 22
 11264                           
 11265                           ;incstack = 0
 11266  004BF6  0E00               	movlw	0
 11267  004BF8  0100               	movlb	0	; () banked
 11268  004BFA  6F85               	movwf	___awmod@sign& (0+255),b
 11269                           
 11270                           ; BSR set to: 0
 11271  004BFC  0100               	movlb	0	; () banked
 11272  004BFE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11273  004C00  D008               	goto	l9156
 11274                           
 11275                           ; BSR set to: 0
 11276  004C02  0100               	movlb	0	; () banked
 11277  004C04  6D80               	negf	___awmod@dividend& (0+255),b
 11278  004C06  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11279  004C08  B0D8               	btfsc	status,0,c
 11280  004C0A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11281                           
 11282                           ; BSR set to: 0
 11283  004C0C  0E01               	movlw	1
 11284  004C0E  0100               	movlb	0	; () banked
 11285  004C10  6F85               	movwf	___awmod@sign& (0+255),b
 11286  004C12                     l9156:
 11287                           
 11288                           ; BSR set to: 0
 11289  004C12  0100               	movlb	0	; () banked
 11290  004C14  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11291  004C16  D005               	goto	l9160
 11292                           
 11293                           ; BSR set to: 0
 11294  004C18  0100               	movlb	0	; () banked
 11295  004C1A  6D82               	negf	___awmod@divisor& (0+255),b
 11296  004C1C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11297  004C1E  B0D8               	btfsc	status,0,c
 11298  004C20  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11299  004C22                     l9160:
 11300                           
 11301                           ; BSR set to: 0
 11302  004C22  0100               	movlb	0	; () banked
 11303  004C24  5182               	movf	___awmod@divisor& (0+255),w,b
 11304  004C26  0100               	movlb	0	; () banked
 11305  004C28  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11306  004C2A  B4D8               	btfsc	status,2,c
 11307  004C2C  D026               	goto	l9176
 11308                           
 11309                           ; BSR set to: 0
 11310  004C2E  0E01               	movlw	1
 11311  004C30  0100               	movlb	0	; () banked
 11312  004C32  6F84               	movwf	___awmod@counter& (0+255),b
 11313  004C34  D006               	goto	l9166
 11314  004C36                     l9164:
 11315                           
 11316                           ; BSR set to: 0
 11317  004C36  0100               	movlb	0	; () banked
 11318  004C38  90D8               	bcf	status,0,c
 11319  004C3A  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11320  004C3C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11321  004C3E  0100               	movlb	0	; () banked
 11322  004C40  2B84               	incf	___awmod@counter& (0+255),f,b
 11323  004C42                     l9166:
 11324                           
 11325                           ; BSR set to: 0
 11326  004C42  0100               	movlb	0	; () banked
 11327  004C44  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11328  004C46  D7F7               	goto	l9164
 11329  004C48                     l9168:
 11330                           
 11331                           ; BSR set to: 0
 11332  004C48  0100               	movlb	0	; () banked
 11333  004C4A  5182               	movf	___awmod@divisor& (0+255),w,b
 11334  004C4C  0100               	movlb	0	; () banked
 11335  004C4E  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11336  004C50  0100               	movlb	0	; () banked
 11337  004C52  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11338  004C54  0100               	movlb	0	; () banked
 11339  004C56  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11340  004C58  A0D8               	btfss	status,0,c
 11341  004C5A  D008               	goto	l9172
 11342                           
 11343                           ; BSR set to: 0
 11344  004C5C  0100               	movlb	0	; () banked
 11345  004C5E  5182               	movf	___awmod@divisor& (0+255),w,b
 11346  004C60  0100               	movlb	0	; () banked
 11347  004C62  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11348  004C64  0100               	movlb	0	; () banked
 11349  004C66  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11350  004C68  0100               	movlb	0	; () banked
 11351  004C6A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11352  004C6C                     l9172:
 11353                           
 11354                           ; BSR set to: 0
 11355  004C6C  0100               	movlb	0	; () banked
 11356  004C6E  90D8               	bcf	status,0,c
 11357  004C70  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11358  004C72  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11359                           
 11360                           ; BSR set to: 0
 11361  004C74  0100               	movlb	0	; () banked
 11362  004C76  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11363  004C78  D7E7               	goto	l9168
 11364  004C7A                     l9176:
 11365                           
 11366                           ; BSR set to: 0
 11367  004C7A  0100               	movlb	0	; () banked
 11368  004C7C  5185               	movf	___awmod@sign& (0+255),w,b
 11369  004C7E  0100               	movlb	0	; () banked
 11370  004C80  B4D8               	btfsc	status,2,c
 11371  004C82  D005               	goto	l9180
 11372                           
 11373                           ; BSR set to: 0
 11374  004C84  0100               	movlb	0	; () banked
 11375  004C86  6D80               	negf	___awmod@dividend& (0+255),b
 11376  004C88  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11377  004C8A  B0D8               	btfsc	status,0,c
 11378  004C8C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11379  004C8E                     l9180:
 11380                           
 11381                           ; BSR set to: 0
 11382  004C8E  C080  F080         	movff	___awmod@dividend,?___awmod
 11383  004C92  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11384  004C96  0012               	return	
 11385  004C98                     __end_of___awmod:
 11386                           	opt stack 0
 11387                           tblptru	equ	0xFF8
 11388                           tblptrh	equ	0xFF7
 11389                           tblptrl	equ	0xFF6
 11390                           tablat	equ	0xFF5
 11391                           prodh	equ	0xFF4
 11392                           prodl	equ	0xFF3
 11393                           intcon	equ	0xFF2
 11394                           intcon2	equ	0xFF1
 11395                           intcon3	equ	0xFF0
 11396                           postinc0	equ	0xFEE
 11397                           wreg	equ	0xFE8
 11398                           postdec1	equ	0xFE5
 11399                           fsr1l	equ	0xFE1
 11400                           indf2	equ	0xFDF
 11401                           postinc2	equ	0xFDE
 11402                           postdec2	equ	0xFDD
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function ___awdiv *****************
 11408 ;; Defined at:
 11409 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;  dividend        2    6[BANK0 ] int 
 11412 ;;  divisor         2    8[BANK0 ] int 
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;  quotient        2   12[BANK0 ] int 
 11415 ;;  sign            1   11[BANK0 ] unsigned char 
 11416 ;;  counter         1   10[BANK0 ] unsigned char 
 11417 ;; Return value:  Size  Location     Type
 11418 ;;                  2    6[BANK0 ] int 
 11419 ;; Registers used:
 11420 ;;		wreg, status,2, status,0
 11421 ;; Tracked objects:
 11422 ;;		On entry : 0/0
 11423 ;;		On exit  : 0/0
 11424 ;;		Unchanged: 0/0
 11425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11426 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11427 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11429 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;Total ram usage:        8 bytes
 11431 ;; Hardware stack levels used:    1
 11432 ;; Hardware stack levels required when called:    7
 11433 ;; This function calls:
 11434 ;;		Nothing
 11435 ;; This function is called by:
 11436 ;;		_UI
 11437 ;;		_ID
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text37
 11442  0049D2                     __ptext37:
 11443                           	opt stack 0
 11444  0049D2                     ___awdiv:
 11445                           	opt stack 21
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;incstack = 0
 11449  0049D2  0E00               	movlw	0
 11450  0049D4  0100               	movlb	0	; () banked
 11451  0049D6  6F8B               	movwf	___awdiv@sign& (0+255),b
 11452                           
 11453                           ; BSR set to: 0
 11454  0049D8  0100               	movlb	0	; () banked
 11455  0049DA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11456  0049DC  D008               	goto	l7436
 11457                           
 11458                           ; BSR set to: 0
 11459  0049DE  0100               	movlb	0	; () banked
 11460  0049E0  6D88               	negf	___awdiv@divisor& (0+255),b
 11461  0049E2  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11462  0049E4  B0D8               	btfsc	status,0,c
 11463  0049E6  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11464                           
 11465                           ; BSR set to: 0
 11466  0049E8  0E01               	movlw	1
 11467  0049EA  0100               	movlb	0	; () banked
 11468  0049EC  6F8B               	movwf	___awdiv@sign& (0+255),b
 11469  0049EE                     l7436:
 11470                           
 11471                           ; BSR set to: 0
 11472  0049EE  0100               	movlb	0	; () banked
 11473  0049F0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11474  0049F2  D008               	goto	l7442
 11475                           
 11476                           ; BSR set to: 0
 11477  0049F4  0100               	movlb	0	; () banked
 11478  0049F6  6D86               	negf	___awdiv@dividend& (0+255),b
 11479  0049F8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11480  0049FA  B0D8               	btfsc	status,0,c
 11481  0049FC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11482                           
 11483                           ; BSR set to: 0
 11484  0049FE  0E01               	movlw	1
 11485  004A00  0100               	movlb	0	; () banked
 11486  004A02  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11487  004A04                     l7442:
 11488                           
 11489                           ; BSR set to: 0
 11490  004A04  0E00               	movlw	0
 11491  004A06  0100               	movlb	0	; () banked
 11492  004A08  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11493  004A0A  0E00               	movlw	0
 11494  004A0C  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11495                           
 11496                           ; BSR set to: 0
 11497  004A0E  0100               	movlb	0	; () banked
 11498  004A10  5188               	movf	___awdiv@divisor& (0+255),w,b
 11499  004A12  0100               	movlb	0	; () banked
 11500  004A14  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11501  004A16  B4D8               	btfsc	status,2,c
 11502  004A18  D02C               	goto	l7464
 11503                           
 11504                           ; BSR set to: 0
 11505  004A1A  0E01               	movlw	1
 11506  004A1C  0100               	movlb	0	; () banked
 11507  004A1E  6F8A               	movwf	___awdiv@counter& (0+255),b
 11508  004A20  D006               	goto	l7450
 11509  004A22                     l7448:
 11510                           
 11511                           ; BSR set to: 0
 11512  004A22  0100               	movlb	0	; () banked
 11513  004A24  90D8               	bcf	status,0,c
 11514  004A26  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11515  004A28  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11516  004A2A  0100               	movlb	0	; () banked
 11517  004A2C  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11518  004A2E                     l7450:
 11519                           
 11520                           ; BSR set to: 0
 11521  004A2E  0100               	movlb	0	; () banked
 11522  004A30  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11523  004A32  D7F7               	goto	l7448
 11524  004A34                     l7452:
 11525                           
 11526                           ; BSR set to: 0
 11527  004A34  0100               	movlb	0	; () banked
 11528  004A36  90D8               	bcf	status,0,c
 11529  004A38  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11530  004A3A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11531                           
 11532                           ; BSR set to: 0
 11533  004A3C  0100               	movlb	0	; () banked
 11534  004A3E  5188               	movf	___awdiv@divisor& (0+255),w,b
 11535  004A40  0100               	movlb	0	; () banked
 11536  004A42  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11537  004A44  0100               	movlb	0	; () banked
 11538  004A46  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11539  004A48  0100               	movlb	0	; () banked
 11540  004A4A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11541  004A4C  A0D8               	btfss	status,0,c
 11542  004A4E  D00A               	goto	l7460
 11543                           
 11544                           ; BSR set to: 0
 11545  004A50  0100               	movlb	0	; () banked
 11546  004A52  5188               	movf	___awdiv@divisor& (0+255),w,b
 11547  004A54  0100               	movlb	0	; () banked
 11548  004A56  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11549  004A58  0100               	movlb	0	; () banked
 11550  004A5A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11551  004A5C  0100               	movlb	0	; () banked
 11552  004A5E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11553                           
 11554                           ; BSR set to: 0
 11555  004A60  0100               	movlb	0	; () banked
 11556  004A62  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11557  004A64                     l7460:
 11558                           
 11559                           ; BSR set to: 0
 11560  004A64  0100               	movlb	0	; () banked
 11561  004A66  90D8               	bcf	status,0,c
 11562  004A68  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11563  004A6A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11564                           
 11565                           ; BSR set to: 0
 11566  004A6C  0100               	movlb	0	; () banked
 11567  004A6E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11568  004A70  D7E1               	goto	l7452
 11569  004A72                     l7464:
 11570                           
 11571                           ; BSR set to: 0
 11572  004A72  0100               	movlb	0	; () banked
 11573  004A74  518B               	movf	___awdiv@sign& (0+255),w,b
 11574  004A76  0100               	movlb	0	; () banked
 11575  004A78  B4D8               	btfsc	status,2,c
 11576  004A7A  D005               	goto	l7468
 11577                           
 11578                           ; BSR set to: 0
 11579  004A7C  0100               	movlb	0	; () banked
 11580  004A7E  6D8C               	negf	___awdiv@quotient& (0+255),b
 11581  004A80  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11582  004A82  B0D8               	btfsc	status,0,c
 11583  004A84  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11584  004A86                     l7468:
 11585                           
 11586                           ; BSR set to: 0
 11587  004A86  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11588  004A8A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11589  004A8E  0012               	return	
 11590  004A90                     __end_of___awdiv:
 11591                           	opt stack 0
 11592                           tblptru	equ	0xFF8
 11593                           tblptrh	equ	0xFF7
 11594                           tblptrl	equ	0xFF6
 11595                           tablat	equ	0xFF5
 11596                           prodh	equ	0xFF4
 11597                           prodl	equ	0xFF3
 11598                           intcon	equ	0xFF2
 11599                           intcon2	equ	0xFF1
 11600                           intcon3	equ	0xFF0
 11601                           postinc0	equ	0xFEE
 11602                           wreg	equ	0xFE8
 11603                           postdec1	equ	0xFE5
 11604                           fsr1l	equ	0xFE1
 11605                           indf2	equ	0xFDF
 11606                           postinc2	equ	0xFDE
 11607                           postdec2	equ	0xFDD
 11608                           fsr2h	equ	0xFDA
 11609                           fsr2l	equ	0xFD9
 11610                           status	equ	0xFD8
 11611                           
 11612 ;; *************** function _Test *****************
 11613 ;; Defined at:
 11614 ;;		line 31 in file "Test.c"
 11615 ;; Parameters:    Size  Location     Type
 11616 ;;		None
 11617 ;; Auto vars:     Size  Location     Type
 11618 ;;		None
 11619 ;; Return value:  Size  Location     Type
 11620 ;;                  1    wreg      void 
 11621 ;; Registers used:
 11622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11623 ;; Tracked objects:
 11624 ;;		On entry : 0/0
 11625 ;;		On exit  : 0/0
 11626 ;;		Unchanged: 0/0
 11627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;Total ram usage:        2 bytes
 11633 ;; Hardware stack levels used:    1
 11634 ;; Hardware stack levels required when called:   11
 11635 ;; This function calls:
 11636 ;;		_BlockerTest
 11637 ;;		_BothServos
 11638 ;;		_PlatformTest
 11639 ;;		_PortTestDC
 11640 ;;		_PortTestPusher
 11641 ;;		_SpeedTest
 11642 ;;		_actuatorTest
 11643 ;;		_algorithmTest
 11644 ;;		_arm
 11645 ;;		_lcdInst
 11646 ;;		_printf
 11647 ;;		_sensorTest
 11648 ;; This function is called by:
 11649 ;;		_main
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           	psect	text38
 11654  0042E4                     __ptext38:
 11655                           	opt stack 0
 11656  0042E4                     _Test:
 11657                           	opt stack 19
 11658                           
 11659                           ;Test.c: 33: while(machine_state == Testing_state){
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;incstack = 0
 11663  0042E4  D07C               	goto	l9904
 11664  0042E6                     l9864:
 11665                           
 11666                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11667  0042E6  0E01               	movlw	1
 11668  0042E8  ECCB  F02D         	call	_lcdInst
 11669  0042EC  0E68               	movlw	104
 11670  0042EE  0100               	movlb	0	; () banked
 11671  0042F0  6FC6               	movwf	??_Test& (0+255),b
 11672  0042F2  0EE4               	movlw	228
 11673  0042F4                     u10507:
 11674  0042F4  2EE8               	decfsz	wreg,f,c
 11675  0042F6  D7FE               	bra	u10507
 11676  0042F8  2FC6               	decfsz	??_Test& (0+255),f,b
 11677  0042FA  D7FC               	bra	u10507
 11678  0042FC  F000               	nop	
 11679  0042FE  0E80               	movlw	128
 11680  004300  ECCB  F02D         	call	_lcdInst
 11681                           
 11682                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11683  004304  0E83               	movlw	low STR_70
 11684  004306  0100               	movlb	0	; () banked
 11685  004308  6F8E               	movwf	printf@f& (0+255),b
 11686  00430A  0EFC               	movlw	high STR_70
 11687  00430C  0100               	movlb	0	; () banked
 11688  00430E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11689  004310  ECC1  F00B         	call	_printf	;wreg free
 11690                           
 11691                           ;Test.c: 36: lcdInst(0b11000000);;
 11692  004314  0EC0               	movlw	192
 11693  004316  ECCB  F02D         	call	_lcdInst
 11694                           
 11695                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11696  00431A  0E94               	movlw	low STR_71
 11697  00431C  0100               	movlb	0	; () banked
 11698  00431E  6F8E               	movwf	printf@f& (0+255),b
 11699  004320  0EFC               	movlw	high STR_71
 11700  004322  0100               	movlb	0	; () banked
 11701  004324  6F8F               	movwf	(printf@f+1)& (0+255),b
 11702  004326  ECC1  F00B         	call	_printf	;wreg free
 11703  00432A                     l1218:
 11704  00432A  A281               	btfss	3969,1,c	;volatile
 11705  00432C  D7FE               	goto	l1218
 11706                           
 11707                           ;Test.c: 39: var = PORTB >> 4;
 11708  00432E  CF81 F0C6          	movff	3969,??_Test	;volatile
 11709  004332  0100               	movlb	0	; () banked
 11710  004334  3BC6               	swapf	??_Test& (0+255),f,b
 11711  004336  0E0F               	movlw	15
 11712  004338  17C6               	andwf	??_Test& (0+255),f,b
 11713  00433A  0100               	movlb	0	; () banked
 11714  00433C  51C6               	movf	??_Test& (0+255),w,b
 11715  00433E  0101               	movlb	1	; () banked
 11716  004340  6F45               	movwf	_var& (0+255),b
 11717  004342  6B46               	clrf	(_var+1)& (0+255),b
 11718                           
 11719                           ; BSR set to: 1
 11720                           ;Test.c: 40: var++;
 11721  004344  0101               	movlb	1	; () banked
 11722  004346  4B45               	infsnz	_var& (0+255),f,b
 11723  004348  2B46               	incf	(_var+1)& (0+255),f,b
 11724  00434A                     l1221:
 11725  00434A  A281               	btfss	3969,1,c	;volatile
 11726  00434C  D01F               	goto	l9902
 11727  00434E  D7FD               	goto	l1221
 11728  004350                     l9880:
 11729                           
 11730                           ;Test.c: 44: algorithmTest();
 11731  004350  EC59  F023         	call	_algorithmTest	;wreg free
 11732                           
 11733                           ;Test.c: 45: break;
 11734  004354  D044               	goto	l9904
 11735  004356                     l9882:
 11736                           
 11737                           ;Test.c: 47: sensorTest();
 11738  004356  EC72  F015         	call	_sensorTest	;wreg free
 11739                           
 11740                           ;Test.c: 48: break;
 11741  00435A  D041               	goto	l9904
 11742  00435C                     l9884:
 11743                           
 11744                           ;Test.c: 50: actuatorTest();
 11745  00435C  EC6B  F004         	call	_actuatorTest	;wreg free
 11746                           
 11747                           ;Test.c: 51: break;
 11748  004360  D03E               	goto	l9904
 11749  004362                     l9886:
 11750                           
 11751                           ;Test.c: 53: arm();
 11752  004362  ECF5  F021         	call	_arm	;wreg free
 11753                           
 11754                           ;Test.c: 54: break;
 11755  004366  D03B               	goto	l9904
 11756  004368                     l9888:
 11757                           
 11758                           ;Test.c: 56: PortTestDC();
 11759  004368  EC73  F029         	call	_PortTestDC	;wreg free
 11760                           
 11761                           ;Test.c: 57: break;
 11762  00436C  D038               	goto	l9904
 11763  00436E                     l9890:
 11764                           
 11765                           ;Test.c: 59: SpeedTest();
 11766  00436E  EC18  F027         	call	_SpeedTest	;wreg free
 11767                           
 11768                           ;Test.c: 60: break;
 11769  004372  D035               	goto	l9904
 11770  004374                     l9892:
 11771                           
 11772                           ;Test.c: 62: PortTestPusher();
 11773  004374  EC45  F029         	call	_PortTestPusher	;wreg free
 11774                           
 11775                           ;Test.c: 63: break;
 11776  004378  D032               	goto	l9904
 11777  00437A                     l9894:
 11778                           
 11779                           ;Test.c: 65: PlatformTest();
 11780  00437A  ECEC  F011         	call	_PlatformTest	;wreg free
 11781                           
 11782                           ;Test.c: 66: break;
 11783  00437E  D02F               	goto	l9904
 11784  004380                     l9896:
 11785                           
 11786                           ;Test.c: 68: BothServos();
 11787  004380  ECF5  F00F         	call	_BothServos	;wreg free
 11788                           
 11789                           ;Test.c: 69: break;
 11790  004384  D02C               	goto	l9904
 11791  004386                     l9898:
 11792                           
 11793                           ;Test.c: 71: BlockerTest();
 11794  004386  ECF8  F01E         	call	_BlockerTest	;wreg free
 11795                           
 11796                           ;Test.c: 75: }
 11797                           
 11798                           ;Test.c: 74: break;
 11799                           
 11800                           ;Test.c: 73: default:
 11801                           
 11802                           ;Test.c: 72: break;
 11803  00438A  D029               	goto	l9904
 11804  00438C                     l9902:
 11805  00438C  C145  F0C6         	movff	_var,??_Test
 11806  004390  C146  F0C7         	movff	_var+1,??_Test+1
 11807                           
 11808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11809                           ; Switch size 1, requested type "space"
 11810                           ; Number of cases is 1, Range of values is 0 to 0
 11811                           ; switch strategies available:
 11812                           ; Name         Instructions Cycles
 11813                           ; simple_byte            4     3 (average)
 11814                           ;	Chosen strategy is simple_byte
 11815  004394  0100               	movlb	0	; () banked
 11816  004396  51C7               	movf	(??_Test+1)& (0+255),w,b
 11817  004398  0A00               	xorlw	0	; case 0
 11818  00439A  A4D8               	btfss	status,2,c
 11819  00439C  D020               	goto	l9904
 11820                           
 11821                           ; BSR set to: 0
 11822                           ; Switch size 1, requested type "space"
 11823                           ; Number of cases is 10, Range of values is 1 to 11
 11824                           ; switch strategies available:
 11825                           ; Name         Instructions Cycles
 11826                           ; simple_byte           31    16 (average)
 11827                           ;	Chosen strategy is simple_byte
 11828  00439E  0100               	movlb	0	; () banked
 11829  0043A0  51C6               	movf	??_Test& (0+255),w,b
 11830  0043A2  0A01               	xorlw	1	; case 1
 11831  0043A4  B4D8               	btfsc	status,2,c
 11832  0043A6  D7D4               	goto	l9880
 11833  0043A8  0A03               	xorlw	3	; case 2
 11834  0043AA  B4D8               	btfsc	status,2,c
 11835  0043AC  D7D4               	goto	l9882
 11836  0043AE  0A01               	xorlw	1	; case 3
 11837  0043B0  B4D8               	btfsc	status,2,c
 11838  0043B2  D7D4               	goto	l9884
 11839  0043B4  0A07               	xorlw	7	; case 4
 11840  0043B6  B4D8               	btfsc	status,2,c
 11841  0043B8  D7D4               	goto	l9886
 11842  0043BA  0A01               	xorlw	1	; case 5
 11843  0043BC  B4D8               	btfsc	status,2,c
 11844  0043BE  D7D4               	goto	l9888
 11845  0043C0  0A03               	xorlw	3	; case 6
 11846  0043C2  B4D8               	btfsc	status,2,c
 11847  0043C4  D7D4               	goto	l9890
 11848  0043C6  0A01               	xorlw	1	; case 7
 11849  0043C8  B4D8               	btfsc	status,2,c
 11850  0043CA  D7D4               	goto	l9892
 11851  0043CC  0A0F               	xorlw	15	; case 8
 11852  0043CE  B4D8               	btfsc	status,2,c
 11853  0043D0  D7D4               	goto	l9894
 11854  0043D2  0A02               	xorlw	2	; case 10
 11855  0043D4  B4D8               	btfsc	status,2,c
 11856  0043D6  D7D4               	goto	l9896
 11857  0043D8  0A01               	xorlw	1	; case 11
 11858  0043DA  B4D8               	btfsc	status,2,c
 11859  0043DC  D7D4               	goto	l9898
 11860  0043DE                     l9904:
 11861  0043DE  0E03               	movlw	3
 11862  0043E0  0100               	movlb	0	; () banked
 11863  0043E2  19FC               	xorwf	_machine_state& (0+255),w,b
 11864  0043E4  A4D8               	btfss	status,2,c
 11865  0043E6  0012               	return	
 11866  0043E8  D77E               	goto	l9864
 11867  0043EA                     __end_of_Test:
 11868                           	opt stack 0
 11869                           tblptru	equ	0xFF8
 11870                           tblptrh	equ	0xFF7
 11871                           tblptrl	equ	0xFF6
 11872                           tablat	equ	0xFF5
 11873                           prodh	equ	0xFF4
 11874                           prodl	equ	0xFF3
 11875                           intcon	equ	0xFF2
 11876                           intcon2	equ	0xFF1
 11877                           intcon3	equ	0xFF0
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           postdec1	equ	0xFE5
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           postdec2	equ	0xFDD
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function _sensorTest *****************
 11890 ;; Defined at:
 11891 ;;		line 123 in file "Test.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;		None
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;  res             2   45[BANK0 ] int 
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  1    wreg      void 
 11898 ;; Registers used:
 11899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;Total ram usage:        4 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:   10
 11912 ;; This function calls:
 11913 ;;		_lcdInst
 11914 ;;		_printf
 11915 ;;		_readADC
 11916 ;;		_readMAG
 11917 ;; This function is called by:
 11918 ;;		_Test
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           	psect	text39
 11923  002AE4                     __ptext39:
 11924                           	opt stack 0
 11925  002AE4                     _sensorTest:
 11926                           	opt stack 19
 11927                           
 11928                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;incstack = 0
 11932  002AE4  0E01               	movlw	1
 11933  002AE6  ECCB  F02D         	call	_lcdInst
 11934  002AEA  0E68               	movlw	104
 11935  002AEC  0100               	movlb	0	; () banked
 11936  002AEE  6FAB               	movwf	??_sensorTest& (0+255),b
 11937  002AF0  0EE4               	movlw	228
 11938  002AF2                     u10517:
 11939  002AF2  2EE8               	decfsz	wreg,f,c
 11940  002AF4  D7FE               	bra	u10517
 11941  002AF6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11942  002AF8  D7FC               	bra	u10517
 11943  002AFA  F000               	nop	
 11944  002AFC  0E80               	movlw	128
 11945  002AFE  ECCB  F02D         	call	_lcdInst
 11946                           
 11947                           ;Test.c: 126: printf("SENSORS");
 11948  002B02  0EA5               	movlw	low STR_79
 11949  002B04  0100               	movlb	0	; () banked
 11950  002B06  6F8E               	movwf	printf@f& (0+255),b
 11951  002B08  0EFF               	movlw	high STR_79
 11952  002B0A  0100               	movlb	0	; () banked
 11953  002B0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11954  002B0E  ECC1  F00B         	call	_printf	;wreg free
 11955                           
 11956                           ;Test.c: 127: lcdInst(0b11000000);;
 11957  002B12  0EC0               	movlw	192
 11958  002B14  ECCB  F02D         	call	_lcdInst
 11959                           
 11960                           ;Test.c: 128: printf("PUSH TO START");
 11961  002B18  0E0D               	movlw	low STR_73
 11962  002B1A  0100               	movlb	0	; () banked
 11963  002B1C  6F8E               	movwf	printf@f& (0+255),b
 11964  002B1E  0EFF               	movlw	high STR_73
 11965  002B20  0100               	movlb	0	; () banked
 11966  002B22  6F8F               	movwf	(printf@f+1)& (0+255),b
 11967  002B24  ECC1  F00B         	call	_printf	;wreg free
 11968                           
 11969                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11970  002B28  0E05               	movlw	5
 11971  002B2A  0100               	movlb	0	; () banked
 11972  002B2C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11973  002B2E  0E0F               	movlw	15
 11974  002B30  0100               	movlb	0	; () banked
 11975  002B32  6FAB               	movwf	??_sensorTest& (0+255),b
 11976  002B34  0EF1               	movlw	241
 11977  002B36                     u10527:
 11978  002B36  2EE8               	decfsz	wreg,f,c
 11979  002B38  D7FE               	bra	u10527
 11980  002B3A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11981  002B3C  D7FC               	bra	u10527
 11982  002B3E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11983  002B40  D7FA               	bra	u10527
 11984  002B42                     l1250:
 11985  002B42  A281               	btfss	3969,1,c	;volatile
 11986  002B44  D7FE               	goto	l1250
 11987  002B46                     l1253:
 11988  002B46  B281               	btfsc	3969,1,c	;volatile
 11989  002B48  D7FE               	goto	l1253
 11990                           
 11991                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11992  002B4A  0E01               	movlw	1
 11993  002B4C  ECCB  F02D         	call	_lcdInst
 11994  002B50  0E68               	movlw	104
 11995  002B52  0100               	movlb	0	; () banked
 11996  002B54  6FAB               	movwf	??_sensorTest& (0+255),b
 11997  002B56  0EE4               	movlw	228
 11998  002B58                     u10537:
 11999  002B58  2EE8               	decfsz	wreg,f,c
 12000  002B5A  D7FE               	bra	u10537
 12001  002B5C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12002  002B5E  D7FC               	bra	u10537
 12003  002B60  F000               	nop	
 12004  002B62  0E80               	movlw	128
 12005  002B64  ECCB  F02D         	call	_lcdInst
 12006                           
 12007                           ;Test.c: 137: printf("TST: IR SNSR");
 12008  002B68  0E37               	movlw	low STR_81
 12009  002B6A  0100               	movlb	0	; () banked
 12010  002B6C  6F8E               	movwf	printf@f& (0+255),b
 12011  002B6E  0EFF               	movlw	high STR_81
 12012  002B70  0100               	movlb	0	; () banked
 12013  002B72  6F8F               	movwf	(printf@f+1)& (0+255),b
 12014  002B74  ECC1  F00B         	call	_printf	;wreg free
 12015                           
 12016                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12017  002B78  0E05               	movlw	5
 12018  002B7A  0100               	movlb	0	; () banked
 12019  002B7C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12020  002B7E  0E0F               	movlw	15
 12021  002B80  0100               	movlb	0	; () banked
 12022  002B82  6FAB               	movwf	??_sensorTest& (0+255),b
 12023  002B84  0EF1               	movlw	241
 12024  002B86                     u10547:
 12025  002B86  2EE8               	decfsz	wreg,f,c
 12026  002B88  D7FE               	bra	u10547
 12027  002B8A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12028  002B8C  D7FC               	bra	u10547
 12029  002B8E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12030  002B90  D7FA               	bra	u10547
 12031                           
 12032                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12033  002B92  8A8B               	bsf	3979,5,c	;volatile
 12034                           
 12035                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12036  002B94  D05C               	goto	l8256
 12037  002B96                     l8238:
 12038                           
 12039                           ;Test.c: 142: readADC(0);
 12040  002B96  0E00               	movlw	0
 12041  002B98  ECC1  F02C         	call	_readADC
 12042                           
 12043                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12044  002B9C  50C3               	movf	4035,w,c	;volatile
 12045  002B9E  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12046  002BA2  0100               	movlb	0	; () banked
 12047  002BA4  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12048  002BA6  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12049  002BAA  0100               	movlb	0	; () banked
 12050  002BAC  6BAB               	clrf	??_sensorTest& (0+255),b
 12051  002BAE  0100               	movlb	0	; () banked
 12052  002BB0  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12053  002BB2  0100               	movlb	0	; () banked
 12054  002BB4  6FAD               	movwf	sensorTest@res& (0+255),b
 12055  002BB6  0100               	movlb	0	; () banked
 12056  002BB8  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12057  002BBA  0100               	movlb	0	; () banked
 12058  002BBC  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12062  002BBE  0100               	movlb	0	; () banked
 12063  002BC0  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12064  002BC2  D00A               	goto	u7120
 12065  002BC4  0E21               	movlw	33
 12066  002BC6  0100               	movlb	0	; () banked
 12067  002BC8  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12068  002BCA  0E03               	movlw	3
 12069  002BCC  0100               	movlb	0	; () banked
 12070  002BCE  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12071  002BD0  A0D8               	btfss	status,0,c
 12072  002BD2  D002               	goto	u7120
 12073  002BD4  0E01               	movlw	1
 12074  002BD6  D001               	goto	u7130
 12075  002BD8                     u7120:
 12076  002BD8  0E00               	movlw	0
 12077  002BDA                     u7130:
 12078  002BDA  0100               	movlb	0	; () banked
 12079  002BDC  6FE6               	movwf	_IR_signal& (0+255),b
 12080  002BDE  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 12081                           
 12082                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12083  002BE0  0E01               	movlw	1
 12084  002BE2  ECCB  F02D         	call	_lcdInst
 12085  002BE6  0E68               	movlw	104
 12086  002BE8  0100               	movlb	0	; () banked
 12087  002BEA  6FAB               	movwf	??_sensorTest& (0+255),b
 12088  002BEC  0EE4               	movlw	228
 12089  002BEE                     u10557:
 12090  002BEE  2EE8               	decfsz	wreg,f,c
 12091  002BF0  D7FE               	bra	u10557
 12092  002BF2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12093  002BF4  D7FC               	bra	u10557
 12094  002BF6  F000               	nop	
 12095  002BF8  0E80               	movlw	128
 12096  002BFA  ECCB  F02D         	call	_lcdInst
 12097                           
 12098                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12099  002BFE  0E5C               	movlw	low STR_82
 12100  002C00  0100               	movlb	0	; () banked
 12101  002C02  6F8E               	movwf	printf@f& (0+255),b
 12102  002C04  0EFE               	movlw	high STR_82
 12103  002C06  0100               	movlb	0	; () banked
 12104  002C08  6F8F               	movwf	(printf@f+1)& (0+255),b
 12105  002C0A  C0E6  F090         	movff	_IR_signal,?_printf+2
 12106  002C0E  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 12107  002C12  ECC1  F00B         	call	_printf	;wreg free
 12108                           
 12109                           ;Test.c: 148: lcdInst(0b11000000);;
 12110  002C16  0EC0               	movlw	192
 12111  002C18  ECCB  F02D         	call	_lcdInst
 12112                           
 12113                           ;Test.c: 149: printf("%d", res);
 12114  002C1C  0E4C               	movlw	low (STR_64+15)
 12115  002C1E  0100               	movlb	0	; () banked
 12116  002C20  6F8E               	movwf	printf@f& (0+255),b
 12117  002C22  0EFB               	movlw	high (STR_64+15)
 12118  002C24  0100               	movlb	0	; () banked
 12119  002C26  6F8F               	movwf	(printf@f+1)& (0+255),b
 12120  002C28  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12121  002C2C  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12122  002C30  ECC1  F00B         	call	_printf	;wreg free
 12123                           
 12124                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12125  002C34  0E05               	movlw	5
 12126  002C36  0100               	movlb	0	; () banked
 12127  002C38  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12128  002C3A  0E0F               	movlw	15
 12129  002C3C  0100               	movlb	0	; () banked
 12130  002C3E  6FAB               	movwf	??_sensorTest& (0+255),b
 12131  002C40  0EF1               	movlw	241
 12132  002C42                     u10567:
 12133  002C42  2EE8               	decfsz	wreg,f,c
 12134  002C44  D7FE               	bra	u10567
 12135  002C46  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12136  002C48  D7FC               	bra	u10567
 12137  002C4A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12138  002C4C  D7FA               	bra	u10567
 12139  002C4E                     l8256:
 12140  002C4E  A281               	btfss	3969,1,c	;volatile
 12141  002C50  D7A2               	goto	l8238
 12142                           
 12143                           ;Test.c: 151: }
 12144                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12145  002C52  9A8B               	bcf	3979,5,c	;volatile
 12146                           
 12147                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12148  002C54  0E01               	movlw	1
 12149  002C56  ECCB  F02D         	call	_lcdInst
 12150  002C5A  0E68               	movlw	104
 12151  002C5C  0100               	movlb	0	; () banked
 12152  002C5E  6FAB               	movwf	??_sensorTest& (0+255),b
 12153  002C60  0EE4               	movlw	228
 12154  002C62                     u10577:
 12155  002C62  2EE8               	decfsz	wreg,f,c
 12156  002C64  D7FE               	bra	u10577
 12157  002C66  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12158  002C68  D7FC               	bra	u10577
 12159  002C6A  F000               	nop	
 12160  002C6C  0E80               	movlw	128
 12161  002C6E  ECCB  F02D         	call	_lcdInst
 12162                           
 12163                           ;Test.c: 161: printf("TST: MAGNETISM");
 12164  002C72  0E89               	movlw	low STR_84
 12165  002C74  0100               	movlb	0	; () banked
 12166  002C76  6F8E               	movwf	printf@f& (0+255),b
 12167  002C78  0EFE               	movlw	high STR_84
 12168  002C7A  0100               	movlb	0	; () banked
 12169  002C7C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12170  002C7E  ECC1  F00B         	call	_printf	;wreg free
 12171                           
 12172                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12173  002C82  0E05               	movlw	5
 12174  002C84  0100               	movlb	0	; () banked
 12175  002C86  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12176  002C88  0E0F               	movlw	15
 12177  002C8A  0100               	movlb	0	; () banked
 12178  002C8C  6FAB               	movwf	??_sensorTest& (0+255),b
 12179  002C8E  0EF1               	movlw	241
 12180  002C90                     u10587:
 12181  002C90  2EE8               	decfsz	wreg,f,c
 12182  002C92  D7FE               	bra	u10587
 12183  002C94  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12184  002C96  D7FC               	bra	u10587
 12185  002C98  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12186  002C9A  D7FA               	bra	u10587
 12187                           
 12188                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12189  002C9C  D021               	goto	l8274
 12190  002C9E                     l8268:
 12191                           
 12192                           ;Test.c: 164: readMAG();
 12193  002C9E  EC44  F02A         	call	_readMAG	;wreg free
 12194                           
 12195                           ;Test.c: 165: lcdInst(0b10000000);;
 12196  002CA2  0E80               	movlw	128
 12197  002CA4  ECCB  F02D         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 166: lcdInst(0b11000000);;
 12200  002CA8  0EC0               	movlw	192
 12201  002CAA  ECCB  F02D         	call	_lcdInst
 12202                           
 12203                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12204  002CAE  0E2C               	movlw	low STR_85
 12205  002CB0  0100               	movlb	0	; () banked
 12206  002CB2  6F8E               	movwf	printf@f& (0+255),b
 12207  002CB4  0EFE               	movlw	high STR_85
 12208  002CB6  0100               	movlb	0	; () banked
 12209  002CB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12210  002CBA  C0E8  F090         	movff	_MAG_signal,?_printf+2
 12211  002CBE  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 12212  002CC2  ECC1  F00B         	call	_printf	;wreg free
 12213                           
 12214                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12215  002CC6  0E05               	movlw	5
 12216  002CC8  0100               	movlb	0	; () banked
 12217  002CCA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12218  002CCC  0E0F               	movlw	15
 12219  002CCE  0100               	movlb	0	; () banked
 12220  002CD0  6FAB               	movwf	??_sensorTest& (0+255),b
 12221  002CD2  0EF1               	movlw	241
 12222  002CD4                     u10597:
 12223  002CD4  2EE8               	decfsz	wreg,f,c
 12224  002CD6  D7FE               	bra	u10597
 12225  002CD8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12226  002CDA  D7FC               	bra	u10597
 12227  002CDC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12228  002CDE  D7FA               	bra	u10597
 12229  002CE0                     l8274:
 12230  002CE0  A281               	btfss	3969,1,c	;volatile
 12231  002CE2  D7DD               	goto	l8268
 12232                           
 12233                           ;Test.c: 169: }
 12234                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12235  002CE4  0E01               	movlw	1
 12236  002CE6  ECCB  F02D         	call	_lcdInst
 12237  002CEA  0E68               	movlw	104
 12238  002CEC  0100               	movlb	0	; () banked
 12239  002CEE  6FAB               	movwf	??_sensorTest& (0+255),b
 12240  002CF0  0EE4               	movlw	228
 12241  002CF2                     u10607:
 12242  002CF2  2EE8               	decfsz	wreg,f,c
 12243  002CF4  D7FE               	bra	u10607
 12244  002CF6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12245  002CF8  D7FC               	bra	u10607
 12246  002CFA  F000               	nop	
 12247  002CFC  0E80               	movlw	128
 12248  002CFE  ECCB  F02D         	call	_lcdInst
 12249                           
 12250                           ;Test.c: 175: printf("TST: COND");
 12251  002D02  0E7E               	movlw	low STR_86
 12252  002D04  0100               	movlb	0	; () banked
 12253  002D06  6F8E               	movwf	printf@f& (0+255),b
 12254  002D08  0EFF               	movlw	high STR_86
 12255  002D0A  0100               	movlb	0	; () banked
 12256  002D0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12257  002D0E  ECC1  F00B         	call	_printf	;wreg free
 12258                           
 12259                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12260  002D12  0E05               	movlw	5
 12261  002D14  0100               	movlb	0	; () banked
 12262  002D16  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12263  002D18  0E0F               	movlw	15
 12264  002D1A  0100               	movlb	0	; () banked
 12265  002D1C  6FAB               	movwf	??_sensorTest& (0+255),b
 12266  002D1E  0EF1               	movlw	241
 12267  002D20                     u10617:
 12268  002D20  2EE8               	decfsz	wreg,f,c
 12269  002D22  D7FE               	bra	u10617
 12270  002D24  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12271  002D26  D7FC               	bra	u10617
 12272  002D28  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12273  002D2A  D7FA               	bra	u10617
 12274  002D2C                     l8286:
 12275                           
 12276                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12277  002D2C  0E01               	movlw	1
 12278  002D2E  ECCB  F02D         	call	_lcdInst
 12279  002D32  0E68               	movlw	104
 12280  002D34  0100               	movlb	0	; () banked
 12281  002D36  6FAB               	movwf	??_sensorTest& (0+255),b
 12282  002D38  0EE4               	movlw	228
 12283  002D3A                     u10627:
 12284  002D3A  2EE8               	decfsz	wreg,f,c
 12285  002D3C  D7FE               	bra	u10627
 12286  002D3E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12287  002D40  D7FC               	bra	u10627
 12288  002D42  F000               	nop	
 12289  002D44  0E80               	movlw	128
 12290  002D46  ECCB  F02D         	call	_lcdInst
 12291                           
 12292                           ;Test.c: 179: printf("TST: COND");
 12293  002D4A  0E7E               	movlw	low STR_86
 12294  002D4C  0100               	movlb	0	; () banked
 12295  002D4E  6F8E               	movwf	printf@f& (0+255),b
 12296  002D50  0EFF               	movlw	high STR_86
 12297  002D52  0100               	movlb	0	; () banked
 12298  002D54  6F8F               	movwf	(printf@f+1)& (0+255),b
 12299  002D56  ECC1  F00B         	call	_printf	;wreg free
 12300                           
 12301                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12302  002D5A  D01B               	goto	l8298
 12303  002D5C                     l8294:
 12304                           
 12305                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12306  002D5C  0E80               	movlw	128
 12307  002D5E  ECCB  F02D         	call	_lcdInst
 12308  002D62  0EC0               	movlw	192
 12309  002D64  ECCB  F02D         	call	_lcdInst
 12310                           
 12311                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12312  002D68  0E9C               	movlw	low STR_88
 12313  002D6A  0100               	movlb	0	; () banked
 12314  002D6C  6F8E               	movwf	printf@f& (0+255),b
 12315  002D6E  0EFF               	movlw	high STR_88
 12316  002D70  0100               	movlb	0	; () banked
 12317  002D72  6F8F               	movwf	(printf@f+1)& (0+255),b
 12318  002D74  A480               	btfss	3968,2,c	;volatile
 12319  002D76  D004               	goto	u7160
 12320  002D78  0100               	movlb	0	; () banked
 12321  002D7A  6BAB               	clrf	??_sensorTest& (0+255),b
 12322  002D7C  2BAB               	incf	??_sensorTest& (0+255),f,b
 12323  002D7E  D002               	goto	u7168
 12324  002D80                     u7160:
 12325  002D80  0100               	movlb	0	; () banked
 12326  002D82  6BAB               	clrf	??_sensorTest& (0+255),b
 12327  002D84                     u7168:
 12328  002D84  0100               	movlb	0	; () banked
 12329  002D86  51AB               	movf	??_sensorTest& (0+255),w,b
 12330  002D88  0100               	movlb	0	; () banked
 12331  002D8A  6F90               	movwf	(?_printf+2)& (0+255),b
 12332  002D8C  6B91               	clrf	(?_printf+3)& (0+255),b
 12333  002D8E  ECC1  F00B         	call	_printf	;wreg free
 12334  002D92                     l8298:
 12335  002D92  A281               	btfss	3969,1,c	;volatile
 12336  002D94  D7E3               	goto	l8294
 12337                           
 12338                           ;Test.c: 186: }
 12339                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12340  002D96  3881               	swapf	3969,w,c	;volatile
 12341  002D98  0B0F               	andlw	15
 12342  002D9A  0A0F               	xorlw	15
 12343  002D9C  B4D8               	btfsc	status,2,c
 12344  002D9E  0012               	return	
 12345                           
 12346                           ;Test.c: 190: else{
 12347                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12348                           
 12349                           ;Test.c: 189: }
 12350                           
 12351                           ;Test.c: 188: break;
 12352  002DA0  8689               	bsf	3977,3,c	;volatile
 12353                           
 12354                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12355  002DA2  D01B               	goto	l8310
 12356  002DA4                     l8306:
 12357                           
 12358                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12359  002DA4  0E80               	movlw	128
 12360  002DA6  ECCB  F02D         	call	_lcdInst
 12361  002DAA  0EC0               	movlw	192
 12362  002DAC  ECCB  F02D         	call	_lcdInst
 12363                           
 12364                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12365  002DB0  0E9C               	movlw	low STR_88
 12366  002DB2  0100               	movlb	0	; () banked
 12367  002DB4  6F8E               	movwf	printf@f& (0+255),b
 12368  002DB6  0EFF               	movlw	high STR_88
 12369  002DB8  0100               	movlb	0	; () banked
 12370  002DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12371  002DBC  A480               	btfss	3968,2,c	;volatile
 12372  002DBE  D004               	goto	u7190
 12373  002DC0  0100               	movlb	0	; () banked
 12374  002DC2  6BAB               	clrf	??_sensorTest& (0+255),b
 12375  002DC4  2BAB               	incf	??_sensorTest& (0+255),f,b
 12376  002DC6  D002               	goto	u7198
 12377  002DC8                     u7190:
 12378  002DC8  0100               	movlb	0	; () banked
 12379  002DCA  6BAB               	clrf	??_sensorTest& (0+255),b
 12380  002DCC                     u7198:
 12381  002DCC  0100               	movlb	0	; () banked
 12382  002DCE  51AB               	movf	??_sensorTest& (0+255),w,b
 12383  002DD0  0100               	movlb	0	; () banked
 12384  002DD2  6F90               	movwf	(?_printf+2)& (0+255),b
 12385  002DD4  6B91               	clrf	(?_printf+3)& (0+255),b
 12386  002DD6  ECC1  F00B         	call	_printf	;wreg free
 12387  002DDA                     l8310:
 12388  002DDA  B281               	btfsc	3969,1,c	;volatile
 12389  002DDC  D7E3               	goto	l8306
 12390                           
 12391                           ;Test.c: 196: }
 12392                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12393  002DDE  9689               	bcf	3977,3,c	;volatile
 12394  002DE0  D7A5               	goto	l8286
 12395  002DE2                     __end_of_sensorTest:
 12396                           	opt stack 0
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           intcon2	equ	0xFF1
 12405                           intcon3	equ	0xFF0
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           postdec1	equ	0xFE5
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function _readMAG *****************
 12418 ;; Defined at:
 12419 ;;		line 29 in file "ADCFunctionality.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;  res             2    4[BANK0 ] int 
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12436 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12437 ;;Total ram usage:        4 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    8
 12440 ;; This function calls:
 12441 ;;		_readADC
 12442 ;; This function is called by:
 12443 ;;		_getMAG
 12444 ;;		_sensorTest
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           	psect	text40
 12449  005488                     __ptext40:
 12450                           	opt stack 0
 12451  005488                     _readMAG:
 12452                           	opt stack 19
 12453                           
 12454                           ;ADCFunctionality.c: 30: readADC(1);
 12455                           
 12456                           ;incstack = 0
 12457  005488  0E01               	movlw	1
 12458  00548A  ECC1  F02C         	call	_readADC
 12459                           
 12460                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12461  00548E  50C3               	movf	4035,w,c	;volatile
 12462  005490  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12463  005494  0100               	movlb	0	; () banked
 12464  005496  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12465  005498  C082  F083         	movff	??_readMAG,??_readMAG+1
 12466  00549C  0100               	movlb	0	; () banked
 12467  00549E  6B82               	clrf	??_readMAG& (0+255),b
 12468  0054A0  0100               	movlb	0	; () banked
 12469  0054A2  1182               	iorwf	??_readMAG& (0+255),w,b
 12470  0054A4  0100               	movlb	0	; () banked
 12471  0054A6  6F84               	movwf	readMAG@res& (0+255),b
 12472  0054A8  0100               	movlb	0	; () banked
 12473  0054AA  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12474  0054AC  0100               	movlb	0	; () banked
 12475  0054AE  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12479  0054B0  0100               	movlb	0	; () banked
 12480  0054B2  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12481  0054B4  D008               	goto	u5191
 12482  0054B6  0100               	movlb	0	; () banked
 12483  0054B8  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12484  0054BA  E107               	bnz	u5190
 12485  0054BC  0E96               	movlw	150
 12486  0054BE  0100               	movlb	0	; () banked
 12487  0054C0  5D84               	subwf	readMAG@res& (0+255),w,b
 12488  0054C2  B0D8               	btfsc	status,0,c
 12489  0054C4  D002               	goto	u5190
 12490  0054C6                     u5191:
 12491  0054C6  0E01               	movlw	1
 12492  0054C8  D001               	goto	u5200
 12493  0054CA                     u5190:
 12494  0054CA  0E00               	movlw	0
 12495  0054CC                     u5200:
 12496  0054CC  0100               	movlb	0	; () banked
 12497  0054CE  6FE8               	movwf	_MAG_signal& (0+255),b
 12498  0054D0  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 12499                           
 12500                           ; BSR set to: 0
 12501  0054D2  0012               	return		;funcret
 12502  0054D4                     __end_of_readMAG:
 12503                           	opt stack 0
 12504                           tblptru	equ	0xFF8
 12505                           tblptrh	equ	0xFF7
 12506                           tblptrl	equ	0xFF6
 12507                           tablat	equ	0xFF5
 12508                           prodh	equ	0xFF4
 12509                           prodl	equ	0xFF3
 12510                           intcon	equ	0xFF2
 12511                           intcon2	equ	0xFF1
 12512                           intcon3	equ	0xFF0
 12513                           postinc0	equ	0xFEE
 12514                           wreg	equ	0xFE8
 12515                           postdec1	equ	0xFE5
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           fsr2h	equ	0xFDA
 12521                           fsr2l	equ	0xFD9
 12522                           status	equ	0xFD8
 12523                           
 12524 ;; *************** function _arm *****************
 12525 ;; Defined at:
 12526 ;;		line 649 in file "Test.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;		None
 12529 ;; Auto vars:     Size  Location     Type
 12530 ;;  on              2   44[BANK0 ] int 
 12531 ;; Return value:  Size  Location     Type
 12532 ;;                  1    wreg      void 
 12533 ;; Registers used:
 12534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12541 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;Total ram usage:        3 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:   10
 12547 ;; This function calls:
 12548 ;;		_lcdInst
 12549 ;;		_printf
 12550 ;;		_stopSignals
 12551 ;; This function is called by:
 12552 ;;		_Test
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           	psect	text41
 12557  0043EA                     __ptext41:
 12558                           	opt stack 0
 12559  0043EA                     _arm:
 12560                           	opt stack 19
 12561                           
 12562                           ;Test.c: 650: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12563                           
 12564                           ; BSR set to: 0
 12565                           ;incstack = 0
 12566  0043EA  0E01               	movlw	1
 12567  0043EC  ECCB  F02D         	call	_lcdInst
 12568  0043F0  0E68               	movlw	104
 12569  0043F2  0100               	movlb	0	; () banked
 12570  0043F4  6FAB               	movwf	??_arm& (0+255),b
 12571  0043F6  0EE4               	movlw	228
 12572  0043F8                     u10637:
 12573  0043F8  2EE8               	decfsz	wreg,f,c
 12574  0043FA  D7FE               	bra	u10637
 12575  0043FC  2FAB               	decfsz	??_arm& (0+255),f,b
 12576  0043FE  D7FC               	bra	u10637
 12577  004400  F000               	nop	
 12578  004402  0E80               	movlw	128
 12579  004404  ECCB  F02D         	call	_lcdInst
 12580                           
 12581                           ;Test.c: 651: printf("D WILL RETURN   ");
 12582  004408  0EEA               	movlw	low STR_120
 12583  00440A  0100               	movlb	0	; () banked
 12584  00440C  6F8E               	movwf	printf@f& (0+255),b
 12585  00440E  0EFB               	movlw	high STR_120
 12586  004410  0100               	movlb	0	; () banked
 12587  004412  6F8F               	movwf	(printf@f+1)& (0+255),b
 12588  004414  ECC1  F00B         	call	_printf	;wreg free
 12589                           
 12590                           ;Test.c: 652: lcdInst(0b11000000);;
 12591  004418  0EC0               	movlw	192
 12592  00441A  ECCB  F02D         	call	_lcdInst
 12593                           
 12594                           ;Test.c: 653: printf("ELSE TOGGLES ARM");
 12595  00441E  0EA5               	movlw	low STR_129
 12596  004420  0100               	movlb	0	; () banked
 12597  004422  6F8E               	movwf	printf@f& (0+255),b
 12598  004424  0EFC               	movlw	high STR_129
 12599  004426  0100               	movlb	0	; () banked
 12600  004428  6F8F               	movwf	(printf@f+1)& (0+255),b
 12601  00442A  ECC1  F00B         	call	_printf	;wreg free
 12602                           
 12603                           ;Test.c: 655: (INTCONbits.GIE = 1);
 12604  00442E  8EF2               	bsf	intcon,7,c	;volatile
 12605                           
 12606                           ;Test.c: 656: machine_state = Sorting_state;
 12607  004430  0E01               	movlw	1
 12608  004432  0100               	movlb	0	; () banked
 12609  004434  6FFC               	movwf	_machine_state& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;Test.c: 657: f_arm_position = 2;
 12613  004436  0E00               	movlw	0
 12614  004438  0100               	movlb	0	; () banked
 12615  00443A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12616  00443C  0E02               	movlw	2
 12617  00443E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;Test.c: 658: timer2_counter = 0;
 12621  004440  0E00               	movlw	0
 12622  004442  6E74               	movwf	_timer2_counter+1,c	;volatile
 12623  004444  0E00               	movlw	0
 12624  004446  6E73               	movwf	_timer2_counter,c	;volatile
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;Test.c: 659: LATBbits.LATB3 = 1;
 12628  004448  868A               	bsf	3978,3,c	;volatile
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;Test.c: 660: TMR2ON = 1;
 12632  00444A  84CA               	bsf	4042,2,c	;volatile
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;Test.c: 661: was_low_2 = 0;
 12636  00444C  0E00               	movlw	0
 12637  00444E  6E7A               	movwf	_was_low_2+1,c	;volatile
 12638  004450  0E00               	movlw	0
 12639  004452  6E79               	movwf	_was_low_2,c	;volatile
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;Test.c: 663: int on = 0;
 12643  004454  0E00               	movlw	0
 12644  004456  0100               	movlb	0	; () banked
 12645  004458  6FAD               	movwf	(arm@on+1)& (0+255),b
 12646  00445A  0E00               	movlw	0
 12647  00445C  6FAC               	movwf	arm@on& (0+255),b
 12648  00445E                     l8764:
 12649                           
 12650                           ;Test.c: 665: if(on){
 12651  00445E  0100               	movlb	0	; () banked
 12652  004460  51AC               	movf	arm@on& (0+255),w,b
 12653  004462  0100               	movlb	0	; () banked
 12654  004464  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12655  004466  B4D8               	btfsc	status,2,c
 12656  004468  D01C               	goto	l8776
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;Test.c: 666: on = !on;
 12660  00446A  0100               	movlb	0	; () banked
 12661  00446C  51AC               	movf	arm@on& (0+255),w,b
 12662  00446E  0100               	movlb	0	; () banked
 12663  004470  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12664  004472  A4D8               	btfss	status,2,c
 12665  004474  D002               	goto	u7780
 12666  004476  0E01               	movlw	1
 12667  004478  D001               	goto	u7790
 12668  00447A                     u7780:
 12669  00447A  0E00               	movlw	0
 12670  00447C                     u7790:
 12671  00447C  0100               	movlb	0	; () banked
 12672  00447E  6FAC               	movwf	arm@on& (0+255),b
 12673  004480  6BAD               	clrf	(arm@on+1)& (0+255),b
 12674                           
 12675                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12676  004482  D005               	goto	l8770
 12677  004484                     l8768:
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;Test.c: 668: f_arm_position = 0;
 12681  004484  0E00               	movlw	0
 12682  004486  0100               	movlb	0	; () banked
 12683  004488  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12684  00448A  0E00               	movlw	0
 12685  00448C  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 12686  00448E                     l8770:
 12687                           
 12688                           ; BSR set to: 0
 12689  00448E  A281               	btfss	3969,1,c	;volatile
 12690  004490  D7F9               	goto	l8768
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;Test.c: 669: }
 12694                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12695                           
 12696                           ; BSR set to: 0
 12697  004492  3881               	swapf	3969,w,c	;volatile
 12698  004494  0B0F               	andlw	15
 12699  004496  0A0F               	xorlw	15
 12700  004498  B4D8               	btfsc	status,2,c
 12701  00449A  D01F               	goto	l1453
 12702  00449C                     l1454:
 12703  00449C  A281               	btfss	3969,1,c	;volatile
 12704  00449E  D7DF               	goto	l8764
 12705  0044A0  D7FD               	goto	l1454
 12706  0044A2                     l8776:
 12707                           
 12708                           ;Test.c: 675: else{
 12709                           ;Test.c: 676: on = !on;
 12710  0044A2  0100               	movlb	0	; () banked
 12711  0044A4  51AC               	movf	arm@on& (0+255),w,b
 12712  0044A6  0100               	movlb	0	; () banked
 12713  0044A8  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12714  0044AA  A4D8               	btfss	status,2,c
 12715  0044AC  D002               	goto	u7830
 12716  0044AE  0E01               	movlw	1
 12717  0044B0  D001               	goto	u7840
 12718  0044B2                     u7830:
 12719  0044B2  0E00               	movlw	0
 12720  0044B4                     u7840:
 12721  0044B4  0100               	movlb	0	; () banked
 12722  0044B6  6FAC               	movwf	arm@on& (0+255),b
 12723  0044B8  6BAD               	clrf	(arm@on+1)& (0+255),b
 12724                           
 12725                           ;Test.c: 677: while(PORTBbits.RB1 == 0){
 12726  0044BA  D005               	goto	l8780
 12727  0044BC                     l8778:
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;Test.c: 678: f_arm_position = 1;
 12731  0044BC  0E00               	movlw	0
 12732  0044BE  0100               	movlb	0	; () banked
 12733  0044C0  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12734  0044C2  0E01               	movlw	1
 12735  0044C4  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 12736  0044C6                     l8780:
 12737                           
 12738                           ; BSR set to: 0
 12739  0044C6  A281               	btfss	3969,1,c	;volatile
 12740  0044C8  D7F9               	goto	l8778
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;Test.c: 679: }
 12744                           ;Test.c: 680: if(PORTB >> 4 == 0b1111){
 12745                           
 12746                           ; BSR set to: 0
 12747  0044CA  3881               	swapf	3969,w,c	;volatile
 12748  0044CC  0B0F               	andlw	15
 12749  0044CE  0A0F               	xorlw	15
 12750  0044D0  B4D8               	btfsc	status,2,c
 12751  0044D2  D003               	goto	l1453
 12752  0044D4                     l1462:
 12753  0044D4  A281               	btfss	3969,1,c	;volatile
 12754  0044D6  D7C3               	goto	l8764
 12755  0044D8  D7FD               	goto	l1462
 12756  0044DA                     l1453:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;Test.c: 684: }
 12760                           ;Test.c: 685: }
 12761                           ;Test.c: 687: (INTCONbits.GIE = 0);
 12762  0044DA  9EF2               	bcf	intcon,7,c	;volatile
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;Test.c: 688: stopSignals();
 12766  0044DC  EC7D  F02D         	call	_stopSignals	;wreg free
 12767                           
 12768                           ;Test.c: 689: machine_state = Testing_state;
 12769  0044E0  0E03               	movlw	3
 12770  0044E2  0100               	movlb	0	; () banked
 12771  0044E4  6FFC               	movwf	_machine_state& (0+255),b
 12772                           
 12773                           ; BSR set to: 0
 12774  0044E6  0012               	return		;funcret
 12775  0044E8                     __end_of_arm:
 12776                           	opt stack 0
 12777                           tblptru	equ	0xFF8
 12778                           tblptrh	equ	0xFF7
 12779                           tblptrl	equ	0xFF6
 12780                           tablat	equ	0xFF5
 12781                           prodh	equ	0xFF4
 12782                           prodl	equ	0xFF3
 12783                           intcon	equ	0xFF2
 12784                           intcon2	equ	0xFF1
 12785                           intcon3	equ	0xFF0
 12786                           postinc0	equ	0xFEE
 12787                           wreg	equ	0xFE8
 12788                           postdec1	equ	0xFE5
 12789                           fsr1l	equ	0xFE1
 12790                           indf2	equ	0xFDF
 12791                           postinc2	equ	0xFDE
 12792                           postdec2	equ	0xFDD
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function _algorithmTest *****************
 12798 ;; Defined at:
 12799 ;;		line 79 in file "Test.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;		None
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;Total ram usage:        2 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:   10
 12820 ;; This function calls:
 12821 ;;		_lcdInst
 12822 ;;		_printf
 12823 ;; This function is called by:
 12824 ;;		_Test
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           	psect	text42
 12829  0046B2                     __ptext42:
 12830                           	opt stack 0
 12831  0046B2                     _algorithmTest:
 12832                           	opt stack 19
 12833                           
 12834                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;incstack = 0
 12838  0046B2  0E01               	movlw	1
 12839  0046B4  ECCB  F02D         	call	_lcdInst
 12840  0046B8  0E68               	movlw	104
 12841  0046BA  0100               	movlb	0	; () banked
 12842  0046BC  6FAB               	movwf	??_algorithmTest& (0+255),b
 12843  0046BE  0EE4               	movlw	228
 12844  0046C0                     u10647:
 12845  0046C0  2EE8               	decfsz	wreg,f,c
 12846  0046C2  D7FE               	bra	u10647
 12847  0046C4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12848  0046C6  D7FC               	bra	u10647
 12849  0046C8  F000               	nop	
 12850  0046CA  0E80               	movlw	128
 12851  0046CC  ECCB  F02D         	call	_lcdInst
 12852                           
 12853                           ;Test.c: 82: printf("ALGORITHM TEST");
 12854  0046D0  0ED4               	movlw	low STR_72
 12855  0046D2  0100               	movlb	0	; () banked
 12856  0046D4  6F8E               	movwf	printf@f& (0+255),b
 12857  0046D6  0EFE               	movlw	high STR_72
 12858  0046D8  0100               	movlb	0	; () banked
 12859  0046DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12860  0046DC  ECC1  F00B         	call	_printf	;wreg free
 12861                           
 12862                           ;Test.c: 83: lcdInst(0b11000000);;
 12863  0046E0  0EC0               	movlw	192
 12864  0046E2  ECCB  F02D         	call	_lcdInst
 12865                           
 12866                           ;Test.c: 84: printf("PUSH TO START");
 12867  0046E6  0E0D               	movlw	low STR_73
 12868  0046E8  0100               	movlb	0	; () banked
 12869  0046EA  6F8E               	movwf	printf@f& (0+255),b
 12870  0046EC  0EFF               	movlw	high STR_73
 12871  0046EE  0100               	movlb	0	; () banked
 12872  0046F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12873  0046F2  ECC1  F00B         	call	_printf	;wreg free
 12874                           
 12875                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 12876  0046F6  0E05               	movlw	5
 12877  0046F8  0100               	movlb	0	; () banked
 12878  0046FA  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 12879  0046FC  0E0F               	movlw	15
 12880  0046FE  0100               	movlb	0	; () banked
 12881  004700  6FAB               	movwf	??_algorithmTest& (0+255),b
 12882  004702  0EF1               	movlw	241
 12883  004704                     u10657:
 12884  004704  2EE8               	decfsz	wreg,f,c
 12885  004706  D7FE               	bra	u10657
 12886  004708  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12887  00470A  D7FC               	bra	u10657
 12888  00470C  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 12889  00470E  D7FA               	bra	u10657
 12890  004710                     l1241:
 12891  004710  A281               	btfss	3969,1,c	;volatile
 12892  004712  D7FE               	goto	l1241
 12893  004714                     l1244:
 12894  004714  B281               	btfsc	3969,1,c	;volatile
 12895  004716  D7FE               	goto	l1244
 12896                           
 12897                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12898  004718  0E01               	movlw	1
 12899  00471A  ECCB  F02D         	call	_lcdInst
 12900  00471E  0E68               	movlw	104
 12901  004720  0100               	movlb	0	; () banked
 12902  004722  6FAB               	movwf	??_algorithmTest& (0+255),b
 12903  004724  0EE4               	movlw	228
 12904  004726                     u10667:
 12905  004726  2EE8               	decfsz	wreg,f,c
 12906  004728  D7FE               	bra	u10667
 12907  00472A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12908  00472C  D7FC               	bra	u10667
 12909  00472E  F000               	nop	
 12910  004730  0E80               	movlw	128
 12911  004732  ECCB  F02D         	call	_lcdInst
 12912                           
 12913                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 12914  004736  0E50               	movlw	low STR_74
 12915  004738  0100               	movlb	0	; () banked
 12916  00473A  6F8E               	movwf	printf@f& (0+255),b
 12917  00473C  0EFC               	movlw	high STR_74
 12918  00473E  0100               	movlb	0	; () banked
 12919  004740  6F8F               	movwf	(printf@f+1)& (0+255),b
 12920  004742  ECC1  F00B         	call	_printf	;wreg free
 12921                           
 12922                           ;Test.c: 100: printf("ALG2: 12 CANS");
 12923  004746  0EF1               	movlw	low STR_75
 12924  004748  0100               	movlb	0	; () banked
 12925  00474A  6F8E               	movwf	printf@f& (0+255),b
 12926  00474C  0EFE               	movlw	high STR_75
 12927  00474E  0100               	movlb	0	; () banked
 12928  004750  6F8F               	movwf	(printf@f+1)& (0+255),b
 12929  004752  ECC1  F00B         	call	_printf	;wreg free
 12930                           
 12931                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12932  004756  0E51               	movlw	low STR_76
 12933  004758  0100               	movlb	0	; () banked
 12934  00475A  6F8E               	movwf	printf@f& (0+255),b
 12935  00475C  0EFF               	movlw	high STR_76
 12936  00475E  0100               	movlb	0	; () banked
 12937  004760  6F8F               	movwf	(printf@f+1)& (0+255),b
 12938  004762  ECC1  F00B         	call	_printf	;wreg free
 12939                           
 12940                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12941  004766  0EB6               	movlw	low STR_77
 12942  004768  0100               	movlb	0	; () banked
 12943  00476A  6F8E               	movwf	printf@f& (0+255),b
 12944  00476C  0EFE               	movlw	high STR_77
 12945  00476E  0100               	movlb	0	; () banked
 12946  004770  6F8F               	movwf	(printf@f+1)& (0+255),b
 12947  004772  ECC1  F00B         	call	_printf	;wreg free
 12948                           
 12949                           ;Test.c: 120: printf("ALG5: NO CANS");
 12950  004776  0EFF               	movlw	low STR_78
 12951  004778  0100               	movlb	0	; () banked
 12952  00477A  6F8E               	movwf	printf@f& (0+255),b
 12953  00477C  0EFE               	movlw	high STR_78
 12954  00477E  0100               	movlb	0	; () banked
 12955  004780  6F8F               	movwf	(printf@f+1)& (0+255),b
 12956  004782  ECC1  F00B         	call	_printf	;wreg free
 12957  004786  0012               	return		;funcret
 12958  004788                     __end_of_algorithmTest:
 12959                           	opt stack 0
 12960                           tblptru	equ	0xFF8
 12961                           tblptrh	equ	0xFF7
 12962                           tblptrl	equ	0xFF6
 12963                           tablat	equ	0xFF5
 12964                           prodh	equ	0xFF4
 12965                           prodl	equ	0xFF3
 12966                           intcon	equ	0xFF2
 12967                           intcon2	equ	0xFF1
 12968                           intcon3	equ	0xFF0
 12969                           postinc0	equ	0xFEE
 12970                           wreg	equ	0xFE8
 12971                           postdec1	equ	0xFE5
 12972                           fsr1l	equ	0xFE1
 12973                           indf2	equ	0xFDF
 12974                           postinc2	equ	0xFDE
 12975                           postdec2	equ	0xFDD
 12976                           fsr2h	equ	0xFDA
 12977                           fsr2l	equ	0xFD9
 12978                           status	equ	0xFD8
 12979                           
 12980 ;; *************** function _actuatorTest *****************
 12981 ;; Defined at:
 12982 ;;		line 202 in file "Test.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;		None
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;  i               1   45[BANK0 ] unsigned char 
 12987 ;;  i               1   67[BANK0 ] unsigned char 
 12988 ;;  i               1   66[BANK0 ] unsigned char 
 12989 ;;  i               1   65[BANK0 ] unsigned char 
 12990 ;;  i               1   64[BANK0 ] unsigned char 
 12991 ;;  i               1   63[BANK0 ] unsigned char 
 12992 ;;  i               1   62[BANK0 ] unsigned char 
 12993 ;;  i               1   61[BANK0 ] unsigned char 
 12994 ;;  i               1   60[BANK0 ] unsigned char 
 12995 ;;  i               1   59[BANK0 ] unsigned char 
 12996 ;;  i               1   58[BANK0 ] unsigned char 
 12997 ;;  i               1   57[BANK0 ] unsigned char 
 12998 ;;  i               1   56[BANK0 ] unsigned char 
 12999 ;;  i               1   55[BANK0 ] unsigned char 
 13000 ;;  i               1   54[BANK0 ] unsigned char 
 13001 ;;  i               1   53[BANK0 ] unsigned char 
 13002 ;;  i               1   52[BANK0 ] unsigned char 
 13003 ;;  i               1   51[BANK0 ] unsigned char 
 13004 ;;  i               1   50[BANK0 ] unsigned char 
 13005 ;;  i               1   49[BANK0 ] unsigned char 
 13006 ;;  i               1   48[BANK0 ] unsigned char 
 13007 ;;  i               1   47[BANK0 ] unsigned char 
 13008 ;;  i               1   46[BANK0 ] unsigned char 
 13009 ;;  i               2   68[BANK0 ] int 
 13010 ;; Return value:  Size  Location     Type
 13011 ;;                  1    wreg      void 
 13012 ;; Registers used:
 13013 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13020 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13022 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13023 ;;Total ram usage:       27 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; Hardware stack levels required when called:   10
 13026 ;; This function calls:
 13027 ;;		_lcdInst
 13028 ;;		_printf
 13029 ;;		_updateServoPosition
 13030 ;; This function is called by:
 13031 ;;		_Test
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           	psect	text43
 13036  0008D6                     __ptext43:
 13037                           	opt stack 0
 13038  0008D6                     _actuatorTest:
 13039                           	opt stack 19
 13040                           
 13041                           ;Test.c: 204: int i = 0;
 13042                           
 13043                           ;incstack = 0
 13044  0008D6  0E00               	movlw	0
 13045  0008D8  0100               	movlb	0	; () banked
 13046  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13047  0008DC  0E00               	movlw	0
 13048  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13052  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13056  0008E2  0E01               	movlw	1
 13057  0008E4  ECCB  F02D         	call	_lcdInst
 13058  0008E8  0E68               	movlw	104
 13059  0008EA  0100               	movlb	0	; () banked
 13060  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13061  0008EE  0EE4               	movlw	228
 13062  0008F0                     u10677:
 13063  0008F0  2EE8               	decfsz	wreg,f,c
 13064  0008F2  D7FE               	bra	u10677
 13065  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13066  0008F6  D7FC               	bra	u10677
 13067  0008F8  F000               	nop	
 13068  0008FA  0E80               	movlw	128
 13069  0008FC  ECCB  F02D         	call	_lcdInst
 13070                           
 13071                           ;Test.c: 208: printf("ACTUATORS");
 13072  000900  0E88               	movlw	low STR_90
 13073  000902  0100               	movlb	0	; () banked
 13074  000904  6F8E               	movwf	printf@f& (0+255),b
 13075  000906  0EFF               	movlw	high STR_90
 13076  000908  0100               	movlb	0	; () banked
 13077  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13078  00090C  ECC1  F00B         	call	_printf	;wreg free
 13079                           
 13080                           ;Test.c: 209: lcdInst(0b11000000);;
 13081  000910  0EC0               	movlw	192
 13082  000912  ECCB  F02D         	call	_lcdInst
 13083                           
 13084                           ;Test.c: 210: printf("PUSH TO START");
 13085  000916  0E0D               	movlw	low STR_73
 13086  000918  0100               	movlb	0	; () banked
 13087  00091A  6F8E               	movwf	printf@f& (0+255),b
 13088  00091C  0EFF               	movlw	high STR_73
 13089  00091E  0100               	movlb	0	; () banked
 13090  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 13091  000922  ECC1  F00B         	call	_printf	;wreg free
 13092                           
 13093                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13094  000926  0E05               	movlw	5
 13095  000928  0100               	movlb	0	; () banked
 13096  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13097  00092C  0E0F               	movlw	15
 13098  00092E  0100               	movlb	0	; () banked
 13099  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 13100  000932  0EF1               	movlw	241
 13101  000934                     u10687:
 13102  000934  2EE8               	decfsz	wreg,f,c
 13103  000936  D7FE               	bra	u10687
 13104  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13105  00093A  D7FC               	bra	u10687
 13106  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13107  00093E  D7FA               	bra	u10687
 13108  000940                     l1276:
 13109  000940  A281               	btfss	3969,1,c	;volatile
 13110  000942  D7FE               	goto	l1276
 13111  000944                     l1279:
 13112  000944  B281               	btfsc	3969,1,c	;volatile
 13113  000946  D7FE               	goto	l1279
 13114                           
 13115                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13116  000948  0E01               	movlw	1
 13117  00094A  ECCB  F02D         	call	_lcdInst
 13118  00094E  0E68               	movlw	104
 13119  000950  0100               	movlb	0	; () banked
 13120  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 13121  000954  0EE4               	movlw	228
 13122  000956                     u10697:
 13123  000956  2EE8               	decfsz	wreg,f,c
 13124  000958  D7FE               	bra	u10697
 13125  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13126  00095C  D7FC               	bra	u10697
 13127  00095E  F000               	nop	
 13128  000960  0E80               	movlw	128
 13129  000962  ECCB  F02D         	call	_lcdInst
 13130                           
 13131                           ;Test.c: 219: printf("TST: DC MOTORS");
 13132  000966  0EC5               	movlw	low STR_92
 13133  000968  0100               	movlb	0	; () banked
 13134  00096A  6F8E               	movwf	printf@f& (0+255),b
 13135  00096C  0EFE               	movlw	high STR_92
 13136  00096E  0100               	movlb	0	; () banked
 13137  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 13138  000972  ECC1  F00B         	call	_printf	;wreg free
 13139                           
 13140                           ;Test.c: 220: lcdInst(0b11000000);;
 13141  000976  0EC0               	movlw	192
 13142  000978  ECCB  F02D         	call	_lcdInst
 13143                           
 13144                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13145  00097C  0EE3               	movlw	low STR_93
 13146  00097E  0100               	movlb	0	; () banked
 13147  000980  6F8E               	movwf	printf@f& (0+255),b
 13148  000982  0EFE               	movlw	high STR_93
 13149  000984  0100               	movlb	0	; () banked
 13150  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 13151  000988  ECC1  F00B         	call	_printf	;wreg free
 13152                           
 13153                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13154  00098C  848A               	bsf	3978,2,c	;volatile
 13155                           
 13156                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13157  00098E  0E00               	movlw	0
 13158  000990  0100               	movlb	0	; () banked
 13159  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13160  000994  0E00               	movlw	0
 13161  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 13162                           
 13163                           ; BSR set to: 0
 13164  000998  0100               	movlb	0	; () banked
 13165  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13166  00099C  D008               	goto	l8350
 13167  00099E  0100               	movlb	0	; () banked
 13168  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13169  0009A2  E123               	bnz	l1283
 13170  0009A4  0E05               	movlw	5
 13171  0009A6  0100               	movlb	0	; () banked
 13172  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13173  0009AA  B0D8               	btfsc	status,0,c
 13174  0009AC  D01E               	goto	l1283
 13175  0009AE                     l8350:
 13176                           
 13177                           ; BSR set to: 0
 13178  0009AE  0E00               	movlw	0
 13179  0009B0  0100               	movlb	0	; () banked
 13180  0009B2  6FAD               	movwf	actuatorTest@i_1764& (0+255),b
 13181  0009B4                     l8352:
 13182                           
 13183                           ; BSR set to: 0
 13184  0009B4  0E63               	movlw	99
 13185  0009B6  0100               	movlb	0	; () banked
 13186  0009B8  65AD               	cpfsgt	actuatorTest@i_1764& (0+255),b
 13187  0009BA  D001               	goto	l8356
 13188  0009BC  D00C               	goto	l8360
 13189  0009BE                     l8356:
 13190                           
 13191                           ; BSR set to: 0
 13192  0009BE  0E68               	movlw	104
 13193  0009C0  0100               	movlb	0	; () banked
 13194  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 13195  0009C4  0EE4               	movlw	228
 13196  0009C6                     u10707:
 13197  0009C6  2EE8               	decfsz	wreg,f,c
 13198  0009C8  D7FE               	bra	u10707
 13199  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13200  0009CC  D7FC               	bra	u10707
 13201  0009CE  F000               	nop	
 13202  0009D0  0100               	movlb	0	; () banked
 13203  0009D2  2BAD               	incf	actuatorTest@i_1764& (0+255),f,b
 13204  0009D4  D7EF               	goto	l8352
 13205  0009D6                     l8360:
 13206                           
 13207                           ; BSR set to: 0
 13208  0009D6  0100               	movlb	0	; () banked
 13209  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13210  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13211                           
 13212                           ; BSR set to: 0
 13213  0009DC  0100               	movlb	0	; () banked
 13214  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13215  0009E0  D7E6               	goto	l8350
 13216  0009E2  0100               	movlb	0	; () banked
 13217  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13218  0009E6  E101               	bnz	u7260
 13219  0009E8  D7DD               	goto	L13
 13220  0009EA                     u7260:
 13221  0009EA                     l1283:
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13225  0009EA  948A               	bcf	3978,2,c	;volatile
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13229  0009EC  0E01               	movlw	1
 13230  0009EE  ECCB  F02D         	call	_lcdInst
 13231  0009F2  0E68               	movlw	104
 13232  0009F4  0100               	movlb	0	; () banked
 13233  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13234  0009F8  0EE4               	movlw	228
 13235  0009FA                     u10717:
 13236  0009FA  2EE8               	decfsz	wreg,f,c
 13237  0009FC  D7FE               	bra	u10717
 13238  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13239  000A00  D7FC               	bra	u10717
 13240  000A02  F000               	nop	
 13241  000A04  0E80               	movlw	128
 13242  000A06  ECCB  F02D         	call	_lcdInst
 13243                           
 13244                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13245  000A0A  0E61               	movlw	low STR_94
 13246  000A0C  0100               	movlb	0	; () banked
 13247  000A0E  6F8E               	movwf	printf@f& (0+255),b
 13248  000A10  0EFC               	movlw	high STR_94
 13249  000A12  0100               	movlb	0	; () banked
 13250  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 13251  000A16  ECC1  F00B         	call	_printf	;wreg free
 13252                           
 13253                           ;Test.c: 232: lcdInst(0b11000000);;
 13254  000A1A  0EC0               	movlw	192
 13255  000A1C  ECCB  F02D         	call	_lcdInst
 13256                           
 13257                           ;Test.c: 233: printf("PIN RA3...");
 13258  000A20  0E5D               	movlw	low STR_95
 13259  000A22  0100               	movlb	0	; () banked
 13260  000A24  6F8E               	movwf	printf@f& (0+255),b
 13261  000A26  0EFF               	movlw	high STR_95
 13262  000A28  0100               	movlb	0	; () banked
 13263  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13264  000A2C  ECC1  F00B         	call	_printf	;wreg free
 13265                           
 13266                           ;Test.c: 234: for(i=0;i<5;i++){
 13267  000A30  0E00               	movlw	0
 13268  000A32  0100               	movlb	0	; () banked
 13269  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13270  000A36  0E00               	movlw	0
 13271  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274  000A3A  0100               	movlb	0	; () banked
 13275  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13276  000A3E  D008               	goto	l1286
 13277  000A40  0100               	movlb	0	; () banked
 13278  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13279  000A44  E12C               	bnz	l1287
 13280  000A46  0E05               	movlw	5
 13281  000A48  0100               	movlb	0	; () banked
 13282  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13283  000A4C  B0D8               	btfsc	status,0,c
 13284  000A4E  D027               	goto	l1287
 13285  000A50                     l1286:
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13289  000A50  8689               	bsf	3977,3,c	;volatile
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13293  000A52  0E0D               	movlw	13
 13294  000A54  0100               	movlb	0	; () banked
 13295  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13296  000A58  0E2D               	movlw	45
 13297  000A5A  0100               	movlb	0	; () banked
 13298  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13299  000A5E  0ED7               	movlw	215
 13300  000A60                     u10727:
 13301  000A60  2EE8               	decfsz	wreg,f,c
 13302  000A62  D7FE               	bra	u10727
 13303  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13304  000A66  D7FC               	bra	u10727
 13305  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13306  000A6A  D7FA               	bra	u10727
 13307  000A6C  D000               	nop2	
 13308                           
 13309                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13310  000A6E  9689               	bcf	3977,3,c	;volatile
 13311                           
 13312                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13313  000A70  0E1D               	movlw	29
 13314  000A72  0100               	movlb	0	; () banked
 13315  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13316  000A76  0E69               	movlw	105
 13317  000A78  0100               	movlb	0	; () banked
 13318  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13319  000A7C  0EA5               	movlw	165
 13320  000A7E                     u10737:
 13321  000A7E  2EE8               	decfsz	wreg,f,c
 13322  000A80  D7FE               	bra	u10737
 13323  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13324  000A84  D7FC               	bra	u10737
 13325  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13326  000A88  D7FA               	bra	u10737
 13327  000A8A  0100               	movlb	0	; () banked
 13328  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13329  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13330  000A90  0100               	movlb	0	; () banked
 13331  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13332  000A94  D7DD               	goto	l1286
 13333  000A96  0100               	movlb	0	; () banked
 13334  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13335  000A9A  E101               	bnz	u7280
 13336  000A9C  D7D4               	goto	L14
 13337  000A9E                     u7280:
 13338  000A9E                     l1287:
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;Test.c: 239: }
 13342                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13343  000A9E  9689               	bcf	3977,3,c	;volatile
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13347  000AA0  0E01               	movlw	1
 13348  000AA2  ECCB  F02D         	call	_lcdInst
 13349  000AA6  0E68               	movlw	104
 13350  000AA8  0100               	movlb	0	; () banked
 13351  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13352  000AAC  0EE4               	movlw	228
 13353  000AAE                     u10747:
 13354  000AAE  2EE8               	decfsz	wreg,f,c
 13355  000AB0  D7FE               	bra	u10747
 13356  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13357  000AB4  D7FC               	bra	u10747
 13358  000AB6  F000               	nop	
 13359  000AB8  0E80               	movlw	128
 13360  000ABA  ECCB  F02D         	call	_lcdInst
 13361                           
 13362                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13363  000ABE  0E72               	movlw	low STR_96
 13364  000AC0  0100               	movlb	0	; () banked
 13365  000AC2  6F8E               	movwf	printf@f& (0+255),b
 13366  000AC4  0EFC               	movlw	high STR_96
 13367  000AC6  0100               	movlb	0	; () banked
 13368  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13369  000ACA  ECC1  F00B         	call	_printf	;wreg free
 13370                           
 13371                           ;Test.c: 248: lcdInst(0b11000000);;
 13372  000ACE  0EC0               	movlw	192
 13373  000AD0  ECCB  F02D         	call	_lcdInst
 13374                           
 13375                           ;Test.c: 249: printf("PIN RA4...");
 13376  000AD4  0E68               	movlw	low STR_97
 13377  000AD6  0100               	movlb	0	; () banked
 13378  000AD8  6F8E               	movwf	printf@f& (0+255),b
 13379  000ADA  0EFF               	movlw	high STR_97
 13380  000ADC  0100               	movlb	0	; () banked
 13381  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13382  000AE0  ECC1  F00B         	call	_printf	;wreg free
 13383                           
 13384                           ;Test.c: 250: for(i=0;i<5;i++){
 13385  000AE4  0E00               	movlw	0
 13386  000AE6  0100               	movlb	0	; () banked
 13387  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13388  000AEA  0E00               	movlw	0
 13389  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 13390                           
 13391                           ; BSR set to: 0
 13392  000AEE  0100               	movlb	0	; () banked
 13393  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13394  000AF2  D008               	goto	l1288
 13395  000AF4  0100               	movlb	0	; () banked
 13396  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13397  000AF8  E12C               	bnz	l1289
 13398  000AFA  0E05               	movlw	5
 13399  000AFC  0100               	movlb	0	; () banked
 13400  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13401  000B00  B0D8               	btfsc	status,0,c
 13402  000B02  D027               	goto	l1289
 13403  000B04                     l1288:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13407  000B04  8889               	bsf	3977,4,c	;volatile
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13411  000B06  0E0D               	movlw	13
 13412  000B08  0100               	movlb	0	; () banked
 13413  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13414  000B0C  0E2D               	movlw	45
 13415  000B0E  0100               	movlb	0	; () banked
 13416  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13417  000B12  0ED7               	movlw	215
 13418  000B14                     u10757:
 13419  000B14  2EE8               	decfsz	wreg,f,c
 13420  000B16  D7FE               	bra	u10757
 13421  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13422  000B1A  D7FC               	bra	u10757
 13423  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13424  000B1E  D7FA               	bra	u10757
 13425  000B20  D000               	nop2	
 13426                           
 13427                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13428  000B22  9889               	bcf	3977,4,c	;volatile
 13429                           
 13430                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13431  000B24  0E1D               	movlw	29
 13432  000B26  0100               	movlb	0	; () banked
 13433  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13434  000B2A  0E69               	movlw	105
 13435  000B2C  0100               	movlb	0	; () banked
 13436  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13437  000B30  0EA5               	movlw	165
 13438  000B32                     u10767:
 13439  000B32  2EE8               	decfsz	wreg,f,c
 13440  000B34  D7FE               	bra	u10767
 13441  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13442  000B38  D7FC               	bra	u10767
 13443  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13444  000B3C  D7FA               	bra	u10767
 13445  000B3E  0100               	movlb	0	; () banked
 13446  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13447  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13448  000B44  0100               	movlb	0	; () banked
 13449  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13450  000B48  D7DD               	goto	l1288
 13451  000B4A  0100               	movlb	0	; () banked
 13452  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13453  000B4E  E101               	bnz	u7300
 13454  000B50  D7D4               	goto	L15
 13455  000B52                     u7300:
 13456  000B52                     l1289:
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;Test.c: 255: }
 13460                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13461  000B52  9889               	bcf	3977,4,c	;volatile
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13465  000B54  0E01               	movlw	1
 13466  000B56  ECCB  F02D         	call	_lcdInst
 13467  000B5A  0E68               	movlw	104
 13468  000B5C  0100               	movlb	0	; () banked
 13469  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13470  000B60  0EE4               	movlw	228
 13471  000B62                     u10777:
 13472  000B62  2EE8               	decfsz	wreg,f,c
 13473  000B64  D7FE               	bra	u10777
 13474  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13475  000B68  D7FC               	bra	u10777
 13476  000B6A  F000               	nop	
 13477  000B6C  0E80               	movlw	128
 13478  000B6E  ECCB  F02D         	call	_lcdInst
 13479                           
 13480                           ;Test.c: 260: machine_state = Sorting_state;
 13481  000B72  0E01               	movlw	1
 13482  000B74  0100               	movlb	0	; () banked
 13483  000B76  6FFC               	movwf	_machine_state& (0+255),b
 13484                           
 13485                           ; BSR set to: 0
 13486                           ;Test.c: 261: was_low_1 = 0;
 13487  000B78  0E00               	movlw	0
 13488  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 13489  000B7C  0E00               	movlw	0
 13490  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;Test.c: 262: was_low_1 = 0;
 13494  000B80  0E00               	movlw	0
 13495  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 13496  000B84  0E00               	movlw	0
 13497  000B86  6E77               	movwf	_was_low_1,c	;volatile
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;Test.c: 269: printf("TST: PAN SERVO");
 13501  000B88  0EA7               	movlw	low STR_98
 13502  000B8A  0100               	movlb	0	; () banked
 13503  000B8C  6F8E               	movwf	printf@f& (0+255),b
 13504  000B8E  0EFE               	movlw	high STR_98
 13505  000B90  0100               	movlb	0	; () banked
 13506  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 13507  000B94  ECC1  F00B         	call	_printf	;wreg free
 13508                           
 13509                           ;Test.c: 270: lcdInst(0b11000000);;
 13510  000B98  0EC0               	movlw	192
 13511  000B9A  ECCB  F02D         	call	_lcdInst
 13512                           
 13513                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13514  000B9E  0EC8               	movlw	low STR_99
 13515  000BA0  0100               	movlb	0	; () banked
 13516  000BA2  6F8E               	movwf	printf@f& (0+255),b
 13517  000BA4  0EFB               	movlw	high STR_99
 13518  000BA6  0100               	movlb	0	; () banked
 13519  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13520  000BAA  ECC1  F00B         	call	_printf	;wreg free
 13521                           
 13522                           ;Test.c: 272: updateServoPosition(1200, 1);
 13523  000BAE  0E04               	movlw	4
 13524  000BB0  0100               	movlb	0	; () banked
 13525  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13526  000BB4  0EB0               	movlw	176
 13527  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13528  000BB8  0E00               	movlw	0
 13529  000BBA  0100               	movlb	0	; () banked
 13530  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13531  000BBE  0E01               	movlw	1
 13532  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13533  000BC2  ECD5  F026         	call	_updateServoPosition	;wreg free
 13534                           
 13535                           ;Test.c: 273: TMR1ON = 1;
 13536  000BC6  80CD               	bsf	4045,0,c	;volatile
 13537                           
 13538                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13539  000BC8  0E00               	movlw	0
 13540  000BCA  0100               	movlb	0	; () banked
 13541  000BCC  6FAE               	movwf	actuatorTest@i_1771& (0+255),b
 13542  000BCE                     l8436:
 13543                           
 13544                           ; BSR set to: 0
 13545  000BCE  0E63               	movlw	99
 13546  000BD0  0100               	movlb	0	; () banked
 13547  000BD2  65AE               	cpfsgt	actuatorTest@i_1771& (0+255),b
 13548  000BD4  D001               	goto	l8440
 13549  000BD6  D00C               	goto	l8444
 13550  000BD8                     l8440:
 13551                           
 13552                           ; BSR set to: 0
 13553  000BD8  0E68               	movlw	104
 13554  000BDA  0100               	movlb	0	; () banked
 13555  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13556  000BDE  0EE4               	movlw	228
 13557  000BE0                     u10787:
 13558  000BE0  2EE8               	decfsz	wreg,f,c
 13559  000BE2  D7FE               	bra	u10787
 13560  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13561  000BE6  D7FC               	bra	u10787
 13562  000BE8  F000               	nop	
 13563  000BEA  0100               	movlb	0	; () banked
 13564  000BEC  2BAE               	incf	actuatorTest@i_1771& (0+255),f,b
 13565  000BEE  D7EF               	goto	l8436
 13566  000BF0                     l8444:
 13567                           
 13568                           ; BSR set to: 0
 13569  000BF0  0E00               	movlw	0
 13570  000BF2  0100               	movlb	0	; () banked
 13571  000BF4  6FAF               	movwf	actuatorTest@i_1772& (0+255),b
 13572  000BF6                     l8446:
 13573                           
 13574                           ; BSR set to: 0
 13575  000BF6  0E63               	movlw	99
 13576  000BF8  0100               	movlb	0	; () banked
 13577  000BFA  65AF               	cpfsgt	actuatorTest@i_1772& (0+255),b
 13578  000BFC  D001               	goto	l8450
 13579  000BFE  D00C               	goto	l8454
 13580  000C00                     l8450:
 13581                           
 13582                           ; BSR set to: 0
 13583  000C00  0E68               	movlw	104
 13584  000C02  0100               	movlb	0	; () banked
 13585  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 13586  000C06  0EE4               	movlw	228
 13587  000C08                     u10797:
 13588  000C08  2EE8               	decfsz	wreg,f,c
 13589  000C0A  D7FE               	bra	u10797
 13590  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13591  000C0E  D7FC               	bra	u10797
 13592  000C10  F000               	nop	
 13593  000C12  0100               	movlb	0	; () banked
 13594  000C14  2BAF               	incf	actuatorTest@i_1772& (0+255),f,b
 13595  000C16  D7EF               	goto	l8446
 13596  000C18                     l8454:
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13600  000C18  0E80               	movlw	128
 13601  000C1A  ECCB  F02D         	call	_lcdInst
 13602  000C1E  0EC0               	movlw	192
 13603  000C20  ECCB  F02D         	call	_lcdInst
 13604                           
 13605                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13606  000C24  0EB7               	movlw	low STR_100
 13607  000C26  0100               	movlb	0	; () banked
 13608  000C28  6F8E               	movwf	printf@f& (0+255),b
 13609  000C2A  0EFB               	movlw	high STR_100
 13610  000C2C  0100               	movlb	0	; () banked
 13611  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13612  000C30  ECC1  F00B         	call	_printf	;wreg free
 13613                           
 13614                           ;Test.c: 278: updateServoPosition(500, 1);
 13615  000C34  0E01               	movlw	1
 13616  000C36  0100               	movlb	0	; () banked
 13617  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13618  000C3A  0EF4               	movlw	244
 13619  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13620  000C3E  0E00               	movlw	0
 13621  000C40  0100               	movlb	0	; () banked
 13622  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13623  000C44  0E01               	movlw	1
 13624  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13625  000C48  ECD5  F026         	call	_updateServoPosition	;wreg free
 13626                           
 13627                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13628  000C4C  0E00               	movlw	0
 13629  000C4E  0100               	movlb	0	; () banked
 13630  000C50  6FB0               	movwf	actuatorTest@i_1774& (0+255),b
 13631  000C52                     l8462:
 13632                           
 13633                           ; BSR set to: 0
 13634  000C52  0E63               	movlw	99
 13635  000C54  0100               	movlb	0	; () banked
 13636  000C56  65B0               	cpfsgt	actuatorTest@i_1774& (0+255),b
 13637  000C58  D001               	goto	l8466
 13638  000C5A  D00C               	goto	l8470
 13639  000C5C                     l8466:
 13640                           
 13641                           ; BSR set to: 0
 13642  000C5C  0E68               	movlw	104
 13643  000C5E  0100               	movlb	0	; () banked
 13644  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13645  000C62  0EE4               	movlw	228
 13646  000C64                     u10807:
 13647  000C64  2EE8               	decfsz	wreg,f,c
 13648  000C66  D7FE               	bra	u10807
 13649  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13650  000C6A  D7FC               	bra	u10807
 13651  000C6C  F000               	nop	
 13652  000C6E  0100               	movlb	0	; () banked
 13653  000C70  2BB0               	incf	actuatorTest@i_1774& (0+255),f,b
 13654  000C72  D7EF               	goto	l8462
 13655  000C74                     l8470:
 13656                           
 13657                           ; BSR set to: 0
 13658  000C74  0E00               	movlw	0
 13659  000C76  0100               	movlb	0	; () banked
 13660  000C78  6FB1               	movwf	actuatorTest@i_1775& (0+255),b
 13661  000C7A                     l8472:
 13662                           
 13663                           ; BSR set to: 0
 13664  000C7A  0E63               	movlw	99
 13665  000C7C  0100               	movlb	0	; () banked
 13666  000C7E  65B1               	cpfsgt	actuatorTest@i_1775& (0+255),b
 13667  000C80  D001               	goto	l8476
 13668  000C82  D00C               	goto	l8480
 13669  000C84                     l8476:
 13670                           
 13671                           ; BSR set to: 0
 13672  000C84  0E68               	movlw	104
 13673  000C86  0100               	movlb	0	; () banked
 13674  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 13675  000C8A  0EE4               	movlw	228
 13676  000C8C                     u10817:
 13677  000C8C  2EE8               	decfsz	wreg,f,c
 13678  000C8E  D7FE               	bra	u10817
 13679  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13680  000C92  D7FC               	bra	u10817
 13681  000C94  F000               	nop	
 13682  000C96  0100               	movlb	0	; () banked
 13683  000C98  2BB1               	incf	actuatorTest@i_1775& (0+255),f,b
 13684  000C9A  D7EF               	goto	l8472
 13685  000C9C                     l8480:
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13689  000C9C  0E80               	movlw	128
 13690  000C9E  ECCB  F02D         	call	_lcdInst
 13691  000CA2  0EC0               	movlw	192
 13692  000CA4  ECCB  F02D         	call	_lcdInst
 13693                           
 13694                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13695  000CA8  0E95               	movlw	low STR_101
 13696  000CAA  0100               	movlb	0	; () banked
 13697  000CAC  6F8E               	movwf	printf@f& (0+255),b
 13698  000CAE  0EFB               	movlw	high STR_101
 13699  000CB0  0100               	movlb	0	; () banked
 13700  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13701  000CB4  ECC1  F00B         	call	_printf	;wreg free
 13702                           
 13703                           ;Test.c: 283: updateServoPosition(2400, 1);
 13704  000CB8  0E09               	movlw	9
 13705  000CBA  0100               	movlb	0	; () banked
 13706  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13707  000CBE  0E60               	movlw	96
 13708  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13709  000CC2  0E00               	movlw	0
 13710  000CC4  0100               	movlb	0	; () banked
 13711  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13712  000CC8  0E01               	movlw	1
 13713  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13714  000CCC  ECD5  F026         	call	_updateServoPosition	;wreg free
 13715                           
 13716                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13717  000CD0  0E00               	movlw	0
 13718  000CD2  0100               	movlb	0	; () banked
 13719  000CD4  6FB2               	movwf	actuatorTest@i_1777& (0+255),b
 13720  000CD6                     l8488:
 13721                           
 13722                           ; BSR set to: 0
 13723  000CD6  0E63               	movlw	99
 13724  000CD8  0100               	movlb	0	; () banked
 13725  000CDA  65B2               	cpfsgt	actuatorTest@i_1777& (0+255),b
 13726  000CDC  D001               	goto	l8492
 13727  000CDE  D00C               	goto	l8496
 13728  000CE0                     l8492:
 13729                           
 13730                           ; BSR set to: 0
 13731  000CE0  0E68               	movlw	104
 13732  000CE2  0100               	movlb	0	; () banked
 13733  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13734  000CE6  0EE4               	movlw	228
 13735  000CE8                     u10827:
 13736  000CE8  2EE8               	decfsz	wreg,f,c
 13737  000CEA  D7FE               	bra	u10827
 13738  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13739  000CEE  D7FC               	bra	u10827
 13740  000CF0  F000               	nop	
 13741  000CF2  0100               	movlb	0	; () banked
 13742  000CF4  2BB2               	incf	actuatorTest@i_1777& (0+255),f,b
 13743  000CF6  D7EF               	goto	l8488
 13744  000CF8                     l8496:
 13745                           
 13746                           ; BSR set to: 0
 13747  000CF8  0E00               	movlw	0
 13748  000CFA  0100               	movlb	0	; () banked
 13749  000CFC  6FB3               	movwf	actuatorTest@i_1778& (0+255),b
 13750  000CFE                     l8498:
 13751                           
 13752                           ; BSR set to: 0
 13753  000CFE  0E63               	movlw	99
 13754  000D00  0100               	movlb	0	; () banked
 13755  000D02  65B3               	cpfsgt	actuatorTest@i_1778& (0+255),b
 13756  000D04  D001               	goto	l8502
 13757  000D06  D00C               	goto	l8506
 13758  000D08                     l8502:
 13759                           
 13760                           ; BSR set to: 0
 13761  000D08  0E68               	movlw	104
 13762  000D0A  0100               	movlb	0	; () banked
 13763  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13764  000D0E  0EE4               	movlw	228
 13765  000D10                     u10837:
 13766  000D10  2EE8               	decfsz	wreg,f,c
 13767  000D12  D7FE               	bra	u10837
 13768  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13769  000D16  D7FC               	bra	u10837
 13770  000D18  F000               	nop	
 13771  000D1A  0100               	movlb	0	; () banked
 13772  000D1C  2BB3               	incf	actuatorTest@i_1778& (0+255),f,b
 13773  000D1E  D7EF               	goto	l8498
 13774  000D20                     l8506:
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13778  000D20  0E80               	movlw	128
 13779  000D22  ECCB  F02D         	call	_lcdInst
 13780  000D26  0EC0               	movlw	192
 13781  000D28  ECCB  F02D         	call	_lcdInst
 13782                           
 13783                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13784  000D2C  0E1D               	movlw	low STR_102
 13785  000D2E  0100               	movlb	0	; () banked
 13786  000D30  6F8E               	movwf	printf@f& (0+255),b
 13787  000D32  0EFC               	movlw	high STR_102
 13788  000D34  0100               	movlb	0	; () banked
 13789  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 13790  000D38  ECC1  F00B         	call	_printf	;wreg free
 13791                           
 13792                           ;Test.c: 288: updateServoPosition(1670, 1);
 13793  000D3C  0E06               	movlw	6
 13794  000D3E  0100               	movlb	0	; () banked
 13795  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13796  000D42  0E86               	movlw	134
 13797  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13798  000D46  0E00               	movlw	0
 13799  000D48  0100               	movlb	0	; () banked
 13800  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13801  000D4C  0E01               	movlw	1
 13802  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13803  000D50  ECD5  F026         	call	_updateServoPosition	;wreg free
 13804                           
 13805                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13806  000D54  0E00               	movlw	0
 13807  000D56  0100               	movlb	0	; () banked
 13808  000D58  6FB4               	movwf	actuatorTest@i_1780& (0+255),b
 13809  000D5A                     l8514:
 13810                           
 13811                           ; BSR set to: 0
 13812  000D5A  0E63               	movlw	99
 13813  000D5C  0100               	movlb	0	; () banked
 13814  000D5E  65B4               	cpfsgt	actuatorTest@i_1780& (0+255),b
 13815  000D60  D001               	goto	l8518
 13816  000D62  D00C               	goto	l8522
 13817  000D64                     l8518:
 13818                           
 13819                           ; BSR set to: 0
 13820  000D64  0E68               	movlw	104
 13821  000D66  0100               	movlb	0	; () banked
 13822  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 13823  000D6A  0EE4               	movlw	228
 13824  000D6C                     u10847:
 13825  000D6C  2EE8               	decfsz	wreg,f,c
 13826  000D6E  D7FE               	bra	u10847
 13827  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13828  000D72  D7FC               	bra	u10847
 13829  000D74  F000               	nop	
 13830  000D76  0100               	movlb	0	; () banked
 13831  000D78  2BB4               	incf	actuatorTest@i_1780& (0+255),f,b
 13832  000D7A  D7EF               	goto	l8514
 13833  000D7C                     l8522:
 13834                           
 13835                           ; BSR set to: 0
 13836  000D7C  0E00               	movlw	0
 13837  000D7E  0100               	movlb	0	; () banked
 13838  000D80  6FB5               	movwf	actuatorTest@i_1781& (0+255),b
 13839  000D82                     l8524:
 13840                           
 13841                           ; BSR set to: 0
 13842  000D82  0E63               	movlw	99
 13843  000D84  0100               	movlb	0	; () banked
 13844  000D86  65B5               	cpfsgt	actuatorTest@i_1781& (0+255),b
 13845  000D88  D001               	goto	l8528
 13846  000D8A  D00C               	goto	l8532
 13847  000D8C                     l8528:
 13848                           
 13849                           ; BSR set to: 0
 13850  000D8C  0E68               	movlw	104
 13851  000D8E  0100               	movlb	0	; () banked
 13852  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 13853  000D92  0EE4               	movlw	228
 13854  000D94                     u10857:
 13855  000D94  2EE8               	decfsz	wreg,f,c
 13856  000D96  D7FE               	bra	u10857
 13857  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13858  000D9A  D7FC               	bra	u10857
 13859  000D9C  F000               	nop	
 13860  000D9E  0100               	movlb	0	; () banked
 13861  000DA0  2BB5               	incf	actuatorTest@i_1781& (0+255),f,b
 13862  000DA2  D7EF               	goto	l8524
 13863  000DA4                     l8532:
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13867  000DA4  0E80               	movlw	128
 13868  000DA6  ECCB  F02D         	call	_lcdInst
 13869  000DAA  0EC0               	movlw	192
 13870  000DAC  ECCB  F02D         	call	_lcdInst
 13871                           
 13872                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 13873  000DB0  0E2E               	movlw	low STR_103
 13874  000DB2  0100               	movlb	0	; () banked
 13875  000DB4  6F8E               	movwf	printf@f& (0+255),b
 13876  000DB6  0EFC               	movlw	high STR_103
 13877  000DB8  0100               	movlb	0	; () banked
 13878  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13879  000DBC  ECC1  F00B         	call	_printf	;wreg free
 13880                           
 13881                           ;Test.c: 293: updateServoPosition(850, 1);
 13882  000DC0  0E03               	movlw	3
 13883  000DC2  0100               	movlb	0	; () banked
 13884  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13885  000DC6  0E52               	movlw	82
 13886  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13887  000DCA  0E00               	movlw	0
 13888  000DCC  0100               	movlb	0	; () banked
 13889  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13890  000DD0  0E01               	movlw	1
 13891  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13892  000DD4  ECD5  F026         	call	_updateServoPosition	;wreg free
 13893                           
 13894                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13895  000DD8  0E00               	movlw	0
 13896  000DDA  0100               	movlb	0	; () banked
 13897  000DDC  6FB6               	movwf	actuatorTest@i_1783& (0+255),b
 13898  000DDE                     l8540:
 13899                           
 13900                           ; BSR set to: 0
 13901  000DDE  0E63               	movlw	99
 13902  000DE0  0100               	movlb	0	; () banked
 13903  000DE2  65B6               	cpfsgt	actuatorTest@i_1783& (0+255),b
 13904  000DE4  D001               	goto	l8544
 13905  000DE6  D00C               	goto	l8548
 13906  000DE8                     l8544:
 13907                           
 13908                           ; BSR set to: 0
 13909  000DE8  0E68               	movlw	104
 13910  000DEA  0100               	movlb	0	; () banked
 13911  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13912  000DEE  0EE4               	movlw	228
 13913  000DF0                     u10867:
 13914  000DF0  2EE8               	decfsz	wreg,f,c
 13915  000DF2  D7FE               	bra	u10867
 13916  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13917  000DF6  D7FC               	bra	u10867
 13918  000DF8  F000               	nop	
 13919  000DFA  0100               	movlb	0	; () banked
 13920  000DFC  2BB6               	incf	actuatorTest@i_1783& (0+255),f,b
 13921  000DFE  D7EF               	goto	l8540
 13922  000E00                     l8548:
 13923                           
 13924                           ; BSR set to: 0
 13925  000E00  0E00               	movlw	0
 13926  000E02  0100               	movlb	0	; () banked
 13927  000E04  6FB7               	movwf	actuatorTest@i_1784& (0+255),b
 13928  000E06                     l8550:
 13929                           
 13930                           ; BSR set to: 0
 13931  000E06  0E63               	movlw	99
 13932  000E08  0100               	movlb	0	; () banked
 13933  000E0A  65B7               	cpfsgt	actuatorTest@i_1784& (0+255),b
 13934  000E0C  D001               	goto	l8554
 13935  000E0E  D00C               	goto	l8558
 13936  000E10                     l8554:
 13937                           
 13938                           ; BSR set to: 0
 13939  000E10  0E68               	movlw	104
 13940  000E12  0100               	movlb	0	; () banked
 13941  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13942  000E16  0EE4               	movlw	228
 13943  000E18                     u10877:
 13944  000E18  2EE8               	decfsz	wreg,f,c
 13945  000E1A  D7FE               	bra	u10877
 13946  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13947  000E1E  D7FC               	bra	u10877
 13948  000E20  F000               	nop	
 13949  000E22  0100               	movlb	0	; () banked
 13950  000E24  2BB7               	incf	actuatorTest@i_1784& (0+255),f,b
 13951  000E26  D7EF               	goto	l8550
 13952  000E28                     l8558:
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13956  000E28  0E80               	movlw	128
 13957  000E2A  ECCB  F02D         	call	_lcdInst
 13958  000E2E  0EC0               	movlw	192
 13959  000E30  ECCB  F02D         	call	_lcdInst
 13960                           
 13961                           ;Test.c: 297: printf("MID -- 2s       ");
 13962  000E34  0E73               	movlw	low STR_104
 13963  000E36  0100               	movlb	0	; () banked
 13964  000E38  6F8E               	movwf	printf@f& (0+255),b
 13965  000E3A  0EFB               	movlw	high STR_104
 13966  000E3C  0100               	movlb	0	; () banked
 13967  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13968  000E40  ECC1  F00B         	call	_printf	;wreg free
 13969                           
 13970                           ;Test.c: 298: updateServoPosition(1200, 1);
 13971  000E44  0E04               	movlw	4
 13972  000E46  0100               	movlb	0	; () banked
 13973  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13974  000E4A  0EB0               	movlw	176
 13975  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13976  000E4E  0E00               	movlw	0
 13977  000E50  0100               	movlb	0	; () banked
 13978  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13979  000E54  0E01               	movlw	1
 13980  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13981  000E58  ECD5  F026         	call	_updateServoPosition	;wreg free
 13982                           
 13983                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13984  000E5C  0E00               	movlw	0
 13985  000E5E  0100               	movlb	0	; () banked
 13986  000E60  6FB8               	movwf	actuatorTest@i_1786& (0+255),b
 13987  000E62                     l8566:
 13988                           
 13989                           ; BSR set to: 0
 13990  000E62  0E63               	movlw	99
 13991  000E64  0100               	movlb	0	; () banked
 13992  000E66  65B8               	cpfsgt	actuatorTest@i_1786& (0+255),b
 13993  000E68  D001               	goto	l8570
 13994  000E6A  D00C               	goto	l8574
 13995  000E6C                     l8570:
 13996                           
 13997                           ; BSR set to: 0
 13998  000E6C  0E68               	movlw	104
 13999  000E6E  0100               	movlb	0	; () banked
 14000  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 14001  000E72  0EE4               	movlw	228
 14002  000E74                     u10887:
 14003  000E74  2EE8               	decfsz	wreg,f,c
 14004  000E76  D7FE               	bra	u10887
 14005  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14006  000E7A  D7FC               	bra	u10887
 14007  000E7C  F000               	nop	
 14008  000E7E  0100               	movlb	0	; () banked
 14009  000E80  2BB8               	incf	actuatorTest@i_1786& (0+255),f,b
 14010  000E82  D7EF               	goto	l8566
 14011  000E84                     l8574:
 14012                           
 14013                           ; BSR set to: 0
 14014  000E84  0E00               	movlw	0
 14015  000E86  0100               	movlb	0	; () banked
 14016  000E88  6FB9               	movwf	actuatorTest@i_1787& (0+255),b
 14017  000E8A                     l8576:
 14018                           
 14019                           ; BSR set to: 0
 14020  000E8A  0E63               	movlw	99
 14021  000E8C  0100               	movlb	0	; () banked
 14022  000E8E  65B9               	cpfsgt	actuatorTest@i_1787& (0+255),b
 14023  000E90  D001               	goto	l8580
 14024  000E92  D00C               	goto	l1313
 14025  000E94                     l8580:
 14026                           
 14027                           ; BSR set to: 0
 14028  000E94  0E68               	movlw	104
 14029  000E96  0100               	movlb	0	; () banked
 14030  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 14031  000E9A  0EE4               	movlw	228
 14032  000E9C                     u10897:
 14033  000E9C  2EE8               	decfsz	wreg,f,c
 14034  000E9E  D7FE               	bra	u10897
 14035  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14036  000EA2  D7FC               	bra	u10897
 14037  000EA4  F000               	nop	
 14038  000EA6  0100               	movlb	0	; () banked
 14039  000EA8  2BB9               	incf	actuatorTest@i_1787& (0+255),f,b
 14040  000EAA  D7EF               	goto	l8576
 14041  000EAC                     l1313:
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;Test.c: 300: TMR1ON = 0;
 14045  000EAC  90CD               	bcf	4045,0,c	;volatile
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;Test.c: 307: printf("TST: TILT SERVO");
 14049  000EAE  0E3C               	movlw	low STR_105
 14050  000EB0  0100               	movlb	0	; () banked
 14051  000EB2  6F8E               	movwf	printf@f& (0+255),b
 14052  000EB4  0EFE               	movlw	high STR_105
 14053  000EB6  0100               	movlb	0	; () banked
 14054  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14055  000EBA  ECC1  F00B         	call	_printf	;wreg free
 14056                           
 14057                           ;Test.c: 308: lcdInst(0b11000000);;
 14058  000EBE  0EC0               	movlw	192
 14059  000EC0  ECCB  F02D         	call	_lcdInst
 14060                           
 14061                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14062  000EC4  0EA6               	movlw	low STR_106
 14063  000EC6  0100               	movlb	0	; () banked
 14064  000EC8  6F8E               	movwf	printf@f& (0+255),b
 14065  000ECA  0EFB               	movlw	high STR_106
 14066  000ECC  0100               	movlb	0	; () banked
 14067  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 14068  000ED0  ECC1  F00B         	call	_printf	;wreg free
 14069                           
 14070                           ;Test.c: 310: updateServoPosition(1050, 3);
 14071  000ED4  0E04               	movlw	4
 14072  000ED6  0100               	movlb	0	; () banked
 14073  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14074  000EDA  0E1A               	movlw	26
 14075  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14076  000EDE  0E00               	movlw	0
 14077  000EE0  0100               	movlb	0	; () banked
 14078  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14079  000EE4  0E03               	movlw	3
 14080  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14081  000EE8  ECD5  F026         	call	_updateServoPosition	;wreg free
 14082                           
 14083                           ;Test.c: 311: TMR3ON = 1;
 14084  000EEC  80B1               	bsf	4017,0,c	;volatile
 14085                           
 14086                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14087  000EEE  0E00               	movlw	0
 14088  000EF0  0100               	movlb	0	; () banked
 14089  000EF2  6FBA               	movwf	actuatorTest@i_1790& (0+255),b
 14090  000EF4                     l8594:
 14091                           
 14092                           ; BSR set to: 0
 14093  000EF4  0E63               	movlw	99
 14094  000EF6  0100               	movlb	0	; () banked
 14095  000EF8  65BA               	cpfsgt	actuatorTest@i_1790& (0+255),b
 14096  000EFA  D001               	goto	l8598
 14097  000EFC  D00C               	goto	l8602
 14098  000EFE                     l8598:
 14099                           
 14100                           ; BSR set to: 0
 14101  000EFE  0E68               	movlw	104
 14102  000F00  0100               	movlb	0	; () banked
 14103  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 14104  000F04  0EE4               	movlw	228
 14105  000F06                     u10907:
 14106  000F06  2EE8               	decfsz	wreg,f,c
 14107  000F08  D7FE               	bra	u10907
 14108  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14109  000F0C  D7FC               	bra	u10907
 14110  000F0E  F000               	nop	
 14111  000F10  0100               	movlb	0	; () banked
 14112  000F12  2BBA               	incf	actuatorTest@i_1790& (0+255),f,b
 14113  000F14  D7EF               	goto	l8594
 14114  000F16                     l8602:
 14115                           
 14116                           ; BSR set to: 0
 14117  000F16  0E00               	movlw	0
 14118  000F18  0100               	movlb	0	; () banked
 14119  000F1A  6FBB               	movwf	actuatorTest@i_1791& (0+255),b
 14120  000F1C                     l8604:
 14121                           
 14122                           ; BSR set to: 0
 14123  000F1C  0E63               	movlw	99
 14124  000F1E  0100               	movlb	0	; () banked
 14125  000F20  65BB               	cpfsgt	actuatorTest@i_1791& (0+255),b
 14126  000F22  D001               	goto	l8608
 14127  000F24  D00C               	goto	l8612
 14128  000F26                     l8608:
 14129                           
 14130                           ; BSR set to: 0
 14131  000F26  0E68               	movlw	104
 14132  000F28  0100               	movlb	0	; () banked
 14133  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14134  000F2C  0EE4               	movlw	228
 14135  000F2E                     u10917:
 14136  000F2E  2EE8               	decfsz	wreg,f,c
 14137  000F30  D7FE               	bra	u10917
 14138  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14139  000F34  D7FC               	bra	u10917
 14140  000F36  F000               	nop	
 14141  000F38  0100               	movlb	0	; () banked
 14142  000F3A  2BBB               	incf	actuatorTest@i_1791& (0+255),f,b
 14143  000F3C  D7EF               	goto	l8604
 14144  000F3E                     l8612:
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14148  000F3E  0E80               	movlw	128
 14149  000F40  ECCB  F02D         	call	_lcdInst
 14150  000F44  0EC0               	movlw	192
 14151  000F46  ECCB  F02D         	call	_lcdInst
 14152                           
 14153                           ;Test.c: 315: printf("DROP -- 2s      ");
 14154  000F4A  0E84               	movlw	low STR_107
 14155  000F4C  0100               	movlb	0	; () banked
 14156  000F4E  6F8E               	movwf	printf@f& (0+255),b
 14157  000F50  0EFB               	movlw	high STR_107
 14158  000F52  0100               	movlb	0	; () banked
 14159  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 14160  000F56  ECC1  F00B         	call	_printf	;wreg free
 14161                           
 14162                           ;Test.c: 316: updateServoPosition(1260, 3);
 14163  000F5A  0E04               	movlw	4
 14164  000F5C  0100               	movlb	0	; () banked
 14165  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14166  000F60  0EEC               	movlw	236
 14167  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14168  000F64  0E00               	movlw	0
 14169  000F66  0100               	movlb	0	; () banked
 14170  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14171  000F6A  0E03               	movlw	3
 14172  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14173  000F6E  ECD5  F026         	call	_updateServoPosition	;wreg free
 14174                           
 14175                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14176  000F72  0E00               	movlw	0
 14177  000F74  0100               	movlb	0	; () banked
 14178  000F76  6FBC               	movwf	actuatorTest@i_1793& (0+255),b
 14179  000F78                     l8620:
 14180                           
 14181                           ; BSR set to: 0
 14182  000F78  0E63               	movlw	99
 14183  000F7A  0100               	movlb	0	; () banked
 14184  000F7C  65BC               	cpfsgt	actuatorTest@i_1793& (0+255),b
 14185  000F7E  D001               	goto	l8624
 14186  000F80  D00C               	goto	l8628
 14187  000F82                     l8624:
 14188                           
 14189                           ; BSR set to: 0
 14190  000F82  0E68               	movlw	104
 14191  000F84  0100               	movlb	0	; () banked
 14192  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 14193  000F88  0EE4               	movlw	228
 14194  000F8A                     u10927:
 14195  000F8A  2EE8               	decfsz	wreg,f,c
 14196  000F8C  D7FE               	bra	u10927
 14197  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14198  000F90  D7FC               	bra	u10927
 14199  000F92  F000               	nop	
 14200  000F94  0100               	movlb	0	; () banked
 14201  000F96  2BBC               	incf	actuatorTest@i_1793& (0+255),f,b
 14202  000F98  D7EF               	goto	l8620
 14203  000F9A                     l8628:
 14204                           
 14205                           ; BSR set to: 0
 14206  000F9A  0E00               	movlw	0
 14207  000F9C  0100               	movlb	0	; () banked
 14208  000F9E  6FBD               	movwf	actuatorTest@i_1794& (0+255),b
 14209  000FA0                     l8630:
 14210                           
 14211                           ; BSR set to: 0
 14212  000FA0  0E63               	movlw	99
 14213  000FA2  0100               	movlb	0	; () banked
 14214  000FA4  65BD               	cpfsgt	actuatorTest@i_1794& (0+255),b
 14215  000FA6  D001               	goto	l8634
 14216  000FA8  D00C               	goto	l8638
 14217  000FAA                     l8634:
 14218                           
 14219                           ; BSR set to: 0
 14220  000FAA  0E68               	movlw	104
 14221  000FAC  0100               	movlb	0	; () banked
 14222  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 14223  000FB0  0EE4               	movlw	228
 14224  000FB2                     u10937:
 14225  000FB2  2EE8               	decfsz	wreg,f,c
 14226  000FB4  D7FE               	bra	u10937
 14227  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14228  000FB8  D7FC               	bra	u10937
 14229  000FBA  F000               	nop	
 14230  000FBC  0100               	movlb	0	; () banked
 14231  000FBE  2BBD               	incf	actuatorTest@i_1794& (0+255),f,b
 14232  000FC0  D7EF               	goto	l8630
 14233  000FC2                     l8638:
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14237  000FC2  0E80               	movlw	128
 14238  000FC4  ECCB  F02D         	call	_lcdInst
 14239  000FC8  0EC0               	movlw	192
 14240  000FCA  ECCB  F02D         	call	_lcdInst
 14241                           
 14242                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14243  000FCE  0EA6               	movlw	low STR_106
 14244  000FD0  0100               	movlb	0	; () banked
 14245  000FD2  6F8E               	movwf	printf@f& (0+255),b
 14246  000FD4  0EFB               	movlw	high STR_106
 14247  000FD6  0100               	movlb	0	; () banked
 14248  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14249  000FDA  ECC1  F00B         	call	_printf	;wreg free
 14250                           
 14251                           ;Test.c: 321: updateServoPosition(1050, 3);
 14252  000FDE  0E04               	movlw	4
 14253  000FE0  0100               	movlb	0	; () banked
 14254  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14255  000FE4  0E1A               	movlw	26
 14256  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14257  000FE8  0E00               	movlw	0
 14258  000FEA  0100               	movlb	0	; () banked
 14259  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14260  000FEE  0E03               	movlw	3
 14261  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14262  000FF2  ECD5  F026         	call	_updateServoPosition	;wreg free
 14263                           
 14264                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14265  000FF6  0E00               	movlw	0
 14266  000FF8  0100               	movlb	0	; () banked
 14267  000FFA  6FBE               	movwf	actuatorTest@i_1796& (0+255),b
 14268  000FFC                     l8646:
 14269                           
 14270                           ; BSR set to: 0
 14271  000FFC  0E63               	movlw	99
 14272  000FFE  0100               	movlb	0	; () banked
 14273  001000  65BE               	cpfsgt	actuatorTest@i_1796& (0+255),b
 14274  001002  D001               	goto	l8650
 14275  001004  D00C               	goto	l8654
 14276  001006                     l8650:
 14277                           
 14278                           ; BSR set to: 0
 14279  001006  0E68               	movlw	104
 14280  001008  0100               	movlb	0	; () banked
 14281  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14282  00100C  0EE4               	movlw	228
 14283  00100E                     u10947:
 14284  00100E  2EE8               	decfsz	wreg,f,c
 14285  001010  D7FE               	bra	u10947
 14286  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14287  001014  D7FC               	bra	u10947
 14288  001016  F000               	nop	
 14289  001018  0100               	movlb	0	; () banked
 14290  00101A  2BBE               	incf	actuatorTest@i_1796& (0+255),f,b
 14291  00101C  D7EF               	goto	l8646
 14292  00101E                     l8654:
 14293                           
 14294                           ; BSR set to: 0
 14295  00101E  0E00               	movlw	0
 14296  001020  0100               	movlb	0	; () banked
 14297  001022  6FBF               	movwf	actuatorTest@i_1797& (0+255),b
 14298  001024                     l8656:
 14299                           
 14300                           ; BSR set to: 0
 14301  001024  0E63               	movlw	99
 14302  001026  0100               	movlb	0	; () banked
 14303  001028  65BF               	cpfsgt	actuatorTest@i_1797& (0+255),b
 14304  00102A  D001               	goto	l8660
 14305  00102C  D00C               	goto	l1325
 14306  00102E                     l8660:
 14307                           
 14308                           ; BSR set to: 0
 14309  00102E  0E68               	movlw	104
 14310  001030  0100               	movlb	0	; () banked
 14311  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 14312  001034  0EE4               	movlw	228
 14313  001036                     u10957:
 14314  001036  2EE8               	decfsz	wreg,f,c
 14315  001038  D7FE               	bra	u10957
 14316  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14317  00103C  D7FC               	bra	u10957
 14318  00103E  F000               	nop	
 14319  001040  0100               	movlb	0	; () banked
 14320  001042  2BBF               	incf	actuatorTest@i_1797& (0+255),f,b
 14321  001044  D7EF               	goto	l8656
 14322  001046                     l1325:
 14323                           
 14324                           ; BSR set to: 0
 14325                           ;Test.c: 323: TMR3ON = 0;
 14326  001046  90B1               	bcf	4017,0,c	;volatile
 14327                           
 14328                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14329  001048  9EF2               	bcf	intcon,7,c	;volatile
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14333  00104A  0E01               	movlw	1
 14334  00104C  ECCB  F02D         	call	_lcdInst
 14335  001050  0E68               	movlw	104
 14336  001052  0100               	movlb	0	; () banked
 14337  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 14338  001056  0EE4               	movlw	228
 14339  001058                     u10967:
 14340  001058  2EE8               	decfsz	wreg,f,c
 14341  00105A  D7FE               	bra	u10967
 14342  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14343  00105E  D7FC               	bra	u10967
 14344  001060  F000               	nop	
 14345  001062  0E80               	movlw	128
 14346  001064  ECCB  F02D         	call	_lcdInst
 14347                           
 14348                           ;Test.c: 330: printf("TST: CAM SERVO");
 14349  001068  0E98               	movlw	low STR_109
 14350  00106A  0100               	movlb	0	; () banked
 14351  00106C  6F8E               	movwf	printf@f& (0+255),b
 14352  00106E  0EFE               	movlw	high STR_109
 14353  001070  0100               	movlb	0	; () banked
 14354  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 14355  001074  ECC1  F00B         	call	_printf	;wreg free
 14356                           
 14357                           ;Test.c: 331: lcdInst(0b11000000);;
 14358  001078  0EC0               	movlw	192
 14359  00107A  ECCB  F02D         	call	_lcdInst
 14360                           
 14361                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14362  00107E  0E7A               	movlw	low STR_110
 14363  001080  0100               	movlb	0	; () banked
 14364  001082  6F8E               	movwf	printf@f& (0+255),b
 14365  001084  0EFE               	movlw	high STR_110
 14366  001086  0100               	movlb	0	; () banked
 14367  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 14368  00108A  ECC1  F00B         	call	_printf	;wreg free
 14369                           
 14370                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14371  00108E  808B               	bsf	3979,0,c	;volatile
 14372                           
 14373                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14374  001090  0E00               	movlw	0
 14375  001092  0100               	movlb	0	; () banked
 14376  001094  6FC0               	movwf	actuatorTest@i_1800& (0+255),b
 14377  001096                     l8680:
 14378                           
 14379                           ; BSR set to: 0
 14380  001096  0E63               	movlw	99
 14381  001098  0100               	movlb	0	; () banked
 14382  00109A  65C0               	cpfsgt	actuatorTest@i_1800& (0+255),b
 14383  00109C  D001               	goto	l8684
 14384  00109E  D00C               	goto	l8688
 14385  0010A0                     l8684:
 14386                           
 14387                           ; BSR set to: 0
 14388  0010A0  0E68               	movlw	104
 14389  0010A2  0100               	movlb	0	; () banked
 14390  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 14391  0010A6  0EE4               	movlw	228
 14392  0010A8                     u10977:
 14393  0010A8  2EE8               	decfsz	wreg,f,c
 14394  0010AA  D7FE               	bra	u10977
 14395  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14396  0010AE  D7FC               	bra	u10977
 14397  0010B0  F000               	nop	
 14398  0010B2  0100               	movlb	0	; () banked
 14399  0010B4  2BC0               	incf	actuatorTest@i_1800& (0+255),f,b
 14400  0010B6  D7EF               	goto	l8680
 14401  0010B8                     l8688:
 14402                           
 14403                           ; BSR set to: 0
 14404  0010B8  0E00               	movlw	0
 14405  0010BA  0100               	movlb	0	; () banked
 14406  0010BC  6FC1               	movwf	actuatorTest@i_1801& (0+255),b
 14407  0010BE                     l8690:
 14408                           
 14409                           ; BSR set to: 0
 14410  0010BE  0E63               	movlw	99
 14411  0010C0  0100               	movlb	0	; () banked
 14412  0010C2  65C1               	cpfsgt	actuatorTest@i_1801& (0+255),b
 14413  0010C4  D001               	goto	l8694
 14414  0010C6  D00C               	goto	l8698
 14415  0010C8                     l8694:
 14416                           
 14417                           ; BSR set to: 0
 14418  0010C8  0E68               	movlw	104
 14419  0010CA  0100               	movlb	0	; () banked
 14420  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 14421  0010CE  0EE4               	movlw	228
 14422  0010D0                     u10987:
 14423  0010D0  2EE8               	decfsz	wreg,f,c
 14424  0010D2  D7FE               	bra	u10987
 14425  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14426  0010D6  D7FC               	bra	u10987
 14427  0010D8  F000               	nop	
 14428  0010DA  0100               	movlb	0	; () banked
 14429  0010DC  2BC1               	incf	actuatorTest@i_1801& (0+255),f,b
 14430  0010DE  D7EF               	goto	l8690
 14431  0010E0                     l8698:
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14435  0010E0  0E80               	movlw	128
 14436  0010E2  ECCB  F02D         	call	_lcdInst
 14437  0010E6  0EC0               	movlw	192
 14438  0010E8  ECCB  F02D         	call	_lcdInst
 14439                           
 14440                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14441  0010EC  0E6B               	movlw	low STR_111
 14442  0010EE  0100               	movlb	0	; () banked
 14443  0010F0  6F8E               	movwf	printf@f& (0+255),b
 14444  0010F2  0EFE               	movlw	high STR_111
 14445  0010F4  0100               	movlb	0	; () banked
 14446  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14447  0010F8  ECC1  F00B         	call	_printf	;wreg free
 14448                           
 14449                           ;Test.c: 339: for(i=0;i<10000;i++)
 14450  0010FC  0E00               	movlw	0
 14451  0010FE  0100               	movlb	0	; () banked
 14452  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14453  001102  0E00               	movlw	0
 14454  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 14455  001106                     l8704:
 14456                           
 14457                           ; BSR set to: 0
 14458  001106  0100               	movlb	0	; () banked
 14459  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14460  00110A  D008               	goto	l1330
 14461  00110C  0E10               	movlw	16
 14462  00110E  0100               	movlb	0	; () banked
 14463  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14464  001112  0E27               	movlw	39
 14465  001114  0100               	movlb	0	; () banked
 14466  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14467  001118  B0D8               	btfsc	status,0,c
 14468  00111A  D00D               	goto	l8714
 14469  00111C                     l1330:
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;Test.c: 340: {
 14473                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14474  00111C  808B               	bsf	3979,0,c	;volatile
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14478  00111E  0E1A               	movlw	26
 14479  001120                     u10997:
 14480  001120  2EE8               	decfsz	wreg,f,c
 14481  001122  D7FE               	bra	u10997
 14482  001124  D000               	nop2	
 14483                           
 14484                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14485  001126  908B               	bcf	3979,0,c	;volatile
 14486                           
 14487                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14488  001128  0EF0               	movlw	240
 14489  00112A                     u11007:
 14490  00112A  2EE8               	decfsz	wreg,f,c
 14491  00112C  D7FE               	bra	u11007
 14492  00112E  0100               	movlb	0	; () banked
 14493  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14494  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14495  001134  D7E8               	goto	l8704
 14496  001136                     l8714:
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;Test.c: 345: }
 14500                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14501  001136  0E00               	movlw	0
 14502  001138  0100               	movlb	0	; () banked
 14503  00113A  6FC2               	movwf	actuatorTest@i_1803& (0+255),b
 14504  00113C                     l8716:
 14505                           
 14506                           ; BSR set to: 0
 14507  00113C  0E63               	movlw	99
 14508  00113E  0100               	movlb	0	; () banked
 14509  001140  65C2               	cpfsgt	actuatorTest@i_1803& (0+255),b
 14510  001142  D001               	goto	l8720
 14511  001144  D00C               	goto	l8724
 14512  001146                     l8720:
 14513                           
 14514                           ; BSR set to: 0
 14515  001146  0E68               	movlw	104
 14516  001148  0100               	movlb	0	; () banked
 14517  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14518  00114C  0EE4               	movlw	228
 14519  00114E                     u11017:
 14520  00114E  2EE8               	decfsz	wreg,f,c
 14521  001150  D7FE               	bra	u11017
 14522  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14523  001154  D7FC               	bra	u11017
 14524  001156  F000               	nop	
 14525  001158  0100               	movlb	0	; () banked
 14526  00115A  2BC2               	incf	actuatorTest@i_1803& (0+255),f,b
 14527  00115C  D7EF               	goto	l8716
 14528  00115E                     l8724:
 14529                           
 14530                           ; BSR set to: 0
 14531  00115E  0E00               	movlw	0
 14532  001160  0100               	movlb	0	; () banked
 14533  001162  6FC3               	movwf	actuatorTest@i_1804& (0+255),b
 14534  001164                     l8726:
 14535                           
 14536                           ; BSR set to: 0
 14537  001164  0E63               	movlw	99
 14538  001166  0100               	movlb	0	; () banked
 14539  001168  65C3               	cpfsgt	actuatorTest@i_1804& (0+255),b
 14540  00116A  D001               	goto	l8730
 14541  00116C  D00C               	goto	l8734
 14542  00116E                     l8730:
 14543                           
 14544                           ; BSR set to: 0
 14545  00116E  0E68               	movlw	104
 14546  001170  0100               	movlb	0	; () banked
 14547  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 14548  001174  0EE4               	movlw	228
 14549  001176                     u11027:
 14550  001176  2EE8               	decfsz	wreg,f,c
 14551  001178  D7FE               	bra	u11027
 14552  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14553  00117C  D7FC               	bra	u11027
 14554  00117E  F000               	nop	
 14555  001180  0100               	movlb	0	; () banked
 14556  001182  2BC3               	incf	actuatorTest@i_1804& (0+255),f,b
 14557  001184  D7EF               	goto	l8726
 14558  001186                     l8734:
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;Test.c: 348: machine_state = Testing_state;
 14562  001186  0E03               	movlw	3
 14563  001188  0100               	movlb	0	; () banked
 14564  00118A  6FFC               	movwf	_machine_state& (0+255),b
 14565                           
 14566                           ; BSR set to: 0
 14567  00118C  0012               	return		;funcret
 14568  00118E                     __end_of_actuatorTest:
 14569                           	opt stack 0
 14570                           tblptru	equ	0xFF8
 14571                           tblptrh	equ	0xFF7
 14572                           tblptrl	equ	0xFF6
 14573                           tablat	equ	0xFF5
 14574                           prodh	equ	0xFF4
 14575                           prodl	equ	0xFF3
 14576                           intcon	equ	0xFF2
 14577                           intcon2	equ	0xFF1
 14578                           intcon3	equ	0xFF0
 14579                           postinc0	equ	0xFEE
 14580                           wreg	equ	0xFE8
 14581                           postdec1	equ	0xFE5
 14582                           fsr1l	equ	0xFE1
 14583                           indf2	equ	0xFDF
 14584                           postinc2	equ	0xFDE
 14585                           postdec2	equ	0xFDD
 14586                           fsr2h	equ	0xFDA
 14587                           fsr2l	equ	0xFD9
 14588                           status	equ	0xFD8
 14589                           
 14590 ;; *************** function _SpeedTest *****************
 14591 ;; Defined at:
 14592 ;;		line 559 in file "Test.c"
 14593 ;; Parameters:    Size  Location     Type
 14594 ;;		None
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;		None
 14597 ;; Return value:  Size  Location     Type
 14598 ;;                  1    wreg      void 
 14599 ;; Registers used:
 14600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14601 ;; Tracked objects:
 14602 ;;		On entry : 0/0
 14603 ;;		On exit  : 0/0
 14604 ;;		Unchanged: 0/0
 14605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;Total ram usage:        1 bytes
 14611 ;; Hardware stack levels used:    1
 14612 ;; Hardware stack levels required when called:   10
 14613 ;; This function calls:
 14614 ;;		_lcdInst
 14615 ;;		_printf
 14616 ;; This function is called by:
 14617 ;;		_Test
 14618 ;; This function uses a non-reentrant model
 14619 ;;
 14620                           
 14621                           	psect	text44
 14622  004E30                     __ptext44:
 14623                           	opt stack 0
 14624  004E30                     _SpeedTest:
 14625                           	opt stack 19
 14626                           
 14627                           ;Test.c: 561: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;incstack = 0
 14631  004E30  0E01               	movlw	1
 14632  004E32  ECCB  F02D         	call	_lcdInst
 14633  004E36  0E68               	movlw	104
 14634  004E38  0100               	movlb	0	; () banked
 14635  004E3A  6FAB               	movwf	??_SpeedTest& (0+255),b
 14636  004E3C  0EE4               	movlw	228
 14637  004E3E                     u11037:
 14638  004E3E  2EE8               	decfsz	wreg,f,c
 14639  004E40  D7FE               	bra	u11037
 14640  004E42  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14641  004E44  D7FC               	bra	u11037
 14642  004E46  F000               	nop	
 14643  004E48  0E80               	movlw	128
 14644  004E4A  ECCB  F02D         	call	_lcdInst
 14645                           
 14646                           ;Test.c: 562: printf("S: D WILL RETURN ");
 14647  004E4E  0EF5               	movlw	low STR_122
 14648  004E50  0100               	movlb	0	; () banked
 14649  004E52  6F8E               	movwf	printf@f& (0+255),b
 14650  004E54  0EFA               	movlw	high STR_122
 14651  004E56  0100               	movlb	0	; () banked
 14652  004E58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14653  004E5A  ECC1  F00B         	call	_printf	;wreg free
 14654                           
 14655                           ;Test.c: 563: lcdInst(0b11000000);;
 14656  004E5E  0EC0               	movlw	192
 14657  004E60  ECCB  F02D         	call	_lcdInst
 14658                           
 14659                           ;Test.c: 564: printf("OTHER SETS RA5   ");
 14660  004E64  0EE3               	movlw	low STR_123
 14661  004E66  0100               	movlb	0	; () banked
 14662  004E68  6F8E               	movwf	printf@f& (0+255),b
 14663  004E6A  0EFA               	movlw	high STR_123
 14664  004E6C  0100               	movlb	0	; () banked
 14665  004E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14666  004E70  ECC1  F00B         	call	_printf	;wreg free
 14667  004E74                     l1409:
 14668  004E74  A281               	btfss	3969,1,c	;volatile
 14669  004E76  D7FE               	goto	l1409
 14670                           
 14671                           ;Test.c: 569: }
 14672                           ;Test.c: 570: if(PORTB >> 4 == 0b1111){
 14673  004E78  3881               	swapf	3969,w,c	;volatile
 14674  004E7A  0B0F               	andlw	15
 14675  004E7C  0A0F               	xorlw	15
 14676  004E7E  B4D8               	btfsc	status,2,c
 14677  004E80  0012               	return	
 14678  004E82  D014               	goto	l8830
 14679  004E84                     l1416:
 14680                           
 14681                           ;Test.c: 575: LATBbits.LATB2 = 1;
 14682  004E84  848A               	bsf	3978,2,c	;volatile
 14683                           
 14684                           ;Test.c: 576: _delay((unsigned long)((5)*(32000000/4000.0)));
 14685  004E86  0E34               	movlw	52
 14686  004E88  0100               	movlb	0	; () banked
 14687  004E8A  6FAB               	movwf	??_SpeedTest& (0+255),b
 14688  004E8C  0EF1               	movlw	241
 14689  004E8E                     u11047:
 14690  004E8E  2EE8               	decfsz	wreg,f,c
 14691  004E90  D7FE               	bra	u11047
 14692  004E92  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14693  004E94  D7FC               	bra	u11047
 14694  004E96  D000               	nop2	
 14695                           
 14696                           ;Test.c: 577: LATBbits.LATB2 = 0;
 14697  004E98  948A               	bcf	3978,2,c	;volatile
 14698                           
 14699                           ;Test.c: 578: _delay((unsigned long)((5)*(32000000/4000.0)));
 14700  004E9A  0E34               	movlw	52
 14701  004E9C  0100               	movlb	0	; () banked
 14702  004E9E  6FAB               	movwf	??_SpeedTest& (0+255),b
 14703  004EA0  0EF1               	movlw	241
 14704  004EA2                     u11057:
 14705  004EA2  2EE8               	decfsz	wreg,f,c
 14706  004EA4  D7FE               	bra	u11057
 14707  004EA6  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14708  004EA8  D7FC               	bra	u11057
 14709  004EAA  D000               	nop2	
 14710  004EAC                     l8830:
 14711  004EAC  B281               	btfsc	3969,1,c	;volatile
 14712  004EAE  D7EA               	goto	l1416
 14713                           
 14714                           ;Test.c: 581: }
 14715                           ;Test.c: 582: LATBbits.LATB2 = 0;
 14716  004EB0  948A               	bcf	3978,2,c	;volatile
 14717  004EB2  D7E0               	goto	l1409
 14718  004EB4                     __end_of_SpeedTest:
 14719                           	opt stack 0
 14720                           tblptru	equ	0xFF8
 14721                           tblptrh	equ	0xFF7
 14722                           tblptrl	equ	0xFF6
 14723                           tablat	equ	0xFF5
 14724                           prodh	equ	0xFF4
 14725                           prodl	equ	0xFF3
 14726                           intcon	equ	0xFF2
 14727                           intcon2	equ	0xFF1
 14728                           intcon3	equ	0xFF0
 14729                           postinc0	equ	0xFEE
 14730                           wreg	equ	0xFE8
 14731                           postdec1	equ	0xFE5
 14732                           fsr1l	equ	0xFE1
 14733                           indf2	equ	0xFDF
 14734                           postinc2	equ	0xFDE
 14735                           postdec2	equ	0xFDD
 14736                           fsr2h	equ	0xFDA
 14737                           fsr2l	equ	0xFD9
 14738                           status	equ	0xFD8
 14739                           
 14740 ;; *************** function _PortTestPusher *****************
 14741 ;; Defined at:
 14742 ;;		line 692 in file "Test.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;		None
 14745 ;; Auto vars:     Size  Location     Type
 14746 ;;		None
 14747 ;; Return value:  Size  Location     Type
 14748 ;;                  1    wreg      void 
 14749 ;; Registers used:
 14750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14751 ;; Tracked objects:
 14752 ;;		On entry : 0/0
 14753 ;;		On exit  : 0/0
 14754 ;;		Unchanged: 0/0
 14755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;Total ram usage:        1 bytes
 14761 ;; Hardware stack levels used:    1
 14762 ;; Hardware stack levels required when called:   10
 14763 ;; This function calls:
 14764 ;;		_lcdInst
 14765 ;;		_printf
 14766 ;; This function is called by:
 14767 ;;		_Test
 14768 ;; This function uses a non-reentrant model
 14769 ;;
 14770                           
 14771                           	psect	text45
 14772  00528A                     __ptext45:
 14773                           	opt stack 0
 14774  00528A                     _PortTestPusher:
 14775                           	opt stack 19
 14776                           
 14777                           ;Test.c: 693: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14778                           
 14779                           ;incstack = 0
 14780  00528A  0E01               	movlw	1
 14781  00528C  ECCB  F02D         	call	_lcdInst
 14782  005290  0E68               	movlw	104
 14783  005292  0100               	movlb	0	; () banked
 14784  005294  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14785  005296  0EE4               	movlw	228
 14786  005298                     u11067:
 14787  005298  2EE8               	decfsz	wreg,f,c
 14788  00529A  D7FE               	bra	u11067
 14789  00529C  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14790  00529E  D7FC               	bra	u11067
 14791  0052A0  F000               	nop	
 14792  0052A2  0E80               	movlw	128
 14793  0052A4  ECCB  F02D         	call	_lcdInst
 14794                           
 14795                           ;Test.c: 694: printf("D WILL RETURN    ");
 14796  0052A8  0ED1               	movlw	low STR_113
 14797  0052AA  0100               	movlb	0	; () banked
 14798  0052AC  6F8E               	movwf	printf@f& (0+255),b
 14799  0052AE  0EFA               	movlw	high STR_113
 14800  0052B0  0100               	movlb	0	; () banked
 14801  0052B2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14802  0052B4  ECC1  F00B         	call	_printf	;wreg free
 14803                           
 14804                           ;Test.c: 695: lcdInst(0b11000000);;
 14805  0052B8  0EC0               	movlw	192
 14806  0052BA  ECCB  F02D         	call	_lcdInst
 14807                           
 14808                           ;Test.c: 696: printf("OTHER SETS PUSHER");
 14809  0052BE  0E19               	movlw	low STR_131
 14810  0052C0  0100               	movlb	0	; () banked
 14811  0052C2  6F8E               	movwf	printf@f& (0+255),b
 14812  0052C4  0EFB               	movlw	high STR_131
 14813  0052C6  0100               	movlb	0	; () banked
 14814  0052C8  6F8F               	movwf	(printf@f+1)& (0+255),b
 14815  0052CA  ECC1  F00B         	call	_printf	;wreg free
 14816  0052CE                     l1470:
 14817  0052CE  A281               	btfss	3969,1,c	;volatile
 14818  0052D0  D7FE               	goto	l1470
 14819                           
 14820                           ;Test.c: 701: }
 14821                           ;Test.c: 702: if(PORTB >> 4 == 0b1111){
 14822  0052D2  3881               	swapf	3969,w,c	;volatile
 14823  0052D4  0B0F               	andlw	15
 14824  0052D6  0A0F               	xorlw	15
 14825  0052D8  B4D8               	btfsc	status,2,c
 14826  0052DA  0012               	return	
 14827                           
 14828                           ;Test.c: 705: else{
 14829                           ;Test.c: 706: LATAbits.LATA4 = 1;
 14830                           
 14831                           ;Test.c: 704: }
 14832                           
 14833                           ;Test.c: 703: break;
 14834  0052DC  8889               	bsf	3977,4,c	;volatile
 14835  0052DE                     l1476:
 14836  0052DE  B281               	btfsc	3969,1,c	;volatile
 14837  0052E0  D7FE               	goto	l1476
 14838                           
 14839                           ;Test.c: 709: }
 14840                           ;Test.c: 710: LATAbits.LATA4 = 0;
 14841  0052E2  9889               	bcf	3977,4,c	;volatile
 14842  0052E4  D7F4               	goto	l1470
 14843  0052E6                     __end_of_PortTestPusher:
 14844                           	opt stack 0
 14845                           tblptru	equ	0xFF8
 14846                           tblptrh	equ	0xFF7
 14847                           tblptrl	equ	0xFF6
 14848                           tablat	equ	0xFF5
 14849                           prodh	equ	0xFF4
 14850                           prodl	equ	0xFF3
 14851                           intcon	equ	0xFF2
 14852                           intcon2	equ	0xFF1
 14853                           intcon3	equ	0xFF0
 14854                           postinc0	equ	0xFEE
 14855                           wreg	equ	0xFE8
 14856                           postdec1	equ	0xFE5
 14857                           fsr1l	equ	0xFE1
 14858                           indf2	equ	0xFDF
 14859                           postinc2	equ	0xFDE
 14860                           postdec2	equ	0xFDD
 14861                           fsr2h	equ	0xFDA
 14862                           fsr2l	equ	0xFD9
 14863                           status	equ	0xFD8
 14864                           
 14865 ;; *************** function _PortTestDC *****************
 14866 ;; Defined at:
 14867 ;;		line 411 in file "Test.c"
 14868 ;; Parameters:    Size  Location     Type
 14869 ;;		None
 14870 ;; Auto vars:     Size  Location     Type
 14871 ;;		None
 14872 ;; Return value:  Size  Location     Type
 14873 ;;                  1    wreg      void 
 14874 ;; Registers used:
 14875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14876 ;; Tracked objects:
 14877 ;;		On entry : 0/0
 14878 ;;		On exit  : 0/0
 14879 ;;		Unchanged: 0/0
 14880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;Total ram usage:        1 bytes
 14886 ;; Hardware stack levels used:    1
 14887 ;; Hardware stack levels required when called:   10
 14888 ;; This function calls:
 14889 ;;		_lcdInst
 14890 ;;		_printf
 14891 ;; This function is called by:
 14892 ;;		_Test
 14893 ;; This function uses a non-reentrant model
 14894 ;;
 14895                           
 14896                           	psect	text46
 14897  0052E6                     __ptext46:
 14898                           	opt stack 0
 14899  0052E6                     _PortTestDC:
 14900                           	opt stack 19
 14901                           
 14902                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14903                           
 14904                           ;incstack = 0
 14905  0052E6  0E01               	movlw	1
 14906  0052E8  ECCB  F02D         	call	_lcdInst
 14907  0052EC  0E68               	movlw	104
 14908  0052EE  0100               	movlb	0	; () banked
 14909  0052F0  6FAB               	movwf	??_PortTestDC& (0+255),b
 14910  0052F2  0EE4               	movlw	228
 14911  0052F4                     u11077:
 14912  0052F4  2EE8               	decfsz	wreg,f,c
 14913  0052F6  D7FE               	bra	u11077
 14914  0052F8  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 14915  0052FA  D7FC               	bra	u11077
 14916  0052FC  F000               	nop	
 14917  0052FE  0E80               	movlw	128
 14918  005300  ECCB  F02D         	call	_lcdInst
 14919                           
 14920                           ;Test.c: 413: printf("D WILL RETURN    ");
 14921  005304  0ED1               	movlw	low STR_113
 14922  005306  0100               	movlb	0	; () banked
 14923  005308  6F8E               	movwf	printf@f& (0+255),b
 14924  00530A  0EFA               	movlw	high STR_113
 14925  00530C  0100               	movlb	0	; () banked
 14926  00530E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14927  005310  ECC1  F00B         	call	_printf	;wreg free
 14928                           
 14929                           ;Test.c: 414: lcdInst(0b11000000);;
 14930  005314  0EC0               	movlw	192
 14931  005316  ECCB  F02D         	call	_lcdInst
 14932                           
 14933                           ;Test.c: 415: printf("OTHER SETS DC   ");
 14934  00531A  0ED9               	movlw	low STR_114
 14935  00531C  0100               	movlb	0	; () banked
 14936  00531E  6F8E               	movwf	printf@f& (0+255),b
 14937  005320  0EFB               	movlw	high STR_114
 14938  005322  0100               	movlb	0	; () banked
 14939  005324  6F8F               	movwf	(printf@f+1)& (0+255),b
 14940  005326  ECC1  F00B         	call	_printf	;wreg free
 14941  00532A                     l1343:
 14942  00532A  A281               	btfss	3969,1,c	;volatile
 14943  00532C  D7FE               	goto	l1343
 14944                           
 14945                           ;Test.c: 420: }
 14946                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 14947  00532E  3881               	swapf	3969,w,c	;volatile
 14948  005330  0B0F               	andlw	15
 14949  005332  0A0F               	xorlw	15
 14950  005334  B4D8               	btfsc	status,2,c
 14951  005336  0012               	return	
 14952                           
 14953                           ;Test.c: 424: else{
 14954                           ;Test.c: 425: LATBbits.LATB2 = 1;
 14955                           
 14956                           ;Test.c: 423: }
 14957                           
 14958                           ;Test.c: 422: break;
 14959  005338  848A               	bsf	3978,2,c	;volatile
 14960  00533A                     l1349:
 14961  00533A  B281               	btfsc	3969,1,c	;volatile
 14962  00533C  D7FE               	goto	l1349
 14963                           
 14964                           ;Test.c: 428: }
 14965                           ;Test.c: 429: LATBbits.LATB2 = 0;
 14966  00533E  948A               	bcf	3978,2,c	;volatile
 14967  005340  D7F4               	goto	l1343
 14968  005342                     __end_of_PortTestDC:
 14969                           	opt stack 0
 14970                           tblptru	equ	0xFF8
 14971                           tblptrh	equ	0xFF7
 14972                           tblptrl	equ	0xFF6
 14973                           tablat	equ	0xFF5
 14974                           prodh	equ	0xFF4
 14975                           prodl	equ	0xFF3
 14976                           intcon	equ	0xFF2
 14977                           intcon2	equ	0xFF1
 14978                           intcon3	equ	0xFF0
 14979                           postinc0	equ	0xFEE
 14980                           wreg	equ	0xFE8
 14981                           postdec1	equ	0xFE5
 14982                           fsr1l	equ	0xFE1
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           fsr2h	equ	0xFDA
 14987                           fsr2l	equ	0xFD9
 14988                           status	equ	0xFD8
 14989                           
 14990 ;; *************** function _PlatformTest *****************
 14991 ;; Defined at:
 14992 ;;		line 434 in file "Test.c"
 14993 ;; Parameters:    Size  Location     Type
 14994 ;;		None
 14995 ;; Auto vars:     Size  Location     Type
 14996 ;;  i               2   55[BANK0 ] int 
 14997 ;;  i               2   53[BANK0 ] int 
 14998 ;;  i               2   51[BANK0 ] int 
 14999 ;;  i               2   49[BANK0 ] int 
 15000 ;;  res             2   47[BANK0 ] int 
 15001 ;;  res             2   45[BANK0 ] int 
 15002 ;;  on              2   57[BANK0 ] int 
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      void 
 15005 ;; Registers used:
 15006 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15013 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15016 ;;Total ram usage:       16 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:   10
 15019 ;; This function calls:
 15020 ;;		_lcdInst
 15021 ;;		_printf
 15022 ;;		_readADC
 15023 ;;		_stopSignals
 15024 ;; This function is called by:
 15025 ;;		_Test
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           	psect	text47
 15030  0023D8                     __ptext47:
 15031                           	opt stack 0
 15032  0023D8                     _PlatformTest:
 15033                           	opt stack 19
 15034                           
 15035                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15036                           
 15037                           ;incstack = 0
 15038  0023D8  8A8B               	bsf	3979,5,c	;volatile
 15039                           
 15040                           ;Test.c: 437: machine_state = Sorting_state;
 15041  0023DA  0E01               	movlw	1
 15042  0023DC  0100               	movlb	0	; () banked
 15043  0023DE  6FFC               	movwf	_machine_state& (0+255),b
 15044                           
 15045                           ;Test.c: 438: f_arm_position = 0;
 15046  0023E0  0E00               	movlw	0
 15047  0023E2  0100               	movlb	0	; () banked
 15048  0023E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15049  0023E6  0E00               	movlw	0
 15050  0023E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 15051                           
 15052                           ;Test.c: 439: timer2_counter = 0;
 15053  0023EA  0E00               	movlw	0
 15054  0023EC  6E74               	movwf	_timer2_counter+1,c	;volatile
 15055  0023EE  0E00               	movlw	0
 15056  0023F0  6E73               	movwf	_timer2_counter,c	;volatile
 15057                           
 15058                           ; BSR set to: 0
 15059                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15060  0023F2  968A               	bcf	3978,3,c	;volatile
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;Test.c: 441: TMR2ON = 1;
 15064  0023F4  84CA               	bsf	4042,2,c	;volatile
 15065                           
 15066                           ;Test.c: 442: was_low_2 = 0;
 15067  0023F6  0E00               	movlw	0
 15068  0023F8  6E7A               	movwf	_was_low_2+1,c	;volatile
 15069  0023FA  0E00               	movlw	0
 15070  0023FC  6E79               	movwf	_was_low_2,c	;volatile
 15071                           
 15072                           ;Test.c: 444: int on = 1;
 15073  0023FE  0E00               	movlw	0
 15074  002400  0100               	movlb	0	; () banked
 15075  002402  6FBA               	movwf	(PlatformTest@on+1)& (0+255),b
 15076  002404  0E01               	movlw	1
 15077  002406  6FB9               	movwf	PlatformTest@on& (0+255),b
 15078                           
 15079                           ; BSR set to: 0
 15080                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15081  002408  0E01               	movlw	1
 15082  00240A  ECCB  F02D         	call	_lcdInst
 15083  00240E  0E68               	movlw	104
 15084  002410  0100               	movlb	0	; () banked
 15085  002412  6FAB               	movwf	??_PlatformTest& (0+255),b
 15086  002414  0EE4               	movlw	228
 15087  002416                     u11087:
 15088  002416  2EE8               	decfsz	wreg,f,c
 15089  002418  D7FE               	bra	u11087
 15090  00241A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15091  00241C  D7FC               	bra	u11087
 15092  00241E  F000               	nop	
 15093  002420  0E80               	movlw	128
 15094  002422  ECCB  F02D         	call	_lcdInst
 15095                           
 15096                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15097  002426  0E0C               	movlw	low STR_115
 15098  002428  0100               	movlb	0	; () banked
 15099  00242A  6F8E               	movwf	printf@f& (0+255),b
 15100  00242C  0EFC               	movlw	high STR_115
 15101  00242E  0100               	movlb	0	; () banked
 15102  002430  6F8F               	movwf	(printf@f+1)& (0+255),b
 15103  002432  ECC1  F00B         	call	_printf	;wreg free
 15104                           
 15105                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15106  002436  D058               	goto	l8884
 15107  002438                     l8866:
 15108                           
 15109                           ;Test.c: 449: readADC(0);
 15110  002438  0E00               	movlw	0
 15111  00243A  ECC1  F02C         	call	_readADC
 15112                           
 15113                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15114  00243E  50C3               	movf	4035,w,c	;volatile
 15115  002440  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15116  002444  0100               	movlb	0	; () banked
 15117  002446  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15118  002448  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15119  00244C  0100               	movlb	0	; () banked
 15120  00244E  6BAB               	clrf	??_PlatformTest& (0+255),b
 15121  002450  0100               	movlb	0	; () banked
 15122  002452  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15123  002454  0100               	movlb	0	; () banked
 15124  002456  6FAD               	movwf	PlatformTest@res& (0+255),b
 15125  002458  0100               	movlb	0	; () banked
 15126  00245A  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15127  00245C  0100               	movlb	0	; () banked
 15128  00245E  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15129                           
 15130                           ; BSR set to: 0
 15131                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15132  002460  0100               	movlb	0	; () banked
 15133  002462  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15134  002464  D00A               	goto	u7970
 15135  002466  0E21               	movlw	33
 15136  002468  0100               	movlb	0	; () banked
 15137  00246A  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15138  00246C  0E03               	movlw	3
 15139  00246E  0100               	movlb	0	; () banked
 15140  002470  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15141  002472  A0D8               	btfss	status,0,c
 15142  002474  D002               	goto	u7970
 15143  002476  0E01               	movlw	1
 15144  002478  D001               	goto	u7980
 15145  00247A                     u7970:
 15146  00247A  0E00               	movlw	0
 15147  00247C                     u7980:
 15148  00247C  0100               	movlb	0	; () banked
 15149  00247E  6FE6               	movwf	_IR_signal& (0+255),b
 15150  002480  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 15151                           
 15152                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15153  002482  0E01               	movlw	1
 15154  002484  ECCB  F02D         	call	_lcdInst
 15155  002488  0E68               	movlw	104
 15156  00248A  0100               	movlb	0	; () banked
 15157  00248C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15158  00248E  0EE4               	movlw	228
 15159  002490                     u11097:
 15160  002490  2EE8               	decfsz	wreg,f,c
 15161  002492  D7FE               	bra	u11097
 15162  002494  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15163  002496  D7FC               	bra	u11097
 15164  002498  F000               	nop	
 15165  00249A  0E80               	movlw	128
 15166  00249C  ECCB  F02D         	call	_lcdInst
 15167                           
 15168                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15169  0024A0  0E0C               	movlw	low STR_115
 15170  0024A2  0100               	movlb	0	; () banked
 15171  0024A4  6F8E               	movwf	printf@f& (0+255),b
 15172  0024A6  0EFC               	movlw	high STR_115
 15173  0024A8  0100               	movlb	0	; () banked
 15174  0024AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 15175  0024AC  ECC1  F00B         	call	_printf	;wreg free
 15176                           
 15177                           ;Test.c: 455: lcdInst(0b11000000);;
 15178  0024B0  0EC0               	movlw	192
 15179  0024B2  ECCB  F02D         	call	_lcdInst
 15180                           
 15181                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15182  0024B6  0EFB               	movlw	low STR_117
 15183  0024B8  0100               	movlb	0	; () banked
 15184  0024BA  6F8E               	movwf	printf@f& (0+255),b
 15185  0024BC  0EFB               	movlw	high STR_117
 15186  0024BE  0100               	movlb	0	; () banked
 15187  0024C0  6F8F               	movwf	(printf@f+1)& (0+255),b
 15188  0024C2  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15189  0024C6  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15190  0024CA  ECC1  F00B         	call	_printf	;wreg free
 15191                           
 15192                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15193  0024CE  0E05               	movlw	5
 15194  0024D0  0100               	movlb	0	; () banked
 15195  0024D2  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15196  0024D4  0E0F               	movlw	15
 15197  0024D6  0100               	movlb	0	; () banked
 15198  0024D8  6FAB               	movwf	??_PlatformTest& (0+255),b
 15199  0024DA  0EF1               	movlw	241
 15200  0024DC                     u11107:
 15201  0024DC  2EE8               	decfsz	wreg,f,c
 15202  0024DE  D7FE               	bra	u11107
 15203  0024E0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15204  0024E2  D7FC               	bra	u11107
 15205  0024E4  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15206  0024E6  D7FA               	bra	u11107
 15207  0024E8                     l8884:
 15208  0024E8  B281               	btfsc	3969,1,c	;volatile
 15209  0024EA  D059               	goto	l8904
 15210  0024EC  D7A5               	goto	l8866
 15211  0024EE                     l8886:
 15212                           
 15213                           ;Test.c: 462: readADC(0);
 15214  0024EE  0E00               	movlw	0
 15215  0024F0  ECC1  F02C         	call	_readADC
 15216                           
 15217                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15218  0024F4  50C3               	movf	4035,w,c	;volatile
 15219  0024F6  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15220  0024FA  0100               	movlb	0	; () banked
 15221  0024FC  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15222  0024FE  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15223  002502  0100               	movlb	0	; () banked
 15224  002504  6BAB               	clrf	??_PlatformTest& (0+255),b
 15225  002506  0100               	movlb	0	; () banked
 15226  002508  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15227  00250A  0100               	movlb	0	; () banked
 15228  00250C  6FAF               	movwf	PlatformTest@res_1816& (0+255),b
 15229  00250E  0100               	movlb	0	; () banked
 15230  002510  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15231  002512  0100               	movlb	0	; () banked
 15232  002514  6FB0               	movwf	(PlatformTest@res_1816+1)& (0+255),b
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15236  002516  0100               	movlb	0	; () banked
 15237  002518  BFB0               	btfsc	(PlatformTest@res_1816+1)& (0+255),7,b
 15238  00251A  D00A               	goto	u8000
 15239  00251C  0E21               	movlw	33
 15240  00251E  0100               	movlb	0	; () banked
 15241  002520  5DAF               	subwf	PlatformTest@res_1816& (0+255),w,b
 15242  002522  0E03               	movlw	3
 15243  002524  0100               	movlb	0	; () banked
 15244  002526  59B0               	subwfb	(PlatformTest@res_1816+1)& (0+255),w,b
 15245  002528  A0D8               	btfss	status,0,c
 15246  00252A  D002               	goto	u8000
 15247  00252C  0E01               	movlw	1
 15248  00252E  D001               	goto	u8010
 15249  002530                     u8000:
 15250  002530  0E00               	movlw	0
 15251  002532                     u8010:
 15252  002532  0100               	movlb	0	; () banked
 15253  002534  6FE6               	movwf	_IR_signal& (0+255),b
 15254  002536  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 15255                           
 15256                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15257  002538  0E01               	movlw	1
 15258  00253A  ECCB  F02D         	call	_lcdInst
 15259  00253E  0E68               	movlw	104
 15260  002540  0100               	movlb	0	; () banked
 15261  002542  6FAB               	movwf	??_PlatformTest& (0+255),b
 15262  002544  0EE4               	movlw	228
 15263  002546                     u11117:
 15264  002546  2EE8               	decfsz	wreg,f,c
 15265  002548  D7FE               	bra	u11117
 15266  00254A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15267  00254C  D7FC               	bra	u11117
 15268  00254E  F000               	nop	
 15269  002550  0E80               	movlw	128
 15270  002552  ECCB  F02D         	call	_lcdInst
 15271                           
 15272                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15273  002556  0E0C               	movlw	low STR_115
 15274  002558  0100               	movlb	0	; () banked
 15275  00255A  6F8E               	movwf	printf@f& (0+255),b
 15276  00255C  0EFC               	movlw	high STR_115
 15277  00255E  0100               	movlb	0	; () banked
 15278  002560  6F8F               	movwf	(printf@f+1)& (0+255),b
 15279  002562  ECC1  F00B         	call	_printf	;wreg free
 15280                           
 15281                           ;Test.c: 468: lcdInst(0b11000000);;
 15282  002566  0EC0               	movlw	192
 15283  002568  ECCB  F02D         	call	_lcdInst
 15284                           
 15285                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15286  00256C  0EFB               	movlw	low STR_117
 15287  00256E  0100               	movlb	0	; () banked
 15288  002570  6F8E               	movwf	printf@f& (0+255),b
 15289  002572  0EFB               	movlw	high STR_117
 15290  002574  0100               	movlb	0	; () banked
 15291  002576  6F8F               	movwf	(printf@f+1)& (0+255),b
 15292  002578  C0AF  F090         	movff	PlatformTest@res_1816,?_printf+2
 15293  00257C  C0B0  F091         	movff	PlatformTest@res_1816+1,?_printf+3
 15294  002580  ECC1  F00B         	call	_printf	;wreg free
 15295                           
 15296                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15297  002584  0E05               	movlw	5
 15298  002586  0100               	movlb	0	; () banked
 15299  002588  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15300  00258A  0E0F               	movlw	15
 15301  00258C  0100               	movlb	0	; () banked
 15302  00258E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15303  002590  0EF1               	movlw	241
 15304  002592                     u11127:
 15305  002592  2EE8               	decfsz	wreg,f,c
 15306  002594  D7FE               	bra	u11127
 15307  002596  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15308  002598  D7FC               	bra	u11127
 15309  00259A  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15310  00259C  D7FA               	bra	u11127
 15311  00259E                     l8904:
 15312  00259E  A281               	btfss	3969,1,c	;volatile
 15313  0025A0  D7A6               	goto	l8886
 15314                           
 15315                           ;Test.c: 471: }
 15316                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15317  0025A2  3881               	swapf	3969,w,c	;volatile
 15318  0025A4  0B0F               	andlw	15
 15319  0025A6  0A0F               	xorlw	15
 15320  0025A8  B4D8               	btfsc	status,2,c
 15321  0025AA  D0DE               	goto	l1364
 15322                           
 15323                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15324                           
 15325                           ;Test.c: 474: }
 15326                           
 15327                           ;Test.c: 473: break;
 15328  0025AC  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15329  0025B0  0100               	movlb	0	; () banked
 15330  0025B2  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15331  0025B4  0E0F               	movlw	15
 15332  0025B6  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15333  0025B8  A4D8               	btfss	status,2,c
 15334  0025BA  D012               	goto	l8916
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15338  0025BC  B48A               	btfsc	3978,2,c	;volatile
 15339  0025BE  D004               	goto	u8050
 15340  0025C0  0100               	movlb	0	; () banked
 15341  0025C2  6BAB               	clrf	??_PlatformTest& (0+255),b
 15342  0025C4  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15343  0025C6  D002               	goto	u8068
 15344  0025C8                     u8050:
 15345  0025C8  0100               	movlb	0	; () banked
 15346  0025CA  6BAB               	clrf	??_PlatformTest& (0+255),b
 15347  0025CC                     u8068:
 15348  0025CC  0100               	movlb	0	; () banked
 15349  0025CE  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15350  0025D0  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15351  0025D2  508A               	movf	3978,w,c	;volatile
 15352  0025D4  0100               	movlb	0	; () banked
 15353  0025D6  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15354  0025D8  0BFB               	andlw	-5
 15355  0025DA  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15356  0025DC  6E8A               	movwf	3978,c	;volatile
 15357                           
 15358                           ;Test.c: 477: }
 15359  0025DE  D0C1               	goto	l1387
 15360  0025E0                     l8916:
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15364  0025E0  3881               	swapf	3969,w,c	;volatile
 15365  0025E2  0B0F               	andlw	15
 15366  0025E4  0A03               	xorlw	3
 15367  0025E6  A4D8               	btfss	status,2,c
 15368  0025E8  D020               	goto	l8928
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;Test.c: 479: if(on){
 15372  0025EA  0100               	movlb	0	; () banked
 15373  0025EC  51B9               	movf	PlatformTest@on& (0+255),w,b
 15374  0025EE  0100               	movlb	0	; () banked
 15375  0025F0  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15376  0025F2  B4D8               	btfsc	status,2,c
 15377  0025F4  D010               	goto	l8924
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;Test.c: 480: f_arm_position = 1;
 15381  0025F6  0E00               	movlw	0
 15382  0025F8  0100               	movlb	0	; () banked
 15383  0025FA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15384  0025FC  0E01               	movlw	1
 15385  0025FE  D00F               	goto	L17
 15386  002600                     l8922:
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;Test.c: 481: on = !on;
 15390  002600  0100               	movlb	0	; () banked
 15391  002602  51B9               	movf	PlatformTest@on& (0+255),w,b
 15392  002604  0100               	movlb	0	; () banked
 15393  002606  11BA               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15394  002608  A4D8               	btfss	status,2,c
 15395  00260A  D00D               	goto	u8110
 15396  00260C  D00A               	goto	u8111
 15397  00260E                     u8100:
 15398  00260E  0100               	movlb	0	; () banked
 15399  002610  6FB9               	movwf	PlatformTest@on& (0+255),b
 15400  002612  6BBA               	clrf	(PlatformTest@on+1)& (0+255),b
 15401                           
 15402                           ;Test.c: 482: }
 15403  002614  D0A6               	goto	l1387
 15404  002616                     l8924:
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;Test.c: 483: else{
 15408                           ;Test.c: 484: f_arm_position = 0;
 15409  002616  0E00               	movlw	0
 15410  002618  0100               	movlb	0	; () banked
 15411  00261A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15412  00261C  0E00               	movlw	0
 15413  00261E                     L17:
 15414  00261E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 15415  002620  D7EF               	goto	l8922
 15416  002622                     u8111:
 15417  002622  0E01               	movlw	1
 15418  002624  D7F4               	goto	u8100
 15419  002626                     u8110:
 15420  002626  0E00               	movlw	0
 15421  002628  D7F2               	goto	u8100
 15422  00262A                     l8928:
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;Test.c: 488: else if(PORTB >> 4 == 0b0100){
 15426  00262A  3881               	swapf	3969,w,c	;volatile
 15427  00262C  0B0F               	andlw	15
 15428  00262E  0A04               	xorlw	4
 15429  002630  A4D8               	btfss	status,2,c
 15430  002632  D01D               	goto	l8942
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 15434  002634  0E00               	movlw	0
 15435  002636  0100               	movlb	0	; () banked
 15436  002638  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15437  00263A  0E00               	movlw	0
 15438  00263C  6FB1               	movwf	PlatformTest@i& (0+255),b
 15439  00263E                     l8932:
 15440                           
 15441                           ; BSR set to: 0
 15442  00263E  0100               	movlb	0	; () banked
 15443  002640  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15444  002642  D008               	goto	l1373
 15445  002644  0EB8               	movlw	184
 15446  002646  0100               	movlb	0	; () banked
 15447  002648  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15448  00264A  0E0B               	movlw	11
 15449  00264C  0100               	movlb	0	; () banked
 15450  00264E  59B2               	subwfb	(PlatformTest@i+1)& (0+255),w,b
 15451  002650  B0D8               	btfsc	status,0,c
 15452  002652  D087               	goto	l1387
 15453  002654                     l1373:
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15457  002654  8889               	bsf	3977,4,c	;volatile
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;Test.c: 492: _delay((unsigned long)((75)*(32000000/4000000.0)));
 15461  002656  0EC8               	movlw	200
 15462  002658                     u11137:
 15463  002658  2EE8               	decfsz	wreg,f,c
 15464  00265A  D7FE               	bra	u11137
 15465                           
 15466                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15467  00265C  9889               	bcf	3977,4,c	;volatile
 15468                           
 15469                           ;Test.c: 494: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15470  00265E  0E42               	movlw	66
 15471  002660                     u11147:
 15472  002660  2EE8               	decfsz	wreg,f,c
 15473  002662  D7FE               	bra	u11147
 15474  002664  D000               	nop2	
 15475  002666  0100               	movlb	0	; () banked
 15476  002668  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15477  00266A  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15478  00266C  D7E8               	goto	l8932
 15479  00266E                     l8942:
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;Test.c: 497: else if(PORTB >> 4 == 0b0101){
 15483  00266E  3881               	swapf	3969,w,c	;volatile
 15484  002670  0B0F               	andlw	15
 15485  002672  0A05               	xorlw	5
 15486  002674  A4D8               	btfss	status,2,c
 15487  002676  D027               	goto	l8956
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15491  002678  0E00               	movlw	0
 15492  00267A  0100               	movlb	0	; () banked
 15493  00267C  6FB4               	movwf	(PlatformTest@i_1820+1)& (0+255),b
 15494  00267E  0E00               	movlw	0
 15495  002680  6FB3               	movwf	PlatformTest@i_1820& (0+255),b
 15496  002682                     l8946:
 15497                           
 15498                           ; BSR set to: 0
 15499  002682  0100               	movlb	0	; () banked
 15500  002684  BFB4               	btfsc	(PlatformTest@i_1820+1)& (0+255),7,b
 15501  002686  D008               	goto	l1377
 15502  002688  0100               	movlb	0	; () banked
 15503  00268A  51B4               	movf	(PlatformTest@i_1820+1)& (0+255),w,b
 15504  00268C  E16A               	bnz	l1387
 15505  00268E  0E1E               	movlw	30
 15506  002690  0100               	movlb	0	; () banked
 15507  002692  5DB3               	subwf	PlatformTest@i_1820& (0+255),w,b
 15508  002694  B0D8               	btfsc	status,0,c
 15509  002696  D065               	goto	l1387
 15510  002698                     l1377:
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15514  002698  8889               	bsf	3977,4,c	;volatile
 15515                           
 15516                           ; BSR set to: 0
 15517                           ;Test.c: 501: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15518  00269A  0E4E               	movlw	78
 15519  00269C  0100               	movlb	0	; () banked
 15520  00269E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15521  0026A0  0EEB               	movlw	235
 15522  0026A2                     u11157:
 15523  0026A2  2EE8               	decfsz	wreg,f,c
 15524  0026A4  D7FE               	bra	u11157
 15525  0026A6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15526  0026A8  D7FC               	bra	u11157
 15527                           
 15528                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15529  0026AA  9889               	bcf	3977,4,c	;volatile
 15530                           
 15531                           ;Test.c: 503: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15532  0026AC  0E1A               	movlw	26
 15533  0026AE  0100               	movlb	0	; () banked
 15534  0026B0  6FAB               	movwf	??_PlatformTest& (0+255),b
 15535  0026B2  0EF8               	movlw	248
 15536  0026B4                     u11167:
 15537  0026B4  2EE8               	decfsz	wreg,f,c
 15538  0026B6  D7FE               	bra	u11167
 15539  0026B8  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15540  0026BA  D7FC               	bra	u11167
 15541  0026BC  F000               	nop	
 15542  0026BE  0100               	movlb	0	; () banked
 15543  0026C0  4BB3               	infsnz	PlatformTest@i_1820& (0+255),f,b
 15544  0026C2  2BB4               	incf	(PlatformTest@i_1820+1)& (0+255),f,b
 15545  0026C4  D7DE               	goto	l8946
 15546  0026C6                     l8956:
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;Test.c: 506: else if (PORTB >> 4 == 0b0110){
 15550  0026C6  3881               	swapf	3969,w,c	;volatile
 15551  0026C8  0B0F               	andlw	15
 15552  0026CA  0A06               	xorlw	6
 15553  0026CC  A4D8               	btfss	status,2,c
 15554  0026CE  D027               	goto	l8970
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;Test.c: 508: for(int i = 0; i<30; i++){
 15558  0026D0  0E00               	movlw	0
 15559  0026D2  0100               	movlb	0	; () banked
 15560  0026D4  6FB6               	movwf	(PlatformTest@i_1821+1)& (0+255),b
 15561  0026D6  0E00               	movlw	0
 15562  0026D8  6FB5               	movwf	PlatformTest@i_1821& (0+255),b
 15563  0026DA                     l8960:
 15564                           
 15565                           ; BSR set to: 0
 15566  0026DA  0100               	movlb	0	; () banked
 15567  0026DC  BFB6               	btfsc	(PlatformTest@i_1821+1)& (0+255),7,b
 15568  0026DE  D008               	goto	l1381
 15569  0026E0  0100               	movlb	0	; () banked
 15570  0026E2  51B6               	movf	(PlatformTest@i_1821+1)& (0+255),w,b
 15571  0026E4  E13E               	bnz	l1387
 15572  0026E6  0E1E               	movlw	30
 15573  0026E8  0100               	movlb	0	; () banked
 15574  0026EA  5DB5               	subwf	PlatformTest@i_1821& (0+255),w,b
 15575  0026EC  B0D8               	btfsc	status,0,c
 15576  0026EE  D039               	goto	l1387
 15577  0026F0                     l1381:
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;Test.c: 509: LATAbits.LATA4 = 1;
 15581  0026F0  8889               	bsf	3977,4,c	;volatile
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;Test.c: 510: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15585  0026F2  0E3D               	movlw	61
 15586  0026F4  0100               	movlb	0	; () banked
 15587  0026F6  6FAB               	movwf	??_PlatformTest& (0+255),b
 15588  0026F8  0E41               	movlw	65
 15589  0026FA                     u11177:
 15590  0026FA  2EE8               	decfsz	wreg,f,c
 15591  0026FC  D7FE               	bra	u11177
 15592  0026FE  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15593  002700  D7FC               	bra	u11177
 15594                           
 15595                           ;Test.c: 511: LATAbits.LATA4 = 0;
 15596  002702  9889               	bcf	3977,4,c	;volatile
 15597                           
 15598                           ;Test.c: 512: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15599  002704  0E2C               	movlw	44
 15600  002706  0100               	movlb	0	; () banked
 15601  002708  6FAB               	movwf	??_PlatformTest& (0+255),b
 15602  00270A  0EA1               	movlw	161
 15603  00270C                     u11187:
 15604  00270C  2EE8               	decfsz	wreg,f,c
 15605  00270E  D7FE               	bra	u11187
 15606  002710  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15607  002712  D7FC               	bra	u11187
 15608  002714  D000               	nop2	
 15609  002716  0100               	movlb	0	; () banked
 15610  002718  4BB5               	infsnz	PlatformTest@i_1821& (0+255),f,b
 15611  00271A  2BB6               	incf	(PlatformTest@i_1821+1)& (0+255),f,b
 15612  00271C  D7DE               	goto	l8960
 15613  00271E                     l8970:
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;Test.c: 515: else if (PORTB >> 4 == 0b1000){
 15617  00271E  3881               	swapf	3969,w,c	;volatile
 15618  002720  0B0F               	andlw	15
 15619  002722  0A08               	xorlw	8
 15620  002724  A4D8               	btfss	status,2,c
 15621  002726  D01D               	goto	l1387
 15622                           
 15623                           ; BSR set to: 0
 15624                           ;Test.c: 517: for(int i = 0; i<3000; i++){
 15625  002728  0E00               	movlw	0
 15626  00272A  0100               	movlb	0	; () banked
 15627  00272C  6FB8               	movwf	(PlatformTest@i_1822+1)& (0+255),b
 15628  00272E  0E00               	movlw	0
 15629  002730  6FB7               	movwf	PlatformTest@i_1822& (0+255),b
 15630  002732                     l8974:
 15631                           
 15632                           ; BSR set to: 0
 15633  002732  0100               	movlb	0	; () banked
 15634  002734  BFB8               	btfsc	(PlatformTest@i_1822+1)& (0+255),7,b
 15635  002736  D008               	goto	l1385
 15636  002738  0EB8               	movlw	184
 15637  00273A  0100               	movlb	0	; () banked
 15638  00273C  5DB7               	subwf	PlatformTest@i_1822& (0+255),w,b
 15639  00273E  0E0B               	movlw	11
 15640  002740  0100               	movlb	0	; () banked
 15641  002742  59B8               	subwfb	(PlatformTest@i_1822+1)& (0+255),w,b
 15642  002744  B0D8               	btfsc	status,0,c
 15643  002746  D00D               	goto	l1387
 15644  002748                     l1385:
 15645                           
 15646                           ; BSR set to: 0
 15647                           ;Test.c: 518: LATAbits.LATA4 = 1;
 15648  002748  8889               	bsf	3977,4,c	;volatile
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;Test.c: 519: _delay((unsigned long)((58)*(32000000/4000000.0)));
 15652  00274A  0E9A               	movlw	154
 15653  00274C                     u11197:
 15654  00274C  2EE8               	decfsz	wreg,f,c
 15655  00274E  D7FE               	bra	u11197
 15656  002750  D000               	nop2	
 15657                           
 15658                           ;Test.c: 520: LATAbits.LATA4 = 0;
 15659  002752  9889               	bcf	3977,4,c	;volatile
 15660                           
 15661                           ;Test.c: 521: _delay((unsigned long)((42)*(32000000/4000000.0)));
 15662  002754  0E70               	movlw	112
 15663  002756                     u11207:
 15664  002756  2EE8               	decfsz	wreg,f,c
 15665  002758  D7FE               	bra	u11207
 15666  00275A  0100               	movlb	0	; () banked
 15667  00275C  4BB7               	infsnz	PlatformTest@i_1822& (0+255),f,b
 15668  00275E  2BB8               	incf	(PlatformTest@i_1822+1)& (0+255),f,b
 15669  002760  D7E8               	goto	l8974
 15670  002762                     l1387:
 15671  002762  A281               	btfss	3969,1,c	;volatile
 15672  002764  D71C               	goto	l8904
 15673  002766  D7FD               	goto	l1387
 15674  002768                     l1364:
 15675                           
 15676                           ;Test.c: 526: }
 15677                           ;Test.c: 528: LATCbits.LATC5 = 0;
 15678  002768  9A8B               	bcf	3979,5,c	;volatile
 15679                           
 15680                           ;Test.c: 529: stopSignals();
 15681  00276A  EC7D  F02D         	call	_stopSignals	;wreg free
 15682                           
 15683                           ;Test.c: 530: machine_state = Testing_state;
 15684  00276E  0E03               	movlw	3
 15685  002770  0100               	movlb	0	; () banked
 15686  002772  6FFC               	movwf	_machine_state& (0+255),b
 15687                           
 15688                           ; BSR set to: 0
 15689  002774  0012               	return		;funcret
 15690  002776                     __end_of_PlatformTest:
 15691                           	opt stack 0
 15692                           tblptru	equ	0xFF8
 15693                           tblptrh	equ	0xFF7
 15694                           tblptrl	equ	0xFF6
 15695                           tablat	equ	0xFF5
 15696                           prodh	equ	0xFF4
 15697                           prodl	equ	0xFF3
 15698                           intcon	equ	0xFF2
 15699                           intcon2	equ	0xFF1
 15700                           intcon3	equ	0xFF0
 15701                           postinc0	equ	0xFEE
 15702                           wreg	equ	0xFE8
 15703                           postdec1	equ	0xFE5
 15704                           fsr1l	equ	0xFE1
 15705                           indf2	equ	0xFDF
 15706                           postinc2	equ	0xFDE
 15707                           postdec2	equ	0xFDD
 15708                           fsr2h	equ	0xFDA
 15709                           fsr2l	equ	0xFD9
 15710                           status	equ	0xFD8
 15711                           
 15712 ;; *************** function _readADC *****************
 15713 ;; Defined at:
 15714 ;;		line 15 in file "ADCFunctionality.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  channel         1    wreg     unsigned char 
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  channel         1    1[BANK0 ] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;                  1    wreg      void 
 15721 ;; Registers used:
 15722 ;;		wreg, status,2, status,0, cstack
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15732 ;;Total ram usage:        2 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    7
 15735 ;; This function calls:
 15736 ;;		Nothing
 15737 ;; This function is called by:
 15738 ;;		_readIR
 15739 ;;		_readMAG
 15740 ;;		_sensorTest
 15741 ;;		_PlatformTest
 15742 ;; This function uses a non-reentrant model
 15743 ;;
 15744                           
 15745                           	psect	text48
 15746  005982                     __ptext48:
 15747                           	opt stack 0
 15748  005982                     _readADC:
 15749                           	opt stack 20
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;incstack = 0
 15753                           ;readADC@channel stored from wreg
 15754  005982  0100               	movlb	0	; () banked
 15755  005984  6F81               	movwf	readADC@channel& (0+255),b
 15756                           
 15757                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 15758  005986  0100               	movlb	0	; () banked
 15759  005988  4581               	rlncf	readADC@channel& (0+255),w,b
 15760  00598A  46E8               	rlncf	wreg,f,c
 15761  00598C  0BFC               	andlw	252
 15762  00598E  6EC2               	movwf	4034,c	;volatile
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 15766  005990  80C2               	bsf	4034,0,c	;volatile
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 15770  005992  82C2               	bsf	4034,1,c	;volatile
 15771                           
 15772                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 15773  005994  D009               	goto	l6492
 15774  005996                     l6490:
 15775  005996  0E34               	movlw	52
 15776  005998  0100               	movlb	0	; () banked
 15777  00599A  6F80               	movwf	??_readADC& (0+255),b
 15778  00599C  0EF1               	movlw	241
 15779  00599E                     u11217:
 15780  00599E  2EE8               	decfsz	wreg,f,c
 15781  0059A0  D7FE               	bra	u11217
 15782  0059A2  2F80               	decfsz	??_readADC& (0+255),f,b
 15783  0059A4  D7FC               	bra	u11217
 15784  0059A6  D000               	nop2	
 15785  0059A8                     l6492:
 15786  0059A8  A2C2               	btfss	4034,1,c	;volatile
 15787  0059AA  0012               	return	
 15788  0059AC  D7F4               	goto	l6490
 15789  0059AE                     __end_of_readADC:
 15790                           	opt stack 0
 15791                           tblptru	equ	0xFF8
 15792                           tblptrh	equ	0xFF7
 15793                           tblptrl	equ	0xFF6
 15794                           tablat	equ	0xFF5
 15795                           prodh	equ	0xFF4
 15796                           prodl	equ	0xFF3
 15797                           intcon	equ	0xFF2
 15798                           intcon2	equ	0xFF1
 15799                           intcon3	equ	0xFF0
 15800                           postinc0	equ	0xFEE
 15801                           wreg	equ	0xFE8
 15802                           postdec1	equ	0xFE5
 15803                           fsr1l	equ	0xFE1
 15804                           indf2	equ	0xFDF
 15805                           postinc2	equ	0xFDE
 15806                           postdec2	equ	0xFDD
 15807                           fsr2h	equ	0xFDA
 15808                           fsr2l	equ	0xFD9
 15809                           status	equ	0xFD8
 15810                           
 15811 ;; *************** function _BothServos *****************
 15812 ;; Defined at:
 15813 ;;		line 351 in file "Test.c"
 15814 ;; Parameters:    Size  Location     Type
 15815 ;;		None
 15816 ;; Auto vars:     Size  Location     Type
 15817 ;;		None
 15818 ;; Return value:  Size  Location     Type
 15819 ;;                  1    wreg      void 
 15820 ;; Registers used:
 15821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15822 ;; Tracked objects:
 15823 ;;		On entry : 0/0
 15824 ;;		On exit  : 0/0
 15825 ;;		Unchanged: 0/0
 15826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;Total ram usage:        2 bytes
 15832 ;; Hardware stack levels used:    1
 15833 ;; Hardware stack levels required when called:   10
 15834 ;; This function calls:
 15835 ;;		_initServos
 15836 ;;		_lcdInst
 15837 ;;		_printf
 15838 ;;		_stopSignals
 15839 ;;		_updateServoPosition
 15840 ;; This function is called by:
 15841 ;;		_Test
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           	psect	text49
 15846  001FEA                     __ptext49:
 15847                           	opt stack 0
 15848  001FEA                     _BothServos:
 15849                           	opt stack 19
 15850                           
 15851                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15852                           
 15853                           ;incstack = 0
 15854  001FEA  0E01               	movlw	1
 15855  001FEC  ECCB  F02D         	call	_lcdInst
 15856  001FF0  0E68               	movlw	104
 15857  001FF2  0100               	movlb	0	; () banked
 15858  001FF4  6FAB               	movwf	??_BothServos& (0+255),b
 15859  001FF6  0EE4               	movlw	228
 15860  001FF8                     u11227:
 15861  001FF8  2EE8               	decfsz	wreg,f,c
 15862  001FFA  D7FE               	bra	u11227
 15863  001FFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15864  001FFE  D7FC               	bra	u11227
 15865  002000  F000               	nop	
 15866  002002  0E80               	movlw	128
 15867  002004  ECCB  F02D         	call	_lcdInst
 15868                           
 15869                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15870  002008  0EB6               	movlw	low STR_112
 15871  00200A  0100               	movlb	0	; () banked
 15872  00200C  6F8E               	movwf	printf@f& (0+255),b
 15873  00200E  0EFC               	movlw	high STR_112
 15874  002010  0100               	movlb	0	; () banked
 15875  002012  6F8F               	movwf	(printf@f+1)& (0+255),b
 15876  002014  ECC1  F00B         	call	_printf	;wreg free
 15877                           
 15878                           ;Test.c: 354: TMR1ON = 1;
 15879  002018  80CD               	bsf	4045,0,c	;volatile
 15880                           
 15881                           ;Test.c: 355: TMR3ON = 1;
 15882  00201A  80B1               	bsf	4017,0,c	;volatile
 15883                           
 15884                           ;Test.c: 356: machine_state = Sorting_state;
 15885  00201C  0E01               	movlw	1
 15886  00201E  0100               	movlb	0	; () banked
 15887  002020  6FFC               	movwf	_machine_state& (0+255),b
 15888                           
 15889                           ; BSR set to: 0
 15890                           ;Test.c: 357: was_low_1 = 0;
 15891  002022  0E00               	movlw	0
 15892  002024  6E78               	movwf	_was_low_1+1,c	;volatile
 15893  002026  0E00               	movlw	0
 15894  002028  6E77               	movwf	_was_low_1,c	;volatile
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;Test.c: 358: was_low_3 = 0;
 15898  00202A  0E00               	movlw	0
 15899  00202C  6E7C               	movwf	_was_low_3+1,c	;volatile
 15900  00202E  0E00               	movlw	0
 15901  002030  6E7B               	movwf	_was_low_3,c	;volatile
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;Test.c: 364: initServos();
 15905  002032  EC5A  F027         	call	_initServos	;wreg free
 15906                           
 15907                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15908  002036  0E3D               	movlw	61
 15909  002038  0100               	movlb	0	; () banked
 15910  00203A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15911  00203C  0EE1               	movlw	225
 15912  00203E  0100               	movlb	0	; () banked
 15913  002040  6FAB               	movwf	??_BothServos& (0+255),b
 15914  002042  0E3F               	movlw	63
 15915  002044                     u11237:
 15916  002044  2EE8               	decfsz	wreg,f,c
 15917  002046  D7FE               	bra	u11237
 15918  002048  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15919  00204A  D7FC               	bra	u11237
 15920  00204C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15921  00204E  D7FA               	bra	u11237
 15922  002050  D000               	nop2	
 15923                           
 15924                           ;Test.c: 367: updateServoPosition(500, 1);
 15925  002052  0E01               	movlw	1
 15926  002054  0100               	movlb	0	; () banked
 15927  002056  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15928  002058  0EF4               	movlw	244
 15929  00205A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15930  00205C  0E00               	movlw	0
 15931  00205E  0100               	movlb	0	; () banked
 15932  002060  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15933  002062  0E01               	movlw	1
 15934  002064  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15935  002066  ECD5  F026         	call	_updateServoPosition	;wreg free
 15936                           
 15937                           ;Test.c: 368: updateServoPosition(1050, 3);
 15938  00206A  0E04               	movlw	4
 15939  00206C  0100               	movlb	0	; () banked
 15940  00206E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15941  002070  0E1A               	movlw	26
 15942  002072  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15943  002074  0E00               	movlw	0
 15944  002076  0100               	movlb	0	; () banked
 15945  002078  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15946  00207A  0E03               	movlw	3
 15947  00207C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15948  00207E  ECD5  F026         	call	_updateServoPosition	;wreg free
 15949                           
 15950                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15951  002082  0E1F               	movlw	31
 15952  002084  0100               	movlb	0	; () banked
 15953  002086  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15954  002088  0E71               	movlw	113
 15955  00208A  0100               	movlb	0	; () banked
 15956  00208C  6FAB               	movwf	??_BothServos& (0+255),b
 15957  00208E  0E1E               	movlw	30
 15958  002090                     u11247:
 15959  002090  2EE8               	decfsz	wreg,f,c
 15960  002092  D7FE               	bra	u11247
 15961  002094  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15962  002096  D7FC               	bra	u11247
 15963  002098  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15964  00209A  D7FA               	bra	u11247
 15965  00209C  F000               	nop	
 15966                           
 15967                           ;Test.c: 370: updateServoPosition(1260, 3);
 15968  00209E  0E04               	movlw	4
 15969  0020A0  0100               	movlb	0	; () banked
 15970  0020A2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15971  0020A4  0EEC               	movlw	236
 15972  0020A6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15973  0020A8  0E00               	movlw	0
 15974  0020AA  0100               	movlb	0	; () banked
 15975  0020AC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15976  0020AE  0E03               	movlw	3
 15977  0020B0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15978  0020B2  ECD5  F026         	call	_updateServoPosition	;wreg free
 15979                           
 15980                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15981  0020B6  0E1D               	movlw	29
 15982  0020B8  0100               	movlb	0	; () banked
 15983  0020BA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15984  0020BC  0E69               	movlw	105
 15985  0020BE  0100               	movlb	0	; () banked
 15986  0020C0  6FAB               	movwf	??_BothServos& (0+255),b
 15987  0020C2  0EA5               	movlw	165
 15988  0020C4                     u11257:
 15989  0020C4  2EE8               	decfsz	wreg,f,c
 15990  0020C6  D7FE               	bra	u11257
 15991  0020C8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15992  0020CA  D7FC               	bra	u11257
 15993  0020CC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15994  0020CE  D7FA               	bra	u11257
 15995                           
 15996                           ;Test.c: 372: updateServoPosition(1050, 3);
 15997  0020D0  0E04               	movlw	4
 15998  0020D2  0100               	movlb	0	; () banked
 15999  0020D4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16000  0020D6  0E1A               	movlw	26
 16001  0020D8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16002  0020DA  0E00               	movlw	0
 16003  0020DC  0100               	movlb	0	; () banked
 16004  0020DE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16005  0020E0  0E03               	movlw	3
 16006  0020E2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16007  0020E4  ECD5  F026         	call	_updateServoPosition	;wreg free
 16008                           
 16009                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 16010  0020E8  0E1F               	movlw	31
 16011  0020EA  0100               	movlb	0	; () banked
 16012  0020EC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16013  0020EE  0E71               	movlw	113
 16014  0020F0  0100               	movlb	0	; () banked
 16015  0020F2  6FAB               	movwf	??_BothServos& (0+255),b
 16016  0020F4  0E1E               	movlw	30
 16017  0020F6                     u11267:
 16018  0020F6  2EE8               	decfsz	wreg,f,c
 16019  0020F8  D7FE               	bra	u11267
 16020  0020FA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16021  0020FC  D7FC               	bra	u11267
 16022  0020FE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16023  002100  D7FA               	bra	u11267
 16024  002102  F000               	nop	
 16025                           
 16026                           ;Test.c: 375: updateServoPosition(850, 1);
 16027  002104  0E03               	movlw	3
 16028  002106  0100               	movlb	0	; () banked
 16029  002108  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16030  00210A  0E52               	movlw	82
 16031  00210C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16032  00210E  0E00               	movlw	0
 16033  002110  0100               	movlb	0	; () banked
 16034  002112  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16035  002114  0E01               	movlw	1
 16036  002116  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16037  002118  ECD5  F026         	call	_updateServoPosition	;wreg free
 16038                           
 16039                           ;Test.c: 376: updateServoPosition(1050, 3);
 16040  00211C  0E04               	movlw	4
 16041  00211E  0100               	movlb	0	; () banked
 16042  002120  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16043  002122  0E1A               	movlw	26
 16044  002124  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16045  002126  0E00               	movlw	0
 16046  002128  0100               	movlb	0	; () banked
 16047  00212A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16048  00212C  0E03               	movlw	3
 16049  00212E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16050  002130  ECD5  F026         	call	_updateServoPosition	;wreg free
 16051                           
 16052                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 16053  002134  0E1F               	movlw	31
 16054  002136  0100               	movlb	0	; () banked
 16055  002138  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16056  00213A  0E71               	movlw	113
 16057  00213C  0100               	movlb	0	; () banked
 16058  00213E  6FAB               	movwf	??_BothServos& (0+255),b
 16059  002140  0E1E               	movlw	30
 16060  002142                     u11277:
 16061  002142  2EE8               	decfsz	wreg,f,c
 16062  002144  D7FE               	bra	u11277
 16063  002146  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16064  002148  D7FC               	bra	u11277
 16065  00214A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16066  00214C  D7FA               	bra	u11277
 16067  00214E  F000               	nop	
 16068                           
 16069                           ;Test.c: 378: updateServoPosition(1260, 3);
 16070  002150  0E04               	movlw	4
 16071  002152  0100               	movlb	0	; () banked
 16072  002154  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16073  002156  0EEC               	movlw	236
 16074  002158  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16075  00215A  0E00               	movlw	0
 16076  00215C  0100               	movlb	0	; () banked
 16077  00215E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16078  002160  0E03               	movlw	3
 16079  002162  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16080  002164  ECD5  F026         	call	_updateServoPosition	;wreg free
 16081                           
 16082                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 16083  002168  0E1D               	movlw	29
 16084  00216A  0100               	movlb	0	; () banked
 16085  00216C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16086  00216E  0E69               	movlw	105
 16087  002170  0100               	movlb	0	; () banked
 16088  002172  6FAB               	movwf	??_BothServos& (0+255),b
 16089  002174  0EA5               	movlw	165
 16090  002176                     u11287:
 16091  002176  2EE8               	decfsz	wreg,f,c
 16092  002178  D7FE               	bra	u11287
 16093  00217A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16094  00217C  D7FC               	bra	u11287
 16095  00217E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16096  002180  D7FA               	bra	u11287
 16097                           
 16098                           ;Test.c: 380: updateServoPosition(1050, 3);
 16099  002182  0E04               	movlw	4
 16100  002184  0100               	movlb	0	; () banked
 16101  002186  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16102  002188  0E1A               	movlw	26
 16103  00218A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16104  00218C  0E00               	movlw	0
 16105  00218E  0100               	movlb	0	; () banked
 16106  002190  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16107  002192  0E03               	movlw	3
 16108  002194  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16109  002196  ECD5  F026         	call	_updateServoPosition	;wreg free
 16110                           
 16111                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 16112  00219A  0E1F               	movlw	31
 16113  00219C  0100               	movlb	0	; () banked
 16114  00219E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16115  0021A0  0E71               	movlw	113
 16116  0021A2  0100               	movlb	0	; () banked
 16117  0021A4  6FAB               	movwf	??_BothServos& (0+255),b
 16118  0021A6  0E1E               	movlw	30
 16119  0021A8                     u11297:
 16120  0021A8  2EE8               	decfsz	wreg,f,c
 16121  0021AA  D7FE               	bra	u11297
 16122  0021AC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16123  0021AE  D7FC               	bra	u11297
 16124  0021B0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16125  0021B2  D7FA               	bra	u11297
 16126  0021B4  F000               	nop	
 16127                           
 16128                           ;Test.c: 383: updateServoPosition(500, 1);
 16129  0021B6  0E01               	movlw	1
 16130  0021B8  0100               	movlb	0	; () banked
 16131  0021BA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16132  0021BC  0EF4               	movlw	244
 16133  0021BE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16134  0021C0  0E00               	movlw	0
 16135  0021C2  0100               	movlb	0	; () banked
 16136  0021C4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16137  0021C6  0E01               	movlw	1
 16138  0021C8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16139  0021CA  ECD5  F026         	call	_updateServoPosition	;wreg free
 16140                           
 16141                           ;Test.c: 384: updateServoPosition(1050, 3);
 16142  0021CE  0E04               	movlw	4
 16143  0021D0  0100               	movlb	0	; () banked
 16144  0021D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16145  0021D4  0E1A               	movlw	26
 16146  0021D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16147  0021D8  0E00               	movlw	0
 16148  0021DA  0100               	movlb	0	; () banked
 16149  0021DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16150  0021DE  0E03               	movlw	3
 16151  0021E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16152  0021E2  ECD5  F026         	call	_updateServoPosition	;wreg free
 16153                           
 16154                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 16155  0021E6  0E1F               	movlw	31
 16156  0021E8  0100               	movlb	0	; () banked
 16157  0021EA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16158  0021EC  0E71               	movlw	113
 16159  0021EE  0100               	movlb	0	; () banked
 16160  0021F0  6FAB               	movwf	??_BothServos& (0+255),b
 16161  0021F2  0E1E               	movlw	30
 16162  0021F4                     u11307:
 16163  0021F4  2EE8               	decfsz	wreg,f,c
 16164  0021F6  D7FE               	bra	u11307
 16165  0021F8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16166  0021FA  D7FC               	bra	u11307
 16167  0021FC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16168  0021FE  D7FA               	bra	u11307
 16169  002200  F000               	nop	
 16170                           
 16171                           ;Test.c: 386: updateServoPosition(1260, 3);
 16172  002202  0E04               	movlw	4
 16173  002204  0100               	movlb	0	; () banked
 16174  002206  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16175  002208  0EEC               	movlw	236
 16176  00220A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16177  00220C  0E00               	movlw	0
 16178  00220E  0100               	movlb	0	; () banked
 16179  002210  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16180  002212  0E03               	movlw	3
 16181  002214  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16182  002216  ECD5  F026         	call	_updateServoPosition	;wreg free
 16183                           
 16184                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16185  00221A  0E1D               	movlw	29
 16186  00221C  0100               	movlb	0	; () banked
 16187  00221E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16188  002220  0E69               	movlw	105
 16189  002222  0100               	movlb	0	; () banked
 16190  002224  6FAB               	movwf	??_BothServos& (0+255),b
 16191  002226  0EA5               	movlw	165
 16192  002228                     u11317:
 16193  002228  2EE8               	decfsz	wreg,f,c
 16194  00222A  D7FE               	bra	u11317
 16195  00222C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16196  00222E  D7FC               	bra	u11317
 16197  002230  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16198  002232  D7FA               	bra	u11317
 16199                           
 16200                           ;Test.c: 388: updateServoPosition(1050, 3);
 16201  002234  0E04               	movlw	4
 16202  002236  0100               	movlb	0	; () banked
 16203  002238  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16204  00223A  0E1A               	movlw	26
 16205  00223C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16206  00223E  0E00               	movlw	0
 16207  002240  0100               	movlb	0	; () banked
 16208  002242  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16209  002244  0E03               	movlw	3
 16210  002246  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16211  002248  ECD5  F026         	call	_updateServoPosition	;wreg free
 16212                           
 16213                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16214  00224C  0E3D               	movlw	61
 16215  00224E  0100               	movlb	0	; () banked
 16216  002250  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16217  002252  0EE1               	movlw	225
 16218  002254  0100               	movlb	0	; () banked
 16219  002256  6FAB               	movwf	??_BothServos& (0+255),b
 16220  002258  0E3F               	movlw	63
 16221  00225A                     u11327:
 16222  00225A  2EE8               	decfsz	wreg,f,c
 16223  00225C  D7FE               	bra	u11327
 16224  00225E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16225  002260  D7FC               	bra	u11327
 16226  002262  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16227  002264  D7FA               	bra	u11327
 16228  002266  D000               	nop2	
 16229                           
 16230                           ;Test.c: 391: updateServoPosition(1670, 1);
 16231  002268  0E06               	movlw	6
 16232  00226A  0100               	movlb	0	; () banked
 16233  00226C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16234  00226E  0E86               	movlw	134
 16235  002270  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16236  002272  0E00               	movlw	0
 16237  002274  0100               	movlb	0	; () banked
 16238  002276  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16239  002278  0E01               	movlw	1
 16240  00227A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16241  00227C  ECD5  F026         	call	_updateServoPosition	;wreg free
 16242                           
 16243                           ;Test.c: 392: updateServoPosition(1050, 3);
 16244  002280  0E04               	movlw	4
 16245  002282  0100               	movlb	0	; () banked
 16246  002284  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16247  002286  0E1A               	movlw	26
 16248  002288  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16249  00228A  0E00               	movlw	0
 16250  00228C  0100               	movlb	0	; () banked
 16251  00228E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16252  002290  0E03               	movlw	3
 16253  002292  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16254  002294  ECD5  F026         	call	_updateServoPosition	;wreg free
 16255                           
 16256                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16257  002298  0E1F               	movlw	31
 16258  00229A  0100               	movlb	0	; () banked
 16259  00229C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16260  00229E  0E71               	movlw	113
 16261  0022A0  0100               	movlb	0	; () banked
 16262  0022A2  6FAB               	movwf	??_BothServos& (0+255),b
 16263  0022A4  0E1E               	movlw	30
 16264  0022A6                     u11337:
 16265  0022A6  2EE8               	decfsz	wreg,f,c
 16266  0022A8  D7FE               	bra	u11337
 16267  0022AA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16268  0022AC  D7FC               	bra	u11337
 16269  0022AE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16270  0022B0  D7FA               	bra	u11337
 16271  0022B2  F000               	nop	
 16272                           
 16273                           ;Test.c: 394: updateServoPosition(1390, 3);
 16274  0022B4  0E05               	movlw	5
 16275  0022B6  0100               	movlb	0	; () banked
 16276  0022B8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16277  0022BA  0E6E               	movlw	110
 16278  0022BC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16279  0022BE  0E00               	movlw	0
 16280  0022C0  0100               	movlb	0	; () banked
 16281  0022C2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16282  0022C4  0E03               	movlw	3
 16283  0022C6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16284  0022C8  ECD5  F026         	call	_updateServoPosition	;wreg free
 16285                           
 16286                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16287  0022CC  0E1D               	movlw	29
 16288  0022CE  0100               	movlb	0	; () banked
 16289  0022D0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16290  0022D2  0E69               	movlw	105
 16291  0022D4  0100               	movlb	0	; () banked
 16292  0022D6  6FAB               	movwf	??_BothServos& (0+255),b
 16293  0022D8  0EA5               	movlw	165
 16294  0022DA                     u11347:
 16295  0022DA  2EE8               	decfsz	wreg,f,c
 16296  0022DC  D7FE               	bra	u11347
 16297  0022DE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16298  0022E0  D7FC               	bra	u11347
 16299  0022E2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16300  0022E4  D7FA               	bra	u11347
 16301                           
 16302                           ;Test.c: 396: updateServoPosition(1050, 3);
 16303  0022E6  0E04               	movlw	4
 16304  0022E8  0100               	movlb	0	; () banked
 16305  0022EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16306  0022EC  0E1A               	movlw	26
 16307  0022EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16308  0022F0  0E00               	movlw	0
 16309  0022F2  0100               	movlb	0	; () banked
 16310  0022F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16311  0022F6  0E03               	movlw	3
 16312  0022F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16313  0022FA  ECD5  F026         	call	_updateServoPosition	;wreg free
 16314                           
 16315                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16316  0022FE  0E1F               	movlw	31
 16317  002300  0100               	movlb	0	; () banked
 16318  002302  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16319  002304  0E71               	movlw	113
 16320  002306  0100               	movlb	0	; () banked
 16321  002308  6FAB               	movwf	??_BothServos& (0+255),b
 16322  00230A  0E1E               	movlw	30
 16323  00230C                     u11357:
 16324  00230C  2EE8               	decfsz	wreg,f,c
 16325  00230E  D7FE               	bra	u11357
 16326  002310  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16327  002312  D7FC               	bra	u11357
 16328  002314  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16329  002316  D7FA               	bra	u11357
 16330  002318  F000               	nop	
 16331                           
 16332                           ;Test.c: 399: updateServoPosition(2400, 1);
 16333  00231A  0E09               	movlw	9
 16334  00231C  0100               	movlb	0	; () banked
 16335  00231E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16336  002320  0E60               	movlw	96
 16337  002322  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16338  002324  0E00               	movlw	0
 16339  002326  0100               	movlb	0	; () banked
 16340  002328  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16341  00232A  0E01               	movlw	1
 16342  00232C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16343  00232E  ECD5  F026         	call	_updateServoPosition	;wreg free
 16344                           
 16345                           ;Test.c: 400: updateServoPosition(1050, 3);
 16346  002332  0E04               	movlw	4
 16347  002334  0100               	movlb	0	; () banked
 16348  002336  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16349  002338  0E1A               	movlw	26
 16350  00233A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16351  00233C  0E00               	movlw	0
 16352  00233E  0100               	movlb	0	; () banked
 16353  002340  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16354  002342  0E03               	movlw	3
 16355  002344  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16356  002346  ECD5  F026         	call	_updateServoPosition	;wreg free
 16357                           
 16358                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16359  00234A  0E1F               	movlw	31
 16360  00234C  0100               	movlb	0	; () banked
 16361  00234E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16362  002350  0E71               	movlw	113
 16363  002352  0100               	movlb	0	; () banked
 16364  002354  6FAB               	movwf	??_BothServos& (0+255),b
 16365  002356  0E1E               	movlw	30
 16366  002358                     u11367:
 16367  002358  2EE8               	decfsz	wreg,f,c
 16368  00235A  D7FE               	bra	u11367
 16369  00235C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16370  00235E  D7FC               	bra	u11367
 16371  002360  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16372  002362  D7FA               	bra	u11367
 16373  002364  F000               	nop	
 16374                           
 16375                           ;Test.c: 402: updateServoPosition(1390, 3);
 16376  002366  0E05               	movlw	5
 16377  002368  0100               	movlb	0	; () banked
 16378  00236A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16379  00236C  0E6E               	movlw	110
 16380  00236E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16381  002370  0E00               	movlw	0
 16382  002372  0100               	movlb	0	; () banked
 16383  002374  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16384  002376  0E03               	movlw	3
 16385  002378  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16386  00237A  ECD5  F026         	call	_updateServoPosition	;wreg free
 16387                           
 16388                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16389  00237E  0E1D               	movlw	29
 16390  002380  0100               	movlb	0	; () banked
 16391  002382  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16392  002384  0E69               	movlw	105
 16393  002386  0100               	movlb	0	; () banked
 16394  002388  6FAB               	movwf	??_BothServos& (0+255),b
 16395  00238A  0EA5               	movlw	165
 16396  00238C                     u11377:
 16397  00238C  2EE8               	decfsz	wreg,f,c
 16398  00238E  D7FE               	bra	u11377
 16399  002390  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16400  002392  D7FC               	bra	u11377
 16401  002394  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16402  002396  D7FA               	bra	u11377
 16403                           
 16404                           ;Test.c: 404: updateServoPosition(1050, 3);
 16405  002398  0E04               	movlw	4
 16406  00239A  0100               	movlb	0	; () banked
 16407  00239C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16408  00239E  0E1A               	movlw	26
 16409  0023A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16410  0023A2  0E00               	movlw	0
 16411  0023A4  0100               	movlb	0	; () banked
 16412  0023A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16413  0023A8  0E03               	movlw	3
 16414  0023AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16415  0023AC  ECD5  F026         	call	_updateServoPosition	;wreg free
 16416                           
 16417                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16418  0023B0  0E1F               	movlw	31
 16419  0023B2  0100               	movlb	0	; () banked
 16420  0023B4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16421  0023B6  0E71               	movlw	113
 16422  0023B8  0100               	movlb	0	; () banked
 16423  0023BA  6FAB               	movwf	??_BothServos& (0+255),b
 16424  0023BC  0E1E               	movlw	30
 16425  0023BE                     u11387:
 16426  0023BE  2EE8               	decfsz	wreg,f,c
 16427  0023C0  D7FE               	bra	u11387
 16428  0023C2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16429  0023C4  D7FC               	bra	u11387
 16430  0023C6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16431  0023C8  D7FA               	bra	u11387
 16432  0023CA  F000               	nop	
 16433                           
 16434                           ;Test.c: 407: stopSignals();
 16435  0023CC  EC7D  F02D         	call	_stopSignals	;wreg free
 16436                           
 16437                           ;Test.c: 408: machine_state = Testing_state;
 16438  0023D0  0E03               	movlw	3
 16439  0023D2  0100               	movlb	0	; () banked
 16440  0023D4  6FFC               	movwf	_machine_state& (0+255),b
 16441                           
 16442                           ; BSR set to: 0
 16443  0023D6  0012               	return		;funcret
 16444  0023D8                     __end_of_BothServos:
 16445                           	opt stack 0
 16446                           tblptru	equ	0xFF8
 16447                           tblptrh	equ	0xFF7
 16448                           tblptrl	equ	0xFF6
 16449                           tablat	equ	0xFF5
 16450                           prodh	equ	0xFF4
 16451                           prodl	equ	0xFF3
 16452                           intcon	equ	0xFF2
 16453                           intcon2	equ	0xFF1
 16454                           intcon3	equ	0xFF0
 16455                           postinc0	equ	0xFEE
 16456                           wreg	equ	0xFE8
 16457                           postdec1	equ	0xFE5
 16458                           fsr1l	equ	0xFE1
 16459                           indf2	equ	0xFDF
 16460                           postinc2	equ	0xFDE
 16461                           postdec2	equ	0xFDD
 16462                           fsr2h	equ	0xFDA
 16463                           fsr2l	equ	0xFD9
 16464                           status	equ	0xFD8
 16465                           
 16466 ;; *************** function _stopSignals *****************
 16467 ;; Defined at:
 16468 ;;		line 70 in file "main.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;		None
 16471 ;; Auto vars:     Size  Location     Type
 16472 ;;		None
 16473 ;; Return value:  Size  Location     Type
 16474 ;;                  1    wreg      void 
 16475 ;; Registers used:
 16476 ;;		wreg, status,2
 16477 ;; Tracked objects:
 16478 ;;		On entry : 0/0
 16479 ;;		On exit  : 0/0
 16480 ;;		Unchanged: 0/0
 16481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16486 ;;Total ram usage:        0 bytes
 16487 ;; Hardware stack levels used:    1
 16488 ;; Hardware stack levels required when called:    7
 16489 ;; This function calls:
 16490 ;;		Nothing
 16491 ;; This function is called by:
 16492 ;;		_main
 16493 ;;		_BothServos
 16494 ;;		_PlatformTest
 16495 ;;		_arm
 16496 ;; This function uses a non-reentrant model
 16497 ;;
 16498                           
 16499                           	psect	text50
 16500  005AFA                     __ptext50:
 16501                           	opt stack 0
 16502  005AFA                     _stopSignals:
 16503                           	opt stack 23
 16504                           
 16505                           ;main.c: 71: LATA = 0x00;
 16506                           
 16507                           ; BSR set to: 0
 16508                           ;incstack = 0
 16509  005AFA  0E00               	movlw	0
 16510  005AFC  6E89               	movwf	3977,c	;volatile
 16511                           
 16512                           ;main.c: 72: LATB = 0x00;
 16513  005AFE  0E00               	movlw	0
 16514  005B00  6E8A               	movwf	3978,c	;volatile
 16515                           
 16516                           ;main.c: 73: LATC = 0x00;
 16517  005B02  0E00               	movlw	0
 16518  005B04  6E8B               	movwf	3979,c	;volatile
 16519                           
 16520                           ;main.c: 74: LATD = 0x00;
 16521  005B06  0E00               	movlw	0
 16522  005B08  6E8C               	movwf	3980,c	;volatile
 16523                           
 16524                           ;main.c: 75: LATE = 0x00;
 16525  005B0A  0E00               	movlw	0
 16526  005B0C  6E8D               	movwf	3981,c	;volatile
 16527                           
 16528                           ;main.c: 76: TMR1ON = 0;
 16529  005B0E  90CD               	bcf	4045,0,c	;volatile
 16530                           
 16531                           ;main.c: 77: TMR2ON = 0;
 16532  005B10  94CA               	bcf	4042,2,c	;volatile
 16533                           
 16534                           ;main.c: 78: TMR3ON = 0;
 16535  005B12  90B1               	bcf	4017,0,c	;volatile
 16536  005B14  0012               	return		;funcret
 16537  005B16                     __end_of_stopSignals:
 16538                           	opt stack 0
 16539                           tblptru	equ	0xFF8
 16540                           tblptrh	equ	0xFF7
 16541                           tblptrl	equ	0xFF6
 16542                           tablat	equ	0xFF5
 16543                           prodh	equ	0xFF4
 16544                           prodl	equ	0xFF3
 16545                           intcon	equ	0xFF2
 16546                           intcon2	equ	0xFF1
 16547                           intcon3	equ	0xFF0
 16548                           postinc0	equ	0xFEE
 16549                           wreg	equ	0xFE8
 16550                           postdec1	equ	0xFE5
 16551                           fsr1l	equ	0xFE1
 16552                           indf2	equ	0xFDF
 16553                           postinc2	equ	0xFDE
 16554                           postdec2	equ	0xFDD
 16555                           fsr2h	equ	0xFDA
 16556                           fsr2l	equ	0xFD9
 16557                           status	equ	0xFD8
 16558                           
 16559 ;; *************** function _initServos *****************
 16560 ;; Defined at:
 16561 ;;		line 471 in file "sort.c"
 16562 ;; Parameters:    Size  Location     Type
 16563 ;;		None
 16564 ;; Auto vars:     Size  Location     Type
 16565 ;;		None
 16566 ;; Return value:  Size  Location     Type
 16567 ;;                  1    wreg      void 
 16568 ;; Registers used:
 16569 ;;		wreg, status,2, status,0, cstack
 16570 ;; Tracked objects:
 16571 ;;		On entry : 0/0
 16572 ;;		On exit  : 0/0
 16573 ;;		Unchanged: 0/0
 16574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16579 ;;Total ram usage:        1 bytes
 16580 ;; Hardware stack levels used:    1
 16581 ;; Hardware stack levels required when called:    8
 16582 ;; This function calls:
 16583 ;;		_updateServoPosition
 16584 ;; This function is called by:
 16585 ;;		_Loading
 16586 ;;		_BothServos
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           	psect	text51
 16591  004EB4                     __ptext51:
 16592                           	opt stack 0
 16593  004EB4                     _initServos:
 16594                           	opt stack 20
 16595                           
 16596                           ;sort.c: 473: updateServoPosition(1200, 1);
 16597                           
 16598                           ;incstack = 0
 16599  004EB4  0E04               	movlw	4
 16600  004EB6  0100               	movlb	0	; () banked
 16601  004EB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16602  004EBA  0EB0               	movlw	176
 16603  004EBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16604  004EBE  0E00               	movlw	0
 16605  004EC0  0100               	movlb	0	; () banked
 16606  004EC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16607  004EC4  0E01               	movlw	1
 16608  004EC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16609  004EC8  ECD5  F026         	call	_updateServoPosition	;wreg free
 16610                           
 16611                           ;sort.c: 474: updateServoPosition(1050, 3);
 16612  004ECC  0E04               	movlw	4
 16613  004ECE  0100               	movlb	0	; () banked
 16614  004ED0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16615  004ED2  0E1A               	movlw	26
 16616  004ED4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16617  004ED6  0E00               	movlw	0
 16618  004ED8  0100               	movlb	0	; () banked
 16619  004EDA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16620  004EDC  0E03               	movlw	3
 16621  004EDE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16622  004EE0  ECD5  F026         	call	_updateServoPosition	;wreg free
 16623                           
 16624                           ;sort.c: 475: TMR1ON = 1;
 16625  004EE4  80CD               	bsf	4045,0,c	;volatile
 16626                           
 16627                           ;sort.c: 476: was_low_1 = 0;
 16628  004EE6  0E00               	movlw	0
 16629  004EE8  6E78               	movwf	_was_low_1+1,c	;volatile
 16630  004EEA  0E00               	movlw	0
 16631  004EEC  6E77               	movwf	_was_low_1,c	;volatile
 16632                           
 16633                           ;sort.c: 478: _delay((unsigned long)((5)*(32000000/4000.0)));
 16634  004EEE  0E34               	movlw	52
 16635  004EF0  0100               	movlb	0	; () banked
 16636  004EF2  6F88               	movwf	??_initServos& (0+255),b
 16637  004EF4  0EF1               	movlw	241
 16638  004EF6                     u11397:
 16639  004EF6  2EE8               	decfsz	wreg,f,c
 16640  004EF8  D7FE               	bra	u11397
 16641  004EFA  2F88               	decfsz	??_initServos& (0+255),f,b
 16642  004EFC  D7FC               	bra	u11397
 16643  004EFE  D000               	nop2	
 16644                           
 16645                           ;sort.c: 480: TMR3ON = 1;
 16646  004F00  80B1               	bsf	4017,0,c	;volatile
 16647                           
 16648                           ;sort.c: 481: was_low_3 = 0;
 16649  004F02  0E00               	movlw	0
 16650  004F04  6E7C               	movwf	_was_low_3+1,c	;volatile
 16651  004F06  0E00               	movlw	0
 16652  004F08  6E7B               	movwf	_was_low_3,c	;volatile
 16653                           
 16654                           ;sort.c: 484: _delay((unsigned long)((1)*(32000000/4000.0)));
 16655  004F0A  0E0B               	movlw	11
 16656  004F0C  0100               	movlb	0	; () banked
 16657  004F0E  6F88               	movwf	??_initServos& (0+255),b
 16658  004F10  0E62               	movlw	98
 16659  004F12                     u11407:
 16660  004F12  2EE8               	decfsz	wreg,f,c
 16661  004F14  D7FE               	bra	u11407
 16662  004F16  2F88               	decfsz	??_initServos& (0+255),f,b
 16663  004F18  D7FC               	bra	u11407
 16664  004F1A  F000               	nop	
 16665                           
 16666                           ;sort.c: 485: LATBbits.LATB3 = 0;
 16667  004F1C  968A               	bcf	3978,3,c	;volatile
 16668                           
 16669                           ;sort.c: 486: TMR2ON = 1;
 16670  004F1E  84CA               	bsf	4042,2,c	;volatile
 16671                           
 16672                           ;sort.c: 487: was_low_2 = 0;
 16673  004F20  0E00               	movlw	0
 16674  004F22  6E7A               	movwf	_was_low_2+1,c	;volatile
 16675  004F24  0E00               	movlw	0
 16676  004F26  6E79               	movwf	_was_low_2,c	;volatile
 16677                           
 16678                           ;sort.c: 489: LATCbits.LATC0 = 1;
 16679  004F28  808B               	bsf	3979,0,c	;volatile
 16680  004F2A  0012               	return		;funcret
 16681  004F2C                     __end_of_initServos:
 16682                           	opt stack 0
 16683                           tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           intcon2	equ	0xFF1
 16691                           intcon3	equ	0xFF0
 16692                           postinc0	equ	0xFEE
 16693                           wreg	equ	0xFE8
 16694                           postdec1	equ	0xFE5
 16695                           fsr1l	equ	0xFE1
 16696                           indf2	equ	0xFDF
 16697                           postinc2	equ	0xFDE
 16698                           postdec2	equ	0xFDD
 16699                           fsr2h	equ	0xFDA
 16700                           fsr2l	equ	0xFD9
 16701                           status	equ	0xFD8
 16702                           
 16703 ;; *************** function _updateServoPosition *****************
 16704 ;; Defined at:
 16705 ;;		line 557 in file "sort.c"
 16706 ;; Parameters:    Size  Location     Type
 16707 ;;  time_us         2    0[BANK0 ] int 
 16708 ;;  timer           2    2[BANK0 ] int 
 16709 ;; Auto vars:     Size  Location     Type
 16710 ;;  my_time         2    6[BANK0 ] unsigned int 
 16711 ;; Return value:  Size  Location     Type
 16712 ;;                  1    wreg      void 
 16713 ;; Registers used:
 16714 ;;		wreg, status,2, status,0
 16715 ;; Tracked objects:
 16716 ;;		On entry : 0/0
 16717 ;;		On exit  : 0/0
 16718 ;;		Unchanged: 0/0
 16719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16723 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16724 ;;Total ram usage:        8 bytes
 16725 ;; Hardware stack levels used:    1
 16726 ;; Hardware stack levels required when called:    7
 16727 ;; This function calls:
 16728 ;;		Nothing
 16729 ;; This function is called by:
 16730 ;;		_Distribution
 16731 ;;		_initServos
 16732 ;;		_actuatorTest
 16733 ;;		_BothServos
 16734 ;; This function uses a non-reentrant model
 16735 ;;
 16736                           
 16737                           	psect	text52
 16738  004DAA                     __ptext52:
 16739                           	opt stack 0
 16740  004DAA                     _updateServoPosition:
 16741                           	opt stack 20
 16742                           
 16743                           ;sort.c: 558: unsigned int my_time = 65535 - time_us;
 16744                           
 16745                           ;incstack = 0
 16746  004DAA  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16747  004DAE  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16748  004DB2  0100               	movlb	0	; () banked
 16749  004DB4  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16750  004DB6  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16751  004DB8  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16752  004DBA  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16753  004DBC  0EFF               	movlw	255
 16754  004DBE  0100               	movlb	0	; () banked
 16755  004DC0  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16756  004DC2  0100               	movlb	0	; () banked
 16757  004DC4  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16758  004DC6  0EFF               	movlw	255
 16759  004DC8  0100               	movlb	0	; () banked
 16760  004DCA  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16761  004DCC  0100               	movlb	0	; () banked
 16762  004DCE  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16763                           
 16764                           ;sort.c: 559: switch(timer){
 16765  004DD0  D01D               	goto	l6860
 16766  004DD2                     l6854:
 16767                           
 16768                           ; BSR set to: 0
 16769                           ;sort.c: 561: servoTimes[0] = my_time >> 8;
 16770  004DD2  0100               	movlb	0	; () banked
 16771  004DD4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16772  004DD6  0100               	movlb	0	; () banked
 16773  004DD8  6FDA               	movwf	_servoTimes& (0+255),b
 16774  004DDA  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 16775                           
 16776                           ;sort.c: 562: servoTimes[1] = my_time & 0xFF;
 16777  004DDC  0100               	movlb	0	; () banked
 16778  004DDE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16779  004DE0  0100               	movlb	0	; () banked
 16780  004DE2  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 16781  004DE4  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;sort.c: 564: pan_servo_state = time_us;
 16785  004DE6  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16786  004DEA  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16787  004DEE                     l910:
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;sort.c: 566: servoTimes[2] = my_time >> 8;
 16791  004DEE  0100               	movlb	0	; () banked
 16792  004DF0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16793  004DF2  0100               	movlb	0	; () banked
 16794  004DF4  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 16795  004DF6  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 16796                           
 16797                           ;sort.c: 567: servoTimes[3] = my_time & 0xFF;
 16798  004DF8  0100               	movlb	0	; () banked
 16799  004DFA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16800  004DFC  0100               	movlb	0	; () banked
 16801  004DFE  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 16802  004E00  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;sort.c: 569: tilt_servo_state = time_us;
 16806  004E02  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16807  004E06  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16808                           
 16809                           ;sort.c: 570: }
 16810  004E0A  0012               	return	
 16811  004E0C                     l6860:
 16812                           
 16813                           ; BSR set to: 0
 16814  004E0C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16815  004E10  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16816                           
 16817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16818                           ; Switch size 1, requested type "space"
 16819                           ; Number of cases is 1, Range of values is 0 to 0
 16820                           ; switch strategies available:
 16821                           ; Name         Instructions Cycles
 16822                           ; simple_byte            4     3 (average)
 16823                           ;	Chosen strategy is simple_byte
 16824  004E14  0100               	movlb	0	; () banked
 16825  004E16  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16826  004E18  0A00               	xorlw	0	; case 0
 16827  004E1A  A4D8               	btfss	status,2,c
 16828  004E1C  0012               	return	
 16829                           
 16830                           ; BSR set to: 0
 16831                           ; Switch size 1, requested type "space"
 16832                           ; Number of cases is 2, Range of values is 1 to 3
 16833                           ; switch strategies available:
 16834                           ; Name         Instructions Cycles
 16835                           ; simple_byte            7     4 (average)
 16836                           ;	Chosen strategy is simple_byte
 16837  004E1E  0100               	movlb	0	; () banked
 16838  004E20  5184               	movf	??_updateServoPosition& (0+255),w,b
 16839  004E22  0A01               	xorlw	1	; case 1
 16840  004E24  B4D8               	btfsc	status,2,c
 16841  004E26  D7D5               	goto	l6854
 16842  004E28  0A02               	xorlw	2	; case 3
 16843  004E2A  A4D8               	btfss	status,2,c
 16844  004E2C  0012               	return	
 16845  004E2E  D7DF               	goto	l910
 16846  004E30                     __end_of_updateServoPosition:
 16847                           	opt stack 0
 16848                           tblptru	equ	0xFF8
 16849                           tblptrh	equ	0xFF7
 16850                           tblptrl	equ	0xFF6
 16851                           tablat	equ	0xFF5
 16852                           prodh	equ	0xFF4
 16853                           prodl	equ	0xFF3
 16854                           intcon	equ	0xFF2
 16855                           intcon2	equ	0xFF1
 16856                           intcon3	equ	0xFF0
 16857                           postinc0	equ	0xFEE
 16858                           wreg	equ	0xFE8
 16859                           postdec1	equ	0xFE5
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           fsr2h	equ	0xFDA
 16865                           fsr2l	equ	0xFD9
 16866                           status	equ	0xFD8
 16867                           
 16868 ;; *************** function _BlockerTest *****************
 16869 ;; Defined at:
 16870 ;;		line 599 in file "Test.c"
 16871 ;; Parameters:    Size  Location     Type
 16872 ;;		None
 16873 ;; Auto vars:     Size  Location     Type
 16874 ;;  i               2   44[BANK0 ] int 
 16875 ;;  cond_flag       2   48[BANK0 ] int 
 16876 ;;  cam_flag        2   46[BANK0 ] int 
 16877 ;; Return value:  Size  Location     Type
 16878 ;;                  1    wreg      void 
 16879 ;; Registers used:
 16880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16881 ;; Tracked objects:
 16882 ;;		On entry : 0/0
 16883 ;;		On exit  : 0/0
 16884 ;;		Unchanged: 0/0
 16885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16887 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16889 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16890 ;;Total ram usage:        7 bytes
 16891 ;; Hardware stack levels used:    1
 16892 ;; Hardware stack levels required when called:   10
 16893 ;; This function calls:
 16894 ;;		_lcdInst
 16895 ;;		_printf
 16896 ;; This function is called by:
 16897 ;;		_Test
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901                           	psect	text53
 16902  003DF0                     __ptext53:
 16903                           	opt stack 0
 16904  003DF0                     _BlockerTest:
 16905                           	opt stack 19
 16906                           
 16907                           ;Test.c: 600: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;incstack = 0
 16911  003DF0  0E01               	movlw	1
 16912  003DF2  ECCB  F02D         	call	_lcdInst
 16913  003DF6  0E68               	movlw	104
 16914  003DF8  0100               	movlb	0	; () banked
 16915  003DFA  6FAB               	movwf	??_BlockerTest& (0+255),b
 16916  003DFC  0EE4               	movlw	228
 16917  003DFE                     u11417:
 16918  003DFE  2EE8               	decfsz	wreg,f,c
 16919  003E00  D7FE               	bra	u11417
 16920  003E02  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16921  003E04  D7FC               	bra	u11417
 16922  003E06  F000               	nop	
 16923  003E08  0E80               	movlw	128
 16924  003E0A  ECCB  F02D         	call	_lcdInst
 16925                           
 16926                           ;Test.c: 601: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16927  003E0E  0E2B               	movlw	low STR_124
 16928  003E10  0100               	movlb	0	; () banked
 16929  003E12  6F8E               	movwf	printf@f& (0+255),b
 16930  003E14  0EFB               	movlw	high STR_124
 16931  003E16  0100               	movlb	0	; () banked
 16932  003E18  6F8F               	movwf	(printf@f+1)& (0+255),b
 16933  003E1A  A480               	btfss	3968,2,c	;volatile
 16934  003E1C  D004               	goto	u8260
 16935  003E1E  0100               	movlb	0	; () banked
 16936  003E20  6BAB               	clrf	??_BlockerTest& (0+255),b
 16937  003E22  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16938  003E24  D002               	goto	u8268
 16939  003E26                     u8260:
 16940  003E26  0100               	movlb	0	; () banked
 16941  003E28  6BAB               	clrf	??_BlockerTest& (0+255),b
 16942  003E2A                     u8268:
 16943  003E2A  0100               	movlb	0	; () banked
 16944  003E2C  51AB               	movf	??_BlockerTest& (0+255),w,b
 16945  003E2E  0100               	movlb	0	; () banked
 16946  003E30  6F90               	movwf	(?_printf+2)& (0+255),b
 16947  003E32  6B91               	clrf	(?_printf+3)& (0+255),b
 16948  003E34  ECC1  F00B         	call	_printf	;wreg free
 16949                           
 16950                           ;Test.c: 602: lcdInst(0b11000000);;
 16951  003E38  0EC0               	movlw	192
 16952  003E3A  ECCB  F02D         	call	_lcdInst
 16953                           
 16954                           ;Test.c: 603: printf("OTHER: CAM TOGGLE");
 16955  003E3E  0E07               	movlw	low STR_125
 16956  003E40  0100               	movlb	0	; () banked
 16957  003E42  6F8E               	movwf	printf@f& (0+255),b
 16958  003E44  0EFB               	movlw	high STR_125
 16959  003E46  0100               	movlb	0	; () banked
 16960  003E48  6F8F               	movwf	(printf@f+1)& (0+255),b
 16961  003E4A  ECC1  F00B         	call	_printf	;wreg free
 16962                           
 16963                           ;Test.c: 604: int cam_flag = 1;
 16964  003E4E  0E00               	movlw	0
 16965  003E50  0100               	movlb	0	; () banked
 16966  003E52  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16967  003E54  0E01               	movlw	1
 16968  003E56  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;Test.c: 605: int cond_flag = 0;
 16972  003E58  0E00               	movlw	0
 16973  003E5A  0100               	movlb	0	; () banked
 16974  003E5C  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16975  003E5E  0E00               	movlw	0
 16976  003E60  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 16977                           
 16978                           ; BSR set to: 0
 16979                           ;Test.c: 607: while(PORTBbits.RB1 == 0){
 16980                           
 16981                           ;Test.c: 606: while(1){
 16982  003E62  D018               	goto	l9104
 16983  003E64                     l9100:
 16984                           
 16985                           ;Test.c: 608: lcdInst(0b10000000);;
 16986  003E64  0E80               	movlw	128
 16987  003E66  ECCB  F02D         	call	_lcdInst
 16988                           
 16989                           ;Test.c: 609: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16990  003E6A  0E2B               	movlw	low STR_124
 16991  003E6C  0100               	movlb	0	; () banked
 16992  003E6E  6F8E               	movwf	printf@f& (0+255),b
 16993  003E70  0EFB               	movlw	high STR_124
 16994  003E72  0100               	movlb	0	; () banked
 16995  003E74  6F8F               	movwf	(printf@f+1)& (0+255),b
 16996  003E76  A480               	btfss	3968,2,c	;volatile
 16997  003E78  D004               	goto	u8270
 16998  003E7A  0100               	movlb	0	; () banked
 16999  003E7C  6BAB               	clrf	??_BlockerTest& (0+255),b
 17000  003E7E  2BAB               	incf	??_BlockerTest& (0+255),f,b
 17001  003E80  D002               	goto	u8278
 17002  003E82                     u8270:
 17003  003E82  0100               	movlb	0	; () banked
 17004  003E84  6BAB               	clrf	??_BlockerTest& (0+255),b
 17005  003E86                     u8278:
 17006  003E86  0100               	movlb	0	; () banked
 17007  003E88  51AB               	movf	??_BlockerTest& (0+255),w,b
 17008  003E8A  0100               	movlb	0	; () banked
 17009  003E8C  6F90               	movwf	(?_printf+2)& (0+255),b
 17010  003E8E  6B91               	clrf	(?_printf+3)& (0+255),b
 17011  003E90  ECC1  F00B         	call	_printf	;wreg free
 17012  003E94                     l9104:
 17013  003E94  A281               	btfss	3969,1,c	;volatile
 17014  003E96  D7E6               	goto	l9100
 17015                           
 17016                           ;Test.c: 610: }
 17017                           ;Test.c: 611: if(PORTB >> 4 == 0b1111){
 17018  003E98  3881               	swapf	3969,w,c	;volatile
 17019  003E9A  0B0F               	andlw	15
 17020  003E9C  0A0F               	xorlw	15
 17021  003E9E  B4D8               	btfsc	status,2,c
 17022  003EA0  0012               	return	
 17023                           
 17024                           ;Test.c: 614: else if(PORTB >> 4 == 0b0001){
 17025                           
 17026                           ;Test.c: 613: }
 17027                           
 17028                           ;Test.c: 612: break;
 17029  003EA2  3881               	swapf	3969,w,c	;volatile
 17030  003EA4  0B0F               	andlw	15
 17031  003EA6  06E8               	decf	wreg,f,c
 17032  003EA8  A4D8               	btfss	status,2,c
 17033  003EAA  D016               	goto	l9122
 17034                           
 17035                           ;Test.c: 615: if(cond_flag){
 17036  003EAC  0100               	movlb	0	; () banked
 17037  003EAE  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 17038  003EB0  0100               	movlb	0	; () banked
 17039  003EB2  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17040  003EB4  B4D8               	btfsc	status,2,c
 17041  003EB6  D007               	goto	l1433
 17042                           
 17043                           ; BSR set to: 0
 17044                           ;Test.c: 616: LATAbits.LATA3 = 1;
 17045  003EB8  8689               	bsf	3977,3,c	;volatile
 17046  003EBA  D006               	goto	l9120
 17047  003EBC                     u8321:
 17048  003EBC  0E01               	movlw	1
 17049  003EBE                     u8330:
 17050  003EBE  0100               	movlb	0	; () banked
 17051  003EC0  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 17052  003EC2  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 17053                           
 17054                           ;Test.c: 618: }
 17055  003EC4  D054               	goto	l9146
 17056  003EC6                     l1433:
 17057                           
 17058                           ; BSR set to: 0
 17059                           ;Test.c: 619: else{
 17060                           ;Test.c: 620: LATAbits.LATA3 = 0;
 17061  003EC6  9689               	bcf	3977,3,c	;volatile
 17062  003EC8                     l9120:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;Test.c: 621: cond_flag = !cond_flag;
 17066  003EC8  0100               	movlb	0	; () banked
 17067  003ECA  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 17068  003ECC  0100               	movlb	0	; () banked
 17069  003ECE  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 17070  003ED0  B4D8               	btfsc	status,2,c
 17071  003ED2  D7F4               	goto	u8321
 17072  003ED4  0E00               	movlw	0
 17073  003ED6  D7F3               	goto	u8330
 17074  003ED8                     l9122:
 17075                           
 17076                           ;Test.c: 624: else{
 17077                           ;Test.c: 625: if(cam_flag){
 17078  003ED8  0100               	movlb	0	; () banked
 17079  003EDA  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 17080  003EDC  0100               	movlb	0	; () banked
 17081  003EDE  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17082  003EE0  B4D8               	btfsc	status,2,c
 17083  003EE2  D007               	goto	l9128
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;Test.c: 626: LATCbits.LATC0 = 1;
 17087  003EE4  808B               	bsf	3979,0,c	;volatile
 17088  003EE6  D023               	goto	l9140
 17089  003EE8                     u8371:
 17090  003EE8  0E01               	movlw	1
 17091  003EEA                     u8380:
 17092  003EEA  0100               	movlb	0	; () banked
 17093  003EEC  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 17094  003EEE  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 17095                           
 17096                           ;Test.c: 628: }
 17097  003EF0  D03E               	goto	l9146
 17098  003EF2                     l9128:
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;Test.c: 629: else{
 17102                           ;Test.c: 630: for(int i=0;i<5000;i++)
 17103  003EF2  0E00               	movlw	0
 17104  003EF4  0100               	movlb	0	; () banked
 17105  003EF6  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 17106  003EF8  0E00               	movlw	0
 17107  003EFA  6FAC               	movwf	BlockerTest@i& (0+255),b
 17108  003EFC                     l9130:
 17109                           
 17110                           ; BSR set to: 0
 17111  003EFC  0100               	movlb	0	; () banked
 17112  003EFE  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 17113  003F00  D008               	goto	l1438
 17114  003F02  0E88               	movlw	136
 17115  003F04  0100               	movlb	0	; () banked
 17116  003F06  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 17117  003F08  0E13               	movlw	19
 17118  003F0A  0100               	movlb	0	; () banked
 17119  003F0C  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 17120  003F0E  B0D8               	btfsc	status,0,c
 17121  003F10  D00D               	goto	l1439
 17122  003F12                     l1438:
 17123                           
 17124                           ; BSR set to: 0
 17125                           ;Test.c: 631: {
 17126                           ;Test.c: 632: LATCbits.LATC0 = 1;
 17127  003F12  808B               	bsf	3979,0,c	;volatile
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;Test.c: 633: _delay((unsigned long)((10)*(32000000/4000000.0)));
 17131  003F14  0E1A               	movlw	26
 17132  003F16                     u11427:
 17133  003F16  2EE8               	decfsz	wreg,f,c
 17134  003F18  D7FE               	bra	u11427
 17135  003F1A  D000               	nop2	
 17136                           
 17137                           ;Test.c: 634: LATCbits.LATC0 = 0;
 17138  003F1C  908B               	bcf	3979,0,c	;volatile
 17139                           
 17140                           ;Test.c: 635: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17141  003F1E  0EF0               	movlw	240
 17142  003F20                     u11437:
 17143  003F20  2EE8               	decfsz	wreg,f,c
 17144  003F22  D7FE               	bra	u11437
 17145  003F24  0100               	movlb	0	; () banked
 17146  003F26  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 17147  003F28  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 17148  003F2A  D7E8               	goto	l9130
 17149  003F2C                     l1439:
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;Test.c: 636: }
 17153                           ;Test.c: 637: LATCbits.LATC0 = 0;
 17154  003F2C  908B               	bcf	3979,0,c	;volatile
 17155  003F2E                     l9140:
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;Test.c: 638: cam_flag = !cam_flag;
 17159  003F2E  0100               	movlb	0	; () banked
 17160  003F30  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 17161  003F32  0100               	movlb	0	; () banked
 17162  003F34  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17163  003F36  B4D8               	btfsc	status,2,c
 17164  003F38  D7D7               	goto	u8371
 17165  003F3A  0E00               	movlw	0
 17166  003F3C  D7D6               	goto	u8380
 17167  003F3E                     l9142:
 17168                           
 17169                           ;Test.c: 643: lcdInst(0b10000000);;
 17170  003F3E  0E80               	movlw	128
 17171  003F40  ECCB  F02D         	call	_lcdInst
 17172                           
 17173                           ;Test.c: 644: printf("D: RET|2: COND %d", PORTAbits.RA2);
 17174  003F44  0E2B               	movlw	low STR_124
 17175  003F46  0100               	movlb	0	; () banked
 17176  003F48  6F8E               	movwf	printf@f& (0+255),b
 17177  003F4A  0EFB               	movlw	high STR_124
 17178  003F4C  0100               	movlb	0	; () banked
 17179  003F4E  6F8F               	movwf	(printf@f+1)& (0+255),b
 17180  003F50  A480               	btfss	3968,2,c	;volatile
 17181  003F52  D004               	goto	u8430
 17182  003F54  0100               	movlb	0	; () banked
 17183  003F56  6BAB               	clrf	??_BlockerTest& (0+255),b
 17184  003F58  2BAB               	incf	??_BlockerTest& (0+255),f,b
 17185  003F5A  D002               	goto	u8438
 17186  003F5C                     u8430:
 17187  003F5C  0100               	movlb	0	; () banked
 17188  003F5E  6BAB               	clrf	??_BlockerTest& (0+255),b
 17189  003F60                     u8438:
 17190  003F60  0100               	movlb	0	; () banked
 17191  003F62  51AB               	movf	??_BlockerTest& (0+255),w,b
 17192  003F64  0100               	movlb	0	; () banked
 17193  003F66  6F90               	movwf	(?_printf+2)& (0+255),b
 17194  003F68  6B91               	clrf	(?_printf+3)& (0+255),b
 17195  003F6A  ECC1  F00B         	call	_printf	;wreg free
 17196  003F6E                     l9146:
 17197  003F6E  A281               	btfss	3969,1,c	;volatile
 17198  003F70  D791               	goto	l9104
 17199  003F72  D7E5               	goto	l9142
 17200  003F74                     __end_of_BlockerTest:
 17201                           	opt stack 0
 17202                           tblptru	equ	0xFF8
 17203                           tblptrh	equ	0xFF7
 17204                           tblptrl	equ	0xFF6
 17205                           tablat	equ	0xFF5
 17206                           prodh	equ	0xFF4
 17207                           prodl	equ	0xFF3
 17208                           intcon	equ	0xFF2
 17209                           intcon2	equ	0xFF1
 17210                           intcon3	equ	0xFF0
 17211                           postinc0	equ	0xFEE
 17212                           wreg	equ	0xFE8
 17213                           postdec1	equ	0xFE5
 17214                           fsr1l	equ	0xFE1
 17215                           indf2	equ	0xFDF
 17216                           postinc2	equ	0xFDE
 17217                           postdec2	equ	0xFDD
 17218                           fsr2h	equ	0xFDA
 17219                           fsr2l	equ	0xFD9
 17220                           status	equ	0xFD8
 17221                           
 17222 ;; *************** function _printf *****************
 17223 ;; Defined at:
 17224 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17227 ;;		 -> STR_131(18), STR_130(18), STR_129(17), STR_128(17), 
 17228 ;;		 -> STR_127(18), STR_126(18), STR_125(18), STR_124(18), 
 17229 ;;		 -> STR_123(18), STR_122(18), STR_121(17), STR_120(17), 
 17230 ;;		 -> STR_119(17), STR_118(17), STR_117(17), STR_116(17), 
 17231 ;;		 -> STR_115(17), STR_114(17), STR_113(18), STR_112(17), 
 17232 ;;		 -> STR_111(15), STR_110(15), STR_109(15), STR_108(17), 
 17233 ;;		 -> STR_107(17), STR_106(17), STR_105(16), STR_104(17), 
 17234 ;;		 -> STR_103(17), STR_102(17), STR_101(17), STR_100(17), 
 17235 ;;		 -> STR_99(17), STR_98(15), STR_97(11), STR_96(17), 
 17236 ;;		 -> STR_95(11), STR_94(17), STR_93(14), STR_92(15), 
 17237 ;;		 -> STR_91(14), STR_90(10), STR_89(9), STR_88(9), 
 17238 ;;		 -> STR_87(10), STR_86(10), STR_85(16), STR_84(15), 
 17239 ;;		 -> STR_83(3), STR_82(15), STR_81(13), STR_80(14), 
 17240 ;;		 -> STR_79(8), STR_78(14), STR_77(15), STR_76(12), 
 17241 ;;		 -> STR_75(14), STR_74(17), STR_73(14), STR_72(15), 
 17242 ;;		 -> STR_71(17), STR_70(17), STR_69(7), STR_68(21), 
 17243 ;;		 -> STR_67(13), STR_66(11), STR_65(8), STR_64(18), 
 17244 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 17245 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 17246 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 17247 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 17248 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 17249 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 17250 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 17251 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 17252 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 17253 ;;		 -> STR_2(14), STR_1(18), 
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;  tmpval          4    0        struct .
 17256 ;;  width           2   41[BANK0 ] int 
 17257 ;;  val             2   37[BANK0 ] unsigned int 
 17258 ;;  len             2   35[BANK0 ] unsigned int 
 17259 ;;  ap              2   33[BANK0 ] PTR void [1]
 17260 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17261 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17262 ;;		 -> STR_132(7), ID@res2(2), ID@res1(2), count_total(2), 
 17263 ;;		 -> printRTC@month(4), UI@month(4), 
 17264 ;;  c               1   40[BANK0 ] char 
 17265 ;;  flag            1   39[BANK0 ] unsigned char 
 17266 ;;  prec            1   30[BANK0 ] char 
 17267 ;; Return value:  Size  Location     Type
 17268 ;;                  2   14[BANK0 ] int 
 17269 ;; Registers used:
 17270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17276 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17277 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17278 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;Total ram usage:       29 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    9
 17283 ;; This function calls:
 17284 ;;		___lwdiv
 17285 ;;		___lwmod
 17286 ;;		___wmul
 17287 ;;		_isdigit
 17288 ;;		_putch
 17289 ;; This function is called by:
 17290 ;;		_UI
 17291 ;;		_change_state_to_menu_start
 17292 ;;		_change_state_to_menu_12
 17293 ;;		_change_state_to_menu_22
 17294 ;;		_printRTC
 17295 ;;		_ID
 17296 ;;		_EEPROM_write
 17297 ;;		_Test
 17298 ;;		_algorithmTest
 17299 ;;		_sensorTest
 17300 ;;		_actuatorTest
 17301 ;;		_BothServos
 17302 ;;		_PortTestDC
 17303 ;;		_PlatformTest
 17304 ;;		_SpeedTest
 17305 ;;		_BlockerTest
 17306 ;;		_arm
 17307 ;;		_PortTestPusher
 17308 ;;		_ToggleTestA5
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312                           	psect	text54
 17313  001782                     __ptext54:
 17314                           	opt stack 0
 17315  001782                     _printf:
 17316                           	opt stack 18
 17317                           
 17318                           ;doprnt.c: 466: va_list ap;
 17319                           ;doprnt.c: 499: signed char c;
 17320                           ;doprnt.c: 501: int width;
 17321                           ;doprnt.c: 506: signed char prec;
 17322                           ;doprnt.c: 508: unsigned char flag;
 17323                           ;doprnt.c: 523: union {
 17324                           ;doprnt.c: 524: unsigned long vd;
 17325                           ;doprnt.c: 525: double integ;
 17326                           ;doprnt.c: 526: } tmpval;
 17327                           ;doprnt.c: 528: unsigned int val;
 17328                           ;doprnt.c: 529: unsigned len;
 17329                           ;doprnt.c: 530: const char * cp;
 17330                           ;doprnt.c: 533: *ap = __va_start();
 17331                           
 17332                           ;incstack = 0
 17333  001782  0E90               	movlw	low (?_printf+2)
 17334  001784  0100               	movlb	0	; () banked
 17335  001786  6FA1               	movwf	printf@ap& (0+255),b
 17336  001788  0E00               	movlw	high (?_printf+2)
 17337  00178A  0100               	movlb	0	; () banked
 17338  00178C  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17339                           
 17340                           ;doprnt.c: 536: while(c = *f++) {
 17341  00178E  D205               	goto	l6814
 17342  001790                     l6684:
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;doprnt.c: 538: if(c != '%')
 17346  001790  0E25               	movlw	37
 17347  001792  0100               	movlb	0	; () banked
 17348  001794  19A8               	xorwf	printf@c& (0+255),w,b
 17349  001796  B4D8               	btfsc	status,2,c
 17350  001798  D005               	goto	l6688
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;doprnt.c: 540: {
 17354                           ;doprnt.c: 541: (putch(c) );
 17355  00179A  0100               	movlb	0	; () banked
 17356  00179C  51A8               	movf	printf@c& (0+255),w,b
 17357  00179E  ECC3  F02D         	call	_putch
 17358                           
 17359                           ;doprnt.c: 542: continue;
 17360  0017A2  D1FB               	goto	l6814
 17361  0017A4                     l6688:
 17362                           
 17363                           ;doprnt.c: 543: }
 17364                           ;doprnt.c: 546: width = 0;
 17365  0017A4  0E00               	movlw	0
 17366  0017A6  0100               	movlb	0	; () banked
 17367  0017A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 17368  0017AA  0E00               	movlw	0
 17369  0017AC  6FA9               	movwf	printf@width& (0+255),b
 17370                           
 17371                           ;doprnt.c: 548: flag = 0;
 17372  0017AE  0E00               	movlw	0
 17373  0017B0  0100               	movlb	0	; () banked
 17374  0017B2  6FA7               	movwf	printf@flag& (0+255),b
 17375                           
 17376                           ; BSR set to: 0
 17377                           ;doprnt.c: 551: switch(*f) {
 17378                           
 17379                           ;doprnt.c: 550: for(;;) {
 17380  0017B4  D005               	goto	l6694
 17381  0017B6                     l6690:
 17382                           
 17383                           ;doprnt.c: 580: flag |= 0x04;
 17384  0017B6  0100               	movlb	0	; () banked
 17385  0017B8  85A7               	bsf	printf@flag& (0+255),2,b
 17386                           
 17387                           ;doprnt.c: 581: f++;
 17388  0017BA  0100               	movlb	0	; () banked
 17389  0017BC  4B8E               	infsnz	printf@f& (0+255),f,b
 17390  0017BE  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17391  0017C0                     l6694:
 17392  0017C0  C08E  FFF6         	movff	printf@f,tblptrl
 17393  0017C4  C08F  FFF7         	movff	printf@f+1,tblptrh
 17394  0017C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17395  0017C8  6AF8               	clrf	tblptru,c
 17396  0017CA                     	endif
 17397  0017CA                     	if	0	;tblptru may be non-zero
 17398  0017CA                     	endif
 17399  0017CA  0008               	tblrd		*
 17400  0017CC  50F5               	movf	tablat,w,c
 17401                           
 17402                           ; Switch size 1, requested type "space"
 17403                           ; Number of cases is 1, Range of values is 48 to 48
 17404                           ; switch strategies available:
 17405                           ; Name         Instructions Cycles
 17406                           ; simple_byte            4     3 (average)
 17407                           ;	Chosen strategy is simple_byte
 17408  0017CE  0A30               	xorlw	48	; case 48
 17409  0017D0  B4D8               	btfsc	status,2,c
 17410  0017D2  D7F1               	goto	l6690
 17411                           
 17412                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17413                           
 17414                           ;doprnt.c: 586: }
 17415                           
 17416                           ;doprnt.c: 585: break;
 17417  0017D4  C08E  FFF6         	movff	printf@f,tblptrl
 17418  0017D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 17419  0017DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17420  0017DC  6AF8               	clrf	tblptru,c
 17421  0017DE                     	endif
 17422  0017DE                     	if	0	;tblptru may be non-zero
 17423  0017DE                     	endif
 17424  0017DE  0008               	tblrd		*
 17425  0017E0  50F5               	movf	tablat,w,c
 17426  0017E2  ECD7  F02C         	call	_isdigit
 17427  0017E6  A0D8               	btfss	status,0,c
 17428  0017E8  D0D2               	goto	l6742
 17429                           
 17430                           ;doprnt.c: 598: width = 0;
 17431  0017EA  0E00               	movlw	0
 17432  0017EC  0100               	movlb	0	; () banked
 17433  0017EE  6FAA               	movwf	(printf@width+1)& (0+255),b
 17434  0017F0  0E00               	movlw	0
 17435  0017F2  6FA9               	movwf	printf@width& (0+255),b
 17436  0017F4                     l6700:
 17437                           
 17438                           ;doprnt.c: 600: width *= 10;
 17439  0017F4  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17440  0017F8  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17441  0017FC  0E00               	movlw	0
 17442  0017FE  0100               	movlb	0	; () banked
 17443  001800  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17444  001802  0E0A               	movlw	10
 17445  001804  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17446  001806  EC40  F02B         	call	___wmul	;wreg free
 17447  00180A  C080  F0A9         	movff	?___wmul,printf@width
 17448  00180E  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17449                           
 17450                           ;doprnt.c: 601: width += *f++ - '0';
 17451  001812  0ED0               	movlw	208
 17452  001814  0100               	movlb	0	; () banked
 17453  001816  6F9A               	movwf	??_printf& (0+255),b
 17454  001818  0EFF               	movlw	255
 17455  00181A  0100               	movlb	0	; () banked
 17456  00181C  6F9B               	movwf	(??_printf+1)& (0+255),b
 17457  00181E  C08E  FFF6         	movff	printf@f,tblptrl
 17458  001822  C08F  FFF7         	movff	printf@f+1,tblptrh
 17459  001826                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17460  001826  6AF8               	clrf	tblptru,c
 17461  001828                     	endif
 17462  001828                     	if	0	;tblptru may be non-zero
 17463  001828                     	endif
 17464  001828  0008               	tblrd		*
 17465  00182A  50F5               	movf	tablat,w,c
 17466  00182C  0100               	movlb	0	; () banked
 17467  00182E  6F9C               	movwf	(??_printf+2)& (0+255),b
 17468  001830  6B9D               	clrf	(??_printf+3)& (0+255),b
 17469  001832  0100               	movlb	0	; () banked
 17470  001834  519A               	movf	??_printf& (0+255),w,b
 17471  001836  0100               	movlb	0	; () banked
 17472  001838  279C               	addwf	(??_printf+2)& (0+255),f,b
 17473  00183A  0100               	movlb	0	; () banked
 17474  00183C  519B               	movf	(??_printf+1)& (0+255),w,b
 17475  00183E  0100               	movlb	0	; () banked
 17476  001840  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17477  001842  0100               	movlb	0	; () banked
 17478  001844  519C               	movf	(??_printf+2)& (0+255),w,b
 17479  001846  0100               	movlb	0	; () banked
 17480  001848  27A9               	addwf	printf@width& (0+255),f,b
 17481  00184A  0100               	movlb	0	; () banked
 17482  00184C  519D               	movf	(??_printf+3)& (0+255),w,b
 17483  00184E  0100               	movlb	0	; () banked
 17484  001850  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17485                           
 17486                           ; BSR set to: 0
 17487  001852  0100               	movlb	0	; () banked
 17488  001854  4B8E               	infsnz	printf@f& (0+255),f,b
 17489  001856  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17490                           
 17491                           ; BSR set to: 0
 17492                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17493  001858  C08E  FFF6         	movff	printf@f,tblptrl
 17494  00185C  C08F  FFF7         	movff	printf@f+1,tblptrh
 17495  001860                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17496  001860  6AF8               	clrf	tblptru,c
 17497  001862                     	endif
 17498  001862                     	if	0	;tblptru may be non-zero
 17499  001862                     	endif
 17500  001862  0008               	tblrd		*
 17501  001864  50F5               	movf	tablat,w,c
 17502  001866  ECD7  F02C         	call	_isdigit
 17503  00186A  A0D8               	btfss	status,0,c
 17504  00186C  D090               	goto	l6742
 17505  00186E  D7C2               	goto	l6700
 17506  001870                     l6708:
 17507                           
 17508                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17509  001870  C0A1  FFD9         	movff	printf@ap,fsr2l
 17510  001874  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17511  001878  CFDE F09F          	movff	postinc2,printf@cp
 17512  00187C  CFDD F0A0          	movff	postdec2,printf@cp+1
 17513  001880  0E02               	movlw	2
 17514  001882  0100               	movlb	0	; () banked
 17515  001884  27A1               	addwf	printf@ap& (0+255),f,b
 17516  001886  0E00               	movlw	0
 17517  001888  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17518                           
 17519                           ; BSR set to: 0
 17520                           ;doprnt.c: 740: if(!cp)
 17521  00188A  0100               	movlb	0	; () banked
 17522  00188C  519F               	movf	printf@cp& (0+255),w,b
 17523  00188E  0100               	movlb	0	; () banked
 17524  001890  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17525  001892  A4D8               	btfss	status,2,c
 17526  001894  D006               	goto	l6716
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;doprnt.c: 741: cp = "(null)";
 17530  001896  0EB5               	movlw	low STR_132
 17531  001898  0100               	movlb	0	; () banked
 17532  00189A  6F9F               	movwf	printf@cp& (0+255),b
 17533  00189C  0EFF               	movlw	high STR_132
 17534  00189E  0100               	movlb	0	; () banked
 17535  0018A0  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17536  0018A2                     l6716:
 17537                           
 17538                           ; BSR set to: 0
 17539                           ;doprnt.c: 745: len = 0;
 17540  0018A2  0E00               	movlw	0
 17541  0018A4  0100               	movlb	0	; () banked
 17542  0018A6  6FA4               	movwf	(printf@len+1)& (0+255),b
 17543  0018A8  0E00               	movlw	0
 17544  0018AA  6FA3               	movwf	printf@len& (0+255),b
 17545                           
 17546                           ;doprnt.c: 746: while(cp[len])
 17547  0018AC  D003               	goto	l6720
 17548  0018AE                     l6718:
 17549                           
 17550                           ;doprnt.c: 747: len++;
 17551  0018AE  0100               	movlb	0	; () banked
 17552  0018B0  4BA3               	infsnz	printf@len& (0+255),f,b
 17553  0018B2  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17554  0018B4                     l6720:
 17555                           
 17556                           ; BSR set to: 0
 17557  0018B4  0100               	movlb	0	; () banked
 17558  0018B6  51A3               	movf	printf@len& (0+255),w,b
 17559  0018B8  0100               	movlb	0	; () banked
 17560  0018BA  259F               	addwf	printf@cp& (0+255),w,b
 17561  0018BC  0100               	movlb	0	; () banked
 17562  0018BE  6F9A               	movwf	??_printf& (0+255),b
 17563  0018C0  0100               	movlb	0	; () banked
 17564  0018C2  51A4               	movf	(printf@len+1)& (0+255),w,b
 17565  0018C4  0100               	movlb	0	; () banked
 17566  0018C6  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17567  0018C8  0100               	movlb	0	; () banked
 17568  0018CA  6F9B               	movwf	(??_printf+1)& (0+255),b
 17569  0018CC  C09A  FFF6         	movff	??_printf,tblptrl
 17570  0018D0  C09B  FFF7         	movff	??_printf+1,tblptrh
 17571  0018D4  0E00               	movlw	low (__mediumconst shr (0+16))
 17572  0018D6  6EF8               	movwf	tblptru,c
 17573  0018D8  0E0F               	movlw	(high __ramtop+-1)
 17574  0018DA  64F7               	cpfsgt	tblptrh,c
 17575  0018DC  D003               	bra	u5257
 17576  0018DE  0008               	tblrd		*
 17577  0018E0  50F5               	movf	tablat,w,c
 17578  0018E2  D005               	bra	u5250
 17579  0018E4                     u5257:
 17580  0018E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17581  0018E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17582  0018EC  50EF               	movf	indf0,w,c
 17583  0018EE                     u5250:
 17584  0018EE  0900               	iorlw	0
 17585  0018F0  A4D8               	btfss	status,2,c
 17586  0018F2  D7DD               	goto	l6718
 17587                           
 17588                           ;doprnt.c: 757: if(width > len)
 17589  0018F4  0100               	movlb	0	; () banked
 17590  0018F6  51A9               	movf	printf@width& (0+255),w,b
 17591  0018F8  0100               	movlb	0	; () banked
 17592  0018FA  5DA3               	subwf	printf@len& (0+255),w,b
 17593  0018FC  0100               	movlb	0	; () banked
 17594  0018FE  51AA               	movf	(printf@width+1)& (0+255),w,b
 17595  001900  0100               	movlb	0	; () banked
 17596  001902  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17597  001904  B0D8               	btfsc	status,0,c
 17598  001906  D009               	goto	l6726
 17599                           
 17600                           ; BSR set to: 0
 17601                           ;doprnt.c: 758: width -= len;
 17602  001908  0100               	movlb	0	; () banked
 17603  00190A  51A3               	movf	printf@len& (0+255),w,b
 17604  00190C  0100               	movlb	0	; () banked
 17605  00190E  5FA9               	subwf	printf@width& (0+255),f,b
 17606  001910  0100               	movlb	0	; () banked
 17607  001912  51A4               	movf	(printf@len+1)& (0+255),w,b
 17608  001914  0100               	movlb	0	; () banked
 17609  001916  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17610  001918  D009               	goto	l6730
 17611  00191A                     l6726:
 17612                           
 17613                           ; BSR set to: 0
 17614                           ;doprnt.c: 759: else
 17615                           ;doprnt.c: 760: width = 0;
 17616  00191A  0E00               	movlw	0
 17617  00191C  0100               	movlb	0	; () banked
 17618  00191E  6FAA               	movwf	(printf@width+1)& (0+255),b
 17619  001920  0E00               	movlw	0
 17620  001922  6FA9               	movwf	printf@width& (0+255),b
 17621                           
 17622                           ; BSR set to: 0
 17623                           ;doprnt.c: 764: while(width--)
 17624  001924  D003               	goto	l6730
 17625  001926                     l6728:
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;doprnt.c: 765: (putch(' ') );
 17629  001926  0E20               	movlw	32
 17630  001928  ECC3  F02D         	call	_putch
 17631  00192C                     l6730:
 17632  00192C  0100               	movlb	0	; () banked
 17633  00192E  07A9               	decf	printf@width& (0+255),f,b
 17634  001930  A0D8               	btfss	status,0,c
 17635  001932  07AA               	decf	(printf@width+1)& (0+255),f,b
 17636  001934  0100               	movlb	0	; () banked
 17637  001936  29A9               	incf	printf@width& (0+255),w,b
 17638  001938  E1F6               	bnz	l6728
 17639  00193A  0100               	movlb	0	; () banked
 17640  00193C  29AA               	incf	(printf@width+1)& (0+255),w,b
 17641  00193E  B4D8               	btfsc	status,2,c
 17642  001940  D017               	goto	l6736
 17643  001942  D7F1               	goto	l6728
 17644  001944                     l6732:
 17645                           
 17646                           ; BSR set to: 0
 17647                           ;doprnt.c: 768: (putch(*cp++) );
 17648  001944  C09F  FFF6         	movff	printf@cp,tblptrl
 17649  001948  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17650  00194C  0E00               	movlw	low (__mediumconst shr (0+16))
 17651  00194E  6EF8               	movwf	tblptru,c
 17652  001950  0E0F               	movlw	(high __ramtop+-1)
 17653  001952  64F7               	cpfsgt	tblptrh,c
 17654  001954  D003               	bra	u5297
 17655  001956  0008               	tblrd		*
 17656  001958  50F5               	movf	tablat,w,c
 17657  00195A  D005               	bra	u5290
 17658  00195C                     u5297:
 17659  00195C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17660  001960  CFF7 FFEA          	movff	tblptrh,fsr0h
 17661  001964  50EF               	movf	indf0,w,c
 17662  001966                     u5290:
 17663  001966  ECC3  F02D         	call	_putch
 17664  00196A  0100               	movlb	0	; () banked
 17665  00196C  4B9F               	infsnz	printf@cp& (0+255),f,b
 17666  00196E  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17667  001970                     l6736:
 17668                           
 17669                           ; BSR set to: 0
 17670  001970  0100               	movlb	0	; () banked
 17671  001972  07A3               	decf	printf@len& (0+255),f,b
 17672  001974  A0D8               	btfss	status,0,c
 17673  001976  07A4               	decf	(printf@len+1)& (0+255),f,b
 17674  001978  0100               	movlb	0	; () banked
 17675  00197A  29A3               	incf	printf@len& (0+255),w,b
 17676  00197C  E1E3               	bnz	l6732
 17677  00197E  0100               	movlb	0	; () banked
 17678  001980  29A4               	incf	(printf@len+1)& (0+255),w,b
 17679  001982  B4D8               	btfsc	status,2,c
 17680  001984  D10A               	goto	l6814
 17681  001986  D7DE               	goto	l6732
 17682  001988                     l6738:
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;doprnt.c: 818: flag |= 0x40;
 17686  001988  0100               	movlb	0	; () banked
 17687  00198A  8DA7               	bsf	printf@flag& (0+255),6,b
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;doprnt.c: 822: }
 17691                           
 17692                           ;doprnt.c: 819: break;
 17693  00198C  D01D               	goto	l1510
 17694  00198E                     l6742:
 17695  00198E  C08E  FFF6         	movff	printf@f,tblptrl
 17696  001992  C08F  FFF7         	movff	printf@f+1,tblptrh
 17697  001996  0100               	movlb	0	; () banked
 17698  001998  4B8E               	infsnz	printf@f& (0+255),f,b
 17699  00199A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17700  00199C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17701  00199C  6AF8               	clrf	tblptru,c
 17702  00199E                     	endif
 17703  00199E                     	if	0	;tblptru may be non-zero
 17704  00199E                     	endif
 17705  00199E  0008               	tblrd		*
 17706  0019A0  CFF5 F0A8          	movff	tablat,printf@c
 17707  0019A4  0100               	movlb	0	; () banked
 17708  0019A6  51A8               	movf	printf@c& (0+255),w,b
 17709                           
 17710                           ; Switch size 1, requested type "space"
 17711                           ; Number of cases is 5, Range of values is 0 to 117
 17712                           ; switch strategies available:
 17713                           ; Name         Instructions Cycles
 17714                           ; simple_byte           16     9 (average)
 17715                           ;	Chosen strategy is simple_byte
 17716  0019A8  0A00               	xorlw	0	; case 0
 17717  0019AA  B4D8               	btfsc	status,2,c
 17718  0019AC  0012               	return	
 17719  0019AE  0A64               	xorlw	100	; case 100
 17720  0019B0  B4D8               	btfsc	status,2,c
 17721  0019B2  D00A               	goto	l1510
 17722  0019B4  0A0D               	xorlw	13	; case 105
 17723  0019B6  B4D8               	btfsc	status,2,c
 17724  0019B8  D007               	goto	l1510
 17725  0019BA  0A1A               	xorlw	26	; case 115
 17726  0019BC  B4D8               	btfsc	status,2,c
 17727  0019BE  D758               	goto	l6708
 17728  0019C0  0A06               	xorlw	6	; case 117
 17729  0019C2  B4D8               	btfsc	status,2,c
 17730  0019C4  D7E1               	goto	l6738
 17731  0019C6  D0E9               	goto	l6814
 17732  0019C8                     l1510:
 17733                           
 17734                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17735  0019C8  0100               	movlb	0	; () banked
 17736  0019CA  BDA7               	btfsc	printf@flag& (0+255),6,b
 17737  0019CC  D019               	goto	l6754
 17738                           
 17739                           ; BSR set to: 0
 17740                           ;doprnt.c: 1253: {
 17741                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17742  0019CE  C0A1  FFD9         	movff	printf@ap,fsr2l
 17743  0019D2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17744  0019D6  CFDE F0A5          	movff	postinc2,printf@val
 17745  0019DA  CFDD F0A6          	movff	postdec2,printf@val+1
 17746                           
 17747                           ; BSR set to: 0
 17748  0019DE  0E02               	movlw	2
 17749  0019E0  0100               	movlb	0	; () banked
 17750  0019E2  27A1               	addwf	printf@ap& (0+255),f,b
 17751  0019E4  0E00               	movlw	0
 17752  0019E6  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17753                           
 17754                           ; BSR set to: 0
 17755                           ;doprnt.c: 1261: if((int)val < 0) {
 17756  0019E8  0100               	movlb	0	; () banked
 17757  0019EA  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17758  0019EC  D016               	goto	l6758
 17759                           
 17760                           ; BSR set to: 0
 17761                           ;doprnt.c: 1262: flag |= 0x03;
 17762  0019EE  0E03               	movlw	3
 17763  0019F0  0100               	movlb	0	; () banked
 17764  0019F2  13A7               	iorwf	printf@flag& (0+255),f,b
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;doprnt.c: 1263: val = -val;
 17768  0019F4  0100               	movlb	0	; () banked
 17769  0019F6  6DA5               	negf	printf@val& (0+255),b
 17770  0019F8  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17771  0019FA  B0D8               	btfsc	status,0,c
 17772  0019FC  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17773                           
 17774                           ; BSR set to: 0
 17775                           ;doprnt.c: 1264: }
 17776                           ;doprnt.c: 1266: }
 17777  0019FE  D00D               	goto	l6758
 17778  001A00                     l6754:
 17779                           
 17780                           ; BSR set to: 0
 17781                           ;doprnt.c: 1268: else
 17782                           ;doprnt.c: 1273: {
 17783                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17784  001A00  C0A1  FFD9         	movff	printf@ap,fsr2l
 17785  001A04  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17786  001A08  CFDE F0A5          	movff	postinc2,printf@val
 17787  001A0C  CFDD F0A6          	movff	postdec2,printf@val+1
 17788                           
 17789                           ; BSR set to: 0
 17790  001A10  0E02               	movlw	2
 17791  001A12  0100               	movlb	0	; () banked
 17792  001A14  27A1               	addwf	printf@ap& (0+255),f,b
 17793  001A16  0E00               	movlw	0
 17794  001A18  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17795  001A1A                     l6758:
 17796                           
 17797                           ; BSR set to: 0
 17798                           ;doprnt.c: 1287: }
 17799                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17800  001A1A  0E01               	movlw	1
 17801  001A1C  0100               	movlb	0	; () banked
 17802  001A1E  6FA8               	movwf	printf@c& (0+255),b
 17803  001A20                     l6760:
 17804                           
 17805                           ; BSR set to: 0
 17806  001A20  0E05               	movlw	5
 17807  001A22  0100               	movlb	0	; () banked
 17808  001A24  19A8               	xorwf	printf@c& (0+255),w,b
 17809  001A26  B4D8               	btfsc	status,2,c
 17810  001A28  D019               	goto	l6772
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;doprnt.c: 1306: if(val < dpowers[c])
 17814                           
 17815                           ; BSR set to: 0
 17816                           
 17817                           ; BSR set to: 0
 17818  001A2A  0100               	movlb	0	; () banked
 17819  001A2C  51A8               	movf	printf@c& (0+255),w,b
 17820  001A2E  0D02               	mullw	2
 17821  001A30  0E9A               	movlw	low _dpowers
 17822  001A32  24F3               	addwf	prodl,w,c
 17823  001A34  6EF6               	movwf	tblptrl,c
 17824  001A36  0EFA               	movlw	high _dpowers
 17825  001A38  20F4               	addwfc	prodh,w,c
 17826  001A3A  6EF7               	movwf	tblptrh,c
 17827  001A3C                     	if	1	;There are 3 active tblptr bytes
 17828  001A3C  6AF8               	clrf	tblptru,c
 17829  001A3E  0E00               	movlw	low (__mediumconst shr (0+16))
 17830  001A40  22F8               	addwfc	tblptru,f,c
 17831  001A42                     	endif
 17832  001A42  0009               	tblrd		*+
 17833  001A44  50F5               	movf	tablat,w,c
 17834  001A46  0100               	movlb	0	; () banked
 17835  001A48  5DA5               	subwf	printf@val& (0+255),w,b
 17836  001A4A  0009               	tblrd		*+
 17837  001A4C  50F5               	movf	tablat,w,c
 17838  001A4E  0100               	movlb	0	; () banked
 17839  001A50  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17840  001A52  A0D8               	btfss	status,0,c
 17841  001A54  D003               	goto	l6772
 17842                           
 17843                           ; BSR set to: 0
 17844                           
 17845                           ; BSR set to: 0
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;doprnt.c: 1307: break;
 17849  001A56  0100               	movlb	0	; () banked
 17850  001A58  2BA8               	incf	printf@c& (0+255),f,b
 17851  001A5A  D7E2               	goto	l6760
 17852  001A5C                     l6772:
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17856  001A5C  0100               	movlb	0	; () banked
 17857  001A5E  51A9               	movf	printf@width& (0+255),w,b
 17858  001A60  0100               	movlb	0	; () banked
 17859  001A62  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17860  001A64  B4D8               	btfsc	status,2,c
 17861  001A66  D00B               	goto	l6778
 17862                           
 17863                           ; BSR set to: 0
 17864  001A68  C0A7  F09A         	movff	printf@flag,??_printf
 17865  001A6C  0E03               	movlw	3
 17866  001A6E  0100               	movlb	0	; () banked
 17867  001A70  179A               	andwf	??_printf& (0+255),f,b
 17868  001A72  B4D8               	btfsc	status,2,c
 17869  001A74  D004               	goto	l6778
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;doprnt.c: 1346: width--;
 17873  001A76  0100               	movlb	0	; () banked
 17874  001A78  07A9               	decf	printf@width& (0+255),f,b
 17875  001A7A  A0D8               	btfss	status,0,c
 17876  001A7C  07AA               	decf	(printf@width+1)& (0+255),f,b
 17877  001A7E                     l6778:
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;doprnt.c: 1381: if(width > c)
 17881  001A7E  0E80               	movlw	128
 17882  001A80  0100               	movlb	0	; () banked
 17883  001A82  BFA8               	btfsc	printf@c& (0+255),7,b
 17884  001A84  0E7F               	movlw	127
 17885  001A86  0100               	movlb	0	; () banked
 17886  001A88  6F9A               	movwf	??_printf& (0+255),b
 17887  001A8A  0100               	movlb	0	; () banked
 17888  001A8C  51A9               	movf	printf@width& (0+255),w,b
 17889  001A8E  0100               	movlb	0	; () banked
 17890  001A90  5DA8               	subwf	printf@c& (0+255),w,b
 17891  001A92  0100               	movlb	0	; () banked
 17892  001A94  51AA               	movf	(printf@width+1)& (0+255),w,b
 17893  001A96  0A80               	xorlw	128
 17894  001A98  0100               	movlb	0	; () banked
 17895  001A9A  599A               	subwfb	??_printf& (0+255),w,b
 17896  001A9C  B0D8               	btfsc	status,0,c
 17897  001A9E  D00B               	goto	l6782
 17898                           
 17899                           ; BSR set to: 0
 17900                           ;doprnt.c: 1382: width -= c;
 17901  001AA0  0100               	movlb	0	; () banked
 17902  001AA2  51A8               	movf	printf@c& (0+255),w,b
 17903  001AA4  0100               	movlb	0	; () banked
 17904  001AA6  5FA9               	subwf	printf@width& (0+255),f,b
 17905  001AA8  0E00               	movlw	0
 17906  001AAA  0100               	movlb	0	; () banked
 17907  001AAC  BFA8               	btfsc	printf@c& (0+255),7,b
 17908  001AAE  0EFF               	movlw	255
 17909  001AB0  0100               	movlb	0	; () banked
 17910  001AB2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17911  001AB4  D005               	goto	l6784
 17912  001AB6                     l6782:
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;doprnt.c: 1383: else
 17916                           ;doprnt.c: 1384: width = 0;
 17917  001AB6  0E00               	movlw	0
 17918  001AB8  0100               	movlb	0	; () banked
 17919  001ABA  6FAA               	movwf	(printf@width+1)& (0+255),b
 17920  001ABC  0E00               	movlw	0
 17921  001ABE  6FA9               	movwf	printf@width& (0+255),b
 17922  001AC0                     l6784:
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;doprnt.c: 1387: if(flag & 0x04) {
 17926  001AC0  0100               	movlb	0	; () banked
 17927  001AC2  A5A7               	btfss	printf@flag& (0+255),2,b
 17928  001AC4  D018               	goto	l6796
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;doprnt.c: 1392: if(flag & 0x03)
 17932  001AC6  C0A7  F09A         	movff	printf@flag,??_printf
 17933  001ACA  0E03               	movlw	3
 17934  001ACC  0100               	movlb	0	; () banked
 17935  001ACE  179A               	andwf	??_printf& (0+255),f,b
 17936  001AD0  B4D8               	btfsc	status,2,c
 17937  001AD2  D003               	goto	l6790
 17938                           
 17939                           ; BSR set to: 0
 17940                           ;doprnt.c: 1393: (putch('-') );
 17941  001AD4  0E2D               	movlw	45
 17942  001AD6  ECC3  F02D         	call	_putch
 17943  001ADA                     l6790:
 17944                           
 17945                           ;doprnt.c: 1415: if(width)
 17946  001ADA  0100               	movlb	0	; () banked
 17947  001ADC  51A9               	movf	printf@width& (0+255),w,b
 17948  001ADE  0100               	movlb	0	; () banked
 17949  001AE0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17950  001AE2  B4D8               	btfsc	status,2,c
 17951  001AE4  D025               	goto	l6806
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;doprnt.c: 1417: (putch('0') );
 17955                           
 17956                           ; BSR set to: 0
 17957                           
 17958                           ;doprnt.c: 1416: do
 17959  001AE6  0E30               	movlw	48
 17960  001AE8  ECC3  F02D         	call	_putch
 17961                           
 17962                           ;doprnt.c: 1418: while(--width);
 17963  001AEC  0100               	movlb	0	; () banked
 17964  001AEE  07A9               	decf	printf@width& (0+255),f,b
 17965  001AF0  A0D8               	btfss	status,0,c
 17966  001AF2  07AA               	decf	(printf@width+1)& (0+255),f,b
 17967  001AF4  D7F2               	goto	l6790
 17968  001AF6                     l6796:
 17969                           
 17970                           ; BSR set to: 0
 17971                           ;doprnt.c: 1422: {
 17972                           ;doprnt.c: 1424: if(width
 17973                           ;doprnt.c: 1428: )
 17974  001AF6  0100               	movlb	0	; () banked
 17975  001AF8  51A9               	movf	printf@width& (0+255),w,b
 17976  001AFA  0100               	movlb	0	; () banked
 17977  001AFC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17978  001AFE  B4D8               	btfsc	status,2,c
 17979  001B00  D00D               	goto	l6802
 17980  001B02                     l6798:
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;doprnt.c: 1430: (putch(' ') );
 17984  001B02  0E20               	movlw	32
 17985  001B04  ECC3  F02D         	call	_putch
 17986                           
 17987                           ;doprnt.c: 1431: while(--width);
 17988  001B08  0100               	movlb	0	; () banked
 17989  001B0A  07A9               	decf	printf@width& (0+255),f,b
 17990  001B0C  A0D8               	btfss	status,0,c
 17991  001B0E  07AA               	decf	(printf@width+1)& (0+255),f,b
 17992  001B10  0100               	movlb	0	; () banked
 17993  001B12  51A9               	movf	printf@width& (0+255),w,b
 17994  001B14  0100               	movlb	0	; () banked
 17995  001B16  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17996  001B18  A4D8               	btfss	status,2,c
 17997  001B1A  D7F3               	goto	l6798
 17998  001B1C                     l6802:
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;doprnt.c: 1438: if(flag & 0x03)
 18002  001B1C  C0A7  F09A         	movff	printf@flag,??_printf
 18003  001B20  0E03               	movlw	3
 18004  001B22  0100               	movlb	0	; () banked
 18005  001B24  179A               	andwf	??_printf& (0+255),f,b
 18006  001B26  B4D8               	btfsc	status,2,c
 18007  001B28  D003               	goto	l6806
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;doprnt.c: 1439: (putch('-') );
 18011  001B2A  0E2D               	movlw	45
 18012  001B2C  ECC3  F02D         	call	_putch
 18013  001B30                     l6806:
 18014                           
 18015                           ;doprnt.c: 1469: }
 18016                           ;doprnt.c: 1472: prec = c;
 18017  001B30  C0A8  F09E         	movff	printf@c,printf@prec
 18018                           
 18019                           ;doprnt.c: 1474: while(prec--) {
 18020  001B34  D02C               	goto	l6812
 18021  001B36                     l6808:
 18022                           
 18023                           ;doprnt.c: 1478: {
 18024                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18025  001B36  0100               	movlb	0	; () banked
 18026  001B38  519E               	movf	printf@prec& (0+255),w,b
 18027  001B3A  0D02               	mullw	2
 18028  001B3C  0E9A               	movlw	low _dpowers
 18029  001B3E  24F3               	addwf	prodl,w,c
 18030  001B40  6EF6               	movwf	tblptrl,c
 18031  001B42  0EFA               	movlw	high _dpowers
 18032  001B44  20F4               	addwfc	prodh,w,c
 18033  001B46  6EF7               	movwf	tblptrh,c
 18034  001B48                     	if	1	;There are 3 active tblptr bytes
 18035  001B48  6AF8               	clrf	tblptru,c
 18036  001B4A  0E00               	movlw	low (__mediumconst shr (0+16))
 18037  001B4C  22F8               	addwfc	tblptru,f,c
 18038  001B4E                     	endif
 18039  001B4E  0009               	tblrd		*+
 18040  001B50  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18041  001B54  000A               	tblrd		*-
 18042  001B56  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18043  001B5A  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18044  001B5E  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18045  001B62  EC96  F027         	call	___lwdiv	;wreg free
 18046  001B66  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18047  001B6A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18048  001B6E  0E00               	movlw	0
 18049  001B70  0100               	movlb	0	; () banked
 18050  001B72  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18051  001B74  0E0A               	movlw	10
 18052  001B76  6F89               	movwf	___lwmod@divisor& (0+255),b
 18053  001B78  ECE4  F028         	call	___lwmod	;wreg free
 18054  001B7C  0100               	movlb	0	; () banked
 18055  001B7E  5187               	movf	?___lwmod& (0+255),w,b
 18056  001B80  0F30               	addlw	48
 18057  001B82  0100               	movlb	0	; () banked
 18058  001B84  6FA8               	movwf	printf@c& (0+255),b
 18059                           
 18060                           ; BSR set to: 0
 18061                           ;doprnt.c: 1523: }
 18062                           ;doprnt.c: 1524: (putch(c) );
 18063  001B86  0100               	movlb	0	; () banked
 18064  001B88  51A8               	movf	printf@c& (0+255),w,b
 18065  001B8A  ECC3  F02D         	call	_putch
 18066  001B8E                     l6812:
 18067  001B8E  0100               	movlb	0	; () banked
 18068  001B90  079E               	decf	printf@prec& (0+255),f,b
 18069  001B92  0100               	movlb	0	; () banked
 18070  001B94  299E               	incf	printf@prec& (0+255),w,b
 18071  001B96  A4D8               	btfss	status,2,c
 18072  001B98  D7CE               	goto	l6808
 18073  001B9A                     l6814:
 18074  001B9A  C08E  FFF6         	movff	printf@f,tblptrl
 18075  001B9E  C08F  FFF7         	movff	printf@f+1,tblptrh
 18076  001BA2  0100               	movlb	0	; () banked
 18077  001BA4  4B8E               	infsnz	printf@f& (0+255),f,b
 18078  001BA6  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18079  001BA8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18080  001BA8  6AF8               	clrf	tblptru,c
 18081  001BAA                     	endif
 18082  001BAA                     	if	0	;tblptru may be non-zero
 18083  001BAA                     	endif
 18084  001BAA  0008               	tblrd		*
 18085  001BAC  CFF5 F0A8          	movff	tablat,printf@c
 18086  001BB0  0100               	movlb	0	; () banked
 18087  001BB2  51A8               	movf	printf@c& (0+255),w,b
 18088  001BB4  B4D8               	btfsc	status,2,c
 18089  001BB6  0012               	return	
 18090  001BB8  D5EB               	goto	l6684
 18091  001BBA                     __end_of_printf:
 18092                           	opt stack 0
 18093                           tblptru	equ	0xFF8
 18094                           tblptrh	equ	0xFF7
 18095                           tblptrl	equ	0xFF6
 18096                           tablat	equ	0xFF5
 18097                           prodh	equ	0xFF4
 18098                           prodl	equ	0xFF3
 18099                           intcon	equ	0xFF2
 18100                           intcon2	equ	0xFF1
 18101                           intcon3	equ	0xFF0
 18102                           indf0	equ	0xFEF
 18103                           postinc0	equ	0xFEE
 18104                           fsr0h	equ	0xFEA
 18105                           fsr0l	equ	0xFE9
 18106                           wreg	equ	0xFE8
 18107                           postdec1	equ	0xFE5
 18108                           fsr1l	equ	0xFE1
 18109                           indf2	equ	0xFDF
 18110                           postinc2	equ	0xFDE
 18111                           postdec2	equ	0xFDD
 18112                           fsr2h	equ	0xFDA
 18113                           fsr2l	equ	0xFD9
 18114                           status	equ	0xFD8
 18115                           
 18116 ;; *************** function _putch *****************
 18117 ;; Defined at:
 18118 ;;		line 20 in file "lcd.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;  data            1    wreg     unsigned char 
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;  data            1    2[BANK0 ] unsigned char 
 18123 ;; Return value:  Size  Location     Type
 18124 ;;                  1    wreg      void 
 18125 ;; Registers used:
 18126 ;;		wreg, status,2, status,0, cstack
 18127 ;; Tracked objects:
 18128 ;;		On entry : 0/0
 18129 ;;		On exit  : 0/0
 18130 ;;		Unchanged: 0/0
 18131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;Total ram usage:        1 bytes
 18137 ;; Hardware stack levels used:    1
 18138 ;; Hardware stack levels required when called:    8
 18139 ;; This function calls:
 18140 ;;		_lcdNibble
 18141 ;; This function is called by:
 18142 ;;		_printf
 18143 ;; This function uses a non-reentrant model
 18144 ;;
 18145                           
 18146                           	psect	text55
 18147  005B86                     __ptext55:
 18148                           	opt stack 0
 18149  005B86                     _putch:
 18150                           	opt stack 18
 18151                           
 18152                           ;incstack = 0
 18153                           ;putch@data stored from wreg
 18154  005B86  0100               	movlb	0	; () banked
 18155  005B88  6F82               	movwf	putch@data& (0+255),b
 18156                           
 18157                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18158  005B8A  848C               	bsf	3980,2,c	;volatile
 18159                           
 18160                           ;lcd.c: 22: lcdNibble(data);
 18161  005B8C  0100               	movlb	0	; () banked
 18162  005B8E  5182               	movf	putch@data& (0+255),w,b
 18163  005B90  EC7C  F028         	call	_lcdNibble
 18164  005B94  0012               	return		;funcret
 18165  005B96                     __end_of_putch:
 18166                           	opt stack 0
 18167                           tblptru	equ	0xFF8
 18168                           tblptrh	equ	0xFF7
 18169                           tblptrl	equ	0xFF6
 18170                           tablat	equ	0xFF5
 18171                           prodh	equ	0xFF4
 18172                           prodl	equ	0xFF3
 18173                           intcon	equ	0xFF2
 18174                           intcon2	equ	0xFF1
 18175                           intcon3	equ	0xFF0
 18176                           indf0	equ	0xFEF
 18177                           postinc0	equ	0xFEE
 18178                           fsr0h	equ	0xFEA
 18179                           fsr0l	equ	0xFE9
 18180                           wreg	equ	0xFE8
 18181                           postdec1	equ	0xFE5
 18182                           fsr1l	equ	0xFE1
 18183                           indf2	equ	0xFDF
 18184                           postinc2	equ	0xFDE
 18185                           postdec2	equ	0xFDD
 18186                           fsr2h	equ	0xFDA
 18187                           fsr2l	equ	0xFD9
 18188                           status	equ	0xFD8
 18189                           
 18190 ;; *************** function _isdigit *****************
 18191 ;; Defined at:
 18192 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18193 ;; Parameters:    Size  Location     Type
 18194 ;;  c               1    wreg     unsigned char 
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;  c               1    2[BANK0 ] unsigned char 
 18197 ;; Return value:  Size  Location     Type
 18198 ;;		None               void
 18199 ;; Registers used:
 18200 ;;		wreg, status,2, status,0
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18210 ;;Total ram usage:        3 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:    7
 18213 ;; This function calls:
 18214 ;;		Nothing
 18215 ;; This function is called by:
 18216 ;;		_printf
 18217 ;; This function uses a non-reentrant model
 18218 ;;
 18219                           
 18220                           	psect	text56
 18221  0059AE                     __ptext56:
 18222                           	opt stack 0
 18223  0059AE                     _isdigit:
 18224                           	opt stack 19
 18225                           
 18226                           ;incstack = 0
 18227                           ;isdigit@c stored from wreg
 18228  0059AE  0100               	movlb	0	; () banked
 18229  0059B0  6F82               	movwf	isdigit@c& (0+255),b
 18230  0059B2  0E00               	movlw	0
 18231  0059B4  0100               	movlb	0	; () banked
 18232  0059B6  6F81               	movwf	_isdigit$2094& (0+255),b
 18233                           
 18234                           ; BSR set to: 0
 18235  0059B8  0E3A               	movlw	58
 18236  0059BA  0100               	movlb	0	; () banked
 18237  0059BC  6182               	cpfslt	isdigit@c& (0+255),b
 18238  0059BE  D007               	goto	l6532
 18239                           
 18240                           ; BSR set to: 0
 18241  0059C0  0E2F               	movlw	47
 18242  0059C2  0100               	movlb	0	; () banked
 18243  0059C4  6582               	cpfsgt	isdigit@c& (0+255),b
 18244  0059C6  D003               	goto	l6532
 18245                           
 18246                           ; BSR set to: 0
 18247  0059C8  0E01               	movlw	1
 18248  0059CA  0100               	movlb	0	; () banked
 18249  0059CC  6F81               	movwf	_isdigit$2094& (0+255),b
 18250  0059CE                     l6532:
 18251                           
 18252                           ; BSR set to: 0
 18253  0059CE  C081  F080         	movff	_isdigit$2094,??_isdigit
 18254  0059D2  0100               	movlb	0	; () banked
 18255  0059D4  3180               	rrcf	??_isdigit& (0+255),w,b
 18256  0059D6  0012               	return	
 18257  0059D8                     __end_of_isdigit:
 18258                           	opt stack 0
 18259                           tblptru	equ	0xFF8
 18260                           tblptrh	equ	0xFF7
 18261                           tblptrl	equ	0xFF6
 18262                           tablat	equ	0xFF5
 18263                           prodh	equ	0xFF4
 18264                           prodl	equ	0xFF3
 18265                           intcon	equ	0xFF2
 18266                           intcon2	equ	0xFF1
 18267                           intcon3	equ	0xFF0
 18268                           indf0	equ	0xFEF
 18269                           postinc0	equ	0xFEE
 18270                           fsr0h	equ	0xFEA
 18271                           fsr0l	equ	0xFE9
 18272                           wreg	equ	0xFE8
 18273                           postdec1	equ	0xFE5
 18274                           fsr1l	equ	0xFE1
 18275                           indf2	equ	0xFDF
 18276                           postinc2	equ	0xFDE
 18277                           postdec2	equ	0xFDD
 18278                           fsr2h	equ	0xFDA
 18279                           fsr2l	equ	0xFD9
 18280                           status	equ	0xFD8
 18281                           
 18282 ;; *************** function ___wmul *****************
 18283 ;; Defined at:
 18284 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18285 ;; Parameters:    Size  Location     Type
 18286 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18287 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18288 ;; Auto vars:     Size  Location     Type
 18289 ;;  product         2    4[BANK0 ] unsigned int 
 18290 ;; Return value:  Size  Location     Type
 18291 ;;                  2    0[BANK0 ] unsigned int 
 18292 ;; Registers used:
 18293 ;;		wreg, status,2, status,0, prodl, prodh
 18294 ;; Tracked objects:
 18295 ;;		On entry : 0/0
 18296 ;;		On exit  : 0/0
 18297 ;;		Unchanged: 0/0
 18298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18299 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18302 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18303 ;;Total ram usage:        6 bytes
 18304 ;; Hardware stack levels used:    1
 18305 ;; Hardware stack levels required when called:    7
 18306 ;; This function calls:
 18307 ;;		Nothing
 18308 ;; This function is called by:
 18309 ;;		_printf
 18310 ;; This function uses a non-reentrant model
 18311 ;;
 18312                           
 18313                           	psect	text57
 18314  005680                     __ptext57:
 18315                           	opt stack 0
 18316  005680                     ___wmul:
 18317                           	opt stack 19
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;incstack = 0
 18321  005680  0100               	movlb	0	; () banked
 18322  005682  5180               	movf	___wmul@multiplier& (0+255),w,b
 18323  005684  0100               	movlb	0	; () banked
 18324  005686  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18325  005688  CFF3 F084          	movff	prodl,___wmul@product
 18326  00568C  CFF4 F085          	movff	prodh,___wmul@product+1
 18327  005690  0100               	movlb	0	; () banked
 18328  005692  5180               	movf	___wmul@multiplier& (0+255),w,b
 18329  005694  0100               	movlb	0	; () banked
 18330  005696  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18331  005698  50F3               	movf	prodl,w,c
 18332  00569A  0100               	movlb	0	; () banked
 18333  00569C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18334  00569E  0100               	movlb	0	; () banked
 18335  0056A0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18336  0056A2  0100               	movlb	0	; () banked
 18337  0056A4  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18338  0056A6  50F3               	movf	prodl,w,c
 18339  0056A8  0100               	movlb	0	; () banked
 18340  0056AA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18341                           
 18342                           ; BSR set to: 0
 18343  0056AC  C084  F080         	movff	___wmul@product,?___wmul
 18344  0056B0  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18345  0056B4  0012               	return	
 18346  0056B6                     __end_of___wmul:
 18347                           	opt stack 0
 18348                           tblptru	equ	0xFF8
 18349                           tblptrh	equ	0xFF7
 18350                           tblptrl	equ	0xFF6
 18351                           tablat	equ	0xFF5
 18352                           prodh	equ	0xFF4
 18353                           prodl	equ	0xFF3
 18354                           intcon	equ	0xFF2
 18355                           intcon2	equ	0xFF1
 18356                           intcon3	equ	0xFF0
 18357                           indf0	equ	0xFEF
 18358                           postinc0	equ	0xFEE
 18359                           fsr0h	equ	0xFEA
 18360                           fsr0l	equ	0xFE9
 18361                           wreg	equ	0xFE8
 18362                           postdec1	equ	0xFE5
 18363                           fsr1l	equ	0xFE1
 18364                           indf2	equ	0xFDF
 18365                           postinc2	equ	0xFDE
 18366                           postdec2	equ	0xFDD
 18367                           fsr2h	equ	0xFDA
 18368                           fsr2l	equ	0xFD9
 18369                           status	equ	0xFD8
 18370                           
 18371 ;; *************** function ___lwmod *****************
 18372 ;; Defined at:
 18373 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18374 ;; Parameters:    Size  Location     Type
 18375 ;;  dividend        2    7[BANK0 ] unsigned int 
 18376 ;;  divisor         2    9[BANK0 ] unsigned int 
 18377 ;; Auto vars:     Size  Location     Type
 18378 ;;  counter         1   11[BANK0 ] unsigned char 
 18379 ;; Return value:  Size  Location     Type
 18380 ;;                  2    7[BANK0 ] unsigned int 
 18381 ;; Registers used:
 18382 ;;		wreg, status,2, status,0
 18383 ;; Tracked objects:
 18384 ;;		On entry : 0/0
 18385 ;;		On exit  : 0/0
 18386 ;;		Unchanged: 0/0
 18387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18388 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18391 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18392 ;;Total ram usage:        5 bytes
 18393 ;; Hardware stack levels used:    1
 18394 ;; Hardware stack levels required when called:    7
 18395 ;; This function calls:
 18396 ;;		Nothing
 18397 ;; This function is called by:
 18398 ;;		_printf
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           	psect	text58
 18403  0051C8                     __ptext58:
 18404                           	opt stack 0
 18405  0051C8                     ___lwmod:
 18406                           	opt stack 19
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;incstack = 0
 18410  0051C8  0100               	movlb	0	; () banked
 18411  0051CA  5189               	movf	___lwmod@divisor& (0+255),w,b
 18412  0051CC  0100               	movlb	0	; () banked
 18413  0051CE  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18414  0051D0  B4D8               	btfsc	status,2,c
 18415  0051D2  D026               	goto	l1967
 18416                           
 18417                           ; BSR set to: 0
 18418  0051D4  0E01               	movlw	1
 18419  0051D6  0100               	movlb	0	; () banked
 18420  0051D8  6F8B               	movwf	___lwmod@counter& (0+255),b
 18421  0051DA  D006               	goto	l6570
 18422  0051DC                     l6568:
 18423                           
 18424                           ; BSR set to: 0
 18425  0051DC  0100               	movlb	0	; () banked
 18426  0051DE  90D8               	bcf	status,0,c
 18427  0051E0  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18428  0051E2  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18429  0051E4  0100               	movlb	0	; () banked
 18430  0051E6  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18431  0051E8                     l6570:
 18432                           
 18433                           ; BSR set to: 0
 18434  0051E8  0100               	movlb	0	; () banked
 18435  0051EA  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18436  0051EC  D7F7               	goto	l6568
 18437  0051EE                     l6572:
 18438                           
 18439                           ; BSR set to: 0
 18440  0051EE  0100               	movlb	0	; () banked
 18441  0051F0  5189               	movf	___lwmod@divisor& (0+255),w,b
 18442  0051F2  0100               	movlb	0	; () banked
 18443  0051F4  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18444  0051F6  0100               	movlb	0	; () banked
 18445  0051F8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18446  0051FA  0100               	movlb	0	; () banked
 18447  0051FC  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18448  0051FE  A0D8               	btfss	status,0,c
 18449  005200  D008               	goto	l6576
 18450                           
 18451                           ; BSR set to: 0
 18452  005202  0100               	movlb	0	; () banked
 18453  005204  5189               	movf	___lwmod@divisor& (0+255),w,b
 18454  005206  0100               	movlb	0	; () banked
 18455  005208  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18456  00520A  0100               	movlb	0	; () banked
 18457  00520C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18458  00520E  0100               	movlb	0	; () banked
 18459  005210  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18460  005212                     l6576:
 18461                           
 18462                           ; BSR set to: 0
 18463  005212  0100               	movlb	0	; () banked
 18464  005214  90D8               	bcf	status,0,c
 18465  005216  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18466  005218  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18467                           
 18468                           ; BSR set to: 0
 18469  00521A  0100               	movlb	0	; () banked
 18470  00521C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18471  00521E  D7E7               	goto	l6572
 18472  005220                     l1967:
 18473                           
 18474                           ; BSR set to: 0
 18475  005220  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18476  005224  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18477                           
 18478                           ; BSR set to: 0
 18479  005228  0012               	return		;funcret
 18480  00522A                     __end_of___lwmod:
 18481                           	opt stack 0
 18482                           tblptru	equ	0xFF8
 18483                           tblptrh	equ	0xFF7
 18484                           tblptrl	equ	0xFF6
 18485                           tablat	equ	0xFF5
 18486                           prodh	equ	0xFF4
 18487                           prodl	equ	0xFF3
 18488                           intcon	equ	0xFF2
 18489                           intcon2	equ	0xFF1
 18490                           intcon3	equ	0xFF0
 18491                           indf0	equ	0xFEF
 18492                           postinc0	equ	0xFEE
 18493                           fsr0h	equ	0xFEA
 18494                           fsr0l	equ	0xFE9
 18495                           wreg	equ	0xFE8
 18496                           postdec1	equ	0xFE5
 18497                           fsr1l	equ	0xFE1
 18498                           indf2	equ	0xFDF
 18499                           postinc2	equ	0xFDE
 18500                           postdec2	equ	0xFDD
 18501                           fsr2h	equ	0xFDA
 18502                           fsr2l	equ	0xFD9
 18503                           status	equ	0xFD8
 18504                           
 18505 ;; *************** function ___lwdiv *****************
 18506 ;; Defined at:
 18507 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18508 ;; Parameters:    Size  Location     Type
 18509 ;;  dividend        2    0[BANK0 ] unsigned int 
 18510 ;;  divisor         2    2[BANK0 ] unsigned int 
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;  quotient        2    4[BANK0 ] unsigned int 
 18513 ;;  counter         1    6[BANK0 ] unsigned char 
 18514 ;; Return value:  Size  Location     Type
 18515 ;;                  2    0[BANK0 ] unsigned int 
 18516 ;; Registers used:
 18517 ;;		wreg, status,2, status,0
 18518 ;; Tracked objects:
 18519 ;;		On entry : 0/0
 18520 ;;		On exit  : 0/0
 18521 ;;		Unchanged: 0/0
 18522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18524 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;Total ram usage:        7 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; Hardware stack levels required when called:    7
 18530 ;; This function calls:
 18531 ;;		Nothing
 18532 ;; This function is called by:
 18533 ;;		_printf
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           	psect	text59
 18538  004F2C                     __ptext59:
 18539                           	opt stack 0
 18540  004F2C                     ___lwdiv:
 18541                           	opt stack 19
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;incstack = 0
 18545  004F2C  0E00               	movlw	0
 18546  004F2E  0100               	movlb	0	; () banked
 18547  004F30  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18548  004F32  0E00               	movlw	0
 18549  004F34  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18550                           
 18551                           ; BSR set to: 0
 18552  004F36  0100               	movlb	0	; () banked
 18553  004F38  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18554  004F3A  0100               	movlb	0	; () banked
 18555  004F3C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18556  004F3E  B4D8               	btfsc	status,2,c
 18557  004F40  D02C               	goto	l1957
 18558                           
 18559                           ; BSR set to: 0
 18560  004F42  0E01               	movlw	1
 18561  004F44  0100               	movlb	0	; () banked
 18562  004F46  6F86               	movwf	___lwdiv@counter& (0+255),b
 18563  004F48  D006               	goto	l6550
 18564  004F4A                     l6548:
 18565                           
 18566                           ; BSR set to: 0
 18567  004F4A  0100               	movlb	0	; () banked
 18568  004F4C  90D8               	bcf	status,0,c
 18569  004F4E  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18570  004F50  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18571  004F52  0100               	movlb	0	; () banked
 18572  004F54  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18573  004F56                     l6550:
 18574                           
 18575                           ; BSR set to: 0
 18576  004F56  0100               	movlb	0	; () banked
 18577  004F58  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18578  004F5A  D7F7               	goto	l6548
 18579  004F5C                     l6552:
 18580                           
 18581                           ; BSR set to: 0
 18582  004F5C  0100               	movlb	0	; () banked
 18583  004F5E  90D8               	bcf	status,0,c
 18584  004F60  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18585  004F62  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18586                           
 18587                           ; BSR set to: 0
 18588  004F64  0100               	movlb	0	; () banked
 18589  004F66  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18590  004F68  0100               	movlb	0	; () banked
 18591  004F6A  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18592  004F6C  0100               	movlb	0	; () banked
 18593  004F6E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18594  004F70  0100               	movlb	0	; () banked
 18595  004F72  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18596  004F74  A0D8               	btfss	status,0,c
 18597  004F76  D00A               	goto	l6560
 18598                           
 18599                           ; BSR set to: 0
 18600  004F78  0100               	movlb	0	; () banked
 18601  004F7A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18602  004F7C  0100               	movlb	0	; () banked
 18603  004F7E  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18604  004F80  0100               	movlb	0	; () banked
 18605  004F82  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18606  004F84  0100               	movlb	0	; () banked
 18607  004F86  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18608                           
 18609                           ; BSR set to: 0
 18610  004F88  0100               	movlb	0	; () banked
 18611  004F8A  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18612  004F8C                     l6560:
 18613                           
 18614                           ; BSR set to: 0
 18615  004F8C  0100               	movlb	0	; () banked
 18616  004F8E  90D8               	bcf	status,0,c
 18617  004F90  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18618  004F92  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18619                           
 18620                           ; BSR set to: 0
 18621  004F94  0100               	movlb	0	; () banked
 18622  004F96  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18623  004F98  D7E1               	goto	l6552
 18624  004F9A                     l1957:
 18625                           
 18626                           ; BSR set to: 0
 18627  004F9A  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18628  004F9E  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18629                           
 18630                           ; BSR set to: 0
 18631  004FA2  0012               	return		;funcret
 18632  004FA4                     __end_of___lwdiv:
 18633                           	opt stack 0
 18634                           tblptru	equ	0xFF8
 18635                           tblptrh	equ	0xFF7
 18636                           tblptrl	equ	0xFF6
 18637                           tablat	equ	0xFF5
 18638                           prodh	equ	0xFF4
 18639                           prodl	equ	0xFF3
 18640                           intcon	equ	0xFF2
 18641                           intcon2	equ	0xFF1
 18642                           intcon3	equ	0xFF0
 18643                           indf0	equ	0xFEF
 18644                           postinc0	equ	0xFEE
 18645                           fsr0h	equ	0xFEA
 18646                           fsr0l	equ	0xFE9
 18647                           wreg	equ	0xFE8
 18648                           postdec1	equ	0xFE5
 18649                           fsr1l	equ	0xFE1
 18650                           indf2	equ	0xFDF
 18651                           postinc2	equ	0xFDE
 18652                           postdec2	equ	0xFDD
 18653                           fsr2h	equ	0xFDA
 18654                           fsr2l	equ	0xFD9
 18655                           status	equ	0xFD8
 18656                           
 18657 ;; *************** function _lcdInst *****************
 18658 ;; Defined at:
 18659 ;;		line 15 in file "lcd.c"
 18660 ;; Parameters:    Size  Location     Type
 18661 ;;  data            1    wreg     unsigned char 
 18662 ;; Auto vars:     Size  Location     Type
 18663 ;;  data            1    2[BANK0 ] unsigned char 
 18664 ;; Return value:  Size  Location     Type
 18665 ;;                  1    wreg      void 
 18666 ;; Registers used:
 18667 ;;		wreg, status,2, status,0, cstack
 18668 ;; Tracked objects:
 18669 ;;		On entry : 0/0
 18670 ;;		On exit  : 0/0
 18671 ;;		Unchanged: 0/0
 18672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18677 ;;Total ram usage:        1 bytes
 18678 ;; Hardware stack levels used:    1
 18679 ;; Hardware stack levels required when called:    8
 18680 ;; This function calls:
 18681 ;;		_lcdNibble
 18682 ;; This function is called by:
 18683 ;;		_UI
 18684 ;;		_change_state_to_menu_start
 18685 ;;		_change_state_to_menu_12
 18686 ;;		_change_state_to_menu_22
 18687 ;;		_initLCD
 18688 ;;		_printRTC
 18689 ;;		_Loading
 18690 ;;		_ID
 18691 ;;		_EEPROM_write
 18692 ;;		_Test
 18693 ;;		_algorithmTest
 18694 ;;		_sensorTest
 18695 ;;		_actuatorTest
 18696 ;;		_BothServos
 18697 ;;		_PortTestDC
 18698 ;;		_PlatformTest
 18699 ;;		_SpeedTest
 18700 ;;		_BlockerTest
 18701 ;;		_arm
 18702 ;;		_PortTestPusher
 18703 ;;		_ToggleTestA5
 18704 ;; This function uses a non-reentrant model
 18705 ;;
 18706                           
 18707                           	psect	text60
 18708  005B96                     __ptext60:
 18709                           	opt stack 0
 18710  005B96                     _lcdInst:
 18711                           	opt stack 20
 18712                           
 18713                           ; BSR set to: 0
 18714                           ;incstack = 0
 18715                           ;lcdInst@data stored from wreg
 18716  005B96  0100               	movlb	0	; () banked
 18717  005B98  6F82               	movwf	lcdInst@data& (0+255),b
 18718                           
 18719                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18720  005B9A  948C               	bcf	3980,2,c	;volatile
 18721                           
 18722                           ;lcd.c: 17: lcdNibble(data);
 18723  005B9C  0100               	movlb	0	; () banked
 18724  005B9E  5182               	movf	lcdInst@data& (0+255),w,b
 18725  005BA0  EC7C  F028         	call	_lcdNibble
 18726  005BA4  0012               	return		;funcret
 18727  005BA6                     __end_of_lcdInst:
 18728                           	opt stack 0
 18729                           tblptru	equ	0xFF8
 18730                           tblptrh	equ	0xFF7
 18731                           tblptrl	equ	0xFF6
 18732                           tablat	equ	0xFF5
 18733                           prodh	equ	0xFF4
 18734                           prodl	equ	0xFF3
 18735                           intcon	equ	0xFF2
 18736                           intcon2	equ	0xFF1
 18737                           intcon3	equ	0xFF0
 18738                           indf0	equ	0xFEF
 18739                           postinc0	equ	0xFEE
 18740                           fsr0h	equ	0xFEA
 18741                           fsr0l	equ	0xFE9
 18742                           wreg	equ	0xFE8
 18743                           postdec1	equ	0xFE5
 18744                           fsr1l	equ	0xFE1
 18745                           indf2	equ	0xFDF
 18746                           postinc2	equ	0xFDE
 18747                           postdec2	equ	0xFDD
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function _lcdNibble *****************
 18753 ;; Defined at:
 18754 ;;		line 25 in file "lcd.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;  data            1    wreg     unsigned char 
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;  data            1    1[BANK0 ] unsigned char 
 18759 ;;  temp            1    0[BANK0 ] unsigned char 
 18760 ;; Return value:  Size  Location     Type
 18761 ;;                  1    wreg      void 
 18762 ;; Registers used:
 18763 ;;		wreg, status,2, status,0
 18764 ;; Tracked objects:
 18765 ;;		On entry : 0/0
 18766 ;;		On exit  : 0/0
 18767 ;;		Unchanged: 0/0
 18768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18773 ;;Total ram usage:        2 bytes
 18774 ;; Hardware stack levels used:    1
 18775 ;; Hardware stack levels required when called:    7
 18776 ;; This function calls:
 18777 ;;		Nothing
 18778 ;; This function is called by:
 18779 ;;		_lcdInst
 18780 ;;		_putch
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           	psect	text61
 18785  0050F8                     __ptext61:
 18786                           	opt stack 0
 18787  0050F8                     _lcdNibble:
 18788                           	opt stack 20
 18789                           
 18790                           ;incstack = 0
 18791                           ;lcdNibble@data stored from wreg
 18792  0050F8  0100               	movlb	0	; () banked
 18793  0050FA  6F81               	movwf	lcdNibble@data& (0+255),b
 18794                           
 18795                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18796  0050FC  9EF2               	bcf	intcon,7,c	;volatile
 18797                           
 18798                           ;lcd.c: 28: char temp = data & 0xF0;
 18799  0050FE  0100               	movlb	0	; () banked
 18800  005100  5181               	movf	lcdNibble@data& (0+255),w,b
 18801  005102  0BF0               	andlw	240
 18802  005104  0100               	movlb	0	; () banked
 18803  005106  6F80               	movwf	lcdNibble@temp& (0+255),b
 18804                           
 18805                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18806  005108  508C               	movf	3980,w,c	;volatile
 18807  00510A  0B0F               	andlw	15
 18808  00510C  6E8C               	movwf	3980,c	;volatile
 18809                           
 18810                           ;lcd.c: 30: LATD = temp | LATD;
 18811  00510E  0100               	movlb	0	; () banked
 18812  005110  5180               	movf	lcdNibble@temp& (0+255),w,b
 18813  005112  108C               	iorwf	3980,w,c	;volatile
 18814  005114  6E8C               	movwf	3980,c	;volatile
 18815                           
 18816                           ; BSR set to: 0
 18817                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18818  005116  868C               	bsf	3980,3,c	;volatile
 18819                           
 18820                           ; BSR set to: 0
 18821                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18822  005118  0E42               	movlw	66
 18823  00511A                     u11447:
 18824  00511A  2EE8               	decfsz	wreg,f,c
 18825  00511C  D7FE               	bra	u11447
 18826  00511E  D000               	nop2	
 18827                           
 18828                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18829  005120  968C               	bcf	3980,3,c	;volatile
 18830                           
 18831                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18832  005122  0E42               	movlw	66
 18833  005124                     u11457:
 18834  005124  2EE8               	decfsz	wreg,f,c
 18835  005126  D7FE               	bra	u11457
 18836  005128  D000               	nop2	
 18837                           
 18838                           ;lcd.c: 37: data = data << 4;
 18839  00512A  0100               	movlb	0	; () banked
 18840  00512C  3981               	swapf	lcdNibble@data& (0+255),w,b
 18841  00512E  0BF0               	andlw	240
 18842  005130  0100               	movlb	0	; () banked
 18843  005132  6F81               	movwf	lcdNibble@data& (0+255),b
 18844                           
 18845                           ;lcd.c: 39: temp = data & 0xF0;
 18846  005134  0100               	movlb	0	; () banked
 18847  005136  5181               	movf	lcdNibble@data& (0+255),w,b
 18848  005138  0BF0               	andlw	240
 18849  00513A  0100               	movlb	0	; () banked
 18850  00513C  6F80               	movwf	lcdNibble@temp& (0+255),b
 18851                           
 18852                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18853  00513E  508C               	movf	3980,w,c	;volatile
 18854  005140  0B0F               	andlw	15
 18855  005142  6E8C               	movwf	3980,c	;volatile
 18856                           
 18857                           ;lcd.c: 41: LATD = temp | LATD;
 18858  005144  0100               	movlb	0	; () banked
 18859  005146  5180               	movf	lcdNibble@temp& (0+255),w,b
 18860  005148  108C               	iorwf	3980,w,c	;volatile
 18861  00514A  6E8C               	movwf	3980,c	;volatile
 18862                           
 18863                           ; BSR set to: 0
 18864                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18865  00514C  868C               	bsf	3980,3,c	;volatile
 18866                           
 18867                           ; BSR set to: 0
 18868                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18869  00514E  0E42               	movlw	66
 18870  005150                     u11467:
 18871  005150  2EE8               	decfsz	wreg,f,c
 18872  005152  D7FE               	bra	u11467
 18873  005154  D000               	nop2	
 18874                           
 18875                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18876  005156  968C               	bcf	3980,3,c	;volatile
 18877                           
 18878                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18879  005158  0E42               	movlw	66
 18880  00515A                     u11477:
 18881  00515A  2EE8               	decfsz	wreg,f,c
 18882  00515C  D7FE               	bra	u11477
 18883  00515E  D000               	nop2	
 18884                           
 18885                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18886  005160  8EF2               	bsf	intcon,7,c	;volatile
 18887  005162  0012               	return		;funcret
 18888  005164                     __end_of_lcdNibble:
 18889                           	opt stack 0
 18890                           tblptru	equ	0xFF8
 18891                           tblptrh	equ	0xFF7
 18892                           tblptrl	equ	0xFF6
 18893                           tablat	equ	0xFF5
 18894                           prodh	equ	0xFF4
 18895                           prodl	equ	0xFF3
 18896                           intcon	equ	0xFF2
 18897                           intcon2	equ	0xFF1
 18898                           intcon3	equ	0xFF0
 18899                           indf0	equ	0xFEF
 18900                           postinc0	equ	0xFEE
 18901                           fsr0h	equ	0xFEA
 18902                           fsr0l	equ	0xFE9
 18903                           wreg	equ	0xFE8
 18904                           postdec1	equ	0xFE5
 18905                           fsr1l	equ	0xFE1
 18906                           indf2	equ	0xFDF
 18907                           postinc2	equ	0xFDE
 18908                           postdec2	equ	0xFDD
 18909                           fsr2h	equ	0xFDA
 18910                           fsr2l	equ	0xFD9
 18911                           status	equ	0xFD8
 18912                           
 18913 ;; *************** function _handler *****************
 18914 ;; Defined at:
 18915 ;;		line 16 in file "interruptHandler.c"
 18916 ;; Parameters:    Size  Location     Type
 18917 ;;		None
 18918 ;; Auto vars:     Size  Location     Type
 18919 ;;		None
 18920 ;; Return value:  Size  Location     Type
 18921 ;;                  1    wreg      void 
 18922 ;; Registers used:
 18923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18924 ;; Tracked objects:
 18925 ;;		On entry : 0/0
 18926 ;;		On exit  : 0/0
 18927 ;;		Unchanged: 0/0
 18928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18931 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18932 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;Total ram usage:       16 bytes
 18934 ;; Hardware stack levels used:    1
 18935 ;; Hardware stack levels required when called:    6
 18936 ;; This function calls:
 18937 ;;		_printSortTimer
 18938 ;;		_updateArmState
 18939 ;;		_updateMenu
 18940 ;;		_updateServoStates
 18941 ;;		i2_change_state_to_menu_start
 18942 ;; This function is called by:
 18943 ;;		Interrupt level 2
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           	psect	intcode
 18948  000008                     __pintcode:
 18949                           	opt stack 0
 18950  000008                     _handler:
 18951                           	opt stack 18
 18952                           
 18953                           ;incstack = 0
 18954  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18955  00000A  ED25  F01C         	call	int_func,f	;refresh shadow registers
 18956                           tblptru	equ	0xFF8
 18957                           tblptrh	equ	0xFF7
 18958                           tblptrl	equ	0xFF6
 18959                           tablat	equ	0xFF5
 18960                           prodh	equ	0xFF4
 18961                           prodl	equ	0xFF3
 18962                           intcon	equ	0xFF2
 18963                           intcon2	equ	0xFF1
 18964                           intcon3	equ	0xFF0
 18965                           indf0	equ	0xFEF
 18966                           postinc0	equ	0xFEE
 18967                           fsr0h	equ	0xFEA
 18968                           fsr0l	equ	0xFE9
 18969                           wreg	equ	0xFE8
 18970                           postdec1	equ	0xFE5
 18971                           fsr1l	equ	0xFE1
 18972                           indf2	equ	0xFDF
 18973                           postinc2	equ	0xFDE
 18974                           postdec2	equ	0xFDD
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979                           	psect	intcode_body
 18980  00384A                     __pintcode_body:
 18981                           	opt stack 18
 18982  00384A                     int_func:
 18983                           	opt stack 18
 18984  00384A  0006               	pop		; remove dummy address from shadow register refresh
 18985  00384C  CFFA F04D          	movff	pclath,??_handler+2
 18986  003850  CFFB F04E          	movff	pclatu,??_handler+3
 18987  003854  CFE9 F04F          	movff	fsr0l,??_handler+4
 18988  003858  CFEA F050          	movff	fsr0h,??_handler+5
 18989  00385C  CFE1 F051          	movff	fsr1l,??_handler+6
 18990  003860  CFE2 F052          	movff	fsr1h,??_handler+7
 18991  003864  CFD9 F053          	movff	fsr2l,??_handler+8
 18992  003868  CFDA F054          	movff	fsr2h,??_handler+9
 18993  00386C  CFF3 F055          	movff	prodl,??_handler+10
 18994  003870  CFF4 F056          	movff	prodh,??_handler+11
 18995  003874  CFF6 F057          	movff	tblptrl,??_handler+12
 18996  003878  CFF7 F058          	movff	tblptrh,??_handler+13
 18997  00387C  CFF8 F059          	movff	tblptru,??_handler+14
 18998  003880  CFF5 F05A          	movff	tablat,??_handler+15
 18999                           
 19000                           ;interruptHandler.c: 18: if(INT1IF){
 19001  003884  A0F0               	btfss	intcon3,0,c	;volatile
 19002  003886  D034               	goto	i2l10148
 19003                           
 19004                           ;interruptHandler.c: 19: INT1IF = 0;
 19005  003888  90F0               	bcf	intcon3,0,c	;volatile
 19006                           
 19007                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 19008  00388A  3881               	swapf	3969,w,c	;volatile
 19009  00388C  0B0F               	andlw	15
 19010  00388E  0B0F               	andlw	15
 19011  003890  6E4B               	movwf	??_handler& (0+255),c
 19012  003892  6A4C               	clrf	(??_handler+1)& (0+255),c
 19013  003894  0E89               	movlw	low _keys
 19014  003896  244B               	addwf	??_handler,w,c
 19015  003898  6EF6               	movwf	tblptrl,c
 19016  00389A  0EFA               	movlw	high _keys
 19017  00389C  204C               	addwfc	??_handler+1,w,c
 19018  00389E  6EF7               	movwf	tblptrh,c
 19019  0038A0                     	if	1	;There are 3 active tblptr bytes
 19020  0038A0  6AF8               	clrf	tblptru,c
 19021  0038A2  0E00               	movlw	low (__mediumconst shr (0+16))
 19022  0038A4  22F8               	addwfc	tblptru,f,c
 19023  0038A6                     	endif
 19024  0038A6  0008               	tblrd		*
 19025  0038A8  CFF5 F07D          	movff	tablat,_input	;volatile
 19026                           
 19027                           ;interruptHandler.c: 21: if(input == '*'){
 19028  0038AC  0E2A               	movlw	42
 19029  0038AE  187D               	xorwf	_input,w,c	;volatile
 19030  0038B0  B4D8               	btfsc	status,2,c
 19031  0038B2  D00D               	goto	i2l10142
 19032  0038B4  D018               	goto	i2l10144
 19033  0038B6                     i2l10132:
 19034                           
 19035                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19036  0038B6  0E03               	movlw	3
 19037  0038B8  D007               	goto	L18
 19038  0038BA                     i2l10134:
 19039                           
 19040                           ; BSR set to: 0
 19041                           ;interruptHandler.c: 27: machine_state = UI_state;
 19042  0038BA  0E00               	movlw	0
 19043  0038BC  0100               	movlb	0	; () banked
 19044  0038BE  6FFC               	movwf	_machine_state& (0+255),b
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19048  0038C0  EC00  F02D         	call	i2_change_state_to_menu_start	;wreg free
 19049                           
 19050                           ;interruptHandler.c: 29: break;
 19051  0038C4  D015               	goto	i2l10148
 19052  0038C6                     i2l10138:
 19053                           
 19054                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19055  0038C6  0E02               	movlw	2
 19056  0038C8                     L18:
 19057  0038C8  0100               	movlb	0	; () banked
 19058  0038CA  6FFC               	movwf	_machine_state& (0+255),b
 19059                           
 19060                           ; BSR set to: 0
 19061                           ;interruptHandler.c: 33: }
 19062                           
 19063                           ;interruptHandler.c: 32: break;
 19064  0038CC  D011               	goto	i2l10148
 19065  0038CE                     i2l10142:
 19066  0038CE  0100               	movlb	0	; () banked
 19067  0038D0  51FC               	movf	_machine_state& (0+255),w,b
 19068                           
 19069                           ; Switch size 1, requested type "space"
 19070                           ; Number of cases is 3, Range of values is 0 to 3
 19071                           ; switch strategies available:
 19072                           ; Name         Instructions Cycles
 19073                           ; simple_byte           10     6 (average)
 19074                           ;	Chosen strategy is simple_byte
 19075  0038D2  0A00               	xorlw	0	; case 0
 19076  0038D4  B4D8               	btfsc	status,2,c
 19077  0038D6  D7EF               	goto	i2l10132
 19078  0038D8  0A01               	xorlw	1	; case 1
 19079  0038DA  B4D8               	btfsc	status,2,c
 19080  0038DC  D7F4               	goto	i2l10138
 19081  0038DE  0A02               	xorlw	2	; case 3
 19082  0038E0  B4D8               	btfsc	status,2,c
 19083  0038E2  D7EB               	goto	i2l10134
 19084                           
 19085                           ; BSR set to: 0
 19086                           ;interruptHandler.c: 34: }
 19087  0038E4  D005               	goto	i2l10148
 19088  0038E6                     i2l10144:
 19089                           
 19090                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19091  0038E6  0100               	movlb	0	; () banked
 19092  0038E8  51FC               	movf	_machine_state& (0+255),w,b
 19093  0038EA  B4D8               	btfsc	status,2,c
 19094                           
 19095                           ; BSR set to: 0
 19096                           ;interruptHandler.c: 36: updateMenu();
 19097  0038EC  EC56  F018         	call	_updateMenu	;wreg free
 19098  0038F0                     i2l10148:
 19099                           
 19100                           ;interruptHandler.c: 37: }
 19101                           ;interruptHandler.c: 38: }
 19102                           ;interruptHandler.c: 41: if(TMR0IF){
 19103  0038F0  A4F2               	btfss	intcon,2,c	;volatile
 19104  0038F2  D00C               	goto	i2l10162
 19105                           
 19106                           ;interruptHandler.c: 42: TMR0IF = 0;
 19107  0038F4  94F2               	bcf	intcon,2,c	;volatile
 19108                           
 19109                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19110  0038F6  0100               	movlb	0	; () banked
 19111  0038F8  05FC               	decf	_machine_state& (0+255),w,b
 19112  0038FA  A4D8               	btfss	status,2,c
 19113  0038FC  D007               	goto	i2l10162
 19114                           
 19115                           ; BSR set to: 0
 19116                           ;interruptHandler.c: 44: printSortTimer();
 19117  0038FE  ECB6  F019         	call	_printSortTimer	;wreg free
 19118                           
 19119                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19120  003902  0E85               	movlw	133
 19121  003904  6ED7               	movwf	4055,c	;volatile
 19122                           
 19123                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19124  003906  0EEE               	movlw	238
 19125  003908  6ED6               	movwf	4054,c	;volatile
 19126                           
 19127                           ;interruptHandler.c: 48: TMR0ON = 1;
 19128  00390A  8ED5               	bsf	4053,7,c	;volatile
 19129  00390C                     i2l10162:
 19130                           
 19131                           ;interruptHandler.c: 49: }
 19132                           ;interruptHandler.c: 50: }
 19133                           ;interruptHandler.c: 53: if(TMR1IF){
 19134  00390C  A09E               	btfss	3998,0,c	;volatile
 19135  00390E  D02A               	goto	i2l10190
 19136                           
 19137                           ;interruptHandler.c: 54: TMR1IF = 0;
 19138  003910  909E               	bcf	3998,0,c	;volatile
 19139                           
 19140                           ;interruptHandler.c: 55: TMR1ON = 0;
 19141  003912  90CD               	bcf	4045,0,c	;volatile
 19142                           
 19143                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19144  003914  0100               	movlb	0	; () banked
 19145  003916  05FC               	decf	_machine_state& (0+255),w,b
 19146  003918  A4D8               	btfss	status,2,c
 19147  00391A  D024               	goto	i2l10190
 19148                           
 19149                           ; BSR set to: 0
 19150                           ;interruptHandler.c: 57: if(was_low_1){
 19151  00391C  5077               	movf	_was_low_1,w,c	;volatile
 19152  00391E  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19153  003920  B4D8               	btfsc	status,2,c
 19154  003922  D00A               	goto	i2l1029
 19155                           
 19156                           ; BSR set to: 0
 19157                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19158  003924  828B               	bsf	3979,1,c	;volatile
 19159                           
 19160                           ; BSR set to: 0
 19161                           ;interruptHandler.c: 59: was_low_1 = 0;
 19162  003926  0E00               	movlw	0
 19163  003928  6E78               	movwf	_was_low_1+1,c	;volatile
 19164  00392A  0E00               	movlw	0
 19165  00392C  6E77               	movwf	_was_low_1,c	;volatile
 19166                           
 19167                           ; BSR set to: 0
 19168                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19169  00392E  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 19170                           
 19171                           ; BSR set to: 0
 19172                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19173  003932  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 19174                           
 19175                           ;interruptHandler.c: 62: }
 19176  003936  D00F               	goto	i2l10184
 19177  003938                     i2l1029:
 19178                           
 19179                           ; BSR set to: 0
 19180                           ;interruptHandler.c: 63: else{
 19181                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19182  003938  928B               	bcf	3979,1,c	;volatile
 19183                           
 19184                           ; BSR set to: 0
 19185                           ;interruptHandler.c: 65: was_low_1 = 1;
 19186  00393A  0E00               	movlw	0
 19187  00393C  6E78               	movwf	_was_low_1+1,c	;volatile
 19188  00393E  0E01               	movlw	1
 19189  003940  6E77               	movwf	_was_low_1,c	;volatile
 19190                           
 19191                           ; BSR set to: 0
 19192                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19193  003942  0100               	movlb	0	; () banked
 19194  003944  51DA               	movf	_servoTimes& (0+255),w,b
 19195  003946  0800               	sublw	0
 19196  003948  0F20               	addlw	32
 19197  00394A  6ECF               	movwf	4047,c	;volatile
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19201  00394C  0100               	movlb	0	; () banked
 19202  00394E  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 19203  003950  0800               	sublw	0
 19204  003952  0F20               	addlw	32
 19205  003954  6ECE               	movwf	4046,c	;volatile
 19206  003956                     i2l10184:
 19207                           
 19208                           ; BSR set to: 0
 19209                           ;interruptHandler.c: 68: }
 19210                           ;interruptHandler.c: 69: TMR1ON = 1;
 19211  003956  80CD               	bsf	4045,0,c	;volatile
 19212                           
 19213                           ; BSR set to: 0
 19214                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19215  003958  0E0A               	movlw	10
 19216  00395A  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19217  00395C  0E00               	movlw	0
 19218  00395E  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19219                           
 19220                           ; BSR set to: 0
 19221                           ;interruptHandler.c: 72: updateServoStates();
 19222  003960  EC14  F01E         	call	_updateServoStates	;wreg free
 19223  003964                     i2l10190:
 19224                           
 19225                           ;interruptHandler.c: 73: }
 19226                           ;interruptHandler.c: 74: }
 19227                           ;interruptHandler.c: 77: if(TMR2IF){
 19228  003964  A29E               	btfss	3998,1,c	;volatile
 19229  003966  D026               	goto	i2l10216
 19230                           
 19231                           ;interruptHandler.c: 80: TMR2IF = 0;
 19232  003968  929E               	bcf	3998,1,c	;volatile
 19233                           
 19234                           ;interruptHandler.c: 81: TMR2ON = 0;
 19235  00396A  94CA               	bcf	4042,2,c	;volatile
 19236                           
 19237                           ;interruptHandler.c: 82: timer2_counter++;
 19238  00396C  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19239  00396E  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19240                           
 19241                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19242  003970  0100               	movlb	0	; () banked
 19243  003972  05FC               	decf	_machine_state& (0+255),w,b
 19244  003974  A4D8               	btfss	status,2,c
 19245  003976  D01E               	goto	i2l10216
 19246                           
 19247                           ; BSR set to: 0
 19248                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19249  003978  5079               	movf	_was_low_2,w,c	;volatile
 19250  00397A  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19251  00397C  B4D8               	btfsc	status,2,c
 19252  00397E  D00A               	goto	i2l10206
 19253                           
 19254                           ; BSR set to: 0
 19255  003980  0E02               	movlw	2
 19256  003982  1873               	xorwf	_timer2_counter,w,c	;volatile
 19257  003984  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19258  003986  A4D8               	btfss	status,2,c
 19259  003988  D005               	goto	i2l10206
 19260                           
 19261                           ; BSR set to: 0
 19262                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19263  00398A  868A               	bsf	3978,3,c	;volatile
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;interruptHandler.c: 87: was_low_2 = 0;
 19267  00398C  0E00               	movlw	0
 19268  00398E  6E7A               	movwf	_was_low_2+1,c	;volatile
 19269  003990  0E00               	movlw	0
 19270  003992  D008               	goto	L19
 19271  003994                     i2l10206:
 19272                           
 19273                           ; BSR set to: 0
 19274                           ;interruptHandler.c: 90: else if(!was_low_2){
 19275  003994  5079               	movf	_was_low_2,w,c	;volatile
 19276  003996  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19277  003998  A4D8               	btfss	status,2,c
 19278  00399A  D009               	goto	i2l10212
 19279                           
 19280                           ; BSR set to: 0
 19281                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19282  00399C  968A               	bcf	3978,3,c	;volatile
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;interruptHandler.c: 92: was_low_2 = 1;
 19286  00399E  0E00               	movlw	0
 19287  0039A0  6E7A               	movwf	_was_low_2+1,c	;volatile
 19288  0039A2  0E01               	movlw	1
 19289  0039A4                     L19:
 19290  0039A4  6E79               	movwf	_was_low_2,c	;volatile
 19291                           
 19292                           ;interruptHandler.c: 93: timer2_counter = 0;
 19293  0039A6  0E00               	movlw	0
 19294  0039A8  6E74               	movwf	_timer2_counter+1,c	;volatile
 19295  0039AA  0E00               	movlw	0
 19296  0039AC  6E73               	movwf	_timer2_counter,c	;volatile
 19297  0039AE                     i2l10212:
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;interruptHandler.c: 94: }
 19301                           ;interruptHandler.c: 95: updateArmState();
 19302  0039AE  ECD0  F02A         	call	_updateArmState	;wreg free
 19303                           
 19304                           ;interruptHandler.c: 96: TMR2ON = 1;
 19305  0039B2  84CA               	bsf	4042,2,c	;volatile
 19306  0039B4                     i2l10216:
 19307                           
 19308                           ;interruptHandler.c: 97: }
 19309                           ;interruptHandler.c: 98: }
 19310                           ;interruptHandler.c: 101: if(TMR3IF){
 19311  0039B4  A2A1               	btfss	4001,1,c	;volatile
 19312  0039B6  D024               	goto	i2l1040
 19313                           
 19314                           ;interruptHandler.c: 102: TMR3IF = 0;
 19315  0039B8  92A1               	bcf	4001,1,c	;volatile
 19316                           
 19317                           ;interruptHandler.c: 103: TMR3ON = 0;
 19318  0039BA  90B1               	bcf	4017,0,c	;volatile
 19319                           
 19320                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19321  0039BC  0100               	movlb	0	; () banked
 19322  0039BE  05FC               	decf	_machine_state& (0+255),w,b
 19323  0039C0  A4D8               	btfss	status,2,c
 19324  0039C2  D01E               	goto	i2l1040
 19325                           
 19326                           ; BSR set to: 0
 19327                           ;interruptHandler.c: 105: if(was_low_3){
 19328  0039C4  507B               	movf	_was_low_3,w,c	;volatile
 19329  0039C6  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19330  0039C8  B4D8               	btfsc	status,2,c
 19331  0039CA  D00A               	goto	i2l1038
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19335  0039CC  848B               	bsf	3979,2,c	;volatile
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;interruptHandler.c: 107: was_low_3 = 0;
 19339  0039CE  0E00               	movlw	0
 19340  0039D0  6E7C               	movwf	_was_low_3+1,c	;volatile
 19341  0039D2  0E00               	movlw	0
 19342  0039D4  6E7B               	movwf	_was_low_3,c	;volatile
 19343                           
 19344                           ; BSR set to: 0
 19345                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19346  0039D6  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 19347                           
 19348                           ; BSR set to: 0
 19349                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19350  0039DA  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 19351                           
 19352                           ;interruptHandler.c: 110: }
 19353  0039DE  D00F               	goto	i2l10238
 19354  0039E0                     i2l1038:
 19355                           
 19356                           ; BSR set to: 0
 19357                           ;interruptHandler.c: 111: else{
 19358                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19359  0039E0  948B               	bcf	3979,2,c	;volatile
 19360                           
 19361                           ; BSR set to: 0
 19362                           ;interruptHandler.c: 113: was_low_3 = 1;
 19363  0039E2  0E00               	movlw	0
 19364  0039E4  6E7C               	movwf	_was_low_3+1,c	;volatile
 19365  0039E6  0E01               	movlw	1
 19366  0039E8  6E7B               	movwf	_was_low_3,c	;volatile
 19367                           
 19368                           ; BSR set to: 0
 19369                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19370  0039EA  0100               	movlb	0	; () banked
 19371  0039EC  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 19372  0039EE  0800               	sublw	0
 19373  0039F0  0F20               	addlw	32
 19374  0039F2  6EB3               	movwf	4019,c	;volatile
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19378  0039F4  0100               	movlb	0	; () banked
 19379  0039F6  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 19380  0039F8  0800               	sublw	0
 19381  0039FA  0F20               	addlw	32
 19382  0039FC  6EB2               	movwf	4018,c	;volatile
 19383  0039FE                     i2l10238:
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;interruptHandler.c: 116: }
 19387                           ;interruptHandler.c: 117: TMR3ON = 1;
 19388  0039FE  80B1               	bsf	4017,0,c	;volatile
 19389  003A00                     i2l1040:
 19390  003A00  C05A  FFF5         	movff	??_handler+15,tablat
 19391  003A04  C059  FFF8         	movff	??_handler+14,tblptru
 19392  003A08  C058  FFF7         	movff	??_handler+13,tblptrh
 19393  003A0C  C057  FFF6         	movff	??_handler+12,tblptrl
 19394  003A10  C056  FFF4         	movff	??_handler+11,prodh
 19395  003A14  C055  FFF3         	movff	??_handler+10,prodl
 19396  003A18  C054  FFDA         	movff	??_handler+9,fsr2h
 19397  003A1C  C053  FFD9         	movff	??_handler+8,fsr2l
 19398  003A20  C052  FFE2         	movff	??_handler+7,fsr1h
 19399  003A24  C051  FFE1         	movff	??_handler+6,fsr1l
 19400  003A28  C050  FFEA         	movff	??_handler+5,fsr0h
 19401  003A2C  C04F  FFE9         	movff	??_handler+4,fsr0l
 19402  003A30  C04E  FFFB         	movff	??_handler+3,pclatu
 19403  003A34  C04D  FFFA         	movff	??_handler+2,pclath
 19404  003A38  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19405  003A3A  0011               	retfie		f
 19406  003A3C                     __end_of_handler:
 19407                           	opt stack 0
 19408                           pclatu	equ	0xFFB
 19409                           pclath	equ	0xFFA
 19410                           tblptru	equ	0xFF8
 19411                           tblptrh	equ	0xFF7
 19412                           tblptrl	equ	0xFF6
 19413                           tablat	equ	0xFF5
 19414                           prodh	equ	0xFF4
 19415                           prodl	equ	0xFF3
 19416                           intcon	equ	0xFF2
 19417                           intcon2	equ	0xFF1
 19418                           intcon3	equ	0xFF0
 19419                           indf0	equ	0xFEF
 19420                           postinc0	equ	0xFEE
 19421                           fsr0h	equ	0xFEA
 19422                           fsr0l	equ	0xFE9
 19423                           wreg	equ	0xFE8
 19424                           postdec1	equ	0xFE5
 19425                           fsr1h	equ	0xFE2
 19426                           fsr1l	equ	0xFE1
 19427                           indf2	equ	0xFDF
 19428                           postinc2	equ	0xFDE
 19429                           postdec2	equ	0xFDD
 19430                           fsr2h	equ	0xFDA
 19431                           fsr2l	equ	0xFD9
 19432                           status	equ	0xFD8
 19433                           
 19434 ;; *************** function _updateServoStates *****************
 19435 ;; Defined at:
 19436 ;;		line 572 in file "sort.c"
 19437 ;; Parameters:    Size  Location     Type
 19438 ;;		None
 19439 ;; Auto vars:     Size  Location     Type
 19440 ;;		None
 19441 ;; Return value:  Size  Location     Type
 19442 ;;                  1    wreg      void 
 19443 ;; Registers used:
 19444 ;;		wreg, status,2, status,0, cstack
 19445 ;; Tracked objects:
 19446 ;;		On entry : 0/0
 19447 ;;		On exit  : 0/0
 19448 ;;		Unchanged: 0/0
 19449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19453 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19454 ;;Total ram usage:        2 bytes
 19455 ;; Hardware stack levels used:    1
 19456 ;; Hardware stack levels required when called:    1
 19457 ;; This function calls:
 19458 ;;		i2_updateServoPosition
 19459 ;; This function is called by:
 19460 ;;		_handler
 19461 ;; This function uses a non-reentrant model
 19462 ;;
 19463                           
 19464                           	psect	text63
 19465  003C28                     __ptext63:
 19466                           	opt stack 0
 19467  003C28                     _updateServoStates:
 19468                           	opt stack 22
 19469                           
 19470                           ;sort.c: 574: if(servo_timer_counter >= servo_timer_target){
 19471                           
 19472                           ;incstack = 0
 19473  003C28  506F               	movf	_servo_timer_target,w,c	;volatile
 19474  003C2A  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19475  003C2C  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19476  003C2E  0A80               	xorlw	128
 19477  003C30  6E09               	movwf	??_updateServoStates& (0+255),c
 19478  003C32  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19479  003C34  0A80               	xorlw	128
 19480  003C36  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19481  003C38  A0D8               	btfss	status,0,c
 19482  003C3A  0012               	return	
 19483                           
 19484                           ;sort.c: 576: if(f_panning_to_bin){
 19485  003C3C  5061               	movf	_f_panning_to_bin,w,c	;volatile
 19486  003C3E  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19487  003C40  A4D8               	btfss	status,2,c
 19488  003C42  D036               	goto	i2l10008
 19489  003C44  D05F               	goto	i2l10012
 19490  003C46                     i2l9982:
 19491                           
 19492                           ;sort.c: 580: updateServoPosition(1260, 3);
 19493  003C46  0E04               	movlw	4
 19494  003C48  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19495  003C4A  0EEC               	movlw	236
 19496  003C4C  6E01               	movwf	i2updateServoPosition@time_us,c
 19497  003C4E  0E00               	movlw	0
 19498  003C50  6E04               	movwf	i2updateServoPosition@timer+1,c
 19499  003C52  0E03               	movlw	3
 19500  003C54  6E03               	movwf	i2updateServoPosition@timer,c
 19501  003C56  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19502  003C5A  D025               	goto	i2l10002
 19503  003C5C                     i2l9986:
 19504                           
 19505                           ;sort.c: 582: servo_timer_target = 700;
 19506  003C5C  0E02               	movlw	2
 19507  003C5E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19508  003C60  0EBC               	movlw	188
 19509  003C62  6E6F               	movwf	_servo_timer_target,c	;volatile
 19510                           
 19511                           ;sort.c: 583: break;
 19512  003C64  D04A               	goto	i2l10010
 19513  003C66                     i2l9988:
 19514                           
 19515                           ;sort.c: 585: updateServoPosition(1260, 3);
 19516  003C66  0E04               	movlw	4
 19517  003C68  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19518  003C6A  0EEC               	movlw	236
 19519  003C6C  6E01               	movwf	i2updateServoPosition@time_us,c
 19520  003C6E  0E00               	movlw	0
 19521  003C70  6E04               	movwf	i2updateServoPosition@timer+1,c
 19522  003C72  0E03               	movlw	3
 19523  003C74  6E03               	movwf	i2updateServoPosition@timer,c
 19524  003C76  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19525  003C7A  D015               	goto	i2l10002
 19526  003C7C                     i2l9994:
 19527                           
 19528                           ;sort.c: 591: updateServoPosition(1390, 3);
 19529  003C7C  0E05               	movlw	5
 19530  003C7E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19531  003C80  0E6E               	movlw	110
 19532  003C82  6E01               	movwf	i2updateServoPosition@time_us,c
 19533  003C84  0E00               	movlw	0
 19534  003C86  6E04               	movwf	i2updateServoPosition@timer+1,c
 19535  003C88  0E03               	movlw	3
 19536  003C8A  6E03               	movwf	i2updateServoPosition@timer,c
 19537  003C8C  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19538  003C90  D00A               	goto	i2l10002
 19539  003C92                     i2l10000:
 19540                           
 19541                           ;sort.c: 596: updateServoPosition(1390, 3);
 19542  003C92  0E05               	movlw	5
 19543  003C94  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19544  003C96  0E6E               	movlw	110
 19545  003C98  6E01               	movwf	i2updateServoPosition@time_us,c
 19546  003C9A  0E00               	movlw	0
 19547  003C9C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19548  003C9E  0E03               	movlw	3
 19549  003CA0  6E03               	movwf	i2updateServoPosition@timer,c
 19550  003CA2  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19551  003CA6                     i2l10002:
 19552                           
 19553                           ;sort.c: 597: servo_timer_counter = 0;
 19554  003CA6  0E00               	movlw	0
 19555  003CA8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19556  003CAA  0E00               	movlw	0
 19557  003CAC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19558  003CAE  D7D6               	goto	i2l9986
 19559  003CB0                     i2l10008:
 19560  003CB0  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19561  003CB4  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19562                           
 19563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19564                           ; Switch size 1, requested type "space"
 19565                           ; Number of cases is 4, Range of values is 1 to 9
 19566                           ; switch strategies available:
 19567                           ; Name         Instructions Cycles
 19568                           ; simple_byte           13     7 (average)
 19569                           ;	Chosen strategy is simple_byte
 19570  003CB8  500A               	movf	??_updateServoStates+1,w,c
 19571  003CBA  0A01               	xorlw	1	; case 1
 19572  003CBC  B4D8               	btfsc	status,2,c
 19573  003CBE  D00A               	goto	i2l10686
 19574  003CC0  0A02               	xorlw	2	; case 3
 19575  003CC2  B4D8               	btfsc	status,2,c
 19576  003CC4  D00C               	goto	i2l10688
 19577  003CC6  0A05               	xorlw	5	; case 6
 19578  003CC8  B4D8               	btfsc	status,2,c
 19579  003CCA  D00E               	goto	i2l10690
 19580  003CCC  0A0F               	xorlw	15	; case 9
 19581  003CCE  B4D8               	btfsc	status,2,c
 19582  003CD0  D010               	goto	i2l10692
 19583  003CD2  D013               	goto	i2l10010
 19584  003CD4                     i2l10686:
 19585                           
 19586                           ; Switch size 1, requested type "space"
 19587                           ; Number of cases is 1, Range of values is 244 to 244
 19588                           ; switch strategies available:
 19589                           ; Name         Instructions Cycles
 19590                           ; simple_byte            4     3 (average)
 19591                           ;	Chosen strategy is simple_byte
 19592  003CD4  5009               	movf	??_updateServoStates,w,c
 19593  003CD6  0AF4               	xorlw	244	; case 244
 19594  003CD8  B4D8               	btfsc	status,2,c
 19595  003CDA  D7B5               	goto	i2l9982
 19596  003CDC  D00E               	goto	i2l10010
 19597  003CDE                     i2l10688:
 19598                           
 19599                           ; Switch size 1, requested type "space"
 19600                           ; Number of cases is 1, Range of values is 82 to 82
 19601                           ; switch strategies available:
 19602                           ; Name         Instructions Cycles
 19603                           ; simple_byte            4     3 (average)
 19604                           ;	Chosen strategy is simple_byte
 19605  003CDE  5009               	movf	??_updateServoStates,w,c
 19606  003CE0  0A52               	xorlw	82	; case 82
 19607  003CE2  B4D8               	btfsc	status,2,c
 19608  003CE4  D7C0               	goto	i2l9988
 19609  003CE6  D009               	goto	i2l10010
 19610  003CE8                     i2l10690:
 19611                           
 19612                           ; Switch size 1, requested type "space"
 19613                           ; Number of cases is 1, Range of values is 134 to 134
 19614                           ; switch strategies available:
 19615                           ; Name         Instructions Cycles
 19616                           ; simple_byte            4     3 (average)
 19617                           ;	Chosen strategy is simple_byte
 19618  003CE8  5009               	movf	??_updateServoStates,w,c
 19619  003CEA  0A86               	xorlw	134	; case 134
 19620  003CEC  B4D8               	btfsc	status,2,c
 19621  003CEE  D7C6               	goto	i2l9994
 19622  003CF0  D004               	goto	i2l10010
 19623  003CF2                     i2l10692:
 19624                           
 19625                           ; Switch size 1, requested type "space"
 19626                           ; Number of cases is 1, Range of values is 96 to 96
 19627                           ; switch strategies available:
 19628                           ; Name         Instructions Cycles
 19629                           ; simple_byte            4     3 (average)
 19630                           ;	Chosen strategy is simple_byte
 19631  003CF2  5009               	movf	??_updateServoStates,w,c
 19632  003CF4  0A60               	xorlw	96	; case 96
 19633  003CF6  B4D8               	btfsc	status,2,c
 19634  003CF8  D7CC               	goto	i2l10000
 19635  003CFA                     i2l10010:
 19636                           
 19637                           ;sort.c: 603: f_panning_to_bin = 0;
 19638  003CFA  0E00               	movlw	0
 19639  003CFC  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 19640  003CFE  0E00               	movlw	0
 19641  003D00  6E61               	movwf	_f_panning_to_bin,c	;volatile
 19642                           
 19643                           ;sort.c: 604: }
 19644  003D02  0012               	return	
 19645  003D04                     i2l10012:
 19646                           
 19647                           ;sort.c: 605: else if(pan_servo_state == 1200){
 19648  003D04  0EB0               	movlw	176
 19649  003D06  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19650  003D08  E15A               	bnz	i2l10042
 19651  003D0A  0E04               	movlw	4
 19652  003D0C  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19653  003D0E  A4D8               	btfss	status,2,c
 19654  003D10  D056               	goto	i2l10042
 19655                           
 19656                           ;sort.c: 607: servo_timer_counter = 0;
 19657  003D12  0E00               	movlw	0
 19658  003D14  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19659  003D16  0E00               	movlw	0
 19660  003D18  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19661                           
 19662                           ;sort.c: 608: }
 19663  003D1A  0012               	return	
 19664  003D1C                     i2l10016:
 19665                           
 19666                           ;sort.c: 613: updateServoPosition(1050, 3);
 19667  003D1C  0E04               	movlw	4
 19668  003D1E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19669  003D20  0E1A               	movlw	26
 19670  003D22  6E01               	movwf	i2updateServoPosition@time_us,c
 19671  003D24  0E00               	movlw	0
 19672  003D26  6E04               	movwf	i2updateServoPosition@timer+1,c
 19673  003D28  0E03               	movlw	3
 19674  003D2A  6E03               	movwf	i2updateServoPosition@timer,c
 19675  003D2C  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19676                           
 19677                           ;sort.c: 614: servo_timer_counter = 0;
 19678  003D30  0E00               	movlw	0
 19679  003D32  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19680  003D34  0E00               	movlw	0
 19681  003D36  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19682                           
 19683                           ;sort.c: 615: servo_timer_target = 750;
 19684  003D38  0E02               	movlw	2
 19685  003D3A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19686  003D3C  0EEE               	movlw	238
 19687  003D3E  6E6F               	movwf	_servo_timer_target,c	;volatile
 19688                           
 19689                           ;sort.c: 616: break;
 19690  003D40  0012               	return	
 19691  003D42                     i2l10022:
 19692                           
 19693                           ;sort.c: 618: updateServoPosition(1050, 3);
 19694  003D42  0E04               	movlw	4
 19695  003D44  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19696  003D46  0E1A               	movlw	26
 19697  003D48  6E01               	movwf	i2updateServoPosition@time_us,c
 19698  003D4A  0E00               	movlw	0
 19699  003D4C  6E04               	movwf	i2updateServoPosition@timer+1,c
 19700  003D4E  0E03               	movlw	3
 19701  003D50  6E03               	movwf	i2updateServoPosition@timer,c
 19702  003D52  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19703                           
 19704                           ;sort.c: 619: servo_timer_counter = 0;
 19705  003D56  0E00               	movlw	0
 19706  003D58  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19707  003D5A  0E00               	movlw	0
 19708  003D5C  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19709                           
 19710                           ;sort.c: 620: servo_timer_target = 750;
 19711  003D5E  0E02               	movlw	2
 19712  003D60  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19713  003D62  0EEE               	movlw	238
 19714  003D64  6E6F               	movwf	_servo_timer_target,c	;volatile
 19715                           
 19716                           ;sort.c: 621: break;
 19717  003D66  0012               	return	
 19718  003D68                     i2l10028:
 19719                           
 19720                           ;sort.c: 624: updateServoPosition(1200, 1);
 19721  003D68  0E04               	movlw	4
 19722  003D6A  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19723  003D6C  0EB0               	movlw	176
 19724  003D6E  6E01               	movwf	i2updateServoPosition@time_us,c
 19725  003D70  0E00               	movlw	0
 19726  003D72  6E04               	movwf	i2updateServoPosition@timer+1,c
 19727  003D74  0E01               	movlw	1
 19728  003D76  6E03               	movwf	i2updateServoPosition@timer,c
 19729  003D78  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19730                           
 19731                           ;sort.c: 625: updateServoPosition(1050, 3);
 19732  003D7C  0E04               	movlw	4
 19733  003D7E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19734  003D80  0E1A               	movlw	26
 19735  003D82  6E01               	movwf	i2updateServoPosition@time_us,c
 19736  003D84  0E00               	movlw	0
 19737  003D86  6E04               	movwf	i2updateServoPosition@timer+1,c
 19738  003D88  0E03               	movlw	3
 19739  003D8A  6E03               	movwf	i2updateServoPosition@timer,c
 19740  003D8C  EC44  F028         	call	i2_updateServoPosition	;wreg free
 19741                           
 19742                           ;sort.c: 626: servo_timer_counter = 0;
 19743  003D90  0E00               	movlw	0
 19744  003D92  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19745  003D94  0E00               	movlw	0
 19746  003D96  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19747                           
 19748                           ;sort.c: 627: servo_timer_target = 9999;
 19749  003D98  0E27               	movlw	39
 19750  003D9A  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19751  003D9C  0E0F               	movlw	15
 19752  003D9E  6E6F               	movwf	_servo_timer_target,c	;volatile
 19753                           
 19754                           ;sort.c: 629: f_can_distributed = 1;
 19755  003DA0  0E00               	movlw	0
 19756  003DA2  0101               	movlb	1	; () banked
 19757  003DA4  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 19758  003DA6  0E01               	movlw	1
 19759  003DA8  6F35               	movwf	_f_can_distributed& (0+255),b
 19760                           
 19761                           ; BSR set to: 1
 19762                           ;sort.c: 630: if(f_lastCan == 1){
 19763  003DAA  0100               	movlb	0	; () banked
 19764  003DAC  05F0               	decf	_f_lastCan& (0+255),w,b
 19765  003DAE  0100               	movlb	0	; () banked
 19766  003DB0  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19767  003DB2  A4D8               	btfss	status,2,c
 19768  003DB4  0012               	return	
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;sort.c: 631: machine_state = DoneSorting_state;
 19772  003DB6  0E02               	movlw	2
 19773  003DB8  0100               	movlb	0	; () banked
 19774  003DBA  6FFC               	movwf	_machine_state& (0+255),b
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;sort.c: 637: }
 19778                           
 19779                           ; BSR set to: 0
 19780                           ;sort.c: 636: break;
 19781                           
 19782                           ;sort.c: 635: default:
 19783                           
 19784                           ; BSR set to: 0
 19785                           ;sort.c: 632: }
 19786                           ;sort.c: 633: break;
 19787  003DBC  0012               	return	
 19788  003DBE                     i2l10042:
 19789  003DBE  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19790  003DC2  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19791                           
 19792                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19793                           ; Switch size 1, requested type "space"
 19794                           ; Number of cases is 2, Range of values is 4 to 5
 19795                           ; switch strategies available:
 19796                           ; Name         Instructions Cycles
 19797                           ; simple_byte            7     4 (average)
 19798                           ;	Chosen strategy is simple_byte
 19799  003DC6  500A               	movf	??_updateServoStates+1,w,c
 19800  003DC8  0A04               	xorlw	4	; case 4
 19801  003DCA  B4D8               	btfsc	status,2,c
 19802  003DCC  D004               	goto	i2l10694
 19803  003DCE  0A01               	xorlw	1	; case 5
 19804  003DD0  A4D8               	btfss	status,2,c
 19805  003DD2  0012               	return	
 19806  003DD4  D008               	goto	i2l10696
 19807  003DD6                     i2l10694:
 19808                           
 19809                           ; Switch size 1, requested type "space"
 19810                           ; Number of cases is 2, Range of values is 26 to 236
 19811                           ; switch strategies available:
 19812                           ; Name         Instructions Cycles
 19813                           ; simple_byte            7     4 (average)
 19814                           ;	Chosen strategy is simple_byte
 19815  003DD6  5009               	movf	??_updateServoStates,w,c
 19816  003DD8  0A1A               	xorlw	26	; case 26
 19817  003DDA  B4D8               	btfsc	status,2,c
 19818  003DDC  D7C5               	goto	i2l10028
 19819  003DDE  0AF6               	xorlw	246	; case 236
 19820  003DE0  A4D8               	btfss	status,2,c
 19821  003DE2  0012               	return	
 19822  003DE4  D79B               	goto	i2l10016
 19823  003DE6                     i2l10696:
 19824                           
 19825                           ; Switch size 1, requested type "space"
 19826                           ; Number of cases is 1, Range of values is 110 to 110
 19827                           ; switch strategies available:
 19828                           ; Name         Instructions Cycles
 19829                           ; simple_byte            4     3 (average)
 19830                           ;	Chosen strategy is simple_byte
 19831  003DE6  5009               	movf	??_updateServoStates,w,c
 19832  003DE8  0A6E               	xorlw	110	; case 110
 19833  003DEA  A4D8               	btfss	status,2,c
 19834  003DEC  0012               	return	
 19835  003DEE  D7A9               	goto	i2l10022
 19836  003DF0                     __end_of_updateServoStates:
 19837                           	opt stack 0
 19838                           pclatu	equ	0xFFB
 19839                           pclath	equ	0xFFA
 19840                           tblptru	equ	0xFF8
 19841                           tblptrh	equ	0xFF7
 19842                           tblptrl	equ	0xFF6
 19843                           tablat	equ	0xFF5
 19844                           prodh	equ	0xFF4
 19845                           prodl	equ	0xFF3
 19846                           intcon	equ	0xFF2
 19847                           intcon2	equ	0xFF1
 19848                           intcon3	equ	0xFF0
 19849                           indf0	equ	0xFEF
 19850                           postinc0	equ	0xFEE
 19851                           fsr0h	equ	0xFEA
 19852                           fsr0l	equ	0xFE9
 19853                           wreg	equ	0xFE8
 19854                           postdec1	equ	0xFE5
 19855                           fsr1h	equ	0xFE2
 19856                           fsr1l	equ	0xFE1
 19857                           indf2	equ	0xFDF
 19858                           postinc2	equ	0xFDE
 19859                           postdec2	equ	0xFDD
 19860                           fsr2h	equ	0xFDA
 19861                           fsr2l	equ	0xFD9
 19862                           status	equ	0xFD8
 19863                           
 19864 ;; *************** function i2_updateServoPosition *****************
 19865 ;; Defined at:
 19866 ;;		line 557 in file "sort.c"
 19867 ;; Parameters:    Size  Location     Type
 19868 ;;  time_us         2    0[COMRAM] int 
 19869 ;;  timer           2    2[COMRAM] int 
 19870 ;; Auto vars:     Size  Location     Type
 19871 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19872 ;; Return value:  Size  Location     Type
 19873 ;;                  1    wreg      void 
 19874 ;; Registers used:
 19875 ;;		wreg, status,2, status,0
 19876 ;; Tracked objects:
 19877 ;;		On entry : 0/0
 19878 ;;		On exit  : 0/0
 19879 ;;		Unchanged: 0/0
 19880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19882 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19883 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19884 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19885 ;;Total ram usage:        8 bytes
 19886 ;; Hardware stack levels used:    1
 19887 ;; This function calls:
 19888 ;;		Nothing
 19889 ;; This function is called by:
 19890 ;;		_updateServoStates
 19891 ;; This function uses a non-reentrant model
 19892 ;;
 19893                           
 19894                           	psect	text64
 19895  005088                     __ptext64:
 19896                           	opt stack 0
 19897  005088                     i2_updateServoPosition:
 19898                           	opt stack 22
 19899                           
 19900                           ;sort.c: 558: unsigned int my_time = 65535 - time_us;
 19901                           
 19902                           ;incstack = 0
 19903  005088  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19904  00508C  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19905  005090  1E05               	comf	??i2_updateServoPosition,f,c
 19906  005092  1E06               	comf	??i2_updateServoPosition+1,f,c
 19907  005094  4A05               	infsnz	??i2_updateServoPosition,f,c
 19908  005096  2A06               	incf	??i2_updateServoPosition+1,f,c
 19909  005098  0EFF               	movlw	255
 19910  00509A  2405               	addwf	??i2_updateServoPosition,w,c
 19911  00509C  6E07               	movwf	i2updateServoPosition@my_time,c
 19912  00509E  0EFF               	movlw	255
 19913  0050A0  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19914  0050A2  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19915                           
 19916                           ;sort.c: 559: switch(timer){
 19917  0050A4  D019               	goto	i2l9202
 19918  0050A6                     i2l9196:
 19919                           
 19920                           ;sort.c: 561: servoTimes[0] = my_time >> 8;
 19921  0050A6  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19922  0050A8  0100               	movlb	0	; () banked
 19923  0050AA  6FDA               	movwf	_servoTimes& (0+255),b
 19924  0050AC  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 19925                           
 19926                           ;sort.c: 562: servoTimes[1] = my_time & 0xFF;
 19927  0050AE  5007               	movf	i2updateServoPosition@my_time,w,c
 19928  0050B0  0100               	movlb	0	; () banked
 19929  0050B2  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 19930  0050B4  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;sort.c: 564: pan_servo_state = time_us;
 19934  0050B6  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19935  0050BA  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19936  0050BE                     i2l910:
 19937                           
 19938                           ;sort.c: 566: servoTimes[2] = my_time >> 8;
 19939  0050BE  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19940  0050C0  0100               	movlb	0	; () banked
 19941  0050C2  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 19942  0050C4  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 19943                           
 19944                           ;sort.c: 567: servoTimes[3] = my_time & 0xFF;
 19945  0050C6  5007               	movf	i2updateServoPosition@my_time,w,c
 19946  0050C8  0100               	movlb	0	; () banked
 19947  0050CA  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 19948  0050CC  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;sort.c: 569: tilt_servo_state = time_us;
 19952  0050CE  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 19953  0050D2  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 19954                           
 19955                           ;sort.c: 570: }
 19956  0050D6  0012               	return	
 19957  0050D8                     i2l9202:
 19958  0050D8  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 19959  0050DC  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 19960                           
 19961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19962                           ; Switch size 1, requested type "space"
 19963                           ; Number of cases is 1, Range of values is 0 to 0
 19964                           ; switch strategies available:
 19965                           ; Name         Instructions Cycles
 19966                           ; simple_byte            4     3 (average)
 19967                           ;	Chosen strategy is simple_byte
 19968  0050E0  5006               	movf	??i2_updateServoPosition+1,w,c
 19969  0050E2  0A00               	xorlw	0	; case 0
 19970  0050E4  A4D8               	btfss	status,2,c
 19971  0050E6  0012               	return	
 19972                           
 19973                           ; Switch size 1, requested type "space"
 19974                           ; Number of cases is 2, Range of values is 1 to 3
 19975                           ; switch strategies available:
 19976                           ; Name         Instructions Cycles
 19977                           ; simple_byte            7     4 (average)
 19978                           ;	Chosen strategy is simple_byte
 19979  0050E8  5005               	movf	??i2_updateServoPosition,w,c
 19980  0050EA  0A01               	xorlw	1	; case 1
 19981  0050EC  B4D8               	btfsc	status,2,c
 19982  0050EE  D7DB               	goto	i2l9196
 19983  0050F0  0A02               	xorlw	2	; case 3
 19984  0050F2  A4D8               	btfss	status,2,c
 19985  0050F4  0012               	return	
 19986  0050F6  D7E3               	goto	i2l910
 19987  0050F8                     __end_ofi2_updateServoPosition:
 19988                           	opt stack 0
 19989                           pclatu	equ	0xFFB
 19990                           pclath	equ	0xFFA
 19991                           tblptru	equ	0xFF8
 19992                           tblptrh	equ	0xFF7
 19993                           tblptrl	equ	0xFF6
 19994                           tablat	equ	0xFF5
 19995                           prodh	equ	0xFF4
 19996                           prodl	equ	0xFF3
 19997                           intcon	equ	0xFF2
 19998                           intcon2	equ	0xFF1
 19999                           intcon3	equ	0xFF0
 20000                           indf0	equ	0xFEF
 20001                           postinc0	equ	0xFEE
 20002                           fsr0h	equ	0xFEA
 20003                           fsr0l	equ	0xFE9
 20004                           wreg	equ	0xFE8
 20005                           postdec1	equ	0xFE5
 20006                           fsr1h	equ	0xFE2
 20007                           fsr1l	equ	0xFE1
 20008                           indf2	equ	0xFDF
 20009                           postinc2	equ	0xFDE
 20010                           postdec2	equ	0xFDD
 20011                           fsr2h	equ	0xFDA
 20012                           fsr2l	equ	0xFD9
 20013                           status	equ	0xFD8
 20014                           
 20015 ;; *************** function _updateMenu *****************
 20016 ;; Defined at:
 20017 ;;		line 216 in file "UI.c"
 20018 ;; Parameters:    Size  Location     Type
 20019 ;;		None
 20020 ;; Auto vars:     Size  Location     Type
 20021 ;;		None
 20022 ;; Return value:  Size  Location     Type
 20023 ;;                  1    wreg      void 
 20024 ;; Registers used:
 20025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20026 ;; Tracked objects:
 20027 ;;		On entry : 0/0
 20028 ;;		On exit  : 0/0
 20029 ;;		Unchanged: 0/0
 20030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20035 ;;Total ram usage:        2 bytes
 20036 ;; Hardware stack levels used:    1
 20037 ;; Hardware stack levels required when called:    5
 20038 ;; This function calls:
 20039 ;;		_change_state_to_logs_11
 20040 ;;		_change_state_to_logs_12
 20041 ;;		_change_state_to_logs_22
 20042 ;;		_change_state_to_logs_23
 20043 ;;		_change_state_to_logs_33
 20044 ;;		_change_state_to_logs_34
 20045 ;;		_change_state_to_menu_11
 20046 ;;		_change_state_to_menu_23
 20047 ;;		_dispLogs
 20048 ;;		_inputHandler
 20049 ;;		i2_change_state_to_menu_12
 20050 ;;		i2_change_state_to_menu_22
 20051 ;;		i2_change_state_to_menu_start
 20052 ;; This function is called by:
 20053 ;;		_handler
 20054 ;; This function uses a non-reentrant model
 20055 ;;
 20056                           
 20057                           	psect	text65
 20058  0030AC                     __ptext65:
 20059                           	opt stack 0
 20060  0030AC                     _updateMenu:
 20061                           	opt stack 18
 20062                           
 20063                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20064                           
 20065                           ;incstack = 0
 20066  0030AC  0E00               	movlw	0
 20067  0030AE  6E76               	movwf	_up+1,c
 20068  0030B0  0E00               	movlw	0
 20069  0030B2  6E75               	movwf	_up,c
 20070  0030B4  0E00               	movlw	0
 20071  0030B6  6E5E               	movwf	_down+1,c
 20072  0030B8  0E00               	movlw	0
 20073  0030BA  6E5D               	movwf	_down,c
 20074  0030BC  0E00               	movlw	0
 20075  0030BE  6E60               	movwf	_enter+1,c
 20076  0030C0  0E00               	movlw	0
 20077  0030C2  6E5F               	movwf	_enter,c
 20078  0030C4  0E00               	movlw	0
 20079  0030C6  6E5C               	movwf	_back+1,c
 20080  0030C8  0E00               	movlw	0
 20081  0030CA  6E5B               	movwf	_back,c
 20082                           
 20083                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20084  0030CC  9EF2               	bcf	intcon,7,c	;volatile
 20085                           
 20086                           ;UI.c: 220: if (inputHandler()
 20087                           ;UI.c: 223: ){
 20088  0030CE  EC1E  F01D         	call	_inputHandler	;wreg free
 20089  0030D2  502A               	movf	?_inputHandler,w,c
 20090  0030D4  102B               	iorwf	?_inputHandler+1,w,c
 20091  0030D6  A4D8               	btfss	status,2,c
 20092  0030D8  D112               	goto	i2l9736
 20093  0030DA  D146               	goto	i2l263
 20094  0030DC                     i2l9588:
 20095                           
 20096                           ;UI.c: 227: change_state_to_menu_11();
 20097  0030DC  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 20098                           
 20099                           ;UI.c: 228: break;
 20100  0030E0  D143               	goto	i2l263
 20101  0030E2                     i2l9590:
 20102                           
 20103                           ;UI.c: 231: if(up){
 20104  0030E2  5075               	movf	_up,w,c
 20105  0030E4  1076               	iorwf	_up+1,w,c
 20106  0030E6  B4D8               	btfsc	status,2,c
 20107  0030E8  D003               	goto	i2l9594
 20108                           
 20109                           ;UI.c: 232: change_state_to_menu_23();
 20110  0030EA  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20111                           
 20112                           ;UI.c: 233: }
 20113  0030EE  D13C               	goto	i2l263
 20114  0030F0                     i2l9594:
 20115                           
 20116                           ;UI.c: 234: else if(down){
 20117  0030F0  505D               	movf	_down,w,c
 20118  0030F2  105E               	iorwf	_down+1,w,c
 20119  0030F4  B4D8               	btfsc	status,2,c
 20120  0030F6  D003               	goto	i2l9598
 20121                           
 20122                           ;UI.c: 235: change_state_to_menu_12();
 20123  0030F8  ECBD  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20124                           
 20125                           ;UI.c: 236: }
 20126  0030FC  D135               	goto	i2l263
 20127  0030FE                     i2l9598:
 20128                           
 20129                           ;UI.c: 237: else if(enter){
 20130  0030FE  505F               	movf	_enter,w,c
 20131  003100  1060               	iorwf	_enter+1,w,c
 20132  003102  B4D8               	btfsc	status,2,c
 20133  003104  D131               	goto	i2l263
 20134                           
 20135                           ;UI.c: 238: change_state_to_menu_start();
 20136  003106  EC00  F02D         	call	i2_change_state_to_menu_start	;wreg free
 20137                           
 20138                           ;UI.c: 239: }
 20139                           ;UI.c: 240: break;
 20140  00310A  D12E               	goto	i2l263
 20141  00310C                     i2l9602:
 20142                           
 20143                           ;UI.c: 243: if(up){
 20144  00310C  5075               	movf	_up,w,c
 20145  00310E  1076               	iorwf	_up+1,w,c
 20146  003110  B4D8               	btfsc	status,2,c
 20147  003112  D003               	goto	i2l9606
 20148                           
 20149                           ;UI.c: 244: change_state_to_menu_11();
 20150  003114  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 20151                           
 20152                           ;UI.c: 245: }
 20153  003118  D127               	goto	i2l263
 20154  00311A                     i2l9606:
 20155                           
 20156                           ;UI.c: 246: else if(down){
 20157  00311A  505D               	movf	_down,w,c
 20158  00311C  105E               	iorwf	_down+1,w,c
 20159  00311E  B4D8               	btfsc	status,2,c
 20160  003120  D011               	goto	i2l9622
 20161                           
 20162                           ;UI.c: 247: change_state_to_menu_23();
 20163  003122  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20164                           
 20165                           ;UI.c: 248: }
 20166  003126  D120               	goto	i2l263
 20167  003128                     i2l9614:
 20168                           
 20169                           ;UI.c: 255: if(up){
 20170  003128  5075               	movf	_up,w,c
 20171  00312A  1076               	iorwf	_up+1,w,c
 20172  00312C  B4D8               	btfsc	status,2,c
 20173  00312E  D003               	goto	i2l9618
 20174                           
 20175                           ;UI.c: 256: change_state_to_menu_11();
 20176  003130  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 20177                           
 20178                           ;UI.c: 257: }
 20179  003134  D119               	goto	i2l263
 20180  003136                     i2l9618:
 20181                           
 20182                           ;UI.c: 258: else if(down){
 20183  003136  505D               	movf	_down,w,c
 20184  003138  105E               	iorwf	_down+1,w,c
 20185  00313A  B4D8               	btfsc	status,2,c
 20186  00313C  D003               	goto	i2l9622
 20187                           
 20188                           ;UI.c: 259: change_state_to_menu_23();
 20189  00313E  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20190                           
 20191                           ;UI.c: 260: }
 20192  003142  D112               	goto	i2l263
 20193  003144                     i2l9622:
 20194                           
 20195                           ;UI.c: 261: else if(enter){
 20196  003144  505F               	movf	_enter,w,c
 20197  003146  1060               	iorwf	_enter+1,w,c
 20198  003148  B4D8               	btfsc	status,2,c
 20199  00314A  D10E               	goto	i2l263
 20200                           
 20201                           ;UI.c: 262: machine_state = Sorting_state;
 20202  00314C  0E01               	movlw	1
 20203  00314E  0100               	movlb	0	; () banked
 20204  003150  6FFC               	movwf	_machine_state& (0+255),b
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;UI.c: 263: }
 20208                           ;UI.c: 264: break;
 20209                           
 20210                           ; BSR set to: 0
 20211                           
 20212                           ; BSR set to: 0
 20213  003152  D10A               	goto	i2l263
 20214  003154                     i2l9626:
 20215                           
 20216                           ;UI.c: 267: if(up){
 20217  003154  5075               	movf	_up,w,c
 20218  003156  1076               	iorwf	_up+1,w,c
 20219  003158  B4D8               	btfsc	status,2,c
 20220  00315A  D003               	goto	i2l9630
 20221                           
 20222                           ;UI.c: 268: change_state_to_menu_22();
 20223  00315C  ECA5  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20224                           
 20225                           ;UI.c: 269: }
 20226  003160  D103               	goto	i2l263
 20227  003162                     i2l9630:
 20228                           
 20229                           ;UI.c: 270: else if(down){
 20230  003162  505D               	movf	_down,w,c
 20231  003164  105E               	iorwf	_down+1,w,c
 20232  003166  B4D8               	btfsc	status,2,c
 20233  003168  D003               	goto	i2l9634
 20234                           
 20235                           ;UI.c: 271: change_state_to_menu_11();
 20236  00316A  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 20237                           
 20238                           ;UI.c: 272: }
 20239  00316E  D0FC               	goto	i2l263
 20240  003170                     i2l9634:
 20241                           
 20242                           ;UI.c: 273: else if(enter){
 20243  003170  505F               	movf	_enter,w,c
 20244  003172  1060               	iorwf	_enter+1,w,c
 20245  003174  B4D8               	btfsc	status,2,c
 20246  003176  D0F8               	goto	i2l263
 20247                           
 20248                           ;UI.c: 274: change_state_to_logs_11();
 20249  003178  EC65  F02C         	call	_change_state_to_logs_11	;wreg free
 20250                           
 20251                           ;UI.c: 275: }
 20252                           ;UI.c: 276: break;
 20253  00317C  D0F5               	goto	i2l263
 20254  00317E                     i2l9638:
 20255                           
 20256                           ;UI.c: 279: if(up){
 20257  00317E  5075               	movf	_up,w,c
 20258  003180  1076               	iorwf	_up+1,w,c
 20259  003182  B4D8               	btfsc	status,2,c
 20260  003184  D003               	goto	i2l9642
 20261                           
 20262                           ;UI.c: 280: change_state_to_logs_34();
 20263  003186  EC05  F02C         	call	_change_state_to_logs_34	;wreg free
 20264                           
 20265                           ;UI.c: 281: }
 20266  00318A  D0EE               	goto	i2l263
 20267  00318C                     i2l9642:
 20268                           
 20269                           ;UI.c: 282: else if(down){
 20270  00318C  505D               	movf	_down,w,c
 20271  00318E  105E               	iorwf	_down+1,w,c
 20272  003190  B4D8               	btfsc	status,2,c
 20273  003192  D003               	goto	i2l9646
 20274                           
 20275                           ;UI.c: 283: change_state_to_logs_12();
 20276  003194  EC4D  F02C         	call	_change_state_to_logs_12	;wreg free
 20277                           
 20278                           ;UI.c: 284: }
 20279  003198  D0E7               	goto	i2l263
 20280  00319A                     i2l9646:
 20281                           
 20282                           ;UI.c: 285: else if(enter){
 20283  00319A  505F               	movf	_enter,w,c
 20284  00319C  1060               	iorwf	_enter+1,w,c
 20285  00319E  B4D8               	btfsc	status,2,c
 20286  0031A0  D007               	goto	i2l9650
 20287                           
 20288                           ;UI.c: 286: dispLogs(1);
 20289  0031A2  0E00               	movlw	0
 20290  0031A4  6E13               	movwf	dispLogs@myLog+1,c
 20291  0031A6  0E01               	movlw	1
 20292  0031A8  6E12               	movwf	dispLogs@myLog,c
 20293  0031AA  EC3A  F02D         	call	_dispLogs	;wreg free
 20294                           
 20295                           ;UI.c: 287: }
 20296  0031AE  D0DC               	goto	i2l263
 20297  0031B0                     i2l9650:
 20298                           
 20299                           ;UI.c: 288: else if(back){
 20300  0031B0  505B               	movf	_back,w,c
 20301  0031B2  105C               	iorwf	_back+1,w,c
 20302  0031B4  B4D8               	btfsc	status,2,c
 20303  0031B6  D0D8               	goto	i2l263
 20304                           
 20305                           ;UI.c: 289: change_state_to_menu_23();
 20306  0031B8  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20307                           
 20308                           ;UI.c: 290: }
 20309                           ;UI.c: 291: break;
 20310  0031BC  D0D5               	goto	i2l263
 20311  0031BE                     i2l9654:
 20312                           
 20313                           ;UI.c: 294: if(up){
 20314  0031BE  5075               	movf	_up,w,c
 20315  0031C0  1076               	iorwf	_up+1,w,c
 20316  0031C2  B4D8               	btfsc	status,2,c
 20317  0031C4  D003               	goto	i2l9658
 20318                           
 20319                           ;UI.c: 295: change_state_to_logs_11();
 20320  0031C6  EC65  F02C         	call	_change_state_to_logs_11	;wreg free
 20321                           
 20322                           ;UI.c: 296: }
 20323  0031CA  D0CE               	goto	i2l263
 20324  0031CC                     i2l9658:
 20325                           
 20326                           ;UI.c: 297: else if(down){
 20327  0031CC  505D               	movf	_down,w,c
 20328  0031CE  105E               	iorwf	_down+1,w,c
 20329  0031D0  B4D8               	btfsc	status,2,c
 20330  0031D2  D003               	goto	i2l9662
 20331                           
 20332                           ;UI.c: 298: change_state_to_logs_23();
 20333  0031D4  EC94  F02C         	call	_change_state_to_logs_23	;wreg free
 20334                           
 20335                           ;UI.c: 299: }
 20336  0031D8  D0C7               	goto	i2l263
 20337  0031DA                     i2l9662:
 20338                           
 20339                           ;UI.c: 300: else if(enter){
 20340  0031DA  505F               	movf	_enter,w,c
 20341  0031DC  1060               	iorwf	_enter+1,w,c
 20342  0031DE  B4D8               	btfsc	status,2,c
 20343  0031E0  D007               	goto	i2l9666
 20344                           
 20345                           ;UI.c: 301: dispLogs(2);
 20346  0031E2  0E00               	movlw	0
 20347  0031E4  6E13               	movwf	dispLogs@myLog+1,c
 20348  0031E6  0E02               	movlw	2
 20349  0031E8  6E12               	movwf	dispLogs@myLog,c
 20350  0031EA  EC3A  F02D         	call	_dispLogs	;wreg free
 20351                           
 20352                           ;UI.c: 302: }
 20353  0031EE  D0BC               	goto	i2l263
 20354  0031F0                     i2l9666:
 20355                           
 20356                           ;UI.c: 303: else if(back){
 20357  0031F0  505B               	movf	_back,w,c
 20358  0031F2  105C               	iorwf	_back+1,w,c
 20359  0031F4  B4D8               	btfsc	status,2,c
 20360  0031F6  D0B8               	goto	i2l263
 20361                           
 20362                           ;UI.c: 304: change_state_to_menu_23();
 20363  0031F8  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20364                           
 20365                           ;UI.c: 305: }
 20366                           ;UI.c: 306: break;
 20367  0031FC  D0B5               	goto	i2l263
 20368  0031FE                     i2l9670:
 20369                           
 20370                           ;UI.c: 309: if(up){
 20371  0031FE  5075               	movf	_up,w,c
 20372  003200  1076               	iorwf	_up+1,w,c
 20373  003202  B4D8               	btfsc	status,2,c
 20374  003204  D003               	goto	i2l9674
 20375                           
 20376                           ;UI.c: 310: change_state_to_logs_11();
 20377  003206  EC65  F02C         	call	_change_state_to_logs_11	;wreg free
 20378                           
 20379                           ;UI.c: 311: }
 20380  00320A  D0AE               	goto	i2l263
 20381  00320C                     i2l9674:
 20382                           
 20383                           ;UI.c: 312: else if(down){
 20384  00320C  505D               	movf	_down,w,c
 20385  00320E  105E               	iorwf	_down+1,w,c
 20386  003210  B4D8               	btfsc	status,2,c
 20387  003212  D003               	goto	i2l9678
 20388                           
 20389                           ;UI.c: 313: change_state_to_logs_23();
 20390  003214  EC94  F02C         	call	_change_state_to_logs_23	;wreg free
 20391                           
 20392                           ;UI.c: 314: }
 20393  003218  D0A7               	goto	i2l263
 20394  00321A                     i2l9678:
 20395                           
 20396                           ;UI.c: 315: else if(enter){
 20397  00321A  505F               	movf	_enter,w,c
 20398  00321C  1060               	iorwf	_enter+1,w,c
 20399  00321E  B4D8               	btfsc	status,2,c
 20400  003220  D007               	goto	i2l9682
 20401                           
 20402                           ;UI.c: 316: dispLogs(2);
 20403  003222  0E00               	movlw	0
 20404  003224  6E13               	movwf	dispLogs@myLog+1,c
 20405  003226  0E02               	movlw	2
 20406  003228  6E12               	movwf	dispLogs@myLog,c
 20407  00322A  EC3A  F02D         	call	_dispLogs	;wreg free
 20408                           
 20409                           ;UI.c: 317: }
 20410  00322E  D09C               	goto	i2l263
 20411  003230                     i2l9682:
 20412                           
 20413                           ;UI.c: 318: else if(back){
 20414  003230  505B               	movf	_back,w,c
 20415  003232  105C               	iorwf	_back+1,w,c
 20416  003234  B4D8               	btfsc	status,2,c
 20417  003236  D098               	goto	i2l263
 20418                           
 20419                           ;UI.c: 319: change_state_to_menu_23();
 20420  003238  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20421                           
 20422                           ;UI.c: 320: }
 20423                           ;UI.c: 321: break;
 20424  00323C  D095               	goto	i2l263
 20425  00323E                     i2l9686:
 20426                           
 20427                           ;UI.c: 324: if(up){
 20428  00323E  5075               	movf	_up,w,c
 20429  003240  1076               	iorwf	_up+1,w,c
 20430  003242  B4D8               	btfsc	status,2,c
 20431  003244  D003               	goto	i2l9690
 20432                           
 20433                           ;UI.c: 325: change_state_to_logs_22();
 20434  003246  EC35  F02C         	call	_change_state_to_logs_22	;wreg free
 20435                           
 20436                           ;UI.c: 326: }
 20437  00324A  D08E               	goto	i2l263
 20438  00324C                     i2l9690:
 20439                           
 20440                           ;UI.c: 327: else if(down){
 20441  00324C  505D               	movf	_down,w,c
 20442  00324E  105E               	iorwf	_down+1,w,c
 20443  003250  B4D8               	btfsc	status,2,c
 20444  003252  D003               	goto	i2l9694
 20445                           
 20446                           ;UI.c: 328: change_state_to_logs_34();
 20447  003254  EC05  F02C         	call	_change_state_to_logs_34	;wreg free
 20448                           
 20449                           ;UI.c: 329: }
 20450  003258  D087               	goto	i2l263
 20451  00325A                     i2l9694:
 20452                           
 20453                           ;UI.c: 330: else if(enter){
 20454  00325A  505F               	movf	_enter,w,c
 20455  00325C  1060               	iorwf	_enter+1,w,c
 20456  00325E  B4D8               	btfsc	status,2,c
 20457  003260  D007               	goto	i2l9698
 20458                           
 20459                           ;UI.c: 331: dispLogs(3);
 20460  003262  0E00               	movlw	0
 20461  003264  6E13               	movwf	dispLogs@myLog+1,c
 20462  003266  0E03               	movlw	3
 20463  003268  6E12               	movwf	dispLogs@myLog,c
 20464  00326A  EC3A  F02D         	call	_dispLogs	;wreg free
 20465                           
 20466                           ;UI.c: 332: }
 20467  00326E  D07C               	goto	i2l263
 20468  003270                     i2l9698:
 20469                           
 20470                           ;UI.c: 333: else if(back){
 20471  003270  505B               	movf	_back,w,c
 20472  003272  105C               	iorwf	_back+1,w,c
 20473  003274  B4D8               	btfsc	status,2,c
 20474  003276  D078               	goto	i2l263
 20475                           
 20476                           ;UI.c: 334: change_state_to_menu_23();
 20477  003278  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20478                           
 20479                           ;UI.c: 335: }
 20480                           ;UI.c: 336: break;
 20481  00327C  D075               	goto	i2l263
 20482  00327E                     i2l9702:
 20483                           
 20484                           ;UI.c: 339: if(up){
 20485  00327E  5075               	movf	_up,w,c
 20486  003280  1076               	iorwf	_up+1,w,c
 20487  003282  B4D8               	btfsc	status,2,c
 20488  003284  D003               	goto	i2l9706
 20489                           
 20490                           ;UI.c: 340: change_state_to_logs_22();
 20491  003286  EC35  F02C         	call	_change_state_to_logs_22	;wreg free
 20492                           
 20493                           ;UI.c: 341: }
 20494  00328A  D06E               	goto	i2l263
 20495  00328C                     i2l9706:
 20496                           
 20497                           ;UI.c: 342: else if(down){
 20498  00328C  505D               	movf	_down,w,c
 20499  00328E  105E               	iorwf	_down+1,w,c
 20500  003290  B4D8               	btfsc	status,2,c
 20501  003292  D003               	goto	i2l9710
 20502                           
 20503                           ;UI.c: 343: change_state_to_logs_34();
 20504  003294  EC05  F02C         	call	_change_state_to_logs_34	;wreg free
 20505                           
 20506                           ;UI.c: 344: }
 20507  003298  D067               	goto	i2l263
 20508  00329A                     i2l9710:
 20509                           
 20510                           ;UI.c: 345: else if(enter){
 20511  00329A  505F               	movf	_enter,w,c
 20512  00329C  1060               	iorwf	_enter+1,w,c
 20513  00329E  B4D8               	btfsc	status,2,c
 20514  0032A0  D007               	goto	i2l9714
 20515                           
 20516                           ;UI.c: 346: dispLogs(3);
 20517  0032A2  0E00               	movlw	0
 20518  0032A4  6E13               	movwf	dispLogs@myLog+1,c
 20519  0032A6  0E03               	movlw	3
 20520  0032A8  6E12               	movwf	dispLogs@myLog,c
 20521  0032AA  EC3A  F02D         	call	_dispLogs	;wreg free
 20522                           
 20523                           ;UI.c: 347: }
 20524  0032AE  D05C               	goto	i2l263
 20525  0032B0                     i2l9714:
 20526                           
 20527                           ;UI.c: 348: else if(back){
 20528  0032B0  505B               	movf	_back,w,c
 20529  0032B2  105C               	iorwf	_back+1,w,c
 20530  0032B4  B4D8               	btfsc	status,2,c
 20531  0032B6  D058               	goto	i2l263
 20532                           
 20533                           ;UI.c: 349: change_state_to_menu_23();
 20534  0032B8  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20535                           
 20536                           ;UI.c: 350: }
 20537                           ;UI.c: 351: break;
 20538  0032BC  D055               	goto	i2l263
 20539  0032BE                     i2l9718:
 20540                           
 20541                           ;UI.c: 354: if(up){
 20542  0032BE  5075               	movf	_up,w,c
 20543  0032C0  1076               	iorwf	_up+1,w,c
 20544  0032C2  B4D8               	btfsc	status,2,c
 20545  0032C4  D003               	goto	i2l9722
 20546                           
 20547                           ;UI.c: 355: change_state_to_logs_33();
 20548  0032C6  EC1D  F02C         	call	_change_state_to_logs_33	;wreg free
 20549                           
 20550                           ;UI.c: 356: }
 20551  0032CA  D04E               	goto	i2l263
 20552  0032CC                     i2l9722:
 20553                           
 20554                           ;UI.c: 357: else if(down){
 20555  0032CC  505D               	movf	_down,w,c
 20556  0032CE  105E               	iorwf	_down+1,w,c
 20557  0032D0  B4D8               	btfsc	status,2,c
 20558  0032D2  D003               	goto	i2l9726
 20559                           
 20560                           ;UI.c: 358: change_state_to_logs_11();
 20561  0032D4  EC65  F02C         	call	_change_state_to_logs_11	;wreg free
 20562                           
 20563                           ;UI.c: 359: }
 20564  0032D8  D047               	goto	i2l263
 20565  0032DA                     i2l9726:
 20566                           
 20567                           ;UI.c: 360: else if(enter){
 20568  0032DA  505F               	movf	_enter,w,c
 20569  0032DC  1060               	iorwf	_enter+1,w,c
 20570  0032DE  B4D8               	btfsc	status,2,c
 20571  0032E0  D007               	goto	i2l9730
 20572                           
 20573                           ;UI.c: 361: dispLogs(4);
 20574  0032E2  0E00               	movlw	0
 20575  0032E4  6E13               	movwf	dispLogs@myLog+1,c
 20576  0032E6  0E04               	movlw	4
 20577  0032E8  6E12               	movwf	dispLogs@myLog,c
 20578  0032EA  EC3A  F02D         	call	_dispLogs	;wreg free
 20579                           
 20580                           ;UI.c: 362: }
 20581  0032EE  D03C               	goto	i2l263
 20582  0032F0                     i2l9730:
 20583                           
 20584                           ;UI.c: 363: else if(back){
 20585  0032F0  505B               	movf	_back,w,c
 20586  0032F2  105C               	iorwf	_back+1,w,c
 20587  0032F4  B4D8               	btfsc	status,2,c
 20588  0032F6  D038               	goto	i2l263
 20589                           
 20590                           ;UI.c: 364: change_state_to_menu_23();
 20591  0032F8  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 20592                           
 20593                           ;UI.c: 370: }
 20594                           
 20595                           ;UI.c: 369: break;
 20596                           
 20597                           ;UI.c: 368: default:
 20598                           
 20599                           ;UI.c: 365: }
 20600                           ;UI.c: 366: break;
 20601  0032FC  D035               	goto	i2l263
 20602  0032FE                     i2l9736:
 20603  0032FE  C0EC  F043         	movff	_cur_state,??_updateMenu
 20604  003302  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 20605                           
 20606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20607                           ; Switch size 1, requested type "space"
 20608                           ; Number of cases is 3, Range of values is 0 to 4
 20609                           ; switch strategies available:
 20610                           ; Name         Instructions Cycles
 20611                           ; simple_byte           10     6 (average)
 20612                           ;	Chosen strategy is simple_byte
 20613  003306  5044               	movf	??_updateMenu+1,w,c
 20614  003308  0A00               	xorlw	0	; case 0
 20615  00330A  B4D8               	btfsc	status,2,c
 20616  00330C  D007               	goto	i2l10700
 20617  00330E  0A03               	xorlw	3	; case 3
 20618  003310  B4D8               	btfsc	status,2,c
 20619  003312  D015               	goto	i2l10702
 20620  003314  0A07               	xorlw	7	; case 4
 20621  003316  B4D8               	btfsc	status,2,c
 20622  003318  D020               	goto	i2l10704
 20623  00331A  D026               	goto	i2l263
 20624  00331C                     i2l10700:
 20625                           
 20626                           ; Switch size 1, requested type "space"
 20627                           ; Number of cases is 5, Range of values is 0 to 23
 20628                           ; switch strategies available:
 20629                           ; Name         Instructions Cycles
 20630                           ; simple_byte           16     9 (average)
 20631                           ;	Chosen strategy is simple_byte
 20632  00331C  5043               	movf	??_updateMenu,w,c
 20633  00331E  0A00               	xorlw	0	; case 0
 20634  003320  B4D8               	btfsc	status,2,c
 20635  003322  D6DC               	goto	i2l9588
 20636  003324  0A0B               	xorlw	11	; case 11
 20637  003326  B4D8               	btfsc	status,2,c
 20638  003328  D6DC               	goto	i2l9590
 20639  00332A  0A07               	xorlw	7	; case 12
 20640  00332C  B4D8               	btfsc	status,2,c
 20641  00332E  D6EE               	goto	i2l9602
 20642  003330  0A1A               	xorlw	26	; case 22
 20643  003332  B4D8               	btfsc	status,2,c
 20644  003334  D6F9               	goto	i2l9614
 20645  003336  0A01               	xorlw	1	; case 23
 20646  003338  B4D8               	btfsc	status,2,c
 20647  00333A  D70C               	goto	i2l9626
 20648  00333C  D015               	goto	i2l263
 20649  00333E                     i2l10702:
 20650                           
 20651                           ; Switch size 1, requested type "space"
 20652                           ; Number of cases is 4, Range of values is 243 to 255
 20653                           ; switch strategies available:
 20654                           ; Name         Instructions Cycles
 20655                           ; simple_byte           13     7 (average)
 20656                           ;	Chosen strategy is simple_byte
 20657  00333E  5043               	movf	??_updateMenu,w,c
 20658  003340  0AF3               	xorlw	243	; case 243
 20659  003342  B4D8               	btfsc	status,2,c
 20660  003344  D71C               	goto	i2l9638
 20661  003346  0A07               	xorlw	7	; case 244
 20662  003348  B4D8               	btfsc	status,2,c
 20663  00334A  D739               	goto	i2l9654
 20664  00334C  0A0A               	xorlw	10	; case 254
 20665  00334E  B4D8               	btfsc	status,2,c
 20666  003350  D756               	goto	i2l9670
 20667  003352  0A01               	xorlw	1	; case 255
 20668  003354  B4D8               	btfsc	status,2,c
 20669  003356  D773               	goto	i2l9686
 20670  003358  D007               	goto	i2l263
 20671  00335A                     i2l10704:
 20672                           
 20673                           ; Switch size 1, requested type "space"
 20674                           ; Number of cases is 2, Range of values is 9 to 10
 20675                           ; switch strategies available:
 20676                           ; Name         Instructions Cycles
 20677                           ; simple_byte            7     4 (average)
 20678                           ;	Chosen strategy is simple_byte
 20679  00335A  5043               	movf	??_updateMenu,w,c
 20680  00335C  0A09               	xorlw	9	; case 9
 20681  00335E  B4D8               	btfsc	status,2,c
 20682  003360  D78E               	goto	i2l9702
 20683  003362  0A03               	xorlw	3	; case 10
 20684  003364  B4D8               	btfsc	status,2,c
 20685  003366  D7AB               	goto	i2l9718
 20686  003368                     i2l263:
 20687                           
 20688                           ;UI.c: 371: }
 20689                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20690  003368  8EF2               	bsf	intcon,7,c	;volatile
 20691  00336A  0012               	return		;funcret
 20692  00336C                     __end_of_updateMenu:
 20693                           	opt stack 0
 20694                           pclatu	equ	0xFFB
 20695                           pclath	equ	0xFFA
 20696                           tblptru	equ	0xFF8
 20697                           tblptrh	equ	0xFF7
 20698                           tblptrl	equ	0xFF6
 20699                           tablat	equ	0xFF5
 20700                           prodh	equ	0xFF4
 20701                           prodl	equ	0xFF3
 20702                           intcon	equ	0xFF2
 20703                           intcon2	equ	0xFF1
 20704                           intcon3	equ	0xFF0
 20705                           indf0	equ	0xFEF
 20706                           postinc0	equ	0xFEE
 20707                           fsr0h	equ	0xFEA
 20708                           fsr0l	equ	0xFE9
 20709                           wreg	equ	0xFE8
 20710                           postdec1	equ	0xFE5
 20711                           fsr1h	equ	0xFE2
 20712                           fsr1l	equ	0xFE1
 20713                           indf2	equ	0xFDF
 20714                           postinc2	equ	0xFDE
 20715                           postdec2	equ	0xFDD
 20716                           fsr2h	equ	0xFDA
 20717                           fsr2l	equ	0xFD9
 20718                           status	equ	0xFD8
 20719                           
 20720 ;; *************** function i2_change_state_to_menu_start *****************
 20721 ;; Defined at:
 20722 ;;		line 477 in file "UI.c"
 20723 ;; Parameters:    Size  Location     Type
 20724 ;;		None
 20725 ;; Auto vars:     Size  Location     Type
 20726 ;;		None
 20727 ;; Return value:  Size  Location     Type
 20728 ;;                  1    wreg      void 
 20729 ;; Registers used:
 20730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20731 ;; Tracked objects:
 20732 ;;		On entry : 0/0
 20733 ;;		On exit  : 0/0
 20734 ;;		Unchanged: 0/0
 20735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20740 ;;Total ram usage:        0 bytes
 20741 ;; Hardware stack levels used:    1
 20742 ;; Hardware stack levels required when called:    4
 20743 ;; This function calls:
 20744 ;;		i2_lcdInst
 20745 ;;		i2_printRTC
 20746 ;;		i2_printf
 20747 ;; This function is called by:
 20748 ;;		_updateMenu
 20749 ;;		_handler
 20750 ;; This function uses a non-reentrant model
 20751 ;;
 20752                           
 20753                           	psect	text66
 20754  005A00                     __ptext66:
 20755                           	opt stack 0
 20756  005A00                     i2_change_state_to_menu_start:
 20757                           	opt stack 19
 20758                           
 20759                           ;UI.c: 478: cur_state = 0;
 20760                           
 20761                           ;incstack = 0
 20762  005A00  0E00               	movlw	0
 20763  005A02  0100               	movlb	0	; () banked
 20764  005A04  6FED               	movwf	(_cur_state+1)& (0+255),b
 20765  005A06  0E00               	movlw	0
 20766  005A08  6FEC               	movwf	_cur_state& (0+255),b
 20767                           
 20768                           ; BSR set to: 0
 20769                           ;UI.c: 480: lcdInst(0b10000000);;
 20770  005A0A  0E80               	movlw	128
 20771  005A0C  ECD9  F02D         	call	i2_lcdInst
 20772                           
 20773                           ;UI.c: 481: printRTC();
 20774  005A10  EC0A  F01B         	call	i2_printRTC	;wreg free
 20775                           
 20776                           ;UI.c: 482: lcdInst(0b11000000);;
 20777  005A14  0EC0               	movlw	192
 20778  005A16  ECD9  F02D         	call	i2_lcdInst
 20779                           
 20780                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20781  005A1A  0EF9               	movlw	low STR_30
 20782  005A1C  6E0D               	movwf	i2printf@f,c
 20783  005A1E  0EFD               	movlw	high STR_30
 20784  005A20  6E0E               	movwf	i2printf@f+1,c
 20785  005A22  ECBB  F013         	call	i2_printf	;wreg free
 20786  005A26  0012               	return		;funcret
 20787  005A28                     __end_ofi2_change_state_to_menu_start:
 20788                           	opt stack 0
 20789                           pclatu	equ	0xFFB
 20790                           pclath	equ	0xFFA
 20791                           tblptru	equ	0xFF8
 20792                           tblptrh	equ	0xFF7
 20793                           tblptrl	equ	0xFF6
 20794                           tablat	equ	0xFF5
 20795                           prodh	equ	0xFF4
 20796                           prodl	equ	0xFF3
 20797                           intcon	equ	0xFF2
 20798                           intcon2	equ	0xFF1
 20799                           intcon3	equ	0xFF0
 20800                           indf0	equ	0xFEF
 20801                           postinc0	equ	0xFEE
 20802                           fsr0h	equ	0xFEA
 20803                           fsr0l	equ	0xFE9
 20804                           wreg	equ	0xFE8
 20805                           postdec1	equ	0xFE5
 20806                           fsr1h	equ	0xFE2
 20807                           fsr1l	equ	0xFE1
 20808                           indf2	equ	0xFDF
 20809                           postinc2	equ	0xFDE
 20810                           postdec2	equ	0xFDD
 20811                           fsr2h	equ	0xFDA
 20812                           fsr2l	equ	0xFD9
 20813                           status	equ	0xFD8
 20814                           
 20815 ;; *************** function i2_printRTC *****************
 20816 ;; Defined at:
 20817 ;;		line 63 in file "RTC.c"
 20818 ;; Parameters:    Size  Location     Type
 20819 ;;		None
 20820 ;; Auto vars:     Size  Location     Type
 20821 ;;  printRTC       14   44[COMRAM] int [7]
 20822 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20823 ;;  printRTC        2   64[COMRAM] int 
 20824 ;;  printRTC        2   58[COMRAM] int 
 20825 ;; Return value:  Size  Location     Type
 20826 ;;                  1    wreg      void 
 20827 ;; Registers used:
 20828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20829 ;; Tracked objects:
 20830 ;;		On entry : 0/0
 20831 ;;		On exit  : 0/0
 20832 ;;		Unchanged: 0/0
 20833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20835 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;Total ram usage:       25 bytes
 20839 ;; Hardware stack levels used:    1
 20840 ;; Hardware stack levels required when called:    3
 20841 ;; This function calls:
 20842 ;;		i2_getRTC
 20843 ;;		i2_lcdInst
 20844 ;;		i2_printf
 20845 ;;		i2_strcpy
 20846 ;; This function is called by:
 20847 ;;		i2_change_state_to_menu_start
 20848 ;; This function uses a non-reentrant model
 20849 ;;
 20850                           
 20851                           	psect	text67
 20852  003614                     __ptext67:
 20853                           	opt stack 0
 20854  003614                     i2_printRTC:
 20855                           	opt stack 19
 20856                           
 20857                           ;RTC.c: 64: getRTC();
 20858                           
 20859                           ;incstack = 0
 20860  003614  EC0B  F028         	call	i2_getRTC	;wreg free
 20861                           
 20862                           ;RTC.c: 65: char month[] = "MMM";
 20863  003618  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 20864  00361C  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 20865  003620  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 20866  003624  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 20867                           
 20868                           ;RTC.c: 66: int INT_time[7];
 20869                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20870  003628  0E00               	movlw	0
 20871  00362A  6E42               	movwf	i2printRTC@i+1,c
 20872  00362C  0E00               	movlw	0
 20873  00362E  6E41               	movwf	i2printRTC@i,c
 20874  003630  BE42               	btfsc	i2printRTC@i+1,7,c
 20875  003632  D006               	goto	i2l7532
 20876  003634  5042               	movf	i2printRTC@i+1,w,c
 20877  003636  E135               	bnz	i2l620
 20878  003638  0E07               	movlw	7
 20879  00363A  5C41               	subwf	i2printRTC@i,w,c
 20880  00363C  B0D8               	btfsc	status,0,c
 20881  00363E  D031               	goto	i2l620
 20882  003640                     i2l7532:
 20883                           
 20884                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20885  003640  0E1C               	movlw	low _time
 20886  003642  2441               	addwf	i2printRTC@i,w,c
 20887  003644  6ED9               	movwf	fsr2l,c
 20888  003646  0E01               	movlw	high _time
 20889  003648  2042               	addwfc	i2printRTC@i+1,w,c
 20890  00364A  6EDA               	movwf	fsr2h,c
 20891  00364C  50DF               	movf	indf2,w,c
 20892  00364E  6E2A               	movwf	??i2_printRTC& (0+255),c
 20893  003650  3A2A               	swapf	??i2_printRTC,f,c
 20894  003652  0E0F               	movlw	15
 20895  003654  162A               	andwf	??i2_printRTC,f,c
 20896  003656  0E0F               	movlw	15
 20897  003658  162A               	andwf	??i2_printRTC,f,c
 20898  00365A  502A               	movf	??i2_printRTC,w,c
 20899  00365C  0D0A               	mullw	10
 20900  00365E  0E1C               	movlw	low _time
 20901  003660  2441               	addwf	i2printRTC@i,w,c
 20902  003662  6ED9               	movwf	fsr2l,c
 20903  003664  0E01               	movlw	high _time
 20904  003666  2042               	addwfc	i2printRTC@i+1,w,c
 20905  003668  6EDA               	movwf	fsr2h,c
 20906  00366A  50DF               	movf	indf2,w,c
 20907  00366C  0B0F               	andlw	15
 20908  00366E  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20909  003670  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20910  003672  50F3               	movf	prodl,w,c
 20911  003674  262B               	addwf	??i2_printRTC+1,f,c
 20912  003676  50F4               	movf	prodh,w,c
 20913  003678  222C               	addwfc	??i2_printRTC+2,f,c
 20914  00367A  90D8               	bcf	status,0,c
 20915  00367C  3441               	rlcf	i2printRTC@i,w,c
 20916  00367E  6ED9               	movwf	fsr2l,c
 20917  003680  3442               	rlcf	i2printRTC@i+1,w,c
 20918  003682  6EDA               	movwf	fsr2h,c
 20919  003684  0E2D               	movlw	low i2printRTC@INT_time
 20920  003686  26D9               	addwf	fsr2l,f,c
 20921  003688  0E00               	movlw	high i2printRTC@INT_time
 20922  00368A  22DA               	addwfc	fsr2h,f,c
 20923  00368C  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20924  003690  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20925  003694  4A41               	infsnz	i2printRTC@i,f,c
 20926  003696  2A42               	incf	i2printRTC@i+1,f,c
 20927  003698  BE42               	btfsc	i2printRTC@i+1,7,c
 20928  00369A  D7D2               	goto	i2l7532
 20929  00369C  5042               	movf	i2printRTC@i+1,w,c
 20930  00369E  E101               	bnz	i2u625_40
 20931  0036A0  D7CB               	goto	L20
 20932  0036A2                     i2u625_40:
 20933  0036A2                     i2l620:
 20934                           
 20935                           ;RTC.c: 69: }
 20936                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20937  0036A2  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20938  0036A6  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20939                           
 20940                           ;RTC.c: 72: switch(RTC_month){
 20941  0036AA  D084               	goto	i2l7564
 20942  0036AC                     i2l7538:
 20943                           
 20944                           ;RTC.c: 74: strcpy(month, "JAN");
 20945  0036AC  0E3D               	movlw	low i2printRTC@month
 20946  0036AE  6E01               	movwf	i2strcpy@to,c
 20947  0036B0  0E00               	movlw	high i2printRTC@month
 20948  0036B2  6E02               	movwf	i2strcpy@to+1,c
 20949  0036B4  0EDA               	movlw	low STR_8
 20950  0036B6  6E03               	movwf	i2strcpy@from,c
 20951  0036B8  0EFF               	movlw	high STR_8
 20952  0036BA  6E04               	movwf	i2strcpy@from+1,c
 20953  0036BC  EC74  F02B         	call	i2_strcpy	;wreg free
 20954                           
 20955                           ;RTC.c: 75: break;
 20956  0036C0  D0A6               	goto	i2l7566
 20957  0036C2                     i2l7540:
 20958                           
 20959                           ;RTC.c: 77: strcpy(month, "FEB");
 20960  0036C2  0E3D               	movlw	low i2printRTC@month
 20961  0036C4  6E01               	movwf	i2strcpy@to,c
 20962  0036C6  0E00               	movlw	high i2printRTC@month
 20963  0036C8  6E02               	movwf	i2strcpy@to+1,c
 20964  0036CA  0ECA               	movlw	low STR_9
 20965  0036CC  6E03               	movwf	i2strcpy@from,c
 20966  0036CE  0EFF               	movlw	high STR_9
 20967  0036D0  6E04               	movwf	i2strcpy@from+1,c
 20968  0036D2  EC74  F02B         	call	i2_strcpy	;wreg free
 20969                           
 20970                           ;RTC.c: 78: break;
 20971  0036D6  D09B               	goto	i2l7566
 20972  0036D8                     i2l7542:
 20973                           
 20974                           ;RTC.c: 80: strcpy(month, "MAR");
 20975  0036D8  0E3D               	movlw	low i2printRTC@month
 20976  0036DA  6E01               	movwf	i2strcpy@to,c
 20977  0036DC  0E00               	movlw	high i2printRTC@month
 20978  0036DE  6E02               	movwf	i2strcpy@to+1,c
 20979  0036E0  0EE6               	movlw	low STR_10
 20980  0036E2  6E03               	movwf	i2strcpy@from,c
 20981  0036E4  0EFF               	movlw	high STR_10
 20982  0036E6  6E04               	movwf	i2strcpy@from+1,c
 20983  0036E8  EC74  F02B         	call	i2_strcpy	;wreg free
 20984                           
 20985                           ;RTC.c: 81: break;
 20986  0036EC  D090               	goto	i2l7566
 20987  0036EE                     i2l7544:
 20988                           
 20989                           ;RTC.c: 83: strcpy(month, "APR");
 20990  0036EE  0E3D               	movlw	low i2printRTC@month
 20991  0036F0  6E01               	movwf	i2strcpy@to,c
 20992  0036F2  0E00               	movlw	high i2printRTC@month
 20993  0036F4  6E02               	movwf	i2strcpy@to+1,c
 20994  0036F6  0EEA               	movlw	low STR_11
 20995  0036F8  6E03               	movwf	i2strcpy@from,c
 20996  0036FA  0EFF               	movlw	high STR_11
 20997  0036FC  6E04               	movwf	i2strcpy@from+1,c
 20998  0036FE  EC74  F02B         	call	i2_strcpy	;wreg free
 20999                           
 21000                           ;RTC.c: 84: break;
 21001  003702  D085               	goto	i2l7566
 21002  003704                     i2l7546:
 21003                           
 21004                           ;RTC.c: 86: strcpy(month, "MAY");
 21005  003704  0E3D               	movlw	low i2printRTC@month
 21006  003706  6E01               	movwf	i2strcpy@to,c
 21007  003708  0E00               	movlw	high i2printRTC@month
 21008  00370A  6E02               	movwf	i2strcpy@to+1,c
 21009  00370C  0EFA               	movlw	low STR_12
 21010  00370E  6E03               	movwf	i2strcpy@from,c
 21011  003710  0EFF               	movlw	high STR_12
 21012  003712  6E04               	movwf	i2strcpy@from+1,c
 21013  003714  EC74  F02B         	call	i2_strcpy	;wreg free
 21014                           
 21015                           ;RTC.c: 87: break;
 21016  003718  D07A               	goto	i2l7566
 21017  00371A                     i2l7548:
 21018                           
 21019                           ;RTC.c: 89: strcpy(month, "JUN");
 21020  00371A  0E3D               	movlw	low i2printRTC@month
 21021  00371C  6E01               	movwf	i2strcpy@to,c
 21022  00371E  0E00               	movlw	high i2printRTC@month
 21023  003720  6E02               	movwf	i2strcpy@to+1,c
 21024  003722  0EDE               	movlw	low STR_13
 21025  003724  6E03               	movwf	i2strcpy@from,c
 21026  003726  0EFF               	movlw	high STR_13
 21027  003728  6E04               	movwf	i2strcpy@from+1,c
 21028  00372A  EC74  F02B         	call	i2_strcpy	;wreg free
 21029                           
 21030                           ;RTC.c: 90: break;
 21031  00372E  D06F               	goto	i2l7566
 21032  003730                     i2l7550:
 21033                           
 21034                           ;RTC.c: 92: strcpy(month, "JUL");
 21035  003730  0E3D               	movlw	low i2printRTC@month
 21036  003732  6E01               	movwf	i2strcpy@to,c
 21037  003734  0E00               	movlw	high i2printRTC@month
 21038  003736  6E02               	movwf	i2strcpy@to+1,c
 21039  003738  0ED6               	movlw	low STR_14
 21040  00373A  6E03               	movwf	i2strcpy@from,c
 21041  00373C  0EFF               	movlw	high STR_14
 21042  00373E  6E04               	movwf	i2strcpy@from+1,c
 21043  003740  EC74  F02B         	call	i2_strcpy	;wreg free
 21044                           
 21045                           ;RTC.c: 93: break;
 21046  003744  D064               	goto	i2l7566
 21047  003746                     i2l7552:
 21048                           
 21049                           ;RTC.c: 95: strcpy(month, "AUG");
 21050  003746  0E3D               	movlw	low i2printRTC@month
 21051  003748  6E01               	movwf	i2strcpy@to,c
 21052  00374A  0E00               	movlw	high i2printRTC@month
 21053  00374C  6E02               	movwf	i2strcpy@to+1,c
 21054  00374E  0ED2               	movlw	low STR_15
 21055  003750  6E03               	movwf	i2strcpy@from,c
 21056  003752  0EFF               	movlw	high STR_15
 21057  003754  6E04               	movwf	i2strcpy@from+1,c
 21058  003756  EC74  F02B         	call	i2_strcpy	;wreg free
 21059                           
 21060                           ;RTC.c: 96: break;
 21061  00375A  D059               	goto	i2l7566
 21062  00375C                     i2l7554:
 21063                           
 21064                           ;RTC.c: 98: strcpy(month, "SEP");
 21065  00375C  0E3D               	movlw	low i2printRTC@month
 21066  00375E  6E01               	movwf	i2strcpy@to,c
 21067  003760  0E00               	movlw	high i2printRTC@month
 21068  003762  6E02               	movwf	i2strcpy@to+1,c
 21069  003764  0EE2               	movlw	low STR_16
 21070  003766  6E03               	movwf	i2strcpy@from,c
 21071  003768  0EFF               	movlw	high STR_16
 21072  00376A  6E04               	movwf	i2strcpy@from+1,c
 21073  00376C  EC74  F02B         	call	i2_strcpy	;wreg free
 21074                           
 21075                           ;RTC.c: 99: break;
 21076  003770  D04E               	goto	i2l7566
 21077  003772                     i2l7556:
 21078                           
 21079                           ;RTC.c: 101: strcpy(month, "OCT");
 21080  003772  0E3D               	movlw	low i2printRTC@month
 21081  003774  6E01               	movwf	i2strcpy@to,c
 21082  003776  0E00               	movlw	high i2printRTC@month
 21083  003778  6E02               	movwf	i2strcpy@to+1,c
 21084  00377A  0EF2               	movlw	low STR_17
 21085  00377C  6E03               	movwf	i2strcpy@from,c
 21086  00377E  0EFF               	movlw	high STR_17
 21087  003780  6E04               	movwf	i2strcpy@from+1,c
 21088  003782  EC74  F02B         	call	i2_strcpy	;wreg free
 21089                           
 21090                           ;RTC.c: 102: break;
 21091  003786  D043               	goto	i2l7566
 21092  003788                     i2l7558:
 21093                           
 21094                           ;RTC.c: 104: strcpy(month, "NOV");
 21095  003788  0E3D               	movlw	low i2printRTC@month
 21096  00378A  6E01               	movwf	i2strcpy@to,c
 21097  00378C  0E00               	movlw	high i2printRTC@month
 21098  00378E  6E02               	movwf	i2strcpy@to+1,c
 21099  003790  0EF6               	movlw	low STR_18
 21100  003792  6E03               	movwf	i2strcpy@from,c
 21101  003794  0EFF               	movlw	high STR_18
 21102  003796  6E04               	movwf	i2strcpy@from+1,c
 21103  003798  EC74  F02B         	call	i2_strcpy	;wreg free
 21104                           
 21105                           ;RTC.c: 105: break;
 21106  00379C  D038               	goto	i2l7566
 21107  00379E                     i2l7560:
 21108                           
 21109                           ;RTC.c: 107: strcpy(month, "DEC");
 21110  00379E  0E3D               	movlw	low i2printRTC@month
 21111  0037A0  6E01               	movwf	i2strcpy@to,c
 21112  0037A2  0E00               	movlw	high i2printRTC@month
 21113  0037A4  6E02               	movwf	i2strcpy@to+1,c
 21114  0037A6  0ECE               	movlw	low STR_19
 21115  0037A8  6E03               	movwf	i2strcpy@from,c
 21116  0037AA  0EFF               	movlw	high STR_19
 21117  0037AC  6E04               	movwf	i2strcpy@from+1,c
 21118  0037AE  EC74  F02B         	call	i2_strcpy	;wreg free
 21119                           
 21120                           ;RTC.c: 109: }
 21121                           
 21122                           ;RTC.c: 108: break;
 21123  0037B2  D02D               	goto	i2l7566
 21124  0037B4                     i2l7564:
 21125  0037B4  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21126  0037B8  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21127                           
 21128                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21129                           ; Switch size 1, requested type "space"
 21130                           ; Number of cases is 1, Range of values is 0 to 0
 21131                           ; switch strategies available:
 21132                           ; Name         Instructions Cycles
 21133                           ; simple_byte            4     3 (average)
 21134                           ;	Chosen strategy is simple_byte
 21135  0037BC  502B               	movf	??i2_printRTC+1,w,c
 21136  0037BE  0A00               	xorlw	0	; case 0
 21137  0037C0  A4D8               	btfss	status,2,c
 21138  0037C2  D025               	goto	i2l7566
 21139                           
 21140                           ; Switch size 1, requested type "space"
 21141                           ; Number of cases is 12, Range of values is 1 to 12
 21142                           ; switch strategies available:
 21143                           ; Name         Instructions Cycles
 21144                           ; simple_byte           37    19 (average)
 21145                           ;	Chosen strategy is simple_byte
 21146  0037C4  502A               	movf	??i2_printRTC,w,c
 21147  0037C6  0A01               	xorlw	1	; case 1
 21148  0037C8  B4D8               	btfsc	status,2,c
 21149  0037CA  D770               	goto	i2l7538
 21150  0037CC  0A03               	xorlw	3	; case 2
 21151  0037CE  B4D8               	btfsc	status,2,c
 21152  0037D0  D778               	goto	i2l7540
 21153  0037D2  0A01               	xorlw	1	; case 3
 21154  0037D4  B4D8               	btfsc	status,2,c
 21155  0037D6  D780               	goto	i2l7542
 21156  0037D8  0A07               	xorlw	7	; case 4
 21157  0037DA  B4D8               	btfsc	status,2,c
 21158  0037DC  D788               	goto	i2l7544
 21159  0037DE  0A01               	xorlw	1	; case 5
 21160  0037E0  B4D8               	btfsc	status,2,c
 21161  0037E2  D790               	goto	i2l7546
 21162  0037E4  0A03               	xorlw	3	; case 6
 21163  0037E6  B4D8               	btfsc	status,2,c
 21164  0037E8  D798               	goto	i2l7548
 21165  0037EA  0A01               	xorlw	1	; case 7
 21166  0037EC  B4D8               	btfsc	status,2,c
 21167  0037EE  D7A0               	goto	i2l7550
 21168  0037F0  0A0F               	xorlw	15	; case 8
 21169  0037F2  B4D8               	btfsc	status,2,c
 21170  0037F4  D7A8               	goto	i2l7552
 21171  0037F6  0A01               	xorlw	1	; case 9
 21172  0037F8  B4D8               	btfsc	status,2,c
 21173  0037FA  D7B0               	goto	i2l7554
 21174  0037FC  0A03               	xorlw	3	; case 10
 21175  0037FE  B4D8               	btfsc	status,2,c
 21176  003800  D7B8               	goto	i2l7556
 21177  003802  0A01               	xorlw	1	; case 11
 21178  003804  B4D8               	btfsc	status,2,c
 21179  003806  D7C0               	goto	i2l7558
 21180  003808  0A07               	xorlw	7	; case 12
 21181  00380A  B4D8               	btfsc	status,2,c
 21182  00380C  D7C8               	goto	i2l7560
 21183  00380E                     i2l7566:
 21184                           
 21185                           ;RTC.c: 110: lcdInst(0b10000000);;
 21186  00380E  0E80               	movlw	128
 21187  003810  ECD9  F02D         	call	i2_lcdInst
 21188                           
 21189                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21190  003814  0EA4               	movlw	low STR_21
 21191  003816  6E0D               	movwf	i2printf@f,c
 21192  003818  0EFA               	movlw	high STR_21
 21193  00381A  6E0E               	movwf	i2printf@f+1,c
 21194  00381C  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21195  003820  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21196  003824  0E3D               	movlw	low i2printRTC@month
 21197  003826  6E11               	movwf	?i2_printf+4,c
 21198  003828  0E00               	movlw	high i2printRTC@month
 21199  00382A  6E12               	movwf	?i2_printf+5,c
 21200  00382C  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21201  003830  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21202  003834  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21203  003838  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21204  00383C  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21205  003840  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21206  003844  ECBB  F013         	call	i2_printf	;wreg free
 21207  003848  0012               	return		;funcret
 21208  00384A                     __end_ofi2_printRTC:
 21209                           	opt stack 0
 21210                           pclatu	equ	0xFFB
 21211                           pclath	equ	0xFFA
 21212                           tblptru	equ	0xFF8
 21213                           tblptrh	equ	0xFF7
 21214                           tblptrl	equ	0xFF6
 21215                           tablat	equ	0xFF5
 21216                           prodh	equ	0xFF4
 21217                           prodl	equ	0xFF3
 21218                           intcon	equ	0xFF2
 21219                           intcon2	equ	0xFF1
 21220                           intcon3	equ	0xFF0
 21221                           indf0	equ	0xFEF
 21222                           postinc0	equ	0xFEE
 21223                           fsr0h	equ	0xFEA
 21224                           fsr0l	equ	0xFE9
 21225                           wreg	equ	0xFE8
 21226                           postdec1	equ	0xFE5
 21227                           fsr1h	equ	0xFE2
 21228                           fsr1l	equ	0xFE1
 21229                           indf2	equ	0xFDF
 21230                           postinc2	equ	0xFDE
 21231                           postdec2	equ	0xFDD
 21232                           fsr2h	equ	0xFDA
 21233                           fsr2l	equ	0xFD9
 21234                           status	equ	0xFD8
 21235                           
 21236 ;; *************** function i2_strcpy *****************
 21237 ;; Defined at:
 21238 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21239 ;; Parameters:    Size  Location     Type
 21240 ;;  to              2    0[COMRAM] PTR unsigned char 
 21241 ;;		 -> printRTC@month(4), UI@month(4), 
 21242 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21243 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21244 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21245 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21246 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21247 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21248 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21249 ;;		 -> STR_8(4), 
 21250 ;; Auto vars:     Size  Location     Type
 21251 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21252 ;;		 -> printRTC@month(4), UI@month(4), 
 21253 ;; Return value:  Size  Location     Type
 21254 ;;                  2    0[COMRAM] PTR unsigned char 
 21255 ;; Registers used:
 21256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21257 ;; Tracked objects:
 21258 ;;		On entry : 0/0
 21259 ;;		On exit  : 0/0
 21260 ;;		Unchanged: 0/0
 21261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21262 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21265 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21266 ;;Total ram usage:        6 bytes
 21267 ;; Hardware stack levels used:    1
 21268 ;; This function calls:
 21269 ;;		Nothing
 21270 ;; This function is called by:
 21271 ;;		i2_printRTC
 21272 ;; This function uses a non-reentrant model
 21273 ;;
 21274                           
 21275                           	psect	text68
 21276  0056E8                     __ptext68:
 21277                           	opt stack 0
 21278  0056E8                     i2_strcpy:
 21279                           	opt stack 21
 21280                           
 21281                           ;incstack = 0
 21282  0056E8  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21283  0056EC  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21284  0056F0  D004               	goto	i2l7096
 21285  0056F2                     i2l7094:
 21286  0056F2  4A05               	infsnz	i2strcpy@cp,f,c
 21287  0056F4  2A06               	incf	i2strcpy@cp+1,f,c
 21288  0056F6  4A03               	infsnz	i2strcpy@from,f,c
 21289  0056F8  2A04               	incf	i2strcpy@from+1,f,c
 21290  0056FA                     i2l7096:
 21291  0056FA  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21292  0056FE  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21293  005702                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21294  005702  6AF8               	clrf	tblptru,c
 21295  005704                     	endif
 21296  005704                     	if	0	;tblptru may be non-zero
 21297  005704                     	endif
 21298  005704  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21299  005708  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21300  00570C  0008               	tblrd		*
 21301  00570E  CFF5 FFDF          	movff	tablat,indf2
 21302  005712  50DF               	movf	indf2,w,c
 21303  005714  B4D8               	btfsc	status,2,c
 21304  005716  0012               	return	
 21305  005718  D7EC               	goto	i2l7094
 21306  00571A                     __end_ofi2_strcpy:
 21307                           	opt stack 0
 21308                           pclatu	equ	0xFFB
 21309                           pclath	equ	0xFFA
 21310                           tblptru	equ	0xFF8
 21311                           tblptrh	equ	0xFF7
 21312                           tblptrl	equ	0xFF6
 21313                           tablat	equ	0xFF5
 21314                           prodh	equ	0xFF4
 21315                           prodl	equ	0xFF3
 21316                           intcon	equ	0xFF2
 21317                           intcon2	equ	0xFF1
 21318                           intcon3	equ	0xFF0
 21319                           indf0	equ	0xFEF
 21320                           postinc0	equ	0xFEE
 21321                           fsr0h	equ	0xFEA
 21322                           fsr0l	equ	0xFE9
 21323                           wreg	equ	0xFE8
 21324                           postdec1	equ	0xFE5
 21325                           fsr1h	equ	0xFE2
 21326                           fsr1l	equ	0xFE1
 21327                           indf2	equ	0xFDF
 21328                           postinc2	equ	0xFDE
 21329                           postdec2	equ	0xFDD
 21330                           fsr2h	equ	0xFDA
 21331                           fsr2l	equ	0xFD9
 21332                           status	equ	0xFD8
 21333                           
 21334 ;; *************** function _inputHandler *****************
 21335 ;; Defined at:
 21336 ;;		line 375 in file "UI.c"
 21337 ;; Parameters:    Size  Location     Type
 21338 ;;		None
 21339 ;; Auto vars:     Size  Location     Type
 21340 ;;		None
 21341 ;; Return value:  Size  Location     Type
 21342 ;;                  2   41[COMRAM] int 
 21343 ;; Registers used:
 21344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21345 ;; Tracked objects:
 21346 ;;		On entry : 0/0
 21347 ;;		On exit  : 0/0
 21348 ;;		Unchanged: 0/0
 21349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21354 ;;Total ram usage:        4 bytes
 21355 ;; Hardware stack levels used:    1
 21356 ;; Hardware stack levels required when called:    4
 21357 ;; This function calls:
 21358 ;;		_change_state_to_logs_11
 21359 ;;		_change_state_to_logs_12
 21360 ;;		_change_state_to_logs_22
 21361 ;;		_change_state_to_logs_23
 21362 ;;		_change_state_to_logs_33
 21363 ;;		_change_state_to_logs_34
 21364 ;;		_change_state_to_menu_11
 21365 ;;		_change_state_to_menu_23
 21366 ;;		i2_change_state_to_menu_12
 21367 ;;		i2_change_state_to_menu_22
 21368 ;; This function is called by:
 21369 ;;		_updateMenu
 21370 ;; This function uses a non-reentrant model
 21371 ;;
 21372                           
 21373                           	psect	text69
 21374  003A3C                     __ptext69:
 21375                           	opt stack 0
 21376  003A3C                     _inputHandler:
 21377                           	opt stack 18
 21378                           
 21379                           ;UI.c: 380: if(firstboot){
 21380                           
 21381                           ;incstack = 0
 21382  003A3C  0101               	movlb	1	; () banked
 21383  003A3E  513B               	movf	_firstboot& (0+255),w,b
 21384  003A40  0101               	movlb	1	; () banked
 21385  003A42  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 21386  003A44  B4D8               	btfsc	status,2,c
 21387  003A46  D00C               	goto	i2l7634
 21388                           
 21389                           ; BSR set to: 1
 21390                           ;UI.c: 381: change_state_to_menu_11();
 21391  003A48  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 21392                           
 21393                           ;UI.c: 382: firstboot = 0;
 21394  003A4C  0E00               	movlw	0
 21395  003A4E  0101               	movlb	1	; () banked
 21396  003A50  6F3C               	movwf	(_firstboot+1)& (0+255),b
 21397  003A52  0E00               	movlw	0
 21398  003A54  6F3B               	movwf	_firstboot& (0+255),b
 21399                           
 21400                           ; BSR set to: 1
 21401                           ;UI.c: 383: return 0;
 21402  003A56  0E00               	movlw	0
 21403  003A58  6E2B               	movwf	?_inputHandler+1,c
 21404  003A5A  0E00               	movlw	0
 21405  003A5C  6E2A               	movwf	?_inputHandler,c
 21406                           
 21407                           ; BSR set to: 1
 21408  003A5E  0012               	return	
 21409  003A60                     i2l7634:
 21410                           
 21411                           ; BSR set to: 1
 21412                           ;UI.c: 384: }
 21413                           ;UI.c: 385: if (logstate){
 21414  003A60  0100               	movlb	0	; () banked
 21415  003A62  51F8               	movf	_logstate& (0+255),w,b
 21416  003A64  0100               	movlb	0	; () banked
 21417  003A66  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21418  003A68  B4D8               	btfsc	status,2,c
 21419  003A6A  D0C7               	goto	i2l7752
 21420                           
 21421                           ; BSR set to: 0
 21422                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21423  003A6C  0E43               	movlw	67
 21424  003A6E  187D               	xorwf	_input,w,c	;volatile
 21425  003A70  A4D8               	btfss	status,2,c
 21426  003A72  D012               	goto	i2l7652
 21427                           
 21428                           ; BSR set to: 0
 21429  003A74  B281               	btfsc	3969,1,c	;volatile
 21430  003A76  D009               	goto	i2l7644
 21431  003A78  D00F               	goto	i2l7652
 21432  003A7A                     i2l7642:
 21433                           
 21434                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21435  003A7A  0E68               	movlw	104
 21436  003A7C  6E2C               	movwf	??_inputHandler& (0+255),c
 21437  003A7E  0EE4               	movlw	228
 21438  003A80                     i2u1148_47:
 21439  003A80  2EE8               	decfsz	wreg,f,c
 21440  003A82  D7FE               	bra	i2u1148_47
 21441  003A84  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21442  003A86  D7FC               	bra	i2u1148_47
 21443  003A88  D000               	nop2	
 21444  003A8A                     i2l7644:
 21445  003A8A  B281               	btfsc	3969,1,c	;volatile
 21446  003A8C  D7F6               	goto	i2l7642
 21447  003A8E                     i2l7646:
 21448                           
 21449                           ;UI.c: 390: }
 21450                           ;UI.c: 391: return 0;
 21451  003A8E  0E00               	movlw	0
 21452  003A90  6E2B               	movwf	?_inputHandler+1,c
 21453  003A92  0E00               	movlw	0
 21454  003A94  6E2A               	movwf	?_inputHandler,c
 21455  003A96  0012               	return	
 21456  003A98                     i2l7652:
 21457                           
 21458                           ;UI.c: 393: else if (input == 'D'){
 21459  003A98  0E44               	movlw	68
 21460  003A9A  187D               	xorwf	_input,w,c	;volatile
 21461  003A9C  A4D8               	btfss	status,2,c
 21462  003A9E  D7F7               	goto	i2l7646
 21463                           
 21464                           ;UI.c: 395: logstate = 0;
 21465  003AA0  0E00               	movlw	0
 21466  003AA2  0100               	movlb	0	; () banked
 21467  003AA4  6FF9               	movwf	(_logstate+1)& (0+255),b
 21468  003AA6  0E00               	movlw	0
 21469  003AA8  6FF8               	movwf	_logstate& (0+255),b
 21470                           
 21471                           ;UI.c: 396: switch(cur_state){
 21472  003AAA  D012               	goto	i2l7670
 21473  003AAC                     i2l7656:
 21474                           
 21475                           ;UI.c: 398: change_state_to_logs_11();
 21476  003AAC  EC65  F02C         	call	_change_state_to_logs_11	;wreg free
 21477                           
 21478                           ;UI.c: 399: break;
 21479  003AB0  D7EE               	goto	i2l7646
 21480  003AB2                     i2l7658:
 21481                           
 21482                           ;UI.c: 401: change_state_to_logs_12();
 21483  003AB2  EC4D  F02C         	call	_change_state_to_logs_12	;wreg free
 21484                           
 21485                           ;UI.c: 402: break;
 21486  003AB6  D7EB               	goto	i2l7646
 21487  003AB8                     i2l7660:
 21488                           
 21489                           ;UI.c: 404: change_state_to_logs_22();
 21490  003AB8  EC35  F02C         	call	_change_state_to_logs_22	;wreg free
 21491                           
 21492                           ;UI.c: 405: break;
 21493  003ABC  D7E8               	goto	i2l7646
 21494  003ABE                     i2l7662:
 21495                           
 21496                           ;UI.c: 407: change_state_to_logs_23();
 21497  003ABE  EC94  F02C         	call	_change_state_to_logs_23	;wreg free
 21498                           
 21499                           ;UI.c: 408: break;
 21500  003AC2  D7E5               	goto	i2l7646
 21501  003AC4                     i2l7664:
 21502                           
 21503                           ;UI.c: 410: change_state_to_logs_33();
 21504  003AC4  EC1D  F02C         	call	_change_state_to_logs_33	;wreg free
 21505                           
 21506                           ;UI.c: 411: break;
 21507  003AC8  D7E2               	goto	i2l7646
 21508  003ACA                     i2l7666:
 21509                           
 21510                           ;UI.c: 413: change_state_to_logs_34();
 21511  003ACA  EC05  F02C         	call	_change_state_to_logs_34	;wreg free
 21512                           
 21513                           ;UI.c: 415: }
 21514                           
 21515                           ;UI.c: 414: break;
 21516  003ACE  D7DF               	goto	i2l7646
 21517  003AD0                     i2l7670:
 21518  003AD0  C0EC  F02C         	movff	_cur_state,??_inputHandler
 21519  003AD4  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 21520                           
 21521                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21522                           ; Switch size 1, requested type "space"
 21523                           ; Number of cases is 2, Range of values is 3 to 4
 21524                           ; switch strategies available:
 21525                           ; Name         Instructions Cycles
 21526                           ; simple_byte            7     4 (average)
 21527                           ;	Chosen strategy is simple_byte
 21528  003AD8  502D               	movf	??_inputHandler+1,w,c
 21529  003ADA  0A03               	xorlw	3	; case 3
 21530  003ADC  B4D8               	btfsc	status,2,c
 21531  003ADE  D004               	goto	i2l10708
 21532  003AE0  0A07               	xorlw	7	; case 4
 21533  003AE2  B4D8               	btfsc	status,2,c
 21534  003AE4  D00F               	goto	i2l10710
 21535  003AE6  D7D3               	goto	i2l7646
 21536  003AE8                     i2l10708:
 21537                           
 21538                           ; Switch size 1, requested type "space"
 21539                           ; Number of cases is 4, Range of values is 243 to 255
 21540                           ; switch strategies available:
 21541                           ; Name         Instructions Cycles
 21542                           ; simple_byte           13     7 (average)
 21543                           ;	Chosen strategy is simple_byte
 21544  003AE8  502C               	movf	??_inputHandler,w,c
 21545  003AEA  0AF3               	xorlw	243	; case 243
 21546  003AEC  B4D8               	btfsc	status,2,c
 21547  003AEE  D7DE               	goto	i2l7656
 21548  003AF0  0A07               	xorlw	7	; case 244
 21549  003AF2  B4D8               	btfsc	status,2,c
 21550  003AF4  D7DE               	goto	i2l7658
 21551  003AF6  0A0A               	xorlw	10	; case 254
 21552  003AF8  B4D8               	btfsc	status,2,c
 21553  003AFA  D7DE               	goto	i2l7660
 21554  003AFC  0A01               	xorlw	1	; case 255
 21555  003AFE  B4D8               	btfsc	status,2,c
 21556  003B00  D7DE               	goto	i2l7662
 21557  003B02  D7C5               	goto	i2l7646
 21558  003B04                     i2l10710:
 21559                           
 21560                           ; Switch size 1, requested type "space"
 21561                           ; Number of cases is 2, Range of values is 9 to 10
 21562                           ; switch strategies available:
 21563                           ; Name         Instructions Cycles
 21564                           ; simple_byte            7     4 (average)
 21565                           ;	Chosen strategy is simple_byte
 21566  003B04  502C               	movf	??_inputHandler,w,c
 21567  003B06  0A09               	xorlw	9	; case 9
 21568  003B08  B4D8               	btfsc	status,2,c
 21569  003B0A  D7DC               	goto	i2l7664
 21570  003B0C  0A03               	xorlw	3	; case 10
 21571  003B0E  B4D8               	btfsc	status,2,c
 21572  003B10  D7DC               	goto	i2l7666
 21573  003B12  D7BD               	goto	i2l7646
 21574  003B14                     i2l7682:
 21575                           
 21576                           ;UI.c: 425: if(cur_state == 11){
 21577  003B14  0E0B               	movlw	11
 21578  003B16  0100               	movlb	0	; () banked
 21579  003B18  19EC               	xorwf	_cur_state& (0+255),w,b
 21580  003B1A  0100               	movlb	0	; () banked
 21581  003B1C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 21582  003B1E  A4D8               	btfss	status,2,c
 21583  003B20  D005               	goto	i2l7690
 21584                           
 21585                           ; BSR set to: 0
 21586                           ;UI.c: 426: return 0;
 21587  003B22  0E00               	movlw	0
 21588  003B24  6E2B               	movwf	?_inputHandler+1,c
 21589  003B26  0E00               	movlw	0
 21590  003B28  6E2A               	movwf	?_inputHandler,c
 21591                           
 21592                           ; BSR set to: 0
 21593  003B2A  0012               	return	
 21594  003B2C                     i2l7690:
 21595                           
 21596                           ; BSR set to: 0
 21597                           ;UI.c: 428: else{
 21598                           ;UI.c: 429: change_state_to_menu_11();
 21599  003B2C  ECED  F02B         	call	_change_state_to_menu_11	;wreg free
 21600                           
 21601                           ;UI.c: 430: }
 21602                           ;UI.c: 431: return 0;
 21603  003B30  0E00               	movlw	0
 21604  003B32  6E2B               	movwf	?_inputHandler+1,c
 21605  003B34  0E00               	movlw	0
 21606  003B36  6E2A               	movwf	?_inputHandler,c
 21607  003B38  0012               	return	
 21608  003B3A                     i2l7696:
 21609                           
 21610                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21611  003B3A  0E16               	movlw	22
 21612  003B3C  0100               	movlb	0	; () banked
 21613  003B3E  19EC               	xorwf	_cur_state& (0+255),w,b
 21614  003B40  0100               	movlb	0	; () banked
 21615  003B42  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 21616  003B44  B4D8               	btfsc	status,2,c
 21617  003B46  D007               	goto	i2l7700
 21618                           
 21619                           ; BSR set to: 0
 21620  003B48  0E0C               	movlw	12
 21621  003B4A  0100               	movlb	0	; () banked
 21622  003B4C  19EC               	xorwf	_cur_state& (0+255),w,b
 21623  003B4E  0100               	movlb	0	; () banked
 21624  003B50  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 21625  003B52  A4D8               	btfss	status,2,c
 21626  003B54  D005               	goto	i2l7706
 21627  003B56                     i2l7700:
 21628                           
 21629                           ; BSR set to: 0
 21630                           ;UI.c: 434: return 0;
 21631  003B56  0E00               	movlw	0
 21632  003B58  6E2B               	movwf	?_inputHandler+1,c
 21633  003B5A  0E00               	movlw	0
 21634  003B5C  6E2A               	movwf	?_inputHandler,c
 21635                           
 21636                           ; BSR set to: 0
 21637  003B5E  0012               	return	
 21638  003B60                     i2l7706:
 21639                           
 21640                           ; BSR set to: 0
 21641                           ;UI.c: 436: else if(cur_state == 23){
 21642  003B60  0E17               	movlw	23
 21643  003B62  0100               	movlb	0	; () banked
 21644  003B64  19EC               	xorwf	_cur_state& (0+255),w,b
 21645  003B66  0100               	movlb	0	; () banked
 21646  003B68  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 21647  003B6A  A4D8               	btfss	status,2,c
 21648  003B6C  D003               	goto	i2l7710
 21649                           
 21650                           ; BSR set to: 0
 21651                           ;UI.c: 437: change_state_to_menu_22();
 21652  003B6E  ECA5  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21653                           
 21654                           ;UI.c: 438: }
 21655  003B72  D002               	goto	i2l7712
 21656  003B74                     i2l7710:
 21657                           
 21658                           ;UI.c: 439: else{
 21659                           ;UI.c: 440: change_state_to_menu_12();
 21660  003B74  ECBD  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21661  003B78                     i2l7712:
 21662                           
 21663                           ;UI.c: 441: }
 21664                           ;UI.c: 442: return 0;
 21665  003B78  0E00               	movlw	0
 21666  003B7A  6E2B               	movwf	?_inputHandler+1,c
 21667  003B7C  0E00               	movlw	0
 21668  003B7E  6E2A               	movwf	?_inputHandler,c
 21669  003B80  0012               	return	
 21670  003B82                     i2l7716:
 21671                           
 21672                           ;UI.c: 444: if(cur_state == 23){
 21673  003B82  0E17               	movlw	23
 21674  003B84  0100               	movlb	0	; () banked
 21675  003B86  19EC               	xorwf	_cur_state& (0+255),w,b
 21676  003B88  0100               	movlb	0	; () banked
 21677  003B8A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 21678  003B8C  A4D8               	btfss	status,2,c
 21679  003B8E  D005               	goto	i2l7724
 21680                           
 21681                           ; BSR set to: 0
 21682                           ;UI.c: 445: return 0;
 21683  003B90  0E00               	movlw	0
 21684  003B92  6E2B               	movwf	?_inputHandler+1,c
 21685  003B94  0E00               	movlw	0
 21686  003B96  6E2A               	movwf	?_inputHandler,c
 21687                           
 21688                           ; BSR set to: 0
 21689  003B98  0012               	return	
 21690  003B9A                     i2l7724:
 21691                           
 21692                           ; BSR set to: 0
 21693                           ;UI.c: 447: else{
 21694                           ;UI.c: 448: change_state_to_menu_23();
 21695  003B9A  ECD5  F02B         	call	_change_state_to_menu_23	;wreg free
 21696                           
 21697                           ;UI.c: 449: }
 21698                           ;UI.c: 450: return 0;
 21699  003B9E  0E00               	movlw	0
 21700  003BA0  6E2B               	movwf	?_inputHandler+1,c
 21701  003BA2  0E00               	movlw	0
 21702  003BA4  6E2A               	movwf	?_inputHandler,c
 21703  003BA6  0012               	return	
 21704  003BA8                     i2l7730:
 21705                           
 21706                           ;UI.c: 453: up = 1;
 21707  003BA8  0E00               	movlw	0
 21708  003BAA  6E76               	movwf	_up+1,c
 21709  003BAC  0E01               	movlw	1
 21710  003BAE  6E75               	movwf	_up,c
 21711                           
 21712                           ;UI.c: 454: return 1;
 21713  003BB0  0E00               	movlw	0
 21714  003BB2  6E2B               	movwf	?_inputHandler+1,c
 21715  003BB4  0E01               	movlw	1
 21716  003BB6  6E2A               	movwf	?_inputHandler,c
 21717  003BB8  0012               	return	
 21718  003BBA                     i2l7734:
 21719                           
 21720                           ;UI.c: 456: down = 1;
 21721  003BBA  0E00               	movlw	0
 21722  003BBC  6E5E               	movwf	_down+1,c
 21723  003BBE  0E01               	movlw	1
 21724  003BC0  6E5D               	movwf	_down,c
 21725                           
 21726                           ;UI.c: 457: return 1;
 21727  003BC2  0E00               	movlw	0
 21728  003BC4  6E2B               	movwf	?_inputHandler+1,c
 21729  003BC6  0E01               	movlw	1
 21730  003BC8  6E2A               	movwf	?_inputHandler,c
 21731  003BCA  0012               	return	
 21732  003BCC                     i2l7738:
 21733                           
 21734                           ;UI.c: 459: enter = 1;
 21735  003BCC  0E00               	movlw	0
 21736  003BCE  6E60               	movwf	_enter+1,c
 21737  003BD0  0E01               	movlw	1
 21738  003BD2  6E5F               	movwf	_enter,c
 21739                           
 21740                           ;UI.c: 460: return 1;
 21741  003BD4  0E00               	movlw	0
 21742  003BD6  6E2B               	movwf	?_inputHandler+1,c
 21743  003BD8  0E01               	movlw	1
 21744  003BDA  6E2A               	movwf	?_inputHandler,c
 21745  003BDC  0012               	return	
 21746  003BDE                     i2l7742:
 21747                           
 21748                           ;UI.c: 462: back = 1;
 21749  003BDE  0E00               	movlw	0
 21750  003BE0  6E5C               	movwf	_back+1,c
 21751  003BE2  0E01               	movlw	1
 21752  003BE4  6E5B               	movwf	_back,c
 21753                           
 21754                           ;UI.c: 463: return 1;
 21755  003BE6  0E00               	movlw	0
 21756  003BE8  6E2B               	movwf	?_inputHandler+1,c
 21757  003BEA  0E01               	movlw	1
 21758  003BEC  6E2A               	movwf	?_inputHandler,c
 21759  003BEE  0012               	return	
 21760  003BF0                     i2l7746:
 21761                           
 21762                           ;UI.c: 466: return 1;
 21763  003BF0  0E00               	movlw	0
 21764  003BF2  6E2B               	movwf	?_inputHandler+1,c
 21765  003BF4  0E01               	movlw	1
 21766  003BF6  6E2A               	movwf	?_inputHandler,c
 21767                           
 21768                           ;UI.c: 467: }
 21769  003BF8  0012               	return	
 21770  003BFA                     i2l7752:
 21771  003BFA  507D               	movf	_input,w,c	;volatile
 21772                           
 21773                           ; Switch size 1, requested type "space"
 21774                           ; Number of cases is 7, Range of values is 49 to 68
 21775                           ; switch strategies available:
 21776                           ; Name         Instructions Cycles
 21777                           ; simple_byte           22    12 (average)
 21778                           ;	Chosen strategy is simple_byte
 21779  003BFC  0A31               	xorlw	49	; case 49
 21780  003BFE  B4D8               	btfsc	status,2,c
 21781  003C00  D789               	goto	i2l7682
 21782  003C02  0A03               	xorlw	3	; case 50
 21783  003C04  B4D8               	btfsc	status,2,c
 21784  003C06  D799               	goto	i2l7696
 21785  003C08  0A01               	xorlw	1	; case 51
 21786  003C0A  B4D8               	btfsc	status,2,c
 21787  003C0C  D7BA               	goto	i2l7716
 21788  003C0E  0A72               	xorlw	114	; case 65
 21789  003C10  B4D8               	btfsc	status,2,c
 21790  003C12  D7CA               	goto	i2l7730
 21791  003C14  0A03               	xorlw	3	; case 66
 21792  003C16  B4D8               	btfsc	status,2,c
 21793  003C18  D7D0               	goto	i2l7734
 21794  003C1A  0A01               	xorlw	1	; case 67
 21795  003C1C  B4D8               	btfsc	status,2,c
 21796  003C1E  D7D6               	goto	i2l7738
 21797  003C20  0A07               	xorlw	7	; case 68
 21798  003C22  B4D8               	btfsc	status,2,c
 21799  003C24  D7DC               	goto	i2l7742
 21800  003C26  D7E4               	goto	i2l7746
 21801  003C28                     __end_of_inputHandler:
 21802                           	opt stack 0
 21803                           pclatu	equ	0xFFB
 21804                           pclath	equ	0xFFA
 21805                           tblptru	equ	0xFF8
 21806                           tblptrh	equ	0xFF7
 21807                           tblptrl	equ	0xFF6
 21808                           tablat	equ	0xFF5
 21809                           prodh	equ	0xFF4
 21810                           prodl	equ	0xFF3
 21811                           intcon	equ	0xFF2
 21812                           intcon2	equ	0xFF1
 21813                           intcon3	equ	0xFF0
 21814                           indf0	equ	0xFEF
 21815                           postinc0	equ	0xFEE
 21816                           fsr0h	equ	0xFEA
 21817                           fsr0l	equ	0xFE9
 21818                           wreg	equ	0xFE8
 21819                           postdec1	equ	0xFE5
 21820                           fsr1h	equ	0xFE2
 21821                           fsr1l	equ	0xFE1
 21822                           indf2	equ	0xFDF
 21823                           postinc2	equ	0xFDE
 21824                           postdec2	equ	0xFDD
 21825                           fsr2h	equ	0xFDA
 21826                           fsr2l	equ	0xFD9
 21827                           status	equ	0xFD8
 21828                           
 21829 ;; *************** function i2_change_state_to_menu_22 *****************
 21830 ;; Defined at:
 21831 ;;		line 501 in file "UI.c"
 21832 ;; Parameters:    Size  Location     Type
 21833 ;;		None
 21834 ;; Auto vars:     Size  Location     Type
 21835 ;;		None
 21836 ;; Return value:  Size  Location     Type
 21837 ;;                  1    wreg      void 
 21838 ;; Registers used:
 21839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21840 ;; Tracked objects:
 21841 ;;		On entry : 0/0
 21842 ;;		On exit  : 0/0
 21843 ;;		Unchanged: 0/0
 21844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21849 ;;Total ram usage:        0 bytes
 21850 ;; Hardware stack levels used:    1
 21851 ;; Hardware stack levels required when called:    3
 21852 ;; This function calls:
 21853 ;;		i2_lcdInst
 21854 ;;		i2_printf
 21855 ;; This function is called by:
 21856 ;;		_updateMenu
 21857 ;;		_inputHandler
 21858 ;; This function uses a non-reentrant model
 21859 ;;
 21860                           
 21861                           	psect	text70
 21862  00574A                     __ptext70:
 21863                           	opt stack 0
 21864  00574A                     i2_change_state_to_menu_22:
 21865                           	opt stack 19
 21866                           
 21867                           ;UI.c: 502: cur_state = 22;
 21868                           
 21869                           ;incstack = 0
 21870  00574A  0E00               	movlw	0
 21871  00574C  0100               	movlb	0	; () banked
 21872  00574E  6FED               	movwf	(_cur_state+1)& (0+255),b
 21873  005750  0E16               	movlw	22
 21874  005752  6FEC               	movwf	_cur_state& (0+255),b
 21875                           
 21876                           ; BSR set to: 0
 21877                           ;UI.c: 504: lcdInst(0b10000000);;
 21878  005754  0E80               	movlw	128
 21879  005756  ECD9  F02D         	call	i2_lcdInst
 21880                           
 21881                           ;UI.c: 505: printf("2. SORT        <");
 21882  00575A  0EC6               	movlw	low STR_34
 21883  00575C  6E0D               	movwf	i2printf@f,c
 21884  00575E  0EFD               	movlw	high STR_34
 21885  005760  6E0E               	movwf	i2printf@f+1,c
 21886  005762  ECBB  F013         	call	i2_printf	;wreg free
 21887                           
 21888                           ;UI.c: 506: lcdInst(0b11000000);;
 21889  005766  0EC0               	movlw	192
 21890  005768  ECD9  F02D         	call	i2_lcdInst
 21891                           
 21892                           ;UI.c: 507: printf("3. LOGS         ");
 21893  00576C  0E0B               	movlw	low STR_36
 21894  00576E  6E0D               	movwf	i2printf@f,c
 21895  005770  0EFD               	movlw	high STR_36
 21896  005772  6E0E               	movwf	i2printf@f+1,c
 21897  005774  ECBB  F013         	call	i2_printf	;wreg free
 21898  005778  0012               	return		;funcret
 21899  00577A                     __end_ofi2_change_state_to_menu_22:
 21900                           	opt stack 0
 21901                           pclatu	equ	0xFFB
 21902                           pclath	equ	0xFFA
 21903                           tblptru	equ	0xFF8
 21904                           tblptrh	equ	0xFF7
 21905                           tblptrl	equ	0xFF6
 21906                           tablat	equ	0xFF5
 21907                           prodh	equ	0xFF4
 21908                           prodl	equ	0xFF3
 21909                           intcon	equ	0xFF2
 21910                           intcon2	equ	0xFF1
 21911                           intcon3	equ	0xFF0
 21912                           indf0	equ	0xFEF
 21913                           postinc0	equ	0xFEE
 21914                           fsr0h	equ	0xFEA
 21915                           fsr0l	equ	0xFE9
 21916                           wreg	equ	0xFE8
 21917                           postdec1	equ	0xFE5
 21918                           fsr1h	equ	0xFE2
 21919                           fsr1l	equ	0xFE1
 21920                           indf2	equ	0xFDF
 21921                           postinc2	equ	0xFDE
 21922                           postdec2	equ	0xFDD
 21923                           fsr2h	equ	0xFDA
 21924                           fsr2l	equ	0xFD9
 21925                           status	equ	0xFD8
 21926                           
 21927 ;; *************** function i2_change_state_to_menu_12 *****************
 21928 ;; Defined at:
 21929 ;;		line 493 in file "UI.c"
 21930 ;; Parameters:    Size  Location     Type
 21931 ;;		None
 21932 ;; Auto vars:     Size  Location     Type
 21933 ;;		None
 21934 ;; Return value:  Size  Location     Type
 21935 ;;                  1    wreg      void 
 21936 ;; Registers used:
 21937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21938 ;; Tracked objects:
 21939 ;;		On entry : 0/0
 21940 ;;		On exit  : 0/0
 21941 ;;		Unchanged: 0/0
 21942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21947 ;;Total ram usage:        0 bytes
 21948 ;; Hardware stack levels used:    1
 21949 ;; Hardware stack levels required when called:    3
 21950 ;; This function calls:
 21951 ;;		i2_lcdInst
 21952 ;;		i2_printf
 21953 ;; This function is called by:
 21954 ;;		_updateMenu
 21955 ;;		_inputHandler
 21956 ;; This function uses a non-reentrant model
 21957 ;;
 21958                           
 21959                           	psect	text71
 21960  00577A                     __ptext71:
 21961                           	opt stack 0
 21962  00577A                     i2_change_state_to_menu_12:
 21963                           	opt stack 19
 21964                           
 21965                           ;UI.c: 494: cur_state = 12;
 21966                           
 21967                           ;incstack = 0
 21968  00577A  0E00               	movlw	0
 21969  00577C  0100               	movlb	0	; () banked
 21970  00577E  6FED               	movwf	(_cur_state+1)& (0+255),b
 21971  005780  0E0C               	movlw	12
 21972  005782  6FEC               	movwf	_cur_state& (0+255),b
 21973                           
 21974                           ; BSR set to: 0
 21975                           ;UI.c: 496: lcdInst(0b10000000);;
 21976  005784  0E80               	movlw	128
 21977  005786  ECD9  F02D         	call	i2_lcdInst
 21978                           
 21979                           ;UI.c: 497: printf("1. DATE/TIME    ");
 21980  00578A  0E2D               	movlw	low STR_33
 21981  00578C  6E0D               	movwf	i2printf@f,c
 21982  00578E  0EFD               	movlw	high STR_33
 21983  005790  6E0E               	movwf	i2printf@f+1,c
 21984  005792  ECBB  F013         	call	i2_printf	;wreg free
 21985                           
 21986                           ;UI.c: 498: lcdInst(0b11000000);;
 21987  005796  0EC0               	movlw	192
 21988  005798  ECD9  F02D         	call	i2_lcdInst
 21989                           
 21990                           ;UI.c: 499: printf("2. SORT        <");
 21991  00579C  0EC6               	movlw	low STR_34
 21992  00579E  6E0D               	movwf	i2printf@f,c
 21993  0057A0  0EFD               	movlw	high STR_34
 21994  0057A2  6E0E               	movwf	i2printf@f+1,c
 21995  0057A4  ECBB  F013         	call	i2_printf	;wreg free
 21996  0057A8  0012               	return		;funcret
 21997  0057AA                     __end_ofi2_change_state_to_menu_12:
 21998                           	opt stack 0
 21999                           pclatu	equ	0xFFB
 22000                           pclath	equ	0xFFA
 22001                           tblptru	equ	0xFF8
 22002                           tblptrh	equ	0xFF7
 22003                           tblptrl	equ	0xFF6
 22004                           tablat	equ	0xFF5
 22005                           prodh	equ	0xFF4
 22006                           prodl	equ	0xFF3
 22007                           intcon	equ	0xFF2
 22008                           intcon2	equ	0xFF1
 22009                           intcon3	equ	0xFF0
 22010                           indf0	equ	0xFEF
 22011                           postinc0	equ	0xFEE
 22012                           fsr0h	equ	0xFEA
 22013                           fsr0l	equ	0xFE9
 22014                           wreg	equ	0xFE8
 22015                           postdec1	equ	0xFE5
 22016                           fsr1h	equ	0xFE2
 22017                           fsr1l	equ	0xFE1
 22018                           indf2	equ	0xFDF
 22019                           postinc2	equ	0xFDE
 22020                           postdec2	equ	0xFDD
 22021                           fsr2h	equ	0xFDA
 22022                           fsr2l	equ	0xFD9
 22023                           status	equ	0xFD8
 22024                           
 22025 ;; *************** function _change_state_to_menu_23 *****************
 22026 ;; Defined at:
 22027 ;;		line 509 in file "UI.c"
 22028 ;; Parameters:    Size  Location     Type
 22029 ;;		None
 22030 ;; Auto vars:     Size  Location     Type
 22031 ;;		None
 22032 ;; Return value:  Size  Location     Type
 22033 ;;                  1    wreg      void 
 22034 ;; Registers used:
 22035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22036 ;; Tracked objects:
 22037 ;;		On entry : 0/0
 22038 ;;		On exit  : 0/0
 22039 ;;		Unchanged: 0/0
 22040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22045 ;;Total ram usage:        0 bytes
 22046 ;; Hardware stack levels used:    1
 22047 ;; Hardware stack levels required when called:    3
 22048 ;; This function calls:
 22049 ;;		i2_lcdInst
 22050 ;;		i2_printf
 22051 ;; This function is called by:
 22052 ;;		_updateMenu
 22053 ;;		_inputHandler
 22054 ;; This function uses a non-reentrant model
 22055 ;;
 22056                           
 22057                           	psect	text72
 22058  0057AA                     __ptext72:
 22059                           	opt stack 0
 22060  0057AA                     _change_state_to_menu_23:
 22061                           	opt stack 18
 22062                           
 22063                           ;UI.c: 510: cur_state = 23;
 22064                           
 22065                           ;incstack = 0
 22066  0057AA  0E00               	movlw	0
 22067  0057AC  0100               	movlb	0	; () banked
 22068  0057AE  6FED               	movwf	(_cur_state+1)& (0+255),b
 22069  0057B0  0E17               	movlw	23
 22070  0057B2  6FEC               	movwf	_cur_state& (0+255),b
 22071                           
 22072                           ; BSR set to: 0
 22073                           ;UI.c: 512: lcdInst(0b10000000);;
 22074  0057B4  0E80               	movlw	128
 22075  0057B6  ECD9  F02D         	call	i2_lcdInst
 22076                           
 22077                           ;UI.c: 513: printf("2. SORT         ");
 22078  0057BA  0E1C               	movlw	low STR_32
 22079  0057BC  6E0D               	movwf	i2printf@f,c
 22080  0057BE  0EFD               	movlw	high STR_32
 22081  0057C0  6E0E               	movwf	i2printf@f+1,c
 22082  0057C2  ECBB  F013         	call	i2_printf	;wreg free
 22083                           
 22084                           ;UI.c: 514: lcdInst(0b11000000);;
 22085  0057C6  0EC0               	movlw	192
 22086  0057C8  ECD9  F02D         	call	i2_lcdInst
 22087                           
 22088                           ;UI.c: 515: printf("3. LOGS        <");
 22089  0057CC  0EB5               	movlw	low STR_38
 22090  0057CE  6E0D               	movwf	i2printf@f,c
 22091  0057D0  0EFD               	movlw	high STR_38
 22092  0057D2  6E0E               	movwf	i2printf@f+1,c
 22093  0057D4  ECBB  F013         	call	i2_printf	;wreg free
 22094  0057D8  0012               	return		;funcret
 22095  0057DA                     __end_of_change_state_to_menu_23:
 22096                           	opt stack 0
 22097                           pclatu	equ	0xFFB
 22098                           pclath	equ	0xFFA
 22099                           tblptru	equ	0xFF8
 22100                           tblptrh	equ	0xFF7
 22101                           tblptrl	equ	0xFF6
 22102                           tablat	equ	0xFF5
 22103                           prodh	equ	0xFF4
 22104                           prodl	equ	0xFF3
 22105                           intcon	equ	0xFF2
 22106                           intcon2	equ	0xFF1
 22107                           intcon3	equ	0xFF0
 22108                           indf0	equ	0xFEF
 22109                           postinc0	equ	0xFEE
 22110                           fsr0h	equ	0xFEA
 22111                           fsr0l	equ	0xFE9
 22112                           wreg	equ	0xFE8
 22113                           postdec1	equ	0xFE5
 22114                           fsr1h	equ	0xFE2
 22115                           fsr1l	equ	0xFE1
 22116                           indf2	equ	0xFDF
 22117                           postinc2	equ	0xFDE
 22118                           postdec2	equ	0xFDD
 22119                           fsr2h	equ	0xFDA
 22120                           fsr2l	equ	0xFD9
 22121                           status	equ	0xFD8
 22122                           
 22123 ;; *************** function _change_state_to_menu_11 *****************
 22124 ;; Defined at:
 22125 ;;		line 485 in file "UI.c"
 22126 ;; Parameters:    Size  Location     Type
 22127 ;;		None
 22128 ;; Auto vars:     Size  Location     Type
 22129 ;;		None
 22130 ;; Return value:  Size  Location     Type
 22131 ;;                  1    wreg      void 
 22132 ;; Registers used:
 22133 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22134 ;; Tracked objects:
 22135 ;;		On entry : 0/0
 22136 ;;		On exit  : 0/0
 22137 ;;		Unchanged: 0/0
 22138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;Total ram usage:        0 bytes
 22144 ;; Hardware stack levels used:    1
 22145 ;; Hardware stack levels required when called:    3
 22146 ;; This function calls:
 22147 ;;		i2_lcdInst
 22148 ;;		i2_printf
 22149 ;; This function is called by:
 22150 ;;		_updateMenu
 22151 ;;		_inputHandler
 22152 ;; This function uses a non-reentrant model
 22153 ;;
 22154                           
 22155                           	psect	text73
 22156  0057DA                     __ptext73:
 22157                           	opt stack 0
 22158  0057DA                     _change_state_to_menu_11:
 22159                           	opt stack 18
 22160                           
 22161                           ;UI.c: 486: cur_state = 11;
 22162                           
 22163                           ;incstack = 0
 22164  0057DA  0E00               	movlw	0
 22165  0057DC  0100               	movlb	0	; () banked
 22166  0057DE  6FED               	movwf	(_cur_state+1)& (0+255),b
 22167  0057E0  0E0B               	movlw	11
 22168  0057E2  6FEC               	movwf	_cur_state& (0+255),b
 22169                           
 22170                           ; BSR set to: 0
 22171                           ;UI.c: 488: lcdInst(0b10000000);;
 22172  0057E4  0E80               	movlw	128
 22173  0057E6  ECD9  F02D         	call	i2_lcdInst
 22174                           
 22175                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22176  0057EA  0ED7               	movlw	low STR_31
 22177  0057EC  6E0D               	movwf	i2printf@f,c
 22178  0057EE  0EFD               	movlw	high STR_31
 22179  0057F0  6E0E               	movwf	i2printf@f+1,c
 22180  0057F2  ECBB  F013         	call	i2_printf	;wreg free
 22181                           
 22182                           ;UI.c: 490: lcdInst(0b11000000);;
 22183  0057F6  0EC0               	movlw	192
 22184  0057F8  ECD9  F02D         	call	i2_lcdInst
 22185                           
 22186                           ;UI.c: 491: printf("2. SORT         ");
 22187  0057FC  0E1C               	movlw	low STR_32
 22188  0057FE  6E0D               	movwf	i2printf@f,c
 22189  005800  0EFD               	movlw	high STR_32
 22190  005802  6E0E               	movwf	i2printf@f+1,c
 22191  005804  ECBB  F013         	call	i2_printf	;wreg free
 22192  005808  0012               	return		;funcret
 22193  00580A                     __end_of_change_state_to_menu_11:
 22194                           	opt stack 0
 22195                           pclatu	equ	0xFFB
 22196                           pclath	equ	0xFFA
 22197                           tblptru	equ	0xFF8
 22198                           tblptrh	equ	0xFF7
 22199                           tblptrl	equ	0xFF6
 22200                           tablat	equ	0xFF5
 22201                           prodh	equ	0xFF4
 22202                           prodl	equ	0xFF3
 22203                           intcon	equ	0xFF2
 22204                           intcon2	equ	0xFF1
 22205                           intcon3	equ	0xFF0
 22206                           indf0	equ	0xFEF
 22207                           postinc0	equ	0xFEE
 22208                           fsr0h	equ	0xFEA
 22209                           fsr0l	equ	0xFE9
 22210                           wreg	equ	0xFE8
 22211                           postdec1	equ	0xFE5
 22212                           fsr1h	equ	0xFE2
 22213                           fsr1l	equ	0xFE1
 22214                           indf2	equ	0xFDF
 22215                           postinc2	equ	0xFDE
 22216                           postdec2	equ	0xFDD
 22217                           fsr2h	equ	0xFDA
 22218                           fsr2l	equ	0xFD9
 22219                           status	equ	0xFD8
 22220                           
 22221 ;; *************** function _change_state_to_logs_34 *****************
 22222 ;; Defined at:
 22223 ;;		line 552 in file "UI.c"
 22224 ;; Parameters:    Size  Location     Type
 22225 ;;		None
 22226 ;; Auto vars:     Size  Location     Type
 22227 ;;		None
 22228 ;; Return value:  Size  Location     Type
 22229 ;;                  1    wreg      void 
 22230 ;; Registers used:
 22231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22232 ;; Tracked objects:
 22233 ;;		On entry : 0/0
 22234 ;;		On exit  : 0/0
 22235 ;;		Unchanged: 0/0
 22236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22241 ;;Total ram usage:        0 bytes
 22242 ;; Hardware stack levels used:    1
 22243 ;; Hardware stack levels required when called:    3
 22244 ;; This function calls:
 22245 ;;		i2_lcdInst
 22246 ;;		i2_printf
 22247 ;; This function is called by:
 22248 ;;		_updateMenu
 22249 ;;		_inputHandler
 22250 ;; This function uses a non-reentrant model
 22251 ;;
 22252                           
 22253                           	psect	text74
 22254  00580A                     __ptext74:
 22255                           	opt stack 0
 22256  00580A                     _change_state_to_logs_34:
 22257                           	opt stack 18
 22258                           
 22259                           ;UI.c: 553: cur_state = 1034;
 22260                           
 22261                           ;incstack = 0
 22262  00580A  0E04               	movlw	4
 22263  00580C  0100               	movlb	0	; () banked
 22264  00580E  6FED               	movwf	(_cur_state+1)& (0+255),b
 22265  005810  0E0A               	movlw	10
 22266  005812  6FEC               	movwf	_cur_state& (0+255),b
 22267                           
 22268                           ; BSR set to: 0
 22269                           ;UI.c: 554: lcdInst(0b10000000);;
 22270  005814  0E80               	movlw	128
 22271  005816  ECD9  F02D         	call	i2_lcdInst
 22272                           
 22273                           ;UI.c: 555: printf("LOG 3           ");
 22274  00581A  0EE9               	movlw	low STR_44
 22275  00581C  6E0D               	movwf	i2printf@f,c
 22276  00581E  0EFC               	movlw	high STR_44
 22277  005820  6E0E               	movwf	i2printf@f+1,c
 22278  005822  ECBB  F013         	call	i2_printf	;wreg free
 22279                           
 22280                           ;UI.c: 556: lcdInst(0b11000000);;
 22281  005826  0EC0               	movlw	192
 22282  005828  ECD9  F02D         	call	i2_lcdInst
 22283                           
 22284                           ;UI.c: 557: printf("LOG 4          <");
 22285  00582C  0EA4               	movlw	low STR_50
 22286  00582E  6E0D               	movwf	i2printf@f,c
 22287  005830  0EFD               	movlw	high STR_50
 22288  005832  6E0E               	movwf	i2printf@f+1,c
 22289  005834  ECBB  F013         	call	i2_printf	;wreg free
 22290  005838  0012               	return		;funcret
 22291  00583A                     __end_of_change_state_to_logs_34:
 22292                           	opt stack 0
 22293                           pclatu	equ	0xFFB
 22294                           pclath	equ	0xFFA
 22295                           tblptru	equ	0xFF8
 22296                           tblptrh	equ	0xFF7
 22297                           tblptrl	equ	0xFF6
 22298                           tablat	equ	0xFF5
 22299                           prodh	equ	0xFF4
 22300                           prodl	equ	0xFF3
 22301                           intcon	equ	0xFF2
 22302                           intcon2	equ	0xFF1
 22303                           intcon3	equ	0xFF0
 22304                           indf0	equ	0xFEF
 22305                           postinc0	equ	0xFEE
 22306                           fsr0h	equ	0xFEA
 22307                           fsr0l	equ	0xFE9
 22308                           wreg	equ	0xFE8
 22309                           postdec1	equ	0xFE5
 22310                           fsr1h	equ	0xFE2
 22311                           fsr1l	equ	0xFE1
 22312                           indf2	equ	0xFDF
 22313                           postinc2	equ	0xFDE
 22314                           postdec2	equ	0xFDD
 22315                           fsr2h	equ	0xFDA
 22316                           fsr2l	equ	0xFD9
 22317                           status	equ	0xFD8
 22318                           
 22319 ;; *************** function _change_state_to_logs_33 *****************
 22320 ;; Defined at:
 22321 ;;		line 545 in file "UI.c"
 22322 ;; Parameters:    Size  Location     Type
 22323 ;;		None
 22324 ;; Auto vars:     Size  Location     Type
 22325 ;;		None
 22326 ;; Return value:  Size  Location     Type
 22327 ;;                  1    wreg      void 
 22328 ;; Registers used:
 22329 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22330 ;; Tracked objects:
 22331 ;;		On entry : 0/0
 22332 ;;		On exit  : 0/0
 22333 ;;		Unchanged: 0/0
 22334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22339 ;;Total ram usage:        0 bytes
 22340 ;; Hardware stack levels used:    1
 22341 ;; Hardware stack levels required when called:    3
 22342 ;; This function calls:
 22343 ;;		i2_lcdInst
 22344 ;;		i2_printf
 22345 ;; This function is called by:
 22346 ;;		_updateMenu
 22347 ;;		_inputHandler
 22348 ;; This function uses a non-reentrant model
 22349 ;;
 22350                           
 22351                           	psect	text75
 22352  00583A                     __ptext75:
 22353                           	opt stack 0
 22354  00583A                     _change_state_to_logs_33:
 22355                           	opt stack 18
 22356                           
 22357                           ;UI.c: 546: cur_state = 1033;
 22358                           
 22359                           ;incstack = 0
 22360  00583A  0E04               	movlw	4
 22361  00583C  0100               	movlb	0	; () banked
 22362  00583E  6FED               	movwf	(_cur_state+1)& (0+255),b
 22363  005840  0E09               	movlw	9
 22364  005842  6FEC               	movwf	_cur_state& (0+255),b
 22365                           
 22366                           ; BSR set to: 0
 22367                           ;UI.c: 547: lcdInst(0b10000000);;
 22368  005844  0E80               	movlw	128
 22369  005846  ECD9  F02D         	call	i2_lcdInst
 22370                           
 22371                           ;UI.c: 548: printf("LOG 3          <");
 22372  00584A  0E93               	movlw	low STR_46
 22373  00584C  6E0D               	movwf	i2printf@f,c
 22374  00584E  0EFD               	movlw	high STR_46
 22375  005850  6E0E               	movwf	i2printf@f+1,c
 22376  005852  ECBB  F013         	call	i2_printf	;wreg free
 22377                           
 22378                           ;UI.c: 549: lcdInst(0b11000000);;
 22379  005856  0EC0               	movlw	192
 22380  005858  ECD9  F02D         	call	i2_lcdInst
 22381                           
 22382                           ;UI.c: 550: printf("LOG 4           ");
 22383  00585C  0EFA               	movlw	low STR_48
 22384  00585E  6E0D               	movwf	i2printf@f,c
 22385  005860  0EFC               	movlw	high STR_48
 22386  005862  6E0E               	movwf	i2printf@f+1,c
 22387  005864  ECBB  F013         	call	i2_printf	;wreg free
 22388  005868  0012               	return		;funcret
 22389  00586A                     __end_of_change_state_to_logs_33:
 22390                           	opt stack 0
 22391                           pclatu	equ	0xFFB
 22392                           pclath	equ	0xFFA
 22393                           tblptru	equ	0xFF8
 22394                           tblptrh	equ	0xFF7
 22395                           tblptrl	equ	0xFF6
 22396                           tablat	equ	0xFF5
 22397                           prodh	equ	0xFF4
 22398                           prodl	equ	0xFF3
 22399                           intcon	equ	0xFF2
 22400                           intcon2	equ	0xFF1
 22401                           intcon3	equ	0xFF0
 22402                           indf0	equ	0xFEF
 22403                           postinc0	equ	0xFEE
 22404                           fsr0h	equ	0xFEA
 22405                           fsr0l	equ	0xFE9
 22406                           wreg	equ	0xFE8
 22407                           postdec1	equ	0xFE5
 22408                           fsr1h	equ	0xFE2
 22409                           fsr1l	equ	0xFE1
 22410                           indf2	equ	0xFDF
 22411                           postinc2	equ	0xFDE
 22412                           postdec2	equ	0xFDD
 22413                           fsr2h	equ	0xFDA
 22414                           fsr2l	equ	0xFD9
 22415                           status	equ	0xFD8
 22416                           
 22417 ;; *************** function _change_state_to_logs_23 *****************
 22418 ;; Defined at:
 22419 ;;		line 538 in file "UI.c"
 22420 ;; Parameters:    Size  Location     Type
 22421 ;;		None
 22422 ;; Auto vars:     Size  Location     Type
 22423 ;;		None
 22424 ;; Return value:  Size  Location     Type
 22425 ;;                  1    wreg      void 
 22426 ;; Registers used:
 22427 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22428 ;; Tracked objects:
 22429 ;;		On entry : 0/0
 22430 ;;		On exit  : 0/0
 22431 ;;		Unchanged: 0/0
 22432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22437 ;;Total ram usage:        0 bytes
 22438 ;; Hardware stack levels used:    1
 22439 ;; Hardware stack levels required when called:    3
 22440 ;; This function calls:
 22441 ;;		i2_lcdInst
 22442 ;;		i2_printf
 22443 ;; This function is called by:
 22444 ;;		_updateMenu
 22445 ;;		_inputHandler
 22446 ;; This function uses a non-reentrant model
 22447 ;;
 22448                           
 22449                           	psect	text76
 22450  005928                     __ptext76:
 22451                           	opt stack 0
 22452  005928                     _change_state_to_logs_23:
 22453                           	opt stack 18
 22454                           
 22455                           ;UI.c: 539: cur_state = 1023;
 22456                           
 22457                           ;incstack = 0
 22458  005928  0E03               	movlw	3
 22459  00592A  0100               	movlb	0	; () banked
 22460  00592C  6FED               	movwf	(_cur_state+1)& (0+255),b
 22461  00592E  69EC               	setf	_cur_state& (0+255),b
 22462                           
 22463                           ; BSR set to: 0
 22464                           ;UI.c: 540: lcdInst(0b10000000);;
 22465  005930  0E80               	movlw	128
 22466  005932  ECD9  F02D         	call	i2_lcdInst
 22467                           
 22468                           ;UI.c: 541: printf("LOG 2           ");
 22469  005936  0ED8               	movlw	low STR_40
 22470  005938  6E0D               	movwf	i2printf@f,c
 22471  00593A  0EFC               	movlw	high STR_40
 22472  00593C  6E0E               	movwf	i2printf@f+1,c
 22473  00593E  ECBB  F013         	call	i2_printf	;wreg free
 22474                           
 22475                           ;UI.c: 542: lcdInst(0b11000000);;
 22476  005942  0EC0               	movlw	192
 22477  005944  ECD9  F02D         	call	i2_lcdInst
 22478                           
 22479                           ;UI.c: 543: printf("LOG 3          <");
 22480  005948  0E93               	movlw	low STR_46
 22481  00594A  6E0D               	movwf	i2printf@f,c
 22482  00594C  0EFD               	movlw	high STR_46
 22483  00594E  6E0E               	movwf	i2printf@f+1,c
 22484  005950  ECBB  F013         	call	i2_printf	;wreg free
 22485  005954  0012               	return		;funcret
 22486  005956                     __end_of_change_state_to_logs_23:
 22487                           	opt stack 0
 22488                           pclatu	equ	0xFFB
 22489                           pclath	equ	0xFFA
 22490                           tblptru	equ	0xFF8
 22491                           tblptrh	equ	0xFF7
 22492                           tblptrl	equ	0xFF6
 22493                           tablat	equ	0xFF5
 22494                           prodh	equ	0xFF4
 22495                           prodl	equ	0xFF3
 22496                           intcon	equ	0xFF2
 22497                           intcon2	equ	0xFF1
 22498                           intcon3	equ	0xFF0
 22499                           indf0	equ	0xFEF
 22500                           postinc0	equ	0xFEE
 22501                           fsr0h	equ	0xFEA
 22502                           fsr0l	equ	0xFE9
 22503                           wreg	equ	0xFE8
 22504                           postdec1	equ	0xFE5
 22505                           fsr1h	equ	0xFE2
 22506                           fsr1l	equ	0xFE1
 22507                           indf2	equ	0xFDF
 22508                           postinc2	equ	0xFDE
 22509                           postdec2	equ	0xFDD
 22510                           fsr2h	equ	0xFDA
 22511                           fsr2l	equ	0xFD9
 22512                           status	equ	0xFD8
 22513                           
 22514 ;; *************** function _change_state_to_logs_22 *****************
 22515 ;; Defined at:
 22516 ;;		line 531 in file "UI.c"
 22517 ;; Parameters:    Size  Location     Type
 22518 ;;		None
 22519 ;; Auto vars:     Size  Location     Type
 22520 ;;		None
 22521 ;; Return value:  Size  Location     Type
 22522 ;;                  1    wreg      void 
 22523 ;; Registers used:
 22524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22525 ;; Tracked objects:
 22526 ;;		On entry : 0/0
 22527 ;;		On exit  : 0/0
 22528 ;;		Unchanged: 0/0
 22529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22534 ;;Total ram usage:        0 bytes
 22535 ;; Hardware stack levels used:    1
 22536 ;; Hardware stack levels required when called:    3
 22537 ;; This function calls:
 22538 ;;		i2_lcdInst
 22539 ;;		i2_printf
 22540 ;; This function is called by:
 22541 ;;		_updateMenu
 22542 ;;		_inputHandler
 22543 ;; This function uses a non-reentrant model
 22544 ;;
 22545                           
 22546                           	psect	text77
 22547  00586A                     __ptext77:
 22548                           	opt stack 0
 22549  00586A                     _change_state_to_logs_22:
 22550                           	opt stack 18
 22551                           
 22552                           ;UI.c: 532: cur_state = 1022;
 22553                           
 22554                           ;incstack = 0
 22555  00586A  0E03               	movlw	3
 22556  00586C  0100               	movlb	0	; () banked
 22557  00586E  6FED               	movwf	(_cur_state+1)& (0+255),b
 22558  005870  0EFE               	movlw	254
 22559  005872  6FEC               	movwf	_cur_state& (0+255),b
 22560                           
 22561                           ; BSR set to: 0
 22562                           ;UI.c: 533: lcdInst(0b10000000);;
 22563  005874  0E80               	movlw	128
 22564  005876  ECD9  F02D         	call	i2_lcdInst
 22565                           
 22566                           ;UI.c: 534: printf("LOG 2          <");
 22567  00587A  0E82               	movlw	low STR_42
 22568  00587C  6E0D               	movwf	i2printf@f,c
 22569  00587E  0EFD               	movlw	high STR_42
 22570  005880  6E0E               	movwf	i2printf@f+1,c
 22571  005882  ECBB  F013         	call	i2_printf	;wreg free
 22572                           
 22573                           ;UI.c: 535: lcdInst(0b11000000);;
 22574  005886  0EC0               	movlw	192
 22575  005888  ECD9  F02D         	call	i2_lcdInst
 22576                           
 22577                           ;UI.c: 536: printf("LOG 3           ");
 22578  00588C  0EE9               	movlw	low STR_44
 22579  00588E  6E0D               	movwf	i2printf@f,c
 22580  005890  0EFC               	movlw	high STR_44
 22581  005892  6E0E               	movwf	i2printf@f+1,c
 22582  005894  ECBB  F013         	call	i2_printf	;wreg free
 22583  005898  0012               	return		;funcret
 22584  00589A                     __end_of_change_state_to_logs_22:
 22585                           	opt stack 0
 22586                           pclatu	equ	0xFFB
 22587                           pclath	equ	0xFFA
 22588                           tblptru	equ	0xFF8
 22589                           tblptrh	equ	0xFF7
 22590                           tblptrl	equ	0xFF6
 22591                           tablat	equ	0xFF5
 22592                           prodh	equ	0xFF4
 22593                           prodl	equ	0xFF3
 22594                           intcon	equ	0xFF2
 22595                           intcon2	equ	0xFF1
 22596                           intcon3	equ	0xFF0
 22597                           indf0	equ	0xFEF
 22598                           postinc0	equ	0xFEE
 22599                           fsr0h	equ	0xFEA
 22600                           fsr0l	equ	0xFE9
 22601                           wreg	equ	0xFE8
 22602                           postdec1	equ	0xFE5
 22603                           fsr1h	equ	0xFE2
 22604                           fsr1l	equ	0xFE1
 22605                           indf2	equ	0xFDF
 22606                           postinc2	equ	0xFDE
 22607                           postdec2	equ	0xFDD
 22608                           fsr2h	equ	0xFDA
 22609                           fsr2l	equ	0xFD9
 22610                           status	equ	0xFD8
 22611                           
 22612 ;; *************** function _change_state_to_logs_12 *****************
 22613 ;; Defined at:
 22614 ;;		line 524 in file "UI.c"
 22615 ;; Parameters:    Size  Location     Type
 22616 ;;		None
 22617 ;; Auto vars:     Size  Location     Type
 22618 ;;		None
 22619 ;; Return value:  Size  Location     Type
 22620 ;;                  1    wreg      void 
 22621 ;; Registers used:
 22622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22623 ;; Tracked objects:
 22624 ;;		On entry : 0/0
 22625 ;;		On exit  : 0/0
 22626 ;;		Unchanged: 0/0
 22627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22632 ;;Total ram usage:        0 bytes
 22633 ;; Hardware stack levels used:    1
 22634 ;; Hardware stack levels required when called:    3
 22635 ;; This function calls:
 22636 ;;		i2_lcdInst
 22637 ;;		i2_printf
 22638 ;; This function is called by:
 22639 ;;		_updateMenu
 22640 ;;		_inputHandler
 22641 ;; This function uses a non-reentrant model
 22642 ;;
 22643                           
 22644                           	psect	text78
 22645  00589A                     __ptext78:
 22646                           	opt stack 0
 22647  00589A                     _change_state_to_logs_12:
 22648                           	opt stack 18
 22649                           
 22650                           ;UI.c: 525: cur_state = 1012;
 22651                           
 22652                           ;incstack = 0
 22653  00589A  0E03               	movlw	3
 22654  00589C  0100               	movlb	0	; () banked
 22655  00589E  6FED               	movwf	(_cur_state+1)& (0+255),b
 22656  0058A0  0EF4               	movlw	244
 22657  0058A2  6FEC               	movwf	_cur_state& (0+255),b
 22658                           
 22659                           ; BSR set to: 0
 22660                           ;UI.c: 526: lcdInst(0b10000000);;
 22661  0058A4  0E80               	movlw	128
 22662  0058A6  ECD9  F02D         	call	i2_lcdInst
 22663                           
 22664                           ;UI.c: 527: printf("LOG 1           ");
 22665  0058AA  0EC7               	movlw	low STR_41
 22666  0058AC  6E0D               	movwf	i2printf@f,c
 22667  0058AE  0EFC               	movlw	high STR_41
 22668  0058B0  6E0E               	movwf	i2printf@f+1,c
 22669  0058B2  ECBB  F013         	call	i2_printf	;wreg free
 22670                           
 22671                           ;UI.c: 528: lcdInst(0b11000000);;
 22672  0058B6  0EC0               	movlw	192
 22673  0058B8  ECD9  F02D         	call	i2_lcdInst
 22674                           
 22675                           ;UI.c: 529: printf("LOG 2          <");
 22676  0058BC  0E82               	movlw	low STR_42
 22677  0058BE  6E0D               	movwf	i2printf@f,c
 22678  0058C0  0EFD               	movlw	high STR_42
 22679  0058C2  6E0E               	movwf	i2printf@f+1,c
 22680  0058C4  ECBB  F013         	call	i2_printf	;wreg free
 22681  0058C8  0012               	return		;funcret
 22682  0058CA                     __end_of_change_state_to_logs_12:
 22683                           	opt stack 0
 22684                           pclatu	equ	0xFFB
 22685                           pclath	equ	0xFFA
 22686                           tblptru	equ	0xFF8
 22687                           tblptrh	equ	0xFF7
 22688                           tblptrl	equ	0xFF6
 22689                           tablat	equ	0xFF5
 22690                           prodh	equ	0xFF4
 22691                           prodl	equ	0xFF3
 22692                           intcon	equ	0xFF2
 22693                           intcon2	equ	0xFF1
 22694                           intcon3	equ	0xFF0
 22695                           indf0	equ	0xFEF
 22696                           postinc0	equ	0xFEE
 22697                           fsr0h	equ	0xFEA
 22698                           fsr0l	equ	0xFE9
 22699                           wreg	equ	0xFE8
 22700                           postdec1	equ	0xFE5
 22701                           fsr1h	equ	0xFE2
 22702                           fsr1l	equ	0xFE1
 22703                           indf2	equ	0xFDF
 22704                           postinc2	equ	0xFDE
 22705                           postdec2	equ	0xFDD
 22706                           fsr2h	equ	0xFDA
 22707                           fsr2l	equ	0xFD9
 22708                           status	equ	0xFD8
 22709                           
 22710 ;; *************** function _change_state_to_logs_11 *****************
 22711 ;; Defined at:
 22712 ;;		line 517 in file "UI.c"
 22713 ;; Parameters:    Size  Location     Type
 22714 ;;		None
 22715 ;; Auto vars:     Size  Location     Type
 22716 ;;		None
 22717 ;; Return value:  Size  Location     Type
 22718 ;;                  1    wreg      void 
 22719 ;; Registers used:
 22720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22721 ;; Tracked objects:
 22722 ;;		On entry : 0/0
 22723 ;;		On exit  : 0/0
 22724 ;;		Unchanged: 0/0
 22725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22730 ;;Total ram usage:        0 bytes
 22731 ;; Hardware stack levels used:    1
 22732 ;; Hardware stack levels required when called:    3
 22733 ;; This function calls:
 22734 ;;		i2_lcdInst
 22735 ;;		i2_printf
 22736 ;; This function is called by:
 22737 ;;		_updateMenu
 22738 ;;		_inputHandler
 22739 ;; This function uses a non-reentrant model
 22740 ;;
 22741                           
 22742                           	psect	text79
 22743  0058CA                     __ptext79:
 22744                           	opt stack 0
 22745  0058CA                     _change_state_to_logs_11:
 22746                           	opt stack 18
 22747                           
 22748                           ;UI.c: 518: cur_state = 1011;
 22749                           
 22750                           ;incstack = 0
 22751  0058CA  0E03               	movlw	3
 22752  0058CC  0100               	movlb	0	; () banked
 22753  0058CE  6FED               	movwf	(_cur_state+1)& (0+255),b
 22754  0058D0  0EF3               	movlw	243
 22755  0058D2  6FEC               	movwf	_cur_state& (0+255),b
 22756                           
 22757                           ; BSR set to: 0
 22758                           ;UI.c: 519: lcdInst(0b10000000);;
 22759  0058D4  0E80               	movlw	128
 22760  0058D6  ECD9  F02D         	call	i2_lcdInst
 22761                           
 22762                           ;UI.c: 520: printf("LOG 1          <");
 22763  0058DA  0E71               	movlw	low STR_39
 22764  0058DC  6E0D               	movwf	i2printf@f,c
 22765  0058DE  0EFD               	movlw	high STR_39
 22766  0058E0  6E0E               	movwf	i2printf@f+1,c
 22767  0058E2  ECBB  F013         	call	i2_printf	;wreg free
 22768                           
 22769                           ;UI.c: 521: lcdInst(0b11000000);;
 22770  0058E6  0EC0               	movlw	192
 22771  0058E8  ECD9  F02D         	call	i2_lcdInst
 22772                           
 22773                           ;UI.c: 522: printf("LOG 2           ");
 22774  0058EC  0ED8               	movlw	low STR_40
 22775  0058EE  6E0D               	movwf	i2printf@f,c
 22776  0058F0  0EFC               	movlw	high STR_40
 22777  0058F2  6E0E               	movwf	i2printf@f+1,c
 22778  0058F4  ECBB  F013         	call	i2_printf	;wreg free
 22779  0058F8  0012               	return		;funcret
 22780  0058FA                     __end_of_change_state_to_logs_11:
 22781                           	opt stack 0
 22782                           pclatu	equ	0xFFB
 22783                           pclath	equ	0xFFA
 22784                           tblptru	equ	0xFF8
 22785                           tblptrh	equ	0xFF7
 22786                           tblptrl	equ	0xFF6
 22787                           tablat	equ	0xFF5
 22788                           prodh	equ	0xFF4
 22789                           prodl	equ	0xFF3
 22790                           intcon	equ	0xFF2
 22791                           intcon2	equ	0xFF1
 22792                           intcon3	equ	0xFF0
 22793                           indf0	equ	0xFEF
 22794                           postinc0	equ	0xFEE
 22795                           fsr0h	equ	0xFEA
 22796                           fsr0l	equ	0xFE9
 22797                           wreg	equ	0xFE8
 22798                           postdec1	equ	0xFE5
 22799                           fsr1h	equ	0xFE2
 22800                           fsr1l	equ	0xFE1
 22801                           indf2	equ	0xFDF
 22802                           postinc2	equ	0xFDE
 22803                           postdec2	equ	0xFDD
 22804                           fsr2h	equ	0xFDA
 22805                           fsr2l	equ	0xFD9
 22806                           status	equ	0xFD8
 22807                           
 22808 ;; *************** function _dispLogs *****************
 22809 ;; Defined at:
 22810 ;;		line 470 in file "UI.c"
 22811 ;; Parameters:    Size  Location     Type
 22812 ;;  myLog           2   17[COMRAM] int 
 22813 ;; Auto vars:     Size  Location     Type
 22814 ;;		None
 22815 ;; Return value:  Size  Location     Type
 22816 ;;                  1    wreg      void 
 22817 ;; Registers used:
 22818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22819 ;; Tracked objects:
 22820 ;;		On entry : 0/0
 22821 ;;		On exit  : 0/0
 22822 ;;		Unchanged: 0/0
 22823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22828 ;;Total ram usage:        2 bytes
 22829 ;; Hardware stack levels used:    1
 22830 ;; Hardware stack levels required when called:    2
 22831 ;; This function calls:
 22832 ;;		_retrieveLog
 22833 ;; This function is called by:
 22834 ;;		_updateMenu
 22835 ;; This function uses a non-reentrant model
 22836 ;;
 22837                           
 22838                           	psect	text80
 22839  005A74                     __ptext80:
 22840                           	opt stack 0
 22841  005A74                     _dispLogs:
 22842                           	opt stack 20
 22843                           
 22844                           ;UI.c: 471: logstate = 1;
 22845                           
 22846                           ;incstack = 0
 22847  005A74  0E00               	movlw	0
 22848  005A76  0100               	movlb	0	; () banked
 22849  005A78  6FF9               	movwf	(_logstate+1)& (0+255),b
 22850  005A7A  0E01               	movlw	1
 22851  005A7C  6FF8               	movwf	_logstate& (0+255),b
 22852                           
 22853                           ; BSR set to: 0
 22854                           ;UI.c: 472: log = myLog;
 22855  005A7E  C012  F0F4         	movff	dispLogs@myLog,_log
 22856  005A82  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;UI.c: 473: retrieveLog(myLog - 1);
 22860  005A86  0EFF               	movlw	255
 22861  005A88  2412               	addwf	dispLogs@myLog,w,c
 22862  005A8A  6E07               	movwf	retrieveLog@logNum,c
 22863  005A8C  0EFF               	movlw	255
 22864  005A8E  2013               	addwfc	dispLogs@myLog+1,w,c
 22865  005A90  6E08               	movwf	retrieveLog@logNum+1,c
 22866  005A92  EC5C  F020         	call	_retrieveLog	;wreg free
 22867  005A96  0012               	return		;funcret
 22868  005A98                     __end_of_dispLogs:
 22869                           	opt stack 0
 22870                           pclatu	equ	0xFFB
 22871                           pclath	equ	0xFFA
 22872                           tblptru	equ	0xFF8
 22873                           tblptrh	equ	0xFF7
 22874                           tblptrl	equ	0xFF6
 22875                           tablat	equ	0xFF5
 22876                           prodh	equ	0xFF4
 22877                           prodl	equ	0xFF3
 22878                           intcon	equ	0xFF2
 22879                           intcon2	equ	0xFF1
 22880                           intcon3	equ	0xFF0
 22881                           indf0	equ	0xFEF
 22882                           postinc0	equ	0xFEE
 22883                           fsr0h	equ	0xFEA
 22884                           fsr0l	equ	0xFE9
 22885                           wreg	equ	0xFE8
 22886                           postdec1	equ	0xFE5
 22887                           fsr1h	equ	0xFE2
 22888                           fsr1l	equ	0xFE1
 22889                           indf2	equ	0xFDF
 22890                           postinc2	equ	0xFDE
 22891                           postdec2	equ	0xFDD
 22892                           fsr2h	equ	0xFDA
 22893                           fsr2l	equ	0xFD9
 22894                           status	equ	0xFD8
 22895                           
 22896 ;; *************** function _retrieveLog *****************
 22897 ;; Defined at:
 22898 ;;		line 134 in file "EEPROM.c"
 22899 ;; Parameters:    Size  Location     Type
 22900 ;;  logNum          2    6[COMRAM] int 
 22901 ;; Auto vars:     Size  Location     Type
 22902 ;;  i               2   13[COMRAM] int 
 22903 ;;  addr            2   15[COMRAM] unsigned short 
 22904 ;;  byte3           1   12[COMRAM] unsigned char 
 22905 ;;  byte2           1   11[COMRAM] unsigned char 
 22906 ;;  byte1           1   10[COMRAM] unsigned char 
 22907 ;; Return value:  Size  Location     Type
 22908 ;;                  1    wreg      void 
 22909 ;; Registers used:
 22910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22911 ;; Tracked objects:
 22912 ;;		On entry : 0/0
 22913 ;;		On exit  : 0/0
 22914 ;;		Unchanged: 0/0
 22915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22917 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22919 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22920 ;;Total ram usage:       11 bytes
 22921 ;; Hardware stack levels used:    1
 22922 ;; Hardware stack levels required when called:    1
 22923 ;; This function calls:
 22924 ;;		i2_EEPROM_read
 22925 ;;		i2___wmul
 22926 ;; This function is called by:
 22927 ;;		_dispLogs
 22928 ;; This function uses a non-reentrant model
 22929 ;;
 22930                           
 22931                           	psect	text81
 22932  0040B8                     __ptext81:
 22933                           	opt stack 0
 22934  0040B8                     _retrieveLog:
 22935                           	opt stack 20
 22936                           
 22937                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 22938                           
 22939                           ;incstack = 0
 22940  0040B8  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22941  0040BC  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22942  0040C0  0E00               	movlw	0
 22943  0040C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 22944  0040C4  0E0B               	movlw	11
 22945  0040C6  6E03               	movwf	i2___wmul@multiplicand,c
 22946  0040C8  EC14  F02D         	call	i2___wmul	;wreg free
 22947  0040CC  0E01               	movlw	1
 22948  0040CE  2401               	addwf	?i2___wmul,w,c
 22949  0040D0  6E10               	movwf	retrieveLog@addr,c
 22950  0040D2  0E00               	movlw	0
 22951  0040D4  2002               	addwfc	?i2___wmul+1,w,c
 22952  0040D6  6E11               	movwf	retrieveLog@addr+1,c
 22953                           
 22954                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 22955  0040D8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22956  0040DC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22957  0040E0  ECA5  F02D         	call	i2_EEPROM_read	;wreg free
 22958  0040E4  6E0B               	movwf	retrieveLog@byte1,c
 22959                           
 22960                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 22961  0040E6  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22962  0040EA  0E80               	movlw	128
 22963  0040EC  1609               	andwf	??_retrieveLog,f,c
 22964  0040EE  5009               	movf	??_retrieveLog,w,c
 22965  0040F0  6E63               	movwf	_log_completion,c
 22966  0040F2  6A64               	clrf	_log_completion+1,c
 22967                           
 22968                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 22969  0040F4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22970  0040F8  0E0F               	movlw	15
 22971  0040FA  1609               	andwf	??_retrieveLog,f,c
 22972  0040FC  5009               	movf	??_retrieveLog,w,c
 22973  0040FE  0101               	movlb	1	; () banked
 22974  004100  6F43               	movwf	_log_count_total& (0+255),b
 22975  004102  6B44               	clrf	(_log_count_total+1)& (0+255),b
 22976                           
 22977                           ; BSR set to: 1
 22978                           ;EEPROM.c: 146: addr++;
 22979  004104  4A10               	infsnz	retrieveLog@addr,f,c
 22980  004106  2A11               	incf	retrieveLog@addr+1,f,c
 22981                           
 22982                           ; BSR set to: 1
 22983                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 22984  004108  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22985  00410C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22986  004110  ECA5  F02D         	call	i2_EEPROM_read	;wreg free
 22987  004114  6E0C               	movwf	retrieveLog@byte2,c
 22988                           
 22989                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 22990  004116  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22991  00411A  3A09               	swapf	??_retrieveLog,f,c
 22992  00411C  0E0F               	movlw	15
 22993  00411E  1609               	andwf	??_retrieveLog,f,c
 22994  004120  0E0F               	movlw	15
 22995  004122  1609               	andwf	??_retrieveLog,f,c
 22996  004124  5009               	movf	??_retrieveLog,w,c
 22997  004126  6E65               	movwf	_log_count_pop_no_tab,c
 22998  004128  6A66               	clrf	_log_count_pop_no_tab+1,c
 22999                           
 23000                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 23001  00412A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 23002  00412E  0E0F               	movlw	15
 23003  004130  1609               	andwf	??_retrieveLog,f,c
 23004  004132  5009               	movf	??_retrieveLog,w,c
 23005  004134  6E67               	movwf	_log_count_pop_w_tab,c
 23006  004136  6A68               	clrf	_log_count_pop_w_tab+1,c
 23007                           
 23008                           ;EEPROM.c: 152: addr++;
 23009  004138  4A10               	infsnz	retrieveLog@addr,f,c
 23010  00413A  2A11               	incf	retrieveLog@addr+1,f,c
 23011                           
 23012                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 23013  00413C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23014  004140  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23015  004144  ECA5  F02D         	call	i2_EEPROM_read	;wreg free
 23016  004148  6E0D               	movwf	retrieveLog@byte3,c
 23017                           
 23018                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 23019  00414A  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23020  00414E  3A09               	swapf	??_retrieveLog,f,c
 23021  004150  0E0F               	movlw	15
 23022  004152  1609               	andwf	??_retrieveLog,f,c
 23023  004154  0E0F               	movlw	15
 23024  004156  1609               	andwf	??_retrieveLog,f,c
 23025  004158  5009               	movf	??_retrieveLog,w,c
 23026  00415A  0101               	movlb	1	; () banked
 23027  00415C  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 23028  00415E  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 23029                           
 23030                           ; BSR set to: 1
 23031                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23032  004160  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23033  004164  0E0F               	movlw	15
 23034  004166  1609               	andwf	??_retrieveLog,f,c
 23035  004168  5009               	movf	??_retrieveLog,w,c
 23036  00416A  0101               	movlb	1	; () banked
 23037  00416C  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 23038  00416E  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 23039                           
 23040                           ; BSR set to: 1
 23041                           ;EEPROM.c: 156: addr++;
 23042  004170  4A10               	infsnz	retrieveLog@addr,f,c
 23043  004172  2A11               	incf	retrieveLog@addr+1,f,c
 23044                           
 23045                           ; BSR set to: 1
 23046                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 23047  004174  0E00               	movlw	0
 23048  004176  6E0F               	movwf	retrieveLog@i+1,c
 23049  004178  0E00               	movlw	0
 23050  00417A  6E0E               	movwf	retrieveLog@i,c
 23051  00417C                     i2l7266:
 23052                           
 23053                           ; BSR set to: 1
 23054  00417C  BE0F               	btfsc	retrieveLog@i+1,7,c
 23055  00417E  D006               	goto	i2l7270
 23056  004180  500F               	movf	retrieveLog@i+1,w,c
 23057  004182  E11E               	bnz	i2l7278
 23058  004184  0E07               	movlw	7
 23059  004186  5C0E               	subwf	retrieveLog@i,w,c
 23060  004188  B0D8               	btfsc	status,0,c
 23061  00418A  D01A               	goto	i2l7278
 23062  00418C                     i2l7270:
 23063                           
 23064                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 23065  00418C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23066  004190  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23067  004194  ECA5  F02D         	call	i2_EEPROM_read	;wreg free
 23068  004198  6E09               	movwf	??_retrieveLog& (0+255),c
 23069  00419A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23070  00419C  90D8               	bcf	status,0,c
 23071  00419E  340E               	rlcf	retrieveLog@i,w,c
 23072  0041A0  6ED9               	movwf	fsr2l,c
 23073  0041A2  340F               	rlcf	retrieveLog@i+1,w,c
 23074  0041A4  6EDA               	movwf	fsr2h,c
 23075  0041A6  0E00               	movlw	low _log_startTime
 23076  0041A8  26D9               	addwf	fsr2l,f,c
 23077  0041AA  0E01               	movlw	high _log_startTime
 23078  0041AC  22DA               	addwfc	fsr2h,f,c
 23079  0041AE  C009  FFDE         	movff	??_retrieveLog,postinc2
 23080  0041B2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23081                           
 23082                           ;EEPROM.c: 161: addr++;
 23083  0041B6  4A10               	infsnz	retrieveLog@addr,f,c
 23084  0041B8  2A11               	incf	retrieveLog@addr+1,f,c
 23085  0041BA  4A0E               	infsnz	retrieveLog@i,f,c
 23086  0041BC  2A0F               	incf	retrieveLog@i+1,f,c
 23087  0041BE  D7DE               	goto	i2l7266
 23088  0041C0                     i2l7278:
 23089                           
 23090                           ;EEPROM.c: 162: }
 23091                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 23092  0041C0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23093  0041C4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23094  0041C8  ECA5  F02D         	call	i2_EEPROM_read	;wreg free
 23095  0041CC  6E09               	movwf	??_retrieveLog& (0+255),c
 23096  0041CE  5009               	movf	??_retrieveLog,w,c
 23097  0041D0  0100               	movlb	0	; () banked
 23098  0041D2  6FF6               	movwf	_log_total_time& (0+255),b
 23099  0041D4  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23100                           
 23101                           ; BSR set to: 0
 23102  0041D6  0012               	return		;funcret
 23103  0041D8                     __end_of_retrieveLog:
 23104                           	opt stack 0
 23105                           pclatu	equ	0xFFB
 23106                           pclath	equ	0xFFA
 23107                           tblptru	equ	0xFF8
 23108                           tblptrh	equ	0xFF7
 23109                           tblptrl	equ	0xFF6
 23110                           tablat	equ	0xFF5
 23111                           prodh	equ	0xFF4
 23112                           prodl	equ	0xFF3
 23113                           intcon	equ	0xFF2
 23114                           intcon2	equ	0xFF1
 23115                           intcon3	equ	0xFF0
 23116                           indf0	equ	0xFEF
 23117                           postinc0	equ	0xFEE
 23118                           fsr0h	equ	0xFEA
 23119                           fsr0l	equ	0xFE9
 23120                           wreg	equ	0xFE8
 23121                           postdec1	equ	0xFE5
 23122                           fsr1h	equ	0xFE2
 23123                           fsr1l	equ	0xFE1
 23124                           indf2	equ	0xFDF
 23125                           postinc2	equ	0xFDE
 23126                           postdec2	equ	0xFDD
 23127                           fsr2h	equ	0xFDA
 23128                           fsr2l	equ	0xFD9
 23129                           status	equ	0xFD8
 23130                           
 23131 ;; *************** function i2_EEPROM_read *****************
 23132 ;; Defined at:
 23133 ;;		line 68 in file "EEPROM.c"
 23134 ;; Parameters:    Size  Location     Type
 23135 ;;  address         2    0[COMRAM] unsigned short 
 23136 ;; Auto vars:     Size  Location     Type
 23137 ;;		None
 23138 ;; Return value:  Size  Location     Type
 23139 ;;                  1    wreg      unsigned char 
 23140 ;; Registers used:
 23141 ;;		wreg, status,2
 23142 ;; Tracked objects:
 23143 ;;		On entry : 0/0
 23144 ;;		On exit  : 0/0
 23145 ;;		Unchanged: 0/0
 23146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23151 ;;Total ram usage:        2 bytes
 23152 ;; Hardware stack levels used:    1
 23153 ;; This function calls:
 23154 ;;		Nothing
 23155 ;; This function is called by:
 23156 ;;		_retrieveLog
 23157 ;; This function uses a non-reentrant model
 23158 ;;
 23159                           
 23160                           	psect	text82
 23161  005B4A                     __ptext82:
 23162                           	opt stack 0
 23163  005B4A                     i2_EEPROM_read:
 23164                           	opt stack 20
 23165                           
 23166                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 23167                           
 23168                           ; BSR set to: 0
 23169                           ;incstack = 0
 23170  005B4A  5002               	movf	i2EEPROM_read@address+1,w,c
 23171  005B4C  6EAA               	movwf	4010,c	;volatile
 23172                           
 23173                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 23174  005B4E  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23175                           
 23176                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 23177  005B52  9EA6               	bcf	4006,7,c	;volatile
 23178                           
 23179                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 23180  005B54  9CA6               	bcf	4006,6,c	;volatile
 23181                           
 23182                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 23183  005B56  80A6               	bsf	4006,0,c	;volatile
 23184  005B58                     i2l1116:
 23185  005B58  B0A6               	btfsc	4006,0,c	;volatile
 23186  005B5A  D7FE               	goto	i2l1116
 23187                           
 23188                           ;EEPROM.c: 81: return EEDATA;
 23189  005B5C  50A8               	movf	4008,w,c	;volatile
 23190  005B5E  0012               	return	
 23191  005B60                     __end_ofi2_EEPROM_read:
 23192                           	opt stack 0
 23193                           pclatu	equ	0xFFB
 23194                           pclath	equ	0xFFA
 23195                           tblptru	equ	0xFF8
 23196                           tblptrh	equ	0xFF7
 23197                           tblptrl	equ	0xFF6
 23198                           tablat	equ	0xFF5
 23199                           prodh	equ	0xFF4
 23200                           prodl	equ	0xFF3
 23201                           intcon	equ	0xFF2
 23202                           intcon2	equ	0xFF1
 23203                           intcon3	equ	0xFF0
 23204                           indf0	equ	0xFEF
 23205                           postinc0	equ	0xFEE
 23206                           fsr0h	equ	0xFEA
 23207                           fsr0l	equ	0xFE9
 23208                           wreg	equ	0xFE8
 23209                           postdec1	equ	0xFE5
 23210                           fsr1h	equ	0xFE2
 23211                           fsr1l	equ	0xFE1
 23212                           indf2	equ	0xFDF
 23213                           postinc2	equ	0xFDE
 23214                           postdec2	equ	0xFDD
 23215                           fsr2h	equ	0xFDA
 23216                           fsr2l	equ	0xFD9
 23217                           status	equ	0xFD8
 23218                           
 23219 ;; *************** function _updateArmState *****************
 23220 ;; Defined at:
 23221 ;;		line 641 in file "sort.c"
 23222 ;; Parameters:    Size  Location     Type
 23223 ;;		None
 23224 ;; Auto vars:     Size  Location     Type
 23225 ;;		None
 23226 ;; Return value:  Size  Location     Type
 23227 ;;                  1    wreg      void 
 23228 ;; Registers used:
 23229 ;;		wreg, status,2, status,0
 23230 ;; Tracked objects:
 23231 ;;		On entry : 0/0
 23232 ;;		On exit  : 0/0
 23233 ;;		Unchanged: 0/0
 23234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23237 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23239 ;;Total ram usage:        2 bytes
 23240 ;; Hardware stack levels used:    1
 23241 ;; This function calls:
 23242 ;;		Nothing
 23243 ;; This function is called by:
 23244 ;;		_handler
 23245 ;; This function uses a non-reentrant model
 23246 ;;
 23247                           
 23248                           	psect	text83
 23249  0055A0                     __ptext83:
 23250                           	opt stack 0
 23251  0055A0                     _updateArmState:
 23252                           	opt stack 23
 23253                           
 23254                           ;sort.c: 648: if(!was_low_2){
 23255                           
 23256                           ;incstack = 0
 23257  0055A0  5079               	movf	_was_low_2,w,c	;volatile
 23258  0055A2  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23259  0055A4  B4D8               	btfsc	status,2,c
 23260  0055A6  D007               	goto	i2l10078
 23261  0055A8  D016               	goto	i2l937
 23262  0055AA                     i2l10072:
 23263                           
 23264                           ;sort.c: 653: PR2 = 0x20;
 23265  0055AA  0E20               	movlw	32
 23266  0055AC  6ECB               	movwf	4043,c	;volatile
 23267                           
 23268                           ;sort.c: 654: break;
 23269  0055AE  0012               	return	
 23270  0055B0                     i2l10074:
 23271                           
 23272                           ;sort.c: 657: PR2 = 0x40;
 23273  0055B0  0E40               	movlw	64
 23274  0055B2  6ECB               	movwf	4043,c	;volatile
 23275                           
 23276                           ;sort.c: 659: }
 23277                           
 23278                           ;sort.c: 658: break;
 23279  0055B4  0012               	return	
 23280  0055B6                     i2l10078:
 23281  0055B6  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23282  0055BA  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23283                           
 23284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23285                           ; Switch size 1, requested type "space"
 23286                           ; Number of cases is 1, Range of values is 0 to 0
 23287                           ; switch strategies available:
 23288                           ; Name         Instructions Cycles
 23289                           ; simple_byte            4     3 (average)
 23290                           ;	Chosen strategy is simple_byte
 23291  0055BE  5002               	movf	??_updateArmState+1,w,c
 23292  0055C0  0A00               	xorlw	0	; case 0
 23293  0055C2  A4D8               	btfss	status,2,c
 23294  0055C4  0012               	return	
 23295                           
 23296                           ; Switch size 1, requested type "space"
 23297                           ; Number of cases is 2, Range of values is 0 to 1
 23298                           ; switch strategies available:
 23299                           ; Name         Instructions Cycles
 23300                           ; simple_byte            7     4 (average)
 23301                           ;	Chosen strategy is simple_byte
 23302  0055C6  5001               	movf	??_updateArmState,w,c
 23303  0055C8  0A00               	xorlw	0	; case 0
 23304  0055CA  B4D8               	btfsc	status,2,c
 23305  0055CC  D7EE               	goto	i2l10072
 23306  0055CE  0A01               	xorlw	1	; case 1
 23307  0055D0  A4D8               	btfss	status,2,c
 23308                           
 23309                           ;sort.c: 660: }
 23310  0055D2  0012               	return	
 23311  0055D4  D7ED               	goto	i2l10074
 23312  0055D6                     i2l937:
 23313                           
 23314                           ;sort.c: 661: else{
 23315                           ;sort.c: 663: PR2 = 0xFF;
 23316  0055D6  68CB               	setf	4043,c	;volatile
 23317  0055D8  0012               	return	
 23318  0055DA                     __end_of_updateArmState:
 23319                           	opt stack 0
 23320                           pclatu	equ	0xFFB
 23321                           pclath	equ	0xFFA
 23322                           tblptru	equ	0xFF8
 23323                           tblptrh	equ	0xFF7
 23324                           tblptrl	equ	0xFF6
 23325                           tablat	equ	0xFF5
 23326                           prodh	equ	0xFF4
 23327                           prodl	equ	0xFF3
 23328                           intcon	equ	0xFF2
 23329                           intcon2	equ	0xFF1
 23330                           intcon3	equ	0xFF0
 23331                           indf0	equ	0xFEF
 23332                           postinc0	equ	0xFEE
 23333                           fsr0h	equ	0xFEA
 23334                           fsr0l	equ	0xFE9
 23335                           wreg	equ	0xFE8
 23336                           postdec1	equ	0xFE5
 23337                           fsr1h	equ	0xFE2
 23338                           fsr1l	equ	0xFE1
 23339                           indf2	equ	0xFDF
 23340                           postinc2	equ	0xFDE
 23341                           postdec2	equ	0xFDD
 23342                           fsr2h	equ	0xFDA
 23343                           fsr2l	equ	0xFD9
 23344                           status	equ	0xFD8
 23345                           
 23346 ;; *************** function _printSortTimer *****************
 23347 ;; Defined at:
 23348 ;;		line 491 in file "sort.c"
 23349 ;; Parameters:    Size  Location     Type
 23350 ;;		None
 23351 ;; Auto vars:     Size  Location     Type
 23352 ;;  i               2   70[COMRAM] int 
 23353 ;;  i               2   72[COMRAM] int 
 23354 ;;  curTime        14   44[COMRAM] int [7]
 23355 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23356 ;;  sec             2   64[COMRAM] int 
 23357 ;;  min             2   62[COMRAM] int 
 23358 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23359 ;;  start_sec       2   58[COMRAM] unsigned int 
 23360 ;; Return value:  Size  Location     Type
 23361 ;;                  1    wreg      void 
 23362 ;; Registers used:
 23363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23364 ;; Tracked objects:
 23365 ;;		On entry : 0/0
 23366 ;;		On exit  : 0/0
 23367 ;;		Unchanged: 0/0
 23368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23370 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23371 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23372 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23373 ;;Total ram usage:       33 bytes
 23374 ;; Hardware stack levels used:    1
 23375 ;; Hardware stack levels required when called:    3
 23376 ;; This function calls:
 23377 ;;		i2___lwdiv
 23378 ;;		i2___lwmod
 23379 ;;		i2___wmul
 23380 ;;		i2_delay_ms
 23381 ;;		i2_getRTC
 23382 ;;		i2_lcdInst
 23383 ;;		i2_printf
 23384 ;; This function is called by:
 23385 ;;		_handler
 23386 ;; This function uses a non-reentrant model
 23387 ;;
 23388                           
 23389                           	psect	text84
 23390  00336C                     __ptext84:
 23391                           	opt stack 0
 23392  00336C                     _printSortTimer:
 23393                           	opt stack 20
 23394                           
 23395                           ;sort.c: 492: getRTC();
 23396                           
 23397                           ;incstack = 0
 23398  00336C  EC0B  F028         	call	i2_getRTC	;wreg free
 23399                           
 23400                           ;sort.c: 493: int curTime[7];
 23401                           ;sort.c: 494: for(int i = 0; i < 7; i++){
 23402  003370  0E00               	movlw	0
 23403  003372  6E4A               	movwf	printSortTimer@i+1,c
 23404  003374  0E00               	movlw	0
 23405  003376  6E49               	movwf	printSortTimer@i,c
 23406  003378                     i2l9914:
 23407  003378  BE4A               	btfsc	printSortTimer@i+1,7,c
 23408  00337A  D006               	goto	i2l9918
 23409  00337C  504A               	movf	printSortTimer@i+1,w,c
 23410  00337E  E131               	bnz	i2l9924
 23411  003380  0E07               	movlw	7
 23412  003382  5C49               	subwf	printSortTimer@i,w,c
 23413  003384  B0D8               	btfsc	status,0,c
 23414  003386  D02D               	goto	i2l9924
 23415  003388                     i2l9918:
 23416                           
 23417                           ;sort.c: 495: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23418  003388  0E1C               	movlw	low _time
 23419  00338A  2449               	addwf	printSortTimer@i,w,c
 23420  00338C  6ED9               	movwf	fsr2l,c
 23421  00338E  0E01               	movlw	high _time
 23422  003390  204A               	addwfc	printSortTimer@i+1,w,c
 23423  003392  6EDA               	movwf	fsr2h,c
 23424  003394  50DF               	movf	indf2,w,c
 23425  003396  6E2A               	movwf	??_printSortTimer& (0+255),c
 23426  003398  3A2A               	swapf	??_printSortTimer,f,c
 23427  00339A  0E0F               	movlw	15
 23428  00339C  162A               	andwf	??_printSortTimer,f,c
 23429  00339E  0E0F               	movlw	15
 23430  0033A0  162A               	andwf	??_printSortTimer,f,c
 23431  0033A2  502A               	movf	??_printSortTimer,w,c
 23432  0033A4  0D0A               	mullw	10
 23433  0033A6  0E1C               	movlw	low _time
 23434  0033A8  2449               	addwf	printSortTimer@i,w,c
 23435  0033AA  6ED9               	movwf	fsr2l,c
 23436  0033AC  0E01               	movlw	high _time
 23437  0033AE  204A               	addwfc	printSortTimer@i+1,w,c
 23438  0033B0  6EDA               	movwf	fsr2h,c
 23439  0033B2  50DF               	movf	indf2,w,c
 23440  0033B4  0B0F               	andlw	15
 23441  0033B6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23442  0033B8  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23443  0033BA  50F3               	movf	prodl,w,c
 23444  0033BC  262B               	addwf	??_printSortTimer+1,f,c
 23445  0033BE  50F4               	movf	prodh,w,c
 23446  0033C0  222C               	addwfc	??_printSortTimer+2,f,c
 23447  0033C2  90D8               	bcf	status,0,c
 23448  0033C4  3449               	rlcf	printSortTimer@i,w,c
 23449  0033C6  6ED9               	movwf	fsr2l,c
 23450  0033C8  344A               	rlcf	printSortTimer@i+1,w,c
 23451  0033CA  6EDA               	movwf	fsr2h,c
 23452  0033CC  0E2D               	movlw	low printSortTimer@curTime
 23453  0033CE  26D9               	addwf	fsr2l,f,c
 23454  0033D0  0E00               	movlw	high printSortTimer@curTime
 23455  0033D2  22DA               	addwfc	fsr2h,f,c
 23456  0033D4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23457  0033D8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23458  0033DC  4A49               	infsnz	printSortTimer@i,f,c
 23459  0033DE  2A4A               	incf	printSortTimer@i+1,f,c
 23460  0033E0  D7CB               	goto	i2l9914
 23461  0033E2                     i2l9924:
 23462                           
 23463                           ;sort.c: 496: }
 23464                           ;sort.c: 497: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23465  0033E2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23466  0033E6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23467  0033EA  0E00               	movlw	0
 23468  0033EC  6E04               	movwf	i2___wmul@multiplicand+1,c
 23469  0033EE  0E3C               	movlw	60
 23470  0033F0  6E03               	movwf	i2___wmul@multiplicand,c
 23471  0033F2  EC14  F02D         	call	i2___wmul	;wreg free
 23472  0033F6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23473  0033FA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23474  0033FE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23475  003402  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23476  003406  0E0E               	movlw	14
 23477  003408  6E04               	movwf	i2___wmul@multiplicand+1,c
 23478  00340A  0E10               	movlw	16
 23479  00340C  6E03               	movwf	i2___wmul@multiplicand,c
 23480  00340E  EC14  F02D         	call	i2___wmul	;wreg free
 23481  003412  5001               	movf	?i2___wmul,w,c
 23482  003414  262A               	addwf	??_printSortTimer,f,c
 23483  003416  5002               	movf	?i2___wmul+1,w,c
 23484  003418  222B               	addwfc	??_printSortTimer+1,f,c
 23485  00341A  0101               	movlb	1	; () banked
 23486  00341C  510E               	movf	_startTime& (0+255),w,b
 23487  00341E  242A               	addwf	??_printSortTimer,w,c
 23488  003420  6E3B               	movwf	printSortTimer@start_sec,c
 23489  003422  0101               	movlb	1	; () banked
 23490  003424  510F               	movf	(_startTime+1)& (0+255),w,b
 23491  003426  202B               	addwfc	??_printSortTimer+1,w,c
 23492  003428  6E3C               	movwf	printSortTimer@start_sec+1,c
 23493                           
 23494                           ;sort.c: 498: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23495  00342A  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23496  00342E  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23497  003432  0E00               	movlw	0
 23498  003434  6E04               	movwf	i2___wmul@multiplicand+1,c
 23499  003436  0E3C               	movlw	60
 23500  003438  6E03               	movwf	i2___wmul@multiplicand,c
 23501  00343A  EC14  F02D         	call	i2___wmul	;wreg free
 23502  00343E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23503  003442  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23504  003446  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23505  00344A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23506  00344E  0E0E               	movlw	14
 23507  003450  6E04               	movwf	i2___wmul@multiplicand+1,c
 23508  003452  0E10               	movlw	16
 23509  003454  6E03               	movwf	i2___wmul@multiplicand,c
 23510  003456  EC14  F02D         	call	i2___wmul	;wreg free
 23511  00345A  5001               	movf	?i2___wmul,w,c
 23512  00345C  262A               	addwf	??_printSortTimer,f,c
 23513  00345E  5002               	movf	?i2___wmul+1,w,c
 23514  003460  222B               	addwfc	??_printSortTimer+1,f,c
 23515  003462  502D               	movf	printSortTimer@curTime,w,c
 23516  003464  242A               	addwf	??_printSortTimer,w,c
 23517  003466  6E3D               	movwf	printSortTimer@cur_sec,c
 23518  003468  502E               	movf	printSortTimer@curTime+1,w,c
 23519  00346A  202B               	addwfc	??_printSortTimer+1,w,c
 23520  00346C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23521                           
 23522                           ;sort.c: 499: unsigned int timeDiff = cur_sec - start_sec;
 23523  00346E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23524  003472  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23525  003476  1E2A               	comf	??_printSortTimer,f,c
 23526  003478  1E2B               	comf	??_printSortTimer+1,f,c
 23527  00347A  4A2A               	infsnz	??_printSortTimer,f,c
 23528  00347C  2A2B               	incf	??_printSortTimer+1,f,c
 23529  00347E  503D               	movf	printSortTimer@cur_sec,w,c
 23530  003480  242A               	addwf	??_printSortTimer,w,c
 23531  003482  6E45               	movwf	printSortTimer@timeDiff,c
 23532  003484  503E               	movf	printSortTimer@cur_sec+1,w,c
 23533  003486  202B               	addwfc	??_printSortTimer+1,w,c
 23534  003488  6E46               	movwf	printSortTimer@timeDiff+1,c
 23535                           
 23536                           ;sort.c: 501: total_time = timeDiff;
 23537  00348A  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23538  00348E  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23539                           
 23540                           ;sort.c: 503: if(f_most_recent_sort_time){
 23541  003492  0101               	movlb	1	; () banked
 23542  003494  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 23543  003496  0101               	movlb	1	; () banked
 23544  003498  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23545  00349A  B4D8               	btfsc	status,2,c
 23546  00349C  D009               	goto	i2l9936
 23547                           
 23548                           ; BSR set to: 1
 23549                           ;sort.c: 504: most_recent_sort_time = total_time;
 23550  00349E  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 23551  0034A2  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 23552                           
 23553                           ; BSR set to: 1
 23554                           ;sort.c: 505: f_most_recent_sort_time = 0;
 23555  0034A6  0E00               	movlw	0
 23556  0034A8  0101               	movlb	1	; () banked
 23557  0034AA  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23558  0034AC  0E00               	movlw	0
 23559  0034AE  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 23560  0034B0                     i2l9936:
 23561                           
 23562                           ; BSR set to: 1
 23563                           ;sort.c: 506: }
 23564                           ;sort.c: 508: if(total_time - most_recent_sort_time == 20){
 23565  0034B0  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23566  0034B4  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23567  0034B8  1E2A               	comf	??_printSortTimer,f,c
 23568  0034BA  1E2B               	comf	??_printSortTimer+1,f,c
 23569  0034BC  4A2A               	infsnz	??_printSortTimer,f,c
 23570  0034BE  2A2B               	incf	??_printSortTimer+1,f,c
 23571  0034C0  0100               	movlb	0	; () banked
 23572  0034C2  51FA               	movf	_total_time& (0+255),w,b
 23573  0034C4  262A               	addwf	??_printSortTimer,f,c
 23574  0034C6  0100               	movlb	0	; () banked
 23575  0034C8  51FB               	movf	(_total_time+1)& (0+255),w,b
 23576  0034CA  222B               	addwfc	??_printSortTimer+1,f,c
 23577  0034CC  0E14               	movlw	20
 23578  0034CE  182A               	xorwf	??_printSortTimer,w,c
 23579  0034D0  102B               	iorwf	??_printSortTimer+1,w,c
 23580  0034D2  A4D8               	btfss	status,2,c
 23581  0034D4  D033               	goto	i2l9956
 23582                           
 23583                           ; BSR set to: 0
 23584                           ;sort.c: 509: LATBbits.LATB2 = 0;
 23585  0034D6  948A               	bcf	3978,2,c	;volatile
 23586                           
 23587                           ; BSR set to: 0
 23588                           ;sort.c: 510: _delay((unsigned long)((2000)*(32000000/4000.0)));
 23589  0034D8  0E52               	movlw	82
 23590  0034DA  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23591  0034DC  0E2B               	movlw	43
 23592  0034DE  6E2A               	movwf	??_printSortTimer& (0+255),c
 23593  0034E0  0E00               	movlw	0
 23594  0034E2                     i2u1149_47:
 23595  0034E2  2EE8               	decfsz	wreg,f,c
 23596  0034E4  D7FE               	bra	i2u1149_47
 23597  0034E6  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 23598  0034E8  D7FC               	bra	i2u1149_47
 23599  0034EA  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 23600  0034EC  D7FA               	bra	i2u1149_47
 23601  0034EE  D000               	nop2	
 23602                           
 23603                           ;sort.c: 511: for(int i=0; i<46; i++){
 23604  0034F0  0E00               	movlw	0
 23605  0034F2  6E48               	movwf	printSortTimer@i_1230+1,c
 23606  0034F4  0E00               	movlw	0
 23607  0034F6  6E47               	movwf	printSortTimer@i_1230,c
 23608  0034F8  BE48               	btfsc	printSortTimer@i_1230+1,7,c
 23609  0034FA  D006               	goto	i2l9948
 23610  0034FC  5048               	movf	printSortTimer@i_1230+1,w,c
 23611  0034FE  E11D               	bnz	i2l889
 23612  003500  0E2E               	movlw	46
 23613  003502  5C47               	subwf	printSortTimer@i_1230,w,c
 23614  003504  B0D8               	btfsc	status,0,c
 23615  003506  D019               	goto	i2l889
 23616  003508                     i2l9948:
 23617                           
 23618                           ;sort.c: 512: LATBbits.LATB2 = !LATBbits.LATB2;
 23619  003508  B48A               	btfsc	3978,2,c	;volatile
 23620  00350A  D003               	goto	i2u954_40
 23621  00350C  6A2A               	clrf	??_printSortTimer& (0+255),c
 23622  00350E  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23623  003510  D001               	goto	i2u955_48
 23624  003512                     i2u954_40:
 23625  003512  6A2A               	clrf	??_printSortTimer& (0+255),c
 23626  003514                     i2u955_48:
 23627  003514  462A               	rlncf	??_printSortTimer,f,c
 23628  003516  462A               	rlncf	??_printSortTimer,f,c
 23629  003518  508A               	movf	3978,w,c	;volatile
 23630  00351A  182A               	xorwf	??_printSortTimer,w,c
 23631  00351C  0BFB               	andlw	-5
 23632  00351E  182A               	xorwf	??_printSortTimer,w,c
 23633  003520  6E8A               	movwf	3978,c	;volatile
 23634                           
 23635                           ;sort.c: 513: delay_ms(45-i);
 23636  003522  5047               	movf	printSortTimer@i_1230,w,c
 23637  003524  0800               	sublw	0
 23638  003526  0F2D               	addlw	45
 23639  003528  EC8B  F02D         	call	i2_delay_ms
 23640  00352C  4A47               	infsnz	printSortTimer@i_1230,f,c
 23641  00352E  2A48               	incf	printSortTimer@i_1230+1,f,c
 23642  003530  BE48               	btfsc	printSortTimer@i_1230+1,7,c
 23643  003532  D7EA               	goto	i2l9948
 23644  003534  5048               	movf	printSortTimer@i_1230+1,w,c
 23645  003536  E101               	bnz	i2u956_40
 23646  003538  D7E3               	goto	L21
 23647  00353A                     i2u956_40:
 23648  00353A                     i2l889:
 23649                           
 23650                           ;sort.c: 514: }
 23651                           ;sort.c: 515: LATBbits.LATB2 = 1;
 23652  00353A  848A               	bsf	3978,2,c	;volatile
 23653  00353C                     i2l9956:
 23654                           
 23655                           ;sort.c: 516: }
 23656                           ;sort.c: 518: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23657  00353C  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23658  003540  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23659  003544  1E2A               	comf	??_printSortTimer,f,c
 23660  003546  1E2B               	comf	??_printSortTimer+1,f,c
 23661  003548  4A2A               	infsnz	??_printSortTimer,f,c
 23662  00354A  2A2B               	incf	??_printSortTimer+1,f,c
 23663  00354C  0100               	movlb	0	; () banked
 23664  00354E  51FA               	movf	_total_time& (0+255),w,b
 23665  003550  262A               	addwf	??_printSortTimer,f,c
 23666  003552  0100               	movlb	0	; () banked
 23667  003554  51FB               	movf	(_total_time+1)& (0+255),w,b
 23668  003556  222B               	addwfc	??_printSortTimer+1,f,c
 23669  003558  0E2A               	movlw	42
 23670  00355A  182A               	xorwf	??_printSortTimer,w,c
 23671  00355C  102B               	iorwf	??_printSortTimer+1,w,c
 23672  00355E  B4D8               	btfsc	status,2,c
 23673  003560  D007               	goto	i2l9960
 23674                           
 23675                           ; BSR set to: 0
 23676  003562  0EB3               	movlw	179
 23677  003564  0100               	movlb	0	; () banked
 23678  003566  19FA               	xorwf	_total_time& (0+255),w,b
 23679  003568  0100               	movlb	0	; () banked
 23680  00356A  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23681  00356C  A4D8               	btfss	status,2,c
 23682  00356E  D003               	goto	i2l9962
 23683  003570                     i2l9960:
 23684                           
 23685                           ; BSR set to: 0
 23686                           ;sort.c: 519: machine_state = DoneSorting_state;
 23687  003570  0E02               	movlw	2
 23688  003572  0100               	movlb	0	; () banked
 23689  003574  6FFC               	movwf	_machine_state& (0+255),b
 23690  003576                     i2l9962:
 23691                           
 23692                           ; BSR set to: 0
 23693                           ;sort.c: 521: }
 23694                           ;sort.c: 523: int min = (timeDiff % 3600) / 60;
 23695  003576  0E0E               	movlw	14
 23696  003578  6E04               	movwf	i2___lwmod@divisor+1,c
 23697  00357A  0E10               	movlw	16
 23698  00357C  6E03               	movwf	i2___lwmod@divisor,c
 23699  00357E  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23700  003582  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23701  003586  ECAF  F02A         	call	i2___lwmod	;wreg free
 23702  00358A  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23703  00358E  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23704  003592  0E00               	movlw	0
 23705  003594  6E09               	movwf	i2___lwdiv@divisor+1,c
 23706  003596  0E3C               	movlw	60
 23707  003598  6E08               	movwf	i2___lwdiv@divisor,c
 23708  00359A  ECCE  F029         	call	i2___lwdiv	;wreg free
 23709  00359E  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23710  0035A2  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23711                           
 23712                           ;sort.c: 524: int sec = (timeDiff % 3600) % 60;
 23713  0035A6  0E0E               	movlw	14
 23714  0035A8  6E04               	movwf	i2___lwmod@divisor+1,c
 23715  0035AA  0E10               	movlw	16
 23716  0035AC  6E03               	movwf	i2___lwmod@divisor,c
 23717  0035AE  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23718  0035B2  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23719  0035B6  ECAF  F02A         	call	i2___lwmod	;wreg free
 23720  0035BA  C001  F043         	movff	?i2___lwmod,_printSortTimer$2589
 23721  0035BE  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2589+1
 23722                           
 23723                           ;sort.c: 524: int sec = (timeDiff % 3600) % 60;
 23724  0035C2  C043  F001         	movff	_printSortTimer$2589,i2___lwmod@dividend
 23725  0035C6  C044  F002         	movff	_printSortTimer$2589+1,i2___lwmod@dividend+1
 23726  0035CA  0E00               	movlw	0
 23727  0035CC  6E04               	movwf	i2___lwmod@divisor+1,c
 23728  0035CE  0E3C               	movlw	60
 23729  0035D0  6E03               	movwf	i2___lwmod@divisor,c
 23730  0035D2  ECAF  F02A         	call	i2___lwmod	;wreg free
 23731  0035D6  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23732  0035DA  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23733                           
 23734                           ;sort.c: 526: lcdInst(0b10000000);;
 23735  0035DE  0E80               	movlw	128
 23736  0035E0  ECD9  F02D         	call	i2_lcdInst
 23737                           
 23738                           ;sort.c: 527: printf("SORTING...");
 23739  0035E4  0E73               	movlw	low STR_66
 23740  0035E6  6E0D               	movwf	i2printf@f,c
 23741  0035E8  0EFF               	movlw	high STR_66
 23742  0035EA  6E0E               	movwf	i2printf@f+1,c
 23743  0035EC  ECBB  F013         	call	i2_printf	;wreg free
 23744                           
 23745                           ;sort.c: 528: lcdInst(0b11000000);;
 23746  0035F0  0EC0               	movlw	192
 23747  0035F2  ECD9  F02D         	call	i2_lcdInst
 23748                           
 23749                           ;sort.c: 529: printf("TIME %d:%02d", min, sec);
 23750  0035F6  0E44               	movlw	low STR_67
 23751  0035F8  6E0D               	movwf	i2printf@f,c
 23752  0035FA  0EFF               	movlw	high STR_67
 23753  0035FC  6E0E               	movwf	i2printf@f+1,c
 23754  0035FE  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23755  003602  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23756  003606  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23757  00360A  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23758  00360E  ECBB  F013         	call	i2_printf	;wreg free
 23759  003612  0012               	return		;funcret
 23760  003614                     __end_of_printSortTimer:
 23761                           	opt stack 0
 23762                           pclatu	equ	0xFFB
 23763                           pclath	equ	0xFFA
 23764                           tblptru	equ	0xFF8
 23765                           tblptrh	equ	0xFF7
 23766                           tblptrl	equ	0xFF6
 23767                           tablat	equ	0xFF5
 23768                           prodh	equ	0xFF4
 23769                           prodl	equ	0xFF3
 23770                           intcon	equ	0xFF2
 23771                           intcon2	equ	0xFF1
 23772                           intcon3	equ	0xFF0
 23773                           indf0	equ	0xFEF
 23774                           postinc0	equ	0xFEE
 23775                           fsr0h	equ	0xFEA
 23776                           fsr0l	equ	0xFE9
 23777                           wreg	equ	0xFE8
 23778                           postdec1	equ	0xFE5
 23779                           fsr1h	equ	0xFE2
 23780                           fsr1l	equ	0xFE1
 23781                           indf2	equ	0xFDF
 23782                           postinc2	equ	0xFDE
 23783                           postdec2	equ	0xFDD
 23784                           fsr2h	equ	0xFDA
 23785                           fsr2l	equ	0xFD9
 23786                           status	equ	0xFD8
 23787                           
 23788 ;; *************** function i2_printf *****************
 23789 ;; Defined at:
 23790 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23791 ;; Parameters:    Size  Location     Type
 23792 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23793 ;;		 -> STR_131(18), STR_130(18), STR_129(17), STR_128(17), 
 23794 ;;		 -> STR_127(18), STR_126(18), STR_125(18), STR_124(18), 
 23795 ;;		 -> STR_123(18), STR_122(18), STR_121(17), STR_120(17), 
 23796 ;;		 -> STR_119(17), STR_118(17), STR_117(17), STR_116(17), 
 23797 ;;		 -> STR_115(17), STR_114(17), STR_113(18), STR_112(17), 
 23798 ;;		 -> STR_111(15), STR_110(15), STR_109(15), STR_108(17), 
 23799 ;;		 -> STR_107(17), STR_106(17), STR_105(16), STR_104(17), 
 23800 ;;		 -> STR_103(17), STR_102(17), STR_101(17), STR_100(17), 
 23801 ;;		 -> STR_99(17), STR_98(15), STR_97(11), STR_96(17), 
 23802 ;;		 -> STR_95(11), STR_94(17), STR_93(14), STR_92(15), 
 23803 ;;		 -> STR_91(14), STR_90(10), STR_89(9), STR_88(9), 
 23804 ;;		 -> STR_87(10), STR_86(10), STR_85(16), STR_84(15), 
 23805 ;;		 -> STR_83(3), STR_82(15), STR_81(13), STR_80(14), 
 23806 ;;		 -> STR_79(8), STR_78(14), STR_77(15), STR_76(12), 
 23807 ;;		 -> STR_75(14), STR_74(17), STR_73(14), STR_72(15), 
 23808 ;;		 -> STR_71(17), STR_70(17), STR_69(7), STR_68(21), 
 23809 ;;		 -> STR_67(13), STR_66(11), STR_65(8), STR_64(18), 
 23810 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 23811 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 23812 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 23813 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 23814 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 23815 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 23816 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 23817 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 23818 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 23819 ;;		 -> STR_2(14), STR_1(18), 
 23820 ;; Auto vars:     Size  Location     Type
 23821 ;;  printf          4    0        struct .
 23822 ;;  printf          2   39[COMRAM] int 
 23823 ;;  printf          2   35[COMRAM] unsigned int 
 23824 ;;  printf          2   33[COMRAM] unsigned int 
 23825 ;;  printf          2   31[COMRAM] PTR void [1]
 23826 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23827 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23828 ;;		 -> STR_132(7), ID@res2(2), ID@res1(2), count_total(2), 
 23829 ;;		 -> printRTC@month(4), UI@month(4), 
 23830 ;;  printf          1   38[COMRAM] char 
 23831 ;;  printf          1   37[COMRAM] unsigned char 
 23832 ;;  printf          1   28[COMRAM] char 
 23833 ;; Return value:  Size  Location     Type
 23834 ;;                  2   12[COMRAM] int 
 23835 ;; Registers used:
 23836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23837 ;; Tracked objects:
 23838 ;;		On entry : 0/0
 23839 ;;		On exit  : 0/0
 23840 ;;		Unchanged: 0/0
 23841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23842 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23843 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23844 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23845 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23846 ;;Total ram usage:       29 bytes
 23847 ;; Hardware stack levels used:    1
 23848 ;; Hardware stack levels required when called:    2
 23849 ;; This function calls:
 23850 ;;		i2___lwdiv
 23851 ;;		i2___lwmod
 23852 ;;		i2___wmul
 23853 ;;		i2_isdigit
 23854 ;;		i2_putch
 23855 ;; This function is called by:
 23856 ;;		_change_state_to_menu_11
 23857 ;;		_change_state_to_menu_23
 23858 ;;		_change_state_to_logs_11
 23859 ;;		_change_state_to_logs_12
 23860 ;;		_change_state_to_logs_22
 23861 ;;		_change_state_to_logs_23
 23862 ;;		_change_state_to_logs_33
 23863 ;;		_change_state_to_logs_34
 23864 ;;		_printSortTimer
 23865 ;;		i2_change_state_to_menu_start
 23866 ;;		i2_change_state_to_menu_12
 23867 ;;		i2_change_state_to_menu_22
 23868 ;;		i2_printRTC
 23869 ;; This function uses a non-reentrant model
 23870 ;;
 23871                           
 23872                           	psect	text85
 23873  002776                     __ptext85:
 23874                           	opt stack 0
 23875  002776                     i2_printf:
 23876                           	opt stack 20
 23877                           
 23878                           ;doprnt.c: 466: va_list ap;
 23879                           ;doprnt.c: 499: signed char c;
 23880                           ;doprnt.c: 501: int width;
 23881                           ;doprnt.c: 506: signed char prec;
 23882                           ;doprnt.c: 508: unsigned char flag;
 23883                           ;doprnt.c: 523: union {
 23884                           ;doprnt.c: 524: unsigned long vd;
 23885                           ;doprnt.c: 525: double integ;
 23886                           ;doprnt.c: 526: } tmpval;
 23887                           ;doprnt.c: 528: unsigned int val;
 23888                           ;doprnt.c: 529: unsigned len;
 23889                           ;doprnt.c: 530: const char * cp;
 23890                           ;doprnt.c: 533: *ap = __va_start();
 23891                           
 23892                           ;incstack = 0
 23893  002776  0E0F               	movlw	low (?i2_printf+2)
 23894  002778  6E20               	movwf	i2printf@ap,c
 23895  00277A  0E00               	movlw	high (?i2_printf+2)
 23896  00277C  6E21               	movwf	i2printf@ap+1,c
 23897                           
 23898                           ;doprnt.c: 536: while(c = *f++) {
 23899  00277E  D1A4               	goto	i2l7090
 23900  002780                     i2l6960:
 23901                           
 23902                           ;doprnt.c: 538: if(c != '%')
 23903  002780  0E25               	movlw	37
 23904  002782  1827               	xorwf	i2printf@c,w,c
 23905  002784  B4D8               	btfsc	status,2,c
 23906  002786  D004               	goto	i2l6964
 23907                           
 23908                           ;doprnt.c: 540: {
 23909                           ;doprnt.c: 541: (putch(c) );
 23910  002788  5027               	movf	i2printf@c,w,c
 23911  00278A  ECD3  F02D         	call	i2_putch
 23912                           
 23913                           ;doprnt.c: 542: continue;
 23914  00278E  D19C               	goto	i2l7090
 23915  002790                     i2l6964:
 23916                           
 23917                           ;doprnt.c: 543: }
 23918                           ;doprnt.c: 546: width = 0;
 23919  002790  0E00               	movlw	0
 23920  002792  6E29               	movwf	i2printf@width+1,c
 23921  002794  0E00               	movlw	0
 23922  002796  6E28               	movwf	i2printf@width,c
 23923                           
 23924                           ;doprnt.c: 548: flag = 0;
 23925  002798  0E00               	movlw	0
 23926  00279A  6E26               	movwf	i2printf@flag,c
 23927                           
 23928                           ;doprnt.c: 551: switch(*f) {
 23929                           
 23930                           ;doprnt.c: 550: for(;;) {
 23931  00279C  D003               	goto	i2l6970
 23932  00279E                     i2l6966:
 23933                           
 23934                           ;doprnt.c: 580: flag |= 0x04;
 23935  00279E  8426               	bsf	i2printf@flag,2,c
 23936                           
 23937                           ;doprnt.c: 581: f++;
 23938  0027A0  4A0D               	infsnz	i2printf@f,f,c
 23939  0027A2  2A0E               	incf	i2printf@f+1,f,c
 23940  0027A4                     i2l6970:
 23941  0027A4  C00D  FFF6         	movff	i2printf@f,tblptrl
 23942  0027A8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23943  0027AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23944  0027AC  6AF8               	clrf	tblptru,c
 23945  0027AE                     	endif
 23946  0027AE                     	if	0	;tblptru may be non-zero
 23947  0027AE                     	endif
 23948  0027AE  0008               	tblrd		*
 23949  0027B0  50F5               	movf	tablat,w,c
 23950                           
 23951                           ; Switch size 1, requested type "space"
 23952                           ; Number of cases is 1, Range of values is 48 to 48
 23953                           ; switch strategies available:
 23954                           ; Name         Instructions Cycles
 23955                           ; simple_byte            4     3 (average)
 23956                           ;	Chosen strategy is simple_byte
 23957  0027B2  0A30               	xorlw	48	; case 48
 23958  0027B4  B4D8               	btfsc	status,2,c
 23959  0027B6  D7F3               	goto	i2l6966
 23960                           
 23961                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23962                           
 23963                           ;doprnt.c: 586: }
 23964                           
 23965                           ;doprnt.c: 585: break;
 23966  0027B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 23967  0027BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23968  0027C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23969  0027C0  6AF8               	clrf	tblptru,c
 23970  0027C2                     	endif
 23971  0027C2                     	if	0	;tblptru may be non-zero
 23972  0027C2                     	endif
 23973  0027C2  0008               	tblrd		*
 23974  0027C4  50F5               	movf	tablat,w,c
 23975  0027C6  EC6E  F02D         	call	i2_isdigit
 23976  0027CA  A0D8               	btfss	status,0,c
 23977  0027CC  D0A6               	goto	i2l7018
 23978                           
 23979                           ;doprnt.c: 598: width = 0;
 23980  0027CE  0E00               	movlw	0
 23981  0027D0  6E29               	movwf	i2printf@width+1,c
 23982  0027D2  0E00               	movlw	0
 23983  0027D4  6E28               	movwf	i2printf@width,c
 23984  0027D6                     i2l6976:
 23985                           
 23986                           ;doprnt.c: 600: width *= 10;
 23987  0027D6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23988  0027DA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23989  0027DE  0E00               	movlw	0
 23990  0027E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 23991  0027E2  0E0A               	movlw	10
 23992  0027E4  6E03               	movwf	i2___wmul@multiplicand,c
 23993  0027E6  EC14  F02D         	call	i2___wmul	;wreg free
 23994  0027EA  C001  F028         	movff	?i2___wmul,i2printf@width
 23995  0027EE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23996                           
 23997                           ;doprnt.c: 601: width += *f++ - '0';
 23998  0027F2  0ED0               	movlw	208
 23999  0027F4  6E19               	movwf	??i2_printf& (0+255),c
 24000  0027F6  0EFF               	movlw	255
 24001  0027F8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24002  0027FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 24003  0027FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24004  002802                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24005  002802  6AF8               	clrf	tblptru,c
 24006  002804                     	endif
 24007  002804                     	if	0	;tblptru may be non-zero
 24008  002804                     	endif
 24009  002804  0008               	tblrd		*
 24010  002806  50F5               	movf	tablat,w,c
 24011  002808  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 24012  00280A  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 24013  00280C  5019               	movf	??i2_printf,w,c
 24014  00280E  261B               	addwf	??i2_printf+2,f,c
 24015  002810  501A               	movf	??i2_printf+1,w,c
 24016  002812  221C               	addwfc	??i2_printf+3,f,c
 24017  002814  501B               	movf	??i2_printf+2,w,c
 24018  002816  2628               	addwf	i2printf@width,f,c
 24019  002818  501C               	movf	??i2_printf+3,w,c
 24020  00281A  2229               	addwfc	i2printf@width+1,f,c
 24021  00281C  4A0D               	infsnz	i2printf@f,f,c
 24022  00281E  2A0E               	incf	i2printf@f+1,f,c
 24023                           
 24024                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 24025  002820  C00D  FFF6         	movff	i2printf@f,tblptrl
 24026  002824  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24027  002828                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24028  002828  6AF8               	clrf	tblptru,c
 24029  00282A                     	endif
 24030  00282A                     	if	0	;tblptru may be non-zero
 24031  00282A                     	endif
 24032  00282A  0008               	tblrd		*
 24033  00282C  50F5               	movf	tablat,w,c
 24034  00282E  EC6E  F02D         	call	i2_isdigit
 24035  002832  A0D8               	btfss	status,0,c
 24036  002834  D072               	goto	i2l7018
 24037  002836  D7CF               	goto	i2l6976
 24038  002838                     i2l6984:
 24039                           
 24040                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24041  002838  C020  FFD9         	movff	i2printf@ap,fsr2l
 24042  00283C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24043  002840  CFDE F01E          	movff	postinc2,i2printf@cp
 24044  002844  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24045  002848  0E02               	movlw	2
 24046  00284A  2620               	addwf	i2printf@ap,f,c
 24047  00284C  0E00               	movlw	0
 24048  00284E  2221               	addwfc	i2printf@ap+1,f,c
 24049                           
 24050                           ;doprnt.c: 740: if(!cp)
 24051  002850  501E               	movf	i2printf@cp,w,c
 24052  002852  101F               	iorwf	i2printf@cp+1,w,c
 24053  002854  A4D8               	btfss	status,2,c
 24054  002856  D004               	goto	i2l6992
 24055                           
 24056                           ;doprnt.c: 741: cp = "(null)";
 24057  002858  0EB5               	movlw	low STR_132
 24058  00285A  6E1E               	movwf	i2printf@cp,c
 24059  00285C  0EFF               	movlw	high STR_132
 24060  00285E  6E1F               	movwf	i2printf@cp+1,c
 24061  002860                     i2l6992:
 24062                           
 24063                           ;doprnt.c: 745: len = 0;
 24064  002860  0E00               	movlw	0
 24065  002862  6E23               	movwf	i2printf@len+1,c
 24066  002864  0E00               	movlw	0
 24067  002866  6E22               	movwf	i2printf@len,c
 24068                           
 24069                           ;doprnt.c: 746: while(cp[len])
 24070  002868  D002               	goto	i2l6996
 24071  00286A                     i2l6994:
 24072                           
 24073                           ;doprnt.c: 747: len++;
 24074  00286A  4A22               	infsnz	i2printf@len,f,c
 24075  00286C  2A23               	incf	i2printf@len+1,f,c
 24076  00286E                     i2l6996:
 24077  00286E  5022               	movf	i2printf@len,w,c
 24078  002870  241E               	addwf	i2printf@cp,w,c
 24079  002872  6E19               	movwf	??i2_printf& (0+255),c
 24080  002874  5023               	movf	i2printf@len+1,w,c
 24081  002876  201F               	addwfc	i2printf@cp+1,w,c
 24082  002878  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24083  00287A  C019  FFF6         	movff	??i2_printf,tblptrl
 24084  00287E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24085  002882  0E00               	movlw	low (__mediumconst shr (0+16))
 24086  002884  6EF8               	movwf	tblptru,c
 24087  002886  0E0F               	movlw	(high __ramtop+-1)
 24088  002888  64F7               	cpfsgt	tblptrh,c
 24089  00288A  D003               	bra	i2u570_47
 24090  00288C  0008               	tblrd		*
 24091  00288E  50F5               	movf	tablat,w,c
 24092  002890  D005               	bra	i2u570_40
 24093  002892                     i2u570_47:
 24094  002892  CFF6 FFE9          	movff	tblptrl,fsr0l
 24095  002896  CFF7 FFEA          	movff	tblptrh,fsr0h
 24096  00289A  50EF               	movf	indf0,w,c
 24097  00289C                     i2u570_40:
 24098  00289C  0900               	iorlw	0
 24099  00289E  A4D8               	btfss	status,2,c
 24100  0028A0  D7E4               	goto	i2l6994
 24101                           
 24102                           ;doprnt.c: 757: if(width > len)
 24103  0028A2  5028               	movf	i2printf@width,w,c
 24104  0028A4  5C22               	subwf	i2printf@len,w,c
 24105  0028A6  5029               	movf	i2printf@width+1,w,c
 24106  0028A8  5823               	subwfb	i2printf@len+1,w,c
 24107  0028AA  B0D8               	btfsc	status,0,c
 24108  0028AC  D005               	goto	i2l7002
 24109                           
 24110                           ;doprnt.c: 758: width -= len;
 24111  0028AE  5022               	movf	i2printf@len,w,c
 24112  0028B0  5E28               	subwf	i2printf@width,f,c
 24113  0028B2  5023               	movf	i2printf@len+1,w,c
 24114  0028B4  5A29               	subwfb	i2printf@width+1,f,c
 24115  0028B6  D008               	goto	i2l7006
 24116  0028B8                     i2l7002:
 24117                           
 24118                           ;doprnt.c: 759: else
 24119                           ;doprnt.c: 760: width = 0;
 24120  0028B8  0E00               	movlw	0
 24121  0028BA  6E29               	movwf	i2printf@width+1,c
 24122  0028BC  0E00               	movlw	0
 24123  0028BE  6E28               	movwf	i2printf@width,c
 24124                           
 24125                           ;doprnt.c: 764: while(width--)
 24126  0028C0  D003               	goto	i2l7006
 24127  0028C2                     i2l7004:
 24128                           
 24129                           ;doprnt.c: 765: (putch(' ') );
 24130  0028C2  0E20               	movlw	32
 24131  0028C4  ECD3  F02D         	call	i2_putch
 24132  0028C8                     i2l7006:
 24133  0028C8  0628               	decf	i2printf@width,f,c
 24134  0028CA  A0D8               	btfss	status,0,c
 24135  0028CC  0629               	decf	i2printf@width+1,f,c
 24136  0028CE  2828               	incf	i2printf@width,w,c
 24137  0028D0  E1F8               	bnz	i2l7004
 24138  0028D2  2829               	incf	i2printf@width+1,w,c
 24139  0028D4  B4D8               	btfsc	status,2,c
 24140  0028D6  D016               	goto	i2l7012
 24141  0028D8  D7F4               	goto	i2l7004
 24142  0028DA                     i2l7008:
 24143                           
 24144                           ;doprnt.c: 768: (putch(*cp++) );
 24145  0028DA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24146  0028DE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24147  0028E2  0E00               	movlw	low (__mediumconst shr (0+16))
 24148  0028E4  6EF8               	movwf	tblptru,c
 24149  0028E6  0E0F               	movlw	(high __ramtop+-1)
 24150  0028E8  64F7               	cpfsgt	tblptrh,c
 24151  0028EA  D003               	bra	i2u574_47
 24152  0028EC  0008               	tblrd		*
 24153  0028EE  50F5               	movf	tablat,w,c
 24154  0028F0  D005               	bra	i2u574_40
 24155  0028F2                     i2u574_47:
 24156  0028F2  CFF6 FFE9          	movff	tblptrl,fsr0l
 24157  0028F6  CFF7 FFEA          	movff	tblptrh,fsr0h
 24158  0028FA  50EF               	movf	indf0,w,c
 24159  0028FC                     i2u574_40:
 24160  0028FC  ECD3  F02D         	call	i2_putch
 24161  002900  4A1E               	infsnz	i2printf@cp,f,c
 24162  002902  2A1F               	incf	i2printf@cp+1,f,c
 24163  002904                     i2l7012:
 24164  002904  0622               	decf	i2printf@len,f,c
 24165  002906  A0D8               	btfss	status,0,c
 24166  002908  0623               	decf	i2printf@len+1,f,c
 24167  00290A  2822               	incf	i2printf@len,w,c
 24168  00290C  E1E6               	bnz	i2l7008
 24169  00290E  2823               	incf	i2printf@len+1,w,c
 24170  002910  B4D8               	btfsc	status,2,c
 24171  002912  D0DA               	goto	i2l7090
 24172  002914  D7E2               	goto	i2l7008
 24173  002916                     i2l7014:
 24174                           
 24175                           ;doprnt.c: 818: flag |= 0x40;
 24176  002916  8C26               	bsf	i2printf@flag,6,c
 24177                           
 24178                           ;doprnt.c: 822: }
 24179                           
 24180                           ;doprnt.c: 819: break;
 24181  002918  D01B               	goto	i2l1510
 24182  00291A                     i2l7018:
 24183  00291A  C00D  FFF6         	movff	i2printf@f,tblptrl
 24184  00291E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24185  002922  4A0D               	infsnz	i2printf@f,f,c
 24186  002924  2A0E               	incf	i2printf@f+1,f,c
 24187  002926                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24188  002926  6AF8               	clrf	tblptru,c
 24189  002928                     	endif
 24190  002928                     	if	0	;tblptru may be non-zero
 24191  002928                     	endif
 24192  002928  0008               	tblrd		*
 24193  00292A  CFF5 F027          	movff	tablat,i2printf@c
 24194  00292E  5027               	movf	i2printf@c,w,c
 24195                           
 24196                           ; Switch size 1, requested type "space"
 24197                           ; Number of cases is 5, Range of values is 0 to 117
 24198                           ; switch strategies available:
 24199                           ; Name         Instructions Cycles
 24200                           ; simple_byte           16     9 (average)
 24201                           ;	Chosen strategy is simple_byte
 24202  002930  0A00               	xorlw	0	; case 0
 24203  002932  B4D8               	btfsc	status,2,c
 24204  002934  0012               	return	
 24205  002936  0A64               	xorlw	100	; case 100
 24206  002938  B4D8               	btfsc	status,2,c
 24207  00293A  D00A               	goto	i2l1510
 24208  00293C  0A0D               	xorlw	13	; case 105
 24209  00293E  B4D8               	btfsc	status,2,c
 24210  002940  D007               	goto	i2l1510
 24211  002942  0A1A               	xorlw	26	; case 115
 24212  002944  B4D8               	btfsc	status,2,c
 24213  002946  D778               	goto	i2l6984
 24214  002948  0A06               	xorlw	6	; case 117
 24215  00294A  B4D8               	btfsc	status,2,c
 24216  00294C  D7E4               	goto	i2l7014
 24217  00294E  D0BC               	goto	i2l7090
 24218  002950                     i2l1510:
 24219                           
 24220                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24221  002950  BC26               	btfsc	i2printf@flag,6,c
 24222  002952  D015               	goto	i2l7030
 24223                           
 24224                           ;doprnt.c: 1253: {
 24225                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24226  002954  C020  FFD9         	movff	i2printf@ap,fsr2l
 24227  002958  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24228  00295C  CFDE F024          	movff	postinc2,i2printf@val
 24229  002960  CFDD F025          	movff	postdec2,i2printf@val+1
 24230  002964  0E02               	movlw	2
 24231  002966  2620               	addwf	i2printf@ap,f,c
 24232  002968  0E00               	movlw	0
 24233  00296A  2221               	addwfc	i2printf@ap+1,f,c
 24234                           
 24235                           ;doprnt.c: 1261: if((int)val < 0) {
 24236  00296C  AE25               	btfss	i2printf@val+1,7,c
 24237  00296E  D013               	goto	i2l7034
 24238                           
 24239                           ;doprnt.c: 1262: flag |= 0x03;
 24240  002970  0E03               	movlw	3
 24241  002972  1226               	iorwf	i2printf@flag,f,c
 24242                           
 24243                           ;doprnt.c: 1263: val = -val;
 24244  002974  6C24               	negf	i2printf@val,c
 24245  002976  1E25               	comf	i2printf@val+1,f,c
 24246  002978  B0D8               	btfsc	status,0,c
 24247  00297A  2A25               	incf	i2printf@val+1,f,c
 24248                           
 24249                           ;doprnt.c: 1264: }
 24250                           ;doprnt.c: 1266: }
 24251  00297C  D00C               	goto	i2l7034
 24252  00297E                     i2l7030:
 24253                           
 24254                           ;doprnt.c: 1268: else
 24255                           ;doprnt.c: 1273: {
 24256                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24257  00297E  C020  FFD9         	movff	i2printf@ap,fsr2l
 24258  002982  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24259  002986  CFDE F024          	movff	postinc2,i2printf@val
 24260  00298A  CFDD F025          	movff	postdec2,i2printf@val+1
 24261  00298E  0E02               	movlw	2
 24262  002990  2620               	addwf	i2printf@ap,f,c
 24263  002992  0E00               	movlw	0
 24264  002994  2221               	addwfc	i2printf@ap+1,f,c
 24265  002996                     i2l7034:
 24266                           
 24267                           ;doprnt.c: 1287: }
 24268                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24269  002996  0E01               	movlw	1
 24270  002998  6E27               	movwf	i2printf@c,c
 24271  00299A                     i2l7036:
 24272  00299A  0E05               	movlw	5
 24273  00299C  1827               	xorwf	i2printf@c,w,c
 24274  00299E  B4D8               	btfsc	status,2,c
 24275  0029A0  D015               	goto	i2l7048
 24276                           
 24277                           ;doprnt.c: 1306: if(val < dpowers[c])
 24278  0029A2  5027               	movf	i2printf@c,w,c
 24279  0029A4  0D02               	mullw	2
 24280  0029A6  0E9A               	movlw	low _dpowers
 24281  0029A8  24F3               	addwf	prodl,w,c
 24282  0029AA  6EF6               	movwf	tblptrl,c
 24283  0029AC  0EFA               	movlw	high _dpowers
 24284  0029AE  20F4               	addwfc	prodh,w,c
 24285  0029B0  6EF7               	movwf	tblptrh,c
 24286  0029B2                     	if	1	;There are 3 active tblptr bytes
 24287  0029B2  6AF8               	clrf	tblptru,c
 24288  0029B4  0E00               	movlw	low (__mediumconst shr (0+16))
 24289  0029B6  22F8               	addwfc	tblptru,f,c
 24290  0029B8                     	endif
 24291  0029B8  0009               	tblrd		*+
 24292  0029BA  50F5               	movf	tablat,w,c
 24293  0029BC  5C24               	subwf	i2printf@val,w,c
 24294  0029BE  0009               	tblrd		*+
 24295  0029C0  50F5               	movf	tablat,w,c
 24296  0029C2  5825               	subwfb	i2printf@val+1,w,c
 24297  0029C4  A0D8               	btfss	status,0,c
 24298  0029C6  D002               	goto	i2l7048
 24299                           
 24300                           ;doprnt.c: 1307: break;
 24301  0029C8  2A27               	incf	i2printf@c,f,c
 24302  0029CA  D7E7               	goto	i2l7036
 24303  0029CC                     i2l7048:
 24304                           
 24305                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24306  0029CC  5028               	movf	i2printf@width,w,c
 24307  0029CE  1029               	iorwf	i2printf@width+1,w,c
 24308  0029D0  B4D8               	btfsc	status,2,c
 24309  0029D2  D009               	goto	i2l7054
 24310  0029D4  C026  F019         	movff	i2printf@flag,??i2_printf
 24311  0029D8  0E03               	movlw	3
 24312  0029DA  1619               	andwf	??i2_printf,f,c
 24313  0029DC  B4D8               	btfsc	status,2,c
 24314  0029DE  D003               	goto	i2l7054
 24315                           
 24316                           ;doprnt.c: 1346: width--;
 24317  0029E0  0628               	decf	i2printf@width,f,c
 24318  0029E2  A0D8               	btfss	status,0,c
 24319  0029E4  0629               	decf	i2printf@width+1,f,c
 24320  0029E6                     i2l7054:
 24321                           
 24322                           ;doprnt.c: 1381: if(width > c)
 24323  0029E6  0E80               	movlw	128
 24324  0029E8  BE27               	btfsc	i2printf@c,7,c
 24325  0029EA  0E7F               	movlw	127
 24326  0029EC  6E19               	movwf	??i2_printf& (0+255),c
 24327  0029EE  5028               	movf	i2printf@width,w,c
 24328  0029F0  5C27               	subwf	i2printf@c,w,c
 24329  0029F2  5029               	movf	i2printf@width+1,w,c
 24330  0029F4  0A80               	xorlw	128
 24331  0029F6  5819               	subwfb	??i2_printf& (0+255),w,c
 24332  0029F8  B0D8               	btfsc	status,0,c
 24333  0029FA  D007               	goto	i2l7058
 24334                           
 24335                           ;doprnt.c: 1382: width -= c;
 24336  0029FC  5027               	movf	i2printf@c,w,c
 24337  0029FE  5E28               	subwf	i2printf@width,f,c
 24338  002A00  0E00               	movlw	0
 24339  002A02  BE27               	btfsc	i2printf@c,7,c
 24340  002A04  0EFF               	movlw	255
 24341  002A06  5A29               	subwfb	i2printf@width+1,f,c
 24342  002A08  D004               	goto	i2l7060
 24343  002A0A                     i2l7058:
 24344                           
 24345                           ;doprnt.c: 1383: else
 24346                           ;doprnt.c: 1384: width = 0;
 24347  002A0A  0E00               	movlw	0
 24348  002A0C  6E29               	movwf	i2printf@width+1,c
 24349  002A0E  0E00               	movlw	0
 24350  002A10  6E28               	movwf	i2printf@width,c
 24351  002A12                     i2l7060:
 24352                           
 24353                           ;doprnt.c: 1387: if(flag & 0x04) {
 24354  002A12  A426               	btfss	i2printf@flag,2,c
 24355  002A14  D014               	goto	i2l7072
 24356                           
 24357                           ;doprnt.c: 1392: if(flag & 0x03)
 24358  002A16  C026  F019         	movff	i2printf@flag,??i2_printf
 24359  002A1A  0E03               	movlw	3
 24360  002A1C  1619               	andwf	??i2_printf,f,c
 24361  002A1E  B4D8               	btfsc	status,2,c
 24362  002A20  D003               	goto	i2l7066
 24363                           
 24364                           ;doprnt.c: 1393: (putch('-') );
 24365  002A22  0E2D               	movlw	45
 24366  002A24  ECD3  F02D         	call	i2_putch
 24367  002A28                     i2l7066:
 24368                           
 24369                           ;doprnt.c: 1415: if(width)
 24370  002A28  5028               	movf	i2printf@width,w,c
 24371  002A2A  1029               	iorwf	i2printf@width+1,w,c
 24372  002A2C  B4D8               	btfsc	status,2,c
 24373  002A2E  D01E               	goto	i2l7082
 24374                           
 24375                           ;doprnt.c: 1417: (putch('0') );
 24376                           
 24377                           ;doprnt.c: 1416: do
 24378  002A30  0E30               	movlw	48
 24379  002A32  ECD3  F02D         	call	i2_putch
 24380                           
 24381                           ;doprnt.c: 1418: while(--width);
 24382  002A36  0628               	decf	i2printf@width,f,c
 24383  002A38  A0D8               	btfss	status,0,c
 24384  002A3A  0629               	decf	i2printf@width+1,f,c
 24385  002A3C  D7F5               	goto	i2l7066
 24386  002A3E                     i2l7072:
 24387                           
 24388                           ;doprnt.c: 1422: {
 24389                           ;doprnt.c: 1424: if(width
 24390                           ;doprnt.c: 1428: )
 24391  002A3E  5028               	movf	i2printf@width,w,c
 24392  002A40  1029               	iorwf	i2printf@width+1,w,c
 24393  002A42  B4D8               	btfsc	status,2,c
 24394  002A44  D00A               	goto	i2l7078
 24395  002A46                     i2l7074:
 24396                           
 24397                           ;doprnt.c: 1430: (putch(' ') );
 24398  002A46  0E20               	movlw	32
 24399  002A48  ECD3  F02D         	call	i2_putch
 24400                           
 24401                           ;doprnt.c: 1431: while(--width);
 24402  002A4C  0628               	decf	i2printf@width,f,c
 24403  002A4E  A0D8               	btfss	status,0,c
 24404  002A50  0629               	decf	i2printf@width+1,f,c
 24405  002A52  5028               	movf	i2printf@width,w,c
 24406  002A54  1029               	iorwf	i2printf@width+1,w,c
 24407  002A56  A4D8               	btfss	status,2,c
 24408  002A58  D7F6               	goto	i2l7074
 24409  002A5A                     i2l7078:
 24410                           
 24411                           ;doprnt.c: 1438: if(flag & 0x03)
 24412  002A5A  C026  F019         	movff	i2printf@flag,??i2_printf
 24413  002A5E  0E03               	movlw	3
 24414  002A60  1619               	andwf	??i2_printf,f,c
 24415  002A62  B4D8               	btfsc	status,2,c
 24416  002A64  D003               	goto	i2l7082
 24417                           
 24418                           ;doprnt.c: 1439: (putch('-') );
 24419  002A66  0E2D               	movlw	45
 24420  002A68  ECD3  F02D         	call	i2_putch
 24421  002A6C                     i2l7082:
 24422                           
 24423                           ;doprnt.c: 1469: }
 24424                           ;doprnt.c: 1472: prec = c;
 24425  002A6C  C027  F01D         	movff	i2printf@c,i2printf@prec
 24426                           
 24427                           ;doprnt.c: 1474: while(prec--) {
 24428  002A70  D027               	goto	i2l7088
 24429  002A72                     i2l7084:
 24430                           
 24431                           ;doprnt.c: 1478: {
 24432                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24433  002A72  501D               	movf	i2printf@prec,w,c
 24434  002A74  0D02               	mullw	2
 24435  002A76  0E9A               	movlw	low _dpowers
 24436  002A78  24F3               	addwf	prodl,w,c
 24437  002A7A  6EF6               	movwf	tblptrl,c
 24438  002A7C  0EFA               	movlw	high _dpowers
 24439  002A7E  20F4               	addwfc	prodh,w,c
 24440  002A80  6EF7               	movwf	tblptrh,c
 24441  002A82                     	if	1	;There are 3 active tblptr bytes
 24442  002A82  6AF8               	clrf	tblptru,c
 24443  002A84  0E00               	movlw	low (__mediumconst shr (0+16))
 24444  002A86  22F8               	addwfc	tblptru,f,c
 24445  002A88                     	endif
 24446  002A88  0009               	tblrd		*+
 24447  002A8A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24448  002A8E  000A               	tblrd		*-
 24449  002A90  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24450  002A94  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24451  002A98  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24452  002A9C  ECCE  F029         	call	i2___lwdiv	;wreg free
 24453  002AA0  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24454  002AA4  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24455  002AA8  0E00               	movlw	0
 24456  002AAA  6E04               	movwf	i2___lwmod@divisor+1,c
 24457  002AAC  0E0A               	movlw	10
 24458  002AAE  6E03               	movwf	i2___lwmod@divisor,c
 24459  002AB0  ECAF  F02A         	call	i2___lwmod	;wreg free
 24460  002AB4  5001               	movf	?i2___lwmod,w,c
 24461  002AB6  0F30               	addlw	48
 24462  002AB8  6E27               	movwf	i2printf@c,c
 24463                           
 24464                           ;doprnt.c: 1523: }
 24465                           ;doprnt.c: 1524: (putch(c) );
 24466  002ABA  5027               	movf	i2printf@c,w,c
 24467  002ABC  ECD3  F02D         	call	i2_putch
 24468  002AC0                     i2l7088:
 24469  002AC0  061D               	decf	i2printf@prec,f,c
 24470  002AC2  281D               	incf	i2printf@prec,w,c
 24471  002AC4  A4D8               	btfss	status,2,c
 24472  002AC6  D7D5               	goto	i2l7084
 24473  002AC8                     i2l7090:
 24474  002AC8  C00D  FFF6         	movff	i2printf@f,tblptrl
 24475  002ACC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24476  002AD0  4A0D               	infsnz	i2printf@f,f,c
 24477  002AD2  2A0E               	incf	i2printf@f+1,f,c
 24478  002AD4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24479  002AD4  6AF8               	clrf	tblptru,c
 24480  002AD6                     	endif
 24481  002AD6                     	if	0	;tblptru may be non-zero
 24482  002AD6                     	endif
 24483  002AD6  0008               	tblrd		*
 24484  002AD8  CFF5 F027          	movff	tablat,i2printf@c
 24485  002ADC  5027               	movf	i2printf@c,w,c
 24486  002ADE  B4D8               	btfsc	status,2,c
 24487  002AE0  0012               	return	
 24488  002AE2  D64E               	goto	i2l6960
 24489  002AE4                     __end_ofi2_printf:
 24490                           	opt stack 0
 24491                           pclatu	equ	0xFFB
 24492                           pclath	equ	0xFFA
 24493                           tblptru	equ	0xFF8
 24494                           tblptrh	equ	0xFF7
 24495                           tblptrl	equ	0xFF6
 24496                           tablat	equ	0xFF5
 24497                           prodh	equ	0xFF4
 24498                           prodl	equ	0xFF3
 24499                           intcon	equ	0xFF2
 24500                           intcon2	equ	0xFF1
 24501                           intcon3	equ	0xFF0
 24502                           indf0	equ	0xFEF
 24503                           postinc0	equ	0xFEE
 24504                           fsr0h	equ	0xFEA
 24505                           fsr0l	equ	0xFE9
 24506                           wreg	equ	0xFE8
 24507                           postdec1	equ	0xFE5
 24508                           fsr1h	equ	0xFE2
 24509                           fsr1l	equ	0xFE1
 24510                           indf2	equ	0xFDF
 24511                           postinc2	equ	0xFDE
 24512                           postdec2	equ	0xFDD
 24513                           fsr2h	equ	0xFDA
 24514                           fsr2l	equ	0xFD9
 24515                           status	equ	0xFD8
 24516                           
 24517 ;; *************** function i2_putch *****************
 24518 ;; Defined at:
 24519 ;;		line 20 in file "lcd.c"
 24520 ;; Parameters:    Size  Location     Type
 24521 ;;  data            1    wreg     unsigned char 
 24522 ;; Auto vars:     Size  Location     Type
 24523 ;;  data            1    2[COMRAM] unsigned char 
 24524 ;; Return value:  Size  Location     Type
 24525 ;;                  1    wreg      void 
 24526 ;; Registers used:
 24527 ;;		wreg, status,2, status,0, cstack
 24528 ;; Tracked objects:
 24529 ;;		On entry : 0/0
 24530 ;;		On exit  : 0/0
 24531 ;;		Unchanged: 0/0
 24532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24536 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24537 ;;Total ram usage:        1 bytes
 24538 ;; Hardware stack levels used:    1
 24539 ;; Hardware stack levels required when called:    1
 24540 ;; This function calls:
 24541 ;;		i2_lcdNibble
 24542 ;; This function is called by:
 24543 ;;		i2_printf
 24544 ;; This function uses a non-reentrant model
 24545 ;;
 24546                           
 24547                           	psect	text86
 24548  005BA6                     __ptext86:
 24549                           	opt stack 0
 24550  005BA6                     i2_putch:
 24551                           	opt stack 20
 24552                           
 24553                           ;incstack = 0
 24554                           ;i2putch@data stored from wreg
 24555  005BA6  6E03               	movwf	i2putch@data,c
 24556                           
 24557                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24558  005BA8  848C               	bsf	3980,2,c	;volatile
 24559                           
 24560                           ;lcd.c: 22: lcdNibble(data);
 24561  005BAA  5003               	movf	i2putch@data,w,c
 24562  005BAC  ECA1  F029         	call	i2_lcdNibble
 24563  005BB0  0012               	return		;funcret
 24564  005BB2                     __end_ofi2_putch:
 24565                           	opt stack 0
 24566                           pclatu	equ	0xFFB
 24567                           pclath	equ	0xFFA
 24568                           tblptru	equ	0xFF8
 24569                           tblptrh	equ	0xFF7
 24570                           tblptrl	equ	0xFF6
 24571                           tablat	equ	0xFF5
 24572                           prodh	equ	0xFF4
 24573                           prodl	equ	0xFF3
 24574                           intcon	equ	0xFF2
 24575                           intcon2	equ	0xFF1
 24576                           intcon3	equ	0xFF0
 24577                           indf0	equ	0xFEF
 24578                           postinc0	equ	0xFEE
 24579                           fsr0h	equ	0xFEA
 24580                           fsr0l	equ	0xFE9
 24581                           wreg	equ	0xFE8
 24582                           postdec1	equ	0xFE5
 24583                           fsr1h	equ	0xFE2
 24584                           fsr1l	equ	0xFE1
 24585                           indf2	equ	0xFDF
 24586                           postinc2	equ	0xFDE
 24587                           postdec2	equ	0xFDD
 24588                           fsr2h	equ	0xFDA
 24589                           fsr2l	equ	0xFD9
 24590                           status	equ	0xFD8
 24591                           
 24592 ;; *************** function i2_isdigit *****************
 24593 ;; Defined at:
 24594 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24595 ;; Parameters:    Size  Location     Type
 24596 ;;  c               1    wreg     unsigned char 
 24597 ;; Auto vars:     Size  Location     Type
 24598 ;;  c               1    2[COMRAM] unsigned char 
 24599 ;; Return value:  Size  Location     Type
 24600 ;;		None               void
 24601 ;; Registers used:
 24602 ;;		wreg, status,2, status,0
 24603 ;; Tracked objects:
 24604 ;;		On entry : 0/0
 24605 ;;		On exit  : 0/0
 24606 ;;		Unchanged: 0/0
 24607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24611 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24612 ;;Total ram usage:        3 bytes
 24613 ;; Hardware stack levels used:    1
 24614 ;; This function calls:
 24615 ;;		Nothing
 24616 ;; This function is called by:
 24617 ;;		i2_printf
 24618 ;; This function uses a non-reentrant model
 24619 ;;
 24620                           
 24621                           	psect	text87
 24622  005ADC                     __ptext87:
 24623                           	opt stack 0
 24624  005ADC                     i2_isdigit:
 24625                           	opt stack 21
 24626                           
 24627                           ;incstack = 0
 24628                           ;i2isdigit@c stored from wreg
 24629  005ADC  6E03               	movwf	i2isdigit@c,c
 24630  005ADE  0E00               	movlw	0
 24631  005AE0  6E02               	movwf	i2_isdigit$2094,c
 24632  005AE2  0E3A               	movlw	58
 24633  005AE4  6003               	cpfslt	i2isdigit@c,c
 24634  005AE6  D005               	goto	i2l6624
 24635  005AE8  0E2F               	movlw	47
 24636  005AEA  6403               	cpfsgt	i2isdigit@c,c
 24637  005AEC  D002               	goto	i2l6624
 24638  005AEE  0E01               	movlw	1
 24639  005AF0  6E02               	movwf	i2_isdigit$2094,c
 24640  005AF2                     i2l6624:
 24641  005AF2  C002  F001         	movff	i2_isdigit$2094,??i2_isdigit
 24642  005AF6  3001               	rrcf	??i2_isdigit,w,c
 24643  005AF8  0012               	return	
 24644  005AFA                     __end_ofi2_isdigit:
 24645                           	opt stack 0
 24646                           pclatu	equ	0xFFB
 24647                           pclath	equ	0xFFA
 24648                           tblptru	equ	0xFF8
 24649                           tblptrh	equ	0xFF7
 24650                           tblptrl	equ	0xFF6
 24651                           tablat	equ	0xFF5
 24652                           prodh	equ	0xFF4
 24653                           prodl	equ	0xFF3
 24654                           intcon	equ	0xFF2
 24655                           intcon2	equ	0xFF1
 24656                           intcon3	equ	0xFF0
 24657                           indf0	equ	0xFEF
 24658                           postinc0	equ	0xFEE
 24659                           fsr0h	equ	0xFEA
 24660                           fsr0l	equ	0xFE9
 24661                           wreg	equ	0xFE8
 24662                           postdec1	equ	0xFE5
 24663                           fsr1h	equ	0xFE2
 24664                           fsr1l	equ	0xFE1
 24665                           indf2	equ	0xFDF
 24666                           postinc2	equ	0xFDE
 24667                           postdec2	equ	0xFDD
 24668                           fsr2h	equ	0xFDA
 24669                           fsr2l	equ	0xFD9
 24670                           status	equ	0xFD8
 24671                           
 24672 ;; *************** function i2___wmul *****************
 24673 ;; Defined at:
 24674 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24675 ;; Parameters:    Size  Location     Type
 24676 ;;  multiplier      2    0[COMRAM] unsigned int 
 24677 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24678 ;; Auto vars:     Size  Location     Type
 24679 ;;  __wmul          2    4[COMRAM] unsigned int 
 24680 ;; Return value:  Size  Location     Type
 24681 ;;                  2    0[COMRAM] unsigned int 
 24682 ;; Registers used:
 24683 ;;		wreg, status,2, status,0, prodl, prodh
 24684 ;; Tracked objects:
 24685 ;;		On entry : 0/0
 24686 ;;		On exit  : 0/0
 24687 ;;		Unchanged: 0/0
 24688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24692 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24693 ;;Total ram usage:        6 bytes
 24694 ;; Hardware stack levels used:    1
 24695 ;; This function calls:
 24696 ;;		Nothing
 24697 ;; This function is called by:
 24698 ;;		_printSortTimer
 24699 ;;		_retrieveLog
 24700 ;;		i2_printf
 24701 ;; This function uses a non-reentrant model
 24702 ;;
 24703                           
 24704                           	psect	text88
 24705  005A28                     __ptext88:
 24706                           	opt stack 0
 24707  005A28                     i2___wmul:
 24708                           	opt stack 21
 24709                           
 24710                           ;incstack = 0
 24711  005A28  5001               	movf	i2___wmul@multiplier,w,c
 24712  005A2A  0203               	mulwf	i2___wmul@multiplicand,c
 24713  005A2C  CFF3 F005          	movff	prodl,i2___wmul@product
 24714  005A30  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24715  005A34  5001               	movf	i2___wmul@multiplier,w,c
 24716  005A36  0204               	mulwf	i2___wmul@multiplicand+1,c
 24717  005A38  50F3               	movf	prodl,w,c
 24718  005A3A  2606               	addwf	i2___wmul@product+1,f,c
 24719  005A3C  5002               	movf	i2___wmul@multiplier+1,w,c
 24720  005A3E  0203               	mulwf	i2___wmul@multiplicand,c
 24721  005A40  50F3               	movf	prodl,w,c
 24722  005A42  2606               	addwf	i2___wmul@product+1,f,c
 24723  005A44  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24724  005A48  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24725  005A4C  0012               	return	
 24726  005A4E                     __end_ofi2___wmul:
 24727                           	opt stack 0
 24728                           pclatu	equ	0xFFB
 24729                           pclath	equ	0xFFA
 24730                           tblptru	equ	0xFF8
 24731                           tblptrh	equ	0xFF7
 24732                           tblptrl	equ	0xFF6
 24733                           tablat	equ	0xFF5
 24734                           prodh	equ	0xFF4
 24735                           prodl	equ	0xFF3
 24736                           intcon	equ	0xFF2
 24737                           intcon2	equ	0xFF1
 24738                           intcon3	equ	0xFF0
 24739                           indf0	equ	0xFEF
 24740                           postinc0	equ	0xFEE
 24741                           fsr0h	equ	0xFEA
 24742                           fsr0l	equ	0xFE9
 24743                           wreg	equ	0xFE8
 24744                           postdec1	equ	0xFE5
 24745                           fsr1h	equ	0xFE2
 24746                           fsr1l	equ	0xFE1
 24747                           indf2	equ	0xFDF
 24748                           postinc2	equ	0xFDE
 24749                           postdec2	equ	0xFDD
 24750                           fsr2h	equ	0xFDA
 24751                           fsr2l	equ	0xFD9
 24752                           status	equ	0xFD8
 24753                           
 24754 ;; *************** function i2___lwmod *****************
 24755 ;; Defined at:
 24756 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24757 ;; Parameters:    Size  Location     Type
 24758 ;;  dividend        2    0[COMRAM] unsigned int 
 24759 ;;  divisor         2    2[COMRAM] unsigned int 
 24760 ;; Auto vars:     Size  Location     Type
 24761 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24762 ;; Return value:  Size  Location     Type
 24763 ;;                  2    0[COMRAM] unsigned int 
 24764 ;; Registers used:
 24765 ;;		wreg, status,2, status,0
 24766 ;; Tracked objects:
 24767 ;;		On entry : 0/0
 24768 ;;		On exit  : 0/0
 24769 ;;		Unchanged: 0/0
 24770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24774 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24775 ;;Total ram usage:        5 bytes
 24776 ;; Hardware stack levels used:    1
 24777 ;; This function calls:
 24778 ;;		Nothing
 24779 ;; This function is called by:
 24780 ;;		_printSortTimer
 24781 ;;		i2_printf
 24782 ;; This function uses a non-reentrant model
 24783 ;;
 24784                           
 24785                           	psect	text89
 24786  00555E                     __ptext89:
 24787                           	opt stack 0
 24788  00555E                     i2___lwmod:
 24789                           	opt stack 21
 24790                           
 24791                           ;incstack = 0
 24792  00555E  5003               	movf	i2___lwmod@divisor,w,c
 24793  005560  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24794  005562  B4D8               	btfsc	status,2,c
 24795  005564  D018               	goto	i2l1967
 24796  005566  0E01               	movlw	1
 24797  005568  6E05               	movwf	i2___lwmod@counter,c
 24798  00556A  D004               	goto	i2l6656
 24799  00556C                     i2l6654:
 24800  00556C  90D8               	bcf	status,0,c
 24801  00556E  3603               	rlcf	i2___lwmod@divisor,f,c
 24802  005570  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24803  005572  2A05               	incf	i2___lwmod@counter,f,c
 24804  005574                     i2l6656:
 24805  005574  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24806  005576  D7FA               	goto	i2l6654
 24807  005578                     i2l6658:
 24808  005578  5003               	movf	i2___lwmod@divisor,w,c
 24809  00557A  5C01               	subwf	i2___lwmod@dividend,w,c
 24810  00557C  5004               	movf	i2___lwmod@divisor+1,w,c
 24811  00557E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24812  005580  A0D8               	btfss	status,0,c
 24813  005582  D004               	goto	i2l6662
 24814  005584  5003               	movf	i2___lwmod@divisor,w,c
 24815  005586  5E01               	subwf	i2___lwmod@dividend,f,c
 24816  005588  5004               	movf	i2___lwmod@divisor+1,w,c
 24817  00558A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24818  00558C                     i2l6662:
 24819  00558C  90D8               	bcf	status,0,c
 24820  00558E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24821  005590  3203               	rrcf	i2___lwmod@divisor,f,c
 24822  005592  2E05               	decfsz	i2___lwmod@counter,f,c
 24823  005594  D7F1               	goto	i2l6658
 24824  005596                     i2l1967:
 24825  005596  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24826  00559A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24827  00559E  0012               	return		;funcret
 24828  0055A0                     __end_ofi2___lwmod:
 24829                           	opt stack 0
 24830                           pclatu	equ	0xFFB
 24831                           pclath	equ	0xFFA
 24832                           tblptru	equ	0xFF8
 24833                           tblptrh	equ	0xFF7
 24834                           tblptrl	equ	0xFF6
 24835                           tablat	equ	0xFF5
 24836                           prodh	equ	0xFF4
 24837                           prodl	equ	0xFF3
 24838                           intcon	equ	0xFF2
 24839                           intcon2	equ	0xFF1
 24840                           intcon3	equ	0xFF0
 24841                           indf0	equ	0xFEF
 24842                           postinc0	equ	0xFEE
 24843                           fsr0h	equ	0xFEA
 24844                           fsr0l	equ	0xFE9
 24845                           wreg	equ	0xFE8
 24846                           postdec1	equ	0xFE5
 24847                           fsr1h	equ	0xFE2
 24848                           fsr1l	equ	0xFE1
 24849                           indf2	equ	0xFDF
 24850                           postinc2	equ	0xFDE
 24851                           postdec2	equ	0xFDD
 24852                           fsr2h	equ	0xFDA
 24853                           fsr2l	equ	0xFD9
 24854                           status	equ	0xFD8
 24855                           
 24856 ;; *************** function i2___lwdiv *****************
 24857 ;; Defined at:
 24858 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24859 ;; Parameters:    Size  Location     Type
 24860 ;;  dividend        2    5[COMRAM] unsigned int 
 24861 ;;  divisor         2    7[COMRAM] unsigned int 
 24862 ;; Auto vars:     Size  Location     Type
 24863 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24864 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24865 ;; Return value:  Size  Location     Type
 24866 ;;                  2    5[COMRAM] unsigned int 
 24867 ;; Registers used:
 24868 ;;		wreg, status,2, status,0
 24869 ;; Tracked objects:
 24870 ;;		On entry : 0/0
 24871 ;;		On exit  : 0/0
 24872 ;;		Unchanged: 0/0
 24873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24875 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24877 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24878 ;;Total ram usage:        7 bytes
 24879 ;; Hardware stack levels used:    1
 24880 ;; This function calls:
 24881 ;;		Nothing
 24882 ;; This function is called by:
 24883 ;;		_printSortTimer
 24884 ;;		i2_printf
 24885 ;; This function uses a non-reentrant model
 24886 ;;
 24887                           
 24888                           	psect	text90
 24889  00539C                     __ptext90:
 24890                           	opt stack 0
 24891  00539C                     i2___lwdiv:
 24892                           	opt stack 21
 24893                           
 24894                           ;incstack = 0
 24895  00539C  0E00               	movlw	0
 24896  00539E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24897  0053A0  0E00               	movlw	0
 24898  0053A2  6E0A               	movwf	i2___lwdiv@quotient,c
 24899  0053A4  5008               	movf	i2___lwdiv@divisor,w,c
 24900  0053A6  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24901  0053A8  B4D8               	btfsc	status,2,c
 24902  0053AA  D01C               	goto	i2l1957
 24903  0053AC  0E01               	movlw	1
 24904  0053AE  6E0C               	movwf	i2___lwdiv@counter,c
 24905  0053B0  D004               	goto	i2l6636
 24906  0053B2                     i2l6634:
 24907  0053B2  90D8               	bcf	status,0,c
 24908  0053B4  3608               	rlcf	i2___lwdiv@divisor,f,c
 24909  0053B6  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24910  0053B8  2A0C               	incf	i2___lwdiv@counter,f,c
 24911  0053BA                     i2l6636:
 24912  0053BA  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24913  0053BC  D7FA               	goto	i2l6634
 24914  0053BE                     i2l6638:
 24915  0053BE  90D8               	bcf	status,0,c
 24916  0053C0  360A               	rlcf	i2___lwdiv@quotient,f,c
 24917  0053C2  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24918  0053C4  5008               	movf	i2___lwdiv@divisor,w,c
 24919  0053C6  5C06               	subwf	i2___lwdiv@dividend,w,c
 24920  0053C8  5009               	movf	i2___lwdiv@divisor+1,w,c
 24921  0053CA  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24922  0053CC  A0D8               	btfss	status,0,c
 24923  0053CE  D005               	goto	i2l6646
 24924  0053D0  5008               	movf	i2___lwdiv@divisor,w,c
 24925  0053D2  5E06               	subwf	i2___lwdiv@dividend,f,c
 24926  0053D4  5009               	movf	i2___lwdiv@divisor+1,w,c
 24927  0053D6  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 24928  0053D8  800A               	bsf	i2___lwdiv@quotient,0,c
 24929  0053DA                     i2l6646:
 24930  0053DA  90D8               	bcf	status,0,c
 24931  0053DC  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24932  0053DE  3208               	rrcf	i2___lwdiv@divisor,f,c
 24933  0053E0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24934  0053E2  D7ED               	goto	i2l6638
 24935  0053E4                     i2l1957:
 24936  0053E4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24937  0053E8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24938  0053EC  0012               	return		;funcret
 24939  0053EE                     __end_ofi2___lwdiv:
 24940                           	opt stack 0
 24941                           pclatu	equ	0xFFB
 24942                           pclath	equ	0xFFA
 24943                           tblptru	equ	0xFF8
 24944                           tblptrh	equ	0xFF7
 24945                           tblptrl	equ	0xFF6
 24946                           tablat	equ	0xFF5
 24947                           prodh	equ	0xFF4
 24948                           prodl	equ	0xFF3
 24949                           intcon	equ	0xFF2
 24950                           intcon2	equ	0xFF1
 24951                           intcon3	equ	0xFF0
 24952                           indf0	equ	0xFEF
 24953                           postinc0	equ	0xFEE
 24954                           fsr0h	equ	0xFEA
 24955                           fsr0l	equ	0xFE9
 24956                           wreg	equ	0xFE8
 24957                           postdec1	equ	0xFE5
 24958                           fsr1h	equ	0xFE2
 24959                           fsr1l	equ	0xFE1
 24960                           indf2	equ	0xFDF
 24961                           postinc2	equ	0xFDE
 24962                           postdec2	equ	0xFDD
 24963                           fsr2h	equ	0xFDA
 24964                           fsr2l	equ	0xFD9
 24965                           status	equ	0xFD8
 24966                           
 24967 ;; *************** function i2_lcdInst *****************
 24968 ;; Defined at:
 24969 ;;		line 15 in file "lcd.c"
 24970 ;; Parameters:    Size  Location     Type
 24971 ;;  data            1    wreg     unsigned char 
 24972 ;; Auto vars:     Size  Location     Type
 24973 ;;  data            1    2[COMRAM] unsigned char 
 24974 ;; Return value:  Size  Location     Type
 24975 ;;                  1    wreg      void 
 24976 ;; Registers used:
 24977 ;;		wreg, status,2, status,0, cstack
 24978 ;; Tracked objects:
 24979 ;;		On entry : 0/0
 24980 ;;		On exit  : 0/0
 24981 ;;		Unchanged: 0/0
 24982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24987 ;;Total ram usage:        1 bytes
 24988 ;; Hardware stack levels used:    1
 24989 ;; Hardware stack levels required when called:    1
 24990 ;; This function calls:
 24991 ;;		i2_lcdNibble
 24992 ;; This function is called by:
 24993 ;;		_change_state_to_menu_11
 24994 ;;		_change_state_to_menu_23
 24995 ;;		_change_state_to_logs_11
 24996 ;;		_change_state_to_logs_12
 24997 ;;		_change_state_to_logs_22
 24998 ;;		_change_state_to_logs_23
 24999 ;;		_change_state_to_logs_33
 25000 ;;		_change_state_to_logs_34
 25001 ;;		_printSortTimer
 25002 ;;		i2_change_state_to_menu_start
 25003 ;;		i2_change_state_to_menu_12
 25004 ;;		i2_change_state_to_menu_22
 25005 ;;		i2_printRTC
 25006 ;; This function uses a non-reentrant model
 25007 ;;
 25008                           
 25009                           	psect	text91
 25010  005BB2                     __ptext91:
 25011                           	opt stack 0
 25012  005BB2                     i2_lcdInst:
 25013                           	opt stack 20
 25014                           
 25015                           ;incstack = 0
 25016                           ;i2lcdInst@data stored from wreg
 25017  005BB2  6E03               	movwf	i2lcdInst@data,c
 25018                           
 25019                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 25020  005BB4  948C               	bcf	3980,2,c	;volatile
 25021                           
 25022                           ;lcd.c: 17: lcdNibble(data);
 25023  005BB6  5003               	movf	i2lcdInst@data,w,c
 25024  005BB8  ECA1  F029         	call	i2_lcdNibble
 25025  005BBC  0012               	return		;funcret
 25026  005BBE                     __end_ofi2_lcdInst:
 25027                           	opt stack 0
 25028                           pclatu	equ	0xFFB
 25029                           pclath	equ	0xFFA
 25030                           tblptru	equ	0xFF8
 25031                           tblptrh	equ	0xFF7
 25032                           tblptrl	equ	0xFF6
 25033                           tablat	equ	0xFF5
 25034                           prodh	equ	0xFF4
 25035                           prodl	equ	0xFF3
 25036                           intcon	equ	0xFF2
 25037                           intcon2	equ	0xFF1
 25038                           intcon3	equ	0xFF0
 25039                           indf0	equ	0xFEF
 25040                           postinc0	equ	0xFEE
 25041                           fsr0h	equ	0xFEA
 25042                           fsr0l	equ	0xFE9
 25043                           wreg	equ	0xFE8
 25044                           postdec1	equ	0xFE5
 25045                           fsr1h	equ	0xFE2
 25046                           fsr1l	equ	0xFE1
 25047                           indf2	equ	0xFDF
 25048                           postinc2	equ	0xFDE
 25049                           postdec2	equ	0xFDD
 25050                           fsr2h	equ	0xFDA
 25051                           fsr2l	equ	0xFD9
 25052                           status	equ	0xFD8
 25053                           
 25054 ;; *************** function i2_lcdNibble *****************
 25055 ;; Defined at:
 25056 ;;		line 25 in file "lcd.c"
 25057 ;; Parameters:    Size  Location     Type
 25058 ;;  data            1    wreg     unsigned char 
 25059 ;; Auto vars:     Size  Location     Type
 25060 ;;  data            1    1[COMRAM] unsigned char 
 25061 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25062 ;; Return value:  Size  Location     Type
 25063 ;;                  1    wreg      void 
 25064 ;; Registers used:
 25065 ;;		wreg, status,2, status,0
 25066 ;; Tracked objects:
 25067 ;;		On entry : 0/0
 25068 ;;		On exit  : 0/0
 25069 ;;		Unchanged: 0/0
 25070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25074 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25075 ;;Total ram usage:        2 bytes
 25076 ;; Hardware stack levels used:    1
 25077 ;; This function calls:
 25078 ;;		Nothing
 25079 ;; This function is called by:
 25080 ;;		i2_lcdInst
 25081 ;;		i2_putch
 25082 ;; This function uses a non-reentrant model
 25083 ;;
 25084                           
 25085                           	psect	text92
 25086  005342                     __ptext92:
 25087                           	opt stack 0
 25088  005342                     i2_lcdNibble:
 25089                           	opt stack 20
 25090                           
 25091                           ;incstack = 0
 25092                           ;i2lcdNibble@data stored from wreg
 25093  005342  6E02               	movwf	i2lcdNibble@data,c
 25094                           
 25095                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25096  005344  9EF2               	bcf	intcon,7,c	;volatile
 25097                           
 25098                           ;lcd.c: 28: char temp = data & 0xF0;
 25099  005346  5002               	movf	i2lcdNibble@data,w,c
 25100  005348  0BF0               	andlw	240
 25101  00534A  6E01               	movwf	i2lcdNibble@temp,c
 25102                           
 25103                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25104  00534C  508C               	movf	3980,w,c	;volatile
 25105  00534E  0B0F               	andlw	15
 25106  005350  6E8C               	movwf	3980,c	;volatile
 25107                           
 25108                           ;lcd.c: 30: LATD = temp | LATD;
 25109  005352  5001               	movf	i2lcdNibble@temp,w,c
 25110  005354  108C               	iorwf	3980,w,c	;volatile
 25111  005356  6E8C               	movwf	3980,c	;volatile
 25112                           
 25113                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25114  005358  868C               	bsf	3980,3,c	;volatile
 25115                           
 25116                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25117  00535A  0E42               	movlw	66
 25118  00535C                     i2u1150_47:
 25119  00535C  2EE8               	decfsz	wreg,f,c
 25120  00535E  D7FE               	bra	i2u1150_47
 25121  005360  D000               	nop2	
 25122                           
 25123                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25124  005362  968C               	bcf	3980,3,c	;volatile
 25125                           
 25126                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25127  005364  0E42               	movlw	66
 25128  005366                     i2u1151_47:
 25129  005366  2EE8               	decfsz	wreg,f,c
 25130  005368  D7FE               	bra	i2u1151_47
 25131  00536A  D000               	nop2	
 25132                           
 25133                           ;lcd.c: 37: data = data << 4;
 25134  00536C  3802               	swapf	i2lcdNibble@data,w,c
 25135  00536E  0BF0               	andlw	240
 25136  005370  6E02               	movwf	i2lcdNibble@data,c
 25137                           
 25138                           ;lcd.c: 39: temp = data & 0xF0;
 25139  005372  5002               	movf	i2lcdNibble@data,w,c
 25140  005374  0BF0               	andlw	240
 25141  005376  6E01               	movwf	i2lcdNibble@temp,c
 25142                           
 25143                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25144  005378  508C               	movf	3980,w,c	;volatile
 25145  00537A  0B0F               	andlw	15
 25146  00537C  6E8C               	movwf	3980,c	;volatile
 25147                           
 25148                           ;lcd.c: 41: LATD = temp | LATD;
 25149  00537E  5001               	movf	i2lcdNibble@temp,w,c
 25150  005380  108C               	iorwf	3980,w,c	;volatile
 25151  005382  6E8C               	movwf	3980,c	;volatile
 25152                           
 25153                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25154  005384  868C               	bsf	3980,3,c	;volatile
 25155                           
 25156                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25157  005386  0E42               	movlw	66
 25158  005388                     i2u1152_47:
 25159  005388  2EE8               	decfsz	wreg,f,c
 25160  00538A  D7FE               	bra	i2u1152_47
 25161  00538C  D000               	nop2	
 25162                           
 25163                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25164  00538E  968C               	bcf	3980,3,c	;volatile
 25165                           
 25166                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25167  005390  0E42               	movlw	66
 25168  005392                     i2u1153_47:
 25169  005392  2EE8               	decfsz	wreg,f,c
 25170  005394  D7FE               	bra	i2u1153_47
 25171  005396  D000               	nop2	
 25172                           
 25173                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25174  005398  8EF2               	bsf	intcon,7,c	;volatile
 25175  00539A  0012               	return		;funcret
 25176  00539C                     __end_ofi2_lcdNibble:
 25177                           	opt stack 0
 25178                           pclatu	equ	0xFFB
 25179                           pclath	equ	0xFFA
 25180                           tblptru	equ	0xFF8
 25181                           tblptrh	equ	0xFF7
 25182                           tblptrl	equ	0xFF6
 25183                           tablat	equ	0xFF5
 25184                           prodh	equ	0xFF4
 25185                           prodl	equ	0xFF3
 25186                           intcon	equ	0xFF2
 25187                           intcon2	equ	0xFF1
 25188                           intcon3	equ	0xFF0
 25189                           indf0	equ	0xFEF
 25190                           postinc0	equ	0xFEE
 25191                           fsr0h	equ	0xFEA
 25192                           fsr0l	equ	0xFE9
 25193                           wreg	equ	0xFE8
 25194                           postdec1	equ	0xFE5
 25195                           fsr1h	equ	0xFE2
 25196                           fsr1l	equ	0xFE1
 25197                           indf2	equ	0xFDF
 25198                           postinc2	equ	0xFDE
 25199                           postdec2	equ	0xFDD
 25200                           fsr2h	equ	0xFDA
 25201                           fsr2l	equ	0xFD9
 25202                           status	equ	0xFD8
 25203                           
 25204 ;; *************** function i2_getRTC *****************
 25205 ;; Defined at:
 25206 ;;		line 44 in file "RTC.c"
 25207 ;; Parameters:    Size  Location     Type
 25208 ;;		None
 25209 ;; Auto vars:     Size  Location     Type
 25210 ;;  getRTC          2    3[COMRAM] int 
 25211 ;; Return value:  Size  Location     Type
 25212 ;;                  1    wreg      void 
 25213 ;; Registers used:
 25214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25215 ;; Tracked objects:
 25216 ;;		On entry : 0/0
 25217 ;;		On exit  : 0/0
 25218 ;;		Unchanged: 0/0
 25219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25223 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25224 ;;Total ram usage:        2 bytes
 25225 ;; Hardware stack levels used:    1
 25226 ;; Hardware stack levels required when called:    2
 25227 ;; This function calls:
 25228 ;;		i2_I2C_Master_Read
 25229 ;;		i2_I2C_Master_Start
 25230 ;;		i2_I2C_Master_Stop
 25231 ;;		i2_I2C_Master_Write
 25232 ;; This function is called by:
 25233 ;;		_printSortTimer
 25234 ;;		i2_printRTC
 25235 ;; This function uses a non-reentrant model
 25236 ;;
 25237                           
 25238                           	psect	text93
 25239  005016                     __ptext93:
 25240                           	opt stack 0
 25241  005016                     i2_getRTC:
 25242                           	opt stack 19
 25243                           
 25244                           ;RTC.c: 48: I2C_Master_Start();
 25245                           
 25246                           ;incstack = 0
 25247  005016  ECF9  F02D         	call	i2_I2C_Master_Start	;wreg free
 25248                           
 25249                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25250  00501A  0E00               	movlw	0
 25251  00501C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25252  00501E  0ED0               	movlw	208
 25253  005020  6E02               	movwf	i2I2C_Master_Write@d,c
 25254  005022  ECE4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25255                           
 25256                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25257  005026  0E00               	movlw	0
 25258  005028  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25259  00502A  0E00               	movlw	0
 25260  00502C  6E02               	movwf	i2I2C_Master_Write@d,c
 25261  00502E  ECE4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25262                           
 25263                           ;RTC.c: 51: I2C_Master_Stop();
 25264  005032  ECF5  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25265                           
 25266                           ;RTC.c: 54: I2C_Master_Start();
 25267  005036  ECF9  F02D         	call	i2_I2C_Master_Start	;wreg free
 25268                           
 25269                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25270  00503A  0E00               	movlw	0
 25271  00503C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25272  00503E  0ED1               	movlw	209
 25273  005040  6E02               	movwf	i2I2C_Master_Write@d,c
 25274  005042  ECE4  F02D         	call	i2_I2C_Master_Write	;wreg free
 25275                           
 25276                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25277  005046  0E00               	movlw	0
 25278  005048  6E05               	movwf	i2getRTC@i+1,c
 25279  00504A  0E00               	movlw	0
 25280  00504C  6E04               	movwf	i2getRTC@i,c
 25281  00504E                     i2l6932:
 25282  00504E  BE05               	btfsc	i2getRTC@i+1,7,c
 25283  005050  D006               	goto	i2l6936
 25284  005052  5005               	movf	i2getRTC@i+1,w,c
 25285  005054  E111               	bnz	i2l6942
 25286  005056  0E06               	movlw	6
 25287  005058  5C04               	subwf	i2getRTC@i,w,c
 25288  00505A  B0D8               	btfsc	status,0,c
 25289  00505C  D00D               	goto	i2l6942
 25290  00505E                     i2l6936:
 25291                           
 25292                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25293  00505E  0E1C               	movlw	low _time
 25294  005060  2404               	addwf	i2getRTC@i,w,c
 25295  005062  6ED9               	movwf	fsr2l,c
 25296  005064  0E01               	movlw	high _time
 25297  005066  2005               	addwfc	i2getRTC@i+1,w,c
 25298  005068  6EDA               	movwf	fsr2h,c
 25299  00506A  0E01               	movlw	1
 25300  00506C  EC27  F02D         	call	i2_I2C_Master_Read
 25301  005070  6EDF               	movwf	indf2,c
 25302  005072  4A04               	infsnz	i2getRTC@i,f,c
 25303  005074  2A05               	incf	i2getRTC@i+1,f,c
 25304  005076  D7EB               	goto	i2l6932
 25305  005078                     i2l6942:
 25306                           
 25307                           ;RTC.c: 58: }
 25308                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25309  005078  0E00               	movlw	0
 25310  00507A  EC27  F02D         	call	i2_I2C_Master_Read
 25311  00507E  0101               	movlb	1	; () banked
 25312  005080  6F22               	movwf	(_time+6)& (0+255),b
 25313                           
 25314                           ;RTC.c: 60: I2C_Master_Stop();
 25315  005082  ECF5  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25316  005086  0012               	return		;funcret
 25317  005088                     __end_ofi2_getRTC:
 25318                           	opt stack 0
 25319                           pclatu	equ	0xFFB
 25320                           pclath	equ	0xFFA
 25321                           tblptru	equ	0xFF8
 25322                           tblptrh	equ	0xFF7
 25323                           tblptrl	equ	0xFF6
 25324                           tablat	equ	0xFF5
 25325                           prodh	equ	0xFF4
 25326                           prodl	equ	0xFF3
 25327                           intcon	equ	0xFF2
 25328                           intcon2	equ	0xFF1
 25329                           intcon3	equ	0xFF0
 25330                           indf0	equ	0xFEF
 25331                           postinc0	equ	0xFEE
 25332                           fsr0h	equ	0xFEA
 25333                           fsr0l	equ	0xFE9
 25334                           wreg	equ	0xFE8
 25335                           postdec1	equ	0xFE5
 25336                           fsr1h	equ	0xFE2
 25337                           fsr1l	equ	0xFE1
 25338                           indf2	equ	0xFDF
 25339                           postinc2	equ	0xFDE
 25340                           postdec2	equ	0xFDD
 25341                           fsr2h	equ	0xFDA
 25342                           fsr2l	equ	0xFD9
 25343                           status	equ	0xFD8
 25344                           
 25345 ;; *************** function i2_I2C_Master_Write *****************
 25346 ;; Defined at:
 25347 ;;		line 49 in file "I2C.c"
 25348 ;; Parameters:    Size  Location     Type
 25349 ;;  d               2    1[COMRAM] unsigned int 
 25350 ;; Auto vars:     Size  Location     Type
 25351 ;;		None
 25352 ;; Return value:  Size  Location     Type
 25353 ;;                  1    wreg      void 
 25354 ;; Registers used:
 25355 ;;		wreg, status,2, status,0, cstack
 25356 ;; Tracked objects:
 25357 ;;		On entry : 0/0
 25358 ;;		On exit  : 0/0
 25359 ;;		Unchanged: 0/0
 25360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25365 ;;Total ram usage:        2 bytes
 25366 ;; Hardware stack levels used:    1
 25367 ;; Hardware stack levels required when called:    1
 25368 ;; This function calls:
 25369 ;;		i2_I2C_Master_Wait
 25370 ;; This function is called by:
 25371 ;;		i2_getRTC
 25372 ;; This function uses a non-reentrant model
 25373 ;;
 25374                           
 25375                           	psect	text94
 25376  005BC8                     __ptext94:
 25377                           	opt stack 0
 25378  005BC8                     i2_I2C_Master_Write:
 25379                           	opt stack 19
 25380                           
 25381                           ;I2C.c: 51: I2C_Master_Wait();
 25382                           
 25383                           ;incstack = 0
 25384  005BC8  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25385                           
 25386                           ;I2C.c: 52: SSPBUF = d;
 25387  005BCC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25388  005BD0  0012               	return		;funcret
 25389  005BD2                     __end_ofi2_I2C_Master_Write:
 25390                           	opt stack 0
 25391                           pclatu	equ	0xFFB
 25392                           pclath	equ	0xFFA
 25393                           tblptru	equ	0xFF8
 25394                           tblptrh	equ	0xFF7
 25395                           tblptrl	equ	0xFF6
 25396                           tablat	equ	0xFF5
 25397                           prodh	equ	0xFF4
 25398                           prodl	equ	0xFF3
 25399                           intcon	equ	0xFF2
 25400                           intcon2	equ	0xFF1
 25401                           intcon3	equ	0xFF0
 25402                           indf0	equ	0xFEF
 25403                           postinc0	equ	0xFEE
 25404                           fsr0h	equ	0xFEA
 25405                           fsr0l	equ	0xFE9
 25406                           wreg	equ	0xFE8
 25407                           postdec1	equ	0xFE5
 25408                           fsr1h	equ	0xFE2
 25409                           fsr1l	equ	0xFE1
 25410                           indf2	equ	0xFDF
 25411                           postinc2	equ	0xFDE
 25412                           postdec2	equ	0xFDD
 25413                           fsr2h	equ	0xFDA
 25414                           fsr2l	equ	0xFD9
 25415                           status	equ	0xFD8
 25416                           
 25417 ;; *************** function i2_I2C_Master_Stop *****************
 25418 ;; Defined at:
 25419 ;;		line 43 in file "I2C.c"
 25420 ;; Parameters:    Size  Location     Type
 25421 ;;		None
 25422 ;; Auto vars:     Size  Location     Type
 25423 ;;		None
 25424 ;; Return value:  Size  Location     Type
 25425 ;;                  1    wreg      void 
 25426 ;; Registers used:
 25427 ;;		wreg, status,2, status,0, cstack
 25428 ;; Tracked objects:
 25429 ;;		On entry : 0/0
 25430 ;;		On exit  : 0/0
 25431 ;;		Unchanged: 0/0
 25432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25437 ;;Total ram usage:        0 bytes
 25438 ;; Hardware stack levels used:    1
 25439 ;; Hardware stack levels required when called:    1
 25440 ;; This function calls:
 25441 ;;		i2_I2C_Master_Wait
 25442 ;; This function is called by:
 25443 ;;		i2_getRTC
 25444 ;; This function uses a non-reentrant model
 25445 ;;
 25446                           
 25447                           	psect	text95
 25448  005BEA                     __ptext95:
 25449                           	opt stack 0
 25450  005BEA                     i2_I2C_Master_Stop:
 25451                           	opt stack 19
 25452                           
 25453                           ;I2C.c: 45: I2C_Master_Wait();
 25454                           
 25455                           ;incstack = 0
 25456  005BEA  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25457                           
 25458                           ;I2C.c: 46: PEN = 1;
 25459  005BEE  84C5               	bsf	4037,2,c	;volatile
 25460  005BF0  0012               	return		;funcret
 25461  005BF2                     __end_ofi2_I2C_Master_Stop:
 25462                           	opt stack 0
 25463                           pclatu	equ	0xFFB
 25464                           pclath	equ	0xFFA
 25465                           tblptru	equ	0xFF8
 25466                           tblptrh	equ	0xFF7
 25467                           tblptrl	equ	0xFF6
 25468                           tablat	equ	0xFF5
 25469                           prodh	equ	0xFF4
 25470                           prodl	equ	0xFF3
 25471                           intcon	equ	0xFF2
 25472                           intcon2	equ	0xFF1
 25473                           intcon3	equ	0xFF0
 25474                           indf0	equ	0xFEF
 25475                           postinc0	equ	0xFEE
 25476                           fsr0h	equ	0xFEA
 25477                           fsr0l	equ	0xFE9
 25478                           wreg	equ	0xFE8
 25479                           postdec1	equ	0xFE5
 25480                           fsr1h	equ	0xFE2
 25481                           fsr1l	equ	0xFE1
 25482                           indf2	equ	0xFDF
 25483                           postinc2	equ	0xFDE
 25484                           postdec2	equ	0xFDD
 25485                           fsr2h	equ	0xFDA
 25486                           fsr2l	equ	0xFD9
 25487                           status	equ	0xFD8
 25488                           
 25489 ;; *************** function i2_I2C_Master_Start *****************
 25490 ;; Defined at:
 25491 ;;		line 31 in file "I2C.c"
 25492 ;; Parameters:    Size  Location     Type
 25493 ;;		None
 25494 ;; Auto vars:     Size  Location     Type
 25495 ;;		None
 25496 ;; Return value:  Size  Location     Type
 25497 ;;                  1    wreg      void 
 25498 ;; Registers used:
 25499 ;;		wreg, status,2, status,0, cstack
 25500 ;; Tracked objects:
 25501 ;;		On entry : 0/0
 25502 ;;		On exit  : 0/0
 25503 ;;		Unchanged: 0/0
 25504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25509 ;;Total ram usage:        0 bytes
 25510 ;; Hardware stack levels used:    1
 25511 ;; Hardware stack levels required when called:    1
 25512 ;; This function calls:
 25513 ;;		i2_I2C_Master_Wait
 25514 ;; This function is called by:
 25515 ;;		i2_getRTC
 25516 ;; This function uses a non-reentrant model
 25517 ;;
 25518                           
 25519                           	psect	text96
 25520  005BF2                     __ptext96:
 25521                           	opt stack 0
 25522  005BF2                     i2_I2C_Master_Start:
 25523                           	opt stack 19
 25524                           
 25525                           ;I2C.c: 33: I2C_Master_Wait();
 25526                           
 25527                           ;incstack = 0
 25528  005BF2  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25529                           
 25530                           ;I2C.c: 34: SEN = 1;
 25531  005BF6  80C5               	bsf	4037,0,c	;volatile
 25532  005BF8  0012               	return		;funcret
 25533  005BFA                     __end_ofi2_I2C_Master_Start:
 25534                           	opt stack 0
 25535                           pclatu	equ	0xFFB
 25536                           pclath	equ	0xFFA
 25537                           tblptru	equ	0xFF8
 25538                           tblptrh	equ	0xFF7
 25539                           tblptrl	equ	0xFF6
 25540                           tablat	equ	0xFF5
 25541                           prodh	equ	0xFF4
 25542                           prodl	equ	0xFF3
 25543                           intcon	equ	0xFF2
 25544                           intcon2	equ	0xFF1
 25545                           intcon3	equ	0xFF0
 25546                           indf0	equ	0xFEF
 25547                           postinc0	equ	0xFEE
 25548                           fsr0h	equ	0xFEA
 25549                           fsr0l	equ	0xFE9
 25550                           wreg	equ	0xFE8
 25551                           postdec1	equ	0xFE5
 25552                           fsr1h	equ	0xFE2
 25553                           fsr1l	equ	0xFE1
 25554                           indf2	equ	0xFDF
 25555                           postinc2	equ	0xFDE
 25556                           postdec2	equ	0xFDD
 25557                           fsr2h	equ	0xFDA
 25558                           fsr2l	equ	0xFD9
 25559                           status	equ	0xFD8
 25560                           
 25561 ;; *************** function i2_I2C_Master_Read *****************
 25562 ;; Defined at:
 25563 ;;		line 55 in file "I2C.c"
 25564 ;; Parameters:    Size  Location     Type
 25565 ;;  a               1    wreg     unsigned char 
 25566 ;; Auto vars:     Size  Location     Type
 25567 ;;  a               1    1[COMRAM] unsigned char 
 25568 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25569 ;; Return value:  Size  Location     Type
 25570 ;;                  1    wreg      unsigned char 
 25571 ;; Registers used:
 25572 ;;		wreg, status,2, status,0, cstack
 25573 ;; Tracked objects:
 25574 ;;		On entry : 0/0
 25575 ;;		On exit  : 0/0
 25576 ;;		Unchanged: 0/0
 25577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25582 ;;Total ram usage:        2 bytes
 25583 ;; Hardware stack levels used:    1
 25584 ;; Hardware stack levels required when called:    1
 25585 ;; This function calls:
 25586 ;;		i2_I2C_Master_Wait
 25587 ;; This function is called by:
 25588 ;;		i2_getRTC
 25589 ;; This function uses a non-reentrant model
 25590 ;;
 25591                           
 25592                           	psect	text97
 25593  005A4E                     __ptext97:
 25594                           	opt stack 0
 25595  005A4E                     i2_I2C_Master_Read:
 25596                           	opt stack 19
 25597                           
 25598                           ;incstack = 0
 25599                           ;i2I2C_Master_Read@a stored from wreg
 25600  005A4E  6E02               	movwf	i2I2C_Master_Read@a,c
 25601                           
 25602                           ;I2C.c: 57: unsigned char temp;
 25603                           ;I2C.c: 58: I2C_Master_Wait();
 25604  005A50  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25605                           
 25606                           ;I2C.c: 59: RCEN = 1;
 25607  005A54  86C5               	bsf	4037,3,c	;volatile
 25608                           
 25609                           ;I2C.c: 60: I2C_Master_Wait();
 25610  005A56  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25611                           
 25612                           ;I2C.c: 61: temp = SSPBUF;
 25613  005A5A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25614                           
 25615                           ;I2C.c: 62: I2C_Master_Wait();
 25616  005A5E  ECBA  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25617                           
 25618                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25619  005A62  5002               	movf	i2I2C_Master_Read@a,w,c
 25620  005A64  A4D8               	btfss	status,2,c
 25621  005A66  D002               	goto	i2u507_40
 25622  005A68  8AC5               	bsf	4037,5,c	;volatile
 25623  005A6A  D001               	goto	i2l6600
 25624  005A6C                     i2u507_40:
 25625  005A6C  9AC5               	bcf	4037,5,c	;volatile
 25626  005A6E                     i2l6600:
 25627                           
 25628                           ;I2C.c: 64: ACKEN = 1;
 25629  005A6E  88C5               	bsf	4037,4,c	;volatile
 25630                           
 25631                           ;I2C.c: 65: return temp;
 25632  005A70  5003               	movf	i2I2C_Master_Read@temp,w,c
 25633  005A72  0012               	return	
 25634  005A74                     __end_ofi2_I2C_Master_Read:
 25635                           	opt stack 0
 25636                           pclatu	equ	0xFFB
 25637                           pclath	equ	0xFFA
 25638                           tblptru	equ	0xFF8
 25639                           tblptrh	equ	0xFF7
 25640                           tblptrl	equ	0xFF6
 25641                           tablat	equ	0xFF5
 25642                           prodh	equ	0xFF4
 25643                           prodl	equ	0xFF3
 25644                           intcon	equ	0xFF2
 25645                           intcon2	equ	0xFF1
 25646                           intcon3	equ	0xFF0
 25647                           indf0	equ	0xFEF
 25648                           postinc0	equ	0xFEE
 25649                           fsr0h	equ	0xFEA
 25650                           fsr0l	equ	0xFE9
 25651                           wreg	equ	0xFE8
 25652                           postdec1	equ	0xFE5
 25653                           fsr1h	equ	0xFE2
 25654                           fsr1l	equ	0xFE1
 25655                           indf2	equ	0xFDF
 25656                           postinc2	equ	0xFDE
 25657                           postdec2	equ	0xFDD
 25658                           fsr2h	equ	0xFDA
 25659                           fsr2l	equ	0xFD9
 25660                           status	equ	0xFD8
 25661                           
 25662 ;; *************** function i2_I2C_Master_Wait *****************
 25663 ;; Defined at:
 25664 ;;		line 26 in file "I2C.c"
 25665 ;; Parameters:    Size  Location     Type
 25666 ;;		None
 25667 ;; Auto vars:     Size  Location     Type
 25668 ;;		None
 25669 ;; Return value:  Size  Location     Type
 25670 ;;                  1    wreg      void 
 25671 ;; Registers used:
 25672 ;;		wreg, status,2, status,0
 25673 ;; Tracked objects:
 25674 ;;		On entry : 0/0
 25675 ;;		On exit  : 0/0
 25676 ;;		Unchanged: 0/0
 25677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25681 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25682 ;;Total ram usage:        1 bytes
 25683 ;; Hardware stack levels used:    1
 25684 ;; This function calls:
 25685 ;;		Nothing
 25686 ;; This function is called by:
 25687 ;;		i2_I2C_Master_Start
 25688 ;;		i2_I2C_Master_Stop
 25689 ;;		i2_I2C_Master_Write
 25690 ;;		i2_I2C_Master_Read
 25691 ;; This function uses a non-reentrant model
 25692 ;;
 25693                           
 25694                           	psect	text98
 25695  005B74                     __ptext98:
 25696                           	opt stack 0
 25697  005B74                     i2_I2C_Master_Wait:
 25698                           	opt stack 19
 25699  005B74                     i2l66:
 25700  005B74  B4C7               	btfsc	4039,2,c	;volatile
 25701  005B76  D7FE               	goto	i2l66
 25702  005B78  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25703  005B7C  0E1F               	movlw	31
 25704  005B7E  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25705  005B80  B4D8               	btfsc	status,2,c
 25706  005B82  0012               	return	
 25707  005B84  D7F7               	goto	i2l66
 25708  005B86                     __end_ofi2_I2C_Master_Wait:
 25709                           	opt stack 0
 25710                           pclatu	equ	0xFFB
 25711                           pclath	equ	0xFFA
 25712                           tblptru	equ	0xFF8
 25713                           tblptrh	equ	0xFF7
 25714                           tblptrl	equ	0xFF6
 25715                           tablat	equ	0xFF5
 25716                           prodh	equ	0xFF4
 25717                           prodl	equ	0xFF3
 25718                           intcon	equ	0xFF2
 25719                           intcon2	equ	0xFF1
 25720                           intcon3	equ	0xFF0
 25721                           indf0	equ	0xFEF
 25722                           postinc0	equ	0xFEE
 25723                           fsr0h	equ	0xFEA
 25724                           fsr0l	equ	0xFE9
 25725                           wreg	equ	0xFE8
 25726                           postdec1	equ	0xFE5
 25727                           fsr1h	equ	0xFE2
 25728                           fsr1l	equ	0xFE1
 25729                           indf2	equ	0xFDF
 25730                           postinc2	equ	0xFDE
 25731                           postdec2	equ	0xFDD
 25732                           fsr2h	equ	0xFDA
 25733                           fsr2l	equ	0xFD9
 25734                           status	equ	0xFD8
 25735                           
 25736 ;; *************** function i2_delay_ms *****************
 25737 ;; Defined at:
 25738 ;;		line 667 in file "sort.c"
 25739 ;; Parameters:    Size  Location     Type
 25740 ;;  milliseconds    1    wreg     unsigned char 
 25741 ;; Auto vars:     Size  Location     Type
 25742 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25743 ;; Return value:  Size  Location     Type
 25744 ;;                  1    wreg      void 
 25745 ;; Registers used:
 25746 ;;		wreg, status,2, status,0, cstack
 25747 ;; Tracked objects:
 25748 ;;		On entry : 0/0
 25749 ;;		On exit  : 0/0
 25750 ;;		Unchanged: 0/0
 25751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25756 ;;Total ram usage:        2 bytes
 25757 ;; Hardware stack levels used:    1
 25758 ;; This function calls:
 25759 ;;		Nothing
 25760 ;; This function is called by:
 25761 ;;		_printSortTimer
 25762 ;; This function uses a non-reentrant model
 25763 ;;
 25764                           
 25765                           	psect	text99
 25766  005B16                     __ptext99:
 25767                           	opt stack 0
 25768  005B16                     i2_delay_ms:
 25769                           	opt stack 22
 25770                           
 25771                           ;incstack = 0
 25772                           ;i2delay_ms@milliseconds stored from wreg
 25773  005B16  6E02               	movwf	i2delay_ms@milliseconds,c
 25774                           
 25775                           ;sort.c: 668: while(milliseconds > 0)
 25776  005B18  D008               	goto	i2l9214
 25777  005B1A                     i2l9210:
 25778                           
 25779                           ;sort.c: 669: {
 25780                           ;sort.c: 670: milliseconds--;
 25781  005B1A  0602               	decf	i2delay_ms@milliseconds,f,c
 25782                           
 25783                           ;sort.c: 671: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25784  005B1C  0E0B               	movlw	11
 25785  005B1E  6E01               	movwf	??i2_delay_ms& (0+255),c
 25786  005B20  0E48               	movlw	72
 25787  005B22                     i2u1154_47:
 25788  005B22  2EE8               	decfsz	wreg,f,c
 25789  005B24  D7FE               	bra	i2u1154_47
 25790  005B26  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25791  005B28  D7FC               	bra	i2u1154_47
 25792  005B2A                     i2l9214:
 25793  005B2A  5002               	movf	i2delay_ms@milliseconds,w,c
 25794  005B2C  B4D8               	btfsc	status,2,c
 25795  005B2E  0012               	return	
 25796  005B30  D7F4               	goto	i2l9210
 25797  005B32                     __end_ofi2_delay_ms:
 25798                           	opt stack 0
 25799                           pclatu	equ	0xFFB
 25800                           pclath	equ	0xFFA
 25801                           tblptru	equ	0xFF8
 25802                           tblptrh	equ	0xFF7
 25803                           tblptrl	equ	0xFF6
 25804                           tablat	equ	0xFF5
 25805                           prodh	equ	0xFF4
 25806                           prodl	equ	0xFF3
 25807                           intcon	equ	0xFF2
 25808                           intcon2	equ	0xFF1
 25809                           intcon3	equ	0xFF0
 25810                           indf0	equ	0xFEF
 25811                           postinc0	equ	0xFEE
 25812                           fsr0h	equ	0xFEA
 25813                           fsr0l	equ	0xFE9
 25814                           wreg	equ	0xFE8
 25815                           postdec1	equ	0xFE5
 25816                           fsr1h	equ	0xFE2
 25817                           fsr1l	equ	0xFE1
 25818                           indf2	equ	0xFDF
 25819                           postinc2	equ	0xFDE
 25820                           postdec2	equ	0xFDD
 25821                           fsr2h	equ	0xFDA
 25822                           fsr2l	equ	0xFD9
 25823                           status	equ	0xFD8
 25824                           pclatu	equ	0xFFB
 25825                           pclath	equ	0xFFA
 25826                           tblptru	equ	0xFF8
 25827                           tblptrh	equ	0xFF7
 25828                           tblptrl	equ	0xFF6
 25829                           tablat	equ	0xFF5
 25830                           prodh	equ	0xFF4
 25831                           prodl	equ	0xFF3
 25832                           intcon	equ	0xFF2
 25833                           intcon2	equ	0xFF1
 25834                           intcon3	equ	0xFF0
 25835                           indf0	equ	0xFEF
 25836                           postinc0	equ	0xFEE
 25837                           fsr0h	equ	0xFEA
 25838                           fsr0l	equ	0xFE9
 25839                           wreg	equ	0xFE8
 25840                           postdec1	equ	0xFE5
 25841                           fsr1h	equ	0xFE2
 25842                           fsr1l	equ	0xFE1
 25843                           indf2	equ	0xFDF
 25844                           postinc2	equ	0xFDE
 25845                           postdec2	equ	0xFDD
 25846                           fsr2h	equ	0xFDA
 25847                           fsr2l	equ	0xFD9
 25848                           status	equ	0xFD8
 25849                           
 25850                           	psect	rparam
 25851  0000                     pclatu	equ	0xFFB
 25852                           pclath	equ	0xFFA
 25853                           tblptru	equ	0xFF8
 25854                           tblptrh	equ	0xFF7
 25855                           tblptrl	equ	0xFF6
 25856                           tablat	equ	0xFF5
 25857                           prodh	equ	0xFF4
 25858                           prodl	equ	0xFF3
 25859                           intcon	equ	0xFF2
 25860                           intcon2	equ	0xFF1
 25861                           intcon3	equ	0xFF0
 25862                           indf0	equ	0xFEF
 25863                           postinc0	equ	0xFEE
 25864                           fsr0h	equ	0xFEA
 25865                           fsr0l	equ	0xFE9
 25866                           wreg	equ	0xFE8
 25867                           postdec1	equ	0xFE5
 25868                           fsr1h	equ	0xFE2
 25869                           fsr1l	equ	0xFE1
 25870                           indf2	equ	0xFDF
 25871                           postinc2	equ	0xFDE
 25872                           postdec2	equ	0xFDD
 25873                           fsr2h	equ	0xFDA
 25874                           fsr2l	equ	0xFD9
 25875                           status	equ	0xFD8
 25876                           
 25877                           	psect	temp
 25878  00007E                     btemp:
 25879                           	opt stack 0
 25880  00007E                     	ds	1
 25881  0000                     int$flags	set	btemp
 25882                           pclatu	equ	0xFFB
 25883                           pclath	equ	0xFFA
 25884                           tblptru	equ	0xFF8
 25885                           tblptrh	equ	0xFF7
 25886                           tblptrl	equ	0xFF6
 25887                           tablat	equ	0xFF5
 25888                           prodh	equ	0xFF4
 25889                           prodl	equ	0xFF3
 25890                           intcon	equ	0xFF2
 25891                           intcon2	equ	0xFF1
 25892                           intcon3	equ	0xFF0
 25893                           indf0	equ	0xFEF
 25894                           postinc0	equ	0xFEE
 25895                           fsr0h	equ	0xFEA
 25896                           fsr0l	equ	0xFE9
 25897                           wreg	equ	0xFE8
 25898                           postdec1	equ	0xFE5
 25899                           fsr1h	equ	0xFE2
 25900                           fsr1l	equ	0xFE1
 25901                           indf2	equ	0xFDF
 25902                           postinc2	equ	0xFDE
 25903                           postdec2	equ	0xFDD
 25904                           fsr2h	equ	0xFDA
 25905                           fsr2l	equ	0xFD9
 25906                           status	equ	0xFD8


Data Sizes:
    Strings     1370
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_132(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_131(CODE[18]), STR_130(CODE[18]), STR_129(CODE[17]), STR_128(CODE[17]), 
		 -> STR_127(CODE[18]), STR_126(CODE[18]), STR_125(CODE[18]), STR_124(CODE[18]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[17]), STR_120(CODE[17]), 
		 -> STR_119(CODE[17]), STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[18]), STR_112(CODE[17]), 
		 -> STR_111(CODE[15]), STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[17]), 
		 -> STR_107(CODE[17]), STR_106(CODE[17]), STR_105(CODE[16]), STR_104(CODE[17]), 
		 -> STR_103(CODE[17]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[15]), STR_97(CODE[11]), STR_96(CODE[17]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[14]), STR_92(CODE[15]), 
		 -> STR_91(CODE[14]), STR_90(CODE[10]), STR_89(CODE[9]), STR_88(CODE[9]), 
		 -> STR_87(CODE[10]), STR_86(CODE[10]), STR_85(CODE[16]), STR_84(CODE[15]), 
		 -> STR_83(CODE[3]), STR_82(CODE[15]), STR_81(CODE[13]), STR_80(CODE[14]), 
		 -> STR_79(CODE[8]), STR_78(CODE[14]), STR_77(CODE[15]), STR_76(CODE[12]), 
		 -> STR_75(CODE[14]), STR_74(CODE[17]), STR_73(CODE[14]), STR_72(CODE[15]), 
		 -> STR_71(CODE[17]), STR_70(CODE[17]), STR_69(CODE[7]), STR_68(CODE[21]), 
		 -> STR_67(CODE[13]), STR_66(CODE[11]), STR_65(CODE[8]), STR_64(CODE[18]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  240779
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   37003
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18234
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  21    21      0   13376
                                             43 BANK0     21    21      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11670
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10923
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23736
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22822
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47608
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13595
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9227
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9227
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  119649
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9339
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9296
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9227
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15863
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9227
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9227
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9227
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        16    16      0    9592
                                             43 BANK0     16    16      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   20013
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9411
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9092
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 23:40:57 2017

                                    _i 013D                     i2_I2C_Master_Start 5BF2  
                   i2_I2C_Master_Write 5BC8                                     l66 5B60  
                                   _ID 1BBA                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 55DA                                    ID@i 00B0  
                                  ID@n 00BE                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 00E2                                    l501 48EE  
                                  l183 00E6                                    l620 2E98  
                                  l188 0102                                    l804 1578  
                                  l821 1600                                    l910 4DEE  
                                  l831 1774                                    l823 1626  
                                  l815 1728                                    l807 150C  
                                  l824 164E                                    l825 1676  
                                  l809 1538                                    l826 169E  
                                  l851 1EEC                                    l827 16C8  
                                  l852 1F06                                    l836 1C7E  
                                  l853 1F44                                    l854 1F2A  
                                  l776 125E                                    l858 1FDC  
                                  l794 1424                                    l786 1328  
                                  l797 1472                                    l789 1376  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3DF0  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 43EA                                    _log 00F4  
                                  _sel 00FD                                    _var 0145  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3F74  
                  _log_count_can_w_lab 0141                             i2_delay_ms 5B16  
      __end_of_change_state_to_menu_11 580A        __end_of_change_state_to_menu_12 564A  
      __end_of_change_state_to_menu_22 5612        __end_of_change_state_to_menu_23 57DA  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 58FA        __end_of_change_state_to_logs_12 58CA  
      __end_of_change_state_to_logs_22 589A        __end_of_change_state_to_logs_23 5956  
      __end_of_change_state_to_logs_33 586A        __end_of_change_state_to_logs_34 583A  
                                 ??_ID 00AB                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1103 450A                                   l1116 5B42  
                                 l1221 434A                                   l1125 40A2  
                                 l1313 0EAC                                   l1241 4710  
                                 l1330 111C                                   l1250 2B42  
                                 l1218 432A                                   l1244 4714  
                                 l1325 1046                                   l1253 2B46  
                                 l1510 19C8                                   l1343 532A  
                                 l1416 4E84                                   l1433 3EC6  
                                 l1409 4E74                                   l1283 09EA  
                                 l1364 2768                                   l1276 0940  
                                 l1381 26F0                                   l1373 2654  
                                 l1349 533A                                   l1453 44DA  
                                 l1438 3F12                                   l1470 52CE  
                                 l1286 0A50                                   l1462 44D4  
                                 l1454 449C                                   l1439 3F2C  
                                 l1287 0A9E                                   l1279 0944  
                                 l1288 0B04                                   l1385 2748  
                                 l1377 2698                                   l1289 0B52  
                                 l1387 2762                                   l1476 52DE  
                                 ?_arm 0001                                   l1904 4B3A  
                                 l1774 42B0                                   l1957 4F9A  
                                 l1967 5220                                   l7130 2F1A  
                                 l7122 2EA2                                   l7140 2FB0  
                                 l7132 2F38                                   l7124 2EC0  
                                 l7116 2E16                                   l8100 1EB2  
                                 l7142 2FCE                                   l7134 2F56  
                                 l7126 2EDE                                   l7150 3068  
                                 l7302 4B70                                   l7144 2FEC  
                                 l7136 2F74                                   l7128 2EFC  
                                 l8120 1F14                                   l6514 5920  
                                 l7138 2F92                                   l8018 1C32  
                                 l7402 4FC8                                   l6532 59CE  
                                 l6700 17F4                                   l9100 3E64  
                                 l7148 300A                                   l8108 1ED6  
                                 l8036 1CA8                                   l7308 4BE6  
                                 l6550 4F56                                   l8310 2DDA  
                                 l8118 1F0A                                   l7414 4FF2  
                                 _ADIE 007CEE                                   l6560 4F8C  
                                 l6552 4F5C                                   l6720 18B4  
                                 l9120 3EC8                                   l9104 3E94  
                                 l7360 45B8                                   l7344 4576  
                                 l7352 4598                                   l8160 4602  
                                 l8144 1F9A                                   l8152 1FDE  
                                 l8048 1CF4                                   l6570 51E8  
                                 l6802 1B1C                                   l6730 192C  
                                 l9130 3EFC                                   l9122 3ED8  
                                 l6490 5996                                   l8306 2DA4  
                                 l7450 4A2E                                   l7442 4A04  
                                 l8162 461C                                   l8170 467E  
                                 l7370 59F4                                   l8082 1E68  
                                 l8058 1DC0                                   l7418 500A  
                                 l6548 4F4A                                   l6572 51EE  
                                 l6812 1B8E                                   l6732 1944  
                                 l6716 18A2                                   l6708 1870  
                                 l9140 3F2E                                   l6492 59A8  
                                 l7460 4A64                                   l7452 4A34  
                                 l7436 49EE                                   l6820 5660  
                                 l9300 01F8                                   l7356 45AE  
                                 l7348 4580                                   l8164 4636  
                                 l6806 1B30                                   l6726 191A  
                                 l6718 18AE                                   l6742 198E  
                                 l6814 1B9A                                   l9142 3F3E  
                                 l8502 0D08                                   l8350 09AE  
                                 l8238 2B96                                   l6830 4D7A  
                                 l6910 4ACE                                   l8158 45E8  
                                 l7366 59DE                                   l8094 1EA0  
                                 l8086 1E78                                   l6576 5212  
                                 l6568 51DC                                   l6808 1B36  
                                 l6760 1A20                                   l6736 1970  
                                 l6728 1926                                   l9128 3EF2  
                                 l8440 0BD8                                   l8360 09D6  
                                 l8352 09B4                                   l8256 2C4E  
                                 l7448 4A22                                   l7464 4A72  
                                 l9160 4C22                                   l9400 0552  
                                 l6920 4B28                                   l6912 4AD4  
                                 l8168 4650                                   l7480 5536  
                                 l6754 1A00                                   l6738 1988  
                                 l6690 17B6                                   l9146 3F6E  
                                 l8602 0F16                                   l8522 0D7C  
                                 l8514 0D5A                                   l8506 0D20  
                                 l8450 0C00                                   l8274 2CE0  
                                 l6826 4D64                                   l6818 5654  
                                 l9322 026C                                   l9314 024A  
                                 l8098 1EB0                                   l7298 4B5A  
                                 l6772 1A5C                                   l6684 1790  
                                 l6860 4E0C                                   l8620 0F78  
                                 l8612 0F3E                                   l8604 0F1C  
                                 l8540 0DDE                                   l8532 0DA4  
                                 l8524 0D82                                   l8444 0BF0  
                                 l8436 0BCE                                   l8356 09BE  
                                 l8268 2C9E                                   l7468 4A86  
                                 l9180 4C8E                                   l9172 4C6C  
                                 l9164 4C36                                   l9156 4C12  
                                 l6836 4D9A                                   l9404 055C  
                                 l9332 0288                                   l6908 4ABE  
                                 l7580 4CDA                                   l7492 4808  
                                 l6790 1ADA                                   l6782 1AB6  
                                 l6758 1A1A                                   l6694 17C0  
                                 l6854 4DD2                                   l8630 0FA0  
                                 l8550 0E06                                   l8518 0D64  
                                 l8470 0C74                                   l8462 0C52  
                                 l8454 0C18                                   l8446 0BF6  
                                 l8294 2D5C                                   l8286 2D2C  
                                 l9166 4C42                                   l9318 0254  
                                 l9270 016E                                   l9262 0144  
                                 l9254 0128                                   l7590 4D1C  
                                 l6870 41F2                                   l7398 4FB2  
                                 l7902 14A0                                   l7822 12A2  
                                 l7806 1266                                   l6784 1AC0  
                                 l6688 17A4                                   l8720 1146  
                                 l8704 1106                                   l8624 0F82  
                                 l8608 0F26                                   l8544 0DE8  
                                 l8528 0D8C                                   l8480 0C9C  
                                 l8472 0C7A                                   l9168 4C48  
                                 l9176 4C7A                                   l9512 07BC  
                                 l9432 0644                                   l9408 0574  
                                 l9360 036A                                   l9352 02F2  
                                 l9336 02A0                                   l9328 027E  
                                 l9248 00FE                                   l7584 4CF0  
                                 l7488 47C8                                   l7912 14E6  
                                 l6778 1A7E                                   l8730 116E  
                                 l8714 1136                                   l8650 1006  
                                 l8634 0FAA                                   l8570 0E6C  
                                 l8554 0E10                                   l8466 0C5C  
                                 l8298 2D92                                   l9530 0808  
                                 l9522 07E6                                   l9450 0690  
                                 l9442 066E                                   l9370 0400  
                                 l9362 0388                                   l9354 0310  
                                 l9290 01D2                                   l9266 015C  
                                 l9258 013A                                   l6882 4264  
                                 l6874 4206                                   l7498 484C  
                                 l7922 152C                                   l7914 14F0  
                                 l7906 14C6                                   l7842 1312  
                                 l6796 1AF6                                   l8724 115E  
                                 l8716 113C                                   l8660 102E  
                                 l8628 0F9A                                   l8580 0E94  
                                 l8548 0E00                                   l8492 0CE0  
                                 l8476 0C84                                   l9516 07D4  
                                 l9508 07B2                                   l9436 065C  
                                 l9428 063A                                   l9372 041E  
                                 l9364 03A6                                   l9356 032E  
                                 l9380 0478                                   l9284 01C2  
                                 l6892 42BA                                   l6884 4294  
                                 l6876 4214                                   l7940 15DC  
                                 l7852 1356                                   l6798 1B02  
                                 l8830 4EAC                                   l8734 1186  
                                 l8726 1164                                   l8654 101E  
                                 l8646 0FFC                                   l8638 0FC2  
                                 l8574 0E84                                   l8566 0E62  
                                 l8558 0E28                                   l9526 07F0  
                                 l9446 0678                                   l9390 0528  
                                 l9374 043C                                   l9366 03C4  
                                 l9358 034C                                   l9382 04DC  
                                 l9294 01EA                                   l9286 01C8  
                                 l6886 42A2                                   l6878 4244  
                                 l7918 1510                                   l7854 1360  
                                 l8904 259E                                   l8680 1096  
                                 l8656 1024                                   l8576 0E8A  
                                 l8496 0CF8                                   l8488 0CD6  
                                 l9552 0870                                   l9472 0700  
                                 l9376 045A                                   l9368 03E2  
                                 l7880 140E                                   l7864 13A4  
                                 l8922 2600                                   l8690 10BE  
                                 l8594 0EF4                                   l8498 0CFE  
                                 l8770 448E                                   l9570 08BC  
                                 l9562 089A                                   l9490 074C  
                                 l9482 072A                                   l9394 0540  
                                 l9386 051E                                   l6898 42D6  
                                 l7970 16DE                                   l7890 1452  
                                 l8932 263E                                   l8924 2616  
                                 l8916 25E0                                   l8684 10A0  
                                 l8780 44C6                                   l8764 445E  
                                 l9556 0888                                   l9548 0866  
                                 l9476 0718                                   l9468 06F6  
                                 l7972 1714                                   l7892 145C  
                                 l7796 121C                                   l8942 266E  
                                 l8694 10C8                                   l8598 0EFE  
                                 l9902 438C                                   l9566 08A4  
                                 l9486 0734                                   l9574 08C8  
                                 l7990 1768                                   l8960 26DA  
                                 l8928 262A                                   l8688 10B8  
                                 l8768 4484                                   l8776 44A2  
                                 l9904 43DE                                   l9824 3FC0  
                                 l7992 1776                                   l8970 271E  
                                 l8946 2682                                   l8866 2438  
                                 l8698 10E0                                   l8778 44BC  
                                 l9850 405C                                   l9826 3FD4  
                                 l7978 1730                                   l8956 26C6  
                                 l8884 24E8                                   l8974 2732  
                                 l8886 24EE                                   STR_1 FB61  
                                 l9880 4350                                   l9864 42E6  
                                 STR_2 FF29                                   STR_3 FB4F  
                                 l9890 436E                                   l9882 4356  
                                 STR_4 FE4C                                   STR_5 FB4F  
                                 l9892 4374                                   l9884 435C  
                                 STR_6 FDE8                                   STR_7 FFC3  
                                 l9894 437A                                   l9886 4362  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 l9896 4380                                   l9888 4368  
                                 l9898 4386                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5200 54CC  
                                 u5250 18EE                                   u5170 547E  
                                 _PEIE 007F96                                   u5180 5480  
                                 u5190 54CA                                   u5191 54C6  
                                 u8000 2530                                   u7120 2BD8  
                                 u7040 1FA6                                   u5257 18E4  
                                 u5290 1966                                   u8010 2532  
                                 u7130 2BDA                                   u6410 1228  
                                 u8100 260E                                   u7300 0B52  
                                 u7060 1FDC                                   _RCEN 007E2B  
                                 u8110 2626                                   u6430 125E  
                                 u8111 2622                                   u7160 2D80  
                                 u5297 195C                                   u8050 25C8  
                                 u7058 1FAA                                   u7260 09EA  
                                 u6700 1572                                   u6428 122C  
                                 u7190 2DC8                                   u7280 0A9E  
                                 u7168 2D84                                   u8321 3EBC  
                                 i2l66 5B74                                   u8330 3EBE  
                                 u4970 591E                                   u6810 1C66  
                                 u8260 3E26                                   u8068 25CC  
                                 u6740 15FE                                   u8430 3F5C  
                                 u8270 3E82                                   u7198 2DCC  
                                 u6670 154A                                   u5960 2E98  
                                 u6840 1CDC                                   u5945 525A  
                                 u6818 1C6A                                   u6690 1570  
                                 u8371 3EE8                                   u8380 3EEA  
                                 u8268 3E2A                                   u6860 1D40  
                                 u8438 3F60                                   u8278 3E86  
                                 u7830 44B2                                   u6870 1D42  
                                 u7840 44B4                                   u6880 1D94  
                                 u6848 1CE0                                   u6688 154E  
                                 u9450 40A2                                   u6890 1D96  
                                 u7780 447A                                   u7790 447C  
                                 u7970 247A                                   u7980 247C  
                                 u9907 13DC                                   u9917 142E  
                                 u9837 11AC                                   u9927 1440  
                                 u9847 12D0                                   u9937 147C  
                                 u9857 1332                                   u9947 148E  
                                 u9867 1344                                   u9957 14AE  
                                 u9877 1380                                   u9967 1592  
                                 u9887 1392                                   u9977 15CA  
                                 u9897 13B2                                   u9987 160A  
                                 _RSEN 007E29                                   u9997 161C  
                          _stopSignals 5AFA                                   _Test 42E4  
                                 _back 005B                                   _main 4850  
                                 _down 005D                           ___ftpack@arg 0080  
                                 _keys FA89                           ___ftpack@exp 0083  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5A98                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 5BB2  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3614                            i2_lcdNibble 5342  
                      __end_of_Loading 1782                   __end_of_actuatorTest 118E  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10102 48C0  
                                l10104 48C6                                  l10120 48F0  
                                l10114 48E4                                  l10106 48CC  
                                l10116 48EA                                  l10096 489A  
                                l10098 48B0                   __end_of_EEPROM_write 45D0  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 4A90  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAA4  
                                STR_14 FFD6                                  STR_22 FF92  
                                STR_30 FDF9                                  STR_15 FFD2  
                                STR_23 FF1B                                  STR_31 FDD7  
                                STR_16 FFE2                                  STR_24 FD3E  
                                STR_32 FD1C                                  STR_40 FCD8  
                                STR_17 FFF2                                  STR_25 FE1B  
                                STR_33 FD2D                                  STR_41 FCC7  
                                STR_18 FFF6                                  STR_34 FDC6  
                                STR_50 FDA4                                  STR_42 FD82  
                                STR_26 FD4F                                  STR_43 FD82  
                                STR_35 FDC6                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE0A  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD60                                  STR_36 FD0B  
                                STR_44 FCE9                        __end_of___awmod 4C98  
                                STR_45 FCD8                                  STR_37 FD1C  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FB4C                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDB5  
                                STR_46 FD93                                  STR_70 FC83  
                                STR_47 FD93                                  STR_55 FFFA  
                                STR_63 FAA4                                  STR_39 FD71  
                                STR_71 FC94                                  STR_56 FFDE  
                                STR_80 FF0D                                  STR_72 FED4  
                                STR_48 FCFA                                  STR_64 FB3D  
                                STR_49 FCE9                                  STR_57 FFD6  
                                STR_65 FFAD                                  STR_81 FF37  
                                STR_73 FF0D                                  STR_58 FFD2  
                                STR_90 FF88                                  STR_66 FF73  
                                STR_82 FE5C                                  STR_74 FC50  
                                STR_59 FFE2                                  STR_91 FF0D  
                                STR_83 FB4C                                  STR_67 FF44  
                                STR_75 FEF1                                  STR_76 FF51  
                                STR_92 FEC5                                  STR_84 FE89  
                                STR_68 FABC                                  STR_69 FFBC  
                                STR_93 FEE3                                  STR_77 FEB6  
                                STR_85 FE2C                                  STR_86 FF7E  
                                STR_78 FEFF                                  STR_94 FC61  
                                STR_87 FF7E                                  STR_79 FFA5  
                                STR_95 FF5D                                  STR_88 FF9C  
                                STR_96 FC72                                  STR_89 FF9C  
                                STR_97 FF68                                  STR_98 FEA7  
                                STR_99 FBC8           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4B4C  
         i2updateServoPosition@time_us 0001                                  u10007 1630  
                                u10017 1644                                  u10107 56D4  
                                u10027 1658                                  u10117 4FD0  
                                u10037 166C                                  u11007 112A  
                                u10207 1F5E                                  u10127 1BD4  
                                u10047 1680                                  u11017 114E  
                                u10217 59EA                                  u10137 1C8E  
                                u10057 1694                                  u11107 24DC  
                                u11027 1176                                  u10307 0184  
                                u10227 452C                                  u10147 1DD6  
                                u10067 16A8                                  u11117 2546  
                                u11037 4E3E                                  u10317 01DA  
                                u10237 4588                                  u10157 1E32  
                                u10077 16BC                                  u11207 2756  
                                u11127 2592                                  u11047 4E8E  
                                u10407 0680                                  u10327 0206  
                                u10247 45C0                                  u10167 1EF0  
                                u10087 16D2                                  _T0CON 000FD5  
                                u11217 599E                                  u11137 2658  
                                u11057 4EA2                                  u10417 06AA  
                                u10337 025C                                  u10257 54DC  
                                u10177 1EFA                                  u10097 174A  
                                u11307 21F4                                  u11227 1FF8  
                                u11147 2660                                  u11067 5298  
                                u10507 42F4                                  u10427 0708  
                                u10347 0290                                  u10267 5510  
                                u10187 1F2E                        ___awdiv@divisor 0088  
                                u11317 2228                                  u11237 2044  
                                u11157 26A2                                  u11077 52F4  
                                u10517 2AF2                                  u10437 073C  
                                u10357 02BA                                  u10277 002A  
                                u10197 1F38                                  u11407 4F12  
                                u11327 225A                                  u11247 2090  
                                u11167 26B4                                  u11087 2416  
                                u10607 2CF2                                  u10527 2B36  
                                u10447 0766                                  u10367 0530  
                                u10287 0114                                  _T1CON 000FCD  
                                u11417 3DFE                                  u11337 22A6  
                                u11257 20C4                                  u11177 26FA  
                                u11097 2490                                  u10617 2D20  
                                u10537 2B58                                  u10457 07C4  
                                u10377 0564                                  u10297 014C  
                                u11427 3F16                                  u11347 22DA  
                                u11267 20F6                                  u11187 270C  
                                u10707 09C6                                  u10627 2D3A  
                                u10547 2B86                                  u10467 07F8  
                                u10387 058E                                  u11437 3F20  
                                u11357 230C                                  u11277 2142  
                                u11197 274C                                  u10717 09FA  
                                u10637 43F8                                  u10557 2BEE  
                                u10477 0822                                  u10397 064C  
                                u11447 511A                                  u11367 2358  
                                u11287 2176                                  u10807 0C64  
                                u10727 0A60                                  u10647 46C0  
                                u10567 2C42                                  u10487 0878  
                                _T2CON 000FCA                                  u11457 5124  
                                u11377 238C                                  u11297 21A8  
                                u10817 0C8C                                  u10737 0A7E  
                                u10657 4704                                  u10577 2C62  
                                u10497 08AC                                  u11467 5150  
                                u11387 23BE                                  u10907 0F06  
                                u10827 0CE8                                  u10747 0AAE  
                                u10667 4726                                  u10587 2C90  
                                u11477 515A                                  u11397 4EF6  
                                u10917 0F2E                                  u10837 0D10  
                                u10757 0B14                                  u10677 08F0  
                                u10597 2CD4                                  u10927 0F8A  
                                u10847 0D6C                                  u10767 0B32  
                                u10687 0934                                  _T3CON 000FB1  
                                u10937 0FB2                                  u10857 0D94  
                                u10777 0B62                                  u10697 0956  
                                u10947 100E                                  u10867 0DF0  
                                u10787 0BE0                                  u10957 1036  
                                u10877 0E18                                  u10797 0C08  
                                u10967 1058                                  u10887 0E74  
                                u10977 10A8                                  u10897 0E9C  
                                u10987 10D0                                  u10997 1120  
                      __end_of___lwdiv 4FA4                        __end_of___lwmod 522A  
                                i2l263 3368                                  i2l620 36A2  
                                i2l910 50BE                                  i2l937 55D6  
                      ___awdiv@counter 008A                                  i2l889 353A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1FEA                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5BA6                        __end_of_handler 3A3C  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 59AE  
                      __end_of_initLCD 551A                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                        ___awtoft@sign 0091                                  _getIR 4FA4  
                      __end_of_loadRTC 4D24                        __end_of_readMAG 54D4  
                      __end_of_dpowers FAA4                                  _first 0139  
                                _enter 005F                                  arm@on 00AC  
                      __end_of_isdigit 59D8                                  _input 007D  
                        ___ftpack@sign 0084                                  _putch 5B86  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5A4E                       __end_ofi2_getRTC 5088  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 2AE4                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 571A  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1230 0047                   __size_of_EEPROM_read 0018  
                      __initialization 53EE                           __end_of_Test 43EA  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4914  
                         __end_of_keys FA9A                           __end_of_sort 5ABA  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3DF0  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00BA                                 ID@res2 00BC  
           __size_of_updateServoStates 01C8                                 ID@time 00AE  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FBB7  
                               STR_101 FB95                                 STR_110 FE7A  
                               STR_102 FC1D                                 STR_111 FE6B  
                               STR_103 FC2E                                 STR_112 FCB6  
                               STR_120 FBEA                                 STR_104 FB73  
                               STR_105 FE3C                                 STR_121 FC3F  
                               STR_113 FAD1                                 STR_130 FAD1  
                               STR_114 FBD9                                 STR_106 FBA6  
                               STR_122 FAF5                                 _ADRESH 000FC4  
                               STR_115 FC0C                                 STR_107 FB84  
                               STR_131 FB19                                 STR_123 FAE3  
                               STR_108 FBA6                                 STR_116 FC0C  
                               STR_132 FFB5                                 STR_124 FB2B  
                               _EEADRH 000FAA                                 STR_109 FE98  
                               STR_117 FBFB                                 STR_125 FB07  
                               STR_118 FC0C                                 STR_126 FB2B  
                               _ADRESL 000FC3                                 STR_119 FBFB  
                               STR_127 FB2B                                 STR_128 FBEA  
                               STR_129 FCA5                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                       __end_of___awtoft 555E  
                               ?_putch 0001                       __end_of___ftpack 42E4  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 577A              i2_change_state_to_menu_22 574A  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1040 3A00  
                               i2l1116 5B58                                 i2l1029 3938  
                               i2l1038 39E0                                 i2l1510 2950  
                               i2l7002 28B8                                 i2l7012 2904  
                               i2l7004 28C2                                 i2l1957 53E4  
                               i2l7030 297E                                 i2l7014 2916  
                               i2l7006 28C8                                 i2l1967 5596  
                               i2l7008 28DA                                 i2l7034 2996  
                               i2l7018 291A                                 i2l7060 2A12  
                               i2l7036 299A                                 i2l7054 29E6  
                               i2l6600 5A6E                                 i2l7072 2A3E  
                               i2l7048 29CC                                 i2l7074 2A46  
                               i2l7082 2A6C                                 i2l7066 2A28  
                               i2l7058 2A0A                                 i2l7090 2AC8  
                               i2l7084 2A72                                 i2l7078 2A5A  
                               i2l7270 418C                                 i2l7094 56F2  
                               i2l6624 5AF2                                 i2l7088 2AC0  
                               i2l7096 56FA                                 i2l9210 5B1A  
                               i2l6634 53B2                                 i2l7266 417C  
                               i2l9202 50D8                                 i2l6636 53BA  
                               i2l7700 3B56                                 i2l7540 36C2  
                               i2l7532 3640                                 i2l9214 5B2A  
                               i2l6646 53DA                                 i2l6638 53BE  
                               i2l6662 558C                                 i2l6654 556C  
                               i2l7278 41C0                                 i2l7710 3B74  
                               i2l7550 3730                                 i2l7542 36D8  
                               i2l6656 5574                                 i2l7712 3B78  
                               i2l7560 379E                                 i2l7552 3746  
                               i2l7544 36EE                                 i2l6658 5578  
                               i2l7730 3BA8                                 i2l7706 3B60  
                               i2l7642 3A7A                                 i2l7634 3A60  
                               i2l7554 375C                                 i2l7546 3704  
                               i2l7538 36AC                                 i2l6932 504E  
                               i2l7724 3B9A                                 i2l7716 3B82  
                               i2l7660 3AB8                                 i2l7644 3A8A  
                               i2l7652 3A98                                 i2l7556 3772  
                               i2l7548 371A                                 i2l7564 37B4  
                               i2l6942 5078                                 i2l7742 3BDE  
                               i2l7734 3BBA                                 i2l7662 3ABE  
                               i2l7670 3AD0                                 i2l7646 3A8E  
                               i2l7558 3788                                 i2l7566 380E  
                               i2l6936 505E                                 i2l6960 2780  
                               i2l7664 3AC4                                 i2l7656 3AAC  
                               i2l7752 3BFA                                 i2l6970 27A4  
                               i2l7746 3BF0                                 i2l7738 3BCC  
                               i2l7690 3B2C                                 i2l7682 3B14  
                               i2l7666 3ACA                                 i2l7658 3AB2  
                               i2l9602 310C                                 i2l6964 2790  
                               i2l9196 50A6                                 i2l6966 279E  
                               i2l9710 329A                                 i2l9702 327E  
                               i2l9630 3162                                 i2l9622 3144  
                               i2l9614 3128                                 i2l9606 311A  
                               i2l6992 2860                                 i2l6984 2838  
                               i2l6976 27D6                                 i2l7696 3B3A  
                               i2l6994 286A                                 i2l9730 32F0  
                               i2l9722 32CC                                 i2l9714 32B0  
                               i2l9706 328C                                 i2l9650 31B0  
                               i2l9642 318C                                 i2l9634 3170  
                               i2l9626 3154                                 i2l9618 3136  
                               i2l6996 286E                                 i2l9726 32DA  
                               i2l9718 32BE                                 i2l9670 31FE  
                               i2l9662 31DA                                 i2l9654 31BE  
                               i2l9646 319A                                 i2l9638 317E  
                               i2l9590 30E2                                 i2l9736 32FE  
                               i2l9914 3378                                 i2l9690 324C  
                               i2l9682 3230                                 i2l9674 320C  
                               i2l9666 31F0                                 i2l9658 31CC  
                               i2l9594 30F0                                 i2l9924 33E2  
                               i2l9588 30DC                                 i2l9918 3388  
                               i2l9694 325A                                 i2l9686 323E  
                               i2l9678 321A                                 i2l9598 30FE  
                               i2l9960 3570                                 i2l9936 34B0  
                               i2l9962 3576                                 i2l9698 3270  
                               i2l9948 3508                                 i2l9956 353C  
                               i2l9982 3C46                                 i2l9994 3C7C  
                               i2l9986 3C5C                _f_most_recent_sort_time 0137  
                               i2l9988 3C66                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5A00  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5A98                                 ___ftge 4788  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 46B2                                 ___wmul 5680  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 56B6                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 4D24  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5ADC                                 _initUI 571A  
                               _readIR 543C                                 _logRun 3F74  
                               getIR@i 0087                                 clear_0 5414  
                               clear_1 5420                                 clear_2 542C  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestDC 52E6                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1782  
                            ??_handler 004B                __size_of_initGlobalVars 00BE  
                         ?_retrieveLog 0007                                 _strcpy 564A  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 5A28  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5A00  
                          ?_BothServos 0001                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 53EE                       __end_of_printRTC 30AC  
                         __mediumconst FA88                      __end_ofi2___lwmod 55A0  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0065  
                __end_of_algorithmTest 4788                      __end_ofi2_lcdInst 5BBE  
                    __end_ofi2_isdigit 5AFA                             __accesstop 0080  
              __end_of__initialization 5432                          ?_inputHandler 002A  
                           ___ftge@ff1 0092                             ___ftge@ff2 0095  
                _most_recent_sort_time 0069                          ___rparam_used 000001  
                        ?_PlatformTest 0001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                             ___awtoft@c 008E  
                        i2_EEPROM_read 5B4A                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 5BD2                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 5016                            i2printRTC@i 0041  
                        _initSortTimer 4B4C            __end_of_updateServoPosition 4E30  
                        __end_of_putch 5B96                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 1FEA  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 006C                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5982          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5956                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 50F8  
                         _EEPROM_write 44E8                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3241 0147               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 4EB4  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03EE  
                    printRTC@RTC_month 00BC                                ?___ftge 0092  
                              _ID$1213 00AD                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                              ?___awtoft 008E  
                            ?___ftpack 0080                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2457 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10000 3C92                                i2l10002 3CA6  
                              i2l10010 3CFA                                i2l10012 3D04  
                              i2l10022 3D42                                i2l10016 3D1C  
                              i2l10008 3CB0                                i2l10042 3DBE  
                              i2l10028 3D68                                i2l10212 39AE  
                              i2l10132 38B6                                i2l10206 3994  
                              i2l10134 38BA                                i2l10142 38CE  
                              i2l10072 55AA                                i2l10216 39B4  
                              i2l10144 38E6                                i2l10074 55B0  
                              i2l10162 390C                                i2l10138 38C6  
                              i2l10148 38F0                                i2l10078 55B6  
                              i2l10238 39FE                                i2l10190 3964  
                              i2l10184 3956                                i2l10700 331C  
                              i2l10710 3B04                                i2l10702 333E  
                              i2l10704 335A                                i2l10708 3AE8  
                              i2l10690 3CE8                                i2l10692 3CF2  
                              i2l10694 3DD6                                i2l10686 3CD4  
                              i2l10696 3DE6                                i2l10688 3CDE  
                            ?_delay_ms 0001                         PlatformTest@on 00B9  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 5BA6  
                            ?_initTime 0080                        _f_loadingNewCan 00F2  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 5164  
                              _Loading 118E            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 49D2  
                              ___awmod 4BF6                             _initServos 4EB4  
                              ___lldiv 4A90                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4F2C  
                              ___lwmod 51C8                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 53EE  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 4914                                _lcdInst 5B96  
                              _handler 0008                                __ptext0 4850  
                              __ptext1 5A98                                __ptext2 118E  
                              __ptext3 4B4C                                __ptext4 4914  
                              __ptext5 56B6                                __ptext6 4FA4  
                              __ptext7 543C                                __ptext8 1BBA  
                              __ptext9 59D8                        __size_of_printf 0438  
                              _readADC 5982                        __size_of_strcpy 0036  
                              _initLCD 54D4                                _cur_can 012B  
                              _loadRTC 4C98                                _readMAG 5488  
                              _dpowers FA9A                     actuatorTest@i_1800 00C0  
                   actuatorTest@i_1801 00C1                     actuatorTest@i_1803 00C2  
                   actuatorTest@i_1804 00C3                     actuatorTest@i_1771 00AE  
                         __size_of_arm 00FE                     actuatorTest@i_1780 00B4  
                   actuatorTest@i_1772 00AF                     actuatorTest@i_1764 00AD  
                   actuatorTest@i_1781 00B5                     actuatorTest@i_1790 00BA  
                   actuatorTest@i_1774 00B0                     actuatorTest@i_1791 00BB  
                   actuatorTest@i_1783 00B6                     actuatorTest@i_1775 00B1  
                   actuatorTest@i_1784 00B7                     actuatorTest@i_1793 00BC  
                   actuatorTest@i_1777 00B2                     actuatorTest@i_1794 00BD  
                   actuatorTest@i_1786 00B8                     actuatorTest@i_1778 00B3  
                   actuatorTest@i_1787 00B9                     actuatorTest@i_1796 00BE  
                   actuatorTest@i_1797 00BF                                _isdigit 59AE  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 45D0  
                 PlatformTest@res_1816 00AF                         __pintcode_body 384A  
                 end_of_initialization 5432                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 384A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1150_47 535C                              i2u1151_47 5366  
                            i2u1152_47 5388                              i2u1153_47 5392  
                            i2u1154_47 5B22                              i2u1148_47 3A80  
                            i2u1149_47 34E2              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5B32                 __end_of_initGlobalVars 49D2  
                           _sensorTest 2AE4                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3C28                           ??_BothServos 00AB  
                __end_of_machineConfig 51C8                   __end_of_PlatformTest 2776  
                           _updateMenu 30AC                      i2_I2C_Master_Read 5A4E  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5B74  
                    i2_I2C_Master_Stop 5BEA                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 528A  
                            i2___lwdiv 539C                              i2___lwmod 555E  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 384A  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5BB2  
                        Loading@i_1183 00B6                          Loading@i_1192 00B8  
                        Loading@i_1194 00BA                          Loading@i_1195 00BC  
                           _total_time 00FA                          Loading@i_1197 00BE  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5ADC  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 23D8  
                  __end_of_EEPROM_read 5B4A                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 4850  
                       __end_of___wmul 56B6                         __end_of_getMAG 56E8  
                       __end_of_getRTC 4DAA                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 574A  
                       __end_of_readIR 5488                         __end_of_logRun 40B8  
                     i2___wmul@product 0005                         __end_of_printf 1BBA  
                         i2printf@flag 0026                         __end_of_strcpy 5680  
            __end_ofi2_I2C_Master_Read 5A74              __end_ofi2_I2C_Master_Wait 5B86  
                         i2printf@prec 001D                    start_initialization 53EE  
            __end_ofi2_I2C_Master_Stop 5BF2                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 52E6                            __end_of_arm 44E8  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1472 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4E30                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1212 00B2  
                             ID@i_1216 00B4                               ID@i_1217 00B6  
                             ID@i_1218 00B8                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                   __size_of_BlockerTest 0184  
                  _printSortTimer$2589 0043                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2094 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 5B32  
                     _I2C_Master_Start 5BE2                     __end_of_PortTestDC 5342  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 5BBE  
                    __size_of_initTime 0022                  i2_updateServoPosition 5088  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FA88                              _lcdNibble 50F8  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 039E  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 46B2  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0430  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5BFA             __end_ofi2_I2C_Master_Write 5BD2  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3A3C                            ??i2_isdigit 0001  
                         _PlatformTest 23D8                           BlockerTest@i 00AC  
                             i2u507_40 5A6C                               _PIR2bits 000FA1  
                      PlatformTest@res 00AD                               i2u625_40 36A2  
                             i2u570_40 289C                               i2u570_47 2892  
                             i2u574_40 28FC                               i2u574_47 28F2  
                             i2u954_40 3512                               i2u956_40 353A  
                             i2u955_48 3514                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 5A28                          lcdNibble@data 0081  
                             i2_getRTC 5016                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2776  
                             i2_strcpy 56E8                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 5402  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5B60                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 05F4  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4BF6                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 57DA             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 5612             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 55DA                _change_state_to_menu_23 57AA  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 58CA  
              _change_state_to_logs_12 589A                _change_state_to_logs_22 586A  
              _change_state_to_logs_23 5928                _change_state_to_logs_33 583A  
              _change_state_to_logs_34 580A                       __size_of___lwmod 0062  
                       readADC@channel 0081                               ___awtoft 551A  
                             ___ftpack 41D8                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3A34  
                      _I2C_Master_Init 522A                       __size_of_readADC 002C  
                      _I2C_Master_Read 58FA                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5B60  
                      _I2C_Master_Stop 5BDA                       __size_of_isdigit 002A  
                             _delay_ms 59D8                         _printSortTimer 336C  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 41D8                               __ptext10 4788  
                             __ptext11 551A                               __ptext20 522A  
                             __ptext12 41D8                               __ptext21 4A90  
                             __ptext13 45D0                               __ptext30 5BDA  
                             __ptext22 5956                               __ptext14 5164  
                             __ptext31 5BE2                               __ptext23 5ABA  
                             __ptext15 3F74                               __ptext40 5488  
                             __ptext32 58FA                               __ptext24 54D4  
                             __ptext16 44E8                               __ptext41 43EA  
                             __ptext33 5B60                               __ptext25 0012  
                             __ptext17 5B32                               __ptext50 5AFA  
                             __ptext42 46B2                               __ptext34 55DA  
                             __ptext26 2DE2                               __ptext18 571A  
                             __ptext51 4EB4                               __ptext43 08D6  
                             __ptext35 5612                               __ptext27 564A  
                             __ptext19 4C98                               __ptext60 5B96  
                             __ptext52 4DAA                               __ptext44 4E30  
                             __ptext36 4BF6                               __ptext28 4D24  
                             __ptext61 50F8                               __ptext53 3DF0  
                             __ptext45 528A                               __ptext37 49D2  
                             __ptext29 5BBE                               __ptext70 574A  
                             __ptext54 1782                               __ptext46 52E6  
                             __ptext38 42E4                               __ptext71 577A  
                             __ptext63 3C28                               __ptext55 5B86  
                             __ptext47 23D8                               __ptext39 2AE4  
                             __ptext80 5A74                               __ptext72 57AA  
                             __ptext64 5088                               __ptext56 59AE  
                             __ptext48 5982                               __ptext81 40B8  
                             __ptext73 57DA                               __ptext65 30AC  
                             __ptext57 5680                               __ptext49 1FEA  
                             __ptext90 539C                               __ptext82 5B4A  
                             __ptext74 580A                               __ptext66 5A00  
                             __ptext58 51C8                               __ptext91 5BB2  
                             __ptext83 55A0                               __ptext75 583A  
                             __ptext67 3614                               __ptext59 4F2C  
                             __ptext92 5342                               __ptext84 336C  
                             __ptext76 5928                               __ptext68 56E8  
                             __ptext93 5016                               __ptext85 2776  
                             __ptext77 586A                               __ptext69 3A3C  
                             __ptext94 5BC8                               __ptext86 5BA6  
                             __ptext78 589A                               __ptext95 5BEA  
                             __ptext87 5ADC                               __ptext79 58CA  
                             __ptext96 5BF2                               __ptext88 5A28  
                             __ptext97 5A4E                               __ptext89 555E  
                             __ptext98 5B74                               __ptext99 5B16  
                             _dispLogs 5A74                          ?_actuatorTest 0001  
                   PlatformTest@i_1820 00B3                     PlatformTest@i_1821 00B5  
                   PlatformTest@i_1822 00B7                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$2094 0002  
                   __end_of_initServos 4F2C                          __size_of_Test 0106  
                        ?_EEPROM_write 00AB                               _initTime 5ABA  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F8  
                  _updateServoPosition 4DAA                 __size_of_machineConfig 0064  
                        ??i2_lcdNibble 0001                               _printRTC 2DE2  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F6                     _f_can_coming_to_ID 0131  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 57AA      __end_ofi2_change_state_to_menu_22 577A  
                     ??_PortTestPusher 00AB                               loadRTC@i 0096  
               __end_of_printSortTimer 3614                              putch@data 0082  
             __end_of_I2C_Master_Start 5BEA                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 5BC8                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E8  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 006D  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 2DE2                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5B16              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 336C  
              __end_of_I2C_Master_Init 528A                __end_of_I2C_Master_Read 5928  
              __end_of_I2C_Master_Wait 5B74                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5BE2                          printRTC@F3231 014B  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                          _retrieveLog 40B8                    __end_ofi2_lcdNibble 539C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 55A0                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 5164                        ___lwmod@counter 008B  
                    _updateServoStates 3C28                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00EE                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
