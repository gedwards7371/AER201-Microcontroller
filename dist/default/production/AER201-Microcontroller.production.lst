

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 09 14:05:18 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   114                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   115  0000                     
   116                           ; Version 1.40
   117                           ; Generated 01/12/2016 GMT
   118                           ; 
   119                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC18F4620 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     
   151                           	psect	idataBANK1
   152  0056A0                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for UI@F3241
   156  0056A0  4D                 	db	77
   157  0056A1  4D                 	db	77
   158  0056A2  4D                 	db	77
   159  0056A3  00                 	db	0
   160                           
   161                           ;initializer for printRTC@F3231
   162  0056A4  4D                 	db	77
   163  0056A5  4D                 	db	77
   164  0056A6  4D                 	db	77
   165  0056A7  00                 	db	0
   166                           
   167                           	psect	mediumconst
   168  00FAA2                     __pmediumconst:
   169                           	opt stack 0
   170  00FAA2  00                 	db	0
   171  00FAA3                     _keys:
   172                           	opt stack 0
   173  00FAA3  31                 	db	49
   174  00FAA4  32                 	db	50
   175  00FAA5  33                 	db	51
   176  00FAA6  41                 	db	65
   177  00FAA7  34                 	db	52
   178  00FAA8  35                 	db	53
   179  00FAA9  36                 	db	54
   180  00FAAA  42                 	db	66
   181  00FAAB  37                 	db	55
   182  00FAAC  38                 	db	56
   183  00FAAD  39                 	db	57
   184  00FAAE  43                 	db	67
   185  00FAAF  2A                 	db	42
   186  00FAB0  30                 	db	48
   187  00FAB1  23                 	db	35
   188  00FAB2  44                 	db	68
   189  00FAB3  00                 	db	0
   190  00FAB4                     __end_of_keys:
   191                           	opt stack 0
   192  00FAB4                     _dpowers:
   193                           	opt stack 0
   194  00FAB4  0001               	dw	1
   195  00FAB6  000A               	dw	10
   196  00FAB8  0064               	dw	100
   197  00FABA  03E8               	dw	1000
   198  00FABC  2710               	dw	10000
   199  00FABE                     __end_of_dpowers:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON0bits	set	4034
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON2	set	4032
   205  0000                     _ADRESH	set	4036
   206  0000                     _ADRESL	set	4035
   207  0000                     _CMCONbits	set	4020
   208  0000                     _CVRCON	set	4021
   209  0000                     _EEADR	set	4009
   210  0000                     _EEADRH	set	4010
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _LATA	set	3977
   216  0000                     _LATAbits	set	3977
   217  0000                     _LATB	set	3978
   218  0000                     _LATBbits	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATCbits	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATDbits	set	3980
   223  0000                     _LATE	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _PR2	set	4043
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T0CON	set	4053
   237  0000                     _T1CON	set	4045
   238  0000                     _T2CON	set	4042
   239  0000                     _T3CON	set	4017
   240  0000                     _TMR0H	set	4055
   241  0000                     _TMR0L	set	4054
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _TMR3H	set	4019
   245  0000                     _TMR3L	set	4018
   246  0000                     _TRISA	set	3986
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISE	set	3990
   251  0000                     _ACKDT	set	32301
   252  0000                     _ACKEN	set	32300
   253  0000                     _ADIE	set	31982
   254  0000                     _INT1IE	set	32643
   255  0000                     _INT1IF	set	32640
   256  0000                     _PEIE	set	32662
   257  0000                     _PEN	set	32298
   258  0000                     _RCEN	set	32299
   259  0000                     _RSEN	set	32297
   260  0000                     _SEN	set	32296
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TMR0IF	set	32658
   263  0000                     _TMR0ON	set	32431
   264  0000                     _TMR1IE	set	31976
   265  0000                     _TMR1IF	set	31984
   266  0000                     _TMR1ON	set	32360
   267  0000                     _TMR2IE	set	31977
   268  0000                     _TMR2IF	set	31985
   269  0000                     _TMR2ON	set	32338
   270  0000                     _TMR3IE	set	32001
   271  0000                     _TMR3IF	set	32009
   272  0000                     _TMR3ON	set	32136
   273  0000                     _TRISC3	set	31907
   274  0000                     _TRISC4	set	31908
   275  0000                     _nRBPU	set	32655
   276  00FABE                     STR_21:
   277  00FABE  25                 	db	37
   278  00FABF  30                 	db	48	;'0'
   279  00FAC0  32                 	db	50	;'2'
   280  00FAC1  64                 	db	100	;'d'
   281  00FAC2  25                 	db	37
   282  00FAC3  73                 	db	115	;'s'
   283  00FAC4  20                 	db	32
   284  00FAC5  7C                 	db	124
   285  00FAC6  20                 	db	32
   286  00FAC7  25                 	db	37
   287  00FAC8  30                 	db	48	;'0'
   288  00FAC9  32                 	db	50	;'2'
   289  00FACA  64                 	db	100	;'d'
   290  00FACB  3A                 	db	58	;':'
   291  00FACC  25                 	db	37
   292  00FACD  30                 	db	48	;'0'
   293  00FACE  32                 	db	50	;'2'
   294  00FACF  64                 	db	100	;'d'
   295  00FAD0  3A                 	db	58	;':'
   296  00FAD1  25                 	db	37
   297  00FAD2  30                 	db	48	;'0'
   298  00FAD3  32                 	db	50	;'2'
   299  00FAD4  64                 	db	100	;'d'
   300  00FAD5  00                 	db	0
   301  00FAD6                     STR_66:
   302  00FAD6  28                 	db	40
   303  00FAD7  64                 	db	100	;'d'
   304  00FAD8  61                 	db	97	;'a'
   305  00FAD9  74                 	db	116	;'t'
   306  00FADA  61                 	db	97	;'a'
   307  00FADB  3A                 	db	58	;':'
   308  00FADC  20                 	db	32
   309  00FADD  25                 	db	37
   310  00FADE  75                 	db	117	;'u'
   311  00FADF  2C                 	db	44
   312  00FAE0  20                 	db	32
   313  00FAE1  61                 	db	97	;'a'
   314  00FAE2  64                 	db	100	;'d'
   315  00FAE3  64                 	db	100	;'d'
   316  00FAE4  72                 	db	114	;'r'
   317  00FAE5  3A                 	db	58	;':'
   318  00FAE6  20                 	db	32
   319  00FAE7  25                 	db	37
   320  00FAE8  75                 	db	117	;'u'
   321  00FAE9  29                 	db	41
   322  00FAEA  00                 	db	0
   323  00FAEB                     STR_111:
   324  00FAEB  44                 	db	68	;'D'
   325  00FAEC  20                 	db	32
   326  00FAED  57                 	db	87	;'W'
   327  00FAEE  49                 	db	73	;'I'
   328  00FAEF  4C                 	db	76	;'L'
   329  00FAF0  4C                 	db	76	;'L'
   330  00FAF1  20                 	db	32
   331  00FAF2  52                 	db	82	;'R'
   332  00FAF3  45                 	db	69	;'E'
   333  00FAF4  54                 	db	84	;'T'
   334  00FAF5  55                 	db	85	;'U'
   335  00FAF6  52                 	db	82	;'R'
   336  00FAF7  4E                 	db	78	;'N'
   337  00FAF8  20                 	db	32
   338  00FAF9  20                 	db	32
   339  00FAFA  20                 	db	32
   340  00FAFB  20                 	db	32
   341  00FAFC  00                 	db	0
   342  00FAFD                     STR_119:
   343  00FAFD  4F                 	db	79	;'O'
   344  00FAFE  54                 	db	84	;'T'
   345  00FAFF  48                 	db	72	;'H'
   346  00FB00  45                 	db	69	;'E'
   347  00FB01  52                 	db	82	;'R'
   348  00FB02  20                 	db	32
   349  00FB03  53                 	db	83	;'S'
   350  00FB04  45                 	db	69	;'E'
   351  00FB05  54                 	db	84	;'T'
   352  00FB06  53                 	db	83	;'S'
   353  00FB07  20                 	db	32
   354  00FB08  52                 	db	82	;'R'
   355  00FB09  41                 	db	65	;'A'
   356  00FB0A  35                 	db	53	;'5'
   357  00FB0B  20                 	db	32
   358  00FB0C  20                 	db	32
   359  00FB0D  20                 	db	32
   360  00FB0E  00                 	db	0
   361  00FB0F                     STR_118:
   362  00FB0F  53                 	db	83	;'S'
   363  00FB10  3A                 	db	58	;':'
   364  00FB11  20                 	db	32
   365  00FB12  44                 	db	68	;'D'
   366  00FB13  20                 	db	32
   367  00FB14  57                 	db	87	;'W'
   368  00FB15  49                 	db	73	;'I'
   369  00FB16  4C                 	db	76	;'L'
   370  00FB17  4C                 	db	76	;'L'
   371  00FB18  20                 	db	32
   372  00FB19  52                 	db	82	;'R'
   373  00FB1A  45                 	db	69	;'E'
   374  00FB1B  54                 	db	84	;'T'
   375  00FB1C  55                 	db	85	;'U'
   376  00FB1D  52                 	db	82	;'R'
   377  00FB1E  4E                 	db	78	;'N'
   378  00FB1F  20                 	db	32
   379  00FB20  00                 	db	0
   380  00FB21                     STR_121:
   381  00FB21  4F                 	db	79	;'O'
   382  00FB22  54                 	db	84	;'T'
   383  00FB23  48                 	db	72	;'H'
   384  00FB24  45                 	db	69	;'E'
   385  00FB25  52                 	db	82	;'R'
   386  00FB26  3A                 	db	58	;':'
   387  00FB27  20                 	db	32
   388  00FB28  43                 	db	67	;'C'
   389  00FB29  41                 	db	65	;'A'
   390  00FB2A  4D                 	db	77	;'M'
   391  00FB2B  20                 	db	32
   392  00FB2C  54                 	db	84	;'T'
   393  00FB2D  4F                 	db	79	;'O'
   394  00FB2E  47                 	db	71	;'G'
   395  00FB2F  47                 	db	71	;'G'
   396  00FB30  4C                 	db	76	;'L'
   397  00FB31  45                 	db	69	;'E'
   398  00FB32  00                 	db	0
   399  00FB33                     STR_127:
   400  00FB33  4F                 	db	79	;'O'
   401  00FB34  54                 	db	84	;'T'
   402  00FB35  48                 	db	72	;'H'
   403  00FB36  45                 	db	69	;'E'
   404  00FB37  52                 	db	82	;'R'
   405  00FB38  20                 	db	32
   406  00FB39  53                 	db	83	;'S'
   407  00FB3A  45                 	db	69	;'E'
   408  00FB3B  54                 	db	84	;'T'
   409  00FB3C  53                 	db	83	;'S'
   410  00FB3D  20                 	db	32
   411  00FB3E  50                 	db	80	;'P'
   412  00FB3F  55                 	db	85	;'U'
   413  00FB40  53                 	db	83	;'S'
   414  00FB41  48                 	db	72	;'H'
   415  00FB42  45                 	db	69	;'E'
   416  00FB43  52                 	db	82	;'R'
   417  00FB44  00                 	db	0
   418  00FB45                     STR_120:
   419  00FB45  44                 	db	68	;'D'
   420  00FB46  3A                 	db	58	;':'
   421  00FB47  20                 	db	32
   422  00FB48  52                 	db	82	;'R'
   423  00FB49  45                 	db	69	;'E'
   424  00FB4A  54                 	db	84	;'T'
   425  00FB4B  7C                 	db	124
   426  00FB4C  32                 	db	50	;'2'
   427  00FB4D  3A                 	db	58	;':'
   428  00FB4E  20                 	db	32
   429  00FB4F  43                 	db	67	;'C'
   430  00FB50  4F                 	db	79	;'O'
   431  00FB51  4E                 	db	78	;'N'
   432  00FB52  44                 	db	68	;'D'
   433  00FB53  20                 	db	32
   434  00FB54  25                 	db	37
   435  00FB55  64                 	db	100	;'d'
   436  00FB56  00                 	db	0
   437  00FB57                     STR_3:
   438  00FB57  2D                 	db	45
   439  00FB58  2D                 	db	45
   440  00FB59  20                 	db	32
   441  00FB5A  4C                 	db	76	;'L'
   442  00FB5B  4F                 	db	79	;'O'
   443  00FB5C  47                 	db	71	;'G'
   444  00FB5D  20                 	db	32
   445  00FB5E  25                 	db	37
   446  00FB5F  32                 	db	50	;'2'
   447  00FB60  64                 	db	100	;'d'
   448  00FB61  20                 	db	32
   449  00FB62  48                 	db	72	;'H'
   450  00FB63  45                 	db	69	;'E'
   451  00FB64  52                 	db	82	;'R'
   452  00FB65  45                 	db	69	;'E'
   453  00FB66  2D                 	db	45
   454  00FB67  2D                 	db	45
   455  00FB68  00                 	db	0
   456  00FB69                     STR_1:
   457  00FB69  52                 	db	82	;'R'
   458  00FB6A  45                 	db	69	;'E'
   459  00FB6B  53                 	db	83	;'S'
   460  00FB6C  55                 	db	85	;'U'
   461  00FB6D  4C                 	db	76	;'L'
   462  00FB6E  54                 	db	84	;'T'
   463  00FB6F  53                 	db	83	;'S'
   464  00FB70  20                 	db	32
   465  00FB71  49                 	db	73	;'I'
   466  00FB72  4E                 	db	78	;'N'
   467  00FB73  20                 	db	32
   468  00FB74  4C                 	db	76	;'L'
   469  00FB75  4F                 	db	79	;'O'
   470  00FB76  47                 	db	71	;'G'
   471  00FB77  20                 	db	32
   472  00FB78  25                 	db	37
   473  00FB79  64                 	db	100	;'d'
   474  00FB7A  00                 	db	0
   475  00FB7B                     STR_102:
   476  00FB7B  4D                 	db	77	;'M'
   477  00FB7C  49                 	db	73	;'I'
   478  00FB7D  44                 	db	68	;'D'
   479  00FB7E  20                 	db	32
   480  00FB7F  2D                 	db	45
   481  00FB80  2D                 	db	45
   482  00FB81  20                 	db	32
   483  00FB82  32                 	db	50	;'2'
   484  00FB83  73                 	db	115	;'s'
   485  00FB84  20                 	db	32
   486  00FB85  20                 	db	32
   487  00FB86  20                 	db	32
   488  00FB87  20                 	db	32
   489  00FB88  20                 	db	32
   490  00FB89  20                 	db	32
   491  00FB8A  20                 	db	32
   492  00FB8B  00                 	db	0
   493  00FB8C                     STR_105:
   494  00FB8C  44                 	db	68	;'D'
   495  00FB8D  52                 	db	82	;'R'
   496  00FB8E  4F                 	db	79	;'O'
   497  00FB8F  50                 	db	80	;'P'
   498  00FB90  20                 	db	32
   499  00FB91  2D                 	db	45
   500  00FB92  2D                 	db	45
   501  00FB93  20                 	db	32
   502  00FB94  32                 	db	50	;'2'
   503  00FB95  73                 	db	115	;'s'
   504  00FB96  20                 	db	32
   505  00FB97  20                 	db	32
   506  00FB98  20                 	db	32
   507  00FB99  20                 	db	32
   508  00FB9A  20                 	db	32
   509  00FB9B  20                 	db	32
   510  00FB9C  00                 	db	0
   511  00FB9D                     STR_99:
   512  00FB9D  4C                 	db	76	;'L'
   513  00FB9E  45                 	db	69	;'E'
   514  00FB9F  46                 	db	70	;'F'
   515  00FBA0  54                 	db	84	;'T'
   516  00FBA1  20                 	db	32
   517  00FBA2  2D                 	db	45
   518  00FBA3  2D                 	db	45
   519  00FBA4  20                 	db	32
   520  00FBA5  32                 	db	50	;'2'
   521  00FBA6  73                 	db	115	;'s'
   522  00FBA7  20                 	db	32
   523  00FBA8  20                 	db	32
   524  00FBA9  20                 	db	32
   525  00FBAA  20                 	db	32
   526  00FBAB  20                 	db	32
   527  00FBAC  20                 	db	32
   528  00FBAD  00                 	db	0
   529  00FBAE                     STR_104:
   530  00FBAE  4C                 	db	76	;'L'
   531  00FBAF  45                 	db	69	;'E'
   532  00FBB0  56                 	db	86	;'V'
   533  00FBB1  45                 	db	69	;'E'
   534  00FBB2  4C                 	db	76	;'L'
   535  00FBB3  20                 	db	32
   536  00FBB4  2D                 	db	45
   537  00FBB5  2D                 	db	45
   538  00FBB6  20                 	db	32
   539  00FBB7  32                 	db	50	;'2'
   540  00FBB8  73                 	db	115	;'s'
   541  00FBB9  20                 	db	32
   542  00FBBA  20                 	db	32
   543  00FBBB  20                 	db	32
   544  00FBBC  20                 	db	32
   545  00FBBD  20                 	db	32
   546  00FBBE  00                 	db	0
   547  00FBBF                     STR_98:
   548  00FBBF  52                 	db	82	;'R'
   549  00FBC0  49                 	db	73	;'I'
   550  00FBC1  47                 	db	71	;'G'
   551  00FBC2  48                 	db	72	;'H'
   552  00FBC3  54                 	db	84	;'T'
   553  00FBC4  20                 	db	32
   554  00FBC5  2D                 	db	45
   555  00FBC6  2D                 	db	45
   556  00FBC7  20                 	db	32
   557  00FBC8  32                 	db	50	;'2'
   558  00FBC9  73                 	db	115	;'s'
   559  00FBCA  20                 	db	32
   560  00FBCB  20                 	db	32
   561  00FBCC  20                 	db	32
   562  00FBCD  20                 	db	32
   563  00FBCE  20                 	db	32
   564  00FBCF  00                 	db	0
   565  00FBD0                     STR_97:
   566  00FBD0  4D                 	db	77	;'M'
   567  00FBD1  49                 	db	73	;'I'
   568  00FBD2  44                 	db	68	;'D'
   569  00FBD3  44                 	db	68	;'D'
   570  00FBD4  4C                 	db	76	;'L'
   571  00FBD5  45                 	db	69	;'E'
   572  00FBD6  20                 	db	32
   573  00FBD7  2D                 	db	45
   574  00FBD8  2D                 	db	45
   575  00FBD9  20                 	db	32
   576  00FBDA  32                 	db	50	;'2'
   577  00FBDB  73                 	db	115	;'s'
   578  00FBDC  20                 	db	32
   579  00FBDD  20                 	db	32
   580  00FBDE  20                 	db	32
   581  00FBDF  20                 	db	32
   582  00FBE0  00                 	db	0
   583  00FBE1                     STR_112:
   584  00FBE1  4F                 	db	79	;'O'
   585  00FBE2  54                 	db	84	;'T'
   586  00FBE3  48                 	db	72	;'H'
   587  00FBE4  45                 	db	69	;'E'
   588  00FBE5  52                 	db	82	;'R'
   589  00FBE6  20                 	db	32
   590  00FBE7  53                 	db	83	;'S'
   591  00FBE8  45                 	db	69	;'E'
   592  00FBE9  54                 	db	84	;'T'
   593  00FBEA  53                 	db	83	;'S'
   594  00FBEB  20                 	db	32
   595  00FBEC  44                 	db	68	;'D'
   596  00FBED  43                 	db	67	;'C'
   597  00FBEE  20                 	db	32
   598  00FBEF  20                 	db	32
   599  00FBF0  20                 	db	32
   600  00FBF1  00                 	db	0
   601  00FBF2                     STR_116:
   602  00FBF2  44                 	db	68	;'D'
   603  00FBF3  20                 	db	32
   604  00FBF4  57                 	db	87	;'W'
   605  00FBF5  49                 	db	73	;'I'
   606  00FBF6  4C                 	db	76	;'L'
   607  00FBF7  4C                 	db	76	;'L'
   608  00FBF8  20                 	db	32
   609  00FBF9  52                 	db	82	;'R'
   610  00FBFA  45                 	db	69	;'E'
   611  00FBFB  54                 	db	84	;'T'
   612  00FBFC  55                 	db	85	;'U'
   613  00FBFD  52                 	db	82	;'R'
   614  00FBFE  4E                 	db	78	;'N'
   615  00FBFF  20                 	db	32
   616  00FC00  20                 	db	32
   617  00FC01  20                 	db	32
   618  00FC02  00                 	db	0
   619  00FC03                     STR_114:
   620  00FC03  35                 	db	53	;'5'
   621  00FC04  3A                 	db	58	;':'
   622  00FC05  48                 	db	72	;'H'
   623  00FC06  7C                 	db	124
   624  00FC07  36                 	db	54	;'6'
   625  00FC08  3A                 	db	58	;':'
   626  00FC09  4C                 	db	76	;'L'
   627  00FC0A  7C                 	db	124
   628  00FC0B  49                 	db	73	;'I'
   629  00FC0C  52                 	db	82	;'R'
   630  00FC0D  3A                 	db	58	;':'
   631  00FC0E  25                 	db	37
   632  00FC0F  64                 	db	100	;'d'
   633  00FC10  20                 	db	32
   634  00FC11  20                 	db	32
   635  00FC12  20                 	db	32
   636  00FC13  00                 	db	0
   637  00FC14                     STR_113:
   638  00FC14  31                 	db	49	;'1'
   639  00FC15  3A                 	db	58	;':'
   640  00FC16  20                 	db	32
   641  00FC17  44                 	db	68	;'D'
   642  00FC18  43                 	db	67	;'C'
   643  00FC19  20                 	db	32
   644  00FC1A  7C                 	db	124
   645  00FC1B  20                 	db	32
   646  00FC1C  41                 	db	65	;'A'
   647  00FC1D  3A                 	db	58	;':'
   648  00FC1E  20                 	db	32
   649  00FC1F  41                 	db	65	;'A'
   650  00FC20  52                 	db	82	;'R'
   651  00FC21  4D                 	db	77	;'M'
   652  00FC22  20                 	db	32
   653  00FC23  20                 	db	32
   654  00FC24  00                 	db	0
   655  00FC25                     STR_100:
   656  00FC25  4D                 	db	77	;'M'
   657  00FC26  49                 	db	73	;'I'
   658  00FC27  44                 	db	68	;'D'
   659  00FC28  2D                 	db	45
   660  00FC29  4C                 	db	76	;'L'
   661  00FC2A  45                 	db	69	;'E'
   662  00FC2B  46                 	db	70	;'F'
   663  00FC2C  54                 	db	84	;'T'
   664  00FC2D  20                 	db	32
   665  00FC2E  2D                 	db	45
   666  00FC2F  2D                 	db	45
   667  00FC30  20                 	db	32
   668  00FC31  32                 	db	50	;'2'
   669  00FC32  73                 	db	115	;'s'
   670  00FC33  20                 	db	32
   671  00FC34  20                 	db	32
   672  00FC35  00                 	db	0
   673  00FC36                     STR_101:
   674  00FC36  4D                 	db	77	;'M'
   675  00FC37  49                 	db	73	;'I'
   676  00FC38  44                 	db	68	;'D'
   677  00FC39  2D                 	db	45
   678  00FC3A  52                 	db	82	;'R'
   679  00FC3B  49                 	db	73	;'I'
   680  00FC3C  47                 	db	71	;'G'
   681  00FC3D  48                 	db	72	;'H'
   682  00FC3E  54                 	db	84	;'T'
   683  00FC3F  20                 	db	32
   684  00FC40  2D                 	db	45
   685  00FC41  2D                 	db	45
   686  00FC42  20                 	db	32
   687  00FC43  32                 	db	50	;'2'
   688  00FC44  73                 	db	115	;'s'
   689  00FC45  20                 	db	32
   690  00FC46  00                 	db	0
   691  00FC47  45                 	db	69	;'E'
   692  00FC48  4C                 	db	76	;'L'
   693  00FC49  53                 	db	83	;'S'
   694  00FC4A  45                 	db	69	;'E'
   695  00FC4B  20                 	db	32
   696  00FC4C  54                 	db	84	;'T'
   697  00FC4D  4F                 	db	79	;'O'
   698  00FC4E  47                 	db	71	;'G'
   699  00FC4F  47                 	db	71	;'G'
   700  00FC50  4C                 	db	76	;'L'
   701  00FC51  45                 	db	69	;'E'
   702  00FC52  53                 	db	83	;'S'
   703  00FC53  20                 	db	32
   704  00FC54  52                 	db	82	;'R'
   705  00FC55  41                 	db	65	;'A'
   706  00FC56  35                 	db	53	;'5'
   707  00FC57  00                 	db	0
   708  00FC58                     STR_72:
   709  00FC58  41                 	db	65	;'A'
   710  00FC59  4C                 	db	76	;'L'
   711  00FC5A  47                 	db	71	;'G'
   712  00FC5B  31                 	db	49	;'1'
   713  00FC5C  3A                 	db	58	;':'
   714  00FC5D  20                 	db	32
   715  00FC5E  39                 	db	57	;'9'
   716  00FC5F  20                 	db	32
   717  00FC60  50                 	db	80	;'P'
   718  00FC61  4F                 	db	79	;'O'
   719  00FC62  50                 	db	80	;'P'
   720  00FC63  4E                 	db	78	;'N'
   721  00FC64  4F                 	db	79	;'O'
   722  00FC65  54                 	db	84	;'T'
   723  00FC66  41                 	db	65	;'A'
   724  00FC67  42                 	db	66	;'B'
   725  00FC68  00                 	db	0
   726  00FC69                     STR_92:
   727  00FC69  54                 	db	84	;'T'
   728  00FC6A  53                 	db	83	;'S'
   729  00FC6B  54                 	db	84	;'T'
   730  00FC6C  3A                 	db	58	;':'
   731  00FC6D  20                 	db	32
   732  00FC6E  43                 	db	67	;'C'
   733  00FC6F  4F                 	db	79	;'O'
   734  00FC70  4E                 	db	78	;'N'
   735  00FC71  44                 	db	68	;'D'
   736  00FC72  20                 	db	32
   737  00FC73  53                 	db	83	;'S'
   738  00FC74  4F                 	db	79	;'O'
   739  00FC75  4C                 	db	76	;'L'
   740  00FC76  4E                 	db	78	;'N'
   741  00FC77  27                 	db	39
   742  00FC78  44                 	db	68	;'D'
   743  00FC79  00                 	db	0
   744  00FC7A                     STR_94:
   745  00FC7A  54                 	db	84	;'T'
   746  00FC7B  53                 	db	83	;'S'
   747  00FC7C  54                 	db	84	;'T'
   748  00FC7D  3A                 	db	58	;':'
   749  00FC7E  20                 	db	32
   750  00FC7F  50                 	db	80	;'P'
   751  00FC80  55                 	db	85	;'U'
   752  00FC81  53                 	db	83	;'S'
   753  00FC82  48                 	db	72	;'H'
   754  00FC83  20                 	db	32
   755  00FC84  53                 	db	83	;'S'
   756  00FC85  4F                 	db	79	;'O'
   757  00FC86  4C                 	db	76	;'L'
   758  00FC87  4E                 	db	78	;'N'
   759  00FC88  27                 	db	39
   760  00FC89  44                 	db	68	;'D'
   761  00FC8A  00                 	db	0
   762  00FC8B                     STR_68:
   763  00FC8B  32                 	db	50	;'2'
   764  00FC8C  2E                 	db	46
   765  00FC8D  53                 	db	83	;'S'
   766  00FC8E  4E                 	db	78	;'N'
   767  00FC8F  52                 	db	82	;'R'
   768  00FC90  7C                 	db	124
   769  00FC91  34                 	db	52	;'4'
   770  00FC92  2E                 	db	46
   771  00FC93  48                 	db	72	;'H'
   772  00FC94  49                 	db	73	;'I'
   773  00FC95  7C                 	db	124
   774  00FC96  35                 	db	53	;'5'
   775  00FC97  2E                 	db	46
   776  00FC98  4D                 	db	77	;'M'
   777  00FC99  45                 	db	69	;'E'
   778  00FC9A  44                 	db	68	;'D'
   779  00FC9B  00                 	db	0
   780  00FC9C                     STR_69:
   781  00FC9C  42                 	db	66	;'B'
   782  00FC9D  2E                 	db	46
   783  00FC9E  50                 	db	80	;'P'
   784  00FC9F  4C                 	db	76	;'L'
   785  00FCA0  41                 	db	65	;'A'
   786  00FCA1  7C                 	db	124
   787  00FCA2  38                 	db	56	;'8'
   788  00FCA3  2E                 	db	46
   789  00FCA4  53                 	db	83	;'S'
   790  00FCA5  56                 	db	86	;'V'
   791  00FCA6  7C                 	db	124
   792  00FCA7  39                 	db	57	;'9'
   793  00FCA8  2E                 	db	46
   794  00FCA9  42                 	db	66	;'B'
   795  00FCAA  4C                 	db	76	;'L'
   796  00FCAB  4B                 	db	75	;'K'
   797  00FCAC  00                 	db	0
   798  00FCAD                     STR_125:
   799  00FCAD  45                 	db	69	;'E'
   800  00FCAE  4C                 	db	76	;'L'
   801  00FCAF  53                 	db	83	;'S'
   802  00FCB0  45                 	db	69	;'E'
   803  00FCB1  20                 	db	32
   804  00FCB2  54                 	db	84	;'T'
   805  00FCB3  4F                 	db	79	;'O'
   806  00FCB4  47                 	db	71	;'G'
   807  00FCB5  47                 	db	71	;'G'
   808  00FCB6  4C                 	db	76	;'L'
   809  00FCB7  45                 	db	69	;'E'
   810  00FCB8  53                 	db	83	;'S'
   811  00FCB9  20                 	db	32
   812  00FCBA  41                 	db	65	;'A'
   813  00FCBB  52                 	db	82	;'R'
   814  00FCBC  4D                 	db	77	;'M'
   815  00FCBD  00                 	db	0
   816  00FCBE                     STR_110:
   817  00FCBE  54                 	db	84	;'T'
   818  00FCBF  53                 	db	83	;'S'
   819  00FCC0  54                 	db	84	;'T'
   820  00FCC1  3A                 	db	58	;':'
   821  00FCC2  20                 	db	32
   822  00FCC3  42                 	db	66	;'B'
   823  00FCC4  4F                 	db	79	;'O'
   824  00FCC5  54                 	db	84	;'T'
   825  00FCC6  48                 	db	72	;'H'
   826  00FCC7  20                 	db	32
   827  00FCC8  53                 	db	83	;'S'
   828  00FCC9  45                 	db	69	;'E'
   829  00FCCA  52                 	db	82	;'R'
   830  00FCCB  56                 	db	86	;'V'
   831  00FCCC  4F                 	db	79	;'O'
   832  00FCCD  53                 	db	83	;'S'
   833  00FCCE  00                 	db	0
   834  00FCCF                     STR_41:
   835  00FCCF  4C                 	db	76	;'L'
   836  00FCD0  4F                 	db	79	;'O'
   837  00FCD1  47                 	db	71	;'G'
   838  00FCD2  20                 	db	32
   839  00FCD3  31                 	db	49	;'1'
   840  00FCD4  20                 	db	32
   841  00FCD5  20                 	db	32
   842  00FCD6  20                 	db	32
   843  00FCD7  20                 	db	32
   844  00FCD8  20                 	db	32
   845  00FCD9  20                 	db	32
   846  00FCDA  20                 	db	32
   847  00FCDB  20                 	db	32
   848  00FCDC  20                 	db	32
   849  00FCDD  20                 	db	32
   850  00FCDE  20                 	db	32
   851  00FCDF  00                 	db	0
   852  00FCE0                     STR_40:
   853  00FCE0  4C                 	db	76	;'L'
   854  00FCE1  4F                 	db	79	;'O'
   855  00FCE2  47                 	db	71	;'G'
   856  00FCE3  20                 	db	32
   857  00FCE4  32                 	db	50	;'2'
   858  00FCE5  20                 	db	32
   859  00FCE6  20                 	db	32
   860  00FCE7  20                 	db	32
   861  00FCE8  20                 	db	32
   862  00FCE9  20                 	db	32
   863  00FCEA  20                 	db	32
   864  00FCEB  20                 	db	32
   865  00FCEC  20                 	db	32
   866  00FCED  20                 	db	32
   867  00FCEE  20                 	db	32
   868  00FCEF  20                 	db	32
   869  00FCF0  00                 	db	0
   870  00FCF1                     STR_44:
   871  00FCF1  4C                 	db	76	;'L'
   872  00FCF2  4F                 	db	79	;'O'
   873  00FCF3  47                 	db	71	;'G'
   874  00FCF4  20                 	db	32
   875  00FCF5  33                 	db	51	;'3'
   876  00FCF6  20                 	db	32
   877  00FCF7  20                 	db	32
   878  00FCF8  20                 	db	32
   879  00FCF9  20                 	db	32
   880  00FCFA  20                 	db	32
   881  00FCFB  20                 	db	32
   882  00FCFC  20                 	db	32
   883  00FCFD  20                 	db	32
   884  00FCFE  20                 	db	32
   885  00FCFF  20                 	db	32
   886  00FD00  20                 	db	32
   887  00FD01  00                 	db	0
   888  00FD02                     STR_48:
   889  00FD02  4C                 	db	76	;'L'
   890  00FD03  4F                 	db	79	;'O'
   891  00FD04  47                 	db	71	;'G'
   892  00FD05  20                 	db	32
   893  00FD06  34                 	db	52	;'4'
   894  00FD07  20                 	db	32
   895  00FD08  20                 	db	32
   896  00FD09  20                 	db	32
   897  00FD0A  20                 	db	32
   898  00FD0B  20                 	db	32
   899  00FD0C  20                 	db	32
   900  00FD0D  20                 	db	32
   901  00FD0E  20                 	db	32
   902  00FD0F  20                 	db	32
   903  00FD10  20                 	db	32
   904  00FD11  20                 	db	32
   905  00FD12  00                 	db	0
   906  00FD13                     STR_36:
   907  00FD13  33                 	db	51	;'3'
   908  00FD14  2E                 	db	46
   909  00FD15  20                 	db	32
   910  00FD16  4C                 	db	76	;'L'
   911  00FD17  4F                 	db	79	;'O'
   912  00FD18  47                 	db	71	;'G'
   913  00FD19  53                 	db	83	;'S'
   914  00FD1A  20                 	db	32
   915  00FD1B  20                 	db	32
   916  00FD1C  20                 	db	32
   917  00FD1D  20                 	db	32
   918  00FD1E  20                 	db	32
   919  00FD1F  20                 	db	32
   920  00FD20  20                 	db	32
   921  00FD21  20                 	db	32
   922  00FD22  20                 	db	32
   923  00FD23  00                 	db	0
   924  00FD24                     STR_32:
   925  00FD24  32                 	db	50	;'2'
   926  00FD25  2E                 	db	46
   927  00FD26  20                 	db	32
   928  00FD27  53                 	db	83	;'S'
   929  00FD28  4F                 	db	79	;'O'
   930  00FD29  52                 	db	82	;'R'
   931  00FD2A  54                 	db	84	;'T'
   932  00FD2B  20                 	db	32
   933  00FD2C  20                 	db	32
   934  00FD2D  20                 	db	32
   935  00FD2E  20                 	db	32
   936  00FD2F  20                 	db	32
   937  00FD30  20                 	db	32
   938  00FD31  20                 	db	32
   939  00FD32  20                 	db	32
   940  00FD33  20                 	db	32
   941  00FD34  00                 	db	0
   942  00FD35                     STR_33:
   943  00FD35  31                 	db	49	;'1'
   944  00FD36  2E                 	db	46
   945  00FD37  20                 	db	32
   946  00FD38  44                 	db	68	;'D'
   947  00FD39  41                 	db	65	;'A'
   948  00FD3A  54                 	db	84	;'T'
   949  00FD3B  45                 	db	69	;'E'
   950  00FD3C  2F                 	db	47
   951  00FD3D  54                 	db	84	;'T'
   952  00FD3E  49                 	db	73	;'I'
   953  00FD3F  4D                 	db	77	;'M'
   954  00FD40  45                 	db	69	;'E'
   955  00FD41  20                 	db	32
   956  00FD42  20                 	db	32
   957  00FD43  20                 	db	32
   958  00FD44  20                 	db	32
   959  00FD45  00                 	db	0
   960  00FD46                     STR_24:
   961  00FD46  20                 	db	32
   962  00FD47  2D                 	db	45
   963  00FD48  2D                 	db	45
   964  00FD49  20                 	db	32
   965  00FD4A  50                 	db	80	;'P'
   966  00FD4B  4F                 	db	79	;'O'
   967  00FD4C  50                 	db	80	;'P'
   968  00FD4D  20                 	db	32
   969  00FD4E  20                 	db	32
   970  00FD4F  43                 	db	67	;'C'
   971  00FD50  41                 	db	65	;'A'
   972  00FD51  4E                 	db	78	;'N'
   973  00FD52  20                 	db	32
   974  00FD53  2D                 	db	45
   975  00FD54  2D                 	db	45
   976  00FD55  20                 	db	32
   977  00FD56  00                 	db	0
   978  00FD57                     STR_26:
   979  00FD57  20                 	db	32
   980  00FD58  2D                 	db	45
   981  00FD59  2D                 	db	45
   982  00FD5A  20                 	db	32
   983  00FD5B  53                 	db	83	;'S'
   984  00FD5C  4F                 	db	79	;'O'
   985  00FD5D  55                 	db	85	;'U'
   986  00FD5E  50                 	db	80	;'P'
   987  00FD5F  20                 	db	32
   988  00FD60  43                 	db	67	;'C'
   989  00FD61  41                 	db	65	;'A'
   990  00FD62  4E                 	db	78	;'N'
   991  00FD63  20                 	db	32
   992  00FD64  2D                 	db	45
   993  00FD65  2D                 	db	45
   994  00FD66  20                 	db	32
   995  00FD67  00                 	db	0
   996  00FD68                     STR_28:
   997  00FD68  2D                 	db	45
   998  00FD69  2D                 	db	45
   999  00FD6A  20                 	db	32
  1000  00FD6B  54                 	db	84	;'T'
  1001  00FD6C  4F                 	db	79	;'O'
  1002  00FD6D  54                 	db	84	;'T'
  1003  00FD6E  41                 	db	65	;'A'
  1004  00FD6F  4C                 	db	76	;'L'
  1005  00FD70  20                 	db	32
  1006  00FD71  43                 	db	67	;'C'
  1007  00FD72  41                 	db	65	;'A'
  1008  00FD73  4E                 	db	78	;'N'
  1009  00FD74  53                 	db	83	;'S'
  1010  00FD75  20                 	db	32
  1011  00FD76  2D                 	db	45
  1012  00FD77  2D                 	db	45
  1013  00FD78  00                 	db	0
  1014  00FD79                     STR_39:
  1015  00FD79  4C                 	db	76	;'L'
  1016  00FD7A  4F                 	db	79	;'O'
  1017  00FD7B  47                 	db	71	;'G'
  1018  00FD7C  20                 	db	32
  1019  00FD7D  31                 	db	49	;'1'
  1020  00FD7E  20                 	db	32
  1021  00FD7F  20                 	db	32
  1022  00FD80  20                 	db	32
  1023  00FD81  20                 	db	32
  1024  00FD82  20                 	db	32
  1025  00FD83  20                 	db	32
  1026  00FD84  20                 	db	32
  1027  00FD85  20                 	db	32
  1028  00FD86  20                 	db	32
  1029  00FD87  20                 	db	32
  1030  00FD88  3C                 	db	60	;'<'
  1031  00FD89  00                 	db	0
  1032  00FD8A                     STR_42:
  1033  00FD8A  4C                 	db	76	;'L'
  1034  00FD8B  4F                 	db	79	;'O'
  1035  00FD8C  47                 	db	71	;'G'
  1036  00FD8D  20                 	db	32
  1037  00FD8E  32                 	db	50	;'2'
  1038  00FD8F  20                 	db	32
  1039  00FD90  20                 	db	32
  1040  00FD91  20                 	db	32
  1041  00FD92  20                 	db	32
  1042  00FD93  20                 	db	32
  1043  00FD94  20                 	db	32
  1044  00FD95  20                 	db	32
  1045  00FD96  20                 	db	32
  1046  00FD97  20                 	db	32
  1047  00FD98  20                 	db	32
  1048  00FD99  3C                 	db	60	;'<'
  1049  00FD9A  00                 	db	0
  1050  00FD9B                     STR_46:
  1051  00FD9B  4C                 	db	76	;'L'
  1052  00FD9C  4F                 	db	79	;'O'
  1053  00FD9D  47                 	db	71	;'G'
  1054  00FD9E  20                 	db	32
  1055  00FD9F  33                 	db	51	;'3'
  1056  00FDA0  20                 	db	32
  1057  00FDA1  20                 	db	32
  1058  00FDA2  20                 	db	32
  1059  00FDA3  20                 	db	32
  1060  00FDA4  20                 	db	32
  1061  00FDA5  20                 	db	32
  1062  00FDA6  20                 	db	32
  1063  00FDA7  20                 	db	32
  1064  00FDA8  20                 	db	32
  1065  00FDA9  20                 	db	32
  1066  00FDAA  3C                 	db	60	;'<'
  1067  00FDAB  00                 	db	0
  1068  00FDAC                     STR_50:
  1069  00FDAC  4C                 	db	76	;'L'
  1070  00FDAD  4F                 	db	79	;'O'
  1071  00FDAE  47                 	db	71	;'G'
  1072  00FDAF  20                 	db	32
  1073  00FDB0  34                 	db	52	;'4'
  1074  00FDB1  20                 	db	32
  1075  00FDB2  20                 	db	32
  1076  00FDB3  20                 	db	32
  1077  00FDB4  20                 	db	32
  1078  00FDB5  20                 	db	32
  1079  00FDB6  20                 	db	32
  1080  00FDB7  20                 	db	32
  1081  00FDB8  20                 	db	32
  1082  00FDB9  20                 	db	32
  1083  00FDBA  20                 	db	32
  1084  00FDBB  3C                 	db	60	;'<'
  1085  00FDBC  00                 	db	0
  1086  00FDBD                     STR_38:
  1087  00FDBD  33                 	db	51	;'3'
  1088  00FDBE  2E                 	db	46
  1089  00FDBF  20                 	db	32
  1090  00FDC0  4C                 	db	76	;'L'
  1091  00FDC1  4F                 	db	79	;'O'
  1092  00FDC2  47                 	db	71	;'G'
  1093  00FDC3  53                 	db	83	;'S'
  1094  00FDC4  20                 	db	32
  1095  00FDC5  20                 	db	32
  1096  00FDC6  20                 	db	32
  1097  00FDC7  20                 	db	32
  1098  00FDC8  20                 	db	32
  1099  00FDC9  20                 	db	32
  1100  00FDCA  20                 	db	32
  1101  00FDCB  20                 	db	32
  1102  00FDCC  3C                 	db	60	;'<'
  1103  00FDCD  00                 	db	0
  1104  00FDCE                     STR_34:
  1105  00FDCE  32                 	db	50	;'2'
  1106  00FDCF  2E                 	db	46
  1107  00FDD0  20                 	db	32
  1108  00FDD1  53                 	db	83	;'S'
  1109  00FDD2  4F                 	db	79	;'O'
  1110  00FDD3  52                 	db	82	;'R'
  1111  00FDD4  54                 	db	84	;'T'
  1112  00FDD5  20                 	db	32
  1113  00FDD6  20                 	db	32
  1114  00FDD7  20                 	db	32
  1115  00FDD8  20                 	db	32
  1116  00FDD9  20                 	db	32
  1117  00FDDA  20                 	db	32
  1118  00FDDB  20                 	db	32
  1119  00FDDC  20                 	db	32
  1120  00FDDD  3C                 	db	60	;'<'
  1121  00FDDE  00                 	db	0
  1122  00FDDF                     STR_31:
  1123  00FDDF  31                 	db	49	;'1'
  1124  00FDE0  2E                 	db	46
  1125  00FDE1  20                 	db	32
  1126  00FDE2  44                 	db	68	;'D'
  1127  00FDE3  41                 	db	65	;'A'
  1128  00FDE4  54                 	db	84	;'T'
  1129  00FDE5  45                 	db	69	;'E'
  1130  00FDE6  2F                 	db	47
  1131  00FDE7  54                 	db	84	;'T'
  1132  00FDE8  49                 	db	73	;'I'
  1133  00FDE9  4D                 	db	77	;'M'
  1134  00FDEA  45                 	db	69	;'E'
  1135  00FDEB  20                 	db	32
  1136  00FDEC  20                 	db	32
  1137  00FDED  20                 	db	32
  1138  00FDEE  3C                 	db	60	;'<'
  1139  00FDEF  00                 	db	0
  1140  00FDF0                     STR_6:
  1141  00FDF0  50                 	db	80	;'P'
  1142  00FDF1  41                 	db	65	;'A'
  1143  00FDF2  55                 	db	85	;'U'
  1144  00FDF3  53                 	db	83	;'S'
  1145  00FDF4  45                 	db	69	;'E'
  1146  00FDF5  20                 	db	32
  1147  00FDF6  3C                 	db	60	;'<'
  1148  00FDF7  20                 	db	32
  1149  00FDF8  7C                 	db	124
  1150  00FDF9  20                 	db	32
  1151  00FDFA  42                 	db	66	;'B'
  1152  00FDFB  41                 	db	65	;'A'
  1153  00FDFC  43                 	db	67	;'C'
  1154  00FDFD  4B                 	db	75	;'K'
  1155  00FDFE  20                 	db	32
  1156  00FDFF  3E                 	db	62	;'>'
  1157  00FE00  00                 	db	0
  1158  00FE01                     STR_30:
  1159  00FE01  50                 	db	80	;'P'
  1160  00FE02  55                 	db	85	;'U'
  1161  00FE03  53                 	db	83	;'S'
  1162  00FE04  48                 	db	72	;'H'
  1163  00FE05  20                 	db	32
  1164  00FE06  54                 	db	84	;'T'
  1165  00FE07  4F                 	db	79	;'O'
  1166  00FE08  20                 	db	32
  1167  00FE09  43                 	db	67	;'C'
  1168  00FE0A  4F                 	db	79	;'O'
  1169  00FE0B  4E                 	db	78	;'N'
  1170  00FE0C  54                 	db	84	;'T'
  1171  00FE0D  49                 	db	73	;'I'
  1172  00FE0E  4E                 	db	78	;'N'
  1173  00FE0F  55                 	db	85	;'U'
  1174  00FE10  45                 	db	69	;'E'
  1175  00FE11  00                 	db	0
  1176  00FE12                     STR_27:
  1177  00FE12  4E                 	db	78	;'N'
  1178  00FE13  4C                 	db	76	;'L'
  1179  00FE14  41                 	db	65	;'A'
  1180  00FE15  42                 	db	66	;'B'
  1181  00FE16  3A                 	db	58	;':'
  1182  00FE17  20                 	db	32
  1183  00FE18  25                 	db	37
  1184  00FE19  64                 	db	100	;'d'
  1185  00FE1A  7C                 	db	124
  1186  00FE1B  4C                 	db	76	;'L'
  1187  00FE1C  41                 	db	65	;'A'
  1188  00FE1D  42                 	db	66	;'B'
  1189  00FE1E  3A                 	db	58	;':'
  1190  00FE1F  20                 	db	32
  1191  00FE20  25                 	db	37
  1192  00FE21  64                 	db	100	;'d'
  1193  00FE22  00                 	db	0
  1194  00FE23                     STR_25:
  1195  00FE23  4E                 	db	78	;'N'
  1196  00FE24  54                 	db	84	;'T'
  1197  00FE25  41                 	db	65	;'A'
  1198  00FE26  42                 	db	66	;'B'
  1199  00FE27  3A                 	db	58	;':'
  1200  00FE28  20                 	db	32
  1201  00FE29  25                 	db	37
  1202  00FE2A  64                 	db	100	;'d'
  1203  00FE2B  7C                 	db	124
  1204  00FE2C  54                 	db	84	;'T'
  1205  00FE2D  41                 	db	65	;'A'
  1206  00FE2E  42                 	db	66	;'B'
  1207  00FE2F  3A                 	db	58	;':'
  1208  00FE30  20                 	db	32
  1209  00FE31  25                 	db	37
  1210  00FE32  64                 	db	100	;'d'
  1211  00FE33  00                 	db	0
  1212  00FE34                     STR_83:
  1213  00FE34  4D                 	db	77	;'M'
  1214  00FE35  41                 	db	65	;'A'
  1215  00FE36  47                 	db	71	;'G'
  1216  00FE37  5F                 	db	95	;'_'
  1217  00FE38  73                 	db	115	;'s'
  1218  00FE39  69                 	db	105	;'i'
  1219  00FE3A  67                 	db	103	;'g'
  1220  00FE3B  6E                 	db	110	;'n'
  1221  00FE3C  61                 	db	97	;'a'
  1222  00FE3D  6C                 	db	108	;'l'
  1223  00FE3E  3A                 	db	58	;':'
  1224  00FE3F  20                 	db	32
  1225  00FE40  25                 	db	37
  1226  00FE41  64                 	db	100	;'d'
  1227  00FE42  20                 	db	32
  1228  00FE43  00                 	db	0
  1229  00FE44                     STR_103:
  1230  00FE44  54                 	db	84	;'T'
  1231  00FE45  53                 	db	83	;'S'
  1232  00FE46  54                 	db	84	;'T'
  1233  00FE47  3A                 	db	58	;':'
  1234  00FE48  20                 	db	32
  1235  00FE49  54                 	db	84	;'T'
  1236  00FE4A  49                 	db	73	;'I'
  1237  00FE4B  4C                 	db	76	;'L'
  1238  00FE4C  54                 	db	84	;'T'
  1239  00FE4D  20                 	db	32
  1240  00FE4E  53                 	db	83	;'S'
  1241  00FE4F  45                 	db	69	;'E'
  1242  00FE50  52                 	db	82	;'R'
  1243  00FE51  56                 	db	86	;'V'
  1244  00FE52  4F                 	db	79	;'O'
  1245  00FE53  00                 	db	0
  1246  00FE54                     STR_4:
  1247  00FE54  44                 	db	68	;'D'
  1248  00FE55  49                 	db	73	;'I'
  1249  00FE56  44                 	db	68	;'D'
  1250  00FE57  4E                 	db	78	;'N'
  1251  00FE58  27                 	db	39
  1252  00FE59  54                 	db	84	;'T'
  1253  00FE5A  20                 	db	32
  1254  00FE5B  43                 	db	67	;'C'
  1255  00FE5C  4F                 	db	79	;'O'
  1256  00FE5D  4D                 	db	77	;'M'
  1257  00FE5E  50                 	db	80	;'P'
  1258  00FE5F  4C                 	db	76	;'L'
  1259  00FE60  45                 	db	69	;'E'
  1260  00FE61  54                 	db	84	;'T'
  1261  00FE62  45                 	db	69	;'E'
  1262  00FE63  00                 	db	0
  1263  00FE64                     STR_80:
  1264  00FE64  49                 	db	73	;'I'
  1265  00FE65  52                 	db	82	;'R'
  1266  00FE66  5F                 	db	95	;'_'
  1267  00FE67  73                 	db	115	;'s'
  1268  00FE68  69                 	db	105	;'i'
  1269  00FE69  67                 	db	103	;'g'
  1270  00FE6A  6E                 	db	110	;'n'
  1271  00FE6B  61                 	db	97	;'a'
  1272  00FE6C  6C                 	db	108	;'l'
  1273  00FE6D  3A                 	db	58	;':'
  1274  00FE6E  20                 	db	32
  1275  00FE6F  25                 	db	37
  1276  00FE70  64                 	db	100	;'d'
  1277  00FE71  20                 	db	32
  1278  00FE72  00                 	db	0
  1279  00FE73                     STR_109:
  1280  00FE73  43                 	db	67	;'C'
  1281  00FE74  41                 	db	65	;'A'
  1282  00FE75  4D                 	db	77	;'M'
  1283  00FE76  20                 	db	32
  1284  00FE77  44                 	db	68	;'D'
  1285  00FE78  57                 	db	87	;'W'
  1286  00FE79  4E                 	db	78	;'N'
  1287  00FE7A  20                 	db	32
  1288  00FE7B  7C                 	db	124
  1289  00FE7C  52                 	db	82	;'R'
  1290  00FE7D  43                 	db	67	;'C'
  1291  00FE7E  30                 	db	48	;'0'
  1292  00FE7F  3D                 	db	61	;'='
  1293  00FE80  30                 	db	48	;'0'
  1294  00FE81  00                 	db	0
  1295  00FE82                     STR_108:
  1296  00FE82  43                 	db	67	;'C'
  1297  00FE83  41                 	db	65	;'A'
  1298  00FE84  4D                 	db	77	;'M'
  1299  00FE85  20                 	db	32
  1300  00FE86  55                 	db	85	;'U'
  1301  00FE87  50                 	db	80	;'P'
  1302  00FE88  20                 	db	32
  1303  00FE89  20                 	db	32
  1304  00FE8A  7C                 	db	124
  1305  00FE8B  52                 	db	82	;'R'
  1306  00FE8C  43                 	db	67	;'C'
  1307  00FE8D  30                 	db	48	;'0'
  1308  00FE8E  3D                 	db	61	;'='
  1309  00FE8F  31                 	db	49	;'1'
  1310  00FE90  00                 	db	0
  1311  00FE91                     STR_82:
  1312  00FE91  54                 	db	84	;'T'
  1313  00FE92  53                 	db	83	;'S'
  1314  00FE93  54                 	db	84	;'T'
  1315  00FE94  3A                 	db	58	;':'
  1316  00FE95  20                 	db	32
  1317  00FE96  4D                 	db	77	;'M'
  1318  00FE97  41                 	db	65	;'A'
  1319  00FE98  47                 	db	71	;'G'
  1320  00FE99  4E                 	db	78	;'N'
  1321  00FE9A  45                 	db	69	;'E'
  1322  00FE9B  54                 	db	84	;'T'
  1323  00FE9C  49                 	db	73	;'I'
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  4D                 	db	77	;'M'
  1326  00FE9F  00                 	db	0
  1327  00FEA0                     STR_107:
  1328  00FEA0  54                 	db	84	;'T'
  1329  00FEA1  53                 	db	83	;'S'
  1330  00FEA2  54                 	db	84	;'T'
  1331  00FEA3  3A                 	db	58	;':'
  1332  00FEA4  20                 	db	32
  1333  00FEA5  43                 	db	67	;'C'
  1334  00FEA6  41                 	db	65	;'A'
  1335  00FEA7  4D                 	db	77	;'M'
  1336  00FEA8  20                 	db	32
  1337  00FEA9  53                 	db	83	;'S'
  1338  00FEAA  45                 	db	69	;'E'
  1339  00FEAB  52                 	db	82	;'R'
  1340  00FEAC  56                 	db	86	;'V'
  1341  00FEAD  4F                 	db	79	;'O'
  1342  00FEAE  00                 	db	0
  1343  00FEAF                     STR_96:
  1344  00FEAF  54                 	db	84	;'T'
  1345  00FEB0  53                 	db	83	;'S'
  1346  00FEB1  54                 	db	84	;'T'
  1347  00FEB2  3A                 	db	58	;':'
  1348  00FEB3  20                 	db	32
  1349  00FEB4  50                 	db	80	;'P'
  1350  00FEB5  41                 	db	65	;'A'
  1351  00FEB6  4E                 	db	78	;'N'
  1352  00FEB7  20                 	db	32
  1353  00FEB8  53                 	db	83	;'S'
  1354  00FEB9  45                 	db	69	;'E'
  1355  00FEBA  52                 	db	82	;'R'
  1356  00FEBB  56                 	db	86	;'V'
  1357  00FEBC  4F                 	db	79	;'O'
  1358  00FEBD  00                 	db	0
  1359  00FEBE                     STR_75:
  1360  00FEBE  41                 	db	65	;'A'
  1361  00FEBF  4C                 	db	76	;'L'
  1362  00FEC0  47                 	db	71	;'G'
  1363  00FEC1  34                 	db	52	;'4'
  1364  00FEC2  3A                 	db	58	;':'
  1365  00FEC3  20                 	db	32
  1366  00FEC4  41                 	db	65	;'A'
  1367  00FEC5  4C                 	db	76	;'L'
  1368  00FEC6  4C                 	db	76	;'L'
  1369  00FEC7  20                 	db	32
  1370  00FEC8  43                 	db	67	;'C'
  1371  00FEC9  41                 	db	65	;'A'
  1372  00FECA  4E                 	db	78	;'N'
  1373  00FECB  53                 	db	83	;'S'
  1374  00FECC  00                 	db	0
  1375  00FECD                     STR_90:
  1376  00FECD  54                 	db	84	;'T'
  1377  00FECE  53                 	db	83	;'S'
  1378  00FECF  54                 	db	84	;'T'
  1379  00FED0  3A                 	db	58	;':'
  1380  00FED1  20                 	db	32
  1381  00FED2  44                 	db	68	;'D'
  1382  00FED3  43                 	db	67	;'C'
  1383  00FED4  20                 	db	32
  1384  00FED5  4D                 	db	77	;'M'
  1385  00FED6  4F                 	db	79	;'O'
  1386  00FED7  54                 	db	84	;'T'
  1387  00FED8  4F                 	db	79	;'O'
  1388  00FED9  52                 	db	82	;'R'
  1389  00FEDA  53                 	db	83	;'S'
  1390  00FEDB  00                 	db	0
  1391  00FEDC                     STR_70:
  1392  00FEDC  41                 	db	65	;'A'
  1393  00FEDD  4C                 	db	76	;'L'
  1394  00FEDE  47                 	db	71	;'G'
  1395  00FEDF  4F                 	db	79	;'O'
  1396  00FEE0  52                 	db	82	;'R'
  1397  00FEE1  49                 	db	73	;'I'
  1398  00FEE2  54                 	db	84	;'T'
  1399  00FEE3  48                 	db	72	;'H'
  1400  00FEE4  4D                 	db	77	;'M'
  1401  00FEE5  20                 	db	32
  1402  00FEE6  54                 	db	84	;'T'
  1403  00FEE7  45                 	db	69	;'E'
  1404  00FEE8  53                 	db	83	;'S'
  1405  00FEE9  54                 	db	84	;'T'
  1406  00FEEA  00                 	db	0
  1407  00FEEB                     STR_91:
  1408  00FEEB  50                 	db	80	;'P'
  1409  00FEEC  49                 	db	73	;'I'
  1410  00FEED  4E                 	db	78	;'N'
  1411  00FEEE  20                 	db	32
  1412  00FEEF  52                 	db	82	;'R'
  1413  00FEF0  41                 	db	65	;'A'
  1414  00FEF1  35                 	db	53	;'5'
  1415  00FEF2  20                 	db	32
  1416  00FEF3  48                 	db	72	;'H'
  1417  00FEF4  49                 	db	73	;'I'
  1418  00FEF5  47                 	db	71	;'G'
  1419  00FEF6  48                 	db	72	;'H'
  1420  00FEF7  2E                 	db	46
  1421  00FEF8  00                 	db	0
  1422  00FEF9                     STR_73:
  1423  00FEF9  41                 	db	65	;'A'
  1424  00FEFA  4C                 	db	76	;'L'
  1425  00FEFB  47                 	db	71	;'G'
  1426  00FEFC  32                 	db	50	;'2'
  1427  00FEFD  3A                 	db	58	;':'
  1428  00FEFE  20                 	db	32
  1429  00FEFF  31                 	db	49	;'1'
  1430  00FF00  32                 	db	50	;'2'
  1431  00FF01  20                 	db	32
  1432  00FF02  43                 	db	67	;'C'
  1433  00FF03  41                 	db	65	;'A'
  1434  00FF04  4E                 	db	78	;'N'
  1435  00FF05  53                 	db	83	;'S'
  1436  00FF06  00                 	db	0
  1437  00FF07                     STR_76:
  1438  00FF07  41                 	db	65	;'A'
  1439  00FF08  4C                 	db	76	;'L'
  1440  00FF09  47                 	db	71	;'G'
  1441  00FF0A  35                 	db	53	;'5'
  1442  00FF0B  3A                 	db	58	;':'
  1443  00FF0C  20                 	db	32
  1444  00FF0D  4E                 	db	78	;'N'
  1445  00FF0E  4F                 	db	79	;'O'
  1446  00FF0F  20                 	db	32
  1447  00FF10  43                 	db	67	;'C'
  1448  00FF11  41                 	db	65	;'A'
  1449  00FF12  4E                 	db	78	;'N'
  1450  00FF13  53                 	db	83	;'S'
  1451  00FF14  00                 	db	0
  1452  00FF15                     STR_71:
  1453  00FF15  50                 	db	80	;'P'
  1454  00FF16  55                 	db	85	;'U'
  1455  00FF17  53                 	db	83	;'S'
  1456  00FF18  48                 	db	72	;'H'
  1457  00FF19  20                 	db	32
  1458  00FF1A  54                 	db	84	;'T'
  1459  00FF1B  4F                 	db	79	;'O'
  1460  00FF1C  20                 	db	32
  1461  00FF1D  53                 	db	83	;'S'
  1462  00FF1E  54                 	db	84	;'T'
  1463  00FF1F  41                 	db	65	;'A'
  1464  00FF20  52                 	db	82	;'R'
  1465  00FF21  54                 	db	84	;'T'
  1466  00FF22  00                 	db	0
  1467  00FF23                     STR_23:
  1468  00FF23  25                 	db	37
  1469  00FF24  64                 	db	100	;'d'
  1470  00FF25  20                 	db	32
  1471  00FF26  4D                 	db	77	;'M'
  1472  00FF27  49                 	db	73	;'I'
  1473  00FF28  4E                 	db	78	;'N'
  1474  00FF29  20                 	db	32
  1475  00FF2A  25                 	db	37
  1476  00FF2B  64                 	db	100	;'d'
  1477  00FF2C  20                 	db	32
  1478  00FF2D  53                 	db	83	;'S'
  1479  00FF2E  45                 	db	69	;'E'
  1480  00FF2F  43                 	db	67	;'C'
  1481  00FF30  00                 	db	0
  1482  00FF31                     STR_2:
  1483  00FF31  54                 	db	84	;'T'
  1484  00FF32  49                 	db	73	;'I'
  1485  00FF33  4D                 	db	77	;'M'
  1486  00FF34  45                 	db	69	;'E'
  1487  00FF35  3A                 	db	58	;':'
  1488  00FF36  20                 	db	32
  1489  00FF37  25                 	db	37
  1490  00FF38  64                 	db	100	;'d'
  1491  00FF39  3A                 	db	58	;':'
  1492  00FF3A  25                 	db	37
  1493  00FF3B  30                 	db	48	;'0'
  1494  00FF3C  32                 	db	50	;'2'
  1495  00FF3D  64                 	db	100	;'d'
  1496  00FF3E  00                 	db	0
  1497  00FF3F                     STR_79:
  1498  00FF3F  54                 	db	84	;'T'
  1499  00FF40  53                 	db	83	;'S'
  1500  00FF41  54                 	db	84	;'T'
  1501  00FF42  3A                 	db	58	;':'
  1502  00FF43  20                 	db	32
  1503  00FF44  49                 	db	73	;'I'
  1504  00FF45  52                 	db	82	;'R'
  1505  00FF46  20                 	db	32
  1506  00FF47  53                 	db	83	;'S'
  1507  00FF48  4E                 	db	78	;'N'
  1508  00FF49  53                 	db	83	;'S'
  1509  00FF4A  52                 	db	82	;'R'
  1510  00FF4B  00                 	db	0
  1511  00FF4C                     STR_65:
  1512  00FF4C  54                 	db	84	;'T'
  1513  00FF4D  49                 	db	73	;'I'
  1514  00FF4E  4D                 	db	77	;'M'
  1515  00FF4F  45                 	db	69	;'E'
  1516  00FF50  20                 	db	32
  1517  00FF51  25                 	db	37
  1518  00FF52  64                 	db	100	;'d'
  1519  00FF53  3A                 	db	58	;':'
  1520  00FF54  25                 	db	37
  1521  00FF55  30                 	db	48	;'0'
  1522  00FF56  32                 	db	50	;'2'
  1523  00FF57  64                 	db	100	;'d'
  1524  00FF58  00                 	db	0
  1525  00FF59                     STR_74:
  1526  00FF59  41                 	db	65	;'A'
  1527  00FF5A  4C                 	db	76	;'L'
  1528  00FF5B  47                 	db	71	;'G'
  1529  00FF5C  33                 	db	51	;'3'
  1530  00FF5D  3A                 	db	58	;':'
  1531  00FF5E  20                 	db	32
  1532  00FF5F  31                 	db	49	;'1'
  1533  00FF60  20                 	db	32
  1534  00FF61  43                 	db	67	;'C'
  1535  00FF62  41                 	db	65	;'A'
  1536  00FF63  4E                 	db	78	;'N'
  1537  00FF64  00                 	db	0
  1538  00FF65                     STR_93:
  1539  00FF65  50                 	db	80	;'P'
  1540  00FF66  49                 	db	73	;'I'
  1541  00FF67  4E                 	db	78	;'N'
  1542  00FF68  20                 	db	32
  1543  00FF69  52                 	db	82	;'R'
  1544  00FF6A  41                 	db	65	;'A'
  1545  00FF6B  33                 	db	51	;'3'
  1546  00FF6C  2E                 	db	46
  1547  00FF6D  2E                 	db	46
  1548  00FF6E  2E                 	db	46
  1549  00FF6F  00                 	db	0
  1550  00FF70                     STR_95:
  1551  00FF70  50                 	db	80	;'P'
  1552  00FF71  49                 	db	73	;'I'
  1553  00FF72  4E                 	db	78	;'N'
  1554  00FF73  20                 	db	32
  1555  00FF74  52                 	db	82	;'R'
  1556  00FF75  41                 	db	65	;'A'
  1557  00FF76  34                 	db	52	;'4'
  1558  00FF77  2E                 	db	46
  1559  00FF78  2E                 	db	46
  1560  00FF79  2E                 	db	46
  1561  00FF7A  00                 	db	0
  1562  00FF7B                     STR_64:
  1563  00FF7B  53                 	db	83	;'S'
  1564  00FF7C  4F                 	db	79	;'O'
  1565  00FF7D  52                 	db	82	;'R'
  1566  00FF7E  54                 	db	84	;'T'
  1567  00FF7F  49                 	db	73	;'I'
  1568  00FF80  4E                 	db	78	;'N'
  1569  00FF81  47                 	db	71	;'G'
  1570  00FF82  2E                 	db	46
  1571  00FF83  2E                 	db	46
  1572  00FF84  2E                 	db	46
  1573  00FF85  00                 	db	0
  1574  00FF86                     STR_84:
  1575  00FF86  54                 	db	84	;'T'
  1576  00FF87  53                 	db	83	;'S'
  1577  00FF88  54                 	db	84	;'T'
  1578  00FF89  3A                 	db	58	;':'
  1579  00FF8A  20                 	db	32
  1580  00FF8B  43                 	db	67	;'C'
  1581  00FF8C  4F                 	db	79	;'O'
  1582  00FF8D  4E                 	db	78	;'N'
  1583  00FF8E  44                 	db	68	;'D'
  1584  00FF8F  00                 	db	0
  1585  00FF90                     STR_88:
  1586  00FF90  41                 	db	65	;'A'
  1587  00FF91  43                 	db	67	;'C'
  1588  00FF92  54                 	db	84	;'T'
  1589  00FF93  55                 	db	85	;'U'
  1590  00FF94  41                 	db	65	;'A'
  1591  00FF95  54                 	db	84	;'T'
  1592  00FF96  4F                 	db	79	;'O'
  1593  00FF97  52                 	db	82	;'R'
  1594  00FF98  53                 	db	83	;'S'
  1595  00FF99  00                 	db	0
  1596  00FF9A                     STR_22:
  1597  00FF9A  44                 	db	68	;'D'
  1598  00FF9B  55                 	db	85	;'U'
  1599  00FF9C  52                 	db	82	;'R'
  1600  00FF9D  41                 	db	65	;'A'
  1601  00FF9E  54                 	db	84	;'T'
  1602  00FF9F  49                 	db	73	;'I'
  1603  00FFA0  4F                 	db	79	;'O'
  1604  00FFA1  4E                 	db	78	;'N'
  1605  00FFA2  3A                 	db	58	;':'
  1606  00FFA3  00                 	db	0
  1607  00FFA4                     STR_86:
  1608  00FFA4  43                 	db	67	;'C'
  1609  00FFA5  4F                 	db	79	;'O'
  1610  00FFA6  4E                 	db	78	;'N'
  1611  00FFA7  44                 	db	68	;'D'
  1612  00FFA8  3A                 	db	58	;':'
  1613  00FFA9  20                 	db	32
  1614  00FFAA  25                 	db	37
  1615  00FFAB  64                 	db	100	;'d'
  1616  00FFAC  00                 	db	0
  1617  00FFAD                     STR_77:
  1618  00FFAD  53                 	db	83	;'S'
  1619  00FFAE  45                 	db	69	;'E'
  1620  00FFAF  4E                 	db	78	;'N'
  1621  00FFB0  53                 	db	83	;'S'
  1622  00FFB1  4F                 	db	79	;'O'
  1623  00FFB2  52                 	db	82	;'R'
  1624  00FFB3  53                 	db	83	;'S'
  1625  00FFB4  00                 	db	0
  1626  00FFB5                     STR_128:
  1627  00FFB5  28                 	db	40
  1628  00FFB6  6E                 	db	110	;'n'
  1629  00FFB7  75                 	db	117	;'u'
  1630  00FFB8  6C                 	db	108	;'l'
  1631  00FFB9  6C                 	db	108	;'l'
  1632  00FFBA  29                 	db	41
  1633  00FFBB  00                 	db	0
  1634  00FFBC                     STR_67:
  1635  00FFBC  46                 	db	70	;'F'
  1636  00FFBD  41                 	db	65	;'A'
  1637  00FFBE  49                 	db	73	;'I'
  1638  00FFBF  4C                 	db	76	;'L'
  1639  00FFC0  45                 	db	69	;'E'
  1640  00FFC1  44                 	db	68	;'D'
  1641  00FFC2  00                 	db	0
  1642  00FFC3                     STR_7:
  1643  00FFC3  53                 	db	83	;'S'
  1644  00FFC4  54                 	db	84	;'T'
  1645  00FFC5  41                 	db	65	;'A'
  1646  00FFC6  52                 	db	82	;'R'
  1647  00FFC7  54                 	db	84	;'T'
  1648  00FFC8  3A                 	db	58	;':'
  1649  00FFC9  00                 	db	0
  1650  00FFCA                     STR_9:
  1651  00FFCA  46                 	db	70	;'F'
  1652  00FFCB  45                 	db	69	;'E'
  1653  00FFCC  42                 	db	66	;'B'
  1654  00FFCD  00                 	db	0
  1655  00FFCE                     STR_19:
  1656  00FFCE  44                 	db	68	;'D'
  1657  00FFCF  45                 	db	69	;'E'
  1658  00FFD0  43                 	db	67	;'C'
  1659  00FFD1  00                 	db	0
  1660  00FFD2                     STR_15:
  1661  00FFD2  41                 	db	65	;'A'
  1662  00FFD3  55                 	db	85	;'U'
  1663  00FFD4  47                 	db	71	;'G'
  1664  00FFD5  00                 	db	0
  1665  00FFD6                     STR_14:
  1666  00FFD6  4A                 	db	74	;'J'
  1667  00FFD7  55                 	db	85	;'U'
  1668  00FFD8  4C                 	db	76	;'L'
  1669  00FFD9  00                 	db	0
  1670  00FFDA                     STR_8:
  1671  00FFDA  4A                 	db	74	;'J'
  1672  00FFDB  41                 	db	65	;'A'
  1673  00FFDC  4E                 	db	78	;'N'
  1674  00FFDD  00                 	db	0
  1675  00FFDE                     STR_13:
  1676  00FFDE  4A                 	db	74	;'J'
  1677  00FFDF  55                 	db	85	;'U'
  1678  00FFE0  4E                 	db	78	;'N'
  1679  00FFE1  00                 	db	0
  1680  00FFE2                     STR_16:
  1681  00FFE2  53                 	db	83	;'S'
  1682  00FFE3  45                 	db	69	;'E'
  1683  00FFE4  50                 	db	80	;'P'
  1684  00FFE5  00                 	db	0
  1685  00FFE6                     STR_10:
  1686  00FFE6  4D                 	db	77	;'M'
  1687  00FFE7  41                 	db	65	;'A'
  1688  00FFE8  52                 	db	82	;'R'
  1689  00FFE9  00                 	db	0
  1690  00FFEA                     STR_11:
  1691  00FFEA  41                 	db	65	;'A'
  1692  00FFEB  50                 	db	80	;'P'
  1693  00FFEC  52                 	db	82	;'R'
  1694  00FFED  00                 	db	0
  1695  00FFEE                     STR_20:
  1696  00FFEE  45                 	db	69	;'E'
  1697  00FFEF  52                 	db	82	;'R'
  1698  00FFF0  52                 	db	82	;'R'
  1699  00FFF1  00                 	db	0
  1700  00FFF2                     STR_17:
  1701  00FFF2  4F                 	db	79	;'O'
  1702  00FFF3  43                 	db	67	;'C'
  1703  00FFF4  54                 	db	84	;'T'
  1704  00FFF5  00                 	db	0
  1705  00FFF6                     STR_18:
  1706  00FFF6  4E                 	db	78	;'N'
  1707  00FFF7  4F                 	db	79	;'O'
  1708  00FFF8  56                 	db	86	;'V'
  1709  00FFF9  00                 	db	0
  1710  00FFFA                     STR_12:
  1711  00FFFA  4D                 	db	77	;'M'
  1712  00FFFB  41                 	db	65	;'A'
  1713  00FFFC  59                 	db	89	;'Y'
  1714  00FFFD  00                 	db	0
  1715  0000                     
  1716                           ; #config settings
  1717  00FFFE  00                 	db	0	; dummy byte at the end
  1718  0000                     
  1719                           	psect	cinit
  1720  004F00                     __pcinit:
  1721                           	opt stack 0
  1722  004F00                     start_initialization:
  1723                           	opt stack 0
  1724  004F00                     __initialization:
  1725                           	opt stack 0
  1726                           
  1727                           ; Initialize objects allocated to BANK1 (8 bytes)
  1728                           ; load TBLPTR registers with __pidataBANK1
  1729  004F00  0EA0               	movlw	low __pidataBANK1
  1730  004F02  6EF6               	movwf	tblptrl,c
  1731  004F04  0E56               	movlw	high __pidataBANK1
  1732  004F06  6EF7               	movwf	tblptrh,c
  1733  004F08  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1734  004F0A  6EF8               	movwf	tblptru,c
  1735  004F0C  EE01  F047         	lfsr	0,__pdataBANK1
  1736  004F10  EE10 F008          	lfsr	1,8
  1737  004F14                     copy_data0:
  1738  004F14  0009               	tblrd		*+
  1739  004F16  CFF5 FFEE          	movff	tablat,postinc0
  1740  004F1A  50E5               	movf	postdec1,w,c
  1741  004F1C  50E1               	movf	fsr1l,w,c
  1742  004F1E  E1FA               	bnz	copy_data0
  1743                           
  1744                           ; Clear objects allocated to BANK1 (71 bytes)
  1745  004F20  EE01  F000         	lfsr	0,__pbssBANK1
  1746  004F24  0E47               	movlw	71
  1747  004F26                     clear_0:
  1748  004F26  6AEE               	clrf	postinc0,c
  1749  004F28  06E8               	decf	wreg,f,c
  1750  004F2A  E1FD               	bnz	clear_0
  1751                           
  1752                           ; Clear objects allocated to BANK0 (38 bytes)
  1753  004F2C  EE00  F0DA         	lfsr	0,__pbssBANK0
  1754  004F30  0E26               	movlw	38
  1755  004F32                     clear_1:
  1756  004F32  6AEE               	clrf	postinc0,c
  1757  004F34  06E8               	decf	wreg,f,c
  1758  004F36  E1FD               	bnz	clear_1
  1759                           
  1760                           ; Clear objects allocated to COMRAM (35 bytes)
  1761  004F38  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1762  004F3C  0E23               	movlw	35
  1763  004F3E                     clear_2:
  1764  004F3E  6AEE               	clrf	postinc0,c
  1765  004F40  06E8               	decf	wreg,f,c
  1766  004F42  E1FD               	bnz	clear_2
  1767  004F44                     end_of_initialization:
  1768                           	opt stack 0
  1769  004F44                     __end_of__initialization:
  1770                           	opt stack 0
  1771  004F44  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1772  004F46  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  004F48  0100               	movlb	0
  1774  004F4A  EFB5  F021         	goto	_main	;jump to C main() function
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           	psect	bssCOMRAM
  1785  00005B                     __pbssCOMRAM:
  1786                           	opt stack 0
  1787  00005B                     _back:
  1788                           	opt stack 0
  1789  00005B                     	ds	2
  1790  00005D                     _down:
  1791                           	opt stack 0
  1792  00005D                     	ds	2
  1793  00005F                     _enter:
  1794                           	opt stack 0
  1795  00005F                     	ds	2
  1796  000061                     _f_panning_to_bin:
  1797                           	opt stack 0
  1798  000061                     	ds	2
  1799  000063                     _log_completion:
  1800                           	opt stack 0
  1801  000063                     	ds	2
  1802  000065                     _log_count_pop_no_tab:
  1803                           	opt stack 0
  1804  000065                     	ds	2
  1805  000067                     _log_count_pop_w_tab:
  1806                           	opt stack 0
  1807  000067                     	ds	2
  1808  000069                     _most_recent_sort_time:
  1809                           	opt stack 0
  1810  000069                     	ds	2
  1811  00006B                     _pan_servo_state:
  1812                           	opt stack 0
  1813  00006B                     	ds	2
  1814  00006D                     _servo_timer_counter:
  1815                           	opt stack 0
  1816  00006D                     	ds	2
  1817  00006F                     _servo_timer_target:
  1818                           	opt stack 0
  1819  00006F                     	ds	2
  1820  000071                     _tilt_servo_state:
  1821                           	opt stack 0
  1822  000071                     	ds	2
  1823  000073                     _timer2_counter:
  1824                           	opt stack 0
  1825  000073                     	ds	2
  1826  000075                     _up:
  1827                           	opt stack 0
  1828  000075                     	ds	2
  1829  000077                     _was_low_1:
  1830                           	opt stack 0
  1831  000077                     	ds	2
  1832  000079                     _was_low_2:
  1833                           	opt stack 0
  1834  000079                     	ds	2
  1835  00007B                     _was_low_3:
  1836                           	opt stack 0
  1837  00007B                     	ds	2
  1838  00007D                     _input:
  1839                           	opt stack 0
  1840  00007D                     	ds	1
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           
  1850                           	psect	bssBANK0
  1851  0000DA                     __pbssBANK0:
  1852                           	opt stack 0
  1853  0000DA                     _servoTimes:
  1854                           	opt stack 0
  1855  0000DA                     	ds	8
  1856  0000E2                     _sensor_outputs:
  1857                           	opt stack 0
  1858  0000E2                     	ds	4
  1859  0000E6                     _IR_signal:
  1860                           	opt stack 0
  1861  0000E6                     	ds	2
  1862  0000E8                     _MAG_signal:
  1863                           	opt stack 0
  1864  0000E8                     	ds	2
  1865  0000EA                     _RTCflag:
  1866                           	opt stack 0
  1867  0000EA                     	ds	2
  1868  0000EC                     _cur_state:
  1869                           	opt stack 0
  1870  0000EC                     	ds	2
  1871  0000EE                     _f_arm_position:
  1872                           	opt stack 0
  1873  0000EE                     	ds	2
  1874  0000F0                     _f_lastCan:
  1875                           	opt stack 0
  1876  0000F0                     	ds	2
  1877  0000F2                     _f_loadingNewCan:
  1878                           	opt stack 0
  1879  0000F2                     	ds	2
  1880  0000F4                     _log:
  1881                           	opt stack 0
  1882  0000F4                     	ds	2
  1883  0000F6                     _log_total_time:
  1884                           	opt stack 0
  1885  0000F6                     	ds	2
  1886  0000F8                     _logstate:
  1887                           	opt stack 0
  1888  0000F8                     	ds	2
  1889  0000FA                     _total_time:
  1890                           	opt stack 0
  1891  0000FA                     	ds	2
  1892  0000FC                     _machine_state:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _sel:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898  0000FE                     _count_total:
  1899                           	opt stack 0
  1900  0000FE                     	ds	2
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1l	equ	0xFE1
  1909                           
  1910                           	psect	bssBANK1
  1911  000100                     __pbssBANK1:
  1912                           	opt stack 0
  1913  000100                     _log_startTime:
  1914                           	opt stack 0
  1915  000100                     	ds	14
  1916  00010E                     _startTime:
  1917                           	opt stack 0
  1918  00010E                     	ds	14
  1919  00011C                     _time:
  1920                           	opt stack 0
  1921  00011C                     	ds	7
  1922  000123                     _count_can_no_lab:
  1923                           	opt stack 0
  1924  000123                     	ds	2
  1925  000125                     _count_can_w_lab:
  1926                           	opt stack 0
  1927  000125                     	ds	2
  1928  000127                     _count_pop_no_tab:
  1929                           	opt stack 0
  1930  000127                     	ds	2
  1931  000129                     _count_pop_w_tab:
  1932                           	opt stack 0
  1933  000129                     	ds	2
  1934  00012B                     _cur_can:
  1935                           	opt stack 0
  1936  00012B                     	ds	2
  1937  00012D                     _debug:
  1938                           	opt stack 0
  1939  00012D                     	ds	2
  1940  00012F                     _f_ID_receive:
  1941                           	opt stack 0
  1942  00012F                     	ds	2
  1943  000131                     _f_can_coming_to_ID:
  1944                           	opt stack 0
  1945  000131                     	ds	2
  1946  000133                     _f_can_coming_to_distribution:
  1947                           	opt stack 0
  1948  000133                     	ds	2
  1949  000135                     _f_can_distributed:
  1950                           	opt stack 0
  1951  000135                     	ds	2
  1952  000137                     _f_most_recent_sort_time:
  1953                           	opt stack 0
  1954  000137                     	ds	2
  1955  000139                     _first:
  1956                           	opt stack 0
  1957  000139                     	ds	2
  1958  00013B                     _firstboot:
  1959                           	opt stack 0
  1960  00013B                     	ds	2
  1961  00013D                     _i:
  1962                           	opt stack 0
  1963  00013D                     	ds	2
  1964  00013F                     _log_count_can_no_lab:
  1965                           	opt stack 0
  1966  00013F                     	ds	2
  1967  000141                     _log_count_can_w_lab:
  1968                           	opt stack 0
  1969  000141                     	ds	2
  1970  000143                     _log_count_total:
  1971                           	opt stack 0
  1972  000143                     	ds	2
  1973  000145                     _var:
  1974                           	opt stack 0
  1975  000145                     	ds	2
  1976                           tblptru	equ	0xFF8
  1977                           tblptrh	equ	0xFF7
  1978                           tblptrl	equ	0xFF6
  1979                           tablat	equ	0xFF5
  1980                           postinc0	equ	0xFEE
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  000147                     __pdataBANK1:
  1987                           	opt stack 0
  1988  000147                     UI@F3241:
  1989                           	opt stack 0
  1990  000147                     	ds	4
  1991  00014B                     printRTC@F3231:
  1992                           	opt stack 0
  1993  00014B                     	ds	4
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           
  2003                           	psect	cstackBANK0
  2004  000080                     __pcstackBANK0:
  2005                           	opt stack 0
  2006  000080                     ??_delay_ms:
  2007  000080                     ??_isdigit:
  2008  000080                     ??_readADC:
  2009  000080                     ??_I2C_Master_Wait:
  2010  000080                     ?___wmul:
  2011                           	opt stack 0
  2012  000080                     ?___awmod:
  2013                           	opt stack 0
  2014  000080                     ?___lwdiv:
  2015                           	opt stack 0
  2016  000080                     ?___lldiv:
  2017                           	opt stack 0
  2018  000080                     lcdNibble@temp:
  2019                           	opt stack 0
  2020  000080                     initTime@m:
  2021                           	opt stack 0
  2022  000080                     updateServoPosition@time_us:
  2023                           	opt stack 0
  2024  000080                     EEPROM_read@address:
  2025                           	opt stack 0
  2026  000080                     ___wmul@multiplier:
  2027                           	opt stack 0
  2028  000080                     ___awmod@dividend:
  2029                           	opt stack 0
  2030  000080                     ___lwdiv@dividend:
  2031                           	opt stack 0
  2032  000080                     strcpy@to:
  2033                           	opt stack 0
  2034  000080                     ___lldiv@dividend:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x0
  2038  000080                     	ds	1
  2039  000081                     readADC@channel:
  2040                           	opt stack 0
  2041  000081                     I2C_Master_Read@a:
  2042                           	opt stack 0
  2043  000081                     lcdNibble@data:
  2044                           	opt stack 0
  2045  000081                     initTime@h:
  2046                           	opt stack 0
  2047  000081                     delay_ms@milliseconds:
  2048                           	opt stack 0
  2049  000081                     _isdigit$2056:
  2050                           	opt stack 0
  2051  000081                     I2C_Master_Write@d:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x1
  2055  000081                     	ds	1
  2056  000082                     ??_ID:
  2057  000082                     ??_readIR:
  2058  000082                     ??_readMAG:
  2059  000082                     I2C_Master_Read@temp:
  2060                           	opt stack 0
  2061  000082                     lcdInst@data:
  2062                           	opt stack 0
  2063  000082                     putch@data:
  2064                           	opt stack 0
  2065  000082                     initTime@w:
  2066                           	opt stack 0
  2067  000082                     isdigit@c:
  2068                           	opt stack 0
  2069  000082                     updateServoPosition@timer:
  2070                           	opt stack 0
  2071  000082                     ___wmul@multiplicand:
  2072                           	opt stack 0
  2073  000082                     ___awmod@divisor:
  2074                           	opt stack 0
  2075  000082                     ___lwdiv@divisor:
  2076                           	opt stack 0
  2077  000082                     strcpy@from:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x2
  2081  000082                     	ds	1
  2082  000083                     ??_initLCD:
  2083  000083                     initTime@DD:
  2084                           	opt stack 0
  2085  000083                     getRTC@i:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x3
  2089  000083                     	ds	1
  2090  000084                     ??_updateServoPosition:
  2091  000084                     initTime@MM:
  2092                           	opt stack 0
  2093  000084                     ___awmod@counter:
  2094                           	opt stack 0
  2095  000084                     readIR@res:
  2096                           	opt stack 0
  2097  000084                     readMAG@res:
  2098                           	opt stack 0
  2099  000084                     ID@i:
  2100                           	opt stack 0
  2101  000084                     ___wmul@product:
  2102                           	opt stack 0
  2103  000084                     ___lwdiv@quotient:
  2104                           	opt stack 0
  2105  000084                     strcpy@cp:
  2106                           	opt stack 0
  2107  000084                     ___lldiv@divisor:
  2108                           	opt stack 0
  2109                           
  2110                           ; 4 bytes @ 0x4
  2111  000084                     	ds	1
  2112  000085                     ??_initSortTimer:
  2113  000085                     initTime@YY:
  2114                           	opt stack 0
  2115  000085                     ___awmod@sign:
  2116                           	opt stack 0
  2117                           
  2118                           ; 1 bytes @ 0x5
  2119  000085                     	ds	1
  2120  000086                     ??_getIR:
  2121  000086                     ??_getMAG:
  2122  000086                     ?___awdiv:
  2123                           	opt stack 0
  2124  000086                     initTime@s:
  2125                           	opt stack 0
  2126  000086                     ___lwdiv@counter:
  2127                           	opt stack 0
  2128  000086                     ID@i_1181:
  2129                           	opt stack 0
  2130  000086                     updateServoPosition@my_time:
  2131                           	opt stack 0
  2132  000086                     ___awdiv@dividend:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x6
  2136  000086                     	ds	1
  2137  000087                     ?___lwmod:
  2138                           	opt stack 0
  2139  000087                     getIR@i:
  2140                           	opt stack 0
  2141  000087                     ___lwmod@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x7
  2145  000087                     	ds	1
  2146  000088                     ??_Distribution:
  2147  000088                     ??_initServos:
  2148  000088                     ID@i_1182:
  2149                           	opt stack 0
  2150  000088                     initSortTimer@i:
  2151                           	opt stack 0
  2152  000088                     ___awdiv@divisor:
  2153                           	opt stack 0
  2154  000088                     ___lldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x8
  2158  000088                     	ds	1
  2159  000089                     ___lwmod@divisor:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x9
  2163  000089                     	ds	1
  2164  00008A                     ___awdiv@counter:
  2165                           	opt stack 0
  2166                           
  2167                           ; 1 bytes @ 0xA
  2168  00008A                     	ds	1
  2169  00008B                     ___awdiv@sign:
  2170                           	opt stack 0
  2171  00008B                     ___lwmod@counter:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0xB
  2175  00008B                     	ds	1
  2176  00008C                     ___lldiv@counter:
  2177                           	opt stack 0
  2178  00008C                     ___awdiv@quotient:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0xC
  2182  00008C                     	ds	1
  2183  00008D                     I2C_Master_Init@c:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xD
  2187  00008D                     	ds	1
  2188  00008E                     ?_printf:
  2189                           	opt stack 0
  2190  00008E                     printf@f:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0xE
  2194  00008E                     	ds	3
  2195  000091                     ??_I2C_Master_Init:
  2196                           
  2197                           ; 1 bytes @ 0x11
  2198  000091                     	ds	4
  2199  000095                     ??_loadRTC:
  2200                           
  2201                           ; 1 bytes @ 0x15
  2202  000095                     	ds	1
  2203  000096                     loadRTC@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x16
  2207  000096                     	ds	4
  2208  00009A                     ??_printf:
  2209                           
  2210                           ; 1 bytes @ 0x1A
  2211  00009A                     	ds	4
  2212  00009E                     printf@prec:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x1E
  2216  00009E                     	ds	1
  2217  00009F                     printf@cp:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x1F
  2221  00009F                     	ds	2
  2222  0000A1                     printf@ap:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x21
  2226  0000A1                     	ds	2
  2227  0000A3                     printf@len:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x23
  2231  0000A3                     	ds	2
  2232  0000A5                     printf@val:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x25
  2236  0000A5                     	ds	2
  2237  0000A7                     printf@flag:
  2238                           	opt stack 0
  2239                           
  2240                           ; 1 bytes @ 0x27
  2241  0000A7                     	ds	1
  2242  0000A8                     printf@c:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x28
  2246  0000A8                     	ds	1
  2247  0000A9                     printf@width:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x29
  2251  0000A9                     	ds	2
  2252  0000AB                     ??_printRTC:
  2253  0000AB                     ??_algorithmTest:
  2254  0000AB                     ??_sensorTest:
  2255  0000AB                     ??_actuatorTest:
  2256  0000AB                     ??_arm:
  2257  0000AB                     ??_PortTestDC:
  2258  0000AB                     ??_SpeedTest:
  2259  0000AB                     ??_PortTestPusher:
  2260  0000AB                     ??_PlatformTest:
  2261  0000AB                     ??_BothServos:
  2262  0000AB                     ??_BlockerTest:
  2263  0000AB                     EEPROM_write@address:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x2B
  2267  0000AB                     	ds	1
  2268  0000AC                     BlockerTest@i:
  2269                           	opt stack 0
  2270  0000AC                     arm@on:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x2C
  2274  0000AC                     	ds	1
  2275  0000AD                     EEPROM_write@data:
  2276                           	opt stack 0
  2277  0000AD                     actuatorTest@i_1730:
  2278                           	opt stack 0
  2279  0000AD                     sensorTest@res:
  2280                           	opt stack 0
  2281  0000AD                     PlatformTest@res:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x2D
  2285  0000AD                     	ds	1
  2286  0000AE                     ??_EEPROM_write:
  2287  0000AE                     actuatorTest@i_1737:
  2288                           	opt stack 0
  2289  0000AE                     BlockerTest@cam_flag:
  2290                           	opt stack 0
  2291  0000AE                     printRTC@INT_time:
  2292                           	opt stack 0
  2293                           
  2294                           ; 14 bytes @ 0x2E
  2295  0000AE                     	ds	1
  2296  0000AF                     EEPROM_write@i:
  2297                           	opt stack 0
  2298  0000AF                     actuatorTest@i_1738:
  2299                           	opt stack 0
  2300  0000AF                     PlatformTest@res_1781:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x2F
  2304  0000AF                     	ds	1
  2305  0000B0                     EEPROM_write@i_1436:
  2306                           	opt stack 0
  2307  0000B0                     actuatorTest@i_1740:
  2308                           	opt stack 0
  2309  0000B0                     BlockerTest@cond_flag:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x30
  2313  0000B0                     	ds	1
  2314  0000B1                     ??_Loading:
  2315  0000B1                     logRun@num:
  2316                           	opt stack 0
  2317  0000B1                     actuatorTest@i_1741:
  2318                           	opt stack 0
  2319  0000B1                     PlatformTest@i:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x31
  2323  0000B1                     	ds	1
  2324  0000B2                     logRun@byte1:
  2325                           	opt stack 0
  2326  0000B2                     actuatorTest@i_1743:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x32
  2330  0000B2                     	ds	1
  2331  0000B3                     logRun@byte2:
  2332                           	opt stack 0
  2333  0000B3                     actuatorTest@i_1744:
  2334                           	opt stack 0
  2335  0000B3                     Loading@addr:
  2336                           	opt stack 0
  2337  0000B3                     PlatformTest@i_1784:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x33
  2341  0000B3                     	ds	1
  2342  0000B4                     logRun@byte3:
  2343                           	opt stack 0
  2344  0000B4                     actuatorTest@i_1746:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x34
  2348  0000B4                     	ds	1
  2349  0000B5                     Loading@byte1:
  2350                           	opt stack 0
  2351  0000B5                     logRun@byte_i:
  2352                           	opt stack 0
  2353  0000B5                     actuatorTest@i_1747:
  2354                           	opt stack 0
  2355  0000B5                     PlatformTest@on:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x35
  2359  0000B5                     	ds	1
  2360  0000B6                     logRun@byte11:
  2361                           	opt stack 0
  2362  0000B6                     actuatorTest@i_1749:
  2363                           	opt stack 0
  2364  0000B6                     Loading@i_1156:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x36
  2368  0000B6                     	ds	1
  2369  0000B7                     actuatorTest@i_1750:
  2370                           	opt stack 0
  2371  0000B7                     logRun@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x37
  2375  0000B7                     	ds	1
  2376  0000B8                     actuatorTest@i_1752:
  2377                           	opt stack 0
  2378  0000B8                     Loading@i_1165:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x38
  2382  0000B8                     	ds	1
  2383  0000B9                     actuatorTest@i_1753:
  2384                           	opt stack 0
  2385  0000B9                     logRun@addr:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x39
  2389  0000B9                     	ds	1
  2390  0000BA                     actuatorTest@i_1756:
  2391                           	opt stack 0
  2392  0000BA                     Loading@i_1167:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x3A
  2396  0000BA                     	ds	1
  2397  0000BB                     actuatorTest@i_1757:
  2398                           	opt stack 0
  2399                           
  2400                           ; 1 bytes @ 0x3B
  2401  0000BB                     	ds	1
  2402  0000BC                     actuatorTest@i_1759:
  2403                           	opt stack 0
  2404  0000BC                     printRTC@RTC_month:
  2405                           	opt stack 0
  2406  0000BC                     Loading@i_1168:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x3C
  2410  0000BC                     	ds	1
  2411  0000BD                     actuatorTest@i_1760:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x3D
  2415  0000BD                     	ds	1
  2416  0000BE                     actuatorTest@i_1762:
  2417                           	opt stack 0
  2418  0000BE                     Loading@i_1170:
  2419                           	opt stack 0
  2420  0000BE                     printRTC@month:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x3E
  2424  0000BE                     	ds	1
  2425  0000BF                     actuatorTest@i_1763:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x3F
  2429  0000BF                     	ds	1
  2430  0000C0                     actuatorTest@i_1766:
  2431                           	opt stack 0
  2432  0000C0                     Loading@j:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x40
  2436  0000C0                     	ds	1
  2437  0000C1                     actuatorTest@i_1767:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x41
  2441  0000C1                     	ds	1
  2442  0000C2                     actuatorTest@i_1769:
  2443                           	opt stack 0
  2444  0000C2                     printRTC@i:
  2445                           	opt stack 0
  2446  0000C2                     Loading@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x42
  2450  0000C2                     	ds	1
  2451  0000C3                     actuatorTest@i_1770:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x43
  2455  0000C3                     	ds	1
  2456  0000C4                     ??_UI:
  2457  0000C4                     actuatorTest@i:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x44
  2461  0000C4                     	ds	2
  2462  0000C6                     ??_Test:
  2463  0000C6                     _UI$2419:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x46
  2467  0000C6                     	ds	2
  2468  0000C8                     UI@i:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x48
  2472  0000C8                     	ds	1
  2473  0000C9                     UI@i_409:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x49
  2477  0000C9                     	ds	1
  2478  0000CA                     UI@i_412:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x4A
  2482  0000CA                     	ds	1
  2483  0000CB                     UI@i_413:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x4B
  2487  0000CB                     	ds	1
  2488  0000CC                     UI@i_431:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x4C
  2492  0000CC                     	ds	1
  2493  0000CD                     UI@i_432:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x4D
  2497  0000CD                     	ds	1
  2498  0000CE                     UI@i_435:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x4E
  2502  0000CE                     	ds	1
  2503  0000CF                     UI@i_436:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x4F
  2507  0000CF                     	ds	1
  2508  0000D0                     UI@i_439:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x50
  2512  0000D0                     	ds	1
  2513  0000D1                     UI@i_440:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x51
  2517  0000D1                     	ds	1
  2518  0000D2                     UI@i_443:
  2519                           	opt stack 0
  2520                           
  2521                           ; 1 bytes @ 0x52
  2522  0000D2                     	ds	1
  2523  0000D3                     UI@i_444:
  2524                           	opt stack 0
  2525                           
  2526                           ; 1 bytes @ 0x53
  2527  0000D3                     	ds	1
  2528  0000D4                     UI@i_447:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x54
  2532  0000D4                     	ds	1
  2533  0000D5                     UI@i_448:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x55
  2537  0000D5                     	ds	1
  2538  0000D6                     UI@month:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x56
  2542  0000D6                     	ds	4
  2543  0000DA                     tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postdec1	equ	0xFE5
  2550                           fsr1l	equ	0xFE1
  2551                           
  2552                           ; 1 bytes @ 0x5A
  2553                           
  2554                           	psect	cstackCOMRAM
  2555  000001                     __pcstackCOMRAM:
  2556                           	opt stack 0
  2557  000001                     ??_updateArmState:
  2558  000001                     ??i2_I2C_Master_Wait:
  2559  000001                     ??i2_delay_ms:
  2560  000001                     ??i2_isdigit:
  2561  000001                     ?i2___wmul:
  2562                           	opt stack 0
  2563  000001                     ?i2___lwmod:
  2564                           	opt stack 0
  2565  000001                     i2lcdNibble@temp:
  2566                           	opt stack 0
  2567  000001                     i2updateServoPosition@time_us:
  2568                           	opt stack 0
  2569  000001                     i2EEPROM_read@address:
  2570                           	opt stack 0
  2571  000001                     i2___wmul@multiplier:
  2572                           	opt stack 0
  2573  000001                     i2___lwmod@dividend:
  2574                           	opt stack 0
  2575  000001                     i2strcpy@to:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x0
  2579  000001                     	ds	1
  2580  000002                     i2I2C_Master_Read@a:
  2581                           	opt stack 0
  2582  000002                     i2lcdNibble@data:
  2583                           	opt stack 0
  2584  000002                     i2delay_ms@milliseconds:
  2585                           	opt stack 0
  2586  000002                     i2_isdigit$2056:
  2587                           	opt stack 0
  2588  000002                     i2I2C_Master_Write@d:
  2589                           	opt stack 0
  2590                           
  2591                           ; 2 bytes @ 0x1
  2592  000002                     	ds	1
  2593  000003                     i2I2C_Master_Read@temp:
  2594                           	opt stack 0
  2595  000003                     i2lcdInst@data:
  2596                           	opt stack 0
  2597  000003                     i2putch@data:
  2598                           	opt stack 0
  2599  000003                     i2isdigit@c:
  2600                           	opt stack 0
  2601  000003                     i2updateServoPosition@timer:
  2602                           	opt stack 0
  2603  000003                     i2___wmul@multiplicand:
  2604                           	opt stack 0
  2605  000003                     i2___lwmod@divisor:
  2606                           	opt stack 0
  2607  000003                     i2strcpy@from:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x2
  2611  000003                     	ds	1
  2612  000004                     i2getRTC@i:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x3
  2616  000004                     	ds	1
  2617  000005                     ??i2_updateServoPosition:
  2618  000005                     i2___lwmod@counter:
  2619                           	opt stack 0
  2620  000005                     i2___wmul@product:
  2621                           	opt stack 0
  2622  000005                     i2strcpy@cp:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x4
  2626  000005                     	ds	1
  2627  000006                     ?i2___lwdiv:
  2628                           	opt stack 0
  2629  000006                     i2___lwdiv@dividend:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x5
  2633  000006                     	ds	1
  2634  000007                     retrieveLog@logNum:
  2635                           	opt stack 0
  2636  000007                     i2updateServoPosition@my_time:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x6
  2640  000007                     	ds	1
  2641  000008                     i2___lwdiv@divisor:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x7
  2645  000008                     	ds	1
  2646  000009                     ??_retrieveLog:
  2647  000009                     ??_updateServoStates:
  2648                           
  2649                           ; 1 bytes @ 0x8
  2650  000009                     	ds	1
  2651  00000A                     i2___lwdiv@quotient:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x9
  2655  00000A                     	ds	1
  2656  00000B                     retrieveLog@byte1:
  2657                           	opt stack 0
  2658                           
  2659                           ; 1 bytes @ 0xA
  2660  00000B                     	ds	1
  2661  00000C                     retrieveLog@byte2:
  2662                           	opt stack 0
  2663  00000C                     i2___lwdiv@counter:
  2664                           	opt stack 0
  2665                           
  2666                           ; 1 bytes @ 0xB
  2667  00000C                     	ds	1
  2668  00000D                     ?i2_printf:
  2669                           	opt stack 0
  2670  00000D                     retrieveLog@byte3:
  2671                           	opt stack 0
  2672  00000D                     i2printf@f:
  2673                           	opt stack 0
  2674                           
  2675                           ; 2 bytes @ 0xC
  2676  00000D                     	ds	1
  2677  00000E                     retrieveLog@i:
  2678                           	opt stack 0
  2679                           
  2680                           ; 2 bytes @ 0xD
  2681  00000E                     	ds	2
  2682  000010                     retrieveLog@addr:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0xF
  2686  000010                     	ds	2
  2687  000012                     dispLogs@myLog:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x11
  2691  000012                     	ds	2
  2692  000014                     
  2693                           ; 1 bytes @ 0x13
  2694  000014                     	ds	5
  2695  000019                     ??i2_printf:
  2696                           
  2697                           ; 1 bytes @ 0x18
  2698  000019                     	ds	4
  2699  00001D                     i2printf@prec:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x1C
  2703  00001D                     	ds	1
  2704  00001E                     i2printf@cp:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x1D
  2708  00001E                     	ds	2
  2709  000020                     i2printf@ap:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x1F
  2713  000020                     	ds	2
  2714  000022                     i2printf@len:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x21
  2718  000022                     	ds	2
  2719  000024                     i2printf@val:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x23
  2723  000024                     	ds	2
  2724  000026                     i2printf@flag:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0x25
  2728  000026                     	ds	1
  2729  000027                     i2printf@c:
  2730                           	opt stack 0
  2731                           
  2732                           ; 1 bytes @ 0x26
  2733  000027                     	ds	1
  2734  000028                     i2printf@width:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x27
  2738  000028                     	ds	2
  2739  00002A                     ??_printSortTimer:
  2740  00002A                     ??i2_printRTC:
  2741  00002A                     ?_inputHandler:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x29
  2745  00002A                     	ds	2
  2746  00002C                     ??_inputHandler:
  2747                           
  2748                           ; 1 bytes @ 0x2B
  2749  00002C                     	ds	1
  2750  00002D                     printSortTimer@curTime:
  2751                           	opt stack 0
  2752  00002D                     i2printRTC@INT_time:
  2753                           	opt stack 0
  2754                           
  2755                           ; 14 bytes @ 0x2C
  2756  00002D                     	ds	14
  2757  00003B                     printSortTimer@start_sec:
  2758                           	opt stack 0
  2759  00003B                     i2printRTC@RTC_month:
  2760                           	opt stack 0
  2761                           
  2762                           ; 2 bytes @ 0x3A
  2763  00003B                     	ds	2
  2764  00003D                     printSortTimer@cur_sec:
  2765                           	opt stack 0
  2766  00003D                     i2printRTC@month:
  2767                           	opt stack 0
  2768                           
  2769                           ; 4 bytes @ 0x3C
  2770  00003D                     	ds	2
  2771  00003F                     printSortTimer@min:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x3E
  2775  00003F                     	ds	2
  2776  000041                     printSortTimer@sec:
  2777                           	opt stack 0
  2778  000041                     i2printRTC@i:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x40
  2782  000041                     	ds	2
  2783  000043                     ??_updateMenu:
  2784  000043                     _printSortTimer$2551:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x42
  2788  000043                     	ds	2
  2789  000045                     printSortTimer@timeDiff:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x44
  2793  000045                     	ds	2
  2794  000047                     printSortTimer@i_1194:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x46
  2798  000047                     	ds	2
  2799  000049                     printSortTimer@i:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x48
  2803  000049                     	ds	2
  2804  00004B                     ??_handler:
  2805                           
  2806                           ; 1 bytes @ 0x4A
  2807  00004B                     	ds	16
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           
  2817 ;;
  2818 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2819 ;;
  2820 ;; *************** function _main *****************
  2821 ;; Defined at:
  2822 ;;		line 19 in file "main.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;Total ram usage:        0 bytes
  2841 ;; Hardware stack levels required when called:   13
  2842 ;; This function calls:
  2843 ;;		_I2C_Master_Init
  2844 ;;		_Test
  2845 ;;		_UI
  2846 ;;		_initLCD
  2847 ;;		_initTime
  2848 ;;		_initUI
  2849 ;;		_logRun
  2850 ;;		_machineConfig
  2851 ;;		_sort
  2852 ;;		_stopSignals
  2853 ;; This function is called by:
  2854 ;;		Startup code after reset
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text0
  2859  00436A                     __ptext0:
  2860                           	opt stack 0
  2861  00436A                     _main:
  2862                           	opt stack 18
  2863                           
  2864                           ;main.c: 20: machineConfig();
  2865                           
  2866                           ;incstack = 0
  2867  00436A  EC3D  F026         	call	_machineConfig	;wreg free
  2868                           
  2869                           ;main.c: 21: initLCD();
  2870  00436E  ECF3  F027         	call	_initLCD	;wreg free
  2871                           
  2872                           ;main.c: 24: RTCflag = 0;
  2873  004372  0E00               	movlw	0
  2874  004374  0100               	movlb	0	; () banked
  2875  004376  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2876  004378  0E00               	movlw	0
  2877  00437A  6FEA               	movwf	_RTCflag& (0+255),b
  2878                           
  2879                           ;main.c: 25: if(RTCflag){
  2880  00437C  0100               	movlb	0	; () banked
  2881  00437E  51EA               	movf	_RTCflag& (0+255),w,b
  2882  004380  0100               	movlb	0	; () banked
  2883  004382  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2884  004384  B4D8               	btfsc	status,2,c
  2885  004386  D016               	goto	l9700
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2889  004388  0E47               	movlw	71
  2890  00438A  0100               	movlb	0	; () banked
  2891  00438C  6F80               	movwf	initTime@m& (0+255),b
  2892  00438E  0E17               	movlw	23
  2893  004390  0100               	movlb	0	; () banked
  2894  004392  6F81               	movwf	initTime@h& (0+255),b
  2895  004394  0E07               	movlw	7
  2896  004396  0100               	movlb	0	; () banked
  2897  004398  6F82               	movwf	initTime@w& (0+255),b
  2898  00439A  0E08               	movlw	8
  2899  00439C  0100               	movlb	0	; () banked
  2900  00439E  6F83               	movwf	initTime@DD& (0+255),b
  2901  0043A0  0E04               	movlw	4
  2902  0043A2  0100               	movlb	0	; () banked
  2903  0043A4  6F84               	movwf	initTime@MM& (0+255),b
  2904  0043A6  0E17               	movlw	23
  2905  0043A8  0100               	movlb	0	; () banked
  2906  0043AA  6F85               	movwf	initTime@YY& (0+255),b
  2907  0043AC  0E42               	movlw	66
  2908  0043AE  ECC4  F02A         	call	_initTime
  2909                           
  2910                           ;main.c: 27: }
  2911  0043B2  D00B               	goto	l9702
  2912  0043B4                     l9700:
  2913                           
  2914                           ;main.c: 28: else{
  2915                           ;main.c: 29: I2C_Master_Init(10000);
  2916  0043B4  0E10               	movlw	16
  2917  0043B6  0100               	movlb	0	; () banked
  2918  0043B8  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2919  0043BA  0E27               	movlw	39
  2920  0043BC  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2921  0043BE  0E00               	movlw	0
  2922  0043C0  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2923  0043C2  0E00               	movlw	0
  2924  0043C4  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2925  0043C6  ECA0  F026         	call	_I2C_Master_Init	;wreg free
  2926  0043CA                     l9702:
  2927                           
  2928                           ;main.c: 30: }
  2929                           ;main.c: 32: initUI();
  2930  0043CA  ECF4  F028         	call	_initUI	;wreg free
  2931                           
  2932                           ;main.c: 33: first = 1;
  2933  0043CE  0E00               	movlw	0
  2934  0043D0  0101               	movlb	1	; () banked
  2935  0043D2  6F3A               	movwf	(_first+1)& (0+255),b
  2936  0043D4  0E01               	movlw	1
  2937  0043D6  6F39               	movwf	_first& (0+255),b
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;main.c: 44: switch(machine_state){
  2941                           
  2942                           ;main.c: 43: while(1){
  2943  0043D8  D018               	goto	l9724
  2944  0043DA                     l9706:
  2945                           
  2946                           ;main.c: 46: UI();
  2947  0043DA  EC09  F000         	call	_UI	;wreg free
  2948                           
  2949                           ;main.c: 47: break;
  2950  0043DE  D015               	goto	l9724
  2951  0043E0                     l9708:
  2952                           
  2953                           ;main.c: 49: sort();
  2954  0043E0  ECB3  F02A         	call	_sort	;wreg free
  2955                           
  2956                           ;main.c: 50: break;
  2957  0043E4  D012               	goto	l9724
  2958  0043E6                     l9710:
  2959                           
  2960                           ;main.c: 52: stopSignals();
  2961  0043E6  ECE4  F02A         	call	_stopSignals	;wreg free
  2962                           
  2963                           ;main.c: 53: logRun();
  2964  0043EA  EC31  F01E         	call	_logRun	;wreg free
  2965                           
  2966                           ;main.c: 54: first = 1;
  2967  0043EE  0E00               	movlw	0
  2968  0043F0  0101               	movlb	1	; () banked
  2969  0043F2  6F3A               	movwf	(_first+1)& (0+255),b
  2970  0043F4  0E01               	movlw	1
  2971  0043F6  6F39               	movwf	_first& (0+255),b
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 55: UI();
  2975  0043F8  EC09  F000         	call	_UI	;wreg free
  2976                           
  2977                           ;main.c: 56: break;
  2978  0043FC  D006               	goto	l9724
  2979  0043FE                     l9718:
  2980                           
  2981                           ;main.c: 58: Test();
  2982  0043FE  EC63  F01F         	call	_Test	;wreg free
  2983                           
  2984                           ;main.c: 59: break;
  2985  004402  D003               	goto	l9724
  2986  004404                     l9720:
  2987                           
  2988                           ;main.c: 61: stopSignals();
  2989  004404  ECE4  F02A         	call	_stopSignals	;wreg free
  2990  004408                     l499:
  2991  004408  D7FF               	goto	l499
  2992  00440A                     l9724:
  2993  00440A  0100               	movlb	0	; () banked
  2994  00440C  51FC               	movf	_machine_state& (0+255),w,b
  2995                           
  2996                           ; Switch size 1, requested type "space"
  2997                           ; Number of cases is 5, Range of values is 0 to 4
  2998                           ; switch strategies available:
  2999                           ; Name         Instructions Cycles
  3000                           ; simple_byte           16     9 (average)
  3001                           ;	Chosen strategy is simple_byte
  3002  00440E  0A00               	xorlw	0	; case 0
  3003  004410  B4D8               	btfsc	status,2,c
  3004  004412  D7E3               	goto	l9706
  3005  004414  0A01               	xorlw	1	; case 1
  3006  004416  B4D8               	btfsc	status,2,c
  3007  004418  D7E3               	goto	l9708
  3008  00441A  0A03               	xorlw	3	; case 2
  3009  00441C  B4D8               	btfsc	status,2,c
  3010  00441E  D7E3               	goto	l9710
  3011  004420  0A01               	xorlw	1	; case 3
  3012  004422  B4D8               	btfsc	status,2,c
  3013  004424  D7EC               	goto	l9718
  3014  004426  0A07               	xorlw	7	; case 4
  3015  004428  B4D8               	btfsc	status,2,c
  3016  00442A  D7EC               	goto	l9720
  3017                           
  3018                           ; BSR set to: 0
  3019                           
  3020                           ; BSR set to: 0
  3021  00442C  D7EE               	goto	l9724
  3022  00442E                     __end_of_main:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1l	equ	0xFE1
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _sort *****************
  3035 ;; Defined at:
  3036 ;;		line 66 in file "sort.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   12
  3057 ;; This function calls:
  3058 ;;		_Distribution
  3059 ;;		_ID
  3060 ;;		_Loading
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text1
  3067  005566                     __ptext1:
  3068                           	opt stack 0
  3069  005566                     _sort:
  3070                           	opt stack 18
  3071                           
  3072                           ;sort.c: 67: if(machine_state == Sorting_state){
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;incstack = 0
  3076  005566  0100               	movlb	0	; () banked
  3077  005568  05FC               	decf	_machine_state& (0+255),w,b
  3078  00556A  B4D8               	btfsc	status,2,c
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;sort.c: 68: Loading();
  3082  00556C  ECC7  F008         	call	_Loading	;wreg free
  3083                           
  3084                           ;sort.c: 69: }
  3085                           ;sort.c: 70: if(machine_state == Sorting_state){
  3086  005570  0100               	movlb	0	; () banked
  3087  005572  05FC               	decf	_machine_state& (0+255),w,b
  3088  005574  B4D8               	btfsc	status,2,c
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;sort.c: 71: ID();
  3092  005576  EC48  F018         	call	_ID	;wreg free
  3093                           
  3094                           ;sort.c: 72: }
  3095                           ;sort.c: 73: if(machine_state == Sorting_state){
  3096  00557A  0100               	movlb	0	; () banked
  3097  00557C  05FC               	decf	_machine_state& (0+255),w,b
  3098  00557E  A4D8               	btfss	status,2,c
  3099  005580  0012               	return	
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;sort.c: 74: Distribution();
  3103  005582  ECD9  F020         	call	_Distribution	;wreg free
  3104  005586  0012               	return	
  3105  005588                     __end_of_sort:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           postdec1	equ	0xFE5
  3114                           fsr1l	equ	0xFE1
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _Loading *****************
  3118 ;; Defined at:
  3119 ;;		line 78 in file "sort.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  i               2   62[BANK0 ] int 
  3124 ;;  i               2   60[BANK0 ] int 
  3125 ;;  i               2   58[BANK0 ] int 
  3126 ;;  i               2   56[BANK0 ] int 
  3127 ;;  i               2   54[BANK0 ] int 
  3128 ;;  j               2   64[BANK0 ] int 
  3129 ;;  i               2   66[BANK0 ] int 
  3130 ;;  addr            2   51[BANK0 ] unsigned short 
  3131 ;;  byte1           1   53[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;Total ram usage:       19 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:   11
  3148 ;; This function calls:
  3149 ;;		_EEPROM_read
  3150 ;;		_EEPROM_write
  3151 ;;		_delay_ms
  3152 ;;		_getIR
  3153 ;;		_getMAG
  3154 ;;		_initGlobalVars
  3155 ;;		_initServos
  3156 ;;		_initSortTimer
  3157 ;;		_lcdInst
  3158 ;;		_readIR
  3159 ;; This function is called by:
  3160 ;;		_sort
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text2
  3165  00118E                     __ptext2:
  3166                           	opt stack 0
  3167  00118E                     _Loading:
  3168                           	opt stack 18
  3169                           
  3170                           ;sort.c: 79: if(first){
  3171                           
  3172                           ;incstack = 0
  3173  00118E  0101               	movlb	1	; () banked
  3174  001190  5139               	movf	_first& (0+255),w,b
  3175  001192  0101               	movlb	1	; () banked
  3176  001194  113A               	iorwf	(_first+1)& (0+255),w,b
  3177  001196  B4D8               	btfsc	status,2,c
  3178  001198  D066               	goto	l7470
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;sort.c: 80: initGlobalVars();
  3182  00119A  EC17  F022         	call	_initGlobalVars	;wreg free
  3183                           
  3184                           ;sort.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3185  00119E  0E01               	movlw	1
  3186  0011A0  EC32  F02B         	call	_lcdInst
  3187  0011A4  0E68               	movlw	104
  3188  0011A6  0100               	movlb	0	; () banked
  3189  0011A8  6FB1               	movwf	??_Loading& (0+255),b
  3190  0011AA  0EE4               	movlw	228
  3191  0011AC                     u9117:
  3192  0011AC  2EE8               	decfsz	wreg,f,c
  3193  0011AE  D7FE               	bra	u9117
  3194  0011B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3195  0011B2  D7FC               	bra	u9117
  3196  0011B4  F000               	nop	
  3197                           
  3198                           ;sort.c: 82: initSortTimer();
  3199  0011B6  EC33  F023         	call	_initSortTimer	;wreg free
  3200                           
  3201                           ;sort.c: 83: LATCbits.LATC5 = 1;
  3202  0011BA  8A8B               	bsf	3979,5,c	;volatile
  3203                           
  3204                           ;sort.c: 88: sel = EEPROM_read(0);
  3205  0011BC  0E00               	movlw	0
  3206  0011BE  0100               	movlb	0	; () banked
  3207  0011C0  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3208  0011C2  0E00               	movlw	0
  3209  0011C4  6F80               	movwf	EEPROM_read@address& (0+255),b
  3210  0011C6  EC00  F02B         	call	_EEPROM_read	;wreg free
  3211  0011CA  0100               	movlb	0	; () banked
  3212  0011CC  6FFD               	movwf	_sel& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 89: unsigned short addr = 1 + 11 * sel;
  3216  0011CE  0100               	movlb	0	; () banked
  3217  0011D0  51FD               	movf	_sel& (0+255),w,b
  3218  0011D2  0D0B               	mullw	11
  3219  0011D4  0E01               	movlw	1
  3220  0011D6  24F3               	addwf	prodl,w,c
  3221  0011D8  0100               	movlb	0	; () banked
  3222  0011DA  6FB3               	movwf	Loading@addr& (0+255),b
  3223  0011DC  0E00               	movlw	0
  3224  0011DE  20F4               	addwfc	prodh,w,c
  3225  0011E0  0100               	movlb	0	; () banked
  3226  0011E2  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;sort.c: 90: unsigned char byte1 = 0b01111111;
  3230  0011E4  0E7F               	movlw	127
  3231  0011E6  0100               	movlb	0	; () banked
  3232  0011E8  6FB5               	movwf	Loading@byte1& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;sort.c: 91: EEPROM_write(addr, byte1);
  3236  0011EA  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3237  0011EE  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3238  0011F2  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3239  0011F6  EC65  F020         	call	_EEPROM_write	;wreg free
  3240                           
  3241                           ;sort.c: 94: LATBbits.LATB2 = 0;
  3242  0011FA  948A               	bcf	3978,2,c	;volatile
  3243                           
  3244                           ;sort.c: 96: for(int i=0; i<46; i++){
  3245  0011FC  0E00               	movlw	0
  3246  0011FE  0100               	movlb	0	; () banked
  3247  001200  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3248  001202  0E00               	movlw	0
  3249  001204  6FC2               	movwf	Loading@i& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252  001206  0100               	movlb	0	; () banked
  3253  001208  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3254  00120A  D008               	goto	l7460
  3255  00120C  0100               	movlb	0	; () banked
  3256  00120E  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3257  001210  E126               	bnz	l774
  3258  001212  0E2E               	movlw	46
  3259  001214  0100               	movlb	0	; () banked
  3260  001216  5DC2               	subwf	Loading@i& (0+255),w,b
  3261  001218  B0D8               	btfsc	status,0,c
  3262  00121A  D021               	goto	l774
  3263  00121C                     l7460:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;sort.c: 97: LATBbits.LATB2 = !LATBbits.LATB2;
  3267  00121C  B48A               	btfsc	3978,2,c	;volatile
  3268  00121E  D004               	goto	u5870
  3269  001220  0100               	movlb	0	; () banked
  3270  001222  6BB1               	clrf	??_Loading& (0+255),b
  3271  001224  2BB1               	incf	??_Loading& (0+255),f,b
  3272  001226  D002               	goto	u5888
  3273  001228                     u5870:
  3274  001228  0100               	movlb	0	; () banked
  3275  00122A  6BB1               	clrf	??_Loading& (0+255),b
  3276  00122C                     u5888:
  3277  00122C  0100               	movlb	0	; () banked
  3278  00122E  47B1               	rlncf	??_Loading& (0+255),f,b
  3279  001230  47B1               	rlncf	??_Loading& (0+255),f,b
  3280  001232  508A               	movf	3978,w,c	;volatile
  3281  001234  0100               	movlb	0	; () banked
  3282  001236  19B1               	xorwf	??_Loading& (0+255),w,b
  3283  001238  0BFB               	andlw	-5
  3284  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3285  00123C  6E8A               	movwf	3978,c	;volatile
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;sort.c: 98: delay_ms(45-i);
  3289  00123E  0100               	movlb	0	; () banked
  3290  001240  51C2               	movf	Loading@i& (0+255),w,b
  3291  001242  0800               	sublw	0
  3292  001244  0F2D               	addlw	45
  3293  001246  EC53  F02A         	call	_delay_ms
  3294  00124A  0100               	movlb	0	; () banked
  3295  00124C  4BC2               	infsnz	Loading@i& (0+255),f,b
  3296  00124E  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3297                           
  3298                           ; BSR set to: 0
  3299  001250  0100               	movlb	0	; () banked
  3300  001252  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3301  001254  D7E3               	goto	l7460
  3302  001256  0100               	movlb	0	; () banked
  3303  001258  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3304  00125A  E101               	bnz	u5890
  3305  00125C  D7DA               	goto	L1
  3306  00125E                     u5890:
  3307  00125E                     l774:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 99: }
  3311                           ;sort.c: 100: LATBbits.LATB2 = 1;
  3312  00125E  848A               	bsf	3978,2,c	;volatile
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 103: initServos();
  3316  001260  ECE7  F024         	call	_initServos	;wreg free
  3317                           
  3318                           ;sort.c: 104: }
  3319  001264  0012               	return	
  3320  001266                     l7470:
  3321                           
  3322                           ;sort.c: 105: else{
  3323                           ;sort.c: 108: if(!f_loadingNewCan){
  3324  001266  0100               	movlb	0	; () banked
  3325  001268  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3326  00126A  0100               	movlb	0	; () banked
  3327  00126C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3328  00126E  A4D8               	btfss	status,2,c
  3329  001270  D018               	goto	l7486
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;sort.c: 110: getIR();
  3333  001272  EC5F  F025         	call	_getIR	;wreg free
  3334                           
  3335                           ;sort.c: 112: if(!f_loadingNewCan){
  3336  001276  0100               	movlb	0	; () banked
  3337  001278  51F2               	movf	_f_loadingNewCan& (0+255),w,b
  3338  00127A  0100               	movlb	0	; () banked
  3339  00127C  11F3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3340  00127E  B4D8               	btfsc	status,2,c
  3341  001280  0012               	return	
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;sort.c: 116: else{
  3345                           ;sort.c: 117: count_total++;
  3346                           
  3347                           ; BSR set to: 0
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;sort.c: 114: }
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;sort.c: 113: return;
  3354  001282  0100               	movlb	0	; () banked
  3355  001284  4BFE               	infsnz	_count_total& (0+255),f,b
  3356  001286  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;sort.c: 118: if(count_total == 12){
  3360  001288  0E0C               	movlw	12
  3361  00128A  0100               	movlb	0	; () banked
  3362  00128C  19FE               	xorwf	_count_total& (0+255),w,b
  3363  00128E  0100               	movlb	0	; () banked
  3364  001290  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3365  001292  A4D8               	btfss	status,2,c
  3366  001294  0012               	return	
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;sort.c: 119: f_lastCan = 1;
  3370  001296  0E00               	movlw	0
  3371  001298  0100               	movlb	0	; () banked
  3372  00129A  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  3373  00129C  0E01               	movlw	1
  3374  00129E  6FF0               	movwf	_f_lastCan& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;sort.c: 120: }
  3378                           ;sort.c: 121: }
  3379                           ;sort.c: 122: }
  3380                           
  3381                           ; BSR set to: 0
  3382  0012A0  0012               	return	
  3383  0012A2                     l7486:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;sort.c: 125: else if(f_ID_receive){
  3387  0012A2  0101               	movlb	1	; () banked
  3388  0012A4  512F               	movf	_f_ID_receive& (0+255),w,b
  3389  0012A6  0101               	movlb	1	; () banked
  3390  0012A8  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3391  0012AA  B4D8               	btfsc	status,2,c
  3392  0012AC  0012               	return	
  3393                           
  3394                           ; BSR set to: 1
  3395                           ;sort.c: 126: f_most_recent_sort_time = 1;
  3396  0012AE  0E00               	movlw	0
  3397  0012B0  0101               	movlb	1	; () banked
  3398  0012B2  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3399  0012B4  0E01               	movlw	1
  3400  0012B6  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  3401                           
  3402                           ;sort.c: 127: f_loadingNewCan = 0;
  3403  0012B8  0E00               	movlw	0
  3404  0012BA  0100               	movlb	0	; () banked
  3405  0012BC  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3406  0012BE  0E00               	movlw	0
  3407  0012C0  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;sort.c: 128: _delay((unsigned long)((750)*(32000000/4000.0)));
  3411  0012C2  0E1F               	movlw	31
  3412  0012C4  0100               	movlb	0	; () banked
  3413  0012C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3414  0012C8  0E71               	movlw	113
  3415  0012CA  0100               	movlb	0	; () banked
  3416  0012CC  6FB1               	movwf	??_Loading& (0+255),b
  3417  0012CE  0E1E               	movlw	30
  3418  0012D0                     u9127:
  3419  0012D0  2EE8               	decfsz	wreg,f,c
  3420  0012D2  D7FE               	bra	u9127
  3421  0012D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3422  0012D6  D7FC               	bra	u9127
  3423  0012D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3424  0012DA  D7FA               	bra	u9127
  3425  0012DC  F000               	nop	
  3426                           
  3427                           ;sort.c: 129: LATBbits.LATB2 = 0;
  3428  0012DE  948A               	bcf	3978,2,c	;volatile
  3429                           
  3430                           ;sort.c: 133: f_arm_position = 1;
  3431  0012E0  0E00               	movlw	0
  3432  0012E2  0100               	movlb	0	; () banked
  3433  0012E4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3434  0012E6  0E01               	movlw	1
  3435  0012E8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 134: getMAG();
  3439  0012EA  ECC2  F028         	call	_getMAG	;wreg free
  3440                           
  3441                           ;sort.c: 135: sensor_outputs[0] = MAG_signal;
  3442  0012EE  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3443  0012F2  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3444                           
  3445                           ;sort.c: 137: if(sensor_outputs[0]){
  3446  0012F6  0100               	movlb	0	; () banked
  3447  0012F8  51E2               	movf	_sensor_outputs& (0+255),w,b
  3448  0012FA  0100               	movlb	0	; () banked
  3449  0012FC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3450  0012FE  B4D8               	btfsc	status,2,c
  3451  001300  D027               	goto	l7514
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 138: for(int i = 0; i<25; i++){
  3455  001302  0E00               	movlw	0
  3456  001304  0100               	movlb	0	; () banked
  3457  001306  6FB7               	movwf	(Loading@i_1156+1)& (0+255),b
  3458  001308  0E00               	movlw	0
  3459  00130A  6FB6               	movwf	Loading@i_1156& (0+255),b
  3460  00130C                     l7504:
  3461                           
  3462                           ; BSR set to: 0
  3463  00130C  0100               	movlb	0	; () banked
  3464  00130E  BFB7               	btfsc	(Loading@i_1156+1)& (0+255),7,b
  3465  001310  D008               	goto	l784
  3466  001312  0100               	movlb	0	; () banked
  3467  001314  51B7               	movf	(Loading@i_1156+1)& (0+255),w,b
  3468  001316  E143               	bnz	l7526
  3469  001318  0E19               	movlw	25
  3470  00131A  0100               	movlb	0	; () banked
  3471  00131C  5DB6               	subwf	Loading@i_1156& (0+255),w,b
  3472  00131E  B0D8               	btfsc	status,0,c
  3473  001320  D03E               	goto	l7526
  3474  001322                     l784:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;sort.c: 139: LATAbits.LATA4 = 1;
  3478  001322  8889               	bsf	3977,4,c	;volatile
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;sort.c: 140: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3482  001324  0E4E               	movlw	78
  3483  001326  0100               	movlb	0	; () banked
  3484  001328  6FB1               	movwf	??_Loading& (0+255),b
  3485  00132A  0EEB               	movlw	235
  3486  00132C                     u9137:
  3487  00132C  2EE8               	decfsz	wreg,f,c
  3488  00132E  D7FE               	bra	u9137
  3489  001330  2FB1               	decfsz	??_Loading& (0+255),f,b
  3490  001332  D7FC               	bra	u9137
  3491                           
  3492                           ;sort.c: 141: LATAbits.LATA4 = 0;
  3493  001334  9889               	bcf	3977,4,c	;volatile
  3494                           
  3495                           ;sort.c: 142: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3496  001336  0E1A               	movlw	26
  3497  001338  0100               	movlb	0	; () banked
  3498  00133A  6FB1               	movwf	??_Loading& (0+255),b
  3499  00133C  0EF8               	movlw	248
  3500  00133E                     u9147:
  3501  00133E  2EE8               	decfsz	wreg,f,c
  3502  001340  D7FE               	bra	u9147
  3503  001342  2FB1               	decfsz	??_Loading& (0+255),f,b
  3504  001344  D7FC               	bra	u9147
  3505  001346  F000               	nop	
  3506  001348  0100               	movlb	0	; () banked
  3507  00134A  4BB6               	infsnz	Loading@i_1156& (0+255),f,b
  3508  00134C  2BB7               	incf	(Loading@i_1156+1)& (0+255),f,b
  3509  00134E  D7DE               	goto	l7504
  3510  001350                     l7514:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;sort.c: 145: else{
  3514                           ;sort.c: 146: for(int i = 0; i<25; i++){
  3515  001350  0E00               	movlw	0
  3516  001352  0100               	movlb	0	; () banked
  3517  001354  6FB9               	movwf	(Loading@i_1165+1)& (0+255),b
  3518  001356  0E00               	movlw	0
  3519  001358  6FB8               	movwf	Loading@i_1165& (0+255),b
  3520  00135A                     l7516:
  3521                           
  3522                           ; BSR set to: 0
  3523  00135A  0100               	movlb	0	; () banked
  3524  00135C  BFB9               	btfsc	(Loading@i_1165+1)& (0+255),7,b
  3525  00135E  D008               	goto	l787
  3526  001360  0100               	movlb	0	; () banked
  3527  001362  51B9               	movf	(Loading@i_1165+1)& (0+255),w,b
  3528  001364  E11C               	bnz	l7526
  3529  001366  0E19               	movlw	25
  3530  001368  0100               	movlb	0	; () banked
  3531  00136A  5DB8               	subwf	Loading@i_1165& (0+255),w,b
  3532  00136C  B0D8               	btfsc	status,0,c
  3533  00136E  D017               	goto	l7526
  3534  001370                     l787:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;sort.c: 147: LATAbits.LATA4 = 1;
  3538  001370  8889               	bsf	3977,4,c	;volatile
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;sort.c: 148: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3542  001372  0E3D               	movlw	61
  3543  001374  0100               	movlb	0	; () banked
  3544  001376  6FB1               	movwf	??_Loading& (0+255),b
  3545  001378  0E41               	movlw	65
  3546  00137A                     u9157:
  3547  00137A  2EE8               	decfsz	wreg,f,c
  3548  00137C  D7FE               	bra	u9157
  3549  00137E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3550  001380  D7FC               	bra	u9157
  3551                           
  3552                           ;sort.c: 149: LATAbits.LATA4 = 0;
  3553  001382  9889               	bcf	3977,4,c	;volatile
  3554                           
  3555                           ;sort.c: 150: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3556  001384  0E2C               	movlw	44
  3557  001386  0100               	movlb	0	; () banked
  3558  001388  6FB1               	movwf	??_Loading& (0+255),b
  3559  00138A  0EA1               	movlw	161
  3560  00138C                     u9167:
  3561  00138C  2EE8               	decfsz	wreg,f,c
  3562  00138E  D7FE               	bra	u9167
  3563  001390  2FB1               	decfsz	??_Loading& (0+255),f,b
  3564  001392  D7FC               	bra	u9167
  3565  001394  D000               	nop2	
  3566  001396  0100               	movlb	0	; () banked
  3567  001398  4BB8               	infsnz	Loading@i_1165& (0+255),f,b
  3568  00139A  2BB9               	incf	(Loading@i_1165+1)& (0+255),f,b
  3569  00139C  D7DE               	goto	l7516
  3570  00139E                     l7526:
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 151: }
  3574                           ;sort.c: 152: }
  3575                           ;sort.c: 154: _delay((unsigned long)((350)*(32000000/4000.0)));
  3576  00139E  0E0F               	movlw	15
  3577  0013A0  0100               	movlb	0	; () banked
  3578  0013A2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3579  0013A4  0E35               	movlw	53
  3580  0013A6  0100               	movlb	0	; () banked
  3581  0013A8  6FB1               	movwf	??_Loading& (0+255),b
  3582  0013AA  0E51               	movlw	81
  3583  0013AC                     u9177:
  3584  0013AC  2EE8               	decfsz	wreg,f,c
  3585  0013AE  D7FE               	bra	u9177
  3586  0013B0  2FB1               	decfsz	??_Loading& (0+255),f,b
  3587  0013B2  D7FC               	bra	u9177
  3588  0013B4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3589  0013B6  D7FA               	bra	u9177
  3590                           
  3591                           ;sort.c: 156: readIR();
  3592  0013B8  ECA7  F027         	call	_readIR	;wreg free
  3593                           
  3594                           ;sort.c: 157: if(IR_signal==1){
  3595  0013BC  0100               	movlb	0	; () banked
  3596  0013BE  05E6               	decf	_IR_signal& (0+255),w,b
  3597  0013C0  0100               	movlb	0	; () banked
  3598  0013C2  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3599  0013C4  A4D8               	btfss	status,2,c
  3600  0013C6  D19A               	goto	l7644
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 158: _delay((unsigned long)((100)*(32000000/4000.0)));
  3604  0013C8  0E05               	movlw	5
  3605  0013CA  0100               	movlb	0	; () banked
  3606  0013CC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3607  0013CE  0E0F               	movlw	15
  3608  0013D0  0100               	movlb	0	; () banked
  3609  0013D2  6FB1               	movwf	??_Loading& (0+255),b
  3610  0013D4  0EF1               	movlw	241
  3611  0013D6                     u9187:
  3612  0013D6  2EE8               	decfsz	wreg,f,c
  3613  0013D8  D7FE               	bra	u9187
  3614  0013DA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3615  0013DC  D7FC               	bra	u9187
  3616  0013DE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3617  0013E0  D7FA               	bra	u9187
  3618                           
  3619                           ;sort.c: 159: readIR();
  3620  0013E2  ECA7  F027         	call	_readIR	;wreg free
  3621                           
  3622                           ;sort.c: 160: if(IR_signal==1){
  3623  0013E6  0100               	movlb	0	; () banked
  3624  0013E8  05E6               	decf	_IR_signal& (0+255),w,b
  3625  0013EA  0100               	movlb	0	; () banked
  3626  0013EC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3627  0013EE  A4D8               	btfss	status,2,c
  3628  0013F0  D054               	goto	l7564
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;sort.c: 161: if(sensor_outputs[0]){
  3632  0013F2  0100               	movlb	0	; () banked
  3633  0013F4  51E2               	movf	_sensor_outputs& (0+255),w,b
  3634  0013F6  0100               	movlb	0	; () banked
  3635  0013F8  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3636  0013FA  B4D8               	btfsc	status,2,c
  3637  0013FC  D027               	goto	l7552
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 162: for(int i = 0; i<25; i++){
  3641  0013FE  0E00               	movlw	0
  3642  001400  0100               	movlb	0	; () banked
  3643  001402  6FBB               	movwf	(Loading@i_1167+1)& (0+255),b
  3644  001404  0E00               	movlw	0
  3645  001406  6FBA               	movwf	Loading@i_1167& (0+255),b
  3646  001408                     l7542:
  3647                           
  3648                           ; BSR set to: 0
  3649  001408  0100               	movlb	0	; () banked
  3650  00140A  BFBB               	btfsc	(Loading@i_1167+1)& (0+255),7,b
  3651  00140C  D008               	goto	l792
  3652  00140E  0100               	movlb	0	; () banked
  3653  001410  51BB               	movf	(Loading@i_1167+1)& (0+255),w,b
  3654  001412  E143               	bnz	l7564
  3655  001414  0E19               	movlw	25
  3656  001416  0100               	movlb	0	; () banked
  3657  001418  5DBA               	subwf	Loading@i_1167& (0+255),w,b
  3658  00141A  B0D8               	btfsc	status,0,c
  3659  00141C  D03E               	goto	l7564
  3660  00141E                     l792:
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;sort.c: 163: LATAbits.LATA4 = 1;
  3664  00141E  8889               	bsf	3977,4,c	;volatile
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;sort.c: 164: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3668  001420  0E4E               	movlw	78
  3669  001422  0100               	movlb	0	; () banked
  3670  001424  6FB1               	movwf	??_Loading& (0+255),b
  3671  001426  0EEB               	movlw	235
  3672  001428                     u9197:
  3673  001428  2EE8               	decfsz	wreg,f,c
  3674  00142A  D7FE               	bra	u9197
  3675  00142C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3676  00142E  D7FC               	bra	u9197
  3677                           
  3678                           ;sort.c: 165: LATAbits.LATA4 = 0;
  3679  001430  9889               	bcf	3977,4,c	;volatile
  3680                           
  3681                           ;sort.c: 166: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3682  001432  0E1A               	movlw	26
  3683  001434  0100               	movlb	0	; () banked
  3684  001436  6FB1               	movwf	??_Loading& (0+255),b
  3685  001438  0EF8               	movlw	248
  3686  00143A                     u9207:
  3687  00143A  2EE8               	decfsz	wreg,f,c
  3688  00143C  D7FE               	bra	u9207
  3689  00143E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  001440  D7FC               	bra	u9207
  3691  001442  F000               	nop	
  3692  001444  0100               	movlb	0	; () banked
  3693  001446  4BBA               	infsnz	Loading@i_1167& (0+255),f,b
  3694  001448  2BBB               	incf	(Loading@i_1167+1)& (0+255),f,b
  3695  00144A  D7DE               	goto	l7542
  3696  00144C                     l7552:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;sort.c: 169: else{
  3700                           ;sort.c: 170: for(int i = 0; i<25; i++){
  3701  00144C  0E00               	movlw	0
  3702  00144E  0100               	movlb	0	; () banked
  3703  001450  6FBD               	movwf	(Loading@i_1168+1)& (0+255),b
  3704  001452  0E00               	movlw	0
  3705  001454  6FBC               	movwf	Loading@i_1168& (0+255),b
  3706  001456                     l7554:
  3707                           
  3708                           ; BSR set to: 0
  3709  001456  0100               	movlb	0	; () banked
  3710  001458  BFBD               	btfsc	(Loading@i_1168+1)& (0+255),7,b
  3711  00145A  D008               	goto	l795
  3712  00145C  0100               	movlb	0	; () banked
  3713  00145E  51BD               	movf	(Loading@i_1168+1)& (0+255),w,b
  3714  001460  E11C               	bnz	l7564
  3715  001462  0E19               	movlw	25
  3716  001464  0100               	movlb	0	; () banked
  3717  001466  5DBC               	subwf	Loading@i_1168& (0+255),w,b
  3718  001468  B0D8               	btfsc	status,0,c
  3719  00146A  D017               	goto	l7564
  3720  00146C                     l795:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;sort.c: 171: LATAbits.LATA4 = 1;
  3724  00146C  8889               	bsf	3977,4,c	;volatile
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 172: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3728  00146E  0E3D               	movlw	61
  3729  001470  0100               	movlb	0	; () banked
  3730  001472  6FB1               	movwf	??_Loading& (0+255),b
  3731  001474  0E41               	movlw	65
  3732  001476                     u9217:
  3733  001476  2EE8               	decfsz	wreg,f,c
  3734  001478  D7FE               	bra	u9217
  3735  00147A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3736  00147C  D7FC               	bra	u9217
  3737                           
  3738                           ;sort.c: 173: LATAbits.LATA4 = 0;
  3739  00147E  9889               	bcf	3977,4,c	;volatile
  3740                           
  3741                           ;sort.c: 174: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3742  001480  0E2C               	movlw	44
  3743  001482  0100               	movlb	0	; () banked
  3744  001484  6FB1               	movwf	??_Loading& (0+255),b
  3745  001486  0EA1               	movlw	161
  3746  001488                     u9227:
  3747  001488  2EE8               	decfsz	wreg,f,c
  3748  00148A  D7FE               	bra	u9227
  3749  00148C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3750  00148E  D7FC               	bra	u9227
  3751  001490  D000               	nop2	
  3752  001492  0100               	movlb	0	; () banked
  3753  001494  4BBC               	infsnz	Loading@i_1168& (0+255),f,b
  3754  001496  2BBD               	incf	(Loading@i_1168+1)& (0+255),f,b
  3755  001498  D7DE               	goto	l7554
  3756  00149A                     l7564:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 175: }
  3760                           ;sort.c: 176: }
  3761                           ;sort.c: 177: }
  3762                           ;sort.c: 179: _delay((unsigned long)((350)*(32000000/4000.0)));
  3763  00149A  0E0F               	movlw	15
  3764  00149C  0100               	movlb	0	; () banked
  3765  00149E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3766  0014A0  0E35               	movlw	53
  3767  0014A2  0100               	movlb	0	; () banked
  3768  0014A4  6FB1               	movwf	??_Loading& (0+255),b
  3769  0014A6  0E51               	movlw	81
  3770  0014A8                     u9237:
  3771  0014A8  2EE8               	decfsz	wreg,f,c
  3772  0014AA  D7FE               	bra	u9237
  3773  0014AC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3774  0014AE  D7FC               	bra	u9237
  3775  0014B0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3776  0014B2  D7FA               	bra	u9237
  3777                           
  3778                           ;sort.c: 181: int j = 1;
  3779  0014B4  0E00               	movlw	0
  3780  0014B6  0100               	movlb	0	; () banked
  3781  0014B8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3782  0014BA  0E01               	movlw	1
  3783  0014BC  6FC0               	movwf	Loading@j& (0+255),b
  3784                           
  3785                           ;sort.c: 182: while(IR_signal == 1){
  3786  0014BE  D117               	goto	l7642
  3787  0014C0                     l7568:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;sort.c: 183: readIR();
  3791  0014C0  ECA7  F027         	call	_readIR	;wreg free
  3792                           
  3793                           ;sort.c: 184: if(j == 10){
  3794  0014C4  0E0A               	movlw	10
  3795  0014C6  0100               	movlb	0	; () banked
  3796  0014C8  19C0               	xorwf	Loading@j& (0+255),w,b
  3797  0014CA  0100               	movlb	0	; () banked
  3798  0014CC  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3799  0014CE  A4D8               	btfss	status,2,c
  3800  0014D0  D016               	goto	l7576
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;sort.c: 185: LATBbits.LATB2 = !LATBbits.LATB2;
  3804  0014D2  B48A               	btfsc	3978,2,c	;volatile
  3805  0014D4  D004               	goto	u6070
  3806  0014D6  0100               	movlb	0	; () banked
  3807  0014D8  6BB1               	clrf	??_Loading& (0+255),b
  3808  0014DA  2BB1               	incf	??_Loading& (0+255),f,b
  3809  0014DC  D002               	goto	u6088
  3810  0014DE                     u6070:
  3811  0014DE  0100               	movlb	0	; () banked
  3812  0014E0  6BB1               	clrf	??_Loading& (0+255),b
  3813  0014E2                     u6088:
  3814  0014E2  0100               	movlb	0	; () banked
  3815  0014E4  47B1               	rlncf	??_Loading& (0+255),f,b
  3816  0014E6  47B1               	rlncf	??_Loading& (0+255),f,b
  3817  0014E8  508A               	movf	3978,w,c	;volatile
  3818  0014EA  0100               	movlb	0	; () banked
  3819  0014EC  19B1               	xorwf	??_Loading& (0+255),w,b
  3820  0014EE  0BFB               	andlw	-5
  3821  0014F0  19B1               	xorwf	??_Loading& (0+255),w,b
  3822  0014F2  6E8A               	movwf	3978,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;sort.c: 186: j = 0;
  3826  0014F4  0E00               	movlw	0
  3827  0014F6  0100               	movlb	0	; () banked
  3828  0014F8  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3829  0014FA  0E00               	movlw	0
  3830  0014FC  6FC0               	movwf	Loading@j& (0+255),b
  3831  0014FE                     l7576:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;sort.c: 187: }
  3835                           ;sort.c: 188: if(IR_signal==1){
  3836  0014FE  0100               	movlb	0	; () banked
  3837  001500  05E6               	decf	_IR_signal& (0+255),w,b
  3838  001502  0100               	movlb	0	; () banked
  3839  001504  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3840  001506  A4D8               	btfss	status,2,c
  3841  001508  D0D6               	goto	l7630
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;sort.c: 189: _delay((unsigned long)((350)*(32000000/4000.0)));
  3845  00150A  0E0F               	movlw	15
  3846  00150C  0100               	movlb	0	; () banked
  3847  00150E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3848  001510  0E35               	movlw	53
  3849  001512  0100               	movlb	0	; () banked
  3850  001514  6FB1               	movwf	??_Loading& (0+255),b
  3851  001516  0E51               	movlw	81
  3852  001518                     u9247:
  3853  001518  2EE8               	decfsz	wreg,f,c
  3854  00151A  D7FE               	bra	u9247
  3855  00151C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3856  00151E  D7FC               	bra	u9247
  3857  001520  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3858  001522  D7FA               	bra	u9247
  3859                           
  3860                           ;sort.c: 190: readIR();
  3861  001524  ECA7  F027         	call	_readIR	;wreg free
  3862                           
  3863                           ;sort.c: 191: if(IR_signal==1){
  3864  001528  0100               	movlb	0	; () banked
  3865  00152A  05E6               	decf	_IR_signal& (0+255),w,b
  3866  00152C  0100               	movlb	0	; () banked
  3867  00152E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3868  001530  A4D8               	btfss	status,2,c
  3869  001532  D0BD               	goto	l801
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;sort.c: 192: if(sensor_outputs[0]){
  3873  001534  0100               	movlb	0	; () banked
  3874  001536  51E2               	movf	_sensor_outputs& (0+255),w,b
  3875  001538  0100               	movlb	0	; () banked
  3876  00153A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3877  00153C  B4D8               	btfsc	status,2,c
  3878  00153E  D011               	goto	l7592
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 193: LATAbits.LATA4 = 1;
  3882  001540  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 194: _delay((unsigned long)((250)*(32000000/4000.0)));
  3886  001542  0E0B               	movlw	11
  3887  001544  0100               	movlb	0	; () banked
  3888  001546  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3889  001548  0E26               	movlw	38
  3890  00154A  0100               	movlb	0	; () banked
  3891  00154C  6FB1               	movwf	??_Loading& (0+255),b
  3892  00154E  0E5D               	movlw	93
  3893  001550                     u9257:
  3894  001550  2EE8               	decfsz	wreg,f,c
  3895  001552  D7FE               	bra	u9257
  3896  001554  2FB1               	decfsz	??_Loading& (0+255),f,b
  3897  001556  D7FC               	bra	u9257
  3898  001558  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3899  00155A  D7FA               	bra	u9257
  3900  00155C  D000               	nop2	
  3901                           
  3902                           ;sort.c: 195: LATAbits.LATA4 = 0;
  3903  00155E  9889               	bcf	3977,4,c	;volatile
  3904                           
  3905                           ;sort.c: 196: }
  3906  001560  D0A6               	goto	l801
  3907  001562                     l7592:
  3908                           
  3909                           ;sort.c: 197: else{
  3910                           ;sort.c: 198: for(int i = 0; i<25; i++){
  3911  001562  0E00               	movlw	0
  3912  001564  0100               	movlb	0	; () banked
  3913  001566  6FBF               	movwf	(Loading@i_1170+1)& (0+255),b
  3914  001568  0E00               	movlw	0
  3915  00156A  6FBE               	movwf	Loading@i_1170& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918  00156C  0100               	movlb	0	; () banked
  3919  00156E  BFBF               	btfsc	(Loading@i_1170+1)& (0+255),7,b
  3920  001570  D079               	goto	l7622
  3921  001572  0100               	movlb	0	; () banked
  3922  001574  51BF               	movf	(Loading@i_1170+1)& (0+255),w,b
  3923  001576  E106               	bnz	u6120
  3924  001578  0E19               	movlw	25
  3925  00157A  0100               	movlb	0	; () banked
  3926  00157C  5DBE               	subwf	Loading@i_1170& (0+255),w,b
  3927  00157E  B0D8               	btfsc	status,0,c
  3928  001580  D096               	goto	l801
  3929  001582  D070               	goto	l7622
  3930  001584                     u6120:
  3931                           
  3932                           ; BSR set to: 0
  3933  001584  D094               	goto	l801
  3934  001586                     l807:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;sort.c: 201: LATAbits.LATA4 = 1;
  3938  001586  8889               	bsf	3977,4,c	;volatile
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;sort.c: 202: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3942  001588  0E4E               	movlw	78
  3943  00158A  0100               	movlb	0	; () banked
  3944  00158C  6FB1               	movwf	??_Loading& (0+255),b
  3945  00158E  0EEB               	movlw	235
  3946  001590                     u9267:
  3947  001590  2EE8               	decfsz	wreg,f,c
  3948  001592  D7FE               	bra	u9267
  3949  001594  2FB1               	decfsz	??_Loading& (0+255),f,b
  3950  001596  D7FC               	bra	u9267
  3951                           
  3952                           ;sort.c: 203: LATAbits.LATA4 = 0;
  3953  001598  9889               	bcf	3977,4,c	;volatile
  3954                           
  3955                           ;sort.c: 204: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3956  00159A  0E1A               	movlw	26
  3957  00159C  0100               	movlb	0	; () banked
  3958  00159E  6FB1               	movwf	??_Loading& (0+255),b
  3959  0015A0  0EF8               	movlw	248
  3960  0015A2                     u9277:
  3961  0015A2  2EE8               	decfsz	wreg,f,c
  3962  0015A4  D7FE               	bra	u9277
  3963  0015A6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3964  0015A8  D7FC               	bra	u9277
  3965  0015AA  D05A               	goto	L5
  3966  0015AC                     l809:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;sort.c: 207: LATAbits.LATA4 = 1;
  3970  0015AC  8889               	bsf	3977,4,c	;volatile
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 208: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  3974  0015AE  0E54               	movlw	84
  3975  0015B0  0100               	movlb	0	; () banked
  3976  0015B2  6FB1               	movwf	??_Loading& (0+255),b
  3977  0015B4  0E1C               	movlw	28
  3978  0015B6                     u9287:
  3979  0015B6  2EE8               	decfsz	wreg,f,c
  3980  0015B8  D7FE               	bra	u9287
  3981  0015BA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3982  0015BC  D7FC               	bra	u9287
  3983  0015BE  F000               	nop	
  3984                           
  3985                           ;sort.c: 209: LATAbits.LATA4 = 0;
  3986  0015C0  9889               	bcf	3977,4,c	;volatile
  3987                           
  3988                           ;sort.c: 210: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  3989  0015C2  0E15               	movlw	21
  3990  0015C4  0100               	movlb	0	; () banked
  3991  0015C6  6FB1               	movwf	??_Loading& (0+255),b
  3992  0015C8  0EC6               	movlw	198
  3993  0015CA                     u9297:
  3994  0015CA  2EE8               	decfsz	wreg,f,c
  3995  0015CC  D7FE               	bra	u9297
  3996  0015CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3997  0015D0  D7FC               	bra	u9297
  3998  0015D2  D046               	goto	L5
  3999  0015D4                     l810:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;sort.c: 213: LATAbits.LATA4 = 1;
  4003  0015D4  8889               	bsf	3977,4,c	;volatile
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;sort.c: 214: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4007  0015D6  0E59               	movlw	89
  4008  0015D8  0100               	movlb	0	; () banked
  4009  0015DA  6FB1               	movwf	??_Loading& (0+255),b
  4010  0015DC  0E4E               	movlw	78
  4011  0015DE                     u9307:
  4012  0015DE  2EE8               	decfsz	wreg,f,c
  4013  0015E0  D7FE               	bra	u9307
  4014  0015E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4015  0015E4  D7FC               	bra	u9307
  4016  0015E6  F000               	nop	
  4017                           
  4018                           ;sort.c: 215: LATAbits.LATA4 = 0;
  4019  0015E8  9889               	bcf	3977,4,c	;volatile
  4020                           
  4021                           ;sort.c: 216: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4022  0015EA  0E10               	movlw	16
  4023  0015EC  0100               	movlb	0	; () banked
  4024  0015EE  6FB1               	movwf	??_Loading& (0+255),b
  4025  0015F0  0E94               	movlw	148
  4026  0015F2                     u9317:
  4027  0015F2  2EE8               	decfsz	wreg,f,c
  4028  0015F4  D7FE               	bra	u9317
  4029  0015F6  2FB1               	decfsz	??_Loading& (0+255),f,b
  4030  0015F8  D7FC               	bra	u9317
  4031  0015FA  D032               	goto	L5
  4032  0015FC                     l811:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;sort.c: 219: LATAbits.LATA4 = 1;
  4036  0015FC  8889               	bsf	3977,4,c	;volatile
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;sort.c: 220: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4040  0015FE  0E5E               	movlw	94
  4041  001600  0100               	movlb	0	; () banked
  4042  001602  6FB1               	movwf	??_Loading& (0+255),b
  4043  001604  0E80               	movlw	128
  4044  001606                     u9327:
  4045  001606  2EE8               	decfsz	wreg,f,c
  4046  001608  D7FE               	bra	u9327
  4047  00160A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4048  00160C  D7FC               	bra	u9327
  4049  00160E  F000               	nop	
  4050                           
  4051                           ;sort.c: 221: LATAbits.LATA4 = 0;
  4052  001610  9889               	bcf	3977,4,c	;volatile
  4053                           
  4054                           ;sort.c: 222: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4055  001612  0E0B               	movlw	11
  4056  001614  0100               	movlb	0	; () banked
  4057  001616  6FB1               	movwf	??_Loading& (0+255),b
  4058  001618  0E62               	movlw	98
  4059  00161A                     u9337:
  4060  00161A  2EE8               	decfsz	wreg,f,c
  4061  00161C  D7FE               	bra	u9337
  4062  00161E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4063  001620  D7FC               	bra	u9337
  4064  001622  D01E               	goto	L5
  4065  001624                     l812:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 225: LATAbits.LATA4 = 1;
  4069  001624  8889               	bsf	3977,4,c	;volatile
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;sort.c: 226: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4073  001626  0E63               	movlw	99
  4074  001628  0100               	movlb	0	; () banked
  4075  00162A  6FB1               	movwf	??_Loading& (0+255),b
  4076  00162C  0EB2               	movlw	178
  4077  00162E                     u9347:
  4078  00162E  2EE8               	decfsz	wreg,f,c
  4079  001630  D7FE               	bra	u9347
  4080  001632  2FB1               	decfsz	??_Loading& (0+255),f,b
  4081  001634  D7FC               	bra	u9347
  4082  001636  F000               	nop	
  4083                           
  4084                           ;sort.c: 227: LATAbits.LATA4 = 0;
  4085  001638  9889               	bcf	3977,4,c	;volatile
  4086                           
  4087                           ;sort.c: 228: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4088  00163A  0E34               	movlw	52
  4089  00163C  0100               	movlb	0	; () banked
  4090  00163E  6FB1               	movwf	??_Loading& (0+255),b
  4091  001640  0EF1               	movlw	241
  4092  001642                     u9357:
  4093  001642  2EE8               	decfsz	wreg,f,c
  4094  001644  D7FE               	bra	u9357
  4095  001646  2FB1               	decfsz	??_Loading& (0+255),f,b
  4096  001648  D7FC               	bra	u9357
  4097  00164A  D000               	nop2	
  4098                           
  4099                           ;sort.c: 229: break;
  4100  00164C  D026               	goto	l7624
  4101  00164E                     l813:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 231: LATAbits.LATA4 = 1;
  4105  00164E  8889               	bsf	3977,4,c	;volatile
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;sort.c: 232: _delay((unsigned long)((10)*(32000000/4000.0)));
  4109  001650  0E68               	movlw	104
  4110  001652  0100               	movlb	0	; () banked
  4111  001654  6FB1               	movwf	??_Loading& (0+255),b
  4112  001656  0EE4               	movlw	228
  4113  001658                     u9367:
  4114  001658  2EE8               	decfsz	wreg,f,c
  4115  00165A  D7FE               	bra	u9367
  4116  00165C  2FB1               	decfsz	??_Loading& (0+255),f,b
  4117  00165E  D7FC               	bra	u9367
  4118  001660                     L5:
  4119  001660  F000               	nop	
  4120                           
  4121                           ;sort.c: 234: }
  4122                           
  4123                           ;sort.c: 233: break;
  4124  001662  D01B               	goto	l7624
  4125  001664                     l7622:
  4126  001664  C0C0  F0B1         	movff	Loading@j,??_Loading
  4127  001668  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4128                           
  4129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4130                           ; Switch size 1, requested type "space"
  4131                           ; Number of cases is 1, Range of values is 0 to 0
  4132                           ; switch strategies available:
  4133                           ; Name         Instructions Cycles
  4134                           ; simple_byte            4     3 (average)
  4135                           ;	Chosen strategy is simple_byte
  4136  00166C  0100               	movlb	0	; () banked
  4137  00166E  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4138  001670  0A00               	xorlw	0	; case 0
  4139  001672  A4D8               	btfss	status,2,c
  4140  001674  D7EC               	goto	l813
  4141                           
  4142                           ; BSR set to: 0
  4143                           ; Switch size 1, requested type "space"
  4144                           ; Number of cases is 5, Range of values is 1 to 5
  4145                           ; switch strategies available:
  4146                           ; Name         Instructions Cycles
  4147                           ; simple_byte           16     9 (average)
  4148                           ;	Chosen strategy is simple_byte
  4149  001676  0100               	movlb	0	; () banked
  4150  001678  51B1               	movf	??_Loading& (0+255),w,b
  4151  00167A  0A01               	xorlw	1	; case 1
  4152  00167C  B4D8               	btfsc	status,2,c
  4153  00167E  D783               	goto	l807
  4154  001680  0A03               	xorlw	3	; case 2
  4155  001682  B4D8               	btfsc	status,2,c
  4156  001684  D793               	goto	l809
  4157  001686  0A01               	xorlw	1	; case 3
  4158  001688  B4D8               	btfsc	status,2,c
  4159  00168A  D7A4               	goto	l810
  4160  00168C  0A07               	xorlw	7	; case 4
  4161  00168E  B4D8               	btfsc	status,2,c
  4162  001690  D7B5               	goto	l811
  4163  001692  0A01               	xorlw	1	; case 5
  4164  001694  B4D8               	btfsc	status,2,c
  4165  001696  D7C6               	goto	l812
  4166  001698  D7DA               	goto	l813
  4167  00169A                     l7624:
  4168  00169A  0100               	movlb	0	; () banked
  4169  00169C  4BBE               	infsnz	Loading@i_1170& (0+255),f,b
  4170  00169E  2BBF               	incf	(Loading@i_1170+1)& (0+255),f,b
  4171                           
  4172                           ; BSR set to: 0
  4173  0016A0  0100               	movlb	0	; () banked
  4174  0016A2  BFBF               	btfsc	(Loading@i_1170+1)& (0+255),7,b
  4175  0016A4  D7DF               	goto	l7622
  4176  0016A6  0100               	movlb	0	; () banked
  4177  0016A8  51BF               	movf	(Loading@i_1170+1)& (0+255),w,b
  4178  0016AA  E101               	bnz	l801
  4179  0016AC  D765               	goto	L6
  4180  0016AE                     l801:
  4181                           
  4182                           ;sort.c: 235: }
  4183                           ;sort.c: 236: }
  4184                           ;sort.c: 237: }
  4185                           ;sort.c: 238: LATAbits.LATA4 = 0;
  4186  0016AE  9889               	bcf	3977,4,c	;volatile
  4187                           
  4188                           ;sort.c: 239: j++;
  4189  0016B0  0100               	movlb	0	; () banked
  4190  0016B2  4BC0               	infsnz	Loading@j& (0+255),f,b
  4191  0016B4  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4192  0016B6                     l7630:
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 240: }
  4196                           ;sort.c: 242: if(!IR_signal){
  4197  0016B6  0100               	movlb	0	; () banked
  4198  0016B8  51E6               	movf	_IR_signal& (0+255),w,b
  4199  0016BA  0100               	movlb	0	; () banked
  4200  0016BC  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4201  0016BE  A4D8               	btfss	status,2,c
  4202  0016C0  D016               	goto	l7642
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 243: _delay((unsigned long)((500)*(32000000/4000.0)));
  4206  0016C2  0E15               	movlw	21
  4207  0016C4  0100               	movlb	0	; () banked
  4208  0016C6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4209  0016C8  0E4B               	movlw	75
  4210  0016CA  0100               	movlb	0	; () banked
  4211  0016CC  6FB1               	movwf	??_Loading& (0+255),b
  4212  0016CE  0EBE               	movlw	190
  4213  0016D0                     u9377:
  4214  0016D0  2EE8               	decfsz	wreg,f,c
  4215  0016D2  D7FE               	bra	u9377
  4216  0016D4  2FB1               	decfsz	??_Loading& (0+255),f,b
  4217  0016D6  D7FC               	bra	u9377
  4218  0016D8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4219  0016DA  D7FA               	bra	u9377
  4220  0016DC  F000               	nop	
  4221                           
  4222                           ;sort.c: 244: readIR();
  4223  0016DE  ECA7  F027         	call	_readIR	;wreg free
  4224                           
  4225                           ;sort.c: 245: if(IR_signal==1){
  4226  0016E2  0100               	movlb	0	; () banked
  4227  0016E4  05E6               	decf	_IR_signal& (0+255),w,b
  4228  0016E6  0100               	movlb	0	; () banked
  4229  0016E8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4230  0016EA  A4D8               	btfss	status,2,c
  4231  0016EC  D006               	goto	l817
  4232  0016EE                     l7642:
  4233                           
  4234                           ; BSR set to: 0
  4235  0016EE  0100               	movlb	0	; () banked
  4236  0016F0  05E6               	decf	_IR_signal& (0+255),w,b
  4237  0016F2  0100               	movlb	0	; () banked
  4238  0016F4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4239  0016F6  B4D8               	btfsc	status,2,c
  4240  0016F8  D6E3               	goto	l7568
  4241  0016FA                     l817:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;sort.c: 250: }
  4245                           ;sort.c: 251: }
  4246                           ;sort.c: 252: }
  4247                           ;sort.c: 253: LATBbits.LATB2 = 0;
  4248  0016FA  948A               	bcf	3978,2,c	;volatile
  4249  0016FC                     l7644:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;sort.c: 254: }
  4253                           ;sort.c: 255: f_can_coming_to_ID = 1;
  4254  0016FC  0E00               	movlw	0
  4255  0016FE  0101               	movlb	1	; () banked
  4256  001700  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4257  001702  0E01               	movlw	1
  4258  001704  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4259                           
  4260                           ; BSR set to: 1
  4261                           
  4262                           ; BSR set to: 1
  4263  001706  0012               	return	
  4264  001708                     __end_of_Loading:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1l	equ	0xFE1
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _initSortTimer *****************
  4279 ;; Defined at:
  4280 ;;		line 416 in file "sort.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  i               2    8[BANK0 ] int 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        5 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:   10
  4301 ;; This function calls:
  4302 ;;		_getRTC
  4303 ;; This function is called by:
  4304 ;;		_Loading
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text3
  4309  004666                     __ptext3:
  4310                           	opt stack 0
  4311  004666                     _initSortTimer:
  4312                           	opt stack 18
  4313                           
  4314                           ;sort.c: 418: getRTC();
  4315                           
  4316                           ;incstack = 0
  4317  004666  EC1F  F024         	call	_getRTC	;wreg free
  4318                           
  4319                           ;sort.c: 419: for(int i = 0; i < 7; i++){
  4320  00466A  0E00               	movlw	0
  4321  00466C  0100               	movlb	0	; () banked
  4322  00466E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4323  004670  0E00               	movlw	0
  4324  004672  6F88               	movwf	initSortTimer@i& (0+255),b
  4325  004674                     l7036:
  4326                           
  4327                           ; BSR set to: 0
  4328  004674  0100               	movlb	0	; () banked
  4329  004676  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4330  004678  D008               	goto	l7040
  4331  00467A  0100               	movlb	0	; () banked
  4332  00467C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4333  00467E  E140               	bnz	l7046
  4334  004680  0E07               	movlw	7
  4335  004682  0100               	movlb	0	; () banked
  4336  004684  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4337  004686  B0D8               	btfsc	status,0,c
  4338  004688  D03B               	goto	l7046
  4339  00468A                     l7040:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;sort.c: 420: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4343  00468A  0E1C               	movlw	low _time
  4344  00468C  0100               	movlb	0	; () banked
  4345  00468E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4346  004690  6ED9               	movwf	fsr2l,c
  4347  004692  0E01               	movlw	high _time
  4348  004694  0100               	movlb	0	; () banked
  4349  004696  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4350  004698  6EDA               	movwf	fsr2h,c
  4351  00469A  50DF               	movf	indf2,w,c
  4352  00469C  0100               	movlb	0	; () banked
  4353  00469E  6F85               	movwf	??_initSortTimer& (0+255),b
  4354  0046A0  0100               	movlb	0	; () banked
  4355  0046A2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4356  0046A4  0E0F               	movlw	15
  4357  0046A6  1785               	andwf	??_initSortTimer& (0+255),f,b
  4358  0046A8  0E0F               	movlw	15
  4359  0046AA  0100               	movlb	0	; () banked
  4360  0046AC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4361  0046AE  0100               	movlb	0	; () banked
  4362  0046B0  5185               	movf	??_initSortTimer& (0+255),w,b
  4363  0046B2  0D0A               	mullw	10
  4364  0046B4  0E1C               	movlw	low _time
  4365  0046B6  0100               	movlb	0	; () banked
  4366  0046B8  2588               	addwf	initSortTimer@i& (0+255),w,b
  4367  0046BA  6ED9               	movwf	fsr2l,c
  4368  0046BC  0E01               	movlw	high _time
  4369  0046BE  0100               	movlb	0	; () banked
  4370  0046C0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4371  0046C2  6EDA               	movwf	fsr2h,c
  4372  0046C4  50DF               	movf	indf2,w,c
  4373  0046C6  0B0F               	andlw	15
  4374  0046C8  0100               	movlb	0	; () banked
  4375  0046CA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4376  0046CC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4377  0046CE  50F3               	movf	prodl,w,c
  4378  0046D0  0100               	movlb	0	; () banked
  4379  0046D2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4380  0046D4  50F4               	movf	prodh,w,c
  4381  0046D6  0100               	movlb	0	; () banked
  4382  0046D8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4383  0046DA  90D8               	bcf	status,0,c
  4384  0046DC  0100               	movlb	0	; () banked
  4385  0046DE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4386  0046E0  6ED9               	movwf	fsr2l,c
  4387  0046E2  0100               	movlb	0	; () banked
  4388  0046E4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4389  0046E6  6EDA               	movwf	fsr2h,c
  4390  0046E8  0E0E               	movlw	low _startTime
  4391  0046EA  26D9               	addwf	fsr2l,f,c
  4392  0046EC  0E01               	movlw	high _startTime
  4393  0046EE  22DA               	addwfc	fsr2h,f,c
  4394  0046F0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4395  0046F4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4396                           
  4397                           ; BSR set to: 0
  4398  0046F8  0100               	movlb	0	; () banked
  4399  0046FA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4400  0046FC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4401  0046FE  D7BA               	goto	l7036
  4402  004700                     l7046:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;sort.c: 421: }
  4406                           ;sort.c: 423: T0CON = 0b00010111;
  4407  004700  0E17               	movlw	23
  4408  004702  6ED5               	movwf	4053,c	;volatile
  4409                           
  4410                           ;sort.c: 432: TMR0H = 0b10000101;
  4411  004704  0E85               	movlw	133
  4412  004706  6ED7               	movwf	4055,c	;volatile
  4413                           
  4414                           ;sort.c: 433: TMR0L = 0b11101110;
  4415  004708  0EEE               	movlw	238
  4416  00470A  6ED6               	movwf	4054,c	;volatile
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;sort.c: 434: TMR0ON = 1;
  4420  00470C  8ED5               	bsf	4053,7,c	;volatile
  4421                           
  4422                           ; BSR set to: 0
  4423  00470E  0012               	return		;funcret
  4424  004710                     __end_of_initSortTimer:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _initGlobalVars *****************
  4444 ;; Defined at:
  4445 ;;		line 384 in file "sort.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    7
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_Loading
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text4
  4474  00442E                     __ptext4:
  4475                           	opt stack 0
  4476  00442E                     _initGlobalVars:
  4477                           	opt stack 21
  4478                           
  4479                           ;sort.c: 386: first = 0;
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;incstack = 0
  4483  00442E  0E00               	movlw	0
  4484  004430  0101               	movlb	1	; () banked
  4485  004432  6F3A               	movwf	(_first+1)& (0+255),b
  4486  004434  0E00               	movlw	0
  4487  004436  6F39               	movwf	_first& (0+255),b
  4488                           
  4489                           ;sort.c: 389: f_loadingNewCan = 0;
  4490  004438  0E00               	movlw	0
  4491  00443A  0100               	movlb	0	; () banked
  4492  00443C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4493  00443E  0E00               	movlw	0
  4494  004440  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4495                           
  4496                           ;sort.c: 390: f_lastCan = 0;
  4497  004442  0E00               	movlw	0
  4498  004444  0100               	movlb	0	; () banked
  4499  004446  6FF1               	movwf	(_f_lastCan+1)& (0+255),b
  4500  004448  0E00               	movlw	0
  4501  00444A  6FF0               	movwf	_f_lastCan& (0+255),b
  4502                           
  4503                           ;sort.c: 391: f_ID_receive = 1;
  4504  00444C  0E00               	movlw	0
  4505  00444E  0101               	movlb	1	; () banked
  4506  004450  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4507  004452  0E01               	movlw	1
  4508  004454  6F2F               	movwf	_f_ID_receive& (0+255),b
  4509                           
  4510                           ;sort.c: 392: f_can_coming_to_ID = 0;
  4511  004456  0E00               	movlw	0
  4512  004458  0101               	movlb	1	; () banked
  4513  00445A  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4514  00445C  0E00               	movlw	0
  4515  00445E  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4516                           
  4517                           ;sort.c: 393: f_can_coming_to_distribution = 0;
  4518  004460  0E00               	movlw	0
  4519  004462  0101               	movlb	1	; () banked
  4520  004464  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4521  004466  0E00               	movlw	0
  4522  004468  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4523                           
  4524                           ;sort.c: 394: f_can_distributed = 1;
  4525  00446A  0E00               	movlw	0
  4526  00446C  0101               	movlb	1	; () banked
  4527  00446E  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4528  004470  0E01               	movlw	1
  4529  004472  6F35               	movwf	_f_can_distributed& (0+255),b
  4530                           
  4531                           ;sort.c: 395: f_most_recent_sort_time = 0;
  4532  004474  0E00               	movlw	0
  4533  004476  0101               	movlb	1	; () banked
  4534  004478  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4535  00447A  0E00               	movlw	0
  4536  00447C  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4537                           
  4538                           ;sort.c: 398: count_total = 0;
  4539  00447E  0E00               	movlw	0
  4540  004480  0100               	movlb	0	; () banked
  4541  004482  6FFF               	movwf	(_count_total+1)& (0+255),b
  4542  004484  0E00               	movlw	0
  4543  004486  6FFE               	movwf	_count_total& (0+255),b
  4544                           
  4545                           ;sort.c: 399: count_pop_no_tab = 0;
  4546  004488  0E00               	movlw	0
  4547  00448A  0101               	movlb	1	; () banked
  4548  00448C  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4549  00448E  0E00               	movlw	0
  4550  004490  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4551                           
  4552                           ;sort.c: 400: count_pop_w_tab = 0;
  4553  004492  0E00               	movlw	0
  4554  004494  0101               	movlb	1	; () banked
  4555  004496  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4556  004498  0E00               	movlw	0
  4557  00449A  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4558                           
  4559                           ;sort.c: 401: count_can_w_lab = 0;
  4560  00449C  0E00               	movlw	0
  4561  00449E  0101               	movlb	1	; () banked
  4562  0044A0  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4563  0044A2  0E00               	movlw	0
  4564  0044A4  6F25               	movwf	_count_can_w_lab& (0+255),b
  4565                           
  4566                           ;sort.c: 402: count_can_no_lab = 0;
  4567  0044A6  0E00               	movlw	0
  4568  0044A8  0101               	movlb	1	; () banked
  4569  0044AA  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4570  0044AC  0E00               	movlw	0
  4571  0044AE  6F23               	movwf	_count_can_no_lab& (0+255),b
  4572                           
  4573                           ;sort.c: 405: most_recent_sort_time = 999;
  4574  0044B0  0E03               	movlw	3
  4575  0044B2  6E6A               	movwf	_most_recent_sort_time+1,c
  4576  0044B4  0EE7               	movlw	231
  4577  0044B6  6E69               	movwf	_most_recent_sort_time,c
  4578                           
  4579                           ;sort.c: 408: servo_timer_counter = 0;
  4580  0044B8  0E00               	movlw	0
  4581  0044BA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4582  0044BC  0E00               	movlw	0
  4583  0044BE  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4584                           
  4585                           ;sort.c: 409: servo_timer_target = 9999;
  4586  0044C0  0E27               	movlw	39
  4587  0044C2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4588  0044C4  0E0F               	movlw	15
  4589  0044C6  6E6F               	movwf	_servo_timer_target,c	;volatile
  4590                           
  4591                           ;sort.c: 410: timer2_counter = 0;
  4592  0044C8  0E00               	movlw	0
  4593  0044CA  6E74               	movwf	_timer2_counter+1,c	;volatile
  4594  0044CC  0E00               	movlw	0
  4595  0044CE  6E73               	movwf	_timer2_counter,c	;volatile
  4596                           
  4597                           ;sort.c: 411: f_arm_position = 0;
  4598  0044D0  0E00               	movlw	0
  4599  0044D2  0100               	movlb	0	; () banked
  4600  0044D4  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4601  0044D6  0E00               	movlw	0
  4602  0044D8  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;sort.c: 412: pan_servo_state = -1;
  4606  0044DA  686B               	setf	_pan_servo_state,c	;volatile
  4607  0044DC  686C               	setf	_pan_servo_state+1,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;sort.c: 413: tilt_servo_state = -1;
  4611  0044DE  6871               	setf	_tilt_servo_state,c	;volatile
  4612  0044E0  6872               	setf	_tilt_servo_state+1,c	;volatile
  4613                           
  4614                           ;sort.c: 414: f_panning_to_bin = 0;
  4615  0044E2  0E00               	movlw	0
  4616  0044E4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4617  0044E6  0E00               	movlw	0
  4618  0044E8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4619                           
  4620                           ; BSR set to: 0
  4621  0044EA  0012               	return		;funcret
  4622  0044EC                     __end_of_initGlobalVars:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _getMAG *****************
  4642 ;; Defined at:
  4643 ;;		line 513 in file "sort.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;Total ram usage:        2 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    9
  4664 ;; This function calls:
  4665 ;;		_readMAG
  4666 ;; This function is called by:
  4667 ;;		_Loading
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text5
  4672  005184                     __ptext5:
  4673                           	opt stack 0
  4674  005184                     _getMAG:
  4675                           	opt stack 19
  4676                           
  4677                           ;sort.c: 514: readMAG();
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;incstack = 0
  4681  005184  ECCD  F027         	call	_readMAG	;wreg free
  4682                           
  4683                           ;sort.c: 516: if(MAG_signal==1){
  4684  005188  0100               	movlb	0	; () banked
  4685  00518A  05E8               	decf	_MAG_signal& (0+255),w,b
  4686  00518C  0100               	movlb	0	; () banked
  4687  00518E  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4688  005190  A4D8               	btfss	status,2,c
  4689  005192  0012               	return	
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;sort.c: 517: _delay((unsigned long)((500)*(32000000/4000.0)));
  4693  005194  0E15               	movlw	21
  4694  005196  0100               	movlb	0	; () banked
  4695  005198  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4696  00519A  0E4B               	movlw	75
  4697  00519C  0100               	movlb	0	; () banked
  4698  00519E  6F86               	movwf	??_getMAG& (0+255),b
  4699  0051A0  0EBE               	movlw	190
  4700  0051A2                     u9387:
  4701  0051A2  2EE8               	decfsz	wreg,f,c
  4702  0051A4  D7FE               	bra	u9387
  4703  0051A6  2F86               	decfsz	??_getMAG& (0+255),f,b
  4704  0051A8  D7FC               	bra	u9387
  4705  0051AA  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4706  0051AC  D7FA               	bra	u9387
  4707  0051AE  F000               	nop	
  4708                           
  4709                           ;sort.c: 518: readMAG();
  4710  0051B0  ECCD  F027         	call	_readMAG	;wreg free
  4711  0051B4  0012               	return	
  4712  0051B6                     __end_of_getMAG:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _getIR *****************
  4732 ;; Defined at:
  4733 ;;		line 497 in file "sort.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  i               2    7[BANK0 ] int 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        3 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    9
  4754 ;; This function calls:
  4755 ;;		_readIR
  4756 ;; This function is called by:
  4757 ;;		_Loading
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text6
  4762  004ABE                     __ptext6:
  4763                           	opt stack 0
  4764  004ABE                     _getIR:
  4765                           	opt stack 19
  4766                           
  4767                           ;sort.c: 498: readIR();
  4768                           
  4769                           ;incstack = 0
  4770  004ABE  ECA7  F027         	call	_readIR	;wreg free
  4771                           
  4772                           ;sort.c: 499: for(int i = 0; i < 150; i++){
  4773  004AC2  0E00               	movlw	0
  4774  004AC4  0100               	movlb	0	; () banked
  4775  004AC6  6F88               	movwf	(getIR@i+1)& (0+255),b
  4776  004AC8  0E00               	movlw	0
  4777  004ACA  6F87               	movwf	getIR@i& (0+255),b
  4778  004ACC                     l7136:
  4779                           
  4780                           ; BSR set to: 0
  4781  004ACC  0100               	movlb	0	; () banked
  4782  004ACE  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4783  004AD0  D008               	goto	l7140
  4784  004AD2  0100               	movlb	0	; () banked
  4785  004AD4  5188               	movf	(getIR@i+1)& (0+255),w,b
  4786  004AD6  E11A               	bnz	l7152
  4787  004AD8  0E96               	movlw	150
  4788  004ADA  0100               	movlb	0	; () banked
  4789  004ADC  5D87               	subwf	getIR@i& (0+255),w,b
  4790  004ADE  B0D8               	btfsc	status,0,c
  4791  004AE0  D015               	goto	l7152
  4792  004AE2                     l7140:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;sort.c: 500: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4796  004AE2  0E06               	movlw	6
  4797  004AE4  0100               	movlb	0	; () banked
  4798  004AE6  6F86               	movwf	??_getIR& (0+255),b
  4799  004AE8  0E30               	movlw	48
  4800  004AEA                     u9397:
  4801  004AEA  2EE8               	decfsz	wreg,f,c
  4802  004AEC  D7FE               	bra	u9397
  4803  004AEE  2F86               	decfsz	??_getIR& (0+255),f,b
  4804  004AF0  D7FC               	bra	u9397
  4805  004AF2  F000               	nop	
  4806                           
  4807                           ;sort.c: 501: readIR();
  4808  004AF4  ECA7  F027         	call	_readIR	;wreg free
  4809                           
  4810                           ;sort.c: 502: if(!IR_signal){
  4811  004AF8  0100               	movlb	0	; () banked
  4812  004AFA  51E6               	movf	_IR_signal& (0+255),w,b
  4813  004AFC  0100               	movlb	0	; () banked
  4814  004AFE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4815  004B00  B4D8               	btfsc	status,2,c
  4816  004B02  D004               	goto	l7152
  4817                           
  4818                           ; BSR set to: 0
  4819                           
  4820                           ; BSR set to: 0
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;sort.c: 503: break;
  4824  004B04  0100               	movlb	0	; () banked
  4825  004B06  4B87               	infsnz	getIR@i& (0+255),f,b
  4826  004B08  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4827  004B0A  D7E0               	goto	l7136
  4828  004B0C                     l7152:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;sort.c: 504: }
  4832                           ;sort.c: 505: }
  4833                           ;sort.c: 506: if(IR_signal==1){
  4834  004B0C  0100               	movlb	0	; () banked
  4835  004B0E  05E6               	decf	_IR_signal& (0+255),w,b
  4836  004B10  0100               	movlb	0	; () banked
  4837  004B12  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4838  004B14  A4D8               	btfss	status,2,c
  4839  004B16  D006               	goto	l7156
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;sort.c: 507: f_loadingNewCan = 1;
  4843  004B18  0E00               	movlw	0
  4844  004B1A  0100               	movlb	0	; () banked
  4845  004B1C  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4846  004B1E  0E01               	movlw	1
  4847  004B20  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4848                           
  4849                           ;sort.c: 508: }
  4850  004B22  0012               	return	
  4851  004B24                     l7156:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;sort.c: 509: else{
  4855                           ;sort.c: 510: f_loadingNewCan = 0;
  4856  004B24  0E00               	movlw	0
  4857  004B26  0100               	movlb	0	; () banked
  4858  004B28  6FF3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4859  004B2A  0E00               	movlw	0
  4860  004B2C  6FF2               	movwf	_f_loadingNewCan& (0+255),b
  4861  004B2E  0012               	return	
  4862  004B30                     __end_of_getIR:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _readIR *****************
  4882 ;; Defined at:
  4883 ;;		line 23 in file "ADCFunctionality.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  res             2    4[BANK0 ] int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;Total ram usage:        4 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    8
  4904 ;; This function calls:
  4905 ;;		_readADC
  4906 ;; This function is called by:
  4907 ;;		_Loading
  4908 ;;		_getIR
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text7
  4913  004F4E                     __ptext7:
  4914                           	opt stack 0
  4915  004F4E                     _readIR:
  4916                           	opt stack 20
  4917                           
  4918                           ;ADCFunctionality.c: 24: readADC(0);
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;incstack = 0
  4922  004F4E  0E00               	movlw	0
  4923  004F50  EC28  F02A         	call	_readADC
  4924                           
  4925                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4926  004F54  50C3               	movf	4035,w,c	;volatile
  4927  004F56  CFC4 F082          	movff	4036,??_readIR	;volatile
  4928  004F5A  0100               	movlb	0	; () banked
  4929  004F5C  6B83               	clrf	(??_readIR+1)& (0+255),b
  4930  004F5E  C082  F083         	movff	??_readIR,??_readIR+1
  4931  004F62  0100               	movlb	0	; () banked
  4932  004F64  6B82               	clrf	??_readIR& (0+255),b
  4933  004F66  0100               	movlb	0	; () banked
  4934  004F68  1182               	iorwf	??_readIR& (0+255),w,b
  4935  004F6A  0100               	movlb	0	; () banked
  4936  004F6C  6F84               	movwf	readIR@res& (0+255),b
  4937  004F6E  0100               	movlb	0	; () banked
  4938  004F70  5183               	movf	(??_readIR+1)& (0+255),w,b
  4939  004F72  0100               	movlb	0	; () banked
  4940  004F74  6F85               	movwf	(readIR@res+1)& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4944  004F76  0100               	movlb	0	; () banked
  4945  004F78  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4946  004F7A  D00A               	goto	u4810
  4947  004F7C  0E21               	movlw	33
  4948  004F7E  0100               	movlb	0	; () banked
  4949  004F80  5D84               	subwf	readIR@res& (0+255),w,b
  4950  004F82  0E03               	movlw	3
  4951  004F84  0100               	movlb	0	; () banked
  4952  004F86  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4953  004F88  A0D8               	btfss	status,0,c
  4954  004F8A  D002               	goto	u4810
  4955  004F8C  0E01               	movlw	1
  4956  004F8E  D001               	goto	u4820
  4957  004F90                     u4810:
  4958  004F90  0E00               	movlw	0
  4959  004F92                     u4820:
  4960  004F92  0100               	movlb	0	; () banked
  4961  004F94  6FE6               	movwf	_IR_signal& (0+255),b
  4962  004F96  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965  004F98  0012               	return		;funcret
  4966  004F9A                     __end_of_readIR:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _ID *****************
  4986 ;; Defined at:
  4987 ;;		line 259 in file "sort.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  i               2    8[BANK0 ] int 
  4992 ;;  i               2    6[BANK0 ] int 
  4993 ;;  i               2    4[BANK0 ] int 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;Total ram usage:        8 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    8
  5010 ;; This function calls:
  5011 ;;		_delay_ms
  5012 ;; This function is called by:
  5013 ;;		_sort
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text8
  5018  003090                     __ptext8:
  5019                           	opt stack 0
  5020  003090                     _ID:
  5021                           	opt stack 21
  5022                           
  5023                           ;sort.c: 260: if(f_can_coming_to_ID){
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  003090  0101               	movlb	1	; () banked
  5028  003092  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  5029  003094  0101               	movlb	1	; () banked
  5030  003096  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5031  003098  B4D8               	btfsc	status,2,c
  5032  00309A  0012               	return	
  5033                           
  5034                           ; BSR set to: 1
  5035                           ;sort.c: 262: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5036  00309C  0E29               	movlw	41
  5037  00309E  0100               	movlb	0	; () banked
  5038  0030A0  6F83               	movwf	(??_ID+1)& (0+255),b
  5039  0030A2  0E96               	movlw	150
  5040  0030A4  0100               	movlb	0	; () banked
  5041  0030A6  6F82               	movwf	??_ID& (0+255),b
  5042  0030A8  0E7F               	movlw	127
  5043  0030AA                     u9407:
  5044  0030AA  2EE8               	decfsz	wreg,f,c
  5045  0030AC  D7FE               	bra	u9407
  5046  0030AE  2F82               	decfsz	??_ID& (0+255),f,b
  5047  0030B0  D7FC               	bra	u9407
  5048  0030B2  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5049  0030B4  D7FA               	bra	u9407
  5050                           
  5051                           ;sort.c: 264: f_arm_position = 0;
  5052  0030B6  0E00               	movlw	0
  5053  0030B8  0100               	movlb	0	; () banked
  5054  0030BA  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5055  0030BC  0E00               	movlw	0
  5056  0030BE  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;sort.c: 266: LATAbits.LATA3 = 1;
  5060  0030C0  8689               	bsf	3977,3,c	;volatile
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;sort.c: 267: _delay((unsigned long)((600)*(32000000/4000.0)));
  5064  0030C2  0E19               	movlw	25
  5065  0030C4  0100               	movlb	0	; () banked
  5066  0030C6  6F83               	movwf	(??_ID+1)& (0+255),b
  5067  0030C8  0E5A               	movlw	90
  5068  0030CA  0100               	movlb	0	; () banked
  5069  0030CC  6F82               	movwf	??_ID& (0+255),b
  5070  0030CE  0EB1               	movlw	177
  5071  0030D0                     u9417:
  5072  0030D0  2EE8               	decfsz	wreg,f,c
  5073  0030D2  D7FE               	bra	u9417
  5074  0030D4  2F82               	decfsz	??_ID& (0+255),f,b
  5075  0030D6  D7FC               	bra	u9417
  5076  0030D8  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5077  0030DA  D7FA               	bra	u9417
  5078  0030DC  D000               	nop2	
  5079                           
  5080                           ;sort.c: 268: sensor_outputs[1] = PORTAbits.RA2;
  5081  0030DE  A480               	btfss	3968,2,c	;volatile
  5082  0030E0  D004               	goto	u6180
  5083  0030E2  0100               	movlb	0	; () banked
  5084  0030E4  6B82               	clrf	??_ID& (0+255),b
  5085  0030E6  2B82               	incf	??_ID& (0+255),f,b
  5086  0030E8  D002               	goto	u6188
  5087  0030EA                     u6180:
  5088  0030EA  0100               	movlb	0	; () banked
  5089  0030EC  6B82               	clrf	??_ID& (0+255),b
  5090  0030EE                     u6188:
  5091  0030EE  0100               	movlb	0	; () banked
  5092  0030F0  5182               	movf	??_ID& (0+255),w,b
  5093  0030F2  0100               	movlb	0	; () banked
  5094  0030F4  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5095  0030F6  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;sort.c: 269: LATAbits.LATA3 = 0;
  5099  0030F8  9689               	bcf	3977,3,c	;volatile
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;sort.c: 271: _delay((unsigned long)((200)*(32000000/4000.0)));
  5103  0030FA  0E09               	movlw	9
  5104  0030FC  0100               	movlb	0	; () banked
  5105  0030FE  6F83               	movwf	(??_ID+1)& (0+255),b
  5106  003100  0E1E               	movlw	30
  5107  003102  0100               	movlb	0	; () banked
  5108  003104  6F82               	movwf	??_ID& (0+255),b
  5109  003106  0EE4               	movlw	228
  5110  003108                     u9427:
  5111  003108  2EE8               	decfsz	wreg,f,c
  5112  00310A  D7FE               	bra	u9427
  5113  00310C  2F82               	decfsz	??_ID& (0+255),f,b
  5114  00310E  D7FC               	bra	u9427
  5115  003110  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5116  003112  D7FA               	bra	u9427
  5117  003114  F000               	nop	
  5118                           
  5119                           ;sort.c: 272: LATAbits.LATA3 = 1;
  5120  003116  8689               	bsf	3977,3,c	;volatile
  5121                           
  5122                           ;sort.c: 273: _delay((unsigned long)((600)*(32000000/4000.0)));
  5123  003118  0E19               	movlw	25
  5124  00311A  0100               	movlb	0	; () banked
  5125  00311C  6F83               	movwf	(??_ID+1)& (0+255),b
  5126  00311E  0E5A               	movlw	90
  5127  003120  0100               	movlb	0	; () banked
  5128  003122  6F82               	movwf	??_ID& (0+255),b
  5129  003124  0EB1               	movlw	177
  5130  003126                     u9437:
  5131  003126  2EE8               	decfsz	wreg,f,c
  5132  003128  D7FE               	bra	u9437
  5133  00312A  2F82               	decfsz	??_ID& (0+255),f,b
  5134  00312C  D7FC               	bra	u9437
  5135  00312E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5136  003130  D7FA               	bra	u9437
  5137  003132  D000               	nop2	
  5138                           
  5139                           ;sort.c: 274: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  5140  003134  A480               	btfss	3968,2,c	;volatile
  5141  003136  D004               	goto	u6190
  5142  003138  0100               	movlb	0	; () banked
  5143  00313A  6B82               	clrf	??_ID& (0+255),b
  5144  00313C  2B82               	incf	??_ID& (0+255),f,b
  5145  00313E  D002               	goto	u6198
  5146  003140                     u6190:
  5147  003140  0100               	movlb	0	; () banked
  5148  003142  6B82               	clrf	??_ID& (0+255),b
  5149  003144                     u6198:
  5150  003144  0100               	movlb	0	; () banked
  5151  003146  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5152  003148  0100               	movlb	0	; () banked
  5153  00314A  1182               	iorwf	??_ID& (0+255),w,b
  5154  00314C  0100               	movlb	0	; () banked
  5155  00314E  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  5156  003150  0100               	movlb	0	; () banked
  5157  003152  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  5158  003154  0100               	movlb	0	; () banked
  5159  003156  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;sort.c: 282: if(!sensor_outputs[0]){
  5163  003158  0100               	movlb	0	; () banked
  5164  00315A  51E2               	movf	_sensor_outputs& (0+255),w,b
  5165  00315C  0100               	movlb	0	; () banked
  5166  00315E  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5167  003160  A4D8               	btfss	status,2,c
  5168  003162  D016               	goto	l7684
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;sort.c: 283: if(!sensor_outputs[1]){
  5172  003164  0100               	movlb	0	; () banked
  5173  003166  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5174  003168  0100               	movlb	0	; () banked
  5175  00316A  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5176  00316C  A4D8               	btfss	status,2,c
  5177  00316E  D008               	goto	l7680
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;sort.c: 284: count_pop_no_tab++;
  5181  003170  0101               	movlb	1	; () banked
  5182  003172  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5183  003174  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;sort.c: 285: cur_can = 0;
  5187  003176  0E00               	movlw	0
  5188  003178  0101               	movlb	1	; () banked
  5189  00317A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5190  00317C  0E00               	movlw	0
  5191  00317E  D007               	goto	L7
  5192  003180                     l7680:
  5193                           
  5194                           ;sort.c: 287: else{
  5195                           ;sort.c: 288: count_pop_w_tab++;
  5196  003180  0101               	movlb	1	; () banked
  5197  003182  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5198  003184  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 1
  5201                           ;sort.c: 289: cur_can = 1;
  5202  003186  0E00               	movlw	0
  5203  003188  0101               	movlb	1	; () banked
  5204  00318A  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5205  00318C  0E01               	movlw	1
  5206  00318E                     L7:
  5207  00318E  6F2B               	movwf	_cur_can& (0+255),b
  5208  003190                     l7684:
  5209                           
  5210                           ;sort.c: 290: }
  5211                           ;sort.c: 291: }
  5212                           ;sort.c: 292: if(sensor_outputs[0]){
  5213  003190  0100               	movlb	0	; () banked
  5214  003192  51E2               	movf	_sensor_outputs& (0+255),w,b
  5215  003194  0100               	movlb	0	; () banked
  5216  003196  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5217  003198  B4D8               	btfsc	status,2,c
  5218  00319A  D016               	goto	l7696
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;sort.c: 293: if(!sensor_outputs[1]){
  5222  00319C  0100               	movlb	0	; () banked
  5223  00319E  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5224  0031A0  0100               	movlb	0	; () banked
  5225  0031A2  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5226  0031A4  A4D8               	btfss	status,2,c
  5227  0031A6  D008               	goto	l7692
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;sort.c: 294: count_can_w_lab++;
  5231  0031A8  0101               	movlb	1	; () banked
  5232  0031AA  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5233  0031AC  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5234                           
  5235                           ; BSR set to: 1
  5236                           ;sort.c: 295: cur_can = 2;
  5237  0031AE  0E00               	movlw	0
  5238  0031B0  0101               	movlb	1	; () banked
  5239  0031B2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5240  0031B4  0E02               	movlw	2
  5241  0031B6  D007               	goto	L8
  5242  0031B8                     l7692:
  5243                           
  5244                           ;sort.c: 297: else{
  5245                           ;sort.c: 298: count_can_no_lab++;
  5246  0031B8  0101               	movlb	1	; () banked
  5247  0031BA  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5248  0031BC  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5249                           
  5250                           ; BSR set to: 1
  5251                           ;sort.c: 299: cur_can = 3;
  5252  0031BE  0E00               	movlw	0
  5253  0031C0  0101               	movlb	1	; () banked
  5254  0031C2  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5255  0031C4  0E03               	movlw	3
  5256  0031C6                     L8:
  5257  0031C6  6F2B               	movwf	_cur_can& (0+255),b
  5258  0031C8                     l7696:
  5259                           
  5260                           ;sort.c: 300: }
  5261                           ;sort.c: 301: }
  5262                           ;sort.c: 302: LATAbits.LATA3 = 0;
  5263  0031C8  9689               	bcf	3977,3,c	;volatile
  5264  0031CA                     l7698:
  5265  0031CA  0101               	movlb	1	; () banked
  5266  0031CC  5135               	movf	_f_can_distributed& (0+255),w,b
  5267  0031CE  0101               	movlb	1	; () banked
  5268  0031D0  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5269  0031D2  B4D8               	btfsc	status,2,c
  5270  0031D4  D7FA               	goto	l7698
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;sort.c: 306: if(sensor_outputs[0]){
  5274                           
  5275                           ; BSR set to: 1
  5276  0031D6  0100               	movlb	0	; () banked
  5277  0031D8  51E2               	movf	_sensor_outputs& (0+255),w,b
  5278  0031DA  0100               	movlb	0	; () banked
  5279  0031DC  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5280  0031DE  B4D8               	btfsc	status,2,c
  5281  0031E0  D020               	goto	l7716
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;sort.c: 308: LATAbits.LATA3 = 1;
  5285  0031E2  8689               	bsf	3977,3,c	;volatile
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;sort.c: 311: for(int i=0;i<10000;i++)
  5289  0031E4  0E00               	movlw	0
  5290  0031E6  0100               	movlb	0	; () banked
  5291  0031E8  6F85               	movwf	(ID@i+1)& (0+255),b
  5292  0031EA  0E00               	movlw	0
  5293  0031EC  6F84               	movwf	ID@i& (0+255),b
  5294  0031EE                     l7706:
  5295                           
  5296                           ; BSR set to: 0
  5297  0031EE  0100               	movlb	0	; () banked
  5298  0031F0  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5299  0031F2  D008               	goto	l831
  5300  0031F4  0E10               	movlw	16
  5301  0031F6  0100               	movlb	0	; () banked
  5302  0031F8  5D84               	subwf	ID@i& (0+255),w,b
  5303  0031FA  0E27               	movlw	39
  5304  0031FC  0100               	movlb	0	; () banked
  5305  0031FE  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5306  003200  B0D8               	btfsc	status,0,c
  5307  003202  D00D               	goto	l832
  5308  003204                     l831:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;sort.c: 312: {
  5312                           ;sort.c: 313: LATCbits.LATC0 = 1;
  5313  003204  808B               	bsf	3979,0,c	;volatile
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;sort.c: 314: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5317  003206  0E1A               	movlw	26
  5318  003208                     u9447:
  5319  003208  2EE8               	decfsz	wreg,f,c
  5320  00320A  D7FE               	bra	u9447
  5321  00320C  D000               	nop2	
  5322                           
  5323                           ;sort.c: 315: LATCbits.LATC0 = 0;
  5324  00320E  908B               	bcf	3979,0,c	;volatile
  5325                           
  5326                           ;sort.c: 316: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5327  003210  0EF0               	movlw	240
  5328  003212                     u9457:
  5329  003212  2EE8               	decfsz	wreg,f,c
  5330  003214  D7FE               	bra	u9457
  5331  003216  0100               	movlb	0	; () banked
  5332  003218  4B84               	infsnz	ID@i& (0+255),f,b
  5333  00321A  2B85               	incf	(ID@i+1)& (0+255),f,b
  5334  00321C  D7E8               	goto	l7706
  5335  00321E                     l832:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;sort.c: 317: }
  5339                           ;sort.c: 319: LATAbits.LATA3 = 0;
  5340  00321E  9689               	bcf	3977,3,c	;volatile
  5341                           
  5342                           ;sort.c: 322: }
  5343  003220  D01D               	goto	l833
  5344  003222                     l7716:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;sort.c: 323: else{
  5348                           ;sort.c: 325: for(int i=0;i<10000;i++)
  5349  003222  0E00               	movlw	0
  5350  003224  0100               	movlb	0	; () banked
  5351  003226  6F87               	movwf	(ID@i_1181+1)& (0+255),b
  5352  003228  0E00               	movlw	0
  5353  00322A  6F86               	movwf	ID@i_1181& (0+255),b
  5354  00322C                     l7718:
  5355                           
  5356                           ; BSR set to: 0
  5357  00322C  0100               	movlb	0	; () banked
  5358  00322E  BF87               	btfsc	(ID@i_1181+1)& (0+255),7,b
  5359  003230  D008               	goto	l834
  5360  003232  0E10               	movlw	16
  5361  003234  0100               	movlb	0	; () banked
  5362  003236  5D86               	subwf	ID@i_1181& (0+255),w,b
  5363  003238  0E27               	movlw	39
  5364  00323A  0100               	movlb	0	; () banked
  5365  00323C  5987               	subwfb	(ID@i_1181+1)& (0+255),w,b
  5366  00323E  B0D8               	btfsc	status,0,c
  5367  003240  D00D               	goto	l833
  5368  003242                     l834:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;sort.c: 326: {
  5372                           ;sort.c: 327: LATCbits.LATC0 = 1;
  5373  003242  808B               	bsf	3979,0,c	;volatile
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;sort.c: 328: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5377  003244  0E1A               	movlw	26
  5378  003246                     u9467:
  5379  003246  2EE8               	decfsz	wreg,f,c
  5380  003248  D7FE               	bra	u9467
  5381  00324A  D000               	nop2	
  5382                           
  5383                           ;sort.c: 329: LATCbits.LATC0 = 0;
  5384  00324C  908B               	bcf	3979,0,c	;volatile
  5385                           
  5386                           ;sort.c: 330: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5387  00324E  0EF0               	movlw	240
  5388  003250                     u9477:
  5389  003250  2EE8               	decfsz	wreg,f,c
  5390  003252  D7FE               	bra	u9477
  5391  003254  0100               	movlb	0	; () banked
  5392  003256  4B86               	infsnz	ID@i_1181& (0+255),f,b
  5393  003258  2B87               	incf	(ID@i_1181+1)& (0+255),f,b
  5394  00325A  D7E8               	goto	l7718
  5395  00325C                     l833:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;sort.c: 331: }
  5399                           ;sort.c: 332: }
  5400                           ;sort.c: 334: LATCbits.LATC0 = 0;
  5401  00325C  908B               	bcf	3979,0,c	;volatile
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;sort.c: 336: f_can_coming_to_distribution = 1;
  5405  00325E  0E00               	movlw	0
  5406  003260  0101               	movlb	1	; () banked
  5407  003262  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5408  003264  0E01               	movlw	1
  5409  003266  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5410                           
  5411                           ; BSR set to: 1
  5412                           ;sort.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
  5413  003268  0E1F               	movlw	31
  5414  00326A  0100               	movlb	0	; () banked
  5415  00326C  6F83               	movwf	(??_ID+1)& (0+255),b
  5416  00326E  0E71               	movlw	113
  5417  003270  0100               	movlb	0	; () banked
  5418  003272  6F82               	movwf	??_ID& (0+255),b
  5419  003274  0E1E               	movlw	30
  5420  003276                     u9487:
  5421  003276  2EE8               	decfsz	wreg,f,c
  5422  003278  D7FE               	bra	u9487
  5423  00327A  2F82               	decfsz	??_ID& (0+255),f,b
  5424  00327C  D7FC               	bra	u9487
  5425  00327E  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5426  003280  D7FA               	bra	u9487
  5427  003282  F000               	nop	
  5428                           
  5429                           ;sort.c: 338: LATCbits.LATC0 = 1;
  5430  003284  808B               	bsf	3979,0,c	;volatile
  5431                           
  5432                           ;sort.c: 341: if(!f_lastCan){
  5433  003286  0100               	movlb	0	; () banked
  5434  003288  51F0               	movf	_f_lastCan& (0+255),w,b
  5435  00328A  0100               	movlb	0	; () banked
  5436  00328C  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5437  00328E  A4D8               	btfss	status,2,c
  5438  003290  D032               	goto	l7750
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;sort.c: 342: for(int i=0; i<46; i++){
  5442  003292  0E00               	movlw	0
  5443  003294  0100               	movlb	0	; () banked
  5444  003296  6F89               	movwf	(ID@i_1182+1)& (0+255),b
  5445  003298  0E00               	movlw	0
  5446  00329A  6F88               	movwf	ID@i_1182& (0+255),b
  5447                           
  5448                           ; BSR set to: 0
  5449  00329C  0100               	movlb	0	; () banked
  5450  00329E  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5451  0032A0  D008               	goto	l7742
  5452  0032A2  0100               	movlb	0	; () banked
  5453  0032A4  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5454  0032A6  E126               	bnz	l838
  5455  0032A8  0E2E               	movlw	46
  5456  0032AA  0100               	movlb	0	; () banked
  5457  0032AC  5D88               	subwf	ID@i_1182& (0+255),w,b
  5458  0032AE  B0D8               	btfsc	status,0,c
  5459  0032B0  D021               	goto	l838
  5460  0032B2                     l7742:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;sort.c: 343: LATBbits.LATB2 = !LATBbits.LATB2;
  5464  0032B2  B48A               	btfsc	3978,2,c	;volatile
  5465  0032B4  D004               	goto	u6320
  5466  0032B6  0100               	movlb	0	; () banked
  5467  0032B8  6B82               	clrf	??_ID& (0+255),b
  5468  0032BA  2B82               	incf	??_ID& (0+255),f,b
  5469  0032BC  D002               	goto	u6338
  5470  0032BE                     u6320:
  5471  0032BE  0100               	movlb	0	; () banked
  5472  0032C0  6B82               	clrf	??_ID& (0+255),b
  5473  0032C2                     u6338:
  5474  0032C2  0100               	movlb	0	; () banked
  5475  0032C4  4782               	rlncf	??_ID& (0+255),f,b
  5476  0032C6  4782               	rlncf	??_ID& (0+255),f,b
  5477  0032C8  508A               	movf	3978,w,c	;volatile
  5478  0032CA  0100               	movlb	0	; () banked
  5479  0032CC  1982               	xorwf	??_ID& (0+255),w,b
  5480  0032CE  0BFB               	andlw	-5
  5481  0032D0  1982               	xorwf	??_ID& (0+255),w,b
  5482  0032D2  6E8A               	movwf	3978,c	;volatile
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;sort.c: 344: delay_ms(45-i);
  5486  0032D4  0100               	movlb	0	; () banked
  5487  0032D6  5188               	movf	ID@i_1182& (0+255),w,b
  5488  0032D8  0800               	sublw	0
  5489  0032DA  0F2D               	addlw	45
  5490  0032DC  EC53  F02A         	call	_delay_ms
  5491  0032E0  0100               	movlb	0	; () banked
  5492  0032E2  4B88               	infsnz	ID@i_1182& (0+255),f,b
  5493  0032E4  2B89               	incf	(ID@i_1182+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 0
  5496  0032E6  0100               	movlb	0	; () banked
  5497  0032E8  BF89               	btfsc	(ID@i_1182+1)& (0+255),7,b
  5498  0032EA  D7E3               	goto	l7742
  5499  0032EC  0100               	movlb	0	; () banked
  5500  0032EE  5189               	movf	(ID@i_1182+1)& (0+255),w,b
  5501  0032F0  E101               	bnz	u6340
  5502  0032F2  D7DA               	goto	L9
  5503  0032F4                     u6340:
  5504  0032F4                     l838:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sort.c: 345: }
  5508                           ;sort.c: 346: LATBbits.LATB2 = 1;
  5509  0032F4  848A               	bsf	3978,2,c	;volatile
  5510  0032F6                     l7750:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;sort.c: 347: }
  5514                           ;sort.c: 349: f_can_coming_to_ID = 0;
  5515  0032F6  0E00               	movlw	0
  5516  0032F8  0101               	movlb	1	; () banked
  5517  0032FA  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5518  0032FC  0E00               	movlw	0
  5519  0032FE  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5520  003300  0012               	return	
  5521  003302                     __end_of_ID:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _delay_ms *****************
  5541 ;; Defined at:
  5542 ;;		line 632 in file "sort.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  milliseconds    1    wreg     unsigned char 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:        2 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_Loading
  5567 ;;		_ID
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text9
  5572  0054A6                     __ptext9:
  5573                           	opt stack 0
  5574  0054A6                     _delay_ms:
  5575                           	opt stack 21
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;incstack = 0
  5579                           ;delay_ms@milliseconds stored from wreg
  5580  0054A6  0100               	movlb	0	; () banked
  5581  0054A8  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5582                           
  5583                           ;sort.c: 633: while(milliseconds > 0)
  5584  0054AA  D00B               	goto	l7108
  5585  0054AC                     l7104:
  5586                           
  5587                           ;sort.c: 634: {
  5588                           ;sort.c: 635: milliseconds--;
  5589  0054AC  0100               	movlb	0	; () banked
  5590  0054AE  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5594  0054B0  0E0B               	movlw	11
  5595  0054B2  0100               	movlb	0	; () banked
  5596  0054B4  6F80               	movwf	??_delay_ms& (0+255),b
  5597  0054B6  0E47               	movlw	71
  5598  0054B8                     u9497:
  5599  0054B8  2EE8               	decfsz	wreg,f,c
  5600  0054BA  D7FE               	bra	u9497
  5601  0054BC  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5602  0054BE  D7FC               	bra	u9497
  5603  0054C0  D000               	nop2	
  5604  0054C2                     l7108:
  5605  0054C2  0100               	movlb	0	; () banked
  5606  0054C4  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5607  0054C6  0100               	movlb	0	; () banked
  5608  0054C8  B4D8               	btfsc	status,2,c
  5609  0054CA  0012               	return	
  5610  0054CC  D7EF               	goto	l7104
  5611  0054CE                     __end_of_delay_ms:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           postdec1	equ	0xFE5
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _Distribution *****************
  5631 ;; Defined at:
  5632 ;;		line 352 in file "sort.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    8
  5653 ;; This function calls:
  5654 ;;		_updateServoPosition
  5655 ;; This function is called by:
  5656 ;;		_sort
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text10
  5661  0041B2                     __ptext10:
  5662                           	opt stack 0
  5663  0041B2                     _Distribution:
  5664                           	opt stack 21
  5665                           
  5666                           ;sort.c: 353: if(f_can_coming_to_distribution){
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;incstack = 0
  5670  0041B2  0101               	movlb	1	; () banked
  5671  0041B4  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5672  0041B6  0101               	movlb	1	; () banked
  5673  0041B8  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5674  0041BA  B4D8               	btfsc	status,2,c
  5675  0041BC  0012               	return	
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;sort.c: 354: f_can_distributed = 0;
  5679  0041BE  0E00               	movlw	0
  5680  0041C0  0101               	movlb	1	; () banked
  5681  0041C2  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5682  0041C4  0E00               	movlw	0
  5683  0041C6  6F35               	movwf	_f_can_distributed& (0+255),b
  5684                           
  5685                           ;sort.c: 361: switch(cur_can){
  5686  0041C8  D034               	goto	l7766
  5687  0041CA                     l7756:
  5688                           
  5689                           ;sort.c: 363: updateServoPosition(500, 1);
  5690  0041CA  0E01               	movlw	1
  5691  0041CC  0100               	movlb	0	; () banked
  5692  0041CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5693  0041D0  0EF4               	movlw	244
  5694  0041D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5695  0041D4  0E00               	movlw	0
  5696  0041D6  0100               	movlb	0	; () banked
  5697  0041D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5698  0041DA  0E01               	movlw	1
  5699  0041DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5700  0041DE  EC62  F024         	call	_updateServoPosition	;wreg free
  5701                           
  5702                           ;sort.c: 364: break;
  5703  0041E2  D03E               	goto	l7768
  5704  0041E4                     l7758:
  5705                           
  5706                           ;sort.c: 366: updateServoPosition(850, 1);
  5707  0041E4  0E03               	movlw	3
  5708  0041E6  0100               	movlb	0	; () banked
  5709  0041E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5710  0041EA  0E52               	movlw	82
  5711  0041EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5712  0041EE  0E00               	movlw	0
  5713  0041F0  0100               	movlb	0	; () banked
  5714  0041F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5715  0041F4  0E01               	movlw	1
  5716  0041F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5717  0041F8  EC62  F024         	call	_updateServoPosition	;wreg free
  5718                           
  5719                           ;sort.c: 367: break;
  5720  0041FC  D031               	goto	l7768
  5721  0041FE                     l7760:
  5722                           
  5723                           ;sort.c: 369: updateServoPosition(1670, 1);
  5724  0041FE  0E06               	movlw	6
  5725  004200  0100               	movlb	0	; () banked
  5726  004202  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5727  004204  0E86               	movlw	134
  5728  004206  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5729  004208  0E00               	movlw	0
  5730  00420A  0100               	movlb	0	; () banked
  5731  00420C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5732  00420E  0E01               	movlw	1
  5733  004210  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5734  004212  EC62  F024         	call	_updateServoPosition	;wreg free
  5735                           
  5736                           ;sort.c: 370: break;
  5737  004216  D024               	goto	l7768
  5738  004218                     l7762:
  5739                           
  5740                           ;sort.c: 372: updateServoPosition(2400, 1);
  5741  004218  0E09               	movlw	9
  5742  00421A  0100               	movlb	0	; () banked
  5743  00421C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5744  00421E  0E60               	movlw	96
  5745  004220  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5746  004222  0E00               	movlw	0
  5747  004224  0100               	movlb	0	; () banked
  5748  004226  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5749  004228  0E01               	movlw	1
  5750  00422A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5751  00422C  EC62  F024         	call	_updateServoPosition	;wreg free
  5752                           
  5753                           ;sort.c: 376: }
  5754                           
  5755                           ;sort.c: 375: break;
  5756                           
  5757                           ;sort.c: 374: default:
  5758                           
  5759                           ;sort.c: 373: break;
  5760  004230  D017               	goto	l7768
  5761  004232                     l7766:
  5762  004232  C12B  F088         	movff	_cur_can,??_Distribution
  5763  004236  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5764                           
  5765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5766                           ; Switch size 1, requested type "space"
  5767                           ; Number of cases is 1, Range of values is 0 to 0
  5768                           ; switch strategies available:
  5769                           ; Name         Instructions Cycles
  5770                           ; simple_byte            4     3 (average)
  5771                           ;	Chosen strategy is simple_byte
  5772  00423A  0100               	movlb	0	; () banked
  5773  00423C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5774  00423E  0A00               	xorlw	0	; case 0
  5775  004240  A4D8               	btfss	status,2,c
  5776  004242  D00E               	goto	l7768
  5777                           
  5778                           ; BSR set to: 0
  5779                           ; Switch size 1, requested type "space"
  5780                           ; Number of cases is 4, Range of values is 0 to 3
  5781                           ; switch strategies available:
  5782                           ; Name         Instructions Cycles
  5783                           ; simple_byte           13     7 (average)
  5784                           ;	Chosen strategy is simple_byte
  5785  004244  0100               	movlb	0	; () banked
  5786  004246  5188               	movf	??_Distribution& (0+255),w,b
  5787  004248  0A00               	xorlw	0	; case 0
  5788  00424A  B4D8               	btfsc	status,2,c
  5789  00424C  D7BE               	goto	l7756
  5790  00424E  0A01               	xorlw	1	; case 1
  5791  004250  B4D8               	btfsc	status,2,c
  5792  004252  D7C8               	goto	l7758
  5793  004254  0A03               	xorlw	3	; case 2
  5794  004256  B4D8               	btfsc	status,2,c
  5795  004258  D7D2               	goto	l7760
  5796  00425A  0A01               	xorlw	1	; case 3
  5797  00425C  B4D8               	btfsc	status,2,c
  5798  00425E  D7DC               	goto	l7762
  5799  004260                     l7768:
  5800                           
  5801                           ;sort.c: 377: updateServoPosition(1050, 3);
  5802  004260  0E04               	movlw	4
  5803  004262  0100               	movlb	0	; () banked
  5804  004264  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5805  004266  0E1A               	movlw	26
  5806  004268  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5807  00426A  0E00               	movlw	0
  5808  00426C  0100               	movlb	0	; () banked
  5809  00426E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5810  004270  0E03               	movlw	3
  5811  004272  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5812  004274  EC62  F024         	call	_updateServoPosition	;wreg free
  5813                           
  5814                           ;sort.c: 378: servo_timer_target = 750;
  5815  004278  0E02               	movlw	2
  5816  00427A  6E70               	movwf	_servo_timer_target+1,c	;volatile
  5817  00427C  0EEE               	movlw	238
  5818  00427E  6E6F               	movwf	_servo_timer_target,c	;volatile
  5819                           
  5820                           ;sort.c: 379: f_panning_to_bin = 1;
  5821  004280  0E00               	movlw	0
  5822  004282  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5823  004284  0E01               	movlw	1
  5824  004286  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5825                           
  5826                           ;sort.c: 380: f_can_coming_to_distribution = 0;
  5827  004288  0E00               	movlw	0
  5828  00428A  0101               	movlb	1	; () banked
  5829  00428C  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5830  00428E  0E00               	movlw	0
  5831  004290  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5832  004292  0012               	return	
  5833  004294                     __end_of_Distribution:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _machineConfig *****************
  5853 ;; Defined at:
  5854 ;;		line 15 in file "MachineConfig.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    7
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_main
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text11
  5883  004C7A                     __ptext11:
  5884                           	opt stack 0
  5885  004C7A                     _machineConfig:
  5886                           	opt stack 23
  5887                           
  5888                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5889                           
  5890                           ; BSR set to: 1
  5891                           ;incstack = 0
  5892  004C7A  0EF0               	movlw	240
  5893  004C7C  6ED3               	movwf	4051,c	;volatile
  5894                           
  5895                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5896  004C7E  8C9B               	bsf	3995,6,c	;volatile
  5897                           
  5898                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5899  004C80  0E07               	movlw	7
  5900  004C82  6E92               	movwf	3986,c	;volatile
  5901                           
  5902                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5903  004C84  0EF2               	movlw	242
  5904  004C86  6E93               	movwf	3987,c	;volatile
  5905                           
  5906                           ;MachineConfig.c: 27: TRISC = 0x00;
  5907  004C88  0E00               	movlw	0
  5908  004C8A  6E94               	movwf	3988,c	;volatile
  5909                           
  5910                           ;MachineConfig.c: 31: TRISD = 0x00;
  5911  004C8C  0E00               	movlw	0
  5912  004C8E  6E95               	movwf	3989,c	;volatile
  5913                           
  5914                           ;MachineConfig.c: 34: TRISE = 0x00;
  5915  004C90  0E00               	movlw	0
  5916  004C92  6E96               	movwf	3990,c	;volatile
  5917                           
  5918                           ;MachineConfig.c: 37: LATA = 0x00;
  5919  004C94  0E00               	movlw	0
  5920  004C96  6E89               	movwf	3977,c	;volatile
  5921                           
  5922                           ;MachineConfig.c: 38: LATB = 0x00;
  5923  004C98  0E00               	movlw	0
  5924  004C9A  6E8A               	movwf	3978,c	;volatile
  5925                           
  5926                           ;MachineConfig.c: 39: LATC = 0x00;
  5927  004C9C  0E00               	movlw	0
  5928  004C9E  6E8B               	movwf	3979,c	;volatile
  5929                           
  5930                           ;MachineConfig.c: 40: LATD = 0x00;
  5931  004CA0  0E00               	movlw	0
  5932  004CA2  6E8C               	movwf	3980,c	;volatile
  5933                           
  5934                           ;MachineConfig.c: 41: LATE = 0x00;
  5935  004CA4  0E00               	movlw	0
  5936  004CA6  6E8D               	movwf	3981,c	;volatile
  5937                           
  5938                           ;MachineConfig.c: 43: nRBPU = 0;
  5939  004CA8  9EF1               	bcf	intcon2,7,c	;volatile
  5940                           
  5941                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5942  004CAA  0E00               	movlw	0
  5943  004CAC  6EC2               	movwf	4034,c	;volatile
  5944                           
  5945                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5946  004CAE  0E0D               	movlw	13
  5947  004CB0  6EC1               	movwf	4033,c	;volatile
  5948                           
  5949                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5950  004CB2  0E00               	movlw	0
  5951  004CB4  6EB5               	movwf	4021,c	;volatile
  5952                           
  5953                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5954  004CB6  96B4               	bcf	4020,3,c	;volatile
  5955                           
  5956                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5957  004CB8  0EB1               	movlw	177
  5958  004CBA  6EC0               	movwf	4032,c	;volatile
  5959                           
  5960                           ;MachineConfig.c: 55: INT1IE = 1;
  5961  004CBC  86F0               	bsf	intcon3,3,c	;volatile
  5962                           
  5963                           ;MachineConfig.c: 57: TMR0IE = 1;
  5964  004CBE  8AF2               	bsf	intcon,5,c	;volatile
  5965                           
  5966                           ;MachineConfig.c: 58: TMR1IE = 1;
  5967  004CC0  809D               	bsf	3997,0,c	;volatile
  5968                           
  5969                           ;MachineConfig.c: 59: TMR2IE = 1;
  5970  004CC2  829D               	bsf	3997,1,c	;volatile
  5971                           
  5972                           ;MachineConfig.c: 60: TMR3IE = 1;
  5973  004CC4  82A0               	bsf	4000,1,c	;volatile
  5974                           
  5975                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  5976  004CC6  0EB0               	movlw	176
  5977  004CC8  6ECD               	movwf	4045,c	;volatile
  5978                           
  5979                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  5980  004CCA  0E7B               	movlw	123
  5981  004CCC  6ECA               	movwf	4042,c	;volatile
  5982                           
  5983                           ;MachineConfig.c: 64: PR2 = 0x22;
  5984  004CCE  0E22               	movlw	34
  5985  004CD0  6ECB               	movwf	4043,c	;volatile
  5986                           
  5987                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  5988  004CD2  0EB0               	movlw	176
  5989  004CD4  6EB1               	movwf	4017,c	;volatile
  5990                           
  5991                           ;MachineConfig.c: 66: PEIE = 1;
  5992  004CD6  8CF2               	bsf	intcon,6,c	;volatile
  5993                           
  5994                           ;MachineConfig.c: 67: ADIE = 0;
  5995  004CD8  9C9D               	bcf	3997,6,c	;volatile
  5996                           
  5997                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  5998  004CDA  9EF2               	bcf	intcon,7,c	;volatile
  5999  004CDC  0012               	return		;funcret
  6000  004CDE                     __end_of_machineConfig:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           intcon	equ	0xFF2
  6009                           intcon2	equ	0xFF1
  6010                           intcon3	equ	0xFF0
  6011                           postinc0	equ	0xFEE
  6012                           wreg	equ	0xFE8
  6013                           postdec1	equ	0xFE5
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _logRun *****************
  6023 ;; Defined at:
  6024 ;;		line 84 in file "EEPROM.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6029 ;;  i               2   55[BANK0 ] int 
  6030 ;;  num             1   49[BANK0 ] unsigned char 
  6031 ;;  addr            2   57[BANK0 ] unsigned short 
  6032 ;;  byte11          1   54[BANK0 ] unsigned char 
  6033 ;;  byte3           1   52[BANK0 ] unsigned char 
  6034 ;;  byte2           1   51[BANK0 ] unsigned char 
  6035 ;;  byte1           1   50[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:       10 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:   11
  6052 ;; This function calls:
  6053 ;;		_EEPROM_read
  6054 ;;		_EEPROM_write
  6055 ;; This function is called by:
  6056 ;;		_main
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text12
  6061  003C62                     __ptext12:
  6062                           	opt stack 0
  6063  003C62                     _logRun:
  6064                           	opt stack 19
  6065                           
  6066                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  6067                           
  6068                           ;incstack = 0
  6069  003C62  0E00               	movlw	0
  6070  003C64  0100               	movlb	0	; () banked
  6071  003C66  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6072  003C68  0E00               	movlw	0
  6073  003C6A  6F80               	movwf	EEPROM_read@address& (0+255),b
  6074  003C6C  EC00  F02B         	call	_EEPROM_read	;wreg free
  6075  003C70  0100               	movlb	0	; () banked
  6076  003C72  6FFD               	movwf	_sel& (0+255),b
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  6080  003C74  0100               	movlb	0	; () banked
  6081  003C76  51FD               	movf	_sel& (0+255),w,b
  6082  003C78  0D0B               	mullw	11
  6083  003C7A  0E01               	movlw	1
  6084  003C7C  24F3               	addwf	prodl,w,c
  6085  003C7E  0100               	movlb	0	; () banked
  6086  003C80  6FB9               	movwf	logRun@addr& (0+255),b
  6087  003C82  0E00               	movlw	0
  6088  003C84  20F4               	addwfc	prodh,w,c
  6089  003C86  0100               	movlb	0	; () banked
  6090  003C88  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;EEPROM.c: 101: if (sel < 3){
  6094  003C8A  0E03               	movlw	3
  6095  003C8C  0100               	movlb	0	; () banked
  6096  003C8E  61FD               	cpfslt	_sel& (0+255),b
  6097  003C90  D00E               	goto	l9428
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;EEPROM.c: 102: unsigned char num = sel+1;
  6101  003C92  0100               	movlb	0	; () banked
  6102  003C94  29FD               	incf	_sel& (0+255),w,b
  6103  003C96  0100               	movlb	0	; () banked
  6104  003C98  6FB1               	movwf	logRun@num& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;EEPROM.c: 103: EEPROM_write(0, num);
  6108  003C9A  0E00               	movlw	0
  6109  003C9C  0100               	movlb	0	; () banked
  6110  003C9E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6111  003CA0  0E00               	movlw	0
  6112  003CA2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6113  003CA4  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  6114  003CA8  EC65  F020         	call	_EEPROM_write	;wreg free
  6115                           
  6116                           ;EEPROM.c: 104: }
  6117  003CAC  D00A               	goto	l9430
  6118  003CAE                     l9428:
  6119                           
  6120                           ;EEPROM.c: 105: else{
  6121                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  6122  003CAE  0E00               	movlw	0
  6123  003CB0  0100               	movlb	0	; () banked
  6124  003CB2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  6125  003CB4  0E00               	movlw	0
  6126  003CB6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  6127  003CB8  0E00               	movlw	0
  6128  003CBA  0100               	movlb	0	; () banked
  6129  003CBC  6FAD               	movwf	EEPROM_write@data& (0+255),b
  6130  003CBE  EC65  F020         	call	_EEPROM_write	;wreg free
  6131  003CC2                     l9430:
  6132                           
  6133                           ;EEPROM.c: 107: }
  6134                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  6135  003CC2  0100               	movlb	0	; () banked
  6136  003CC4  51FE               	movf	_count_total& (0+255),w,b
  6137  003CC6  0980               	iorlw	128
  6138  003CC8  0100               	movlb	0	; () banked
  6139  003CCA  6FB2               	movwf	logRun@byte1& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  6143  003CCC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6144  003CD0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6145  003CD4  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  6146  003CD8  EC65  F020         	call	_EEPROM_write	;wreg free
  6147                           
  6148                           ;EEPROM.c: 112: addr++;
  6149  003CDC  0100               	movlb	0	; () banked
  6150  003CDE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6151  003CE0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  6155  003CE2  0101               	movlb	1	; () banked
  6156  003CE4  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  6157  003CE6  0BF0               	andlw	240
  6158  003CE8  0101               	movlb	1	; () banked
  6159  003CEA  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  6160  003CEC  0100               	movlb	0	; () banked
  6161  003CEE  6FB3               	movwf	logRun@byte2& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  6165  003CF0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6166  003CF4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6167  003CF8  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  6168  003CFC  EC65  F020         	call	_EEPROM_write	;wreg free
  6169                           
  6170                           ;EEPROM.c: 117: addr++;
  6171  003D00  0100               	movlb	0	; () banked
  6172  003D02  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6173  003D04  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  6177  003D06  0101               	movlb	1	; () banked
  6178  003D08  3925               	swapf	_count_can_w_lab& (0+255),w,b
  6179  003D0A  0BF0               	andlw	240
  6180  003D0C  0101               	movlb	1	; () banked
  6181  003D0E  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  6182  003D10  0100               	movlb	0	; () banked
  6183  003D12  6FB4               	movwf	logRun@byte3& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  6187  003D14  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6188  003D18  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6189  003D1C  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  6190  003D20  EC65  F020         	call	_EEPROM_write	;wreg free
  6191                           
  6192                           ;EEPROM.c: 120: addr++;
  6193  003D24  0100               	movlb	0	; () banked
  6194  003D26  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6195  003D28  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  6199  003D2A  0E00               	movlw	0
  6200  003D2C  0100               	movlb	0	; () banked
  6201  003D2E  6FB8               	movwf	(logRun@i+1)& (0+255),b
  6202  003D30  0E00               	movlw	0
  6203  003D32  6FB7               	movwf	logRun@i& (0+255),b
  6204                           
  6205                           ; BSR set to: 0
  6206  003D34  0100               	movlb	0	; () banked
  6207  003D36  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6208  003D38  D008               	goto	l9454
  6209  003D3A  0100               	movlb	0	; () banked
  6210  003D3C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6211  003D3E  E128               	bnz	l1105
  6212  003D40  0E07               	movlw	7
  6213  003D42  0100               	movlb	0	; () banked
  6214  003D44  5DB7               	subwf	logRun@i& (0+255),w,b
  6215  003D46  B0D8               	btfsc	status,0,c
  6216  003D48  D023               	goto	l1105
  6217  003D4A                     l9454:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  6221  003D4A  90D8               	bcf	status,0,c
  6222  003D4C  0100               	movlb	0	; () banked
  6223  003D4E  35B7               	rlcf	logRun@i& (0+255),w,b
  6224  003D50  6ED9               	movwf	fsr2l,c
  6225  003D52  0100               	movlb	0	; () banked
  6226  003D54  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  6227  003D56  6EDA               	movwf	fsr2h,c
  6228  003D58  0E0E               	movlw	low _startTime
  6229  003D5A  26D9               	addwf	fsr2l,f,c
  6230  003D5C  0E01               	movlw	high _startTime
  6231  003D5E  22DA               	addwfc	fsr2h,f,c
  6232  003D60  50DF               	movf	indf2,w,c
  6233  003D62  0100               	movlb	0	; () banked
  6234  003D64  6FB5               	movwf	logRun@byte_i& (0+255),b
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6238  003D66  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6239  003D6A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6240  003D6E  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6241  003D72  EC65  F020         	call	_EEPROM_write	;wreg free
  6242                           
  6243                           ;EEPROM.c: 126: addr++;
  6244  003D76  0100               	movlb	0	; () banked
  6245  003D78  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6246  003D7A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6247                           
  6248                           ; BSR set to: 0
  6249  003D7C  0100               	movlb	0	; () banked
  6250  003D7E  4BB7               	infsnz	logRun@i& (0+255),f,b
  6251  003D80  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6252                           
  6253                           ; BSR set to: 0
  6254  003D82  0100               	movlb	0	; () banked
  6255  003D84  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6256  003D86  D7E1               	goto	l9454
  6257  003D88  0100               	movlb	0	; () banked
  6258  003D8A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6259  003D8C  E101               	bnz	u8730
  6260  003D8E  D7D8               	goto	L10
  6261  003D90                     u8730:
  6262  003D90                     l1105:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;EEPROM.c: 127: }
  6266                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6267  003D90  C0FA  F0B6         	movff	_total_time,logRun@byte11
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6271  003D94  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6272  003D98  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6273  003D9C  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6274  003DA0  EC65  F020         	call	_EEPROM_write	;wreg free
  6275  003DA4  0012               	return		;funcret
  6276  003DA6                     __end_of_logRun:
  6277                           	opt stack 0
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           intcon2	equ	0xFF1
  6286                           intcon3	equ	0xFF0
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _EEPROM_write *****************
  6299 ;; Defined at:
  6300 ;;		line 32 in file "EEPROM.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  address         2   43[BANK0 ] unsigned short 
  6303 ;;  data            1   45[BANK0 ] unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  i               1   48[BANK0 ] unsigned char 
  6306 ;;  i               1   47[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        6 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:   10
  6323 ;; This function calls:
  6324 ;;		_EEPROM_read
  6325 ;;		_lcdInst
  6326 ;;		_printf
  6327 ;; This function is called by:
  6328 ;;		_Loading
  6329 ;;		_logRun
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text13
  6334  0040CA                     __ptext13:
  6335                           	opt stack 0
  6336  0040CA                     _EEPROM_write:
  6337                           	opt stack 18
  6338                           
  6339                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6340                           
  6341                           ;incstack = 0
  6342  0040CA  84A6               	bsf	4006,2,c	;volatile
  6343                           
  6344                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6345  0040CC  0100               	movlb	0	; () banked
  6346  0040CE  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6347  0040D0  6EAA               	movwf	4010,c	;volatile
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6351  0040D2  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;EEPROM.c: 39: EEDATA = data;
  6355  0040D6  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6359  0040DA  9EA6               	bcf	4006,7,c	;volatile
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6363  0040DC  9CA6               	bcf	4006,6,c	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6367  0040DE  9EF2               	bcf	intcon,7,c	;volatile
  6368                           
  6369                           ;EEPROM.c: 45: EECON2 = 0x55;
  6370  0040E0  0E55               	movlw	85
  6371  0040E2  6EA7               	movwf	4007,c	;volatile
  6372                           
  6373                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6374  0040E4  0EAA               	movlw	170
  6375  0040E6  6EA7               	movwf	4007,c	;volatile
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6379  0040E8  82A6               	bsf	4006,1,c	;volatile
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6383  0040EA  8EF2               	bsf	intcon,7,c	;volatile
  6384  0040EC                     l1083:
  6385  0040EC  A8A1               	btfss	4001,4,c	;volatile
  6386  0040EE  D7FE               	goto	l1083
  6387                           
  6388                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6389  0040F0  98A1               	bcf	4001,4,c	;volatile
  6390                           
  6391                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6392  0040F2  94A6               	bcf	4006,2,c	;volatile
  6393                           
  6394                           ;EEPROM.c: 57: if(debug){
  6395  0040F4  0101               	movlb	1	; () banked
  6396  0040F6  512D               	movf	_debug& (0+255),w,b
  6397  0040F8  0101               	movlb	1	; () banked
  6398  0040FA  112E               	iorwf	(_debug+1)& (0+255),w,b
  6399  0040FC  B4D8               	btfsc	status,2,c
  6400  0040FE  0012               	return	
  6401                           
  6402                           ; BSR set to: 1
  6403                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6404  004100  0E01               	movlw	1
  6405  004102  EC32  F02B         	call	_lcdInst
  6406  004106  0E68               	movlw	104
  6407  004108  0100               	movlb	0	; () banked
  6408  00410A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6409  00410C  0EE4               	movlw	228
  6410  00410E                     u9507:
  6411  00410E  2EE8               	decfsz	wreg,f,c
  6412  004110  D7FE               	bra	u9507
  6413  004112  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6414  004114  D7FC               	bra	u9507
  6415  004116  F000               	nop	
  6416                           
  6417                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6418  004118  0E80               	movlw	128
  6419  00411A  EC32  F02B         	call	_lcdInst
  6420                           
  6421                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6422  00411E  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6423  004122  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6424  004126  EC00  F02B         	call	_EEPROM_read	;wreg free
  6425  00412A  0100               	movlb	0	; () banked
  6426  00412C  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6427  00412E  A4D8               	btfss	status,2,c
  6428  004130  D024               	goto	l7090
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6432  004132  0ED6               	movlw	low STR_66
  6433  004134  0100               	movlb	0	; () banked
  6434  004136  6F8E               	movwf	printf@f& (0+255),b
  6435  004138  0EFA               	movlw	high STR_66
  6436  00413A  0100               	movlb	0	; () banked
  6437  00413C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6438  00413E  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6439  004142  0100               	movlb	0	; () banked
  6440  004144  6B91               	clrf	(?_printf+3)& (0+255),b
  6441  004146  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6442  00414A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6443  00414E  EC84  F00B         	call	_printf	;wreg free
  6444                           
  6445                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6446  004152  0E00               	movlw	0
  6447  004154  0100               	movlb	0	; () banked
  6448  004156  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6449  004158                     l7082:
  6450                           
  6451                           ; BSR set to: 0
  6452  004158  0E63               	movlw	99
  6453  00415A  0100               	movlb	0	; () banked
  6454  00415C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6455  00415E  D001               	goto	l7086
  6456  004160  0012               	return	
  6457  004162                     l7086:
  6458                           
  6459                           ; BSR set to: 0
  6460  004162  0E68               	movlw	104
  6461  004164  0100               	movlb	0	; () banked
  6462  004166  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6463  004168  0EE4               	movlw	228
  6464  00416A                     u9517:
  6465  00416A  2EE8               	decfsz	wreg,f,c
  6466  00416C  D7FE               	bra	u9517
  6467  00416E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6468  004170  D7FC               	bra	u9517
  6469  004172  F000               	nop	
  6470  004174  0100               	movlb	0	; () banked
  6471  004176  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6472  004178  D7EF               	goto	l7082
  6473  00417A                     l7090:
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6477  00417A  0EBC               	movlw	low STR_67
  6478  00417C  0100               	movlb	0	; () banked
  6479  00417E  6F8E               	movwf	printf@f& (0+255),b
  6480  004180  0EFF               	movlw	high STR_67
  6481  004182  0100               	movlb	0	; () banked
  6482  004184  6F8F               	movwf	(printf@f+1)& (0+255),b
  6483  004186  EC84  F00B         	call	_printf	;wreg free
  6484  00418A  0E00               	movlw	0
  6485  00418C  0100               	movlb	0	; () banked
  6486  00418E  6FB0               	movwf	EEPROM_write@i_1436& (0+255),b
  6487  004190                     l7094:
  6488                           
  6489                           ; BSR set to: 0
  6490  004190  0E63               	movlw	99
  6491  004192  0100               	movlb	0	; () banked
  6492  004194  65B0               	cpfsgt	EEPROM_write@i_1436& (0+255),b
  6493  004196  D001               	goto	l7098
  6494  004198  0012               	return	
  6495  00419A                     l7098:
  6496                           
  6497                           ; BSR set to: 0
  6498  00419A  0E68               	movlw	104
  6499  00419C  0100               	movlb	0	; () banked
  6500  00419E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6501  0041A0  0EE4               	movlw	228
  6502  0041A2                     u9527:
  6503  0041A2  2EE8               	decfsz	wreg,f,c
  6504  0041A4  D7FE               	bra	u9527
  6505  0041A6  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6506  0041A8  D7FC               	bra	u9527
  6507  0041AA  F000               	nop	
  6508  0041AC  0100               	movlb	0	; () banked
  6509  0041AE  2BB0               	incf	EEPROM_write@i_1436& (0+255),f,b
  6510  0041B0  D7EF               	goto	l7094
  6511  0041B2                     __end_of_EEPROM_write:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           intcon2	equ	0xFF1
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _EEPROM_read *****************
  6534 ;; Defined at:
  6535 ;;		line 68 in file "EEPROM.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  address         2    0[BANK0 ] unsigned short 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      unsigned char 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    7
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_Loading
  6560 ;;		_EEPROM_write
  6561 ;;		_logRun
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text14
  6566  005600                     __ptext14:
  6567                           	opt stack 0
  6568  005600                     _EEPROM_read:
  6569                           	opt stack 20
  6570                           
  6571                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6572                           
  6573                           ;incstack = 0
  6574  005600  0100               	movlb	0	; () banked
  6575  005602  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6576  005604  6EAA               	movwf	4010,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6580  005606  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6584  00560A  9EA6               	bcf	4006,7,c	;volatile
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6588  00560C  9CA6               	bcf	4006,6,c	;volatile
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6592  00560E  80A6               	bsf	4006,0,c	;volatile
  6593  005610                     l1096:
  6594  005610  B0A6               	btfsc	4006,0,c	;volatile
  6595  005612  D7FE               	goto	l1096
  6596                           
  6597                           ;EEPROM.c: 81: return EEDATA;
  6598  005614  50A8               	movf	4008,w,c	;volatile
  6599  005616  0012               	return	
  6600  005618                     __end_of_EEPROM_read:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon2	equ	0xFF1
  6610                           intcon3	equ	0xFF0
  6611                           postinc0	equ	0xFEE
  6612                           wreg	equ	0xFE8
  6613                           postdec1	equ	0xFE5
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _initUI *****************
  6623 ;; Defined at:
  6624 ;;		line 62 in file "UI.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;Total ram usage:        0 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:   12
  6645 ;; This function calls:
  6646 ;;		_change_state_to_menu_start
  6647 ;;		_loadRTC
  6648 ;; This function is called by:
  6649 ;;		_main
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text15
  6654  0051E8                     __ptext15:
  6655                           	opt stack 0
  6656  0051E8                     _initUI:
  6657                           	opt stack 18
  6658                           
  6659                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6660                           
  6661                           ;incstack = 0
  6662  0051E8  8EF2               	bsf	intcon,7,c	;volatile
  6663                           
  6664                           ;UI.c: 64: machine_state = UI_state;
  6665  0051EA  0E00               	movlw	0
  6666  0051EC  0100               	movlb	0	; () banked
  6667  0051EE  6FFC               	movwf	_machine_state& (0+255),b
  6668                           
  6669                           ;UI.c: 65: logstate = 0;
  6670  0051F0  0E00               	movlw	0
  6671  0051F2  0100               	movlb	0	; () banked
  6672  0051F4  6FF9               	movwf	(_logstate+1)& (0+255),b
  6673  0051F6  0E00               	movlw	0
  6674  0051F8  6FF8               	movwf	_logstate& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;UI.c: 67: if(RTCflag){
  6678  0051FA  0100               	movlb	0	; () banked
  6679  0051FC  51EA               	movf	_RTCflag& (0+255),w,b
  6680  0051FE  0100               	movlb	0	; () banked
  6681  005200  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6682  005202  A4D8               	btfss	status,2,c
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;UI.c: 68: loadRTC();
  6686  005204  ECD9  F023         	call	_loadRTC	;wreg free
  6687                           
  6688                           ;UI.c: 69: }
  6689                           ;UI.c: 71: change_state_to_menu_start();
  6690  005208  EC12  F02A         	call	_change_state_to_menu_start	;wreg free
  6691                           
  6692                           ;UI.c: 72: firstboot = 1;
  6693  00520C  0E00               	movlw	0
  6694  00520E  0101               	movlb	1	; () banked
  6695  005210  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6696  005212  0E01               	movlw	1
  6697  005214  6F3B               	movwf	_firstboot& (0+255),b
  6698                           
  6699                           ; BSR set to: 1
  6700  005216  0012               	return		;funcret
  6701  005218                     __end_of_initUI:
  6702                           	opt stack 0
  6703                           tblptru	equ	0xFF8
  6704                           tblptrh	equ	0xFF7
  6705                           tblptrl	equ	0xFF6
  6706                           tablat	equ	0xFF5
  6707                           prodh	equ	0xFF4
  6708                           prodl	equ	0xFF3
  6709                           intcon	equ	0xFF2
  6710                           intcon2	equ	0xFF1
  6711                           intcon3	equ	0xFF0
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           postdec1	equ	0xFE5
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _loadRTC *****************
  6724 ;; Defined at:
  6725 ;;		line 28 in file "RTC.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;  i               2   22[BANK0 ] int 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;Total ram usage:        3 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    9
  6746 ;; This function calls:
  6747 ;;		_I2C_Master_Init
  6748 ;;		_I2C_Master_Start
  6749 ;;		_I2C_Master_Stop
  6750 ;;		_I2C_Master_Write
  6751 ;; This function is called by:
  6752 ;;		_initUI
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text16
  6757  0047B2                     __ptext16:
  6758                           	opt stack 0
  6759  0047B2                     _loadRTC:
  6760                           	opt stack 20
  6761                           
  6762                           ;RTC.c: 30: I2C_Master_Init(10000);
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;incstack = 0
  6766  0047B2  0E10               	movlw	16
  6767  0047B4  0100               	movlb	0	; () banked
  6768  0047B6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6769  0047B8  0E27               	movlw	39
  6770  0047BA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6771  0047BC  0E00               	movlw	0
  6772  0047BE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6773  0047C0  0E00               	movlw	0
  6774  0047C2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6775  0047C4  ECA0  F026         	call	_I2C_Master_Init	;wreg free
  6776                           
  6777                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6778  0047C8  9EF2               	bcf	intcon,7,c	;volatile
  6779                           
  6780                           ;RTC.c: 34: I2C_Master_Start();
  6781  0047CA  EC58  F02B         	call	_I2C_Master_Start	;wreg free
  6782                           
  6783                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6784  0047CE  0E00               	movlw	0
  6785  0047D0  0100               	movlb	0	; () banked
  6786  0047D2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6787  0047D4  0ED0               	movlw	208
  6788  0047D6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6789  0047D8  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  6790                           
  6791                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6792  0047DC  0E00               	movlw	0
  6793  0047DE  0100               	movlb	0	; () banked
  6794  0047E0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6795  0047E2  0E00               	movlw	0
  6796  0047E4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6797  0047E6  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  6798                           
  6799                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6800  0047EA  0E00               	movlw	0
  6801  0047EC  0100               	movlb	0	; () banked
  6802  0047EE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6803  0047F0  0E00               	movlw	0
  6804  0047F2  6F96               	movwf	loadRTC@i& (0+255),b
  6805  0047F4                     l7244:
  6806                           
  6807                           ; BSR set to: 0
  6808  0047F4  0100               	movlb	0	; () banked
  6809  0047F6  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6810  0047F8  D008               	goto	l7248
  6811  0047FA  0100               	movlb	0	; () banked
  6812  0047FC  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6813  0047FE  E11B               	bnz	l7254
  6814  004800  0E07               	movlw	7
  6815  004802  0100               	movlb	0	; () banked
  6816  004804  5D96               	subwf	loadRTC@i& (0+255),w,b
  6817  004806  B0D8               	btfsc	status,0,c
  6818  004808  D016               	goto	l7254
  6819  00480A                     l7248:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6823  00480A  0E1C               	movlw	low _time
  6824  00480C  0100               	movlb	0	; () banked
  6825  00480E  2596               	addwf	loadRTC@i& (0+255),w,b
  6826  004810  6ED9               	movwf	fsr2l,c
  6827  004812  0E01               	movlw	high _time
  6828  004814  0100               	movlb	0	; () banked
  6829  004816  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6830  004818  6EDA               	movwf	fsr2h,c
  6831  00481A  50DF               	movf	indf2,w,c
  6832  00481C  0100               	movlb	0	; () banked
  6833  00481E  6F95               	movwf	??_loadRTC& (0+255),b
  6834  004820  0100               	movlb	0	; () banked
  6835  004822  5195               	movf	??_loadRTC& (0+255),w,b
  6836  004824  0100               	movlb	0	; () banked
  6837  004826  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6838  004828  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6839  00482A  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  6840  00482E  0100               	movlb	0	; () banked
  6841  004830  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6842  004832  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6843  004834  D7DF               	goto	l7244
  6844  004836                     l7254:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;RTC.c: 39: }
  6848                           ;RTC.c: 40: I2C_Master_Stop();
  6849  004836  EC54  F02B         	call	_I2C_Master_Stop	;wreg free
  6850                           
  6851                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6852  00483A  8EF2               	bsf	intcon,7,c	;volatile
  6853  00483C  0012               	return		;funcret
  6854  00483E                     __end_of_loadRTC:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon2	equ	0xFF1
  6864                           intcon3	equ	0xFF0
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _I2C_Master_Init *****************
  6877 ;; Defined at:
  6878 ;;		line 15 in file "I2C.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  c               4   13[BANK0 ] const unsigned long 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        8 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    8
  6899 ;; This function calls:
  6900 ;;		___lldiv
  6901 ;; This function is called by:
  6902 ;;		_main
  6903 ;;		_loadRTC
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           	psect	text17
  6908  004D40                     __ptext17:
  6909                           	opt stack 0
  6910  004D40                     _I2C_Master_Init:
  6911                           	opt stack 20
  6912                           
  6913                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6914                           
  6915                           ;incstack = 0
  6916  004D40  0E00               	movlw	0
  6917  004D42  6EC7               	movwf	4039,c	;volatile
  6918                           
  6919                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6920  004D44  0E28               	movlw	40
  6921  004D46  6EC6               	movwf	4038,c	;volatile
  6922                           
  6923                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6924  004D48  0E00               	movlw	0
  6925  004D4A  6EC5               	movwf	4037,c	;volatile
  6926                           
  6927                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6928  004D4C  0E00               	movlw	0
  6929  004D4E  0100               	movlb	0	; () banked
  6930  004D50  6F80               	movwf	___lldiv@dividend& (0+255),b
  6931  004D52  0E48               	movlw	72
  6932  004D54  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6933  004D56  0EE8               	movlw	232
  6934  004D58  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6935  004D5A  0E01               	movlw	1
  6936  004D5C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6937  004D5E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6938  004D62  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6939  004D66  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6940  004D6A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6941  004D6E  0E02               	movlw	2
  6942  004D70                     u5505:
  6943  004D70  90D8               	bcf	status,0,c
  6944  004D72  0100               	movlb	0	; () banked
  6945  004D74  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6946  004D76  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6947  004D78  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6948  004D7A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6949  004D7C  2EE8               	decfsz	wreg,f,c
  6950  004D7E  D7F8               	goto	u5505
  6951  004D80  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6952  004D84  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6953  004D88  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6954  004D8C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6955  004D90  ECD5  F022         	call	___lldiv	;wreg free
  6956  004D94  0100               	movlb	0	; () banked
  6957  004D96  0580               	decf	?___lldiv& (0+255),w,b
  6958  004D98  6EC8               	movwf	4040,c	;volatile
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;I2C.c: 22: TRISC3 = 1;
  6962  004D9A  8694               	bsf	3988,3,c	;volatile
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;I2C.c: 23: TRISC4 = 1;
  6966  004D9C  8894               	bsf	3988,4,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969  004D9E  0012               	return		;funcret
  6970  004DA0                     __end_of_I2C_Master_Init:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           intcon2	equ	0xFF1
  6980                           intcon3	equ	0xFF0
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function ___lldiv *****************
  6993 ;; Defined at:
  6994 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  dividend        4    0[BANK0 ] unsigned long 
  6997 ;;  divisor         4    4[BANK0 ] unsigned long 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  quotient        4    8[BANK0 ] unsigned long 
  7000 ;;  counter         1   12[BANK0 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  4    0[BANK0 ] unsigned long 
  7003 ;; Registers used:
  7004 ;;		wreg, status,2, status,0
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;Total ram usage:       13 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    7
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_I2C_Master_Init
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text18
  7025  0045AA                     __ptext18:
  7026                           	opt stack 0
  7027  0045AA                     ___lldiv:
  7028                           	opt stack 20
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;incstack = 0
  7032  0045AA  0E00               	movlw	0
  7033  0045AC  0100               	movlb	0	; () banked
  7034  0045AE  6F88               	movwf	___lldiv@quotient& (0+255),b
  7035  0045B0  0E00               	movlw	0
  7036  0045B2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7037  0045B4  0E00               	movlw	0
  7038  0045B6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7039  0045B8  0E00               	movlw	0
  7040  0045BA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043  0045BC  0100               	movlb	0	; () banked
  7044  0045BE  5184               	movf	___lldiv@divisor& (0+255),w,b
  7045  0045C0  0100               	movlb	0	; () banked
  7046  0045C2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7047  0045C4  0100               	movlb	0	; () banked
  7048  0045C6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7049  0045C8  0100               	movlb	0	; () banked
  7050  0045CA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7051  0045CC  B4D8               	btfsc	status,2,c
  7052  0045CE  D042               	goto	l1880
  7053                           
  7054                           ; BSR set to: 0
  7055  0045D0  0E01               	movlw	1
  7056  0045D2  0100               	movlb	0	; () banked
  7057  0045D4  6F8C               	movwf	___lldiv@counter& (0+255),b
  7058  0045D6  D008               	goto	l6648
  7059  0045D8                     l6646:
  7060                           
  7061                           ; BSR set to: 0
  7062  0045D8  0100               	movlb	0	; () banked
  7063  0045DA  90D8               	bcf	status,0,c
  7064  0045DC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7065  0045DE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7066  0045E0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7067  0045E2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7068  0045E4  0100               	movlb	0	; () banked
  7069  0045E6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7070  0045E8                     l6648:
  7071                           
  7072                           ; BSR set to: 0
  7073  0045E8  0100               	movlb	0	; () banked
  7074  0045EA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7075  0045EC  D7F5               	goto	l6646
  7076  0045EE                     l6650:
  7077                           
  7078                           ; BSR set to: 0
  7079  0045EE  0100               	movlb	0	; () banked
  7080  0045F0  90D8               	bcf	status,0,c
  7081  0045F2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7082  0045F4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7083  0045F6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7084  0045F8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  0045FA  0100               	movlb	0	; () banked
  7088  0045FC  5184               	movf	___lldiv@divisor& (0+255),w,b
  7089  0045FE  0100               	movlb	0	; () banked
  7090  004600  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  7091  004602  0100               	movlb	0	; () banked
  7092  004604  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7093  004606  0100               	movlb	0	; () banked
  7094  004608  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7095  00460A  0100               	movlb	0	; () banked
  7096  00460C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7097  00460E  0100               	movlb	0	; () banked
  7098  004610  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7099  004612  0100               	movlb	0	; () banked
  7100  004614  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7101  004616  0100               	movlb	0	; () banked
  7102  004618  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7103  00461A  A0D8               	btfss	status,0,c
  7104  00461C  D012               	goto	l6658
  7105                           
  7106                           ; BSR set to: 0
  7107  00461E  0100               	movlb	0	; () banked
  7108  004620  5184               	movf	___lldiv@divisor& (0+255),w,b
  7109  004622  0100               	movlb	0	; () banked
  7110  004624  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  7111  004626  0100               	movlb	0	; () banked
  7112  004628  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7113  00462A  0100               	movlb	0	; () banked
  7114  00462C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7115  00462E  0100               	movlb	0	; () banked
  7116  004630  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7117  004632  0100               	movlb	0	; () banked
  7118  004634  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7119  004636  0100               	movlb	0	; () banked
  7120  004638  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7121  00463A  0100               	movlb	0	; () banked
  7122  00463C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7123                           
  7124                           ; BSR set to: 0
  7125  00463E  0100               	movlb	0	; () banked
  7126  004640  8188               	bsf	___lldiv@quotient& (0+255),0,b
  7127  004642                     l6658:
  7128                           
  7129                           ; BSR set to: 0
  7130  004642  0100               	movlb	0	; () banked
  7131  004644  90D8               	bcf	status,0,c
  7132  004646  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7133  004648  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7134  00464A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7135  00464C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  7136                           
  7137                           ; BSR set to: 0
  7138  00464E  0100               	movlb	0	; () banked
  7139  004650  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  7140  004652  D7CD               	goto	l6650
  7141  004654                     l1880:
  7142                           
  7143                           ; BSR set to: 0
  7144  004654  C088  F080         	movff	___lldiv@quotient,?___lldiv
  7145  004658  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  7146  00465C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  7147  004660  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  7148                           
  7149                           ; BSR set to: 0
  7150  004664  0012               	return		;funcret
  7151  004666                     __end_of___lldiv:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           postdec1	equ	0xFE5
  7165                           fsr1l	equ	0xFE1
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function _change_state_to_menu_start *****************
  7174 ;; Defined at:
  7175 ;;		line 477 in file "UI.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;Total ram usage:        0 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:   11
  7196 ;; This function calls:
  7197 ;;		_lcdInst
  7198 ;;		_printRTC
  7199 ;;		_printf
  7200 ;; This function is called by:
  7201 ;;		_initUI
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text19
  7206  005424                     __ptext19:
  7207                           	opt stack 0
  7208  005424                     _change_state_to_menu_start:
  7209                           	opt stack 18
  7210                           
  7211                           ;UI.c: 478: cur_state = 0;
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;incstack = 0
  7215  005424  0E00               	movlw	0
  7216  005426  0100               	movlb	0	; () banked
  7217  005428  6FED               	movwf	(_cur_state+1)& (0+255),b
  7218  00542A  0E00               	movlw	0
  7219  00542C  6FEC               	movwf	_cur_state& (0+255),b
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;UI.c: 480: lcdInst(0b10000000);;
  7223  00542E  0E80               	movlw	128
  7224  005430  EC32  F02B         	call	_lcdInst
  7225                           
  7226                           ;UI.c: 481: printRTC();
  7227  005434  ECD0  F012         	call	_printRTC	;wreg free
  7228                           
  7229                           ;UI.c: 482: lcdInst(0b11000000);;
  7230  005438  0EC0               	movlw	192
  7231  00543A  EC32  F02B         	call	_lcdInst
  7232                           
  7233                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  7234  00543E  0E01               	movlw	low STR_30
  7235  005440  0100               	movlb	0	; () banked
  7236  005442  6F8E               	movwf	printf@f& (0+255),b
  7237  005444  0EFE               	movlw	high STR_30
  7238  005446  0100               	movlb	0	; () banked
  7239  005448  6F8F               	movwf	(printf@f+1)& (0+255),b
  7240  00544A  EC84  F00B         	call	_printf	;wreg free
  7241  00544E  0012               	return		;funcret
  7242  005450                     __end_of_change_state_to_menu_start:
  7243                           	opt stack 0
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           
  7264 ;; *************** function _initTime *****************
  7265 ;; Defined at:
  7266 ;;		line 17 in file "RTC.c"
  7267 ;; Parameters:    Size  Location     Type
  7268 ;;  s               1    wreg     unsigned char 
  7269 ;;  m               1    0[BANK0 ] unsigned char 
  7270 ;;  h               1    1[BANK0 ] unsigned char 
  7271 ;;  w               1    2[BANK0 ] unsigned char 
  7272 ;;  DD              1    3[BANK0 ] unsigned char 
  7273 ;;  MM              1    4[BANK0 ] unsigned char 
  7274 ;;  YY              1    5[BANK0 ] unsigned char 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  s               1    6[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        7 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    7
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_main
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text20
  7301  005588                     __ptext20:
  7302                           	opt stack 0
  7303  005588                     _initTime:
  7304                           	opt stack 23
  7305                           
  7306                           ;incstack = 0
  7307                           ;initTime@s stored from wreg
  7308  005588  0100               	movlb	0	; () banked
  7309  00558A  6F86               	movwf	initTime@s& (0+255),b
  7310                           
  7311                           ;RTC.c: 19: time[0] = s;
  7312  00558C  C086  F11C         	movff	initTime@s,_time
  7313                           
  7314                           ;RTC.c: 20: time[1] = m;
  7315  005590  C080  F11D         	movff	initTime@m,_time+1
  7316                           
  7317                           ;RTC.c: 21: time[2] = h;
  7318  005594  C081  F11E         	movff	initTime@h,_time+2
  7319                           
  7320                           ;RTC.c: 22: time[3] = w;
  7321  005598  C082  F11F         	movff	initTime@w,_time+3
  7322                           
  7323                           ;RTC.c: 23: time[4] = DD;
  7324  00559C  C083  F120         	movff	initTime@DD,_time+4
  7325                           
  7326                           ;RTC.c: 24: time[5] = MM;
  7327  0055A0  C084  F121         	movff	initTime@MM,_time+5
  7328                           
  7329                           ;RTC.c: 25: time[6] = YY;
  7330  0055A4  C085  F122         	movff	initTime@YY,_time+6
  7331  0055A8  0012               	return		;funcret
  7332  0055AA                     __end_of_initTime:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           intcon3	equ	0xFF0
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _initLCD *****************
  7355 ;; Defined at:
  7356 ;;		line 48 in file "lcd.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        1 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    9
  7377 ;; This function calls:
  7378 ;;		_lcdInst
  7379 ;; This function is called by:
  7380 ;;		_main
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text21
  7385  004FE6                     __ptext21:
  7386                           	opt stack 0
  7387  004FE6                     _initLCD:
  7388                           	opt stack 21
  7389                           
  7390                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7391                           
  7392                           ;incstack = 0
  7393  004FE6  0E9C               	movlw	156
  7394  004FE8  0100               	movlb	0	; () banked
  7395  004FEA  6F83               	movwf	??_initLCD& (0+255),b
  7396  004FEC  0ED7               	movlw	215
  7397  004FEE                     u9537:
  7398  004FEE  2EE8               	decfsz	wreg,f,c
  7399  004FF0  D7FE               	bra	u9537
  7400  004FF2  2F83               	decfsz	??_initLCD& (0+255),f,b
  7401  004FF4  D7FC               	bra	u9537
  7402                           
  7403                           ;lcd.c: 50: lcdInst(0b00110011);
  7404  004FF6  0E33               	movlw	51
  7405  004FF8  EC32  F02B         	call	_lcdInst
  7406                           
  7407                           ;lcd.c: 51: lcdInst(0b00110010);
  7408  004FFC  0E32               	movlw	50
  7409  004FFE  EC32  F02B         	call	_lcdInst
  7410                           
  7411                           ;lcd.c: 53: lcdInst(0b00101000);
  7412  005002  0E28               	movlw	40
  7413  005004  EC32  F02B         	call	_lcdInst
  7414                           
  7415                           ;lcd.c: 54: lcdInst(0b00001100);
  7416  005008  0E0C               	movlw	12
  7417  00500A  EC32  F02B         	call	_lcdInst
  7418                           
  7419                           ;lcd.c: 55: lcdInst(0b00000110);
  7420  00500E  0E06               	movlw	6
  7421  005010  EC32  F02B         	call	_lcdInst
  7422                           
  7423                           ;lcd.c: 56: lcdInst(0b00000001);
  7424  005014  0E01               	movlw	1
  7425  005016  EC32  F02B         	call	_lcdInst
  7426                           
  7427                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7428  00501A  0E9C               	movlw	156
  7429  00501C  0100               	movlb	0	; () banked
  7430  00501E  6F83               	movwf	??_initLCD& (0+255),b
  7431  005020  0ED7               	movlw	215
  7432  005022                     u9547:
  7433  005022  2EE8               	decfsz	wreg,f,c
  7434  005024  D7FE               	bra	u9547
  7435  005026  2F83               	decfsz	??_initLCD& (0+255),f,b
  7436  005028  D7FC               	bra	u9547
  7437  00502A  0012               	return		;funcret
  7438  00502C                     __end_of_initLCD:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           intcon3	equ	0xFF0
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _UI *****************
  7461 ;; Defined at:
  7462 ;;		line 76 in file "UI.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  i               1   73[BANK0 ] unsigned char 
  7467 ;;  i               1   85[BANK0 ] unsigned char 
  7468 ;;  i               1   84[BANK0 ] unsigned char 
  7469 ;;  i               1   83[BANK0 ] unsigned char 
  7470 ;;  i               1   82[BANK0 ] unsigned char 
  7471 ;;  i               1   81[BANK0 ] unsigned char 
  7472 ;;  i               1   80[BANK0 ] unsigned char 
  7473 ;;  i               1   79[BANK0 ] unsigned char 
  7474 ;;  i               1   78[BANK0 ] unsigned char 
  7475 ;;  i               1   77[BANK0 ] unsigned char 
  7476 ;;  i               1   76[BANK0 ] unsigned char 
  7477 ;;  i               1   75[BANK0 ] unsigned char 
  7478 ;;  i               1   74[BANK0 ] unsigned char 
  7479 ;;  month           4   86[BANK0 ] unsigned char [4]
  7480 ;;  i               1   72[BANK0 ] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;Total ram usage:       22 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:   11
  7497 ;; This function calls:
  7498 ;;		___awdiv
  7499 ;;		___awmod
  7500 ;;		_change_state_to_menu_12
  7501 ;;		_change_state_to_menu_22
  7502 ;;		_lcdInst
  7503 ;;		_printRTC
  7504 ;;		_printf
  7505 ;;		_strcpy
  7506 ;; This function is called by:
  7507 ;;		_main
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           	psect	text22
  7512  000012                     __ptext22:
  7513                           	opt stack 0
  7514  000012                     _UI:
  7515                           	opt stack 19
  7516                           
  7517                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7518                           
  7519                           ;incstack = 0
  7520  000012  0E02               	movlw	2
  7521  000014  0100               	movlb	0	; () banked
  7522  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  7523  000018  A4D8               	btfss	status,2,c
  7524  00001A  D086               	goto	l8858
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7528  00001C  0E01               	movlw	1
  7529  00001E  EC32  F02B         	call	_lcdInst
  7530  000022  0E68               	movlw	104
  7531  000024  0100               	movlb	0	; () banked
  7532  000026  6FC4               	movwf	??_UI& (0+255),b
  7533  000028  0EE4               	movlw	228
  7534  00002A                     u9557:
  7535  00002A  2EE8               	decfsz	wreg,f,c
  7536  00002C  D7FE               	bra	u9557
  7537  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  7538  000030  D7FC               	bra	u9557
  7539  000032  F000               	nop	
  7540                           
  7541                           ;UI.c: 79: lcdInst(0b10000000);;
  7542  000034  0E80               	movlw	128
  7543  000036  EC32  F02B         	call	_lcdInst
  7544                           
  7545                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7546  00003A  0E69               	movlw	low STR_1
  7547  00003C  0100               	movlb	0	; () banked
  7548  00003E  6F8E               	movwf	printf@f& (0+255),b
  7549  000040  0EFB               	movlw	high STR_1
  7550  000042  0100               	movlb	0	; () banked
  7551  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  7552  000046  0E01               	movlw	1
  7553  000048  0100               	movlb	0	; () banked
  7554  00004A  25FD               	addwf	_sel& (0+255),w,b
  7555  00004C  0100               	movlb	0	; () banked
  7556  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  7557  000050  0100               	movlb	0	; () banked
  7558  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  7559  000054  0E00               	movlw	0
  7560  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7561  000058  EC84  F00B         	call	_printf	;wreg free
  7562                           
  7563                           ;UI.c: 81: lcdInst(0b11000000);;
  7564  00005C  0EC0               	movlw	192
  7565  00005E  EC32  F02B         	call	_lcdInst
  7566                           
  7567                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7568  000062  0E0E               	movlw	14
  7569  000064  0100               	movlb	0	; () banked
  7570  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7571  000068  0E10               	movlw	16
  7572  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  7573  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  7574  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7575  000074  EC88  F023         	call	___awmod	;wreg free
  7576  000078  C080  F0C6         	movff	?___awmod,_UI$2419
  7577  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2419+1
  7578                           
  7579                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7580  000080  0E31               	movlw	low STR_2
  7581  000082  0100               	movlb	0	; () banked
  7582  000084  6F8E               	movwf	printf@f& (0+255),b
  7583  000086  0EFF               	movlw	high STR_2
  7584  000088  0100               	movlb	0	; () banked
  7585  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7586  00008C  0E0E               	movlw	14
  7587  00008E  0100               	movlb	0	; () banked
  7588  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7589  000092  0E10               	movlw	16
  7590  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  7591  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  7592  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  7593  00009E  EC88  F023         	call	___awmod	;wreg free
  7594  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  7595  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7596  0000AA  0E00               	movlw	0
  7597  0000AC  0100               	movlb	0	; () banked
  7598  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7599  0000B0  0E3C               	movlw	60
  7600  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  7601  0000B4  EC76  F022         	call	___awdiv	;wreg free
  7602  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  7603  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  7604  0000C0  C0C6  F080         	movff	_UI$2419,___awmod@dividend
  7605  0000C4  C0C7  F081         	movff	_UI$2419+1,___awmod@dividend+1
  7606  0000C8  0E00               	movlw	0
  7607  0000CA  0100               	movlb	0	; () banked
  7608  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7609  0000CE  0E3C               	movlw	60
  7610  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  7611  0000D2  EC88  F023         	call	___awmod	;wreg free
  7612  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  7613  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  7614  0000DE  EC84  F00B         	call	_printf	;wreg free
  7615  0000E2                     l180:
  7616  0000E2  B281               	btfsc	3969,1,c	;volatile
  7617  0000E4  D7FE               	goto	l180
  7618  0000E6                     l183:
  7619  0000E6  A281               	btfss	3969,1,c	;volatile
  7620  0000E8  D7FE               	goto	l183
  7621                           
  7622                           ;UI.c: 86: }
  7623                           ;UI.c: 87: if(cur_state == 12){
  7624  0000EA  0E0C               	movlw	12
  7625  0000EC  0100               	movlb	0	; () banked
  7626  0000EE  19EC               	xorwf	_cur_state& (0+255),w,b
  7627  0000F0  0100               	movlb	0	; () banked
  7628  0000F2  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7629  0000F4  A4D8               	btfss	status,2,c
  7630  0000F6  D003               	goto	l8852
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;UI.c: 88: change_state_to_menu_12();
  7634  0000F8  EC70  F028         	call	_change_state_to_menu_12	;wreg free
  7635                           
  7636                           ;UI.c: 89: }
  7637  0000FC  D002               	goto	l188
  7638  0000FE                     l8852:
  7639                           
  7640                           ;UI.c: 90: else{
  7641                           ;UI.c: 91: change_state_to_menu_22();
  7642  0000FE  EC54  F028         	call	_change_state_to_menu_22	;wreg free
  7643  000102                     l188:
  7644  000102  B281               	btfsc	3969,1,c	;volatile
  7645  000104  D7FE               	goto	l188
  7646                           
  7647                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  7648  000106  0E05               	movlw	5
  7649  000108  0100               	movlb	0	; () banked
  7650  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  7651  00010C  0E0F               	movlw	15
  7652  00010E  0100               	movlb	0	; () banked
  7653  000110  6FC4               	movwf	??_UI& (0+255),b
  7654  000112  0EF1               	movlw	241
  7655  000114                     u9567:
  7656  000114  2EE8               	decfsz	wreg,f,c
  7657  000116  D7FE               	bra	u9567
  7658  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  7659  00011A  D7FC               	bra	u9567
  7660  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  7661  00011E  D7FA               	bra	u9567
  7662                           
  7663                           ;UI.c: 95: machine_state = UI_state;
  7664  000120  0E00               	movlw	0
  7665  000122  0100               	movlb	0	; () banked
  7666  000124  6FFC               	movwf	_machine_state& (0+255),b
  7667                           
  7668                           ;UI.c: 96: }
  7669  000126  D3D0               	goto	l9178
  7670  000128                     l8858:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;UI.c: 97: else if(cur_state == 0){
  7674  000128  0100               	movlb	0	; () banked
  7675  00012A  51EC               	movf	_cur_state& (0+255),w,b
  7676  00012C  0100               	movlb	0	; () banked
  7677  00012E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7678  000130  A4D8               	btfss	status,2,c
  7679  000132  D3CA               	goto	l9178
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7683  000134  0E00               	movlw	0
  7684  000136  0100               	movlb	0	; () banked
  7685  000138  6FC8               	movwf	UI@i& (0+255),b
  7686  00013A                     l8862:
  7687                           
  7688                           ; BSR set to: 0
  7689  00013A  0E63               	movlw	99
  7690  00013C  0100               	movlb	0	; () banked
  7691  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  7692  000140  D001               	goto	l8866
  7693  000142  D00C               	goto	l8870
  7694  000144                     l8866:
  7695                           
  7696                           ; BSR set to: 0
  7697  000144  0E68               	movlw	104
  7698  000146  0100               	movlb	0	; () banked
  7699  000148  6FC4               	movwf	??_UI& (0+255),b
  7700  00014A  0EE4               	movlw	228
  7701  00014C                     u9577:
  7702  00014C  2EE8               	decfsz	wreg,f,c
  7703  00014E  D7FE               	bra	u9577
  7704  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  7705  000152  D7FC               	bra	u9577
  7706  000154  F000               	nop	
  7707  000156  0100               	movlb	0	; () banked
  7708  000158  2BC8               	incf	UI@i& (0+255),f,b
  7709  00015A  D7EF               	goto	l8862
  7710  00015C                     l8870:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;UI.c: 99: if(cur_state == 0){
  7714  00015C  0100               	movlb	0	; () banked
  7715  00015E  51EC               	movf	_cur_state& (0+255),w,b
  7716  000160  0100               	movlb	0	; () banked
  7717  000162  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7718  000164  A4D8               	btfss	status,2,c
  7719  000166  D3B0               	goto	l9178
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;UI.c: 100: printRTC();
  7723  000168  ECD0  F012         	call	_printRTC	;wreg free
  7724                           
  7725                           ;UI.c: 101: }
  7726                           ;UI.c: 102: }
  7727                           ;UI.c: 103: while(logstate){
  7728  00016C  D3AD               	goto	l9178
  7729  00016E                     l8874:
  7730                           
  7731                           ;UI.c: 105: if(!log_completion){
  7732  00016E  5063               	movf	_log_completion,w,c
  7733  000170  1064               	iorwf	_log_completion+1,w,c
  7734  000172  A4D8               	btfss	status,2,c
  7735  000174  D041               	goto	l8904
  7736                           
  7737                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7738  000176  0E01               	movlw	1
  7739  000178  EC32  F02B         	call	_lcdInst
  7740  00017C  0E68               	movlw	104
  7741  00017E  0100               	movlb	0	; () banked
  7742  000180  6FC4               	movwf	??_UI& (0+255),b
  7743  000182  0EE4               	movlw	228
  7744  000184                     u9587:
  7745  000184  2EE8               	decfsz	wreg,f,c
  7746  000186  D7FE               	bra	u9587
  7747  000188  2FC4               	decfsz	??_UI& (0+255),f,b
  7748  00018A  D7FC               	bra	u9587
  7749  00018C  F000               	nop	
  7750                           
  7751                           ;UI.c: 107: lcdInst(0b10000000);;
  7752  00018E  0E80               	movlw	128
  7753  000190  EC32  F02B         	call	_lcdInst
  7754                           
  7755                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  7756  000194  0E57               	movlw	low STR_3
  7757  000196  0100               	movlb	0	; () banked
  7758  000198  6F8E               	movwf	printf@f& (0+255),b
  7759  00019A  0EFB               	movlw	high STR_3
  7760  00019C  0100               	movlb	0	; () banked
  7761  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7762  0001A0  C0F4  F090         	movff	_log,?_printf+2
  7763  0001A4  C0F5  F091         	movff	_log+1,?_printf+3
  7764  0001A8  EC84  F00B         	call	_printf	;wreg free
  7765                           
  7766                           ;UI.c: 109: lcdInst(0b11000000);;
  7767  0001AC  0EC0               	movlw	192
  7768  0001AE  EC32  F02B         	call	_lcdInst
  7769                           
  7770                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  7771  0001B2  0E54               	movlw	low STR_4
  7772  0001B4  0100               	movlb	0	; () banked
  7773  0001B6  6F8E               	movwf	printf@f& (0+255),b
  7774  0001B8  0EFE               	movlw	high STR_4
  7775  0001BA  0100               	movlb	0	; () banked
  7776  0001BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7777  0001BE  EC84  F00B         	call	_printf	;wreg free
  7778  0001C2                     l8888:
  7779  0001C2  0E00               	movlw	0
  7780  0001C4  0100               	movlb	0	; () banked
  7781  0001C6  6FC9               	movwf	UI@i_409& (0+255),b
  7782  0001C8                     l8890:
  7783                           
  7784                           ; BSR set to: 0
  7785  0001C8  0E63               	movlw	99
  7786  0001CA  0100               	movlb	0	; () banked
  7787  0001CC  65C9               	cpfsgt	UI@i_409& (0+255),b
  7788  0001CE  D001               	goto	l8894
  7789  0001D0  D00C               	goto	l8898
  7790  0001D2                     l8894:
  7791                           
  7792                           ; BSR set to: 0
  7793  0001D2  0E68               	movlw	104
  7794  0001D4  0100               	movlb	0	; () banked
  7795  0001D6  6FC4               	movwf	??_UI& (0+255),b
  7796  0001D8  0EE4               	movlw	228
  7797  0001DA                     u9597:
  7798  0001DA  2EE8               	decfsz	wreg,f,c
  7799  0001DC  D7FE               	bra	u9597
  7800  0001DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7801  0001E0  D7FC               	bra	u9597
  7802  0001E2  F000               	nop	
  7803  0001E4  0100               	movlb	0	; () banked
  7804  0001E6  2BC9               	incf	UI@i_409& (0+255),f,b
  7805  0001E8  D7EF               	goto	l8890
  7806  0001EA                     l8898:
  7807                           
  7808                           ; BSR set to: 0
  7809  0001EA  0100               	movlb	0	; () banked
  7810  0001EC  51F8               	movf	_logstate& (0+255),w,b
  7811  0001EE  0100               	movlb	0	; () banked
  7812  0001F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7813  0001F2  B4D8               	btfsc	status,2,c
  7814  0001F4  0012               	return	
  7815  0001F6  D7E5               	goto	l8888
  7816  0001F8                     l8904:
  7817                           
  7818                           ;UI.c: 114: else{
  7819                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7820  0001F8  0E01               	movlw	1
  7821  0001FA  EC32  F02B         	call	_lcdInst
  7822  0001FE  0E68               	movlw	104
  7823  000200  0100               	movlb	0	; () banked
  7824  000202  6FC4               	movwf	??_UI& (0+255),b
  7825  000204  0EE4               	movlw	228
  7826  000206                     u9607:
  7827  000206  2EE8               	decfsz	wreg,f,c
  7828  000208  D7FE               	bra	u9607
  7829  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  7830  00020C  D7FC               	bra	u9607
  7831  00020E  F000               	nop	
  7832                           
  7833                           ;UI.c: 116: lcdInst(0b10000000);;
  7834  000210  0E80               	movlw	128
  7835  000212  EC32  F02B         	call	_lcdInst
  7836                           
  7837                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  7838  000216  0E57               	movlw	low STR_3
  7839  000218  0100               	movlb	0	; () banked
  7840  00021A  6F8E               	movwf	printf@f& (0+255),b
  7841  00021C  0EFB               	movlw	high STR_3
  7842  00021E  0100               	movlb	0	; () banked
  7843  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  7844  000222  C0F4  F090         	movff	_log,?_printf+2
  7845  000226  C0F5  F091         	movff	_log+1,?_printf+3
  7846  00022A  EC84  F00B         	call	_printf	;wreg free
  7847                           
  7848                           ;UI.c: 118: lcdInst(0b11000000);;
  7849  00022E  0EC0               	movlw	192
  7850  000230  EC32  F02B         	call	_lcdInst
  7851                           
  7852                           ;UI.c: 119: printf("PAUSE < | BACK >");
  7853  000234  0EF0               	movlw	low STR_6
  7854  000236  0100               	movlb	0	; () banked
  7855  000238  6F8E               	movwf	printf@f& (0+255),b
  7856  00023A  0EFD               	movlw	high STR_6
  7857  00023C  0100               	movlb	0	; () banked
  7858  00023E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7859  000240  EC84  F00B         	call	_printf	;wreg free
  7860                           
  7861                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7862  000244  0E00               	movlw	0
  7863  000246  0100               	movlb	0	; () banked
  7864  000248  6FCA               	movwf	UI@i_412& (0+255),b
  7865  00024A                     l8918:
  7866                           
  7867                           ; BSR set to: 0
  7868  00024A  0E63               	movlw	99
  7869  00024C  0100               	movlb	0	; () banked
  7870  00024E  65CA               	cpfsgt	UI@i_412& (0+255),b
  7871  000250  D001               	goto	l8922
  7872  000252  D00C               	goto	l8926
  7873  000254                     l8922:
  7874                           
  7875                           ; BSR set to: 0
  7876  000254  0E68               	movlw	104
  7877  000256  0100               	movlb	0	; () banked
  7878  000258  6FC4               	movwf	??_UI& (0+255),b
  7879  00025A  0EE4               	movlw	228
  7880  00025C                     u9617:
  7881  00025C  2EE8               	decfsz	wreg,f,c
  7882  00025E  D7FE               	bra	u9617
  7883  000260  2FC4               	decfsz	??_UI& (0+255),f,b
  7884  000262  D7FC               	bra	u9617
  7885  000264  F000               	nop	
  7886  000266  0100               	movlb	0	; () banked
  7887  000268  2BCA               	incf	UI@i_412& (0+255),f,b
  7888  00026A  D7EF               	goto	l8918
  7889  00026C                     l8926:
  7890                           
  7891                           ; BSR set to: 0
  7892  00026C  0100               	movlb	0	; () banked
  7893  00026E  51F8               	movf	_logstate& (0+255),w,b
  7894  000270  0100               	movlb	0	; () banked
  7895  000272  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7896  000274  B4D8               	btfsc	status,2,c
  7897  000276  0012               	return	
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7901                           
  7902                           ; BSR set to: 0
  7903                           
  7904                           ; BSR set to: 0
  7905  000278  0E00               	movlw	0
  7906  00027A  0100               	movlb	0	; () banked
  7907  00027C  6FCB               	movwf	UI@i_413& (0+255),b
  7908  00027E                     l8932:
  7909                           
  7910                           ; BSR set to: 0
  7911  00027E  0E63               	movlw	99
  7912  000280  0100               	movlb	0	; () banked
  7913  000282  65CB               	cpfsgt	UI@i_413& (0+255),b
  7914  000284  D001               	goto	l8936
  7915  000286  D00C               	goto	l8940
  7916  000288                     l8936:
  7917                           
  7918                           ; BSR set to: 0
  7919  000288  0E68               	movlw	104
  7920  00028A  0100               	movlb	0	; () banked
  7921  00028C  6FC4               	movwf	??_UI& (0+255),b
  7922  00028E  0EE4               	movlw	228
  7923  000290                     u9627:
  7924  000290  2EE8               	decfsz	wreg,f,c
  7925  000292  D7FE               	bra	u9627
  7926  000294  2FC4               	decfsz	??_UI& (0+255),f,b
  7927  000296  D7FC               	bra	u9627
  7928  000298  F000               	nop	
  7929  00029A  0100               	movlb	0	; () banked
  7930  00029C  2BCB               	incf	UI@i_413& (0+255),f,b
  7931  00029E  D7EF               	goto	l8932
  7932  0002A0                     l8940:
  7933                           
  7934                           ; BSR set to: 0
  7935  0002A0  0100               	movlb	0	; () banked
  7936  0002A2  51F8               	movf	_logstate& (0+255),w,b
  7937  0002A4  0100               	movlb	0	; () banked
  7938  0002A6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7939  0002A8  B4D8               	btfsc	status,2,c
  7940  0002AA  0012               	return	
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7944                           
  7945                           ; BSR set to: 0
  7946                           
  7947                           ; BSR set to: 0
  7948  0002AC  0E01               	movlw	1
  7949  0002AE  EC32  F02B         	call	_lcdInst
  7950  0002B2  0E68               	movlw	104
  7951  0002B4  0100               	movlb	0	; () banked
  7952  0002B6  6FC4               	movwf	??_UI& (0+255),b
  7953  0002B8  0EE4               	movlw	228
  7954  0002BA                     u9637:
  7955  0002BA  2EE8               	decfsz	wreg,f,c
  7956  0002BC  D7FE               	bra	u9637
  7957  0002BE  2FC4               	decfsz	??_UI& (0+255),f,b
  7958  0002C0  D7FC               	bra	u9637
  7959  0002C2  F000               	nop	
  7960                           
  7961                           ;UI.c: 125: lcdInst(0b10000000);;
  7962  0002C4  0E80               	movlw	128
  7963  0002C6  EC32  F02B         	call	_lcdInst
  7964                           
  7965                           ;UI.c: 126: printf("START:");
  7966  0002CA  0EC3               	movlw	low STR_7
  7967  0002CC  0100               	movlb	0	; () banked
  7968  0002CE  6F8E               	movwf	printf@f& (0+255),b
  7969  0002D0  0EFF               	movlw	high STR_7
  7970  0002D2  0100               	movlb	0	; () banked
  7971  0002D4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7972  0002D6  EC84  F00B         	call	_printf	;wreg free
  7973                           
  7974                           ;UI.c: 127: lcdInst(0b11000000);;
  7975  0002DA  0EC0               	movlw	192
  7976  0002DC  EC32  F02B         	call	_lcdInst
  7977                           
  7978                           ;UI.c: 128: char month[] = "MMM";
  7979  0002E0  C147  F0D6         	movff	UI@F3241,UI@month
  7980  0002E4  C148  F0D7         	movff	UI@F3241+1,UI@month+1
  7981  0002E8  C149  F0D8         	movff	UI@F3241+2,UI@month+2
  7982  0002EC  C14A  F0D9         	movff	UI@F3241+3,UI@month+3
  7983                           
  7984                           ;UI.c: 129: switch(log_startTime[5]){
  7985  0002F0  D0C3               	goto	l8984
  7986  0002F2                     l8956:
  7987                           
  7988                           ;UI.c: 131: strcpy(month, "JAN");
  7989  0002F2  0ED6               	movlw	low UI@month
  7990  0002F4  0100               	movlb	0	; () banked
  7991  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  7992  0002F8  0E00               	movlw	high UI@month
  7993  0002FA  0100               	movlb	0	; () banked
  7994  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7995  0002FE  0EDA               	movlw	low STR_8
  7996  000300  0100               	movlb	0	; () banked
  7997  000302  6F82               	movwf	strcpy@from& (0+255),b
  7998  000304  0EFF               	movlw	high STR_8
  7999  000306  0100               	movlb	0	; () banked
  8000  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8001  00030A  EC8C  F028         	call	_strcpy	;wreg free
  8002                           
  8003                           ;UI.c: 132: break;
  8004  00030E  D0E6               	goto	l8986
  8005  000310                     l8958:
  8006                           
  8007                           ;UI.c: 134: strcpy(month, "FEB");
  8008  000310  0ED6               	movlw	low UI@month
  8009  000312  0100               	movlb	0	; () banked
  8010  000314  6F80               	movwf	strcpy@to& (0+255),b
  8011  000316  0E00               	movlw	high UI@month
  8012  000318  0100               	movlb	0	; () banked
  8013  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8014  00031C  0ECA               	movlw	low STR_9
  8015  00031E  0100               	movlb	0	; () banked
  8016  000320  6F82               	movwf	strcpy@from& (0+255),b
  8017  000322  0EFF               	movlw	high STR_9
  8018  000324  0100               	movlb	0	; () banked
  8019  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8020  000328  EC8C  F028         	call	_strcpy	;wreg free
  8021                           
  8022                           ;UI.c: 135: break;
  8023  00032C  D0D7               	goto	l8986
  8024  00032E                     l8960:
  8025                           
  8026                           ;UI.c: 137: strcpy(month, "MAR");
  8027  00032E  0ED6               	movlw	low UI@month
  8028  000330  0100               	movlb	0	; () banked
  8029  000332  6F80               	movwf	strcpy@to& (0+255),b
  8030  000334  0E00               	movlw	high UI@month
  8031  000336  0100               	movlb	0	; () banked
  8032  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8033  00033A  0EE6               	movlw	low STR_10
  8034  00033C  0100               	movlb	0	; () banked
  8035  00033E  6F82               	movwf	strcpy@from& (0+255),b
  8036  000340  0EFF               	movlw	high STR_10
  8037  000342  0100               	movlb	0	; () banked
  8038  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8039  000346  EC8C  F028         	call	_strcpy	;wreg free
  8040                           
  8041                           ;UI.c: 138: break;
  8042  00034A  D0C8               	goto	l8986
  8043  00034C                     l8962:
  8044                           
  8045                           ;UI.c: 140: strcpy(month, "APR");
  8046  00034C  0ED6               	movlw	low UI@month
  8047  00034E  0100               	movlb	0	; () banked
  8048  000350  6F80               	movwf	strcpy@to& (0+255),b
  8049  000352  0E00               	movlw	high UI@month
  8050  000354  0100               	movlb	0	; () banked
  8051  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8052  000358  0EEA               	movlw	low STR_11
  8053  00035A  0100               	movlb	0	; () banked
  8054  00035C  6F82               	movwf	strcpy@from& (0+255),b
  8055  00035E  0EFF               	movlw	high STR_11
  8056  000360  0100               	movlb	0	; () banked
  8057  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8058  000364  EC8C  F028         	call	_strcpy	;wreg free
  8059                           
  8060                           ;UI.c: 141: break;
  8061  000368  D0B9               	goto	l8986
  8062  00036A                     l8964:
  8063                           
  8064                           ;UI.c: 143: strcpy(month, "MAY");
  8065  00036A  0ED6               	movlw	low UI@month
  8066  00036C  0100               	movlb	0	; () banked
  8067  00036E  6F80               	movwf	strcpy@to& (0+255),b
  8068  000370  0E00               	movlw	high UI@month
  8069  000372  0100               	movlb	0	; () banked
  8070  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8071  000376  0EFA               	movlw	low STR_12
  8072  000378  0100               	movlb	0	; () banked
  8073  00037A  6F82               	movwf	strcpy@from& (0+255),b
  8074  00037C  0EFF               	movlw	high STR_12
  8075  00037E  0100               	movlb	0	; () banked
  8076  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8077  000382  EC8C  F028         	call	_strcpy	;wreg free
  8078                           
  8079                           ;UI.c: 144: break;
  8080  000386  D0AA               	goto	l8986
  8081  000388                     l8966:
  8082                           
  8083                           ;UI.c: 146: strcpy(month, "JUN");
  8084  000388  0ED6               	movlw	low UI@month
  8085  00038A  0100               	movlb	0	; () banked
  8086  00038C  6F80               	movwf	strcpy@to& (0+255),b
  8087  00038E  0E00               	movlw	high UI@month
  8088  000390  0100               	movlb	0	; () banked
  8089  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8090  000394  0EDE               	movlw	low STR_13
  8091  000396  0100               	movlb	0	; () banked
  8092  000398  6F82               	movwf	strcpy@from& (0+255),b
  8093  00039A  0EFF               	movlw	high STR_13
  8094  00039C  0100               	movlb	0	; () banked
  8095  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8096  0003A0  EC8C  F028         	call	_strcpy	;wreg free
  8097                           
  8098                           ;UI.c: 147: break;
  8099  0003A4  D09B               	goto	l8986
  8100  0003A6                     l8968:
  8101                           
  8102                           ;UI.c: 149: strcpy(month, "JUL");
  8103  0003A6  0ED6               	movlw	low UI@month
  8104  0003A8  0100               	movlb	0	; () banked
  8105  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  8106  0003AC  0E00               	movlw	high UI@month
  8107  0003AE  0100               	movlb	0	; () banked
  8108  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8109  0003B2  0ED6               	movlw	low STR_14
  8110  0003B4  0100               	movlb	0	; () banked
  8111  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  8112  0003B8  0EFF               	movlw	high STR_14
  8113  0003BA  0100               	movlb	0	; () banked
  8114  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8115  0003BE  EC8C  F028         	call	_strcpy	;wreg free
  8116                           
  8117                           ;UI.c: 150: break;
  8118  0003C2  D08C               	goto	l8986
  8119  0003C4                     l8970:
  8120                           
  8121                           ;UI.c: 152: strcpy(month, "AUG");
  8122  0003C4  0ED6               	movlw	low UI@month
  8123  0003C6  0100               	movlb	0	; () banked
  8124  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  8125  0003CA  0E00               	movlw	high UI@month
  8126  0003CC  0100               	movlb	0	; () banked
  8127  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8128  0003D0  0ED2               	movlw	low STR_15
  8129  0003D2  0100               	movlb	0	; () banked
  8130  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  8131  0003D6  0EFF               	movlw	high STR_15
  8132  0003D8  0100               	movlb	0	; () banked
  8133  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8134  0003DC  EC8C  F028         	call	_strcpy	;wreg free
  8135                           
  8136                           ;UI.c: 153: break;
  8137  0003E0  D07D               	goto	l8986
  8138  0003E2                     l8972:
  8139                           
  8140                           ;UI.c: 155: strcpy(month, "SEP");
  8141  0003E2  0ED6               	movlw	low UI@month
  8142  0003E4  0100               	movlb	0	; () banked
  8143  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  8144  0003E8  0E00               	movlw	high UI@month
  8145  0003EA  0100               	movlb	0	; () banked
  8146  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8147  0003EE  0EE2               	movlw	low STR_16
  8148  0003F0  0100               	movlb	0	; () banked
  8149  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  8150  0003F4  0EFF               	movlw	high STR_16
  8151  0003F6  0100               	movlb	0	; () banked
  8152  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8153  0003FA  EC8C  F028         	call	_strcpy	;wreg free
  8154                           
  8155                           ;UI.c: 156: break;
  8156  0003FE  D06E               	goto	l8986
  8157  000400                     l8974:
  8158                           
  8159                           ;UI.c: 158: strcpy(month, "OCT");
  8160  000400  0ED6               	movlw	low UI@month
  8161  000402  0100               	movlb	0	; () banked
  8162  000404  6F80               	movwf	strcpy@to& (0+255),b
  8163  000406  0E00               	movlw	high UI@month
  8164  000408  0100               	movlb	0	; () banked
  8165  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8166  00040C  0EF2               	movlw	low STR_17
  8167  00040E  0100               	movlb	0	; () banked
  8168  000410  6F82               	movwf	strcpy@from& (0+255),b
  8169  000412  0EFF               	movlw	high STR_17
  8170  000414  0100               	movlb	0	; () banked
  8171  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8172  000418  EC8C  F028         	call	_strcpy	;wreg free
  8173                           
  8174                           ;UI.c: 159: break;
  8175  00041C  D05F               	goto	l8986
  8176  00041E                     l8976:
  8177                           
  8178                           ;UI.c: 161: strcpy(month, "NOV");
  8179  00041E  0ED6               	movlw	low UI@month
  8180  000420  0100               	movlb	0	; () banked
  8181  000422  6F80               	movwf	strcpy@to& (0+255),b
  8182  000424  0E00               	movlw	high UI@month
  8183  000426  0100               	movlb	0	; () banked
  8184  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8185  00042A  0EF6               	movlw	low STR_18
  8186  00042C  0100               	movlb	0	; () banked
  8187  00042E  6F82               	movwf	strcpy@from& (0+255),b
  8188  000430  0EFF               	movlw	high STR_18
  8189  000432  0100               	movlb	0	; () banked
  8190  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8191  000436  EC8C  F028         	call	_strcpy	;wreg free
  8192                           
  8193                           ;UI.c: 162: break;
  8194  00043A  D050               	goto	l8986
  8195  00043C                     l8978:
  8196                           
  8197                           ;UI.c: 164: strcpy(month, "DEC");
  8198  00043C  0ED6               	movlw	low UI@month
  8199  00043E  0100               	movlb	0	; () banked
  8200  000440  6F80               	movwf	strcpy@to& (0+255),b
  8201  000442  0E00               	movlw	high UI@month
  8202  000444  0100               	movlb	0	; () banked
  8203  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8204  000448  0ECE               	movlw	low STR_19
  8205  00044A  0100               	movlb	0	; () banked
  8206  00044C  6F82               	movwf	strcpy@from& (0+255),b
  8207  00044E  0EFF               	movlw	high STR_19
  8208  000450  0100               	movlb	0	; () banked
  8209  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8210  000454  EC8C  F028         	call	_strcpy	;wreg free
  8211                           
  8212                           ;UI.c: 165: break;
  8213  000458  D041               	goto	l8986
  8214  00045A                     l8980:
  8215                           
  8216                           ;UI.c: 167: strcpy(month, "ERR");
  8217  00045A  0ED6               	movlw	low UI@month
  8218  00045C  0100               	movlb	0	; () banked
  8219  00045E  6F80               	movwf	strcpy@to& (0+255),b
  8220  000460  0E00               	movlw	high UI@month
  8221  000462  0100               	movlb	0	; () banked
  8222  000464  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8223  000466  0EEE               	movlw	low STR_20
  8224  000468  0100               	movlb	0	; () banked
  8225  00046A  6F82               	movwf	strcpy@from& (0+255),b
  8226  00046C  0EFF               	movlw	high STR_20
  8227  00046E  0100               	movlb	0	; () banked
  8228  000470  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8229  000472  EC8C  F028         	call	_strcpy	;wreg free
  8230                           
  8231                           ;UI.c: 169: }
  8232                           
  8233                           ;UI.c: 168: break;
  8234  000476  D032               	goto	l8986
  8235  000478                     l8984:
  8236  000478  EE21  F00A         	lfsr	2,_log_startTime+10
  8237  00047C  CFDE F0C4          	movff	postinc2,??_UI
  8238  000480  CFDD F0C5          	movff	postdec2,??_UI+1
  8239                           
  8240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8241                           ; Switch size 1, requested type "space"
  8242                           ; Number of cases is 1, Range of values is 0 to 0
  8243                           ; switch strategies available:
  8244                           ; Name         Instructions Cycles
  8245                           ; simple_byte            4     3 (average)
  8246                           ;	Chosen strategy is simple_byte
  8247  000484  0100               	movlb	0	; () banked
  8248  000486  51C5               	movf	(??_UI+1)& (0+255),w,b
  8249  000488  0A00               	xorlw	0	; case 0
  8250  00048A  A4D8               	btfss	status,2,c
  8251  00048C  D7E6               	goto	l8980
  8252                           
  8253                           ; BSR set to: 0
  8254                           ; Switch size 1, requested type "space"
  8255                           ; Number of cases is 12, Range of values is 1 to 12
  8256                           ; switch strategies available:
  8257                           ; Name         Instructions Cycles
  8258                           ; simple_byte           37    19 (average)
  8259                           ;	Chosen strategy is simple_byte
  8260  00048E  0100               	movlb	0	; () banked
  8261  000490  51C4               	movf	??_UI& (0+255),w,b
  8262  000492  0A01               	xorlw	1	; case 1
  8263  000494  B4D8               	btfsc	status,2,c
  8264  000496  D72D               	goto	l8956
  8265  000498  0A03               	xorlw	3	; case 2
  8266  00049A  B4D8               	btfsc	status,2,c
  8267  00049C  D739               	goto	l8958
  8268  00049E  0A01               	xorlw	1	; case 3
  8269  0004A0  B4D8               	btfsc	status,2,c
  8270  0004A2  D745               	goto	l8960
  8271  0004A4  0A07               	xorlw	7	; case 4
  8272  0004A6  B4D8               	btfsc	status,2,c
  8273  0004A8  D751               	goto	l8962
  8274  0004AA  0A01               	xorlw	1	; case 5
  8275  0004AC  B4D8               	btfsc	status,2,c
  8276  0004AE  D75D               	goto	l8964
  8277  0004B0  0A03               	xorlw	3	; case 6
  8278  0004B2  B4D8               	btfsc	status,2,c
  8279  0004B4  D769               	goto	l8966
  8280  0004B6  0A01               	xorlw	1	; case 7
  8281  0004B8  B4D8               	btfsc	status,2,c
  8282  0004BA  D775               	goto	l8968
  8283  0004BC  0A0F               	xorlw	15	; case 8
  8284  0004BE  B4D8               	btfsc	status,2,c
  8285  0004C0  D781               	goto	l8970
  8286  0004C2  0A01               	xorlw	1	; case 9
  8287  0004C4  B4D8               	btfsc	status,2,c
  8288  0004C6  D78D               	goto	l8972
  8289  0004C8  0A03               	xorlw	3	; case 10
  8290  0004CA  B4D8               	btfsc	status,2,c
  8291  0004CC  D799               	goto	l8974
  8292  0004CE  0A01               	xorlw	1	; case 11
  8293  0004D0  B4D8               	btfsc	status,2,c
  8294  0004D2  D7A5               	goto	l8976
  8295  0004D4  0A07               	xorlw	7	; case 12
  8296  0004D6  B4D8               	btfsc	status,2,c
  8297  0004D8  D7B1               	goto	l8978
  8298  0004DA  D7BF               	goto	l8980
  8299  0004DC                     l8986:
  8300                           
  8301                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8302  0004DC  0EBE               	movlw	low STR_21
  8303  0004DE  0100               	movlb	0	; () banked
  8304  0004E0  6F8E               	movwf	printf@f& (0+255),b
  8305  0004E2  0EFA               	movlw	high STR_21
  8306  0004E4  0100               	movlb	0	; () banked
  8307  0004E6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8308  0004E8  C108  F090         	movff	_log_startTime+8,?_printf+2
  8309  0004EC  C109  F091         	movff	_log_startTime+9,?_printf+3
  8310  0004F0  0ED6               	movlw	low UI@month
  8311  0004F2  0100               	movlb	0	; () banked
  8312  0004F4  6F92               	movwf	(?_printf+4)& (0+255),b
  8313  0004F6  0E00               	movlw	high UI@month
  8314  0004F8  0100               	movlb	0	; () banked
  8315  0004FA  6F93               	movwf	(?_printf+5)& (0+255),b
  8316  0004FC  C104  F094         	movff	_log_startTime+4,?_printf+6
  8317  000500  C105  F095         	movff	_log_startTime+5,?_printf+7
  8318  000504  C102  F096         	movff	_log_startTime+2,?_printf+8
  8319  000508  C103  F097         	movff	_log_startTime+3,?_printf+9
  8320  00050C  C100  F098         	movff	_log_startTime,?_printf+10
  8321  000510  C101  F099         	movff	_log_startTime+1,?_printf+11
  8322  000514  EC84  F00B         	call	_printf	;wreg free
  8323                           
  8324                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8325  000518  0E00               	movlw	0
  8326  00051A  0100               	movlb	0	; () banked
  8327  00051C  6FCC               	movwf	UI@i_431& (0+255),b
  8328  00051E                     l8990:
  8329                           
  8330                           ; BSR set to: 0
  8331  00051E  0E63               	movlw	99
  8332  000520  0100               	movlb	0	; () banked
  8333  000522  65CC               	cpfsgt	UI@i_431& (0+255),b
  8334  000524  D001               	goto	l8994
  8335  000526  D00C               	goto	l8998
  8336  000528                     l8994:
  8337                           
  8338                           ; BSR set to: 0
  8339  000528  0E68               	movlw	104
  8340  00052A  0100               	movlb	0	; () banked
  8341  00052C  6FC4               	movwf	??_UI& (0+255),b
  8342  00052E  0EE4               	movlw	228
  8343  000530                     u9647:
  8344  000530  2EE8               	decfsz	wreg,f,c
  8345  000532  D7FE               	bra	u9647
  8346  000534  2FC4               	decfsz	??_UI& (0+255),f,b
  8347  000536  D7FC               	bra	u9647
  8348  000538  F000               	nop	
  8349  00053A  0100               	movlb	0	; () banked
  8350  00053C  2BCC               	incf	UI@i_431& (0+255),f,b
  8351  00053E  D7EF               	goto	l8990
  8352  000540                     l8998:
  8353                           
  8354                           ; BSR set to: 0
  8355  000540  0100               	movlb	0	; () banked
  8356  000542  51F8               	movf	_logstate& (0+255),w,b
  8357  000544  0100               	movlb	0	; () banked
  8358  000546  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8359  000548  B4D8               	btfsc	status,2,c
  8360  00054A  0012               	return	
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8364                           
  8365                           ; BSR set to: 0
  8366                           
  8367                           ; BSR set to: 0
  8368  00054C  0E00               	movlw	0
  8369  00054E  0100               	movlb	0	; () banked
  8370  000550  6FCD               	movwf	UI@i_432& (0+255),b
  8371  000552                     l9004:
  8372                           
  8373                           ; BSR set to: 0
  8374  000552  0E63               	movlw	99
  8375  000554  0100               	movlb	0	; () banked
  8376  000556  65CD               	cpfsgt	UI@i_432& (0+255),b
  8377  000558  D001               	goto	l9008
  8378  00055A  D00C               	goto	l9012
  8379  00055C                     l9008:
  8380                           
  8381                           ; BSR set to: 0
  8382  00055C  0E68               	movlw	104
  8383  00055E  0100               	movlb	0	; () banked
  8384  000560  6FC4               	movwf	??_UI& (0+255),b
  8385  000562  0EE4               	movlw	228
  8386  000564                     u9657:
  8387  000564  2EE8               	decfsz	wreg,f,c
  8388  000566  D7FE               	bra	u9657
  8389  000568  2FC4               	decfsz	??_UI& (0+255),f,b
  8390  00056A  D7FC               	bra	u9657
  8391  00056C  F000               	nop	
  8392  00056E  0100               	movlb	0	; () banked
  8393  000570  2BCD               	incf	UI@i_432& (0+255),f,b
  8394  000572  D7EF               	goto	l9004
  8395  000574                     l9012:
  8396                           
  8397                           ; BSR set to: 0
  8398  000574  0100               	movlb	0	; () banked
  8399  000576  51F8               	movf	_logstate& (0+255),w,b
  8400  000578  0100               	movlb	0	; () banked
  8401  00057A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8402  00057C  B4D8               	btfsc	status,2,c
  8403  00057E  0012               	return	
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8407                           
  8408                           ; BSR set to: 0
  8409                           
  8410                           ; BSR set to: 0
  8411  000580  0E01               	movlw	1
  8412  000582  EC32  F02B         	call	_lcdInst
  8413  000586  0E68               	movlw	104
  8414  000588  0100               	movlb	0	; () banked
  8415  00058A  6FC4               	movwf	??_UI& (0+255),b
  8416  00058C  0EE4               	movlw	228
  8417  00058E                     u9667:
  8418  00058E  2EE8               	decfsz	wreg,f,c
  8419  000590  D7FE               	bra	u9667
  8420  000592  2FC4               	decfsz	??_UI& (0+255),f,b
  8421  000594  D7FC               	bra	u9667
  8422  000596  F000               	nop	
  8423                           
  8424                           ;UI.c: 176: lcdInst(0b10000000);;
  8425  000598  0E80               	movlw	128
  8426  00059A  EC32  F02B         	call	_lcdInst
  8427                           
  8428                           ;UI.c: 177: printf("DURATION:");
  8429  00059E  0E9A               	movlw	low STR_22
  8430  0005A0  0100               	movlb	0	; () banked
  8431  0005A2  6F8E               	movwf	printf@f& (0+255),b
  8432  0005A4  0EFF               	movlw	high STR_22
  8433  0005A6  0100               	movlb	0	; () banked
  8434  0005A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8435  0005AA  EC84  F00B         	call	_printf	;wreg free
  8436                           
  8437                           ;UI.c: 178: lcdInst(0b11000000);;
  8438  0005AE  0EC0               	movlw	192
  8439  0005B0  EC32  F02B         	call	_lcdInst
  8440                           
  8441                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8442  0005B4  0E0E               	movlw	14
  8443  0005B6  0100               	movlb	0	; () banked
  8444  0005B8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8445  0005BA  0E10               	movlw	16
  8446  0005BC  6F82               	movwf	___awmod@divisor& (0+255),b
  8447  0005BE  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8448  0005C2  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8449  0005C6  EC88  F023         	call	___awmod	;wreg free
  8450  0005CA  C080  F0C6         	movff	?___awmod,_UI$2419
  8451  0005CE  C081  F0C7         	movff	?___awmod+1,_UI$2419+1
  8452                           
  8453                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8454  0005D2  0E23               	movlw	low STR_23
  8455  0005D4  0100               	movlb	0	; () banked
  8456  0005D6  6F8E               	movwf	printf@f& (0+255),b
  8457  0005D8  0EFF               	movlw	high STR_23
  8458  0005DA  0100               	movlb	0	; () banked
  8459  0005DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8460  0005DE  0E0E               	movlw	14
  8461  0005E0  0100               	movlb	0	; () banked
  8462  0005E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8463  0005E4  0E10               	movlw	16
  8464  0005E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8465  0005E8  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  8466  0005EC  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8467  0005F0  EC88  F023         	call	___awmod	;wreg free
  8468  0005F4  C080  F086         	movff	?___awmod,___awdiv@dividend
  8469  0005F8  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8470  0005FC  0E00               	movlw	0
  8471  0005FE  0100               	movlb	0	; () banked
  8472  000600  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8473  000602  0E3C               	movlw	60
  8474  000604  6F88               	movwf	___awdiv@divisor& (0+255),b
  8475  000606  EC76  F022         	call	___awdiv	;wreg free
  8476  00060A  C086  F090         	movff	?___awdiv,?_printf+2
  8477  00060E  C087  F091         	movff	?___awdiv+1,?_printf+3
  8478  000612  C0C6  F080         	movff	_UI$2419,___awmod@dividend
  8479  000616  C0C7  F081         	movff	_UI$2419+1,___awmod@dividend+1
  8480  00061A  0E00               	movlw	0
  8481  00061C  0100               	movlb	0	; () banked
  8482  00061E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8483  000620  0E3C               	movlw	60
  8484  000622  6F82               	movwf	___awmod@divisor& (0+255),b
  8485  000624  EC88  F023         	call	___awmod	;wreg free
  8486  000628  C080  F092         	movff	?___awmod,?_printf+4
  8487  00062C  C081  F093         	movff	?___awmod+1,?_printf+5
  8488  000630  EC84  F00B         	call	_printf	;wreg free
  8489                           
  8490                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8491  000634  0E00               	movlw	0
  8492  000636  0100               	movlb	0	; () banked
  8493  000638  6FCE               	movwf	UI@i_435& (0+255),b
  8494  00063A                     l9032:
  8495                           
  8496                           ; BSR set to: 0
  8497  00063A  0E63               	movlw	99
  8498  00063C  0100               	movlb	0	; () banked
  8499  00063E  65CE               	cpfsgt	UI@i_435& (0+255),b
  8500  000640  D001               	goto	l9036
  8501  000642  D00C               	goto	l9040
  8502  000644                     l9036:
  8503                           
  8504                           ; BSR set to: 0
  8505  000644  0E68               	movlw	104
  8506  000646  0100               	movlb	0	; () banked
  8507  000648  6FC4               	movwf	??_UI& (0+255),b
  8508  00064A  0EE4               	movlw	228
  8509  00064C                     u9677:
  8510  00064C  2EE8               	decfsz	wreg,f,c
  8511  00064E  D7FE               	bra	u9677
  8512  000650  2FC4               	decfsz	??_UI& (0+255),f,b
  8513  000652  D7FC               	bra	u9677
  8514  000654  F000               	nop	
  8515  000656  0100               	movlb	0	; () banked
  8516  000658  2BCE               	incf	UI@i_435& (0+255),f,b
  8517  00065A  D7EF               	goto	l9032
  8518  00065C                     l9040:
  8519                           
  8520                           ; BSR set to: 0
  8521  00065C  0100               	movlb	0	; () banked
  8522  00065E  51F8               	movf	_logstate& (0+255),w,b
  8523  000660  0100               	movlb	0	; () banked
  8524  000662  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8525  000664  B4D8               	btfsc	status,2,c
  8526  000666  0012               	return	
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8530                           
  8531                           ; BSR set to: 0
  8532                           
  8533                           ; BSR set to: 0
  8534  000668  0E00               	movlw	0
  8535  00066A  0100               	movlb	0	; () banked
  8536  00066C  6FCF               	movwf	UI@i_436& (0+255),b
  8537  00066E                     l9046:
  8538                           
  8539                           ; BSR set to: 0
  8540  00066E  0E63               	movlw	99
  8541  000670  0100               	movlb	0	; () banked
  8542  000672  65CF               	cpfsgt	UI@i_436& (0+255),b
  8543  000674  D001               	goto	l9050
  8544  000676  D00C               	goto	l9054
  8545  000678                     l9050:
  8546                           
  8547                           ; BSR set to: 0
  8548  000678  0E68               	movlw	104
  8549  00067A  0100               	movlb	0	; () banked
  8550  00067C  6FC4               	movwf	??_UI& (0+255),b
  8551  00067E  0EE4               	movlw	228
  8552  000680                     u9687:
  8553  000680  2EE8               	decfsz	wreg,f,c
  8554  000682  D7FE               	bra	u9687
  8555  000684  2FC4               	decfsz	??_UI& (0+255),f,b
  8556  000686  D7FC               	bra	u9687
  8557  000688  F000               	nop	
  8558  00068A  0100               	movlb	0	; () banked
  8559  00068C  2BCF               	incf	UI@i_436& (0+255),f,b
  8560  00068E  D7EF               	goto	l9046
  8561  000690                     l9054:
  8562                           
  8563                           ; BSR set to: 0
  8564  000690  0100               	movlb	0	; () banked
  8565  000692  51F8               	movf	_logstate& (0+255),w,b
  8566  000694  0100               	movlb	0	; () banked
  8567  000696  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8568  000698  B4D8               	btfsc	status,2,c
  8569  00069A  0012               	return	
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8573                           
  8574                           ; BSR set to: 0
  8575                           
  8576                           ; BSR set to: 0
  8577  00069C  0E01               	movlw	1
  8578  00069E  EC32  F02B         	call	_lcdInst
  8579  0006A2  0E68               	movlw	104
  8580  0006A4  0100               	movlb	0	; () banked
  8581  0006A6  6FC4               	movwf	??_UI& (0+255),b
  8582  0006A8  0EE4               	movlw	228
  8583  0006AA                     u9697:
  8584  0006AA  2EE8               	decfsz	wreg,f,c
  8585  0006AC  D7FE               	bra	u9697
  8586  0006AE  2FC4               	decfsz	??_UI& (0+255),f,b
  8587  0006B0  D7FC               	bra	u9697
  8588  0006B2  F000               	nop	
  8589                           
  8590                           ;UI.c: 185: lcdInst(0b10000000);;
  8591  0006B4  0E80               	movlw	128
  8592  0006B6  EC32  F02B         	call	_lcdInst
  8593                           
  8594                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  8595  0006BA  0E46               	movlw	low STR_24
  8596  0006BC  0100               	movlb	0	; () banked
  8597  0006BE  6F8E               	movwf	printf@f& (0+255),b
  8598  0006C0  0EFD               	movlw	high STR_24
  8599  0006C2  0100               	movlb	0	; () banked
  8600  0006C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8601  0006C6  EC84  F00B         	call	_printf	;wreg free
  8602                           
  8603                           ;UI.c: 187: lcdInst(0b11000000);;
  8604  0006CA  0EC0               	movlw	192
  8605  0006CC  EC32  F02B         	call	_lcdInst
  8606                           
  8607                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8608  0006D0  0E23               	movlw	low STR_25
  8609  0006D2  0100               	movlb	0	; () banked
  8610  0006D4  6F8E               	movwf	printf@f& (0+255),b
  8611  0006D6  0EFE               	movlw	high STR_25
  8612  0006D8  0100               	movlb	0	; () banked
  8613  0006DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8614  0006DC  C065  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8615  0006E0  C066  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8616  0006E4  C067  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8617  0006E8  C068  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8618  0006EC  EC84  F00B         	call	_printf	;wreg free
  8619                           
  8620                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8621  0006F0  0E00               	movlw	0
  8622  0006F2  0100               	movlb	0	; () banked
  8623  0006F4  6FD0               	movwf	UI@i_439& (0+255),b
  8624  0006F6                     l9072:
  8625                           
  8626                           ; BSR set to: 0
  8627  0006F6  0E63               	movlw	99
  8628  0006F8  0100               	movlb	0	; () banked
  8629  0006FA  65D0               	cpfsgt	UI@i_439& (0+255),b
  8630  0006FC  D001               	goto	l9076
  8631  0006FE  D00C               	goto	l9080
  8632  000700                     l9076:
  8633                           
  8634                           ; BSR set to: 0
  8635  000700  0E68               	movlw	104
  8636  000702  0100               	movlb	0	; () banked
  8637  000704  6FC4               	movwf	??_UI& (0+255),b
  8638  000706  0EE4               	movlw	228
  8639  000708                     u9707:
  8640  000708  2EE8               	decfsz	wreg,f,c
  8641  00070A  D7FE               	bra	u9707
  8642  00070C  2FC4               	decfsz	??_UI& (0+255),f,b
  8643  00070E  D7FC               	bra	u9707
  8644  000710  F000               	nop	
  8645  000712  0100               	movlb	0	; () banked
  8646  000714  2BD0               	incf	UI@i_439& (0+255),f,b
  8647  000716  D7EF               	goto	l9072
  8648  000718                     l9080:
  8649                           
  8650                           ; BSR set to: 0
  8651  000718  0100               	movlb	0	; () banked
  8652  00071A  51F8               	movf	_logstate& (0+255),w,b
  8653  00071C  0100               	movlb	0	; () banked
  8654  00071E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8655  000720  B4D8               	btfsc	status,2,c
  8656  000722  0012               	return	
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8660                           
  8661                           ; BSR set to: 0
  8662                           
  8663                           ; BSR set to: 0
  8664  000724  0E00               	movlw	0
  8665  000726  0100               	movlb	0	; () banked
  8666  000728  6FD1               	movwf	UI@i_440& (0+255),b
  8667  00072A                     l9086:
  8668                           
  8669                           ; BSR set to: 0
  8670  00072A  0E63               	movlw	99
  8671  00072C  0100               	movlb	0	; () banked
  8672  00072E  65D1               	cpfsgt	UI@i_440& (0+255),b
  8673  000730  D001               	goto	l9090
  8674  000732  D00C               	goto	l9094
  8675  000734                     l9090:
  8676                           
  8677                           ; BSR set to: 0
  8678  000734  0E68               	movlw	104
  8679  000736  0100               	movlb	0	; () banked
  8680  000738  6FC4               	movwf	??_UI& (0+255),b
  8681  00073A  0EE4               	movlw	228
  8682  00073C                     u9717:
  8683  00073C  2EE8               	decfsz	wreg,f,c
  8684  00073E  D7FE               	bra	u9717
  8685  000740  2FC4               	decfsz	??_UI& (0+255),f,b
  8686  000742  D7FC               	bra	u9717
  8687  000744  F000               	nop	
  8688  000746  0100               	movlb	0	; () banked
  8689  000748  2BD1               	incf	UI@i_440& (0+255),f,b
  8690  00074A  D7EF               	goto	l9086
  8691  00074C                     l9094:
  8692                           
  8693                           ; BSR set to: 0
  8694  00074C  0100               	movlb	0	; () banked
  8695  00074E  51F8               	movf	_logstate& (0+255),w,b
  8696  000750  0100               	movlb	0	; () banked
  8697  000752  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8698  000754  B4D8               	btfsc	status,2,c
  8699  000756  0012               	return	
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  000758  0E01               	movlw	1
  8708  00075A  EC32  F02B         	call	_lcdInst
  8709  00075E  0E68               	movlw	104
  8710  000760  0100               	movlb	0	; () banked
  8711  000762  6FC4               	movwf	??_UI& (0+255),b
  8712  000764  0EE4               	movlw	228
  8713  000766                     u9727:
  8714  000766  2EE8               	decfsz	wreg,f,c
  8715  000768  D7FE               	bra	u9727
  8716  00076A  2FC4               	decfsz	??_UI& (0+255),f,b
  8717  00076C  D7FC               	bra	u9727
  8718  00076E  F000               	nop	
  8719                           
  8720                           ;UI.c: 194: lcdInst(0b10000000);;
  8721  000770  0E80               	movlw	128
  8722  000772  EC32  F02B         	call	_lcdInst
  8723                           
  8724                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  8725  000776  0E57               	movlw	low STR_26
  8726  000778  0100               	movlb	0	; () banked
  8727  00077A  6F8E               	movwf	printf@f& (0+255),b
  8728  00077C  0EFD               	movlw	high STR_26
  8729  00077E  0100               	movlb	0	; () banked
  8730  000780  6F8F               	movwf	(printf@f+1)& (0+255),b
  8731  000782  EC84  F00B         	call	_printf	;wreg free
  8732                           
  8733                           ;UI.c: 196: lcdInst(0b11000000);;
  8734  000786  0EC0               	movlw	192
  8735  000788  EC32  F02B         	call	_lcdInst
  8736                           
  8737                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8738  00078C  0E12               	movlw	low STR_27
  8739  00078E  0100               	movlb	0	; () banked
  8740  000790  6F8E               	movwf	printf@f& (0+255),b
  8741  000792  0EFE               	movlw	high STR_27
  8742  000794  0100               	movlb	0	; () banked
  8743  000796  6F8F               	movwf	(printf@f+1)& (0+255),b
  8744  000798  C13F  F090         	movff	_log_count_can_no_lab,?_printf+2
  8745  00079C  C140  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8746  0007A0  C141  F092         	movff	_log_count_can_w_lab,?_printf+4
  8747  0007A4  C142  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8748  0007A8  EC84  F00B         	call	_printf	;wreg free
  8749                           
  8750                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8751  0007AC  0E00               	movlw	0
  8752  0007AE  0100               	movlb	0	; () banked
  8753  0007B0  6FD2               	movwf	UI@i_443& (0+255),b
  8754  0007B2                     l9112:
  8755                           
  8756                           ; BSR set to: 0
  8757  0007B2  0E63               	movlw	99
  8758  0007B4  0100               	movlb	0	; () banked
  8759  0007B6  65D2               	cpfsgt	UI@i_443& (0+255),b
  8760  0007B8  D001               	goto	l9116
  8761  0007BA  D00C               	goto	l9120
  8762  0007BC                     l9116:
  8763                           
  8764                           ; BSR set to: 0
  8765  0007BC  0E68               	movlw	104
  8766  0007BE  0100               	movlb	0	; () banked
  8767  0007C0  6FC4               	movwf	??_UI& (0+255),b
  8768  0007C2  0EE4               	movlw	228
  8769  0007C4                     u9737:
  8770  0007C4  2EE8               	decfsz	wreg,f,c
  8771  0007C6  D7FE               	bra	u9737
  8772  0007C8  2FC4               	decfsz	??_UI& (0+255),f,b
  8773  0007CA  D7FC               	bra	u9737
  8774  0007CC  F000               	nop	
  8775  0007CE  0100               	movlb	0	; () banked
  8776  0007D0  2BD2               	incf	UI@i_443& (0+255),f,b
  8777  0007D2  D7EF               	goto	l9112
  8778  0007D4                     l9120:
  8779                           
  8780                           ; BSR set to: 0
  8781  0007D4  0100               	movlb	0	; () banked
  8782  0007D6  51F8               	movf	_logstate& (0+255),w,b
  8783  0007D8  0100               	movlb	0	; () banked
  8784  0007DA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8785  0007DC  B4D8               	btfsc	status,2,c
  8786  0007DE  0012               	return	
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8790                           
  8791                           ; BSR set to: 0
  8792                           
  8793                           ; BSR set to: 0
  8794  0007E0  0E00               	movlw	0
  8795  0007E2  0100               	movlb	0	; () banked
  8796  0007E4  6FD3               	movwf	UI@i_444& (0+255),b
  8797  0007E6                     l9126:
  8798                           
  8799                           ; BSR set to: 0
  8800  0007E6  0E63               	movlw	99
  8801  0007E8  0100               	movlb	0	; () banked
  8802  0007EA  65D3               	cpfsgt	UI@i_444& (0+255),b
  8803  0007EC  D001               	goto	l9130
  8804  0007EE  D00C               	goto	l9134
  8805  0007F0                     l9130:
  8806                           
  8807                           ; BSR set to: 0
  8808  0007F0  0E68               	movlw	104
  8809  0007F2  0100               	movlb	0	; () banked
  8810  0007F4  6FC4               	movwf	??_UI& (0+255),b
  8811  0007F6  0EE4               	movlw	228
  8812  0007F8                     u9747:
  8813  0007F8  2EE8               	decfsz	wreg,f,c
  8814  0007FA  D7FE               	bra	u9747
  8815  0007FC  2FC4               	decfsz	??_UI& (0+255),f,b
  8816  0007FE  D7FC               	bra	u9747
  8817  000800  F000               	nop	
  8818  000802  0100               	movlb	0	; () banked
  8819  000804  2BD3               	incf	UI@i_444& (0+255),f,b
  8820  000806  D7EF               	goto	l9126
  8821  000808                     l9134:
  8822                           
  8823                           ; BSR set to: 0
  8824  000808  0100               	movlb	0	; () banked
  8825  00080A  51F8               	movf	_logstate& (0+255),w,b
  8826  00080C  0100               	movlb	0	; () banked
  8827  00080E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8828  000810  B4D8               	btfsc	status,2,c
  8829  000812  0012               	return	
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8833                           
  8834                           ; BSR set to: 0
  8835                           
  8836                           ; BSR set to: 0
  8837  000814  0E01               	movlw	1
  8838  000816  EC32  F02B         	call	_lcdInst
  8839  00081A  0E68               	movlw	104
  8840  00081C  0100               	movlb	0	; () banked
  8841  00081E  6FC4               	movwf	??_UI& (0+255),b
  8842  000820  0EE4               	movlw	228
  8843  000822                     u9757:
  8844  000822  2EE8               	decfsz	wreg,f,c
  8845  000824  D7FE               	bra	u9757
  8846  000826  2FC4               	decfsz	??_UI& (0+255),f,b
  8847  000828  D7FC               	bra	u9757
  8848  00082A  F000               	nop	
  8849                           
  8850                           ;UI.c: 203: lcdInst(0b10000000);;
  8851  00082C  0E80               	movlw	128
  8852  00082E  EC32  F02B         	call	_lcdInst
  8853                           
  8854                           ;UI.c: 204: printf("-- TOTAL CANS --");
  8855  000832  0E68               	movlw	low STR_28
  8856  000834  0100               	movlb	0	; () banked
  8857  000836  6F8E               	movwf	printf@f& (0+255),b
  8858  000838  0EFD               	movlw	high STR_28
  8859  00083A  0100               	movlb	0	; () banked
  8860  00083C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8861  00083E  EC84  F00B         	call	_printf	;wreg free
  8862                           
  8863                           ;UI.c: 205: lcdInst(0b11000000);;
  8864  000842  0EC0               	movlw	192
  8865  000844  EC32  F02B         	call	_lcdInst
  8866                           
  8867                           ;UI.c: 206: printf("%d", log_count_total);
  8868  000848  0E20               	movlw	low (STR_27+14)
  8869  00084A  0100               	movlb	0	; () banked
  8870  00084C  6F8E               	movwf	printf@f& (0+255),b
  8871  00084E  0EFE               	movlw	high (STR_27+14)
  8872  000850  0100               	movlb	0	; () banked
  8873  000852  6F8F               	movwf	(printf@f+1)& (0+255),b
  8874  000854  C143  F090         	movff	_log_count_total,?_printf+2
  8875  000858  C144  F091         	movff	_log_count_total+1,?_printf+3
  8876  00085C  EC84  F00B         	call	_printf	;wreg free
  8877                           
  8878                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8879  000860  0E00               	movlw	0
  8880  000862  0100               	movlb	0	; () banked
  8881  000864  6FD4               	movwf	UI@i_447& (0+255),b
  8882  000866                     l9152:
  8883                           
  8884                           ; BSR set to: 0
  8885  000866  0E63               	movlw	99
  8886  000868  0100               	movlb	0	; () banked
  8887  00086A  65D4               	cpfsgt	UI@i_447& (0+255),b
  8888  00086C  D001               	goto	l9156
  8889  00086E  D00C               	goto	l9160
  8890  000870                     l9156:
  8891                           
  8892                           ; BSR set to: 0
  8893  000870  0E68               	movlw	104
  8894  000872  0100               	movlb	0	; () banked
  8895  000874  6FC4               	movwf	??_UI& (0+255),b
  8896  000876  0EE4               	movlw	228
  8897  000878                     u9767:
  8898  000878  2EE8               	decfsz	wreg,f,c
  8899  00087A  D7FE               	bra	u9767
  8900  00087C  2FC4               	decfsz	??_UI& (0+255),f,b
  8901  00087E  D7FC               	bra	u9767
  8902  000880  F000               	nop	
  8903  000882  0100               	movlb	0	; () banked
  8904  000884  2BD4               	incf	UI@i_447& (0+255),f,b
  8905  000886  D7EF               	goto	l9152
  8906  000888                     l9160:
  8907                           
  8908                           ; BSR set to: 0
  8909  000888  0100               	movlb	0	; () banked
  8910  00088A  51F8               	movf	_logstate& (0+255),w,b
  8911  00088C  0100               	movlb	0	; () banked
  8912  00088E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8913  000890  B4D8               	btfsc	status,2,c
  8914  000892  0012               	return	
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8918                           
  8919                           ; BSR set to: 0
  8920                           
  8921                           ; BSR set to: 0
  8922  000894  0E00               	movlw	0
  8923  000896  0100               	movlb	0	; () banked
  8924  000898  6FD5               	movwf	UI@i_448& (0+255),b
  8925  00089A                     l9166:
  8926                           
  8927                           ; BSR set to: 0
  8928  00089A  0E63               	movlw	99
  8929  00089C  0100               	movlb	0	; () banked
  8930  00089E  65D5               	cpfsgt	UI@i_448& (0+255),b
  8931  0008A0  D001               	goto	l9170
  8932  0008A2  D00C               	goto	l9174
  8933  0008A4                     l9170:
  8934                           
  8935                           ; BSR set to: 0
  8936  0008A4  0E68               	movlw	104
  8937  0008A6  0100               	movlb	0	; () banked
  8938  0008A8  6FC4               	movwf	??_UI& (0+255),b
  8939  0008AA  0EE4               	movlw	228
  8940  0008AC                     u9777:
  8941  0008AC  2EE8               	decfsz	wreg,f,c
  8942  0008AE  D7FE               	bra	u9777
  8943  0008B0  2FC4               	decfsz	??_UI& (0+255),f,b
  8944  0008B2  D7FC               	bra	u9777
  8945  0008B4  F000               	nop	
  8946  0008B6  0100               	movlb	0	; () banked
  8947  0008B8  2BD5               	incf	UI@i_448& (0+255),f,b
  8948  0008BA  D7EF               	goto	l9166
  8949  0008BC                     l9174:
  8950                           
  8951                           ; BSR set to: 0
  8952  0008BC  0100               	movlb	0	; () banked
  8953  0008BE  51F8               	movf	_logstate& (0+255),w,b
  8954  0008C0  0100               	movlb	0	; () banked
  8955  0008C2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8956  0008C4  B4D8               	btfsc	status,2,c
  8957  0008C6  0012               	return	
  8958  0008C8                     l9178:
  8959  0008C8  0100               	movlb	0	; () banked
  8960  0008CA  51F8               	movf	_logstate& (0+255),w,b
  8961  0008CC  0100               	movlb	0	; () banked
  8962  0008CE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8963  0008D0  B4D8               	btfsc	status,2,c
  8964  0008D2  0012               	return	
  8965  0008D4  D44C               	goto	l8874
  8966  0008D6                     __end_of_UI:
  8967                           	opt stack 0
  8968                           tblptru	equ	0xFF8
  8969                           tblptrh	equ	0xFF7
  8970                           tblptrl	equ	0xFF6
  8971                           tablat	equ	0xFF5
  8972                           prodh	equ	0xFF4
  8973                           prodl	equ	0xFF3
  8974                           intcon	equ	0xFF2
  8975                           intcon2	equ	0xFF1
  8976                           intcon3	equ	0xFF0
  8977                           postinc0	equ	0xFEE
  8978                           wreg	equ	0xFE8
  8979                           postdec1	equ	0xFE5
  8980                           fsr1l	equ	0xFE1
  8981                           indf2	equ	0xFDF
  8982                           postinc2	equ	0xFDE
  8983                           postdec2	equ	0xFDD
  8984                           fsr2h	equ	0xFDA
  8985                           fsr2l	equ	0xFD9
  8986                           status	equ	0xFD8
  8987                           
  8988 ;; *************** function _printRTC *****************
  8989 ;; Defined at:
  8990 ;;		line 63 in file "RTC.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;		None
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  i               2   66[BANK0 ] int 
  8995 ;;  INT_time       14   46[BANK0 ] int [7]
  8996 ;;  month           4   62[BANK0 ] unsigned char [4]
  8997 ;;  RTC_month       2   60[BANK0 ] int 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;                  1    wreg      void 
  9000 ;; Registers used:
  9001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;Total ram usage:       25 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:   10
  9014 ;; This function calls:
  9015 ;;		_getRTC
  9016 ;;		_lcdInst
  9017 ;;		_printf
  9018 ;;		_strcpy
  9019 ;; This function is called by:
  9020 ;;		_UI
  9021 ;;		_change_state_to_menu_start
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text23
  9026  0025A0                     __ptext23:
  9027                           	opt stack 0
  9028  0025A0                     _printRTC:
  9029                           	opt stack 18
  9030                           
  9031                           ;RTC.c: 64: getRTC();
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;incstack = 0
  9035  0025A0  EC1F  F024         	call	_getRTC	;wreg free
  9036                           
  9037                           ;RTC.c: 65: char month[] = "MMM";
  9038  0025A4  C14B  F0BE         	movff	printRTC@F3231,printRTC@month
  9039  0025A8  C14C  F0BF         	movff	printRTC@F3231+1,printRTC@month+1
  9040  0025AC  C14D  F0C0         	movff	printRTC@F3231+2,printRTC@month+2
  9041  0025B0  C14E  F0C1         	movff	printRTC@F3231+3,printRTC@month+3
  9042                           
  9043                           ;RTC.c: 66: int INT_time[7];
  9044                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  9045  0025B4  0E00               	movlw	0
  9046  0025B6  0100               	movlb	0	; () banked
  9047  0025B8  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  9048  0025BA  0E00               	movlw	0
  9049  0025BC  6FC2               	movwf	printRTC@i& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052  0025BE  0100               	movlb	0	; () banked
  9053  0025C0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9054  0025C2  D008               	goto	l6854
  9055  0025C4  0100               	movlb	0	; () banked
  9056  0025C6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9057  0025C8  E146               	bnz	l618
  9058  0025CA  0E07               	movlw	7
  9059  0025CC  0100               	movlb	0	; () banked
  9060  0025CE  5DC2               	subwf	printRTC@i& (0+255),w,b
  9061  0025D0  B0D8               	btfsc	status,0,c
  9062  0025D2  D041               	goto	l618
  9063  0025D4                     l6854:
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9067  0025D4  0E1C               	movlw	low _time
  9068  0025D6  0100               	movlb	0	; () banked
  9069  0025D8  25C2               	addwf	printRTC@i& (0+255),w,b
  9070  0025DA  6ED9               	movwf	fsr2l,c
  9071  0025DC  0E01               	movlw	high _time
  9072  0025DE  0100               	movlb	0	; () banked
  9073  0025E0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9074  0025E2  6EDA               	movwf	fsr2h,c
  9075  0025E4  50DF               	movf	indf2,w,c
  9076  0025E6  0100               	movlb	0	; () banked
  9077  0025E8  6FAB               	movwf	??_printRTC& (0+255),b
  9078  0025EA  0100               	movlb	0	; () banked
  9079  0025EC  3BAB               	swapf	??_printRTC& (0+255),f,b
  9080  0025EE  0E0F               	movlw	15
  9081  0025F0  17AB               	andwf	??_printRTC& (0+255),f,b
  9082  0025F2  0E0F               	movlw	15
  9083  0025F4  0100               	movlb	0	; () banked
  9084  0025F6  17AB               	andwf	??_printRTC& (0+255),f,b
  9085  0025F8  0100               	movlb	0	; () banked
  9086  0025FA  51AB               	movf	??_printRTC& (0+255),w,b
  9087  0025FC  0D0A               	mullw	10
  9088  0025FE  0E1C               	movlw	low _time
  9089  002600  0100               	movlb	0	; () banked
  9090  002602  25C2               	addwf	printRTC@i& (0+255),w,b
  9091  002604  6ED9               	movwf	fsr2l,c
  9092  002606  0E01               	movlw	high _time
  9093  002608  0100               	movlb	0	; () banked
  9094  00260A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  9095  00260C  6EDA               	movwf	fsr2h,c
  9096  00260E  50DF               	movf	indf2,w,c
  9097  002610  0B0F               	andlw	15
  9098  002612  0100               	movlb	0	; () banked
  9099  002614  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  9100  002616  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  9101  002618  50F3               	movf	prodl,w,c
  9102  00261A  0100               	movlb	0	; () banked
  9103  00261C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  9104  00261E  50F4               	movf	prodh,w,c
  9105  002620  0100               	movlb	0	; () banked
  9106  002622  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  9107  002624  90D8               	bcf	status,0,c
  9108  002626  0100               	movlb	0	; () banked
  9109  002628  35C2               	rlcf	printRTC@i& (0+255),w,b
  9110  00262A  6ED9               	movwf	fsr2l,c
  9111  00262C  0100               	movlb	0	; () banked
  9112  00262E  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  9113  002630  6EDA               	movwf	fsr2h,c
  9114  002632  0EAE               	movlw	low printRTC@INT_time
  9115  002634  26D9               	addwf	fsr2l,f,c
  9116  002636  0E00               	movlw	high printRTC@INT_time
  9117  002638  22DA               	addwfc	fsr2h,f,c
  9118  00263A  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  9119  00263E  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  9120                           
  9121                           ; BSR set to: 0
  9122  002642  0100               	movlb	0	; () banked
  9123  002644  4BC2               	infsnz	printRTC@i& (0+255),f,b
  9124  002646  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  9125                           
  9126                           ; BSR set to: 0
  9127  002648  0100               	movlb	0	; () banked
  9128  00264A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  9129  00264C  D7C3               	goto	l6854
  9130  00264E  0100               	movlb	0	; () banked
  9131  002650  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  9132  002652  E101               	bnz	u5520
  9133  002654  D7BA               	goto	L11
  9134  002656                     u5520:
  9135  002656                     l618:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;RTC.c: 69: }
  9139                           ;RTC.c: 70: int RTC_month = INT_time[5];
  9140  002656  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  9141  00265A  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  9142                           
  9143                           ;RTC.c: 72: switch(RTC_month){
  9144  00265E  D0B4               	goto	l6886
  9145  002660                     l6860:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;RTC.c: 74: strcpy(month, "JAN");
  9149  002660  0EBE               	movlw	low printRTC@month
  9150  002662  0100               	movlb	0	; () banked
  9151  002664  6F80               	movwf	strcpy@to& (0+255),b
  9152  002666  0E00               	movlw	high printRTC@month
  9153  002668  0100               	movlb	0	; () banked
  9154  00266A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9155  00266C  0EDA               	movlw	low STR_8
  9156  00266E  0100               	movlb	0	; () banked
  9157  002670  6F82               	movwf	strcpy@from& (0+255),b
  9158  002672  0EFF               	movlw	high STR_8
  9159  002674  0100               	movlb	0	; () banked
  9160  002676  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9161  002678  EC8C  F028         	call	_strcpy	;wreg free
  9162                           
  9163                           ;RTC.c: 75: break;
  9164  00267C  D0D4               	goto	l6888
  9165  00267E                     l6862:
  9166                           
  9167                           ;RTC.c: 77: strcpy(month, "FEB");
  9168  00267E  0EBE               	movlw	low printRTC@month
  9169  002680  0100               	movlb	0	; () banked
  9170  002682  6F80               	movwf	strcpy@to& (0+255),b
  9171  002684  0E00               	movlw	high printRTC@month
  9172  002686  0100               	movlb	0	; () banked
  9173  002688  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9174  00268A  0ECA               	movlw	low STR_9
  9175  00268C  0100               	movlb	0	; () banked
  9176  00268E  6F82               	movwf	strcpy@from& (0+255),b
  9177  002690  0EFF               	movlw	high STR_9
  9178  002692  0100               	movlb	0	; () banked
  9179  002694  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9180  002696  EC8C  F028         	call	_strcpy	;wreg free
  9181                           
  9182                           ;RTC.c: 78: break;
  9183  00269A  D0C5               	goto	l6888
  9184  00269C                     l6864:
  9185                           
  9186                           ;RTC.c: 80: strcpy(month, "MAR");
  9187  00269C  0EBE               	movlw	low printRTC@month
  9188  00269E  0100               	movlb	0	; () banked
  9189  0026A0  6F80               	movwf	strcpy@to& (0+255),b
  9190  0026A2  0E00               	movlw	high printRTC@month
  9191  0026A4  0100               	movlb	0	; () banked
  9192  0026A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9193  0026A8  0EE6               	movlw	low STR_10
  9194  0026AA  0100               	movlb	0	; () banked
  9195  0026AC  6F82               	movwf	strcpy@from& (0+255),b
  9196  0026AE  0EFF               	movlw	high STR_10
  9197  0026B0  0100               	movlb	0	; () banked
  9198  0026B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9199  0026B4  EC8C  F028         	call	_strcpy	;wreg free
  9200                           
  9201                           ;RTC.c: 81: break;
  9202  0026B8  D0B6               	goto	l6888
  9203  0026BA                     l6866:
  9204                           
  9205                           ;RTC.c: 83: strcpy(month, "APR");
  9206  0026BA  0EBE               	movlw	low printRTC@month
  9207  0026BC  0100               	movlb	0	; () banked
  9208  0026BE  6F80               	movwf	strcpy@to& (0+255),b
  9209  0026C0  0E00               	movlw	high printRTC@month
  9210  0026C2  0100               	movlb	0	; () banked
  9211  0026C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9212  0026C6  0EEA               	movlw	low STR_11
  9213  0026C8  0100               	movlb	0	; () banked
  9214  0026CA  6F82               	movwf	strcpy@from& (0+255),b
  9215  0026CC  0EFF               	movlw	high STR_11
  9216  0026CE  0100               	movlb	0	; () banked
  9217  0026D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9218  0026D2  EC8C  F028         	call	_strcpy	;wreg free
  9219                           
  9220                           ;RTC.c: 84: break;
  9221  0026D6  D0A7               	goto	l6888
  9222  0026D8                     l6868:
  9223                           
  9224                           ;RTC.c: 86: strcpy(month, "MAY");
  9225  0026D8  0EBE               	movlw	low printRTC@month
  9226  0026DA  0100               	movlb	0	; () banked
  9227  0026DC  6F80               	movwf	strcpy@to& (0+255),b
  9228  0026DE  0E00               	movlw	high printRTC@month
  9229  0026E0  0100               	movlb	0	; () banked
  9230  0026E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9231  0026E4  0EFA               	movlw	low STR_12
  9232  0026E6  0100               	movlb	0	; () banked
  9233  0026E8  6F82               	movwf	strcpy@from& (0+255),b
  9234  0026EA  0EFF               	movlw	high STR_12
  9235  0026EC  0100               	movlb	0	; () banked
  9236  0026EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9237  0026F0  EC8C  F028         	call	_strcpy	;wreg free
  9238                           
  9239                           ;RTC.c: 87: break;
  9240  0026F4  D098               	goto	l6888
  9241  0026F6                     l6870:
  9242                           
  9243                           ;RTC.c: 89: strcpy(month, "JUN");
  9244  0026F6  0EBE               	movlw	low printRTC@month
  9245  0026F8  0100               	movlb	0	; () banked
  9246  0026FA  6F80               	movwf	strcpy@to& (0+255),b
  9247  0026FC  0E00               	movlw	high printRTC@month
  9248  0026FE  0100               	movlb	0	; () banked
  9249  002700  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9250  002702  0EDE               	movlw	low STR_13
  9251  002704  0100               	movlb	0	; () banked
  9252  002706  6F82               	movwf	strcpy@from& (0+255),b
  9253  002708  0EFF               	movlw	high STR_13
  9254  00270A  0100               	movlb	0	; () banked
  9255  00270C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9256  00270E  EC8C  F028         	call	_strcpy	;wreg free
  9257                           
  9258                           ;RTC.c: 90: break;
  9259  002712  D089               	goto	l6888
  9260  002714                     l6872:
  9261                           
  9262                           ;RTC.c: 92: strcpy(month, "JUL");
  9263  002714  0EBE               	movlw	low printRTC@month
  9264  002716  0100               	movlb	0	; () banked
  9265  002718  6F80               	movwf	strcpy@to& (0+255),b
  9266  00271A  0E00               	movlw	high printRTC@month
  9267  00271C  0100               	movlb	0	; () banked
  9268  00271E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9269  002720  0ED6               	movlw	low STR_14
  9270  002722  0100               	movlb	0	; () banked
  9271  002724  6F82               	movwf	strcpy@from& (0+255),b
  9272  002726  0EFF               	movlw	high STR_14
  9273  002728  0100               	movlb	0	; () banked
  9274  00272A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9275  00272C  EC8C  F028         	call	_strcpy	;wreg free
  9276                           
  9277                           ;RTC.c: 93: break;
  9278  002730  D07A               	goto	l6888
  9279  002732                     l6874:
  9280                           
  9281                           ;RTC.c: 95: strcpy(month, "AUG");
  9282  002732  0EBE               	movlw	low printRTC@month
  9283  002734  0100               	movlb	0	; () banked
  9284  002736  6F80               	movwf	strcpy@to& (0+255),b
  9285  002738  0E00               	movlw	high printRTC@month
  9286  00273A  0100               	movlb	0	; () banked
  9287  00273C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9288  00273E  0ED2               	movlw	low STR_15
  9289  002740  0100               	movlb	0	; () banked
  9290  002742  6F82               	movwf	strcpy@from& (0+255),b
  9291  002744  0EFF               	movlw	high STR_15
  9292  002746  0100               	movlb	0	; () banked
  9293  002748  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9294  00274A  EC8C  F028         	call	_strcpy	;wreg free
  9295                           
  9296                           ;RTC.c: 96: break;
  9297  00274E  D06B               	goto	l6888
  9298  002750                     l6876:
  9299                           
  9300                           ;RTC.c: 98: strcpy(month, "SEP");
  9301  002750  0EBE               	movlw	low printRTC@month
  9302  002752  0100               	movlb	0	; () banked
  9303  002754  6F80               	movwf	strcpy@to& (0+255),b
  9304  002756  0E00               	movlw	high printRTC@month
  9305  002758  0100               	movlb	0	; () banked
  9306  00275A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9307  00275C  0EE2               	movlw	low STR_16
  9308  00275E  0100               	movlb	0	; () banked
  9309  002760  6F82               	movwf	strcpy@from& (0+255),b
  9310  002762  0EFF               	movlw	high STR_16
  9311  002764  0100               	movlb	0	; () banked
  9312  002766  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9313  002768  EC8C  F028         	call	_strcpy	;wreg free
  9314                           
  9315                           ;RTC.c: 99: break;
  9316  00276C  D05C               	goto	l6888
  9317  00276E                     l6878:
  9318                           
  9319                           ;RTC.c: 101: strcpy(month, "OCT");
  9320  00276E  0EBE               	movlw	low printRTC@month
  9321  002770  0100               	movlb	0	; () banked
  9322  002772  6F80               	movwf	strcpy@to& (0+255),b
  9323  002774  0E00               	movlw	high printRTC@month
  9324  002776  0100               	movlb	0	; () banked
  9325  002778  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9326  00277A  0EF2               	movlw	low STR_17
  9327  00277C  0100               	movlb	0	; () banked
  9328  00277E  6F82               	movwf	strcpy@from& (0+255),b
  9329  002780  0EFF               	movlw	high STR_17
  9330  002782  0100               	movlb	0	; () banked
  9331  002784  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9332  002786  EC8C  F028         	call	_strcpy	;wreg free
  9333                           
  9334                           ;RTC.c: 102: break;
  9335  00278A  D04D               	goto	l6888
  9336  00278C                     l6880:
  9337                           
  9338                           ;RTC.c: 104: strcpy(month, "NOV");
  9339  00278C  0EBE               	movlw	low printRTC@month
  9340  00278E  0100               	movlb	0	; () banked
  9341  002790  6F80               	movwf	strcpy@to& (0+255),b
  9342  002792  0E00               	movlw	high printRTC@month
  9343  002794  0100               	movlb	0	; () banked
  9344  002796  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9345  002798  0EF6               	movlw	low STR_18
  9346  00279A  0100               	movlb	0	; () banked
  9347  00279C  6F82               	movwf	strcpy@from& (0+255),b
  9348  00279E  0EFF               	movlw	high STR_18
  9349  0027A0  0100               	movlb	0	; () banked
  9350  0027A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9351  0027A4  EC8C  F028         	call	_strcpy	;wreg free
  9352                           
  9353                           ;RTC.c: 105: break;
  9354  0027A8  D03E               	goto	l6888
  9355  0027AA                     l6882:
  9356                           
  9357                           ;RTC.c: 107: strcpy(month, "DEC");
  9358  0027AA  0EBE               	movlw	low printRTC@month
  9359  0027AC  0100               	movlb	0	; () banked
  9360  0027AE  6F80               	movwf	strcpy@to& (0+255),b
  9361  0027B0  0E00               	movlw	high printRTC@month
  9362  0027B2  0100               	movlb	0	; () banked
  9363  0027B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9364  0027B6  0ECE               	movlw	low STR_19
  9365  0027B8  0100               	movlb	0	; () banked
  9366  0027BA  6F82               	movwf	strcpy@from& (0+255),b
  9367  0027BC  0EFF               	movlw	high STR_19
  9368  0027BE  0100               	movlb	0	; () banked
  9369  0027C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9370  0027C2  EC8C  F028         	call	_strcpy	;wreg free
  9371                           
  9372                           ;RTC.c: 109: }
  9373                           
  9374                           ;RTC.c: 108: break;
  9375  0027C6  D02F               	goto	l6888
  9376  0027C8                     l6886:
  9377  0027C8  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9378  0027CC  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9379                           
  9380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9381                           ; Switch size 1, requested type "space"
  9382                           ; Number of cases is 1, Range of values is 0 to 0
  9383                           ; switch strategies available:
  9384                           ; Name         Instructions Cycles
  9385                           ; simple_byte            4     3 (average)
  9386                           ;	Chosen strategy is simple_byte
  9387  0027D0  0100               	movlb	0	; () banked
  9388  0027D2  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9389  0027D4  0A00               	xorlw	0	; case 0
  9390  0027D6  A4D8               	btfss	status,2,c
  9391  0027D8  D026               	goto	l6888
  9392                           
  9393                           ; BSR set to: 0
  9394                           ; Switch size 1, requested type "space"
  9395                           ; Number of cases is 12, Range of values is 1 to 12
  9396                           ; switch strategies available:
  9397                           ; Name         Instructions Cycles
  9398                           ; simple_byte           37    19 (average)
  9399                           ;	Chosen strategy is simple_byte
  9400  0027DA  0100               	movlb	0	; () banked
  9401  0027DC  51AB               	movf	??_printRTC& (0+255),w,b
  9402  0027DE  0A01               	xorlw	1	; case 1
  9403  0027E0  B4D8               	btfsc	status,2,c
  9404  0027E2  D73E               	goto	l6860
  9405  0027E4  0A03               	xorlw	3	; case 2
  9406  0027E6  B4D8               	btfsc	status,2,c
  9407  0027E8  D74A               	goto	l6862
  9408  0027EA  0A01               	xorlw	1	; case 3
  9409  0027EC  B4D8               	btfsc	status,2,c
  9410  0027EE  D756               	goto	l6864
  9411  0027F0  0A07               	xorlw	7	; case 4
  9412  0027F2  B4D8               	btfsc	status,2,c
  9413  0027F4  D762               	goto	l6866
  9414  0027F6  0A01               	xorlw	1	; case 5
  9415  0027F8  B4D8               	btfsc	status,2,c
  9416  0027FA  D76E               	goto	l6868
  9417  0027FC  0A03               	xorlw	3	; case 6
  9418  0027FE  B4D8               	btfsc	status,2,c
  9419  002800  D77A               	goto	l6870
  9420  002802  0A01               	xorlw	1	; case 7
  9421  002804  B4D8               	btfsc	status,2,c
  9422  002806  D786               	goto	l6872
  9423  002808  0A0F               	xorlw	15	; case 8
  9424  00280A  B4D8               	btfsc	status,2,c
  9425  00280C  D792               	goto	l6874
  9426  00280E  0A01               	xorlw	1	; case 9
  9427  002810  B4D8               	btfsc	status,2,c
  9428  002812  D79E               	goto	l6876
  9429  002814  0A03               	xorlw	3	; case 10
  9430  002816  B4D8               	btfsc	status,2,c
  9431  002818  D7AA               	goto	l6878
  9432  00281A  0A01               	xorlw	1	; case 11
  9433  00281C  B4D8               	btfsc	status,2,c
  9434  00281E  D7B6               	goto	l6880
  9435  002820  0A07               	xorlw	7	; case 12
  9436  002822  B4D8               	btfsc	status,2,c
  9437  002824  D7C2               	goto	l6882
  9438  002826                     l6888:
  9439                           
  9440                           ;RTC.c: 110: lcdInst(0b10000000);;
  9441  002826  0E80               	movlw	128
  9442  002828  EC32  F02B         	call	_lcdInst
  9443                           
  9444                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9445  00282C  0EBE               	movlw	low STR_21
  9446  00282E  0100               	movlb	0	; () banked
  9447  002830  6F8E               	movwf	printf@f& (0+255),b
  9448  002832  0EFA               	movlw	high STR_21
  9449  002834  0100               	movlb	0	; () banked
  9450  002836  6F8F               	movwf	(printf@f+1)& (0+255),b
  9451  002838  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9452  00283C  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9453  002840  0EBE               	movlw	low printRTC@month
  9454  002842  0100               	movlb	0	; () banked
  9455  002844  6F92               	movwf	(?_printf+4)& (0+255),b
  9456  002846  0E00               	movlw	high printRTC@month
  9457  002848  0100               	movlb	0	; () banked
  9458  00284A  6F93               	movwf	(?_printf+5)& (0+255),b
  9459  00284C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9460  002850  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9461  002854  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9462  002858  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9463  00285C  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9464  002860  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9465  002864  EC84  F00B         	call	_printf	;wreg free
  9466  002868  0012               	return		;funcret
  9467  00286A                     __end_of_printRTC:
  9468                           	opt stack 0
  9469                           tblptru	equ	0xFF8
  9470                           tblptrh	equ	0xFF7
  9471                           tblptrl	equ	0xFF6
  9472                           tablat	equ	0xFF5
  9473                           prodh	equ	0xFF4
  9474                           prodl	equ	0xFF3
  9475                           intcon	equ	0xFF2
  9476                           intcon2	equ	0xFF1
  9477                           intcon3	equ	0xFF0
  9478                           postinc0	equ	0xFEE
  9479                           wreg	equ	0xFE8
  9480                           postdec1	equ	0xFE5
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           fsr2h	equ	0xFDA
  9486                           fsr2l	equ	0xFD9
  9487                           status	equ	0xFD8
  9488                           
  9489 ;; *************** function _strcpy *****************
  9490 ;; Defined at:
  9491 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9494 ;;		 -> printRTC@month(4), UI@month(4), 
  9495 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9496 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9497 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9498 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9499 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9500 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9501 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9502 ;;		 -> STR_8(4), 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9505 ;;		 -> printRTC@month(4), UI@month(4), 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  2    0[BANK0 ] PTR unsigned char 
  9508 ;; Registers used:
  9509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        6 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    7
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_UI
  9526 ;;		_printRTC
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text24
  9531  005118                     __ptext24:
  9532                           	opt stack 0
  9533  005118                     _strcpy:
  9534                           	opt stack 20
  9535                           
  9536                           ;incstack = 0
  9537  005118  C080  F084         	movff	strcpy@to,strcpy@cp
  9538  00511C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9539  005120  D006               	goto	l6594
  9540  005122                     l6592:
  9541  005122  0100               	movlb	0	; () banked
  9542  005124  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9543  005126  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9544  005128  0100               	movlb	0	; () banked
  9545  00512A  4B82               	infsnz	strcpy@from& (0+255),f,b
  9546  00512C  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9547  00512E                     l6594:
  9548  00512E  C082  FFF6         	movff	strcpy@from,tblptrl
  9549  005132  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9550  005136                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9551  005136  6AF8               	clrf	tblptru,c
  9552  005138                     	endif
  9553  005138                     	if	0	;tblptru may be non-zero
  9554  005138                     	endif
  9555  005138  C084  FFD9         	movff	strcpy@cp,fsr2l
  9556  00513C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9557  005140  0008               	tblrd		*
  9558  005142  CFF5 FFDF          	movff	tablat,indf2
  9559  005146  50DF               	movf	indf2,w,c
  9560  005148  B4D8               	btfsc	status,2,c
  9561  00514A  0012               	return	
  9562  00514C  D7EA               	goto	l6592
  9563  00514E                     __end_of_strcpy:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           intcon3	equ	0xFF0
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           postdec1	equ	0xFE5
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _getRTC *****************
  9586 ;; Defined at:
  9587 ;;		line 44 in file "RTC.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  i               2    3[BANK0 ] int 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;Total ram usage:        2 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    9
  9608 ;; This function calls:
  9609 ;;		_I2C_Master_Read
  9610 ;;		_I2C_Master_Start
  9611 ;;		_I2C_Master_Stop
  9612 ;;		_I2C_Master_Write
  9613 ;; This function is called by:
  9614 ;;		_printRTC
  9615 ;;		_initSortTimer
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text25
  9620  00483E                     __ptext25:
  9621                           	opt stack 0
  9622  00483E                     _getRTC:
  9623                           	opt stack 18
  9624                           
  9625                           ;RTC.c: 48: I2C_Master_Start();
  9626                           
  9627                           ;incstack = 0
  9628  00483E  EC58  F02B         	call	_I2C_Master_Start	;wreg free
  9629                           
  9630                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9631  004842  0E00               	movlw	0
  9632  004844  0100               	movlb	0	; () banked
  9633  004846  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9634  004848  0ED0               	movlw	208
  9635  00484A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9636  00484C  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  9637                           
  9638                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9639  004850  0E00               	movlw	0
  9640  004852  0100               	movlb	0	; () banked
  9641  004854  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9642  004856  0E00               	movlw	0
  9643  004858  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9644  00485A  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  9645                           
  9646                           ;RTC.c: 51: I2C_Master_Stop();
  9647  00485E  EC54  F02B         	call	_I2C_Master_Stop	;wreg free
  9648                           
  9649                           ;RTC.c: 54: I2C_Master_Start();
  9650  004862  EC58  F02B         	call	_I2C_Master_Start	;wreg free
  9651                           
  9652                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9653  004866  0E00               	movlw	0
  9654  004868  0100               	movlb	0	; () banked
  9655  00486A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9656  00486C  0ED1               	movlw	209
  9657  00486E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9658  004870  EC46  F02B         	call	_I2C_Master_Write	;wreg free
  9659                           
  9660                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9661  004874  0E00               	movlw	0
  9662  004876  0100               	movlb	0	; () banked
  9663  004878  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9664  00487A  0E00               	movlw	0
  9665  00487C  6F83               	movwf	getRTC@i& (0+255),b
  9666  00487E                     l6600:
  9667                           
  9668                           ; BSR set to: 0
  9669  00487E  0100               	movlb	0	; () banked
  9670  004880  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9671  004882  D008               	goto	l6604
  9672  004884  0100               	movlb	0	; () banked
  9673  004886  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9674  004888  E115               	bnz	l6610
  9675  00488A  0E06               	movlw	6
  9676  00488C  0100               	movlb	0	; () banked
  9677  00488E  5D83               	subwf	getRTC@i& (0+255),w,b
  9678  004890  B0D8               	btfsc	status,0,c
  9679  004892  D010               	goto	l6610
  9680  004894                     l6604:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9684  004894  0E1C               	movlw	low _time
  9685  004896  0100               	movlb	0	; () banked
  9686  004898  2583               	addwf	getRTC@i& (0+255),w,b
  9687  00489A  6ED9               	movwf	fsr2l,c
  9688  00489C  0E01               	movlw	high _time
  9689  00489E  0100               	movlb	0	; () banked
  9690  0048A0  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9691  0048A2  6EDA               	movwf	fsr2h,c
  9692  0048A4  0E01               	movlw	1
  9693  0048A6  ECE4  F029         	call	_I2C_Master_Read
  9694  0048AA  6EDF               	movwf	indf2,c
  9695  0048AC  0100               	movlb	0	; () banked
  9696  0048AE  4B83               	infsnz	getRTC@i& (0+255),f,b
  9697  0048B0  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9698  0048B2  D7E5               	goto	l6600
  9699  0048B4                     l6610:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;RTC.c: 58: }
  9703                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9704  0048B4  0E00               	movlw	0
  9705  0048B6  ECE4  F029         	call	_I2C_Master_Read
  9706  0048BA  0101               	movlb	1	; () banked
  9707  0048BC  6F22               	movwf	(_time+6)& (0+255),b
  9708                           
  9709                           ;RTC.c: 60: I2C_Master_Stop();
  9710  0048BE  EC54  F02B         	call	_I2C_Master_Stop	;wreg free
  9711  0048C2  0012               	return		;funcret
  9712  0048C4                     __end_of_getRTC:
  9713                           	opt stack 0
  9714                           tblptru	equ	0xFF8
  9715                           tblptrh	equ	0xFF7
  9716                           tblptrl	equ	0xFF6
  9717                           tablat	equ	0xFF5
  9718                           prodh	equ	0xFF4
  9719                           prodl	equ	0xFF3
  9720                           intcon	equ	0xFF2
  9721                           intcon2	equ	0xFF1
  9722                           intcon3	equ	0xFF0
  9723                           postinc0	equ	0xFEE
  9724                           wreg	equ	0xFE8
  9725                           postdec1	equ	0xFE5
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _I2C_Master_Write *****************
  9735 ;; Defined at:
  9736 ;;		line 49 in file "I2C.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  d               2    1[BANK0 ] unsigned int 
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      void 
  9743 ;; Registers used:
  9744 ;;		wreg, status,2, status,0, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;Total ram usage:        2 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    8
  9757 ;; This function calls:
  9758 ;;		_I2C_Master_Wait
  9759 ;; This function is called by:
  9760 ;;		_loadRTC
  9761 ;;		_getRTC
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           	psect	text26
  9766  00568C                     __ptext26:
  9767                           	opt stack 0
  9768  00568C                     _I2C_Master_Write:
  9769                           	opt stack 18
  9770                           
  9771                           ;I2C.c: 51: I2C_Master_Wait();
  9772                           
  9773                           ;incstack = 0
  9774  00568C  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9775                           
  9776                           ;I2C.c: 52: SSPBUF = d;
  9777  005690  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9778  005694  0012               	return		;funcret
  9779  005696                     __end_of_I2C_Master_Write:
  9780                           	opt stack 0
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           intcon	equ	0xFF2
  9788                           intcon2	equ	0xFF1
  9789                           intcon3	equ	0xFF0
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           postdec1	equ	0xFE5
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _I2C_Master_Stop *****************
  9802 ;; Defined at:
  9803 ;;		line 43 in file "I2C.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;		None
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  1    wreg      void 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0, cstack
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;Total ram usage:        0 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    8
  9824 ;; This function calls:
  9825 ;;		_I2C_Master_Wait
  9826 ;; This function is called by:
  9827 ;;		_loadRTC
  9828 ;;		_getRTC
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           	psect	text27
  9833  0056A8                     __ptext27:
  9834                           	opt stack 0
  9835  0056A8                     _I2C_Master_Stop:
  9836                           	opt stack 18
  9837                           
  9838                           ;I2C.c: 45: I2C_Master_Wait();
  9839                           
  9840                           ;incstack = 0
  9841  0056A8  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9842                           
  9843                           ;I2C.c: 46: PEN = 1;
  9844  0056AC  84C5               	bsf	4037,2,c	;volatile
  9845  0056AE  0012               	return		;funcret
  9846  0056B0                     __end_of_I2C_Master_Stop:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           intcon2	equ	0xFF1
  9856                           intcon3	equ	0xFF0
  9857                           postinc0	equ	0xFEE
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _I2C_Master_Start *****************
  9869 ;; Defined at:
  9870 ;;		line 31 in file "I2C.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      void 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    8
  9891 ;; This function calls:
  9892 ;;		_I2C_Master_Wait
  9893 ;; This function is called by:
  9894 ;;		_loadRTC
  9895 ;;		_getRTC
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text28
  9900  0056B0                     __ptext28:
  9901                           	opt stack 0
  9902  0056B0                     _I2C_Master_Start:
  9903                           	opt stack 18
  9904                           
  9905                           ;I2C.c: 33: I2C_Master_Wait();
  9906                           
  9907                           ;incstack = 0
  9908  0056B0  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9909                           
  9910                           ;I2C.c: 34: SEN = 1;
  9911  0056B4  80C5               	bsf	4037,0,c	;volatile
  9912  0056B6  0012               	return		;funcret
  9913  0056B8                     __end_of_I2C_Master_Start:
  9914                           	opt stack 0
  9915                           tblptru	equ	0xFF8
  9916                           tblptrh	equ	0xFF7
  9917                           tblptrl	equ	0xFF6
  9918                           tablat	equ	0xFF5
  9919                           prodh	equ	0xFF4
  9920                           prodl	equ	0xFF3
  9921                           intcon	equ	0xFF2
  9922                           intcon2	equ	0xFF1
  9923                           intcon3	equ	0xFF0
  9924                           postinc0	equ	0xFEE
  9925                           wreg	equ	0xFE8
  9926                           postdec1	equ	0xFE5
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function _I2C_Master_Read *****************
  9936 ;; Defined at:
  9937 ;;		line 55 in file "I2C.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  a               1    wreg     unsigned char 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  a               1    1[BANK0 ] unsigned char 
  9942 ;;  temp            1    2[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  1    wreg      unsigned char 
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    8
  9959 ;; This function calls:
  9960 ;;		_I2C_Master_Wait
  9961 ;; This function is called by:
  9962 ;;		_getRTC
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text29
  9967  0053C8                     __ptext29:
  9968                           	opt stack 0
  9969  0053C8                     _I2C_Master_Read:
  9970                           	opt stack 18
  9971                           
  9972                           ;incstack = 0
  9973                           ;I2C_Master_Read@a stored from wreg
  9974  0053C8  0100               	movlb	0	; () banked
  9975  0053CA  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9976                           
  9977                           ;I2C.c: 57: unsigned char temp;
  9978                           ;I2C.c: 58: I2C_Master_Wait();
  9979  0053CC  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9980                           
  9981                           ;I2C.c: 59: RCEN = 1;
  9982  0053D0  86C5               	bsf	4037,3,c	;volatile
  9983                           
  9984                           ;I2C.c: 60: I2C_Master_Wait();
  9985  0053D2  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9986                           
  9987                           ;I2C.c: 61: temp = SSPBUF;
  9988  0053D6  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9989                           
  9990                           ;I2C.c: 62: I2C_Master_Wait();
  9991  0053DA  EC17  F02B         	call	_I2C_Master_Wait	;wreg free
  9992                           
  9993                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9994  0053DE  0100               	movlb	0	; () banked
  9995  0053E0  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9996  0053E2  0100               	movlb	0	; () banked
  9997  0053E4  A4D8               	btfss	status,2,c
  9998  0053E6  D002               	goto	u4610
  9999  0053E8  8AC5               	bsf	4037,5,c	;volatile
 10000  0053EA  D001               	goto	l6288
 10001  0053EC                     u4610:
 10002  0053EC  9AC5               	bcf	4037,5,c	;volatile
 10003  0053EE                     l6288:
 10004                           
 10005                           ;I2C.c: 64: ACKEN = 1;
 10006  0053EE  88C5               	bsf	4037,4,c	;volatile
 10007                           
 10008                           ;I2C.c: 65: return temp;
 10009  0053F0  0100               	movlb	0	; () banked
 10010  0053F2  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 10011  0053F4  0012               	return	
 10012  0053F6                     __end_of_I2C_Master_Read:
 10013                           	opt stack 0
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           intcon2	equ	0xFF1
 10022                           intcon3	equ	0xFF0
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _I2C_Master_Wait *****************
 10035 ;; Defined at:
 10036 ;;		line 26 in file "I2C.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      void 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:        1 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    7
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_I2C_Master_Start
 10061 ;;		_I2C_Master_Stop
 10062 ;;		_I2C_Master_Write
 10063 ;;		_I2C_Master_Read
 10064 ;;		_I2C_Master_RepeatedStart
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text30
 10069  00562E                     __ptext30:
 10070                           	opt stack 0
 10071  00562E                     _I2C_Master_Wait:
 10072                           	opt stack 18
 10073  00562E                     l66:
 10074  00562E  B4C7               	btfsc	4039,2,c	;volatile
 10075  005630  D7FE               	goto	l66
 10076  005632  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 10077  005636  0E1F               	movlw	31
 10078  005638  0100               	movlb	0	; () banked
 10079  00563A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 10080  00563C  B4D8               	btfsc	status,2,c
 10081  00563E  0012               	return	
 10082  005640  D7F6               	goto	l66
 10083  005642                     __end_of_I2C_Master_Wait:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           intcon3	equ	0xFF0
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           postdec1	equ	0xFE5
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _change_state_to_menu_22 *****************
 10106 ;; Defined at:
 10107 ;;		line 501 in file "UI.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:   10
 10128 ;; This function calls:
 10129 ;;		_lcdInst
 10130 ;;		_printf
 10131 ;; This function is called by:
 10132 ;;		_UI
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text31
 10137  0050A8                     __ptext31:
 10138                           	opt stack 0
 10139  0050A8                     _change_state_to_menu_22:
 10140                           	opt stack 19
 10141                           
 10142                           ;UI.c: 502: cur_state = 22;
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;incstack = 0
 10146  0050A8  0E00               	movlw	0
 10147  0050AA  0100               	movlb	0	; () banked
 10148  0050AC  6FED               	movwf	(_cur_state+1)& (0+255),b
 10149  0050AE  0E16               	movlw	22
 10150  0050B0  6FEC               	movwf	_cur_state& (0+255),b
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;UI.c: 504: lcdInst(0b10000000);;
 10154  0050B2  0E80               	movlw	128
 10155  0050B4  EC32  F02B         	call	_lcdInst
 10156                           
 10157                           ;UI.c: 505: printf("2. SORT        <");
 10158  0050B8  0ECE               	movlw	low STR_34
 10159  0050BA  0100               	movlb	0	; () banked
 10160  0050BC  6F8E               	movwf	printf@f& (0+255),b
 10161  0050BE  0EFD               	movlw	high STR_34
 10162  0050C0  0100               	movlb	0	; () banked
 10163  0050C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10164  0050C4  EC84  F00B         	call	_printf	;wreg free
 10165                           
 10166                           ;UI.c: 506: lcdInst(0b11000000);;
 10167  0050C8  0EC0               	movlw	192
 10168  0050CA  EC32  F02B         	call	_lcdInst
 10169                           
 10170                           ;UI.c: 507: printf("3. LOGS         ");
 10171  0050CE  0E13               	movlw	low STR_36
 10172  0050D0  0100               	movlb	0	; () banked
 10173  0050D2  6F8E               	movwf	printf@f& (0+255),b
 10174  0050D4  0EFD               	movlw	high STR_36
 10175  0050D6  0100               	movlb	0	; () banked
 10176  0050D8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10177  0050DA  EC84  F00B         	call	_printf	;wreg free
 10178  0050DE  0012               	return		;funcret
 10179  0050E0                     __end_of_change_state_to_menu_22:
 10180                           	opt stack 0
 10181                           tblptru	equ	0xFF8
 10182                           tblptrh	equ	0xFF7
 10183                           tblptrl	equ	0xFF6
 10184                           tablat	equ	0xFF5
 10185                           prodh	equ	0xFF4
 10186                           prodl	equ	0xFF3
 10187                           intcon	equ	0xFF2
 10188                           intcon2	equ	0xFF1
 10189                           intcon3	equ	0xFF0
 10190                           postinc0	equ	0xFEE
 10191                           wreg	equ	0xFE8
 10192                           postdec1	equ	0xFE5
 10193                           fsr1l	equ	0xFE1
 10194                           indf2	equ	0xFDF
 10195                           postinc2	equ	0xFDE
 10196                           postdec2	equ	0xFDD
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _change_state_to_menu_12 *****************
 10202 ;; Defined at:
 10203 ;;		line 493 in file "UI.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:   10
 10224 ;; This function calls:
 10225 ;;		_lcdInst
 10226 ;;		_printf
 10227 ;; This function is called by:
 10228 ;;		_UI
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text32
 10233  0050E0                     __ptext32:
 10234                           	opt stack 0
 10235  0050E0                     _change_state_to_menu_12:
 10236                           	opt stack 19
 10237                           
 10238                           ;UI.c: 494: cur_state = 12;
 10239                           
 10240                           ;incstack = 0
 10241  0050E0  0E00               	movlw	0
 10242  0050E2  0100               	movlb	0	; () banked
 10243  0050E4  6FED               	movwf	(_cur_state+1)& (0+255),b
 10244  0050E6  0E0C               	movlw	12
 10245  0050E8  6FEC               	movwf	_cur_state& (0+255),b
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;UI.c: 496: lcdInst(0b10000000);;
 10249  0050EA  0E80               	movlw	128
 10250  0050EC  EC32  F02B         	call	_lcdInst
 10251                           
 10252                           ;UI.c: 497: printf("1. DATE/TIME    ");
 10253  0050F0  0E35               	movlw	low STR_33
 10254  0050F2  0100               	movlb	0	; () banked
 10255  0050F4  6F8E               	movwf	printf@f& (0+255),b
 10256  0050F6  0EFD               	movlw	high STR_33
 10257  0050F8  0100               	movlb	0	; () banked
 10258  0050FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10259  0050FC  EC84  F00B         	call	_printf	;wreg free
 10260                           
 10261                           ;UI.c: 498: lcdInst(0b11000000);;
 10262  005100  0EC0               	movlw	192
 10263  005102  EC32  F02B         	call	_lcdInst
 10264                           
 10265                           ;UI.c: 499: printf("2. SORT        <");
 10266  005106  0ECE               	movlw	low STR_34
 10267  005108  0100               	movlb	0	; () banked
 10268  00510A  6F8E               	movwf	printf@f& (0+255),b
 10269  00510C  0EFD               	movlw	high STR_34
 10270  00510E  0100               	movlb	0	; () banked
 10271  005110  6F8F               	movwf	(printf@f+1)& (0+255),b
 10272  005112  EC84  F00B         	call	_printf	;wreg free
 10273  005116  0012               	return		;funcret
 10274  005118                     __end_of_change_state_to_menu_12:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           intcon3	equ	0xFF0
 10285                           postinc0	equ	0xFEE
 10286                           wreg	equ	0xFE8
 10287                           postdec1	equ	0xFE5
 10288                           fsr1l	equ	0xFE1
 10289                           indf2	equ	0xFDF
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           fsr2h	equ	0xFDA
 10293                           fsr2l	equ	0xFD9
 10294                           status	equ	0xFD8
 10295                           
 10296 ;; *************** function ___awmod *****************
 10297 ;; Defined at:
 10298 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  dividend        2    0[BANK0 ] int 
 10301 ;;  divisor         2    2[BANK0 ] int 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  sign            1    5[BANK0 ] unsigned char 
 10304 ;;  counter         1    4[BANK0 ] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  2    0[BANK0 ] int 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 0/0
 10311 ;;		On exit  : 0/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;Total ram usage:        6 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; Hardware stack levels required when called:    7
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_UI
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           	psect	text33
 10329  004710                     __ptext33:
 10330                           	opt stack 0
 10331  004710                     ___awmod:
 10332                           	opt stack 22
 10333                           
 10334                           ;incstack = 0
 10335  004710  0E00               	movlw	0
 10336  004712  0100               	movlb	0	; () banked
 10337  004714  6F85               	movwf	___awmod@sign& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340  004716  0100               	movlb	0	; () banked
 10341  004718  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10342  00471A  D008               	goto	l8760
 10343                           
 10344                           ; BSR set to: 0
 10345  00471C  0100               	movlb	0	; () banked
 10346  00471E  6D80               	negf	___awmod@dividend& (0+255),b
 10347  004720  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10348  004722  B0D8               	btfsc	status,0,c
 10349  004724  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10350                           
 10351                           ; BSR set to: 0
 10352  004726  0E01               	movlw	1
 10353  004728  0100               	movlb	0	; () banked
 10354  00472A  6F85               	movwf	___awmod@sign& (0+255),b
 10355  00472C                     l8760:
 10356                           
 10357                           ; BSR set to: 0
 10358  00472C  0100               	movlb	0	; () banked
 10359  00472E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10360  004730  D005               	goto	l8764
 10361                           
 10362                           ; BSR set to: 0
 10363  004732  0100               	movlb	0	; () banked
 10364  004734  6D82               	negf	___awmod@divisor& (0+255),b
 10365  004736  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10366  004738  B0D8               	btfsc	status,0,c
 10367  00473A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10368  00473C                     l8764:
 10369                           
 10370                           ; BSR set to: 0
 10371  00473C  0100               	movlb	0	; () banked
 10372  00473E  5182               	movf	___awmod@divisor& (0+255),w,b
 10373  004740  0100               	movlb	0	; () banked
 10374  004742  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10375  004744  B4D8               	btfsc	status,2,c
 10376  004746  D026               	goto	l8780
 10377                           
 10378                           ; BSR set to: 0
 10379  004748  0E01               	movlw	1
 10380  00474A  0100               	movlb	0	; () banked
 10381  00474C  6F84               	movwf	___awmod@counter& (0+255),b
 10382  00474E  D006               	goto	l8770
 10383  004750                     l8768:
 10384                           
 10385                           ; BSR set to: 0
 10386  004750  0100               	movlb	0	; () banked
 10387  004752  90D8               	bcf	status,0,c
 10388  004754  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10389  004756  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10390  004758  0100               	movlb	0	; () banked
 10391  00475A  2B84               	incf	___awmod@counter& (0+255),f,b
 10392  00475C                     l8770:
 10393                           
 10394                           ; BSR set to: 0
 10395  00475C  0100               	movlb	0	; () banked
 10396  00475E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10397  004760  D7F7               	goto	l8768
 10398  004762                     l8772:
 10399                           
 10400                           ; BSR set to: 0
 10401  004762  0100               	movlb	0	; () banked
 10402  004764  5182               	movf	___awmod@divisor& (0+255),w,b
 10403  004766  0100               	movlb	0	; () banked
 10404  004768  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10405  00476A  0100               	movlb	0	; () banked
 10406  00476C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10407  00476E  0100               	movlb	0	; () banked
 10408  004770  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10409  004772  A0D8               	btfss	status,0,c
 10410  004774  D008               	goto	l8776
 10411                           
 10412                           ; BSR set to: 0
 10413  004776  0100               	movlb	0	; () banked
 10414  004778  5182               	movf	___awmod@divisor& (0+255),w,b
 10415  00477A  0100               	movlb	0	; () banked
 10416  00477C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10417  00477E  0100               	movlb	0	; () banked
 10418  004780  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10419  004782  0100               	movlb	0	; () banked
 10420  004784  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10421  004786                     l8776:
 10422                           
 10423                           ; BSR set to: 0
 10424  004786  0100               	movlb	0	; () banked
 10425  004788  90D8               	bcf	status,0,c
 10426  00478A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10427  00478C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10428                           
 10429                           ; BSR set to: 0
 10430  00478E  0100               	movlb	0	; () banked
 10431  004790  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10432  004792  D7E7               	goto	l8772
 10433  004794                     l8780:
 10434                           
 10435                           ; BSR set to: 0
 10436  004794  0100               	movlb	0	; () banked
 10437  004796  5185               	movf	___awmod@sign& (0+255),w,b
 10438  004798  0100               	movlb	0	; () banked
 10439  00479A  B4D8               	btfsc	status,2,c
 10440  00479C  D005               	goto	l8784
 10441                           
 10442                           ; BSR set to: 0
 10443  00479E  0100               	movlb	0	; () banked
 10444  0047A0  6D80               	negf	___awmod@dividend& (0+255),b
 10445  0047A2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10446  0047A4  B0D8               	btfsc	status,0,c
 10447  0047A6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10448  0047A8                     l8784:
 10449                           
 10450                           ; BSR set to: 0
 10451  0047A8  C080  F080         	movff	___awmod@dividend,?___awmod
 10452  0047AC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10453  0047B0  0012               	return	
 10454  0047B2                     __end_of___awmod:
 10455                           	opt stack 0
 10456                           tblptru	equ	0xFF8
 10457                           tblptrh	equ	0xFF7
 10458                           tblptrl	equ	0xFF6
 10459                           tablat	equ	0xFF5
 10460                           prodh	equ	0xFF4
 10461                           prodl	equ	0xFF3
 10462                           intcon	equ	0xFF2
 10463                           intcon2	equ	0xFF1
 10464                           intcon3	equ	0xFF0
 10465                           postinc0	equ	0xFEE
 10466                           wreg	equ	0xFE8
 10467                           postdec1	equ	0xFE5
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function ___awdiv *****************
 10477 ;; Defined at:
 10478 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        2    6[BANK0 ] int 
 10481 ;;  divisor         2    8[BANK0 ] int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  quotient        2   12[BANK0 ] int 
 10484 ;;  sign            1   11[BANK0 ] unsigned char 
 10485 ;;  counter         1   10[BANK0 ] unsigned char 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  2    6[BANK0 ] int 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        8 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    7
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_UI
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text34
 10510  0044EC                     __ptext34:
 10511                           	opt stack 0
 10512  0044EC                     ___awdiv:
 10513                           	opt stack 22
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517  0044EC  0E00               	movlw	0
 10518  0044EE  0100               	movlb	0	; () banked
 10519  0044F0  6F8B               	movwf	___awdiv@sign& (0+255),b
 10520                           
 10521                           ; BSR set to: 0
 10522  0044F2  0100               	movlb	0	; () banked
 10523  0044F4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10524  0044F6  D008               	goto	l8716
 10525                           
 10526                           ; BSR set to: 0
 10527  0044F8  0100               	movlb	0	; () banked
 10528  0044FA  6D88               	negf	___awdiv@divisor& (0+255),b
 10529  0044FC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10530  0044FE  B0D8               	btfsc	status,0,c
 10531  004500  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10532                           
 10533                           ; BSR set to: 0
 10534  004502  0E01               	movlw	1
 10535  004504  0100               	movlb	0	; () banked
 10536  004506  6F8B               	movwf	___awdiv@sign& (0+255),b
 10537  004508                     l8716:
 10538                           
 10539                           ; BSR set to: 0
 10540  004508  0100               	movlb	0	; () banked
 10541  00450A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10542  00450C  D008               	goto	l8722
 10543                           
 10544                           ; BSR set to: 0
 10545  00450E  0100               	movlb	0	; () banked
 10546  004510  6D86               	negf	___awdiv@dividend& (0+255),b
 10547  004512  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10548  004514  B0D8               	btfsc	status,0,c
 10549  004516  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  004518  0E01               	movlw	1
 10553  00451A  0100               	movlb	0	; () banked
 10554  00451C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10555  00451E                     l8722:
 10556                           
 10557                           ; BSR set to: 0
 10558  00451E  0E00               	movlw	0
 10559  004520  0100               	movlb	0	; () banked
 10560  004522  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10561  004524  0E00               	movlw	0
 10562  004526  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10563                           
 10564                           ; BSR set to: 0
 10565  004528  0100               	movlb	0	; () banked
 10566  00452A  5188               	movf	___awdiv@divisor& (0+255),w,b
 10567  00452C  0100               	movlb	0	; () banked
 10568  00452E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10569  004530  B4D8               	btfsc	status,2,c
 10570  004532  D02C               	goto	l8744
 10571                           
 10572                           ; BSR set to: 0
 10573  004534  0E01               	movlw	1
 10574  004536  0100               	movlb	0	; () banked
 10575  004538  6F8A               	movwf	___awdiv@counter& (0+255),b
 10576  00453A  D006               	goto	l8730
 10577  00453C                     l8728:
 10578                           
 10579                           ; BSR set to: 0
 10580  00453C  0100               	movlb	0	; () banked
 10581  00453E  90D8               	bcf	status,0,c
 10582  004540  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10583  004542  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10584  004544  0100               	movlb	0	; () banked
 10585  004546  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10586  004548                     l8730:
 10587                           
 10588                           ; BSR set to: 0
 10589  004548  0100               	movlb	0	; () banked
 10590  00454A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10591  00454C  D7F7               	goto	l8728
 10592  00454E                     l8732:
 10593                           
 10594                           ; BSR set to: 0
 10595  00454E  0100               	movlb	0	; () banked
 10596  004550  90D8               	bcf	status,0,c
 10597  004552  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10598  004554  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10599                           
 10600                           ; BSR set to: 0
 10601  004556  0100               	movlb	0	; () banked
 10602  004558  5188               	movf	___awdiv@divisor& (0+255),w,b
 10603  00455A  0100               	movlb	0	; () banked
 10604  00455C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10605  00455E  0100               	movlb	0	; () banked
 10606  004560  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10607  004562  0100               	movlb	0	; () banked
 10608  004564  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10609  004566  A0D8               	btfss	status,0,c
 10610  004568  D00A               	goto	l8740
 10611                           
 10612                           ; BSR set to: 0
 10613  00456A  0100               	movlb	0	; () banked
 10614  00456C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10615  00456E  0100               	movlb	0	; () banked
 10616  004570  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10617  004572  0100               	movlb	0	; () banked
 10618  004574  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10619  004576  0100               	movlb	0	; () banked
 10620  004578  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10621                           
 10622                           ; BSR set to: 0
 10623  00457A  0100               	movlb	0	; () banked
 10624  00457C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10625  00457E                     l8740:
 10626                           
 10627                           ; BSR set to: 0
 10628  00457E  0100               	movlb	0	; () banked
 10629  004580  90D8               	bcf	status,0,c
 10630  004582  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10631  004584  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10632                           
 10633                           ; BSR set to: 0
 10634  004586  0100               	movlb	0	; () banked
 10635  004588  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10636  00458A  D7E1               	goto	l8732
 10637  00458C                     l8744:
 10638                           
 10639                           ; BSR set to: 0
 10640  00458C  0100               	movlb	0	; () banked
 10641  00458E  518B               	movf	___awdiv@sign& (0+255),w,b
 10642  004590  0100               	movlb	0	; () banked
 10643  004592  B4D8               	btfsc	status,2,c
 10644  004594  D005               	goto	l8748
 10645                           
 10646                           ; BSR set to: 0
 10647  004596  0100               	movlb	0	; () banked
 10648  004598  6D8C               	negf	___awdiv@quotient& (0+255),b
 10649  00459A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10650  00459C  B0D8               	btfsc	status,0,c
 10651  00459E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10652  0045A0                     l8748:
 10653                           
 10654                           ; BSR set to: 0
 10655  0045A0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10656  0045A4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10657  0045A8  0012               	return	
 10658  0045AA                     __end_of___awdiv:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           intcon2	equ	0xFF1
 10668                           intcon3	equ	0xFF0
 10669                           postinc0	equ	0xFEE
 10670                           wreg	equ	0xFE8
 10671                           postdec1	equ	0xFE5
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           postdec2	equ	0xFDD
 10676                           fsr2h	equ	0xFDA
 10677                           fsr2l	equ	0xFD9
 10678                           status	equ	0xFD8
 10679                           
 10680 ;; *************** function _Test *****************
 10681 ;; Defined at:
 10682 ;;		line 31 in file "Test.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;		None
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;Total ram usage:        2 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:   11
 10703 ;; This function calls:
 10704 ;;		_BlockerTest
 10705 ;;		_BothServos
 10706 ;;		_PlatformTest
 10707 ;;		_PortTestDC
 10708 ;;		_PortTestPusher
 10709 ;;		_SpeedTest
 10710 ;;		_actuatorTest
 10711 ;;		_algorithmTest
 10712 ;;		_arm
 10713 ;;		_lcdInst
 10714 ;;		_printf
 10715 ;;		_sensorTest
 10716 ;; This function is called by:
 10717 ;;		_main
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           	psect	text35
 10722  003EC6                     __ptext35:
 10723                           	opt stack 0
 10724  003EC6                     _Test:
 10725                           	opt stack 19
 10726                           
 10727                           ;Test.c: 33: while(machine_state == Testing_state){
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;incstack = 0
 10731  003EC6  D07C               	goto	l9508
 10732  003EC8                     l9468:
 10733                           
 10734                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10735  003EC8  0E01               	movlw	1
 10736  003ECA  EC32  F02B         	call	_lcdInst
 10737  003ECE  0E68               	movlw	104
 10738  003ED0  0100               	movlb	0	; () banked
 10739  003ED2  6FC6               	movwf	??_Test& (0+255),b
 10740  003ED4  0EE4               	movlw	228
 10741  003ED6                     u9787:
 10742  003ED6  2EE8               	decfsz	wreg,f,c
 10743  003ED8  D7FE               	bra	u9787
 10744  003EDA  2FC6               	decfsz	??_Test& (0+255),f,b
 10745  003EDC  D7FC               	bra	u9787
 10746  003EDE  F000               	nop	
 10747  003EE0  0E80               	movlw	128
 10748  003EE2  EC32  F02B         	call	_lcdInst
 10749                           
 10750                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 10751  003EE6  0E8B               	movlw	low STR_68
 10752  003EE8  0100               	movlb	0	; () banked
 10753  003EEA  6F8E               	movwf	printf@f& (0+255),b
 10754  003EEC  0EFC               	movlw	high STR_68
 10755  003EEE  0100               	movlb	0	; () banked
 10756  003EF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10757  003EF2  EC84  F00B         	call	_printf	;wreg free
 10758                           
 10759                           ;Test.c: 36: lcdInst(0b11000000);;
 10760  003EF6  0EC0               	movlw	192
 10761  003EF8  EC32  F02B         	call	_lcdInst
 10762                           
 10763                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 10764  003EFC  0E9C               	movlw	low STR_69
 10765  003EFE  0100               	movlb	0	; () banked
 10766  003F00  6F8E               	movwf	printf@f& (0+255),b
 10767  003F02  0EFC               	movlw	high STR_69
 10768  003F04  0100               	movlb	0	; () banked
 10769  003F06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10770  003F08  EC84  F00B         	call	_printf	;wreg free
 10771  003F0C                     l1202:
 10772  003F0C  A281               	btfss	3969,1,c	;volatile
 10773  003F0E  D7FE               	goto	l1202
 10774                           
 10775                           ;Test.c: 39: var = PORTB >> 4;
 10776  003F10  CF81 F0C6          	movff	3969,??_Test	;volatile
 10777  003F14  0100               	movlb	0	; () banked
 10778  003F16  3BC6               	swapf	??_Test& (0+255),f,b
 10779  003F18  0E0F               	movlw	15
 10780  003F1A  17C6               	andwf	??_Test& (0+255),f,b
 10781  003F1C  0100               	movlb	0	; () banked
 10782  003F1E  51C6               	movf	??_Test& (0+255),w,b
 10783  003F20  0101               	movlb	1	; () banked
 10784  003F22  6F45               	movwf	_var& (0+255),b
 10785  003F24  6B46               	clrf	(_var+1)& (0+255),b
 10786                           
 10787                           ; BSR set to: 1
 10788                           ;Test.c: 40: var++;
 10789  003F26  0101               	movlb	1	; () banked
 10790  003F28  4B45               	infsnz	_var& (0+255),f,b
 10791  003F2A  2B46               	incf	(_var+1)& (0+255),f,b
 10792  003F2C                     l1205:
 10793  003F2C  A281               	btfss	3969,1,c	;volatile
 10794  003F2E  D01F               	goto	l9506
 10795  003F30  D7FD               	goto	l1205
 10796  003F32                     l9484:
 10797                           
 10798                           ;Test.c: 44: algorithmTest();
 10799  003F32  EC4A  F021         	call	_algorithmTest	;wreg free
 10800                           
 10801                           ;Test.c: 45: break;
 10802  003F36  D044               	goto	l9508
 10803  003F38                     l9486:
 10804                           
 10805                           ;Test.c: 47: sensorTest();
 10806  003F38  EC51  F011         	call	_sensorTest	;wreg free
 10807                           
 10808                           ;Test.c: 48: break;
 10809  003F3C  D041               	goto	l9508
 10810  003F3E                     l9488:
 10811                           
 10812                           ;Test.c: 50: actuatorTest();
 10813  003F3E  EC6B  F004         	call	_actuatorTest	;wreg free
 10814                           
 10815                           ;Test.c: 51: break;
 10816  003F42  D03E               	goto	l9508
 10817  003F44                     l9490:
 10818                           
 10819                           ;Test.c: 53: arm();
 10820  003F44  ECE6  F01F         	call	_arm	;wreg free
 10821                           
 10822                           ;Test.c: 54: break;
 10823  003F48  D03B               	goto	l9508
 10824  003F4A                     l9492:
 10825                           
 10826                           ;Test.c: 56: PortTestDC();
 10827  003F4A  ECFE  F026         	call	_PortTestDC	;wreg free
 10828                           
 10829                           ;Test.c: 57: break;
 10830  003F4E  D038               	goto	l9508
 10831  003F50                     l9494:
 10832                           
 10833                           ;Test.c: 59: SpeedTest();
 10834  003F50  ECA5  F024         	call	_SpeedTest	;wreg free
 10835                           
 10836                           ;Test.c: 60: break;
 10837  003F54  D035               	goto	l9508
 10838  003F56                     l9496:
 10839                           
 10840                           ;Test.c: 62: PortTestPusher();
 10841  003F56  ECD0  F026         	call	_PortTestPusher	;wreg free
 10842                           
 10843                           ;Test.c: 63: break;
 10844  003F5A  D032               	goto	l9508
 10845  003F5C                     l9498:
 10846                           
 10847                           ;Test.c: 65: PlatformTest();
 10848  003F5C  EC95  F015         	call	_PlatformTest	;wreg free
 10849                           
 10850                           ;Test.c: 66: break;
 10851  003F60  D02F               	goto	l9508
 10852  003F62                     l9500:
 10853                           
 10854                           ;Test.c: 68: BothServos();
 10855  003F62  ECA0  F00D         	call	_BothServos	;wreg free
 10856                           
 10857                           ;Test.c: 69: break;
 10858  003F66  D02C               	goto	l9508
 10859  003F68                     l9502:
 10860                           
 10861                           ;Test.c: 71: BlockerTest();
 10862  003F68  EC6F  F01D         	call	_BlockerTest	;wreg free
 10863                           
 10864                           ;Test.c: 75: }
 10865                           
 10866                           ;Test.c: 74: break;
 10867                           
 10868                           ;Test.c: 73: default:
 10869                           
 10870                           ;Test.c: 72: break;
 10871  003F6C  D029               	goto	l9508
 10872  003F6E                     l9506:
 10873  003F6E  C145  F0C6         	movff	_var,??_Test
 10874  003F72  C146  F0C7         	movff	_var+1,??_Test+1
 10875                           
 10876                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10877                           ; Switch size 1, requested type "space"
 10878                           ; Number of cases is 1, Range of values is 0 to 0
 10879                           ; switch strategies available:
 10880                           ; Name         Instructions Cycles
 10881                           ; simple_byte            4     3 (average)
 10882                           ;	Chosen strategy is simple_byte
 10883  003F76  0100               	movlb	0	; () banked
 10884  003F78  51C7               	movf	(??_Test+1)& (0+255),w,b
 10885  003F7A  0A00               	xorlw	0	; case 0
 10886  003F7C  A4D8               	btfss	status,2,c
 10887  003F7E  D020               	goto	l9508
 10888                           
 10889                           ; BSR set to: 0
 10890                           ; Switch size 1, requested type "space"
 10891                           ; Number of cases is 10, Range of values is 1 to 11
 10892                           ; switch strategies available:
 10893                           ; Name         Instructions Cycles
 10894                           ; simple_byte           31    16 (average)
 10895                           ;	Chosen strategy is simple_byte
 10896  003F80  0100               	movlb	0	; () banked
 10897  003F82  51C6               	movf	??_Test& (0+255),w,b
 10898  003F84  0A01               	xorlw	1	; case 1
 10899  003F86  B4D8               	btfsc	status,2,c
 10900  003F88  D7D4               	goto	l9484
 10901  003F8A  0A03               	xorlw	3	; case 2
 10902  003F8C  B4D8               	btfsc	status,2,c
 10903  003F8E  D7D4               	goto	l9486
 10904  003F90  0A01               	xorlw	1	; case 3
 10905  003F92  B4D8               	btfsc	status,2,c
 10906  003F94  D7D4               	goto	l9488
 10907  003F96  0A07               	xorlw	7	; case 4
 10908  003F98  B4D8               	btfsc	status,2,c
 10909  003F9A  D7D4               	goto	l9490
 10910  003F9C  0A01               	xorlw	1	; case 5
 10911  003F9E  B4D8               	btfsc	status,2,c
 10912  003FA0  D7D4               	goto	l9492
 10913  003FA2  0A03               	xorlw	3	; case 6
 10914  003FA4  B4D8               	btfsc	status,2,c
 10915  003FA6  D7D4               	goto	l9494
 10916  003FA8  0A01               	xorlw	1	; case 7
 10917  003FAA  B4D8               	btfsc	status,2,c
 10918  003FAC  D7D4               	goto	l9496
 10919  003FAE  0A0F               	xorlw	15	; case 8
 10920  003FB0  B4D8               	btfsc	status,2,c
 10921  003FB2  D7D4               	goto	l9498
 10922  003FB4  0A02               	xorlw	2	; case 10
 10923  003FB6  B4D8               	btfsc	status,2,c
 10924  003FB8  D7D4               	goto	l9500
 10925  003FBA  0A01               	xorlw	1	; case 11
 10926  003FBC  B4D8               	btfsc	status,2,c
 10927  003FBE  D7D4               	goto	l9502
 10928  003FC0                     l9508:
 10929  003FC0  0E03               	movlw	3
 10930  003FC2  0100               	movlb	0	; () banked
 10931  003FC4  19FC               	xorwf	_machine_state& (0+255),w,b
 10932  003FC6  A4D8               	btfss	status,2,c
 10933  003FC8  0012               	return	
 10934  003FCA  D77E               	goto	l9468
 10935  003FCC                     __end_of_Test:
 10936                           	opt stack 0
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           intcon3	equ	0xFF0
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           postdec1	equ	0xFE5
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _sensorTest *****************
 10958 ;; Defined at:
 10959 ;;		line 123 in file "Test.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  res             2   45[BANK0 ] int 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  1    wreg      void 
 10966 ;; Registers used:
 10967 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:        4 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:   10
 10980 ;; This function calls:
 10981 ;;		_lcdInst
 10982 ;;		_printf
 10983 ;;		_readADC
 10984 ;;		_readMAG
 10985 ;; This function is called by:
 10986 ;;		_Test
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text36
 10991  0022A2                     __ptext36:
 10992                           	opt stack 0
 10993  0022A2                     _sensorTest:
 10994                           	opt stack 19
 10995                           
 10996                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;incstack = 0
 11000  0022A2  0E01               	movlw	1
 11001  0022A4  EC32  F02B         	call	_lcdInst
 11002  0022A8  0E68               	movlw	104
 11003  0022AA  0100               	movlb	0	; () banked
 11004  0022AC  6FAB               	movwf	??_sensorTest& (0+255),b
 11005  0022AE  0EE4               	movlw	228
 11006  0022B0                     u9797:
 11007  0022B0  2EE8               	decfsz	wreg,f,c
 11008  0022B2  D7FE               	bra	u9797
 11009  0022B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11010  0022B6  D7FC               	bra	u9797
 11011  0022B8  F000               	nop	
 11012  0022BA  0E80               	movlw	128
 11013  0022BC  EC32  F02B         	call	_lcdInst
 11014                           
 11015                           ;Test.c: 126: printf("SENSORS");
 11016  0022C0  0EAD               	movlw	low STR_77
 11017  0022C2  0100               	movlb	0	; () banked
 11018  0022C4  6F8E               	movwf	printf@f& (0+255),b
 11019  0022C6  0EFF               	movlw	high STR_77
 11020  0022C8  0100               	movlb	0	; () banked
 11021  0022CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11022  0022CC  EC84  F00B         	call	_printf	;wreg free
 11023                           
 11024                           ;Test.c: 127: lcdInst(0b11000000);;
 11025  0022D0  0EC0               	movlw	192
 11026  0022D2  EC32  F02B         	call	_lcdInst
 11027                           
 11028                           ;Test.c: 128: printf("PUSH TO START");
 11029  0022D6  0E15               	movlw	low STR_71
 11030  0022D8  0100               	movlb	0	; () banked
 11031  0022DA  6F8E               	movwf	printf@f& (0+255),b
 11032  0022DC  0EFF               	movlw	high STR_71
 11033  0022DE  0100               	movlb	0	; () banked
 11034  0022E0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11035  0022E2  EC84  F00B         	call	_printf	;wreg free
 11036                           
 11037                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 11038  0022E6  0E05               	movlw	5
 11039  0022E8  0100               	movlb	0	; () banked
 11040  0022EA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11041  0022EC  0E0F               	movlw	15
 11042  0022EE  0100               	movlb	0	; () banked
 11043  0022F0  6FAB               	movwf	??_sensorTest& (0+255),b
 11044  0022F2  0EF1               	movlw	241
 11045  0022F4                     u9807:
 11046  0022F4  2EE8               	decfsz	wreg,f,c
 11047  0022F6  D7FE               	bra	u9807
 11048  0022F8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11049  0022FA  D7FC               	bra	u9807
 11050  0022FC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11051  0022FE  D7FA               	bra	u9807
 11052  002300                     l1234:
 11053  002300  A281               	btfss	3969,1,c	;volatile
 11054  002302  D7FE               	goto	l1234
 11055  002304                     l1237:
 11056  002304  B281               	btfsc	3969,1,c	;volatile
 11057  002306  D7FE               	goto	l1237
 11058                           
 11059                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11060  002308  0E01               	movlw	1
 11061  00230A  EC32  F02B         	call	_lcdInst
 11062  00230E  0E68               	movlw	104
 11063  002310  0100               	movlb	0	; () banked
 11064  002312  6FAB               	movwf	??_sensorTest& (0+255),b
 11065  002314  0EE4               	movlw	228
 11066  002316                     u9817:
 11067  002316  2EE8               	decfsz	wreg,f,c
 11068  002318  D7FE               	bra	u9817
 11069  00231A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11070  00231C  D7FC               	bra	u9817
 11071  00231E  F000               	nop	
 11072  002320  0E80               	movlw	128
 11073  002322  EC32  F02B         	call	_lcdInst
 11074                           
 11075                           ;Test.c: 137: printf("TST: IR SNSR");
 11076  002326  0E3F               	movlw	low STR_79
 11077  002328  0100               	movlb	0	; () banked
 11078  00232A  6F8E               	movwf	printf@f& (0+255),b
 11079  00232C  0EFF               	movlw	high STR_79
 11080  00232E  0100               	movlb	0	; () banked
 11081  002330  6F8F               	movwf	(printf@f+1)& (0+255),b
 11082  002332  EC84  F00B         	call	_printf	;wreg free
 11083                           
 11084                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 11085  002336  0E05               	movlw	5
 11086  002338  0100               	movlb	0	; () banked
 11087  00233A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11088  00233C  0E0F               	movlw	15
 11089  00233E  0100               	movlb	0	; () banked
 11090  002340  6FAB               	movwf	??_sensorTest& (0+255),b
 11091  002342  0EF1               	movlw	241
 11092  002344                     u9827:
 11093  002344  2EE8               	decfsz	wreg,f,c
 11094  002346  D7FE               	bra	u9827
 11095  002348  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11096  00234A  D7FC               	bra	u9827
 11097  00234C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11098  00234E  D7FA               	bra	u9827
 11099                           
 11100                           ;Test.c: 139: LATCbits.LATC5 = 1;
 11101  002350  8A8B               	bsf	3979,5,c	;volatile
 11102                           
 11103                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 11104  002352  D05C               	goto	l7854
 11105  002354                     l7836:
 11106                           
 11107                           ;Test.c: 142: readADC(0);
 11108  002354  0E00               	movlw	0
 11109  002356  EC28  F02A         	call	_readADC
 11110                           
 11111                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 11112  00235A  50C3               	movf	4035,w,c	;volatile
 11113  00235C  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 11114  002360  0100               	movlb	0	; () banked
 11115  002362  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 11116  002364  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 11117  002368  0100               	movlb	0	; () banked
 11118  00236A  6BAB               	clrf	??_sensorTest& (0+255),b
 11119  00236C  0100               	movlb	0	; () banked
 11120  00236E  11AB               	iorwf	??_sensorTest& (0+255),w,b
 11121  002370  0100               	movlb	0	; () banked
 11122  002372  6FAD               	movwf	sensorTest@res& (0+255),b
 11123  002374  0100               	movlb	0	; () banked
 11124  002376  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 11125  002378  0100               	movlb	0	; () banked
 11126  00237A  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 11130  00237C  0100               	movlb	0	; () banked
 11131  00237E  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 11132  002380  D00A               	goto	u6400
 11133  002382  0E21               	movlw	33
 11134  002384  0100               	movlb	0	; () banked
 11135  002386  5DAD               	subwf	sensorTest@res& (0+255),w,b
 11136  002388  0E03               	movlw	3
 11137  00238A  0100               	movlb	0	; () banked
 11138  00238C  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 11139  00238E  A0D8               	btfss	status,0,c
 11140  002390  D002               	goto	u6400
 11141  002392  0E01               	movlw	1
 11142  002394  D001               	goto	u6410
 11143  002396                     u6400:
 11144  002396  0E00               	movlw	0
 11145  002398                     u6410:
 11146  002398  0100               	movlb	0	; () banked
 11147  00239A  6FE6               	movwf	_IR_signal& (0+255),b
 11148  00239C  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 11149                           
 11150                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11151  00239E  0E01               	movlw	1
 11152  0023A0  EC32  F02B         	call	_lcdInst
 11153  0023A4  0E68               	movlw	104
 11154  0023A6  0100               	movlb	0	; () banked
 11155  0023A8  6FAB               	movwf	??_sensorTest& (0+255),b
 11156  0023AA  0EE4               	movlw	228
 11157  0023AC                     u9837:
 11158  0023AC  2EE8               	decfsz	wreg,f,c
 11159  0023AE  D7FE               	bra	u9837
 11160  0023B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11161  0023B2  D7FC               	bra	u9837
 11162  0023B4  F000               	nop	
 11163  0023B6  0E80               	movlw	128
 11164  0023B8  EC32  F02B         	call	_lcdInst
 11165                           
 11166                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 11167  0023BC  0E64               	movlw	low STR_80
 11168  0023BE  0100               	movlb	0	; () banked
 11169  0023C0  6F8E               	movwf	printf@f& (0+255),b
 11170  0023C2  0EFE               	movlw	high STR_80
 11171  0023C4  0100               	movlb	0	; () banked
 11172  0023C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11173  0023C8  C0E6  F090         	movff	_IR_signal,?_printf+2
 11174  0023CC  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 11175  0023D0  EC84  F00B         	call	_printf	;wreg free
 11176                           
 11177                           ;Test.c: 148: lcdInst(0b11000000);;
 11178  0023D4  0EC0               	movlw	192
 11179  0023D6  EC32  F02B         	call	_lcdInst
 11180                           
 11181                           ;Test.c: 149: printf("%d", res);
 11182  0023DA  0E20               	movlw	low (STR_27+14)
 11183  0023DC  0100               	movlb	0	; () banked
 11184  0023DE  6F8E               	movwf	printf@f& (0+255),b
 11185  0023E0  0EFE               	movlw	high (STR_27+14)
 11186  0023E2  0100               	movlb	0	; () banked
 11187  0023E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11188  0023E6  C0AD  F090         	movff	sensorTest@res,?_printf+2
 11189  0023EA  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 11190  0023EE  EC84  F00B         	call	_printf	;wreg free
 11191                           
 11192                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 11193  0023F2  0E05               	movlw	5
 11194  0023F4  0100               	movlb	0	; () banked
 11195  0023F6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11196  0023F8  0E0F               	movlw	15
 11197  0023FA  0100               	movlb	0	; () banked
 11198  0023FC  6FAB               	movwf	??_sensorTest& (0+255),b
 11199  0023FE  0EF1               	movlw	241
 11200  002400                     u9847:
 11201  002400  2EE8               	decfsz	wreg,f,c
 11202  002402  D7FE               	bra	u9847
 11203  002404  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11204  002406  D7FC               	bra	u9847
 11205  002408  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11206  00240A  D7FA               	bra	u9847
 11207  00240C                     l7854:
 11208  00240C  A281               	btfss	3969,1,c	;volatile
 11209  00240E  D7A2               	goto	l7836
 11210                           
 11211                           ;Test.c: 151: }
 11212                           ;Test.c: 152: LATCbits.LATC5 = 0;
 11213  002410  9A8B               	bcf	3979,5,c	;volatile
 11214                           
 11215                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11216  002412  0E01               	movlw	1
 11217  002414  EC32  F02B         	call	_lcdInst
 11218  002418  0E68               	movlw	104
 11219  00241A  0100               	movlb	0	; () banked
 11220  00241C  6FAB               	movwf	??_sensorTest& (0+255),b
 11221  00241E  0EE4               	movlw	228
 11222  002420                     u9857:
 11223  002420  2EE8               	decfsz	wreg,f,c
 11224  002422  D7FE               	bra	u9857
 11225  002424  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11226  002426  D7FC               	bra	u9857
 11227  002428  F000               	nop	
 11228  00242A  0E80               	movlw	128
 11229  00242C  EC32  F02B         	call	_lcdInst
 11230                           
 11231                           ;Test.c: 161: printf("TST: MAGNETISM");
 11232  002430  0E91               	movlw	low STR_82
 11233  002432  0100               	movlb	0	; () banked
 11234  002434  6F8E               	movwf	printf@f& (0+255),b
 11235  002436  0EFE               	movlw	high STR_82
 11236  002438  0100               	movlb	0	; () banked
 11237  00243A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11238  00243C  EC84  F00B         	call	_printf	;wreg free
 11239                           
 11240                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 11241  002440  0E05               	movlw	5
 11242  002442  0100               	movlb	0	; () banked
 11243  002444  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11244  002446  0E0F               	movlw	15
 11245  002448  0100               	movlb	0	; () banked
 11246  00244A  6FAB               	movwf	??_sensorTest& (0+255),b
 11247  00244C  0EF1               	movlw	241
 11248  00244E                     u9867:
 11249  00244E  2EE8               	decfsz	wreg,f,c
 11250  002450  D7FE               	bra	u9867
 11251  002452  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11252  002454  D7FC               	bra	u9867
 11253  002456  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11254  002458  D7FA               	bra	u9867
 11255                           
 11256                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 11257  00245A  D021               	goto	l7872
 11258  00245C                     l7866:
 11259                           
 11260                           ;Test.c: 164: readMAG();
 11261  00245C  ECCD  F027         	call	_readMAG	;wreg free
 11262                           
 11263                           ;Test.c: 165: lcdInst(0b10000000);;
 11264  002460  0E80               	movlw	128
 11265  002462  EC32  F02B         	call	_lcdInst
 11266                           
 11267                           ;Test.c: 166: lcdInst(0b11000000);;
 11268  002466  0EC0               	movlw	192
 11269  002468  EC32  F02B         	call	_lcdInst
 11270                           
 11271                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 11272  00246C  0E34               	movlw	low STR_83
 11273  00246E  0100               	movlb	0	; () banked
 11274  002470  6F8E               	movwf	printf@f& (0+255),b
 11275  002472  0EFE               	movlw	high STR_83
 11276  002474  0100               	movlb	0	; () banked
 11277  002476  6F8F               	movwf	(printf@f+1)& (0+255),b
 11278  002478  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11279  00247C  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11280  002480  EC84  F00B         	call	_printf	;wreg free
 11281                           
 11282                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 11283  002484  0E05               	movlw	5
 11284  002486  0100               	movlb	0	; () banked
 11285  002488  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11286  00248A  0E0F               	movlw	15
 11287  00248C  0100               	movlb	0	; () banked
 11288  00248E  6FAB               	movwf	??_sensorTest& (0+255),b
 11289  002490  0EF1               	movlw	241
 11290  002492                     u9877:
 11291  002492  2EE8               	decfsz	wreg,f,c
 11292  002494  D7FE               	bra	u9877
 11293  002496  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11294  002498  D7FC               	bra	u9877
 11295  00249A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11296  00249C  D7FA               	bra	u9877
 11297  00249E                     l7872:
 11298  00249E  A281               	btfss	3969,1,c	;volatile
 11299  0024A0  D7DD               	goto	l7866
 11300                           
 11301                           ;Test.c: 169: }
 11302                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11303  0024A2  0E01               	movlw	1
 11304  0024A4  EC32  F02B         	call	_lcdInst
 11305  0024A8  0E68               	movlw	104
 11306  0024AA  0100               	movlb	0	; () banked
 11307  0024AC  6FAB               	movwf	??_sensorTest& (0+255),b
 11308  0024AE  0EE4               	movlw	228
 11309  0024B0                     u9887:
 11310  0024B0  2EE8               	decfsz	wreg,f,c
 11311  0024B2  D7FE               	bra	u9887
 11312  0024B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11313  0024B6  D7FC               	bra	u9887
 11314  0024B8  F000               	nop	
 11315  0024BA  0E80               	movlw	128
 11316  0024BC  EC32  F02B         	call	_lcdInst
 11317                           
 11318                           ;Test.c: 175: printf("TST: COND");
 11319  0024C0  0E86               	movlw	low STR_84
 11320  0024C2  0100               	movlb	0	; () banked
 11321  0024C4  6F8E               	movwf	printf@f& (0+255),b
 11322  0024C6  0EFF               	movlw	high STR_84
 11323  0024C8  0100               	movlb	0	; () banked
 11324  0024CA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11325  0024CC  EC84  F00B         	call	_printf	;wreg free
 11326                           
 11327                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 11328  0024D0  0E05               	movlw	5
 11329  0024D2  0100               	movlb	0	; () banked
 11330  0024D4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11331  0024D6  0E0F               	movlw	15
 11332  0024D8  0100               	movlb	0	; () banked
 11333  0024DA  6FAB               	movwf	??_sensorTest& (0+255),b
 11334  0024DC  0EF1               	movlw	241
 11335  0024DE                     u9897:
 11336  0024DE  2EE8               	decfsz	wreg,f,c
 11337  0024E0  D7FE               	bra	u9897
 11338  0024E2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11339  0024E4  D7FC               	bra	u9897
 11340  0024E6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11341  0024E8  D7FA               	bra	u9897
 11342  0024EA                     l7884:
 11343                           
 11344                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11345  0024EA  0E01               	movlw	1
 11346  0024EC  EC32  F02B         	call	_lcdInst
 11347  0024F0  0E68               	movlw	104
 11348  0024F2  0100               	movlb	0	; () banked
 11349  0024F4  6FAB               	movwf	??_sensorTest& (0+255),b
 11350  0024F6  0EE4               	movlw	228
 11351  0024F8                     u9907:
 11352  0024F8  2EE8               	decfsz	wreg,f,c
 11353  0024FA  D7FE               	bra	u9907
 11354  0024FC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11355  0024FE  D7FC               	bra	u9907
 11356  002500  F000               	nop	
 11357  002502  0E80               	movlw	128
 11358  002504  EC32  F02B         	call	_lcdInst
 11359                           
 11360                           ;Test.c: 179: printf("TST: COND");
 11361  002508  0E86               	movlw	low STR_84
 11362  00250A  0100               	movlb	0	; () banked
 11363  00250C  6F8E               	movwf	printf@f& (0+255),b
 11364  00250E  0EFF               	movlw	high STR_84
 11365  002510  0100               	movlb	0	; () banked
 11366  002512  6F8F               	movwf	(printf@f+1)& (0+255),b
 11367  002514  EC84  F00B         	call	_printf	;wreg free
 11368                           
 11369                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 11370  002518  D01B               	goto	l7896
 11371  00251A                     l7892:
 11372                           
 11373                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11374  00251A  0E80               	movlw	128
 11375  00251C  EC32  F02B         	call	_lcdInst
 11376  002520  0EC0               	movlw	192
 11377  002522  EC32  F02B         	call	_lcdInst
 11378                           
 11379                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 11380  002526  0EA4               	movlw	low STR_86
 11381  002528  0100               	movlb	0	; () banked
 11382  00252A  6F8E               	movwf	printf@f& (0+255),b
 11383  00252C  0EFF               	movlw	high STR_86
 11384  00252E  0100               	movlb	0	; () banked
 11385  002530  6F8F               	movwf	(printf@f+1)& (0+255),b
 11386  002532  A480               	btfss	3968,2,c	;volatile
 11387  002534  D004               	goto	u6440
 11388  002536  0100               	movlb	0	; () banked
 11389  002538  6BAB               	clrf	??_sensorTest& (0+255),b
 11390  00253A  2BAB               	incf	??_sensorTest& (0+255),f,b
 11391  00253C  D002               	goto	u6448
 11392  00253E                     u6440:
 11393  00253E  0100               	movlb	0	; () banked
 11394  002540  6BAB               	clrf	??_sensorTest& (0+255),b
 11395  002542                     u6448:
 11396  002542  0100               	movlb	0	; () banked
 11397  002544  51AB               	movf	??_sensorTest& (0+255),w,b
 11398  002546  0100               	movlb	0	; () banked
 11399  002548  6F90               	movwf	(?_printf+2)& (0+255),b
 11400  00254A  6B91               	clrf	(?_printf+3)& (0+255),b
 11401  00254C  EC84  F00B         	call	_printf	;wreg free
 11402  002550                     l7896:
 11403  002550  A281               	btfss	3969,1,c	;volatile
 11404  002552  D7E3               	goto	l7892
 11405                           
 11406                           ;Test.c: 186: }
 11407                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 11408  002554  3881               	swapf	3969,w,c	;volatile
 11409  002556  0B0F               	andlw	15
 11410  002558  0A0F               	xorlw	15
 11411  00255A  B4D8               	btfsc	status,2,c
 11412  00255C  0012               	return	
 11413                           
 11414                           ;Test.c: 190: else{
 11415                           ;Test.c: 191: LATAbits.LATA3 = 1;
 11416                           
 11417                           ;Test.c: 189: }
 11418                           
 11419                           ;Test.c: 188: break;
 11420  00255E  8689               	bsf	3977,3,c	;volatile
 11421                           
 11422                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 11423  002560  D01B               	goto	l7908
 11424  002562                     l7904:
 11425                           
 11426                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11427  002562  0E80               	movlw	128
 11428  002564  EC32  F02B         	call	_lcdInst
 11429  002568  0EC0               	movlw	192
 11430  00256A  EC32  F02B         	call	_lcdInst
 11431                           
 11432                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 11433  00256E  0EA4               	movlw	low STR_86
 11434  002570  0100               	movlb	0	; () banked
 11435  002572  6F8E               	movwf	printf@f& (0+255),b
 11436  002574  0EFF               	movlw	high STR_86
 11437  002576  0100               	movlb	0	; () banked
 11438  002578  6F8F               	movwf	(printf@f+1)& (0+255),b
 11439  00257A  A480               	btfss	3968,2,c	;volatile
 11440  00257C  D004               	goto	u6470
 11441  00257E  0100               	movlb	0	; () banked
 11442  002580  6BAB               	clrf	??_sensorTest& (0+255),b
 11443  002582  2BAB               	incf	??_sensorTest& (0+255),f,b
 11444  002584  D002               	goto	u6478
 11445  002586                     u6470:
 11446  002586  0100               	movlb	0	; () banked
 11447  002588  6BAB               	clrf	??_sensorTest& (0+255),b
 11448  00258A                     u6478:
 11449  00258A  0100               	movlb	0	; () banked
 11450  00258C  51AB               	movf	??_sensorTest& (0+255),w,b
 11451  00258E  0100               	movlb	0	; () banked
 11452  002590  6F90               	movwf	(?_printf+2)& (0+255),b
 11453  002592  6B91               	clrf	(?_printf+3)& (0+255),b
 11454  002594  EC84  F00B         	call	_printf	;wreg free
 11455  002598                     l7908:
 11456  002598  B281               	btfsc	3969,1,c	;volatile
 11457  00259A  D7E3               	goto	l7904
 11458                           
 11459                           ;Test.c: 196: }
 11460                           ;Test.c: 197: LATAbits.LATA3 = !1;
 11461  00259C  9689               	bcf	3977,3,c	;volatile
 11462  00259E  D7A5               	goto	l7884
 11463  0025A0                     __end_of_sensorTest:
 11464                           	opt stack 0
 11465                           tblptru	equ	0xFF8
 11466                           tblptrh	equ	0xFF7
 11467                           tblptrl	equ	0xFF6
 11468                           tablat	equ	0xFF5
 11469                           prodh	equ	0xFF4
 11470                           prodl	equ	0xFF3
 11471                           intcon	equ	0xFF2
 11472                           intcon2	equ	0xFF1
 11473                           intcon3	equ	0xFF0
 11474                           postinc0	equ	0xFEE
 11475                           wreg	equ	0xFE8
 11476                           postdec1	equ	0xFE5
 11477                           fsr1l	equ	0xFE1
 11478                           indf2	equ	0xFDF
 11479                           postinc2	equ	0xFDE
 11480                           postdec2	equ	0xFDD
 11481                           fsr2h	equ	0xFDA
 11482                           fsr2l	equ	0xFD9
 11483                           status	equ	0xFD8
 11484                           
 11485 ;; *************** function _readMAG *****************
 11486 ;; Defined at:
 11487 ;;		line 29 in file "ADCFunctionality.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  res             2    4[BANK0 ] int 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;Total ram usage:        4 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    8
 11508 ;; This function calls:
 11509 ;;		_readADC
 11510 ;; This function is called by:
 11511 ;;		_getMAG
 11512 ;;		_sensorTest
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text37
 11517  004F9A                     __ptext37:
 11518                           	opt stack 0
 11519  004F9A                     _readMAG:
 11520                           	opt stack 19
 11521                           
 11522                           ;ADCFunctionality.c: 30: readADC(1);
 11523                           
 11524                           ;incstack = 0
 11525  004F9A  0E01               	movlw	1
 11526  004F9C  EC28  F02A         	call	_readADC
 11527                           
 11528                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11529  004FA0  50C3               	movf	4035,w,c	;volatile
 11530  004FA2  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11531  004FA6  0100               	movlb	0	; () banked
 11532  004FA8  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11533  004FAA  C082  F083         	movff	??_readMAG,??_readMAG+1
 11534  004FAE  0100               	movlb	0	; () banked
 11535  004FB0  6B82               	clrf	??_readMAG& (0+255),b
 11536  004FB2  0100               	movlb	0	; () banked
 11537  004FB4  1182               	iorwf	??_readMAG& (0+255),w,b
 11538  004FB6  0100               	movlb	0	; () banked
 11539  004FB8  6F84               	movwf	readMAG@res& (0+255),b
 11540  004FBA  0100               	movlb	0	; () banked
 11541  004FBC  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11542  004FBE  0100               	movlb	0	; () banked
 11543  004FC0  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11547  004FC2  0100               	movlb	0	; () banked
 11548  004FC4  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11549  004FC6  D008               	goto	u4831
 11550  004FC8  0100               	movlb	0	; () banked
 11551  004FCA  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11552  004FCC  E107               	bnz	u4830
 11553  004FCE  0E96               	movlw	150
 11554  004FD0  0100               	movlb	0	; () banked
 11555  004FD2  5D84               	subwf	readMAG@res& (0+255),w,b
 11556  004FD4  B0D8               	btfsc	status,0,c
 11557  004FD6  D002               	goto	u4830
 11558  004FD8                     u4831:
 11559  004FD8  0E01               	movlw	1
 11560  004FDA  D001               	goto	u4840
 11561  004FDC                     u4830:
 11562  004FDC  0E00               	movlw	0
 11563  004FDE                     u4840:
 11564  004FDE  0100               	movlb	0	; () banked
 11565  004FE0  6FE8               	movwf	_MAG_signal& (0+255),b
 11566  004FE2  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11567                           
 11568                           ; BSR set to: 0
 11569  004FE4  0012               	return		;funcret
 11570  004FE6                     __end_of_readMAG:
 11571                           	opt stack 0
 11572                           tblptru	equ	0xFF8
 11573                           tblptrh	equ	0xFF7
 11574                           tblptrl	equ	0xFF6
 11575                           tablat	equ	0xFF5
 11576                           prodh	equ	0xFF4
 11577                           prodl	equ	0xFF3
 11578                           intcon	equ	0xFF2
 11579                           intcon2	equ	0xFF1
 11580                           intcon3	equ	0xFF0
 11581                           postinc0	equ	0xFEE
 11582                           wreg	equ	0xFE8
 11583                           postdec1	equ	0xFE5
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _arm *****************
 11593 ;; Defined at:
 11594 ;;		line 632 in file "Test.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  on              2   44[BANK0 ] int 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  1    wreg      void 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:        3 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:   10
 11615 ;; This function calls:
 11616 ;;		_lcdInst
 11617 ;;		_printf
 11618 ;;		_stopSignals
 11619 ;; This function is called by:
 11620 ;;		_Test
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           	psect	text38
 11625  003FCC                     __ptext38:
 11626                           	opt stack 0
 11627  003FCC                     _arm:
 11628                           	opt stack 19
 11629                           
 11630                           ;Test.c: 633: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;incstack = 0
 11634  003FCC  0E01               	movlw	1
 11635  003FCE  EC32  F02B         	call	_lcdInst
 11636  003FD2  0E68               	movlw	104
 11637  003FD4  0100               	movlb	0	; () banked
 11638  003FD6  6FAB               	movwf	??_arm& (0+255),b
 11639  003FD8  0EE4               	movlw	228
 11640  003FDA                     u9917:
 11641  003FDA  2EE8               	decfsz	wreg,f,c
 11642  003FDC  D7FE               	bra	u9917
 11643  003FDE  2FAB               	decfsz	??_arm& (0+255),f,b
 11644  003FE0  D7FC               	bra	u9917
 11645  003FE2  F000               	nop	
 11646  003FE4  0E80               	movlw	128
 11647  003FE6  EC32  F02B         	call	_lcdInst
 11648                           
 11649                           ;Test.c: 634: printf("D WILL RETURN   ");
 11650  003FEA  0EF2               	movlw	low STR_116
 11651  003FEC  0100               	movlb	0	; () banked
 11652  003FEE  6F8E               	movwf	printf@f& (0+255),b
 11653  003FF0  0EFB               	movlw	high STR_116
 11654  003FF2  0100               	movlb	0	; () banked
 11655  003FF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11656  003FF6  EC84  F00B         	call	_printf	;wreg free
 11657                           
 11658                           ;Test.c: 635: lcdInst(0b11000000);;
 11659  003FFA  0EC0               	movlw	192
 11660  003FFC  EC32  F02B         	call	_lcdInst
 11661                           
 11662                           ;Test.c: 636: printf("ELSE TOGGLES ARM");
 11663  004000  0EAD               	movlw	low STR_125
 11664  004002  0100               	movlb	0	; () banked
 11665  004004  6F8E               	movwf	printf@f& (0+255),b
 11666  004006  0EFC               	movlw	high STR_125
 11667  004008  0100               	movlb	0	; () banked
 11668  00400A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11669  00400C  EC84  F00B         	call	_printf	;wreg free
 11670                           
 11671                           ;Test.c: 638: (INTCONbits.GIE = 1);
 11672  004010  8EF2               	bsf	intcon,7,c	;volatile
 11673                           
 11674                           ;Test.c: 639: machine_state = Sorting_state;
 11675  004012  0E01               	movlw	1
 11676  004014  0100               	movlb	0	; () banked
 11677  004016  6FFC               	movwf	_machine_state& (0+255),b
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;Test.c: 640: f_arm_position = 2;
 11681  004018  0E00               	movlw	0
 11682  00401A  0100               	movlb	0	; () banked
 11683  00401C  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11684  00401E  0E02               	movlw	2
 11685  004020  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Test.c: 641: timer2_counter = 0;
 11689  004022  0E00               	movlw	0
 11690  004024  6E74               	movwf	_timer2_counter+1,c	;volatile
 11691  004026  0E00               	movlw	0
 11692  004028  6E73               	movwf	_timer2_counter,c	;volatile
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;Test.c: 642: LATBbits.LATB3 = 1;
 11696  00402A  868A               	bsf	3978,3,c	;volatile
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;Test.c: 643: TMR2ON = 1;
 11700  00402C  84CA               	bsf	4042,2,c	;volatile
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;Test.c: 644: was_low_2 = 0;
 11704  00402E  0E00               	movlw	0
 11705  004030  6E7A               	movwf	_was_low_2+1,c	;volatile
 11706  004032  0E00               	movlw	0
 11707  004034  6E79               	movwf	_was_low_2,c	;volatile
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;Test.c: 646: int on = 0;
 11711  004036  0E00               	movlw	0
 11712  004038  0100               	movlb	0	; () banked
 11713  00403A  6FAD               	movwf	(arm@on+1)& (0+255),b
 11714  00403C  0E00               	movlw	0
 11715  00403E  6FAC               	movwf	arm@on& (0+255),b
 11716  004040                     l8362:
 11717                           
 11718                           ;Test.c: 648: if(on){
 11719  004040  0100               	movlb	0	; () banked
 11720  004042  51AC               	movf	arm@on& (0+255),w,b
 11721  004044  0100               	movlb	0	; () banked
 11722  004046  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11723  004048  B4D8               	btfsc	status,2,c
 11724  00404A  D01C               	goto	l8374
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;Test.c: 649: on = !on;
 11728  00404C  0100               	movlb	0	; () banked
 11729  00404E  51AC               	movf	arm@on& (0+255),w,b
 11730  004050  0100               	movlb	0	; () banked
 11731  004052  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11732  004054  A4D8               	btfss	status,2,c
 11733  004056  D002               	goto	u7060
 11734  004058  0E01               	movlw	1
 11735  00405A  D001               	goto	u7070
 11736  00405C                     u7060:
 11737  00405C  0E00               	movlw	0
 11738  00405E                     u7070:
 11739  00405E  0100               	movlb	0	; () banked
 11740  004060  6FAC               	movwf	arm@on& (0+255),b
 11741  004062  6BAD               	clrf	(arm@on+1)& (0+255),b
 11742                           
 11743                           ;Test.c: 650: while(PORTBbits.RB1 == 0){
 11744  004064  D005               	goto	l8368
 11745  004066                     l8366:
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Test.c: 651: f_arm_position = 0;
 11749  004066  0E00               	movlw	0
 11750  004068  0100               	movlb	0	; () banked
 11751  00406A  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11752  00406C  0E00               	movlw	0
 11753  00406E  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11754  004070                     l8368:
 11755                           
 11756                           ; BSR set to: 0
 11757  004070  A281               	btfss	3969,1,c	;volatile
 11758  004072  D7F9               	goto	l8366
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;Test.c: 652: }
 11762                           ;Test.c: 653: if(PORTB >> 4 == 0b1111){
 11763                           
 11764                           ; BSR set to: 0
 11765  004074  3881               	swapf	3969,w,c	;volatile
 11766  004076  0B0F               	andlw	15
 11767  004078  0A0F               	xorlw	15
 11768  00407A  B4D8               	btfsc	status,2,c
 11769  00407C  D01F               	goto	l1429
 11770  00407E                     l1430:
 11771  00407E  A281               	btfss	3969,1,c	;volatile
 11772  004080  D7DF               	goto	l8362
 11773  004082  D7FD               	goto	l1430
 11774  004084                     l8374:
 11775                           
 11776                           ;Test.c: 658: else{
 11777                           ;Test.c: 659: on = !on;
 11778  004084  0100               	movlb	0	; () banked
 11779  004086  51AC               	movf	arm@on& (0+255),w,b
 11780  004088  0100               	movlb	0	; () banked
 11781  00408A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 11782  00408C  A4D8               	btfss	status,2,c
 11783  00408E  D002               	goto	u7110
 11784  004090  0E01               	movlw	1
 11785  004092  D001               	goto	u7120
 11786  004094                     u7110:
 11787  004094  0E00               	movlw	0
 11788  004096                     u7120:
 11789  004096  0100               	movlb	0	; () banked
 11790  004098  6FAC               	movwf	arm@on& (0+255),b
 11791  00409A  6BAD               	clrf	(arm@on+1)& (0+255),b
 11792                           
 11793                           ;Test.c: 660: while(PORTBbits.RB1 == 0){
 11794  00409C  D005               	goto	l8378
 11795  00409E                     l8376:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;Test.c: 661: f_arm_position = 1;
 11799  00409E  0E00               	movlw	0
 11800  0040A0  0100               	movlb	0	; () banked
 11801  0040A2  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 11802  0040A4  0E01               	movlw	1
 11803  0040A6  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 11804  0040A8                     l8378:
 11805                           
 11806                           ; BSR set to: 0
 11807  0040A8  A281               	btfss	3969,1,c	;volatile
 11808  0040AA  D7F9               	goto	l8376
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;Test.c: 662: }
 11812                           ;Test.c: 663: if(PORTB >> 4 == 0b1111){
 11813                           
 11814                           ; BSR set to: 0
 11815  0040AC  3881               	swapf	3969,w,c	;volatile
 11816  0040AE  0B0F               	andlw	15
 11817  0040B0  0A0F               	xorlw	15
 11818  0040B2  B4D8               	btfsc	status,2,c
 11819  0040B4  D003               	goto	l1429
 11820  0040B6                     l1438:
 11821  0040B6  A281               	btfss	3969,1,c	;volatile
 11822  0040B8  D7C3               	goto	l8362
 11823  0040BA  D7FD               	goto	l1438
 11824  0040BC                     l1429:
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;Test.c: 667: }
 11828                           ;Test.c: 668: }
 11829                           ;Test.c: 670: (INTCONbits.GIE = 0);
 11830  0040BC  9EF2               	bcf	intcon,7,c	;volatile
 11831                           
 11832                           ; BSR set to: 0
 11833                           ;Test.c: 671: stopSignals();
 11834  0040BE  ECE4  F02A         	call	_stopSignals	;wreg free
 11835                           
 11836                           ;Test.c: 672: machine_state = Testing_state;
 11837  0040C2  0E03               	movlw	3
 11838  0040C4  0100               	movlb	0	; () banked
 11839  0040C6  6FFC               	movwf	_machine_state& (0+255),b
 11840                           
 11841                           ; BSR set to: 0
 11842  0040C8  0012               	return		;funcret
 11843  0040CA                     __end_of_arm:
 11844                           	opt stack 0
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           intcon2	equ	0xFF1
 11853                           intcon3	equ	0xFF0
 11854                           postinc0	equ	0xFEE
 11855                           wreg	equ	0xFE8
 11856                           postdec1	equ	0xFE5
 11857                           fsr1l	equ	0xFE1
 11858                           indf2	equ	0xFDF
 11859                           postinc2	equ	0xFDE
 11860                           postdec2	equ	0xFDD
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _algorithmTest *****************
 11866 ;; Defined at:
 11867 ;;		line 79 in file "Test.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;Total ram usage:        2 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:   10
 11888 ;; This function calls:
 11889 ;;		_lcdInst
 11890 ;;		_printf
 11891 ;; This function is called by:
 11892 ;;		_Test
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           	psect	text39
 11897  004294                     __ptext39:
 11898                           	opt stack 0
 11899  004294                     _algorithmTest:
 11900                           	opt stack 19
 11901                           
 11902                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;incstack = 0
 11906  004294  0E01               	movlw	1
 11907  004296  EC32  F02B         	call	_lcdInst
 11908  00429A  0E68               	movlw	104
 11909  00429C  0100               	movlb	0	; () banked
 11910  00429E  6FAB               	movwf	??_algorithmTest& (0+255),b
 11911  0042A0  0EE4               	movlw	228
 11912  0042A2                     u9927:
 11913  0042A2  2EE8               	decfsz	wreg,f,c
 11914  0042A4  D7FE               	bra	u9927
 11915  0042A6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11916  0042A8  D7FC               	bra	u9927
 11917  0042AA  F000               	nop	
 11918  0042AC  0E80               	movlw	128
 11919  0042AE  EC32  F02B         	call	_lcdInst
 11920                           
 11921                           ;Test.c: 82: printf("ALGORITHM TEST");
 11922  0042B2  0EDC               	movlw	low STR_70
 11923  0042B4  0100               	movlb	0	; () banked
 11924  0042B6  6F8E               	movwf	printf@f& (0+255),b
 11925  0042B8  0EFE               	movlw	high STR_70
 11926  0042BA  0100               	movlb	0	; () banked
 11927  0042BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11928  0042BE  EC84  F00B         	call	_printf	;wreg free
 11929                           
 11930                           ;Test.c: 83: lcdInst(0b11000000);;
 11931  0042C2  0EC0               	movlw	192
 11932  0042C4  EC32  F02B         	call	_lcdInst
 11933                           
 11934                           ;Test.c: 84: printf("PUSH TO START");
 11935  0042C8  0E15               	movlw	low STR_71
 11936  0042CA  0100               	movlb	0	; () banked
 11937  0042CC  6F8E               	movwf	printf@f& (0+255),b
 11938  0042CE  0EFF               	movlw	high STR_71
 11939  0042D0  0100               	movlb	0	; () banked
 11940  0042D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11941  0042D4  EC84  F00B         	call	_printf	;wreg free
 11942                           
 11943                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 11944  0042D8  0E05               	movlw	5
 11945  0042DA  0100               	movlb	0	; () banked
 11946  0042DC  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11947  0042DE  0E0F               	movlw	15
 11948  0042E0  0100               	movlb	0	; () banked
 11949  0042E2  6FAB               	movwf	??_algorithmTest& (0+255),b
 11950  0042E4  0EF1               	movlw	241
 11951  0042E6                     u9937:
 11952  0042E6  2EE8               	decfsz	wreg,f,c
 11953  0042E8  D7FE               	bra	u9937
 11954  0042EA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11955  0042EC  D7FC               	bra	u9937
 11956  0042EE  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11957  0042F0  D7FA               	bra	u9937
 11958  0042F2                     l1225:
 11959  0042F2  A281               	btfss	3969,1,c	;volatile
 11960  0042F4  D7FE               	goto	l1225
 11961  0042F6                     l1228:
 11962  0042F6  B281               	btfsc	3969,1,c	;volatile
 11963  0042F8  D7FE               	goto	l1228
 11964                           
 11965                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11966  0042FA  0E01               	movlw	1
 11967  0042FC  EC32  F02B         	call	_lcdInst
 11968  004300  0E68               	movlw	104
 11969  004302  0100               	movlb	0	; () banked
 11970  004304  6FAB               	movwf	??_algorithmTest& (0+255),b
 11971  004306  0EE4               	movlw	228
 11972  004308                     u9947:
 11973  004308  2EE8               	decfsz	wreg,f,c
 11974  00430A  D7FE               	bra	u9947
 11975  00430C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11976  00430E  D7FC               	bra	u9947
 11977  004310  F000               	nop	
 11978  004312  0E80               	movlw	128
 11979  004314  EC32  F02B         	call	_lcdInst
 11980                           
 11981                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 11982  004318  0E58               	movlw	low STR_72
 11983  00431A  0100               	movlb	0	; () banked
 11984  00431C  6F8E               	movwf	printf@f& (0+255),b
 11985  00431E  0EFC               	movlw	high STR_72
 11986  004320  0100               	movlb	0	; () banked
 11987  004322  6F8F               	movwf	(printf@f+1)& (0+255),b
 11988  004324  EC84  F00B         	call	_printf	;wreg free
 11989                           
 11990                           ;Test.c: 100: printf("ALG2: 12 CANS");
 11991  004328  0EF9               	movlw	low STR_73
 11992  00432A  0100               	movlb	0	; () banked
 11993  00432C  6F8E               	movwf	printf@f& (0+255),b
 11994  00432E  0EFE               	movlw	high STR_73
 11995  004330  0100               	movlb	0	; () banked
 11996  004332  6F8F               	movwf	(printf@f+1)& (0+255),b
 11997  004334  EC84  F00B         	call	_printf	;wreg free
 11998                           
 11999                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12000  004338  0E59               	movlw	low STR_74
 12001  00433A  0100               	movlb	0	; () banked
 12002  00433C  6F8E               	movwf	printf@f& (0+255),b
 12003  00433E  0EFF               	movlw	high STR_74
 12004  004340  0100               	movlb	0	; () banked
 12005  004342  6F8F               	movwf	(printf@f+1)& (0+255),b
 12006  004344  EC84  F00B         	call	_printf	;wreg free
 12007                           
 12008                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12009  004348  0EBE               	movlw	low STR_75
 12010  00434A  0100               	movlb	0	; () banked
 12011  00434C  6F8E               	movwf	printf@f& (0+255),b
 12012  00434E  0EFE               	movlw	high STR_75
 12013  004350  0100               	movlb	0	; () banked
 12014  004352  6F8F               	movwf	(printf@f+1)& (0+255),b
 12015  004354  EC84  F00B         	call	_printf	;wreg free
 12016                           
 12017                           ;Test.c: 120: printf("ALG5: NO CANS");
 12018  004358  0E07               	movlw	low STR_76
 12019  00435A  0100               	movlb	0	; () banked
 12020  00435C  6F8E               	movwf	printf@f& (0+255),b
 12021  00435E  0EFF               	movlw	high STR_76
 12022  004360  0100               	movlb	0	; () banked
 12023  004362  6F8F               	movwf	(printf@f+1)& (0+255),b
 12024  004364  EC84  F00B         	call	_printf	;wreg free
 12025  004368  0012               	return		;funcret
 12026  00436A                     __end_of_algorithmTest:
 12027                           	opt stack 0
 12028                           tblptru	equ	0xFF8
 12029                           tblptrh	equ	0xFF7
 12030                           tblptrl	equ	0xFF6
 12031                           tablat	equ	0xFF5
 12032                           prodh	equ	0xFF4
 12033                           prodl	equ	0xFF3
 12034                           intcon	equ	0xFF2
 12035                           intcon2	equ	0xFF1
 12036                           intcon3	equ	0xFF0
 12037                           postinc0	equ	0xFEE
 12038                           wreg	equ	0xFE8
 12039                           postdec1	equ	0xFE5
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           
 12048 ;; *************** function _actuatorTest *****************
 12049 ;; Defined at:
 12050 ;;		line 202 in file "Test.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  i               1   45[BANK0 ] unsigned char 
 12055 ;;  i               1   67[BANK0 ] unsigned char 
 12056 ;;  i               1   66[BANK0 ] unsigned char 
 12057 ;;  i               1   65[BANK0 ] unsigned char 
 12058 ;;  i               1   64[BANK0 ] unsigned char 
 12059 ;;  i               1   63[BANK0 ] unsigned char 
 12060 ;;  i               1   62[BANK0 ] unsigned char 
 12061 ;;  i               1   61[BANK0 ] unsigned char 
 12062 ;;  i               1   60[BANK0 ] unsigned char 
 12063 ;;  i               1   59[BANK0 ] unsigned char 
 12064 ;;  i               1   58[BANK0 ] unsigned char 
 12065 ;;  i               1   57[BANK0 ] unsigned char 
 12066 ;;  i               1   56[BANK0 ] unsigned char 
 12067 ;;  i               1   55[BANK0 ] unsigned char 
 12068 ;;  i               1   54[BANK0 ] unsigned char 
 12069 ;;  i               1   53[BANK0 ] unsigned char 
 12070 ;;  i               1   52[BANK0 ] unsigned char 
 12071 ;;  i               1   51[BANK0 ] unsigned char 
 12072 ;;  i               1   50[BANK0 ] unsigned char 
 12073 ;;  i               1   49[BANK0 ] unsigned char 
 12074 ;;  i               1   48[BANK0 ] unsigned char 
 12075 ;;  i               1   47[BANK0 ] unsigned char 
 12076 ;;  i               1   46[BANK0 ] unsigned char 
 12077 ;;  i               2   68[BANK0 ] int 
 12078 ;; Return value:  Size  Location     Type
 12079 ;;                  1    wreg      void 
 12080 ;; Registers used:
 12081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12082 ;; Tracked objects:
 12083 ;;		On entry : 0/0
 12084 ;;		On exit  : 0/0
 12085 ;;		Unchanged: 0/0
 12086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;Total ram usage:       27 bytes
 12092 ;; Hardware stack levels used:    1
 12093 ;; Hardware stack levels required when called:   10
 12094 ;; This function calls:
 12095 ;;		_lcdInst
 12096 ;;		_printf
 12097 ;;		_updateServoPosition
 12098 ;; This function is called by:
 12099 ;;		_Test
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           	psect	text40
 12104  0008D6                     __ptext40:
 12105                           	opt stack 0
 12106  0008D6                     _actuatorTest:
 12107                           	opt stack 19
 12108                           
 12109                           ;Test.c: 204: int i = 0;
 12110                           
 12111                           ;incstack = 0
 12112  0008D6  0E00               	movlw	0
 12113  0008D8  0100               	movlb	0	; () banked
 12114  0008DA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12115  0008DC  0E00               	movlw	0
 12116  0008DE  6FC4               	movwf	actuatorTest@i& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;Test.c: 206: (INTCONbits.GIE = 1);
 12120  0008E0  8EF2               	bsf	intcon,7,c	;volatile
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12124  0008E2  0E01               	movlw	1
 12125  0008E4  EC32  F02B         	call	_lcdInst
 12126  0008E8  0E68               	movlw	104
 12127  0008EA  0100               	movlb	0	; () banked
 12128  0008EC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12129  0008EE  0EE4               	movlw	228
 12130  0008F0                     u9957:
 12131  0008F0  2EE8               	decfsz	wreg,f,c
 12132  0008F2  D7FE               	bra	u9957
 12133  0008F4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12134  0008F6  D7FC               	bra	u9957
 12135  0008F8  F000               	nop	
 12136  0008FA  0E80               	movlw	128
 12137  0008FC  EC32  F02B         	call	_lcdInst
 12138                           
 12139                           ;Test.c: 208: printf("ACTUATORS");
 12140  000900  0E90               	movlw	low STR_88
 12141  000902  0100               	movlb	0	; () banked
 12142  000904  6F8E               	movwf	printf@f& (0+255),b
 12143  000906  0EFF               	movlw	high STR_88
 12144  000908  0100               	movlb	0	; () banked
 12145  00090A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12146  00090C  EC84  F00B         	call	_printf	;wreg free
 12147                           
 12148                           ;Test.c: 209: lcdInst(0b11000000);;
 12149  000910  0EC0               	movlw	192
 12150  000912  EC32  F02B         	call	_lcdInst
 12151                           
 12152                           ;Test.c: 210: printf("PUSH TO START");
 12153  000916  0E15               	movlw	low STR_71
 12154  000918  0100               	movlb	0	; () banked
 12155  00091A  6F8E               	movwf	printf@f& (0+255),b
 12156  00091C  0EFF               	movlw	high STR_71
 12157  00091E  0100               	movlb	0	; () banked
 12158  000920  6F8F               	movwf	(printf@f+1)& (0+255),b
 12159  000922  EC84  F00B         	call	_printf	;wreg free
 12160                           
 12161                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 12162  000926  0E05               	movlw	5
 12163  000928  0100               	movlb	0	; () banked
 12164  00092A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12165  00092C  0E0F               	movlw	15
 12166  00092E  0100               	movlb	0	; () banked
 12167  000930  6FAB               	movwf	??_actuatorTest& (0+255),b
 12168  000932  0EF1               	movlw	241
 12169  000934                     u9967:
 12170  000934  2EE8               	decfsz	wreg,f,c
 12171  000936  D7FE               	bra	u9967
 12172  000938  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12173  00093A  D7FC               	bra	u9967
 12174  00093C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12175  00093E  D7FA               	bra	u9967
 12176  000940                     l1260:
 12177  000940  A281               	btfss	3969,1,c	;volatile
 12178  000942  D7FE               	goto	l1260
 12179  000944                     l1263:
 12180  000944  B281               	btfsc	3969,1,c	;volatile
 12181  000946  D7FE               	goto	l1263
 12182                           
 12183                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12184  000948  0E01               	movlw	1
 12185  00094A  EC32  F02B         	call	_lcdInst
 12186  00094E  0E68               	movlw	104
 12187  000950  0100               	movlb	0	; () banked
 12188  000952  6FAB               	movwf	??_actuatorTest& (0+255),b
 12189  000954  0EE4               	movlw	228
 12190  000956                     u9977:
 12191  000956  2EE8               	decfsz	wreg,f,c
 12192  000958  D7FE               	bra	u9977
 12193  00095A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12194  00095C  D7FC               	bra	u9977
 12195  00095E  F000               	nop	
 12196  000960  0E80               	movlw	128
 12197  000962  EC32  F02B         	call	_lcdInst
 12198                           
 12199                           ;Test.c: 219: printf("TST: DC MOTORS");
 12200  000966  0ECD               	movlw	low STR_90
 12201  000968  0100               	movlb	0	; () banked
 12202  00096A  6F8E               	movwf	printf@f& (0+255),b
 12203  00096C  0EFE               	movlw	high STR_90
 12204  00096E  0100               	movlb	0	; () banked
 12205  000970  6F8F               	movwf	(printf@f+1)& (0+255),b
 12206  000972  EC84  F00B         	call	_printf	;wreg free
 12207                           
 12208                           ;Test.c: 220: lcdInst(0b11000000);;
 12209  000976  0EC0               	movlw	192
 12210  000978  EC32  F02B         	call	_lcdInst
 12211                           
 12212                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 12213  00097C  0EEB               	movlw	low STR_91
 12214  00097E  0100               	movlb	0	; () banked
 12215  000980  6F8E               	movwf	printf@f& (0+255),b
 12216  000982  0EFE               	movlw	high STR_91
 12217  000984  0100               	movlb	0	; () banked
 12218  000986  6F8F               	movwf	(printf@f+1)& (0+255),b
 12219  000988  EC84  F00B         	call	_printf	;wreg free
 12220                           
 12221                           ;Test.c: 222: LATBbits.LATB2 = 1;
 12222  00098C  848A               	bsf	3978,2,c	;volatile
 12223                           
 12224                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 12225  00098E  0E00               	movlw	0
 12226  000990  0100               	movlb	0	; () banked
 12227  000992  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12228  000994  0E00               	movlw	0
 12229  000996  6FC4               	movwf	actuatorTest@i& (0+255),b
 12230                           
 12231                           ; BSR set to: 0
 12232  000998  0100               	movlb	0	; () banked
 12233  00099A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12234  00099C  D008               	goto	l7948
 12235  00099E  0100               	movlb	0	; () banked
 12236  0009A0  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12237  0009A2  E123               	bnz	l1267
 12238  0009A4  0E05               	movlw	5
 12239  0009A6  0100               	movlb	0	; () banked
 12240  0009A8  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12241  0009AA  B0D8               	btfsc	status,0,c
 12242  0009AC  D01E               	goto	l1267
 12243  0009AE                     l7948:
 12244                           
 12245                           ; BSR set to: 0
 12246  0009AE  0E00               	movlw	0
 12247  0009B0  0100               	movlb	0	; () banked
 12248  0009B2  6FAD               	movwf	actuatorTest@i_1730& (0+255),b
 12249  0009B4                     l7950:
 12250                           
 12251                           ; BSR set to: 0
 12252  0009B4  0E63               	movlw	99
 12253  0009B6  0100               	movlb	0	; () banked
 12254  0009B8  65AD               	cpfsgt	actuatorTest@i_1730& (0+255),b
 12255  0009BA  D001               	goto	l7954
 12256  0009BC  D00C               	goto	l7958
 12257  0009BE                     l7954:
 12258                           
 12259                           ; BSR set to: 0
 12260  0009BE  0E68               	movlw	104
 12261  0009C0  0100               	movlb	0	; () banked
 12262  0009C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12263  0009C4  0EE4               	movlw	228
 12264  0009C6                     u9987:
 12265  0009C6  2EE8               	decfsz	wreg,f,c
 12266  0009C8  D7FE               	bra	u9987
 12267  0009CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12268  0009CC  D7FC               	bra	u9987
 12269  0009CE  F000               	nop	
 12270  0009D0  0100               	movlb	0	; () banked
 12271  0009D2  2BAD               	incf	actuatorTest@i_1730& (0+255),f,b
 12272  0009D4  D7EF               	goto	l7950
 12273  0009D6                     l7958:
 12274                           
 12275                           ; BSR set to: 0
 12276  0009D6  0100               	movlb	0	; () banked
 12277  0009D8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12278  0009DA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12279                           
 12280                           ; BSR set to: 0
 12281  0009DC  0100               	movlb	0	; () banked
 12282  0009DE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12283  0009E0  D7E6               	goto	l7948
 12284  0009E2  0100               	movlb	0	; () banked
 12285  0009E4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12286  0009E6  E101               	bnz	u6540
 12287  0009E8  D7DD               	goto	L12
 12288  0009EA                     u6540:
 12289  0009EA                     l1267:
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Test.c: 224: LATBbits.LATB2 = 0;
 12293  0009EA  948A               	bcf	3978,2,c	;volatile
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12297  0009EC  0E01               	movlw	1
 12298  0009EE  EC32  F02B         	call	_lcdInst
 12299  0009F2  0E68               	movlw	104
 12300  0009F4  0100               	movlb	0	; () banked
 12301  0009F6  6FAB               	movwf	??_actuatorTest& (0+255),b
 12302  0009F8  0EE4               	movlw	228
 12303  0009FA                     u9997:
 12304  0009FA  2EE8               	decfsz	wreg,f,c
 12305  0009FC  D7FE               	bra	u9997
 12306  0009FE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12307  000A00  D7FC               	bra	u9997
 12308  000A02  F000               	nop	
 12309  000A04  0E80               	movlw	128
 12310  000A06  EC32  F02B         	call	_lcdInst
 12311                           
 12312                           ;Test.c: 231: printf("TST: COND SOLN'D");
 12313  000A0A  0E69               	movlw	low STR_92
 12314  000A0C  0100               	movlb	0	; () banked
 12315  000A0E  6F8E               	movwf	printf@f& (0+255),b
 12316  000A10  0EFC               	movlw	high STR_92
 12317  000A12  0100               	movlb	0	; () banked
 12318  000A14  6F8F               	movwf	(printf@f+1)& (0+255),b
 12319  000A16  EC84  F00B         	call	_printf	;wreg free
 12320                           
 12321                           ;Test.c: 232: lcdInst(0b11000000);;
 12322  000A1A  0EC0               	movlw	192
 12323  000A1C  EC32  F02B         	call	_lcdInst
 12324                           
 12325                           ;Test.c: 233: printf("PIN RA3...");
 12326  000A20  0E65               	movlw	low STR_93
 12327  000A22  0100               	movlb	0	; () banked
 12328  000A24  6F8E               	movwf	printf@f& (0+255),b
 12329  000A26  0EFF               	movlw	high STR_93
 12330  000A28  0100               	movlb	0	; () banked
 12331  000A2A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12332  000A2C  EC84  F00B         	call	_printf	;wreg free
 12333                           
 12334                           ;Test.c: 234: for(i=0;i<5;i++){
 12335  000A30  0E00               	movlw	0
 12336  000A32  0100               	movlb	0	; () banked
 12337  000A34  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12338  000A36  0E00               	movlw	0
 12339  000A38  6FC4               	movwf	actuatorTest@i& (0+255),b
 12340                           
 12341                           ; BSR set to: 0
 12342  000A3A  0100               	movlb	0	; () banked
 12343  000A3C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12344  000A3E  D008               	goto	l1270
 12345  000A40  0100               	movlb	0	; () banked
 12346  000A42  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12347  000A44  E12C               	bnz	l1271
 12348  000A46  0E05               	movlw	5
 12349  000A48  0100               	movlb	0	; () banked
 12350  000A4A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12351  000A4C  B0D8               	btfsc	status,0,c
 12352  000A4E  D027               	goto	l1271
 12353  000A50                     l1270:
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;Test.c: 235: LATAbits.LATA3 = 1;
 12357  000A50  8689               	bsf	3977,3,c	;volatile
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 12361  000A52  0E0D               	movlw	13
 12362  000A54  0100               	movlb	0	; () banked
 12363  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12364  000A58  0E2D               	movlw	45
 12365  000A5A  0100               	movlb	0	; () banked
 12366  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12367  000A5E  0ED7               	movlw	215
 12368  000A60                     u10007:
 12369  000A60  2EE8               	decfsz	wreg,f,c
 12370  000A62  D7FE               	bra	u10007
 12371  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12372  000A66  D7FC               	bra	u10007
 12373  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12374  000A6A  D7FA               	bra	u10007
 12375  000A6C  D000               	nop2	
 12376                           
 12377                           ;Test.c: 237: LATAbits.LATA3 = !1;
 12378  000A6E  9689               	bcf	3977,3,c	;volatile
 12379                           
 12380                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12381  000A70  0E1D               	movlw	29
 12382  000A72  0100               	movlb	0	; () banked
 12383  000A74  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12384  000A76  0E69               	movlw	105
 12385  000A78  0100               	movlb	0	; () banked
 12386  000A7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12387  000A7C  0EA5               	movlw	165
 12388  000A7E                     u10017:
 12389  000A7E  2EE8               	decfsz	wreg,f,c
 12390  000A80  D7FE               	bra	u10017
 12391  000A82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12392  000A84  D7FC               	bra	u10017
 12393  000A86  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12394  000A88  D7FA               	bra	u10017
 12395  000A8A  0100               	movlb	0	; () banked
 12396  000A8C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12397  000A8E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12398  000A90  0100               	movlb	0	; () banked
 12399  000A92  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12400  000A94  D7DD               	goto	l1270
 12401  000A96  0100               	movlb	0	; () banked
 12402  000A98  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12403  000A9A  E101               	bnz	u6560
 12404  000A9C  D7D4               	goto	L13
 12405  000A9E                     u6560:
 12406  000A9E                     l1271:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;Test.c: 239: }
 12410                           ;Test.c: 240: LATAbits.LATA3 = !1;
 12411  000A9E  9689               	bcf	3977,3,c	;volatile
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12415  000AA0  0E01               	movlw	1
 12416  000AA2  EC32  F02B         	call	_lcdInst
 12417  000AA6  0E68               	movlw	104
 12418  000AA8  0100               	movlb	0	; () banked
 12419  000AAA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12420  000AAC  0EE4               	movlw	228
 12421  000AAE                     u10027:
 12422  000AAE  2EE8               	decfsz	wreg,f,c
 12423  000AB0  D7FE               	bra	u10027
 12424  000AB2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12425  000AB4  D7FC               	bra	u10027
 12426  000AB6  F000               	nop	
 12427  000AB8  0E80               	movlw	128
 12428  000ABA  EC32  F02B         	call	_lcdInst
 12429                           
 12430                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 12431  000ABE  0E7A               	movlw	low STR_94
 12432  000AC0  0100               	movlb	0	; () banked
 12433  000AC2  6F8E               	movwf	printf@f& (0+255),b
 12434  000AC4  0EFC               	movlw	high STR_94
 12435  000AC6  0100               	movlb	0	; () banked
 12436  000AC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12437  000ACA  EC84  F00B         	call	_printf	;wreg free
 12438                           
 12439                           ;Test.c: 248: lcdInst(0b11000000);;
 12440  000ACE  0EC0               	movlw	192
 12441  000AD0  EC32  F02B         	call	_lcdInst
 12442                           
 12443                           ;Test.c: 249: printf("PIN RA4...");
 12444  000AD4  0E70               	movlw	low STR_95
 12445  000AD6  0100               	movlb	0	; () banked
 12446  000AD8  6F8E               	movwf	printf@f& (0+255),b
 12447  000ADA  0EFF               	movlw	high STR_95
 12448  000ADC  0100               	movlb	0	; () banked
 12449  000ADE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12450  000AE0  EC84  F00B         	call	_printf	;wreg free
 12451                           
 12452                           ;Test.c: 250: for(i=0;i<5;i++){
 12453  000AE4  0E00               	movlw	0
 12454  000AE6  0100               	movlb	0	; () banked
 12455  000AE8  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12456  000AEA  0E00               	movlw	0
 12457  000AEC  6FC4               	movwf	actuatorTest@i& (0+255),b
 12458                           
 12459                           ; BSR set to: 0
 12460  000AEE  0100               	movlb	0	; () banked
 12461  000AF0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12462  000AF2  D008               	goto	l1272
 12463  000AF4  0100               	movlb	0	; () banked
 12464  000AF6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12465  000AF8  E12C               	bnz	l1273
 12466  000AFA  0E05               	movlw	5
 12467  000AFC  0100               	movlb	0	; () banked
 12468  000AFE  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12469  000B00  B0D8               	btfsc	status,0,c
 12470  000B02  D027               	goto	l1273
 12471  000B04                     l1272:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;Test.c: 251: LATAbits.LATA4 = 1;
 12475  000B04  8889               	bsf	3977,4,c	;volatile
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 12479  000B06  0E0D               	movlw	13
 12480  000B08  0100               	movlb	0	; () banked
 12481  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12482  000B0C  0E2D               	movlw	45
 12483  000B0E  0100               	movlb	0	; () banked
 12484  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 12485  000B12  0ED7               	movlw	215
 12486  000B14                     u10037:
 12487  000B14  2EE8               	decfsz	wreg,f,c
 12488  000B16  D7FE               	bra	u10037
 12489  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12490  000B1A  D7FC               	bra	u10037
 12491  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12492  000B1E  D7FA               	bra	u10037
 12493  000B20  D000               	nop2	
 12494                           
 12495                           ;Test.c: 253: LATAbits.LATA4 = !1;
 12496  000B22  9889               	bcf	3977,4,c	;volatile
 12497                           
 12498                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 12499  000B24  0E1D               	movlw	29
 12500  000B26  0100               	movlb	0	; () banked
 12501  000B28  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 12502  000B2A  0E69               	movlw	105
 12503  000B2C  0100               	movlb	0	; () banked
 12504  000B2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12505  000B30  0EA5               	movlw	165
 12506  000B32                     u10047:
 12507  000B32  2EE8               	decfsz	wreg,f,c
 12508  000B34  D7FE               	bra	u10047
 12509  000B36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12510  000B38  D7FC               	bra	u10047
 12511  000B3A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 12512  000B3C  D7FA               	bra	u10047
 12513  000B3E  0100               	movlb	0	; () banked
 12514  000B40  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12515  000B42  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12516  000B44  0100               	movlb	0	; () banked
 12517  000B46  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12518  000B48  D7DD               	goto	l1272
 12519  000B4A  0100               	movlb	0	; () banked
 12520  000B4C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 12521  000B4E  E101               	bnz	u6580
 12522  000B50  D7D4               	goto	L14
 12523  000B52                     u6580:
 12524  000B52                     l1273:
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;Test.c: 255: }
 12528                           ;Test.c: 256: LATAbits.LATA4 = !1;
 12529  000B52  9889               	bcf	3977,4,c	;volatile
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12533  000B54  0E01               	movlw	1
 12534  000B56  EC32  F02B         	call	_lcdInst
 12535  000B5A  0E68               	movlw	104
 12536  000B5C  0100               	movlb	0	; () banked
 12537  000B5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12538  000B60  0EE4               	movlw	228
 12539  000B62                     u10057:
 12540  000B62  2EE8               	decfsz	wreg,f,c
 12541  000B64  D7FE               	bra	u10057
 12542  000B66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12543  000B68  D7FC               	bra	u10057
 12544  000B6A  F000               	nop	
 12545  000B6C  0E80               	movlw	128
 12546  000B6E  EC32  F02B         	call	_lcdInst
 12547                           
 12548                           ;Test.c: 260: machine_state = Sorting_state;
 12549  000B72  0E01               	movlw	1
 12550  000B74  0100               	movlb	0	; () banked
 12551  000B76  6FFC               	movwf	_machine_state& (0+255),b
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;Test.c: 261: was_low_1 = 0;
 12555  000B78  0E00               	movlw	0
 12556  000B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 12557  000B7C  0E00               	movlw	0
 12558  000B7E  6E77               	movwf	_was_low_1,c	;volatile
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;Test.c: 262: was_low_1 = 0;
 12562  000B80  0E00               	movlw	0
 12563  000B82  6E78               	movwf	_was_low_1+1,c	;volatile
 12564  000B84  0E00               	movlw	0
 12565  000B86  6E77               	movwf	_was_low_1,c	;volatile
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Test.c: 269: printf("TST: PAN SERVO");
 12569  000B88  0EAF               	movlw	low STR_96
 12570  000B8A  0100               	movlb	0	; () banked
 12571  000B8C  6F8E               	movwf	printf@f& (0+255),b
 12572  000B8E  0EFE               	movlw	high STR_96
 12573  000B90  0100               	movlb	0	; () banked
 12574  000B92  6F8F               	movwf	(printf@f+1)& (0+255),b
 12575  000B94  EC84  F00B         	call	_printf	;wreg free
 12576                           
 12577                           ;Test.c: 270: lcdInst(0b11000000);;
 12578  000B98  0EC0               	movlw	192
 12579  000B9A  EC32  F02B         	call	_lcdInst
 12580                           
 12581                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 12582  000B9E  0ED0               	movlw	low STR_97
 12583  000BA0  0100               	movlb	0	; () banked
 12584  000BA2  6F8E               	movwf	printf@f& (0+255),b
 12585  000BA4  0EFB               	movlw	high STR_97
 12586  000BA6  0100               	movlb	0	; () banked
 12587  000BA8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12588  000BAA  EC84  F00B         	call	_printf	;wreg free
 12589                           
 12590                           ;Test.c: 272: updateServoPosition(1200, 1);
 12591  000BAE  0E04               	movlw	4
 12592  000BB0  0100               	movlb	0	; () banked
 12593  000BB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12594  000BB4  0EB0               	movlw	176
 12595  000BB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12596  000BB8  0E00               	movlw	0
 12597  000BBA  0100               	movlb	0	; () banked
 12598  000BBC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12599  000BBE  0E01               	movlw	1
 12600  000BC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12601  000BC2  EC62  F024         	call	_updateServoPosition	;wreg free
 12602                           
 12603                           ;Test.c: 273: TMR1ON = 1;
 12604  000BC6  80CD               	bsf	4045,0,c	;volatile
 12605                           
 12606                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12607  000BC8  0E00               	movlw	0
 12608  000BCA  0100               	movlb	0	; () banked
 12609  000BCC  6FAE               	movwf	actuatorTest@i_1737& (0+255),b
 12610  000BCE                     l8034:
 12611                           
 12612                           ; BSR set to: 0
 12613  000BCE  0E63               	movlw	99
 12614  000BD0  0100               	movlb	0	; () banked
 12615  000BD2  65AE               	cpfsgt	actuatorTest@i_1737& (0+255),b
 12616  000BD4  D001               	goto	l8038
 12617  000BD6  D00C               	goto	l8042
 12618  000BD8                     l8038:
 12619                           
 12620                           ; BSR set to: 0
 12621  000BD8  0E68               	movlw	104
 12622  000BDA  0100               	movlb	0	; () banked
 12623  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12624  000BDE  0EE4               	movlw	228
 12625  000BE0                     u10067:
 12626  000BE0  2EE8               	decfsz	wreg,f,c
 12627  000BE2  D7FE               	bra	u10067
 12628  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12629  000BE6  D7FC               	bra	u10067
 12630  000BE8  F000               	nop	
 12631  000BEA  0100               	movlb	0	; () banked
 12632  000BEC  2BAE               	incf	actuatorTest@i_1737& (0+255),f,b
 12633  000BEE  D7EF               	goto	l8034
 12634  000BF0                     l8042:
 12635                           
 12636                           ; BSR set to: 0
 12637  000BF0  0E00               	movlw	0
 12638  000BF2  0100               	movlb	0	; () banked
 12639  000BF4  6FAF               	movwf	actuatorTest@i_1738& (0+255),b
 12640  000BF6                     l8044:
 12641                           
 12642                           ; BSR set to: 0
 12643  000BF6  0E63               	movlw	99
 12644  000BF8  0100               	movlb	0	; () banked
 12645  000BFA  65AF               	cpfsgt	actuatorTest@i_1738& (0+255),b
 12646  000BFC  D001               	goto	l8048
 12647  000BFE  D00C               	goto	l8052
 12648  000C00                     l8048:
 12649                           
 12650                           ; BSR set to: 0
 12651  000C00  0E68               	movlw	104
 12652  000C02  0100               	movlb	0	; () banked
 12653  000C04  6FAB               	movwf	??_actuatorTest& (0+255),b
 12654  000C06  0EE4               	movlw	228
 12655  000C08                     u10077:
 12656  000C08  2EE8               	decfsz	wreg,f,c
 12657  000C0A  D7FE               	bra	u10077
 12658  000C0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12659  000C0E  D7FC               	bra	u10077
 12660  000C10  F000               	nop	
 12661  000C12  0100               	movlb	0	; () banked
 12662  000C14  2BAF               	incf	actuatorTest@i_1738& (0+255),f,b
 12663  000C16  D7EF               	goto	l8044
 12664  000C18                     l8052:
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12668  000C18  0E80               	movlw	128
 12669  000C1A  EC32  F02B         	call	_lcdInst
 12670  000C1E  0EC0               	movlw	192
 12671  000C20  EC32  F02B         	call	_lcdInst
 12672                           
 12673                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 12674  000C24  0EBF               	movlw	low STR_98
 12675  000C26  0100               	movlb	0	; () banked
 12676  000C28  6F8E               	movwf	printf@f& (0+255),b
 12677  000C2A  0EFB               	movlw	high STR_98
 12678  000C2C  0100               	movlb	0	; () banked
 12679  000C2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12680  000C30  EC84  F00B         	call	_printf	;wreg free
 12681                           
 12682                           ;Test.c: 278: updateServoPosition(500, 1);
 12683  000C34  0E01               	movlw	1
 12684  000C36  0100               	movlb	0	; () banked
 12685  000C38  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12686  000C3A  0EF4               	movlw	244
 12687  000C3C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12688  000C3E  0E00               	movlw	0
 12689  000C40  0100               	movlb	0	; () banked
 12690  000C42  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12691  000C44  0E01               	movlw	1
 12692  000C46  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12693  000C48  EC62  F024         	call	_updateServoPosition	;wreg free
 12694                           
 12695                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12696  000C4C  0E00               	movlw	0
 12697  000C4E  0100               	movlb	0	; () banked
 12698  000C50  6FB0               	movwf	actuatorTest@i_1740& (0+255),b
 12699  000C52                     l8060:
 12700                           
 12701                           ; BSR set to: 0
 12702  000C52  0E63               	movlw	99
 12703  000C54  0100               	movlb	0	; () banked
 12704  000C56  65B0               	cpfsgt	actuatorTest@i_1740& (0+255),b
 12705  000C58  D001               	goto	l8064
 12706  000C5A  D00C               	goto	l8068
 12707  000C5C                     l8064:
 12708                           
 12709                           ; BSR set to: 0
 12710  000C5C  0E68               	movlw	104
 12711  000C5E  0100               	movlb	0	; () banked
 12712  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 12713  000C62  0EE4               	movlw	228
 12714  000C64                     u10087:
 12715  000C64  2EE8               	decfsz	wreg,f,c
 12716  000C66  D7FE               	bra	u10087
 12717  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12718  000C6A  D7FC               	bra	u10087
 12719  000C6C  F000               	nop	
 12720  000C6E  0100               	movlb	0	; () banked
 12721  000C70  2BB0               	incf	actuatorTest@i_1740& (0+255),f,b
 12722  000C72  D7EF               	goto	l8060
 12723  000C74                     l8068:
 12724                           
 12725                           ; BSR set to: 0
 12726  000C74  0E00               	movlw	0
 12727  000C76  0100               	movlb	0	; () banked
 12728  000C78  6FB1               	movwf	actuatorTest@i_1741& (0+255),b
 12729  000C7A                     l8070:
 12730                           
 12731                           ; BSR set to: 0
 12732  000C7A  0E63               	movlw	99
 12733  000C7C  0100               	movlb	0	; () banked
 12734  000C7E  65B1               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12735  000C80  D001               	goto	l8074
 12736  000C82  D00C               	goto	l8078
 12737  000C84                     l8074:
 12738                           
 12739                           ; BSR set to: 0
 12740  000C84  0E68               	movlw	104
 12741  000C86  0100               	movlb	0	; () banked
 12742  000C88  6FAB               	movwf	??_actuatorTest& (0+255),b
 12743  000C8A  0EE4               	movlw	228
 12744  000C8C                     u10097:
 12745  000C8C  2EE8               	decfsz	wreg,f,c
 12746  000C8E  D7FE               	bra	u10097
 12747  000C90  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12748  000C92  D7FC               	bra	u10097
 12749  000C94  F000               	nop	
 12750  000C96  0100               	movlb	0	; () banked
 12751  000C98  2BB1               	incf	actuatorTest@i_1741& (0+255),f,b
 12752  000C9A  D7EF               	goto	l8070
 12753  000C9C                     l8078:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12757  000C9C  0E80               	movlw	128
 12758  000C9E  EC32  F02B         	call	_lcdInst
 12759  000CA2  0EC0               	movlw	192
 12760  000CA4  EC32  F02B         	call	_lcdInst
 12761                           
 12762                           ;Test.c: 282: printf("LEFT -- 2s      ");
 12763  000CA8  0E9D               	movlw	low STR_99
 12764  000CAA  0100               	movlb	0	; () banked
 12765  000CAC  6F8E               	movwf	printf@f& (0+255),b
 12766  000CAE  0EFB               	movlw	high STR_99
 12767  000CB0  0100               	movlb	0	; () banked
 12768  000CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12769  000CB4  EC84  F00B         	call	_printf	;wreg free
 12770                           
 12771                           ;Test.c: 283: updateServoPosition(2400, 1);
 12772  000CB8  0E09               	movlw	9
 12773  000CBA  0100               	movlb	0	; () banked
 12774  000CBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12775  000CBE  0E60               	movlw	96
 12776  000CC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12777  000CC2  0E00               	movlw	0
 12778  000CC4  0100               	movlb	0	; () banked
 12779  000CC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12780  000CC8  0E01               	movlw	1
 12781  000CCA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12782  000CCC  EC62  F024         	call	_updateServoPosition	;wreg free
 12783                           
 12784                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12785  000CD0  0E00               	movlw	0
 12786  000CD2  0100               	movlb	0	; () banked
 12787  000CD4  6FB2               	movwf	actuatorTest@i_1743& (0+255),b
 12788  000CD6                     l8086:
 12789                           
 12790                           ; BSR set to: 0
 12791  000CD6  0E63               	movlw	99
 12792  000CD8  0100               	movlb	0	; () banked
 12793  000CDA  65B2               	cpfsgt	actuatorTest@i_1743& (0+255),b
 12794  000CDC  D001               	goto	l8090
 12795  000CDE  D00C               	goto	l8094
 12796  000CE0                     l8090:
 12797                           
 12798                           ; BSR set to: 0
 12799  000CE0  0E68               	movlw	104
 12800  000CE2  0100               	movlb	0	; () banked
 12801  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12802  000CE6  0EE4               	movlw	228
 12803  000CE8                     u10107:
 12804  000CE8  2EE8               	decfsz	wreg,f,c
 12805  000CEA  D7FE               	bra	u10107
 12806  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12807  000CEE  D7FC               	bra	u10107
 12808  000CF0  F000               	nop	
 12809  000CF2  0100               	movlb	0	; () banked
 12810  000CF4  2BB2               	incf	actuatorTest@i_1743& (0+255),f,b
 12811  000CF6  D7EF               	goto	l8086
 12812  000CF8                     l8094:
 12813                           
 12814                           ; BSR set to: 0
 12815  000CF8  0E00               	movlw	0
 12816  000CFA  0100               	movlb	0	; () banked
 12817  000CFC  6FB3               	movwf	actuatorTest@i_1744& (0+255),b
 12818  000CFE                     l8096:
 12819                           
 12820                           ; BSR set to: 0
 12821  000CFE  0E63               	movlw	99
 12822  000D00  0100               	movlb	0	; () banked
 12823  000D02  65B3               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12824  000D04  D001               	goto	l8100
 12825  000D06  D00C               	goto	l8104
 12826  000D08                     l8100:
 12827                           
 12828                           ; BSR set to: 0
 12829  000D08  0E68               	movlw	104
 12830  000D0A  0100               	movlb	0	; () banked
 12831  000D0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12832  000D0E  0EE4               	movlw	228
 12833  000D10                     u10117:
 12834  000D10  2EE8               	decfsz	wreg,f,c
 12835  000D12  D7FE               	bra	u10117
 12836  000D14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12837  000D16  D7FC               	bra	u10117
 12838  000D18  F000               	nop	
 12839  000D1A  0100               	movlb	0	; () banked
 12840  000D1C  2BB3               	incf	actuatorTest@i_1744& (0+255),f,b
 12841  000D1E  D7EF               	goto	l8096
 12842  000D20                     l8104:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12846  000D20  0E80               	movlw	128
 12847  000D22  EC32  F02B         	call	_lcdInst
 12848  000D26  0EC0               	movlw	192
 12849  000D28  EC32  F02B         	call	_lcdInst
 12850                           
 12851                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 12852  000D2C  0E25               	movlw	low STR_100
 12853  000D2E  0100               	movlb	0	; () banked
 12854  000D30  6F8E               	movwf	printf@f& (0+255),b
 12855  000D32  0EFC               	movlw	high STR_100
 12856  000D34  0100               	movlb	0	; () banked
 12857  000D36  6F8F               	movwf	(printf@f+1)& (0+255),b
 12858  000D38  EC84  F00B         	call	_printf	;wreg free
 12859                           
 12860                           ;Test.c: 288: updateServoPosition(1670, 1);
 12861  000D3C  0E06               	movlw	6
 12862  000D3E  0100               	movlb	0	; () banked
 12863  000D40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12864  000D42  0E86               	movlw	134
 12865  000D44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12866  000D46  0E00               	movlw	0
 12867  000D48  0100               	movlb	0	; () banked
 12868  000D4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12869  000D4C  0E01               	movlw	1
 12870  000D4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12871  000D50  EC62  F024         	call	_updateServoPosition	;wreg free
 12872                           
 12873                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12874  000D54  0E00               	movlw	0
 12875  000D56  0100               	movlb	0	; () banked
 12876  000D58  6FB4               	movwf	actuatorTest@i_1746& (0+255),b
 12877  000D5A                     l8112:
 12878                           
 12879                           ; BSR set to: 0
 12880  000D5A  0E63               	movlw	99
 12881  000D5C  0100               	movlb	0	; () banked
 12882  000D5E  65B4               	cpfsgt	actuatorTest@i_1746& (0+255),b
 12883  000D60  D001               	goto	l8116
 12884  000D62  D00C               	goto	l8120
 12885  000D64                     l8116:
 12886                           
 12887                           ; BSR set to: 0
 12888  000D64  0E68               	movlw	104
 12889  000D66  0100               	movlb	0	; () banked
 12890  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 12891  000D6A  0EE4               	movlw	228
 12892  000D6C                     u10127:
 12893  000D6C  2EE8               	decfsz	wreg,f,c
 12894  000D6E  D7FE               	bra	u10127
 12895  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12896  000D72  D7FC               	bra	u10127
 12897  000D74  F000               	nop	
 12898  000D76  0100               	movlb	0	; () banked
 12899  000D78  2BB4               	incf	actuatorTest@i_1746& (0+255),f,b
 12900  000D7A  D7EF               	goto	l8112
 12901  000D7C                     l8120:
 12902                           
 12903                           ; BSR set to: 0
 12904  000D7C  0E00               	movlw	0
 12905  000D7E  0100               	movlb	0	; () banked
 12906  000D80  6FB5               	movwf	actuatorTest@i_1747& (0+255),b
 12907  000D82                     l8122:
 12908                           
 12909                           ; BSR set to: 0
 12910  000D82  0E63               	movlw	99
 12911  000D84  0100               	movlb	0	; () banked
 12912  000D86  65B5               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12913  000D88  D001               	goto	l8126
 12914  000D8A  D00C               	goto	l8130
 12915  000D8C                     l8126:
 12916                           
 12917                           ; BSR set to: 0
 12918  000D8C  0E68               	movlw	104
 12919  000D8E  0100               	movlb	0	; () banked
 12920  000D90  6FAB               	movwf	??_actuatorTest& (0+255),b
 12921  000D92  0EE4               	movlw	228
 12922  000D94                     u10137:
 12923  000D94  2EE8               	decfsz	wreg,f,c
 12924  000D96  D7FE               	bra	u10137
 12925  000D98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12926  000D9A  D7FC               	bra	u10137
 12927  000D9C  F000               	nop	
 12928  000D9E  0100               	movlb	0	; () banked
 12929  000DA0  2BB5               	incf	actuatorTest@i_1747& (0+255),f,b
 12930  000DA2  D7EF               	goto	l8122
 12931  000DA4                     l8130:
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12935  000DA4  0E80               	movlw	128
 12936  000DA6  EC32  F02B         	call	_lcdInst
 12937  000DAA  0EC0               	movlw	192
 12938  000DAC  EC32  F02B         	call	_lcdInst
 12939                           
 12940                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 12941  000DB0  0E36               	movlw	low STR_101
 12942  000DB2  0100               	movlb	0	; () banked
 12943  000DB4  6F8E               	movwf	printf@f& (0+255),b
 12944  000DB6  0EFC               	movlw	high STR_101
 12945  000DB8  0100               	movlb	0	; () banked
 12946  000DBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12947  000DBC  EC84  F00B         	call	_printf	;wreg free
 12948                           
 12949                           ;Test.c: 293: updateServoPosition(850, 1);
 12950  000DC0  0E03               	movlw	3
 12951  000DC2  0100               	movlb	0	; () banked
 12952  000DC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12953  000DC6  0E52               	movlw	82
 12954  000DC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12955  000DCA  0E00               	movlw	0
 12956  000DCC  0100               	movlb	0	; () banked
 12957  000DCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12958  000DD0  0E01               	movlw	1
 12959  000DD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12960  000DD4  EC62  F024         	call	_updateServoPosition	;wreg free
 12961                           
 12962                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12963  000DD8  0E00               	movlw	0
 12964  000DDA  0100               	movlb	0	; () banked
 12965  000DDC  6FB6               	movwf	actuatorTest@i_1749& (0+255),b
 12966  000DDE                     l8138:
 12967                           
 12968                           ; BSR set to: 0
 12969  000DDE  0E63               	movlw	99
 12970  000DE0  0100               	movlb	0	; () banked
 12971  000DE2  65B6               	cpfsgt	actuatorTest@i_1749& (0+255),b
 12972  000DE4  D001               	goto	l8142
 12973  000DE6  D00C               	goto	l8146
 12974  000DE8                     l8142:
 12975                           
 12976                           ; BSR set to: 0
 12977  000DE8  0E68               	movlw	104
 12978  000DEA  0100               	movlb	0	; () banked
 12979  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12980  000DEE  0EE4               	movlw	228
 12981  000DF0                     u10147:
 12982  000DF0  2EE8               	decfsz	wreg,f,c
 12983  000DF2  D7FE               	bra	u10147
 12984  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12985  000DF6  D7FC               	bra	u10147
 12986  000DF8  F000               	nop	
 12987  000DFA  0100               	movlb	0	; () banked
 12988  000DFC  2BB6               	incf	actuatorTest@i_1749& (0+255),f,b
 12989  000DFE  D7EF               	goto	l8138
 12990  000E00                     l8146:
 12991                           
 12992                           ; BSR set to: 0
 12993  000E00  0E00               	movlw	0
 12994  000E02  0100               	movlb	0	; () banked
 12995  000E04  6FB7               	movwf	actuatorTest@i_1750& (0+255),b
 12996  000E06                     l8148:
 12997                           
 12998                           ; BSR set to: 0
 12999  000E06  0E63               	movlw	99
 13000  000E08  0100               	movlb	0	; () banked
 13001  000E0A  65B7               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13002  000E0C  D001               	goto	l8152
 13003  000E0E  D00C               	goto	l8156
 13004  000E10                     l8152:
 13005                           
 13006                           ; BSR set to: 0
 13007  000E10  0E68               	movlw	104
 13008  000E12  0100               	movlb	0	; () banked
 13009  000E14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13010  000E16  0EE4               	movlw	228
 13011  000E18                     u10157:
 13012  000E18  2EE8               	decfsz	wreg,f,c
 13013  000E1A  D7FE               	bra	u10157
 13014  000E1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13015  000E1E  D7FC               	bra	u10157
 13016  000E20  F000               	nop	
 13017  000E22  0100               	movlb	0	; () banked
 13018  000E24  2BB7               	incf	actuatorTest@i_1750& (0+255),f,b
 13019  000E26  D7EF               	goto	l8148
 13020  000E28                     l8156:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13024  000E28  0E80               	movlw	128
 13025  000E2A  EC32  F02B         	call	_lcdInst
 13026  000E2E  0EC0               	movlw	192
 13027  000E30  EC32  F02B         	call	_lcdInst
 13028                           
 13029                           ;Test.c: 297: printf("MID -- 2s       ");
 13030  000E34  0E7B               	movlw	low STR_102
 13031  000E36  0100               	movlb	0	; () banked
 13032  000E38  6F8E               	movwf	printf@f& (0+255),b
 13033  000E3A  0EFB               	movlw	high STR_102
 13034  000E3C  0100               	movlb	0	; () banked
 13035  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13036  000E40  EC84  F00B         	call	_printf	;wreg free
 13037                           
 13038                           ;Test.c: 298: updateServoPosition(1200, 1);
 13039  000E44  0E04               	movlw	4
 13040  000E46  0100               	movlb	0	; () banked
 13041  000E48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13042  000E4A  0EB0               	movlw	176
 13043  000E4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13044  000E4E  0E00               	movlw	0
 13045  000E50  0100               	movlb	0	; () banked
 13046  000E52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13047  000E54  0E01               	movlw	1
 13048  000E56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13049  000E58  EC62  F024         	call	_updateServoPosition	;wreg free
 13050                           
 13051                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13052  000E5C  0E00               	movlw	0
 13053  000E5E  0100               	movlb	0	; () banked
 13054  000E60  6FB8               	movwf	actuatorTest@i_1752& (0+255),b
 13055  000E62                     l8164:
 13056                           
 13057                           ; BSR set to: 0
 13058  000E62  0E63               	movlw	99
 13059  000E64  0100               	movlb	0	; () banked
 13060  000E66  65B8               	cpfsgt	actuatorTest@i_1752& (0+255),b
 13061  000E68  D001               	goto	l8168
 13062  000E6A  D00C               	goto	l8172
 13063  000E6C                     l8168:
 13064                           
 13065                           ; BSR set to: 0
 13066  000E6C  0E68               	movlw	104
 13067  000E6E  0100               	movlb	0	; () banked
 13068  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 13069  000E72  0EE4               	movlw	228
 13070  000E74                     u10167:
 13071  000E74  2EE8               	decfsz	wreg,f,c
 13072  000E76  D7FE               	bra	u10167
 13073  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13074  000E7A  D7FC               	bra	u10167
 13075  000E7C  F000               	nop	
 13076  000E7E  0100               	movlb	0	; () banked
 13077  000E80  2BB8               	incf	actuatorTest@i_1752& (0+255),f,b
 13078  000E82  D7EF               	goto	l8164
 13079  000E84                     l8172:
 13080                           
 13081                           ; BSR set to: 0
 13082  000E84  0E00               	movlw	0
 13083  000E86  0100               	movlb	0	; () banked
 13084  000E88  6FB9               	movwf	actuatorTest@i_1753& (0+255),b
 13085  000E8A                     l8174:
 13086                           
 13087                           ; BSR set to: 0
 13088  000E8A  0E63               	movlw	99
 13089  000E8C  0100               	movlb	0	; () banked
 13090  000E8E  65B9               	cpfsgt	actuatorTest@i_1753& (0+255),b
 13091  000E90  D001               	goto	l8178
 13092  000E92  D00C               	goto	l1297
 13093  000E94                     l8178:
 13094                           
 13095                           ; BSR set to: 0
 13096  000E94  0E68               	movlw	104
 13097  000E96  0100               	movlb	0	; () banked
 13098  000E98  6FAB               	movwf	??_actuatorTest& (0+255),b
 13099  000E9A  0EE4               	movlw	228
 13100  000E9C                     u10177:
 13101  000E9C  2EE8               	decfsz	wreg,f,c
 13102  000E9E  D7FE               	bra	u10177
 13103  000EA0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13104  000EA2  D7FC               	bra	u10177
 13105  000EA4  F000               	nop	
 13106  000EA6  0100               	movlb	0	; () banked
 13107  000EA8  2BB9               	incf	actuatorTest@i_1753& (0+255),f,b
 13108  000EAA  D7EF               	goto	l8174
 13109  000EAC                     l1297:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;Test.c: 300: TMR1ON = 0;
 13113  000EAC  90CD               	bcf	4045,0,c	;volatile
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;Test.c: 307: printf("TST: TILT SERVO");
 13117  000EAE  0E44               	movlw	low STR_103
 13118  000EB0  0100               	movlb	0	; () banked
 13119  000EB2  6F8E               	movwf	printf@f& (0+255),b
 13120  000EB4  0EFE               	movlw	high STR_103
 13121  000EB6  0100               	movlb	0	; () banked
 13122  000EB8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13123  000EBA  EC84  F00B         	call	_printf	;wreg free
 13124                           
 13125                           ;Test.c: 308: lcdInst(0b11000000);;
 13126  000EBE  0EC0               	movlw	192
 13127  000EC0  EC32  F02B         	call	_lcdInst
 13128                           
 13129                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 13130  000EC4  0EAE               	movlw	low STR_104
 13131  000EC6  0100               	movlb	0	; () banked
 13132  000EC8  6F8E               	movwf	printf@f& (0+255),b
 13133  000ECA  0EFB               	movlw	high STR_104
 13134  000ECC  0100               	movlb	0	; () banked
 13135  000ECE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13136  000ED0  EC84  F00B         	call	_printf	;wreg free
 13137                           
 13138                           ;Test.c: 310: updateServoPosition(1050, 3);
 13139  000ED4  0E04               	movlw	4
 13140  000ED6  0100               	movlb	0	; () banked
 13141  000ED8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13142  000EDA  0E1A               	movlw	26
 13143  000EDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13144  000EDE  0E00               	movlw	0
 13145  000EE0  0100               	movlb	0	; () banked
 13146  000EE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13147  000EE4  0E03               	movlw	3
 13148  000EE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13149  000EE8  EC62  F024         	call	_updateServoPosition	;wreg free
 13150                           
 13151                           ;Test.c: 311: TMR3ON = 1;
 13152  000EEC  80B1               	bsf	4017,0,c	;volatile
 13153                           
 13154                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13155  000EEE  0E00               	movlw	0
 13156  000EF0  0100               	movlb	0	; () banked
 13157  000EF2  6FBA               	movwf	actuatorTest@i_1756& (0+255),b
 13158  000EF4                     l8192:
 13159                           
 13160                           ; BSR set to: 0
 13161  000EF4  0E63               	movlw	99
 13162  000EF6  0100               	movlb	0	; () banked
 13163  000EF8  65BA               	cpfsgt	actuatorTest@i_1756& (0+255),b
 13164  000EFA  D001               	goto	l8196
 13165  000EFC  D00C               	goto	l8200
 13166  000EFE                     l8196:
 13167                           
 13168                           ; BSR set to: 0
 13169  000EFE  0E68               	movlw	104
 13170  000F00  0100               	movlb	0	; () banked
 13171  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 13172  000F04  0EE4               	movlw	228
 13173  000F06                     u10187:
 13174  000F06  2EE8               	decfsz	wreg,f,c
 13175  000F08  D7FE               	bra	u10187
 13176  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13177  000F0C  D7FC               	bra	u10187
 13178  000F0E  F000               	nop	
 13179  000F10  0100               	movlb	0	; () banked
 13180  000F12  2BBA               	incf	actuatorTest@i_1756& (0+255),f,b
 13181  000F14  D7EF               	goto	l8192
 13182  000F16                     l8200:
 13183                           
 13184                           ; BSR set to: 0
 13185  000F16  0E00               	movlw	0
 13186  000F18  0100               	movlb	0	; () banked
 13187  000F1A  6FBB               	movwf	actuatorTest@i_1757& (0+255),b
 13188  000F1C                     l8202:
 13189                           
 13190                           ; BSR set to: 0
 13191  000F1C  0E63               	movlw	99
 13192  000F1E  0100               	movlb	0	; () banked
 13193  000F20  65BB               	cpfsgt	actuatorTest@i_1757& (0+255),b
 13194  000F22  D001               	goto	l8206
 13195  000F24  D00C               	goto	l8210
 13196  000F26                     l8206:
 13197                           
 13198                           ; BSR set to: 0
 13199  000F26  0E68               	movlw	104
 13200  000F28  0100               	movlb	0	; () banked
 13201  000F2A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13202  000F2C  0EE4               	movlw	228
 13203  000F2E                     u10197:
 13204  000F2E  2EE8               	decfsz	wreg,f,c
 13205  000F30  D7FE               	bra	u10197
 13206  000F32  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13207  000F34  D7FC               	bra	u10197
 13208  000F36  F000               	nop	
 13209  000F38  0100               	movlb	0	; () banked
 13210  000F3A  2BBB               	incf	actuatorTest@i_1757& (0+255),f,b
 13211  000F3C  D7EF               	goto	l8202
 13212  000F3E                     l8210:
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13216  000F3E  0E80               	movlw	128
 13217  000F40  EC32  F02B         	call	_lcdInst
 13218  000F44  0EC0               	movlw	192
 13219  000F46  EC32  F02B         	call	_lcdInst
 13220                           
 13221                           ;Test.c: 315: printf("DROP -- 2s      ");
 13222  000F4A  0E8C               	movlw	low STR_105
 13223  000F4C  0100               	movlb	0	; () banked
 13224  000F4E  6F8E               	movwf	printf@f& (0+255),b
 13225  000F50  0EFB               	movlw	high STR_105
 13226  000F52  0100               	movlb	0	; () banked
 13227  000F54  6F8F               	movwf	(printf@f+1)& (0+255),b
 13228  000F56  EC84  F00B         	call	_printf	;wreg free
 13229                           
 13230                           ;Test.c: 316: updateServoPosition(1260, 3);
 13231  000F5A  0E04               	movlw	4
 13232  000F5C  0100               	movlb	0	; () banked
 13233  000F5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13234  000F60  0EEC               	movlw	236
 13235  000F62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13236  000F64  0E00               	movlw	0
 13237  000F66  0100               	movlb	0	; () banked
 13238  000F68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13239  000F6A  0E03               	movlw	3
 13240  000F6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13241  000F6E  EC62  F024         	call	_updateServoPosition	;wreg free
 13242                           
 13243                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13244  000F72  0E00               	movlw	0
 13245  000F74  0100               	movlb	0	; () banked
 13246  000F76  6FBC               	movwf	actuatorTest@i_1759& (0+255),b
 13247  000F78                     l8218:
 13248                           
 13249                           ; BSR set to: 0
 13250  000F78  0E63               	movlw	99
 13251  000F7A  0100               	movlb	0	; () banked
 13252  000F7C  65BC               	cpfsgt	actuatorTest@i_1759& (0+255),b
 13253  000F7E  D001               	goto	l8222
 13254  000F80  D00C               	goto	l8226
 13255  000F82                     l8222:
 13256                           
 13257                           ; BSR set to: 0
 13258  000F82  0E68               	movlw	104
 13259  000F84  0100               	movlb	0	; () banked
 13260  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 13261  000F88  0EE4               	movlw	228
 13262  000F8A                     u10207:
 13263  000F8A  2EE8               	decfsz	wreg,f,c
 13264  000F8C  D7FE               	bra	u10207
 13265  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13266  000F90  D7FC               	bra	u10207
 13267  000F92  F000               	nop	
 13268  000F94  0100               	movlb	0	; () banked
 13269  000F96  2BBC               	incf	actuatorTest@i_1759& (0+255),f,b
 13270  000F98  D7EF               	goto	l8218
 13271  000F9A                     l8226:
 13272                           
 13273                           ; BSR set to: 0
 13274  000F9A  0E00               	movlw	0
 13275  000F9C  0100               	movlb	0	; () banked
 13276  000F9E  6FBD               	movwf	actuatorTest@i_1760& (0+255),b
 13277  000FA0                     l8228:
 13278                           
 13279                           ; BSR set to: 0
 13280  000FA0  0E63               	movlw	99
 13281  000FA2  0100               	movlb	0	; () banked
 13282  000FA4  65BD               	cpfsgt	actuatorTest@i_1760& (0+255),b
 13283  000FA6  D001               	goto	l8232
 13284  000FA8  D00C               	goto	l8236
 13285  000FAA                     l8232:
 13286                           
 13287                           ; BSR set to: 0
 13288  000FAA  0E68               	movlw	104
 13289  000FAC  0100               	movlb	0	; () banked
 13290  000FAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13291  000FB0  0EE4               	movlw	228
 13292  000FB2                     u10217:
 13293  000FB2  2EE8               	decfsz	wreg,f,c
 13294  000FB4  D7FE               	bra	u10217
 13295  000FB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13296  000FB8  D7FC               	bra	u10217
 13297  000FBA  F000               	nop	
 13298  000FBC  0100               	movlb	0	; () banked
 13299  000FBE  2BBD               	incf	actuatorTest@i_1760& (0+255),f,b
 13300  000FC0  D7EF               	goto	l8228
 13301  000FC2                     l8236:
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13305  000FC2  0E80               	movlw	128
 13306  000FC4  EC32  F02B         	call	_lcdInst
 13307  000FC8  0EC0               	movlw	192
 13308  000FCA  EC32  F02B         	call	_lcdInst
 13309                           
 13310                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 13311  000FCE  0EAE               	movlw	low STR_104
 13312  000FD0  0100               	movlb	0	; () banked
 13313  000FD2  6F8E               	movwf	printf@f& (0+255),b
 13314  000FD4  0EFB               	movlw	high STR_104
 13315  000FD6  0100               	movlb	0	; () banked
 13316  000FD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13317  000FDA  EC84  F00B         	call	_printf	;wreg free
 13318                           
 13319                           ;Test.c: 321: updateServoPosition(1050, 3);
 13320  000FDE  0E04               	movlw	4
 13321  000FE0  0100               	movlb	0	; () banked
 13322  000FE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13323  000FE4  0E1A               	movlw	26
 13324  000FE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13325  000FE8  0E00               	movlw	0
 13326  000FEA  0100               	movlb	0	; () banked
 13327  000FEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13328  000FEE  0E03               	movlw	3
 13329  000FF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13330  000FF2  EC62  F024         	call	_updateServoPosition	;wreg free
 13331                           
 13332                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13333  000FF6  0E00               	movlw	0
 13334  000FF8  0100               	movlb	0	; () banked
 13335  000FFA  6FBE               	movwf	actuatorTest@i_1762& (0+255),b
 13336  000FFC                     l8244:
 13337                           
 13338                           ; BSR set to: 0
 13339  000FFC  0E63               	movlw	99
 13340  000FFE  0100               	movlb	0	; () banked
 13341  001000  65BE               	cpfsgt	actuatorTest@i_1762& (0+255),b
 13342  001002  D001               	goto	l8248
 13343  001004  D00C               	goto	l8252
 13344  001006                     l8248:
 13345                           
 13346                           ; BSR set to: 0
 13347  001006  0E68               	movlw	104
 13348  001008  0100               	movlb	0	; () banked
 13349  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13350  00100C  0EE4               	movlw	228
 13351  00100E                     u10227:
 13352  00100E  2EE8               	decfsz	wreg,f,c
 13353  001010  D7FE               	bra	u10227
 13354  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13355  001014  D7FC               	bra	u10227
 13356  001016  F000               	nop	
 13357  001018  0100               	movlb	0	; () banked
 13358  00101A  2BBE               	incf	actuatorTest@i_1762& (0+255),f,b
 13359  00101C  D7EF               	goto	l8244
 13360  00101E                     l8252:
 13361                           
 13362                           ; BSR set to: 0
 13363  00101E  0E00               	movlw	0
 13364  001020  0100               	movlb	0	; () banked
 13365  001022  6FBF               	movwf	actuatorTest@i_1763& (0+255),b
 13366  001024                     l8254:
 13367                           
 13368                           ; BSR set to: 0
 13369  001024  0E63               	movlw	99
 13370  001026  0100               	movlb	0	; () banked
 13371  001028  65BF               	cpfsgt	actuatorTest@i_1763& (0+255),b
 13372  00102A  D001               	goto	l8258
 13373  00102C  D00C               	goto	l1309
 13374  00102E                     l8258:
 13375                           
 13376                           ; BSR set to: 0
 13377  00102E  0E68               	movlw	104
 13378  001030  0100               	movlb	0	; () banked
 13379  001032  6FAB               	movwf	??_actuatorTest& (0+255),b
 13380  001034  0EE4               	movlw	228
 13381  001036                     u10237:
 13382  001036  2EE8               	decfsz	wreg,f,c
 13383  001038  D7FE               	bra	u10237
 13384  00103A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13385  00103C  D7FC               	bra	u10237
 13386  00103E  F000               	nop	
 13387  001040  0100               	movlb	0	; () banked
 13388  001042  2BBF               	incf	actuatorTest@i_1763& (0+255),f,b
 13389  001044  D7EF               	goto	l8254
 13390  001046                     l1309:
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;Test.c: 323: TMR3ON = 0;
 13394  001046  90B1               	bcf	4017,0,c	;volatile
 13395                           
 13396                           ;Test.c: 324: (INTCONbits.GIE = 0);
 13397  001048  9EF2               	bcf	intcon,7,c	;volatile
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13401  00104A  0E01               	movlw	1
 13402  00104C  EC32  F02B         	call	_lcdInst
 13403  001050  0E68               	movlw	104
 13404  001052  0100               	movlb	0	; () banked
 13405  001054  6FAB               	movwf	??_actuatorTest& (0+255),b
 13406  001056  0EE4               	movlw	228
 13407  001058                     u10247:
 13408  001058  2EE8               	decfsz	wreg,f,c
 13409  00105A  D7FE               	bra	u10247
 13410  00105C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13411  00105E  D7FC               	bra	u10247
 13412  001060  F000               	nop	
 13413  001062  0E80               	movlw	128
 13414  001064  EC32  F02B         	call	_lcdInst
 13415                           
 13416                           ;Test.c: 330: printf("TST: CAM SERVO");
 13417  001068  0EA0               	movlw	low STR_107
 13418  00106A  0100               	movlb	0	; () banked
 13419  00106C  6F8E               	movwf	printf@f& (0+255),b
 13420  00106E  0EFE               	movlw	high STR_107
 13421  001070  0100               	movlb	0	; () banked
 13422  001072  6F8F               	movwf	(printf@f+1)& (0+255),b
 13423  001074  EC84  F00B         	call	_printf	;wreg free
 13424                           
 13425                           ;Test.c: 331: lcdInst(0b11000000);;
 13426  001078  0EC0               	movlw	192
 13427  00107A  EC32  F02B         	call	_lcdInst
 13428                           
 13429                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 13430  00107E  0E82               	movlw	low STR_108
 13431  001080  0100               	movlb	0	; () banked
 13432  001082  6F8E               	movwf	printf@f& (0+255),b
 13433  001084  0EFE               	movlw	high STR_108
 13434  001086  0100               	movlb	0	; () banked
 13435  001088  6F8F               	movwf	(printf@f+1)& (0+255),b
 13436  00108A  EC84  F00B         	call	_printf	;wreg free
 13437                           
 13438                           ;Test.c: 333: LATCbits.LATC0 = 1;
 13439  00108E  808B               	bsf	3979,0,c	;volatile
 13440                           
 13441                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13442  001090  0E00               	movlw	0
 13443  001092  0100               	movlb	0	; () banked
 13444  001094  6FC0               	movwf	actuatorTest@i_1766& (0+255),b
 13445  001096                     l8278:
 13446                           
 13447                           ; BSR set to: 0
 13448  001096  0E63               	movlw	99
 13449  001098  0100               	movlb	0	; () banked
 13450  00109A  65C0               	cpfsgt	actuatorTest@i_1766& (0+255),b
 13451  00109C  D001               	goto	l8282
 13452  00109E  D00C               	goto	l8286
 13453  0010A0                     l8282:
 13454                           
 13455                           ; BSR set to: 0
 13456  0010A0  0E68               	movlw	104
 13457  0010A2  0100               	movlb	0	; () banked
 13458  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 13459  0010A6  0EE4               	movlw	228
 13460  0010A8                     u10257:
 13461  0010A8  2EE8               	decfsz	wreg,f,c
 13462  0010AA  D7FE               	bra	u10257
 13463  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13464  0010AE  D7FC               	bra	u10257
 13465  0010B0  F000               	nop	
 13466  0010B2  0100               	movlb	0	; () banked
 13467  0010B4  2BC0               	incf	actuatorTest@i_1766& (0+255),f,b
 13468  0010B6  D7EF               	goto	l8278
 13469  0010B8                     l8286:
 13470                           
 13471                           ; BSR set to: 0
 13472  0010B8  0E00               	movlw	0
 13473  0010BA  0100               	movlb	0	; () banked
 13474  0010BC  6FC1               	movwf	actuatorTest@i_1767& (0+255),b
 13475  0010BE                     l8288:
 13476                           
 13477                           ; BSR set to: 0
 13478  0010BE  0E63               	movlw	99
 13479  0010C0  0100               	movlb	0	; () banked
 13480  0010C2  65C1               	cpfsgt	actuatorTest@i_1767& (0+255),b
 13481  0010C4  D001               	goto	l8292
 13482  0010C6  D00C               	goto	l8296
 13483  0010C8                     l8292:
 13484                           
 13485                           ; BSR set to: 0
 13486  0010C8  0E68               	movlw	104
 13487  0010CA  0100               	movlb	0	; () banked
 13488  0010CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 13489  0010CE  0EE4               	movlw	228
 13490  0010D0                     u10267:
 13491  0010D0  2EE8               	decfsz	wreg,f,c
 13492  0010D2  D7FE               	bra	u10267
 13493  0010D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13494  0010D6  D7FC               	bra	u10267
 13495  0010D8  F000               	nop	
 13496  0010DA  0100               	movlb	0	; () banked
 13497  0010DC  2BC1               	incf	actuatorTest@i_1767& (0+255),f,b
 13498  0010DE  D7EF               	goto	l8288
 13499  0010E0                     l8296:
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13503  0010E0  0E80               	movlw	128
 13504  0010E2  EC32  F02B         	call	_lcdInst
 13505  0010E6  0EC0               	movlw	192
 13506  0010E8  EC32  F02B         	call	_lcdInst
 13507                           
 13508                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 13509  0010EC  0E73               	movlw	low STR_109
 13510  0010EE  0100               	movlb	0	; () banked
 13511  0010F0  6F8E               	movwf	printf@f& (0+255),b
 13512  0010F2  0EFE               	movlw	high STR_109
 13513  0010F4  0100               	movlb	0	; () banked
 13514  0010F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13515  0010F8  EC84  F00B         	call	_printf	;wreg free
 13516                           
 13517                           ;Test.c: 339: for(i=0;i<10000;i++)
 13518  0010FC  0E00               	movlw	0
 13519  0010FE  0100               	movlb	0	; () banked
 13520  001100  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13521  001102  0E00               	movlw	0
 13522  001104  6FC4               	movwf	actuatorTest@i& (0+255),b
 13523  001106                     l8302:
 13524                           
 13525                           ; BSR set to: 0
 13526  001106  0100               	movlb	0	; () banked
 13527  001108  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13528  00110A  D008               	goto	l1314
 13529  00110C  0E10               	movlw	16
 13530  00110E  0100               	movlb	0	; () banked
 13531  001110  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13532  001112  0E27               	movlw	39
 13533  001114  0100               	movlb	0	; () banked
 13534  001116  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13535  001118  B0D8               	btfsc	status,0,c
 13536  00111A  D00D               	goto	l8312
 13537  00111C                     l1314:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;Test.c: 340: {
 13541                           ;Test.c: 341: LATCbits.LATC0 = 1;
 13542  00111C  808B               	bsf	3979,0,c	;volatile
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13546  00111E  0E1A               	movlw	26
 13547  001120                     u10277:
 13548  001120  2EE8               	decfsz	wreg,f,c
 13549  001122  D7FE               	bra	u10277
 13550  001124  D000               	nop2	
 13551                           
 13552                           ;Test.c: 343: LATCbits.LATC0 = 0;
 13553  001126  908B               	bcf	3979,0,c	;volatile
 13554                           
 13555                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13556  001128  0EF0               	movlw	240
 13557  00112A                     u10287:
 13558  00112A  2EE8               	decfsz	wreg,f,c
 13559  00112C  D7FE               	bra	u10287
 13560  00112E  0100               	movlb	0	; () banked
 13561  001130  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13562  001132  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13563  001134  D7E8               	goto	l8302
 13564  001136                     l8312:
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;Test.c: 345: }
 13568                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13569  001136  0E00               	movlw	0
 13570  001138  0100               	movlb	0	; () banked
 13571  00113A  6FC2               	movwf	actuatorTest@i_1769& (0+255),b
 13572  00113C                     l8314:
 13573                           
 13574                           ; BSR set to: 0
 13575  00113C  0E63               	movlw	99
 13576  00113E  0100               	movlb	0	; () banked
 13577  001140  65C2               	cpfsgt	actuatorTest@i_1769& (0+255),b
 13578  001142  D001               	goto	l8318
 13579  001144  D00C               	goto	l8322
 13580  001146                     l8318:
 13581                           
 13582                           ; BSR set to: 0
 13583  001146  0E68               	movlw	104
 13584  001148  0100               	movlb	0	; () banked
 13585  00114A  6FAB               	movwf	??_actuatorTest& (0+255),b
 13586  00114C  0EE4               	movlw	228
 13587  00114E                     u10297:
 13588  00114E  2EE8               	decfsz	wreg,f,c
 13589  001150  D7FE               	bra	u10297
 13590  001152  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13591  001154  D7FC               	bra	u10297
 13592  001156  F000               	nop	
 13593  001158  0100               	movlb	0	; () banked
 13594  00115A  2BC2               	incf	actuatorTest@i_1769& (0+255),f,b
 13595  00115C  D7EF               	goto	l8314
 13596  00115E                     l8322:
 13597                           
 13598                           ; BSR set to: 0
 13599  00115E  0E00               	movlw	0
 13600  001160  0100               	movlb	0	; () banked
 13601  001162  6FC3               	movwf	actuatorTest@i_1770& (0+255),b
 13602  001164                     l8324:
 13603                           
 13604                           ; BSR set to: 0
 13605  001164  0E63               	movlw	99
 13606  001166  0100               	movlb	0	; () banked
 13607  001168  65C3               	cpfsgt	actuatorTest@i_1770& (0+255),b
 13608  00116A  D001               	goto	l8328
 13609  00116C  D00C               	goto	l8332
 13610  00116E                     l8328:
 13611                           
 13612                           ; BSR set to: 0
 13613  00116E  0E68               	movlw	104
 13614  001170  0100               	movlb	0	; () banked
 13615  001172  6FAB               	movwf	??_actuatorTest& (0+255),b
 13616  001174  0EE4               	movlw	228
 13617  001176                     u10307:
 13618  001176  2EE8               	decfsz	wreg,f,c
 13619  001178  D7FE               	bra	u10307
 13620  00117A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13621  00117C  D7FC               	bra	u10307
 13622  00117E  F000               	nop	
 13623  001180  0100               	movlb	0	; () banked
 13624  001182  2BC3               	incf	actuatorTest@i_1770& (0+255),f,b
 13625  001184  D7EF               	goto	l8324
 13626  001186                     l8332:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;Test.c: 348: machine_state = Testing_state;
 13630  001186  0E03               	movlw	3
 13631  001188  0100               	movlb	0	; () banked
 13632  00118A  6FFC               	movwf	_machine_state& (0+255),b
 13633                           
 13634                           ; BSR set to: 0
 13635  00118C  0012               	return		;funcret
 13636  00118E                     __end_of_actuatorTest:
 13637                           	opt stack 0
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon2	equ	0xFF1
 13646                           intcon3	equ	0xFF0
 13647                           postinc0	equ	0xFEE
 13648                           wreg	equ	0xFE8
 13649                           postdec1	equ	0xFE5
 13650                           fsr1l	equ	0xFE1
 13651                           indf2	equ	0xFDF
 13652                           postinc2	equ	0xFDE
 13653                           postdec2	equ	0xFDD
 13654                           fsr2h	equ	0xFDA
 13655                           fsr2l	equ	0xFD9
 13656                           status	equ	0xFD8
 13657                           
 13658 ;; *************** function _SpeedTest *****************
 13659 ;; Defined at:
 13660 ;;		line 542 in file "Test.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        1 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:   10
 13681 ;; This function calls:
 13682 ;;		_lcdInst
 13683 ;;		_printf
 13684 ;; This function is called by:
 13685 ;;		_Test
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text41
 13690  00494A                     __ptext41:
 13691                           	opt stack 0
 13692  00494A                     _SpeedTest:
 13693                           	opt stack 19
 13694                           
 13695                           ;Test.c: 544: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;incstack = 0
 13699  00494A  0E01               	movlw	1
 13700  00494C  EC32  F02B         	call	_lcdInst
 13701  004950  0E68               	movlw	104
 13702  004952  0100               	movlb	0	; () banked
 13703  004954  6FAB               	movwf	??_SpeedTest& (0+255),b
 13704  004956  0EE4               	movlw	228
 13705  004958                     u10317:
 13706  004958  2EE8               	decfsz	wreg,f,c
 13707  00495A  D7FE               	bra	u10317
 13708  00495C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13709  00495E  D7FC               	bra	u10317
 13710  004960  F000               	nop	
 13711  004962  0E80               	movlw	128
 13712  004964  EC32  F02B         	call	_lcdInst
 13713                           
 13714                           ;Test.c: 545: printf("S: D WILL RETURN ");
 13715  004968  0E0F               	movlw	low STR_118
 13716  00496A  0100               	movlb	0	; () banked
 13717  00496C  6F8E               	movwf	printf@f& (0+255),b
 13718  00496E  0EFB               	movlw	high STR_118
 13719  004970  0100               	movlb	0	; () banked
 13720  004972  6F8F               	movwf	(printf@f+1)& (0+255),b
 13721  004974  EC84  F00B         	call	_printf	;wreg free
 13722                           
 13723                           ;Test.c: 546: lcdInst(0b11000000);;
 13724  004978  0EC0               	movlw	192
 13725  00497A  EC32  F02B         	call	_lcdInst
 13726                           
 13727                           ;Test.c: 547: printf("OTHER SETS RA5   ");
 13728  00497E  0EFD               	movlw	low STR_119
 13729  004980  0100               	movlb	0	; () banked
 13730  004982  6F8E               	movwf	printf@f& (0+255),b
 13731  004984  0EFA               	movlw	high STR_119
 13732  004986  0100               	movlb	0	; () banked
 13733  004988  6F8F               	movwf	(printf@f+1)& (0+255),b
 13734  00498A  EC84  F00B         	call	_printf	;wreg free
 13735  00498E                     l1385:
 13736  00498E  A281               	btfss	3969,1,c	;volatile
 13737  004990  D7FE               	goto	l1385
 13738                           
 13739                           ;Test.c: 552: }
 13740                           ;Test.c: 553: if(PORTB >> 4 == 0b1111){
 13741  004992  3881               	swapf	3969,w,c	;volatile
 13742  004994  0B0F               	andlw	15
 13743  004996  0A0F               	xorlw	15
 13744  004998  B4D8               	btfsc	status,2,c
 13745  00499A  0012               	return	
 13746  00499C  D014               	goto	l8428
 13747  00499E                     l1392:
 13748                           
 13749                           ;Test.c: 558: LATBbits.LATB2 = 1;
 13750  00499E  848A               	bsf	3978,2,c	;volatile
 13751                           
 13752                           ;Test.c: 559: _delay((unsigned long)((5)*(32000000/4000.0)));
 13753  0049A0  0E34               	movlw	52
 13754  0049A2  0100               	movlb	0	; () banked
 13755  0049A4  6FAB               	movwf	??_SpeedTest& (0+255),b
 13756  0049A6  0EF1               	movlw	241
 13757  0049A8                     u10327:
 13758  0049A8  2EE8               	decfsz	wreg,f,c
 13759  0049AA  D7FE               	bra	u10327
 13760  0049AC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13761  0049AE  D7FC               	bra	u10327
 13762  0049B0  D000               	nop2	
 13763                           
 13764                           ;Test.c: 560: LATBbits.LATB2 = 0;
 13765  0049B2  948A               	bcf	3978,2,c	;volatile
 13766                           
 13767                           ;Test.c: 561: _delay((unsigned long)((5)*(32000000/4000.0)));
 13768  0049B4  0E34               	movlw	52
 13769  0049B6  0100               	movlb	0	; () banked
 13770  0049B8  6FAB               	movwf	??_SpeedTest& (0+255),b
 13771  0049BA  0EF1               	movlw	241
 13772  0049BC                     u10337:
 13773  0049BC  2EE8               	decfsz	wreg,f,c
 13774  0049BE  D7FE               	bra	u10337
 13775  0049C0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13776  0049C2  D7FC               	bra	u10337
 13777  0049C4  D000               	nop2	
 13778  0049C6                     l8428:
 13779  0049C6  B281               	btfsc	3969,1,c	;volatile
 13780  0049C8  D7EA               	goto	l1392
 13781                           
 13782                           ;Test.c: 564: }
 13783                           ;Test.c: 565: LATBbits.LATB2 = 0;
 13784  0049CA  948A               	bcf	3978,2,c	;volatile
 13785  0049CC  D7E0               	goto	l1385
 13786  0049CE                     __end_of_SpeedTest:
 13787                           	opt stack 0
 13788                           tblptru	equ	0xFF8
 13789                           tblptrh	equ	0xFF7
 13790                           tblptrl	equ	0xFF6
 13791                           tablat	equ	0xFF5
 13792                           prodh	equ	0xFF4
 13793                           prodl	equ	0xFF3
 13794                           intcon	equ	0xFF2
 13795                           intcon2	equ	0xFF1
 13796                           intcon3	equ	0xFF0
 13797                           postinc0	equ	0xFEE
 13798                           wreg	equ	0xFE8
 13799                           postdec1	equ	0xFE5
 13800                           fsr1l	equ	0xFE1
 13801                           indf2	equ	0xFDF
 13802                           postinc2	equ	0xFDE
 13803                           postdec2	equ	0xFDD
 13804                           fsr2h	equ	0xFDA
 13805                           fsr2l	equ	0xFD9
 13806                           status	equ	0xFD8
 13807                           
 13808 ;; *************** function _PortTestPusher *****************
 13809 ;; Defined at:
 13810 ;;		line 675 in file "Test.c"
 13811 ;; Parameters:    Size  Location     Type
 13812 ;;		None
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;		None
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      void 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;Total ram usage:        1 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:   10
 13831 ;; This function calls:
 13832 ;;		_lcdInst
 13833 ;;		_printf
 13834 ;; This function is called by:
 13835 ;;		_Test
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           	psect	text42
 13840  004DA0                     __ptext42:
 13841                           	opt stack 0
 13842  004DA0                     _PortTestPusher:
 13843                           	opt stack 19
 13844                           
 13845                           ;Test.c: 676: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13846                           
 13847                           ;incstack = 0
 13848  004DA0  0E01               	movlw	1
 13849  004DA2  EC32  F02B         	call	_lcdInst
 13850  004DA6  0E68               	movlw	104
 13851  004DA8  0100               	movlb	0	; () banked
 13852  004DAA  6FAB               	movwf	??_PortTestPusher& (0+255),b
 13853  004DAC  0EE4               	movlw	228
 13854  004DAE                     u10347:
 13855  004DAE  2EE8               	decfsz	wreg,f,c
 13856  004DB0  D7FE               	bra	u10347
 13857  004DB2  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 13858  004DB4  D7FC               	bra	u10347
 13859  004DB6  F000               	nop	
 13860  004DB8  0E80               	movlw	128
 13861  004DBA  EC32  F02B         	call	_lcdInst
 13862                           
 13863                           ;Test.c: 677: printf("D WILL RETURN    ");
 13864  004DBE  0EEB               	movlw	low STR_111
 13865  004DC0  0100               	movlb	0	; () banked
 13866  004DC2  6F8E               	movwf	printf@f& (0+255),b
 13867  004DC4  0EFA               	movlw	high STR_111
 13868  004DC6  0100               	movlb	0	; () banked
 13869  004DC8  6F8F               	movwf	(printf@f+1)& (0+255),b
 13870  004DCA  EC84  F00B         	call	_printf	;wreg free
 13871                           
 13872                           ;Test.c: 678: lcdInst(0b11000000);;
 13873  004DCE  0EC0               	movlw	192
 13874  004DD0  EC32  F02B         	call	_lcdInst
 13875                           
 13876                           ;Test.c: 679: printf("OTHER SETS PUSHER");
 13877  004DD4  0E33               	movlw	low STR_127
 13878  004DD6  0100               	movlb	0	; () banked
 13879  004DD8  6F8E               	movwf	printf@f& (0+255),b
 13880  004DDA  0EFB               	movlw	high STR_127
 13881  004DDC  0100               	movlb	0	; () banked
 13882  004DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13883  004DE0  EC84  F00B         	call	_printf	;wreg free
 13884  004DE4                     l1446:
 13885  004DE4  A281               	btfss	3969,1,c	;volatile
 13886  004DE6  D7FE               	goto	l1446
 13887                           
 13888                           ;Test.c: 684: }
 13889                           ;Test.c: 685: if(PORTB >> 4 == 0b1111){
 13890  004DE8  3881               	swapf	3969,w,c	;volatile
 13891  004DEA  0B0F               	andlw	15
 13892  004DEC  0A0F               	xorlw	15
 13893  004DEE  B4D8               	btfsc	status,2,c
 13894  004DF0  0012               	return	
 13895                           
 13896                           ;Test.c: 688: else{
 13897                           ;Test.c: 689: LATAbits.LATA4 = 1;
 13898                           
 13899                           ;Test.c: 687: }
 13900                           
 13901                           ;Test.c: 686: break;
 13902  004DF2  8889               	bsf	3977,4,c	;volatile
 13903  004DF4                     l1452:
 13904  004DF4  B281               	btfsc	3969,1,c	;volatile
 13905  004DF6  D7FE               	goto	l1452
 13906                           
 13907                           ;Test.c: 692: }
 13908                           ;Test.c: 693: LATAbits.LATA4 = 0;
 13909  004DF8  9889               	bcf	3977,4,c	;volatile
 13910  004DFA  D7F4               	goto	l1446
 13911  004DFC                     __end_of_PortTestPusher:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           intcon2	equ	0xFF1
 13921                           intcon3	equ	0xFF0
 13922                           postinc0	equ	0xFEE
 13923                           wreg	equ	0xFE8
 13924                           postdec1	equ	0xFE5
 13925                           fsr1l	equ	0xFE1
 13926                           indf2	equ	0xFDF
 13927                           postinc2	equ	0xFDE
 13928                           postdec2	equ	0xFDD
 13929                           fsr2h	equ	0xFDA
 13930                           fsr2l	equ	0xFD9
 13931                           status	equ	0xFD8
 13932                           
 13933 ;; *************** function _PortTestDC *****************
 13934 ;; Defined at:
 13935 ;;		line 414 in file "Test.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  1    wreg      void 
 13942 ;; Registers used:
 13943 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;Total ram usage:        1 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:   10
 13956 ;; This function calls:
 13957 ;;		_lcdInst
 13958 ;;		_printf
 13959 ;; This function is called by:
 13960 ;;		_Test
 13961 ;; This function uses a non-reentrant model
 13962 ;;
 13963                           
 13964                           	psect	text43
 13965  004DFC                     __ptext43:
 13966                           	opt stack 0
 13967  004DFC                     _PortTestDC:
 13968                           	opt stack 19
 13969                           
 13970                           ;Test.c: 415: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13971                           
 13972                           ;incstack = 0
 13973  004DFC  0E01               	movlw	1
 13974  004DFE  EC32  F02B         	call	_lcdInst
 13975  004E02  0E68               	movlw	104
 13976  004E04  0100               	movlb	0	; () banked
 13977  004E06  6FAB               	movwf	??_PortTestDC& (0+255),b
 13978  004E08  0EE4               	movlw	228
 13979  004E0A                     u10357:
 13980  004E0A  2EE8               	decfsz	wreg,f,c
 13981  004E0C  D7FE               	bra	u10357
 13982  004E0E  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 13983  004E10  D7FC               	bra	u10357
 13984  004E12  F000               	nop	
 13985  004E14  0E80               	movlw	128
 13986  004E16  EC32  F02B         	call	_lcdInst
 13987                           
 13988                           ;Test.c: 416: printf("D WILL RETURN    ");
 13989  004E1A  0EEB               	movlw	low STR_111
 13990  004E1C  0100               	movlb	0	; () banked
 13991  004E1E  6F8E               	movwf	printf@f& (0+255),b
 13992  004E20  0EFA               	movlw	high STR_111
 13993  004E22  0100               	movlb	0	; () banked
 13994  004E24  6F8F               	movwf	(printf@f+1)& (0+255),b
 13995  004E26  EC84  F00B         	call	_printf	;wreg free
 13996                           
 13997                           ;Test.c: 417: lcdInst(0b11000000);;
 13998  004E2A  0EC0               	movlw	192
 13999  004E2C  EC32  F02B         	call	_lcdInst
 14000                           
 14001                           ;Test.c: 418: printf("OTHER SETS DC   ");
 14002  004E30  0EE1               	movlw	low STR_112
 14003  004E32  0100               	movlb	0	; () banked
 14004  004E34  6F8E               	movwf	printf@f& (0+255),b
 14005  004E36  0EFB               	movlw	high STR_112
 14006  004E38  0100               	movlb	0	; () banked
 14007  004E3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 14008  004E3C  EC84  F00B         	call	_printf	;wreg free
 14009  004E40                     l1327:
 14010  004E40  A281               	btfss	3969,1,c	;volatile
 14011  004E42  D7FE               	goto	l1327
 14012                           
 14013                           ;Test.c: 423: }
 14014                           ;Test.c: 424: if(PORTB >> 4 == 0b1111){
 14015  004E44  3881               	swapf	3969,w,c	;volatile
 14016  004E46  0B0F               	andlw	15
 14017  004E48  0A0F               	xorlw	15
 14018  004E4A  B4D8               	btfsc	status,2,c
 14019  004E4C  0012               	return	
 14020                           
 14021                           ;Test.c: 427: else{
 14022                           ;Test.c: 428: LATBbits.LATB2 = 1;
 14023                           
 14024                           ;Test.c: 426: }
 14025                           
 14026                           ;Test.c: 425: break;
 14027  004E4E  848A               	bsf	3978,2,c	;volatile
 14028  004E50                     l1333:
 14029  004E50  B281               	btfsc	3969,1,c	;volatile
 14030  004E52  D7FE               	goto	l1333
 14031                           
 14032                           ;Test.c: 431: }
 14033                           ;Test.c: 432: LATBbits.LATB2 = 0;
 14034  004E54  948A               	bcf	3978,2,c	;volatile
 14035  004E56  D7F4               	goto	l1327
 14036  004E58                     __end_of_PortTestDC:
 14037                           	opt stack 0
 14038                           tblptru	equ	0xFF8
 14039                           tblptrh	equ	0xFF7
 14040                           tblptrl	equ	0xFF6
 14041                           tablat	equ	0xFF5
 14042                           prodh	equ	0xFF4
 14043                           prodl	equ	0xFF3
 14044                           intcon	equ	0xFF2
 14045                           intcon2	equ	0xFF1
 14046                           intcon3	equ	0xFF0
 14047                           postinc0	equ	0xFEE
 14048                           wreg	equ	0xFE8
 14049                           postdec1	equ	0xFE5
 14050                           fsr1l	equ	0xFE1
 14051                           indf2	equ	0xFDF
 14052                           postinc2	equ	0xFDE
 14053                           postdec2	equ	0xFDD
 14054                           fsr2h	equ	0xFDA
 14055                           fsr2l	equ	0xFD9
 14056                           status	equ	0xFD8
 14057                           
 14058 ;; *************** function _PlatformTest *****************
 14059 ;; Defined at:
 14060 ;;		line 437 in file "Test.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;		None
 14063 ;; Auto vars:     Size  Location     Type
 14064 ;;  i               2   51[BANK0 ] int 
 14065 ;;  i               2   49[BANK0 ] int 
 14066 ;;  res             2   47[BANK0 ] int 
 14067 ;;  res             2   45[BANK0 ] int 
 14068 ;;  on              2   53[BANK0 ] int 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;                  1    wreg      void 
 14071 ;; Registers used:
 14072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14079 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14081 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14082 ;;Total ram usage:       12 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:   10
 14085 ;; This function calls:
 14086 ;;		_lcdInst
 14087 ;;		_printf
 14088 ;;		_readADC
 14089 ;;		_stopSignals
 14090 ;; This function is called by:
 14091 ;;		_Test
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           	psect	text44
 14096  002B2A                     __ptext44:
 14097                           	opt stack 0
 14098  002B2A                     _PlatformTest:
 14099                           	opt stack 19
 14100                           
 14101                           ;Test.c: 438: LATCbits.LATC5 = 1;
 14102                           
 14103                           ;incstack = 0
 14104  002B2A  8A8B               	bsf	3979,5,c	;volatile
 14105                           
 14106                           ;Test.c: 440: machine_state = Sorting_state;
 14107  002B2C  0E01               	movlw	1
 14108  002B2E  0100               	movlb	0	; () banked
 14109  002B30  6FFC               	movwf	_machine_state& (0+255),b
 14110                           
 14111                           ;Test.c: 441: f_arm_position = 0;
 14112  002B32  0E00               	movlw	0
 14113  002B34  0100               	movlb	0	; () banked
 14114  002B36  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14115  002B38  0E00               	movlw	0
 14116  002B3A  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14117                           
 14118                           ;Test.c: 442: timer2_counter = 0;
 14119  002B3C  0E00               	movlw	0
 14120  002B3E  6E74               	movwf	_timer2_counter+1,c	;volatile
 14121  002B40  0E00               	movlw	0
 14122  002B42  6E73               	movwf	_timer2_counter,c	;volatile
 14123                           
 14124                           ; BSR set to: 0
 14125                           ;Test.c: 443: LATBbits.LATB3 = 0;
 14126  002B44  968A               	bcf	3978,3,c	;volatile
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;Test.c: 444: TMR2ON = 1;
 14130  002B46  84CA               	bsf	4042,2,c	;volatile
 14131                           
 14132                           ;Test.c: 445: was_low_2 = 0;
 14133  002B48  0E00               	movlw	0
 14134  002B4A  6E7A               	movwf	_was_low_2+1,c	;volatile
 14135  002B4C  0E00               	movlw	0
 14136  002B4E  6E79               	movwf	_was_low_2,c	;volatile
 14137                           
 14138                           ;Test.c: 447: int on = 1;
 14139  002B50  0E00               	movlw	0
 14140  002B52  0100               	movlb	0	; () banked
 14141  002B54  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 14142  002B56  0E01               	movlw	1
 14143  002B58  6FB5               	movwf	PlatformTest@on& (0+255),b
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;Test.c: 448: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14147  002B5A  0E01               	movlw	1
 14148  002B5C  EC32  F02B         	call	_lcdInst
 14149  002B60  0E68               	movlw	104
 14150  002B62  0100               	movlb	0	; () banked
 14151  002B64  6FAB               	movwf	??_PlatformTest& (0+255),b
 14152  002B66  0EE4               	movlw	228
 14153  002B68                     u10367:
 14154  002B68  2EE8               	decfsz	wreg,f,c
 14155  002B6A  D7FE               	bra	u10367
 14156  002B6C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14157  002B6E  D7FC               	bra	u10367
 14158  002B70  F000               	nop	
 14159  002B72  0E80               	movlw	128
 14160  002B74  EC32  F02B         	call	_lcdInst
 14161                           
 14162                           ;Test.c: 449: printf("1: DC | A: ARM  ");
 14163  002B78  0E14               	movlw	low STR_113
 14164  002B7A  0100               	movlb	0	; () banked
 14165  002B7C  6F8E               	movwf	printf@f& (0+255),b
 14166  002B7E  0EFC               	movlw	high STR_113
 14167  002B80  0100               	movlb	0	; () banked
 14168  002B82  6F8F               	movwf	(printf@f+1)& (0+255),b
 14169  002B84  EC84  F00B         	call	_printf	;wreg free
 14170                           
 14171                           ;Test.c: 451: while(PORTBbits.RB1 == 0){
 14172  002B88  D041               	goto	l8474
 14173  002B8A                     l8464:
 14174                           
 14175                           ;Test.c: 452: readADC(0);
 14176  002B8A  0E00               	movlw	0
 14177  002B8C  EC28  F02A         	call	_readADC
 14178                           
 14179                           ;Test.c: 453: int res = ADRESH<<8 | ADRESL;
 14180  002B90  50C3               	movf	4035,w,c	;volatile
 14181  002B92  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14182  002B96  0100               	movlb	0	; () banked
 14183  002B98  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14184  002B9A  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14185  002B9E  0100               	movlb	0	; () banked
 14186  002BA0  6BAB               	clrf	??_PlatformTest& (0+255),b
 14187  002BA2  0100               	movlb	0	; () banked
 14188  002BA4  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14189  002BA6  0100               	movlb	0	; () banked
 14190  002BA8  6FAD               	movwf	PlatformTest@res& (0+255),b
 14191  002BAA  0100               	movlb	0	; () banked
 14192  002BAC  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14193  002BAE  0100               	movlb	0	; () banked
 14194  002BB0  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;Test.c: 454: IR_signal = (res > 800) ? 1 : 0;
 14198  002BB2  0100               	movlb	0	; () banked
 14199  002BB4  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 14200  002BB6  D00A               	goto	u7250
 14201  002BB8  0E21               	movlw	33
 14202  002BBA  0100               	movlb	0	; () banked
 14203  002BBC  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 14204  002BBE  0E03               	movlw	3
 14205  002BC0  0100               	movlb	0	; () banked
 14206  002BC2  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 14207  002BC4  A0D8               	btfss	status,0,c
 14208  002BC6  D002               	goto	u7250
 14209  002BC8  0E01               	movlw	1
 14210  002BCA  D001               	goto	u7260
 14211  002BCC                     u7250:
 14212  002BCC  0E00               	movlw	0
 14213  002BCE                     u7260:
 14214  002BCE  0100               	movlb	0	; () banked
 14215  002BD0  6FE6               	movwf	_IR_signal& (0+255),b
 14216  002BD2  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14217                           
 14218                           ;Test.c: 456: lcdInst(0b11000000);;
 14219  002BD4  0EC0               	movlw	192
 14220  002BD6  EC32  F02B         	call	_lcdInst
 14221                           
 14222                           ;Test.c: 457: printf("5:H|6:L|IR:%d   ", res);
 14223  002BDA  0E03               	movlw	low STR_114
 14224  002BDC  0100               	movlb	0	; () banked
 14225  002BDE  6F8E               	movwf	printf@f& (0+255),b
 14226  002BE0  0EFC               	movlw	high STR_114
 14227  002BE2  0100               	movlb	0	; () banked
 14228  002BE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 14229  002BE6  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 14230  002BEA  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 14231  002BEE  EC84  F00B         	call	_printf	;wreg free
 14232                           
 14233                           ;Test.c: 458: _delay((unsigned long)((100)*(32000000/4000.0)));
 14234  002BF2  0E05               	movlw	5
 14235  002BF4  0100               	movlb	0	; () banked
 14236  002BF6  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14237  002BF8  0E0F               	movlw	15
 14238  002BFA  0100               	movlb	0	; () banked
 14239  002BFC  6FAB               	movwf	??_PlatformTest& (0+255),b
 14240  002BFE  0EF1               	movlw	241
 14241  002C00                     u10377:
 14242  002C00  2EE8               	decfsz	wreg,f,c
 14243  002C02  D7FE               	bra	u10377
 14244  002C04  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14245  002C06  D7FC               	bra	u10377
 14246  002C08  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14247  002C0A  D7FA               	bra	u10377
 14248  002C0C                     l8474:
 14249  002C0C  B281               	btfsc	3969,1,c	;volatile
 14250  002C0E  D042               	goto	l8486
 14251  002C10  D7BC               	goto	l8464
 14252  002C12                     l8476:
 14253                           
 14254                           ;Test.c: 463: readADC(0);
 14255  002C12  0E00               	movlw	0
 14256  002C14  EC28  F02A         	call	_readADC
 14257                           
 14258                           ;Test.c: 464: int res = ADRESH<<8 | ADRESL;
 14259  002C18  50C3               	movf	4035,w,c	;volatile
 14260  002C1A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 14261  002C1E  0100               	movlb	0	; () banked
 14262  002C20  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 14263  002C22  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 14264  002C26  0100               	movlb	0	; () banked
 14265  002C28  6BAB               	clrf	??_PlatformTest& (0+255),b
 14266  002C2A  0100               	movlb	0	; () banked
 14267  002C2C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 14268  002C2E  0100               	movlb	0	; () banked
 14269  002C30  6FAF               	movwf	PlatformTest@res_1781& (0+255),b
 14270  002C32  0100               	movlb	0	; () banked
 14271  002C34  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 14272  002C36  0100               	movlb	0	; () banked
 14273  002C38  6FB0               	movwf	(PlatformTest@res_1781+1)& (0+255),b
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;Test.c: 465: IR_signal = (res > 800) ? 1 : 0;
 14277  002C3A  0100               	movlb	0	; () banked
 14278  002C3C  BFB0               	btfsc	(PlatformTest@res_1781+1)& (0+255),7,b
 14279  002C3E  D00A               	goto	u7280
 14280  002C40  0E21               	movlw	33
 14281  002C42  0100               	movlb	0	; () banked
 14282  002C44  5DAF               	subwf	PlatformTest@res_1781& (0+255),w,b
 14283  002C46  0E03               	movlw	3
 14284  002C48  0100               	movlb	0	; () banked
 14285  002C4A  59B0               	subwfb	(PlatformTest@res_1781+1)& (0+255),w,b
 14286  002C4C  A0D8               	btfss	status,0,c
 14287  002C4E  D002               	goto	u7280
 14288  002C50  0E01               	movlw	1
 14289  002C52  D001               	goto	u7290
 14290  002C54                     u7280:
 14291  002C54  0E00               	movlw	0
 14292  002C56                     u7290:
 14293  002C56  0100               	movlb	0	; () banked
 14294  002C58  6FE6               	movwf	_IR_signal& (0+255),b
 14295  002C5A  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 14296                           
 14297                           ;Test.c: 466: lcdInst(0b11000000);;
 14298  002C5C  0EC0               	movlw	192
 14299  002C5E  EC32  F02B         	call	_lcdInst
 14300                           
 14301                           ;Test.c: 467: printf("5:H|6:L|IR:%d   ", res);
 14302  002C62  0E03               	movlw	low STR_114
 14303  002C64  0100               	movlb	0	; () banked
 14304  002C66  6F8E               	movwf	printf@f& (0+255),b
 14305  002C68  0EFC               	movlw	high STR_114
 14306  002C6A  0100               	movlb	0	; () banked
 14307  002C6C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14308  002C6E  C0AF  F090         	movff	PlatformTest@res_1781,?_printf+2
 14309  002C72  C0B0  F091         	movff	PlatformTest@res_1781+1,?_printf+3
 14310  002C76  EC84  F00B         	call	_printf	;wreg free
 14311                           
 14312                           ;Test.c: 468: _delay((unsigned long)((100)*(32000000/4000.0)));
 14313  002C7A  0E05               	movlw	5
 14314  002C7C  0100               	movlb	0	; () banked
 14315  002C7E  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 14316  002C80  0E0F               	movlw	15
 14317  002C82  0100               	movlb	0	; () banked
 14318  002C84  6FAB               	movwf	??_PlatformTest& (0+255),b
 14319  002C86  0EF1               	movlw	241
 14320  002C88                     u10387:
 14321  002C88  2EE8               	decfsz	wreg,f,c
 14322  002C8A  D7FE               	bra	u10387
 14323  002C8C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14324  002C8E  D7FC               	bra	u10387
 14325  002C90  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 14326  002C92  D7FA               	bra	u10387
 14327  002C94                     l8486:
 14328  002C94  A281               	btfss	3969,1,c	;volatile
 14329  002C96  D7BD               	goto	l8476
 14330                           
 14331                           ;Test.c: 469: }
 14332                           ;Test.c: 470: if(PORTB >> 4 == 0b1111){
 14333  002C98  3881               	swapf	3969,w,c	;volatile
 14334  002C9A  0B0F               	andlw	15
 14335  002C9C  0A0F               	xorlw	15
 14336  002C9E  B4D8               	btfsc	status,2,c
 14337  002CA0  D09A               	goto	l1348
 14338                           
 14339                           ;Test.c: 473: else if(PORTB >> 4 == 0b0000){
 14340                           
 14341                           ;Test.c: 472: }
 14342                           
 14343                           ;Test.c: 471: break;
 14344  002CA2  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 14345  002CA6  0100               	movlb	0	; () banked
 14346  002CA8  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 14347  002CAA  0E0F               	movlw	15
 14348  002CAC  17AB               	andwf	??_PlatformTest& (0+255),f,b
 14349  002CAE  A4D8               	btfss	status,2,c
 14350  002CB0  D012               	goto	l8498
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;Test.c: 474: LATBbits.LATB2 = !LATBbits.LATB2;
 14354  002CB2  B48A               	btfsc	3978,2,c	;volatile
 14355  002CB4  D004               	goto	u7330
 14356  002CB6  0100               	movlb	0	; () banked
 14357  002CB8  6BAB               	clrf	??_PlatformTest& (0+255),b
 14358  002CBA  2BAB               	incf	??_PlatformTest& (0+255),f,b
 14359  002CBC  D002               	goto	u7348
 14360  002CBE                     u7330:
 14361  002CBE  0100               	movlb	0	; () banked
 14362  002CC0  6BAB               	clrf	??_PlatformTest& (0+255),b
 14363  002CC2                     u7348:
 14364  002CC2  0100               	movlb	0	; () banked
 14365  002CC4  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14366  002CC6  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 14367  002CC8  508A               	movf	3978,w,c	;volatile
 14368  002CCA  0100               	movlb	0	; () banked
 14369  002CCC  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14370  002CCE  0BFB               	andlw	-5
 14371  002CD0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 14372  002CD2  6E8A               	movwf	3978,c	;volatile
 14373                           
 14374                           ;Test.c: 475: }
 14375  002CD4  D07D               	goto	l1363
 14376  002CD6                     l8498:
 14377                           
 14378                           ; BSR set to: 0
 14379                           ;Test.c: 476: else if(PORTB >> 4 == 0b0011){
 14380  002CD6  3881               	swapf	3969,w,c	;volatile
 14381  002CD8  0B0F               	andlw	15
 14382  002CDA  0A03               	xorlw	3
 14383  002CDC  A4D8               	btfss	status,2,c
 14384  002CDE  D020               	goto	l8510
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;Test.c: 477: if(on){
 14388  002CE0  0100               	movlb	0	; () banked
 14389  002CE2  51B5               	movf	PlatformTest@on& (0+255),w,b
 14390  002CE4  0100               	movlb	0	; () banked
 14391  002CE6  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14392  002CE8  B4D8               	btfsc	status,2,c
 14393  002CEA  D010               	goto	l8506
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;Test.c: 478: f_arm_position = 1;
 14397  002CEC  0E00               	movlw	0
 14398  002CEE  0100               	movlb	0	; () banked
 14399  002CF0  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14400  002CF2  0E01               	movlw	1
 14401  002CF4  D00F               	goto	L15
 14402  002CF6                     l8504:
 14403                           
 14404                           ; BSR set to: 0
 14405                           ;Test.c: 479: on = !on;
 14406  002CF6  0100               	movlb	0	; () banked
 14407  002CF8  51B5               	movf	PlatformTest@on& (0+255),w,b
 14408  002CFA  0100               	movlb	0	; () banked
 14409  002CFC  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 14410  002CFE  A4D8               	btfss	status,2,c
 14411  002D00  D00D               	goto	u7390
 14412  002D02  D00A               	goto	u7391
 14413  002D04                     u7380:
 14414  002D04  0100               	movlb	0	; () banked
 14415  002D06  6FB5               	movwf	PlatformTest@on& (0+255),b
 14416  002D08  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 14417                           
 14418                           ;Test.c: 480: }
 14419  002D0A  D062               	goto	l1363
 14420  002D0C                     l8506:
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;Test.c: 481: else{
 14424                           ;Test.c: 482: f_arm_position = 0;
 14425  002D0C  0E00               	movlw	0
 14426  002D0E  0100               	movlb	0	; () banked
 14427  002D10  6FEF               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 14428  002D12  0E00               	movlw	0
 14429  002D14                     L15:
 14430  002D14  6FEE               	movwf	_f_arm_position& (0+255),b	;volatile
 14431  002D16  D7EF               	goto	l8504
 14432  002D18                     u7391:
 14433  002D18  0E01               	movlw	1
 14434  002D1A  D7F4               	goto	u7380
 14435  002D1C                     u7390:
 14436  002D1C  0E00               	movlw	0
 14437  002D1E  D7F2               	goto	u7380
 14438  002D20                     l8510:
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;Test.c: 487: else if(PORTB >> 4 == 0b0101){
 14442  002D20  3881               	swapf	3969,w,c	;volatile
 14443  002D22  0B0F               	andlw	15
 14444  002D24  0A05               	xorlw	5
 14445  002D26  A4D8               	btfss	status,2,c
 14446  002D28  D027               	goto	l8524
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;Test.c: 489: for(int i = 0; i<30; i++){
 14450  002D2A  0E00               	movlw	0
 14451  002D2C  0100               	movlb	0	; () banked
 14452  002D2E  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 14453  002D30  0E00               	movlw	0
 14454  002D32  6FB1               	movwf	PlatformTest@i& (0+255),b
 14455  002D34                     l8514:
 14456                           
 14457                           ; BSR set to: 0
 14458  002D34  0100               	movlb	0	; () banked
 14459  002D36  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 14460  002D38  D008               	goto	l1357
 14461  002D3A  0100               	movlb	0	; () banked
 14462  002D3C  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 14463  002D3E  E148               	bnz	l1363
 14464  002D40  0E1E               	movlw	30
 14465  002D42  0100               	movlb	0	; () banked
 14466  002D44  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 14467  002D46  B0D8               	btfsc	status,0,c
 14468  002D48  D043               	goto	l1363
 14469  002D4A                     l1357:
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;Test.c: 490: LATAbits.LATA4 = 1;
 14473  002D4A  8889               	bsf	3977,4,c	;volatile
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;Test.c: 491: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 14477  002D4C  0E4E               	movlw	78
 14478  002D4E  0100               	movlb	0	; () banked
 14479  002D50  6FAB               	movwf	??_PlatformTest& (0+255),b
 14480  002D52  0EEB               	movlw	235
 14481  002D54                     u10397:
 14482  002D54  2EE8               	decfsz	wreg,f,c
 14483  002D56  D7FE               	bra	u10397
 14484  002D58  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14485  002D5A  D7FC               	bra	u10397
 14486                           
 14487                           ;Test.c: 492: LATAbits.LATA4 = 0;
 14488  002D5C  9889               	bcf	3977,4,c	;volatile
 14489                           
 14490                           ;Test.c: 493: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 14491  002D5E  0E1A               	movlw	26
 14492  002D60  0100               	movlb	0	; () banked
 14493  002D62  6FAB               	movwf	??_PlatformTest& (0+255),b
 14494  002D64  0EF8               	movlw	248
 14495  002D66                     u10407:
 14496  002D66  2EE8               	decfsz	wreg,f,c
 14497  002D68  D7FE               	bra	u10407
 14498  002D6A  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14499  002D6C  D7FC               	bra	u10407
 14500  002D6E  F000               	nop	
 14501  002D70  0100               	movlb	0	; () banked
 14502  002D72  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 14503  002D74  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 14504  002D76  D7DE               	goto	l8514
 14505  002D78                     l8524:
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;Test.c: 496: else if (PORTB >> 4 == 0b0110){
 14509  002D78  3881               	swapf	3969,w,c	;volatile
 14510  002D7A  0B0F               	andlw	15
 14511  002D7C  0A06               	xorlw	6
 14512  002D7E  A4D8               	btfss	status,2,c
 14513  002D80  D027               	goto	l1363
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;Test.c: 498: for(int i = 0; i<30; i++){
 14517  002D82  0E00               	movlw	0
 14518  002D84  0100               	movlb	0	; () banked
 14519  002D86  6FB4               	movwf	(PlatformTest@i_1784+1)& (0+255),b
 14520  002D88  0E00               	movlw	0
 14521  002D8A  6FB3               	movwf	PlatformTest@i_1784& (0+255),b
 14522  002D8C                     l8528:
 14523                           
 14524                           ; BSR set to: 0
 14525  002D8C  0100               	movlb	0	; () banked
 14526  002D8E  BFB4               	btfsc	(PlatformTest@i_1784+1)& (0+255),7,b
 14527  002D90  D008               	goto	l1361
 14528  002D92  0100               	movlb	0	; () banked
 14529  002D94  51B4               	movf	(PlatformTest@i_1784+1)& (0+255),w,b
 14530  002D96  E11C               	bnz	l1363
 14531  002D98  0E1E               	movlw	30
 14532  002D9A  0100               	movlb	0	; () banked
 14533  002D9C  5DB3               	subwf	PlatformTest@i_1784& (0+255),w,b
 14534  002D9E  B0D8               	btfsc	status,0,c
 14535  002DA0  D017               	goto	l1363
 14536  002DA2                     l1361:
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;Test.c: 499: LATAbits.LATA4 = 1;
 14540  002DA2  8889               	bsf	3977,4,c	;volatile
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;Test.c: 500: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 14544  002DA4  0E3D               	movlw	61
 14545  002DA6  0100               	movlb	0	; () banked
 14546  002DA8  6FAB               	movwf	??_PlatformTest& (0+255),b
 14547  002DAA  0E41               	movlw	65
 14548  002DAC                     u10417:
 14549  002DAC  2EE8               	decfsz	wreg,f,c
 14550  002DAE  D7FE               	bra	u10417
 14551  002DB0  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14552  002DB2  D7FC               	bra	u10417
 14553                           
 14554                           ;Test.c: 501: LATAbits.LATA4 = 0;
 14555  002DB4  9889               	bcf	3977,4,c	;volatile
 14556                           
 14557                           ;Test.c: 502: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 14558  002DB6  0E2C               	movlw	44
 14559  002DB8  0100               	movlb	0	; () banked
 14560  002DBA  6FAB               	movwf	??_PlatformTest& (0+255),b
 14561  002DBC  0EA1               	movlw	161
 14562  002DBE                     u10427:
 14563  002DBE  2EE8               	decfsz	wreg,f,c
 14564  002DC0  D7FE               	bra	u10427
 14565  002DC2  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 14566  002DC4  D7FC               	bra	u10427
 14567  002DC6  D000               	nop2	
 14568  002DC8  0100               	movlb	0	; () banked
 14569  002DCA  4BB3               	infsnz	PlatformTest@i_1784& (0+255),f,b
 14570  002DCC  2BB4               	incf	(PlatformTest@i_1784+1)& (0+255),f,b
 14571  002DCE  D7DE               	goto	l8528
 14572  002DD0                     l1363:
 14573  002DD0  A281               	btfss	3969,1,c	;volatile
 14574  002DD2  D760               	goto	l8486
 14575  002DD4  D7FD               	goto	l1363
 14576  002DD6                     l1348:
 14577                           
 14578                           ;Test.c: 507: }
 14579                           ;Test.c: 509: LATCbits.LATC5 = 0;
 14580  002DD6  9A8B               	bcf	3979,5,c	;volatile
 14581                           
 14582                           ;Test.c: 510: TMR1IF = 1;
 14583  002DD8  809E               	bsf	3998,0,c	;volatile
 14584                           
 14585                           ;Test.c: 511: TMR3IF = 1;
 14586  002DDA  82A1               	bsf	4001,1,c	;volatile
 14587                           
 14588                           ;Test.c: 512: stopSignals();
 14589  002DDC  ECE4  F02A         	call	_stopSignals	;wreg free
 14590                           
 14591                           ;Test.c: 513: machine_state = Testing_state;
 14592  002DE0  0E03               	movlw	3
 14593  002DE2  0100               	movlb	0	; () banked
 14594  002DE4  6FFC               	movwf	_machine_state& (0+255),b
 14595                           
 14596                           ; BSR set to: 0
 14597  002DE6  0012               	return		;funcret
 14598  002DE8                     __end_of_PlatformTest:
 14599                           	opt stack 0
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           intcon2	equ	0xFF1
 14608                           intcon3	equ	0xFF0
 14609                           postinc0	equ	0xFEE
 14610                           wreg	equ	0xFE8
 14611                           postdec1	equ	0xFE5
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function _readADC *****************
 14621 ;; Defined at:
 14622 ;;		line 15 in file "ADCFunctionality.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;  channel         1    wreg     unsigned char 
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;  channel         1    1[BANK0 ] unsigned char 
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  1    wreg      void 
 14629 ;; Registers used:
 14630 ;;		wreg, status,2, status,0, cstack
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;Total ram usage:        2 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    7
 14643 ;; This function calls:
 14644 ;;		Nothing
 14645 ;; This function is called by:
 14646 ;;		_readIR
 14647 ;;		_readMAG
 14648 ;;		_sensorTest
 14649 ;;		_PlatformTest
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           	psect	text45
 14654  005450                     __ptext45:
 14655                           	opt stack 0
 14656  005450                     _readADC:
 14657                           	opt stack 20
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;incstack = 0
 14661                           ;readADC@channel stored from wreg
 14662  005450  0100               	movlb	0	; () banked
 14663  005452  6F81               	movwf	readADC@channel& (0+255),b
 14664                           
 14665                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 14666  005454  0100               	movlb	0	; () banked
 14667  005456  4581               	rlncf	readADC@channel& (0+255),w,b
 14668  005458  46E8               	rlncf	wreg,f,c
 14669  00545A  0BFC               	andlw	252
 14670  00545C  6EC2               	movwf	4034,c	;volatile
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 14674  00545E  80C2               	bsf	4034,0,c	;volatile
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 14678  005460  82C2               	bsf	4034,1,c	;volatile
 14679                           
 14680                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 14681  005462  D009               	goto	l6266
 14682  005464                     l6264:
 14683  005464  0E34               	movlw	52
 14684  005466  0100               	movlb	0	; () banked
 14685  005468  6F80               	movwf	??_readADC& (0+255),b
 14686  00546A  0EF1               	movlw	241
 14687  00546C                     u10437:
 14688  00546C  2EE8               	decfsz	wreg,f,c
 14689  00546E  D7FE               	bra	u10437
 14690  005470  2F80               	decfsz	??_readADC& (0+255),f,b
 14691  005472  D7FC               	bra	u10437
 14692  005474  D000               	nop2	
 14693  005476                     l6266:
 14694  005476  A2C2               	btfss	4034,1,c	;volatile
 14695  005478  0012               	return	
 14696  00547A  D7F4               	goto	l6264
 14697  00547C                     __end_of_readADC:
 14698                           	opt stack 0
 14699                           tblptru	equ	0xFF8
 14700                           tblptrh	equ	0xFF7
 14701                           tblptrl	equ	0xFF6
 14702                           tablat	equ	0xFF5
 14703                           prodh	equ	0xFF4
 14704                           prodl	equ	0xFF3
 14705                           intcon	equ	0xFF2
 14706                           intcon2	equ	0xFF1
 14707                           intcon3	equ	0xFF0
 14708                           postinc0	equ	0xFEE
 14709                           wreg	equ	0xFE8
 14710                           postdec1	equ	0xFE5
 14711                           fsr1l	equ	0xFE1
 14712                           indf2	equ	0xFDF
 14713                           postinc2	equ	0xFDE
 14714                           postdec2	equ	0xFDD
 14715                           fsr2h	equ	0xFDA
 14716                           fsr2l	equ	0xFD9
 14717                           status	equ	0xFD8
 14718                           
 14719 ;; *************** function _BothServos *****************
 14720 ;; Defined at:
 14721 ;;		line 351 in file "Test.c"
 14722 ;; Parameters:    Size  Location     Type
 14723 ;;		None
 14724 ;; Auto vars:     Size  Location     Type
 14725 ;;		None
 14726 ;; Return value:  Size  Location     Type
 14727 ;;                  1    wreg      void 
 14728 ;; Registers used:
 14729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14730 ;; Tracked objects:
 14731 ;;		On entry : 0/0
 14732 ;;		On exit  : 0/0
 14733 ;;		Unchanged: 0/0
 14734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14739 ;;Total ram usage:        2 bytes
 14740 ;; Hardware stack levels used:    1
 14741 ;; Hardware stack levels required when called:   10
 14742 ;; This function calls:
 14743 ;;		_initServos
 14744 ;;		_lcdInst
 14745 ;;		_printf
 14746 ;;		_stopSignals
 14747 ;;		_updateServoPosition
 14748 ;; This function is called by:
 14749 ;;		_Test
 14750 ;; This function uses a non-reentrant model
 14751 ;;
 14752                           
 14753                           	psect	text46
 14754  001B40                     __ptext46:
 14755                           	opt stack 0
 14756  001B40                     _BothServos:
 14757                           	opt stack 19
 14758                           
 14759                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14760                           
 14761                           ;incstack = 0
 14762  001B40  0E01               	movlw	1
 14763  001B42  EC32  F02B         	call	_lcdInst
 14764  001B46  0E68               	movlw	104
 14765  001B48  0100               	movlb	0	; () banked
 14766  001B4A  6FAB               	movwf	??_BothServos& (0+255),b
 14767  001B4C  0EE4               	movlw	228
 14768  001B4E                     u10447:
 14769  001B4E  2EE8               	decfsz	wreg,f,c
 14770  001B50  D7FE               	bra	u10447
 14771  001B52  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14772  001B54  D7FC               	bra	u10447
 14773  001B56  F000               	nop	
 14774  001B58  0E80               	movlw	128
 14775  001B5A  EC32  F02B         	call	_lcdInst
 14776                           
 14777                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 14778  001B5E  0EBE               	movlw	low STR_110
 14779  001B60  0100               	movlb	0	; () banked
 14780  001B62  6F8E               	movwf	printf@f& (0+255),b
 14781  001B64  0EFC               	movlw	high STR_110
 14782  001B66  0100               	movlb	0	; () banked
 14783  001B68  6F8F               	movwf	(printf@f+1)& (0+255),b
 14784  001B6A  EC84  F00B         	call	_printf	;wreg free
 14785                           
 14786                           ;Test.c: 354: TMR1ON = 1;
 14787  001B6E  80CD               	bsf	4045,0,c	;volatile
 14788                           
 14789                           ;Test.c: 355: TMR3ON = 1;
 14790  001B70  80B1               	bsf	4017,0,c	;volatile
 14791                           
 14792                           ;Test.c: 356: machine_state = Sorting_state;
 14793  001B72  0E01               	movlw	1
 14794  001B74  0100               	movlb	0	; () banked
 14795  001B76  6FFC               	movwf	_machine_state& (0+255),b
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;Test.c: 357: was_low_1 = 0;
 14799  001B78  0E00               	movlw	0
 14800  001B7A  6E78               	movwf	_was_low_1+1,c	;volatile
 14801  001B7C  0E00               	movlw	0
 14802  001B7E  6E77               	movwf	_was_low_1,c	;volatile
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;Test.c: 358: was_low_3 = 0;
 14806  001B80  0E00               	movlw	0
 14807  001B82  6E7C               	movwf	_was_low_3+1,c	;volatile
 14808  001B84  0E00               	movlw	0
 14809  001B86  6E7B               	movwf	_was_low_3,c	;volatile
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;Test.c: 364: initServos();
 14813  001B88  ECE7  F024         	call	_initServos	;wreg free
 14814                           
 14815                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14816  001B8C  0E3D               	movlw	61
 14817  001B8E  0100               	movlb	0	; () banked
 14818  001B90  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14819  001B92  0EE1               	movlw	225
 14820  001B94  0100               	movlb	0	; () banked
 14821  001B96  6FAB               	movwf	??_BothServos& (0+255),b
 14822  001B98  0E3F               	movlw	63
 14823  001B9A                     u10457:
 14824  001B9A  2EE8               	decfsz	wreg,f,c
 14825  001B9C  D7FE               	bra	u10457
 14826  001B9E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14827  001BA0  D7FC               	bra	u10457
 14828  001BA2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14829  001BA4  D7FA               	bra	u10457
 14830  001BA6  D000               	nop2	
 14831                           
 14832                           ;Test.c: 367: updateServoPosition(500, 1);
 14833  001BA8  0E01               	movlw	1
 14834  001BAA  0100               	movlb	0	; () banked
 14835  001BAC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14836  001BAE  0EF4               	movlw	244
 14837  001BB0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14838  001BB2  0E00               	movlw	0
 14839  001BB4  0100               	movlb	0	; () banked
 14840  001BB6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14841  001BB8  0E01               	movlw	1
 14842  001BBA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14843  001BBC  EC62  F024         	call	_updateServoPosition	;wreg free
 14844                           
 14845                           ;Test.c: 368: updateServoPosition(1050, 3);
 14846  001BC0  0E04               	movlw	4
 14847  001BC2  0100               	movlb	0	; () banked
 14848  001BC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14849  001BC6  0E1A               	movlw	26
 14850  001BC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14851  001BCA  0E00               	movlw	0
 14852  001BCC  0100               	movlb	0	; () banked
 14853  001BCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14854  001BD0  0E03               	movlw	3
 14855  001BD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14856  001BD4  EC62  F024         	call	_updateServoPosition	;wreg free
 14857                           
 14858                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 14859  001BD8  0E1F               	movlw	31
 14860  001BDA  0100               	movlb	0	; () banked
 14861  001BDC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14862  001BDE  0E71               	movlw	113
 14863  001BE0  0100               	movlb	0	; () banked
 14864  001BE2  6FAB               	movwf	??_BothServos& (0+255),b
 14865  001BE4  0E1E               	movlw	30
 14866  001BE6                     u10467:
 14867  001BE6  2EE8               	decfsz	wreg,f,c
 14868  001BE8  D7FE               	bra	u10467
 14869  001BEA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14870  001BEC  D7FC               	bra	u10467
 14871  001BEE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14872  001BF0  D7FA               	bra	u10467
 14873  001BF2  F000               	nop	
 14874                           
 14875                           ;Test.c: 370: updateServoPosition(1260, 3);
 14876  001BF4  0E04               	movlw	4
 14877  001BF6  0100               	movlb	0	; () banked
 14878  001BF8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14879  001BFA  0EEC               	movlw	236
 14880  001BFC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14881  001BFE  0E00               	movlw	0
 14882  001C00  0100               	movlb	0	; () banked
 14883  001C02  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14884  001C04  0E03               	movlw	3
 14885  001C06  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14886  001C08  EC62  F024         	call	_updateServoPosition	;wreg free
 14887                           
 14888                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 14889  001C0C  0E1D               	movlw	29
 14890  001C0E  0100               	movlb	0	; () banked
 14891  001C10  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14892  001C12  0E69               	movlw	105
 14893  001C14  0100               	movlb	0	; () banked
 14894  001C16  6FAB               	movwf	??_BothServos& (0+255),b
 14895  001C18  0EA5               	movlw	165
 14896  001C1A                     u10477:
 14897  001C1A  2EE8               	decfsz	wreg,f,c
 14898  001C1C  D7FE               	bra	u10477
 14899  001C1E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14900  001C20  D7FC               	bra	u10477
 14901  001C22  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14902  001C24  D7FA               	bra	u10477
 14903                           
 14904                           ;Test.c: 372: updateServoPosition(1050, 3);
 14905  001C26  0E04               	movlw	4
 14906  001C28  0100               	movlb	0	; () banked
 14907  001C2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14908  001C2C  0E1A               	movlw	26
 14909  001C2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14910  001C30  0E00               	movlw	0
 14911  001C32  0100               	movlb	0	; () banked
 14912  001C34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14913  001C36  0E03               	movlw	3
 14914  001C38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14915  001C3A  EC62  F024         	call	_updateServoPosition	;wreg free
 14916                           
 14917                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 14918  001C3E  0E1F               	movlw	31
 14919  001C40  0100               	movlb	0	; () banked
 14920  001C42  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14921  001C44  0E71               	movlw	113
 14922  001C46  0100               	movlb	0	; () banked
 14923  001C48  6FAB               	movwf	??_BothServos& (0+255),b
 14924  001C4A  0E1E               	movlw	30
 14925  001C4C                     u10487:
 14926  001C4C  2EE8               	decfsz	wreg,f,c
 14927  001C4E  D7FE               	bra	u10487
 14928  001C50  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14929  001C52  D7FC               	bra	u10487
 14930  001C54  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14931  001C56  D7FA               	bra	u10487
 14932  001C58  F000               	nop	
 14933                           
 14934                           ;Test.c: 375: updateServoPosition(850, 1);
 14935  001C5A  0E03               	movlw	3
 14936  001C5C  0100               	movlb	0	; () banked
 14937  001C5E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14938  001C60  0E52               	movlw	82
 14939  001C62  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14940  001C64  0E00               	movlw	0
 14941  001C66  0100               	movlb	0	; () banked
 14942  001C68  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14943  001C6A  0E01               	movlw	1
 14944  001C6C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14945  001C6E  EC62  F024         	call	_updateServoPosition	;wreg free
 14946                           
 14947                           ;Test.c: 376: updateServoPosition(1050, 3);
 14948  001C72  0E04               	movlw	4
 14949  001C74  0100               	movlb	0	; () banked
 14950  001C76  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14951  001C78  0E1A               	movlw	26
 14952  001C7A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14953  001C7C  0E00               	movlw	0
 14954  001C7E  0100               	movlb	0	; () banked
 14955  001C80  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14956  001C82  0E03               	movlw	3
 14957  001C84  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14958  001C86  EC62  F024         	call	_updateServoPosition	;wreg free
 14959                           
 14960                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 14961  001C8A  0E1F               	movlw	31
 14962  001C8C  0100               	movlb	0	; () banked
 14963  001C8E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14964  001C90  0E71               	movlw	113
 14965  001C92  0100               	movlb	0	; () banked
 14966  001C94  6FAB               	movwf	??_BothServos& (0+255),b
 14967  001C96  0E1E               	movlw	30
 14968  001C98                     u10497:
 14969  001C98  2EE8               	decfsz	wreg,f,c
 14970  001C9A  D7FE               	bra	u10497
 14971  001C9C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14972  001C9E  D7FC               	bra	u10497
 14973  001CA0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14974  001CA2  D7FA               	bra	u10497
 14975  001CA4  F000               	nop	
 14976                           
 14977                           ;Test.c: 378: updateServoPosition(1260, 3);
 14978  001CA6  0E04               	movlw	4
 14979  001CA8  0100               	movlb	0	; () banked
 14980  001CAA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14981  001CAC  0EEC               	movlw	236
 14982  001CAE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14983  001CB0  0E00               	movlw	0
 14984  001CB2  0100               	movlb	0	; () banked
 14985  001CB4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14986  001CB6  0E03               	movlw	3
 14987  001CB8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14988  001CBA  EC62  F024         	call	_updateServoPosition	;wreg free
 14989                           
 14990                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 14991  001CBE  0E1D               	movlw	29
 14992  001CC0  0100               	movlb	0	; () banked
 14993  001CC2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14994  001CC4  0E69               	movlw	105
 14995  001CC6  0100               	movlb	0	; () banked
 14996  001CC8  6FAB               	movwf	??_BothServos& (0+255),b
 14997  001CCA  0EA5               	movlw	165
 14998  001CCC                     u10507:
 14999  001CCC  2EE8               	decfsz	wreg,f,c
 15000  001CCE  D7FE               	bra	u10507
 15001  001CD0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15002  001CD2  D7FC               	bra	u10507
 15003  001CD4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15004  001CD6  D7FA               	bra	u10507
 15005                           
 15006                           ;Test.c: 380: updateServoPosition(1050, 3);
 15007  001CD8  0E04               	movlw	4
 15008  001CDA  0100               	movlb	0	; () banked
 15009  001CDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15010  001CDE  0E1A               	movlw	26
 15011  001CE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15012  001CE2  0E00               	movlw	0
 15013  001CE4  0100               	movlb	0	; () banked
 15014  001CE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15015  001CE8  0E03               	movlw	3
 15016  001CEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15017  001CEC  EC62  F024         	call	_updateServoPosition	;wreg free
 15018                           
 15019                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15020  001CF0  0E1F               	movlw	31
 15021  001CF2  0100               	movlb	0	; () banked
 15022  001CF4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15023  001CF6  0E71               	movlw	113
 15024  001CF8  0100               	movlb	0	; () banked
 15025  001CFA  6FAB               	movwf	??_BothServos& (0+255),b
 15026  001CFC  0E1E               	movlw	30
 15027  001CFE                     u10517:
 15028  001CFE  2EE8               	decfsz	wreg,f,c
 15029  001D00  D7FE               	bra	u10517
 15030  001D02  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15031  001D04  D7FC               	bra	u10517
 15032  001D06  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15033  001D08  D7FA               	bra	u10517
 15034  001D0A  F000               	nop	
 15035                           
 15036                           ;Test.c: 383: updateServoPosition(500, 1);
 15037  001D0C  0E01               	movlw	1
 15038  001D0E  0100               	movlb	0	; () banked
 15039  001D10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15040  001D12  0EF4               	movlw	244
 15041  001D14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15042  001D16  0E00               	movlw	0
 15043  001D18  0100               	movlb	0	; () banked
 15044  001D1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15045  001D1C  0E01               	movlw	1
 15046  001D1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15047  001D20  EC62  F024         	call	_updateServoPosition	;wreg free
 15048                           
 15049                           ;Test.c: 384: updateServoPosition(1050, 3);
 15050  001D24  0E04               	movlw	4
 15051  001D26  0100               	movlb	0	; () banked
 15052  001D28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15053  001D2A  0E1A               	movlw	26
 15054  001D2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15055  001D2E  0E00               	movlw	0
 15056  001D30  0100               	movlb	0	; () banked
 15057  001D32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15058  001D34  0E03               	movlw	3
 15059  001D36  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15060  001D38  EC62  F024         	call	_updateServoPosition	;wreg free
 15061                           
 15062                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 15063  001D3C  0E1F               	movlw	31
 15064  001D3E  0100               	movlb	0	; () banked
 15065  001D40  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15066  001D42  0E71               	movlw	113
 15067  001D44  0100               	movlb	0	; () banked
 15068  001D46  6FAB               	movwf	??_BothServos& (0+255),b
 15069  001D48  0E1E               	movlw	30
 15070  001D4A                     u10527:
 15071  001D4A  2EE8               	decfsz	wreg,f,c
 15072  001D4C  D7FE               	bra	u10527
 15073  001D4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15074  001D50  D7FC               	bra	u10527
 15075  001D52  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15076  001D54  D7FA               	bra	u10527
 15077  001D56  F000               	nop	
 15078                           
 15079                           ;Test.c: 386: updateServoPosition(1260, 3);
 15080  001D58  0E04               	movlw	4
 15081  001D5A  0100               	movlb	0	; () banked
 15082  001D5C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15083  001D5E  0EEC               	movlw	236
 15084  001D60  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15085  001D62  0E00               	movlw	0
 15086  001D64  0100               	movlb	0	; () banked
 15087  001D66  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15088  001D68  0E03               	movlw	3
 15089  001D6A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15090  001D6C  EC62  F024         	call	_updateServoPosition	;wreg free
 15091                           
 15092                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 15093  001D70  0E1D               	movlw	29
 15094  001D72  0100               	movlb	0	; () banked
 15095  001D74  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15096  001D76  0E69               	movlw	105
 15097  001D78  0100               	movlb	0	; () banked
 15098  001D7A  6FAB               	movwf	??_BothServos& (0+255),b
 15099  001D7C  0EA5               	movlw	165
 15100  001D7E                     u10537:
 15101  001D7E  2EE8               	decfsz	wreg,f,c
 15102  001D80  D7FE               	bra	u10537
 15103  001D82  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15104  001D84  D7FC               	bra	u10537
 15105  001D86  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15106  001D88  D7FA               	bra	u10537
 15107                           
 15108                           ;Test.c: 388: updateServoPosition(1050, 3);
 15109  001D8A  0E04               	movlw	4
 15110  001D8C  0100               	movlb	0	; () banked
 15111  001D8E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15112  001D90  0E1A               	movlw	26
 15113  001D92  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15114  001D94  0E00               	movlw	0
 15115  001D96  0100               	movlb	0	; () banked
 15116  001D98  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15117  001D9A  0E03               	movlw	3
 15118  001D9C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15119  001D9E  EC62  F024         	call	_updateServoPosition	;wreg free
 15120                           
 15121                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15122  001DA2  0E3D               	movlw	61
 15123  001DA4  0100               	movlb	0	; () banked
 15124  001DA6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15125  001DA8  0EE1               	movlw	225
 15126  001DAA  0100               	movlb	0	; () banked
 15127  001DAC  6FAB               	movwf	??_BothServos& (0+255),b
 15128  001DAE  0E3F               	movlw	63
 15129  001DB0                     u10547:
 15130  001DB0  2EE8               	decfsz	wreg,f,c
 15131  001DB2  D7FE               	bra	u10547
 15132  001DB4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15133  001DB6  D7FC               	bra	u10547
 15134  001DB8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15135  001DBA  D7FA               	bra	u10547
 15136  001DBC  D000               	nop2	
 15137                           
 15138                           ;Test.c: 391: updateServoPosition(1670, 1);
 15139  001DBE  0E06               	movlw	6
 15140  001DC0  0100               	movlb	0	; () banked
 15141  001DC2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15142  001DC4  0E86               	movlw	134
 15143  001DC6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15144  001DC8  0E00               	movlw	0
 15145  001DCA  0100               	movlb	0	; () banked
 15146  001DCC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15147  001DCE  0E01               	movlw	1
 15148  001DD0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15149  001DD2  EC62  F024         	call	_updateServoPosition	;wreg free
 15150                           
 15151                           ;Test.c: 392: updateServoPosition(1050, 3);
 15152  001DD6  0E04               	movlw	4
 15153  001DD8  0100               	movlb	0	; () banked
 15154  001DDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15155  001DDC  0E1A               	movlw	26
 15156  001DDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15157  001DE0  0E00               	movlw	0
 15158  001DE2  0100               	movlb	0	; () banked
 15159  001DE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15160  001DE6  0E03               	movlw	3
 15161  001DE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15162  001DEA  EC62  F024         	call	_updateServoPosition	;wreg free
 15163                           
 15164                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 15165  001DEE  0E1F               	movlw	31
 15166  001DF0  0100               	movlb	0	; () banked
 15167  001DF2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15168  001DF4  0E71               	movlw	113
 15169  001DF6  0100               	movlb	0	; () banked
 15170  001DF8  6FAB               	movwf	??_BothServos& (0+255),b
 15171  001DFA  0E1E               	movlw	30
 15172  001DFC                     u10557:
 15173  001DFC  2EE8               	decfsz	wreg,f,c
 15174  001DFE  D7FE               	bra	u10557
 15175  001E00  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15176  001E02  D7FC               	bra	u10557
 15177  001E04  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15178  001E06  D7FA               	bra	u10557
 15179  001E08  F000               	nop	
 15180                           
 15181                           ;Test.c: 394: updateServoPosition(1390, 3);
 15182  001E0A  0E05               	movlw	5
 15183  001E0C  0100               	movlb	0	; () banked
 15184  001E0E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15185  001E10  0E6E               	movlw	110
 15186  001E12  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15187  001E14  0E00               	movlw	0
 15188  001E16  0100               	movlb	0	; () banked
 15189  001E18  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15190  001E1A  0E03               	movlw	3
 15191  001E1C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15192  001E1E  EC62  F024         	call	_updateServoPosition	;wreg free
 15193                           
 15194                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 15195  001E22  0E1D               	movlw	29
 15196  001E24  0100               	movlb	0	; () banked
 15197  001E26  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15198  001E28  0E69               	movlw	105
 15199  001E2A  0100               	movlb	0	; () banked
 15200  001E2C  6FAB               	movwf	??_BothServos& (0+255),b
 15201  001E2E  0EA5               	movlw	165
 15202  001E30                     u10567:
 15203  001E30  2EE8               	decfsz	wreg,f,c
 15204  001E32  D7FE               	bra	u10567
 15205  001E34  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15206  001E36  D7FC               	bra	u10567
 15207  001E38  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15208  001E3A  D7FA               	bra	u10567
 15209                           
 15210                           ;Test.c: 396: updateServoPosition(1050, 3);
 15211  001E3C  0E04               	movlw	4
 15212  001E3E  0100               	movlb	0	; () banked
 15213  001E40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15214  001E42  0E1A               	movlw	26
 15215  001E44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15216  001E46  0E00               	movlw	0
 15217  001E48  0100               	movlb	0	; () banked
 15218  001E4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15219  001E4C  0E03               	movlw	3
 15220  001E4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15221  001E50  EC62  F024         	call	_updateServoPosition	;wreg free
 15222                           
 15223                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 15224  001E54  0E1F               	movlw	31
 15225  001E56  0100               	movlb	0	; () banked
 15226  001E58  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15227  001E5A  0E71               	movlw	113
 15228  001E5C  0100               	movlb	0	; () banked
 15229  001E5E  6FAB               	movwf	??_BothServos& (0+255),b
 15230  001E60  0E1E               	movlw	30
 15231  001E62                     u10577:
 15232  001E62  2EE8               	decfsz	wreg,f,c
 15233  001E64  D7FE               	bra	u10577
 15234  001E66  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15235  001E68  D7FC               	bra	u10577
 15236  001E6A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15237  001E6C  D7FA               	bra	u10577
 15238  001E6E  F000               	nop	
 15239                           
 15240                           ;Test.c: 399: updateServoPosition(2400, 1);
 15241  001E70  0E09               	movlw	9
 15242  001E72  0100               	movlb	0	; () banked
 15243  001E74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15244  001E76  0E60               	movlw	96
 15245  001E78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15246  001E7A  0E00               	movlw	0
 15247  001E7C  0100               	movlb	0	; () banked
 15248  001E7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15249  001E80  0E01               	movlw	1
 15250  001E82  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15251  001E84  EC62  F024         	call	_updateServoPosition	;wreg free
 15252                           
 15253                           ;Test.c: 400: updateServoPosition(1050, 3);
 15254  001E88  0E04               	movlw	4
 15255  001E8A  0100               	movlb	0	; () banked
 15256  001E8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15257  001E8E  0E1A               	movlw	26
 15258  001E90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15259  001E92  0E00               	movlw	0
 15260  001E94  0100               	movlb	0	; () banked
 15261  001E96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15262  001E98  0E03               	movlw	3
 15263  001E9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15264  001E9C  EC62  F024         	call	_updateServoPosition	;wreg free
 15265                           
 15266                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 15267  001EA0  0E1F               	movlw	31
 15268  001EA2  0100               	movlb	0	; () banked
 15269  001EA4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15270  001EA6  0E71               	movlw	113
 15271  001EA8  0100               	movlb	0	; () banked
 15272  001EAA  6FAB               	movwf	??_BothServos& (0+255),b
 15273  001EAC  0E1E               	movlw	30
 15274  001EAE                     u10587:
 15275  001EAE  2EE8               	decfsz	wreg,f,c
 15276  001EB0  D7FE               	bra	u10587
 15277  001EB2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15278  001EB4  D7FC               	bra	u10587
 15279  001EB6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15280  001EB8  D7FA               	bra	u10587
 15281  001EBA  F000               	nop	
 15282                           
 15283                           ;Test.c: 402: updateServoPosition(1390, 3);
 15284  001EBC  0E05               	movlw	5
 15285  001EBE  0100               	movlb	0	; () banked
 15286  001EC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15287  001EC2  0E6E               	movlw	110
 15288  001EC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15289  001EC6  0E00               	movlw	0
 15290  001EC8  0100               	movlb	0	; () banked
 15291  001ECA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15292  001ECC  0E03               	movlw	3
 15293  001ECE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15294  001ED0  EC62  F024         	call	_updateServoPosition	;wreg free
 15295                           
 15296                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 15297  001ED4  0E1D               	movlw	29
 15298  001ED6  0100               	movlb	0	; () banked
 15299  001ED8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15300  001EDA  0E69               	movlw	105
 15301  001EDC  0100               	movlb	0	; () banked
 15302  001EDE  6FAB               	movwf	??_BothServos& (0+255),b
 15303  001EE0  0EA5               	movlw	165
 15304  001EE2                     u10597:
 15305  001EE2  2EE8               	decfsz	wreg,f,c
 15306  001EE4  D7FE               	bra	u10597
 15307  001EE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15308  001EE8  D7FC               	bra	u10597
 15309  001EEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15310  001EEC  D7FA               	bra	u10597
 15311                           
 15312                           ;Test.c: 404: updateServoPosition(1050, 3);
 15313  001EEE  0E04               	movlw	4
 15314  001EF0  0100               	movlb	0	; () banked
 15315  001EF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15316  001EF4  0E1A               	movlw	26
 15317  001EF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15318  001EF8  0E00               	movlw	0
 15319  001EFA  0100               	movlb	0	; () banked
 15320  001EFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15321  001EFE  0E03               	movlw	3
 15322  001F00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15323  001F02  EC62  F024         	call	_updateServoPosition	;wreg free
 15324                           
 15325                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 15326  001F06  0E1F               	movlw	31
 15327  001F08  0100               	movlb	0	; () banked
 15328  001F0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15329  001F0C  0E71               	movlw	113
 15330  001F0E  0100               	movlb	0	; () banked
 15331  001F10  6FAB               	movwf	??_BothServos& (0+255),b
 15332  001F12  0E1E               	movlw	30
 15333  001F14                     u10607:
 15334  001F14  2EE8               	decfsz	wreg,f,c
 15335  001F16  D7FE               	bra	u10607
 15336  001F18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15337  001F1A  D7FC               	bra	u10607
 15338  001F1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15339  001F1E  D7FA               	bra	u10607
 15340  001F20  F000               	nop	
 15341                           
 15342                           ;Test.c: 407: TMR1ON = 0;
 15343  001F22  90CD               	bcf	4045,0,c	;volatile
 15344                           
 15345                           ;Test.c: 408: TMR3ON = 0;
 15346  001F24  90B1               	bcf	4017,0,c	;volatile
 15347                           
 15348                           ;Test.c: 409: (INTCONbits.GIE = 0);
 15349  001F26  9EF2               	bcf	intcon,7,c	;volatile
 15350                           
 15351                           ;Test.c: 410: stopSignals();
 15352  001F28  ECE4  F02A         	call	_stopSignals	;wreg free
 15353                           
 15354                           ;Test.c: 411: machine_state = Testing_state;
 15355  001F2C  0E03               	movlw	3
 15356  001F2E  0100               	movlb	0	; () banked
 15357  001F30  6FFC               	movwf	_machine_state& (0+255),b
 15358                           
 15359                           ; BSR set to: 0
 15360  001F32  0012               	return		;funcret
 15361  001F34                     __end_of_BothServos:
 15362                           	opt stack 0
 15363                           tblptru	equ	0xFF8
 15364                           tblptrh	equ	0xFF7
 15365                           tblptrl	equ	0xFF6
 15366                           tablat	equ	0xFF5
 15367                           prodh	equ	0xFF4
 15368                           prodl	equ	0xFF3
 15369                           intcon	equ	0xFF2
 15370                           intcon2	equ	0xFF1
 15371                           intcon3	equ	0xFF0
 15372                           postinc0	equ	0xFEE
 15373                           wreg	equ	0xFE8
 15374                           postdec1	equ	0xFE5
 15375                           fsr1l	equ	0xFE1
 15376                           indf2	equ	0xFDF
 15377                           postinc2	equ	0xFDE
 15378                           postdec2	equ	0xFDD
 15379                           fsr2h	equ	0xFDA
 15380                           fsr2l	equ	0xFD9
 15381                           status	equ	0xFD8
 15382                           
 15383 ;; *************** function _stopSignals *****************
 15384 ;; Defined at:
 15385 ;;		line 70 in file "main.c"
 15386 ;; Parameters:    Size  Location     Type
 15387 ;;		None
 15388 ;; Auto vars:     Size  Location     Type
 15389 ;;		None
 15390 ;; Return value:  Size  Location     Type
 15391 ;;                  1    wreg      void 
 15392 ;; Registers used:
 15393 ;;		wreg, status,2
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15403 ;;Total ram usage:        0 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    7
 15406 ;; This function calls:
 15407 ;;		Nothing
 15408 ;; This function is called by:
 15409 ;;		_main
 15410 ;;		_BothServos
 15411 ;;		_PlatformTest
 15412 ;;		_arm
 15413 ;; This function uses a non-reentrant model
 15414 ;;
 15415                           
 15416                           	psect	text47
 15417  0055C8                     __ptext47:
 15418                           	opt stack 0
 15419  0055C8                     _stopSignals:
 15420                           	opt stack 23
 15421                           
 15422                           ;main.c: 71: LATA = 0x00;
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;incstack = 0
 15426  0055C8  0E00               	movlw	0
 15427  0055CA  6E89               	movwf	3977,c	;volatile
 15428                           
 15429                           ;main.c: 72: LATB = 0x00;
 15430  0055CC  0E00               	movlw	0
 15431  0055CE  6E8A               	movwf	3978,c	;volatile
 15432                           
 15433                           ;main.c: 73: LATC = 0x00;
 15434  0055D0  0E00               	movlw	0
 15435  0055D2  6E8B               	movwf	3979,c	;volatile
 15436                           
 15437                           ;main.c: 74: LATD = 0x00;
 15438  0055D4  0E00               	movlw	0
 15439  0055D6  6E8C               	movwf	3980,c	;volatile
 15440                           
 15441                           ;main.c: 75: LATE = 0x00;
 15442  0055D8  0E00               	movlw	0
 15443  0055DA  6E8D               	movwf	3981,c	;volatile
 15444                           
 15445                           ;main.c: 76: TMR1ON = 0;
 15446  0055DC  90CD               	bcf	4045,0,c	;volatile
 15447                           
 15448                           ;main.c: 77: TMR2ON = 0;
 15449  0055DE  94CA               	bcf	4042,2,c	;volatile
 15450                           
 15451                           ;main.c: 78: TMR3ON = 0;
 15452  0055E0  90B1               	bcf	4017,0,c	;volatile
 15453  0055E2  0012               	return		;funcret
 15454  0055E4                     __end_of_stopSignals:
 15455                           	opt stack 0
 15456                           tblptru	equ	0xFF8
 15457                           tblptrh	equ	0xFF7
 15458                           tblptrl	equ	0xFF6
 15459                           tablat	equ	0xFF5
 15460                           prodh	equ	0xFF4
 15461                           prodl	equ	0xFF3
 15462                           intcon	equ	0xFF2
 15463                           intcon2	equ	0xFF1
 15464                           intcon3	equ	0xFF0
 15465                           postinc0	equ	0xFEE
 15466                           wreg	equ	0xFE8
 15467                           postdec1	equ	0xFE5
 15468                           fsr1l	equ	0xFE1
 15469                           indf2	equ	0xFDF
 15470                           postinc2	equ	0xFDE
 15471                           postdec2	equ	0xFDD
 15472                           fsr2h	equ	0xFDA
 15473                           fsr2l	equ	0xFD9
 15474                           status	equ	0xFD8
 15475                           
 15476 ;; *************** function _initServos *****************
 15477 ;; Defined at:
 15478 ;;		line 436 in file "sort.c"
 15479 ;; Parameters:    Size  Location     Type
 15480 ;;		None
 15481 ;; Auto vars:     Size  Location     Type
 15482 ;;		None
 15483 ;; Return value:  Size  Location     Type
 15484 ;;                  1    wreg      void 
 15485 ;; Registers used:
 15486 ;;		wreg, status,2, status,0, cstack
 15487 ;; Tracked objects:
 15488 ;;		On entry : 0/0
 15489 ;;		On exit  : 0/0
 15490 ;;		Unchanged: 0/0
 15491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15496 ;;Total ram usage:        1 bytes
 15497 ;; Hardware stack levels used:    1
 15498 ;; Hardware stack levels required when called:    8
 15499 ;; This function calls:
 15500 ;;		_updateServoPosition
 15501 ;; This function is called by:
 15502 ;;		_Loading
 15503 ;;		_BothServos
 15504 ;; This function uses a non-reentrant model
 15505 ;;
 15506                           
 15507                           	psect	text48
 15508  0049CE                     __ptext48:
 15509                           	opt stack 0
 15510  0049CE                     _initServos:
 15511                           	opt stack 20
 15512                           
 15513                           ;sort.c: 438: updateServoPosition(1200, 1);
 15514                           
 15515                           ;incstack = 0
 15516  0049CE  0E04               	movlw	4
 15517  0049D0  0100               	movlb	0	; () banked
 15518  0049D2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15519  0049D4  0EB0               	movlw	176
 15520  0049D6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15521  0049D8  0E00               	movlw	0
 15522  0049DA  0100               	movlb	0	; () banked
 15523  0049DC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15524  0049DE  0E01               	movlw	1
 15525  0049E0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15526  0049E2  EC62  F024         	call	_updateServoPosition	;wreg free
 15527                           
 15528                           ;sort.c: 439: updateServoPosition(1050, 3);
 15529  0049E6  0E04               	movlw	4
 15530  0049E8  0100               	movlb	0	; () banked
 15531  0049EA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15532  0049EC  0E1A               	movlw	26
 15533  0049EE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15534  0049F0  0E00               	movlw	0
 15535  0049F2  0100               	movlb	0	; () banked
 15536  0049F4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15537  0049F6  0E03               	movlw	3
 15538  0049F8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15539  0049FA  EC62  F024         	call	_updateServoPosition	;wreg free
 15540                           
 15541                           ;sort.c: 440: TMR1ON = 1;
 15542  0049FE  80CD               	bsf	4045,0,c	;volatile
 15543                           
 15544                           ;sort.c: 441: was_low_1 = 0;
 15545  004A00  0E00               	movlw	0
 15546  004A02  6E78               	movwf	_was_low_1+1,c	;volatile
 15547  004A04  0E00               	movlw	0
 15548  004A06  6E77               	movwf	_was_low_1,c	;volatile
 15549                           
 15550                           ;sort.c: 443: _delay((unsigned long)((5)*(32000000/4000.0)));
 15551  004A08  0E34               	movlw	52
 15552  004A0A  0100               	movlb	0	; () banked
 15553  004A0C  6F88               	movwf	??_initServos& (0+255),b
 15554  004A0E  0EF1               	movlw	241
 15555  004A10                     u10617:
 15556  004A10  2EE8               	decfsz	wreg,f,c
 15557  004A12  D7FE               	bra	u10617
 15558  004A14  2F88               	decfsz	??_initServos& (0+255),f,b
 15559  004A16  D7FC               	bra	u10617
 15560  004A18  D000               	nop2	
 15561                           
 15562                           ;sort.c: 445: TMR3ON = 1;
 15563  004A1A  80B1               	bsf	4017,0,c	;volatile
 15564                           
 15565                           ;sort.c: 446: was_low_3 = 0;
 15566  004A1C  0E00               	movlw	0
 15567  004A1E  6E7C               	movwf	_was_low_3+1,c	;volatile
 15568  004A20  0E00               	movlw	0
 15569  004A22  6E7B               	movwf	_was_low_3,c	;volatile
 15570                           
 15571                           ;sort.c: 449: _delay((unsigned long)((1)*(32000000/4000.0)));
 15572  004A24  0E0B               	movlw	11
 15573  004A26  0100               	movlb	0	; () banked
 15574  004A28  6F88               	movwf	??_initServos& (0+255),b
 15575  004A2A  0E62               	movlw	98
 15576  004A2C                     u10627:
 15577  004A2C  2EE8               	decfsz	wreg,f,c
 15578  004A2E  D7FE               	bra	u10627
 15579  004A30  2F88               	decfsz	??_initServos& (0+255),f,b
 15580  004A32  D7FC               	bra	u10627
 15581  004A34  F000               	nop	
 15582                           
 15583                           ;sort.c: 450: LATBbits.LATB3 = 0;
 15584  004A36  968A               	bcf	3978,3,c	;volatile
 15585                           
 15586                           ;sort.c: 451: TMR2ON = 1;
 15587  004A38  84CA               	bsf	4042,2,c	;volatile
 15588                           
 15589                           ;sort.c: 452: was_low_2 = 0;
 15590  004A3A  0E00               	movlw	0
 15591  004A3C  6E7A               	movwf	_was_low_2+1,c	;volatile
 15592  004A3E  0E00               	movlw	0
 15593  004A40  6E79               	movwf	_was_low_2,c	;volatile
 15594                           
 15595                           ;sort.c: 454: LATCbits.LATC0 = 1;
 15596  004A42  808B               	bsf	3979,0,c	;volatile
 15597  004A44  0012               	return		;funcret
 15598  004A46                     __end_of_initServos:
 15599                           	opt stack 0
 15600                           tblptru	equ	0xFF8
 15601                           tblptrh	equ	0xFF7
 15602                           tblptrl	equ	0xFF6
 15603                           tablat	equ	0xFF5
 15604                           prodh	equ	0xFF4
 15605                           prodl	equ	0xFF3
 15606                           intcon	equ	0xFF2
 15607                           intcon2	equ	0xFF1
 15608                           intcon3	equ	0xFF0
 15609                           postinc0	equ	0xFEE
 15610                           wreg	equ	0xFE8
 15611                           postdec1	equ	0xFE5
 15612                           fsr1l	equ	0xFE1
 15613                           indf2	equ	0xFDF
 15614                           postinc2	equ	0xFDE
 15615                           postdec2	equ	0xFDD
 15616                           fsr2h	equ	0xFDA
 15617                           fsr2l	equ	0xFD9
 15618                           status	equ	0xFD8
 15619                           
 15620 ;; *************** function _updateServoPosition *****************
 15621 ;; Defined at:
 15622 ;;		line 522 in file "sort.c"
 15623 ;; Parameters:    Size  Location     Type
 15624 ;;  time_us         2    0[BANK0 ] int 
 15625 ;;  timer           2    2[BANK0 ] int 
 15626 ;; Auto vars:     Size  Location     Type
 15627 ;;  my_time         2    6[BANK0 ] unsigned int 
 15628 ;; Return value:  Size  Location     Type
 15629 ;;                  1    wreg      void 
 15630 ;; Registers used:
 15631 ;;		wreg, status,2, status,0
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15637 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15639 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15640 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15641 ;;Total ram usage:        8 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; Hardware stack levels required when called:    7
 15644 ;; This function calls:
 15645 ;;		Nothing
 15646 ;; This function is called by:
 15647 ;;		_Distribution
 15648 ;;		_initServos
 15649 ;;		_actuatorTest
 15650 ;;		_BothServos
 15651 ;; This function uses a non-reentrant model
 15652 ;;
 15653                           
 15654                           	psect	text49
 15655  0048C4                     __ptext49:
 15656                           	opt stack 0
 15657  0048C4                     _updateServoPosition:
 15658                           	opt stack 20
 15659                           
 15660                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 15661                           
 15662                           ;incstack = 0
 15663  0048C4  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15664  0048C8  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15665  0048CC  0100               	movlb	0	; () banked
 15666  0048CE  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15667  0048D0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15668  0048D2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15669  0048D4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15670  0048D6  0EFF               	movlw	255
 15671  0048D8  0100               	movlb	0	; () banked
 15672  0048DA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15673  0048DC  0100               	movlb	0	; () banked
 15674  0048DE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15675  0048E0  0EFF               	movlw	255
 15676  0048E2  0100               	movlb	0	; () banked
 15677  0048E4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15678  0048E6  0100               	movlb	0	; () banked
 15679  0048E8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15680                           
 15681                           ;sort.c: 524: switch(timer){
 15682  0048EA  D01D               	goto	l6634
 15683  0048EC                     l6628:
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 15687  0048EC  0100               	movlb	0	; () banked
 15688  0048EE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15689  0048F0  0100               	movlb	0	; () banked
 15690  0048F2  6FDA               	movwf	_servoTimes& (0+255),b
 15691  0048F4  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 15692                           
 15693                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 15694  0048F6  0100               	movlb	0	; () banked
 15695  0048F8  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15696  0048FA  0100               	movlb	0	; () banked
 15697  0048FC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 15698  0048FE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;sort.c: 529: pan_servo_state = time_us;
 15702  004900  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15703  004904  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15704  004908                     l890:
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 15708  004908  0100               	movlb	0	; () banked
 15709  00490A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15710  00490C  0100               	movlb	0	; () banked
 15711  00490E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15712  004910  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15713                           
 15714                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 15715  004912  0100               	movlb	0	; () banked
 15716  004914  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15717  004916  0100               	movlb	0	; () banked
 15718  004918  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15719  00491A  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;sort.c: 534: tilt_servo_state = time_us;
 15723  00491C  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15724  004920  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15725                           
 15726                           ;sort.c: 535: }
 15727  004924  0012               	return	
 15728  004926                     l6634:
 15729                           
 15730                           ; BSR set to: 0
 15731  004926  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15732  00492A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15733                           
 15734                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15735                           ; Switch size 1, requested type "space"
 15736                           ; Number of cases is 1, Range of values is 0 to 0
 15737                           ; switch strategies available:
 15738                           ; Name         Instructions Cycles
 15739                           ; simple_byte            4     3 (average)
 15740                           ;	Chosen strategy is simple_byte
 15741  00492E  0100               	movlb	0	; () banked
 15742  004930  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15743  004932  0A00               	xorlw	0	; case 0
 15744  004934  A4D8               	btfss	status,2,c
 15745  004936  0012               	return	
 15746                           
 15747                           ; BSR set to: 0
 15748                           ; Switch size 1, requested type "space"
 15749                           ; Number of cases is 2, Range of values is 1 to 3
 15750                           ; switch strategies available:
 15751                           ; Name         Instructions Cycles
 15752                           ; simple_byte            7     4 (average)
 15753                           ;	Chosen strategy is simple_byte
 15754  004938  0100               	movlb	0	; () banked
 15755  00493A  5184               	movf	??_updateServoPosition& (0+255),w,b
 15756  00493C  0A01               	xorlw	1	; case 1
 15757  00493E  B4D8               	btfsc	status,2,c
 15758  004940  D7D5               	goto	l6628
 15759  004942  0A02               	xorlw	2	; case 3
 15760  004944  A4D8               	btfss	status,2,c
 15761  004946  0012               	return	
 15762  004948  D7DF               	goto	l890
 15763  00494A                     __end_of_updateServoPosition:
 15764                           	opt stack 0
 15765                           tblptru	equ	0xFF8
 15766                           tblptrh	equ	0xFF7
 15767                           tblptrl	equ	0xFF6
 15768                           tablat	equ	0xFF5
 15769                           prodh	equ	0xFF4
 15770                           prodl	equ	0xFF3
 15771                           intcon	equ	0xFF2
 15772                           intcon2	equ	0xFF1
 15773                           intcon3	equ	0xFF0
 15774                           postinc0	equ	0xFEE
 15775                           wreg	equ	0xFE8
 15776                           postdec1	equ	0xFE5
 15777                           fsr1l	equ	0xFE1
 15778                           indf2	equ	0xFDF
 15779                           postinc2	equ	0xFDE
 15780                           postdec2	equ	0xFDD
 15781                           fsr2h	equ	0xFDA
 15782                           fsr2l	equ	0xFD9
 15783                           status	equ	0xFD8
 15784                           
 15785 ;; *************** function _BlockerTest *****************
 15786 ;; Defined at:
 15787 ;;		line 582 in file "Test.c"
 15788 ;; Parameters:    Size  Location     Type
 15789 ;;		None
 15790 ;; Auto vars:     Size  Location     Type
 15791 ;;  i               2   44[BANK0 ] int 
 15792 ;;  cond_flag       2   48[BANK0 ] int 
 15793 ;;  cam_flag        2   46[BANK0 ] int 
 15794 ;; Return value:  Size  Location     Type
 15795 ;;                  1    wreg      void 
 15796 ;; Registers used:
 15797 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15798 ;; Tracked objects:
 15799 ;;		On entry : 0/0
 15800 ;;		On exit  : 0/0
 15801 ;;		Unchanged: 0/0
 15802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15804 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15806 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15807 ;;Total ram usage:        7 bytes
 15808 ;; Hardware stack levels used:    1
 15809 ;; Hardware stack levels required when called:   10
 15810 ;; This function calls:
 15811 ;;		_lcdInst
 15812 ;;		_printf
 15813 ;; This function is called by:
 15814 ;;		_Test
 15815 ;; This function uses a non-reentrant model
 15816 ;;
 15817                           
 15818                           	psect	text50
 15819  003ADE                     __ptext50:
 15820                           	opt stack 0
 15821  003ADE                     _BlockerTest:
 15822                           	opt stack 19
 15823                           
 15824                           ;Test.c: 583: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15825                           
 15826                           ; BSR set to: 0
 15827                           ;incstack = 0
 15828  003ADE  0E01               	movlw	1
 15829  003AE0  EC32  F02B         	call	_lcdInst
 15830  003AE4  0E68               	movlw	104
 15831  003AE6  0100               	movlb	0	; () banked
 15832  003AE8  6FAB               	movwf	??_BlockerTest& (0+255),b
 15833  003AEA  0EE4               	movlw	228
 15834  003AEC                     u10637:
 15835  003AEC  2EE8               	decfsz	wreg,f,c
 15836  003AEE  D7FE               	bra	u10637
 15837  003AF0  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15838  003AF2  D7FC               	bra	u10637
 15839  003AF4  F000               	nop	
 15840  003AF6  0E80               	movlw	128
 15841  003AF8  EC32  F02B         	call	_lcdInst
 15842                           
 15843                           ;Test.c: 584: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15844  003AFC  0E45               	movlw	low STR_120
 15845  003AFE  0100               	movlb	0	; () banked
 15846  003B00  6F8E               	movwf	printf@f& (0+255),b
 15847  003B02  0EFB               	movlw	high STR_120
 15848  003B04  0100               	movlb	0	; () banked
 15849  003B06  6F8F               	movwf	(printf@f+1)& (0+255),b
 15850  003B08  A480               	btfss	3968,2,c	;volatile
 15851  003B0A  D004               	goto	u7480
 15852  003B0C  0100               	movlb	0	; () banked
 15853  003B0E  6BAB               	clrf	??_BlockerTest& (0+255),b
 15854  003B10  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15855  003B12  D002               	goto	u7488
 15856  003B14                     u7480:
 15857  003B14  0100               	movlb	0	; () banked
 15858  003B16  6BAB               	clrf	??_BlockerTest& (0+255),b
 15859  003B18                     u7488:
 15860  003B18  0100               	movlb	0	; () banked
 15861  003B1A  51AB               	movf	??_BlockerTest& (0+255),w,b
 15862  003B1C  0100               	movlb	0	; () banked
 15863  003B1E  6F90               	movwf	(?_printf+2)& (0+255),b
 15864  003B20  6B91               	clrf	(?_printf+3)& (0+255),b
 15865  003B22  EC84  F00B         	call	_printf	;wreg free
 15866                           
 15867                           ;Test.c: 585: lcdInst(0b11000000);;
 15868  003B26  0EC0               	movlw	192
 15869  003B28  EC32  F02B         	call	_lcdInst
 15870                           
 15871                           ;Test.c: 586: printf("OTHER: CAM TOGGLE");
 15872  003B2C  0E21               	movlw	low STR_121
 15873  003B2E  0100               	movlb	0	; () banked
 15874  003B30  6F8E               	movwf	printf@f& (0+255),b
 15875  003B32  0EFB               	movlw	high STR_121
 15876  003B34  0100               	movlb	0	; () banked
 15877  003B36  6F8F               	movwf	(printf@f+1)& (0+255),b
 15878  003B38  EC84  F00B         	call	_printf	;wreg free
 15879                           
 15880                           ;Test.c: 587: int cam_flag = 1;
 15881  003B3C  0E00               	movlw	0
 15882  003B3E  0100               	movlb	0	; () banked
 15883  003B40  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15884  003B42  0E01               	movlw	1
 15885  003B44  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;Test.c: 588: int cond_flag = 0;
 15889  003B46  0E00               	movlw	0
 15890  003B48  0100               	movlb	0	; () banked
 15891  003B4A  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15892  003B4C  0E00               	movlw	0
 15893  003B4E  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;Test.c: 590: while(PORTBbits.RB1 == 0){
 15897                           
 15898                           ;Test.c: 589: while(1){
 15899  003B50  D018               	goto	l8664
 15900  003B52                     l8660:
 15901                           
 15902                           ;Test.c: 591: lcdInst(0b10000000);;
 15903  003B52  0E80               	movlw	128
 15904  003B54  EC32  F02B         	call	_lcdInst
 15905                           
 15906                           ;Test.c: 592: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15907  003B58  0E45               	movlw	low STR_120
 15908  003B5A  0100               	movlb	0	; () banked
 15909  003B5C  6F8E               	movwf	printf@f& (0+255),b
 15910  003B5E  0EFB               	movlw	high STR_120
 15911  003B60  0100               	movlb	0	; () banked
 15912  003B62  6F8F               	movwf	(printf@f+1)& (0+255),b
 15913  003B64  A480               	btfss	3968,2,c	;volatile
 15914  003B66  D004               	goto	u7490
 15915  003B68  0100               	movlb	0	; () banked
 15916  003B6A  6BAB               	clrf	??_BlockerTest& (0+255),b
 15917  003B6C  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15918  003B6E  D002               	goto	u7498
 15919  003B70                     u7490:
 15920  003B70  0100               	movlb	0	; () banked
 15921  003B72  6BAB               	clrf	??_BlockerTest& (0+255),b
 15922  003B74                     u7498:
 15923  003B74  0100               	movlb	0	; () banked
 15924  003B76  51AB               	movf	??_BlockerTest& (0+255),w,b
 15925  003B78  0100               	movlb	0	; () banked
 15926  003B7A  6F90               	movwf	(?_printf+2)& (0+255),b
 15927  003B7C  6B91               	clrf	(?_printf+3)& (0+255),b
 15928  003B7E  EC84  F00B         	call	_printf	;wreg free
 15929  003B82                     l8664:
 15930  003B82  A281               	btfss	3969,1,c	;volatile
 15931  003B84  D7E6               	goto	l8660
 15932                           
 15933                           ;Test.c: 593: }
 15934                           ;Test.c: 594: if(PORTB >> 4 == 0b1111){
 15935  003B86  3881               	swapf	3969,w,c	;volatile
 15936  003B88  0B0F               	andlw	15
 15937  003B8A  0A0F               	xorlw	15
 15938  003B8C  B4D8               	btfsc	status,2,c
 15939  003B8E  0012               	return	
 15940                           
 15941                           ;Test.c: 597: else if(PORTB >> 4 == 0b0001){
 15942                           
 15943                           ;Test.c: 596: }
 15944                           
 15945                           ;Test.c: 595: break;
 15946  003B90  3881               	swapf	3969,w,c	;volatile
 15947  003B92  0B0F               	andlw	15
 15948  003B94  06E8               	decf	wreg,f,c
 15949  003B96  A4D8               	btfss	status,2,c
 15950  003B98  D016               	goto	l8682
 15951                           
 15952                           ;Test.c: 598: if(cond_flag){
 15953  003B9A  0100               	movlb	0	; () banked
 15954  003B9C  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15955  003B9E  0100               	movlb	0	; () banked
 15956  003BA0  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15957  003BA2  B4D8               	btfsc	status,2,c
 15958  003BA4  D007               	goto	l1409
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;Test.c: 599: LATAbits.LATA3 = 1;
 15962  003BA6  8689               	bsf	3977,3,c	;volatile
 15963  003BA8  D006               	goto	l8680
 15964  003BAA                     u7541:
 15965  003BAA  0E01               	movlw	1
 15966  003BAC                     u7550:
 15967  003BAC  0100               	movlb	0	; () banked
 15968  003BAE  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15969  003BB0  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15970                           
 15971                           ;Test.c: 601: }
 15972  003BB2  D054               	goto	l8706
 15973  003BB4                     l1409:
 15974                           
 15975                           ; BSR set to: 0
 15976                           ;Test.c: 602: else{
 15977                           ;Test.c: 603: LATAbits.LATA3 = 0;
 15978  003BB4  9689               	bcf	3977,3,c	;volatile
 15979  003BB6                     l8680:
 15980                           
 15981                           ; BSR set to: 0
 15982                           ;Test.c: 604: cond_flag = !cond_flag;
 15983  003BB6  0100               	movlb	0	; () banked
 15984  003BB8  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15985  003BBA  0100               	movlb	0	; () banked
 15986  003BBC  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15987  003BBE  B4D8               	btfsc	status,2,c
 15988  003BC0  D7F4               	goto	u7541
 15989  003BC2  0E00               	movlw	0
 15990  003BC4  D7F3               	goto	u7550
 15991  003BC6                     l8682:
 15992                           
 15993                           ;Test.c: 607: else{
 15994                           ;Test.c: 608: if(cam_flag){
 15995  003BC6  0100               	movlb	0	; () banked
 15996  003BC8  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15997  003BCA  0100               	movlb	0	; () banked
 15998  003BCC  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15999  003BCE  B4D8               	btfsc	status,2,c
 16000  003BD0  D007               	goto	l8688
 16001                           
 16002                           ; BSR set to: 0
 16003                           ;Test.c: 609: LATCbits.LATC0 = 1;
 16004  003BD2  808B               	bsf	3979,0,c	;volatile
 16005  003BD4  D023               	goto	l8700
 16006  003BD6                     u7591:
 16007  003BD6  0E01               	movlw	1
 16008  003BD8                     u7600:
 16009  003BD8  0100               	movlb	0	; () banked
 16010  003BDA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 16011  003BDC  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 16012                           
 16013                           ;Test.c: 611: }
 16014  003BDE  D03E               	goto	l8706
 16015  003BE0                     l8688:
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;Test.c: 612: else{
 16019                           ;Test.c: 613: for(int i=0;i<5000;i++)
 16020  003BE0  0E00               	movlw	0
 16021  003BE2  0100               	movlb	0	; () banked
 16022  003BE4  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 16023  003BE6  0E00               	movlw	0
 16024  003BE8  6FAC               	movwf	BlockerTest@i& (0+255),b
 16025  003BEA                     l8690:
 16026                           
 16027                           ; BSR set to: 0
 16028  003BEA  0100               	movlb	0	; () banked
 16029  003BEC  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 16030  003BEE  D008               	goto	l1414
 16031  003BF0  0E88               	movlw	136
 16032  003BF2  0100               	movlb	0	; () banked
 16033  003BF4  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 16034  003BF6  0E13               	movlw	19
 16035  003BF8  0100               	movlb	0	; () banked
 16036  003BFA  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 16037  003BFC  B0D8               	btfsc	status,0,c
 16038  003BFE  D00D               	goto	l1415
 16039  003C00                     l1414:
 16040                           
 16041                           ; BSR set to: 0
 16042                           ;Test.c: 614: {
 16043                           ;Test.c: 615: LATCbits.LATC0 = 1;
 16044  003C00  808B               	bsf	3979,0,c	;volatile
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;Test.c: 616: _delay((unsigned long)((10)*(32000000/4000000.0)));
 16048  003C02  0E1A               	movlw	26
 16049  003C04                     u10647:
 16050  003C04  2EE8               	decfsz	wreg,f,c
 16051  003C06  D7FE               	bra	u10647
 16052  003C08  D000               	nop2	
 16053                           
 16054                           ;Test.c: 617: LATCbits.LATC0 = 0;
 16055  003C0A  908B               	bcf	3979,0,c	;volatile
 16056                           
 16057                           ;Test.c: 618: _delay((unsigned long)((90)*(32000000/4000000.0)));
 16058  003C0C  0EF0               	movlw	240
 16059  003C0E                     u10657:
 16060  003C0E  2EE8               	decfsz	wreg,f,c
 16061  003C10  D7FE               	bra	u10657
 16062  003C12  0100               	movlb	0	; () banked
 16063  003C14  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 16064  003C16  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 16065  003C18  D7E8               	goto	l8690
 16066  003C1A                     l1415:
 16067                           
 16068                           ; BSR set to: 0
 16069                           ;Test.c: 619: }
 16070                           ;Test.c: 620: LATCbits.LATC0 = 0;
 16071  003C1A  908B               	bcf	3979,0,c	;volatile
 16072  003C1C                     l8700:
 16073                           
 16074                           ; BSR set to: 0
 16075                           ;Test.c: 621: cam_flag = !cam_flag;
 16076  003C1C  0100               	movlb	0	; () banked
 16077  003C1E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 16078  003C20  0100               	movlb	0	; () banked
 16079  003C22  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16080  003C24  B4D8               	btfsc	status,2,c
 16081  003C26  D7D7               	goto	u7591
 16082  003C28  0E00               	movlw	0
 16083  003C2A  D7D6               	goto	u7600
 16084  003C2C                     l8702:
 16085                           
 16086                           ;Test.c: 626: lcdInst(0b10000000);;
 16087  003C2C  0E80               	movlw	128
 16088  003C2E  EC32  F02B         	call	_lcdInst
 16089                           
 16090                           ;Test.c: 627: printf("D: RET|2: COND %d", PORTAbits.RA2);
 16091  003C32  0E45               	movlw	low STR_120
 16092  003C34  0100               	movlb	0	; () banked
 16093  003C36  6F8E               	movwf	printf@f& (0+255),b
 16094  003C38  0EFB               	movlw	high STR_120
 16095  003C3A  0100               	movlb	0	; () banked
 16096  003C3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 16097  003C3E  A480               	btfss	3968,2,c	;volatile
 16098  003C40  D004               	goto	u7650
 16099  003C42  0100               	movlb	0	; () banked
 16100  003C44  6BAB               	clrf	??_BlockerTest& (0+255),b
 16101  003C46  2BAB               	incf	??_BlockerTest& (0+255),f,b
 16102  003C48  D002               	goto	u7658
 16103  003C4A                     u7650:
 16104  003C4A  0100               	movlb	0	; () banked
 16105  003C4C  6BAB               	clrf	??_BlockerTest& (0+255),b
 16106  003C4E                     u7658:
 16107  003C4E  0100               	movlb	0	; () banked
 16108  003C50  51AB               	movf	??_BlockerTest& (0+255),w,b
 16109  003C52  0100               	movlb	0	; () banked
 16110  003C54  6F90               	movwf	(?_printf+2)& (0+255),b
 16111  003C56  6B91               	clrf	(?_printf+3)& (0+255),b
 16112  003C58  EC84  F00B         	call	_printf	;wreg free
 16113  003C5C                     l8706:
 16114  003C5C  A281               	btfss	3969,1,c	;volatile
 16115  003C5E  D791               	goto	l8664
 16116  003C60  D7E5               	goto	l8702
 16117  003C62                     __end_of_BlockerTest:
 16118                           	opt stack 0
 16119                           tblptru	equ	0xFF8
 16120                           tblptrh	equ	0xFF7
 16121                           tblptrl	equ	0xFF6
 16122                           tablat	equ	0xFF5
 16123                           prodh	equ	0xFF4
 16124                           prodl	equ	0xFF3
 16125                           intcon	equ	0xFF2
 16126                           intcon2	equ	0xFF1
 16127                           intcon3	equ	0xFF0
 16128                           postinc0	equ	0xFEE
 16129                           wreg	equ	0xFE8
 16130                           postdec1	equ	0xFE5
 16131                           fsr1l	equ	0xFE1
 16132                           indf2	equ	0xFDF
 16133                           postinc2	equ	0xFDE
 16134                           postdec2	equ	0xFDD
 16135                           fsr2h	equ	0xFDA
 16136                           fsr2l	equ	0xFD9
 16137                           status	equ	0xFD8
 16138                           
 16139 ;; *************** function _printf *****************
 16140 ;; Defined at:
 16141 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 16144 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 16145 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 16146 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 16147 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 16148 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 16149 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 16150 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 16151 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 16152 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 16153 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 16154 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 16155 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 16156 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 16157 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 16158 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 16159 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 16160 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 16161 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 16162 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 16163 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 16164 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 16165 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 16166 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 16167 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 16168 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 16169 ;;		 -> STR_2(14), STR_1(18), 
 16170 ;; Auto vars:     Size  Location     Type
 16171 ;;  tmpval          4    0        struct .
 16172 ;;  width           2   41[BANK0 ] int 
 16173 ;;  val             2   37[BANK0 ] unsigned int 
 16174 ;;  len             2   35[BANK0 ] unsigned int 
 16175 ;;  ap              2   33[BANK0 ] PTR void [1]
 16176 ;;		 -> ?i2_printf(2), ?_printf(2), 
 16177 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 16178 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 16179 ;;  c               1   40[BANK0 ] char 
 16180 ;;  flag            1   39[BANK0 ] unsigned char 
 16181 ;;  prec            1   30[BANK0 ] char 
 16182 ;; Return value:  Size  Location     Type
 16183 ;;                  2   14[BANK0 ] int 
 16184 ;; Registers used:
 16185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16186 ;; Tracked objects:
 16187 ;;		On entry : 0/0
 16188 ;;		On exit  : 0/0
 16189 ;;		Unchanged: 0/0
 16190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16191 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16195 ;;Total ram usage:       29 bytes
 16196 ;; Hardware stack levels used:    1
 16197 ;; Hardware stack levels required when called:    9
 16198 ;; This function calls:
 16199 ;;		___lwdiv
 16200 ;;		___lwmod
 16201 ;;		___wmul
 16202 ;;		_isdigit
 16203 ;;		_putch
 16204 ;; This function is called by:
 16205 ;;		_UI
 16206 ;;		_change_state_to_menu_start
 16207 ;;		_change_state_to_menu_12
 16208 ;;		_change_state_to_menu_22
 16209 ;;		_printRTC
 16210 ;;		_EEPROM_write
 16211 ;;		_Test
 16212 ;;		_algorithmTest
 16213 ;;		_sensorTest
 16214 ;;		_actuatorTest
 16215 ;;		_BothServos
 16216 ;;		_PortTestDC
 16217 ;;		_PlatformTest
 16218 ;;		_SpeedTest
 16219 ;;		_BlockerTest
 16220 ;;		_arm
 16221 ;;		_PortTestPusher
 16222 ;;		_ToggleTestA5
 16223 ;; This function uses a non-reentrant model
 16224 ;;
 16225                           
 16226                           	psect	text51
 16227  001708                     __ptext51:
 16228                           	opt stack 0
 16229  001708                     _printf:
 16230                           	opt stack 18
 16231                           
 16232                           ;doprnt.c: 466: va_list ap;
 16233                           ;doprnt.c: 499: signed char c;
 16234                           ;doprnt.c: 501: int width;
 16235                           ;doprnt.c: 506: signed char prec;
 16236                           ;doprnt.c: 508: unsigned char flag;
 16237                           ;doprnt.c: 523: union {
 16238                           ;doprnt.c: 524: unsigned long vd;
 16239                           ;doprnt.c: 525: double integ;
 16240                           ;doprnt.c: 526: } tmpval;
 16241                           ;doprnt.c: 528: unsigned int val;
 16242                           ;doprnt.c: 529: unsigned len;
 16243                           ;doprnt.c: 530: const char * cp;
 16244                           ;doprnt.c: 533: *ap = __va_start();
 16245                           
 16246                           ;incstack = 0
 16247  001708  0E90               	movlw	low (?_printf+2)
 16248  00170A  0100               	movlb	0	; () banked
 16249  00170C  6FA1               	movwf	printf@ap& (0+255),b
 16250  00170E  0E00               	movlw	high (?_printf+2)
 16251  001710  0100               	movlb	0	; () banked
 16252  001712  6FA2               	movwf	(printf@ap+1)& (0+255),b
 16253                           
 16254                           ;doprnt.c: 536: while(c = *f++) {
 16255  001714  D205               	goto	l6588
 16256  001716                     l6458:
 16257                           
 16258                           ; BSR set to: 0
 16259                           ;doprnt.c: 538: if(c != '%')
 16260  001716  0E25               	movlw	37
 16261  001718  0100               	movlb	0	; () banked
 16262  00171A  19A8               	xorwf	printf@c& (0+255),w,b
 16263  00171C  B4D8               	btfsc	status,2,c
 16264  00171E  D005               	goto	l6462
 16265                           
 16266                           ; BSR set to: 0
 16267                           ;doprnt.c: 540: {
 16268                           ;doprnt.c: 541: (putch(c) );
 16269  001720  0100               	movlb	0	; () banked
 16270  001722  51A8               	movf	printf@c& (0+255),w,b
 16271  001724  EC2A  F02B         	call	_putch
 16272                           
 16273                           ;doprnt.c: 542: continue;
 16274  001728  D1FB               	goto	l6588
 16275  00172A                     l6462:
 16276                           
 16277                           ;doprnt.c: 543: }
 16278                           ;doprnt.c: 546: width = 0;
 16279  00172A  0E00               	movlw	0
 16280  00172C  0100               	movlb	0	; () banked
 16281  00172E  6FAA               	movwf	(printf@width+1)& (0+255),b
 16282  001730  0E00               	movlw	0
 16283  001732  6FA9               	movwf	printf@width& (0+255),b
 16284                           
 16285                           ;doprnt.c: 548: flag = 0;
 16286  001734  0E00               	movlw	0
 16287  001736  0100               	movlb	0	; () banked
 16288  001738  6FA7               	movwf	printf@flag& (0+255),b
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;doprnt.c: 551: switch(*f) {
 16292                           
 16293                           ;doprnt.c: 550: for(;;) {
 16294  00173A  D005               	goto	l6468
 16295  00173C                     l6464:
 16296                           
 16297                           ;doprnt.c: 580: flag |= 0x04;
 16298  00173C  0100               	movlb	0	; () banked
 16299  00173E  85A7               	bsf	printf@flag& (0+255),2,b
 16300                           
 16301                           ;doprnt.c: 581: f++;
 16302  001740  0100               	movlb	0	; () banked
 16303  001742  4B8E               	infsnz	printf@f& (0+255),f,b
 16304  001744  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16305  001746                     l6468:
 16306  001746  C08E  FFF6         	movff	printf@f,tblptrl
 16307  00174A  C08F  FFF7         	movff	printf@f+1,tblptrh
 16308  00174E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16309  00174E  6AF8               	clrf	tblptru,c
 16310  001750                     	endif
 16311  001750                     	if	0	;tblptru may be non-zero
 16312  001750                     	endif
 16313  001750  0008               	tblrd		*
 16314  001752  50F5               	movf	tablat,w,c
 16315                           
 16316                           ; Switch size 1, requested type "space"
 16317                           ; Number of cases is 1, Range of values is 48 to 48
 16318                           ; switch strategies available:
 16319                           ; Name         Instructions Cycles
 16320                           ; simple_byte            4     3 (average)
 16321                           ;	Chosen strategy is simple_byte
 16322  001754  0A30               	xorlw	48	; case 48
 16323  001756  B4D8               	btfsc	status,2,c
 16324  001758  D7F1               	goto	l6464
 16325                           
 16326                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 16327                           
 16328                           ;doprnt.c: 586: }
 16329                           
 16330                           ;doprnt.c: 585: break;
 16331  00175A  C08E  FFF6         	movff	printf@f,tblptrl
 16332  00175E  C08F  FFF7         	movff	printf@f+1,tblptrh
 16333  001762                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16334  001762  6AF8               	clrf	tblptru,c
 16335  001764                     	endif
 16336  001764                     	if	0	;tblptru may be non-zero
 16337  001764                     	endif
 16338  001764  0008               	tblrd		*
 16339  001766  50F5               	movf	tablat,w,c
 16340  001768  EC3E  F02A         	call	_isdigit
 16341  00176C  A0D8               	btfss	status,0,c
 16342  00176E  D0D2               	goto	l6516
 16343                           
 16344                           ;doprnt.c: 598: width = 0;
 16345  001770  0E00               	movlw	0
 16346  001772  0100               	movlb	0	; () banked
 16347  001774  6FAA               	movwf	(printf@width+1)& (0+255),b
 16348  001776  0E00               	movlw	0
 16349  001778  6FA9               	movwf	printf@width& (0+255),b
 16350  00177A                     l6474:
 16351                           
 16352                           ;doprnt.c: 600: width *= 10;
 16353  00177A  C0A9  F080         	movff	printf@width,___wmul@multiplier
 16354  00177E  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 16355  001782  0E00               	movlw	0
 16356  001784  0100               	movlb	0	; () banked
 16357  001786  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16358  001788  0E0A               	movlw	10
 16359  00178A  6F82               	movwf	___wmul@multiplicand& (0+255),b
 16360  00178C  ECA7  F028         	call	___wmul	;wreg free
 16361  001790  C080  F0A9         	movff	?___wmul,printf@width
 16362  001794  C081  F0AA         	movff	?___wmul+1,printf@width+1
 16363                           
 16364                           ;doprnt.c: 601: width += *f++ - '0';
 16365  001798  0ED0               	movlw	208
 16366  00179A  0100               	movlb	0	; () banked
 16367  00179C  6F9A               	movwf	??_printf& (0+255),b
 16368  00179E  0EFF               	movlw	255
 16369  0017A0  0100               	movlb	0	; () banked
 16370  0017A2  6F9B               	movwf	(??_printf+1)& (0+255),b
 16371  0017A4  C08E  FFF6         	movff	printf@f,tblptrl
 16372  0017A8  C08F  FFF7         	movff	printf@f+1,tblptrh
 16373  0017AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16374  0017AC  6AF8               	clrf	tblptru,c
 16375  0017AE                     	endif
 16376  0017AE                     	if	0	;tblptru may be non-zero
 16377  0017AE                     	endif
 16378  0017AE  0008               	tblrd		*
 16379  0017B0  50F5               	movf	tablat,w,c
 16380  0017B2  0100               	movlb	0	; () banked
 16381  0017B4  6F9C               	movwf	(??_printf+2)& (0+255),b
 16382  0017B6  6B9D               	clrf	(??_printf+3)& (0+255),b
 16383  0017B8  0100               	movlb	0	; () banked
 16384  0017BA  519A               	movf	??_printf& (0+255),w,b
 16385  0017BC  0100               	movlb	0	; () banked
 16386  0017BE  279C               	addwf	(??_printf+2)& (0+255),f,b
 16387  0017C0  0100               	movlb	0	; () banked
 16388  0017C2  519B               	movf	(??_printf+1)& (0+255),w,b
 16389  0017C4  0100               	movlb	0	; () banked
 16390  0017C6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 16391  0017C8  0100               	movlb	0	; () banked
 16392  0017CA  519C               	movf	(??_printf+2)& (0+255),w,b
 16393  0017CC  0100               	movlb	0	; () banked
 16394  0017CE  27A9               	addwf	printf@width& (0+255),f,b
 16395  0017D0  0100               	movlb	0	; () banked
 16396  0017D2  519D               	movf	(??_printf+3)& (0+255),w,b
 16397  0017D4  0100               	movlb	0	; () banked
 16398  0017D6  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 16399                           
 16400                           ; BSR set to: 0
 16401  0017D8  0100               	movlb	0	; () banked
 16402  0017DA  4B8E               	infsnz	printf@f& (0+255),f,b
 16403  0017DC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 16407  0017DE  C08E  FFF6         	movff	printf@f,tblptrl
 16408  0017E2  C08F  FFF7         	movff	printf@f+1,tblptrh
 16409  0017E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16410  0017E6  6AF8               	clrf	tblptru,c
 16411  0017E8                     	endif
 16412  0017E8                     	if	0	;tblptru may be non-zero
 16413  0017E8                     	endif
 16414  0017E8  0008               	tblrd		*
 16415  0017EA  50F5               	movf	tablat,w,c
 16416  0017EC  EC3E  F02A         	call	_isdigit
 16417  0017F0  A0D8               	btfss	status,0,c
 16418  0017F2  D090               	goto	l6516
 16419  0017F4  D7C2               	goto	l6474
 16420  0017F6                     l6482:
 16421                           
 16422                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 16423  0017F6  C0A1  FFD9         	movff	printf@ap,fsr2l
 16424  0017FA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16425  0017FE  CFDE F09F          	movff	postinc2,printf@cp
 16426  001802  CFDD F0A0          	movff	postdec2,printf@cp+1
 16427  001806  0E02               	movlw	2
 16428  001808  0100               	movlb	0	; () banked
 16429  00180A  27A1               	addwf	printf@ap& (0+255),f,b
 16430  00180C  0E00               	movlw	0
 16431  00180E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16432                           
 16433                           ; BSR set to: 0
 16434                           ;doprnt.c: 740: if(!cp)
 16435  001810  0100               	movlb	0	; () banked
 16436  001812  519F               	movf	printf@cp& (0+255),w,b
 16437  001814  0100               	movlb	0	; () banked
 16438  001816  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 16439  001818  A4D8               	btfss	status,2,c
 16440  00181A  D006               	goto	l6490
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;doprnt.c: 741: cp = "(null)";
 16444  00181C  0EB5               	movlw	low STR_128
 16445  00181E  0100               	movlb	0	; () banked
 16446  001820  6F9F               	movwf	printf@cp& (0+255),b
 16447  001822  0EFF               	movlw	high STR_128
 16448  001824  0100               	movlb	0	; () banked
 16449  001826  6FA0               	movwf	(printf@cp+1)& (0+255),b
 16450  001828                     l6490:
 16451                           
 16452                           ; BSR set to: 0
 16453                           ;doprnt.c: 745: len = 0;
 16454  001828  0E00               	movlw	0
 16455  00182A  0100               	movlb	0	; () banked
 16456  00182C  6FA4               	movwf	(printf@len+1)& (0+255),b
 16457  00182E  0E00               	movlw	0
 16458  001830  6FA3               	movwf	printf@len& (0+255),b
 16459                           
 16460                           ;doprnt.c: 746: while(cp[len])
 16461  001832  D003               	goto	l6494
 16462  001834                     l6492:
 16463                           
 16464                           ;doprnt.c: 747: len++;
 16465  001834  0100               	movlb	0	; () banked
 16466  001836  4BA3               	infsnz	printf@len& (0+255),f,b
 16467  001838  2BA4               	incf	(printf@len+1)& (0+255),f,b
 16468  00183A                     l6494:
 16469                           
 16470                           ; BSR set to: 0
 16471  00183A  0100               	movlb	0	; () banked
 16472  00183C  51A3               	movf	printf@len& (0+255),w,b
 16473  00183E  0100               	movlb	0	; () banked
 16474  001840  259F               	addwf	printf@cp& (0+255),w,b
 16475  001842  0100               	movlb	0	; () banked
 16476  001844  6F9A               	movwf	??_printf& (0+255),b
 16477  001846  0100               	movlb	0	; () banked
 16478  001848  51A4               	movf	(printf@len+1)& (0+255),w,b
 16479  00184A  0100               	movlb	0	; () banked
 16480  00184C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 16481  00184E  0100               	movlb	0	; () banked
 16482  001850  6F9B               	movwf	(??_printf+1)& (0+255),b
 16483  001852  C09A  FFF6         	movff	??_printf,tblptrl
 16484  001856  C09B  FFF7         	movff	??_printf+1,tblptrh
 16485  00185A  0E00               	movlw	low (__mediumconst shr (0+16))
 16486  00185C  6EF8               	movwf	tblptru,c
 16487  00185E  0E0F               	movlw	(high __ramtop+-1)
 16488  001860  64F7               	cpfsgt	tblptrh,c
 16489  001862  D003               	bra	u4897
 16490  001864  0008               	tblrd		*
 16491  001866  50F5               	movf	tablat,w,c
 16492  001868  D005               	bra	u4890
 16493  00186A                     u4897:
 16494  00186A  CFF6 FFE9          	movff	tblptrl,fsr0l
 16495  00186E  CFF7 FFEA          	movff	tblptrh,fsr0h
 16496  001872  50EF               	movf	indf0,w,c
 16497  001874                     u4890:
 16498  001874  0900               	iorlw	0
 16499  001876  A4D8               	btfss	status,2,c
 16500  001878  D7DD               	goto	l6492
 16501                           
 16502                           ;doprnt.c: 757: if(width > len)
 16503  00187A  0100               	movlb	0	; () banked
 16504  00187C  51A9               	movf	printf@width& (0+255),w,b
 16505  00187E  0100               	movlb	0	; () banked
 16506  001880  5DA3               	subwf	printf@len& (0+255),w,b
 16507  001882  0100               	movlb	0	; () banked
 16508  001884  51AA               	movf	(printf@width+1)& (0+255),w,b
 16509  001886  0100               	movlb	0	; () banked
 16510  001888  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 16511  00188A  B0D8               	btfsc	status,0,c
 16512  00188C  D009               	goto	l6500
 16513                           
 16514                           ; BSR set to: 0
 16515                           ;doprnt.c: 758: width -= len;
 16516  00188E  0100               	movlb	0	; () banked
 16517  001890  51A3               	movf	printf@len& (0+255),w,b
 16518  001892  0100               	movlb	0	; () banked
 16519  001894  5FA9               	subwf	printf@width& (0+255),f,b
 16520  001896  0100               	movlb	0	; () banked
 16521  001898  51A4               	movf	(printf@len+1)& (0+255),w,b
 16522  00189A  0100               	movlb	0	; () banked
 16523  00189C  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16524  00189E  D009               	goto	l6504
 16525  0018A0                     l6500:
 16526                           
 16527                           ; BSR set to: 0
 16528                           ;doprnt.c: 759: else
 16529                           ;doprnt.c: 760: width = 0;
 16530  0018A0  0E00               	movlw	0
 16531  0018A2  0100               	movlb	0	; () banked
 16532  0018A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 16533  0018A6  0E00               	movlw	0
 16534  0018A8  6FA9               	movwf	printf@width& (0+255),b
 16535                           
 16536                           ; BSR set to: 0
 16537                           ;doprnt.c: 764: while(width--)
 16538  0018AA  D003               	goto	l6504
 16539  0018AC                     l6502:
 16540                           
 16541                           ; BSR set to: 0
 16542                           ;doprnt.c: 765: (putch(' ') );
 16543  0018AC  0E20               	movlw	32
 16544  0018AE  EC2A  F02B         	call	_putch
 16545  0018B2                     l6504:
 16546  0018B2  0100               	movlb	0	; () banked
 16547  0018B4  07A9               	decf	printf@width& (0+255),f,b
 16548  0018B6  A0D8               	btfss	status,0,c
 16549  0018B8  07AA               	decf	(printf@width+1)& (0+255),f,b
 16550  0018BA  0100               	movlb	0	; () banked
 16551  0018BC  29A9               	incf	printf@width& (0+255),w,b
 16552  0018BE  E1F6               	bnz	l6502
 16553  0018C0  0100               	movlb	0	; () banked
 16554  0018C2  29AA               	incf	(printf@width+1)& (0+255),w,b
 16555  0018C4  B4D8               	btfsc	status,2,c
 16556  0018C6  D017               	goto	l6510
 16557  0018C8  D7F1               	goto	l6502
 16558  0018CA                     l6506:
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;doprnt.c: 768: (putch(*cp++) );
 16562  0018CA  C09F  FFF6         	movff	printf@cp,tblptrl
 16563  0018CE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 16564  0018D2  0E00               	movlw	low (__mediumconst shr (0+16))
 16565  0018D4  6EF8               	movwf	tblptru,c
 16566  0018D6  0E0F               	movlw	(high __ramtop+-1)
 16567  0018D8  64F7               	cpfsgt	tblptrh,c
 16568  0018DA  D003               	bra	u4937
 16569  0018DC  0008               	tblrd		*
 16570  0018DE  50F5               	movf	tablat,w,c
 16571  0018E0  D005               	bra	u4930
 16572  0018E2                     u4937:
 16573  0018E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16574  0018E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16575  0018EA  50EF               	movf	indf0,w,c
 16576  0018EC                     u4930:
 16577  0018EC  EC2A  F02B         	call	_putch
 16578  0018F0  0100               	movlb	0	; () banked
 16579  0018F2  4B9F               	infsnz	printf@cp& (0+255),f,b
 16580  0018F4  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 16581  0018F6                     l6510:
 16582                           
 16583                           ; BSR set to: 0
 16584  0018F6  0100               	movlb	0	; () banked
 16585  0018F8  07A3               	decf	printf@len& (0+255),f,b
 16586  0018FA  A0D8               	btfss	status,0,c
 16587  0018FC  07A4               	decf	(printf@len+1)& (0+255),f,b
 16588  0018FE  0100               	movlb	0	; () banked
 16589  001900  29A3               	incf	printf@len& (0+255),w,b
 16590  001902  E1E3               	bnz	l6506
 16591  001904  0100               	movlb	0	; () banked
 16592  001906  29A4               	incf	(printf@len+1)& (0+255),w,b
 16593  001908  B4D8               	btfsc	status,2,c
 16594  00190A  D10A               	goto	l6588
 16595  00190C  D7DE               	goto	l6506
 16596  00190E                     l6512:
 16597                           
 16598                           ; BSR set to: 0
 16599                           ;doprnt.c: 818: flag |= 0x40;
 16600  00190E  0100               	movlb	0	; () banked
 16601  001910  8DA7               	bsf	printf@flag& (0+255),6,b
 16602                           
 16603                           ; BSR set to: 0
 16604                           ;doprnt.c: 822: }
 16605                           
 16606                           ;doprnt.c: 819: break;
 16607  001912  D01D               	goto	l1486
 16608  001914                     l6516:
 16609  001914  C08E  FFF6         	movff	printf@f,tblptrl
 16610  001918  C08F  FFF7         	movff	printf@f+1,tblptrh
 16611  00191C  0100               	movlb	0	; () banked
 16612  00191E  4B8E               	infsnz	printf@f& (0+255),f,b
 16613  001920  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16614  001922                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16615  001922  6AF8               	clrf	tblptru,c
 16616  001924                     	endif
 16617  001924                     	if	0	;tblptru may be non-zero
 16618  001924                     	endif
 16619  001924  0008               	tblrd		*
 16620  001926  CFF5 F0A8          	movff	tablat,printf@c
 16621  00192A  0100               	movlb	0	; () banked
 16622  00192C  51A8               	movf	printf@c& (0+255),w,b
 16623                           
 16624                           ; Switch size 1, requested type "space"
 16625                           ; Number of cases is 5, Range of values is 0 to 117
 16626                           ; switch strategies available:
 16627                           ; Name         Instructions Cycles
 16628                           ; simple_byte           16     9 (average)
 16629                           ;	Chosen strategy is simple_byte
 16630  00192E  0A00               	xorlw	0	; case 0
 16631  001930  B4D8               	btfsc	status,2,c
 16632  001932  0012               	return	
 16633  001934  0A64               	xorlw	100	; case 100
 16634  001936  B4D8               	btfsc	status,2,c
 16635  001938  D00A               	goto	l1486
 16636  00193A  0A0D               	xorlw	13	; case 105
 16637  00193C  B4D8               	btfsc	status,2,c
 16638  00193E  D007               	goto	l1486
 16639  001940  0A1A               	xorlw	26	; case 115
 16640  001942  B4D8               	btfsc	status,2,c
 16641  001944  D758               	goto	l6482
 16642  001946  0A06               	xorlw	6	; case 117
 16643  001948  B4D8               	btfsc	status,2,c
 16644  00194A  D7E1               	goto	l6512
 16645  00194C  D0E9               	goto	l6588
 16646  00194E                     l1486:
 16647                           
 16648                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 16649  00194E  0100               	movlb	0	; () banked
 16650  001950  BDA7               	btfsc	printf@flag& (0+255),6,b
 16651  001952  D019               	goto	l6528
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;doprnt.c: 1253: {
 16655                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16656  001954  C0A1  FFD9         	movff	printf@ap,fsr2l
 16657  001958  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16658  00195C  CFDE F0A5          	movff	postinc2,printf@val
 16659  001960  CFDD F0A6          	movff	postdec2,printf@val+1
 16660                           
 16661                           ; BSR set to: 0
 16662  001964  0E02               	movlw	2
 16663  001966  0100               	movlb	0	; () banked
 16664  001968  27A1               	addwf	printf@ap& (0+255),f,b
 16665  00196A  0E00               	movlw	0
 16666  00196C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;doprnt.c: 1261: if((int)val < 0) {
 16670  00196E  0100               	movlb	0	; () banked
 16671  001970  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 16672  001972  D016               	goto	l6532
 16673                           
 16674                           ; BSR set to: 0
 16675                           ;doprnt.c: 1262: flag |= 0x03;
 16676  001974  0E03               	movlw	3
 16677  001976  0100               	movlb	0	; () banked
 16678  001978  13A7               	iorwf	printf@flag& (0+255),f,b
 16679                           
 16680                           ; BSR set to: 0
 16681                           ;doprnt.c: 1263: val = -val;
 16682  00197A  0100               	movlb	0	; () banked
 16683  00197C  6DA5               	negf	printf@val& (0+255),b
 16684  00197E  1FA6               	comf	(printf@val+1)& (0+255),f,b
 16685  001980  B0D8               	btfsc	status,0,c
 16686  001982  2BA6               	incf	(printf@val+1)& (0+255),f,b
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;doprnt.c: 1264: }
 16690                           ;doprnt.c: 1266: }
 16691  001984  D00D               	goto	l6532
 16692  001986                     l6528:
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;doprnt.c: 1268: else
 16696                           ;doprnt.c: 1273: {
 16697                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16698  001986  C0A1  FFD9         	movff	printf@ap,fsr2l
 16699  00198A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 16700  00198E  CFDE F0A5          	movff	postinc2,printf@val
 16701  001992  CFDD F0A6          	movff	postdec2,printf@val+1
 16702                           
 16703                           ; BSR set to: 0
 16704  001996  0E02               	movlw	2
 16705  001998  0100               	movlb	0	; () banked
 16706  00199A  27A1               	addwf	printf@ap& (0+255),f,b
 16707  00199C  0E00               	movlw	0
 16708  00199E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16709  0019A0                     l6532:
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;doprnt.c: 1287: }
 16713                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16714  0019A0  0E01               	movlw	1
 16715  0019A2  0100               	movlb	0	; () banked
 16716  0019A4  6FA8               	movwf	printf@c& (0+255),b
 16717  0019A6                     l6534:
 16718                           
 16719                           ; BSR set to: 0
 16720  0019A6  0E05               	movlw	5
 16721  0019A8  0100               	movlb	0	; () banked
 16722  0019AA  19A8               	xorwf	printf@c& (0+255),w,b
 16723  0019AC  B4D8               	btfsc	status,2,c
 16724  0019AE  D019               	goto	l6546
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;doprnt.c: 1306: if(val < dpowers[c])
 16728                           
 16729                           ; BSR set to: 0
 16730                           
 16731                           ; BSR set to: 0
 16732  0019B0  0100               	movlb	0	; () banked
 16733  0019B2  51A8               	movf	printf@c& (0+255),w,b
 16734  0019B4  0D02               	mullw	2
 16735  0019B6  0EB4               	movlw	low _dpowers
 16736  0019B8  24F3               	addwf	prodl,w,c
 16737  0019BA  6EF6               	movwf	tblptrl,c
 16738  0019BC  0EFA               	movlw	high _dpowers
 16739  0019BE  20F4               	addwfc	prodh,w,c
 16740  0019C0  6EF7               	movwf	tblptrh,c
 16741  0019C2                     	if	1	;There are 3 active tblptr bytes
 16742  0019C2  6AF8               	clrf	tblptru,c
 16743  0019C4  0E00               	movlw	low (__mediumconst shr (0+16))
 16744  0019C6  22F8               	addwfc	tblptru,f,c
 16745  0019C8                     	endif
 16746  0019C8  0009               	tblrd		*+
 16747  0019CA  50F5               	movf	tablat,w,c
 16748  0019CC  0100               	movlb	0	; () banked
 16749  0019CE  5DA5               	subwf	printf@val& (0+255),w,b
 16750  0019D0  0009               	tblrd		*+
 16751  0019D2  50F5               	movf	tablat,w,c
 16752  0019D4  0100               	movlb	0	; () banked
 16753  0019D6  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16754  0019D8  A0D8               	btfss	status,0,c
 16755  0019DA  D003               	goto	l6546
 16756                           
 16757                           ; BSR set to: 0
 16758                           
 16759                           ; BSR set to: 0
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;doprnt.c: 1307: break;
 16763  0019DC  0100               	movlb	0	; () banked
 16764  0019DE  2BA8               	incf	printf@c& (0+255),f,b
 16765  0019E0  D7E2               	goto	l6534
 16766  0019E2                     l6546:
 16767                           
 16768                           ; BSR set to: 0
 16769                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16770  0019E2  0100               	movlb	0	; () banked
 16771  0019E4  51A9               	movf	printf@width& (0+255),w,b
 16772  0019E6  0100               	movlb	0	; () banked
 16773  0019E8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16774  0019EA  B4D8               	btfsc	status,2,c
 16775  0019EC  D00B               	goto	l6552
 16776                           
 16777                           ; BSR set to: 0
 16778  0019EE  C0A7  F09A         	movff	printf@flag,??_printf
 16779  0019F2  0E03               	movlw	3
 16780  0019F4  0100               	movlb	0	; () banked
 16781  0019F6  179A               	andwf	??_printf& (0+255),f,b
 16782  0019F8  B4D8               	btfsc	status,2,c
 16783  0019FA  D004               	goto	l6552
 16784                           
 16785                           ; BSR set to: 0
 16786                           ;doprnt.c: 1346: width--;
 16787  0019FC  0100               	movlb	0	; () banked
 16788  0019FE  07A9               	decf	printf@width& (0+255),f,b
 16789  001A00  A0D8               	btfss	status,0,c
 16790  001A02  07AA               	decf	(printf@width+1)& (0+255),f,b
 16791  001A04                     l6552:
 16792                           
 16793                           ; BSR set to: 0
 16794                           ;doprnt.c: 1381: if(width > c)
 16795  001A04  0E80               	movlw	128
 16796  001A06  0100               	movlb	0	; () banked
 16797  001A08  BFA8               	btfsc	printf@c& (0+255),7,b
 16798  001A0A  0E7F               	movlw	127
 16799  001A0C  0100               	movlb	0	; () banked
 16800  001A0E  6F9A               	movwf	??_printf& (0+255),b
 16801  001A10  0100               	movlb	0	; () banked
 16802  001A12  51A9               	movf	printf@width& (0+255),w,b
 16803  001A14  0100               	movlb	0	; () banked
 16804  001A16  5DA8               	subwf	printf@c& (0+255),w,b
 16805  001A18  0100               	movlb	0	; () banked
 16806  001A1A  51AA               	movf	(printf@width+1)& (0+255),w,b
 16807  001A1C  0A80               	xorlw	128
 16808  001A1E  0100               	movlb	0	; () banked
 16809  001A20  599A               	subwfb	??_printf& (0+255),w,b
 16810  001A22  B0D8               	btfsc	status,0,c
 16811  001A24  D00B               	goto	l6556
 16812                           
 16813                           ; BSR set to: 0
 16814                           ;doprnt.c: 1382: width -= c;
 16815  001A26  0100               	movlb	0	; () banked
 16816  001A28  51A8               	movf	printf@c& (0+255),w,b
 16817  001A2A  0100               	movlb	0	; () banked
 16818  001A2C  5FA9               	subwf	printf@width& (0+255),f,b
 16819  001A2E  0E00               	movlw	0
 16820  001A30  0100               	movlb	0	; () banked
 16821  001A32  BFA8               	btfsc	printf@c& (0+255),7,b
 16822  001A34  0EFF               	movlw	255
 16823  001A36  0100               	movlb	0	; () banked
 16824  001A38  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16825  001A3A  D005               	goto	l6558
 16826  001A3C                     l6556:
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;doprnt.c: 1383: else
 16830                           ;doprnt.c: 1384: width = 0;
 16831  001A3C  0E00               	movlw	0
 16832  001A3E  0100               	movlb	0	; () banked
 16833  001A40  6FAA               	movwf	(printf@width+1)& (0+255),b
 16834  001A42  0E00               	movlw	0
 16835  001A44  6FA9               	movwf	printf@width& (0+255),b
 16836  001A46                     l6558:
 16837                           
 16838                           ; BSR set to: 0
 16839                           ;doprnt.c: 1387: if(flag & 0x04) {
 16840  001A46  0100               	movlb	0	; () banked
 16841  001A48  A5A7               	btfss	printf@flag& (0+255),2,b
 16842  001A4A  D018               	goto	l6570
 16843                           
 16844                           ; BSR set to: 0
 16845                           ;doprnt.c: 1392: if(flag & 0x03)
 16846  001A4C  C0A7  F09A         	movff	printf@flag,??_printf
 16847  001A50  0E03               	movlw	3
 16848  001A52  0100               	movlb	0	; () banked
 16849  001A54  179A               	andwf	??_printf& (0+255),f,b
 16850  001A56  B4D8               	btfsc	status,2,c
 16851  001A58  D003               	goto	l6564
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;doprnt.c: 1393: (putch('-') );
 16855  001A5A  0E2D               	movlw	45
 16856  001A5C  EC2A  F02B         	call	_putch
 16857  001A60                     l6564:
 16858                           
 16859                           ;doprnt.c: 1415: if(width)
 16860  001A60  0100               	movlb	0	; () banked
 16861  001A62  51A9               	movf	printf@width& (0+255),w,b
 16862  001A64  0100               	movlb	0	; () banked
 16863  001A66  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16864  001A68  B4D8               	btfsc	status,2,c
 16865  001A6A  D025               	goto	l6580
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;doprnt.c: 1417: (putch('0') );
 16869                           
 16870                           ; BSR set to: 0
 16871                           
 16872                           ;doprnt.c: 1416: do
 16873  001A6C  0E30               	movlw	48
 16874  001A6E  EC2A  F02B         	call	_putch
 16875                           
 16876                           ;doprnt.c: 1418: while(--width);
 16877  001A72  0100               	movlb	0	; () banked
 16878  001A74  07A9               	decf	printf@width& (0+255),f,b
 16879  001A76  A0D8               	btfss	status,0,c
 16880  001A78  07AA               	decf	(printf@width+1)& (0+255),f,b
 16881  001A7A  D7F2               	goto	l6564
 16882  001A7C                     l6570:
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;doprnt.c: 1422: {
 16886                           ;doprnt.c: 1424: if(width
 16887                           ;doprnt.c: 1428: )
 16888  001A7C  0100               	movlb	0	; () banked
 16889  001A7E  51A9               	movf	printf@width& (0+255),w,b
 16890  001A80  0100               	movlb	0	; () banked
 16891  001A82  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16892  001A84  B4D8               	btfsc	status,2,c
 16893  001A86  D00D               	goto	l6576
 16894  001A88                     l6572:
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;doprnt.c: 1430: (putch(' ') );
 16898  001A88  0E20               	movlw	32
 16899  001A8A  EC2A  F02B         	call	_putch
 16900                           
 16901                           ;doprnt.c: 1431: while(--width);
 16902  001A8E  0100               	movlb	0	; () banked
 16903  001A90  07A9               	decf	printf@width& (0+255),f,b
 16904  001A92  A0D8               	btfss	status,0,c
 16905  001A94  07AA               	decf	(printf@width+1)& (0+255),f,b
 16906  001A96  0100               	movlb	0	; () banked
 16907  001A98  51A9               	movf	printf@width& (0+255),w,b
 16908  001A9A  0100               	movlb	0	; () banked
 16909  001A9C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16910  001A9E  A4D8               	btfss	status,2,c
 16911  001AA0  D7F3               	goto	l6572
 16912  001AA2                     l6576:
 16913                           
 16914                           ; BSR set to: 0
 16915                           ;doprnt.c: 1438: if(flag & 0x03)
 16916  001AA2  C0A7  F09A         	movff	printf@flag,??_printf
 16917  001AA6  0E03               	movlw	3
 16918  001AA8  0100               	movlb	0	; () banked
 16919  001AAA  179A               	andwf	??_printf& (0+255),f,b
 16920  001AAC  B4D8               	btfsc	status,2,c
 16921  001AAE  D003               	goto	l6580
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;doprnt.c: 1439: (putch('-') );
 16925  001AB0  0E2D               	movlw	45
 16926  001AB2  EC2A  F02B         	call	_putch
 16927  001AB6                     l6580:
 16928                           
 16929                           ;doprnt.c: 1469: }
 16930                           ;doprnt.c: 1472: prec = c;
 16931  001AB6  C0A8  F09E         	movff	printf@c,printf@prec
 16932                           
 16933                           ;doprnt.c: 1474: while(prec--) {
 16934  001ABA  D02C               	goto	l6586
 16935  001ABC                     l6582:
 16936                           
 16937                           ;doprnt.c: 1478: {
 16938                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16939  001ABC  0100               	movlb	0	; () banked
 16940  001ABE  519E               	movf	printf@prec& (0+255),w,b
 16941  001AC0  0D02               	mullw	2
 16942  001AC2  0EB4               	movlw	low _dpowers
 16943  001AC4  24F3               	addwf	prodl,w,c
 16944  001AC6  6EF6               	movwf	tblptrl,c
 16945  001AC8  0EFA               	movlw	high _dpowers
 16946  001ACA  20F4               	addwfc	prodh,w,c
 16947  001ACC  6EF7               	movwf	tblptrh,c
 16948  001ACE                     	if	1	;There are 3 active tblptr bytes
 16949  001ACE  6AF8               	clrf	tblptru,c
 16950  001AD0  0E00               	movlw	low (__mediumconst shr (0+16))
 16951  001AD2  22F8               	addwfc	tblptru,f,c
 16952  001AD4                     	endif
 16953  001AD4  0009               	tblrd		*+
 16954  001AD6  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16955  001ADA  000A               	tblrd		*-
 16956  001ADC  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16957  001AE0  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16958  001AE4  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16959  001AE8  EC23  F025         	call	___lwdiv	;wreg free
 16960  001AEC  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16961  001AF0  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16962  001AF4  0E00               	movlw	0
 16963  001AF6  0100               	movlb	0	; () banked
 16964  001AF8  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16965  001AFA  0E0A               	movlw	10
 16966  001AFC  6F89               	movwf	___lwmod@divisor& (0+255),b
 16967  001AFE  EC6F  F026         	call	___lwmod	;wreg free
 16968  001B02  0100               	movlb	0	; () banked
 16969  001B04  5187               	movf	?___lwmod& (0+255),w,b
 16970  001B06  0F30               	addlw	48
 16971  001B08  0100               	movlb	0	; () banked
 16972  001B0A  6FA8               	movwf	printf@c& (0+255),b
 16973                           
 16974                           ; BSR set to: 0
 16975                           ;doprnt.c: 1523: }
 16976                           ;doprnt.c: 1524: (putch(c) );
 16977  001B0C  0100               	movlb	0	; () banked
 16978  001B0E  51A8               	movf	printf@c& (0+255),w,b
 16979  001B10  EC2A  F02B         	call	_putch
 16980  001B14                     l6586:
 16981  001B14  0100               	movlb	0	; () banked
 16982  001B16  079E               	decf	printf@prec& (0+255),f,b
 16983  001B18  0100               	movlb	0	; () banked
 16984  001B1A  299E               	incf	printf@prec& (0+255),w,b
 16985  001B1C  A4D8               	btfss	status,2,c
 16986  001B1E  D7CE               	goto	l6582
 16987  001B20                     l6588:
 16988  001B20  C08E  FFF6         	movff	printf@f,tblptrl
 16989  001B24  C08F  FFF7         	movff	printf@f+1,tblptrh
 16990  001B28  0100               	movlb	0	; () banked
 16991  001B2A  4B8E               	infsnz	printf@f& (0+255),f,b
 16992  001B2C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16993  001B2E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16994  001B2E  6AF8               	clrf	tblptru,c
 16995  001B30                     	endif
 16996  001B30                     	if	0	;tblptru may be non-zero
 16997  001B30                     	endif
 16998  001B30  0008               	tblrd		*
 16999  001B32  CFF5 F0A8          	movff	tablat,printf@c
 17000  001B36  0100               	movlb	0	; () banked
 17001  001B38  51A8               	movf	printf@c& (0+255),w,b
 17002  001B3A  B4D8               	btfsc	status,2,c
 17003  001B3C  0012               	return	
 17004  001B3E  D5EB               	goto	l6458
 17005  001B40                     __end_of_printf:
 17006                           	opt stack 0
 17007                           tblptru	equ	0xFF8
 17008                           tblptrh	equ	0xFF7
 17009                           tblptrl	equ	0xFF6
 17010                           tablat	equ	0xFF5
 17011                           prodh	equ	0xFF4
 17012                           prodl	equ	0xFF3
 17013                           intcon	equ	0xFF2
 17014                           intcon2	equ	0xFF1
 17015                           intcon3	equ	0xFF0
 17016                           indf0	equ	0xFEF
 17017                           postinc0	equ	0xFEE
 17018                           fsr0h	equ	0xFEA
 17019                           fsr0l	equ	0xFE9
 17020                           wreg	equ	0xFE8
 17021                           postdec1	equ	0xFE5
 17022                           fsr1l	equ	0xFE1
 17023                           indf2	equ	0xFDF
 17024                           postinc2	equ	0xFDE
 17025                           postdec2	equ	0xFDD
 17026                           fsr2h	equ	0xFDA
 17027                           fsr2l	equ	0xFD9
 17028                           status	equ	0xFD8
 17029                           
 17030 ;; *************** function _putch *****************
 17031 ;; Defined at:
 17032 ;;		line 20 in file "lcd.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;  data            1    wreg     unsigned char 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  data            1    2[BANK0 ] unsigned char 
 17037 ;; Return value:  Size  Location     Type
 17038 ;;                  1    wreg      void 
 17039 ;; Registers used:
 17040 ;;		wreg, status,2, status,0, cstack
 17041 ;; Tracked objects:
 17042 ;;		On entry : 0/0
 17043 ;;		On exit  : 0/0
 17044 ;;		Unchanged: 0/0
 17045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17050 ;;Total ram usage:        1 bytes
 17051 ;; Hardware stack levels used:    1
 17052 ;; Hardware stack levels required when called:    8
 17053 ;; This function calls:
 17054 ;;		_lcdNibble
 17055 ;; This function is called by:
 17056 ;;		_printf
 17057 ;; This function uses a non-reentrant model
 17058 ;;
 17059                           
 17060                           	psect	text52
 17061  005654                     __ptext52:
 17062                           	opt stack 0
 17063  005654                     _putch:
 17064                           	opt stack 18
 17065                           
 17066                           ;incstack = 0
 17067                           ;putch@data stored from wreg
 17068  005654  0100               	movlb	0	; () banked
 17069  005656  6F82               	movwf	putch@data& (0+255),b
 17070                           
 17071                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17072  005658  848C               	bsf	3980,2,c	;volatile
 17073                           
 17074                           ;lcd.c: 22: lcdNibble(data);
 17075  00565A  0100               	movlb	0	; () banked
 17076  00565C  5182               	movf	putch@data& (0+255),w,b
 17077  00565E  EC09  F026         	call	_lcdNibble
 17078  005662  0012               	return		;funcret
 17079  005664                     __end_of_putch:
 17080                           	opt stack 0
 17081                           tblptru	equ	0xFF8
 17082                           tblptrh	equ	0xFF7
 17083                           tblptrl	equ	0xFF6
 17084                           tablat	equ	0xFF5
 17085                           prodh	equ	0xFF4
 17086                           prodl	equ	0xFF3
 17087                           intcon	equ	0xFF2
 17088                           intcon2	equ	0xFF1
 17089                           intcon3	equ	0xFF0
 17090                           indf0	equ	0xFEF
 17091                           postinc0	equ	0xFEE
 17092                           fsr0h	equ	0xFEA
 17093                           fsr0l	equ	0xFE9
 17094                           wreg	equ	0xFE8
 17095                           postdec1	equ	0xFE5
 17096                           fsr1l	equ	0xFE1
 17097                           indf2	equ	0xFDF
 17098                           postinc2	equ	0xFDE
 17099                           postdec2	equ	0xFDD
 17100                           fsr2h	equ	0xFDA
 17101                           fsr2l	equ	0xFD9
 17102                           status	equ	0xFD8
 17103                           
 17104 ;; *************** function _isdigit *****************
 17105 ;; Defined at:
 17106 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17107 ;; Parameters:    Size  Location     Type
 17108 ;;  c               1    wreg     unsigned char 
 17109 ;; Auto vars:     Size  Location     Type
 17110 ;;  c               1    2[BANK0 ] unsigned char 
 17111 ;; Return value:  Size  Location     Type
 17112 ;;		None               void
 17113 ;; Registers used:
 17114 ;;		wreg, status,2, status,0
 17115 ;; Tracked objects:
 17116 ;;		On entry : 0/0
 17117 ;;		On exit  : 0/0
 17118 ;;		Unchanged: 0/0
 17119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17123 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;Total ram usage:        3 bytes
 17125 ;; Hardware stack levels used:    1
 17126 ;; Hardware stack levels required when called:    7
 17127 ;; This function calls:
 17128 ;;		Nothing
 17129 ;; This function is called by:
 17130 ;;		_printf
 17131 ;; This function uses a non-reentrant model
 17132 ;;
 17133                           
 17134                           	psect	text53
 17135  00547C                     __ptext53:
 17136                           	opt stack 0
 17137  00547C                     _isdigit:
 17138                           	opt stack 19
 17139                           
 17140                           ;incstack = 0
 17141                           ;isdigit@c stored from wreg
 17142  00547C  0100               	movlb	0	; () banked
 17143  00547E  6F82               	movwf	isdigit@c& (0+255),b
 17144  005480  0E00               	movlw	0
 17145  005482  0100               	movlb	0	; () banked
 17146  005484  6F81               	movwf	_isdigit$2056& (0+255),b
 17147                           
 17148                           ; BSR set to: 0
 17149  005486  0E3A               	movlw	58
 17150  005488  0100               	movlb	0	; () banked
 17151  00548A  6182               	cpfslt	isdigit@c& (0+255),b
 17152  00548C  D007               	goto	l6306
 17153                           
 17154                           ; BSR set to: 0
 17155  00548E  0E2F               	movlw	47
 17156  005490  0100               	movlb	0	; () banked
 17157  005492  6582               	cpfsgt	isdigit@c& (0+255),b
 17158  005494  D003               	goto	l6306
 17159                           
 17160                           ; BSR set to: 0
 17161  005496  0E01               	movlw	1
 17162  005498  0100               	movlb	0	; () banked
 17163  00549A  6F81               	movwf	_isdigit$2056& (0+255),b
 17164  00549C                     l6306:
 17165                           
 17166                           ; BSR set to: 0
 17167  00549C  C081  F080         	movff	_isdigit$2056,??_isdigit
 17168  0054A0  0100               	movlb	0	; () banked
 17169  0054A2  3180               	rrcf	??_isdigit& (0+255),w,b
 17170  0054A4  0012               	return	
 17171  0054A6                     __end_of_isdigit:
 17172                           	opt stack 0
 17173                           tblptru	equ	0xFF8
 17174                           tblptrh	equ	0xFF7
 17175                           tblptrl	equ	0xFF6
 17176                           tablat	equ	0xFF5
 17177                           prodh	equ	0xFF4
 17178                           prodl	equ	0xFF3
 17179                           intcon	equ	0xFF2
 17180                           intcon2	equ	0xFF1
 17181                           intcon3	equ	0xFF0
 17182                           indf0	equ	0xFEF
 17183                           postinc0	equ	0xFEE
 17184                           fsr0h	equ	0xFEA
 17185                           fsr0l	equ	0xFE9
 17186                           wreg	equ	0xFE8
 17187                           postdec1	equ	0xFE5
 17188                           fsr1l	equ	0xFE1
 17189                           indf2	equ	0xFDF
 17190                           postinc2	equ	0xFDE
 17191                           postdec2	equ	0xFDD
 17192                           fsr2h	equ	0xFDA
 17193                           fsr2l	equ	0xFD9
 17194                           status	equ	0xFD8
 17195                           
 17196 ;; *************** function ___wmul *****************
 17197 ;; Defined at:
 17198 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 17199 ;; Parameters:    Size  Location     Type
 17200 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17201 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17202 ;; Auto vars:     Size  Location     Type
 17203 ;;  product         2    4[BANK0 ] unsigned int 
 17204 ;; Return value:  Size  Location     Type
 17205 ;;                  2    0[BANK0 ] unsigned int 
 17206 ;; Registers used:
 17207 ;;		wreg, status,2, status,0, prodl, prodh
 17208 ;; Tracked objects:
 17209 ;;		On entry : 0/0
 17210 ;;		On exit  : 0/0
 17211 ;;		Unchanged: 0/0
 17212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17213 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17216 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17217 ;;Total ram usage:        6 bytes
 17218 ;; Hardware stack levels used:    1
 17219 ;; Hardware stack levels required when called:    7
 17220 ;; This function calls:
 17221 ;;		Nothing
 17222 ;; This function is called by:
 17223 ;;		_printf
 17224 ;; This function uses a non-reentrant model
 17225 ;;
 17226                           
 17227                           	psect	text54
 17228  00514E                     __ptext54:
 17229                           	opt stack 0
 17230  00514E                     ___wmul:
 17231                           	opt stack 19
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;incstack = 0
 17235  00514E  0100               	movlb	0	; () banked
 17236  005150  5180               	movf	___wmul@multiplier& (0+255),w,b
 17237  005152  0100               	movlb	0	; () banked
 17238  005154  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17239  005156  CFF3 F084          	movff	prodl,___wmul@product
 17240  00515A  CFF4 F085          	movff	prodh,___wmul@product+1
 17241  00515E  0100               	movlb	0	; () banked
 17242  005160  5180               	movf	___wmul@multiplier& (0+255),w,b
 17243  005162  0100               	movlb	0	; () banked
 17244  005164  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 17245  005166  50F3               	movf	prodl,w,c
 17246  005168  0100               	movlb	0	; () banked
 17247  00516A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17248  00516C  0100               	movlb	0	; () banked
 17249  00516E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 17250  005170  0100               	movlb	0	; () banked
 17251  005172  0382               	mulwf	___wmul@multiplicand& (0+255),b
 17252  005174  50F3               	movf	prodl,w,c
 17253  005176  0100               	movlb	0	; () banked
 17254  005178  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 17255                           
 17256                           ; BSR set to: 0
 17257  00517A  C084  F080         	movff	___wmul@product,?___wmul
 17258  00517E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 17259  005182  0012               	return	
 17260  005184                     __end_of___wmul:
 17261                           	opt stack 0
 17262                           tblptru	equ	0xFF8
 17263                           tblptrh	equ	0xFF7
 17264                           tblptrl	equ	0xFF6
 17265                           tablat	equ	0xFF5
 17266                           prodh	equ	0xFF4
 17267                           prodl	equ	0xFF3
 17268                           intcon	equ	0xFF2
 17269                           intcon2	equ	0xFF1
 17270                           intcon3	equ	0xFF0
 17271                           indf0	equ	0xFEF
 17272                           postinc0	equ	0xFEE
 17273                           fsr0h	equ	0xFEA
 17274                           fsr0l	equ	0xFE9
 17275                           wreg	equ	0xFE8
 17276                           postdec1	equ	0xFE5
 17277                           fsr1l	equ	0xFE1
 17278                           indf2	equ	0xFDF
 17279                           postinc2	equ	0xFDE
 17280                           postdec2	equ	0xFDD
 17281                           fsr2h	equ	0xFDA
 17282                           fsr2l	equ	0xFD9
 17283                           status	equ	0xFD8
 17284                           
 17285 ;; *************** function ___lwmod *****************
 17286 ;; Defined at:
 17287 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;  dividend        2    7[BANK0 ] unsigned int 
 17290 ;;  divisor         2    9[BANK0 ] unsigned int 
 17291 ;; Auto vars:     Size  Location     Type
 17292 ;;  counter         1   11[BANK0 ] unsigned char 
 17293 ;; Return value:  Size  Location     Type
 17294 ;;                  2    7[BANK0 ] unsigned int 
 17295 ;; Registers used:
 17296 ;;		wreg, status,2, status,0
 17297 ;; Tracked objects:
 17298 ;;		On entry : 0/0
 17299 ;;		On exit  : 0/0
 17300 ;;		Unchanged: 0/0
 17301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17302 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;Total ram usage:        5 bytes
 17307 ;; Hardware stack levels used:    1
 17308 ;; Hardware stack levels required when called:    7
 17309 ;; This function calls:
 17310 ;;		Nothing
 17311 ;; This function is called by:
 17312 ;;		_printf
 17313 ;; This function uses a non-reentrant model
 17314 ;;
 17315                           
 17316                           	psect	text55
 17317  004CDE                     __ptext55:
 17318                           	opt stack 0
 17319  004CDE                     ___lwmod:
 17320                           	opt stack 19
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;incstack = 0
 17324  004CDE  0100               	movlb	0	; () banked
 17325  004CE0  5189               	movf	___lwmod@divisor& (0+255),w,b
 17326  004CE2  0100               	movlb	0	; () banked
 17327  004CE4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17328  004CE6  B4D8               	btfsc	status,2,c
 17329  004CE8  D026               	goto	l1943
 17330                           
 17331                           ; BSR set to: 0
 17332  004CEA  0E01               	movlw	1
 17333  004CEC  0100               	movlb	0	; () banked
 17334  004CEE  6F8B               	movwf	___lwmod@counter& (0+255),b
 17335  004CF0  D006               	goto	l6344
 17336  004CF2                     l6342:
 17337                           
 17338                           ; BSR set to: 0
 17339  004CF2  0100               	movlb	0	; () banked
 17340  004CF4  90D8               	bcf	status,0,c
 17341  004CF6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 17342  004CF8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17343  004CFA  0100               	movlb	0	; () banked
 17344  004CFC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 17345  004CFE                     l6344:
 17346                           
 17347                           ; BSR set to: 0
 17348  004CFE  0100               	movlb	0	; () banked
 17349  004D00  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17350  004D02  D7F7               	goto	l6342
 17351  004D04                     l6346:
 17352                           
 17353                           ; BSR set to: 0
 17354  004D04  0100               	movlb	0	; () banked
 17355  004D06  5189               	movf	___lwmod@divisor& (0+255),w,b
 17356  004D08  0100               	movlb	0	; () banked
 17357  004D0A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 17358  004D0C  0100               	movlb	0	; () banked
 17359  004D0E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17360  004D10  0100               	movlb	0	; () banked
 17361  004D12  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17362  004D14  A0D8               	btfss	status,0,c
 17363  004D16  D008               	goto	l6350
 17364                           
 17365                           ; BSR set to: 0
 17366  004D18  0100               	movlb	0	; () banked
 17367  004D1A  5189               	movf	___lwmod@divisor& (0+255),w,b
 17368  004D1C  0100               	movlb	0	; () banked
 17369  004D1E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 17370  004D20  0100               	movlb	0	; () banked
 17371  004D22  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17372  004D24  0100               	movlb	0	; () banked
 17373  004D26  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17374  004D28                     l6350:
 17375                           
 17376                           ; BSR set to: 0
 17377  004D28  0100               	movlb	0	; () banked
 17378  004D2A  90D8               	bcf	status,0,c
 17379  004D2C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17380  004D2E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 17381                           
 17382                           ; BSR set to: 0
 17383  004D30  0100               	movlb	0	; () banked
 17384  004D32  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 17385  004D34  D7E7               	goto	l6346
 17386  004D36                     l1943:
 17387                           
 17388                           ; BSR set to: 0
 17389  004D36  C087  F087         	movff	___lwmod@dividend,?___lwmod
 17390  004D3A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 17391                           
 17392                           ; BSR set to: 0
 17393  004D3E  0012               	return		;funcret
 17394  004D40                     __end_of___lwmod:
 17395                           	opt stack 0
 17396                           tblptru	equ	0xFF8
 17397                           tblptrh	equ	0xFF7
 17398                           tblptrl	equ	0xFF6
 17399                           tablat	equ	0xFF5
 17400                           prodh	equ	0xFF4
 17401                           prodl	equ	0xFF3
 17402                           intcon	equ	0xFF2
 17403                           intcon2	equ	0xFF1
 17404                           intcon3	equ	0xFF0
 17405                           indf0	equ	0xFEF
 17406                           postinc0	equ	0xFEE
 17407                           fsr0h	equ	0xFEA
 17408                           fsr0l	equ	0xFE9
 17409                           wreg	equ	0xFE8
 17410                           postdec1	equ	0xFE5
 17411                           fsr1l	equ	0xFE1
 17412                           indf2	equ	0xFDF
 17413                           postinc2	equ	0xFDE
 17414                           postdec2	equ	0xFDD
 17415                           fsr2h	equ	0xFDA
 17416                           fsr2l	equ	0xFD9
 17417                           status	equ	0xFD8
 17418                           
 17419 ;; *************** function ___lwdiv *****************
 17420 ;; Defined at:
 17421 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 17422 ;; Parameters:    Size  Location     Type
 17423 ;;  dividend        2    0[BANK0 ] unsigned int 
 17424 ;;  divisor         2    2[BANK0 ] unsigned int 
 17425 ;; Auto vars:     Size  Location     Type
 17426 ;;  quotient        2    4[BANK0 ] unsigned int 
 17427 ;;  counter         1    6[BANK0 ] unsigned char 
 17428 ;; Return value:  Size  Location     Type
 17429 ;;                  2    0[BANK0 ] unsigned int 
 17430 ;; Registers used:
 17431 ;;		wreg, status,2, status,0
 17432 ;; Tracked objects:
 17433 ;;		On entry : 0/0
 17434 ;;		On exit  : 0/0
 17435 ;;		Unchanged: 0/0
 17436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17437 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17438 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17440 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17441 ;;Total ram usage:        7 bytes
 17442 ;; Hardware stack levels used:    1
 17443 ;; Hardware stack levels required when called:    7
 17444 ;; This function calls:
 17445 ;;		Nothing
 17446 ;; This function is called by:
 17447 ;;		_printf
 17448 ;; This function uses a non-reentrant model
 17449 ;;
 17450                           
 17451                           	psect	text56
 17452  004A46                     __ptext56:
 17453                           	opt stack 0
 17454  004A46                     ___lwdiv:
 17455                           	opt stack 19
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;incstack = 0
 17459  004A46  0E00               	movlw	0
 17460  004A48  0100               	movlb	0	; () banked
 17461  004A4A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17462  004A4C  0E00               	movlw	0
 17463  004A4E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 17464                           
 17465                           ; BSR set to: 0
 17466  004A50  0100               	movlb	0	; () banked
 17467  004A52  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17468  004A54  0100               	movlb	0	; () banked
 17469  004A56  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17470  004A58  B4D8               	btfsc	status,2,c
 17471  004A5A  D02C               	goto	l1933
 17472                           
 17473                           ; BSR set to: 0
 17474  004A5C  0E01               	movlw	1
 17475  004A5E  0100               	movlb	0	; () banked
 17476  004A60  6F86               	movwf	___lwdiv@counter& (0+255),b
 17477  004A62  D006               	goto	l6324
 17478  004A64                     l6322:
 17479                           
 17480                           ; BSR set to: 0
 17481  004A64  0100               	movlb	0	; () banked
 17482  004A66  90D8               	bcf	status,0,c
 17483  004A68  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 17484  004A6A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17485  004A6C  0100               	movlb	0	; () banked
 17486  004A6E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 17487  004A70                     l6324:
 17488                           
 17489                           ; BSR set to: 0
 17490  004A70  0100               	movlb	0	; () banked
 17491  004A72  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17492  004A74  D7F7               	goto	l6322
 17493  004A76                     l6326:
 17494                           
 17495                           ; BSR set to: 0
 17496  004A76  0100               	movlb	0	; () banked
 17497  004A78  90D8               	bcf	status,0,c
 17498  004A7A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 17499  004A7C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17500                           
 17501                           ; BSR set to: 0
 17502  004A7E  0100               	movlb	0	; () banked
 17503  004A80  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17504  004A82  0100               	movlb	0	; () banked
 17505  004A84  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 17506  004A86  0100               	movlb	0	; () banked
 17507  004A88  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17508  004A8A  0100               	movlb	0	; () banked
 17509  004A8C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17510  004A8E  A0D8               	btfss	status,0,c
 17511  004A90  D00A               	goto	l6334
 17512                           
 17513                           ; BSR set to: 0
 17514  004A92  0100               	movlb	0	; () banked
 17515  004A94  5182               	movf	___lwdiv@divisor& (0+255),w,b
 17516  004A96  0100               	movlb	0	; () banked
 17517  004A98  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 17518  004A9A  0100               	movlb	0	; () banked
 17519  004A9C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17520  004A9E  0100               	movlb	0	; () banked
 17521  004AA0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17522                           
 17523                           ; BSR set to: 0
 17524  004AA2  0100               	movlb	0	; () banked
 17525  004AA4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 17526  004AA6                     l6334:
 17527                           
 17528                           ; BSR set to: 0
 17529  004AA6  0100               	movlb	0	; () banked
 17530  004AA8  90D8               	bcf	status,0,c
 17531  004AAA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17532  004AAC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 17533                           
 17534                           ; BSR set to: 0
 17535  004AAE  0100               	movlb	0	; () banked
 17536  004AB0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 17537  004AB2  D7E1               	goto	l6326
 17538  004AB4                     l1933:
 17539                           
 17540                           ; BSR set to: 0
 17541  004AB4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 17542  004AB8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17543                           
 17544                           ; BSR set to: 0
 17545  004ABC  0012               	return		;funcret
 17546  004ABE                     __end_of___lwdiv:
 17547                           	opt stack 0
 17548                           tblptru	equ	0xFF8
 17549                           tblptrh	equ	0xFF7
 17550                           tblptrl	equ	0xFF6
 17551                           tablat	equ	0xFF5
 17552                           prodh	equ	0xFF4
 17553                           prodl	equ	0xFF3
 17554                           intcon	equ	0xFF2
 17555                           intcon2	equ	0xFF1
 17556                           intcon3	equ	0xFF0
 17557                           indf0	equ	0xFEF
 17558                           postinc0	equ	0xFEE
 17559                           fsr0h	equ	0xFEA
 17560                           fsr0l	equ	0xFE9
 17561                           wreg	equ	0xFE8
 17562                           postdec1	equ	0xFE5
 17563                           fsr1l	equ	0xFE1
 17564                           indf2	equ	0xFDF
 17565                           postinc2	equ	0xFDE
 17566                           postdec2	equ	0xFDD
 17567                           fsr2h	equ	0xFDA
 17568                           fsr2l	equ	0xFD9
 17569                           status	equ	0xFD8
 17570                           
 17571 ;; *************** function _lcdInst *****************
 17572 ;; Defined at:
 17573 ;;		line 15 in file "lcd.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;  data            1    wreg     unsigned char 
 17576 ;; Auto vars:     Size  Location     Type
 17577 ;;  data            1    2[BANK0 ] unsigned char 
 17578 ;; Return value:  Size  Location     Type
 17579 ;;                  1    wreg      void 
 17580 ;; Registers used:
 17581 ;;		wreg, status,2, status,0, cstack
 17582 ;; Tracked objects:
 17583 ;;		On entry : 0/0
 17584 ;;		On exit  : 0/0
 17585 ;;		Unchanged: 0/0
 17586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17590 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17591 ;;Total ram usage:        1 bytes
 17592 ;; Hardware stack levels used:    1
 17593 ;; Hardware stack levels required when called:    8
 17594 ;; This function calls:
 17595 ;;		_lcdNibble
 17596 ;; This function is called by:
 17597 ;;		_UI
 17598 ;;		_change_state_to_menu_start
 17599 ;;		_change_state_to_menu_12
 17600 ;;		_change_state_to_menu_22
 17601 ;;		_initLCD
 17602 ;;		_printRTC
 17603 ;;		_Loading
 17604 ;;		_EEPROM_write
 17605 ;;		_Test
 17606 ;;		_algorithmTest
 17607 ;;		_sensorTest
 17608 ;;		_actuatorTest
 17609 ;;		_BothServos
 17610 ;;		_PortTestDC
 17611 ;;		_PlatformTest
 17612 ;;		_SpeedTest
 17613 ;;		_BlockerTest
 17614 ;;		_arm
 17615 ;;		_PortTestPusher
 17616 ;;		_ToggleTestA5
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620                           	psect	text57
 17621  005664                     __ptext57:
 17622                           	opt stack 0
 17623  005664                     _lcdInst:
 17624                           	opt stack 20
 17625                           
 17626                           ; BSR set to: 0
 17627                           ;incstack = 0
 17628                           ;lcdInst@data stored from wreg
 17629  005664  0100               	movlb	0	; () banked
 17630  005666  6F82               	movwf	lcdInst@data& (0+255),b
 17631                           
 17632                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 17633  005668  948C               	bcf	3980,2,c	;volatile
 17634                           
 17635                           ;lcd.c: 17: lcdNibble(data);
 17636  00566A  0100               	movlb	0	; () banked
 17637  00566C  5182               	movf	lcdInst@data& (0+255),w,b
 17638  00566E  EC09  F026         	call	_lcdNibble
 17639  005672  0012               	return		;funcret
 17640  005674                     __end_of_lcdInst:
 17641                           	opt stack 0
 17642                           tblptru	equ	0xFF8
 17643                           tblptrh	equ	0xFF7
 17644                           tblptrl	equ	0xFF6
 17645                           tablat	equ	0xFF5
 17646                           prodh	equ	0xFF4
 17647                           prodl	equ	0xFF3
 17648                           intcon	equ	0xFF2
 17649                           intcon2	equ	0xFF1
 17650                           intcon3	equ	0xFF0
 17651                           indf0	equ	0xFEF
 17652                           postinc0	equ	0xFEE
 17653                           fsr0h	equ	0xFEA
 17654                           fsr0l	equ	0xFE9
 17655                           wreg	equ	0xFE8
 17656                           postdec1	equ	0xFE5
 17657                           fsr1l	equ	0xFE1
 17658                           indf2	equ	0xFDF
 17659                           postinc2	equ	0xFDE
 17660                           postdec2	equ	0xFDD
 17661                           fsr2h	equ	0xFDA
 17662                           fsr2l	equ	0xFD9
 17663                           status	equ	0xFD8
 17664                           
 17665 ;; *************** function _lcdNibble *****************
 17666 ;; Defined at:
 17667 ;;		line 25 in file "lcd.c"
 17668 ;; Parameters:    Size  Location     Type
 17669 ;;  data            1    wreg     unsigned char 
 17670 ;; Auto vars:     Size  Location     Type
 17671 ;;  data            1    1[BANK0 ] unsigned char 
 17672 ;;  temp            1    0[BANK0 ] unsigned char 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  1    wreg      void 
 17675 ;; Registers used:
 17676 ;;		wreg, status,2, status,0
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17686 ;;Total ram usage:        2 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    7
 17689 ;; This function calls:
 17690 ;;		Nothing
 17691 ;; This function is called by:
 17692 ;;		_lcdInst
 17693 ;;		_putch
 17694 ;; This function uses a non-reentrant model
 17695 ;;
 17696                           
 17697                           	psect	text58
 17698  004C12                     __ptext58:
 17699                           	opt stack 0
 17700  004C12                     _lcdNibble:
 17701                           	opt stack 20
 17702                           
 17703                           ;incstack = 0
 17704                           ;lcdNibble@data stored from wreg
 17705  004C12  0100               	movlb	0	; () banked
 17706  004C14  6F81               	movwf	lcdNibble@data& (0+255),b
 17707                           
 17708                           ;lcd.c: 27: char temp = data & 0xF0;
 17709  004C16  0100               	movlb	0	; () banked
 17710  004C18  5181               	movf	lcdNibble@data& (0+255),w,b
 17711  004C1A  0BF0               	andlw	240
 17712  004C1C  0100               	movlb	0	; () banked
 17713  004C1E  6F80               	movwf	lcdNibble@temp& (0+255),b
 17714                           
 17715                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17716  004C20  508C               	movf	3980,w,c	;volatile
 17717  004C22  0B0F               	andlw	15
 17718  004C24  6E8C               	movwf	3980,c	;volatile
 17719                           
 17720                           ;lcd.c: 29: LATD = temp | LATD;
 17721  004C26  0100               	movlb	0	; () banked
 17722  004C28  5180               	movf	lcdNibble@temp& (0+255),w,b
 17723  004C2A  108C               	iorwf	3980,w,c	;volatile
 17724  004C2C  6E8C               	movwf	3980,c	;volatile
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17728  004C2E  868C               	bsf	3980,3,c	;volatile
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17732  004C30  0E42               	movlw	66
 17733  004C32                     u10667:
 17734  004C32  2EE8               	decfsz	wreg,f,c
 17735  004C34  D7FE               	bra	u10667
 17736  004C36  D000               	nop2	
 17737                           
 17738                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17739  004C38  968C               	bcf	3980,3,c	;volatile
 17740                           
 17741                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17742  004C3A  0E42               	movlw	66
 17743  004C3C                     u10677:
 17744  004C3C  2EE8               	decfsz	wreg,f,c
 17745  004C3E  D7FE               	bra	u10677
 17746  004C40  D000               	nop2	
 17747                           
 17748                           ;lcd.c: 36: data = data << 4;
 17749  004C42  0100               	movlb	0	; () banked
 17750  004C44  3981               	swapf	lcdNibble@data& (0+255),w,b
 17751  004C46  0BF0               	andlw	240
 17752  004C48  0100               	movlb	0	; () banked
 17753  004C4A  6F81               	movwf	lcdNibble@data& (0+255),b
 17754                           
 17755                           ;lcd.c: 38: temp = data & 0xF0;
 17756  004C4C  0100               	movlb	0	; () banked
 17757  004C4E  5181               	movf	lcdNibble@data& (0+255),w,b
 17758  004C50  0BF0               	andlw	240
 17759  004C52  0100               	movlb	0	; () banked
 17760  004C54  6F80               	movwf	lcdNibble@temp& (0+255),b
 17761                           
 17762                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17763  004C56  508C               	movf	3980,w,c	;volatile
 17764  004C58  0B0F               	andlw	15
 17765  004C5A  6E8C               	movwf	3980,c	;volatile
 17766                           
 17767                           ;lcd.c: 40: LATD = temp | LATD;
 17768  004C5C  0100               	movlb	0	; () banked
 17769  004C5E  5180               	movf	lcdNibble@temp& (0+255),w,b
 17770  004C60  108C               	iorwf	3980,w,c	;volatile
 17771  004C62  6E8C               	movwf	3980,c	;volatile
 17772                           
 17773                           ; BSR set to: 0
 17774                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17775  004C64  868C               	bsf	3980,3,c	;volatile
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17779  004C66  0E42               	movlw	66
 17780  004C68                     u10687:
 17781  004C68  2EE8               	decfsz	wreg,f,c
 17782  004C6A  D7FE               	bra	u10687
 17783  004C6C  D000               	nop2	
 17784                           
 17785                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17786  004C6E  968C               	bcf	3980,3,c	;volatile
 17787                           
 17788                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17789  004C70  0E42               	movlw	66
 17790  004C72                     u10697:
 17791  004C72  2EE8               	decfsz	wreg,f,c
 17792  004C74  D7FE               	bra	u10697
 17793  004C76  D000               	nop2	
 17794  004C78  0012               	return		;funcret
 17795  004C7A                     __end_of_lcdNibble:
 17796                           	opt stack 0
 17797                           tblptru	equ	0xFF8
 17798                           tblptrh	equ	0xFF7
 17799                           tblptrl	equ	0xFF6
 17800                           tablat	equ	0xFF5
 17801                           prodh	equ	0xFF4
 17802                           prodl	equ	0xFF3
 17803                           intcon	equ	0xFF2
 17804                           intcon2	equ	0xFF1
 17805                           intcon3	equ	0xFF0
 17806                           indf0	equ	0xFEF
 17807                           postinc0	equ	0xFEE
 17808                           fsr0h	equ	0xFEA
 17809                           fsr0l	equ	0xFE9
 17810                           wreg	equ	0xFE8
 17811                           postdec1	equ	0xFE5
 17812                           fsr1l	equ	0xFE1
 17813                           indf2	equ	0xFDF
 17814                           postinc2	equ	0xFDE
 17815                           postdec2	equ	0xFDD
 17816                           fsr2h	equ	0xFDA
 17817                           fsr2l	equ	0xFD9
 17818                           status	equ	0xFD8
 17819                           
 17820 ;; *************** function _handler *****************
 17821 ;; Defined at:
 17822 ;;		line 16 in file "interruptHandler.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;		None
 17825 ;; Auto vars:     Size  Location     Type
 17826 ;;		None
 17827 ;; Return value:  Size  Location     Type
 17828 ;;                  1    wreg      void 
 17829 ;; Registers used:
 17830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17831 ;; Tracked objects:
 17832 ;;		On entry : 0/0
 17833 ;;		On exit  : 0/0
 17834 ;;		Unchanged: 0/0
 17835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17838 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17839 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17840 ;;Total ram usage:       16 bytes
 17841 ;; Hardware stack levels used:    1
 17842 ;; Hardware stack levels required when called:    6
 17843 ;; This function calls:
 17844 ;;		_printSortTimer
 17845 ;;		_updateArmState
 17846 ;;		_updateMenu
 17847 ;;		_updateServoStates
 17848 ;;		i2_change_state_to_menu_start
 17849 ;; This function is called by:
 17850 ;;		Interrupt level 2
 17851 ;; This function uses a non-reentrant model
 17852 ;;
 17853                           
 17854                           	psect	intcode
 17855  000008                     __pintcode:
 17856                           	opt stack 0
 17857  000008                     _handler:
 17858                           	opt stack 18
 17859                           
 17860                           ;incstack = 0
 17861  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17862  00000A  ED9C  F01A         	call	int_func,f	;refresh shadow registers
 17863                           tblptru	equ	0xFF8
 17864                           tblptrh	equ	0xFF7
 17865                           tblptrl	equ	0xFF6
 17866                           tablat	equ	0xFF5
 17867                           prodh	equ	0xFF4
 17868                           prodl	equ	0xFF3
 17869                           intcon	equ	0xFF2
 17870                           intcon2	equ	0xFF1
 17871                           intcon3	equ	0xFF0
 17872                           indf0	equ	0xFEF
 17873                           postinc0	equ	0xFEE
 17874                           fsr0h	equ	0xFEA
 17875                           fsr0l	equ	0xFE9
 17876                           wreg	equ	0xFE8
 17877                           postdec1	equ	0xFE5
 17878                           fsr1l	equ	0xFE1
 17879                           indf2	equ	0xFDF
 17880                           postinc2	equ	0xFDE
 17881                           postdec2	equ	0xFDD
 17882                           fsr2h	equ	0xFDA
 17883                           fsr2l	equ	0xFD9
 17884                           status	equ	0xFD8
 17885                           
 17886                           	psect	intcode_body
 17887  003538                     __pintcode_body:
 17888                           	opt stack 18
 17889  003538                     int_func:
 17890                           	opt stack 18
 17891  003538  0006               	pop		; remove dummy address from shadow register refresh
 17892  00353A  CFFA F04D          	movff	pclath,??_handler+2
 17893  00353E  CFFB F04E          	movff	pclatu,??_handler+3
 17894  003542  CFE9 F04F          	movff	fsr0l,??_handler+4
 17895  003546  CFEA F050          	movff	fsr0h,??_handler+5
 17896  00354A  CFE1 F051          	movff	fsr1l,??_handler+6
 17897  00354E  CFE2 F052          	movff	fsr1h,??_handler+7
 17898  003552  CFD9 F053          	movff	fsr2l,??_handler+8
 17899  003556  CFDA F054          	movff	fsr2h,??_handler+9
 17900  00355A  CFF3 F055          	movff	prodl,??_handler+10
 17901  00355E  CFF4 F056          	movff	prodh,??_handler+11
 17902  003562  CFF6 F057          	movff	tblptrl,??_handler+12
 17903  003566  CFF7 F058          	movff	tblptrh,??_handler+13
 17904  00356A  CFF8 F059          	movff	tblptru,??_handler+14
 17905  00356E  CFF5 F05A          	movff	tablat,??_handler+15
 17906                           
 17907                           ;interruptHandler.c: 18: if(INT1IF){
 17908  003572  A0F0               	btfss	intcon3,0,c	;volatile
 17909  003574  D034               	goto	i2l9752
 17910                           
 17911                           ;interruptHandler.c: 19: INT1IF = 0;
 17912  003576  90F0               	bcf	intcon3,0,c	;volatile
 17913                           
 17914                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 17915  003578  3881               	swapf	3969,w,c	;volatile
 17916  00357A  0B0F               	andlw	15
 17917  00357C  0B0F               	andlw	15
 17918  00357E  6E4B               	movwf	??_handler& (0+255),c
 17919  003580  6A4C               	clrf	(??_handler+1)& (0+255),c
 17920  003582  0EA3               	movlw	low _keys
 17921  003584  244B               	addwf	??_handler,w,c
 17922  003586  6EF6               	movwf	tblptrl,c
 17923  003588  0EFA               	movlw	high _keys
 17924  00358A  204C               	addwfc	??_handler+1,w,c
 17925  00358C  6EF7               	movwf	tblptrh,c
 17926  00358E                     	if	1	;There are 3 active tblptr bytes
 17927  00358E  6AF8               	clrf	tblptru,c
 17928  003590  0E00               	movlw	low (__mediumconst shr (0+16))
 17929  003592  22F8               	addwfc	tblptru,f,c
 17930  003594                     	endif
 17931  003594  0008               	tblrd		*
 17932  003596  CFF5 F07D          	movff	tablat,_input	;volatile
 17933                           
 17934                           ;interruptHandler.c: 21: if(input == '*'){
 17935  00359A  0E2A               	movlw	42
 17936  00359C  187D               	xorwf	_input,w,c	;volatile
 17937  00359E  B4D8               	btfsc	status,2,c
 17938  0035A0  D00D               	goto	i2l9746
 17939  0035A2  D018               	goto	i2l9748
 17940  0035A4                     i2l9736:
 17941                           
 17942                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17943  0035A4  0E03               	movlw	3
 17944  0035A6  D007               	goto	L16
 17945  0035A8                     i2l9738:
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;interruptHandler.c: 27: machine_state = UI_state;
 17949  0035A8  0E00               	movlw	0
 17950  0035AA  0100               	movlb	0	; () banked
 17951  0035AC  6FFC               	movwf	_machine_state& (0+255),b
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;interruptHandler.c: 28: change_state_to_menu_start();
 17955  0035AE  EC67  F02A         	call	i2_change_state_to_menu_start	;wreg free
 17956                           
 17957                           ;interruptHandler.c: 29: break;
 17958  0035B2  D015               	goto	i2l9752
 17959  0035B4                     i2l9742:
 17960                           
 17961                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 17962  0035B4  0E02               	movlw	2
 17963  0035B6                     L16:
 17964  0035B6  0100               	movlb	0	; () banked
 17965  0035B8  6FFC               	movwf	_machine_state& (0+255),b
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;interruptHandler.c: 33: }
 17969                           
 17970                           ;interruptHandler.c: 32: break;
 17971  0035BA  D011               	goto	i2l9752
 17972  0035BC                     i2l9746:
 17973  0035BC  0100               	movlb	0	; () banked
 17974  0035BE  51FC               	movf	_machine_state& (0+255),w,b
 17975                           
 17976                           ; Switch size 1, requested type "space"
 17977                           ; Number of cases is 3, Range of values is 0 to 3
 17978                           ; switch strategies available:
 17979                           ; Name         Instructions Cycles
 17980                           ; simple_byte           10     6 (average)
 17981                           ;	Chosen strategy is simple_byte
 17982  0035C0  0A00               	xorlw	0	; case 0
 17983  0035C2  B4D8               	btfsc	status,2,c
 17984  0035C4  D7EF               	goto	i2l9736
 17985  0035C6  0A01               	xorlw	1	; case 1
 17986  0035C8  B4D8               	btfsc	status,2,c
 17987  0035CA  D7F4               	goto	i2l9742
 17988  0035CC  0A02               	xorlw	2	; case 3
 17989  0035CE  B4D8               	btfsc	status,2,c
 17990  0035D0  D7EB               	goto	i2l9738
 17991                           
 17992                           ; BSR set to: 0
 17993                           ;interruptHandler.c: 34: }
 17994  0035D2  D005               	goto	i2l9752
 17995  0035D4                     i2l9748:
 17996                           
 17997                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 17998  0035D4  0100               	movlb	0	; () banked
 17999  0035D6  51FC               	movf	_machine_state& (0+255),w,b
 18000  0035D8  B4D8               	btfsc	status,2,c
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;interruptHandler.c: 36: updateMenu();
 18004  0035DA  EC35  F014         	call	_updateMenu	;wreg free
 18005  0035DE                     i2l9752:
 18006                           
 18007                           ;interruptHandler.c: 37: }
 18008                           ;interruptHandler.c: 38: }
 18009                           ;interruptHandler.c: 41: if(TMR0IF){
 18010  0035DE  A4F2               	btfss	intcon,2,c	;volatile
 18011  0035E0  D00C               	goto	i2l9766
 18012                           
 18013                           ;interruptHandler.c: 42: TMR0IF = 0;
 18014  0035E2  94F2               	bcf	intcon,2,c	;volatile
 18015                           
 18016                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 18017  0035E4  0100               	movlb	0	; () banked
 18018  0035E6  05FC               	decf	_machine_state& (0+255),w,b
 18019  0035E8  A4D8               	btfss	status,2,c
 18020  0035EA  D007               	goto	i2l9766
 18021                           
 18022                           ; BSR set to: 0
 18023                           ;interruptHandler.c: 44: printSortTimer();
 18024  0035EC  ECF4  F016         	call	_printSortTimer	;wreg free
 18025                           
 18026                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 18027  0035F0  0E85               	movlw	133
 18028  0035F2  6ED7               	movwf	4055,c	;volatile
 18029                           
 18030                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 18031  0035F4  0EEE               	movlw	238
 18032  0035F6  6ED6               	movwf	4054,c	;volatile
 18033                           
 18034                           ;interruptHandler.c: 48: TMR0ON = 1;
 18035  0035F8  8ED5               	bsf	4053,7,c	;volatile
 18036  0035FA                     i2l9766:
 18037                           
 18038                           ;interruptHandler.c: 49: }
 18039                           ;interruptHandler.c: 50: }
 18040                           ;interruptHandler.c: 53: if(TMR1IF){
 18041  0035FA  A09E               	btfss	3998,0,c	;volatile
 18042  0035FC  D02A               	goto	i2l9794
 18043                           
 18044                           ;interruptHandler.c: 54: TMR1IF = 0;
 18045  0035FE  909E               	bcf	3998,0,c	;volatile
 18046                           
 18047                           ;interruptHandler.c: 55: TMR1ON = 0;
 18048  003600  90CD               	bcf	4045,0,c	;volatile
 18049                           
 18050                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 18051  003602  0100               	movlb	0	; () banked
 18052  003604  05FC               	decf	_machine_state& (0+255),w,b
 18053  003606  A4D8               	btfss	status,2,c
 18054  003608  D024               	goto	i2l9794
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;interruptHandler.c: 57: if(was_low_1){
 18058  00360A  5077               	movf	_was_low_1,w,c	;volatile
 18059  00360C  1078               	iorwf	_was_low_1+1,w,c	;volatile
 18060  00360E  B4D8               	btfsc	status,2,c
 18061  003610  D00A               	goto	i2l1009
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 18065  003612  828B               	bsf	3979,1,c	;volatile
 18066                           
 18067                           ; BSR set to: 0
 18068                           ;interruptHandler.c: 59: was_low_1 = 0;
 18069  003614  0E00               	movlw	0
 18070  003616  6E78               	movwf	_was_low_1+1,c	;volatile
 18071  003618  0E00               	movlw	0
 18072  00361A  6E77               	movwf	_was_low_1,c	;volatile
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 18076  00361C  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 18080  003620  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 18081                           
 18082                           ;interruptHandler.c: 62: }
 18083  003624  D00F               	goto	i2l9788
 18084  003626                     i2l1009:
 18085                           
 18086                           ; BSR set to: 0
 18087                           ;interruptHandler.c: 63: else{
 18088                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 18089  003626  928B               	bcf	3979,1,c	;volatile
 18090                           
 18091                           ; BSR set to: 0
 18092                           ;interruptHandler.c: 65: was_low_1 = 1;
 18093  003628  0E00               	movlw	0
 18094  00362A  6E78               	movwf	_was_low_1+1,c	;volatile
 18095  00362C  0E01               	movlw	1
 18096  00362E  6E77               	movwf	_was_low_1,c	;volatile
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 18100  003630  0100               	movlb	0	; () banked
 18101  003632  51DA               	movf	_servoTimes& (0+255),w,b
 18102  003634  0800               	sublw	0
 18103  003636  0F20               	addlw	32
 18104  003638  6ECF               	movwf	4047,c	;volatile
 18105                           
 18106                           ; BSR set to: 0
 18107                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 18108  00363A  0100               	movlb	0	; () banked
 18109  00363C  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 18110  00363E  0800               	sublw	0
 18111  003640  0F20               	addlw	32
 18112  003642  6ECE               	movwf	4046,c	;volatile
 18113  003644                     i2l9788:
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;interruptHandler.c: 68: }
 18117                           ;interruptHandler.c: 69: TMR1ON = 1;
 18118  003644  80CD               	bsf	4045,0,c	;volatile
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 18122  003646  0E0A               	movlw	10
 18123  003648  266D               	addwf	_servo_timer_counter,f,c	;volatile
 18124  00364A  0E00               	movlw	0
 18125  00364C  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 18126                           
 18127                           ; BSR set to: 0
 18128                           ;interruptHandler.c: 72: updateServoStates();
 18129  00364E  EC8B  F01C         	call	_updateServoStates	;wreg free
 18130  003652                     i2l9794:
 18131                           
 18132                           ;interruptHandler.c: 73: }
 18133                           ;interruptHandler.c: 74: }
 18134                           ;interruptHandler.c: 77: if(TMR2IF){
 18135  003652  A29E               	btfss	3998,1,c	;volatile
 18136  003654  D026               	goto	i2l9820
 18137                           
 18138                           ;interruptHandler.c: 80: TMR2IF = 0;
 18139  003656  929E               	bcf	3998,1,c	;volatile
 18140                           
 18141                           ;interruptHandler.c: 81: TMR2ON = 0;
 18142  003658  94CA               	bcf	4042,2,c	;volatile
 18143                           
 18144                           ;interruptHandler.c: 82: timer2_counter++;
 18145  00365A  4A73               	infsnz	_timer2_counter,f,c	;volatile
 18146  00365C  2A74               	incf	_timer2_counter+1,f,c	;volatile
 18147                           
 18148                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 18149  00365E  0100               	movlb	0	; () banked
 18150  003660  05FC               	decf	_machine_state& (0+255),w,b
 18151  003662  A4D8               	btfss	status,2,c
 18152  003664  D01E               	goto	i2l9820
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 18156  003666  5079               	movf	_was_low_2,w,c	;volatile
 18157  003668  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18158  00366A  B4D8               	btfsc	status,2,c
 18159  00366C  D00A               	goto	i2l9810
 18160                           
 18161                           ; BSR set to: 0
 18162  00366E  0E02               	movlw	2
 18163  003670  1873               	xorwf	_timer2_counter,w,c	;volatile
 18164  003672  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 18165  003674  A4D8               	btfss	status,2,c
 18166  003676  D005               	goto	i2l9810
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 18170  003678  868A               	bsf	3978,3,c	;volatile
 18171                           
 18172                           ; BSR set to: 0
 18173                           ;interruptHandler.c: 87: was_low_2 = 0;
 18174  00367A  0E00               	movlw	0
 18175  00367C  6E7A               	movwf	_was_low_2+1,c	;volatile
 18176  00367E  0E00               	movlw	0
 18177  003680  D008               	goto	L17
 18178  003682                     i2l9810:
 18179                           
 18180                           ; BSR set to: 0
 18181                           ;interruptHandler.c: 90: else if(!was_low_2){
 18182  003682  5079               	movf	_was_low_2,w,c	;volatile
 18183  003684  107A               	iorwf	_was_low_2+1,w,c	;volatile
 18184  003686  A4D8               	btfss	status,2,c
 18185  003688  D009               	goto	i2l9816
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 18189  00368A  968A               	bcf	3978,3,c	;volatile
 18190                           
 18191                           ; BSR set to: 0
 18192                           ;interruptHandler.c: 92: was_low_2 = 1;
 18193  00368C  0E00               	movlw	0
 18194  00368E  6E7A               	movwf	_was_low_2+1,c	;volatile
 18195  003690  0E01               	movlw	1
 18196  003692                     L17:
 18197  003692  6E79               	movwf	_was_low_2,c	;volatile
 18198                           
 18199                           ;interruptHandler.c: 93: timer2_counter = 0;
 18200  003694  0E00               	movlw	0
 18201  003696  6E74               	movwf	_timer2_counter+1,c	;volatile
 18202  003698  0E00               	movlw	0
 18203  00369A  6E73               	movwf	_timer2_counter,c	;volatile
 18204  00369C                     i2l9816:
 18205                           
 18206                           ; BSR set to: 0
 18207                           ;interruptHandler.c: 94: }
 18208                           ;interruptHandler.c: 95: updateArmState();
 18209  00369C  EC37  F028         	call	_updateArmState	;wreg free
 18210                           
 18211                           ;interruptHandler.c: 96: TMR2ON = 1;
 18212  0036A0  84CA               	bsf	4042,2,c	;volatile
 18213  0036A2                     i2l9820:
 18214                           
 18215                           ;interruptHandler.c: 97: }
 18216                           ;interruptHandler.c: 98: }
 18217                           ;interruptHandler.c: 101: if(TMR3IF){
 18218  0036A2  A2A1               	btfss	4001,1,c	;volatile
 18219  0036A4  D024               	goto	i2l1020
 18220                           
 18221                           ;interruptHandler.c: 102: TMR3IF = 0;
 18222  0036A6  92A1               	bcf	4001,1,c	;volatile
 18223                           
 18224                           ;interruptHandler.c: 103: TMR3ON = 0;
 18225  0036A8  90B1               	bcf	4017,0,c	;volatile
 18226                           
 18227                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 18228  0036AA  0100               	movlb	0	; () banked
 18229  0036AC  05FC               	decf	_machine_state& (0+255),w,b
 18230  0036AE  A4D8               	btfss	status,2,c
 18231  0036B0  D01E               	goto	i2l1020
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;interruptHandler.c: 105: if(was_low_3){
 18235  0036B2  507B               	movf	_was_low_3,w,c	;volatile
 18236  0036B4  107C               	iorwf	_was_low_3+1,w,c	;volatile
 18237  0036B6  B4D8               	btfsc	status,2,c
 18238  0036B8  D00A               	goto	i2l1018
 18239                           
 18240                           ; BSR set to: 0
 18241                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 18242  0036BA  848B               	bsf	3979,2,c	;volatile
 18243                           
 18244                           ; BSR set to: 0
 18245                           ;interruptHandler.c: 107: was_low_3 = 0;
 18246  0036BC  0E00               	movlw	0
 18247  0036BE  6E7C               	movwf	_was_low_3+1,c	;volatile
 18248  0036C0  0E00               	movlw	0
 18249  0036C2  6E7B               	movwf	_was_low_3,c	;volatile
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 18253  0036C4  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 18254                           
 18255                           ; BSR set to: 0
 18256                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 18257  0036C8  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 18258                           
 18259                           ;interruptHandler.c: 110: }
 18260  0036CC  D00F               	goto	i2l9842
 18261  0036CE                     i2l1018:
 18262                           
 18263                           ; BSR set to: 0
 18264                           ;interruptHandler.c: 111: else{
 18265                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 18266  0036CE  948B               	bcf	3979,2,c	;volatile
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;interruptHandler.c: 113: was_low_3 = 1;
 18270  0036D0  0E00               	movlw	0
 18271  0036D2  6E7C               	movwf	_was_low_3+1,c	;volatile
 18272  0036D4  0E01               	movlw	1
 18273  0036D6  6E7B               	movwf	_was_low_3,c	;volatile
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 18277  0036D8  0100               	movlb	0	; () banked
 18278  0036DA  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 18279  0036DC  0800               	sublw	0
 18280  0036DE  0F20               	addlw	32
 18281  0036E0  6EB3               	movwf	4019,c	;volatile
 18282                           
 18283                           ; BSR set to: 0
 18284                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 18285  0036E2  0100               	movlb	0	; () banked
 18286  0036E4  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 18287  0036E6  0800               	sublw	0
 18288  0036E8  0F20               	addlw	32
 18289  0036EA  6EB2               	movwf	4018,c	;volatile
 18290  0036EC                     i2l9842:
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;interruptHandler.c: 116: }
 18294                           ;interruptHandler.c: 117: TMR3ON = 1;
 18295  0036EC  80B1               	bsf	4017,0,c	;volatile
 18296  0036EE                     i2l1020:
 18297  0036EE  C05A  FFF5         	movff	??_handler+15,tablat
 18298  0036F2  C059  FFF8         	movff	??_handler+14,tblptru
 18299  0036F6  C058  FFF7         	movff	??_handler+13,tblptrh
 18300  0036FA  C057  FFF6         	movff	??_handler+12,tblptrl
 18301  0036FE  C056  FFF4         	movff	??_handler+11,prodh
 18302  003702  C055  FFF3         	movff	??_handler+10,prodl
 18303  003706  C054  FFDA         	movff	??_handler+9,fsr2h
 18304  00370A  C053  FFD9         	movff	??_handler+8,fsr2l
 18305  00370E  C052  FFE2         	movff	??_handler+7,fsr1h
 18306  003712  C051  FFE1         	movff	??_handler+6,fsr1l
 18307  003716  C050  FFEA         	movff	??_handler+5,fsr0h
 18308  00371A  C04F  FFE9         	movff	??_handler+4,fsr0l
 18309  00371E  C04E  FFFB         	movff	??_handler+3,pclatu
 18310  003722  C04D  FFFA         	movff	??_handler+2,pclath
 18311  003726  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 18312  003728  0011               	retfie		f
 18313  00372A                     __end_of_handler:
 18314                           	opt stack 0
 18315                           pclatu	equ	0xFFB
 18316                           pclath	equ	0xFFA
 18317                           tblptru	equ	0xFF8
 18318                           tblptrh	equ	0xFF7
 18319                           tblptrl	equ	0xFF6
 18320                           tablat	equ	0xFF5
 18321                           prodh	equ	0xFF4
 18322                           prodl	equ	0xFF3
 18323                           intcon	equ	0xFF2
 18324                           intcon2	equ	0xFF1
 18325                           intcon3	equ	0xFF0
 18326                           indf0	equ	0xFEF
 18327                           postinc0	equ	0xFEE
 18328                           fsr0h	equ	0xFEA
 18329                           fsr0l	equ	0xFE9
 18330                           wreg	equ	0xFE8
 18331                           postdec1	equ	0xFE5
 18332                           fsr1h	equ	0xFE2
 18333                           fsr1l	equ	0xFE1
 18334                           indf2	equ	0xFDF
 18335                           postinc2	equ	0xFDE
 18336                           postdec2	equ	0xFDD
 18337                           fsr2h	equ	0xFDA
 18338                           fsr2l	equ	0xFD9
 18339                           status	equ	0xFD8
 18340                           
 18341 ;; *************** function _updateServoStates *****************
 18342 ;; Defined at:
 18343 ;;		line 537 in file "sort.c"
 18344 ;; Parameters:    Size  Location     Type
 18345 ;;		None
 18346 ;; Auto vars:     Size  Location     Type
 18347 ;;		None
 18348 ;; Return value:  Size  Location     Type
 18349 ;;                  1    wreg      void 
 18350 ;; Registers used:
 18351 ;;		wreg, status,2, status,0, cstack
 18352 ;; Tracked objects:
 18353 ;;		On entry : 0/0
 18354 ;;		On exit  : 0/0
 18355 ;;		Unchanged: 0/0
 18356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18360 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18361 ;;Total ram usage:        2 bytes
 18362 ;; Hardware stack levels used:    1
 18363 ;; Hardware stack levels required when called:    1
 18364 ;; This function calls:
 18365 ;;		i2_updateServoPosition
 18366 ;; This function is called by:
 18367 ;;		_handler
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           	psect	text60
 18372  003916                     __ptext60:
 18373                           	opt stack 0
 18374  003916                     _updateServoStates:
 18375                           	opt stack 22
 18376                           
 18377                           ;sort.c: 539: if(servo_timer_counter >= servo_timer_target){
 18378                           
 18379                           ;incstack = 0
 18380  003916  506F               	movf	_servo_timer_target,w,c	;volatile
 18381  003918  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 18382  00391A  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 18383  00391C  0A80               	xorlw	128
 18384  00391E  6E09               	movwf	??_updateServoStates& (0+255),c
 18385  003920  5070               	movf	_servo_timer_target+1,w,c	;volatile
 18386  003922  0A80               	xorlw	128
 18387  003924  5809               	subwfb	??_updateServoStates& (0+255),w,c
 18388  003926  A0D8               	btfss	status,0,c
 18389  003928  0012               	return	
 18390                           
 18391                           ;sort.c: 541: if(f_panning_to_bin){
 18392  00392A  5061               	movf	_f_panning_to_bin,w,c	;volatile
 18393  00392C  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 18394  00392E  A4D8               	btfss	status,2,c
 18395  003930  D036               	goto	i2l9612
 18396  003932  D05F               	goto	i2l9616
 18397  003934                     i2l9586:
 18398                           
 18399                           ;sort.c: 545: updateServoPosition(1260, 3);
 18400  003934  0E04               	movlw	4
 18401  003936  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18402  003938  0EEC               	movlw	236
 18403  00393A  6E01               	movwf	i2updateServoPosition@time_us,c
 18404  00393C  0E00               	movlw	0
 18405  00393E  6E04               	movwf	i2updateServoPosition@timer+1,c
 18406  003940  0E03               	movlw	3
 18407  003942  6E03               	movwf	i2updateServoPosition@timer,c
 18408  003944  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18409  003948  D025               	goto	i2l9606
 18410  00394A                     i2l9590:
 18411                           
 18412                           ;sort.c: 547: servo_timer_target = 700;
 18413  00394A  0E02               	movlw	2
 18414  00394C  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18415  00394E  0EBC               	movlw	188
 18416  003950  6E6F               	movwf	_servo_timer_target,c	;volatile
 18417                           
 18418                           ;sort.c: 548: break;
 18419  003952  D04A               	goto	i2l9614
 18420  003954                     i2l9592:
 18421                           
 18422                           ;sort.c: 550: updateServoPosition(1260, 3);
 18423  003954  0E04               	movlw	4
 18424  003956  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18425  003958  0EEC               	movlw	236
 18426  00395A  6E01               	movwf	i2updateServoPosition@time_us,c
 18427  00395C  0E00               	movlw	0
 18428  00395E  6E04               	movwf	i2updateServoPosition@timer+1,c
 18429  003960  0E03               	movlw	3
 18430  003962  6E03               	movwf	i2updateServoPosition@timer,c
 18431  003964  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18432  003968  D015               	goto	i2l9606
 18433  00396A                     i2l9598:
 18434                           
 18435                           ;sort.c: 556: updateServoPosition(1390, 3);
 18436  00396A  0E05               	movlw	5
 18437  00396C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18438  00396E  0E6E               	movlw	110
 18439  003970  6E01               	movwf	i2updateServoPosition@time_us,c
 18440  003972  0E00               	movlw	0
 18441  003974  6E04               	movwf	i2updateServoPosition@timer+1,c
 18442  003976  0E03               	movlw	3
 18443  003978  6E03               	movwf	i2updateServoPosition@timer,c
 18444  00397A  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18445  00397E  D00A               	goto	i2l9606
 18446  003980                     i2l9604:
 18447                           
 18448                           ;sort.c: 561: updateServoPosition(1390, 3);
 18449  003980  0E05               	movlw	5
 18450  003982  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18451  003984  0E6E               	movlw	110
 18452  003986  6E01               	movwf	i2updateServoPosition@time_us,c
 18453  003988  0E00               	movlw	0
 18454  00398A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18455  00398C  0E03               	movlw	3
 18456  00398E  6E03               	movwf	i2updateServoPosition@timer,c
 18457  003990  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18458  003994                     i2l9606:
 18459                           
 18460                           ;sort.c: 562: servo_timer_counter = 0;
 18461  003994  0E00               	movlw	0
 18462  003996  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18463  003998  0E00               	movlw	0
 18464  00399A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18465  00399C  D7D6               	goto	i2l9590
 18466  00399E                     i2l9612:
 18467  00399E  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 18468  0039A2  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 18469                           
 18470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 18471                           ; Switch size 1, requested type "space"
 18472                           ; Number of cases is 4, Range of values is 1 to 9
 18473                           ; switch strategies available:
 18474                           ; Name         Instructions Cycles
 18475                           ; simple_byte           13     7 (average)
 18476                           ;	Chosen strategy is simple_byte
 18477  0039A6  500A               	movf	??_updateServoStates+1,w,c
 18478  0039A8  0A01               	xorlw	1	; case 1
 18479  0039AA  B4D8               	btfsc	status,2,c
 18480  0039AC  D00A               	goto	i2l10290
 18481  0039AE  0A02               	xorlw	2	; case 3
 18482  0039B0  B4D8               	btfsc	status,2,c
 18483  0039B2  D00C               	goto	i2l10292
 18484  0039B4  0A05               	xorlw	5	; case 6
 18485  0039B6  B4D8               	btfsc	status,2,c
 18486  0039B8  D00E               	goto	i2l10294
 18487  0039BA  0A0F               	xorlw	15	; case 9
 18488  0039BC  B4D8               	btfsc	status,2,c
 18489  0039BE  D010               	goto	i2l10296
 18490  0039C0  D013               	goto	i2l9614
 18491  0039C2                     i2l10290:
 18492                           
 18493                           ; Switch size 1, requested type "space"
 18494                           ; Number of cases is 1, Range of values is 244 to 244
 18495                           ; switch strategies available:
 18496                           ; Name         Instructions Cycles
 18497                           ; simple_byte            4     3 (average)
 18498                           ;	Chosen strategy is simple_byte
 18499  0039C2  5009               	movf	??_updateServoStates,w,c
 18500  0039C4  0AF4               	xorlw	244	; case 244
 18501  0039C6  B4D8               	btfsc	status,2,c
 18502  0039C8  D7B5               	goto	i2l9586
 18503  0039CA  D00E               	goto	i2l9614
 18504  0039CC                     i2l10292:
 18505                           
 18506                           ; Switch size 1, requested type "space"
 18507                           ; Number of cases is 1, Range of values is 82 to 82
 18508                           ; switch strategies available:
 18509                           ; Name         Instructions Cycles
 18510                           ; simple_byte            4     3 (average)
 18511                           ;	Chosen strategy is simple_byte
 18512  0039CC  5009               	movf	??_updateServoStates,w,c
 18513  0039CE  0A52               	xorlw	82	; case 82
 18514  0039D0  B4D8               	btfsc	status,2,c
 18515  0039D2  D7C0               	goto	i2l9592
 18516  0039D4  D009               	goto	i2l9614
 18517  0039D6                     i2l10294:
 18518                           
 18519                           ; Switch size 1, requested type "space"
 18520                           ; Number of cases is 1, Range of values is 134 to 134
 18521                           ; switch strategies available:
 18522                           ; Name         Instructions Cycles
 18523                           ; simple_byte            4     3 (average)
 18524                           ;	Chosen strategy is simple_byte
 18525  0039D6  5009               	movf	??_updateServoStates,w,c
 18526  0039D8  0A86               	xorlw	134	; case 134
 18527  0039DA  B4D8               	btfsc	status,2,c
 18528  0039DC  D7C6               	goto	i2l9598
 18529  0039DE  D004               	goto	i2l9614
 18530  0039E0                     i2l10296:
 18531                           
 18532                           ; Switch size 1, requested type "space"
 18533                           ; Number of cases is 1, Range of values is 96 to 96
 18534                           ; switch strategies available:
 18535                           ; Name         Instructions Cycles
 18536                           ; simple_byte            4     3 (average)
 18537                           ;	Chosen strategy is simple_byte
 18538  0039E0  5009               	movf	??_updateServoStates,w,c
 18539  0039E2  0A60               	xorlw	96	; case 96
 18540  0039E4  B4D8               	btfsc	status,2,c
 18541  0039E6  D7CC               	goto	i2l9604
 18542  0039E8                     i2l9614:
 18543                           
 18544                           ;sort.c: 568: f_panning_to_bin = 0;
 18545  0039E8  0E00               	movlw	0
 18546  0039EA  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 18547  0039EC  0E00               	movlw	0
 18548  0039EE  6E61               	movwf	_f_panning_to_bin,c	;volatile
 18549                           
 18550                           ;sort.c: 569: }
 18551  0039F0  0012               	return	
 18552  0039F2                     i2l9616:
 18553                           
 18554                           ;sort.c: 570: else if(pan_servo_state == 1200){
 18555  0039F2  0EB0               	movlw	176
 18556  0039F4  186B               	xorwf	_pan_servo_state,w,c	;volatile
 18557  0039F6  E15A               	bnz	i2l9646
 18558  0039F8  0E04               	movlw	4
 18559  0039FA  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 18560  0039FC  A4D8               	btfss	status,2,c
 18561  0039FE  D056               	goto	i2l9646
 18562                           
 18563                           ;sort.c: 572: servo_timer_counter = 0;
 18564  003A00  0E00               	movlw	0
 18565  003A02  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18566  003A04  0E00               	movlw	0
 18567  003A06  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18568                           
 18569                           ;sort.c: 573: }
 18570  003A08  0012               	return	
 18571  003A0A                     i2l9620:
 18572                           
 18573                           ;sort.c: 578: updateServoPosition(1050, 3);
 18574  003A0A  0E04               	movlw	4
 18575  003A0C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18576  003A0E  0E1A               	movlw	26
 18577  003A10  6E01               	movwf	i2updateServoPosition@time_us,c
 18578  003A12  0E00               	movlw	0
 18579  003A14  6E04               	movwf	i2updateServoPosition@timer+1,c
 18580  003A16  0E03               	movlw	3
 18581  003A18  6E03               	movwf	i2updateServoPosition@timer,c
 18582  003A1A  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18583                           
 18584                           ;sort.c: 579: servo_timer_counter = 0;
 18585  003A1E  0E00               	movlw	0
 18586  003A20  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18587  003A22  0E00               	movlw	0
 18588  003A24  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18589                           
 18590                           ;sort.c: 580: servo_timer_target = 750;
 18591  003A26  0E02               	movlw	2
 18592  003A28  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18593  003A2A  0EEE               	movlw	238
 18594  003A2C  6E6F               	movwf	_servo_timer_target,c	;volatile
 18595                           
 18596                           ;sort.c: 581: break;
 18597  003A2E  0012               	return	
 18598  003A30                     i2l9626:
 18599                           
 18600                           ;sort.c: 583: updateServoPosition(1050, 3);
 18601  003A30  0E04               	movlw	4
 18602  003A32  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18603  003A34  0E1A               	movlw	26
 18604  003A36  6E01               	movwf	i2updateServoPosition@time_us,c
 18605  003A38  0E00               	movlw	0
 18606  003A3A  6E04               	movwf	i2updateServoPosition@timer+1,c
 18607  003A3C  0E03               	movlw	3
 18608  003A3E  6E03               	movwf	i2updateServoPosition@timer,c
 18609  003A40  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18610                           
 18611                           ;sort.c: 584: servo_timer_counter = 0;
 18612  003A44  0E00               	movlw	0
 18613  003A46  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18614  003A48  0E00               	movlw	0
 18615  003A4A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18616                           
 18617                           ;sort.c: 585: servo_timer_target = 750;
 18618  003A4C  0E02               	movlw	2
 18619  003A4E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18620  003A50  0EEE               	movlw	238
 18621  003A52  6E6F               	movwf	_servo_timer_target,c	;volatile
 18622                           
 18623                           ;sort.c: 586: break;
 18624  003A54  0012               	return	
 18625  003A56                     i2l9632:
 18626                           
 18627                           ;sort.c: 589: updateServoPosition(1200, 1);
 18628  003A56  0E04               	movlw	4
 18629  003A58  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18630  003A5A  0EB0               	movlw	176
 18631  003A5C  6E01               	movwf	i2updateServoPosition@time_us,c
 18632  003A5E  0E00               	movlw	0
 18633  003A60  6E04               	movwf	i2updateServoPosition@timer+1,c
 18634  003A62  0E01               	movlw	1
 18635  003A64  6E03               	movwf	i2updateServoPosition@timer,c
 18636  003A66  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18637                           
 18638                           ;sort.c: 590: updateServoPosition(1050, 3);
 18639  003A6A  0E04               	movlw	4
 18640  003A6C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 18641  003A6E  0E1A               	movlw	26
 18642  003A70  6E01               	movwf	i2updateServoPosition@time_us,c
 18643  003A72  0E00               	movlw	0
 18644  003A74  6E04               	movwf	i2updateServoPosition@timer+1,c
 18645  003A76  0E03               	movlw	3
 18646  003A78  6E03               	movwf	i2updateServoPosition@timer,c
 18647  003A7A  ECD1  F025         	call	i2_updateServoPosition	;wreg free
 18648                           
 18649                           ;sort.c: 591: servo_timer_counter = 0;
 18650  003A7E  0E00               	movlw	0
 18651  003A80  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 18652  003A82  0E00               	movlw	0
 18653  003A84  6E6D               	movwf	_servo_timer_counter,c	;volatile
 18654                           
 18655                           ;sort.c: 592: servo_timer_target = 9999;
 18656  003A86  0E27               	movlw	39
 18657  003A88  6E70               	movwf	_servo_timer_target+1,c	;volatile
 18658  003A8A  0E0F               	movlw	15
 18659  003A8C  6E6F               	movwf	_servo_timer_target,c	;volatile
 18660                           
 18661                           ;sort.c: 594: f_can_distributed = 1;
 18662  003A8E  0E00               	movlw	0
 18663  003A90  0101               	movlb	1	; () banked
 18664  003A92  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 18665  003A94  0E01               	movlw	1
 18666  003A96  6F35               	movwf	_f_can_distributed& (0+255),b
 18667                           
 18668                           ; BSR set to: 1
 18669                           ;sort.c: 595: if(f_lastCan == 1){
 18670  003A98  0100               	movlb	0	; () banked
 18671  003A9A  05F0               	decf	_f_lastCan& (0+255),w,b
 18672  003A9C  0100               	movlb	0	; () banked
 18673  003A9E  11F1               	iorwf	(_f_lastCan+1)& (0+255),w,b
 18674  003AA0  A4D8               	btfss	status,2,c
 18675  003AA2  0012               	return	
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;sort.c: 596: machine_state = DoneSorting_state;
 18679  003AA4  0E02               	movlw	2
 18680  003AA6  0100               	movlb	0	; () banked
 18681  003AA8  6FFC               	movwf	_machine_state& (0+255),b
 18682                           
 18683                           ; BSR set to: 0
 18684                           ;sort.c: 602: }
 18685                           
 18686                           ; BSR set to: 0
 18687                           ;sort.c: 601: break;
 18688                           
 18689                           ;sort.c: 600: default:
 18690                           
 18691                           ; BSR set to: 0
 18692                           ;sort.c: 597: }
 18693                           ;sort.c: 598: break;
 18694  003AAA  0012               	return	
 18695  003AAC                     i2l9646:
 18696  003AAC  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 18697  003AB0  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 18698                           
 18699                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18700                           ; Switch size 1, requested type "space"
 18701                           ; Number of cases is 2, Range of values is 4 to 5
 18702                           ; switch strategies available:
 18703                           ; Name         Instructions Cycles
 18704                           ; simple_byte            7     4 (average)
 18705                           ;	Chosen strategy is simple_byte
 18706  003AB4  500A               	movf	??_updateServoStates+1,w,c
 18707  003AB6  0A04               	xorlw	4	; case 4
 18708  003AB8  B4D8               	btfsc	status,2,c
 18709  003ABA  D004               	goto	i2l10298
 18710  003ABC  0A01               	xorlw	1	; case 5
 18711  003ABE  A4D8               	btfss	status,2,c
 18712  003AC0  0012               	return	
 18713  003AC2  D008               	goto	i2l10300
 18714  003AC4                     i2l10298:
 18715                           
 18716                           ; Switch size 1, requested type "space"
 18717                           ; Number of cases is 2, Range of values is 26 to 236
 18718                           ; switch strategies available:
 18719                           ; Name         Instructions Cycles
 18720                           ; simple_byte            7     4 (average)
 18721                           ;	Chosen strategy is simple_byte
 18722  003AC4  5009               	movf	??_updateServoStates,w,c
 18723  003AC6  0A1A               	xorlw	26	; case 26
 18724  003AC8  B4D8               	btfsc	status,2,c
 18725  003ACA  D7C5               	goto	i2l9632
 18726  003ACC  0AF6               	xorlw	246	; case 236
 18727  003ACE  A4D8               	btfss	status,2,c
 18728  003AD0  0012               	return	
 18729  003AD2  D79B               	goto	i2l9620
 18730  003AD4                     i2l10300:
 18731                           
 18732                           ; Switch size 1, requested type "space"
 18733                           ; Number of cases is 1, Range of values is 110 to 110
 18734                           ; switch strategies available:
 18735                           ; Name         Instructions Cycles
 18736                           ; simple_byte            4     3 (average)
 18737                           ;	Chosen strategy is simple_byte
 18738  003AD4  5009               	movf	??_updateServoStates,w,c
 18739  003AD6  0A6E               	xorlw	110	; case 110
 18740  003AD8  A4D8               	btfss	status,2,c
 18741  003ADA  0012               	return	
 18742  003ADC  D7A9               	goto	i2l9626
 18743  003ADE                     __end_of_updateServoStates:
 18744                           	opt stack 0
 18745                           pclatu	equ	0xFFB
 18746                           pclath	equ	0xFFA
 18747                           tblptru	equ	0xFF8
 18748                           tblptrh	equ	0xFF7
 18749                           tblptrl	equ	0xFF6
 18750                           tablat	equ	0xFF5
 18751                           prodh	equ	0xFF4
 18752                           prodl	equ	0xFF3
 18753                           intcon	equ	0xFF2
 18754                           intcon2	equ	0xFF1
 18755                           intcon3	equ	0xFF0
 18756                           indf0	equ	0xFEF
 18757                           postinc0	equ	0xFEE
 18758                           fsr0h	equ	0xFEA
 18759                           fsr0l	equ	0xFE9
 18760                           wreg	equ	0xFE8
 18761                           postdec1	equ	0xFE5
 18762                           fsr1h	equ	0xFE2
 18763                           fsr1l	equ	0xFE1
 18764                           indf2	equ	0xFDF
 18765                           postinc2	equ	0xFDE
 18766                           postdec2	equ	0xFDD
 18767                           fsr2h	equ	0xFDA
 18768                           fsr2l	equ	0xFD9
 18769                           status	equ	0xFD8
 18770                           
 18771 ;; *************** function i2_updateServoPosition *****************
 18772 ;; Defined at:
 18773 ;;		line 522 in file "sort.c"
 18774 ;; Parameters:    Size  Location     Type
 18775 ;;  time_us         2    0[COMRAM] int 
 18776 ;;  timer           2    2[COMRAM] int 
 18777 ;; Auto vars:     Size  Location     Type
 18778 ;;  updateServoP    2    6[COMRAM] unsigned int 
 18779 ;; Return value:  Size  Location     Type
 18780 ;;                  1    wreg      void 
 18781 ;; Registers used:
 18782 ;;		wreg, status,2, status,0
 18783 ;; Tracked objects:
 18784 ;;		On entry : 0/0
 18785 ;;		On exit  : 0/0
 18786 ;;		Unchanged: 0/0
 18787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18788 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18790 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18791 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18792 ;;Total ram usage:        8 bytes
 18793 ;; Hardware stack levels used:    1
 18794 ;; This function calls:
 18795 ;;		Nothing
 18796 ;; This function is called by:
 18797 ;;		_updateServoStates
 18798 ;; This function uses a non-reentrant model
 18799 ;;
 18800                           
 18801                           	psect	text61
 18802  004BA2                     __ptext61:
 18803                           	opt stack 0
 18804  004BA2                     i2_updateServoPosition:
 18805                           	opt stack 22
 18806                           
 18807                           ;sort.c: 523: unsigned int my_time = 65535 - time_us;
 18808                           
 18809                           ;incstack = 0
 18810  004BA2  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18811  004BA6  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18812  004BAA  1E05               	comf	??i2_updateServoPosition,f,c
 18813  004BAC  1E06               	comf	??i2_updateServoPosition+1,f,c
 18814  004BAE  4A05               	infsnz	??i2_updateServoPosition,f,c
 18815  004BB0  2A06               	incf	??i2_updateServoPosition+1,f,c
 18816  004BB2  0EFF               	movlw	255
 18817  004BB4  2405               	addwf	??i2_updateServoPosition,w,c
 18818  004BB6  6E07               	movwf	i2updateServoPosition@my_time,c
 18819  004BB8  0EFF               	movlw	255
 18820  004BBA  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18821  004BBC  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18822                           
 18823                           ;sort.c: 524: switch(timer){
 18824  004BBE  D019               	goto	i2l8806
 18825  004BC0                     i2l8800:
 18826                           
 18827                           ;sort.c: 526: servoTimes[0] = my_time >> 8;
 18828  004BC0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18829  004BC2  0100               	movlb	0	; () banked
 18830  004BC4  6FDA               	movwf	_servoTimes& (0+255),b
 18831  004BC6  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18832                           
 18833                           ;sort.c: 527: servoTimes[1] = my_time & 0xFF;
 18834  004BC8  5007               	movf	i2updateServoPosition@my_time,w,c
 18835  004BCA  0100               	movlb	0	; () banked
 18836  004BCC  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18837  004BCE  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;sort.c: 529: pan_servo_state = time_us;
 18841  004BD0  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18842  004BD4  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18843  004BD8                     i2l890:
 18844                           
 18845                           ;sort.c: 531: servoTimes[2] = my_time >> 8;
 18846  004BD8  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18847  004BDA  0100               	movlb	0	; () banked
 18848  004BDC  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18849  004BDE  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18850                           
 18851                           ;sort.c: 532: servoTimes[3] = my_time & 0xFF;
 18852  004BE0  5007               	movf	i2updateServoPosition@my_time,w,c
 18853  004BE2  0100               	movlb	0	; () banked
 18854  004BE4  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18855  004BE6  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18856                           
 18857                           ; BSR set to: 0
 18858                           ;sort.c: 534: tilt_servo_state = time_us;
 18859  004BE8  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18860  004BEC  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18861                           
 18862                           ;sort.c: 535: }
 18863  004BF0  0012               	return	
 18864  004BF2                     i2l8806:
 18865  004BF2  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18866  004BF6  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18867                           
 18868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18869                           ; Switch size 1, requested type "space"
 18870                           ; Number of cases is 1, Range of values is 0 to 0
 18871                           ; switch strategies available:
 18872                           ; Name         Instructions Cycles
 18873                           ; simple_byte            4     3 (average)
 18874                           ;	Chosen strategy is simple_byte
 18875  004BFA  5006               	movf	??i2_updateServoPosition+1,w,c
 18876  004BFC  0A00               	xorlw	0	; case 0
 18877  004BFE  A4D8               	btfss	status,2,c
 18878  004C00  0012               	return	
 18879                           
 18880                           ; Switch size 1, requested type "space"
 18881                           ; Number of cases is 2, Range of values is 1 to 3
 18882                           ; switch strategies available:
 18883                           ; Name         Instructions Cycles
 18884                           ; simple_byte            7     4 (average)
 18885                           ;	Chosen strategy is simple_byte
 18886  004C02  5005               	movf	??i2_updateServoPosition,w,c
 18887  004C04  0A01               	xorlw	1	; case 1
 18888  004C06  B4D8               	btfsc	status,2,c
 18889  004C08  D7DB               	goto	i2l8800
 18890  004C0A  0A02               	xorlw	2	; case 3
 18891  004C0C  A4D8               	btfss	status,2,c
 18892  004C0E  0012               	return	
 18893  004C10  D7E3               	goto	i2l890
 18894  004C12                     __end_ofi2_updateServoPosition:
 18895                           	opt stack 0
 18896                           pclatu	equ	0xFFB
 18897                           pclath	equ	0xFFA
 18898                           tblptru	equ	0xFF8
 18899                           tblptrh	equ	0xFF7
 18900                           tblptrl	equ	0xFF6
 18901                           tablat	equ	0xFF5
 18902                           prodh	equ	0xFF4
 18903                           prodl	equ	0xFF3
 18904                           intcon	equ	0xFF2
 18905                           intcon2	equ	0xFF1
 18906                           intcon3	equ	0xFF0
 18907                           indf0	equ	0xFEF
 18908                           postinc0	equ	0xFEE
 18909                           fsr0h	equ	0xFEA
 18910                           fsr0l	equ	0xFE9
 18911                           wreg	equ	0xFE8
 18912                           postdec1	equ	0xFE5
 18913                           fsr1h	equ	0xFE2
 18914                           fsr1l	equ	0xFE1
 18915                           indf2	equ	0xFDF
 18916                           postinc2	equ	0xFDE
 18917                           postdec2	equ	0xFDD
 18918                           fsr2h	equ	0xFDA
 18919                           fsr2l	equ	0xFD9
 18920                           status	equ	0xFD8
 18921                           
 18922 ;; *************** function _updateMenu *****************
 18923 ;; Defined at:
 18924 ;;		line 216 in file "UI.c"
 18925 ;; Parameters:    Size  Location     Type
 18926 ;;		None
 18927 ;; Auto vars:     Size  Location     Type
 18928 ;;		None
 18929 ;; Return value:  Size  Location     Type
 18930 ;;                  1    wreg      void 
 18931 ;; Registers used:
 18932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18933 ;; Tracked objects:
 18934 ;;		On entry : 0/0
 18935 ;;		On exit  : 0/0
 18936 ;;		Unchanged: 0/0
 18937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18942 ;;Total ram usage:        2 bytes
 18943 ;; Hardware stack levels used:    1
 18944 ;; Hardware stack levels required when called:    5
 18945 ;; This function calls:
 18946 ;;		_change_state_to_logs_11
 18947 ;;		_change_state_to_logs_12
 18948 ;;		_change_state_to_logs_22
 18949 ;;		_change_state_to_logs_23
 18950 ;;		_change_state_to_logs_33
 18951 ;;		_change_state_to_logs_34
 18952 ;;		_change_state_to_menu_11
 18953 ;;		_change_state_to_menu_23
 18954 ;;		_dispLogs
 18955 ;;		_inputHandler
 18956 ;;		i2_change_state_to_menu_12
 18957 ;;		i2_change_state_to_menu_22
 18958 ;;		i2_change_state_to_menu_start
 18959 ;; This function is called by:
 18960 ;;		_handler
 18961 ;; This function uses a non-reentrant model
 18962 ;;
 18963                           
 18964                           	psect	text62
 18965  00286A                     __ptext62:
 18966                           	opt stack 0
 18967  00286A                     _updateMenu:
 18968                           	opt stack 18
 18969                           
 18970                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 18971                           
 18972                           ;incstack = 0
 18973  00286A  0E00               	movlw	0
 18974  00286C  6E76               	movwf	_up+1,c
 18975  00286E  0E00               	movlw	0
 18976  002870  6E75               	movwf	_up,c
 18977  002872  0E00               	movlw	0
 18978  002874  6E5E               	movwf	_down+1,c
 18979  002876  0E00               	movlw	0
 18980  002878  6E5D               	movwf	_down,c
 18981  00287A  0E00               	movlw	0
 18982  00287C  6E60               	movwf	_enter+1,c
 18983  00287E  0E00               	movlw	0
 18984  002880  6E5F               	movwf	_enter,c
 18985  002882  0E00               	movlw	0
 18986  002884  6E5C               	movwf	_back+1,c
 18987  002886  0E00               	movlw	0
 18988  002888  6E5B               	movwf	_back,c
 18989                           
 18990                           ;UI.c: 218: (INTCONbits.GIE = 0);
 18991  00288A  9EF2               	bcf	intcon,7,c	;volatile
 18992                           
 18993                           ;UI.c: 220: if (inputHandler()
 18994                           ;UI.c: 223: ){
 18995  00288C  EC95  F01B         	call	_inputHandler	;wreg free
 18996  002890  502A               	movf	?_inputHandler,w,c
 18997  002892  102B               	iorwf	?_inputHandler+1,w,c
 18998  002894  A4D8               	btfss	status,2,c
 18999  002896  D112               	goto	i2l9340
 19000  002898  D146               	goto	i2l263
 19001  00289A                     i2l9192:
 19002                           
 19003                           ;UI.c: 227: change_state_to_menu_11();
 19004  00289A  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 19005                           
 19006                           ;UI.c: 228: break;
 19007  00289E  D143               	goto	i2l263
 19008  0028A0                     i2l9194:
 19009                           
 19010                           ;UI.c: 231: if(up){
 19011  0028A0  5075               	movf	_up,w,c
 19012  0028A2  1076               	iorwf	_up+1,w,c
 19013  0028A4  B4D8               	btfsc	status,2,c
 19014  0028A6  D003               	goto	i2l9198
 19015                           
 19016                           ;UI.c: 232: change_state_to_menu_23();
 19017  0028A8  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19018                           
 19019                           ;UI.c: 233: }
 19020  0028AC  D13C               	goto	i2l263
 19021  0028AE                     i2l9198:
 19022                           
 19023                           ;UI.c: 234: else if(down){
 19024  0028AE  505D               	movf	_down,w,c
 19025  0028B0  105E               	iorwf	_down+1,w,c
 19026  0028B2  B4D8               	btfsc	status,2,c
 19027  0028B4  D003               	goto	i2l9202
 19028                           
 19029                           ;UI.c: 235: change_state_to_menu_12();
 19030  0028B6  EC24  F029         	call	i2_change_state_to_menu_12	;wreg free
 19031                           
 19032                           ;UI.c: 236: }
 19033  0028BA  D135               	goto	i2l263
 19034  0028BC                     i2l9202:
 19035                           
 19036                           ;UI.c: 237: else if(enter){
 19037  0028BC  505F               	movf	_enter,w,c
 19038  0028BE  1060               	iorwf	_enter+1,w,c
 19039  0028C0  B4D8               	btfsc	status,2,c
 19040  0028C2  D131               	goto	i2l263
 19041                           
 19042                           ;UI.c: 238: change_state_to_menu_start();
 19043  0028C4  EC67  F02A         	call	i2_change_state_to_menu_start	;wreg free
 19044                           
 19045                           ;UI.c: 239: }
 19046                           ;UI.c: 240: break;
 19047  0028C8  D12E               	goto	i2l263
 19048  0028CA                     i2l9206:
 19049                           
 19050                           ;UI.c: 243: if(up){
 19051  0028CA  5075               	movf	_up,w,c
 19052  0028CC  1076               	iorwf	_up+1,w,c
 19053  0028CE  B4D8               	btfsc	status,2,c
 19054  0028D0  D003               	goto	i2l9210
 19055                           
 19056                           ;UI.c: 244: change_state_to_menu_11();
 19057  0028D2  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 19058                           
 19059                           ;UI.c: 245: }
 19060  0028D6  D127               	goto	i2l263
 19061  0028D8                     i2l9210:
 19062                           
 19063                           ;UI.c: 246: else if(down){
 19064  0028D8  505D               	movf	_down,w,c
 19065  0028DA  105E               	iorwf	_down+1,w,c
 19066  0028DC  B4D8               	btfsc	status,2,c
 19067  0028DE  D011               	goto	i2l9226
 19068                           
 19069                           ;UI.c: 247: change_state_to_menu_23();
 19070  0028E0  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19071                           
 19072                           ;UI.c: 248: }
 19073  0028E4  D120               	goto	i2l263
 19074  0028E6                     i2l9218:
 19075                           
 19076                           ;UI.c: 255: if(up){
 19077  0028E6  5075               	movf	_up,w,c
 19078  0028E8  1076               	iorwf	_up+1,w,c
 19079  0028EA  B4D8               	btfsc	status,2,c
 19080  0028EC  D003               	goto	i2l9222
 19081                           
 19082                           ;UI.c: 256: change_state_to_menu_11();
 19083  0028EE  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 19084                           
 19085                           ;UI.c: 257: }
 19086  0028F2  D119               	goto	i2l263
 19087  0028F4                     i2l9222:
 19088                           
 19089                           ;UI.c: 258: else if(down){
 19090  0028F4  505D               	movf	_down,w,c
 19091  0028F6  105E               	iorwf	_down+1,w,c
 19092  0028F8  B4D8               	btfsc	status,2,c
 19093  0028FA  D003               	goto	i2l9226
 19094                           
 19095                           ;UI.c: 259: change_state_to_menu_23();
 19096  0028FC  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19097                           
 19098                           ;UI.c: 260: }
 19099  002900  D112               	goto	i2l263
 19100  002902                     i2l9226:
 19101                           
 19102                           ;UI.c: 261: else if(enter){
 19103  002902  505F               	movf	_enter,w,c
 19104  002904  1060               	iorwf	_enter+1,w,c
 19105  002906  B4D8               	btfsc	status,2,c
 19106  002908  D10E               	goto	i2l263
 19107                           
 19108                           ;UI.c: 262: machine_state = Sorting_state;
 19109  00290A  0E01               	movlw	1
 19110  00290C  0100               	movlb	0	; () banked
 19111  00290E  6FFC               	movwf	_machine_state& (0+255),b
 19112                           
 19113                           ; BSR set to: 0
 19114                           ;UI.c: 263: }
 19115                           ;UI.c: 264: break;
 19116                           
 19117                           ; BSR set to: 0
 19118                           
 19119                           ; BSR set to: 0
 19120  002910  D10A               	goto	i2l263
 19121  002912                     i2l9230:
 19122                           
 19123                           ;UI.c: 267: if(up){
 19124  002912  5075               	movf	_up,w,c
 19125  002914  1076               	iorwf	_up+1,w,c
 19126  002916  B4D8               	btfsc	status,2,c
 19127  002918  D003               	goto	i2l9234
 19128                           
 19129                           ;UI.c: 268: change_state_to_menu_22();
 19130  00291A  EC0C  F029         	call	i2_change_state_to_menu_22	;wreg free
 19131                           
 19132                           ;UI.c: 269: }
 19133  00291E  D103               	goto	i2l263
 19134  002920                     i2l9234:
 19135                           
 19136                           ;UI.c: 270: else if(down){
 19137  002920  505D               	movf	_down,w,c
 19138  002922  105E               	iorwf	_down+1,w,c
 19139  002924  B4D8               	btfsc	status,2,c
 19140  002926  D003               	goto	i2l9238
 19141                           
 19142                           ;UI.c: 271: change_state_to_menu_11();
 19143  002928  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 19144                           
 19145                           ;UI.c: 272: }
 19146  00292C  D0FC               	goto	i2l263
 19147  00292E                     i2l9238:
 19148                           
 19149                           ;UI.c: 273: else if(enter){
 19150  00292E  505F               	movf	_enter,w,c
 19151  002930  1060               	iorwf	_enter+1,w,c
 19152  002932  B4D8               	btfsc	status,2,c
 19153  002934  D0F8               	goto	i2l263
 19154                           
 19155                           ;UI.c: 274: change_state_to_logs_11();
 19156  002936  ECCC  F029         	call	_change_state_to_logs_11	;wreg free
 19157                           
 19158                           ;UI.c: 275: }
 19159                           ;UI.c: 276: break;
 19160  00293A  D0F5               	goto	i2l263
 19161  00293C                     i2l9242:
 19162                           
 19163                           ;UI.c: 279: if(up){
 19164  00293C  5075               	movf	_up,w,c
 19165  00293E  1076               	iorwf	_up+1,w,c
 19166  002940  B4D8               	btfsc	status,2,c
 19167  002942  D003               	goto	i2l9246
 19168                           
 19169                           ;UI.c: 280: change_state_to_logs_34();
 19170  002944  EC6C  F029         	call	_change_state_to_logs_34	;wreg free
 19171                           
 19172                           ;UI.c: 281: }
 19173  002948  D0EE               	goto	i2l263
 19174  00294A                     i2l9246:
 19175                           
 19176                           ;UI.c: 282: else if(down){
 19177  00294A  505D               	movf	_down,w,c
 19178  00294C  105E               	iorwf	_down+1,w,c
 19179  00294E  B4D8               	btfsc	status,2,c
 19180  002950  D003               	goto	i2l9250
 19181                           
 19182                           ;UI.c: 283: change_state_to_logs_12();
 19183  002952  ECB4  F029         	call	_change_state_to_logs_12	;wreg free
 19184                           
 19185                           ;UI.c: 284: }
 19186  002956  D0E7               	goto	i2l263
 19187  002958                     i2l9250:
 19188                           
 19189                           ;UI.c: 285: else if(enter){
 19190  002958  505F               	movf	_enter,w,c
 19191  00295A  1060               	iorwf	_enter+1,w,c
 19192  00295C  B4D8               	btfsc	status,2,c
 19193  00295E  D007               	goto	i2l9254
 19194                           
 19195                           ;UI.c: 286: dispLogs(1);
 19196  002960  0E00               	movlw	0
 19197  002962  6E13               	movwf	dispLogs@myLog+1,c
 19198  002964  0E01               	movlw	1
 19199  002966  6E12               	movwf	dispLogs@myLog,c
 19200  002968  ECA1  F02A         	call	_dispLogs	;wreg free
 19201                           
 19202                           ;UI.c: 287: }
 19203  00296C  D0DC               	goto	i2l263
 19204  00296E                     i2l9254:
 19205                           
 19206                           ;UI.c: 288: else if(back){
 19207  00296E  505B               	movf	_back,w,c
 19208  002970  105C               	iorwf	_back+1,w,c
 19209  002972  B4D8               	btfsc	status,2,c
 19210  002974  D0D8               	goto	i2l263
 19211                           
 19212                           ;UI.c: 289: change_state_to_menu_23();
 19213  002976  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19214                           
 19215                           ;UI.c: 290: }
 19216                           ;UI.c: 291: break;
 19217  00297A  D0D5               	goto	i2l263
 19218  00297C                     i2l9258:
 19219                           
 19220                           ;UI.c: 294: if(up){
 19221  00297C  5075               	movf	_up,w,c
 19222  00297E  1076               	iorwf	_up+1,w,c
 19223  002980  B4D8               	btfsc	status,2,c
 19224  002982  D003               	goto	i2l9262
 19225                           
 19226                           ;UI.c: 295: change_state_to_logs_11();
 19227  002984  ECCC  F029         	call	_change_state_to_logs_11	;wreg free
 19228                           
 19229                           ;UI.c: 296: }
 19230  002988  D0CE               	goto	i2l263
 19231  00298A                     i2l9262:
 19232                           
 19233                           ;UI.c: 297: else if(down){
 19234  00298A  505D               	movf	_down,w,c
 19235  00298C  105E               	iorwf	_down+1,w,c
 19236  00298E  B4D8               	btfsc	status,2,c
 19237  002990  D003               	goto	i2l9266
 19238                           
 19239                           ;UI.c: 298: change_state_to_logs_23();
 19240  002992  ECFB  F029         	call	_change_state_to_logs_23	;wreg free
 19241                           
 19242                           ;UI.c: 299: }
 19243  002996  D0C7               	goto	i2l263
 19244  002998                     i2l9266:
 19245                           
 19246                           ;UI.c: 300: else if(enter){
 19247  002998  505F               	movf	_enter,w,c
 19248  00299A  1060               	iorwf	_enter+1,w,c
 19249  00299C  B4D8               	btfsc	status,2,c
 19250  00299E  D007               	goto	i2l9270
 19251                           
 19252                           ;UI.c: 301: dispLogs(2);
 19253  0029A0  0E00               	movlw	0
 19254  0029A2  6E13               	movwf	dispLogs@myLog+1,c
 19255  0029A4  0E02               	movlw	2
 19256  0029A6  6E12               	movwf	dispLogs@myLog,c
 19257  0029A8  ECA1  F02A         	call	_dispLogs	;wreg free
 19258                           
 19259                           ;UI.c: 302: }
 19260  0029AC  D0BC               	goto	i2l263
 19261  0029AE                     i2l9270:
 19262                           
 19263                           ;UI.c: 303: else if(back){
 19264  0029AE  505B               	movf	_back,w,c
 19265  0029B0  105C               	iorwf	_back+1,w,c
 19266  0029B2  B4D8               	btfsc	status,2,c
 19267  0029B4  D0B8               	goto	i2l263
 19268                           
 19269                           ;UI.c: 304: change_state_to_menu_23();
 19270  0029B6  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19271                           
 19272                           ;UI.c: 305: }
 19273                           ;UI.c: 306: break;
 19274  0029BA  D0B5               	goto	i2l263
 19275  0029BC                     i2l9274:
 19276                           
 19277                           ;UI.c: 309: if(up){
 19278  0029BC  5075               	movf	_up,w,c
 19279  0029BE  1076               	iorwf	_up+1,w,c
 19280  0029C0  B4D8               	btfsc	status,2,c
 19281  0029C2  D003               	goto	i2l9278
 19282                           
 19283                           ;UI.c: 310: change_state_to_logs_11();
 19284  0029C4  ECCC  F029         	call	_change_state_to_logs_11	;wreg free
 19285                           
 19286                           ;UI.c: 311: }
 19287  0029C8  D0AE               	goto	i2l263
 19288  0029CA                     i2l9278:
 19289                           
 19290                           ;UI.c: 312: else if(down){
 19291  0029CA  505D               	movf	_down,w,c
 19292  0029CC  105E               	iorwf	_down+1,w,c
 19293  0029CE  B4D8               	btfsc	status,2,c
 19294  0029D0  D003               	goto	i2l9282
 19295                           
 19296                           ;UI.c: 313: change_state_to_logs_23();
 19297  0029D2  ECFB  F029         	call	_change_state_to_logs_23	;wreg free
 19298                           
 19299                           ;UI.c: 314: }
 19300  0029D6  D0A7               	goto	i2l263
 19301  0029D8                     i2l9282:
 19302                           
 19303                           ;UI.c: 315: else if(enter){
 19304  0029D8  505F               	movf	_enter,w,c
 19305  0029DA  1060               	iorwf	_enter+1,w,c
 19306  0029DC  B4D8               	btfsc	status,2,c
 19307  0029DE  D007               	goto	i2l9286
 19308                           
 19309                           ;UI.c: 316: dispLogs(2);
 19310  0029E0  0E00               	movlw	0
 19311  0029E2  6E13               	movwf	dispLogs@myLog+1,c
 19312  0029E4  0E02               	movlw	2
 19313  0029E6  6E12               	movwf	dispLogs@myLog,c
 19314  0029E8  ECA1  F02A         	call	_dispLogs	;wreg free
 19315                           
 19316                           ;UI.c: 317: }
 19317  0029EC  D09C               	goto	i2l263
 19318  0029EE                     i2l9286:
 19319                           
 19320                           ;UI.c: 318: else if(back){
 19321  0029EE  505B               	movf	_back,w,c
 19322  0029F0  105C               	iorwf	_back+1,w,c
 19323  0029F2  B4D8               	btfsc	status,2,c
 19324  0029F4  D098               	goto	i2l263
 19325                           
 19326                           ;UI.c: 319: change_state_to_menu_23();
 19327  0029F6  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19328                           
 19329                           ;UI.c: 320: }
 19330                           ;UI.c: 321: break;
 19331  0029FA  D095               	goto	i2l263
 19332  0029FC                     i2l9290:
 19333                           
 19334                           ;UI.c: 324: if(up){
 19335  0029FC  5075               	movf	_up,w,c
 19336  0029FE  1076               	iorwf	_up+1,w,c
 19337  002A00  B4D8               	btfsc	status,2,c
 19338  002A02  D003               	goto	i2l9294
 19339                           
 19340                           ;UI.c: 325: change_state_to_logs_22();
 19341  002A04  EC9C  F029         	call	_change_state_to_logs_22	;wreg free
 19342                           
 19343                           ;UI.c: 326: }
 19344  002A08  D08E               	goto	i2l263
 19345  002A0A                     i2l9294:
 19346                           
 19347                           ;UI.c: 327: else if(down){
 19348  002A0A  505D               	movf	_down,w,c
 19349  002A0C  105E               	iorwf	_down+1,w,c
 19350  002A0E  B4D8               	btfsc	status,2,c
 19351  002A10  D003               	goto	i2l9298
 19352                           
 19353                           ;UI.c: 328: change_state_to_logs_34();
 19354  002A12  EC6C  F029         	call	_change_state_to_logs_34	;wreg free
 19355                           
 19356                           ;UI.c: 329: }
 19357  002A16  D087               	goto	i2l263
 19358  002A18                     i2l9298:
 19359                           
 19360                           ;UI.c: 330: else if(enter){
 19361  002A18  505F               	movf	_enter,w,c
 19362  002A1A  1060               	iorwf	_enter+1,w,c
 19363  002A1C  B4D8               	btfsc	status,2,c
 19364  002A1E  D007               	goto	i2l9302
 19365                           
 19366                           ;UI.c: 331: dispLogs(3);
 19367  002A20  0E00               	movlw	0
 19368  002A22  6E13               	movwf	dispLogs@myLog+1,c
 19369  002A24  0E03               	movlw	3
 19370  002A26  6E12               	movwf	dispLogs@myLog,c
 19371  002A28  ECA1  F02A         	call	_dispLogs	;wreg free
 19372                           
 19373                           ;UI.c: 332: }
 19374  002A2C  D07C               	goto	i2l263
 19375  002A2E                     i2l9302:
 19376                           
 19377                           ;UI.c: 333: else if(back){
 19378  002A2E  505B               	movf	_back,w,c
 19379  002A30  105C               	iorwf	_back+1,w,c
 19380  002A32  B4D8               	btfsc	status,2,c
 19381  002A34  D078               	goto	i2l263
 19382                           
 19383                           ;UI.c: 334: change_state_to_menu_23();
 19384  002A36  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19385                           
 19386                           ;UI.c: 335: }
 19387                           ;UI.c: 336: break;
 19388  002A3A  D075               	goto	i2l263
 19389  002A3C                     i2l9306:
 19390                           
 19391                           ;UI.c: 339: if(up){
 19392  002A3C  5075               	movf	_up,w,c
 19393  002A3E  1076               	iorwf	_up+1,w,c
 19394  002A40  B4D8               	btfsc	status,2,c
 19395  002A42  D003               	goto	i2l9310
 19396                           
 19397                           ;UI.c: 340: change_state_to_logs_22();
 19398  002A44  EC9C  F029         	call	_change_state_to_logs_22	;wreg free
 19399                           
 19400                           ;UI.c: 341: }
 19401  002A48  D06E               	goto	i2l263
 19402  002A4A                     i2l9310:
 19403                           
 19404                           ;UI.c: 342: else if(down){
 19405  002A4A  505D               	movf	_down,w,c
 19406  002A4C  105E               	iorwf	_down+1,w,c
 19407  002A4E  B4D8               	btfsc	status,2,c
 19408  002A50  D003               	goto	i2l9314
 19409                           
 19410                           ;UI.c: 343: change_state_to_logs_34();
 19411  002A52  EC6C  F029         	call	_change_state_to_logs_34	;wreg free
 19412                           
 19413                           ;UI.c: 344: }
 19414  002A56  D067               	goto	i2l263
 19415  002A58                     i2l9314:
 19416                           
 19417                           ;UI.c: 345: else if(enter){
 19418  002A58  505F               	movf	_enter,w,c
 19419  002A5A  1060               	iorwf	_enter+1,w,c
 19420  002A5C  B4D8               	btfsc	status,2,c
 19421  002A5E  D007               	goto	i2l9318
 19422                           
 19423                           ;UI.c: 346: dispLogs(3);
 19424  002A60  0E00               	movlw	0
 19425  002A62  6E13               	movwf	dispLogs@myLog+1,c
 19426  002A64  0E03               	movlw	3
 19427  002A66  6E12               	movwf	dispLogs@myLog,c
 19428  002A68  ECA1  F02A         	call	_dispLogs	;wreg free
 19429                           
 19430                           ;UI.c: 347: }
 19431  002A6C  D05C               	goto	i2l263
 19432  002A6E                     i2l9318:
 19433                           
 19434                           ;UI.c: 348: else if(back){
 19435  002A6E  505B               	movf	_back,w,c
 19436  002A70  105C               	iorwf	_back+1,w,c
 19437  002A72  B4D8               	btfsc	status,2,c
 19438  002A74  D058               	goto	i2l263
 19439                           
 19440                           ;UI.c: 349: change_state_to_menu_23();
 19441  002A76  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19442                           
 19443                           ;UI.c: 350: }
 19444                           ;UI.c: 351: break;
 19445  002A7A  D055               	goto	i2l263
 19446  002A7C                     i2l9322:
 19447                           
 19448                           ;UI.c: 354: if(up){
 19449  002A7C  5075               	movf	_up,w,c
 19450  002A7E  1076               	iorwf	_up+1,w,c
 19451  002A80  B4D8               	btfsc	status,2,c
 19452  002A82  D003               	goto	i2l9326
 19453                           
 19454                           ;UI.c: 355: change_state_to_logs_33();
 19455  002A84  EC84  F029         	call	_change_state_to_logs_33	;wreg free
 19456                           
 19457                           ;UI.c: 356: }
 19458  002A88  D04E               	goto	i2l263
 19459  002A8A                     i2l9326:
 19460                           
 19461                           ;UI.c: 357: else if(down){
 19462  002A8A  505D               	movf	_down,w,c
 19463  002A8C  105E               	iorwf	_down+1,w,c
 19464  002A8E  B4D8               	btfsc	status,2,c
 19465  002A90  D003               	goto	i2l9330
 19466                           
 19467                           ;UI.c: 358: change_state_to_logs_11();
 19468  002A92  ECCC  F029         	call	_change_state_to_logs_11	;wreg free
 19469                           
 19470                           ;UI.c: 359: }
 19471  002A96  D047               	goto	i2l263
 19472  002A98                     i2l9330:
 19473                           
 19474                           ;UI.c: 360: else if(enter){
 19475  002A98  505F               	movf	_enter,w,c
 19476  002A9A  1060               	iorwf	_enter+1,w,c
 19477  002A9C  B4D8               	btfsc	status,2,c
 19478  002A9E  D007               	goto	i2l9334
 19479                           
 19480                           ;UI.c: 361: dispLogs(4);
 19481  002AA0  0E00               	movlw	0
 19482  002AA2  6E13               	movwf	dispLogs@myLog+1,c
 19483  002AA4  0E04               	movlw	4
 19484  002AA6  6E12               	movwf	dispLogs@myLog,c
 19485  002AA8  ECA1  F02A         	call	_dispLogs	;wreg free
 19486                           
 19487                           ;UI.c: 362: }
 19488  002AAC  D03C               	goto	i2l263
 19489  002AAE                     i2l9334:
 19490                           
 19491                           ;UI.c: 363: else if(back){
 19492  002AAE  505B               	movf	_back,w,c
 19493  002AB0  105C               	iorwf	_back+1,w,c
 19494  002AB2  B4D8               	btfsc	status,2,c
 19495  002AB4  D038               	goto	i2l263
 19496                           
 19497                           ;UI.c: 364: change_state_to_menu_23();
 19498  002AB6  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 19499                           
 19500                           ;UI.c: 370: }
 19501                           
 19502                           ;UI.c: 369: break;
 19503                           
 19504                           ;UI.c: 368: default:
 19505                           
 19506                           ;UI.c: 365: }
 19507                           ;UI.c: 366: break;
 19508  002ABA  D035               	goto	i2l263
 19509  002ABC                     i2l9340:
 19510  002ABC  C0EC  F043         	movff	_cur_state,??_updateMenu
 19511  002AC0  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 19512                           
 19513                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 19514                           ; Switch size 1, requested type "space"
 19515                           ; Number of cases is 3, Range of values is 0 to 4
 19516                           ; switch strategies available:
 19517                           ; Name         Instructions Cycles
 19518                           ; simple_byte           10     6 (average)
 19519                           ;	Chosen strategy is simple_byte
 19520  002AC4  5044               	movf	??_updateMenu+1,w,c
 19521  002AC6  0A00               	xorlw	0	; case 0
 19522  002AC8  B4D8               	btfsc	status,2,c
 19523  002ACA  D007               	goto	i2l10304
 19524  002ACC  0A03               	xorlw	3	; case 3
 19525  002ACE  B4D8               	btfsc	status,2,c
 19526  002AD0  D015               	goto	i2l10306
 19527  002AD2  0A07               	xorlw	7	; case 4
 19528  002AD4  B4D8               	btfsc	status,2,c
 19529  002AD6  D020               	goto	i2l10308
 19530  002AD8  D026               	goto	i2l263
 19531  002ADA                     i2l10304:
 19532                           
 19533                           ; Switch size 1, requested type "space"
 19534                           ; Number of cases is 5, Range of values is 0 to 23
 19535                           ; switch strategies available:
 19536                           ; Name         Instructions Cycles
 19537                           ; simple_byte           16     9 (average)
 19538                           ;	Chosen strategy is simple_byte
 19539  002ADA  5043               	movf	??_updateMenu,w,c
 19540  002ADC  0A00               	xorlw	0	; case 0
 19541  002ADE  B4D8               	btfsc	status,2,c
 19542  002AE0  D6DC               	goto	i2l9192
 19543  002AE2  0A0B               	xorlw	11	; case 11
 19544  002AE4  B4D8               	btfsc	status,2,c
 19545  002AE6  D6DC               	goto	i2l9194
 19546  002AE8  0A07               	xorlw	7	; case 12
 19547  002AEA  B4D8               	btfsc	status,2,c
 19548  002AEC  D6EE               	goto	i2l9206
 19549  002AEE  0A1A               	xorlw	26	; case 22
 19550  002AF0  B4D8               	btfsc	status,2,c
 19551  002AF2  D6F9               	goto	i2l9218
 19552  002AF4  0A01               	xorlw	1	; case 23
 19553  002AF6  B4D8               	btfsc	status,2,c
 19554  002AF8  D70C               	goto	i2l9230
 19555  002AFA  D015               	goto	i2l263
 19556  002AFC                     i2l10306:
 19557                           
 19558                           ; Switch size 1, requested type "space"
 19559                           ; Number of cases is 4, Range of values is 243 to 255
 19560                           ; switch strategies available:
 19561                           ; Name         Instructions Cycles
 19562                           ; simple_byte           13     7 (average)
 19563                           ;	Chosen strategy is simple_byte
 19564  002AFC  5043               	movf	??_updateMenu,w,c
 19565  002AFE  0AF3               	xorlw	243	; case 243
 19566  002B00  B4D8               	btfsc	status,2,c
 19567  002B02  D71C               	goto	i2l9242
 19568  002B04  0A07               	xorlw	7	; case 244
 19569  002B06  B4D8               	btfsc	status,2,c
 19570  002B08  D739               	goto	i2l9258
 19571  002B0A  0A0A               	xorlw	10	; case 254
 19572  002B0C  B4D8               	btfsc	status,2,c
 19573  002B0E  D756               	goto	i2l9274
 19574  002B10  0A01               	xorlw	1	; case 255
 19575  002B12  B4D8               	btfsc	status,2,c
 19576  002B14  D773               	goto	i2l9290
 19577  002B16  D007               	goto	i2l263
 19578  002B18                     i2l10308:
 19579                           
 19580                           ; Switch size 1, requested type "space"
 19581                           ; Number of cases is 2, Range of values is 9 to 10
 19582                           ; switch strategies available:
 19583                           ; Name         Instructions Cycles
 19584                           ; simple_byte            7     4 (average)
 19585                           ;	Chosen strategy is simple_byte
 19586  002B18  5043               	movf	??_updateMenu,w,c
 19587  002B1A  0A09               	xorlw	9	; case 9
 19588  002B1C  B4D8               	btfsc	status,2,c
 19589  002B1E  D78E               	goto	i2l9306
 19590  002B20  0A03               	xorlw	3	; case 10
 19591  002B22  B4D8               	btfsc	status,2,c
 19592  002B24  D7AB               	goto	i2l9322
 19593  002B26                     i2l263:
 19594                           
 19595                           ;UI.c: 371: }
 19596                           ;UI.c: 372: (INTCONbits.GIE = 1);
 19597  002B26  8EF2               	bsf	intcon,7,c	;volatile
 19598  002B28  0012               	return		;funcret
 19599  002B2A                     __end_of_updateMenu:
 19600                           	opt stack 0
 19601                           pclatu	equ	0xFFB
 19602                           pclath	equ	0xFFA
 19603                           tblptru	equ	0xFF8
 19604                           tblptrh	equ	0xFF7
 19605                           tblptrl	equ	0xFF6
 19606                           tablat	equ	0xFF5
 19607                           prodh	equ	0xFF4
 19608                           prodl	equ	0xFF3
 19609                           intcon	equ	0xFF2
 19610                           intcon2	equ	0xFF1
 19611                           intcon3	equ	0xFF0
 19612                           indf0	equ	0xFEF
 19613                           postinc0	equ	0xFEE
 19614                           fsr0h	equ	0xFEA
 19615                           fsr0l	equ	0xFE9
 19616                           wreg	equ	0xFE8
 19617                           postdec1	equ	0xFE5
 19618                           fsr1h	equ	0xFE2
 19619                           fsr1l	equ	0xFE1
 19620                           indf2	equ	0xFDF
 19621                           postinc2	equ	0xFDE
 19622                           postdec2	equ	0xFDD
 19623                           fsr2h	equ	0xFDA
 19624                           fsr2l	equ	0xFD9
 19625                           status	equ	0xFD8
 19626                           
 19627 ;; *************** function i2_change_state_to_menu_start *****************
 19628 ;; Defined at:
 19629 ;;		line 477 in file "UI.c"
 19630 ;; Parameters:    Size  Location     Type
 19631 ;;		None
 19632 ;; Auto vars:     Size  Location     Type
 19633 ;;		None
 19634 ;; Return value:  Size  Location     Type
 19635 ;;                  1    wreg      void 
 19636 ;; Registers used:
 19637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19647 ;;Total ram usage:        0 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; Hardware stack levels required when called:    4
 19650 ;; This function calls:
 19651 ;;		i2_lcdInst
 19652 ;;		i2_printRTC
 19653 ;;		i2_printf
 19654 ;; This function is called by:
 19655 ;;		_updateMenu
 19656 ;;		_handler
 19657 ;; This function uses a non-reentrant model
 19658 ;;
 19659                           
 19660                           	psect	text63
 19661  0054CE                     __ptext63:
 19662                           	opt stack 0
 19663  0054CE                     i2_change_state_to_menu_start:
 19664                           	opt stack 19
 19665                           
 19666                           ;UI.c: 478: cur_state = 0;
 19667                           
 19668                           ;incstack = 0
 19669  0054CE  0E00               	movlw	0
 19670  0054D0  0100               	movlb	0	; () banked
 19671  0054D2  6FED               	movwf	(_cur_state+1)& (0+255),b
 19672  0054D4  0E00               	movlw	0
 19673  0054D6  6FEC               	movwf	_cur_state& (0+255),b
 19674                           
 19675                           ; BSR set to: 0
 19676                           ;UI.c: 480: lcdInst(0b10000000);;
 19677  0054D8  0E80               	movlw	128
 19678  0054DA  EC40  F02B         	call	i2_lcdInst
 19679                           
 19680                           ;UI.c: 481: printRTC();
 19681  0054DE  EC81  F019         	call	i2_printRTC	;wreg free
 19682                           
 19683                           ;UI.c: 482: lcdInst(0b11000000);;
 19684  0054E2  0EC0               	movlw	192
 19685  0054E4  EC40  F02B         	call	i2_lcdInst
 19686                           
 19687                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 19688  0054E8  0E01               	movlw	low STR_30
 19689  0054EA  6E0D               	movwf	i2printf@f,c
 19690  0054EC  0EFE               	movlw	high STR_30
 19691  0054EE  6E0E               	movwf	i2printf@f+1,c
 19692  0054F0  EC9A  F00F         	call	i2_printf	;wreg free
 19693  0054F4  0012               	return		;funcret
 19694  0054F6                     __end_ofi2_change_state_to_menu_start:
 19695                           	opt stack 0
 19696                           pclatu	equ	0xFFB
 19697                           pclath	equ	0xFFA
 19698                           tblptru	equ	0xFF8
 19699                           tblptrh	equ	0xFF7
 19700                           tblptrl	equ	0xFF6
 19701                           tablat	equ	0xFF5
 19702                           prodh	equ	0xFF4
 19703                           prodl	equ	0xFF3
 19704                           intcon	equ	0xFF2
 19705                           intcon2	equ	0xFF1
 19706                           intcon3	equ	0xFF0
 19707                           indf0	equ	0xFEF
 19708                           postinc0	equ	0xFEE
 19709                           fsr0h	equ	0xFEA
 19710                           fsr0l	equ	0xFE9
 19711                           wreg	equ	0xFE8
 19712                           postdec1	equ	0xFE5
 19713                           fsr1h	equ	0xFE2
 19714                           fsr1l	equ	0xFE1
 19715                           indf2	equ	0xFDF
 19716                           postinc2	equ	0xFDE
 19717                           postdec2	equ	0xFDD
 19718                           fsr2h	equ	0xFDA
 19719                           fsr2l	equ	0xFD9
 19720                           status	equ	0xFD8
 19721                           
 19722 ;; *************** function i2_printRTC *****************
 19723 ;; Defined at:
 19724 ;;		line 63 in file "RTC.c"
 19725 ;; Parameters:    Size  Location     Type
 19726 ;;		None
 19727 ;; Auto vars:     Size  Location     Type
 19728 ;;  printRTC       14   44[COMRAM] int [7]
 19729 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 19730 ;;  printRTC        2   64[COMRAM] int 
 19731 ;;  printRTC        2   58[COMRAM] int 
 19732 ;; Return value:  Size  Location     Type
 19733 ;;                  1    wreg      void 
 19734 ;; Registers used:
 19735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19736 ;; Tracked objects:
 19737 ;;		On entry : 0/0
 19738 ;;		On exit  : 0/0
 19739 ;;		Unchanged: 0/0
 19740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19742 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19743 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19744 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19745 ;;Total ram usage:       25 bytes
 19746 ;; Hardware stack levels used:    1
 19747 ;; Hardware stack levels required when called:    3
 19748 ;; This function calls:
 19749 ;;		i2_getRTC
 19750 ;;		i2_lcdInst
 19751 ;;		i2_printf
 19752 ;;		i2_strcpy
 19753 ;; This function is called by:
 19754 ;;		i2_change_state_to_menu_start
 19755 ;; This function uses a non-reentrant model
 19756 ;;
 19757                           
 19758                           	psect	text64
 19759  003302                     __ptext64:
 19760                           	opt stack 0
 19761  003302                     i2_printRTC:
 19762                           	opt stack 19
 19763                           
 19764                           ;RTC.c: 64: getRTC();
 19765                           
 19766                           ;incstack = 0
 19767  003302  EC98  F025         	call	i2_getRTC	;wreg free
 19768                           
 19769                           ;RTC.c: 65: char month[] = "MMM";
 19770  003306  C14B  F03D         	movff	printRTC@F3231,i2printRTC@month
 19771  00330A  C14C  F03E         	movff	printRTC@F3231+1,i2printRTC@month+1
 19772  00330E  C14D  F03F         	movff	printRTC@F3231+2,i2printRTC@month+2
 19773  003312  C14E  F040         	movff	printRTC@F3231+3,i2printRTC@month+3
 19774                           
 19775                           ;RTC.c: 66: int INT_time[7];
 19776                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 19777  003316  0E00               	movlw	0
 19778  003318  6E42               	movwf	i2printRTC@i+1,c
 19779  00331A  0E00               	movlw	0
 19780  00331C  6E41               	movwf	i2printRTC@i,c
 19781  00331E  BE42               	btfsc	i2printRTC@i+1,7,c
 19782  003320  D006               	goto	i2l7196
 19783  003322  5042               	movf	i2printRTC@i+1,w,c
 19784  003324  E135               	bnz	i2l618
 19785  003326  0E07               	movlw	7
 19786  003328  5C41               	subwf	i2printRTC@i,w,c
 19787  00332A  B0D8               	btfsc	status,0,c
 19788  00332C  D031               	goto	i2l618
 19789  00332E                     i2l7196:
 19790                           
 19791                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19792  00332E  0E1C               	movlw	low _time
 19793  003330  2441               	addwf	i2printRTC@i,w,c
 19794  003332  6ED9               	movwf	fsr2l,c
 19795  003334  0E01               	movlw	high _time
 19796  003336  2042               	addwfc	i2printRTC@i+1,w,c
 19797  003338  6EDA               	movwf	fsr2h,c
 19798  00333A  50DF               	movf	indf2,w,c
 19799  00333C  6E2A               	movwf	??i2_printRTC& (0+255),c
 19800  00333E  3A2A               	swapf	??i2_printRTC,f,c
 19801  003340  0E0F               	movlw	15
 19802  003342  162A               	andwf	??i2_printRTC,f,c
 19803  003344  0E0F               	movlw	15
 19804  003346  162A               	andwf	??i2_printRTC,f,c
 19805  003348  502A               	movf	??i2_printRTC,w,c
 19806  00334A  0D0A               	mullw	10
 19807  00334C  0E1C               	movlw	low _time
 19808  00334E  2441               	addwf	i2printRTC@i,w,c
 19809  003350  6ED9               	movwf	fsr2l,c
 19810  003352  0E01               	movlw	high _time
 19811  003354  2042               	addwfc	i2printRTC@i+1,w,c
 19812  003356  6EDA               	movwf	fsr2h,c
 19813  003358  50DF               	movf	indf2,w,c
 19814  00335A  0B0F               	andlw	15
 19815  00335C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19816  00335E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19817  003360  50F3               	movf	prodl,w,c
 19818  003362  262B               	addwf	??i2_printRTC+1,f,c
 19819  003364  50F4               	movf	prodh,w,c
 19820  003366  222C               	addwfc	??i2_printRTC+2,f,c
 19821  003368  90D8               	bcf	status,0,c
 19822  00336A  3441               	rlcf	i2printRTC@i,w,c
 19823  00336C  6ED9               	movwf	fsr2l,c
 19824  00336E  3442               	rlcf	i2printRTC@i+1,w,c
 19825  003370  6EDA               	movwf	fsr2h,c
 19826  003372  0E2D               	movlw	low i2printRTC@INT_time
 19827  003374  26D9               	addwf	fsr2l,f,c
 19828  003376  0E00               	movlw	high i2printRTC@INT_time
 19829  003378  22DA               	addwfc	fsr2h,f,c
 19830  00337A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19831  00337E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19832  003382  4A41               	infsnz	i2printRTC@i,f,c
 19833  003384  2A42               	incf	i2printRTC@i+1,f,c
 19834  003386  BE42               	btfsc	i2printRTC@i+1,7,c
 19835  003388  D7D2               	goto	i2l7196
 19836  00338A  5042               	movf	i2printRTC@i+1,w,c
 19837  00338C  E101               	bnz	i2u571_40
 19838  00338E  D7CB               	goto	L18
 19839  003390                     i2u571_40:
 19840  003390                     i2l618:
 19841                           
 19842                           ;RTC.c: 69: }
 19843                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19844  003390  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19845  003394  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19846                           
 19847                           ;RTC.c: 72: switch(RTC_month){
 19848  003398  D084               	goto	i2l7228
 19849  00339A                     i2l7202:
 19850                           
 19851                           ;RTC.c: 74: strcpy(month, "JAN");
 19852  00339A  0E3D               	movlw	low i2printRTC@month
 19853  00339C  6E01               	movwf	i2strcpy@to,c
 19854  00339E  0E00               	movlw	high i2printRTC@month
 19855  0033A0  6E02               	movwf	i2strcpy@to+1,c
 19856  0033A2  0EDA               	movlw	low STR_8
 19857  0033A4  6E03               	movwf	i2strcpy@from,c
 19858  0033A6  0EFF               	movlw	high STR_8
 19859  0033A8  6E04               	movwf	i2strcpy@from+1,c
 19860  0033AA  ECDB  F028         	call	i2_strcpy	;wreg free
 19861                           
 19862                           ;RTC.c: 75: break;
 19863  0033AE  D0A6               	goto	i2l7230
 19864  0033B0                     i2l7204:
 19865                           
 19866                           ;RTC.c: 77: strcpy(month, "FEB");
 19867  0033B0  0E3D               	movlw	low i2printRTC@month
 19868  0033B2  6E01               	movwf	i2strcpy@to,c
 19869  0033B4  0E00               	movlw	high i2printRTC@month
 19870  0033B6  6E02               	movwf	i2strcpy@to+1,c
 19871  0033B8  0ECA               	movlw	low STR_9
 19872  0033BA  6E03               	movwf	i2strcpy@from,c
 19873  0033BC  0EFF               	movlw	high STR_9
 19874  0033BE  6E04               	movwf	i2strcpy@from+1,c
 19875  0033C0  ECDB  F028         	call	i2_strcpy	;wreg free
 19876                           
 19877                           ;RTC.c: 78: break;
 19878  0033C4  D09B               	goto	i2l7230
 19879  0033C6                     i2l7206:
 19880                           
 19881                           ;RTC.c: 80: strcpy(month, "MAR");
 19882  0033C6  0E3D               	movlw	low i2printRTC@month
 19883  0033C8  6E01               	movwf	i2strcpy@to,c
 19884  0033CA  0E00               	movlw	high i2printRTC@month
 19885  0033CC  6E02               	movwf	i2strcpy@to+1,c
 19886  0033CE  0EE6               	movlw	low STR_10
 19887  0033D0  6E03               	movwf	i2strcpy@from,c
 19888  0033D2  0EFF               	movlw	high STR_10
 19889  0033D4  6E04               	movwf	i2strcpy@from+1,c
 19890  0033D6  ECDB  F028         	call	i2_strcpy	;wreg free
 19891                           
 19892                           ;RTC.c: 81: break;
 19893  0033DA  D090               	goto	i2l7230
 19894  0033DC                     i2l7208:
 19895                           
 19896                           ;RTC.c: 83: strcpy(month, "APR");
 19897  0033DC  0E3D               	movlw	low i2printRTC@month
 19898  0033DE  6E01               	movwf	i2strcpy@to,c
 19899  0033E0  0E00               	movlw	high i2printRTC@month
 19900  0033E2  6E02               	movwf	i2strcpy@to+1,c
 19901  0033E4  0EEA               	movlw	low STR_11
 19902  0033E6  6E03               	movwf	i2strcpy@from,c
 19903  0033E8  0EFF               	movlw	high STR_11
 19904  0033EA  6E04               	movwf	i2strcpy@from+1,c
 19905  0033EC  ECDB  F028         	call	i2_strcpy	;wreg free
 19906                           
 19907                           ;RTC.c: 84: break;
 19908  0033F0  D085               	goto	i2l7230
 19909  0033F2                     i2l7210:
 19910                           
 19911                           ;RTC.c: 86: strcpy(month, "MAY");
 19912  0033F2  0E3D               	movlw	low i2printRTC@month
 19913  0033F4  6E01               	movwf	i2strcpy@to,c
 19914  0033F6  0E00               	movlw	high i2printRTC@month
 19915  0033F8  6E02               	movwf	i2strcpy@to+1,c
 19916  0033FA  0EFA               	movlw	low STR_12
 19917  0033FC  6E03               	movwf	i2strcpy@from,c
 19918  0033FE  0EFF               	movlw	high STR_12
 19919  003400  6E04               	movwf	i2strcpy@from+1,c
 19920  003402  ECDB  F028         	call	i2_strcpy	;wreg free
 19921                           
 19922                           ;RTC.c: 87: break;
 19923  003406  D07A               	goto	i2l7230
 19924  003408                     i2l7212:
 19925                           
 19926                           ;RTC.c: 89: strcpy(month, "JUN");
 19927  003408  0E3D               	movlw	low i2printRTC@month
 19928  00340A  6E01               	movwf	i2strcpy@to,c
 19929  00340C  0E00               	movlw	high i2printRTC@month
 19930  00340E  6E02               	movwf	i2strcpy@to+1,c
 19931  003410  0EDE               	movlw	low STR_13
 19932  003412  6E03               	movwf	i2strcpy@from,c
 19933  003414  0EFF               	movlw	high STR_13
 19934  003416  6E04               	movwf	i2strcpy@from+1,c
 19935  003418  ECDB  F028         	call	i2_strcpy	;wreg free
 19936                           
 19937                           ;RTC.c: 90: break;
 19938  00341C  D06F               	goto	i2l7230
 19939  00341E                     i2l7214:
 19940                           
 19941                           ;RTC.c: 92: strcpy(month, "JUL");
 19942  00341E  0E3D               	movlw	low i2printRTC@month
 19943  003420  6E01               	movwf	i2strcpy@to,c
 19944  003422  0E00               	movlw	high i2printRTC@month
 19945  003424  6E02               	movwf	i2strcpy@to+1,c
 19946  003426  0ED6               	movlw	low STR_14
 19947  003428  6E03               	movwf	i2strcpy@from,c
 19948  00342A  0EFF               	movlw	high STR_14
 19949  00342C  6E04               	movwf	i2strcpy@from+1,c
 19950  00342E  ECDB  F028         	call	i2_strcpy	;wreg free
 19951                           
 19952                           ;RTC.c: 93: break;
 19953  003432  D064               	goto	i2l7230
 19954  003434                     i2l7216:
 19955                           
 19956                           ;RTC.c: 95: strcpy(month, "AUG");
 19957  003434  0E3D               	movlw	low i2printRTC@month
 19958  003436  6E01               	movwf	i2strcpy@to,c
 19959  003438  0E00               	movlw	high i2printRTC@month
 19960  00343A  6E02               	movwf	i2strcpy@to+1,c
 19961  00343C  0ED2               	movlw	low STR_15
 19962  00343E  6E03               	movwf	i2strcpy@from,c
 19963  003440  0EFF               	movlw	high STR_15
 19964  003442  6E04               	movwf	i2strcpy@from+1,c
 19965  003444  ECDB  F028         	call	i2_strcpy	;wreg free
 19966                           
 19967                           ;RTC.c: 96: break;
 19968  003448  D059               	goto	i2l7230
 19969  00344A                     i2l7218:
 19970                           
 19971                           ;RTC.c: 98: strcpy(month, "SEP");
 19972  00344A  0E3D               	movlw	low i2printRTC@month
 19973  00344C  6E01               	movwf	i2strcpy@to,c
 19974  00344E  0E00               	movlw	high i2printRTC@month
 19975  003450  6E02               	movwf	i2strcpy@to+1,c
 19976  003452  0EE2               	movlw	low STR_16
 19977  003454  6E03               	movwf	i2strcpy@from,c
 19978  003456  0EFF               	movlw	high STR_16
 19979  003458  6E04               	movwf	i2strcpy@from+1,c
 19980  00345A  ECDB  F028         	call	i2_strcpy	;wreg free
 19981                           
 19982                           ;RTC.c: 99: break;
 19983  00345E  D04E               	goto	i2l7230
 19984  003460                     i2l7220:
 19985                           
 19986                           ;RTC.c: 101: strcpy(month, "OCT");
 19987  003460  0E3D               	movlw	low i2printRTC@month
 19988  003462  6E01               	movwf	i2strcpy@to,c
 19989  003464  0E00               	movlw	high i2printRTC@month
 19990  003466  6E02               	movwf	i2strcpy@to+1,c
 19991  003468  0EF2               	movlw	low STR_17
 19992  00346A  6E03               	movwf	i2strcpy@from,c
 19993  00346C  0EFF               	movlw	high STR_17
 19994  00346E  6E04               	movwf	i2strcpy@from+1,c
 19995  003470  ECDB  F028         	call	i2_strcpy	;wreg free
 19996                           
 19997                           ;RTC.c: 102: break;
 19998  003474  D043               	goto	i2l7230
 19999  003476                     i2l7222:
 20000                           
 20001                           ;RTC.c: 104: strcpy(month, "NOV");
 20002  003476  0E3D               	movlw	low i2printRTC@month
 20003  003478  6E01               	movwf	i2strcpy@to,c
 20004  00347A  0E00               	movlw	high i2printRTC@month
 20005  00347C  6E02               	movwf	i2strcpy@to+1,c
 20006  00347E  0EF6               	movlw	low STR_18
 20007  003480  6E03               	movwf	i2strcpy@from,c
 20008  003482  0EFF               	movlw	high STR_18
 20009  003484  6E04               	movwf	i2strcpy@from+1,c
 20010  003486  ECDB  F028         	call	i2_strcpy	;wreg free
 20011                           
 20012                           ;RTC.c: 105: break;
 20013  00348A  D038               	goto	i2l7230
 20014  00348C                     i2l7224:
 20015                           
 20016                           ;RTC.c: 107: strcpy(month, "DEC");
 20017  00348C  0E3D               	movlw	low i2printRTC@month
 20018  00348E  6E01               	movwf	i2strcpy@to,c
 20019  003490  0E00               	movlw	high i2printRTC@month
 20020  003492  6E02               	movwf	i2strcpy@to+1,c
 20021  003494  0ECE               	movlw	low STR_19
 20022  003496  6E03               	movwf	i2strcpy@from,c
 20023  003498  0EFF               	movlw	high STR_19
 20024  00349A  6E04               	movwf	i2strcpy@from+1,c
 20025  00349C  ECDB  F028         	call	i2_strcpy	;wreg free
 20026                           
 20027                           ;RTC.c: 109: }
 20028                           
 20029                           ;RTC.c: 108: break;
 20030  0034A0  D02D               	goto	i2l7230
 20031  0034A2                     i2l7228:
 20032  0034A2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 20033  0034A6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 20034                           
 20035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20036                           ; Switch size 1, requested type "space"
 20037                           ; Number of cases is 1, Range of values is 0 to 0
 20038                           ; switch strategies available:
 20039                           ; Name         Instructions Cycles
 20040                           ; simple_byte            4     3 (average)
 20041                           ;	Chosen strategy is simple_byte
 20042  0034AA  502B               	movf	??i2_printRTC+1,w,c
 20043  0034AC  0A00               	xorlw	0	; case 0
 20044  0034AE  A4D8               	btfss	status,2,c
 20045  0034B0  D025               	goto	i2l7230
 20046                           
 20047                           ; Switch size 1, requested type "space"
 20048                           ; Number of cases is 12, Range of values is 1 to 12
 20049                           ; switch strategies available:
 20050                           ; Name         Instructions Cycles
 20051                           ; simple_byte           37    19 (average)
 20052                           ;	Chosen strategy is simple_byte
 20053  0034B2  502A               	movf	??i2_printRTC,w,c
 20054  0034B4  0A01               	xorlw	1	; case 1
 20055  0034B6  B4D8               	btfsc	status,2,c
 20056  0034B8  D770               	goto	i2l7202
 20057  0034BA  0A03               	xorlw	3	; case 2
 20058  0034BC  B4D8               	btfsc	status,2,c
 20059  0034BE  D778               	goto	i2l7204
 20060  0034C0  0A01               	xorlw	1	; case 3
 20061  0034C2  B4D8               	btfsc	status,2,c
 20062  0034C4  D780               	goto	i2l7206
 20063  0034C6  0A07               	xorlw	7	; case 4
 20064  0034C8  B4D8               	btfsc	status,2,c
 20065  0034CA  D788               	goto	i2l7208
 20066  0034CC  0A01               	xorlw	1	; case 5
 20067  0034CE  B4D8               	btfsc	status,2,c
 20068  0034D0  D790               	goto	i2l7210
 20069  0034D2  0A03               	xorlw	3	; case 6
 20070  0034D4  B4D8               	btfsc	status,2,c
 20071  0034D6  D798               	goto	i2l7212
 20072  0034D8  0A01               	xorlw	1	; case 7
 20073  0034DA  B4D8               	btfsc	status,2,c
 20074  0034DC  D7A0               	goto	i2l7214
 20075  0034DE  0A0F               	xorlw	15	; case 8
 20076  0034E0  B4D8               	btfsc	status,2,c
 20077  0034E2  D7A8               	goto	i2l7216
 20078  0034E4  0A01               	xorlw	1	; case 9
 20079  0034E6  B4D8               	btfsc	status,2,c
 20080  0034E8  D7B0               	goto	i2l7218
 20081  0034EA  0A03               	xorlw	3	; case 10
 20082  0034EC  B4D8               	btfsc	status,2,c
 20083  0034EE  D7B8               	goto	i2l7220
 20084  0034F0  0A01               	xorlw	1	; case 11
 20085  0034F2  B4D8               	btfsc	status,2,c
 20086  0034F4  D7C0               	goto	i2l7222
 20087  0034F6  0A07               	xorlw	7	; case 12
 20088  0034F8  B4D8               	btfsc	status,2,c
 20089  0034FA  D7C8               	goto	i2l7224
 20090  0034FC                     i2l7230:
 20091                           
 20092                           ;RTC.c: 110: lcdInst(0b10000000);;
 20093  0034FC  0E80               	movlw	128
 20094  0034FE  EC40  F02B         	call	i2_lcdInst
 20095                           
 20096                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 20097  003502  0EBE               	movlw	low STR_21
 20098  003504  6E0D               	movwf	i2printf@f,c
 20099  003506  0EFA               	movlw	high STR_21
 20100  003508  6E0E               	movwf	i2printf@f+1,c
 20101  00350A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 20102  00350E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 20103  003512  0E3D               	movlw	low i2printRTC@month
 20104  003514  6E11               	movwf	?i2_printf+4,c
 20105  003516  0E00               	movlw	high i2printRTC@month
 20106  003518  6E12               	movwf	?i2_printf+5,c
 20107  00351A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 20108  00351E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 20109  003522  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 20110  003526  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 20111  00352A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 20112  00352E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 20113  003532  EC9A  F00F         	call	i2_printf	;wreg free
 20114  003536  0012               	return		;funcret
 20115  003538                     __end_ofi2_printRTC:
 20116                           	opt stack 0
 20117                           pclatu	equ	0xFFB
 20118                           pclath	equ	0xFFA
 20119                           tblptru	equ	0xFF8
 20120                           tblptrh	equ	0xFF7
 20121                           tblptrl	equ	0xFF6
 20122                           tablat	equ	0xFF5
 20123                           prodh	equ	0xFF4
 20124                           prodl	equ	0xFF3
 20125                           intcon	equ	0xFF2
 20126                           intcon2	equ	0xFF1
 20127                           intcon3	equ	0xFF0
 20128                           indf0	equ	0xFEF
 20129                           postinc0	equ	0xFEE
 20130                           fsr0h	equ	0xFEA
 20131                           fsr0l	equ	0xFE9
 20132                           wreg	equ	0xFE8
 20133                           postdec1	equ	0xFE5
 20134                           fsr1h	equ	0xFE2
 20135                           fsr1l	equ	0xFE1
 20136                           indf2	equ	0xFDF
 20137                           postinc2	equ	0xFDE
 20138                           postdec2	equ	0xFDD
 20139                           fsr2h	equ	0xFDA
 20140                           fsr2l	equ	0xFD9
 20141                           status	equ	0xFD8
 20142                           
 20143 ;; *************** function i2_strcpy *****************
 20144 ;; Defined at:
 20145 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 20146 ;; Parameters:    Size  Location     Type
 20147 ;;  to              2    0[COMRAM] PTR unsigned char 
 20148 ;;		 -> printRTC@month(4), UI@month(4), 
 20149 ;;  from            2    2[COMRAM] PTR const unsigned char 
 20150 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 20151 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 20152 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 20153 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 20154 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 20155 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 20156 ;;		 -> STR_8(4), 
 20157 ;; Auto vars:     Size  Location     Type
 20158 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 20159 ;;		 -> printRTC@month(4), UI@month(4), 
 20160 ;; Return value:  Size  Location     Type
 20161 ;;                  2    0[COMRAM] PTR unsigned char 
 20162 ;; Registers used:
 20163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20164 ;; Tracked objects:
 20165 ;;		On entry : 0/0
 20166 ;;		On exit  : 0/0
 20167 ;;		Unchanged: 0/0
 20168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20169 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20172 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20173 ;;Total ram usage:        6 bytes
 20174 ;; Hardware stack levels used:    1
 20175 ;; This function calls:
 20176 ;;		Nothing
 20177 ;; This function is called by:
 20178 ;;		i2_printRTC
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text65
 20183  0051B6                     __ptext65:
 20184                           	opt stack 0
 20185  0051B6                     i2_strcpy:
 20186                           	opt stack 21
 20187                           
 20188                           ;incstack = 0
 20189  0051B6  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 20190  0051BA  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 20191  0051BE  D004               	goto	i2l6834
 20192  0051C0                     i2l6832:
 20193  0051C0  4A05               	infsnz	i2strcpy@cp,f,c
 20194  0051C2  2A06               	incf	i2strcpy@cp+1,f,c
 20195  0051C4  4A03               	infsnz	i2strcpy@from,f,c
 20196  0051C6  2A04               	incf	i2strcpy@from+1,f,c
 20197  0051C8                     i2l6834:
 20198  0051C8  C003  FFF6         	movff	i2strcpy@from,tblptrl
 20199  0051CC  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 20200  0051D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20201  0051D0  6AF8               	clrf	tblptru,c
 20202  0051D2                     	endif
 20203  0051D2                     	if	0	;tblptru may be non-zero
 20204  0051D2                     	endif
 20205  0051D2  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 20206  0051D6  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 20207  0051DA  0008               	tblrd		*
 20208  0051DC  CFF5 FFDF          	movff	tablat,indf2
 20209  0051E0  50DF               	movf	indf2,w,c
 20210  0051E2  B4D8               	btfsc	status,2,c
 20211  0051E4  0012               	return	
 20212  0051E6  D7EC               	goto	i2l6832
 20213  0051E8                     __end_ofi2_strcpy:
 20214                           	opt stack 0
 20215                           pclatu	equ	0xFFB
 20216                           pclath	equ	0xFFA
 20217                           tblptru	equ	0xFF8
 20218                           tblptrh	equ	0xFF7
 20219                           tblptrl	equ	0xFF6
 20220                           tablat	equ	0xFF5
 20221                           prodh	equ	0xFF4
 20222                           prodl	equ	0xFF3
 20223                           intcon	equ	0xFF2
 20224                           intcon2	equ	0xFF1
 20225                           intcon3	equ	0xFF0
 20226                           indf0	equ	0xFEF
 20227                           postinc0	equ	0xFEE
 20228                           fsr0h	equ	0xFEA
 20229                           fsr0l	equ	0xFE9
 20230                           wreg	equ	0xFE8
 20231                           postdec1	equ	0xFE5
 20232                           fsr1h	equ	0xFE2
 20233                           fsr1l	equ	0xFE1
 20234                           indf2	equ	0xFDF
 20235                           postinc2	equ	0xFDE
 20236                           postdec2	equ	0xFDD
 20237                           fsr2h	equ	0xFDA
 20238                           fsr2l	equ	0xFD9
 20239                           status	equ	0xFD8
 20240                           
 20241 ;; *************** function _inputHandler *****************
 20242 ;; Defined at:
 20243 ;;		line 375 in file "UI.c"
 20244 ;; Parameters:    Size  Location     Type
 20245 ;;		None
 20246 ;; Auto vars:     Size  Location     Type
 20247 ;;		None
 20248 ;; Return value:  Size  Location     Type
 20249 ;;                  2   41[COMRAM] int 
 20250 ;; Registers used:
 20251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20252 ;; Tracked objects:
 20253 ;;		On entry : 0/0
 20254 ;;		On exit  : 0/0
 20255 ;;		Unchanged: 0/0
 20256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20261 ;;Total ram usage:        4 bytes
 20262 ;; Hardware stack levels used:    1
 20263 ;; Hardware stack levels required when called:    4
 20264 ;; This function calls:
 20265 ;;		_change_state_to_logs_11
 20266 ;;		_change_state_to_logs_12
 20267 ;;		_change_state_to_logs_22
 20268 ;;		_change_state_to_logs_23
 20269 ;;		_change_state_to_logs_33
 20270 ;;		_change_state_to_logs_34
 20271 ;;		_change_state_to_menu_11
 20272 ;;		_change_state_to_menu_23
 20273 ;;		i2_change_state_to_menu_12
 20274 ;;		i2_change_state_to_menu_22
 20275 ;; This function is called by:
 20276 ;;		_updateMenu
 20277 ;; This function uses a non-reentrant model
 20278 ;;
 20279                           
 20280                           	psect	text66
 20281  00372A                     __ptext66:
 20282                           	opt stack 0
 20283  00372A                     _inputHandler:
 20284                           	opt stack 18
 20285                           
 20286                           ;UI.c: 380: if(firstboot){
 20287                           
 20288                           ;incstack = 0
 20289  00372A  0101               	movlb	1	; () banked
 20290  00372C  513B               	movf	_firstboot& (0+255),w,b
 20291  00372E  0101               	movlb	1	; () banked
 20292  003730  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 20293  003732  B4D8               	btfsc	status,2,c
 20294  003734  D00C               	goto	i2l7298
 20295                           
 20296                           ; BSR set to: 1
 20297                           ;UI.c: 381: change_state_to_menu_11();
 20298  003736  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 20299                           
 20300                           ;UI.c: 382: firstboot = 0;
 20301  00373A  0E00               	movlw	0
 20302  00373C  0101               	movlb	1	; () banked
 20303  00373E  6F3C               	movwf	(_firstboot+1)& (0+255),b
 20304  003740  0E00               	movlw	0
 20305  003742  6F3B               	movwf	_firstboot& (0+255),b
 20306                           
 20307                           ; BSR set to: 1
 20308                           ;UI.c: 383: return 0;
 20309  003744  0E00               	movlw	0
 20310  003746  6E2B               	movwf	?_inputHandler+1,c
 20311  003748  0E00               	movlw	0
 20312  00374A  6E2A               	movwf	?_inputHandler,c
 20313                           
 20314                           ; BSR set to: 1
 20315  00374C  0012               	return	
 20316  00374E                     i2l7298:
 20317                           
 20318                           ; BSR set to: 1
 20319                           ;UI.c: 384: }
 20320                           ;UI.c: 385: if (logstate){
 20321  00374E  0100               	movlb	0	; () banked
 20322  003750  51F8               	movf	_logstate& (0+255),w,b
 20323  003752  0100               	movlb	0	; () banked
 20324  003754  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 20325  003756  B4D8               	btfsc	status,2,c
 20326  003758  D0C7               	goto	i2l7416
 20327                           
 20328                           ; BSR set to: 0
 20329                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 20330  00375A  0E43               	movlw	67
 20331  00375C  187D               	xorwf	_input,w,c	;volatile
 20332  00375E  A4D8               	btfss	status,2,c
 20333  003760  D012               	goto	i2l7316
 20334                           
 20335                           ; BSR set to: 0
 20336  003762  B281               	btfsc	3969,1,c	;volatile
 20337  003764  D009               	goto	i2l7308
 20338  003766  D00F               	goto	i2l7316
 20339  003768                     i2l7306:
 20340                           
 20341                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 20342  003768  0E68               	movlw	104
 20343  00376A  6E2C               	movwf	??_inputHandler& (0+255),c
 20344  00376C  0EE4               	movlw	228
 20345  00376E                     i2u1070_47:
 20346  00376E  2EE8               	decfsz	wreg,f,c
 20347  003770  D7FE               	bra	i2u1070_47
 20348  003772  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 20349  003774  D7FC               	bra	i2u1070_47
 20350  003776  D000               	nop2	
 20351  003778                     i2l7308:
 20352  003778  B281               	btfsc	3969,1,c	;volatile
 20353  00377A  D7F6               	goto	i2l7306
 20354  00377C                     i2l7310:
 20355                           
 20356                           ;UI.c: 390: }
 20357                           ;UI.c: 391: return 0;
 20358  00377C  0E00               	movlw	0
 20359  00377E  6E2B               	movwf	?_inputHandler+1,c
 20360  003780  0E00               	movlw	0
 20361  003782  6E2A               	movwf	?_inputHandler,c
 20362  003784  0012               	return	
 20363  003786                     i2l7316:
 20364                           
 20365                           ;UI.c: 393: else if (input == 'D'){
 20366  003786  0E44               	movlw	68
 20367  003788  187D               	xorwf	_input,w,c	;volatile
 20368  00378A  A4D8               	btfss	status,2,c
 20369  00378C  D7F7               	goto	i2l7310
 20370                           
 20371                           ;UI.c: 395: logstate = 0;
 20372  00378E  0E00               	movlw	0
 20373  003790  0100               	movlb	0	; () banked
 20374  003792  6FF9               	movwf	(_logstate+1)& (0+255),b
 20375  003794  0E00               	movlw	0
 20376  003796  6FF8               	movwf	_logstate& (0+255),b
 20377                           
 20378                           ;UI.c: 396: switch(cur_state){
 20379  003798  D012               	goto	i2l7334
 20380  00379A                     i2l7320:
 20381                           
 20382                           ;UI.c: 398: change_state_to_logs_11();
 20383  00379A  ECCC  F029         	call	_change_state_to_logs_11	;wreg free
 20384                           
 20385                           ;UI.c: 399: break;
 20386  00379E  D7EE               	goto	i2l7310
 20387  0037A0                     i2l7322:
 20388                           
 20389                           ;UI.c: 401: change_state_to_logs_12();
 20390  0037A0  ECB4  F029         	call	_change_state_to_logs_12	;wreg free
 20391                           
 20392                           ;UI.c: 402: break;
 20393  0037A4  D7EB               	goto	i2l7310
 20394  0037A6                     i2l7324:
 20395                           
 20396                           ;UI.c: 404: change_state_to_logs_22();
 20397  0037A6  EC9C  F029         	call	_change_state_to_logs_22	;wreg free
 20398                           
 20399                           ;UI.c: 405: break;
 20400  0037AA  D7E8               	goto	i2l7310
 20401  0037AC                     i2l7326:
 20402                           
 20403                           ;UI.c: 407: change_state_to_logs_23();
 20404  0037AC  ECFB  F029         	call	_change_state_to_logs_23	;wreg free
 20405                           
 20406                           ;UI.c: 408: break;
 20407  0037B0  D7E5               	goto	i2l7310
 20408  0037B2                     i2l7328:
 20409                           
 20410                           ;UI.c: 410: change_state_to_logs_33();
 20411  0037B2  EC84  F029         	call	_change_state_to_logs_33	;wreg free
 20412                           
 20413                           ;UI.c: 411: break;
 20414  0037B6  D7E2               	goto	i2l7310
 20415  0037B8                     i2l7330:
 20416                           
 20417                           ;UI.c: 413: change_state_to_logs_34();
 20418  0037B8  EC6C  F029         	call	_change_state_to_logs_34	;wreg free
 20419                           
 20420                           ;UI.c: 415: }
 20421                           
 20422                           ;UI.c: 414: break;
 20423  0037BC  D7DF               	goto	i2l7310
 20424  0037BE                     i2l7334:
 20425  0037BE  C0EC  F02C         	movff	_cur_state,??_inputHandler
 20426  0037C2  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 20427                           
 20428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20429                           ; Switch size 1, requested type "space"
 20430                           ; Number of cases is 2, Range of values is 3 to 4
 20431                           ; switch strategies available:
 20432                           ; Name         Instructions Cycles
 20433                           ; simple_byte            7     4 (average)
 20434                           ;	Chosen strategy is simple_byte
 20435  0037C6  502D               	movf	??_inputHandler+1,w,c
 20436  0037C8  0A03               	xorlw	3	; case 3
 20437  0037CA  B4D8               	btfsc	status,2,c
 20438  0037CC  D004               	goto	i2l10312
 20439  0037CE  0A07               	xorlw	7	; case 4
 20440  0037D0  B4D8               	btfsc	status,2,c
 20441  0037D2  D00F               	goto	i2l10314
 20442  0037D4  D7D3               	goto	i2l7310
 20443  0037D6                     i2l10312:
 20444                           
 20445                           ; Switch size 1, requested type "space"
 20446                           ; Number of cases is 4, Range of values is 243 to 255
 20447                           ; switch strategies available:
 20448                           ; Name         Instructions Cycles
 20449                           ; simple_byte           13     7 (average)
 20450                           ;	Chosen strategy is simple_byte
 20451  0037D6  502C               	movf	??_inputHandler,w,c
 20452  0037D8  0AF3               	xorlw	243	; case 243
 20453  0037DA  B4D8               	btfsc	status,2,c
 20454  0037DC  D7DE               	goto	i2l7320
 20455  0037DE  0A07               	xorlw	7	; case 244
 20456  0037E0  B4D8               	btfsc	status,2,c
 20457  0037E2  D7DE               	goto	i2l7322
 20458  0037E4  0A0A               	xorlw	10	; case 254
 20459  0037E6  B4D8               	btfsc	status,2,c
 20460  0037E8  D7DE               	goto	i2l7324
 20461  0037EA  0A01               	xorlw	1	; case 255
 20462  0037EC  B4D8               	btfsc	status,2,c
 20463  0037EE  D7DE               	goto	i2l7326
 20464  0037F0  D7C5               	goto	i2l7310
 20465  0037F2                     i2l10314:
 20466                           
 20467                           ; Switch size 1, requested type "space"
 20468                           ; Number of cases is 2, Range of values is 9 to 10
 20469                           ; switch strategies available:
 20470                           ; Name         Instructions Cycles
 20471                           ; simple_byte            7     4 (average)
 20472                           ;	Chosen strategy is simple_byte
 20473  0037F2  502C               	movf	??_inputHandler,w,c
 20474  0037F4  0A09               	xorlw	9	; case 9
 20475  0037F6  B4D8               	btfsc	status,2,c
 20476  0037F8  D7DC               	goto	i2l7328
 20477  0037FA  0A03               	xorlw	3	; case 10
 20478  0037FC  B4D8               	btfsc	status,2,c
 20479  0037FE  D7DC               	goto	i2l7330
 20480  003800  D7BD               	goto	i2l7310
 20481  003802                     i2l7346:
 20482                           
 20483                           ;UI.c: 425: if(cur_state == 11){
 20484  003802  0E0B               	movlw	11
 20485  003804  0100               	movlb	0	; () banked
 20486  003806  19EC               	xorwf	_cur_state& (0+255),w,b
 20487  003808  0100               	movlb	0	; () banked
 20488  00380A  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20489  00380C  A4D8               	btfss	status,2,c
 20490  00380E  D005               	goto	i2l7354
 20491                           
 20492                           ; BSR set to: 0
 20493                           ;UI.c: 426: return 0;
 20494  003810  0E00               	movlw	0
 20495  003812  6E2B               	movwf	?_inputHandler+1,c
 20496  003814  0E00               	movlw	0
 20497  003816  6E2A               	movwf	?_inputHandler,c
 20498                           
 20499                           ; BSR set to: 0
 20500  003818  0012               	return	
 20501  00381A                     i2l7354:
 20502                           
 20503                           ; BSR set to: 0
 20504                           ;UI.c: 428: else{
 20505                           ;UI.c: 429: change_state_to_menu_11();
 20506  00381A  EC54  F029         	call	_change_state_to_menu_11	;wreg free
 20507                           
 20508                           ;UI.c: 430: }
 20509                           ;UI.c: 431: return 0;
 20510  00381E  0E00               	movlw	0
 20511  003820  6E2B               	movwf	?_inputHandler+1,c
 20512  003822  0E00               	movlw	0
 20513  003824  6E2A               	movwf	?_inputHandler,c
 20514  003826  0012               	return	
 20515  003828                     i2l7360:
 20516                           
 20517                           ;UI.c: 433: if(cur_state == 22 | cur_state == 12){
 20518  003828  0E16               	movlw	22
 20519  00382A  0100               	movlb	0	; () banked
 20520  00382C  19EC               	xorwf	_cur_state& (0+255),w,b
 20521  00382E  0100               	movlb	0	; () banked
 20522  003830  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20523  003832  B4D8               	btfsc	status,2,c
 20524  003834  D007               	goto	i2l7364
 20525                           
 20526                           ; BSR set to: 0
 20527  003836  0E0C               	movlw	12
 20528  003838  0100               	movlb	0	; () banked
 20529  00383A  19EC               	xorwf	_cur_state& (0+255),w,b
 20530  00383C  0100               	movlb	0	; () banked
 20531  00383E  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20532  003840  A4D8               	btfss	status,2,c
 20533  003842  D005               	goto	i2l7370
 20534  003844                     i2l7364:
 20535                           
 20536                           ; BSR set to: 0
 20537                           ;UI.c: 434: return 0;
 20538  003844  0E00               	movlw	0
 20539  003846  6E2B               	movwf	?_inputHandler+1,c
 20540  003848  0E00               	movlw	0
 20541  00384A  6E2A               	movwf	?_inputHandler,c
 20542                           
 20543                           ; BSR set to: 0
 20544  00384C  0012               	return	
 20545  00384E                     i2l7370:
 20546                           
 20547                           ; BSR set to: 0
 20548                           ;UI.c: 436: else if(cur_state == 23){
 20549  00384E  0E17               	movlw	23
 20550  003850  0100               	movlb	0	; () banked
 20551  003852  19EC               	xorwf	_cur_state& (0+255),w,b
 20552  003854  0100               	movlb	0	; () banked
 20553  003856  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20554  003858  A4D8               	btfss	status,2,c
 20555  00385A  D003               	goto	i2l7374
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;UI.c: 437: change_state_to_menu_22();
 20559  00385C  EC0C  F029         	call	i2_change_state_to_menu_22	;wreg free
 20560                           
 20561                           ;UI.c: 438: }
 20562  003860  D002               	goto	i2l7376
 20563  003862                     i2l7374:
 20564                           
 20565                           ;UI.c: 439: else{
 20566                           ;UI.c: 440: change_state_to_menu_12();
 20567  003862  EC24  F029         	call	i2_change_state_to_menu_12	;wreg free
 20568  003866                     i2l7376:
 20569                           
 20570                           ;UI.c: 441: }
 20571                           ;UI.c: 442: return 0;
 20572  003866  0E00               	movlw	0
 20573  003868  6E2B               	movwf	?_inputHandler+1,c
 20574  00386A  0E00               	movlw	0
 20575  00386C  6E2A               	movwf	?_inputHandler,c
 20576  00386E  0012               	return	
 20577  003870                     i2l7380:
 20578                           
 20579                           ;UI.c: 444: if(cur_state == 23){
 20580  003870  0E17               	movlw	23
 20581  003872  0100               	movlb	0	; () banked
 20582  003874  19EC               	xorwf	_cur_state& (0+255),w,b
 20583  003876  0100               	movlb	0	; () banked
 20584  003878  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 20585  00387A  A4D8               	btfss	status,2,c
 20586  00387C  D005               	goto	i2l7388
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;UI.c: 445: return 0;
 20590  00387E  0E00               	movlw	0
 20591  003880  6E2B               	movwf	?_inputHandler+1,c
 20592  003882  0E00               	movlw	0
 20593  003884  6E2A               	movwf	?_inputHandler,c
 20594                           
 20595                           ; BSR set to: 0
 20596  003886  0012               	return	
 20597  003888                     i2l7388:
 20598                           
 20599                           ; BSR set to: 0
 20600                           ;UI.c: 447: else{
 20601                           ;UI.c: 448: change_state_to_menu_23();
 20602  003888  EC3C  F029         	call	_change_state_to_menu_23	;wreg free
 20603                           
 20604                           ;UI.c: 449: }
 20605                           ;UI.c: 450: return 0;
 20606  00388C  0E00               	movlw	0
 20607  00388E  6E2B               	movwf	?_inputHandler+1,c
 20608  003890  0E00               	movlw	0
 20609  003892  6E2A               	movwf	?_inputHandler,c
 20610  003894  0012               	return	
 20611  003896                     i2l7394:
 20612                           
 20613                           ;UI.c: 453: up = 1;
 20614  003896  0E00               	movlw	0
 20615  003898  6E76               	movwf	_up+1,c
 20616  00389A  0E01               	movlw	1
 20617  00389C  6E75               	movwf	_up,c
 20618                           
 20619                           ;UI.c: 454: return 1;
 20620  00389E  0E00               	movlw	0
 20621  0038A0  6E2B               	movwf	?_inputHandler+1,c
 20622  0038A2  0E01               	movlw	1
 20623  0038A4  6E2A               	movwf	?_inputHandler,c
 20624  0038A6  0012               	return	
 20625  0038A8                     i2l7398:
 20626                           
 20627                           ;UI.c: 456: down = 1;
 20628  0038A8  0E00               	movlw	0
 20629  0038AA  6E5E               	movwf	_down+1,c
 20630  0038AC  0E01               	movlw	1
 20631  0038AE  6E5D               	movwf	_down,c
 20632                           
 20633                           ;UI.c: 457: return 1;
 20634  0038B0  0E00               	movlw	0
 20635  0038B2  6E2B               	movwf	?_inputHandler+1,c
 20636  0038B4  0E01               	movlw	1
 20637  0038B6  6E2A               	movwf	?_inputHandler,c
 20638  0038B8  0012               	return	
 20639  0038BA                     i2l7402:
 20640                           
 20641                           ;UI.c: 459: enter = 1;
 20642  0038BA  0E00               	movlw	0
 20643  0038BC  6E60               	movwf	_enter+1,c
 20644  0038BE  0E01               	movlw	1
 20645  0038C0  6E5F               	movwf	_enter,c
 20646                           
 20647                           ;UI.c: 460: return 1;
 20648  0038C2  0E00               	movlw	0
 20649  0038C4  6E2B               	movwf	?_inputHandler+1,c
 20650  0038C6  0E01               	movlw	1
 20651  0038C8  6E2A               	movwf	?_inputHandler,c
 20652  0038CA  0012               	return	
 20653  0038CC                     i2l7406:
 20654                           
 20655                           ;UI.c: 462: back = 1;
 20656  0038CC  0E00               	movlw	0
 20657  0038CE  6E5C               	movwf	_back+1,c
 20658  0038D0  0E01               	movlw	1
 20659  0038D2  6E5B               	movwf	_back,c
 20660                           
 20661                           ;UI.c: 463: return 1;
 20662  0038D4  0E00               	movlw	0
 20663  0038D6  6E2B               	movwf	?_inputHandler+1,c
 20664  0038D8  0E01               	movlw	1
 20665  0038DA  6E2A               	movwf	?_inputHandler,c
 20666  0038DC  0012               	return	
 20667  0038DE                     i2l7410:
 20668                           
 20669                           ;UI.c: 466: return 1;
 20670  0038DE  0E00               	movlw	0
 20671  0038E0  6E2B               	movwf	?_inputHandler+1,c
 20672  0038E2  0E01               	movlw	1
 20673  0038E4  6E2A               	movwf	?_inputHandler,c
 20674                           
 20675                           ;UI.c: 467: }
 20676  0038E6  0012               	return	
 20677  0038E8                     i2l7416:
 20678  0038E8  507D               	movf	_input,w,c	;volatile
 20679                           
 20680                           ; Switch size 1, requested type "space"
 20681                           ; Number of cases is 7, Range of values is 49 to 68
 20682                           ; switch strategies available:
 20683                           ; Name         Instructions Cycles
 20684                           ; simple_byte           22    12 (average)
 20685                           ;	Chosen strategy is simple_byte
 20686  0038EA  0A31               	xorlw	49	; case 49
 20687  0038EC  B4D8               	btfsc	status,2,c
 20688  0038EE  D789               	goto	i2l7346
 20689  0038F0  0A03               	xorlw	3	; case 50
 20690  0038F2  B4D8               	btfsc	status,2,c
 20691  0038F4  D799               	goto	i2l7360
 20692  0038F6  0A01               	xorlw	1	; case 51
 20693  0038F8  B4D8               	btfsc	status,2,c
 20694  0038FA  D7BA               	goto	i2l7380
 20695  0038FC  0A72               	xorlw	114	; case 65
 20696  0038FE  B4D8               	btfsc	status,2,c
 20697  003900  D7CA               	goto	i2l7394
 20698  003902  0A03               	xorlw	3	; case 66
 20699  003904  B4D8               	btfsc	status,2,c
 20700  003906  D7D0               	goto	i2l7398
 20701  003908  0A01               	xorlw	1	; case 67
 20702  00390A  B4D8               	btfsc	status,2,c
 20703  00390C  D7D6               	goto	i2l7402
 20704  00390E  0A07               	xorlw	7	; case 68
 20705  003910  B4D8               	btfsc	status,2,c
 20706  003912  D7DC               	goto	i2l7406
 20707  003914  D7E4               	goto	i2l7410
 20708  003916                     __end_of_inputHandler:
 20709                           	opt stack 0
 20710                           pclatu	equ	0xFFB
 20711                           pclath	equ	0xFFA
 20712                           tblptru	equ	0xFF8
 20713                           tblptrh	equ	0xFF7
 20714                           tblptrl	equ	0xFF6
 20715                           tablat	equ	0xFF5
 20716                           prodh	equ	0xFF4
 20717                           prodl	equ	0xFF3
 20718                           intcon	equ	0xFF2
 20719                           intcon2	equ	0xFF1
 20720                           intcon3	equ	0xFF0
 20721                           indf0	equ	0xFEF
 20722                           postinc0	equ	0xFEE
 20723                           fsr0h	equ	0xFEA
 20724                           fsr0l	equ	0xFE9
 20725                           wreg	equ	0xFE8
 20726                           postdec1	equ	0xFE5
 20727                           fsr1h	equ	0xFE2
 20728                           fsr1l	equ	0xFE1
 20729                           indf2	equ	0xFDF
 20730                           postinc2	equ	0xFDE
 20731                           postdec2	equ	0xFDD
 20732                           fsr2h	equ	0xFDA
 20733                           fsr2l	equ	0xFD9
 20734                           status	equ	0xFD8
 20735                           
 20736 ;; *************** function i2_change_state_to_menu_22 *****************
 20737 ;; Defined at:
 20738 ;;		line 501 in file "UI.c"
 20739 ;; Parameters:    Size  Location     Type
 20740 ;;		None
 20741 ;; Auto vars:     Size  Location     Type
 20742 ;;		None
 20743 ;; Return value:  Size  Location     Type
 20744 ;;                  1    wreg      void 
 20745 ;; Registers used:
 20746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20747 ;; Tracked objects:
 20748 ;;		On entry : 0/0
 20749 ;;		On exit  : 0/0
 20750 ;;		Unchanged: 0/0
 20751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;Total ram usage:        0 bytes
 20757 ;; Hardware stack levels used:    1
 20758 ;; Hardware stack levels required when called:    3
 20759 ;; This function calls:
 20760 ;;		i2_lcdInst
 20761 ;;		i2_printf
 20762 ;; This function is called by:
 20763 ;;		_updateMenu
 20764 ;;		_inputHandler
 20765 ;; This function uses a non-reentrant model
 20766 ;;
 20767                           
 20768                           	psect	text67
 20769  005218                     __ptext67:
 20770                           	opt stack 0
 20771  005218                     i2_change_state_to_menu_22:
 20772                           	opt stack 19
 20773                           
 20774                           ;UI.c: 502: cur_state = 22;
 20775                           
 20776                           ;incstack = 0
 20777  005218  0E00               	movlw	0
 20778  00521A  0100               	movlb	0	; () banked
 20779  00521C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20780  00521E  0E16               	movlw	22
 20781  005220  6FEC               	movwf	_cur_state& (0+255),b
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;UI.c: 504: lcdInst(0b10000000);;
 20785  005222  0E80               	movlw	128
 20786  005224  EC40  F02B         	call	i2_lcdInst
 20787                           
 20788                           ;UI.c: 505: printf("2. SORT        <");
 20789  005228  0ECE               	movlw	low STR_34
 20790  00522A  6E0D               	movwf	i2printf@f,c
 20791  00522C  0EFD               	movlw	high STR_34
 20792  00522E  6E0E               	movwf	i2printf@f+1,c
 20793  005230  EC9A  F00F         	call	i2_printf	;wreg free
 20794                           
 20795                           ;UI.c: 506: lcdInst(0b11000000);;
 20796  005234  0EC0               	movlw	192
 20797  005236  EC40  F02B         	call	i2_lcdInst
 20798                           
 20799                           ;UI.c: 507: printf("3. LOGS         ");
 20800  00523A  0E13               	movlw	low STR_36
 20801  00523C  6E0D               	movwf	i2printf@f,c
 20802  00523E  0EFD               	movlw	high STR_36
 20803  005240  6E0E               	movwf	i2printf@f+1,c
 20804  005242  EC9A  F00F         	call	i2_printf	;wreg free
 20805  005246  0012               	return		;funcret
 20806  005248                     __end_ofi2_change_state_to_menu_22:
 20807                           	opt stack 0
 20808                           pclatu	equ	0xFFB
 20809                           pclath	equ	0xFFA
 20810                           tblptru	equ	0xFF8
 20811                           tblptrh	equ	0xFF7
 20812                           tblptrl	equ	0xFF6
 20813                           tablat	equ	0xFF5
 20814                           prodh	equ	0xFF4
 20815                           prodl	equ	0xFF3
 20816                           intcon	equ	0xFF2
 20817                           intcon2	equ	0xFF1
 20818                           intcon3	equ	0xFF0
 20819                           indf0	equ	0xFEF
 20820                           postinc0	equ	0xFEE
 20821                           fsr0h	equ	0xFEA
 20822                           fsr0l	equ	0xFE9
 20823                           wreg	equ	0xFE8
 20824                           postdec1	equ	0xFE5
 20825                           fsr1h	equ	0xFE2
 20826                           fsr1l	equ	0xFE1
 20827                           indf2	equ	0xFDF
 20828                           postinc2	equ	0xFDE
 20829                           postdec2	equ	0xFDD
 20830                           fsr2h	equ	0xFDA
 20831                           fsr2l	equ	0xFD9
 20832                           status	equ	0xFD8
 20833                           
 20834 ;; *************** function i2_change_state_to_menu_12 *****************
 20835 ;; Defined at:
 20836 ;;		line 493 in file "UI.c"
 20837 ;; Parameters:    Size  Location     Type
 20838 ;;		None
 20839 ;; Auto vars:     Size  Location     Type
 20840 ;;		None
 20841 ;; Return value:  Size  Location     Type
 20842 ;;                  1    wreg      void 
 20843 ;; Registers used:
 20844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20845 ;; Tracked objects:
 20846 ;;		On entry : 0/0
 20847 ;;		On exit  : 0/0
 20848 ;;		Unchanged: 0/0
 20849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;Total ram usage:        0 bytes
 20855 ;; Hardware stack levels used:    1
 20856 ;; Hardware stack levels required when called:    3
 20857 ;; This function calls:
 20858 ;;		i2_lcdInst
 20859 ;;		i2_printf
 20860 ;; This function is called by:
 20861 ;;		_updateMenu
 20862 ;;		_inputHandler
 20863 ;; This function uses a non-reentrant model
 20864 ;;
 20865                           
 20866                           	psect	text68
 20867  005248                     __ptext68:
 20868                           	opt stack 0
 20869  005248                     i2_change_state_to_menu_12:
 20870                           	opt stack 19
 20871                           
 20872                           ;UI.c: 494: cur_state = 12;
 20873                           
 20874                           ;incstack = 0
 20875  005248  0E00               	movlw	0
 20876  00524A  0100               	movlb	0	; () banked
 20877  00524C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20878  00524E  0E0C               	movlw	12
 20879  005250  6FEC               	movwf	_cur_state& (0+255),b
 20880                           
 20881                           ; BSR set to: 0
 20882                           ;UI.c: 496: lcdInst(0b10000000);;
 20883  005252  0E80               	movlw	128
 20884  005254  EC40  F02B         	call	i2_lcdInst
 20885                           
 20886                           ;UI.c: 497: printf("1. DATE/TIME    ");
 20887  005258  0E35               	movlw	low STR_33
 20888  00525A  6E0D               	movwf	i2printf@f,c
 20889  00525C  0EFD               	movlw	high STR_33
 20890  00525E  6E0E               	movwf	i2printf@f+1,c
 20891  005260  EC9A  F00F         	call	i2_printf	;wreg free
 20892                           
 20893                           ;UI.c: 498: lcdInst(0b11000000);;
 20894  005264  0EC0               	movlw	192
 20895  005266  EC40  F02B         	call	i2_lcdInst
 20896                           
 20897                           ;UI.c: 499: printf("2. SORT        <");
 20898  00526A  0ECE               	movlw	low STR_34
 20899  00526C  6E0D               	movwf	i2printf@f,c
 20900  00526E  0EFD               	movlw	high STR_34
 20901  005270  6E0E               	movwf	i2printf@f+1,c
 20902  005272  EC9A  F00F         	call	i2_printf	;wreg free
 20903  005276  0012               	return		;funcret
 20904  005278                     __end_ofi2_change_state_to_menu_12:
 20905                           	opt stack 0
 20906                           pclatu	equ	0xFFB
 20907                           pclath	equ	0xFFA
 20908                           tblptru	equ	0xFF8
 20909                           tblptrh	equ	0xFF7
 20910                           tblptrl	equ	0xFF6
 20911                           tablat	equ	0xFF5
 20912                           prodh	equ	0xFF4
 20913                           prodl	equ	0xFF3
 20914                           intcon	equ	0xFF2
 20915                           intcon2	equ	0xFF1
 20916                           intcon3	equ	0xFF0
 20917                           indf0	equ	0xFEF
 20918                           postinc0	equ	0xFEE
 20919                           fsr0h	equ	0xFEA
 20920                           fsr0l	equ	0xFE9
 20921                           wreg	equ	0xFE8
 20922                           postdec1	equ	0xFE5
 20923                           fsr1h	equ	0xFE2
 20924                           fsr1l	equ	0xFE1
 20925                           indf2	equ	0xFDF
 20926                           postinc2	equ	0xFDE
 20927                           postdec2	equ	0xFDD
 20928                           fsr2h	equ	0xFDA
 20929                           fsr2l	equ	0xFD9
 20930                           status	equ	0xFD8
 20931                           
 20932 ;; *************** function _change_state_to_menu_23 *****************
 20933 ;; Defined at:
 20934 ;;		line 509 in file "UI.c"
 20935 ;; Parameters:    Size  Location     Type
 20936 ;;		None
 20937 ;; Auto vars:     Size  Location     Type
 20938 ;;		None
 20939 ;; Return value:  Size  Location     Type
 20940 ;;                  1    wreg      void 
 20941 ;; Registers used:
 20942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20943 ;; Tracked objects:
 20944 ;;		On entry : 0/0
 20945 ;;		On exit  : 0/0
 20946 ;;		Unchanged: 0/0
 20947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20952 ;;Total ram usage:        0 bytes
 20953 ;; Hardware stack levels used:    1
 20954 ;; Hardware stack levels required when called:    3
 20955 ;; This function calls:
 20956 ;;		i2_lcdInst
 20957 ;;		i2_printf
 20958 ;; This function is called by:
 20959 ;;		_updateMenu
 20960 ;;		_inputHandler
 20961 ;; This function uses a non-reentrant model
 20962 ;;
 20963                           
 20964                           	psect	text69
 20965  005278                     __ptext69:
 20966                           	opt stack 0
 20967  005278                     _change_state_to_menu_23:
 20968                           	opt stack 18
 20969                           
 20970                           ;UI.c: 510: cur_state = 23;
 20971                           
 20972                           ;incstack = 0
 20973  005278  0E00               	movlw	0
 20974  00527A  0100               	movlb	0	; () banked
 20975  00527C  6FED               	movwf	(_cur_state+1)& (0+255),b
 20976  00527E  0E17               	movlw	23
 20977  005280  6FEC               	movwf	_cur_state& (0+255),b
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;UI.c: 512: lcdInst(0b10000000);;
 20981  005282  0E80               	movlw	128
 20982  005284  EC40  F02B         	call	i2_lcdInst
 20983                           
 20984                           ;UI.c: 513: printf("2. SORT         ");
 20985  005288  0E24               	movlw	low STR_32
 20986  00528A  6E0D               	movwf	i2printf@f,c
 20987  00528C  0EFD               	movlw	high STR_32
 20988  00528E  6E0E               	movwf	i2printf@f+1,c
 20989  005290  EC9A  F00F         	call	i2_printf	;wreg free
 20990                           
 20991                           ;UI.c: 514: lcdInst(0b11000000);;
 20992  005294  0EC0               	movlw	192
 20993  005296  EC40  F02B         	call	i2_lcdInst
 20994                           
 20995                           ;UI.c: 515: printf("3. LOGS        <");
 20996  00529A  0EBD               	movlw	low STR_38
 20997  00529C  6E0D               	movwf	i2printf@f,c
 20998  00529E  0EFD               	movlw	high STR_38
 20999  0052A0  6E0E               	movwf	i2printf@f+1,c
 21000  0052A2  EC9A  F00F         	call	i2_printf	;wreg free
 21001  0052A6  0012               	return		;funcret
 21002  0052A8                     __end_of_change_state_to_menu_23:
 21003                           	opt stack 0
 21004                           pclatu	equ	0xFFB
 21005                           pclath	equ	0xFFA
 21006                           tblptru	equ	0xFF8
 21007                           tblptrh	equ	0xFF7
 21008                           tblptrl	equ	0xFF6
 21009                           tablat	equ	0xFF5
 21010                           prodh	equ	0xFF4
 21011                           prodl	equ	0xFF3
 21012                           intcon	equ	0xFF2
 21013                           intcon2	equ	0xFF1
 21014                           intcon3	equ	0xFF0
 21015                           indf0	equ	0xFEF
 21016                           postinc0	equ	0xFEE
 21017                           fsr0h	equ	0xFEA
 21018                           fsr0l	equ	0xFE9
 21019                           wreg	equ	0xFE8
 21020                           postdec1	equ	0xFE5
 21021                           fsr1h	equ	0xFE2
 21022                           fsr1l	equ	0xFE1
 21023                           indf2	equ	0xFDF
 21024                           postinc2	equ	0xFDE
 21025                           postdec2	equ	0xFDD
 21026                           fsr2h	equ	0xFDA
 21027                           fsr2l	equ	0xFD9
 21028                           status	equ	0xFD8
 21029                           
 21030 ;; *************** function _change_state_to_menu_11 *****************
 21031 ;; Defined at:
 21032 ;;		line 485 in file "UI.c"
 21033 ;; Parameters:    Size  Location     Type
 21034 ;;		None
 21035 ;; Auto vars:     Size  Location     Type
 21036 ;;		None
 21037 ;; Return value:  Size  Location     Type
 21038 ;;                  1    wreg      void 
 21039 ;; Registers used:
 21040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21041 ;; Tracked objects:
 21042 ;;		On entry : 0/0
 21043 ;;		On exit  : 0/0
 21044 ;;		Unchanged: 0/0
 21045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21050 ;;Total ram usage:        0 bytes
 21051 ;; Hardware stack levels used:    1
 21052 ;; Hardware stack levels required when called:    3
 21053 ;; This function calls:
 21054 ;;		i2_lcdInst
 21055 ;;		i2_printf
 21056 ;; This function is called by:
 21057 ;;		_updateMenu
 21058 ;;		_inputHandler
 21059 ;; This function uses a non-reentrant model
 21060 ;;
 21061                           
 21062                           	psect	text70
 21063  0052A8                     __ptext70:
 21064                           	opt stack 0
 21065  0052A8                     _change_state_to_menu_11:
 21066                           	opt stack 18
 21067                           
 21068                           ;UI.c: 486: cur_state = 11;
 21069                           
 21070                           ;incstack = 0
 21071  0052A8  0E00               	movlw	0
 21072  0052AA  0100               	movlb	0	; () banked
 21073  0052AC  6FED               	movwf	(_cur_state+1)& (0+255),b
 21074  0052AE  0E0B               	movlw	11
 21075  0052B0  6FEC               	movwf	_cur_state& (0+255),b
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;UI.c: 488: lcdInst(0b10000000);;
 21079  0052B2  0E80               	movlw	128
 21080  0052B4  EC40  F02B         	call	i2_lcdInst
 21081                           
 21082                           ;UI.c: 489: printf("1. DATE/TIME   <");
 21083  0052B8  0EDF               	movlw	low STR_31
 21084  0052BA  6E0D               	movwf	i2printf@f,c
 21085  0052BC  0EFD               	movlw	high STR_31
 21086  0052BE  6E0E               	movwf	i2printf@f+1,c
 21087  0052C0  EC9A  F00F         	call	i2_printf	;wreg free
 21088                           
 21089                           ;UI.c: 490: lcdInst(0b11000000);;
 21090  0052C4  0EC0               	movlw	192
 21091  0052C6  EC40  F02B         	call	i2_lcdInst
 21092                           
 21093                           ;UI.c: 491: printf("2. SORT         ");
 21094  0052CA  0E24               	movlw	low STR_32
 21095  0052CC  6E0D               	movwf	i2printf@f,c
 21096  0052CE  0EFD               	movlw	high STR_32
 21097  0052D0  6E0E               	movwf	i2printf@f+1,c
 21098  0052D2  EC9A  F00F         	call	i2_printf	;wreg free
 21099  0052D6  0012               	return		;funcret
 21100  0052D8                     __end_of_change_state_to_menu_11:
 21101                           	opt stack 0
 21102                           pclatu	equ	0xFFB
 21103                           pclath	equ	0xFFA
 21104                           tblptru	equ	0xFF8
 21105                           tblptrh	equ	0xFF7
 21106                           tblptrl	equ	0xFF6
 21107                           tablat	equ	0xFF5
 21108                           prodh	equ	0xFF4
 21109                           prodl	equ	0xFF3
 21110                           intcon	equ	0xFF2
 21111                           intcon2	equ	0xFF1
 21112                           intcon3	equ	0xFF0
 21113                           indf0	equ	0xFEF
 21114                           postinc0	equ	0xFEE
 21115                           fsr0h	equ	0xFEA
 21116                           fsr0l	equ	0xFE9
 21117                           wreg	equ	0xFE8
 21118                           postdec1	equ	0xFE5
 21119                           fsr1h	equ	0xFE2
 21120                           fsr1l	equ	0xFE1
 21121                           indf2	equ	0xFDF
 21122                           postinc2	equ	0xFDE
 21123                           postdec2	equ	0xFDD
 21124                           fsr2h	equ	0xFDA
 21125                           fsr2l	equ	0xFD9
 21126                           status	equ	0xFD8
 21127                           
 21128 ;; *************** function _change_state_to_logs_34 *****************
 21129 ;; Defined at:
 21130 ;;		line 552 in file "UI.c"
 21131 ;; Parameters:    Size  Location     Type
 21132 ;;		None
 21133 ;; Auto vars:     Size  Location     Type
 21134 ;;		None
 21135 ;; Return value:  Size  Location     Type
 21136 ;;                  1    wreg      void 
 21137 ;; Registers used:
 21138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21139 ;; Tracked objects:
 21140 ;;		On entry : 0/0
 21141 ;;		On exit  : 0/0
 21142 ;;		Unchanged: 0/0
 21143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21148 ;;Total ram usage:        0 bytes
 21149 ;; Hardware stack levels used:    1
 21150 ;; Hardware stack levels required when called:    3
 21151 ;; This function calls:
 21152 ;;		i2_lcdInst
 21153 ;;		i2_printf
 21154 ;; This function is called by:
 21155 ;;		_updateMenu
 21156 ;;		_inputHandler
 21157 ;; This function uses a non-reentrant model
 21158 ;;
 21159                           
 21160                           	psect	text71
 21161  0052D8                     __ptext71:
 21162                           	opt stack 0
 21163  0052D8                     _change_state_to_logs_34:
 21164                           	opt stack 18
 21165                           
 21166                           ;UI.c: 553: cur_state = 1034;
 21167                           
 21168                           ;incstack = 0
 21169  0052D8  0E04               	movlw	4
 21170  0052DA  0100               	movlb	0	; () banked
 21171  0052DC  6FED               	movwf	(_cur_state+1)& (0+255),b
 21172  0052DE  0E0A               	movlw	10
 21173  0052E0  6FEC               	movwf	_cur_state& (0+255),b
 21174                           
 21175                           ; BSR set to: 0
 21176                           ;UI.c: 554: lcdInst(0b10000000);;
 21177  0052E2  0E80               	movlw	128
 21178  0052E4  EC40  F02B         	call	i2_lcdInst
 21179                           
 21180                           ;UI.c: 555: printf("LOG 3           ");
 21181  0052E8  0EF1               	movlw	low STR_44
 21182  0052EA  6E0D               	movwf	i2printf@f,c
 21183  0052EC  0EFC               	movlw	high STR_44
 21184  0052EE  6E0E               	movwf	i2printf@f+1,c
 21185  0052F0  EC9A  F00F         	call	i2_printf	;wreg free
 21186                           
 21187                           ;UI.c: 556: lcdInst(0b11000000);;
 21188  0052F4  0EC0               	movlw	192
 21189  0052F6  EC40  F02B         	call	i2_lcdInst
 21190                           
 21191                           ;UI.c: 557: printf("LOG 4          <");
 21192  0052FA  0EAC               	movlw	low STR_50
 21193  0052FC  6E0D               	movwf	i2printf@f,c
 21194  0052FE  0EFD               	movlw	high STR_50
 21195  005300  6E0E               	movwf	i2printf@f+1,c
 21196  005302  EC9A  F00F         	call	i2_printf	;wreg free
 21197  005306  0012               	return		;funcret
 21198  005308                     __end_of_change_state_to_logs_34:
 21199                           	opt stack 0
 21200                           pclatu	equ	0xFFB
 21201                           pclath	equ	0xFFA
 21202                           tblptru	equ	0xFF8
 21203                           tblptrh	equ	0xFF7
 21204                           tblptrl	equ	0xFF6
 21205                           tablat	equ	0xFF5
 21206                           prodh	equ	0xFF4
 21207                           prodl	equ	0xFF3
 21208                           intcon	equ	0xFF2
 21209                           intcon2	equ	0xFF1
 21210                           intcon3	equ	0xFF0
 21211                           indf0	equ	0xFEF
 21212                           postinc0	equ	0xFEE
 21213                           fsr0h	equ	0xFEA
 21214                           fsr0l	equ	0xFE9
 21215                           wreg	equ	0xFE8
 21216                           postdec1	equ	0xFE5
 21217                           fsr1h	equ	0xFE2
 21218                           fsr1l	equ	0xFE1
 21219                           indf2	equ	0xFDF
 21220                           postinc2	equ	0xFDE
 21221                           postdec2	equ	0xFDD
 21222                           fsr2h	equ	0xFDA
 21223                           fsr2l	equ	0xFD9
 21224                           status	equ	0xFD8
 21225                           
 21226 ;; *************** function _change_state_to_logs_33 *****************
 21227 ;; Defined at:
 21228 ;;		line 545 in file "UI.c"
 21229 ;; Parameters:    Size  Location     Type
 21230 ;;		None
 21231 ;; Auto vars:     Size  Location     Type
 21232 ;;		None
 21233 ;; Return value:  Size  Location     Type
 21234 ;;                  1    wreg      void 
 21235 ;; Registers used:
 21236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21237 ;; Tracked objects:
 21238 ;;		On entry : 0/0
 21239 ;;		On exit  : 0/0
 21240 ;;		Unchanged: 0/0
 21241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21246 ;;Total ram usage:        0 bytes
 21247 ;; Hardware stack levels used:    1
 21248 ;; Hardware stack levels required when called:    3
 21249 ;; This function calls:
 21250 ;;		i2_lcdInst
 21251 ;;		i2_printf
 21252 ;; This function is called by:
 21253 ;;		_updateMenu
 21254 ;;		_inputHandler
 21255 ;; This function uses a non-reentrant model
 21256 ;;
 21257                           
 21258                           	psect	text72
 21259  005308                     __ptext72:
 21260                           	opt stack 0
 21261  005308                     _change_state_to_logs_33:
 21262                           	opt stack 18
 21263                           
 21264                           ;UI.c: 546: cur_state = 1033;
 21265                           
 21266                           ;incstack = 0
 21267  005308  0E04               	movlw	4
 21268  00530A  0100               	movlb	0	; () banked
 21269  00530C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21270  00530E  0E09               	movlw	9
 21271  005310  6FEC               	movwf	_cur_state& (0+255),b
 21272                           
 21273                           ; BSR set to: 0
 21274                           ;UI.c: 547: lcdInst(0b10000000);;
 21275  005312  0E80               	movlw	128
 21276  005314  EC40  F02B         	call	i2_lcdInst
 21277                           
 21278                           ;UI.c: 548: printf("LOG 3          <");
 21279  005318  0E9B               	movlw	low STR_46
 21280  00531A  6E0D               	movwf	i2printf@f,c
 21281  00531C  0EFD               	movlw	high STR_46
 21282  00531E  6E0E               	movwf	i2printf@f+1,c
 21283  005320  EC9A  F00F         	call	i2_printf	;wreg free
 21284                           
 21285                           ;UI.c: 549: lcdInst(0b11000000);;
 21286  005324  0EC0               	movlw	192
 21287  005326  EC40  F02B         	call	i2_lcdInst
 21288                           
 21289                           ;UI.c: 550: printf("LOG 4           ");
 21290  00532A  0E02               	movlw	low STR_48
 21291  00532C  6E0D               	movwf	i2printf@f,c
 21292  00532E  0EFD               	movlw	high STR_48
 21293  005330  6E0E               	movwf	i2printf@f+1,c
 21294  005332  EC9A  F00F         	call	i2_printf	;wreg free
 21295  005336  0012               	return		;funcret
 21296  005338                     __end_of_change_state_to_logs_33:
 21297                           	opt stack 0
 21298                           pclatu	equ	0xFFB
 21299                           pclath	equ	0xFFA
 21300                           tblptru	equ	0xFF8
 21301                           tblptrh	equ	0xFF7
 21302                           tblptrl	equ	0xFF6
 21303                           tablat	equ	0xFF5
 21304                           prodh	equ	0xFF4
 21305                           prodl	equ	0xFF3
 21306                           intcon	equ	0xFF2
 21307                           intcon2	equ	0xFF1
 21308                           intcon3	equ	0xFF0
 21309                           indf0	equ	0xFEF
 21310                           postinc0	equ	0xFEE
 21311                           fsr0h	equ	0xFEA
 21312                           fsr0l	equ	0xFE9
 21313                           wreg	equ	0xFE8
 21314                           postdec1	equ	0xFE5
 21315                           fsr1h	equ	0xFE2
 21316                           fsr1l	equ	0xFE1
 21317                           indf2	equ	0xFDF
 21318                           postinc2	equ	0xFDE
 21319                           postdec2	equ	0xFDD
 21320                           fsr2h	equ	0xFDA
 21321                           fsr2l	equ	0xFD9
 21322                           status	equ	0xFD8
 21323                           
 21324 ;; *************** function _change_state_to_logs_23 *****************
 21325 ;; Defined at:
 21326 ;;		line 538 in file "UI.c"
 21327 ;; Parameters:    Size  Location     Type
 21328 ;;		None
 21329 ;; Auto vars:     Size  Location     Type
 21330 ;;		None
 21331 ;; Return value:  Size  Location     Type
 21332 ;;                  1    wreg      void 
 21333 ;; Registers used:
 21334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21335 ;; Tracked objects:
 21336 ;;		On entry : 0/0
 21337 ;;		On exit  : 0/0
 21338 ;;		Unchanged: 0/0
 21339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21344 ;;Total ram usage:        0 bytes
 21345 ;; Hardware stack levels used:    1
 21346 ;; Hardware stack levels required when called:    3
 21347 ;; This function calls:
 21348 ;;		i2_lcdInst
 21349 ;;		i2_printf
 21350 ;; This function is called by:
 21351 ;;		_updateMenu
 21352 ;;		_inputHandler
 21353 ;; This function uses a non-reentrant model
 21354 ;;
 21355                           
 21356                           	psect	text73
 21357  0053F6                     __ptext73:
 21358                           	opt stack 0
 21359  0053F6                     _change_state_to_logs_23:
 21360                           	opt stack 18
 21361                           
 21362                           ;UI.c: 539: cur_state = 1023;
 21363                           
 21364                           ;incstack = 0
 21365  0053F6  0E03               	movlw	3
 21366  0053F8  0100               	movlb	0	; () banked
 21367  0053FA  6FED               	movwf	(_cur_state+1)& (0+255),b
 21368  0053FC  69EC               	setf	_cur_state& (0+255),b
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;UI.c: 540: lcdInst(0b10000000);;
 21372  0053FE  0E80               	movlw	128
 21373  005400  EC40  F02B         	call	i2_lcdInst
 21374                           
 21375                           ;UI.c: 541: printf("LOG 2           ");
 21376  005404  0EE0               	movlw	low STR_40
 21377  005406  6E0D               	movwf	i2printf@f,c
 21378  005408  0EFC               	movlw	high STR_40
 21379  00540A  6E0E               	movwf	i2printf@f+1,c
 21380  00540C  EC9A  F00F         	call	i2_printf	;wreg free
 21381                           
 21382                           ;UI.c: 542: lcdInst(0b11000000);;
 21383  005410  0EC0               	movlw	192
 21384  005412  EC40  F02B         	call	i2_lcdInst
 21385                           
 21386                           ;UI.c: 543: printf("LOG 3          <");
 21387  005416  0E9B               	movlw	low STR_46
 21388  005418  6E0D               	movwf	i2printf@f,c
 21389  00541A  0EFD               	movlw	high STR_46
 21390  00541C  6E0E               	movwf	i2printf@f+1,c
 21391  00541E  EC9A  F00F         	call	i2_printf	;wreg free
 21392  005422  0012               	return		;funcret
 21393  005424                     __end_of_change_state_to_logs_23:
 21394                           	opt stack 0
 21395                           pclatu	equ	0xFFB
 21396                           pclath	equ	0xFFA
 21397                           tblptru	equ	0xFF8
 21398                           tblptrh	equ	0xFF7
 21399                           tblptrl	equ	0xFF6
 21400                           tablat	equ	0xFF5
 21401                           prodh	equ	0xFF4
 21402                           prodl	equ	0xFF3
 21403                           intcon	equ	0xFF2
 21404                           intcon2	equ	0xFF1
 21405                           intcon3	equ	0xFF0
 21406                           indf0	equ	0xFEF
 21407                           postinc0	equ	0xFEE
 21408                           fsr0h	equ	0xFEA
 21409                           fsr0l	equ	0xFE9
 21410                           wreg	equ	0xFE8
 21411                           postdec1	equ	0xFE5
 21412                           fsr1h	equ	0xFE2
 21413                           fsr1l	equ	0xFE1
 21414                           indf2	equ	0xFDF
 21415                           postinc2	equ	0xFDE
 21416                           postdec2	equ	0xFDD
 21417                           fsr2h	equ	0xFDA
 21418                           fsr2l	equ	0xFD9
 21419                           status	equ	0xFD8
 21420                           
 21421 ;; *************** function _change_state_to_logs_22 *****************
 21422 ;; Defined at:
 21423 ;;		line 531 in file "UI.c"
 21424 ;; Parameters:    Size  Location     Type
 21425 ;;		None
 21426 ;; Auto vars:     Size  Location     Type
 21427 ;;		None
 21428 ;; Return value:  Size  Location     Type
 21429 ;;                  1    wreg      void 
 21430 ;; Registers used:
 21431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21432 ;; Tracked objects:
 21433 ;;		On entry : 0/0
 21434 ;;		On exit  : 0/0
 21435 ;;		Unchanged: 0/0
 21436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21441 ;;Total ram usage:        0 bytes
 21442 ;; Hardware stack levels used:    1
 21443 ;; Hardware stack levels required when called:    3
 21444 ;; This function calls:
 21445 ;;		i2_lcdInst
 21446 ;;		i2_printf
 21447 ;; This function is called by:
 21448 ;;		_updateMenu
 21449 ;;		_inputHandler
 21450 ;; This function uses a non-reentrant model
 21451 ;;
 21452                           
 21453                           	psect	text74
 21454  005338                     __ptext74:
 21455                           	opt stack 0
 21456  005338                     _change_state_to_logs_22:
 21457                           	opt stack 18
 21458                           
 21459                           ;UI.c: 532: cur_state = 1022;
 21460                           
 21461                           ;incstack = 0
 21462  005338  0E03               	movlw	3
 21463  00533A  0100               	movlb	0	; () banked
 21464  00533C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21465  00533E  0EFE               	movlw	254
 21466  005340  6FEC               	movwf	_cur_state& (0+255),b
 21467                           
 21468                           ; BSR set to: 0
 21469                           ;UI.c: 533: lcdInst(0b10000000);;
 21470  005342  0E80               	movlw	128
 21471  005344  EC40  F02B         	call	i2_lcdInst
 21472                           
 21473                           ;UI.c: 534: printf("LOG 2          <");
 21474  005348  0E8A               	movlw	low STR_42
 21475  00534A  6E0D               	movwf	i2printf@f,c
 21476  00534C  0EFD               	movlw	high STR_42
 21477  00534E  6E0E               	movwf	i2printf@f+1,c
 21478  005350  EC9A  F00F         	call	i2_printf	;wreg free
 21479                           
 21480                           ;UI.c: 535: lcdInst(0b11000000);;
 21481  005354  0EC0               	movlw	192
 21482  005356  EC40  F02B         	call	i2_lcdInst
 21483                           
 21484                           ;UI.c: 536: printf("LOG 3           ");
 21485  00535A  0EF1               	movlw	low STR_44
 21486  00535C  6E0D               	movwf	i2printf@f,c
 21487  00535E  0EFC               	movlw	high STR_44
 21488  005360  6E0E               	movwf	i2printf@f+1,c
 21489  005362  EC9A  F00F         	call	i2_printf	;wreg free
 21490  005366  0012               	return		;funcret
 21491  005368                     __end_of_change_state_to_logs_22:
 21492                           	opt stack 0
 21493                           pclatu	equ	0xFFB
 21494                           pclath	equ	0xFFA
 21495                           tblptru	equ	0xFF8
 21496                           tblptrh	equ	0xFF7
 21497                           tblptrl	equ	0xFF6
 21498                           tablat	equ	0xFF5
 21499                           prodh	equ	0xFF4
 21500                           prodl	equ	0xFF3
 21501                           intcon	equ	0xFF2
 21502                           intcon2	equ	0xFF1
 21503                           intcon3	equ	0xFF0
 21504                           indf0	equ	0xFEF
 21505                           postinc0	equ	0xFEE
 21506                           fsr0h	equ	0xFEA
 21507                           fsr0l	equ	0xFE9
 21508                           wreg	equ	0xFE8
 21509                           postdec1	equ	0xFE5
 21510                           fsr1h	equ	0xFE2
 21511                           fsr1l	equ	0xFE1
 21512                           indf2	equ	0xFDF
 21513                           postinc2	equ	0xFDE
 21514                           postdec2	equ	0xFDD
 21515                           fsr2h	equ	0xFDA
 21516                           fsr2l	equ	0xFD9
 21517                           status	equ	0xFD8
 21518                           
 21519 ;; *************** function _change_state_to_logs_12 *****************
 21520 ;; Defined at:
 21521 ;;		line 524 in file "UI.c"
 21522 ;; Parameters:    Size  Location     Type
 21523 ;;		None
 21524 ;; Auto vars:     Size  Location     Type
 21525 ;;		None
 21526 ;; Return value:  Size  Location     Type
 21527 ;;                  1    wreg      void 
 21528 ;; Registers used:
 21529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21530 ;; Tracked objects:
 21531 ;;		On entry : 0/0
 21532 ;;		On exit  : 0/0
 21533 ;;		Unchanged: 0/0
 21534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21539 ;;Total ram usage:        0 bytes
 21540 ;; Hardware stack levels used:    1
 21541 ;; Hardware stack levels required when called:    3
 21542 ;; This function calls:
 21543 ;;		i2_lcdInst
 21544 ;;		i2_printf
 21545 ;; This function is called by:
 21546 ;;		_updateMenu
 21547 ;;		_inputHandler
 21548 ;; This function uses a non-reentrant model
 21549 ;;
 21550                           
 21551                           	psect	text75
 21552  005368                     __ptext75:
 21553                           	opt stack 0
 21554  005368                     _change_state_to_logs_12:
 21555                           	opt stack 18
 21556                           
 21557                           ;UI.c: 525: cur_state = 1012;
 21558                           
 21559                           ;incstack = 0
 21560  005368  0E03               	movlw	3
 21561  00536A  0100               	movlb	0	; () banked
 21562  00536C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21563  00536E  0EF4               	movlw	244
 21564  005370  6FEC               	movwf	_cur_state& (0+255),b
 21565                           
 21566                           ; BSR set to: 0
 21567                           ;UI.c: 526: lcdInst(0b10000000);;
 21568  005372  0E80               	movlw	128
 21569  005374  EC40  F02B         	call	i2_lcdInst
 21570                           
 21571                           ;UI.c: 527: printf("LOG 1           ");
 21572  005378  0ECF               	movlw	low STR_41
 21573  00537A  6E0D               	movwf	i2printf@f,c
 21574  00537C  0EFC               	movlw	high STR_41
 21575  00537E  6E0E               	movwf	i2printf@f+1,c
 21576  005380  EC9A  F00F         	call	i2_printf	;wreg free
 21577                           
 21578                           ;UI.c: 528: lcdInst(0b11000000);;
 21579  005384  0EC0               	movlw	192
 21580  005386  EC40  F02B         	call	i2_lcdInst
 21581                           
 21582                           ;UI.c: 529: printf("LOG 2          <");
 21583  00538A  0E8A               	movlw	low STR_42
 21584  00538C  6E0D               	movwf	i2printf@f,c
 21585  00538E  0EFD               	movlw	high STR_42
 21586  005390  6E0E               	movwf	i2printf@f+1,c
 21587  005392  EC9A  F00F         	call	i2_printf	;wreg free
 21588  005396  0012               	return		;funcret
 21589  005398                     __end_of_change_state_to_logs_12:
 21590                           	opt stack 0
 21591                           pclatu	equ	0xFFB
 21592                           pclath	equ	0xFFA
 21593                           tblptru	equ	0xFF8
 21594                           tblptrh	equ	0xFF7
 21595                           tblptrl	equ	0xFF6
 21596                           tablat	equ	0xFF5
 21597                           prodh	equ	0xFF4
 21598                           prodl	equ	0xFF3
 21599                           intcon	equ	0xFF2
 21600                           intcon2	equ	0xFF1
 21601                           intcon3	equ	0xFF0
 21602                           indf0	equ	0xFEF
 21603                           postinc0	equ	0xFEE
 21604                           fsr0h	equ	0xFEA
 21605                           fsr0l	equ	0xFE9
 21606                           wreg	equ	0xFE8
 21607                           postdec1	equ	0xFE5
 21608                           fsr1h	equ	0xFE2
 21609                           fsr1l	equ	0xFE1
 21610                           indf2	equ	0xFDF
 21611                           postinc2	equ	0xFDE
 21612                           postdec2	equ	0xFDD
 21613                           fsr2h	equ	0xFDA
 21614                           fsr2l	equ	0xFD9
 21615                           status	equ	0xFD8
 21616                           
 21617 ;; *************** function _change_state_to_logs_11 *****************
 21618 ;; Defined at:
 21619 ;;		line 517 in file "UI.c"
 21620 ;; Parameters:    Size  Location     Type
 21621 ;;		None
 21622 ;; Auto vars:     Size  Location     Type
 21623 ;;		None
 21624 ;; Return value:  Size  Location     Type
 21625 ;;                  1    wreg      void 
 21626 ;; Registers used:
 21627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21628 ;; Tracked objects:
 21629 ;;		On entry : 0/0
 21630 ;;		On exit  : 0/0
 21631 ;;		Unchanged: 0/0
 21632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21637 ;;Total ram usage:        0 bytes
 21638 ;; Hardware stack levels used:    1
 21639 ;; Hardware stack levels required when called:    3
 21640 ;; This function calls:
 21641 ;;		i2_lcdInst
 21642 ;;		i2_printf
 21643 ;; This function is called by:
 21644 ;;		_updateMenu
 21645 ;;		_inputHandler
 21646 ;; This function uses a non-reentrant model
 21647 ;;
 21648                           
 21649                           	psect	text76
 21650  005398                     __ptext76:
 21651                           	opt stack 0
 21652  005398                     _change_state_to_logs_11:
 21653                           	opt stack 18
 21654                           
 21655                           ;UI.c: 518: cur_state = 1011;
 21656                           
 21657                           ;incstack = 0
 21658  005398  0E03               	movlw	3
 21659  00539A  0100               	movlb	0	; () banked
 21660  00539C  6FED               	movwf	(_cur_state+1)& (0+255),b
 21661  00539E  0EF3               	movlw	243
 21662  0053A0  6FEC               	movwf	_cur_state& (0+255),b
 21663                           
 21664                           ; BSR set to: 0
 21665                           ;UI.c: 519: lcdInst(0b10000000);;
 21666  0053A2  0E80               	movlw	128
 21667  0053A4  EC40  F02B         	call	i2_lcdInst
 21668                           
 21669                           ;UI.c: 520: printf("LOG 1          <");
 21670  0053A8  0E79               	movlw	low STR_39
 21671  0053AA  6E0D               	movwf	i2printf@f,c
 21672  0053AC  0EFD               	movlw	high STR_39
 21673  0053AE  6E0E               	movwf	i2printf@f+1,c
 21674  0053B0  EC9A  F00F         	call	i2_printf	;wreg free
 21675                           
 21676                           ;UI.c: 521: lcdInst(0b11000000);;
 21677  0053B4  0EC0               	movlw	192
 21678  0053B6  EC40  F02B         	call	i2_lcdInst
 21679                           
 21680                           ;UI.c: 522: printf("LOG 2           ");
 21681  0053BA  0EE0               	movlw	low STR_40
 21682  0053BC  6E0D               	movwf	i2printf@f,c
 21683  0053BE  0EFC               	movlw	high STR_40
 21684  0053C0  6E0E               	movwf	i2printf@f+1,c
 21685  0053C2  EC9A  F00F         	call	i2_printf	;wreg free
 21686  0053C6  0012               	return		;funcret
 21687  0053C8                     __end_of_change_state_to_logs_11:
 21688                           	opt stack 0
 21689                           pclatu	equ	0xFFB
 21690                           pclath	equ	0xFFA
 21691                           tblptru	equ	0xFF8
 21692                           tblptrh	equ	0xFF7
 21693                           tblptrl	equ	0xFF6
 21694                           tablat	equ	0xFF5
 21695                           prodh	equ	0xFF4
 21696                           prodl	equ	0xFF3
 21697                           intcon	equ	0xFF2
 21698                           intcon2	equ	0xFF1
 21699                           intcon3	equ	0xFF0
 21700                           indf0	equ	0xFEF
 21701                           postinc0	equ	0xFEE
 21702                           fsr0h	equ	0xFEA
 21703                           fsr0l	equ	0xFE9
 21704                           wreg	equ	0xFE8
 21705                           postdec1	equ	0xFE5
 21706                           fsr1h	equ	0xFE2
 21707                           fsr1l	equ	0xFE1
 21708                           indf2	equ	0xFDF
 21709                           postinc2	equ	0xFDE
 21710                           postdec2	equ	0xFDD
 21711                           fsr2h	equ	0xFDA
 21712                           fsr2l	equ	0xFD9
 21713                           status	equ	0xFD8
 21714                           
 21715 ;; *************** function _dispLogs *****************
 21716 ;; Defined at:
 21717 ;;		line 470 in file "UI.c"
 21718 ;; Parameters:    Size  Location     Type
 21719 ;;  myLog           2   17[COMRAM] int 
 21720 ;; Auto vars:     Size  Location     Type
 21721 ;;		None
 21722 ;; Return value:  Size  Location     Type
 21723 ;;                  1    wreg      void 
 21724 ;; Registers used:
 21725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21726 ;; Tracked objects:
 21727 ;;		On entry : 0/0
 21728 ;;		On exit  : 0/0
 21729 ;;		Unchanged: 0/0
 21730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;Total ram usage:        2 bytes
 21736 ;; Hardware stack levels used:    1
 21737 ;; Hardware stack levels required when called:    2
 21738 ;; This function calls:
 21739 ;;		_retrieveLog
 21740 ;; This function is called by:
 21741 ;;		_updateMenu
 21742 ;; This function uses a non-reentrant model
 21743 ;;
 21744                           
 21745                           	psect	text77
 21746  005542                     __ptext77:
 21747                           	opt stack 0
 21748  005542                     _dispLogs:
 21749                           	opt stack 20
 21750                           
 21751                           ;UI.c: 471: logstate = 1;
 21752                           
 21753                           ;incstack = 0
 21754  005542  0E00               	movlw	0
 21755  005544  0100               	movlb	0	; () banked
 21756  005546  6FF9               	movwf	(_logstate+1)& (0+255),b
 21757  005548  0E01               	movlw	1
 21758  00554A  6FF8               	movwf	_logstate& (0+255),b
 21759                           
 21760                           ; BSR set to: 0
 21761                           ;UI.c: 472: log = myLog;
 21762  00554C  C012  F0F4         	movff	dispLogs@myLog,_log
 21763  005550  C013  F0F5         	movff	dispLogs@myLog+1,_log+1
 21764                           
 21765                           ; BSR set to: 0
 21766                           ;UI.c: 473: retrieveLog(myLog - 1);
 21767  005554  0EFF               	movlw	255
 21768  005556  2412               	addwf	dispLogs@myLog,w,c
 21769  005558  6E07               	movwf	retrieveLog@logNum,c
 21770  00555A  0EFF               	movlw	255
 21771  00555C  2013               	addwfc	dispLogs@myLog+1,w,c
 21772  00555E  6E08               	movwf	retrieveLog@logNum+1,c
 21773  005560  ECD3  F01E         	call	_retrieveLog	;wreg free
 21774  005564  0012               	return		;funcret
 21775  005566                     __end_of_dispLogs:
 21776                           	opt stack 0
 21777                           pclatu	equ	0xFFB
 21778                           pclath	equ	0xFFA
 21779                           tblptru	equ	0xFF8
 21780                           tblptrh	equ	0xFF7
 21781                           tblptrl	equ	0xFF6
 21782                           tablat	equ	0xFF5
 21783                           prodh	equ	0xFF4
 21784                           prodl	equ	0xFF3
 21785                           intcon	equ	0xFF2
 21786                           intcon2	equ	0xFF1
 21787                           intcon3	equ	0xFF0
 21788                           indf0	equ	0xFEF
 21789                           postinc0	equ	0xFEE
 21790                           fsr0h	equ	0xFEA
 21791                           fsr0l	equ	0xFE9
 21792                           wreg	equ	0xFE8
 21793                           postdec1	equ	0xFE5
 21794                           fsr1h	equ	0xFE2
 21795                           fsr1l	equ	0xFE1
 21796                           indf2	equ	0xFDF
 21797                           postinc2	equ	0xFDE
 21798                           postdec2	equ	0xFDD
 21799                           fsr2h	equ	0xFDA
 21800                           fsr2l	equ	0xFD9
 21801                           status	equ	0xFD8
 21802                           
 21803 ;; *************** function _retrieveLog *****************
 21804 ;; Defined at:
 21805 ;;		line 134 in file "EEPROM.c"
 21806 ;; Parameters:    Size  Location     Type
 21807 ;;  logNum          2    6[COMRAM] int 
 21808 ;; Auto vars:     Size  Location     Type
 21809 ;;  i               2   13[COMRAM] int 
 21810 ;;  addr            2   15[COMRAM] unsigned short 
 21811 ;;  byte3           1   12[COMRAM] unsigned char 
 21812 ;;  byte2           1   11[COMRAM] unsigned char 
 21813 ;;  byte1           1   10[COMRAM] unsigned char 
 21814 ;; Return value:  Size  Location     Type
 21815 ;;                  1    wreg      void 
 21816 ;; Registers used:
 21817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21818 ;; Tracked objects:
 21819 ;;		On entry : 0/0
 21820 ;;		On exit  : 0/0
 21821 ;;		Unchanged: 0/0
 21822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21824 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21826 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21827 ;;Total ram usage:       11 bytes
 21828 ;; Hardware stack levels used:    1
 21829 ;; Hardware stack levels required when called:    1
 21830 ;; This function calls:
 21831 ;;		i2_EEPROM_read
 21832 ;;		i2___wmul
 21833 ;; This function is called by:
 21834 ;;		_dispLogs
 21835 ;; This function uses a non-reentrant model
 21836 ;;
 21837                           
 21838                           	psect	text78
 21839  003DA6                     __ptext78:
 21840                           	opt stack 0
 21841  003DA6                     _retrieveLog:
 21842                           	opt stack 20
 21843                           
 21844                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21845                           
 21846                           ;incstack = 0
 21847  003DA6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21848  003DAA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21849  003DAE  0E00               	movlw	0
 21850  003DB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 21851  003DB2  0E0B               	movlw	11
 21852  003DB4  6E03               	movwf	i2___wmul@multiplicand,c
 21853  003DB6  EC7B  F02A         	call	i2___wmul	;wreg free
 21854  003DBA  0E01               	movlw	1
 21855  003DBC  2401               	addwf	?i2___wmul,w,c
 21856  003DBE  6E10               	movwf	retrieveLog@addr,c
 21857  003DC0  0E00               	movlw	0
 21858  003DC2  2002               	addwfc	?i2___wmul+1,w,c
 21859  003DC4  6E11               	movwf	retrieveLog@addr+1,c
 21860                           
 21861                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21862  003DC6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21863  003DCA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21864  003DCE  EC0C  F02B         	call	i2_EEPROM_read	;wreg free
 21865  003DD2  6E0B               	movwf	retrieveLog@byte1,c
 21866                           
 21867                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21868  003DD4  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21869  003DD8  0E80               	movlw	128
 21870  003DDA  1609               	andwf	??_retrieveLog,f,c
 21871  003DDC  5009               	movf	??_retrieveLog,w,c
 21872  003DDE  6E63               	movwf	_log_completion,c
 21873  003DE0  6A64               	clrf	_log_completion+1,c
 21874                           
 21875                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21876  003DE2  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21877  003DE6  0E0F               	movlw	15
 21878  003DE8  1609               	andwf	??_retrieveLog,f,c
 21879  003DEA  5009               	movf	??_retrieveLog,w,c
 21880  003DEC  0101               	movlb	1	; () banked
 21881  003DEE  6F43               	movwf	_log_count_total& (0+255),b
 21882  003DF0  6B44               	clrf	(_log_count_total+1)& (0+255),b
 21883                           
 21884                           ; BSR set to: 1
 21885                           ;EEPROM.c: 146: addr++;
 21886  003DF2  4A10               	infsnz	retrieveLog@addr,f,c
 21887  003DF4  2A11               	incf	retrieveLog@addr+1,f,c
 21888                           
 21889                           ; BSR set to: 1
 21890                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21891  003DF6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21892  003DFA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21893  003DFE  EC0C  F02B         	call	i2_EEPROM_read	;wreg free
 21894  003E02  6E0C               	movwf	retrieveLog@byte2,c
 21895                           
 21896                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21897  003E04  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21898  003E08  3A09               	swapf	??_retrieveLog,f,c
 21899  003E0A  0E0F               	movlw	15
 21900  003E0C  1609               	andwf	??_retrieveLog,f,c
 21901  003E0E  0E0F               	movlw	15
 21902  003E10  1609               	andwf	??_retrieveLog,f,c
 21903  003E12  5009               	movf	??_retrieveLog,w,c
 21904  003E14  6E65               	movwf	_log_count_pop_no_tab,c
 21905  003E16  6A66               	clrf	_log_count_pop_no_tab+1,c
 21906                           
 21907                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21908  003E18  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21909  003E1C  0E0F               	movlw	15
 21910  003E1E  1609               	andwf	??_retrieveLog,f,c
 21911  003E20  5009               	movf	??_retrieveLog,w,c
 21912  003E22  6E67               	movwf	_log_count_pop_w_tab,c
 21913  003E24  6A68               	clrf	_log_count_pop_w_tab+1,c
 21914                           
 21915                           ;EEPROM.c: 152: addr++;
 21916  003E26  4A10               	infsnz	retrieveLog@addr,f,c
 21917  003E28  2A11               	incf	retrieveLog@addr+1,f,c
 21918                           
 21919                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21920  003E2A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21921  003E2E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21922  003E32  EC0C  F02B         	call	i2_EEPROM_read	;wreg free
 21923  003E36  6E0D               	movwf	retrieveLog@byte3,c
 21924                           
 21925                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21926  003E38  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21927  003E3C  3A09               	swapf	??_retrieveLog,f,c
 21928  003E3E  0E0F               	movlw	15
 21929  003E40  1609               	andwf	??_retrieveLog,f,c
 21930  003E42  0E0F               	movlw	15
 21931  003E44  1609               	andwf	??_retrieveLog,f,c
 21932  003E46  5009               	movf	??_retrieveLog,w,c
 21933  003E48  0101               	movlb	1	; () banked
 21934  003E4A  6F41               	movwf	_log_count_can_w_lab& (0+255),b
 21935  003E4C  6B42               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 21936                           
 21937                           ; BSR set to: 1
 21938                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21939  003E4E  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21940  003E52  0E0F               	movlw	15
 21941  003E54  1609               	andwf	??_retrieveLog,f,c
 21942  003E56  5009               	movf	??_retrieveLog,w,c
 21943  003E58  0101               	movlb	1	; () banked
 21944  003E5A  6F3F               	movwf	_log_count_can_no_lab& (0+255),b
 21945  003E5C  6B40               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 21946                           
 21947                           ; BSR set to: 1
 21948                           ;EEPROM.c: 156: addr++;
 21949  003E5E  4A10               	infsnz	retrieveLog@addr,f,c
 21950  003E60  2A11               	incf	retrieveLog@addr+1,f,c
 21951                           
 21952                           ; BSR set to: 1
 21953                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21954  003E62  0E00               	movlw	0
 21955  003E64  6E0F               	movwf	retrieveLog@i+1,c
 21956  003E66  0E00               	movlw	0
 21957  003E68  6E0E               	movwf	retrieveLog@i,c
 21958  003E6A                     i2l7004:
 21959                           
 21960                           ; BSR set to: 1
 21961  003E6A  BE0F               	btfsc	retrieveLog@i+1,7,c
 21962  003E6C  D006               	goto	i2l7008
 21963  003E6E  500F               	movf	retrieveLog@i+1,w,c
 21964  003E70  E11E               	bnz	i2l7016
 21965  003E72  0E07               	movlw	7
 21966  003E74  5C0E               	subwf	retrieveLog@i,w,c
 21967  003E76  B0D8               	btfsc	status,0,c
 21968  003E78  D01A               	goto	i2l7016
 21969  003E7A                     i2l7008:
 21970                           
 21971                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21972  003E7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21973  003E7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21974  003E82  EC0C  F02B         	call	i2_EEPROM_read	;wreg free
 21975  003E86  6E09               	movwf	??_retrieveLog& (0+255),c
 21976  003E88  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21977  003E8A  90D8               	bcf	status,0,c
 21978  003E8C  340E               	rlcf	retrieveLog@i,w,c
 21979  003E8E  6ED9               	movwf	fsr2l,c
 21980  003E90  340F               	rlcf	retrieveLog@i+1,w,c
 21981  003E92  6EDA               	movwf	fsr2h,c
 21982  003E94  0E00               	movlw	low _log_startTime
 21983  003E96  26D9               	addwf	fsr2l,f,c
 21984  003E98  0E01               	movlw	high _log_startTime
 21985  003E9A  22DA               	addwfc	fsr2h,f,c
 21986  003E9C  C009  FFDE         	movff	??_retrieveLog,postinc2
 21987  003EA0  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21988                           
 21989                           ;EEPROM.c: 161: addr++;
 21990  003EA4  4A10               	infsnz	retrieveLog@addr,f,c
 21991  003EA6  2A11               	incf	retrieveLog@addr+1,f,c
 21992  003EA8  4A0E               	infsnz	retrieveLog@i,f,c
 21993  003EAA  2A0F               	incf	retrieveLog@i+1,f,c
 21994  003EAC  D7DE               	goto	i2l7004
 21995  003EAE                     i2l7016:
 21996                           
 21997                           ;EEPROM.c: 162: }
 21998                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21999  003EAE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22000  003EB2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22001  003EB6  EC0C  F02B         	call	i2_EEPROM_read	;wreg free
 22002  003EBA  6E09               	movwf	??_retrieveLog& (0+255),c
 22003  003EBC  5009               	movf	??_retrieveLog,w,c
 22004  003EBE  0100               	movlb	0	; () banked
 22005  003EC0  6FF6               	movwf	_log_total_time& (0+255),b
 22006  003EC2  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 22007                           
 22008                           ; BSR set to: 0
 22009  003EC4  0012               	return		;funcret
 22010  003EC6                     __end_of_retrieveLog:
 22011                           	opt stack 0
 22012                           pclatu	equ	0xFFB
 22013                           pclath	equ	0xFFA
 22014                           tblptru	equ	0xFF8
 22015                           tblptrh	equ	0xFF7
 22016                           tblptrl	equ	0xFF6
 22017                           tablat	equ	0xFF5
 22018                           prodh	equ	0xFF4
 22019                           prodl	equ	0xFF3
 22020                           intcon	equ	0xFF2
 22021                           intcon2	equ	0xFF1
 22022                           intcon3	equ	0xFF0
 22023                           indf0	equ	0xFEF
 22024                           postinc0	equ	0xFEE
 22025                           fsr0h	equ	0xFEA
 22026                           fsr0l	equ	0xFE9
 22027                           wreg	equ	0xFE8
 22028                           postdec1	equ	0xFE5
 22029                           fsr1h	equ	0xFE2
 22030                           fsr1l	equ	0xFE1
 22031                           indf2	equ	0xFDF
 22032                           postinc2	equ	0xFDE
 22033                           postdec2	equ	0xFDD
 22034                           fsr2h	equ	0xFDA
 22035                           fsr2l	equ	0xFD9
 22036                           status	equ	0xFD8
 22037                           
 22038 ;; *************** function i2_EEPROM_read *****************
 22039 ;; Defined at:
 22040 ;;		line 68 in file "EEPROM.c"
 22041 ;; Parameters:    Size  Location     Type
 22042 ;;  address         2    0[COMRAM] unsigned short 
 22043 ;; Auto vars:     Size  Location     Type
 22044 ;;		None
 22045 ;; Return value:  Size  Location     Type
 22046 ;;                  1    wreg      unsigned char 
 22047 ;; Registers used:
 22048 ;;		wreg, status,2
 22049 ;; Tracked objects:
 22050 ;;		On entry : 0/0
 22051 ;;		On exit  : 0/0
 22052 ;;		Unchanged: 0/0
 22053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22058 ;;Total ram usage:        2 bytes
 22059 ;; Hardware stack levels used:    1
 22060 ;; This function calls:
 22061 ;;		Nothing
 22062 ;; This function is called by:
 22063 ;;		_retrieveLog
 22064 ;; This function uses a non-reentrant model
 22065 ;;
 22066                           
 22067                           	psect	text79
 22068  005618                     __ptext79:
 22069                           	opt stack 0
 22070  005618                     i2_EEPROM_read:
 22071                           	opt stack 20
 22072                           
 22073                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 22074                           
 22075                           ; BSR set to: 0
 22076                           ;incstack = 0
 22077  005618  5002               	movf	i2EEPROM_read@address+1,w,c
 22078  00561A  6EAA               	movwf	4010,c	;volatile
 22079                           
 22080                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 22081  00561C  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 22082                           
 22083                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 22084  005620  9EA6               	bcf	4006,7,c	;volatile
 22085                           
 22086                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 22087  005622  9CA6               	bcf	4006,6,c	;volatile
 22088                           
 22089                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 22090  005624  80A6               	bsf	4006,0,c	;volatile
 22091  005626                     i2l1096:
 22092  005626  B0A6               	btfsc	4006,0,c	;volatile
 22093  005628  D7FE               	goto	i2l1096
 22094                           
 22095                           ;EEPROM.c: 81: return EEDATA;
 22096  00562A  50A8               	movf	4008,w,c	;volatile
 22097  00562C  0012               	return	
 22098  00562E                     __end_ofi2_EEPROM_read:
 22099                           	opt stack 0
 22100                           pclatu	equ	0xFFB
 22101                           pclath	equ	0xFFA
 22102                           tblptru	equ	0xFF8
 22103                           tblptrh	equ	0xFF7
 22104                           tblptrl	equ	0xFF6
 22105                           tablat	equ	0xFF5
 22106                           prodh	equ	0xFF4
 22107                           prodl	equ	0xFF3
 22108                           intcon	equ	0xFF2
 22109                           intcon2	equ	0xFF1
 22110                           intcon3	equ	0xFF0
 22111                           indf0	equ	0xFEF
 22112                           postinc0	equ	0xFEE
 22113                           fsr0h	equ	0xFEA
 22114                           fsr0l	equ	0xFE9
 22115                           wreg	equ	0xFE8
 22116                           postdec1	equ	0xFE5
 22117                           fsr1h	equ	0xFE2
 22118                           fsr1l	equ	0xFE1
 22119                           indf2	equ	0xFDF
 22120                           postinc2	equ	0xFDE
 22121                           postdec2	equ	0xFDD
 22122                           fsr2h	equ	0xFDA
 22123                           fsr2l	equ	0xFD9
 22124                           status	equ	0xFD8
 22125                           
 22126 ;; *************** function _updateArmState *****************
 22127 ;; Defined at:
 22128 ;;		line 606 in file "sort.c"
 22129 ;; Parameters:    Size  Location     Type
 22130 ;;		None
 22131 ;; Auto vars:     Size  Location     Type
 22132 ;;		None
 22133 ;; Return value:  Size  Location     Type
 22134 ;;                  1    wreg      void 
 22135 ;; Registers used:
 22136 ;;		wreg, status,2, status,0
 22137 ;; Tracked objects:
 22138 ;;		On entry : 0/0
 22139 ;;		On exit  : 0/0
 22140 ;;		Unchanged: 0/0
 22141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22146 ;;Total ram usage:        2 bytes
 22147 ;; Hardware stack levels used:    1
 22148 ;; This function calls:
 22149 ;;		Nothing
 22150 ;; This function is called by:
 22151 ;;		_handler
 22152 ;; This function uses a non-reentrant model
 22153 ;;
 22154                           
 22155                           	psect	text80
 22156  00506E                     __ptext80:
 22157                           	opt stack 0
 22158  00506E                     _updateArmState:
 22159                           	opt stack 23
 22160                           
 22161                           ;sort.c: 613: if(!was_low_2){
 22162                           
 22163                           ;incstack = 0
 22164  00506E  5079               	movf	_was_low_2,w,c	;volatile
 22165  005070  107A               	iorwf	_was_low_2+1,w,c	;volatile
 22166  005072  B4D8               	btfsc	status,2,c
 22167  005074  D007               	goto	i2l9682
 22168  005076  D016               	goto	i2l917
 22169  005078                     i2l9676:
 22170                           
 22171                           ;sort.c: 618: PR2 = 0x20;
 22172  005078  0E20               	movlw	32
 22173  00507A  6ECB               	movwf	4043,c	;volatile
 22174                           
 22175                           ;sort.c: 619: break;
 22176  00507C  0012               	return	
 22177  00507E                     i2l9678:
 22178                           
 22179                           ;sort.c: 622: PR2 = 0x40;
 22180  00507E  0E40               	movlw	64
 22181  005080  6ECB               	movwf	4043,c	;volatile
 22182                           
 22183                           ;sort.c: 624: }
 22184                           
 22185                           ;sort.c: 623: break;
 22186  005082  0012               	return	
 22187  005084                     i2l9682:
 22188  005084  C0EE  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 22189  005088  C0EF  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 22190                           
 22191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22192                           ; Switch size 1, requested type "space"
 22193                           ; Number of cases is 1, Range of values is 0 to 0
 22194                           ; switch strategies available:
 22195                           ; Name         Instructions Cycles
 22196                           ; simple_byte            4     3 (average)
 22197                           ;	Chosen strategy is simple_byte
 22198  00508C  5002               	movf	??_updateArmState+1,w,c
 22199  00508E  0A00               	xorlw	0	; case 0
 22200  005090  A4D8               	btfss	status,2,c
 22201  005092  0012               	return	
 22202                           
 22203                           ; Switch size 1, requested type "space"
 22204                           ; Number of cases is 2, Range of values is 0 to 1
 22205                           ; switch strategies available:
 22206                           ; Name         Instructions Cycles
 22207                           ; simple_byte            7     4 (average)
 22208                           ;	Chosen strategy is simple_byte
 22209  005094  5001               	movf	??_updateArmState,w,c
 22210  005096  0A00               	xorlw	0	; case 0
 22211  005098  B4D8               	btfsc	status,2,c
 22212  00509A  D7EE               	goto	i2l9676
 22213  00509C  0A01               	xorlw	1	; case 1
 22214  00509E  A4D8               	btfss	status,2,c
 22215                           
 22216                           ;sort.c: 625: }
 22217  0050A0  0012               	return	
 22218  0050A2  D7ED               	goto	i2l9678
 22219  0050A4                     i2l917:
 22220                           
 22221                           ;sort.c: 626: else{
 22222                           ;sort.c: 628: PR2 = 0xFF;
 22223  0050A4  68CB               	setf	4043,c	;volatile
 22224  0050A6  0012               	return	
 22225  0050A8                     __end_of_updateArmState:
 22226                           	opt stack 0
 22227                           pclatu	equ	0xFFB
 22228                           pclath	equ	0xFFA
 22229                           tblptru	equ	0xFF8
 22230                           tblptrh	equ	0xFF7
 22231                           tblptrl	equ	0xFF6
 22232                           tablat	equ	0xFF5
 22233                           prodh	equ	0xFF4
 22234                           prodl	equ	0xFF3
 22235                           intcon	equ	0xFF2
 22236                           intcon2	equ	0xFF1
 22237                           intcon3	equ	0xFF0
 22238                           indf0	equ	0xFEF
 22239                           postinc0	equ	0xFEE
 22240                           fsr0h	equ	0xFEA
 22241                           fsr0l	equ	0xFE9
 22242                           wreg	equ	0xFE8
 22243                           postdec1	equ	0xFE5
 22244                           fsr1h	equ	0xFE2
 22245                           fsr1l	equ	0xFE1
 22246                           indf2	equ	0xFDF
 22247                           postinc2	equ	0xFDE
 22248                           postdec2	equ	0xFDD
 22249                           fsr2h	equ	0xFDA
 22250                           fsr2l	equ	0xFD9
 22251                           status	equ	0xFD8
 22252                           
 22253 ;; *************** function _printSortTimer *****************
 22254 ;; Defined at:
 22255 ;;		line 456 in file "sort.c"
 22256 ;; Parameters:    Size  Location     Type
 22257 ;;		None
 22258 ;; Auto vars:     Size  Location     Type
 22259 ;;  i               2   70[COMRAM] int 
 22260 ;;  i               2   72[COMRAM] int 
 22261 ;;  curTime        14   44[COMRAM] int [7]
 22262 ;;  timeDiff        2   68[COMRAM] unsigned int 
 22263 ;;  sec             2   64[COMRAM] int 
 22264 ;;  min             2   62[COMRAM] int 
 22265 ;;  cur_sec         2   60[COMRAM] unsigned int 
 22266 ;;  start_sec       2   58[COMRAM] unsigned int 
 22267 ;; Return value:  Size  Location     Type
 22268 ;;                  1    wreg      void 
 22269 ;; Registers used:
 22270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22271 ;; Tracked objects:
 22272 ;;		On entry : 0/0
 22273 ;;		On exit  : 0/0
 22274 ;;		Unchanged: 0/0
 22275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22277 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22278 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22279 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22280 ;;Total ram usage:       33 bytes
 22281 ;; Hardware stack levels used:    1
 22282 ;; Hardware stack levels required when called:    3
 22283 ;; This function calls:
 22284 ;;		i2___lwdiv
 22285 ;;		i2___lwmod
 22286 ;;		i2___wmul
 22287 ;;		i2_delay_ms
 22288 ;;		i2_getRTC
 22289 ;;		i2_lcdInst
 22290 ;;		i2_printf
 22291 ;; This function is called by:
 22292 ;;		_handler
 22293 ;; This function uses a non-reentrant model
 22294 ;;
 22295                           
 22296                           	psect	text81
 22297  002DE8                     __ptext81:
 22298                           	opt stack 0
 22299  002DE8                     _printSortTimer:
 22300                           	opt stack 20
 22301                           
 22302                           ;sort.c: 457: getRTC();
 22303                           
 22304                           ;incstack = 0
 22305  002DE8  EC98  F025         	call	i2_getRTC	;wreg free
 22306                           
 22307                           ;sort.c: 458: int curTime[7];
 22308                           ;sort.c: 459: for(int i = 0; i < 7; i++){
 22309  002DEC  0E00               	movlw	0
 22310  002DEE  6E4A               	movwf	printSortTimer@i+1,c
 22311  002DF0  0E00               	movlw	0
 22312  002DF2  6E49               	movwf	printSortTimer@i,c
 22313  002DF4                     i2l9518:
 22314  002DF4  BE4A               	btfsc	printSortTimer@i+1,7,c
 22315  002DF6  D006               	goto	i2l9522
 22316  002DF8  504A               	movf	printSortTimer@i+1,w,c
 22317  002DFA  E131               	bnz	i2l9528
 22318  002DFC  0E07               	movlw	7
 22319  002DFE  5C49               	subwf	printSortTimer@i,w,c
 22320  002E00  B0D8               	btfsc	status,0,c
 22321  002E02  D02D               	goto	i2l9528
 22322  002E04                     i2l9522:
 22323                           
 22324                           ;sort.c: 460: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 22325  002E04  0E1C               	movlw	low _time
 22326  002E06  2449               	addwf	printSortTimer@i,w,c
 22327  002E08  6ED9               	movwf	fsr2l,c
 22328  002E0A  0E01               	movlw	high _time
 22329  002E0C  204A               	addwfc	printSortTimer@i+1,w,c
 22330  002E0E  6EDA               	movwf	fsr2h,c
 22331  002E10  50DF               	movf	indf2,w,c
 22332  002E12  6E2A               	movwf	??_printSortTimer& (0+255),c
 22333  002E14  3A2A               	swapf	??_printSortTimer,f,c
 22334  002E16  0E0F               	movlw	15
 22335  002E18  162A               	andwf	??_printSortTimer,f,c
 22336  002E1A  0E0F               	movlw	15
 22337  002E1C  162A               	andwf	??_printSortTimer,f,c
 22338  002E1E  502A               	movf	??_printSortTimer,w,c
 22339  002E20  0D0A               	mullw	10
 22340  002E22  0E1C               	movlw	low _time
 22341  002E24  2449               	addwf	printSortTimer@i,w,c
 22342  002E26  6ED9               	movwf	fsr2l,c
 22343  002E28  0E01               	movlw	high _time
 22344  002E2A  204A               	addwfc	printSortTimer@i+1,w,c
 22345  002E2C  6EDA               	movwf	fsr2h,c
 22346  002E2E  50DF               	movf	indf2,w,c
 22347  002E30  0B0F               	andlw	15
 22348  002E32  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22349  002E34  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 22350  002E36  50F3               	movf	prodl,w,c
 22351  002E38  262B               	addwf	??_printSortTimer+1,f,c
 22352  002E3A  50F4               	movf	prodh,w,c
 22353  002E3C  222C               	addwfc	??_printSortTimer+2,f,c
 22354  002E3E  90D8               	bcf	status,0,c
 22355  002E40  3449               	rlcf	printSortTimer@i,w,c
 22356  002E42  6ED9               	movwf	fsr2l,c
 22357  002E44  344A               	rlcf	printSortTimer@i+1,w,c
 22358  002E46  6EDA               	movwf	fsr2h,c
 22359  002E48  0E2D               	movlw	low printSortTimer@curTime
 22360  002E4A  26D9               	addwf	fsr2l,f,c
 22361  002E4C  0E00               	movlw	high printSortTimer@curTime
 22362  002E4E  22DA               	addwfc	fsr2h,f,c
 22363  002E50  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 22364  002E54  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 22365  002E58  4A49               	infsnz	printSortTimer@i,f,c
 22366  002E5A  2A4A               	incf	printSortTimer@i+1,f,c
 22367  002E5C  D7CB               	goto	i2l9518
 22368  002E5E                     i2l9528:
 22369                           
 22370                           ;sort.c: 461: }
 22371                           ;sort.c: 462: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 22372  002E5E  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 22373  002E62  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 22374  002E66  0E00               	movlw	0
 22375  002E68  6E04               	movwf	i2___wmul@multiplicand+1,c
 22376  002E6A  0E3C               	movlw	60
 22377  002E6C  6E03               	movwf	i2___wmul@multiplicand,c
 22378  002E6E  EC7B  F02A         	call	i2___wmul	;wreg free
 22379  002E72  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22380  002E76  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22381  002E7A  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 22382  002E7E  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 22383  002E82  0E0E               	movlw	14
 22384  002E84  6E04               	movwf	i2___wmul@multiplicand+1,c
 22385  002E86  0E10               	movlw	16
 22386  002E88  6E03               	movwf	i2___wmul@multiplicand,c
 22387  002E8A  EC7B  F02A         	call	i2___wmul	;wreg free
 22388  002E8E  5001               	movf	?i2___wmul,w,c
 22389  002E90  262A               	addwf	??_printSortTimer,f,c
 22390  002E92  5002               	movf	?i2___wmul+1,w,c
 22391  002E94  222B               	addwfc	??_printSortTimer+1,f,c
 22392  002E96  0101               	movlb	1	; () banked
 22393  002E98  510E               	movf	_startTime& (0+255),w,b
 22394  002E9A  242A               	addwf	??_printSortTimer,w,c
 22395  002E9C  6E3B               	movwf	printSortTimer@start_sec,c
 22396  002E9E  0101               	movlb	1	; () banked
 22397  002EA0  510F               	movf	(_startTime+1)& (0+255),w,b
 22398  002EA2  202B               	addwfc	??_printSortTimer+1,w,c
 22399  002EA4  6E3C               	movwf	printSortTimer@start_sec+1,c
 22400                           
 22401                           ;sort.c: 463: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 22402  002EA6  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 22403  002EAA  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 22404  002EAE  0E00               	movlw	0
 22405  002EB0  6E04               	movwf	i2___wmul@multiplicand+1,c
 22406  002EB2  0E3C               	movlw	60
 22407  002EB4  6E03               	movwf	i2___wmul@multiplicand,c
 22408  002EB6  EC7B  F02A         	call	i2___wmul	;wreg free
 22409  002EBA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 22410  002EBE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 22411  002EC2  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 22412  002EC6  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 22413  002ECA  0E0E               	movlw	14
 22414  002ECC  6E04               	movwf	i2___wmul@multiplicand+1,c
 22415  002ECE  0E10               	movlw	16
 22416  002ED0  6E03               	movwf	i2___wmul@multiplicand,c
 22417  002ED2  EC7B  F02A         	call	i2___wmul	;wreg free
 22418  002ED6  5001               	movf	?i2___wmul,w,c
 22419  002ED8  262A               	addwf	??_printSortTimer,f,c
 22420  002EDA  5002               	movf	?i2___wmul+1,w,c
 22421  002EDC  222B               	addwfc	??_printSortTimer+1,f,c
 22422  002EDE  502D               	movf	printSortTimer@curTime,w,c
 22423  002EE0  242A               	addwf	??_printSortTimer,w,c
 22424  002EE2  6E3D               	movwf	printSortTimer@cur_sec,c
 22425  002EE4  502E               	movf	printSortTimer@curTime+1,w,c
 22426  002EE6  202B               	addwfc	??_printSortTimer+1,w,c
 22427  002EE8  6E3E               	movwf	printSortTimer@cur_sec+1,c
 22428                           
 22429                           ;sort.c: 464: unsigned int timeDiff = cur_sec - start_sec;
 22430  002EEA  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 22431  002EEE  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 22432  002EF2  1E2A               	comf	??_printSortTimer,f,c
 22433  002EF4  1E2B               	comf	??_printSortTimer+1,f,c
 22434  002EF6  4A2A               	infsnz	??_printSortTimer,f,c
 22435  002EF8  2A2B               	incf	??_printSortTimer+1,f,c
 22436  002EFA  503D               	movf	printSortTimer@cur_sec,w,c
 22437  002EFC  242A               	addwf	??_printSortTimer,w,c
 22438  002EFE  6E45               	movwf	printSortTimer@timeDiff,c
 22439  002F00  503E               	movf	printSortTimer@cur_sec+1,w,c
 22440  002F02  202B               	addwfc	??_printSortTimer+1,w,c
 22441  002F04  6E46               	movwf	printSortTimer@timeDiff+1,c
 22442                           
 22443                           ;sort.c: 466: total_time = timeDiff;
 22444  002F06  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 22445  002F0A  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 22446                           
 22447                           ;sort.c: 468: if(f_most_recent_sort_time){
 22448  002F0E  0101               	movlb	1	; () banked
 22449  002F10  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 22450  002F12  0101               	movlb	1	; () banked
 22451  002F14  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 22452  002F16  B4D8               	btfsc	status,2,c
 22453  002F18  D009               	goto	i2l9540
 22454                           
 22455                           ; BSR set to: 1
 22456                           ;sort.c: 469: most_recent_sort_time = total_time;
 22457  002F1A  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 22458  002F1E  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 22459                           
 22460                           ; BSR set to: 1
 22461                           ;sort.c: 470: f_most_recent_sort_time = 0;
 22462  002F22  0E00               	movlw	0
 22463  002F24  0101               	movlb	1	; () banked
 22464  002F26  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 22465  002F28  0E00               	movlw	0
 22466  002F2A  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 22467  002F2C                     i2l9540:
 22468                           
 22469                           ; BSR set to: 1
 22470                           ;sort.c: 471: }
 22471                           ;sort.c: 473: if(total_time - most_recent_sort_time == 20){
 22472  002F2C  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22473  002F30  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22474  002F34  1E2A               	comf	??_printSortTimer,f,c
 22475  002F36  1E2B               	comf	??_printSortTimer+1,f,c
 22476  002F38  4A2A               	infsnz	??_printSortTimer,f,c
 22477  002F3A  2A2B               	incf	??_printSortTimer+1,f,c
 22478  002F3C  0100               	movlb	0	; () banked
 22479  002F3E  51FA               	movf	_total_time& (0+255),w,b
 22480  002F40  262A               	addwf	??_printSortTimer,f,c
 22481  002F42  0100               	movlb	0	; () banked
 22482  002F44  51FB               	movf	(_total_time+1)& (0+255),w,b
 22483  002F46  222B               	addwfc	??_printSortTimer+1,f,c
 22484  002F48  0E14               	movlw	20
 22485  002F4A  182A               	xorwf	??_printSortTimer,w,c
 22486  002F4C  102B               	iorwf	??_printSortTimer+1,w,c
 22487  002F4E  A4D8               	btfss	status,2,c
 22488  002F50  D033               	goto	i2l9560
 22489                           
 22490                           ; BSR set to: 0
 22491                           ;sort.c: 474: LATBbits.LATB2 = 0;
 22492  002F52  948A               	bcf	3978,2,c	;volatile
 22493                           
 22494                           ; BSR set to: 0
 22495                           ;sort.c: 475: _delay((unsigned long)((2000)*(32000000/4000.0)));
 22496  002F54  0E52               	movlw	82
 22497  002F56  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 22498  002F58  0E2B               	movlw	43
 22499  002F5A  6E2A               	movwf	??_printSortTimer& (0+255),c
 22500  002F5C  0E00               	movlw	0
 22501  002F5E                     i2u1071_47:
 22502  002F5E  2EE8               	decfsz	wreg,f,c
 22503  002F60  D7FE               	bra	i2u1071_47
 22504  002F62  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 22505  002F64  D7FC               	bra	i2u1071_47
 22506  002F66  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 22507  002F68  D7FA               	bra	i2u1071_47
 22508  002F6A  D000               	nop2	
 22509                           
 22510                           ;sort.c: 476: for(int i=0; i<46; i++){
 22511  002F6C  0E00               	movlw	0
 22512  002F6E  6E48               	movwf	printSortTimer@i_1194+1,c
 22513  002F70  0E00               	movlw	0
 22514  002F72  6E47               	movwf	printSortTimer@i_1194,c
 22515  002F74  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22516  002F76  D006               	goto	i2l9552
 22517  002F78  5048               	movf	printSortTimer@i_1194+1,w,c
 22518  002F7A  E11D               	bnz	i2l869
 22519  002F7C  0E2E               	movlw	46
 22520  002F7E  5C47               	subwf	printSortTimer@i_1194,w,c
 22521  002F80  B0D8               	btfsc	status,0,c
 22522  002F82  D019               	goto	i2l869
 22523  002F84                     i2l9552:
 22524                           
 22525                           ;sort.c: 477: LATBbits.LATB2 = !LATBbits.LATB2;
 22526  002F84  B48A               	btfsc	3978,2,c	;volatile
 22527  002F86  D003               	goto	i2u882_40
 22528  002F88  6A2A               	clrf	??_printSortTimer& (0+255),c
 22529  002F8A  2A2A               	incf	??_printSortTimer& (0+255),f,c
 22530  002F8C  D001               	goto	i2u883_48
 22531  002F8E                     i2u882_40:
 22532  002F8E  6A2A               	clrf	??_printSortTimer& (0+255),c
 22533  002F90                     i2u883_48:
 22534  002F90  462A               	rlncf	??_printSortTimer,f,c
 22535  002F92  462A               	rlncf	??_printSortTimer,f,c
 22536  002F94  508A               	movf	3978,w,c	;volatile
 22537  002F96  182A               	xorwf	??_printSortTimer,w,c
 22538  002F98  0BFB               	andlw	-5
 22539  002F9A  182A               	xorwf	??_printSortTimer,w,c
 22540  002F9C  6E8A               	movwf	3978,c	;volatile
 22541                           
 22542                           ;sort.c: 478: delay_ms(45-i);
 22543  002F9E  5047               	movf	printSortTimer@i_1194,w,c
 22544  002FA0  0800               	sublw	0
 22545  002FA2  0F2D               	addlw	45
 22546  002FA4  ECF2  F02A         	call	i2_delay_ms
 22547  002FA8  4A47               	infsnz	printSortTimer@i_1194,f,c
 22548  002FAA  2A48               	incf	printSortTimer@i_1194+1,f,c
 22549  002FAC  BE48               	btfsc	printSortTimer@i_1194+1,7,c
 22550  002FAE  D7EA               	goto	i2l9552
 22551  002FB0  5048               	movf	printSortTimer@i_1194+1,w,c
 22552  002FB2  E101               	bnz	i2u884_40
 22553  002FB4  D7E3               	goto	L19
 22554  002FB6                     i2u884_40:
 22555  002FB6                     i2l869:
 22556                           
 22557                           ;sort.c: 479: }
 22558                           ;sort.c: 480: LATBbits.LATB2 = 1;
 22559  002FB6  848A               	bsf	3978,2,c	;volatile
 22560  002FB8                     i2l9560:
 22561                           
 22562                           ;sort.c: 481: }
 22563                           ;sort.c: 483: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 22564  002FB8  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 22565  002FBC  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 22566  002FC0  1E2A               	comf	??_printSortTimer,f,c
 22567  002FC2  1E2B               	comf	??_printSortTimer+1,f,c
 22568  002FC4  4A2A               	infsnz	??_printSortTimer,f,c
 22569  002FC6  2A2B               	incf	??_printSortTimer+1,f,c
 22570  002FC8  0100               	movlb	0	; () banked
 22571  002FCA  51FA               	movf	_total_time& (0+255),w,b
 22572  002FCC  262A               	addwf	??_printSortTimer,f,c
 22573  002FCE  0100               	movlb	0	; () banked
 22574  002FD0  51FB               	movf	(_total_time+1)& (0+255),w,b
 22575  002FD2  222B               	addwfc	??_printSortTimer+1,f,c
 22576  002FD4  0E2A               	movlw	42
 22577  002FD6  182A               	xorwf	??_printSortTimer,w,c
 22578  002FD8  102B               	iorwf	??_printSortTimer+1,w,c
 22579  002FDA  B4D8               	btfsc	status,2,c
 22580  002FDC  D007               	goto	i2l9564
 22581                           
 22582                           ; BSR set to: 0
 22583  002FDE  0EB3               	movlw	179
 22584  002FE0  0100               	movlb	0	; () banked
 22585  002FE2  19FA               	xorwf	_total_time& (0+255),w,b
 22586  002FE4  0100               	movlb	0	; () banked
 22587  002FE6  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 22588  002FE8  A4D8               	btfss	status,2,c
 22589  002FEA  D003               	goto	i2l9566
 22590  002FEC                     i2l9564:
 22591                           
 22592                           ; BSR set to: 0
 22593                           ;sort.c: 484: machine_state = DoneSorting_state;
 22594  002FEC  0E02               	movlw	2
 22595  002FEE  0100               	movlb	0	; () banked
 22596  002FF0  6FFC               	movwf	_machine_state& (0+255),b
 22597  002FF2                     i2l9566:
 22598                           
 22599                           ; BSR set to: 0
 22600                           ;sort.c: 486: }
 22601                           ;sort.c: 488: int min = (timeDiff % 3600) / 60;
 22602  002FF2  0E0E               	movlw	14
 22603  002FF4  6E04               	movwf	i2___lwmod@divisor+1,c
 22604  002FF6  0E10               	movlw	16
 22605  002FF8  6E03               	movwf	i2___lwmod@divisor,c
 22606  002FFA  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22607  002FFE  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22608  003002  EC16  F028         	call	i2___lwmod	;wreg free
 22609  003006  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 22610  00300A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 22611  00300E  0E00               	movlw	0
 22612  003010  6E09               	movwf	i2___lwdiv@divisor+1,c
 22613  003012  0E3C               	movlw	60
 22614  003014  6E08               	movwf	i2___lwdiv@divisor,c
 22615  003016  EC57  F027         	call	i2___lwdiv	;wreg free
 22616  00301A  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 22617  00301E  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 22618                           
 22619                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22620  003022  0E0E               	movlw	14
 22621  003024  6E04               	movwf	i2___lwmod@divisor+1,c
 22622  003026  0E10               	movlw	16
 22623  003028  6E03               	movwf	i2___lwmod@divisor,c
 22624  00302A  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 22625  00302E  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 22626  003032  EC16  F028         	call	i2___lwmod	;wreg free
 22627  003036  C001  F043         	movff	?i2___lwmod,_printSortTimer$2551
 22628  00303A  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2551+1
 22629                           
 22630                           ;sort.c: 489: int sec = (timeDiff % 3600) % 60;
 22631  00303E  C043  F001         	movff	_printSortTimer$2551,i2___lwmod@dividend
 22632  003042  C044  F002         	movff	_printSortTimer$2551+1,i2___lwmod@dividend+1
 22633  003046  0E00               	movlw	0
 22634  003048  6E04               	movwf	i2___lwmod@divisor+1,c
 22635  00304A  0E3C               	movlw	60
 22636  00304C  6E03               	movwf	i2___lwmod@divisor,c
 22637  00304E  EC16  F028         	call	i2___lwmod	;wreg free
 22638  003052  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 22639  003056  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 22640                           
 22641                           ;sort.c: 491: lcdInst(0b10000000);;
 22642  00305A  0E80               	movlw	128
 22643  00305C  EC40  F02B         	call	i2_lcdInst
 22644                           
 22645                           ;sort.c: 492: printf("SORTING...");
 22646  003060  0E7B               	movlw	low STR_64
 22647  003062  6E0D               	movwf	i2printf@f,c
 22648  003064  0EFF               	movlw	high STR_64
 22649  003066  6E0E               	movwf	i2printf@f+1,c
 22650  003068  EC9A  F00F         	call	i2_printf	;wreg free
 22651                           
 22652                           ;sort.c: 493: lcdInst(0b11000000);;
 22653  00306C  0EC0               	movlw	192
 22654  00306E  EC40  F02B         	call	i2_lcdInst
 22655                           
 22656                           ;sort.c: 494: printf("TIME %d:%02d", min, sec);
 22657  003072  0E4C               	movlw	low STR_65
 22658  003074  6E0D               	movwf	i2printf@f,c
 22659  003076  0EFF               	movlw	high STR_65
 22660  003078  6E0E               	movwf	i2printf@f+1,c
 22661  00307A  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 22662  00307E  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 22663  003082  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 22664  003086  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 22665  00308A  EC9A  F00F         	call	i2_printf	;wreg free
 22666  00308E  0012               	return		;funcret
 22667  003090                     __end_of_printSortTimer:
 22668                           	opt stack 0
 22669                           pclatu	equ	0xFFB
 22670                           pclath	equ	0xFFA
 22671                           tblptru	equ	0xFF8
 22672                           tblptrh	equ	0xFF7
 22673                           tblptrl	equ	0xFF6
 22674                           tablat	equ	0xFF5
 22675                           prodh	equ	0xFF4
 22676                           prodl	equ	0xFF3
 22677                           intcon	equ	0xFF2
 22678                           intcon2	equ	0xFF1
 22679                           intcon3	equ	0xFF0
 22680                           indf0	equ	0xFEF
 22681                           postinc0	equ	0xFEE
 22682                           fsr0h	equ	0xFEA
 22683                           fsr0l	equ	0xFE9
 22684                           wreg	equ	0xFE8
 22685                           postdec1	equ	0xFE5
 22686                           fsr1h	equ	0xFE2
 22687                           fsr1l	equ	0xFE1
 22688                           indf2	equ	0xFDF
 22689                           postinc2	equ	0xFDE
 22690                           postdec2	equ	0xFDD
 22691                           fsr2h	equ	0xFDA
 22692                           fsr2l	equ	0xFD9
 22693                           status	equ	0xFD8
 22694                           
 22695 ;; *************** function i2_printf *****************
 22696 ;; Defined at:
 22697 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 22698 ;; Parameters:    Size  Location     Type
 22699 ;;  f               2   12[COMRAM] PTR const unsigned char 
 22700 ;;		 -> STR_127(18), STR_126(18), STR_125(17), STR_124(17), 
 22701 ;;		 -> STR_123(18), STR_122(18), STR_121(18), STR_120(18), 
 22702 ;;		 -> STR_119(18), STR_118(18), STR_117(17), STR_116(17), 
 22703 ;;		 -> STR_115(17), STR_114(17), STR_113(17), STR_112(17), 
 22704 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 22705 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 22706 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 22707 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 22708 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 22709 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 22710 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 22711 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 22712 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 22713 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 22714 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 22715 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 22716 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 22717 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 22718 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 22719 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 22720 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 22721 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 22722 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 22723 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 22724 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 22725 ;;		 -> STR_2(14), STR_1(18), 
 22726 ;; Auto vars:     Size  Location     Type
 22727 ;;  printf          4    0        struct .
 22728 ;;  printf          2   39[COMRAM] int 
 22729 ;;  printf          2   35[COMRAM] unsigned int 
 22730 ;;  printf          2   33[COMRAM] unsigned int 
 22731 ;;  printf          2   31[COMRAM] PTR void [1]
 22732 ;;		 -> ?i2_printf(2), ?_printf(2), 
 22733 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 22734 ;;		 -> STR_128(7), count_total(2), printRTC@month(4), UI@month(4), 
 22735 ;;  printf          1   38[COMRAM] char 
 22736 ;;  printf          1   37[COMRAM] unsigned char 
 22737 ;;  printf          1   28[COMRAM] char 
 22738 ;; Return value:  Size  Location     Type
 22739 ;;                  2   12[COMRAM] int 
 22740 ;; Registers used:
 22741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22742 ;; Tracked objects:
 22743 ;;		On entry : 0/0
 22744 ;;		On exit  : 0/0
 22745 ;;		Unchanged: 0/0
 22746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22747 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22748 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22749 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22750 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22751 ;;Total ram usage:       29 bytes
 22752 ;; Hardware stack levels used:    1
 22753 ;; Hardware stack levels required when called:    2
 22754 ;; This function calls:
 22755 ;;		i2___lwdiv
 22756 ;;		i2___lwmod
 22757 ;;		i2___wmul
 22758 ;;		i2_isdigit
 22759 ;;		i2_putch
 22760 ;; This function is called by:
 22761 ;;		_change_state_to_menu_11
 22762 ;;		_change_state_to_menu_23
 22763 ;;		_change_state_to_logs_11
 22764 ;;		_change_state_to_logs_12
 22765 ;;		_change_state_to_logs_22
 22766 ;;		_change_state_to_logs_23
 22767 ;;		_change_state_to_logs_33
 22768 ;;		_change_state_to_logs_34
 22769 ;;		_printSortTimer
 22770 ;;		i2_change_state_to_menu_start
 22771 ;;		i2_change_state_to_menu_12
 22772 ;;		i2_change_state_to_menu_22
 22773 ;;		i2_printRTC
 22774 ;; This function uses a non-reentrant model
 22775 ;;
 22776                           
 22777                           	psect	text82
 22778  001F34                     __ptext82:
 22779                           	opt stack 0
 22780  001F34                     i2_printf:
 22781                           	opt stack 20
 22782                           
 22783                           ;doprnt.c: 466: va_list ap;
 22784                           ;doprnt.c: 499: signed char c;
 22785                           ;doprnt.c: 501: int width;
 22786                           ;doprnt.c: 506: signed char prec;
 22787                           ;doprnt.c: 508: unsigned char flag;
 22788                           ;doprnt.c: 523: union {
 22789                           ;doprnt.c: 524: unsigned long vd;
 22790                           ;doprnt.c: 525: double integ;
 22791                           ;doprnt.c: 526: } tmpval;
 22792                           ;doprnt.c: 528: unsigned int val;
 22793                           ;doprnt.c: 529: unsigned len;
 22794                           ;doprnt.c: 530: const char * cp;
 22795                           ;doprnt.c: 533: *ap = __va_start();
 22796                           
 22797                           ;incstack = 0
 22798  001F34  0E0F               	movlw	low (?i2_printf+2)
 22799  001F36  6E20               	movwf	i2printf@ap,c
 22800  001F38  0E00               	movlw	high (?i2_printf+2)
 22801  001F3A  6E21               	movwf	i2printf@ap+1,c
 22802                           
 22803                           ;doprnt.c: 536: while(c = *f++) {
 22804  001F3C  D1A4               	goto	i2l6828
 22805  001F3E                     i2l6698:
 22806                           
 22807                           ;doprnt.c: 538: if(c != '%')
 22808  001F3E  0E25               	movlw	37
 22809  001F40  1827               	xorwf	i2printf@c,w,c
 22810  001F42  B4D8               	btfsc	status,2,c
 22811  001F44  D004               	goto	i2l6702
 22812                           
 22813                           ;doprnt.c: 540: {
 22814                           ;doprnt.c: 541: (putch(c) );
 22815  001F46  5027               	movf	i2printf@c,w,c
 22816  001F48  EC3A  F02B         	call	i2_putch
 22817                           
 22818                           ;doprnt.c: 542: continue;
 22819  001F4C  D19C               	goto	i2l6828
 22820  001F4E                     i2l6702:
 22821                           
 22822                           ;doprnt.c: 543: }
 22823                           ;doprnt.c: 546: width = 0;
 22824  001F4E  0E00               	movlw	0
 22825  001F50  6E29               	movwf	i2printf@width+1,c
 22826  001F52  0E00               	movlw	0
 22827  001F54  6E28               	movwf	i2printf@width,c
 22828                           
 22829                           ;doprnt.c: 548: flag = 0;
 22830  001F56  0E00               	movlw	0
 22831  001F58  6E26               	movwf	i2printf@flag,c
 22832                           
 22833                           ;doprnt.c: 551: switch(*f) {
 22834                           
 22835                           ;doprnt.c: 550: for(;;) {
 22836  001F5A  D003               	goto	i2l6708
 22837  001F5C                     i2l6704:
 22838                           
 22839                           ;doprnt.c: 580: flag |= 0x04;
 22840  001F5C  8426               	bsf	i2printf@flag,2,c
 22841                           
 22842                           ;doprnt.c: 581: f++;
 22843  001F5E  4A0D               	infsnz	i2printf@f,f,c
 22844  001F60  2A0E               	incf	i2printf@f+1,f,c
 22845  001F62                     i2l6708:
 22846  001F62  C00D  FFF6         	movff	i2printf@f,tblptrl
 22847  001F66  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22848  001F6A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22849  001F6A  6AF8               	clrf	tblptru,c
 22850  001F6C                     	endif
 22851  001F6C                     	if	0	;tblptru may be non-zero
 22852  001F6C                     	endif
 22853  001F6C  0008               	tblrd		*
 22854  001F6E  50F5               	movf	tablat,w,c
 22855                           
 22856                           ; Switch size 1, requested type "space"
 22857                           ; Number of cases is 1, Range of values is 48 to 48
 22858                           ; switch strategies available:
 22859                           ; Name         Instructions Cycles
 22860                           ; simple_byte            4     3 (average)
 22861                           ;	Chosen strategy is simple_byte
 22862  001F70  0A30               	xorlw	48	; case 48
 22863  001F72  B4D8               	btfsc	status,2,c
 22864  001F74  D7F3               	goto	i2l6704
 22865                           
 22866                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22867                           
 22868                           ;doprnt.c: 586: }
 22869                           
 22870                           ;doprnt.c: 585: break;
 22871  001F76  C00D  FFF6         	movff	i2printf@f,tblptrl
 22872  001F7A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22873  001F7E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22874  001F7E  6AF8               	clrf	tblptru,c
 22875  001F80                     	endif
 22876  001F80                     	if	0	;tblptru may be non-zero
 22877  001F80                     	endif
 22878  001F80  0008               	tblrd		*
 22879  001F82  50F5               	movf	tablat,w,c
 22880  001F84  ECD5  F02A         	call	i2_isdigit
 22881  001F88  A0D8               	btfss	status,0,c
 22882  001F8A  D0A6               	goto	i2l6756
 22883                           
 22884                           ;doprnt.c: 598: width = 0;
 22885  001F8C  0E00               	movlw	0
 22886  001F8E  6E29               	movwf	i2printf@width+1,c
 22887  001F90  0E00               	movlw	0
 22888  001F92  6E28               	movwf	i2printf@width,c
 22889  001F94                     i2l6714:
 22890                           
 22891                           ;doprnt.c: 600: width *= 10;
 22892  001F94  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 22893  001F98  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 22894  001F9C  0E00               	movlw	0
 22895  001F9E  6E04               	movwf	i2___wmul@multiplicand+1,c
 22896  001FA0  0E0A               	movlw	10
 22897  001FA2  6E03               	movwf	i2___wmul@multiplicand,c
 22898  001FA4  EC7B  F02A         	call	i2___wmul	;wreg free
 22899  001FA8  C001  F028         	movff	?i2___wmul,i2printf@width
 22900  001FAC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 22901                           
 22902                           ;doprnt.c: 601: width += *f++ - '0';
 22903  001FB0  0ED0               	movlw	208
 22904  001FB2  6E19               	movwf	??i2_printf& (0+255),c
 22905  001FB4  0EFF               	movlw	255
 22906  001FB6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22907  001FB8  C00D  FFF6         	movff	i2printf@f,tblptrl
 22908  001FBC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22909  001FC0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22910  001FC0  6AF8               	clrf	tblptru,c
 22911  001FC2                     	endif
 22912  001FC2                     	if	0	;tblptru may be non-zero
 22913  001FC2                     	endif
 22914  001FC2  0008               	tblrd		*
 22915  001FC4  50F5               	movf	tablat,w,c
 22916  001FC6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22917  001FC8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22918  001FCA  5019               	movf	??i2_printf,w,c
 22919  001FCC  261B               	addwf	??i2_printf+2,f,c
 22920  001FCE  501A               	movf	??i2_printf+1,w,c
 22921  001FD0  221C               	addwfc	??i2_printf+3,f,c
 22922  001FD2  501B               	movf	??i2_printf+2,w,c
 22923  001FD4  2628               	addwf	i2printf@width,f,c
 22924  001FD6  501C               	movf	??i2_printf+3,w,c
 22925  001FD8  2229               	addwfc	i2printf@width+1,f,c
 22926  001FDA  4A0D               	infsnz	i2printf@f,f,c
 22927  001FDC  2A0E               	incf	i2printf@f+1,f,c
 22928                           
 22929                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22930  001FDE  C00D  FFF6         	movff	i2printf@f,tblptrl
 22931  001FE2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22932  001FE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22933  001FE6  6AF8               	clrf	tblptru,c
 22934  001FE8                     	endif
 22935  001FE8                     	if	0	;tblptru may be non-zero
 22936  001FE8                     	endif
 22937  001FE8  0008               	tblrd		*
 22938  001FEA  50F5               	movf	tablat,w,c
 22939  001FEC  ECD5  F02A         	call	i2_isdigit
 22940  001FF0  A0D8               	btfss	status,0,c
 22941  001FF2  D072               	goto	i2l6756
 22942  001FF4  D7CF               	goto	i2l6714
 22943  001FF6                     i2l6722:
 22944                           
 22945                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22946  001FF6  C020  FFD9         	movff	i2printf@ap,fsr2l
 22947  001FFA  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22948  001FFE  CFDE F01E          	movff	postinc2,i2printf@cp
 22949  002002  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22950  002006  0E02               	movlw	2
 22951  002008  2620               	addwf	i2printf@ap,f,c
 22952  00200A  0E00               	movlw	0
 22953  00200C  2221               	addwfc	i2printf@ap+1,f,c
 22954                           
 22955                           ;doprnt.c: 740: if(!cp)
 22956  00200E  501E               	movf	i2printf@cp,w,c
 22957  002010  101F               	iorwf	i2printf@cp+1,w,c
 22958  002012  A4D8               	btfss	status,2,c
 22959  002014  D004               	goto	i2l6730
 22960                           
 22961                           ;doprnt.c: 741: cp = "(null)";
 22962  002016  0EB5               	movlw	low STR_128
 22963  002018  6E1E               	movwf	i2printf@cp,c
 22964  00201A  0EFF               	movlw	high STR_128
 22965  00201C  6E1F               	movwf	i2printf@cp+1,c
 22966  00201E                     i2l6730:
 22967                           
 22968                           ;doprnt.c: 745: len = 0;
 22969  00201E  0E00               	movlw	0
 22970  002020  6E23               	movwf	i2printf@len+1,c
 22971  002022  0E00               	movlw	0
 22972  002024  6E22               	movwf	i2printf@len,c
 22973                           
 22974                           ;doprnt.c: 746: while(cp[len])
 22975  002026  D002               	goto	i2l6734
 22976  002028                     i2l6732:
 22977                           
 22978                           ;doprnt.c: 747: len++;
 22979  002028  4A22               	infsnz	i2printf@len,f,c
 22980  00202A  2A23               	incf	i2printf@len+1,f,c
 22981  00202C                     i2l6734:
 22982  00202C  5022               	movf	i2printf@len,w,c
 22983  00202E  241E               	addwf	i2printf@cp,w,c
 22984  002030  6E19               	movwf	??i2_printf& (0+255),c
 22985  002032  5023               	movf	i2printf@len+1,w,c
 22986  002034  201F               	addwfc	i2printf@cp+1,w,c
 22987  002036  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22988  002038  C019  FFF6         	movff	??i2_printf,tblptrl
 22989  00203C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22990  002040  0E00               	movlw	low (__mediumconst shr (0+16))
 22991  002042  6EF8               	movwf	tblptru,c
 22992  002044  0E0F               	movlw	(high __ramtop+-1)
 22993  002046  64F7               	cpfsgt	tblptrh,c
 22994  002048  D003               	bra	i2u526_47
 22995  00204A  0008               	tblrd		*
 22996  00204C  50F5               	movf	tablat,w,c
 22997  00204E  D005               	bra	i2u526_40
 22998  002050                     i2u526_47:
 22999  002050  CFF6 FFE9          	movff	tblptrl,fsr0l
 23000  002054  CFF7 FFEA          	movff	tblptrh,fsr0h
 23001  002058  50EF               	movf	indf0,w,c
 23002  00205A                     i2u526_40:
 23003  00205A  0900               	iorlw	0
 23004  00205C  A4D8               	btfss	status,2,c
 23005  00205E  D7E4               	goto	i2l6732
 23006                           
 23007                           ;doprnt.c: 757: if(width > len)
 23008  002060  5028               	movf	i2printf@width,w,c
 23009  002062  5C22               	subwf	i2printf@len,w,c
 23010  002064  5029               	movf	i2printf@width+1,w,c
 23011  002066  5823               	subwfb	i2printf@len+1,w,c
 23012  002068  B0D8               	btfsc	status,0,c
 23013  00206A  D005               	goto	i2l6740
 23014                           
 23015                           ;doprnt.c: 758: width -= len;
 23016  00206C  5022               	movf	i2printf@len,w,c
 23017  00206E  5E28               	subwf	i2printf@width,f,c
 23018  002070  5023               	movf	i2printf@len+1,w,c
 23019  002072  5A29               	subwfb	i2printf@width+1,f,c
 23020  002074  D008               	goto	i2l6744
 23021  002076                     i2l6740:
 23022                           
 23023                           ;doprnt.c: 759: else
 23024                           ;doprnt.c: 760: width = 0;
 23025  002076  0E00               	movlw	0
 23026  002078  6E29               	movwf	i2printf@width+1,c
 23027  00207A  0E00               	movlw	0
 23028  00207C  6E28               	movwf	i2printf@width,c
 23029                           
 23030                           ;doprnt.c: 764: while(width--)
 23031  00207E  D003               	goto	i2l6744
 23032  002080                     i2l6742:
 23033                           
 23034                           ;doprnt.c: 765: (putch(' ') );
 23035  002080  0E20               	movlw	32
 23036  002082  EC3A  F02B         	call	i2_putch
 23037  002086                     i2l6744:
 23038  002086  0628               	decf	i2printf@width,f,c
 23039  002088  A0D8               	btfss	status,0,c
 23040  00208A  0629               	decf	i2printf@width+1,f,c
 23041  00208C  2828               	incf	i2printf@width,w,c
 23042  00208E  E1F8               	bnz	i2l6742
 23043  002090  2829               	incf	i2printf@width+1,w,c
 23044  002092  B4D8               	btfsc	status,2,c
 23045  002094  D016               	goto	i2l6750
 23046  002096  D7F4               	goto	i2l6742
 23047  002098                     i2l6746:
 23048                           
 23049                           ;doprnt.c: 768: (putch(*cp++) );
 23050  002098  C01E  FFF6         	movff	i2printf@cp,tblptrl
 23051  00209C  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 23052  0020A0  0E00               	movlw	low (__mediumconst shr (0+16))
 23053  0020A2  6EF8               	movwf	tblptru,c
 23054  0020A4  0E0F               	movlw	(high __ramtop+-1)
 23055  0020A6  64F7               	cpfsgt	tblptrh,c
 23056  0020A8  D003               	bra	i2u530_47
 23057  0020AA  0008               	tblrd		*
 23058  0020AC  50F5               	movf	tablat,w,c
 23059  0020AE  D005               	bra	i2u530_40
 23060  0020B0                     i2u530_47:
 23061  0020B0  CFF6 FFE9          	movff	tblptrl,fsr0l
 23062  0020B4  CFF7 FFEA          	movff	tblptrh,fsr0h
 23063  0020B8  50EF               	movf	indf0,w,c
 23064  0020BA                     i2u530_40:
 23065  0020BA  EC3A  F02B         	call	i2_putch
 23066  0020BE  4A1E               	infsnz	i2printf@cp,f,c
 23067  0020C0  2A1F               	incf	i2printf@cp+1,f,c
 23068  0020C2                     i2l6750:
 23069  0020C2  0622               	decf	i2printf@len,f,c
 23070  0020C4  A0D8               	btfss	status,0,c
 23071  0020C6  0623               	decf	i2printf@len+1,f,c
 23072  0020C8  2822               	incf	i2printf@len,w,c
 23073  0020CA  E1E6               	bnz	i2l6746
 23074  0020CC  2823               	incf	i2printf@len+1,w,c
 23075  0020CE  B4D8               	btfsc	status,2,c
 23076  0020D0  D0DA               	goto	i2l6828
 23077  0020D2  D7E2               	goto	i2l6746
 23078  0020D4                     i2l6752:
 23079                           
 23080                           ;doprnt.c: 818: flag |= 0x40;
 23081  0020D4  8C26               	bsf	i2printf@flag,6,c
 23082                           
 23083                           ;doprnt.c: 822: }
 23084                           
 23085                           ;doprnt.c: 819: break;
 23086  0020D6  D01B               	goto	i2l1486
 23087  0020D8                     i2l6756:
 23088  0020D8  C00D  FFF6         	movff	i2printf@f,tblptrl
 23089  0020DC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23090  0020E0  4A0D               	infsnz	i2printf@f,f,c
 23091  0020E2  2A0E               	incf	i2printf@f+1,f,c
 23092  0020E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23093  0020E4  6AF8               	clrf	tblptru,c
 23094  0020E6                     	endif
 23095  0020E6                     	if	0	;tblptru may be non-zero
 23096  0020E6                     	endif
 23097  0020E6  0008               	tblrd		*
 23098  0020E8  CFF5 F027          	movff	tablat,i2printf@c
 23099  0020EC  5027               	movf	i2printf@c,w,c
 23100                           
 23101                           ; Switch size 1, requested type "space"
 23102                           ; Number of cases is 5, Range of values is 0 to 117
 23103                           ; switch strategies available:
 23104                           ; Name         Instructions Cycles
 23105                           ; simple_byte           16     9 (average)
 23106                           ;	Chosen strategy is simple_byte
 23107  0020EE  0A00               	xorlw	0	; case 0
 23108  0020F0  B4D8               	btfsc	status,2,c
 23109  0020F2  0012               	return	
 23110  0020F4  0A64               	xorlw	100	; case 100
 23111  0020F6  B4D8               	btfsc	status,2,c
 23112  0020F8  D00A               	goto	i2l1486
 23113  0020FA  0A0D               	xorlw	13	; case 105
 23114  0020FC  B4D8               	btfsc	status,2,c
 23115  0020FE  D007               	goto	i2l1486
 23116  002100  0A1A               	xorlw	26	; case 115
 23117  002102  B4D8               	btfsc	status,2,c
 23118  002104  D778               	goto	i2l6722
 23119  002106  0A06               	xorlw	6	; case 117
 23120  002108  B4D8               	btfsc	status,2,c
 23121  00210A  D7E4               	goto	i2l6752
 23122  00210C  D0BC               	goto	i2l6828
 23123  00210E                     i2l1486:
 23124                           
 23125                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 23126  00210E  BC26               	btfsc	i2printf@flag,6,c
 23127  002110  D015               	goto	i2l6768
 23128                           
 23129                           ;doprnt.c: 1253: {
 23130                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 23131  002112  C020  FFD9         	movff	i2printf@ap,fsr2l
 23132  002116  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23133  00211A  CFDE F024          	movff	postinc2,i2printf@val
 23134  00211E  CFDD F025          	movff	postdec2,i2printf@val+1
 23135  002122  0E02               	movlw	2
 23136  002124  2620               	addwf	i2printf@ap,f,c
 23137  002126  0E00               	movlw	0
 23138  002128  2221               	addwfc	i2printf@ap+1,f,c
 23139                           
 23140                           ;doprnt.c: 1261: if((int)val < 0) {
 23141  00212A  AE25               	btfss	i2printf@val+1,7,c
 23142  00212C  D013               	goto	i2l6772
 23143                           
 23144                           ;doprnt.c: 1262: flag |= 0x03;
 23145  00212E  0E03               	movlw	3
 23146  002130  1226               	iorwf	i2printf@flag,f,c
 23147                           
 23148                           ;doprnt.c: 1263: val = -val;
 23149  002132  6C24               	negf	i2printf@val,c
 23150  002134  1E25               	comf	i2printf@val+1,f,c
 23151  002136  B0D8               	btfsc	status,0,c
 23152  002138  2A25               	incf	i2printf@val+1,f,c
 23153                           
 23154                           ;doprnt.c: 1264: }
 23155                           ;doprnt.c: 1266: }
 23156  00213A  D00C               	goto	i2l6772
 23157  00213C                     i2l6768:
 23158                           
 23159                           ;doprnt.c: 1268: else
 23160                           ;doprnt.c: 1273: {
 23161                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23162  00213C  C020  FFD9         	movff	i2printf@ap,fsr2l
 23163  002140  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 23164  002144  CFDE F024          	movff	postinc2,i2printf@val
 23165  002148  CFDD F025          	movff	postdec2,i2printf@val+1
 23166  00214C  0E02               	movlw	2
 23167  00214E  2620               	addwf	i2printf@ap,f,c
 23168  002150  0E00               	movlw	0
 23169  002152  2221               	addwfc	i2printf@ap+1,f,c
 23170  002154                     i2l6772:
 23171                           
 23172                           ;doprnt.c: 1287: }
 23173                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23174  002154  0E01               	movlw	1
 23175  002156  6E27               	movwf	i2printf@c,c
 23176  002158                     i2l6774:
 23177  002158  0E05               	movlw	5
 23178  00215A  1827               	xorwf	i2printf@c,w,c
 23179  00215C  B4D8               	btfsc	status,2,c
 23180  00215E  D015               	goto	i2l6786
 23181                           
 23182                           ;doprnt.c: 1306: if(val < dpowers[c])
 23183  002160  5027               	movf	i2printf@c,w,c
 23184  002162  0D02               	mullw	2
 23185  002164  0EB4               	movlw	low _dpowers
 23186  002166  24F3               	addwf	prodl,w,c
 23187  002168  6EF6               	movwf	tblptrl,c
 23188  00216A  0EFA               	movlw	high _dpowers
 23189  00216C  20F4               	addwfc	prodh,w,c
 23190  00216E  6EF7               	movwf	tblptrh,c
 23191  002170                     	if	1	;There are 3 active tblptr bytes
 23192  002170  6AF8               	clrf	tblptru,c
 23193  002172  0E00               	movlw	low (__mediumconst shr (0+16))
 23194  002174  22F8               	addwfc	tblptru,f,c
 23195  002176                     	endif
 23196  002176  0009               	tblrd		*+
 23197  002178  50F5               	movf	tablat,w,c
 23198  00217A  5C24               	subwf	i2printf@val,w,c
 23199  00217C  0009               	tblrd		*+
 23200  00217E  50F5               	movf	tablat,w,c
 23201  002180  5825               	subwfb	i2printf@val+1,w,c
 23202  002182  A0D8               	btfss	status,0,c
 23203  002184  D002               	goto	i2l6786
 23204                           
 23205                           ;doprnt.c: 1307: break;
 23206  002186  2A27               	incf	i2printf@c,f,c
 23207  002188  D7E7               	goto	i2l6774
 23208  00218A                     i2l6786:
 23209                           
 23210                           ;doprnt.c: 1345: if(width && flag & 0x03)
 23211  00218A  5028               	movf	i2printf@width,w,c
 23212  00218C  1029               	iorwf	i2printf@width+1,w,c
 23213  00218E  B4D8               	btfsc	status,2,c
 23214  002190  D009               	goto	i2l6792
 23215  002192  C026  F019         	movff	i2printf@flag,??i2_printf
 23216  002196  0E03               	movlw	3
 23217  002198  1619               	andwf	??i2_printf,f,c
 23218  00219A  B4D8               	btfsc	status,2,c
 23219  00219C  D003               	goto	i2l6792
 23220                           
 23221                           ;doprnt.c: 1346: width--;
 23222  00219E  0628               	decf	i2printf@width,f,c
 23223  0021A0  A0D8               	btfss	status,0,c
 23224  0021A2  0629               	decf	i2printf@width+1,f,c
 23225  0021A4                     i2l6792:
 23226                           
 23227                           ;doprnt.c: 1381: if(width > c)
 23228  0021A4  0E80               	movlw	128
 23229  0021A6  BE27               	btfsc	i2printf@c,7,c
 23230  0021A8  0E7F               	movlw	127
 23231  0021AA  6E19               	movwf	??i2_printf& (0+255),c
 23232  0021AC  5028               	movf	i2printf@width,w,c
 23233  0021AE  5C27               	subwf	i2printf@c,w,c
 23234  0021B0  5029               	movf	i2printf@width+1,w,c
 23235  0021B2  0A80               	xorlw	128
 23236  0021B4  5819               	subwfb	??i2_printf& (0+255),w,c
 23237  0021B6  B0D8               	btfsc	status,0,c
 23238  0021B8  D007               	goto	i2l6796
 23239                           
 23240                           ;doprnt.c: 1382: width -= c;
 23241  0021BA  5027               	movf	i2printf@c,w,c
 23242  0021BC  5E28               	subwf	i2printf@width,f,c
 23243  0021BE  0E00               	movlw	0
 23244  0021C0  BE27               	btfsc	i2printf@c,7,c
 23245  0021C2  0EFF               	movlw	255
 23246  0021C4  5A29               	subwfb	i2printf@width+1,f,c
 23247  0021C6  D004               	goto	i2l6798
 23248  0021C8                     i2l6796:
 23249                           
 23250                           ;doprnt.c: 1383: else
 23251                           ;doprnt.c: 1384: width = 0;
 23252  0021C8  0E00               	movlw	0
 23253  0021CA  6E29               	movwf	i2printf@width+1,c
 23254  0021CC  0E00               	movlw	0
 23255  0021CE  6E28               	movwf	i2printf@width,c
 23256  0021D0                     i2l6798:
 23257                           
 23258                           ;doprnt.c: 1387: if(flag & 0x04) {
 23259  0021D0  A426               	btfss	i2printf@flag,2,c
 23260  0021D2  D014               	goto	i2l6810
 23261                           
 23262                           ;doprnt.c: 1392: if(flag & 0x03)
 23263  0021D4  C026  F019         	movff	i2printf@flag,??i2_printf
 23264  0021D8  0E03               	movlw	3
 23265  0021DA  1619               	andwf	??i2_printf,f,c
 23266  0021DC  B4D8               	btfsc	status,2,c
 23267  0021DE  D003               	goto	i2l6804
 23268                           
 23269                           ;doprnt.c: 1393: (putch('-') );
 23270  0021E0  0E2D               	movlw	45
 23271  0021E2  EC3A  F02B         	call	i2_putch
 23272  0021E6                     i2l6804:
 23273                           
 23274                           ;doprnt.c: 1415: if(width)
 23275  0021E6  5028               	movf	i2printf@width,w,c
 23276  0021E8  1029               	iorwf	i2printf@width+1,w,c
 23277  0021EA  B4D8               	btfsc	status,2,c
 23278  0021EC  D01E               	goto	i2l6820
 23279                           
 23280                           ;doprnt.c: 1417: (putch('0') );
 23281                           
 23282                           ;doprnt.c: 1416: do
 23283  0021EE  0E30               	movlw	48
 23284  0021F0  EC3A  F02B         	call	i2_putch
 23285                           
 23286                           ;doprnt.c: 1418: while(--width);
 23287  0021F4  0628               	decf	i2printf@width,f,c
 23288  0021F6  A0D8               	btfss	status,0,c
 23289  0021F8  0629               	decf	i2printf@width+1,f,c
 23290  0021FA  D7F5               	goto	i2l6804
 23291  0021FC                     i2l6810:
 23292                           
 23293                           ;doprnt.c: 1422: {
 23294                           ;doprnt.c: 1424: if(width
 23295                           ;doprnt.c: 1428: )
 23296  0021FC  5028               	movf	i2printf@width,w,c
 23297  0021FE  1029               	iorwf	i2printf@width+1,w,c
 23298  002200  B4D8               	btfsc	status,2,c
 23299  002202  D00A               	goto	i2l6816
 23300  002204                     i2l6812:
 23301                           
 23302                           ;doprnt.c: 1430: (putch(' ') );
 23303  002204  0E20               	movlw	32
 23304  002206  EC3A  F02B         	call	i2_putch
 23305                           
 23306                           ;doprnt.c: 1431: while(--width);
 23307  00220A  0628               	decf	i2printf@width,f,c
 23308  00220C  A0D8               	btfss	status,0,c
 23309  00220E  0629               	decf	i2printf@width+1,f,c
 23310  002210  5028               	movf	i2printf@width,w,c
 23311  002212  1029               	iorwf	i2printf@width+1,w,c
 23312  002214  A4D8               	btfss	status,2,c
 23313  002216  D7F6               	goto	i2l6812
 23314  002218                     i2l6816:
 23315                           
 23316                           ;doprnt.c: 1438: if(flag & 0x03)
 23317  002218  C026  F019         	movff	i2printf@flag,??i2_printf
 23318  00221C  0E03               	movlw	3
 23319  00221E  1619               	andwf	??i2_printf,f,c
 23320  002220  B4D8               	btfsc	status,2,c
 23321  002222  D003               	goto	i2l6820
 23322                           
 23323                           ;doprnt.c: 1439: (putch('-') );
 23324  002224  0E2D               	movlw	45
 23325  002226  EC3A  F02B         	call	i2_putch
 23326  00222A                     i2l6820:
 23327                           
 23328                           ;doprnt.c: 1469: }
 23329                           ;doprnt.c: 1472: prec = c;
 23330  00222A  C027  F01D         	movff	i2printf@c,i2printf@prec
 23331                           
 23332                           ;doprnt.c: 1474: while(prec--) {
 23333  00222E  D027               	goto	i2l6826
 23334  002230                     i2l6822:
 23335                           
 23336                           ;doprnt.c: 1478: {
 23337                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23338  002230  501D               	movf	i2printf@prec,w,c
 23339  002232  0D02               	mullw	2
 23340  002234  0EB4               	movlw	low _dpowers
 23341  002236  24F3               	addwf	prodl,w,c
 23342  002238  6EF6               	movwf	tblptrl,c
 23343  00223A  0EFA               	movlw	high _dpowers
 23344  00223C  20F4               	addwfc	prodh,w,c
 23345  00223E  6EF7               	movwf	tblptrh,c
 23346  002240                     	if	1	;There are 3 active tblptr bytes
 23347  002240  6AF8               	clrf	tblptru,c
 23348  002242  0E00               	movlw	low (__mediumconst shr (0+16))
 23349  002244  22F8               	addwfc	tblptru,f,c
 23350  002246                     	endif
 23351  002246  0009               	tblrd		*+
 23352  002248  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 23353  00224C  000A               	tblrd		*-
 23354  00224E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 23355  002252  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 23356  002256  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 23357  00225A  EC57  F027         	call	i2___lwdiv	;wreg free
 23358  00225E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 23359  002262  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 23360  002266  0E00               	movlw	0
 23361  002268  6E04               	movwf	i2___lwmod@divisor+1,c
 23362  00226A  0E0A               	movlw	10
 23363  00226C  6E03               	movwf	i2___lwmod@divisor,c
 23364  00226E  EC16  F028         	call	i2___lwmod	;wreg free
 23365  002272  5001               	movf	?i2___lwmod,w,c
 23366  002274  0F30               	addlw	48
 23367  002276  6E27               	movwf	i2printf@c,c
 23368                           
 23369                           ;doprnt.c: 1523: }
 23370                           ;doprnt.c: 1524: (putch(c) );
 23371  002278  5027               	movf	i2printf@c,w,c
 23372  00227A  EC3A  F02B         	call	i2_putch
 23373  00227E                     i2l6826:
 23374  00227E  061D               	decf	i2printf@prec,f,c
 23375  002280  281D               	incf	i2printf@prec,w,c
 23376  002282  A4D8               	btfss	status,2,c
 23377  002284  D7D5               	goto	i2l6822
 23378  002286                     i2l6828:
 23379  002286  C00D  FFF6         	movff	i2printf@f,tblptrl
 23380  00228A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23381  00228E  4A0D               	infsnz	i2printf@f,f,c
 23382  002290  2A0E               	incf	i2printf@f+1,f,c
 23383  002292                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23384  002292  6AF8               	clrf	tblptru,c
 23385  002294                     	endif
 23386  002294                     	if	0	;tblptru may be non-zero
 23387  002294                     	endif
 23388  002294  0008               	tblrd		*
 23389  002296  CFF5 F027          	movff	tablat,i2printf@c
 23390  00229A  5027               	movf	i2printf@c,w,c
 23391  00229C  B4D8               	btfsc	status,2,c
 23392  00229E  0012               	return	
 23393  0022A0  D64E               	goto	i2l6698
 23394  0022A2                     __end_ofi2_printf:
 23395                           	opt stack 0
 23396                           pclatu	equ	0xFFB
 23397                           pclath	equ	0xFFA
 23398                           tblptru	equ	0xFF8
 23399                           tblptrh	equ	0xFF7
 23400                           tblptrl	equ	0xFF6
 23401                           tablat	equ	0xFF5
 23402                           prodh	equ	0xFF4
 23403                           prodl	equ	0xFF3
 23404                           intcon	equ	0xFF2
 23405                           intcon2	equ	0xFF1
 23406                           intcon3	equ	0xFF0
 23407                           indf0	equ	0xFEF
 23408                           postinc0	equ	0xFEE
 23409                           fsr0h	equ	0xFEA
 23410                           fsr0l	equ	0xFE9
 23411                           wreg	equ	0xFE8
 23412                           postdec1	equ	0xFE5
 23413                           fsr1h	equ	0xFE2
 23414                           fsr1l	equ	0xFE1
 23415                           indf2	equ	0xFDF
 23416                           postinc2	equ	0xFDE
 23417                           postdec2	equ	0xFDD
 23418                           fsr2h	equ	0xFDA
 23419                           fsr2l	equ	0xFD9
 23420                           status	equ	0xFD8
 23421                           
 23422 ;; *************** function i2_putch *****************
 23423 ;; Defined at:
 23424 ;;		line 20 in file "lcd.c"
 23425 ;; Parameters:    Size  Location     Type
 23426 ;;  data            1    wreg     unsigned char 
 23427 ;; Auto vars:     Size  Location     Type
 23428 ;;  data            1    2[COMRAM] unsigned char 
 23429 ;; Return value:  Size  Location     Type
 23430 ;;                  1    wreg      void 
 23431 ;; Registers used:
 23432 ;;		wreg, status,2, status,0, cstack
 23433 ;; Tracked objects:
 23434 ;;		On entry : 0/0
 23435 ;;		On exit  : 0/0
 23436 ;;		Unchanged: 0/0
 23437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23441 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23442 ;;Total ram usage:        1 bytes
 23443 ;; Hardware stack levels used:    1
 23444 ;; Hardware stack levels required when called:    1
 23445 ;; This function calls:
 23446 ;;		i2_lcdNibble
 23447 ;; This function is called by:
 23448 ;;		i2_printf
 23449 ;; This function uses a non-reentrant model
 23450 ;;
 23451                           
 23452                           	psect	text83
 23453  005674                     __ptext83:
 23454                           	opt stack 0
 23455  005674                     i2_putch:
 23456                           	opt stack 20
 23457                           
 23458                           ;incstack = 0
 23459                           ;i2putch@data stored from wreg
 23460  005674  6E03               	movwf	i2putch@data,c
 23461                           
 23462                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 23463  005676  848C               	bsf	3980,2,c	;volatile
 23464                           
 23465                           ;lcd.c: 22: lcdNibble(data);
 23466  005678  5003               	movf	i2putch@data,w,c
 23467  00567A  EC2C  F027         	call	i2_lcdNibble
 23468  00567E  0012               	return		;funcret
 23469  005680                     __end_ofi2_putch:
 23470                           	opt stack 0
 23471                           pclatu	equ	0xFFB
 23472                           pclath	equ	0xFFA
 23473                           tblptru	equ	0xFF8
 23474                           tblptrh	equ	0xFF7
 23475                           tblptrl	equ	0xFF6
 23476                           tablat	equ	0xFF5
 23477                           prodh	equ	0xFF4
 23478                           prodl	equ	0xFF3
 23479                           intcon	equ	0xFF2
 23480                           intcon2	equ	0xFF1
 23481                           intcon3	equ	0xFF0
 23482                           indf0	equ	0xFEF
 23483                           postinc0	equ	0xFEE
 23484                           fsr0h	equ	0xFEA
 23485                           fsr0l	equ	0xFE9
 23486                           wreg	equ	0xFE8
 23487                           postdec1	equ	0xFE5
 23488                           fsr1h	equ	0xFE2
 23489                           fsr1l	equ	0xFE1
 23490                           indf2	equ	0xFDF
 23491                           postinc2	equ	0xFDE
 23492                           postdec2	equ	0xFDD
 23493                           fsr2h	equ	0xFDA
 23494                           fsr2l	equ	0xFD9
 23495                           status	equ	0xFD8
 23496                           
 23497 ;; *************** function i2_isdigit *****************
 23498 ;; Defined at:
 23499 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 23500 ;; Parameters:    Size  Location     Type
 23501 ;;  c               1    wreg     unsigned char 
 23502 ;; Auto vars:     Size  Location     Type
 23503 ;;  c               1    2[COMRAM] unsigned char 
 23504 ;; Return value:  Size  Location     Type
 23505 ;;		None               void
 23506 ;; Registers used:
 23507 ;;		wreg, status,2, status,0
 23508 ;; Tracked objects:
 23509 ;;		On entry : 0/0
 23510 ;;		On exit  : 0/0
 23511 ;;		Unchanged: 0/0
 23512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23516 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;Total ram usage:        3 bytes
 23518 ;; Hardware stack levels used:    1
 23519 ;; This function calls:
 23520 ;;		Nothing
 23521 ;; This function is called by:
 23522 ;;		i2_printf
 23523 ;; This function uses a non-reentrant model
 23524 ;;
 23525                           
 23526                           	psect	text84
 23527  0055AA                     __ptext84:
 23528                           	opt stack 0
 23529  0055AA                     i2_isdigit:
 23530                           	opt stack 21
 23531                           
 23532                           ;incstack = 0
 23533                           ;i2isdigit@c stored from wreg
 23534  0055AA  6E03               	movwf	i2isdigit@c,c
 23535  0055AC  0E00               	movlw	0
 23536  0055AE  6E02               	movwf	i2_isdigit$2056,c
 23537  0055B0  0E3A               	movlw	58
 23538  0055B2  6003               	cpfslt	i2isdigit@c,c
 23539  0055B4  D005               	goto	i2l6398
 23540  0055B6  0E2F               	movlw	47
 23541  0055B8  6403               	cpfsgt	i2isdigit@c,c
 23542  0055BA  D002               	goto	i2l6398
 23543  0055BC  0E01               	movlw	1
 23544  0055BE  6E02               	movwf	i2_isdigit$2056,c
 23545  0055C0                     i2l6398:
 23546  0055C0  C002  F001         	movff	i2_isdigit$2056,??i2_isdigit
 23547  0055C4  3001               	rrcf	??i2_isdigit,w,c
 23548  0055C6  0012               	return	
 23549  0055C8                     __end_ofi2_isdigit:
 23550                           	opt stack 0
 23551                           pclatu	equ	0xFFB
 23552                           pclath	equ	0xFFA
 23553                           tblptru	equ	0xFF8
 23554                           tblptrh	equ	0xFF7
 23555                           tblptrl	equ	0xFF6
 23556                           tablat	equ	0xFF5
 23557                           prodh	equ	0xFF4
 23558                           prodl	equ	0xFF3
 23559                           intcon	equ	0xFF2
 23560                           intcon2	equ	0xFF1
 23561                           intcon3	equ	0xFF0
 23562                           indf0	equ	0xFEF
 23563                           postinc0	equ	0xFEE
 23564                           fsr0h	equ	0xFEA
 23565                           fsr0l	equ	0xFE9
 23566                           wreg	equ	0xFE8
 23567                           postdec1	equ	0xFE5
 23568                           fsr1h	equ	0xFE2
 23569                           fsr1l	equ	0xFE1
 23570                           indf2	equ	0xFDF
 23571                           postinc2	equ	0xFDE
 23572                           postdec2	equ	0xFDD
 23573                           fsr2h	equ	0xFDA
 23574                           fsr2l	equ	0xFD9
 23575                           status	equ	0xFD8
 23576                           
 23577 ;; *************** function i2___wmul *****************
 23578 ;; Defined at:
 23579 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 23580 ;; Parameters:    Size  Location     Type
 23581 ;;  multiplier      2    0[COMRAM] unsigned int 
 23582 ;;  multiplicand    2    2[COMRAM] unsigned int 
 23583 ;; Auto vars:     Size  Location     Type
 23584 ;;  __wmul          2    4[COMRAM] unsigned int 
 23585 ;; Return value:  Size  Location     Type
 23586 ;;                  2    0[COMRAM] unsigned int 
 23587 ;; Registers used:
 23588 ;;		wreg, status,2, status,0, prodl, prodh
 23589 ;; Tracked objects:
 23590 ;;		On entry : 0/0
 23591 ;;		On exit  : 0/0
 23592 ;;		Unchanged: 0/0
 23593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23594 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23595 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23597 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23598 ;;Total ram usage:        6 bytes
 23599 ;; Hardware stack levels used:    1
 23600 ;; This function calls:
 23601 ;;		Nothing
 23602 ;; This function is called by:
 23603 ;;		_printSortTimer
 23604 ;;		_retrieveLog
 23605 ;;		i2_printf
 23606 ;; This function uses a non-reentrant model
 23607 ;;
 23608                           
 23609                           	psect	text85
 23610  0054F6                     __ptext85:
 23611                           	opt stack 0
 23612  0054F6                     i2___wmul:
 23613                           	opt stack 21
 23614                           
 23615                           ;incstack = 0
 23616  0054F6  5001               	movf	i2___wmul@multiplier,w,c
 23617  0054F8  0203               	mulwf	i2___wmul@multiplicand,c
 23618  0054FA  CFF3 F005          	movff	prodl,i2___wmul@product
 23619  0054FE  CFF4 F006          	movff	prodh,i2___wmul@product+1
 23620  005502  5001               	movf	i2___wmul@multiplier,w,c
 23621  005504  0204               	mulwf	i2___wmul@multiplicand+1,c
 23622  005506  50F3               	movf	prodl,w,c
 23623  005508  2606               	addwf	i2___wmul@product+1,f,c
 23624  00550A  5002               	movf	i2___wmul@multiplier+1,w,c
 23625  00550C  0203               	mulwf	i2___wmul@multiplicand,c
 23626  00550E  50F3               	movf	prodl,w,c
 23627  005510  2606               	addwf	i2___wmul@product+1,f,c
 23628  005512  C005  F001         	movff	i2___wmul@product,?i2___wmul
 23629  005516  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 23630  00551A  0012               	return	
 23631  00551C                     __end_ofi2___wmul:
 23632                           	opt stack 0
 23633                           pclatu	equ	0xFFB
 23634                           pclath	equ	0xFFA
 23635                           tblptru	equ	0xFF8
 23636                           tblptrh	equ	0xFF7
 23637                           tblptrl	equ	0xFF6
 23638                           tablat	equ	0xFF5
 23639                           prodh	equ	0xFF4
 23640                           prodl	equ	0xFF3
 23641                           intcon	equ	0xFF2
 23642                           intcon2	equ	0xFF1
 23643                           intcon3	equ	0xFF0
 23644                           indf0	equ	0xFEF
 23645                           postinc0	equ	0xFEE
 23646                           fsr0h	equ	0xFEA
 23647                           fsr0l	equ	0xFE9
 23648                           wreg	equ	0xFE8
 23649                           postdec1	equ	0xFE5
 23650                           fsr1h	equ	0xFE2
 23651                           fsr1l	equ	0xFE1
 23652                           indf2	equ	0xFDF
 23653                           postinc2	equ	0xFDE
 23654                           postdec2	equ	0xFDD
 23655                           fsr2h	equ	0xFDA
 23656                           fsr2l	equ	0xFD9
 23657                           status	equ	0xFD8
 23658                           
 23659 ;; *************** function i2___lwmod *****************
 23660 ;; Defined at:
 23661 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 23662 ;; Parameters:    Size  Location     Type
 23663 ;;  dividend        2    0[COMRAM] unsigned int 
 23664 ;;  divisor         2    2[COMRAM] unsigned int 
 23665 ;; Auto vars:     Size  Location     Type
 23666 ;;  __lwmod         1    4[COMRAM] unsigned char 
 23667 ;; Return value:  Size  Location     Type
 23668 ;;                  2    0[COMRAM] unsigned int 
 23669 ;; Registers used:
 23670 ;;		wreg, status,2, status,0
 23671 ;; Tracked objects:
 23672 ;;		On entry : 0/0
 23673 ;;		On exit  : 0/0
 23674 ;;		Unchanged: 0/0
 23675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23680 ;;Total ram usage:        5 bytes
 23681 ;; Hardware stack levels used:    1
 23682 ;; This function calls:
 23683 ;;		Nothing
 23684 ;; This function is called by:
 23685 ;;		_printSortTimer
 23686 ;;		i2_printf
 23687 ;; This function uses a non-reentrant model
 23688 ;;
 23689                           
 23690                           	psect	text86
 23691  00502C                     __ptext86:
 23692                           	opt stack 0
 23693  00502C                     i2___lwmod:
 23694                           	opt stack 21
 23695                           
 23696                           ;incstack = 0
 23697  00502C  5003               	movf	i2___lwmod@divisor,w,c
 23698  00502E  1004               	iorwf	i2___lwmod@divisor+1,w,c
 23699  005030  B4D8               	btfsc	status,2,c
 23700  005032  D018               	goto	i2l1943
 23701  005034  0E01               	movlw	1
 23702  005036  6E05               	movwf	i2___lwmod@counter,c
 23703  005038  D004               	goto	i2l6430
 23704  00503A                     i2l6428:
 23705  00503A  90D8               	bcf	status,0,c
 23706  00503C  3603               	rlcf	i2___lwmod@divisor,f,c
 23707  00503E  3604               	rlcf	i2___lwmod@divisor+1,f,c
 23708  005040  2A05               	incf	i2___lwmod@counter,f,c
 23709  005042                     i2l6430:
 23710  005042  AE04               	btfss	i2___lwmod@divisor+1,7,c
 23711  005044  D7FA               	goto	i2l6428
 23712  005046                     i2l6432:
 23713  005046  5003               	movf	i2___lwmod@divisor,w,c
 23714  005048  5C01               	subwf	i2___lwmod@dividend,w,c
 23715  00504A  5004               	movf	i2___lwmod@divisor+1,w,c
 23716  00504C  5802               	subwfb	i2___lwmod@dividend+1,w,c
 23717  00504E  A0D8               	btfss	status,0,c
 23718  005050  D004               	goto	i2l6436
 23719  005052  5003               	movf	i2___lwmod@divisor,w,c
 23720  005054  5E01               	subwf	i2___lwmod@dividend,f,c
 23721  005056  5004               	movf	i2___lwmod@divisor+1,w,c
 23722  005058  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 23723  00505A                     i2l6436:
 23724  00505A  90D8               	bcf	status,0,c
 23725  00505C  3204               	rrcf	i2___lwmod@divisor+1,f,c
 23726  00505E  3203               	rrcf	i2___lwmod@divisor,f,c
 23727  005060  2E05               	decfsz	i2___lwmod@counter,f,c
 23728  005062  D7F1               	goto	i2l6432
 23729  005064                     i2l1943:
 23730  005064  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 23731  005068  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 23732  00506C  0012               	return		;funcret
 23733  00506E                     __end_ofi2___lwmod:
 23734                           	opt stack 0
 23735                           pclatu	equ	0xFFB
 23736                           pclath	equ	0xFFA
 23737                           tblptru	equ	0xFF8
 23738                           tblptrh	equ	0xFF7
 23739                           tblptrl	equ	0xFF6
 23740                           tablat	equ	0xFF5
 23741                           prodh	equ	0xFF4
 23742                           prodl	equ	0xFF3
 23743                           intcon	equ	0xFF2
 23744                           intcon2	equ	0xFF1
 23745                           intcon3	equ	0xFF0
 23746                           indf0	equ	0xFEF
 23747                           postinc0	equ	0xFEE
 23748                           fsr0h	equ	0xFEA
 23749                           fsr0l	equ	0xFE9
 23750                           wreg	equ	0xFE8
 23751                           postdec1	equ	0xFE5
 23752                           fsr1h	equ	0xFE2
 23753                           fsr1l	equ	0xFE1
 23754                           indf2	equ	0xFDF
 23755                           postinc2	equ	0xFDE
 23756                           postdec2	equ	0xFDD
 23757                           fsr2h	equ	0xFDA
 23758                           fsr2l	equ	0xFD9
 23759                           status	equ	0xFD8
 23760                           
 23761 ;; *************** function i2___lwdiv *****************
 23762 ;; Defined at:
 23763 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 23764 ;; Parameters:    Size  Location     Type
 23765 ;;  dividend        2    5[COMRAM] unsigned int 
 23766 ;;  divisor         2    7[COMRAM] unsigned int 
 23767 ;; Auto vars:     Size  Location     Type
 23768 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 23769 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 23770 ;; Return value:  Size  Location     Type
 23771 ;;                  2    5[COMRAM] unsigned int 
 23772 ;; Registers used:
 23773 ;;		wreg, status,2, status,0
 23774 ;; Tracked objects:
 23775 ;;		On entry : 0/0
 23776 ;;		On exit  : 0/0
 23777 ;;		Unchanged: 0/0
 23778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23780 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23783 ;;Total ram usage:        7 bytes
 23784 ;; Hardware stack levels used:    1
 23785 ;; This function calls:
 23786 ;;		Nothing
 23787 ;; This function is called by:
 23788 ;;		_printSortTimer
 23789 ;;		i2_printf
 23790 ;; This function uses a non-reentrant model
 23791 ;;
 23792                           
 23793                           	psect	text87
 23794  004EAE                     __ptext87:
 23795                           	opt stack 0
 23796  004EAE                     i2___lwdiv:
 23797                           	opt stack 21
 23798                           
 23799                           ;incstack = 0
 23800  004EAE  0E00               	movlw	0
 23801  004EB0  6E0B               	movwf	i2___lwdiv@quotient+1,c
 23802  004EB2  0E00               	movlw	0
 23803  004EB4  6E0A               	movwf	i2___lwdiv@quotient,c
 23804  004EB6  5008               	movf	i2___lwdiv@divisor,w,c
 23805  004EB8  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 23806  004EBA  B4D8               	btfsc	status,2,c
 23807  004EBC  D01C               	goto	i2l1933
 23808  004EBE  0E01               	movlw	1
 23809  004EC0  6E0C               	movwf	i2___lwdiv@counter,c
 23810  004EC2  D004               	goto	i2l6410
 23811  004EC4                     i2l6408:
 23812  004EC4  90D8               	bcf	status,0,c
 23813  004EC6  3608               	rlcf	i2___lwdiv@divisor,f,c
 23814  004EC8  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 23815  004ECA  2A0C               	incf	i2___lwdiv@counter,f,c
 23816  004ECC                     i2l6410:
 23817  004ECC  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 23818  004ECE  D7FA               	goto	i2l6408
 23819  004ED0                     i2l6412:
 23820  004ED0  90D8               	bcf	status,0,c
 23821  004ED2  360A               	rlcf	i2___lwdiv@quotient,f,c
 23822  004ED4  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 23823  004ED6  5008               	movf	i2___lwdiv@divisor,w,c
 23824  004ED8  5C06               	subwf	i2___lwdiv@dividend,w,c
 23825  004EDA  5009               	movf	i2___lwdiv@divisor+1,w,c
 23826  004EDC  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 23827  004EDE  A0D8               	btfss	status,0,c
 23828  004EE0  D005               	goto	i2l6420
 23829  004EE2  5008               	movf	i2___lwdiv@divisor,w,c
 23830  004EE4  5E06               	subwf	i2___lwdiv@dividend,f,c
 23831  004EE6  5009               	movf	i2___lwdiv@divisor+1,w,c
 23832  004EE8  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 23833  004EEA  800A               	bsf	i2___lwdiv@quotient,0,c
 23834  004EEC                     i2l6420:
 23835  004EEC  90D8               	bcf	status,0,c
 23836  004EEE  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 23837  004EF0  3208               	rrcf	i2___lwdiv@divisor,f,c
 23838  004EF2  2E0C               	decfsz	i2___lwdiv@counter,f,c
 23839  004EF4  D7ED               	goto	i2l6412
 23840  004EF6                     i2l1933:
 23841  004EF6  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23842  004EFA  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23843  004EFE  0012               	return		;funcret
 23844  004F00                     __end_ofi2___lwdiv:
 23845                           	opt stack 0
 23846                           pclatu	equ	0xFFB
 23847                           pclath	equ	0xFFA
 23848                           tblptru	equ	0xFF8
 23849                           tblptrh	equ	0xFF7
 23850                           tblptrl	equ	0xFF6
 23851                           tablat	equ	0xFF5
 23852                           prodh	equ	0xFF4
 23853                           prodl	equ	0xFF3
 23854                           intcon	equ	0xFF2
 23855                           intcon2	equ	0xFF1
 23856                           intcon3	equ	0xFF0
 23857                           indf0	equ	0xFEF
 23858                           postinc0	equ	0xFEE
 23859                           fsr0h	equ	0xFEA
 23860                           fsr0l	equ	0xFE9
 23861                           wreg	equ	0xFE8
 23862                           postdec1	equ	0xFE5
 23863                           fsr1h	equ	0xFE2
 23864                           fsr1l	equ	0xFE1
 23865                           indf2	equ	0xFDF
 23866                           postinc2	equ	0xFDE
 23867                           postdec2	equ	0xFDD
 23868                           fsr2h	equ	0xFDA
 23869                           fsr2l	equ	0xFD9
 23870                           status	equ	0xFD8
 23871                           
 23872 ;; *************** function i2_lcdInst *****************
 23873 ;; Defined at:
 23874 ;;		line 15 in file "lcd.c"
 23875 ;; Parameters:    Size  Location     Type
 23876 ;;  data            1    wreg     unsigned char 
 23877 ;; Auto vars:     Size  Location     Type
 23878 ;;  data            1    2[COMRAM] unsigned char 
 23879 ;; Return value:  Size  Location     Type
 23880 ;;                  1    wreg      void 
 23881 ;; Registers used:
 23882 ;;		wreg, status,2, status,0, cstack
 23883 ;; Tracked objects:
 23884 ;;		On entry : 0/0
 23885 ;;		On exit  : 0/0
 23886 ;;		Unchanged: 0/0
 23887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23891 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23892 ;;Total ram usage:        1 bytes
 23893 ;; Hardware stack levels used:    1
 23894 ;; Hardware stack levels required when called:    1
 23895 ;; This function calls:
 23896 ;;		i2_lcdNibble
 23897 ;; This function is called by:
 23898 ;;		_change_state_to_menu_11
 23899 ;;		_change_state_to_menu_23
 23900 ;;		_change_state_to_logs_11
 23901 ;;		_change_state_to_logs_12
 23902 ;;		_change_state_to_logs_22
 23903 ;;		_change_state_to_logs_23
 23904 ;;		_change_state_to_logs_33
 23905 ;;		_change_state_to_logs_34
 23906 ;;		_printSortTimer
 23907 ;;		i2_change_state_to_menu_start
 23908 ;;		i2_change_state_to_menu_12
 23909 ;;		i2_change_state_to_menu_22
 23910 ;;		i2_printRTC
 23911 ;; This function uses a non-reentrant model
 23912 ;;
 23913                           
 23914                           	psect	text88
 23915  005680                     __ptext88:
 23916                           	opt stack 0
 23917  005680                     i2_lcdInst:
 23918                           	opt stack 20
 23919                           
 23920                           ;incstack = 0
 23921                           ;i2lcdInst@data stored from wreg
 23922  005680  6E03               	movwf	i2lcdInst@data,c
 23923                           
 23924                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23925  005682  948C               	bcf	3980,2,c	;volatile
 23926                           
 23927                           ;lcd.c: 17: lcdNibble(data);
 23928  005684  5003               	movf	i2lcdInst@data,w,c
 23929  005686  EC2C  F027         	call	i2_lcdNibble
 23930  00568A  0012               	return		;funcret
 23931  00568C                     __end_ofi2_lcdInst:
 23932                           	opt stack 0
 23933                           pclatu	equ	0xFFB
 23934                           pclath	equ	0xFFA
 23935                           tblptru	equ	0xFF8
 23936                           tblptrh	equ	0xFF7
 23937                           tblptrl	equ	0xFF6
 23938                           tablat	equ	0xFF5
 23939                           prodh	equ	0xFF4
 23940                           prodl	equ	0xFF3
 23941                           intcon	equ	0xFF2
 23942                           intcon2	equ	0xFF1
 23943                           intcon3	equ	0xFF0
 23944                           indf0	equ	0xFEF
 23945                           postinc0	equ	0xFEE
 23946                           fsr0h	equ	0xFEA
 23947                           fsr0l	equ	0xFE9
 23948                           wreg	equ	0xFE8
 23949                           postdec1	equ	0xFE5
 23950                           fsr1h	equ	0xFE2
 23951                           fsr1l	equ	0xFE1
 23952                           indf2	equ	0xFDF
 23953                           postinc2	equ	0xFDE
 23954                           postdec2	equ	0xFDD
 23955                           fsr2h	equ	0xFDA
 23956                           fsr2l	equ	0xFD9
 23957                           status	equ	0xFD8
 23958                           
 23959 ;; *************** function i2_lcdNibble *****************
 23960 ;; Defined at:
 23961 ;;		line 25 in file "lcd.c"
 23962 ;; Parameters:    Size  Location     Type
 23963 ;;  data            1    wreg     unsigned char 
 23964 ;; Auto vars:     Size  Location     Type
 23965 ;;  data            1    1[COMRAM] unsigned char 
 23966 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23967 ;; Return value:  Size  Location     Type
 23968 ;;                  1    wreg      void 
 23969 ;; Registers used:
 23970 ;;		wreg, status,2, status,0
 23971 ;; Tracked objects:
 23972 ;;		On entry : 0/0
 23973 ;;		On exit  : 0/0
 23974 ;;		Unchanged: 0/0
 23975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23979 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23980 ;;Total ram usage:        2 bytes
 23981 ;; Hardware stack levels used:    1
 23982 ;; This function calls:
 23983 ;;		Nothing
 23984 ;; This function is called by:
 23985 ;;		i2_lcdInst
 23986 ;;		i2_putch
 23987 ;; This function uses a non-reentrant model
 23988 ;;
 23989                           
 23990                           	psect	text89
 23991  004E58                     __ptext89:
 23992                           	opt stack 0
 23993  004E58                     i2_lcdNibble:
 23994                           	opt stack 20
 23995                           
 23996                           ;incstack = 0
 23997                           ;i2lcdNibble@data stored from wreg
 23998  004E58  6E02               	movwf	i2lcdNibble@data,c
 23999                           
 24000                           ;lcd.c: 27: char temp = data & 0xF0;
 24001  004E5A  5002               	movf	i2lcdNibble@data,w,c
 24002  004E5C  0BF0               	andlw	240
 24003  004E5E  6E01               	movwf	i2lcdNibble@temp,c
 24004                           
 24005                           ;lcd.c: 28: LATD = LATD & 0x0F;
 24006  004E60  508C               	movf	3980,w,c	;volatile
 24007  004E62  0B0F               	andlw	15
 24008  004E64  6E8C               	movwf	3980,c	;volatile
 24009                           
 24010                           ;lcd.c: 29: LATD = temp | LATD;
 24011  004E66  5001               	movf	i2lcdNibble@temp,w,c
 24012  004E68  108C               	iorwf	3980,w,c	;volatile
 24013  004E6A  6E8C               	movwf	3980,c	;volatile
 24014                           
 24015                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 24016  004E6C  868C               	bsf	3980,3,c	;volatile
 24017                           
 24018                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24019  004E6E  0E42               	movlw	66
 24020  004E70                     i2u1072_47:
 24021  004E70  2EE8               	decfsz	wreg,f,c
 24022  004E72  D7FE               	bra	i2u1072_47
 24023  004E74  D000               	nop2	
 24024                           
 24025                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 24026  004E76  968C               	bcf	3980,3,c	;volatile
 24027                           
 24028                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24029  004E78  0E42               	movlw	66
 24030  004E7A                     i2u1073_47:
 24031  004E7A  2EE8               	decfsz	wreg,f,c
 24032  004E7C  D7FE               	bra	i2u1073_47
 24033  004E7E  D000               	nop2	
 24034                           
 24035                           ;lcd.c: 36: data = data << 4;
 24036  004E80  3802               	swapf	i2lcdNibble@data,w,c
 24037  004E82  0BF0               	andlw	240
 24038  004E84  6E02               	movwf	i2lcdNibble@data,c
 24039                           
 24040                           ;lcd.c: 38: temp = data & 0xF0;
 24041  004E86  5002               	movf	i2lcdNibble@data,w,c
 24042  004E88  0BF0               	andlw	240
 24043  004E8A  6E01               	movwf	i2lcdNibble@temp,c
 24044                           
 24045                           ;lcd.c: 39: LATD = LATD & 0x0F;
 24046  004E8C  508C               	movf	3980,w,c	;volatile
 24047  004E8E  0B0F               	andlw	15
 24048  004E90  6E8C               	movwf	3980,c	;volatile
 24049                           
 24050                           ;lcd.c: 40: LATD = temp | LATD;
 24051  004E92  5001               	movf	i2lcdNibble@temp,w,c
 24052  004E94  108C               	iorwf	3980,w,c	;volatile
 24053  004E96  6E8C               	movwf	3980,c	;volatile
 24054                           
 24055                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 24056  004E98  868C               	bsf	3980,3,c	;volatile
 24057                           
 24058                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24059  004E9A  0E42               	movlw	66
 24060  004E9C                     i2u1074_47:
 24061  004E9C  2EE8               	decfsz	wreg,f,c
 24062  004E9E  D7FE               	bra	i2u1074_47
 24063  004EA0  D000               	nop2	
 24064                           
 24065                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 24066  004EA2  968C               	bcf	3980,3,c	;volatile
 24067                           
 24068                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 24069  004EA4  0E42               	movlw	66
 24070  004EA6                     i2u1075_47:
 24071  004EA6  2EE8               	decfsz	wreg,f,c
 24072  004EA8  D7FE               	bra	i2u1075_47
 24073  004EAA  D000               	nop2	
 24074  004EAC  0012               	return		;funcret
 24075  004EAE                     __end_ofi2_lcdNibble:
 24076                           	opt stack 0
 24077                           pclatu	equ	0xFFB
 24078                           pclath	equ	0xFFA
 24079                           tblptru	equ	0xFF8
 24080                           tblptrh	equ	0xFF7
 24081                           tblptrl	equ	0xFF6
 24082                           tablat	equ	0xFF5
 24083                           prodh	equ	0xFF4
 24084                           prodl	equ	0xFF3
 24085                           intcon	equ	0xFF2
 24086                           intcon2	equ	0xFF1
 24087                           intcon3	equ	0xFF0
 24088                           indf0	equ	0xFEF
 24089                           postinc0	equ	0xFEE
 24090                           fsr0h	equ	0xFEA
 24091                           fsr0l	equ	0xFE9
 24092                           wreg	equ	0xFE8
 24093                           postdec1	equ	0xFE5
 24094                           fsr1h	equ	0xFE2
 24095                           fsr1l	equ	0xFE1
 24096                           indf2	equ	0xFDF
 24097                           postinc2	equ	0xFDE
 24098                           postdec2	equ	0xFDD
 24099                           fsr2h	equ	0xFDA
 24100                           fsr2l	equ	0xFD9
 24101                           status	equ	0xFD8
 24102                           
 24103 ;; *************** function i2_getRTC *****************
 24104 ;; Defined at:
 24105 ;;		line 44 in file "RTC.c"
 24106 ;; Parameters:    Size  Location     Type
 24107 ;;		None
 24108 ;; Auto vars:     Size  Location     Type
 24109 ;;  getRTC          2    3[COMRAM] int 
 24110 ;; Return value:  Size  Location     Type
 24111 ;;                  1    wreg      void 
 24112 ;; Registers used:
 24113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24114 ;; Tracked objects:
 24115 ;;		On entry : 0/0
 24116 ;;		On exit  : 0/0
 24117 ;;		Unchanged: 0/0
 24118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24120 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24123 ;;Total ram usage:        2 bytes
 24124 ;; Hardware stack levels used:    1
 24125 ;; Hardware stack levels required when called:    2
 24126 ;; This function calls:
 24127 ;;		i2_I2C_Master_Read
 24128 ;;		i2_I2C_Master_Start
 24129 ;;		i2_I2C_Master_Stop
 24130 ;;		i2_I2C_Master_Write
 24131 ;; This function is called by:
 24132 ;;		_printSortTimer
 24133 ;;		i2_printRTC
 24134 ;; This function uses a non-reentrant model
 24135 ;;
 24136                           
 24137                           	psect	text90
 24138  004B30                     __ptext90:
 24139                           	opt stack 0
 24140  004B30                     i2_getRTC:
 24141                           	opt stack 19
 24142                           
 24143                           ;RTC.c: 48: I2C_Master_Start();
 24144                           
 24145                           ;incstack = 0
 24146  004B30  EC60  F02B         	call	i2_I2C_Master_Start	;wreg free
 24147                           
 24148                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 24149  004B34  0E00               	movlw	0
 24150  004B36  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24151  004B38  0ED0               	movlw	208
 24152  004B3A  6E02               	movwf	i2I2C_Master_Write@d,c
 24153  004B3C  EC4B  F02B         	call	i2_I2C_Master_Write	;wreg free
 24154                           
 24155                           ;RTC.c: 50: I2C_Master_Write(0x00);
 24156  004B40  0E00               	movlw	0
 24157  004B42  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24158  004B44  0E00               	movlw	0
 24159  004B46  6E02               	movwf	i2I2C_Master_Write@d,c
 24160  004B48  EC4B  F02B         	call	i2_I2C_Master_Write	;wreg free
 24161                           
 24162                           ;RTC.c: 51: I2C_Master_Stop();
 24163  004B4C  EC5C  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24164                           
 24165                           ;RTC.c: 54: I2C_Master_Start();
 24166  004B50  EC60  F02B         	call	i2_I2C_Master_Start	;wreg free
 24167                           
 24168                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 24169  004B54  0E00               	movlw	0
 24170  004B56  6E03               	movwf	i2I2C_Master_Write@d+1,c
 24171  004B58  0ED1               	movlw	209
 24172  004B5A  6E02               	movwf	i2I2C_Master_Write@d,c
 24173  004B5C  EC4B  F02B         	call	i2_I2C_Master_Write	;wreg free
 24174                           
 24175                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 24176  004B60  0E00               	movlw	0
 24177  004B62  6E05               	movwf	i2getRTC@i+1,c
 24178  004B64  0E00               	movlw	0
 24179  004B66  6E04               	movwf	i2getRTC@i,c
 24180  004B68                     i2l6670:
 24181  004B68  BE05               	btfsc	i2getRTC@i+1,7,c
 24182  004B6A  D006               	goto	i2l6674
 24183  004B6C  5005               	movf	i2getRTC@i+1,w,c
 24184  004B6E  E111               	bnz	i2l6680
 24185  004B70  0E06               	movlw	6
 24186  004B72  5C04               	subwf	i2getRTC@i,w,c
 24187  004B74  B0D8               	btfsc	status,0,c
 24188  004B76  D00D               	goto	i2l6680
 24189  004B78                     i2l6674:
 24190                           
 24191                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 24192  004B78  0E1C               	movlw	low _time
 24193  004B7A  2404               	addwf	i2getRTC@i,w,c
 24194  004B7C  6ED9               	movwf	fsr2l,c
 24195  004B7E  0E01               	movlw	high _time
 24196  004B80  2005               	addwfc	i2getRTC@i+1,w,c
 24197  004B82  6EDA               	movwf	fsr2h,c
 24198  004B84  0E01               	movlw	1
 24199  004B86  EC8E  F02A         	call	i2_I2C_Master_Read
 24200  004B8A  6EDF               	movwf	indf2,c
 24201  004B8C  4A04               	infsnz	i2getRTC@i,f,c
 24202  004B8E  2A05               	incf	i2getRTC@i+1,f,c
 24203  004B90  D7EB               	goto	i2l6670
 24204  004B92                     i2l6680:
 24205                           
 24206                           ;RTC.c: 58: }
 24207                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 24208  004B92  0E00               	movlw	0
 24209  004B94  EC8E  F02A         	call	i2_I2C_Master_Read
 24210  004B98  0101               	movlb	1	; () banked
 24211  004B9A  6F22               	movwf	(_time+6)& (0+255),b
 24212                           
 24213                           ;RTC.c: 60: I2C_Master_Stop();
 24214  004B9C  EC5C  F02B         	call	i2_I2C_Master_Stop	;wreg free
 24215  004BA0  0012               	return		;funcret
 24216  004BA2                     __end_ofi2_getRTC:
 24217                           	opt stack 0
 24218                           pclatu	equ	0xFFB
 24219                           pclath	equ	0xFFA
 24220                           tblptru	equ	0xFF8
 24221                           tblptrh	equ	0xFF7
 24222                           tblptrl	equ	0xFF6
 24223                           tablat	equ	0xFF5
 24224                           prodh	equ	0xFF4
 24225                           prodl	equ	0xFF3
 24226                           intcon	equ	0xFF2
 24227                           intcon2	equ	0xFF1
 24228                           intcon3	equ	0xFF0
 24229                           indf0	equ	0xFEF
 24230                           postinc0	equ	0xFEE
 24231                           fsr0h	equ	0xFEA
 24232                           fsr0l	equ	0xFE9
 24233                           wreg	equ	0xFE8
 24234                           postdec1	equ	0xFE5
 24235                           fsr1h	equ	0xFE2
 24236                           fsr1l	equ	0xFE1
 24237                           indf2	equ	0xFDF
 24238                           postinc2	equ	0xFDE
 24239                           postdec2	equ	0xFDD
 24240                           fsr2h	equ	0xFDA
 24241                           fsr2l	equ	0xFD9
 24242                           status	equ	0xFD8
 24243                           
 24244 ;; *************** function i2_I2C_Master_Write *****************
 24245 ;; Defined at:
 24246 ;;		line 49 in file "I2C.c"
 24247 ;; Parameters:    Size  Location     Type
 24248 ;;  d               2    1[COMRAM] unsigned int 
 24249 ;; Auto vars:     Size  Location     Type
 24250 ;;		None
 24251 ;; Return value:  Size  Location     Type
 24252 ;;                  1    wreg      void 
 24253 ;; Registers used:
 24254 ;;		wreg, status,2, status,0, cstack
 24255 ;; Tracked objects:
 24256 ;;		On entry : 0/0
 24257 ;;		On exit  : 0/0
 24258 ;;		Unchanged: 0/0
 24259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24264 ;;Total ram usage:        2 bytes
 24265 ;; Hardware stack levels used:    1
 24266 ;; Hardware stack levels required when called:    1
 24267 ;; This function calls:
 24268 ;;		i2_I2C_Master_Wait
 24269 ;; This function is called by:
 24270 ;;		i2_getRTC
 24271 ;; This function uses a non-reentrant model
 24272 ;;
 24273                           
 24274                           	psect	text91
 24275  005696                     __ptext91:
 24276                           	opt stack 0
 24277  005696                     i2_I2C_Master_Write:
 24278                           	opt stack 19
 24279                           
 24280                           ;I2C.c: 51: I2C_Master_Wait();
 24281                           
 24282                           ;incstack = 0
 24283  005696  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24284                           
 24285                           ;I2C.c: 52: SSPBUF = d;
 24286  00569A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 24287  00569E  0012               	return		;funcret
 24288  0056A0                     __end_ofi2_I2C_Master_Write:
 24289                           	opt stack 0
 24290                           pclatu	equ	0xFFB
 24291                           pclath	equ	0xFFA
 24292                           tblptru	equ	0xFF8
 24293                           tblptrh	equ	0xFF7
 24294                           tblptrl	equ	0xFF6
 24295                           tablat	equ	0xFF5
 24296                           prodh	equ	0xFF4
 24297                           prodl	equ	0xFF3
 24298                           intcon	equ	0xFF2
 24299                           intcon2	equ	0xFF1
 24300                           intcon3	equ	0xFF0
 24301                           indf0	equ	0xFEF
 24302                           postinc0	equ	0xFEE
 24303                           fsr0h	equ	0xFEA
 24304                           fsr0l	equ	0xFE9
 24305                           wreg	equ	0xFE8
 24306                           postdec1	equ	0xFE5
 24307                           fsr1h	equ	0xFE2
 24308                           fsr1l	equ	0xFE1
 24309                           indf2	equ	0xFDF
 24310                           postinc2	equ	0xFDE
 24311                           postdec2	equ	0xFDD
 24312                           fsr2h	equ	0xFDA
 24313                           fsr2l	equ	0xFD9
 24314                           status	equ	0xFD8
 24315                           
 24316 ;; *************** function i2_I2C_Master_Stop *****************
 24317 ;; Defined at:
 24318 ;;		line 43 in file "I2C.c"
 24319 ;; Parameters:    Size  Location     Type
 24320 ;;		None
 24321 ;; Auto vars:     Size  Location     Type
 24322 ;;		None
 24323 ;; Return value:  Size  Location     Type
 24324 ;;                  1    wreg      void 
 24325 ;; Registers used:
 24326 ;;		wreg, status,2, status,0, cstack
 24327 ;; Tracked objects:
 24328 ;;		On entry : 0/0
 24329 ;;		On exit  : 0/0
 24330 ;;		Unchanged: 0/0
 24331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24336 ;;Total ram usage:        0 bytes
 24337 ;; Hardware stack levels used:    1
 24338 ;; Hardware stack levels required when called:    1
 24339 ;; This function calls:
 24340 ;;		i2_I2C_Master_Wait
 24341 ;; This function is called by:
 24342 ;;		i2_getRTC
 24343 ;; This function uses a non-reentrant model
 24344 ;;
 24345                           
 24346                           	psect	text92
 24347  0056B8                     __ptext92:
 24348                           	opt stack 0
 24349  0056B8                     i2_I2C_Master_Stop:
 24350                           	opt stack 19
 24351                           
 24352                           ;I2C.c: 45: I2C_Master_Wait();
 24353                           
 24354                           ;incstack = 0
 24355  0056B8  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24356                           
 24357                           ;I2C.c: 46: PEN = 1;
 24358  0056BC  84C5               	bsf	4037,2,c	;volatile
 24359  0056BE  0012               	return		;funcret
 24360  0056C0                     __end_ofi2_I2C_Master_Stop:
 24361                           	opt stack 0
 24362                           pclatu	equ	0xFFB
 24363                           pclath	equ	0xFFA
 24364                           tblptru	equ	0xFF8
 24365                           tblptrh	equ	0xFF7
 24366                           tblptrl	equ	0xFF6
 24367                           tablat	equ	0xFF5
 24368                           prodh	equ	0xFF4
 24369                           prodl	equ	0xFF3
 24370                           intcon	equ	0xFF2
 24371                           intcon2	equ	0xFF1
 24372                           intcon3	equ	0xFF0
 24373                           indf0	equ	0xFEF
 24374                           postinc0	equ	0xFEE
 24375                           fsr0h	equ	0xFEA
 24376                           fsr0l	equ	0xFE9
 24377                           wreg	equ	0xFE8
 24378                           postdec1	equ	0xFE5
 24379                           fsr1h	equ	0xFE2
 24380                           fsr1l	equ	0xFE1
 24381                           indf2	equ	0xFDF
 24382                           postinc2	equ	0xFDE
 24383                           postdec2	equ	0xFDD
 24384                           fsr2h	equ	0xFDA
 24385                           fsr2l	equ	0xFD9
 24386                           status	equ	0xFD8
 24387                           
 24388 ;; *************** function i2_I2C_Master_Start *****************
 24389 ;; Defined at:
 24390 ;;		line 31 in file "I2C.c"
 24391 ;; Parameters:    Size  Location     Type
 24392 ;;		None
 24393 ;; Auto vars:     Size  Location     Type
 24394 ;;		None
 24395 ;; Return value:  Size  Location     Type
 24396 ;;                  1    wreg      void 
 24397 ;; Registers used:
 24398 ;;		wreg, status,2, status,0, cstack
 24399 ;; Tracked objects:
 24400 ;;		On entry : 0/0
 24401 ;;		On exit  : 0/0
 24402 ;;		Unchanged: 0/0
 24403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24408 ;;Total ram usage:        0 bytes
 24409 ;; Hardware stack levels used:    1
 24410 ;; Hardware stack levels required when called:    1
 24411 ;; This function calls:
 24412 ;;		i2_I2C_Master_Wait
 24413 ;; This function is called by:
 24414 ;;		i2_getRTC
 24415 ;; This function uses a non-reentrant model
 24416 ;;
 24417                           
 24418                           	psect	text93
 24419  0056C0                     __ptext93:
 24420                           	opt stack 0
 24421  0056C0                     i2_I2C_Master_Start:
 24422                           	opt stack 19
 24423                           
 24424                           ;I2C.c: 33: I2C_Master_Wait();
 24425                           
 24426                           ;incstack = 0
 24427  0056C0  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24428                           
 24429                           ;I2C.c: 34: SEN = 1;
 24430  0056C4  80C5               	bsf	4037,0,c	;volatile
 24431  0056C6  0012               	return		;funcret
 24432  0056C8                     __end_ofi2_I2C_Master_Start:
 24433                           	opt stack 0
 24434                           pclatu	equ	0xFFB
 24435                           pclath	equ	0xFFA
 24436                           tblptru	equ	0xFF8
 24437                           tblptrh	equ	0xFF7
 24438                           tblptrl	equ	0xFF6
 24439                           tablat	equ	0xFF5
 24440                           prodh	equ	0xFF4
 24441                           prodl	equ	0xFF3
 24442                           intcon	equ	0xFF2
 24443                           intcon2	equ	0xFF1
 24444                           intcon3	equ	0xFF0
 24445                           indf0	equ	0xFEF
 24446                           postinc0	equ	0xFEE
 24447                           fsr0h	equ	0xFEA
 24448                           fsr0l	equ	0xFE9
 24449                           wreg	equ	0xFE8
 24450                           postdec1	equ	0xFE5
 24451                           fsr1h	equ	0xFE2
 24452                           fsr1l	equ	0xFE1
 24453                           indf2	equ	0xFDF
 24454                           postinc2	equ	0xFDE
 24455                           postdec2	equ	0xFDD
 24456                           fsr2h	equ	0xFDA
 24457                           fsr2l	equ	0xFD9
 24458                           status	equ	0xFD8
 24459                           
 24460 ;; *************** function i2_I2C_Master_Read *****************
 24461 ;; Defined at:
 24462 ;;		line 55 in file "I2C.c"
 24463 ;; Parameters:    Size  Location     Type
 24464 ;;  a               1    wreg     unsigned char 
 24465 ;; Auto vars:     Size  Location     Type
 24466 ;;  a               1    1[COMRAM] unsigned char 
 24467 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 24468 ;; Return value:  Size  Location     Type
 24469 ;;                  1    wreg      unsigned char 
 24470 ;; Registers used:
 24471 ;;		wreg, status,2, status,0, cstack
 24472 ;; Tracked objects:
 24473 ;;		On entry : 0/0
 24474 ;;		On exit  : 0/0
 24475 ;;		Unchanged: 0/0
 24476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24481 ;;Total ram usage:        2 bytes
 24482 ;; Hardware stack levels used:    1
 24483 ;; Hardware stack levels required when called:    1
 24484 ;; This function calls:
 24485 ;;		i2_I2C_Master_Wait
 24486 ;; This function is called by:
 24487 ;;		i2_getRTC
 24488 ;; This function uses a non-reentrant model
 24489 ;;
 24490                           
 24491                           	psect	text94
 24492  00551C                     __ptext94:
 24493                           	opt stack 0
 24494  00551C                     i2_I2C_Master_Read:
 24495                           	opt stack 19
 24496                           
 24497                           ;incstack = 0
 24498                           ;i2I2C_Master_Read@a stored from wreg
 24499  00551C  6E02               	movwf	i2I2C_Master_Read@a,c
 24500                           
 24501                           ;I2C.c: 57: unsigned char temp;
 24502                           ;I2C.c: 58: I2C_Master_Wait();
 24503  00551E  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24504                           
 24505                           ;I2C.c: 59: RCEN = 1;
 24506  005522  86C5               	bsf	4037,3,c	;volatile
 24507                           
 24508                           ;I2C.c: 60: I2C_Master_Wait();
 24509  005524  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24510                           
 24511                           ;I2C.c: 61: temp = SSPBUF;
 24512  005528  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 24513                           
 24514                           ;I2C.c: 62: I2C_Master_Wait();
 24515  00552C  EC21  F02B         	call	i2_I2C_Master_Wait	;wreg free
 24516                           
 24517                           ;I2C.c: 63: ACKDT = (a)?0:1;
 24518  005530  5002               	movf	i2I2C_Master_Read@a,w,c
 24519  005532  A4D8               	btfss	status,2,c
 24520  005534  D002               	goto	i2u471_40
 24521  005536  8AC5               	bsf	4037,5,c	;volatile
 24522  005538  D001               	goto	i2l6374
 24523  00553A                     i2u471_40:
 24524  00553A  9AC5               	bcf	4037,5,c	;volatile
 24525  00553C                     i2l6374:
 24526                           
 24527                           ;I2C.c: 64: ACKEN = 1;
 24528  00553C  88C5               	bsf	4037,4,c	;volatile
 24529                           
 24530                           ;I2C.c: 65: return temp;
 24531  00553E  5003               	movf	i2I2C_Master_Read@temp,w,c
 24532  005540  0012               	return	
 24533  005542                     __end_ofi2_I2C_Master_Read:
 24534                           	opt stack 0
 24535                           pclatu	equ	0xFFB
 24536                           pclath	equ	0xFFA
 24537                           tblptru	equ	0xFF8
 24538                           tblptrh	equ	0xFF7
 24539                           tblptrl	equ	0xFF6
 24540                           tablat	equ	0xFF5
 24541                           prodh	equ	0xFF4
 24542                           prodl	equ	0xFF3
 24543                           intcon	equ	0xFF2
 24544                           intcon2	equ	0xFF1
 24545                           intcon3	equ	0xFF0
 24546                           indf0	equ	0xFEF
 24547                           postinc0	equ	0xFEE
 24548                           fsr0h	equ	0xFEA
 24549                           fsr0l	equ	0xFE9
 24550                           wreg	equ	0xFE8
 24551                           postdec1	equ	0xFE5
 24552                           fsr1h	equ	0xFE2
 24553                           fsr1l	equ	0xFE1
 24554                           indf2	equ	0xFDF
 24555                           postinc2	equ	0xFDE
 24556                           postdec2	equ	0xFDD
 24557                           fsr2h	equ	0xFDA
 24558                           fsr2l	equ	0xFD9
 24559                           status	equ	0xFD8
 24560                           
 24561 ;; *************** function i2_I2C_Master_Wait *****************
 24562 ;; Defined at:
 24563 ;;		line 26 in file "I2C.c"
 24564 ;; Parameters:    Size  Location     Type
 24565 ;;		None
 24566 ;; Auto vars:     Size  Location     Type
 24567 ;;		None
 24568 ;; Return value:  Size  Location     Type
 24569 ;;                  1    wreg      void 
 24570 ;; Registers used:
 24571 ;;		wreg, status,2, status,0
 24572 ;; Tracked objects:
 24573 ;;		On entry : 0/0
 24574 ;;		On exit  : 0/0
 24575 ;;		Unchanged: 0/0
 24576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24579 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24580 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24581 ;;Total ram usage:        1 bytes
 24582 ;; Hardware stack levels used:    1
 24583 ;; This function calls:
 24584 ;;		Nothing
 24585 ;; This function is called by:
 24586 ;;		i2_I2C_Master_Start
 24587 ;;		i2_I2C_Master_Stop
 24588 ;;		i2_I2C_Master_Write
 24589 ;;		i2_I2C_Master_Read
 24590 ;; This function uses a non-reentrant model
 24591 ;;
 24592                           
 24593                           	psect	text95
 24594  005642                     __ptext95:
 24595                           	opt stack 0
 24596  005642                     i2_I2C_Master_Wait:
 24597                           	opt stack 19
 24598  005642                     i2l66:
 24599  005642  B4C7               	btfsc	4039,2,c	;volatile
 24600  005644  D7FE               	goto	i2l66
 24601  005646  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 24602  00564A  0E1F               	movlw	31
 24603  00564C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 24604  00564E  B4D8               	btfsc	status,2,c
 24605  005650  0012               	return	
 24606  005652  D7F7               	goto	i2l66
 24607  005654                     __end_ofi2_I2C_Master_Wait:
 24608                           	opt stack 0
 24609                           pclatu	equ	0xFFB
 24610                           pclath	equ	0xFFA
 24611                           tblptru	equ	0xFF8
 24612                           tblptrh	equ	0xFF7
 24613                           tblptrl	equ	0xFF6
 24614                           tablat	equ	0xFF5
 24615                           prodh	equ	0xFF4
 24616                           prodl	equ	0xFF3
 24617                           intcon	equ	0xFF2
 24618                           intcon2	equ	0xFF1
 24619                           intcon3	equ	0xFF0
 24620                           indf0	equ	0xFEF
 24621                           postinc0	equ	0xFEE
 24622                           fsr0h	equ	0xFEA
 24623                           fsr0l	equ	0xFE9
 24624                           wreg	equ	0xFE8
 24625                           postdec1	equ	0xFE5
 24626                           fsr1h	equ	0xFE2
 24627                           fsr1l	equ	0xFE1
 24628                           indf2	equ	0xFDF
 24629                           postinc2	equ	0xFDE
 24630                           postdec2	equ	0xFDD
 24631                           fsr2h	equ	0xFDA
 24632                           fsr2l	equ	0xFD9
 24633                           status	equ	0xFD8
 24634                           
 24635 ;; *************** function i2_delay_ms *****************
 24636 ;; Defined at:
 24637 ;;		line 632 in file "sort.c"
 24638 ;; Parameters:    Size  Location     Type
 24639 ;;  milliseconds    1    wreg     unsigned char 
 24640 ;; Auto vars:     Size  Location     Type
 24641 ;;  milliseconds    1    1[COMRAM] unsigned char 
 24642 ;; Return value:  Size  Location     Type
 24643 ;;                  1    wreg      void 
 24644 ;; Registers used:
 24645 ;;		wreg, status,2, status,0, cstack
 24646 ;; Tracked objects:
 24647 ;;		On entry : 0/0
 24648 ;;		On exit  : 0/0
 24649 ;;		Unchanged: 0/0
 24650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24655 ;;Total ram usage:        2 bytes
 24656 ;; Hardware stack levels used:    1
 24657 ;; This function calls:
 24658 ;;		Nothing
 24659 ;; This function is called by:
 24660 ;;		_printSortTimer
 24661 ;; This function uses a non-reentrant model
 24662 ;;
 24663                           
 24664                           	psect	text96
 24665  0055E4                     __ptext96:
 24666                           	opt stack 0
 24667  0055E4                     i2_delay_ms:
 24668                           	opt stack 22
 24669                           
 24670                           ;incstack = 0
 24671                           ;i2delay_ms@milliseconds stored from wreg
 24672  0055E4  6E02               	movwf	i2delay_ms@milliseconds,c
 24673                           
 24674                           ;sort.c: 633: while(milliseconds > 0)
 24675  0055E6  D008               	goto	i2l8818
 24676  0055E8                     i2l8814:
 24677                           
 24678                           ;sort.c: 634: {
 24679                           ;sort.c: 635: milliseconds--;
 24680  0055E8  0602               	decf	i2delay_ms@milliseconds,f,c
 24681                           
 24682                           ;sort.c: 636: _delay((unsigned long)((990)*(32000000/4000000.0)));
 24683  0055EA  0E0B               	movlw	11
 24684  0055EC  6E01               	movwf	??i2_delay_ms& (0+255),c
 24685  0055EE  0E48               	movlw	72
 24686  0055F0                     i2u1076_47:
 24687  0055F0  2EE8               	decfsz	wreg,f,c
 24688  0055F2  D7FE               	bra	i2u1076_47
 24689  0055F4  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 24690  0055F6  D7FC               	bra	i2u1076_47
 24691  0055F8                     i2l8818:
 24692  0055F8  5002               	movf	i2delay_ms@milliseconds,w,c
 24693  0055FA  B4D8               	btfsc	status,2,c
 24694  0055FC  0012               	return	
 24695  0055FE  D7F4               	goto	i2l8814
 24696  005600                     __end_ofi2_delay_ms:
 24697                           	opt stack 0
 24698                           pclatu	equ	0xFFB
 24699                           pclath	equ	0xFFA
 24700                           tblptru	equ	0xFF8
 24701                           tblptrh	equ	0xFF7
 24702                           tblptrl	equ	0xFF6
 24703                           tablat	equ	0xFF5
 24704                           prodh	equ	0xFF4
 24705                           prodl	equ	0xFF3
 24706                           intcon	equ	0xFF2
 24707                           intcon2	equ	0xFF1
 24708                           intcon3	equ	0xFF0
 24709                           indf0	equ	0xFEF
 24710                           postinc0	equ	0xFEE
 24711                           fsr0h	equ	0xFEA
 24712                           fsr0l	equ	0xFE9
 24713                           wreg	equ	0xFE8
 24714                           postdec1	equ	0xFE5
 24715                           fsr1h	equ	0xFE2
 24716                           fsr1l	equ	0xFE1
 24717                           indf2	equ	0xFDF
 24718                           postinc2	equ	0xFDE
 24719                           postdec2	equ	0xFDD
 24720                           fsr2h	equ	0xFDA
 24721                           fsr2l	equ	0xFD9
 24722                           status	equ	0xFD8
 24723                           pclatu	equ	0xFFB
 24724                           pclath	equ	0xFFA
 24725                           tblptru	equ	0xFF8
 24726                           tblptrh	equ	0xFF7
 24727                           tblptrl	equ	0xFF6
 24728                           tablat	equ	0xFF5
 24729                           prodh	equ	0xFF4
 24730                           prodl	equ	0xFF3
 24731                           intcon	equ	0xFF2
 24732                           intcon2	equ	0xFF1
 24733                           intcon3	equ	0xFF0
 24734                           indf0	equ	0xFEF
 24735                           postinc0	equ	0xFEE
 24736                           fsr0h	equ	0xFEA
 24737                           fsr0l	equ	0xFE9
 24738                           wreg	equ	0xFE8
 24739                           postdec1	equ	0xFE5
 24740                           fsr1h	equ	0xFE2
 24741                           fsr1l	equ	0xFE1
 24742                           indf2	equ	0xFDF
 24743                           postinc2	equ	0xFDE
 24744                           postdec2	equ	0xFDD
 24745                           fsr2h	equ	0xFDA
 24746                           fsr2l	equ	0xFD9
 24747                           status	equ	0xFD8
 24748                           
 24749                           	psect	rparam
 24750  0000                     pclatu	equ	0xFFB
 24751                           pclath	equ	0xFFA
 24752                           tblptru	equ	0xFF8
 24753                           tblptrh	equ	0xFF7
 24754                           tblptrl	equ	0xFF6
 24755                           tablat	equ	0xFF5
 24756                           prodh	equ	0xFF4
 24757                           prodl	equ	0xFF3
 24758                           intcon	equ	0xFF2
 24759                           intcon2	equ	0xFF1
 24760                           intcon3	equ	0xFF0
 24761                           indf0	equ	0xFEF
 24762                           postinc0	equ	0xFEE
 24763                           fsr0h	equ	0xFEA
 24764                           fsr0l	equ	0xFE9
 24765                           wreg	equ	0xFE8
 24766                           postdec1	equ	0xFE5
 24767                           fsr1h	equ	0xFE2
 24768                           fsr1l	equ	0xFE1
 24769                           indf2	equ	0xFDF
 24770                           postinc2	equ	0xFDE
 24771                           postdec2	equ	0xFDD
 24772                           fsr2h	equ	0xFDA
 24773                           fsr2l	equ	0xFD9
 24774                           status	equ	0xFD8
 24775                           
 24776                           	psect	temp
 24777  00007E                     btemp:
 24778                           	opt stack 0
 24779  00007E                     	ds	1
 24780  0000                     int$flags	set	btemp
 24781                           pclatu	equ	0xFFB
 24782                           pclath	equ	0xFFA
 24783                           tblptru	equ	0xFF8
 24784                           tblptrh	equ	0xFF7
 24785                           tblptrl	equ	0xFF6
 24786                           tablat	equ	0xFF5
 24787                           prodh	equ	0xFF4
 24788                           prodl	equ	0xFF3
 24789                           intcon	equ	0xFF2
 24790                           intcon2	equ	0xFF1
 24791                           intcon3	equ	0xFF0
 24792                           indf0	equ	0xFEF
 24793                           postinc0	equ	0xFEE
 24794                           fsr0h	equ	0xFEA
 24795                           fsr0l	equ	0xFE9
 24796                           wreg	equ	0xFE8
 24797                           postdec1	equ	0xFE5
 24798                           fsr1h	equ	0xFE2
 24799                           fsr1l	equ	0xFE1
 24800                           indf2	equ	0xFDF
 24801                           postinc2	equ	0xFDE
 24802                           postdec2	equ	0xFDD
 24803                           fsr2h	equ	0xFDA
 24804                           fsr2l	equ	0xFD9
 24805                           status	equ	0xFD8


Data Sizes:
    Strings     1344
    Constant    27
    Data        8
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      79
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_127(CODE[18]), STR_126(CODE[18]), STR_125(CODE[17]), STR_124(CODE[17]), 
		 -> STR_123(CODE[18]), STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[18]), 
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[17]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  222115
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   23423
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17847
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     183
                                              2 BANK0      8     8      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11414
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10667
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23224
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22310
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   46200
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13339
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  116741
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9083
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9040
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8971
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15607
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    8971
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9244
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19757
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9155
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8836
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4F       7       30.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14C      34        0.0%
DATA                 0      0     14C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 09 14:05:18 2017

                                    _i 013D                     i2_I2C_Master_Start 56C0  
                   i2_I2C_Master_Write 5696                                     l66 562E  
                                   _ID 3090                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 50A8                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 00E2  
                                  l183 00E6                                    l188 0102  
                                  l801 16AE                                    l618 2656  
                                  l810 15D4                                    l811 15FC  
                                  l812 1624                                    l813 164E  
                                  l831 3204                                    l807 1586  
                                  l832 321E                                    l833 325C  
                                  l817 16FA                                    l809 15AC  
                                  l834 3242                                    l499 4408  
                                  l838 32F4                                    l774 125E  
                                  l792 141E                                    l784 1322  
                                  l890 4908                                    l795 146C  
                                  l787 1370                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 3ADE                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _arm 3FCC  
                                  _log 00F4                                    _sel 00FD  
                                  _var 0145                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3C62                    _log_count_can_w_lab 0141  
                           i2_delay_ms 55E4        __end_of_change_state_to_menu_11 52D8  
      __end_of_change_state_to_menu_12 5118        __end_of_change_state_to_menu_22 50E0  
      __end_of_change_state_to_menu_23 52A8           _f_can_coming_to_distribution 0133  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 53C8  
      __end_of_change_state_to_logs_12 5398        __end_of_change_state_to_logs_22 5368  
      __end_of_change_state_to_logs_23 5424        __end_of_change_state_to_logs_33 5338  
      __end_of_change_state_to_logs_34 5308                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1105 3D90  
                                 l1202 3F0C                                   l1205 3F2C  
                                 l1225 42F2                                   l1314 111C  
                                 l1234 2300                                   l1083 40EC  
                                 l1260 0940                                   l1228 42F6  
                                 l1333 4E50                                   l1309 1046  
                                 l1237 2304                                   l1414 3C00  
                                 l1270 0A50                                   l1430 407E  
                                 l1415 3C1A                                   l1327 4E40  
                                 l1271 0A9E                                   l1263 0944  
                                 l1272 0B04                                   l1096 5610  
                                 l1409 3BB4                                   l1361 2DA2  
                                 l1273 0B52                                   l1363 2DD0  
                                 l1267 09EA                                   l1348 2DD6  
                                 l1452 4DF4                                   l1357 2D4A  
                                 l1429 40BC                                   l1446 4DE4  
                                 l1438 40B6                                   l1392 499E  
                                 l1385 498E                                   l1297 0EAC  
                                 ?_arm 0001                                   l1486 194E  
                                 l1933 4AB4                                   l1943 4D36  
                                 l1880 4654                                   l7104 54AC  
                                 l7040 468A                                   l6322 4A64  
                                 l6306 549C                                   l6324 4A70  
                                 l6500 18A0                                   l8100 0D08  
                                 l7108 54C2                                   l7140 4AE2  
                                 l7036 4674                                   l6334 4AA6  
                                 l6326 4A76                                   l6350 4D28  
                                 l6342 4CF2                                   l6510 18F6  
                                 l6502 18AC                                   l7046 4700  
                                 l6344 4CFE                                   l6512 190E  
                                 l6504 18B2                                   l6264 5464  
                                 l8200 0F16                                   l8120 0D7C  
                                 l8112 0D5A                                   l8104 0D20  
                                 l6600 487E                                   l7152 4B0C  
                                 l7136 4ACC                                   l6346 4D04  
                                 l6506 18CA                                   l6266 5476  
                                 l8210 0F3E                                   l8202 0F1C  
                                 l8130 0DA4                                   l8122 0D82  
                                 l8042 0BF0                                   l8034 0BCE  
                                 l6610 48B4                                   l7082 4158  
                                 l7090 417A                                   l6532 19A0  
                                 l6516 1914                                   l8116 0D64  
                                 l8060 0C52                                   l8052 0C18  
                                 l8044 0BF6                                   l6604 4894  
                                 l9012 0574                                   l9004 0552  
                                 l7244 47F4                                   l7156 4B24  
                                 l6534 19A6                                   l6462 172A  
                                 l8302 1106                                   l8222 0F82  
                                 l8206 0F26                                   l8142 0DE8  
                                 l8126 0D8C                                   l8070 0C7A  
                                 l8038 0BD8                                   l7254 4836  
                                 l7094 4190                                   l7086 4162  
                                 _ADIE 007CEE                                   l6552 1A04  
                                 l6528 1986                                   l6464 173C  
                                 l8312 1136                                   l8232 0FAA  
                                 l8152 0E10                                   l8064 0C5C  
                                 l8048 0C00                                   l6288 53EE  
                                 l9120 07D4                                   l9112 07B2  
                                 l9040 065C                                   l9032 063A  
                                 l9008 055C                                   l7248 480A  
                                 l7504 130C                                   l6570 1A7C  
                                 l6546 19E2                                   l6490 1828  
                                 l6482 17F6                                   l6474 177A  
                                 l6458 1716                                   l6634 4926  
                                 l8322 115E                                   l8314 113C  
                                 l8226 0F9A                                   l8218 0F78  
                                 l8146 0E00                                   l8138 0DDE  
                                 l8090 0CE0                                   l8074 0C84  
                                 l9130 07F0                                   l9050 0678  
                                 l6650 45EE                                   l7098 419A  
                                 l7514 1350                                   l6572 1A88  
                                 l6580 1AB6                                   l6564 1A60  
                                 l6556 1A3C                                   l6492 1834  
                                 l6468 1746                                   l6628 48EC  
                                 l8332 1186                                   l8324 1164  
                                 l8252 101E                                   l8244 0FFC  
                                 l8236 0FC2                                   l8228 0FA0  
                                 l8172 0E84                                   l8164 0E62  
                                 l8156 0E28                                   l8148 0E06  
                                 l8068 0C74                                   l9116 07BC  
                                 l9036 0644                                   l7516 135A  
                                 l7460 121C                                   l6582 1ABC  
                                 l6558 1A46                                   l6494 183A  
                                 l8510 2D20                                   l8318 1146  
                                 l8254 1024                                   l8174 0E8A  
                                 l8094 0CF8                                   l8086 0CD6  
                                 l8078 0C9C                                   l9134 0808  
                                 l9126 07E6                                   l9054 0690  
                                 l9046 066E                                   l6646 45D8  
                                 l7622 1664                                   l7630 16B6  
                                 l7542 1408                                   l7526 139E  
                                 l7470 1266                                   l6576 1AA2  
                                 l8504 2CF6                                   l8328 116E  
                                 l8248 1006                                   l8192 0EF4  
                                 l8168 0E6C                                   l8096 0CFE  
                                 l6592 5122                                   l9160 0888  
                                 l9152 0866                                   l9080 0718  
                                 l9072 06F6                                   l6648 45E8  
                                 l7624 169A                                   l7552 144C  
                                 l6586 1B14                                   l8514 2D34  
                                 l8506 2D0C                                   l8282 10A0  
                                 l8258 102E                                   l8178 0E94  
                                 l8362 4040                                   l6594 512E  
                                 l9170 08A4                                   l9090 0734  
                                 l6658 4642                                   l7706 31EE  
                                 l7642 16EE                                   l7554 1456  
                                 l6588 1B20                                   l8700 3C1C  
                                 l8524 2D78                                   l8428 49C6  
                                 l8292 10C8                                   l8196 0EFE  
                                 l9500 3F62                                   l6860 2660  
                                 l9156 0870                                   l9076 0700  
                                 l7716 3222                                   l7564 149A  
                                 l7644 16FC                                   l8702 3C2C  
                                 l8286 10B8                                   l8278 1096  
                                 l8366 4066                                   l8374 4084  
                                 l9502 3F68                                   l6870 26F6  
                                 l6862 267E                                   l6854 25D4  
                                 l9174 08BC                                   l9166 089A  
                                 l9094 074C                                   l9086 072A  
                                 l9430 3CC2                                   l7742 32B2  
                                 l7750 32F6                                   l7718 322C  
                                 l7486 12A2                                   l8528 2D8C  
                                 l8464 2B8A                                   l8296 10E0  
                                 l8288 10BE                                   l8376 409E  
                                 l8368 4070                                   l7904 2562  
                                 l6880 278C                                   l6872 2714  
                                 l6864 269C                                   l7760 41FE  
                                 l7680 3180                                   l7592 1562  
                                 l7576 14FE                                   l7568 14C0  
                                 l8706 3C5C                                   l8474 2C0C  
                                 l8378 40A8                                   l9506 3F6E  
                                 l8730 4548                                   l8722 451E  
                                 l6882 27AA                                   l6874 2732  
                                 l6866 26BA                                   l9178 08C8  
                                 l7762 4218                                   l8660 3B52  
                                 l8476 2C12                                   l7908 2598  
                                 l7836 2354                                   l9508 3FC0  
                                 l8740 457E                                   l8732 454E  
                                 l8716 4508                                   l6876 2750  
                                 l6868 26D8                                   l9428 3CAE  
                                 l7756 41CA                                   l7692 31B8  
                                 l7684 3190                                   l9700 43B4  
                                 l8486 2C94                                   l7950 09B4  
                                 l7854 240C                                   l6878 276E  
                                 l6886 27C8                                   l9454 3D4A  
                                 l7758 41E4                                   l7766 4232  
                                 l9710 43E6                                   l9702 43CA  
                                 l8680 3BB6                                   l8664 3B82  
                                 l7872 249E                                   l8728 453C  
                                 l8744 458C                                   l8760 472C  
                                 l6888 2826                                   l8904 01F8  
                                 l7768 4260                                   l7696 31C8  
                                 l9720 4404                                   l8690 3BEA  
                                 l8682 3BC6                                   l8498 2CD6  
                                 l7954 09BE                                   l7866 245C  
                                 l9490 3F44                                   l8770 475C  
                                 l8922 0254                                   l7698 31CA  
                                 l9706 43DA                                   l7948 09AE  
                                 l7892 251A                                   l7884 24EA  
                                 l9492 3F4A                                   l9484 3F32  
                                 l9468 3EC8                                   l8748 45A0  
                                 l8772 4762                                   l8780 4794  
                                 l8764 473C                                   l8940 02A0  
                                 l8932 027E                                   l8852 00FE  
                                 l9708 43E0                                   l9724 440A  
                                 l7958 09D6                                   l9494 3F50  
                                 l9486 3F38                                   l8926 026C  
                                 l8918 024A                                   l8870 015C  
                                 l8862 013A                                   l9718 43FE  
                                 l8688 3BE0                                   l7896 2550  
                                 l9496 3F56                                   l9488 3F3E  
                                 l8784 47A8                                   l8776 4786  
                                 l8768 4750                                   l8960 032E  
                                 l8936 0288                                   l9498 3F5C  
                                 l8970 03C4                                   l8962 034C  
                                 l8890 01C8                                   l8874 016E  
                                 l8866 0144                                   l8858 0128  
                                 l8980 045A                                   l8972 03E2  
                                 l8964 036A                                   l8956 02F2  
                                 l8990 051E                                   l8974 0400  
                                 l8966 0388                                   l8958 0310  
                                 l8894 01D2                                   STR_1 FB69  
                                 l8976 041E                                   l8968 03A6  
                                 l8984 0478                                   l8888 01C2  
                                 STR_2 FF31                                   STR_3 FB57  
                                 l8994 0528                                   l8978 043C  
                                 l8986 04DC                                   l8898 01EA  
                                 STR_4 FE54                                   STR_5 FB57  
                                 STR_6 FDF0                                   STR_7 FFC3  
                                 l8998 0540                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u6120 1584  
                                 u4610 53EC                                   _PEIE 007F96  
                                 u7110 4094                                   u6070 14DE  
                                 u7120 4096                                   u6400 2396  
                                 u5520 2656                                   u6320 32BE  
                                 u5505 4D70                                   u6410 2398  
                                 u4810 4F90                                   u7060 405C  
                                 u6340 32F4                                   u6180 30EA  
                                 u4820 4F92                                   _RCEN 007E2B  
                                 u7070 405E                                   u4830 4FDC  
                                 u6190 3140                                   u4831 4FD8  
                                 u4840 4FDE                                   u6440 253E  
                                 u6088 14E2                                   u4930 18EC  
                                 u7330 2CBE                                   u7250 2BCC  
                                 u6338 32C2                                   u7260 2BCE  
                                 u6540 09EA                                   u6188 30EE  
                                 u6470 2586                                   u6198 3144  
                                 u7600 3BD8                                   u7280 2C54  
                                 u6560 0A9E                                   u6448 2542  
                                 u4937 18E2                                   i2l66 5642  
                                 u4890 1874                                   u7290 2C56  
                                 u7380 2D04                                   u7348 2CC2  
                                 u6580 0B52                                   u7541 3BAA  
                                 u9117 11AC                                   u7550 3BAC  
                                 u7390 2D1C                                   u6478 258A  
                                 u5870 1228                                   u7391 2D18  
                                 u9207 143A                                   u9127 12D0  
                                 u7480 3B14                                   u4897 186A  
                                 u9217 1476                                   u9137 132C  
                                 u7650 3C4A                                   u7490 3B70  
                                 u5890 125E                                   u9307 15DE  
                                 u9227 1488                                   u9147 133E  
                                 u9317 15F2                                   u9237 14A8  
                                 u9157 137A                                   u7591 3BD6  
                                 u9407 30AA                                   u9327 1606  
                                 u9247 1518                                   u9167 138C  
                                 u7488 3B18                                   u5888 122C  
                                 u9417 30D0                                   u9337 161A  
                                 u9257 1550                                   u9177 13AC  
                                 u7658 3C4E                                   u7498 3B74  
                                 u8730 3D90                                   u9507 410E  
                                 u9427 3108                                   u9347 162E  
                                 u9267 1590                                   u9187 13D6  
                                 u9517 416A                                   u9437 3126  
                                 u9357 1642                                   u9277 15A2  
                                 u9197 1428                                   u9607 0206  
                                 u9527 41A2                                   u9447 3208  
                                 u9367 1658                                   u9287 15B6  
                                 u9617 025C                                   u9537 4FEE  
                                 u9457 3212                                   u9377 16D0  
                                 u9297 15CA                                   u9707 0708  
                                 u9627 0290                                   u9547 5022  
                                 u9467 3246                                   u9387 51A2  
                                 u9717 073C                                   u9637 02BA  
                                 u9557 002A                                   u9477 3250  
                                 u9397 4AEA                                   u9807 22F4  
                                 u9727 0766                                   u9647 0530  
                                 u9567 0114                                   u9487 3276  
                                 u9817 2316                                   u9737 07C4  
                                 u9657 0564                                   u9577 014C  
                                 u9497 54B8                                   u9907 24F8  
                                 u9827 2344                                   u9747 07F8  
                                 u9667 058E                                   u9587 0184  
                                 u9917 3FDA                                   u9837 23AC  
                                 u9757 0822                                   u9677 064C  
                                 u9597 01DA                                   u9927 42A2  
                                 u9847 2400                                   u9767 0878  
                                 u9687 0680                                   u9937 42E6  
                                 u9857 2420                                   u9777 08AC  
                                 u9697 06AA                                   u9947 4308  
                                 u9867 244E                                   u9787 3ED6  
                                 u9957 08F0                                   u9877 2492  
                                 u9797 22B0                                   u9967 0934  
                                 u9887 24B0                                   u9977 0956  
                                 u9897 24DE                                   u9987 09C6  
                                 _RSEN 007E29                                   u9997 09FA  
                          _stopSignals 55C8                                   _Test 3EC6  
                                 _back 005B                                   _main 436A  
                                 _down 005D                                   _keys FAA3  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5566                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 013F                        __end_ofi2_putch 5680  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 3302                            i2_lcdNibble 4E58  
                      __end_of_Loading 1708                   __end_of_actuatorTest 118E  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 41B2  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 45AA  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FABE  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FE01                                  STR_15 FFD2  
                                STR_23 FF23                                  STR_31 FDDF  
                                STR_16 FFE2                                  STR_24 FD46  
                                STR_32 FD24                                  STR_40 FCE0  
                                STR_17 FFF2                                  STR_25 FE23  
                                STR_33 FD35                                  STR_41 FCCF  
                                STR_18 FFF6                                  STR_34 FDCE  
                                STR_50 FDAC                                  STR_42 FD8A  
                                STR_26 FD57                                  STR_43 FD8A  
                                STR_35 FDCE                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE12  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD68                                  STR_36 FD13  
                                STR_44 FCF1                        __end_of___awmod 47B2  
                                STR_45 FCE0                                  STR_37 FD24  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE20                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEDC  
                                STR_38 FDBD                                  STR_46 FD9B  
                                STR_47 FD9B                                  STR_55 FFFA  
                                STR_63 FABE                                  STR_71 FF15  
                                STR_39 FD79                                  STR_56 FFDE  
                                STR_64 FF7B                                  STR_80 FE64  
                                STR_48 FD02                                  STR_72 FC58  
                                STR_49 FCF1                                  STR_57 FFD6  
                                STR_81 FE20                                  STR_65 FF4C  
                                STR_73 FEF9                                  STR_58 FFD2  
                                STR_74 FF59                                  STR_90 FECD  
                                STR_82 FE91                                  STR_66 FAD6  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FEEB                                  STR_75 FEBE  
                                STR_83 FE34                                  STR_84 FF86  
                                STR_76 FF07                                  STR_68 FC8B  
                                STR_92 FC69                                  STR_85 FF86  
                                STR_77 FFAD                                  STR_93 FF65  
                                STR_69 FC9C                                  STR_78 FF15  
                                STR_86 FFA4                                  STR_94 FC7A  
                                STR_87 FFA4                                  STR_95 FF70  
                                STR_79 FF3F                                  STR_88 FF90  
                                STR_96 FEAF                                  STR_89 FF15  
                                STR_97 FBD0                                  STR_98 FBBF  
                                STR_99 FB9D           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4666  
         i2updateServoPosition@time_us 0001                                  u10007 0A60  
                                u10017 0A7E                                  u10107 0CE8  
                                u10027 0AAE                                  u10117 0D10  
                                u10037 0B14                                  u10207 0F8A  
                                u10127 0D6C                                  u10047 0B32  
                                u10217 0FB2                                  u10137 0D94  
                                u10057 0B62                                  u10307 1176  
                                u10227 100E                                  u10147 0DF0  
                                u10067 0BE0                                  u10317 4958  
                                u10237 1036                                  u10157 0E18  
                                u10077 0C08                                  u10407 2D66  
                                u10327 49A8                                  u10247 1058  
                                u10167 0E74                                  u10087 0C64  
                                _T0CON 000FD5                                  u10417 2DAC  
                                u10337 49BC                                  u10257 10A8  
                                u10177 0E9C                                  u10097 0C8C  
                                u10507 1CCC                                  u10427 2DBE  
                                u10347 4DAE                                  u10267 10D0  
                                u10187 0F06                        ___awdiv@divisor 0088  
                                u10517 1CFE                                  u10437 546C  
                                u10357 4E0A                                  u10277 1120  
                                u10197 0F2E                                  u10607 1F14  
                                u10527 1D4A                                  u10447 1B4E  
                                u10367 2B68                                  u10287 112A  
                                _T1CON 000FCD                                  u10617 4A10  
                                u10537 1D7E                                  u10457 1B9A  
                                u10377 2C00                                  u10297 114E  
                                u10627 4A2C                                  u10547 1DB0  
                                u10467 1BE6                                  u10387 2C88  
                                u10637 3AEC                                  u10557 1DFC  
                                u10477 1C1A                                  u10397 2D54  
                                u10647 3C04                                  u10567 1E30  
                                u10487 1C4C                                  _T2CON 000FCA  
                                u10657 3C0E                                  u10577 1E62  
                                u10497 1C98                                  u10667 4C32  
                                u10587 1EAE                                  u10677 4C3C  
                                u10597 1EE2                                  u10687 4C68  
                                _T3CON 000FB1                                  u10697 4C72  
                      __end_of___lwdiv 4ABE                        __end_of___lwmod 4D40  
                                i2l263 2B26                                  i2l618 3390  
                                i2l917 50A4                                  i2l890 4BD8  
                      ___awdiv@counter 008A                                  i2l869 2FB6  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1B40                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 5674                        __end_of_handler 372A  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 547C  
                      __end_of_initLCD 502C                         __CFG_EBTRB$OFF 000000  
                                _debug 012D                             i2isdigit@c 0003  
                                _getIR 4ABE                        __end_of_loadRTC 483E  
                      __end_of_readMAG 4FE6                        __end_of_dpowers FABE  
                                _first 0139                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 54A6  
                                _input 007D                                  _putch 5654  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 551C                       __end_ofi2_getRTC 4BA2  
                  _log_count_pop_w_tab 0067                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 22A2                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 51E8  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1194 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4F00                           __end_of_Test 3FCC  
                   __size_ofi2_lcdInst 000C                           __end_of_main 442E  
                         __end_of_keys FAB4                           __end_of_sort 5588  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3ADE  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01C8             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC25                                 STR_101 FC36  
                               STR_110 FCBE                                 STR_102 FB7B  
                               STR_103 FE44                                 STR_111 FAEB  
                               STR_112 FBE1                                 STR_104 FBAE  
                               STR_120 FB45                                 STR_113 FC14  
                               STR_105 FB8C                                 STR_121 FB21  
                               STR_106 FBAE                                 STR_122 FB45  
                               STR_114 FC03                                 _ADRESH 000FC4  
                               STR_115 FC03                                 STR_123 FB45  
                               STR_107 FEA0                                 STR_124 FBF2  
                               STR_108 FE82                                 STR_116 FBF2  
                               _EEADRH 000FAA                                 STR_109 FE73  
                               STR_125 FCAD                                 STR_117 FC47  
                               STR_126 FAEB                                 STR_118 FB0F  
                               _ADRESL 000FC3                                 STR_127 FB33  
                               STR_119 FAFD                                 STR_128 FFB5  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 5248  
            i2_change_state_to_menu_22 5218                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1020 36EE                                 i2l1009 3626  
                               i2l1018 36CE                                 i2l1096 5626  
                               i2l1486 210E                                 i2l1933 4EF6  
                               i2l1943 5064                                 i2l7004 3E6A  
                               i2l7016 3EAE                                 i2l7008 3E7A  
                               i2l6410 4ECC                                 i2l7210 33F2  
                               i2l7202 339A                                 i2l6420 4EEC  
                               i2l6412 4ED0                                 i2l7220 3460  
                               i2l7212 3408                                 i2l7204 33B0  
                               i2l6430 5042                                 i2l7310 377C  
                               i2l7222 3476                                 i2l7214 341E  
                               i2l7206 33C6                                 i2l7230 34FC  
                               i2l6408 4EC4                                 i2l6432 5046  
                               i2l7320 379A                                 i2l7224 348C  
                               i2l7216 3434                                 i2l7208 33DC  
                               i2l7410 38DE                                 i2l7402 38BA  
                               i2l7330 37B8                                 i2l7322 37A0  
                               i2l7306 3768                                 i2l7218 344A  
                               i2l6436 505A                                 i2l6428 503A  
                               i2l7324 37A6                                 i2l7308 3778  
                               i2l7316 3786                                 i2l7228 34A2  
                               i2l6374 553C                                 i2l6702 1F4E  
                               i2l7406 38CC                                 i2l7326 37AC  
                               i2l7334 37BE                                 i2l6704 1F5C  
                               i2l7360 3828                                 i2l7328 37B2  
                               i2l7416 38E8                                 i2l6810 21FC  
                               i2l6730 201E                                 i2l6722 1FF6  
                               i2l6714 1F94                                 i2l7370 384E  
                               i2l7354 381A                                 i2l7346 3802  
                               i2l9210 28D8                                 i2l9202 28BC  
                               i2l6812 2204                                 i2l6820 222A  
                               i2l6804 21E6                                 i2l6740 2076  
                               i2l6732 2028                                 i2l6708 1F62  
                               i2l7380 3870                                 i2l7364 3844  
                               i2l7196 332E                                 i2l6670 4B68  
                               i2l6398 55C0                                 i2l6822 2230  
                               i2l6750 20C2                                 i2l6742 2080  
                               i2l6734 202C                                 i2l7374 3862  
                               i2l9310 2A4A                                 i2l9302 2A2E  
                               i2l9230 2912                                 i2l9222 28F4  
                               i2l9206 28CA                                 i2l6680 4B92  
                               i2l6816 2218                                 i2l6752 20D4  
                               i2l6744 2086                                 i2l7376 3866  
                               i2l6832 51C0                                 i2l6674 4B78  
                               i2l6826 227E                                 i2l6746 2098  
                               i2l7394 3896                                 i2l7298 374E  
                               i2l6834 51C8                                 i2l9330 2A98  
                               i2l9322 2A7C                                 i2l9314 2A58  
                               i2l9306 2A3C                                 i2l9250 2958  
                               i2l9242 293C                                 i2l9234 2920  
                               i2l9226 2902                                 i2l9218 28E6  
                               i2l6772 2154                                 i2l6756 20D8  
                               i2l6828 2286                                 i2l7388 3888  
                               i2l9340 2ABC                                 i2l6774 2158  
                               i2l7398 38A8                                 i2l9334 2AAE  
                               i2l9326 2A8A                                 i2l9318 2A6E  
                               i2l9270 29AE                                 i2l9262 298A  
                               i2l9254 296E                                 i2l9246 294A  
                               i2l9238 292E                                 i2l6792 21A4  
                               i2l6768 213C                                 i2l9192 289A  
                               i2l8800 4BC0                                 i2l6786 218A  
                               i2l6698 1F3E                                 i2l9522 2E04  
                               i2l9290 29FC                                 i2l9282 29D8  
                               i2l9274 29BC                                 i2l9266 2998  
                               i2l9258 297C                                 i2l9194 28A0  
                               i2l6796 21C8                                 i2l9540 2F2C  
                               i2l9620 3A0A                                 i2l9604 3980  
                               i2l9612 399E                                 i2l8814 55E8  
                               i2l6798 21D0                                 i2l9518 2DF4  
                               i2l9294 2A0A                                 i2l9286 29EE  
                               i2l9278 29CA                                 i2l9198 28AE  
                               i2l8806 4BF2                                 i2l9606 3994  
                               i2l9614 39E8                                 i2l9552 2F84  
                               i2l9560 2FB8                                 i2l9528 2E5E  
                               i2l9632 3A56                                 i2l9616 39F2  
                               i2l8818 55F8                                 i2l9298 2A18  
                               i2l9626 3A30                                 i2l9810 3682  
                               i2l9564 2FEC                                 i2l9820 36A2  
                               i2l9566 2FF2                                 i2l9646 3AAC  
                               i2l9590 394A                                 i2l9742 35B4  
                               i2l9592 3954                                 i2l9816 369C  
                               i2l9736 35A4                                 i2l9752 35DE  
                               i2l9682 5084                                 i2l9586 3934  
                               i2l9842 36EC                                 i2l9738 35A8  
                               i2l9746 35BC                                 i2l9676 5078  
                               i2l9748 35D4                                 i2l9678 507E  
                               i2l9598 396A                                 i2l9766 35FA  
                               i2l9794 3652                                 i2l9788 3644  
              _f_most_recent_sort_time 0137                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 54CE  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5566                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 4294  
                               ___wmul 514E                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 5184  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 483E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 55AA  
                               _initUI 51E8                                 _readIR 4F4E  
                               _logRun 3C62                                 getIR@i 0087  
                               clear_0 4F26                                 clear_1 4F32  
                               clear_2 4F3E                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 4DFC  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1708                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 5118                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 54F6  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 54CE                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 4F00  
                     __end_of_printRTC 286A                           __mediumconst FAA2  
                    __end_ofi2___lwmod 506E                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 0065                  __end_of_algorithmTest 436A  
                    __end_ofi2_lcdInst 568C                      __end_ofi2_isdigit 55C8  
                           __accesstop 0080                __end_of__initialization 4F44  
                        ?_inputHandler 002A                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 5618                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 56A0                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 4B30                            i2printRTC@i 0041  
                        _initSortTimer 4666            __end_of_updateServoPosition 494A  
                        __end_of_putch 5664                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 3302  
                           __end_of_UI 08D6                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 5450          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 5424                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08D6                __size_of_PortTestPusher 005C  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
       __size_ofi2_updateServoPosition 0070          __end_ofi2_updateServoPosition 4C12  
                         _EEPROM_write 40CA                         ??_PlatformTest 00AB  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3241 0147               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 49CE  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 03F4  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                       ??_updateArmState 0001  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestDC 0001  
                              ?_printf 008E                                _UI$2419 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006B  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                              i2l10300 3AD4                                i2l10312 37D6  
                              i2l10304 2ADA                                i2l10314 37F2  
                              i2l10306 2AFC                                i2l10308 2B18  
                              i2l10290 39C2                                i2l10292 39CC  
                              i2l10294 39D6                                i2l10296 39E0  
                              i2l10298 3AC4                              ?_delay_ms 0001  
                       PlatformTest@on 00B5                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                _RTCflag 00EA  
                              i2_putch 5674                              ?_initTime 0080  
                      _f_loadingNewCan 00F2                        i2printRTC@month 003D  
                __size_of_Distribution 00E2            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 4C7A                                _Loading 118E  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 44EC  
                              ___awmod 4710                             _initServos 49CE  
                              ___lldiv 45AA                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4A46  
                              ___lwmod 4CDE                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 4F00  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0144  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 442E                                _lcdInst 5664  
                              _handler 0008                                __ptext0 436A  
                              __ptext1 5566                                __ptext2 118E  
                              __ptext3 4666                                __ptext4 442E  
                              __ptext5 5184                                __ptext6 4ABE  
                              __ptext7 4F4E                                __ptext8 3090  
                              __ptext9 54A6                        __size_of_printf 0438  
                              _readADC 5450                        __size_of_strcpy 0036  
                              _initLCD 4FE6                                _cur_can 012B  
                              _loadRTC 47B2                                _readMAG 4F9A  
                              _dpowers FAB4                     actuatorTest@i_1730 00AD  
                   actuatorTest@i_1740 00B0                     actuatorTest@i_1741 00B1  
                   actuatorTest@i_1750 00B7                     actuatorTest@i_1743 00B2  
                   actuatorTest@i_1760 00BD                     actuatorTest@i_1752 00B8  
                   actuatorTest@i_1744 00B3                     actuatorTest@i_1753 00B9  
                   actuatorTest@i_1737 00AE                     actuatorTest@i_1770 00C3  
                   actuatorTest@i_1762 00BE                     actuatorTest@i_1746 00B4  
                   actuatorTest@i_1738 00AF                     actuatorTest@i_1763 00BF  
                   actuatorTest@i_1747 00B5                           __size_of_arm 00FE  
                   actuatorTest@i_1756 00BA                     actuatorTest@i_1757 00BB  
                   actuatorTest@i_1749 00B6                     actuatorTest@i_1766 00C0  
                   actuatorTest@i_1767 00C1                     actuatorTest@i_1759 00BC  
                   actuatorTest@i_1769 00C2                                _isdigit 547C  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 41B2  
                 PlatformTest@res_1781 00AF                         __pintcode_body 3538  
                 end_of_initialization 4F44                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 3538                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestDC 005C  
                            i2u1070_47 376E                              i2u1071_47 2F5E  
                            i2u1072_47 4E70                              i2u1073_47 4E7A  
                            i2u1074_47 4E9C                              i2u1075_47 4EA6  
                            i2u1076_47 55F0              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 5600                 __end_of_initGlobalVars 44EC  
                           _sensorTest 22A2                             _servoTimes 00DA  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3916                           ??_BothServos 00AB  
                __end_of_machineConfig 4CDE                   __end_of_PlatformTest 2DE8  
                           _updateMenu 286A                      i2_I2C_Master_Read 551C  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5642  
                    i2_I2C_Master_Stop 56B8                      i2___lwdiv@divisor 0008  
                      _log_count_total 0143                         _PortTestPusher 4DA0  
                            i2___lwdiv 4EAE                              i2___lwmod 502C  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 3538  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 5680  
                        Loading@i_1170 00BE                          Loading@i_1156 00B6  
                        Loading@i_1165 00B8                          Loading@i_1167 00BA  
                        Loading@i_1168 00BC                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 55AA  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1F34  
                  __end_of_EEPROM_read 5618                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 5184  
                       __end_of_getMAG 51B6                         __end_of_getRTC 48C4  
                 __size_ofi2_lcdNibble 0056                         _timer2_counter 0073  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 5218                         __end_of_readIR 4F9A  
                       __end_of_logRun 3DA6                       i2___wmul@product 0005  
                       __end_of_printf 1B40                           i2printf@flag 0026  
                       __end_of_strcpy 514E              __end_ofi2_I2C_Master_Read 5542  
            __end_ofi2_I2C_Master_Wait 5654                           i2printf@prec 001D  
                  start_initialization 4F00              __end_ofi2_I2C_Master_Stop 56C0  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0125            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                 __end_of_PortTestPusher 4DFC  
                          __end_of_arm 40CA                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1436 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 494A                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0147                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1181 0086  
                             ID@i_1182 0088                           ??_PortTestDC 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2551 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2056 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0129                            _EEPROM_read 5600  
                     _I2C_Master_Start 56B0                     __end_of_PortTestDC 4E58  
                            _f_lastCan 00F0                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 568C  
                    __size_of_initTime 0022                  i2_updateServoPosition 4BA2  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAA2                              _lcdNibble 4C12  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                             ?___lwmod 0087                  __size_of_PlatformTest 02BE  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 013B  
                            _cur_state 00EC                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 4294  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0272  
                          __size_of_UI 08C4                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 56C8             __end_ofi2_I2C_Master_Write 56A0  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 372A                            ??i2_isdigit 0001  
                         _PlatformTest 2B2A                           BlockerTest@i 00AC  
                             i2u530_40 20BA                               i2u530_47 20B0  
                             _PIR2bits 000FA1                               i2u526_40 205A  
                             i2u526_47 2050                               i2u471_40 553A  
                      PlatformTest@res 00AD                               i2u571_40 3390  
                             i2u882_40 2F8E                               i2u884_40 2FB6  
                             i2u883_48 2F90                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 54F6                          lcdNibble@data 0081  
                             i2_getRTC 4B30                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1F34  
                             i2_strcpy 51B6                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4F14  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 562E                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 057A  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 4710                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 52A8             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 50E0             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 50A8                _change_state_to_menu_23 5278  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 5398  
              _change_state_to_logs_12 5368                _change_state_to_logs_22 5338  
              _change_state_to_logs_23 53F6                _change_state_to_logs_33 5308  
              _change_state_to_logs_34 52D8                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3722  
                      _I2C_Master_Init 4D40                       __size_of_readADC 002C  
                      _I2C_Master_Read 53C8                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 562E  
                      _I2C_Master_Stop 56A8                       __size_of_isdigit 002A  
                             _delay_ms 54A6                         _printSortTimer 2DE8  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3EC6                               __ptext10 41B2  
                             __ptext11 4C7A                               __ptext20 5588  
                             __ptext12 3C62                               __ptext21 4FE6  
                             __ptext13 40CA                               __ptext30 562E  
                             __ptext22 0012                               __ptext14 5600  
                             __ptext31 50A8                               __ptext23 25A0  
                             __ptext15 51E8                               __ptext40 08D6  
                             __ptext32 50E0                               __ptext24 5118  
                             __ptext16 47B2                               __ptext41 494A  
                             __ptext33 4710                               __ptext25 483E  
                             __ptext17 4D40                               __ptext50 3ADE  
                             __ptext42 4DA0                               __ptext34 44EC  
                             __ptext26 568C                               __ptext18 45AA  
                             __ptext51 1708                               __ptext43 4DFC  
                             __ptext35 3EC6                               __ptext27 56A8  
                             __ptext19 5424                               __ptext60 3916  
                             __ptext52 5654                               __ptext44 2B2A  
                             __ptext36 22A2                               __ptext28 56B0  
                             __ptext61 4BA2                               __ptext53 547C  
                             __ptext45 5450                               __ptext37 4F9A  
                             __ptext29 53C8                               __ptext70 52A8  
                             __ptext62 286A                               __ptext54 514E  
                             __ptext46 1B40                               __ptext38 3FCC  
                             __ptext71 52D8                               __ptext63 54CE  
                             __ptext55 4CDE                               __ptext47 55C8  
                             __ptext39 4294                               __ptext80 506E  
                             __ptext72 5308                               __ptext64 3302  
                             __ptext56 4A46                               __ptext48 49CE  
                             __ptext81 2DE8                               __ptext73 53F6  
                             __ptext65 51B6                               __ptext57 5664  
                             __ptext49 48C4                               __ptext90 4B30  
                             __ptext82 1F34                               __ptext74 5338  
                             __ptext66 372A                               __ptext58 4C12  
                             __ptext91 5696                               __ptext83 5674  
                             __ptext75 5368                               __ptext67 5218  
                             __ptext92 56B8                               __ptext84 55AA  
                             __ptext76 5398                               __ptext68 5248  
                             __ptext93 56C0                               __ptext85 54F6  
                             __ptext77 5542                               __ptext69 5278  
                             __ptext94 551C                               __ptext86 502C  
                             __ptext78 3DA6                               __ptext95 5642  
                             __ptext87 4EAE                               __ptext79 5618  
                             __ptext96 55E4                               __ptext88 5680  
                             __ptext89 4E58                               _dispLogs 5542  
                        ?_actuatorTest 0001                     PlatformTest@i_1784 00B3  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2056 0002                     __end_of_initServos 4A46  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5588                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 48C4  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 25A0                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5278  
    __end_ofi2_change_state_to_menu_22 5248                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 3090  
                            putch@data 0082               __end_of_I2C_Master_Start 56B8  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5696  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E8                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 25A0  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 55E4  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2B2A                __end_of_I2C_Master_Init 4DA0  
              __end_of_I2C_Master_Read 53F6                __end_of_I2C_Master_Wait 5642  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 56B0  
                        printRTC@F3231 014B                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3DA6  
                  __end_ofi2_lcdNibble 4EAE                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                     _servo_timer_target 006F  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                         _updateArmState 506E  
                    _f_can_distributed 0135                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4C7A  
                      ___lwmod@counter 008B                      _updateServoStates 3916  
                        printRTC@month 00BE                          ?_Distribution 0001  
                   ?_updateServoStates 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                         _f_arm_position 00EE  
                  ??_updateServoStates 0009                     i2printRTC@INT_time 002D  
