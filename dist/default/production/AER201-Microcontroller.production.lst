

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 31 17:26:31 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114  0000                     
   115                           ; Version 1.40
   116                           ; Generated 01/12/2016 GMT
   117                           ; 
   118                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F4620 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataBANK1
   151  0052F6                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for UI@F3235
   155  0052F6  4D                 	db	77
   156  0052F7  4D                 	db	77
   157  0052F8  4D                 	db	77
   158  0052F9  00                 	db	0
   159                           
   160                           ;initializer for printRTC@F3226
   161  0052FA  4D                 	db	77
   162  0052FB  4D                 	db	77
   163  0052FC  4D                 	db	77
   164  0052FD  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FAEA                     __pmediumconst:
   168                           	opt stack 0
   169  00FAEA  00                 	db	0
   170  00FAEB                     _keys:
   171                           	opt stack 0
   172  00FAEB  31                 	db	49
   173  00FAEC  32                 	db	50
   174  00FAED  33                 	db	51
   175  00FAEE  41                 	db	65
   176  00FAEF  34                 	db	52
   177  00FAF0  35                 	db	53
   178  00FAF1  36                 	db	54
   179  00FAF2  42                 	db	66
   180  00FAF3  37                 	db	55
   181  00FAF4  38                 	db	56
   182  00FAF5  39                 	db	57
   183  00FAF6  43                 	db	67
   184  00FAF7  2A                 	db	42
   185  00FAF8  30                 	db	48
   186  00FAF9  23                 	db	35
   187  00FAFA  44                 	db	68
   188  00FAFB  00                 	db	0
   189  00FAFC                     __end_of_keys:
   190                           	opt stack 0
   191  00FAFC                     _dpowers:
   192                           	opt stack 0
   193  00FAFC  0001               	dw	1
   194  00FAFE  000A               	dw	10
   195  00FB00  0064               	dw	100
   196  00FB02  03E8               	dw	1000
   197  00FB04  2710               	dw	10000
   198  00FB06                     __end_of_dpowers:
   199                           	opt stack 0
   200  0000                     _ADCON0	set	4034
   201  0000                     _ADCON0bits	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADRESH	set	4036
   205  0000                     _ADRESL	set	4035
   206  0000                     _CMCONbits	set	4020
   207  0000                     _CVRCON	set	4021
   208  0000                     _EEADR	set	4009
   209  0000                     _EEADRH	set	4010
   210  0000                     _EECON1bits	set	4006
   211  0000                     _EECON2	set	4007
   212  0000                     _EEDATA	set	4008
   213  0000                     _INTCONbits	set	4082
   214  0000                     _LATA	set	3977
   215  0000                     _LATAbits	set	3977
   216  0000                     _LATB	set	3978
   217  0000                     _LATBbits	set	3978
   218  0000                     _LATC	set	3979
   219  0000                     _LATCbits	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _LATEbits	set	3981
   224  0000                     _OSCCON	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIR2bits	set	4001
   227  0000                     _PORTAbits	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTBbits	set	3969
   230  0000                     _SSPADD	set	4040
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON1	set	4038
   233  0000                     _SSPCON2	set	4037
   234  0000                     _SSPSTAT	set	4039
   235  0000                     _T0CON	set	4053
   236  0000                     _T1CON	set	4045
   237  0000                     _T3CON	set	4017
   238  0000                     _TMR0H	set	4055
   239  0000                     _TMR0L	set	4054
   240  0000                     _TMR1H	set	4047
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR3H	set	4019
   243  0000                     _TMR3L	set	4018
   244  0000                     _TRISA	set	3986
   245  0000                     _TRISB	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _ACKDT	set	32301
   250  0000                     _ACKEN	set	32300
   251  0000                     _ADIE	set	31982
   252  0000                     _INT1IE	set	32643
   253  0000                     _INT1IF	set	32640
   254  0000                     _PEIE	set	32662
   255  0000                     _PEN	set	32298
   256  0000                     _RCEN	set	32299
   257  0000                     _RSEN	set	32297
   258  0000                     _SEN	set	32296
   259  0000                     _TMR0IE	set	32661
   260  0000                     _TMR0IF	set	32658
   261  0000                     _TMR0ON	set	32431
   262  0000                     _TMR1IE	set	31976
   263  0000                     _TMR1IF	set	31984
   264  0000                     _TMR1ON	set	32360
   265  0000                     _TMR2IE	set	31977
   266  0000                     _TMR3IE	set	32001
   267  0000                     _TMR3IF	set	32009
   268  0000                     _TMR3ON	set	32136
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FB06                     STR_21:
   273  00FB06  25                 	db	37
   274  00FB07  30                 	db	48	;'0'
   275  00FB08  32                 	db	50	;'2'
   276  00FB09  64                 	db	100	;'d'
   277  00FB0A  25                 	db	37
   278  00FB0B  73                 	db	115	;'s'
   279  00FB0C  20                 	db	32
   280  00FB0D  7C                 	db	124
   281  00FB0E  20                 	db	32
   282  00FB0F  25                 	db	37
   283  00FB10  30                 	db	48	;'0'
   284  00FB11  32                 	db	50	;'2'
   285  00FB12  64                 	db	100	;'d'
   286  00FB13  3A                 	db	58	;':'
   287  00FB14  25                 	db	37
   288  00FB15  30                 	db	48	;'0'
   289  00FB16  32                 	db	50	;'2'
   290  00FB17  64                 	db	100	;'d'
   291  00FB18  3A                 	db	58	;':'
   292  00FB19  25                 	db	37
   293  00FB1A  30                 	db	48	;'0'
   294  00FB1B  32                 	db	50	;'2'
   295  00FB1C  64                 	db	100	;'d'
   296  00FB1D  00                 	db	0
   297  00FB1E                     STR_67:
   298  00FB1E  28                 	db	40
   299  00FB1F  64                 	db	100	;'d'
   300  00FB20  61                 	db	97	;'a'
   301  00FB21  74                 	db	116	;'t'
   302  00FB22  61                 	db	97	;'a'
   303  00FB23  3A                 	db	58	;':'
   304  00FB24  20                 	db	32
   305  00FB25  25                 	db	37
   306  00FB26  75                 	db	117	;'u'
   307  00FB27  2C                 	db	44
   308  00FB28  20                 	db	32
   309  00FB29  61                 	db	97	;'a'
   310  00FB2A  64                 	db	100	;'d'
   311  00FB2B  64                 	db	100	;'d'
   312  00FB2C  72                 	db	114	;'r'
   313  00FB2D  3A                 	db	58	;':'
   314  00FB2E  20                 	db	32
   315  00FB2F  25                 	db	37
   316  00FB30  75                 	db	117	;'u'
   317  00FB31  29                 	db	41
   318  00FB32  00                 	db	0
   319  00FB33                     STR_112:
   320  00FB33  44                 	db	68	;'D'
   321  00FB34  20                 	db	32
   322  00FB35  57                 	db	87	;'W'
   323  00FB36  49                 	db	73	;'I'
   324  00FB37  4C                 	db	76	;'L'
   325  00FB38  4C                 	db	76	;'L'
   326  00FB39  20                 	db	32
   327  00FB3A  52                 	db	82	;'R'
   328  00FB3B  45                 	db	69	;'E'
   329  00FB3C  54                 	db	84	;'T'
   330  00FB3D  55                 	db	85	;'U'
   331  00FB3E  52                 	db	82	;'R'
   332  00FB3F  4E                 	db	78	;'N'
   333  00FB40  20                 	db	32
   334  00FB41  20                 	db	32
   335  00FB42  20                 	db	32
   336  00FB43  20                 	db	32
   337  00FB44  00                 	db	0
   338  00FB45                     STR_113:
   339  00FB45  4F                 	db	79	;'O'
   340  00FB46  54                 	db	84	;'T'
   341  00FB47  48                 	db	72	;'H'
   342  00FB48  45                 	db	69	;'E'
   343  00FB49  52                 	db	82	;'R'
   344  00FB4A  20                 	db	32
   345  00FB4B  53                 	db	83	;'S'
   346  00FB4C  45                 	db	69	;'E'
   347  00FB4D  54                 	db	84	;'T'
   348  00FB4E  53                 	db	83	;'S'
   349  00FB4F  20                 	db	32
   350  00FB50  52                 	db	82	;'R'
   351  00FB51  41                 	db	65	;'A'
   352  00FB52  35                 	db	53	;'5'
   353  00FB53  20                 	db	32
   354  00FB54  20                 	db	32
   355  00FB55  20                 	db	32
   356  00FB56  00                 	db	0
   357  00FB57                     STR_121:
   358  00FB57  53                 	db	83	;'S'
   359  00FB58  3A                 	db	58	;':'
   360  00FB59  20                 	db	32
   361  00FB5A  44                 	db	68	;'D'
   362  00FB5B  20                 	db	32
   363  00FB5C  57                 	db	87	;'W'
   364  00FB5D  49                 	db	73	;'I'
   365  00FB5E  4C                 	db	76	;'L'
   366  00FB5F  4C                 	db	76	;'L'
   367  00FB60  20                 	db	32
   368  00FB61  52                 	db	82	;'R'
   369  00FB62  45                 	db	69	;'E'
   370  00FB63  54                 	db	84	;'T'
   371  00FB64  55                 	db	85	;'U'
   372  00FB65  52                 	db	82	;'R'
   373  00FB66  4E                 	db	78	;'N'
   374  00FB67  20                 	db	32
   375  00FB68  00                 	db	0
   376  00FB69                     STR_124:
   377  00FB69  4F                 	db	79	;'O'
   378  00FB6A  54                 	db	84	;'T'
   379  00FB6B  48                 	db	72	;'H'
   380  00FB6C  45                 	db	69	;'E'
   381  00FB6D  52                 	db	82	;'R'
   382  00FB6E  3A                 	db	58	;':'
   383  00FB6F  20                 	db	32
   384  00FB70  43                 	db	67	;'C'
   385  00FB71  41                 	db	65	;'A'
   386  00FB72  4D                 	db	77	;'M'
   387  00FB73  20                 	db	32
   388  00FB74  54                 	db	84	;'T'
   389  00FB75  4F                 	db	79	;'O'
   390  00FB76  47                 	db	71	;'G'
   391  00FB77  47                 	db	71	;'G'
   392  00FB78  4C                 	db	76	;'L'
   393  00FB79  45                 	db	69	;'E'
   394  00FB7A  00                 	db	0
   395  00FB7B                     STR_123:
   396  00FB7B  44                 	db	68	;'D'
   397  00FB7C  3A                 	db	58	;':'
   398  00FB7D  20                 	db	32
   399  00FB7E  52                 	db	82	;'R'
   400  00FB7F  45                 	db	69	;'E'
   401  00FB80  54                 	db	84	;'T'
   402  00FB81  7C                 	db	124
   403  00FB82  32                 	db	50	;'2'
   404  00FB83  3A                 	db	58	;':'
   405  00FB84  20                 	db	32
   406  00FB85  43                 	db	67	;'C'
   407  00FB86  4F                 	db	79	;'O'
   408  00FB87  4E                 	db	78	;'N'
   409  00FB88  44                 	db	68	;'D'
   410  00FB89  20                 	db	32
   411  00FB8A  25                 	db	37
   412  00FB8B  64                 	db	100	;'d'
   413  00FB8C  00                 	db	0
   414  00FB8D                     STR_3:
   415  00FB8D  2D                 	db	45
   416  00FB8E  2D                 	db	45
   417  00FB8F  20                 	db	32
   418  00FB90  4C                 	db	76	;'L'
   419  00FB91  4F                 	db	79	;'O'
   420  00FB92  47                 	db	71	;'G'
   421  00FB93  20                 	db	32
   422  00FB94  25                 	db	37
   423  00FB95  32                 	db	50	;'2'
   424  00FB96  64                 	db	100	;'d'
   425  00FB97  20                 	db	32
   426  00FB98  48                 	db	72	;'H'
   427  00FB99  45                 	db	69	;'E'
   428  00FB9A  52                 	db	82	;'R'
   429  00FB9B  45                 	db	69	;'E'
   430  00FB9C  2D                 	db	45
   431  00FB9D  2D                 	db	45
   432  00FB9E  00                 	db	0
   433  00FB9F                     STR_1:
   434  00FB9F  52                 	db	82	;'R'
   435  00FBA0  45                 	db	69	;'E'
   436  00FBA1  53                 	db	83	;'S'
   437  00FBA2  55                 	db	85	;'U'
   438  00FBA3  4C                 	db	76	;'L'
   439  00FBA4  54                 	db	84	;'T'
   440  00FBA5  53                 	db	83	;'S'
   441  00FBA6  20                 	db	32
   442  00FBA7  49                 	db	73	;'I'
   443  00FBA8  4E                 	db	78	;'N'
   444  00FBA9  20                 	db	32
   445  00FBAA  4C                 	db	76	;'L'
   446  00FBAB  4F                 	db	79	;'O'
   447  00FBAC  47                 	db	71	;'G'
   448  00FBAD  20                 	db	32
   449  00FBAE  25                 	db	37
   450  00FBAF  64                 	db	100	;'d'
   451  00FBB0  00                 	db	0
   452  00FBB1                     STR_103:
   453  00FBB1  4D                 	db	77	;'M'
   454  00FBB2  49                 	db	73	;'I'
   455  00FBB3  44                 	db	68	;'D'
   456  00FBB4  20                 	db	32
   457  00FBB5  2D                 	db	45
   458  00FBB6  2D                 	db	45
   459  00FBB7  20                 	db	32
   460  00FBB8  32                 	db	50	;'2'
   461  00FBB9  73                 	db	115	;'s'
   462  00FBBA  20                 	db	32
   463  00FBBB  20                 	db	32
   464  00FBBC  20                 	db	32
   465  00FBBD  20                 	db	32
   466  00FBBE  20                 	db	32
   467  00FBBF  20                 	db	32
   468  00FBC0  20                 	db	32
   469  00FBC1  00                 	db	0
   470  00FBC2                     STR_106:
   471  00FBC2  44                 	db	68	;'D'
   472  00FBC3  52                 	db	82	;'R'
   473  00FBC4  4F                 	db	79	;'O'
   474  00FBC5  50                 	db	80	;'P'
   475  00FBC6  20                 	db	32
   476  00FBC7  2D                 	db	45
   477  00FBC8  2D                 	db	45
   478  00FBC9  20                 	db	32
   479  00FBCA  32                 	db	50	;'2'
   480  00FBCB  73                 	db	115	;'s'
   481  00FBCC  20                 	db	32
   482  00FBCD  20                 	db	32
   483  00FBCE  20                 	db	32
   484  00FBCF  20                 	db	32
   485  00FBD0  20                 	db	32
   486  00FBD1  20                 	db	32
   487  00FBD2  00                 	db	0
   488  00FBD3                     STR_100:
   489  00FBD3  4C                 	db	76	;'L'
   490  00FBD4  45                 	db	69	;'E'
   491  00FBD5  46                 	db	70	;'F'
   492  00FBD6  54                 	db	84	;'T'
   493  00FBD7  20                 	db	32
   494  00FBD8  2D                 	db	45
   495  00FBD9  2D                 	db	45
   496  00FBDA  20                 	db	32
   497  00FBDB  32                 	db	50	;'2'
   498  00FBDC  73                 	db	115	;'s'
   499  00FBDD  20                 	db	32
   500  00FBDE  20                 	db	32
   501  00FBDF  20                 	db	32
   502  00FBE0  20                 	db	32
   503  00FBE1  20                 	db	32
   504  00FBE2  20                 	db	32
   505  00FBE3  00                 	db	0
   506  00FBE4                     STR_105:
   507  00FBE4  4C                 	db	76	;'L'
   508  00FBE5  45                 	db	69	;'E'
   509  00FBE6  56                 	db	86	;'V'
   510  00FBE7  45                 	db	69	;'E'
   511  00FBE8  4C                 	db	76	;'L'
   512  00FBE9  20                 	db	32
   513  00FBEA  2D                 	db	45
   514  00FBEB  2D                 	db	45
   515  00FBEC  20                 	db	32
   516  00FBED  32                 	db	50	;'2'
   517  00FBEE  73                 	db	115	;'s'
   518  00FBEF  20                 	db	32
   519  00FBF0  20                 	db	32
   520  00FBF1  20                 	db	32
   521  00FBF2  20                 	db	32
   522  00FBF3  20                 	db	32
   523  00FBF4  00                 	db	0
   524  00FBF5                     STR_99:
   525  00FBF5  52                 	db	82	;'R'
   526  00FBF6  49                 	db	73	;'I'
   527  00FBF7  47                 	db	71	;'G'
   528  00FBF8  48                 	db	72	;'H'
   529  00FBF9  54                 	db	84	;'T'
   530  00FBFA  20                 	db	32
   531  00FBFB  2D                 	db	45
   532  00FBFC  2D                 	db	45
   533  00FBFD  20                 	db	32
   534  00FBFE  32                 	db	50	;'2'
   535  00FBFF  73                 	db	115	;'s'
   536  00FC00  20                 	db	32
   537  00FC01  20                 	db	32
   538  00FC02  20                 	db	32
   539  00FC03  20                 	db	32
   540  00FC04  20                 	db	32
   541  00FC05  00                 	db	0
   542  00FC06                     STR_98:
   543  00FC06  4D                 	db	77	;'M'
   544  00FC07  49                 	db	73	;'I'
   545  00FC08  44                 	db	68	;'D'
   546  00FC09  44                 	db	68	;'D'
   547  00FC0A  4C                 	db	76	;'L'
   548  00FC0B  45                 	db	69	;'E'
   549  00FC0C  20                 	db	32
   550  00FC0D  2D                 	db	45
   551  00FC0E  2D                 	db	45
   552  00FC0F  20                 	db	32
   553  00FC10  32                 	db	50	;'2'
   554  00FC11  73                 	db	115	;'s'
   555  00FC12  20                 	db	32
   556  00FC13  20                 	db	32
   557  00FC14  20                 	db	32
   558  00FC15  20                 	db	32
   559  00FC16  00                 	db	0
   560  00FC17  44                 	db	68	;'D'
   561  00FC18  20                 	db	32
   562  00FC19  57                 	db	87	;'W'
   563  00FC1A  49                 	db	73	;'I'
   564  00FC1B  4C                 	db	76	;'L'
   565  00FC1C  4C                 	db	76	;'L'
   566  00FC1D  20                 	db	32
   567  00FC1E  52                 	db	82	;'R'
   568  00FC1F  45                 	db	69	;'E'
   569  00FC20  54                 	db	84	;'T'
   570  00FC21  55                 	db	85	;'U'
   571  00FC22  52                 	db	82	;'R'
   572  00FC23  4E                 	db	78	;'N'
   573  00FC24  20                 	db	32
   574  00FC25  20                 	db	32
   575  00FC26  20                 	db	32
   576  00FC27  00                 	db	0
   577  00FC28                     STR_101:
   578  00FC28  4D                 	db	77	;'M'
   579  00FC29  49                 	db	73	;'I'
   580  00FC2A  44                 	db	68	;'D'
   581  00FC2B  2D                 	db	45
   582  00FC2C  4C                 	db	76	;'L'
   583  00FC2D  45                 	db	69	;'E'
   584  00FC2E  46                 	db	70	;'F'
   585  00FC2F  54                 	db	84	;'T'
   586  00FC30  20                 	db	32
   587  00FC31  2D                 	db	45
   588  00FC32  2D                 	db	45
   589  00FC33  20                 	db	32
   590  00FC34  32                 	db	50	;'2'
   591  00FC35  73                 	db	115	;'s'
   592  00FC36  20                 	db	32
   593  00FC37  20                 	db	32
   594  00FC38  00                 	db	0
   595  00FC39                     STR_102:
   596  00FC39  4D                 	db	77	;'M'
   597  00FC3A  49                 	db	73	;'I'
   598  00FC3B  44                 	db	68	;'D'
   599  00FC3C  2D                 	db	45
   600  00FC3D  52                 	db	82	;'R'
   601  00FC3E  49                 	db	73	;'I'
   602  00FC3F  47                 	db	71	;'G'
   603  00FC40  48                 	db	72	;'H'
   604  00FC41  54                 	db	84	;'T'
   605  00FC42  20                 	db	32
   606  00FC43  2D                 	db	45
   607  00FC44  2D                 	db	45
   608  00FC45  20                 	db	32
   609  00FC46  32                 	db	50	;'2'
   610  00FC47  73                 	db	115	;'s'
   611  00FC48  20                 	db	32
   612  00FC49  00                 	db	0
   613  00FC4A  45                 	db	69	;'E'
   614  00FC4B  4C                 	db	76	;'L'
   615  00FC4C  53                 	db	83	;'S'
   616  00FC4D  45                 	db	69	;'E'
   617  00FC4E  20                 	db	32
   618  00FC4F  54                 	db	84	;'T'
   619  00FC50  4F                 	db	79	;'O'
   620  00FC51  47                 	db	71	;'G'
   621  00FC52  47                 	db	71	;'G'
   622  00FC53  4C                 	db	76	;'L'
   623  00FC54  45                 	db	69	;'E'
   624  00FC55  53                 	db	83	;'S'
   625  00FC56  20                 	db	32
   626  00FC57  52                 	db	82	;'R'
   627  00FC58  41                 	db	65	;'A'
   628  00FC59  35                 	db	53	;'5'
   629  00FC5A  00                 	db	0
   630  00FC5B                     STR_73:
   631  00FC5B  41                 	db	65	;'A'
   632  00FC5C  4C                 	db	76	;'L'
   633  00FC5D  47                 	db	71	;'G'
   634  00FC5E  31                 	db	49	;'1'
   635  00FC5F  3A                 	db	58	;':'
   636  00FC60  20                 	db	32
   637  00FC61  39                 	db	57	;'9'
   638  00FC62  20                 	db	32
   639  00FC63  50                 	db	80	;'P'
   640  00FC64  4F                 	db	79	;'O'
   641  00FC65  50                 	db	80	;'P'
   642  00FC66  4E                 	db	78	;'N'
   643  00FC67  4F                 	db	79	;'O'
   644  00FC68  54                 	db	84	;'T'
   645  00FC69  41                 	db	65	;'A'
   646  00FC6A  42                 	db	66	;'B'
   647  00FC6B  00                 	db	0
   648  00FC6C                     STR_93:
   649  00FC6C  54                 	db	84	;'T'
   650  00FC6D  53                 	db	83	;'S'
   651  00FC6E  54                 	db	84	;'T'
   652  00FC6F  3A                 	db	58	;':'
   653  00FC70  20                 	db	32
   654  00FC71  43                 	db	67	;'C'
   655  00FC72  4F                 	db	79	;'O'
   656  00FC73  4E                 	db	78	;'N'
   657  00FC74  44                 	db	68	;'D'
   658  00FC75  20                 	db	32
   659  00FC76  53                 	db	83	;'S'
   660  00FC77  4F                 	db	79	;'O'
   661  00FC78  4C                 	db	76	;'L'
   662  00FC79  4E                 	db	78	;'N'
   663  00FC7A  27                 	db	39
   664  00FC7B  44                 	db	68	;'D'
   665  00FC7C  00                 	db	0
   666  00FC7D                     STR_95:
   667  00FC7D  54                 	db	84	;'T'
   668  00FC7E  53                 	db	83	;'S'
   669  00FC7F  54                 	db	84	;'T'
   670  00FC80  3A                 	db	58	;':'
   671  00FC81  20                 	db	32
   672  00FC82  50                 	db	80	;'P'
   673  00FC83  55                 	db	85	;'U'
   674  00FC84  53                 	db	83	;'S'
   675  00FC85  48                 	db	72	;'H'
   676  00FC86  20                 	db	32
   677  00FC87  53                 	db	83	;'S'
   678  00FC88  4F                 	db	79	;'O'
   679  00FC89  4C                 	db	76	;'L'
   680  00FC8A  4E                 	db	78	;'N'
   681  00FC8B  27                 	db	39
   682  00FC8C  44                 	db	68	;'D'
   683  00FC8D  00                 	db	0
   684  00FC8E                     STR_69:
   685  00FC8E  32                 	db	50	;'2'
   686  00FC8F  2E                 	db	46
   687  00FC90  53                 	db	83	;'S'
   688  00FC91  4E                 	db	78	;'N'
   689  00FC92  52                 	db	82	;'R'
   690  00FC93  7C                 	db	124
   691  00FC94  34                 	db	52	;'4'
   692  00FC95  2E                 	db	46
   693  00FC96  48                 	db	72	;'H'
   694  00FC97  49                 	db	73	;'I'
   695  00FC98  7C                 	db	124
   696  00FC99  35                 	db	53	;'5'
   697  00FC9A  2E                 	db	46
   698  00FC9B  4D                 	db	77	;'M'
   699  00FC9C  45                 	db	69	;'E'
   700  00FC9D  44                 	db	68	;'D'
   701  00FC9E  00                 	db	0
   702  00FC9F                     STR_70:
   703  00FC9F  42                 	db	66	;'B'
   704  00FCA0  2E                 	db	46
   705  00FCA1  50                 	db	80	;'P'
   706  00FCA2  53                 	db	83	;'S'
   707  00FCA3  48                 	db	72	;'H'
   708  00FCA4  7C                 	db	124
   709  00FCA5  38                 	db	56	;'8'
   710  00FCA6  2E                 	db	46
   711  00FCA7  53                 	db	83	;'S'
   712  00FCA8  56                 	db	86	;'V'
   713  00FCA9  7C                 	db	124
   714  00FCAA  39                 	db	57	;'9'
   715  00FCAB  2E                 	db	46
   716  00FCAC  42                 	db	66	;'B'
   717  00FCAD  4C                 	db	76	;'L'
   718  00FCAE  4B                 	db	75	;'K'
   719  00FCAF  00                 	db	0
   720  00FCB0                     STR_111:
   721  00FCB0  54                 	db	84	;'T'
   722  00FCB1  53                 	db	83	;'S'
   723  00FCB2  54                 	db	84	;'T'
   724  00FCB3  3A                 	db	58	;':'
   725  00FCB4  20                 	db	32
   726  00FCB5  42                 	db	66	;'B'
   727  00FCB6  4F                 	db	79	;'O'
   728  00FCB7  54                 	db	84	;'T'
   729  00FCB8  48                 	db	72	;'H'
   730  00FCB9  20                 	db	32
   731  00FCBA  53                 	db	83	;'S'
   732  00FCBB  45                 	db	69	;'E'
   733  00FCBC  52                 	db	82	;'R'
   734  00FCBD  56                 	db	86	;'V'
   735  00FCBE  4F                 	db	79	;'O'
   736  00FCBF  53                 	db	83	;'S'
   737  00FCC0  00                 	db	0
   738  00FCC1                     STR_41:
   739  00FCC1  4C                 	db	76	;'L'
   740  00FCC2  4F                 	db	79	;'O'
   741  00FCC3  47                 	db	71	;'G'
   742  00FCC4  20                 	db	32
   743  00FCC5  31                 	db	49	;'1'
   744  00FCC6  20                 	db	32
   745  00FCC7  20                 	db	32
   746  00FCC8  20                 	db	32
   747  00FCC9  20                 	db	32
   748  00FCCA  20                 	db	32
   749  00FCCB  20                 	db	32
   750  00FCCC  20                 	db	32
   751  00FCCD  20                 	db	32
   752  00FCCE  20                 	db	32
   753  00FCCF  20                 	db	32
   754  00FCD0  20                 	db	32
   755  00FCD1  00                 	db	0
   756  00FCD2                     STR_40:
   757  00FCD2  4C                 	db	76	;'L'
   758  00FCD3  4F                 	db	79	;'O'
   759  00FCD4  47                 	db	71	;'G'
   760  00FCD5  20                 	db	32
   761  00FCD6  32                 	db	50	;'2'
   762  00FCD7  20                 	db	32
   763  00FCD8  20                 	db	32
   764  00FCD9  20                 	db	32
   765  00FCDA  20                 	db	32
   766  00FCDB  20                 	db	32
   767  00FCDC  20                 	db	32
   768  00FCDD  20                 	db	32
   769  00FCDE  20                 	db	32
   770  00FCDF  20                 	db	32
   771  00FCE0  20                 	db	32
   772  00FCE1  20                 	db	32
   773  00FCE2  00                 	db	0
   774  00FCE3                     STR_44:
   775  00FCE3  4C                 	db	76	;'L'
   776  00FCE4  4F                 	db	79	;'O'
   777  00FCE5  47                 	db	71	;'G'
   778  00FCE6  20                 	db	32
   779  00FCE7  33                 	db	51	;'3'
   780  00FCE8  20                 	db	32
   781  00FCE9  20                 	db	32
   782  00FCEA  20                 	db	32
   783  00FCEB  20                 	db	32
   784  00FCEC  20                 	db	32
   785  00FCED  20                 	db	32
   786  00FCEE  20                 	db	32
   787  00FCEF  20                 	db	32
   788  00FCF0  20                 	db	32
   789  00FCF1  20                 	db	32
   790  00FCF2  20                 	db	32
   791  00FCF3  00                 	db	0
   792  00FCF4                     STR_48:
   793  00FCF4  4C                 	db	76	;'L'
   794  00FCF5  4F                 	db	79	;'O'
   795  00FCF6  47                 	db	71	;'G'
   796  00FCF7  20                 	db	32
   797  00FCF8  34                 	db	52	;'4'
   798  00FCF9  20                 	db	32
   799  00FCFA  20                 	db	32
   800  00FCFB  20                 	db	32
   801  00FCFC  20                 	db	32
   802  00FCFD  20                 	db	32
   803  00FCFE  20                 	db	32
   804  00FCFF  20                 	db	32
   805  00FD00  20                 	db	32
   806  00FD01  20                 	db	32
   807  00FD02  20                 	db	32
   808  00FD03  20                 	db	32
   809  00FD04  00                 	db	0
   810  00FD05                     STR_36:
   811  00FD05  33                 	db	51	;'3'
   812  00FD06  2E                 	db	46
   813  00FD07  20                 	db	32
   814  00FD08  4C                 	db	76	;'L'
   815  00FD09  4F                 	db	79	;'O'
   816  00FD0A  47                 	db	71	;'G'
   817  00FD0B  53                 	db	83	;'S'
   818  00FD0C  20                 	db	32
   819  00FD0D  20                 	db	32
   820  00FD0E  20                 	db	32
   821  00FD0F  20                 	db	32
   822  00FD10  20                 	db	32
   823  00FD11  20                 	db	32
   824  00FD12  20                 	db	32
   825  00FD13  20                 	db	32
   826  00FD14  20                 	db	32
   827  00FD15  00                 	db	0
   828  00FD16                     STR_32:
   829  00FD16  32                 	db	50	;'2'
   830  00FD17  2E                 	db	46
   831  00FD18  20                 	db	32
   832  00FD19  53                 	db	83	;'S'
   833  00FD1A  4F                 	db	79	;'O'
   834  00FD1B  52                 	db	82	;'R'
   835  00FD1C  54                 	db	84	;'T'
   836  00FD1D  20                 	db	32
   837  00FD1E  20                 	db	32
   838  00FD1F  20                 	db	32
   839  00FD20  20                 	db	32
   840  00FD21  20                 	db	32
   841  00FD22  20                 	db	32
   842  00FD23  20                 	db	32
   843  00FD24  20                 	db	32
   844  00FD25  20                 	db	32
   845  00FD26  00                 	db	0
   846  00FD27                     STR_33:
   847  00FD27  31                 	db	49	;'1'
   848  00FD28  2E                 	db	46
   849  00FD29  20                 	db	32
   850  00FD2A  44                 	db	68	;'D'
   851  00FD2B  41                 	db	65	;'A'
   852  00FD2C  54                 	db	84	;'T'
   853  00FD2D  45                 	db	69	;'E'
   854  00FD2E  2F                 	db	47
   855  00FD2F  54                 	db	84	;'T'
   856  00FD30  49                 	db	73	;'I'
   857  00FD31  4D                 	db	77	;'M'
   858  00FD32  45                 	db	69	;'E'
   859  00FD33  20                 	db	32
   860  00FD34  20                 	db	32
   861  00FD35  20                 	db	32
   862  00FD36  20                 	db	32
   863  00FD37  00                 	db	0
   864  00FD38                     STR_24:
   865  00FD38  20                 	db	32
   866  00FD39  2D                 	db	45
   867  00FD3A  2D                 	db	45
   868  00FD3B  20                 	db	32
   869  00FD3C  50                 	db	80	;'P'
   870  00FD3D  4F                 	db	79	;'O'
   871  00FD3E  50                 	db	80	;'P'
   872  00FD3F  20                 	db	32
   873  00FD40  20                 	db	32
   874  00FD41  43                 	db	67	;'C'
   875  00FD42  41                 	db	65	;'A'
   876  00FD43  4E                 	db	78	;'N'
   877  00FD44  20                 	db	32
   878  00FD45  2D                 	db	45
   879  00FD46  2D                 	db	45
   880  00FD47  20                 	db	32
   881  00FD48  00                 	db	0
   882  00FD49                     STR_26:
   883  00FD49  20                 	db	32
   884  00FD4A  2D                 	db	45
   885  00FD4B  2D                 	db	45
   886  00FD4C  20                 	db	32
   887  00FD4D  53                 	db	83	;'S'
   888  00FD4E  4F                 	db	79	;'O'
   889  00FD4F  55                 	db	85	;'U'
   890  00FD50  50                 	db	80	;'P'
   891  00FD51  20                 	db	32
   892  00FD52  43                 	db	67	;'C'
   893  00FD53  41                 	db	65	;'A'
   894  00FD54  4E                 	db	78	;'N'
   895  00FD55  20                 	db	32
   896  00FD56  2D                 	db	45
   897  00FD57  2D                 	db	45
   898  00FD58  20                 	db	32
   899  00FD59  00                 	db	0
   900  00FD5A                     STR_28:
   901  00FD5A  2D                 	db	45
   902  00FD5B  2D                 	db	45
   903  00FD5C  20                 	db	32
   904  00FD5D  54                 	db	84	;'T'
   905  00FD5E  4F                 	db	79	;'O'
   906  00FD5F  54                 	db	84	;'T'
   907  00FD60  41                 	db	65	;'A'
   908  00FD61  4C                 	db	76	;'L'
   909  00FD62  20                 	db	32
   910  00FD63  43                 	db	67	;'C'
   911  00FD64  41                 	db	65	;'A'
   912  00FD65  4E                 	db	78	;'N'
   913  00FD66  53                 	db	83	;'S'
   914  00FD67  20                 	db	32
   915  00FD68  2D                 	db	45
   916  00FD69  2D                 	db	45
   917  00FD6A  00                 	db	0
   918  00FD6B                     STR_39:
   919  00FD6B  4C                 	db	76	;'L'
   920  00FD6C  4F                 	db	79	;'O'
   921  00FD6D  47                 	db	71	;'G'
   922  00FD6E  20                 	db	32
   923  00FD6F  31                 	db	49	;'1'
   924  00FD70  20                 	db	32
   925  00FD71  20                 	db	32
   926  00FD72  20                 	db	32
   927  00FD73  20                 	db	32
   928  00FD74  20                 	db	32
   929  00FD75  20                 	db	32
   930  00FD76  20                 	db	32
   931  00FD77  20                 	db	32
   932  00FD78  20                 	db	32
   933  00FD79  20                 	db	32
   934  00FD7A  3C                 	db	60	;'<'
   935  00FD7B  00                 	db	0
   936  00FD7C                     STR_42:
   937  00FD7C  4C                 	db	76	;'L'
   938  00FD7D  4F                 	db	79	;'O'
   939  00FD7E  47                 	db	71	;'G'
   940  00FD7F  20                 	db	32
   941  00FD80  32                 	db	50	;'2'
   942  00FD81  20                 	db	32
   943  00FD82  20                 	db	32
   944  00FD83  20                 	db	32
   945  00FD84  20                 	db	32
   946  00FD85  20                 	db	32
   947  00FD86  20                 	db	32
   948  00FD87  20                 	db	32
   949  00FD88  20                 	db	32
   950  00FD89  20                 	db	32
   951  00FD8A  20                 	db	32
   952  00FD8B  3C                 	db	60	;'<'
   953  00FD8C  00                 	db	0
   954  00FD8D                     STR_46:
   955  00FD8D  4C                 	db	76	;'L'
   956  00FD8E  4F                 	db	79	;'O'
   957  00FD8F  47                 	db	71	;'G'
   958  00FD90  20                 	db	32
   959  00FD91  33                 	db	51	;'3'
   960  00FD92  20                 	db	32
   961  00FD93  20                 	db	32
   962  00FD94  20                 	db	32
   963  00FD95  20                 	db	32
   964  00FD96  20                 	db	32
   965  00FD97  20                 	db	32
   966  00FD98  20                 	db	32
   967  00FD99  20                 	db	32
   968  00FD9A  20                 	db	32
   969  00FD9B  20                 	db	32
   970  00FD9C  3C                 	db	60	;'<'
   971  00FD9D  00                 	db	0
   972  00FD9E                     STR_50:
   973  00FD9E  4C                 	db	76	;'L'
   974  00FD9F  4F                 	db	79	;'O'
   975  00FDA0  47                 	db	71	;'G'
   976  00FDA1  20                 	db	32
   977  00FDA2  34                 	db	52	;'4'
   978  00FDA3  20                 	db	32
   979  00FDA4  20                 	db	32
   980  00FDA5  20                 	db	32
   981  00FDA6  20                 	db	32
   982  00FDA7  20                 	db	32
   983  00FDA8  20                 	db	32
   984  00FDA9  20                 	db	32
   985  00FDAA  20                 	db	32
   986  00FDAB  20                 	db	32
   987  00FDAC  20                 	db	32
   988  00FDAD  3C                 	db	60	;'<'
   989  00FDAE  00                 	db	0
   990  00FDAF                     STR_38:
   991  00FDAF  33                 	db	51	;'3'
   992  00FDB0  2E                 	db	46
   993  00FDB1  20                 	db	32
   994  00FDB2  4C                 	db	76	;'L'
   995  00FDB3  4F                 	db	79	;'O'
   996  00FDB4  47                 	db	71	;'G'
   997  00FDB5  53                 	db	83	;'S'
   998  00FDB6  20                 	db	32
   999  00FDB7  20                 	db	32
  1000  00FDB8  20                 	db	32
  1001  00FDB9  20                 	db	32
  1002  00FDBA  20                 	db	32
  1003  00FDBB  20                 	db	32
  1004  00FDBC  20                 	db	32
  1005  00FDBD  20                 	db	32
  1006  00FDBE  3C                 	db	60	;'<'
  1007  00FDBF  00                 	db	0
  1008  00FDC0                     STR_34:
  1009  00FDC0  32                 	db	50	;'2'
  1010  00FDC1  2E                 	db	46
  1011  00FDC2  20                 	db	32
  1012  00FDC3  53                 	db	83	;'S'
  1013  00FDC4  4F                 	db	79	;'O'
  1014  00FDC5  52                 	db	82	;'R'
  1015  00FDC6  54                 	db	84	;'T'
  1016  00FDC7  20                 	db	32
  1017  00FDC8  20                 	db	32
  1018  00FDC9  20                 	db	32
  1019  00FDCA  20                 	db	32
  1020  00FDCB  20                 	db	32
  1021  00FDCC  20                 	db	32
  1022  00FDCD  20                 	db	32
  1023  00FDCE  20                 	db	32
  1024  00FDCF  3C                 	db	60	;'<'
  1025  00FDD0  00                 	db	0
  1026  00FDD1                     STR_31:
  1027  00FDD1  31                 	db	49	;'1'
  1028  00FDD2  2E                 	db	46
  1029  00FDD3  20                 	db	32
  1030  00FDD4  44                 	db	68	;'D'
  1031  00FDD5  41                 	db	65	;'A'
  1032  00FDD6  54                 	db	84	;'T'
  1033  00FDD7  45                 	db	69	;'E'
  1034  00FDD8  2F                 	db	47
  1035  00FDD9  54                 	db	84	;'T'
  1036  00FDDA  49                 	db	73	;'I'
  1037  00FDDB  4D                 	db	77	;'M'
  1038  00FDDC  45                 	db	69	;'E'
  1039  00FDDD  20                 	db	32
  1040  00FDDE  20                 	db	32
  1041  00FDDF  20                 	db	32
  1042  00FDE0  3C                 	db	60	;'<'
  1043  00FDE1  00                 	db	0
  1044  00FDE2                     STR_6:
  1045  00FDE2  50                 	db	80	;'P'
  1046  00FDE3  41                 	db	65	;'A'
  1047  00FDE4  55                 	db	85	;'U'
  1048  00FDE5  53                 	db	83	;'S'
  1049  00FDE6  45                 	db	69	;'E'
  1050  00FDE7  20                 	db	32
  1051  00FDE8  3C                 	db	60	;'<'
  1052  00FDE9  20                 	db	32
  1053  00FDEA  7C                 	db	124
  1054  00FDEB  20                 	db	32
  1055  00FDEC  42                 	db	66	;'B'
  1056  00FDED  41                 	db	65	;'A'
  1057  00FDEE  43                 	db	67	;'C'
  1058  00FDEF  4B                 	db	75	;'K'
  1059  00FDF0  20                 	db	32
  1060  00FDF1  3E                 	db	62	;'>'
  1061  00FDF2  00                 	db	0
  1062  00FDF3                     STR_30:
  1063  00FDF3  50                 	db	80	;'P'
  1064  00FDF4  55                 	db	85	;'U'
  1065  00FDF5  53                 	db	83	;'S'
  1066  00FDF6  48                 	db	72	;'H'
  1067  00FDF7  20                 	db	32
  1068  00FDF8  54                 	db	84	;'T'
  1069  00FDF9  4F                 	db	79	;'O'
  1070  00FDFA  20                 	db	32
  1071  00FDFB  43                 	db	67	;'C'
  1072  00FDFC  4F                 	db	79	;'O'
  1073  00FDFD  4E                 	db	78	;'N'
  1074  00FDFE  54                 	db	84	;'T'
  1075  00FDFF  49                 	db	73	;'I'
  1076  00FE00  4E                 	db	78	;'N'
  1077  00FE01  55                 	db	85	;'U'
  1078  00FE02  45                 	db	69	;'E'
  1079  00FE03  00                 	db	0
  1080  00FE04                     STR_27:
  1081  00FE04  4E                 	db	78	;'N'
  1082  00FE05  4C                 	db	76	;'L'
  1083  00FE06  41                 	db	65	;'A'
  1084  00FE07  42                 	db	66	;'B'
  1085  00FE08  3A                 	db	58	;':'
  1086  00FE09  20                 	db	32
  1087  00FE0A  25                 	db	37
  1088  00FE0B  64                 	db	100	;'d'
  1089  00FE0C  7C                 	db	124
  1090  00FE0D  4C                 	db	76	;'L'
  1091  00FE0E  41                 	db	65	;'A'
  1092  00FE0F  42                 	db	66	;'B'
  1093  00FE10  3A                 	db	58	;':'
  1094  00FE11  20                 	db	32
  1095  00FE12  25                 	db	37
  1096  00FE13  64                 	db	100	;'d'
  1097  00FE14  00                 	db	0
  1098  00FE15                     STR_25:
  1099  00FE15  4E                 	db	78	;'N'
  1100  00FE16  54                 	db	84	;'T'
  1101  00FE17  41                 	db	65	;'A'
  1102  00FE18  42                 	db	66	;'B'
  1103  00FE19  3A                 	db	58	;':'
  1104  00FE1A  20                 	db	32
  1105  00FE1B  25                 	db	37
  1106  00FE1C  64                 	db	100	;'d'
  1107  00FE1D  7C                 	db	124
  1108  00FE1E  54                 	db	84	;'T'
  1109  00FE1F  41                 	db	65	;'A'
  1110  00FE20  42                 	db	66	;'B'
  1111  00FE21  3A                 	db	58	;':'
  1112  00FE22  20                 	db	32
  1113  00FE23  25                 	db	37
  1114  00FE24  64                 	db	100	;'d'
  1115  00FE25  00                 	db	0
  1116  00FE26                     STR_84:
  1117  00FE26  4D                 	db	77	;'M'
  1118  00FE27  41                 	db	65	;'A'
  1119  00FE28  47                 	db	71	;'G'
  1120  00FE29  5F                 	db	95	;'_'
  1121  00FE2A  73                 	db	115	;'s'
  1122  00FE2B  69                 	db	105	;'i'
  1123  00FE2C  67                 	db	103	;'g'
  1124  00FE2D  6E                 	db	110	;'n'
  1125  00FE2E  61                 	db	97	;'a'
  1126  00FE2F  6C                 	db	108	;'l'
  1127  00FE30  3A                 	db	58	;':'
  1128  00FE31  20                 	db	32
  1129  00FE32  25                 	db	37
  1130  00FE33  64                 	db	100	;'d'
  1131  00FE34  20                 	db	32
  1132  00FE35  00                 	db	0
  1133  00FE36                     STR_104:
  1134  00FE36  54                 	db	84	;'T'
  1135  00FE37  53                 	db	83	;'S'
  1136  00FE38  54                 	db	84	;'T'
  1137  00FE39  3A                 	db	58	;':'
  1138  00FE3A  20                 	db	32
  1139  00FE3B  54                 	db	84	;'T'
  1140  00FE3C  49                 	db	73	;'I'
  1141  00FE3D  4C                 	db	76	;'L'
  1142  00FE3E  54                 	db	84	;'T'
  1143  00FE3F  20                 	db	32
  1144  00FE40  53                 	db	83	;'S'
  1145  00FE41  45                 	db	69	;'E'
  1146  00FE42  52                 	db	82	;'R'
  1147  00FE43  56                 	db	86	;'V'
  1148  00FE44  4F                 	db	79	;'O'
  1149  00FE45  00                 	db	0
  1150  00FE46                     STR_4:
  1151  00FE46  44                 	db	68	;'D'
  1152  00FE47  49                 	db	73	;'I'
  1153  00FE48  44                 	db	68	;'D'
  1154  00FE49  4E                 	db	78	;'N'
  1155  00FE4A  27                 	db	39
  1156  00FE4B  54                 	db	84	;'T'
  1157  00FE4C  20                 	db	32
  1158  00FE4D  43                 	db	67	;'C'
  1159  00FE4E  4F                 	db	79	;'O'
  1160  00FE4F  4D                 	db	77	;'M'
  1161  00FE50  50                 	db	80	;'P'
  1162  00FE51  4C                 	db	76	;'L'
  1163  00FE52  45                 	db	69	;'E'
  1164  00FE53  54                 	db	84	;'T'
  1165  00FE54  45                 	db	69	;'E'
  1166  00FE55  00                 	db	0
  1167  00FE56                     STR_81:
  1168  00FE56  49                 	db	73	;'I'
  1169  00FE57  52                 	db	82	;'R'
  1170  00FE58  5F                 	db	95	;'_'
  1171  00FE59  73                 	db	115	;'s'
  1172  00FE5A  69                 	db	105	;'i'
  1173  00FE5B  67                 	db	103	;'g'
  1174  00FE5C  6E                 	db	110	;'n'
  1175  00FE5D  61                 	db	97	;'a'
  1176  00FE5E  6C                 	db	108	;'l'
  1177  00FE5F  3A                 	db	58	;':'
  1178  00FE60  20                 	db	32
  1179  00FE61  25                 	db	37
  1180  00FE62  64                 	db	100	;'d'
  1181  00FE63  20                 	db	32
  1182  00FE64  00                 	db	0
  1183  00FE65                     STR_110:
  1184  00FE65  43                 	db	67	;'C'
  1185  00FE66  41                 	db	65	;'A'
  1186  00FE67  4D                 	db	77	;'M'
  1187  00FE68  20                 	db	32
  1188  00FE69  44                 	db	68	;'D'
  1189  00FE6A  57                 	db	87	;'W'
  1190  00FE6B  4E                 	db	78	;'N'
  1191  00FE6C  20                 	db	32
  1192  00FE6D  7C                 	db	124
  1193  00FE6E  52                 	db	82	;'R'
  1194  00FE6F  43                 	db	67	;'C'
  1195  00FE70  30                 	db	48	;'0'
  1196  00FE71  3D                 	db	61	;'='
  1197  00FE72  30                 	db	48	;'0'
  1198  00FE73  00                 	db	0
  1199  00FE74                     STR_109:
  1200  00FE74  43                 	db	67	;'C'
  1201  00FE75  41                 	db	65	;'A'
  1202  00FE76  4D                 	db	77	;'M'
  1203  00FE77  20                 	db	32
  1204  00FE78  55                 	db	85	;'U'
  1205  00FE79  50                 	db	80	;'P'
  1206  00FE7A  20                 	db	32
  1207  00FE7B  20                 	db	32
  1208  00FE7C  7C                 	db	124
  1209  00FE7D  52                 	db	82	;'R'
  1210  00FE7E  43                 	db	67	;'C'
  1211  00FE7F  30                 	db	48	;'0'
  1212  00FE80  3D                 	db	61	;'='
  1213  00FE81  31                 	db	49	;'1'
  1214  00FE82  00                 	db	0
  1215  00FE83                     STR_83:
  1216  00FE83  54                 	db	84	;'T'
  1217  00FE84  53                 	db	83	;'S'
  1218  00FE85  54                 	db	84	;'T'
  1219  00FE86  3A                 	db	58	;':'
  1220  00FE87  20                 	db	32
  1221  00FE88  4D                 	db	77	;'M'
  1222  00FE89  41                 	db	65	;'A'
  1223  00FE8A  47                 	db	71	;'G'
  1224  00FE8B  4E                 	db	78	;'N'
  1225  00FE8C  45                 	db	69	;'E'
  1226  00FE8D  54                 	db	84	;'T'
  1227  00FE8E  49                 	db	73	;'I'
  1228  00FE8F  53                 	db	83	;'S'
  1229  00FE90  4D                 	db	77	;'M'
  1230  00FE91  00                 	db	0
  1231  00FE92                     STR_108:
  1232  00FE92  54                 	db	84	;'T'
  1233  00FE93  53                 	db	83	;'S'
  1234  00FE94  54                 	db	84	;'T'
  1235  00FE95  3A                 	db	58	;':'
  1236  00FE96  20                 	db	32
  1237  00FE97  43                 	db	67	;'C'
  1238  00FE98  41                 	db	65	;'A'
  1239  00FE99  4D                 	db	77	;'M'
  1240  00FE9A  20                 	db	32
  1241  00FE9B  53                 	db	83	;'S'
  1242  00FE9C  45                 	db	69	;'E'
  1243  00FE9D  52                 	db	82	;'R'
  1244  00FE9E  56                 	db	86	;'V'
  1245  00FE9F  4F                 	db	79	;'O'
  1246  00FEA0  00                 	db	0
  1247  00FEA1                     STR_97:
  1248  00FEA1  54                 	db	84	;'T'
  1249  00FEA2  53                 	db	83	;'S'
  1250  00FEA3  54                 	db	84	;'T'
  1251  00FEA4  3A                 	db	58	;':'
  1252  00FEA5  20                 	db	32
  1253  00FEA6  50                 	db	80	;'P'
  1254  00FEA7  41                 	db	65	;'A'
  1255  00FEA8  4E                 	db	78	;'N'
  1256  00FEA9  20                 	db	32
  1257  00FEAA  53                 	db	83	;'S'
  1258  00FEAB  45                 	db	69	;'E'
  1259  00FEAC  52                 	db	82	;'R'
  1260  00FEAD  56                 	db	86	;'V'
  1261  00FEAE  4F                 	db	79	;'O'
  1262  00FEAF  00                 	db	0
  1263  00FEB0                     STR_76:
  1264  00FEB0  41                 	db	65	;'A'
  1265  00FEB1  4C                 	db	76	;'L'
  1266  00FEB2  47                 	db	71	;'G'
  1267  00FEB3  34                 	db	52	;'4'
  1268  00FEB4  3A                 	db	58	;':'
  1269  00FEB5  20                 	db	32
  1270  00FEB6  41                 	db	65	;'A'
  1271  00FEB7  4C                 	db	76	;'L'
  1272  00FEB8  4C                 	db	76	;'L'
  1273  00FEB9  20                 	db	32
  1274  00FEBA  43                 	db	67	;'C'
  1275  00FEBB  41                 	db	65	;'A'
  1276  00FEBC  4E                 	db	78	;'N'
  1277  00FEBD  53                 	db	83	;'S'
  1278  00FEBE  00                 	db	0
  1279  00FEBF                     STR_91:
  1280  00FEBF  54                 	db	84	;'T'
  1281  00FEC0  53                 	db	83	;'S'
  1282  00FEC1  54                 	db	84	;'T'
  1283  00FEC2  3A                 	db	58	;':'
  1284  00FEC3  20                 	db	32
  1285  00FEC4  44                 	db	68	;'D'
  1286  00FEC5  43                 	db	67	;'C'
  1287  00FEC6  20                 	db	32
  1288  00FEC7  4D                 	db	77	;'M'
  1289  00FEC8  4F                 	db	79	;'O'
  1290  00FEC9  54                 	db	84	;'T'
  1291  00FECA  4F                 	db	79	;'O'
  1292  00FECB  52                 	db	82	;'R'
  1293  00FECC  53                 	db	83	;'S'
  1294  00FECD  00                 	db	0
  1295  00FECE                     STR_71:
  1296  00FECE  41                 	db	65	;'A'
  1297  00FECF  4C                 	db	76	;'L'
  1298  00FED0  47                 	db	71	;'G'
  1299  00FED1  4F                 	db	79	;'O'
  1300  00FED2  52                 	db	82	;'R'
  1301  00FED3  49                 	db	73	;'I'
  1302  00FED4  54                 	db	84	;'T'
  1303  00FED5  48                 	db	72	;'H'
  1304  00FED6  4D                 	db	77	;'M'
  1305  00FED7  20                 	db	32
  1306  00FED8  54                 	db	84	;'T'
  1307  00FED9  45                 	db	69	;'E'
  1308  00FEDA  53                 	db	83	;'S'
  1309  00FEDB  54                 	db	84	;'T'
  1310  00FEDC  00                 	db	0
  1311  00FEDD                     STR_92:
  1312  00FEDD  50                 	db	80	;'P'
  1313  00FEDE  49                 	db	73	;'I'
  1314  00FEDF  4E                 	db	78	;'N'
  1315  00FEE0  20                 	db	32
  1316  00FEE1  52                 	db	82	;'R'
  1317  00FEE2  41                 	db	65	;'A'
  1318  00FEE3  35                 	db	53	;'5'
  1319  00FEE4  20                 	db	32
  1320  00FEE5  48                 	db	72	;'H'
  1321  00FEE6  49                 	db	73	;'I'
  1322  00FEE7  47                 	db	71	;'G'
  1323  00FEE8  48                 	db	72	;'H'
  1324  00FEE9  2E                 	db	46
  1325  00FEEA  00                 	db	0
  1326  00FEEB                     STR_74:
  1327  00FEEB  41                 	db	65	;'A'
  1328  00FEEC  4C                 	db	76	;'L'
  1329  00FEED  47                 	db	71	;'G'
  1330  00FEEE  32                 	db	50	;'2'
  1331  00FEEF  3A                 	db	58	;':'
  1332  00FEF0  20                 	db	32
  1333  00FEF1  31                 	db	49	;'1'
  1334  00FEF2  32                 	db	50	;'2'
  1335  00FEF3  20                 	db	32
  1336  00FEF4  43                 	db	67	;'C'
  1337  00FEF5  41                 	db	65	;'A'
  1338  00FEF6  4E                 	db	78	;'N'
  1339  00FEF7  53                 	db	83	;'S'
  1340  00FEF8  00                 	db	0
  1341  00FEF9                     STR_77:
  1342  00FEF9  41                 	db	65	;'A'
  1343  00FEFA  4C                 	db	76	;'L'
  1344  00FEFB  47                 	db	71	;'G'
  1345  00FEFC  35                 	db	53	;'5'
  1346  00FEFD  3A                 	db	58	;':'
  1347  00FEFE  20                 	db	32
  1348  00FEFF  4E                 	db	78	;'N'
  1349  00FF00  4F                 	db	79	;'O'
  1350  00FF01  20                 	db	32
  1351  00FF02  43                 	db	67	;'C'
  1352  00FF03  41                 	db	65	;'A'
  1353  00FF04  4E                 	db	78	;'N'
  1354  00FF05  53                 	db	83	;'S'
  1355  00FF06  00                 	db	0
  1356  00FF07                     STR_72:
  1357  00FF07  50                 	db	80	;'P'
  1358  00FF08  55                 	db	85	;'U'
  1359  00FF09  53                 	db	83	;'S'
  1360  00FF0A  48                 	db	72	;'H'
  1361  00FF0B  20                 	db	32
  1362  00FF0C  54                 	db	84	;'T'
  1363  00FF0D  4F                 	db	79	;'O'
  1364  00FF0E  20                 	db	32
  1365  00FF0F  53                 	db	83	;'S'
  1366  00FF10  54                 	db	84	;'T'
  1367  00FF11  41                 	db	65	;'A'
  1368  00FF12  52                 	db	82	;'R'
  1369  00FF13  54                 	db	84	;'T'
  1370  00FF14  00                 	db	0
  1371  00FF15                     STR_23:
  1372  00FF15  25                 	db	37
  1373  00FF16  64                 	db	100	;'d'
  1374  00FF17  20                 	db	32
  1375  00FF18  4D                 	db	77	;'M'
  1376  00FF19  49                 	db	73	;'I'
  1377  00FF1A  4E                 	db	78	;'N'
  1378  00FF1B  20                 	db	32
  1379  00FF1C  25                 	db	37
  1380  00FF1D  64                 	db	100	;'d'
  1381  00FF1E  20                 	db	32
  1382  00FF1F  53                 	db	83	;'S'
  1383  00FF20  45                 	db	69	;'E'
  1384  00FF21  43                 	db	67	;'C'
  1385  00FF22  00                 	db	0
  1386  00FF23                     STR_2:
  1387  00FF23  54                 	db	84	;'T'
  1388  00FF24  49                 	db	73	;'I'
  1389  00FF25  4D                 	db	77	;'M'
  1390  00FF26  45                 	db	69	;'E'
  1391  00FF27  3A                 	db	58	;':'
  1392  00FF28  20                 	db	32
  1393  00FF29  25                 	db	37
  1394  00FF2A  64                 	db	100	;'d'
  1395  00FF2B  3A                 	db	58	;':'
  1396  00FF2C  25                 	db	37
  1397  00FF2D  30                 	db	48	;'0'
  1398  00FF2E  32                 	db	50	;'2'
  1399  00FF2F  64                 	db	100	;'d'
  1400  00FF30  00                 	db	0
  1401  00FF31                     STR_80:
  1402  00FF31  54                 	db	84	;'T'
  1403  00FF32  53                 	db	83	;'S'
  1404  00FF33  54                 	db	84	;'T'
  1405  00FF34  3A                 	db	58	;':'
  1406  00FF35  20                 	db	32
  1407  00FF36  49                 	db	73	;'I'
  1408  00FF37  52                 	db	82	;'R'
  1409  00FF38  20                 	db	32
  1410  00FF39  53                 	db	83	;'S'
  1411  00FF3A  4E                 	db	78	;'N'
  1412  00FF3B  53                 	db	83	;'S'
  1413  00FF3C  52                 	db	82	;'R'
  1414  00FF3D  00                 	db	0
  1415  00FF3E                     STR_65:
  1416  00FF3E  54                 	db	84	;'T'
  1417  00FF3F  49                 	db	73	;'I'
  1418  00FF40  4D                 	db	77	;'M'
  1419  00FF41  45                 	db	69	;'E'
  1420  00FF42  20                 	db	32
  1421  00FF43  25                 	db	37
  1422  00FF44  64                 	db	100	;'d'
  1423  00FF45  3A                 	db	58	;':'
  1424  00FF46  25                 	db	37
  1425  00FF47  30                 	db	48	;'0'
  1426  00FF48  32                 	db	50	;'2'
  1427  00FF49  64                 	db	100	;'d'
  1428  00FF4A  00                 	db	0
  1429  00FF4B                     STR_75:
  1430  00FF4B  41                 	db	65	;'A'
  1431  00FF4C  4C                 	db	76	;'L'
  1432  00FF4D  47                 	db	71	;'G'
  1433  00FF4E  33                 	db	51	;'3'
  1434  00FF4F  3A                 	db	58	;':'
  1435  00FF50  20                 	db	32
  1436  00FF51  31                 	db	49	;'1'
  1437  00FF52  20                 	db	32
  1438  00FF53  43                 	db	67	;'C'
  1439  00FF54  41                 	db	65	;'A'
  1440  00FF55  4E                 	db	78	;'N'
  1441  00FF56  00                 	db	0
  1442  00FF57                     STR_94:
  1443  00FF57  50                 	db	80	;'P'
  1444  00FF58  49                 	db	73	;'I'
  1445  00FF59  4E                 	db	78	;'N'
  1446  00FF5A  20                 	db	32
  1447  00FF5B  52                 	db	82	;'R'
  1448  00FF5C  41                 	db	65	;'A'
  1449  00FF5D  33                 	db	51	;'3'
  1450  00FF5E  2E                 	db	46
  1451  00FF5F  2E                 	db	46
  1452  00FF60  2E                 	db	46
  1453  00FF61  00                 	db	0
  1454  00FF62                     STR_96:
  1455  00FF62  50                 	db	80	;'P'
  1456  00FF63  49                 	db	73	;'I'
  1457  00FF64  4E                 	db	78	;'N'
  1458  00FF65  20                 	db	32
  1459  00FF66  52                 	db	82	;'R'
  1460  00FF67  41                 	db	65	;'A'
  1461  00FF68  34                 	db	52	;'4'
  1462  00FF69  2E                 	db	46
  1463  00FF6A  2E                 	db	46
  1464  00FF6B  2E                 	db	46
  1465  00FF6C  00                 	db	0
  1466  00FF6D                     STR_114:
  1467  00FF6D  50                 	db	80	;'P'
  1468  00FF6E  55                 	db	85	;'U'
  1469  00FF6F  53                 	db	83	;'S'
  1470  00FF70  48                 	db	72	;'H'
  1471  00FF71  45                 	db	69	;'E'
  1472  00FF72  52                 	db	82	;'R'
  1473  00FF73  20                 	db	32
  1474  00FF74  54                 	db	84	;'T'
  1475  00FF75  53                 	db	83	;'S'
  1476  00FF76  54                 	db	84	;'T'
  1477  00FF77  00                 	db	0
  1478  00FF78                     STR_64:
  1479  00FF78  53                 	db	83	;'S'
  1480  00FF79  4F                 	db	79	;'O'
  1481  00FF7A  52                 	db	82	;'R'
  1482  00FF7B  54                 	db	84	;'T'
  1483  00FF7C  49                 	db	73	;'I'
  1484  00FF7D  4E                 	db	78	;'N'
  1485  00FF7E  47                 	db	71	;'G'
  1486  00FF7F  2E                 	db	46
  1487  00FF80  2E                 	db	46
  1488  00FF81  2E                 	db	46
  1489  00FF82  00                 	db	0
  1490  00FF83                     STR_85:
  1491  00FF83  54                 	db	84	;'T'
  1492  00FF84  53                 	db	83	;'S'
  1493  00FF85  54                 	db	84	;'T'
  1494  00FF86  3A                 	db	58	;':'
  1495  00FF87  20                 	db	32
  1496  00FF88  43                 	db	67	;'C'
  1497  00FF89  4F                 	db	79	;'O'
  1498  00FF8A  4E                 	db	78	;'N'
  1499  00FF8B  44                 	db	68	;'D'
  1500  00FF8C  00                 	db	0
  1501  00FF8D                     STR_89:
  1502  00FF8D  41                 	db	65	;'A'
  1503  00FF8E  43                 	db	67	;'C'
  1504  00FF8F  54                 	db	84	;'T'
  1505  00FF90  55                 	db	85	;'U'
  1506  00FF91  41                 	db	65	;'A'
  1507  00FF92  54                 	db	84	;'T'
  1508  00FF93  4F                 	db	79	;'O'
  1509  00FF94  52                 	db	82	;'R'
  1510  00FF95  53                 	db	83	;'S'
  1511  00FF96  00                 	db	0
  1512  00FF97                     STR_22:
  1513  00FF97  44                 	db	68	;'D'
  1514  00FF98  55                 	db	85	;'U'
  1515  00FF99  52                 	db	82	;'R'
  1516  00FF9A  41                 	db	65	;'A'
  1517  00FF9B  54                 	db	84	;'T'
  1518  00FF9C  49                 	db	73	;'I'
  1519  00FF9D  4F                 	db	79	;'O'
  1520  00FF9E  4E                 	db	78	;'N'
  1521  00FF9F  3A                 	db	58	;':'
  1522  00FFA0  00                 	db	0
  1523  00FFA1                     STR_87:
  1524  00FFA1  43                 	db	67	;'C'
  1525  00FFA2  4F                 	db	79	;'O'
  1526  00FFA3  4E                 	db	78	;'N'
  1527  00FFA4  44                 	db	68	;'D'
  1528  00FFA5  3A                 	db	58	;':'
  1529  00FFA6  20                 	db	32
  1530  00FFA7  25                 	db	37
  1531  00FFA8  64                 	db	100	;'d'
  1532  00FFA9  00                 	db	0
  1533  00FFAA                     STR_78:
  1534  00FFAA  53                 	db	83	;'S'
  1535  00FFAB  45                 	db	69	;'E'
  1536  00FFAC  4E                 	db	78	;'N'
  1537  00FFAD  53                 	db	83	;'S'
  1538  00FFAE  4F                 	db	79	;'O'
  1539  00FFAF  52                 	db	82	;'R'
  1540  00FFB0  53                 	db	83	;'S'
  1541  00FFB1  00                 	db	0
  1542  00FFB2                     STR_127:
  1543  00FFB2  28                 	db	40
  1544  00FFB3  6E                 	db	110	;'n'
  1545  00FFB4  75                 	db	117	;'u'
  1546  00FFB5  6C                 	db	108	;'l'
  1547  00FFB6  6C                 	db	108	;'l'
  1548  00FFB7  29                 	db	41
  1549  00FFB8  00                 	db	0
  1550  00FFB9                     STR_68:
  1551  00FFB9  46                 	db	70	;'F'
  1552  00FFBA  41                 	db	65	;'A'
  1553  00FFBB  49                 	db	73	;'I'
  1554  00FFBC  4C                 	db	76	;'L'
  1555  00FFBD  45                 	db	69	;'E'
  1556  00FFBE  44                 	db	68	;'D'
  1557  00FFBF  00                 	db	0
  1558  00FFC0                     STR_7:
  1559  00FFC0  53                 	db	83	;'S'
  1560  00FFC1  54                 	db	84	;'T'
  1561  00FFC2  41                 	db	65	;'A'
  1562  00FFC3  52                 	db	82	;'R'
  1563  00FFC4  54                 	db	84	;'T'
  1564  00FFC5  3A                 	db	58	;':'
  1565  00FFC6  00                 	db	0
  1566  00FFC7                     STR_66:
  1567  00FFC7  45                 	db	69	;'E'
  1568  00FFC8  4E                 	db	78	;'N'
  1569  00FFC9  54                 	db	84	;'T'
  1570  00FFCA  00                 	db	0
  1571  00FFCB                     STR_9:
  1572  00FFCB  46                 	db	70	;'F'
  1573  00FFCC  45                 	db	69	;'E'
  1574  00FFCD  42                 	db	66	;'B'
  1575  00FFCE  00                 	db	0
  1576  00FFCF                     STR_19:
  1577  00FFCF  44                 	db	68	;'D'
  1578  00FFD0  45                 	db	69	;'E'
  1579  00FFD1  43                 	db	67	;'C'
  1580  00FFD2  00                 	db	0
  1581  00FFD3                     STR_15:
  1582  00FFD3  41                 	db	65	;'A'
  1583  00FFD4  55                 	db	85	;'U'
  1584  00FFD5  47                 	db	71	;'G'
  1585  00FFD6  00                 	db	0
  1586  00FFD7                     STR_14:
  1587  00FFD7  4A                 	db	74	;'J'
  1588  00FFD8  55                 	db	85	;'U'
  1589  00FFD9  4C                 	db	76	;'L'
  1590  00FFDA  00                 	db	0
  1591  00FFDB                     STR_8:
  1592  00FFDB  4A                 	db	74	;'J'
  1593  00FFDC  41                 	db	65	;'A'
  1594  00FFDD  4E                 	db	78	;'N'
  1595  00FFDE  00                 	db	0
  1596  00FFDF                     STR_13:
  1597  00FFDF  4A                 	db	74	;'J'
  1598  00FFE0  55                 	db	85	;'U'
  1599  00FFE1  4E                 	db	78	;'N'
  1600  00FFE2  00                 	db	0
  1601  00FFE3                     STR_16:
  1602  00FFE3  53                 	db	83	;'S'
  1603  00FFE4  45                 	db	69	;'E'
  1604  00FFE5  50                 	db	80	;'P'
  1605  00FFE6  00                 	db	0
  1606  00FFE7                     STR_10:
  1607  00FFE7  4D                 	db	77	;'M'
  1608  00FFE8  41                 	db	65	;'A'
  1609  00FFE9  52                 	db	82	;'R'
  1610  00FFEA  00                 	db	0
  1611  00FFEB                     STR_11:
  1612  00FFEB  41                 	db	65	;'A'
  1613  00FFEC  50                 	db	80	;'P'
  1614  00FFED  52                 	db	82	;'R'
  1615  00FFEE  00                 	db	0
  1616  00FFEF                     STR_20:
  1617  00FFEF  45                 	db	69	;'E'
  1618  00FFF0  52                 	db	82	;'R'
  1619  00FFF1  52                 	db	82	;'R'
  1620  00FFF2  00                 	db	0
  1621  00FFF3                     STR_17:
  1622  00FFF3  4F                 	db	79	;'O'
  1623  00FFF4  43                 	db	67	;'C'
  1624  00FFF5  54                 	db	84	;'T'
  1625  00FFF6  00                 	db	0
  1626  00FFF7                     STR_18:
  1627  00FFF7  4E                 	db	78	;'N'
  1628  00FFF8  4F                 	db	79	;'O'
  1629  00FFF9  56                 	db	86	;'V'
  1630  00FFFA  00                 	db	0
  1631  00FFFB                     STR_12:
  1632  00FFFB  4D                 	db	77	;'M'
  1633  00FFFC  41                 	db	65	;'A'
  1634  00FFFD  59                 	db	89	;'Y'
  1635  00FFFE  00                 	db	0
  1636  0000                     
  1637                           ; #config settings
  1638  00FFFF  00                 	db	0	; dummy byte at the end
  1639  0000                     
  1640                           	psect	cinit
  1641  004B92                     __pcinit:
  1642                           	opt stack 0
  1643  004B92                     start_initialization:
  1644                           	opt stack 0
  1645  004B92                     __initialization:
  1646                           	opt stack 0
  1647                           
  1648                           ; Initialize objects allocated to BANK1 (8 bytes)
  1649                           ; load TBLPTR registers with __pidataBANK1
  1650  004B92  0EF6               	movlw	low __pidataBANK1
  1651  004B94  6EF6               	movwf	tblptrl,c
  1652  004B96  0E52               	movlw	high __pidataBANK1
  1653  004B98  6EF7               	movwf	tblptrh,c
  1654  004B9A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1655  004B9C  6EF8               	movwf	tblptru,c
  1656  004B9E  EE01  F041         	lfsr	0,__pdataBANK1
  1657  004BA2  EE10 F008          	lfsr	1,8
  1658  004BA6                     copy_data0:
  1659  004BA6  0009               	tblrd		*+
  1660  004BA8  CFF5 FFEE          	movff	tablat,postinc0
  1661  004BAC  50E5               	movf	postdec1,w,c
  1662  004BAE  50E1               	movf	fsr1l,w,c
  1663  004BB0  E1FA               	bnz	copy_data0
  1664                           
  1665                           ; Clear objects allocated to BANK1 (65 bytes)
  1666  004BB2  EE01  F000         	lfsr	0,__pbssBANK1
  1667  004BB6  0E41               	movlw	65
  1668  004BB8                     clear_0:
  1669  004BB8  6AEE               	clrf	postinc0,c
  1670  004BBA  06E8               	decf	wreg,f,c
  1671  004BBC  E1FD               	bnz	clear_0
  1672                           
  1673                           ; Clear objects allocated to BANK0 (38 bytes)
  1674  004BBE  EE00  F0DA         	lfsr	0,__pbssBANK0
  1675  004BC2  0E26               	movlw	38
  1676  004BC4                     clear_1:
  1677  004BC4  6AEE               	clrf	postinc0,c
  1678  004BC6  06E8               	decf	wreg,f,c
  1679  004BC8  E1FD               	bnz	clear_1
  1680                           
  1681                           ; Clear objects allocated to COMRAM (35 bytes)
  1682  004BCA  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1683  004BCE  0E23               	movlw	35
  1684  004BD0                     clear_2:
  1685  004BD0  6AEE               	clrf	postinc0,c
  1686  004BD2  06E8               	decf	wreg,f,c
  1687  004BD4  E1FD               	bnz	clear_2
  1688  004BD6                     end_of_initialization:
  1689                           	opt stack 0
  1690  004BD6                     __end_of__initialization:
  1691                           	opt stack 0
  1692  004BD6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1693  004BD8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1694  004BDA  0100               	movlb	0
  1695  004BDC  EF06  F020         	goto	_main	;jump to C main() function
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1l	equ	0xFE1
  1704                           
  1705                           	psect	bssCOMRAM
  1706  00005B                     __pbssCOMRAM:
  1707                           	opt stack 0
  1708  00005B                     _back:
  1709                           	opt stack 0
  1710  00005B                     	ds	2
  1711  00005D                     _down:
  1712                           	opt stack 0
  1713  00005D                     	ds	2
  1714  00005F                     _enter:
  1715                           	opt stack 0
  1716  00005F                     	ds	2
  1717  000061                     _f_panning_to_bin:
  1718                           	opt stack 0
  1719  000061                     	ds	2
  1720  000063                     _log_completion:
  1721                           	opt stack 0
  1722  000063                     	ds	2
  1723  000065                     _log_count_can_no_lab:
  1724                           	opt stack 0
  1725  000065                     	ds	2
  1726  000067                     _log_count_can_w_lab:
  1727                           	opt stack 0
  1728  000067                     	ds	2
  1729  000069                     _log_count_pop_no_tab:
  1730                           	opt stack 0
  1731  000069                     	ds	2
  1732  00006B                     _log_count_pop_w_tab:
  1733                           	opt stack 0
  1734  00006B                     	ds	2
  1735  00006D                     _most_recent_sort_time:
  1736                           	opt stack 0
  1737  00006D                     	ds	2
  1738  00006F                     _pan_servo_state:
  1739                           	opt stack 0
  1740  00006F                     	ds	2
  1741  000071                     _servo_timer_counter:
  1742                           	opt stack 0
  1743  000071                     	ds	2
  1744  000073                     _servo_timer_target:
  1745                           	opt stack 0
  1746  000073                     	ds	2
  1747  000075                     _tilt_servo_state:
  1748                           	opt stack 0
  1749  000075                     	ds	2
  1750  000077                     _up:
  1751                           	opt stack 0
  1752  000077                     	ds	2
  1753  000079                     _was_low_1:
  1754                           	opt stack 0
  1755  000079                     	ds	2
  1756  00007B                     _was_low_3:
  1757                           	opt stack 0
  1758  00007B                     	ds	2
  1759  00007D                     _input:
  1760                           	opt stack 0
  1761  00007D                     	ds	1
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	bssBANK0
  1772  0000DA                     __pbssBANK0:
  1773                           	opt stack 0
  1774  0000DA                     _servoTimes:
  1775                           	opt stack 0
  1776  0000DA                     	ds	8
  1777  0000E2                     _sensor_outputs:
  1778                           	opt stack 0
  1779  0000E2                     	ds	4
  1780  0000E6                     _IR_signal:
  1781                           	opt stack 0
  1782  0000E6                     	ds	2
  1783  0000E8                     _MAG_signal:
  1784                           	opt stack 0
  1785  0000E8                     	ds	2
  1786  0000EA                     _RTCflag:
  1787                           	opt stack 0
  1788  0000EA                     	ds	2
  1789  0000EC                     _cur_state:
  1790                           	opt stack 0
  1791  0000EC                     	ds	2
  1792  0000EE                     _f_lastCan:
  1793                           	opt stack 0
  1794  0000EE                     	ds	2
  1795  0000F0                     _f_loadingNewCan:
  1796                           	opt stack 0
  1797  0000F0                     	ds	2
  1798  0000F2                     _log:
  1799                           	opt stack 0
  1800  0000F2                     	ds	2
  1801  0000F4                     _log_total_time:
  1802                           	opt stack 0
  1803  0000F4                     	ds	2
  1804  0000F6                     _logstate:
  1805                           	opt stack 0
  1806  0000F6                     	ds	2
  1807  0000F8                     _total_time:
  1808                           	opt stack 0
  1809  0000F8                     	ds	2
  1810  0000FA                     _var:
  1811                           	opt stack 0
  1812  0000FA                     	ds	2
  1813  0000FC                     _machine_state:
  1814                           	opt stack 0
  1815  0000FC                     	ds	1
  1816  0000FD                     _sel:
  1817                           	opt stack 0
  1818  0000FD                     	ds	1
  1819  0000FE                     _count_total:
  1820                           	opt stack 0
  1821  0000FE                     	ds	2
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           
  1831                           	psect	bssBANK1
  1832  000100                     __pbssBANK1:
  1833                           	opt stack 0
  1834  000100                     _log_startTime:
  1835                           	opt stack 0
  1836  000100                     	ds	14
  1837  00010E                     _startTime:
  1838                           	opt stack 0
  1839  00010E                     	ds	14
  1840  00011C                     _time:
  1841                           	opt stack 0
  1842  00011C                     	ds	7
  1843  000123                     _count_can_no_lab:
  1844                           	opt stack 0
  1845  000123                     	ds	2
  1846  000125                     _count_can_w_lab:
  1847                           	opt stack 0
  1848  000125                     	ds	2
  1849  000127                     _count_pop_no_tab:
  1850                           	opt stack 0
  1851  000127                     	ds	2
  1852  000129                     _count_pop_w_tab:
  1853                           	opt stack 0
  1854  000129                     	ds	2
  1855  00012B                     _cur_can:
  1856                           	opt stack 0
  1857  00012B                     	ds	2
  1858  00012D                     _debug:
  1859                           	opt stack 0
  1860  00012D                     	ds	2
  1861  00012F                     _f_ID_receive:
  1862                           	opt stack 0
  1863  00012F                     	ds	2
  1864  000131                     _f_can_coming_to_ID:
  1865                           	opt stack 0
  1866  000131                     	ds	2
  1867  000133                     _f_can_coming_to_distribution:
  1868                           	opt stack 0
  1869  000133                     	ds	2
  1870  000135                     _f_can_distributed:
  1871                           	opt stack 0
  1872  000135                     	ds	2
  1873  000137                     _f_most_recent_sort_time:
  1874                           	opt stack 0
  1875  000137                     	ds	2
  1876  000139                     _first:
  1877                           	opt stack 0
  1878  000139                     	ds	2
  1879  00013B                     _firstboot:
  1880                           	opt stack 0
  1881  00013B                     	ds	2
  1882  00013D                     _i:
  1883                           	opt stack 0
  1884  00013D                     	ds	2
  1885  00013F                     _log_count_total:
  1886                           	opt stack 0
  1887  00013F                     	ds	2
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           
  1897                           	psect	dataBANK1
  1898  000141                     __pdataBANK1:
  1899                           	opt stack 0
  1900  000141                     UI@F3235:
  1901                           	opt stack 0
  1902  000141                     	ds	4
  1903  000145                     printRTC@F3226:
  1904                           	opt stack 0
  1905  000145                     	ds	4
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1l	equ	0xFE1
  1914                           
  1915                           	psect	cstackBANK0
  1916  000080                     __pcstackBANK0:
  1917                           	opt stack 0
  1918  000080                     ??_delay_ms:
  1919  000080                     ??_PortTests:
  1920  000080                     ??_isdigit:
  1921  000080                     ??_readADC:
  1922  000080                     ??_I2C_Master_Wait:
  1923  000080                     ?___wmul:
  1924                           	opt stack 0
  1925  000080                     ?___awmod:
  1926                           	opt stack 0
  1927  000080                     ?___lwdiv:
  1928                           	opt stack 0
  1929  000080                     ?___lldiv:
  1930                           	opt stack 0
  1931  000080                     lcdNibble@temp:
  1932                           	opt stack 0
  1933  000080                     initTime@m:
  1934                           	opt stack 0
  1935  000080                     updateServoPosition@time_us:
  1936                           	opt stack 0
  1937  000080                     EEPROM_read@address:
  1938                           	opt stack 0
  1939  000080                     ___wmul@multiplier:
  1940                           	opt stack 0
  1941  000080                     ___awmod@dividend:
  1942                           	opt stack 0
  1943  000080                     ___lwdiv@dividend:
  1944                           	opt stack 0
  1945  000080                     strcpy@to:
  1946                           	opt stack 0
  1947  000080                     ___lldiv@dividend:
  1948                           	opt stack 0
  1949                           
  1950                           ; 4 bytes @ 0x0
  1951  000080                     	ds	1
  1952  000081                     readADC@channel:
  1953                           	opt stack 0
  1954  000081                     I2C_Master_Read@a:
  1955                           	opt stack 0
  1956  000081                     lcdNibble@data:
  1957                           	opt stack 0
  1958  000081                     initTime@h:
  1959                           	opt stack 0
  1960  000081                     delay_ms@milliseconds:
  1961                           	opt stack 0
  1962  000081                     _isdigit$2058:
  1963                           	opt stack 0
  1964  000081                     I2C_Master_Write@d:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x1
  1968  000081                     	ds	1
  1969  000082                     ??_ID:
  1970  000082                     ??_readIR:
  1971  000082                     ??_readMAG:
  1972  000082                     I2C_Master_Read@temp:
  1973                           	opt stack 0
  1974  000082                     lcdInst@data:
  1975                           	opt stack 0
  1976  000082                     putch@data:
  1977                           	opt stack 0
  1978  000082                     initTime@w:
  1979                           	opt stack 0
  1980  000082                     isdigit@c:
  1981                           	opt stack 0
  1982  000082                     updateServoPosition@timer:
  1983                           	opt stack 0
  1984  000082                     ___wmul@multiplicand:
  1985                           	opt stack 0
  1986  000082                     ___awmod@divisor:
  1987                           	opt stack 0
  1988  000082                     ___lwdiv@divisor:
  1989                           	opt stack 0
  1990  000082                     strcpy@from:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x2
  1994  000082                     	ds	1
  1995  000083                     ??_initLCD:
  1996  000083                     initTime@DD:
  1997                           	opt stack 0
  1998  000083                     getRTC@i:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x3
  2002  000083                     	ds	1
  2003  000084                     ??_updateServoPosition:
  2004  000084                     initTime@MM:
  2005                           	opt stack 0
  2006  000084                     ___awmod@counter:
  2007                           	opt stack 0
  2008  000084                     readIR@res:
  2009                           	opt stack 0
  2010  000084                     readMAG@res:
  2011                           	opt stack 0
  2012  000084                     ID@i:
  2013                           	opt stack 0
  2014  000084                     ___wmul@product:
  2015                           	opt stack 0
  2016  000084                     ___lwdiv@quotient:
  2017                           	opt stack 0
  2018  000084                     strcpy@cp:
  2019                           	opt stack 0
  2020  000084                     ___lldiv@divisor:
  2021                           	opt stack 0
  2022                           
  2023                           ; 4 bytes @ 0x4
  2024  000084                     	ds	1
  2025  000085                     ??_initSortTimer:
  2026  000085                     initTime@YY:
  2027                           	opt stack 0
  2028  000085                     ___awmod@sign:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x5
  2032  000085                     	ds	1
  2033  000086                     ??_getIR:
  2034  000086                     ??_getMAG:
  2035  000086                     ?___awdiv:
  2036                           	opt stack 0
  2037  000086                     initTime@s:
  2038                           	opt stack 0
  2039  000086                     ___lwdiv@counter:
  2040                           	opt stack 0
  2041  000086                     ID@i_1173:
  2042                           	opt stack 0
  2043  000086                     updateServoPosition@my_time:
  2044                           	opt stack 0
  2045  000086                     ___awdiv@dividend:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x6
  2049  000086                     	ds	1
  2050  000087                     ?___lwmod:
  2051                           	opt stack 0
  2052  000087                     getIR@i:
  2053                           	opt stack 0
  2054  000087                     ___lwmod@dividend:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x7
  2058  000087                     	ds	1
  2059  000088                     ??_Distribution:
  2060  000088                     ??_initServos:
  2061  000088                     initSortTimer@i:
  2062                           	opt stack 0
  2063  000088                     ___awdiv@divisor:
  2064                           	opt stack 0
  2065  000088                     ___lldiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 4 bytes @ 0x8
  2069  000088                     	ds	1
  2070  000089                     ___lwmod@divisor:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x9
  2074  000089                     	ds	1
  2075  00008A                     ___awdiv@counter:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0xA
  2079  00008A                     	ds	1
  2080  00008B                     ___awdiv@sign:
  2081                           	opt stack 0
  2082  00008B                     ___lwmod@counter:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0xB
  2086  00008B                     	ds	1
  2087  00008C                     ___lldiv@counter:
  2088                           	opt stack 0
  2089  00008C                     ___awdiv@quotient:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0xC
  2093  00008C                     	ds	1
  2094  00008D                     I2C_Master_Init@c:
  2095                           	opt stack 0
  2096                           
  2097                           ; 4 bytes @ 0xD
  2098  00008D                     	ds	1
  2099  00008E                     ?_printf:
  2100                           	opt stack 0
  2101  00008E                     printf@f:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0xE
  2105  00008E                     	ds	3
  2106  000091                     ??_I2C_Master_Init:
  2107                           
  2108                           ; 1 bytes @ 0x11
  2109  000091                     	ds	4
  2110  000095                     ??_loadRTC:
  2111                           
  2112                           ; 1 bytes @ 0x15
  2113  000095                     	ds	1
  2114  000096                     loadRTC@i:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x16
  2118  000096                     	ds	4
  2119  00009A                     ??_printf:
  2120                           
  2121                           ; 1 bytes @ 0x1A
  2122  00009A                     	ds	4
  2123  00009E                     printf@prec:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x1E
  2127  00009E                     	ds	1
  2128  00009F                     printf@cp:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x1F
  2132  00009F                     	ds	2
  2133  0000A1                     printf@ap:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x21
  2137  0000A1                     	ds	2
  2138  0000A3                     printf@len:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x23
  2142  0000A3                     	ds	2
  2143  0000A5                     printf@val:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x25
  2147  0000A5                     	ds	2
  2148  0000A7                     printf@flag:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x27
  2152  0000A7                     	ds	1
  2153  0000A8                     printf@c:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x28
  2157  0000A8                     	ds	1
  2158  0000A9                     printf@width:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x29
  2162  0000A9                     	ds	2
  2163  0000AB                     ??_printRTC:
  2164  0000AB                     ??_algorithmTest:
  2165  0000AB                     ??_sensorTest:
  2166  0000AB                     ??_actuatorTest:
  2167  0000AB                     ??_PortTestA5:
  2168  0000AB                     ??_SpeedTest:
  2169  0000AB                     ??_PusherTest:
  2170  0000AB                     ??_BothServos:
  2171  0000AB                     ??_BlockerTest:
  2172  0000AB                     EEPROM_write@address:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x2B
  2176  0000AB                     	ds	1
  2177  0000AC                     BlockerTest@i:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x2C
  2181  0000AC                     	ds	1
  2182  0000AD                     EEPROM_write@data:
  2183                           	opt stack 0
  2184  0000AD                     actuatorTest@i_1734:
  2185                           	opt stack 0
  2186  0000AD                     sensorTest@res:
  2187                           	opt stack 0
  2188  0000AD                     PusherTest@res:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x2D
  2192  0000AD                     	ds	1
  2193  0000AE                     ??_EEPROM_write:
  2194  0000AE                     actuatorTest@i_1741:
  2195                           	opt stack 0
  2196  0000AE                     BlockerTest@cam_flag:
  2197                           	opt stack 0
  2198  0000AE                     printRTC@INT_time:
  2199                           	opt stack 0
  2200                           
  2201                           ; 14 bytes @ 0x2E
  2202  0000AE                     	ds	1
  2203  0000AF                     EEPROM_write@i:
  2204                           	opt stack 0
  2205  0000AF                     actuatorTest@i_1742:
  2206                           	opt stack 0
  2207  0000AF                     PusherTest@res_1789:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x2F
  2211  0000AF                     	ds	1
  2212  0000B0                     EEPROM_write@i_1398:
  2213                           	opt stack 0
  2214  0000B0                     actuatorTest@i_1744:
  2215                           	opt stack 0
  2216  0000B0                     BlockerTest@cond_flag:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x30
  2220  0000B0                     	ds	1
  2221  0000B1                     ??_Loading:
  2222  0000B1                     logRun@num:
  2223                           	opt stack 0
  2224  0000B1                     actuatorTest@i_1745:
  2225                           	opt stack 0
  2226  0000B1                     PusherTest@i:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x31
  2230  0000B1                     	ds	1
  2231  0000B2                     logRun@byte1:
  2232                           	opt stack 0
  2233  0000B2                     actuatorTest@i_1747:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x32
  2237  0000B2                     	ds	1
  2238  0000B3                     logRun@byte2:
  2239                           	opt stack 0
  2240  0000B3                     actuatorTest@i_1748:
  2241                           	opt stack 0
  2242  0000B3                     Loading@addr:
  2243                           	opt stack 0
  2244  0000B3                     PusherTest@i_1793:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x33
  2248  0000B3                     	ds	1
  2249  0000B4                     logRun@byte3:
  2250                           	opt stack 0
  2251  0000B4                     actuatorTest@i_1750:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x34
  2255  0000B4                     	ds	1
  2256  0000B5                     Loading@byte1:
  2257                           	opt stack 0
  2258  0000B5                     logRun@byte_i:
  2259                           	opt stack 0
  2260  0000B5                     actuatorTest@i_1751:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x35
  2264  0000B5                     	ds	1
  2265  0000B6                     logRun@byte11:
  2266                           	opt stack 0
  2267  0000B6                     actuatorTest@i_1753:
  2268                           	opt stack 0
  2269  0000B6                     Loading@i_1148:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x36
  2273  0000B6                     	ds	1
  2274  0000B7                     actuatorTest@i_1754:
  2275                           	opt stack 0
  2276  0000B7                     logRun@i:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x37
  2280  0000B7                     	ds	1
  2281  0000B8                     actuatorTest@i_1756:
  2282                           	opt stack 0
  2283  0000B8                     Loading@i_1157:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x38
  2287  0000B8                     	ds	1
  2288  0000B9                     actuatorTest@i_1757:
  2289                           	opt stack 0
  2290  0000B9                     logRun@addr:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x39
  2294  0000B9                     	ds	1
  2295  0000BA                     actuatorTest@i_1760:
  2296                           	opt stack 0
  2297  0000BA                     Loading@i_1159:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x3A
  2301  0000BA                     	ds	1
  2302  0000BB                     actuatorTest@i_1761:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x3B
  2306  0000BB                     	ds	1
  2307  0000BC                     actuatorTest@i_1763:
  2308                           	opt stack 0
  2309  0000BC                     printRTC@RTC_month:
  2310                           	opt stack 0
  2311  0000BC                     Loading@i_1160:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x3C
  2315  0000BC                     	ds	1
  2316  0000BD                     actuatorTest@i_1764:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x3D
  2320  0000BD                     	ds	1
  2321  0000BE                     actuatorTest@i_1766:
  2322                           	opt stack 0
  2323  0000BE                     Loading@i_1162:
  2324                           	opt stack 0
  2325  0000BE                     printRTC@month:
  2326                           	opt stack 0
  2327                           
  2328                           ; 4 bytes @ 0x3E
  2329  0000BE                     	ds	1
  2330  0000BF                     actuatorTest@i_1767:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x3F
  2334  0000BF                     	ds	1
  2335  0000C0                     actuatorTest@i_1770:
  2336                           	opt stack 0
  2337  0000C0                     Loading@j:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x40
  2341  0000C0                     	ds	1
  2342  0000C1                     actuatorTest@i_1771:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x41
  2346  0000C1                     	ds	1
  2347  0000C2                     actuatorTest@i_1773:
  2348                           	opt stack 0
  2349  0000C2                     printRTC@i:
  2350                           	opt stack 0
  2351  0000C2                     Loading@i:
  2352                           	opt stack 0
  2353                           
  2354                           ; 2 bytes @ 0x42
  2355  0000C2                     	ds	1
  2356  0000C3                     actuatorTest@i_1774:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x43
  2360  0000C3                     	ds	1
  2361  0000C4                     ??_UI:
  2362  0000C4                     actuatorTest@i:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x44
  2366  0000C4                     	ds	2
  2367  0000C6                     ??_Test:
  2368  0000C6                     _UI$2416:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x46
  2372  0000C6                     	ds	2
  2373  0000C8                     UI@i:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x48
  2377  0000C8                     	ds	1
  2378  0000C9                     UI@i_409:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x49
  2382  0000C9                     	ds	1
  2383  0000CA                     UI@i_412:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x4A
  2387  0000CA                     	ds	1
  2388  0000CB                     UI@i_413:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x4B
  2392  0000CB                     	ds	1
  2393  0000CC                     UI@i_431:
  2394                           	opt stack 0
  2395                           
  2396                           ; 1 bytes @ 0x4C
  2397  0000CC                     	ds	1
  2398  0000CD                     UI@i_432:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x4D
  2402  0000CD                     	ds	1
  2403  0000CE                     UI@i_435:
  2404                           	opt stack 0
  2405                           
  2406                           ; 1 bytes @ 0x4E
  2407  0000CE                     	ds	1
  2408  0000CF                     UI@i_436:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0x4F
  2412  0000CF                     	ds	1
  2413  0000D0                     UI@i_439:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x50
  2417  0000D0                     	ds	1
  2418  0000D1                     UI@i_440:
  2419                           	opt stack 0
  2420                           
  2421                           ; 1 bytes @ 0x51
  2422  0000D1                     	ds	1
  2423  0000D2                     UI@i_443:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x52
  2427  0000D2                     	ds	1
  2428  0000D3                     UI@i_444:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x53
  2432  0000D3                     	ds	1
  2433  0000D4                     UI@i_447:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0x54
  2437  0000D4                     	ds	1
  2438  0000D5                     UI@i_448:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x55
  2442  0000D5                     	ds	1
  2443  0000D6                     UI@month:
  2444                           	opt stack 0
  2445                           
  2446                           ; 4 bytes @ 0x56
  2447  0000D6                     	ds	4
  2448  0000DA                     tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           
  2457                           ; 1 bytes @ 0x5A
  2458                           
  2459                           	psect	cstackCOMRAM
  2460  000001                     __pcstackCOMRAM:
  2461                           	opt stack 0
  2462  000001                     ??i2_I2C_Master_Wait:
  2463  000001                     ??i2_delay_ms:
  2464  000001                     ??i2_isdigit:
  2465  000001                     ?i2___wmul:
  2466                           	opt stack 0
  2467  000001                     ?i2___lwmod:
  2468                           	opt stack 0
  2469  000001                     i2lcdNibble@temp:
  2470                           	opt stack 0
  2471  000001                     i2updateServoPosition@time_us:
  2472                           	opt stack 0
  2473  000001                     i2EEPROM_read@address:
  2474                           	opt stack 0
  2475  000001                     i2___wmul@multiplier:
  2476                           	opt stack 0
  2477  000001                     i2___lwmod@dividend:
  2478                           	opt stack 0
  2479  000001                     i2strcpy@to:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x0
  2483  000001                     	ds	1
  2484  000002                     i2I2C_Master_Read@a:
  2485                           	opt stack 0
  2486  000002                     i2lcdNibble@data:
  2487                           	opt stack 0
  2488  000002                     i2delay_ms@milliseconds:
  2489                           	opt stack 0
  2490  000002                     i2_isdigit$2058:
  2491                           	opt stack 0
  2492  000002                     i2I2C_Master_Write@d:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x1
  2496  000002                     	ds	1
  2497  000003                     i2I2C_Master_Read@temp:
  2498                           	opt stack 0
  2499  000003                     i2lcdInst@data:
  2500                           	opt stack 0
  2501  000003                     i2putch@data:
  2502                           	opt stack 0
  2503  000003                     i2isdigit@c:
  2504                           	opt stack 0
  2505  000003                     i2updateServoPosition@timer:
  2506                           	opt stack 0
  2507  000003                     i2___wmul@multiplicand:
  2508                           	opt stack 0
  2509  000003                     i2___lwmod@divisor:
  2510                           	opt stack 0
  2511  000003                     i2strcpy@from:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x2
  2515  000003                     	ds	1
  2516  000004                     i2getRTC@i:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x3
  2520  000004                     	ds	1
  2521  000005                     ??i2_updateServoPosition:
  2522  000005                     i2___lwmod@counter:
  2523                           	opt stack 0
  2524  000005                     i2___wmul@product:
  2525                           	opt stack 0
  2526  000005                     i2strcpy@cp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x4
  2530  000005                     	ds	1
  2531  000006                     ?i2___lwdiv:
  2532                           	opt stack 0
  2533  000006                     i2___lwdiv@dividend:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x5
  2537  000006                     	ds	1
  2538  000007                     retrieveLog@logNum:
  2539                           	opt stack 0
  2540  000007                     i2updateServoPosition@my_time:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x6
  2544  000007                     	ds	1
  2545  000008                     i2___lwdiv@divisor:
  2546                           	opt stack 0
  2547                           
  2548                           ; 2 bytes @ 0x7
  2549  000008                     	ds	1
  2550  000009                     ??_retrieveLog:
  2551                           
  2552                           ; 1 bytes @ 0x8
  2553  000009                     	ds	1
  2554  00000A                     i2___lwdiv@quotient:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x9
  2558  00000A                     	ds	1
  2559  00000B                     retrieveLog@byte1:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0xA
  2563  00000B                     	ds	1
  2564  00000C                     retrieveLog@byte2:
  2565                           	opt stack 0
  2566  00000C                     i2___lwdiv@counter:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0xB
  2570  00000C                     	ds	1
  2571  00000D                     ?i2_printf:
  2572                           	opt stack 0
  2573  00000D                     retrieveLog@byte3:
  2574                           	opt stack 0
  2575  00000D                     i2printf@f:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0xC
  2579  00000D                     	ds	1
  2580  00000E                     retrieveLog@i:
  2581                           	opt stack 0
  2582                           
  2583                           ; 2 bytes @ 0xD
  2584  00000E                     	ds	2
  2585  000010                     retrieveLog@addr:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0xF
  2589  000010                     	ds	2
  2590  000012                     dispLogs@myLog:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x11
  2594  000012                     	ds	2
  2595  000014                     
  2596                           ; 1 bytes @ 0x13
  2597  000014                     	ds	5
  2598  000019                     ??i2_printf:
  2599                           
  2600                           ; 1 bytes @ 0x18
  2601  000019                     	ds	4
  2602  00001D                     i2printf@prec:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x1C
  2606  00001D                     	ds	1
  2607  00001E                     i2printf@cp:
  2608                           	opt stack 0
  2609                           
  2610                           ; 2 bytes @ 0x1D
  2611  00001E                     	ds	2
  2612  000020                     i2printf@ap:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x1F
  2616  000020                     	ds	2
  2617  000022                     i2printf@len:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x21
  2621  000022                     	ds	2
  2622  000024                     i2printf@val:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x23
  2626  000024                     	ds	2
  2627  000026                     i2printf@flag:
  2628                           	opt stack 0
  2629                           
  2630                           ; 1 bytes @ 0x25
  2631  000026                     	ds	1
  2632  000027                     i2printf@c:
  2633                           	opt stack 0
  2634                           
  2635                           ; 1 bytes @ 0x26
  2636  000027                     	ds	1
  2637  000028                     i2printf@width:
  2638                           	opt stack 0
  2639                           
  2640                           ; 2 bytes @ 0x27
  2641  000028                     	ds	2
  2642  00002A                     ??_printSortTimer:
  2643  00002A                     ??_updateServoStates:
  2644  00002A                     ??i2_printRTC:
  2645  00002A                     ?_inputHandler:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x29
  2649  00002A                     	ds	2
  2650  00002C                     ??_inputHandler:
  2651                           
  2652                           ; 1 bytes @ 0x2B
  2653  00002C                     	ds	1
  2654  00002D                     printSortTimer@curTime:
  2655                           	opt stack 0
  2656  00002D                     i2printRTC@INT_time:
  2657                           	opt stack 0
  2658                           
  2659                           ; 14 bytes @ 0x2C
  2660  00002D                     	ds	14
  2661  00003B                     printSortTimer@start_sec:
  2662                           	opt stack 0
  2663  00003B                     i2printRTC@RTC_month:
  2664                           	opt stack 0
  2665                           
  2666                           ; 2 bytes @ 0x3A
  2667  00003B                     	ds	2
  2668  00003D                     printSortTimer@cur_sec:
  2669                           	opt stack 0
  2670  00003D                     i2printRTC@month:
  2671                           	opt stack 0
  2672                           
  2673                           ; 4 bytes @ 0x3C
  2674  00003D                     	ds	2
  2675  00003F                     printSortTimer@min:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x3E
  2679  00003F                     	ds	2
  2680  000041                     printSortTimer@sec:
  2681                           	opt stack 0
  2682  000041                     i2printRTC@i:
  2683                           	opt stack 0
  2684                           
  2685                           ; 2 bytes @ 0x40
  2686  000041                     	ds	2
  2687  000043                     ??_updateMenu:
  2688  000043                     _printSortTimer$2548:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0x42
  2692  000043                     	ds	2
  2693  000045                     printSortTimer@timeDiff:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x44
  2697  000045                     	ds	2
  2698  000047                     printSortTimer@i_1185:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x46
  2702  000047                     	ds	2
  2703  000049                     printSortTimer@i:
  2704                           	opt stack 0
  2705                           
  2706                           ; 2 bytes @ 0x48
  2707  000049                     	ds	2
  2708  00004B                     ??_handler:
  2709                           
  2710                           ; 1 bytes @ 0x4A
  2711  00004B                     	ds	16
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postdec1	equ	0xFE5
  2719                           fsr1l	equ	0xFE1
  2720                           
  2721 ;;
  2722 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2723 ;;
  2724 ;; *************** function _main *****************
  2725 ;; Defined at:
  2726 ;;		line 19 in file "main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels required when called:   13
  2746 ;; This function calls:
  2747 ;;		_I2C_Master_Init
  2748 ;;		_Test
  2749 ;;		_UI
  2750 ;;		_initLCD
  2751 ;;		_initTime
  2752 ;;		_initUI
  2753 ;;		_logRun
  2754 ;;		_machineConfig
  2755 ;;		_sort
  2756 ;;		_stopSignals
  2757 ;; This function is called by:
  2758 ;;		Startup code after reset
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text0
  2763  00400C                     __ptext0:
  2764                           	opt stack 0
  2765  00400C                     _main:
  2766                           	opt stack 18
  2767                           
  2768                           ;main.c: 20: machineConfig();
  2769                           
  2770                           ;incstack = 0
  2771  00400C  ECEC  F024         	call	_machineConfig	;wreg free
  2772                           
  2773                           ;main.c: 21: initLCD();
  2774  004010  EC3C  F026         	call	_initLCD	;wreg free
  2775                           
  2776                           ;main.c: 24: RTCflag = 0;
  2777  004014  0E00               	movlw	0
  2778  004016  0100               	movlb	0	; () banked
  2779  004018  6FEB               	movwf	(_RTCflag+1)& (0+255),b
  2780  00401A  0E00               	movlw	0
  2781  00401C  6FEA               	movwf	_RTCflag& (0+255),b
  2782                           
  2783                           ;main.c: 25: if(RTCflag){
  2784  00401E  0100               	movlb	0	; () banked
  2785  004020  51EA               	movf	_RTCflag& (0+255),w,b
  2786  004022  0100               	movlb	0	; () banked
  2787  004024  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  2788  004026  B4D8               	btfsc	status,2,c
  2789  004028  D016               	goto	l9358
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2793  00402A  0E20               	movlw	32
  2794  00402C  0100               	movlb	0	; () banked
  2795  00402E  6F80               	movwf	initTime@m& (0+255),b
  2796  004030  0E15               	movlw	21
  2797  004032  0100               	movlb	0	; () banked
  2798  004034  6F81               	movwf	initTime@h& (0+255),b
  2799  004036  0E04               	movlw	4
  2800  004038  0100               	movlb	0	; () banked
  2801  00403A  6F82               	movwf	initTime@w& (0+255),b
  2802  00403C  0E15               	movlw	21
  2803  00403E  0100               	movlb	0	; () banked
  2804  004040  6F83               	movwf	initTime@DD& (0+255),b
  2805  004042  0E03               	movlw	3
  2806  004044  0100               	movlb	0	; () banked
  2807  004046  6F84               	movwf	initTime@MM& (0+255),b
  2808  004048  0E17               	movlw	23
  2809  00404A  0100               	movlb	0	; () banked
  2810  00404C  6F85               	movwf	initTime@YY& (0+255),b
  2811  00404E  0E42               	movlw	66
  2812  004050  ECF0  F028         	call	_initTime
  2813                           
  2814                           ;main.c: 27: }
  2815  004054  D00B               	goto	l9360
  2816  004056                     l9358:
  2817                           
  2818                           ;main.c: 28: else{
  2819                           ;main.c: 29: I2C_Master_Init(10000);
  2820  004056  0E10               	movlw	16
  2821  004058  0100               	movlb	0	; () banked
  2822  00405A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2823  00405C  0E27               	movlw	39
  2824  00405E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2825  004060  0E00               	movlw	0
  2826  004062  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2827  004064  0E00               	movlw	0
  2828  004066  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2829  004068  ECBC  F024         	call	_I2C_Master_Init	;wreg free
  2830  00406C                     l9360:
  2831                           
  2832                           ;main.c: 30: }
  2833                           ;main.c: 32: initUI();
  2834  00406C  EC20  F027         	call	_initUI	;wreg free
  2835                           
  2836                           ;main.c: 33: first = 1;
  2837  004070  0E00               	movlw	0
  2838  004072  0101               	movlb	1	; () banked
  2839  004074  6F3A               	movwf	(_first+1)& (0+255),b
  2840  004076  0E01               	movlw	1
  2841  004078  6F39               	movwf	_first& (0+255),b
  2842                           
  2843                           ; BSR set to: 1
  2844                           ;main.c: 44: switch(machine_state){
  2845                           
  2846                           ;main.c: 43: while(1){
  2847  00407A  D018               	goto	l9382
  2848  00407C                     l9364:
  2849                           
  2850                           ;main.c: 46: UI();
  2851  00407C  EC65  F004         	call	_UI	;wreg free
  2852                           
  2853                           ;main.c: 47: break;
  2854  004080  D015               	goto	l9382
  2855  004082                     l9366:
  2856                           
  2857                           ;main.c: 49: sort();
  2858  004082  ECDF  F028         	call	_sort	;wreg free
  2859                           
  2860                           ;main.c: 50: break;
  2861  004086  D012               	goto	l9382
  2862  004088                     l9368:
  2863                           
  2864                           ;main.c: 52: stopSignals();
  2865  004088  EC1E  F029         	call	_stopSignals	;wreg free
  2866                           
  2867                           ;main.c: 53: logRun();
  2868  00408C  ECFC  F01C         	call	_logRun	;wreg free
  2869                           
  2870                           ;main.c: 54: first = 1;
  2871  004090  0E00               	movlw	0
  2872  004092  0101               	movlb	1	; () banked
  2873  004094  6F3A               	movwf	(_first+1)& (0+255),b
  2874  004096  0E01               	movlw	1
  2875  004098  6F39               	movwf	_first& (0+255),b
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;main.c: 55: UI();
  2879  00409A  EC65  F004         	call	_UI	;wreg free
  2880                           
  2881                           ;main.c: 56: break;
  2882  00409E  D006               	goto	l9382
  2883  0040A0                     l9376:
  2884                           
  2885                           ;main.c: 58: Test();
  2886  0040A0  EC2C  F01E         	call	_Test	;wreg free
  2887                           
  2888                           ;main.c: 59: break;
  2889  0040A4  D003               	goto	l9382
  2890  0040A6                     l9378:
  2891                           
  2892                           ;main.c: 61: stopSignals();
  2893  0040A6  EC1E  F029         	call	_stopSignals	;wreg free
  2894  0040AA                     l491:
  2895  0040AA  D7FF               	goto	l491
  2896  0040AC                     l9382:
  2897  0040AC  0100               	movlb	0	; () banked
  2898  0040AE  51FC               	movf	_machine_state& (0+255),w,b
  2899                           
  2900                           ; Switch size 1, requested type "space"
  2901                           ; Number of cases is 5, Range of values is 0 to 4
  2902                           ; switch strategies available:
  2903                           ; Name         Instructions Cycles
  2904                           ; simple_byte           16     9 (average)
  2905                           ;	Chosen strategy is simple_byte
  2906  0040B0  0A00               	xorlw	0	; case 0
  2907  0040B2  B4D8               	btfsc	status,2,c
  2908  0040B4  D7E3               	goto	l9364
  2909  0040B6  0A01               	xorlw	1	; case 1
  2910  0040B8  B4D8               	btfsc	status,2,c
  2911  0040BA  D7E3               	goto	l9366
  2912  0040BC  0A03               	xorlw	3	; case 2
  2913  0040BE  B4D8               	btfsc	status,2,c
  2914  0040C0  D7E3               	goto	l9368
  2915  0040C2  0A01               	xorlw	1	; case 3
  2916  0040C4  B4D8               	btfsc	status,2,c
  2917  0040C6  D7EC               	goto	l9376
  2918  0040C8  0A07               	xorlw	7	; case 4
  2919  0040CA  B4D8               	btfsc	status,2,c
  2920  0040CC  D7EC               	goto	l9378
  2921                           
  2922                           ; BSR set to: 0
  2923                           
  2924                           ; BSR set to: 0
  2925  0040CE  D7EE               	goto	l9382
  2926  0040D0                     __end_of_main:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postdec1	equ	0xFE5
  2935                           fsr1l	equ	0xFE1
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _stopSignals *****************
  2939 ;; Defined at:
  2940 ;;		line 70 in file "main.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    7
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text1
  2969  00523C                     __ptext1:
  2970                           	opt stack 0
  2971  00523C                     _stopSignals:
  2972                           	opt stack 23
  2973                           
  2974                           ;main.c: 71: LATA = 0x00;
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;incstack = 0
  2978  00523C  0E00               	movlw	0
  2979  00523E  6E89               	movwf	3977,c	;volatile
  2980                           
  2981                           ;main.c: 72: LATB = 0x00;
  2982  005240  0E00               	movlw	0
  2983  005242  6E8A               	movwf	3978,c	;volatile
  2984                           
  2985                           ;main.c: 73: LATC = 0x00;
  2986  005244  0E00               	movlw	0
  2987  005246  6E8B               	movwf	3979,c	;volatile
  2988                           
  2989                           ;main.c: 74: LATD = 0x00;
  2990  005248  0E00               	movlw	0
  2991  00524A  6E8C               	movwf	3980,c	;volatile
  2992                           
  2993                           ;main.c: 75: LATE = 0x00;
  2994  00524C  0E00               	movlw	0
  2995  00524E  6E8D               	movwf	3981,c	;volatile
  2996                           
  2997                           ;main.c: 76: TMR1ON = 0;
  2998  005250  90CD               	bcf	4045,0,c	;volatile
  2999                           
  3000                           ;main.c: 77: TMR3ON = 0;
  3001  005252  90B1               	bcf	4017,0,c	;volatile
  3002  005254  0012               	return		;funcret
  3003  005256                     __end_of_stopSignals:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _sort *****************
  3016 ;; Defined at:
  3017 ;;		line 63 in file "sort.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        0 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:   12
  3038 ;; This function calls:
  3039 ;;		_Distribution
  3040 ;;		_ID
  3041 ;;		_Loading
  3042 ;; This function is called by:
  3043 ;;		_main
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text2
  3048  0051BE                     __ptext2:
  3049                           	opt stack 0
  3050  0051BE                     _sort:
  3051                           	opt stack 18
  3052                           
  3053                           ;sort.c: 64: if(machine_state == Sorting_state){
  3054                           
  3055                           ;incstack = 0
  3056  0051BE  0100               	movlb	0	; () banked
  3057  0051C0  05FC               	decf	_machine_state& (0+255),w,b
  3058  0051C2  B4D8               	btfsc	status,2,c
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;sort.c: 65: Loading();
  3062  0051C4  ECB6  F008         	call	_Loading	;wreg free
  3063                           
  3064                           ;sort.c: 66: }
  3065                           ;sort.c: 67: if(machine_state == Sorting_state){
  3066  0051C8  0100               	movlb	0	; () banked
  3067  0051CA  05FC               	decf	_machine_state& (0+255),w,b
  3068  0051CC  B4D8               	btfsc	status,2,c
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;sort.c: 68: ID();
  3072  0051CE  EC6E  F018         	call	_ID	;wreg free
  3073                           
  3074                           ;sort.c: 69: }
  3075                           ;sort.c: 70: if(machine_state == Sorting_state){
  3076  0051D2  0100               	movlb	0	; () banked
  3077  0051D4  05FC               	decf	_machine_state& (0+255),w,b
  3078  0051D6  A4D8               	btfss	status,2,c
  3079  0051D8  0012               	return	
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;sort.c: 71: Distribution();
  3083  0051DA  EC2A  F01F         	call	_Distribution	;wreg free
  3084  0051DE  0012               	return	
  3085  0051E0                     __end_of_sort:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1l	equ	0xFE1
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _Loading *****************
  3098 ;; Defined at:
  3099 ;;		line 75 in file "sort.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  i               2   62[BANK0 ] int 
  3104 ;;  i               2   60[BANK0 ] int 
  3105 ;;  i               2   58[BANK0 ] int 
  3106 ;;  i               2   56[BANK0 ] int 
  3107 ;;  i               2   54[BANK0 ] int 
  3108 ;;  j               2   64[BANK0 ] int 
  3109 ;;  i               2   66[BANK0 ] int 
  3110 ;;  addr            2   51[BANK0 ] unsigned short 
  3111 ;;  byte1           1   53[BANK0 ] unsigned char 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:       19 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   11
  3128 ;; This function calls:
  3129 ;;		_EEPROM_read
  3130 ;;		_EEPROM_write
  3131 ;;		_delay_ms
  3132 ;;		_getIR
  3133 ;;		_getMAG
  3134 ;;		_initGlobalVars
  3135 ;;		_initServos
  3136 ;;		_initSortTimer
  3137 ;;		_lcdInst
  3138 ;;		_readIR
  3139 ;; This function is called by:
  3140 ;;		_sort
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text3
  3145  00116C                     __ptext3:
  3146                           	opt stack 0
  3147  00116C                     _Loading:
  3148                           	opt stack 18
  3149                           
  3150                           ;sort.c: 76: if(first){
  3151                           
  3152                           ;incstack = 0
  3153  00116C  0101               	movlb	1	; () banked
  3154  00116E  5139               	movf	_first& (0+255),w,b
  3155  001170  0101               	movlb	1	; () banked
  3156  001172  113A               	iorwf	(_first+1)& (0+255),w,b
  3157  001174  B4D8               	btfsc	status,2,c
  3158  001176  D066               	goto	l7232
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;sort.c: 77: initGlobalVars();
  3162  001178  EC25  F021         	call	_initGlobalVars	;wreg free
  3163                           
  3164                           ;sort.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3165  00117C  0E01               	movlw	1
  3166  00117E  EC5D  F029         	call	_lcdInst
  3167  001182  0E68               	movlw	104
  3168  001184  0100               	movlb	0	; () banked
  3169  001186  6FB1               	movwf	??_Loading& (0+255),b
  3170  001188  0EE4               	movlw	228
  3171  00118A                     u8497:
  3172  00118A  2EE8               	decfsz	wreg,f,c
  3173  00118C  D7FE               	bra	u8497
  3174  00118E  2FB1               	decfsz	??_Loading& (0+255),f,b
  3175  001190  D7FC               	bra	u8497
  3176  001192  F000               	nop	
  3177                           
  3178                           ;sort.c: 79: initSortTimer();
  3179  001194  EC7B  F021         	call	_initSortTimer	;wreg free
  3180                           
  3181                           ;sort.c: 80: LATCbits.LATC5 = 1;
  3182  001198  8A8B               	bsf	3979,5,c	;volatile
  3183                           
  3184                           ;sort.c: 85: sel = EEPROM_read(0);
  3185  00119A  0E00               	movlw	0
  3186  00119C  0100               	movlb	0	; () banked
  3187  00119E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3188  0011A0  0E00               	movlw	0
  3189  0011A2  6F80               	movwf	EEPROM_read@address& (0+255),b
  3190  0011A4  EC2B  F029         	call	_EEPROM_read	;wreg free
  3191  0011A8  0100               	movlb	0	; () banked
  3192  0011AA  6FFD               	movwf	_sel& (0+255),b
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;sort.c: 86: unsigned short addr = 1 + 11 * sel;
  3196  0011AC  0100               	movlb	0	; () banked
  3197  0011AE  51FD               	movf	_sel& (0+255),w,b
  3198  0011B0  0D0B               	mullw	11
  3199  0011B2  0E01               	movlw	1
  3200  0011B4  24F3               	addwf	prodl,w,c
  3201  0011B6  0100               	movlb	0	; () banked
  3202  0011B8  6FB3               	movwf	Loading@addr& (0+255),b
  3203  0011BA  0E00               	movlw	0
  3204  0011BC  20F4               	addwfc	prodh,w,c
  3205  0011BE  0100               	movlb	0	; () banked
  3206  0011C0  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;sort.c: 87: unsigned char byte1 = 0b01111111;
  3210  0011C2  0E7F               	movlw	127
  3211  0011C4  0100               	movlb	0	; () banked
  3212  0011C6  6FB5               	movwf	Loading@byte1& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;sort.c: 88: EEPROM_write(addr, byte1);
  3216  0011C8  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3217  0011CC  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3218  0011D0  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3219  0011D4  ECB6  F01E         	call	_EEPROM_write	;wreg free
  3220                           
  3221                           ;sort.c: 91: LATBbits.LATB2 = 0;
  3222  0011D8  948A               	bcf	3978,2,c	;volatile
  3223                           
  3224                           ;sort.c: 93: for(int i=0; i<46; i++){
  3225  0011DA  0E00               	movlw	0
  3226  0011DC  0100               	movlb	0	; () banked
  3227  0011DE  6FC3               	movwf	(Loading@i+1)& (0+255),b
  3228  0011E0  0E00               	movlw	0
  3229  0011E2  6FC2               	movwf	Loading@i& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232  0011E4  0100               	movlb	0	; () banked
  3233  0011E6  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3234  0011E8  D008               	goto	l7222
  3235  0011EA  0100               	movlb	0	; () banked
  3236  0011EC  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3237  0011EE  E126               	bnz	l752
  3238  0011F0  0E2E               	movlw	46
  3239  0011F2  0100               	movlb	0	; () banked
  3240  0011F4  5DC2               	subwf	Loading@i& (0+255),w,b
  3241  0011F6  B0D8               	btfsc	status,0,c
  3242  0011F8  D021               	goto	l752
  3243  0011FA                     l7222:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;sort.c: 94: LATBbits.LATB2 = !LATBbits.LATB2;
  3247  0011FA  B48A               	btfsc	3978,2,c	;volatile
  3248  0011FC  D004               	goto	u5560
  3249  0011FE  0100               	movlb	0	; () banked
  3250  001200  6BB1               	clrf	??_Loading& (0+255),b
  3251  001202  2BB1               	incf	??_Loading& (0+255),f,b
  3252  001204  D002               	goto	u5578
  3253  001206                     u5560:
  3254  001206  0100               	movlb	0	; () banked
  3255  001208  6BB1               	clrf	??_Loading& (0+255),b
  3256  00120A                     u5578:
  3257  00120A  0100               	movlb	0	; () banked
  3258  00120C  47B1               	rlncf	??_Loading& (0+255),f,b
  3259  00120E  47B1               	rlncf	??_Loading& (0+255),f,b
  3260  001210  508A               	movf	3978,w,c	;volatile
  3261  001212  0100               	movlb	0	; () banked
  3262  001214  19B1               	xorwf	??_Loading& (0+255),w,b
  3263  001216  0BFB               	andlw	-5
  3264  001218  19B1               	xorwf	??_Loading& (0+255),w,b
  3265  00121A  6E8A               	movwf	3978,c	;volatile
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 95: delay_ms(45-i);
  3269  00121C  0100               	movlb	0	; () banked
  3270  00121E  51C2               	movf	Loading@i& (0+255),w,b
  3271  001220  0800               	sublw	0
  3272  001222  0F2D               	addlw	45
  3273  001224  EC7F  F028         	call	_delay_ms
  3274  001228  0100               	movlb	0	; () banked
  3275  00122A  4BC2               	infsnz	Loading@i& (0+255),f,b
  3276  00122C  2BC3               	incf	(Loading@i+1)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 0
  3279  00122E  0100               	movlb	0	; () banked
  3280  001230  BFC3               	btfsc	(Loading@i+1)& (0+255),7,b
  3281  001232  D7E3               	goto	l7222
  3282  001234  0100               	movlb	0	; () banked
  3283  001236  51C3               	movf	(Loading@i+1)& (0+255),w,b
  3284  001238  E101               	bnz	u5580
  3285  00123A  D7DA               	goto	L1
  3286  00123C                     u5580:
  3287  00123C                     l752:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 96: }
  3291                           ;sort.c: 97: LATBbits.LATB2 = 1;
  3292  00123C  848A               	bsf	3978,2,c	;volatile
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 100: initServos();
  3296  00123E  EC48  F025         	call	_initServos	;wreg free
  3297                           
  3298                           ;sort.c: 101: }
  3299  001242  0012               	return	
  3300  001244                     l7232:
  3301                           
  3302                           ;sort.c: 102: else{
  3303                           ;sort.c: 105: if(!f_loadingNewCan){
  3304  001244  0100               	movlb	0	; () banked
  3305  001246  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3306  001248  0100               	movlb	0	; () banked
  3307  00124A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3308  00124C  A4D8               	btfss	status,2,c
  3309  00124E  D018               	goto	l7248
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;sort.c: 107: getIR();
  3313  001250  ECAD  F023         	call	_getIR	;wreg free
  3314                           
  3315                           ;sort.c: 109: if(!f_loadingNewCan){
  3316  001254  0100               	movlb	0	; () banked
  3317  001256  51F0               	movf	_f_loadingNewCan& (0+255),w,b
  3318  001258  0100               	movlb	0	; () banked
  3319  00125A  11F1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3320  00125C  B4D8               	btfsc	status,2,c
  3321  00125E  0012               	return	
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;sort.c: 113: else{
  3325                           ;sort.c: 114: count_total++;
  3326                           
  3327                           ; BSR set to: 0
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;sort.c: 111: }
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 110: return;
  3334  001260  0100               	movlb	0	; () banked
  3335  001262  4BFE               	infsnz	_count_total& (0+255),f,b
  3336  001264  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 115: if(count_total == 12){
  3340  001266  0E0C               	movlw	12
  3341  001268  0100               	movlb	0	; () banked
  3342  00126A  19FE               	xorwf	_count_total& (0+255),w,b
  3343  00126C  0100               	movlb	0	; () banked
  3344  00126E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3345  001270  A4D8               	btfss	status,2,c
  3346  001272  0012               	return	
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 116: f_lastCan = 1;
  3350  001274  0E00               	movlw	0
  3351  001276  0100               	movlb	0	; () banked
  3352  001278  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  3353  00127A  0E01               	movlw	1
  3354  00127C  6FEE               	movwf	_f_lastCan& (0+255),b
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;sort.c: 117: }
  3358                           ;sort.c: 118: }
  3359                           ;sort.c: 119: }
  3360                           
  3361                           ; BSR set to: 0
  3362  00127E  0012               	return	
  3363  001280                     l7248:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;sort.c: 122: else if(f_ID_receive){
  3367  001280  0101               	movlb	1	; () banked
  3368  001282  512F               	movf	_f_ID_receive& (0+255),w,b
  3369  001284  0101               	movlb	1	; () banked
  3370  001286  1130               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3371  001288  B4D8               	btfsc	status,2,c
  3372  00128A  0012               	return	
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;sort.c: 123: f_loadingNewCan = 0;
  3376  00128C  0E00               	movlw	0
  3377  00128E  0100               	movlb	0	; () banked
  3378  001290  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3379  001292  0E00               	movlw	0
  3380  001294  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;sort.c: 124: _delay((unsigned long)((750)*(32000000/4000.0)));
  3384  001296  0E1F               	movlw	31
  3385  001298  0100               	movlb	0	; () banked
  3386  00129A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3387  00129C  0E71               	movlw	113
  3388  00129E  0100               	movlb	0	; () banked
  3389  0012A0  6FB1               	movwf	??_Loading& (0+255),b
  3390  0012A2  0E1E               	movlw	30
  3391  0012A4                     u8507:
  3392  0012A4  2EE8               	decfsz	wreg,f,c
  3393  0012A6  D7FE               	bra	u8507
  3394  0012A8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3395  0012AA  D7FC               	bra	u8507
  3396  0012AC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3397  0012AE  D7FA               	bra	u8507
  3398  0012B0  F000               	nop	
  3399                           
  3400                           ;sort.c: 125: LATBbits.LATB2 = 0;
  3401  0012B2  948A               	bcf	3978,2,c	;volatile
  3402                           
  3403                           ;sort.c: 129: getMAG();
  3404  0012B4  ECEE  F026         	call	_getMAG	;wreg free
  3405                           
  3406                           ;sort.c: 130: sensor_outputs[0] = MAG_signal;
  3407  0012B8  C0E8  F0E2         	movff	_MAG_signal,_sensor_outputs
  3408  0012BC  C0E9  F0E3         	movff	_MAG_signal+1,_sensor_outputs+1
  3409                           
  3410                           ;sort.c: 132: if(sensor_outputs[0]){
  3411  0012C0  0100               	movlb	0	; () banked
  3412  0012C2  51E2               	movf	_sensor_outputs& (0+255),w,b
  3413  0012C4  0100               	movlb	0	; () banked
  3414  0012C6  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3415  0012C8  B4D8               	btfsc	status,2,c
  3416  0012CA  D01D               	goto	l7274
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 133: for(int i = 0; i<2500; i++){
  3420  0012CC  0E00               	movlw	0
  3421  0012CE  0100               	movlb	0	; () banked
  3422  0012D0  6FB7               	movwf	(Loading@i_1148+1)& (0+255),b
  3423  0012D2  0E00               	movlw	0
  3424  0012D4  6FB6               	movwf	Loading@i_1148& (0+255),b
  3425  0012D6                     l7264:
  3426                           
  3427                           ; BSR set to: 0
  3428  0012D6  0100               	movlb	0	; () banked
  3429  0012D8  BFB7               	btfsc	(Loading@i_1148+1)& (0+255),7,b
  3430  0012DA  D008               	goto	l762
  3431  0012DC  0EC4               	movlw	196
  3432  0012DE  0100               	movlb	0	; () banked
  3433  0012E0  5DB6               	subwf	Loading@i_1148& (0+255),w,b
  3434  0012E2  0E09               	movlw	9
  3435  0012E4  0100               	movlb	0	; () banked
  3436  0012E6  59B7               	subwfb	(Loading@i_1148+1)& (0+255),w,b
  3437  0012E8  B0D8               	btfsc	status,0,c
  3438  0012EA  D02A               	goto	l7286
  3439  0012EC                     l762:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;sort.c: 134: LATAbits.LATA4 = 1;
  3443  0012EC  8889               	bsf	3977,4,c	;volatile
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sort.c: 135: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3447  0012EE  0EC8               	movlw	200
  3448  0012F0                     u8517:
  3449  0012F0  2EE8               	decfsz	wreg,f,c
  3450  0012F2  D7FE               	bra	u8517
  3451                           
  3452                           ;sort.c: 136: LATAbits.LATA4 = 0;
  3453  0012F4  9889               	bcf	3977,4,c	;volatile
  3454                           
  3455                           ;sort.c: 137: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3456  0012F6  0E42               	movlw	66
  3457  0012F8                     u8527:
  3458  0012F8  2EE8               	decfsz	wreg,f,c
  3459  0012FA  D7FE               	bra	u8527
  3460  0012FC  D000               	nop2	
  3461  0012FE  0100               	movlb	0	; () banked
  3462  001300  4BB6               	infsnz	Loading@i_1148& (0+255),f,b
  3463  001302  2BB7               	incf	(Loading@i_1148+1)& (0+255),f,b
  3464  001304  D7E8               	goto	l7264
  3465  001306                     l7274:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;sort.c: 140: else{
  3469                           ;sort.c: 141: for(int i = 0; i<2500; i++){
  3470  001306  0E00               	movlw	0
  3471  001308  0100               	movlb	0	; () banked
  3472  00130A  6FB9               	movwf	(Loading@i_1157+1)& (0+255),b
  3473  00130C  0E00               	movlw	0
  3474  00130E  6FB8               	movwf	Loading@i_1157& (0+255),b
  3475  001310                     l7276:
  3476                           
  3477                           ; BSR set to: 0
  3478  001310  0100               	movlb	0	; () banked
  3479  001312  BFB9               	btfsc	(Loading@i_1157+1)& (0+255),7,b
  3480  001314  D008               	goto	l765
  3481  001316  0EC4               	movlw	196
  3482  001318  0100               	movlb	0	; () banked
  3483  00131A  5DB8               	subwf	Loading@i_1157& (0+255),w,b
  3484  00131C  0E09               	movlw	9
  3485  00131E  0100               	movlb	0	; () banked
  3486  001320  59B9               	subwfb	(Loading@i_1157+1)& (0+255),w,b
  3487  001322  B0D8               	btfsc	status,0,c
  3488  001324  D00D               	goto	l7286
  3489  001326                     l765:
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3493  001326  8889               	bsf	3977,4,c	;volatile
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;sort.c: 143: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3497  001328  0E9A               	movlw	154
  3498  00132A                     u8537:
  3499  00132A  2EE8               	decfsz	wreg,f,c
  3500  00132C  D7FE               	bra	u8537
  3501  00132E  D000               	nop2	
  3502                           
  3503                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3504  001330  9889               	bcf	3977,4,c	;volatile
  3505                           
  3506                           ;sort.c: 145: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3507  001332  0E70               	movlw	112
  3508  001334                     u8547:
  3509  001334  2EE8               	decfsz	wreg,f,c
  3510  001336  D7FE               	bra	u8547
  3511  001338  0100               	movlb	0	; () banked
  3512  00133A  4BB8               	infsnz	Loading@i_1157& (0+255),f,b
  3513  00133C  2BB9               	incf	(Loading@i_1157+1)& (0+255),f,b
  3514  00133E  D7E8               	goto	l7276
  3515  001340                     l7286:
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;sort.c: 146: }
  3519                           ;sort.c: 147: }
  3520                           ;sort.c: 149: _delay((unsigned long)((350)*(32000000/4000.0)));
  3521  001340  0E0F               	movlw	15
  3522  001342  0100               	movlb	0	; () banked
  3523  001344  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3524  001346  0E35               	movlw	53
  3525  001348  0100               	movlb	0	; () banked
  3526  00134A  6FB1               	movwf	??_Loading& (0+255),b
  3527  00134C  0E51               	movlw	81
  3528  00134E                     u8557:
  3529  00134E  2EE8               	decfsz	wreg,f,c
  3530  001350  D7FE               	bra	u8557
  3531  001352  2FB1               	decfsz	??_Loading& (0+255),f,b
  3532  001354  D7FC               	bra	u8557
  3533  001356  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3534  001358  D7FA               	bra	u8557
  3535                           
  3536                           ;sort.c: 151: readIR();
  3537  00135A  ECF0  F025         	call	_readIR	;wreg free
  3538                           
  3539                           ;sort.c: 152: if(IR_signal==1){
  3540  00135E  0100               	movlb	0	; () banked
  3541  001360  05E6               	decf	_IR_signal& (0+255),w,b
  3542  001362  0100               	movlb	0	; () banked
  3543  001364  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3544  001366  A4D8               	btfss	status,2,c
  3545  001368  D147               	goto	l7404
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;sort.c: 153: _delay((unsigned long)((100)*(32000000/4000.0)));
  3549  00136A  0E05               	movlw	5
  3550  00136C  0100               	movlb	0	; () banked
  3551  00136E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3552  001370  0E0F               	movlw	15
  3553  001372  0100               	movlb	0	; () banked
  3554  001374  6FB1               	movwf	??_Loading& (0+255),b
  3555  001376  0EF1               	movlw	241
  3556  001378                     u8567:
  3557  001378  2EE8               	decfsz	wreg,f,c
  3558  00137A  D7FE               	bra	u8567
  3559  00137C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3560  00137E  D7FC               	bra	u8567
  3561  001380  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3562  001382  D7FA               	bra	u8567
  3563                           
  3564                           ;sort.c: 154: readIR();
  3565  001384  ECF0  F025         	call	_readIR	;wreg free
  3566                           
  3567                           ;sort.c: 155: if(IR_signal==1){
  3568  001388  0100               	movlb	0	; () banked
  3569  00138A  05E6               	decf	_IR_signal& (0+255),w,b
  3570  00138C  0100               	movlb	0	; () banked
  3571  00138E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3572  001390  A4D8               	btfss	status,2,c
  3573  001392  D040               	goto	l7324
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;sort.c: 156: if(sensor_outputs[0]){
  3577  001394  0100               	movlb	0	; () banked
  3578  001396  51E2               	movf	_sensor_outputs& (0+255),w,b
  3579  001398  0100               	movlb	0	; () banked
  3580  00139A  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3581  00139C  B4D8               	btfsc	status,2,c
  3582  00139E  D01D               	goto	l7312
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;sort.c: 157: for(int i = 0; i<2500; i++){
  3586  0013A0  0E00               	movlw	0
  3587  0013A2  0100               	movlb	0	; () banked
  3588  0013A4  6FBB               	movwf	(Loading@i_1159+1)& (0+255),b
  3589  0013A6  0E00               	movlw	0
  3590  0013A8  6FBA               	movwf	Loading@i_1159& (0+255),b
  3591  0013AA                     l7302:
  3592                           
  3593                           ; BSR set to: 0
  3594  0013AA  0100               	movlb	0	; () banked
  3595  0013AC  BFBB               	btfsc	(Loading@i_1159+1)& (0+255),7,b
  3596  0013AE  D008               	goto	l770
  3597  0013B0  0EC4               	movlw	196
  3598  0013B2  0100               	movlb	0	; () banked
  3599  0013B4  5DBA               	subwf	Loading@i_1159& (0+255),w,b
  3600  0013B6  0E09               	movlw	9
  3601  0013B8  0100               	movlb	0	; () banked
  3602  0013BA  59BB               	subwfb	(Loading@i_1159+1)& (0+255),w,b
  3603  0013BC  B0D8               	btfsc	status,0,c
  3604  0013BE  D02A               	goto	l7324
  3605  0013C0                     l770:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;sort.c: 158: LATAbits.LATA4 = 1;
  3609  0013C0  8889               	bsf	3977,4,c	;volatile
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 159: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3613  0013C2  0EC8               	movlw	200
  3614  0013C4                     u8577:
  3615  0013C4  2EE8               	decfsz	wreg,f,c
  3616  0013C6  D7FE               	bra	u8577
  3617                           
  3618                           ;sort.c: 160: LATAbits.LATA4 = 0;
  3619  0013C8  9889               	bcf	3977,4,c	;volatile
  3620                           
  3621                           ;sort.c: 161: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3622  0013CA  0E42               	movlw	66
  3623  0013CC                     u8587:
  3624  0013CC  2EE8               	decfsz	wreg,f,c
  3625  0013CE  D7FE               	bra	u8587
  3626  0013D0  D000               	nop2	
  3627  0013D2  0100               	movlb	0	; () banked
  3628  0013D4  4BBA               	infsnz	Loading@i_1159& (0+255),f,b
  3629  0013D6  2BBB               	incf	(Loading@i_1159+1)& (0+255),f,b
  3630  0013D8  D7E8               	goto	l7302
  3631  0013DA                     l7312:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 164: else{
  3635                           ;sort.c: 165: for(int i = 0; i<2500; i++){
  3636  0013DA  0E00               	movlw	0
  3637  0013DC  0100               	movlb	0	; () banked
  3638  0013DE  6FBD               	movwf	(Loading@i_1160+1)& (0+255),b
  3639  0013E0  0E00               	movlw	0
  3640  0013E2  6FBC               	movwf	Loading@i_1160& (0+255),b
  3641  0013E4                     l7314:
  3642                           
  3643                           ; BSR set to: 0
  3644  0013E4  0100               	movlb	0	; () banked
  3645  0013E6  BFBD               	btfsc	(Loading@i_1160+1)& (0+255),7,b
  3646  0013E8  D008               	goto	l773
  3647  0013EA  0EC4               	movlw	196
  3648  0013EC  0100               	movlb	0	; () banked
  3649  0013EE  5DBC               	subwf	Loading@i_1160& (0+255),w,b
  3650  0013F0  0E09               	movlw	9
  3651  0013F2  0100               	movlb	0	; () banked
  3652  0013F4  59BD               	subwfb	(Loading@i_1160+1)& (0+255),w,b
  3653  0013F6  B0D8               	btfsc	status,0,c
  3654  0013F8  D00D               	goto	l7324
  3655  0013FA                     l773:
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3659  0013FA  8889               	bsf	3977,4,c	;volatile
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;sort.c: 167: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3663  0013FC  0E9A               	movlw	154
  3664  0013FE                     u8597:
  3665  0013FE  2EE8               	decfsz	wreg,f,c
  3666  001400  D7FE               	bra	u8597
  3667  001402  D000               	nop2	
  3668                           
  3669                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3670  001404  9889               	bcf	3977,4,c	;volatile
  3671                           
  3672                           ;sort.c: 169: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3673  001406  0E70               	movlw	112
  3674  001408                     u8607:
  3675  001408  2EE8               	decfsz	wreg,f,c
  3676  00140A  D7FE               	bra	u8607
  3677  00140C  0100               	movlb	0	; () banked
  3678  00140E  4BBC               	infsnz	Loading@i_1160& (0+255),f,b
  3679  001410  2BBD               	incf	(Loading@i_1160+1)& (0+255),f,b
  3680  001412  D7E8               	goto	l7314
  3681  001414                     l7324:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;sort.c: 170: }
  3685                           ;sort.c: 171: }
  3686                           ;sort.c: 172: }
  3687                           ;sort.c: 174: _delay((unsigned long)((350)*(32000000/4000.0)));
  3688  001414  0E0F               	movlw	15
  3689  001416  0100               	movlb	0	; () banked
  3690  001418  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3691  00141A  0E35               	movlw	53
  3692  00141C  0100               	movlb	0	; () banked
  3693  00141E  6FB1               	movwf	??_Loading& (0+255),b
  3694  001420  0E51               	movlw	81
  3695  001422                     u8617:
  3696  001422  2EE8               	decfsz	wreg,f,c
  3697  001424  D7FE               	bra	u8617
  3698  001426  2FB1               	decfsz	??_Loading& (0+255),f,b
  3699  001428  D7FC               	bra	u8617
  3700  00142A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3701  00142C  D7FA               	bra	u8617
  3702                           
  3703                           ;sort.c: 176: int j = 1;
  3704  00142E  0E00               	movlw	0
  3705  001430  0100               	movlb	0	; () banked
  3706  001432  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3707  001434  0E01               	movlw	1
  3708  001436  6FC0               	movwf	Loading@j& (0+255),b
  3709                           
  3710                           ;sort.c: 177: while(IR_signal == 1){
  3711  001438  D0D8               	goto	l7402
  3712  00143A                     l7328:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 178: readIR();
  3716  00143A  ECF0  F025         	call	_readIR	;wreg free
  3717                           
  3718                           ;sort.c: 179: if(j == 10){
  3719  00143E  0E0A               	movlw	10
  3720  001440  0100               	movlb	0	; () banked
  3721  001442  19C0               	xorwf	Loading@j& (0+255),w,b
  3722  001444  0100               	movlb	0	; () banked
  3723  001446  11C1               	iorwf	(Loading@j+1)& (0+255),w,b
  3724  001448  A4D8               	btfss	status,2,c
  3725  00144A  D016               	goto	l7336
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;sort.c: 180: LATBbits.LATB2 = !LATBbits.LATB2;
  3729  00144C  B48A               	btfsc	3978,2,c	;volatile
  3730  00144E  D004               	goto	u5760
  3731  001450  0100               	movlb	0	; () banked
  3732  001452  6BB1               	clrf	??_Loading& (0+255),b
  3733  001454  2BB1               	incf	??_Loading& (0+255),f,b
  3734  001456  D002               	goto	u5778
  3735  001458                     u5760:
  3736  001458  0100               	movlb	0	; () banked
  3737  00145A  6BB1               	clrf	??_Loading& (0+255),b
  3738  00145C                     u5778:
  3739  00145C  0100               	movlb	0	; () banked
  3740  00145E  47B1               	rlncf	??_Loading& (0+255),f,b
  3741  001460  47B1               	rlncf	??_Loading& (0+255),f,b
  3742  001462  508A               	movf	3978,w,c	;volatile
  3743  001464  0100               	movlb	0	; () banked
  3744  001466  19B1               	xorwf	??_Loading& (0+255),w,b
  3745  001468  0BFB               	andlw	-5
  3746  00146A  19B1               	xorwf	??_Loading& (0+255),w,b
  3747  00146C  6E8A               	movwf	3978,c	;volatile
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;sort.c: 181: j = 0;
  3751  00146E  0E00               	movlw	0
  3752  001470  0100               	movlb	0	; () banked
  3753  001472  6FC1               	movwf	(Loading@j+1)& (0+255),b
  3754  001474  0E00               	movlw	0
  3755  001476  6FC0               	movwf	Loading@j& (0+255),b
  3756  001478                     l7336:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;sort.c: 182: }
  3760                           ;sort.c: 183: if(IR_signal==1){
  3761  001478  0100               	movlb	0	; () banked
  3762  00147A  05E6               	decf	_IR_signal& (0+255),w,b
  3763  00147C  0100               	movlb	0	; () banked
  3764  00147E  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3765  001480  A4D8               	btfss	status,2,c
  3766  001482  D098               	goto	l7390
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;sort.c: 184: _delay((unsigned long)((350)*(32000000/4000.0)));
  3770  001484  0E0F               	movlw	15
  3771  001486  0100               	movlb	0	; () banked
  3772  001488  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3773  00148A  0E35               	movlw	53
  3774  00148C  0100               	movlb	0	; () banked
  3775  00148E  6FB1               	movwf	??_Loading& (0+255),b
  3776  001490  0E51               	movlw	81
  3777  001492                     u8627:
  3778  001492  2EE8               	decfsz	wreg,f,c
  3779  001494  D7FE               	bra	u8627
  3780  001496  2FB1               	decfsz	??_Loading& (0+255),f,b
  3781  001498  D7FC               	bra	u8627
  3782  00149A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3783  00149C  D7FA               	bra	u8627
  3784                           
  3785                           ;sort.c: 185: readIR();
  3786  00149E  ECF0  F025         	call	_readIR	;wreg free
  3787                           
  3788                           ;sort.c: 186: if(IR_signal==1){
  3789  0014A2  0100               	movlb	0	; () banked
  3790  0014A4  05E6               	decf	_IR_signal& (0+255),w,b
  3791  0014A6  0100               	movlb	0	; () banked
  3792  0014A8  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  3793  0014AA  A4D8               	btfss	status,2,c
  3794  0014AC  D07F               	goto	l779
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;sort.c: 187: if(sensor_outputs[0]){
  3798  0014AE  0100               	movlb	0	; () banked
  3799  0014B0  51E2               	movf	_sensor_outputs& (0+255),w,b
  3800  0014B2  0100               	movlb	0	; () banked
  3801  0014B4  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3802  0014B6  B4D8               	btfsc	status,2,c
  3803  0014B8  D011               	goto	l7352
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;sort.c: 188: LATAbits.LATA4 = 1;
  3807  0014BA  8889               	bsf	3977,4,c	;volatile
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;sort.c: 189: _delay((unsigned long)((250)*(32000000/4000.0)));
  3811  0014BC  0E0B               	movlw	11
  3812  0014BE  0100               	movlb	0	; () banked
  3813  0014C0  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3814  0014C2  0E26               	movlw	38
  3815  0014C4  0100               	movlb	0	; () banked
  3816  0014C6  6FB1               	movwf	??_Loading& (0+255),b
  3817  0014C8  0E5D               	movlw	93
  3818  0014CA                     u8637:
  3819  0014CA  2EE8               	decfsz	wreg,f,c
  3820  0014CC  D7FE               	bra	u8637
  3821  0014CE  2FB1               	decfsz	??_Loading& (0+255),f,b
  3822  0014D0  D7FC               	bra	u8637
  3823  0014D2  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3824  0014D4  D7FA               	bra	u8637
  3825  0014D6  D000               	nop2	
  3826                           
  3827                           ;sort.c: 190: LATAbits.LATA4 = 0;
  3828  0014D8  9889               	bcf	3977,4,c	;volatile
  3829                           
  3830                           ;sort.c: 191: }
  3831  0014DA  D068               	goto	l779
  3832  0014DC                     l7352:
  3833                           
  3834                           ;sort.c: 192: else{
  3835                           ;sort.c: 193: for(int i = 0; i<2500; i++){
  3836  0014DC  0E00               	movlw	0
  3837  0014DE  0100               	movlb	0	; () banked
  3838  0014E0  6FBF               	movwf	(Loading@i_1162+1)& (0+255),b
  3839  0014E2  0E00               	movlw	0
  3840  0014E4  6FBE               	movwf	Loading@i_1162& (0+255),b
  3841  0014E6                     l7354:
  3842                           
  3843                           ; BSR set to: 0
  3844  0014E6  0100               	movlb	0	; () banked
  3845  0014E8  BFBF               	btfsc	(Loading@i_1162+1)& (0+255),7,b
  3846  0014EA  D041               	goto	l7382
  3847  0014EC  0EC4               	movlw	196
  3848  0014EE  0100               	movlb	0	; () banked
  3849  0014F0  5DBE               	subwf	Loading@i_1162& (0+255),w,b
  3850  0014F2  0E09               	movlw	9
  3851  0014F4  0100               	movlb	0	; () banked
  3852  0014F6  59BF               	subwfb	(Loading@i_1162+1)& (0+255),w,b
  3853  0014F8  B0D8               	btfsc	status,0,c
  3854  0014FA  D058               	goto	l779
  3855  0014FC  D038               	goto	l7382
  3856  0014FE                     l785:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;sort.c: 196: LATAbits.LATA4 = 1;
  3860  0014FE  8889               	bsf	3977,4,c	;volatile
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;sort.c: 197: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3864  001500  0EC8               	movlw	200
  3865  001502                     u8647:
  3866  001502  2EE8               	decfsz	wreg,f,c
  3867  001504  D7FE               	bra	u8647
  3868                           
  3869                           ;sort.c: 198: LATAbits.LATA4 = 0;
  3870  001506  9889               	bcf	3977,4,c	;volatile
  3871                           
  3872                           ;sort.c: 199: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3873  001508  0E42               	movlw	66
  3874  00150A                     u8657:
  3875  00150A  2EE8               	decfsz	wreg,f,c
  3876  00150C  D7FE               	bra	u8657
  3877  00150E  D01C               	goto	L2
  3878  001510                     l787:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;sort.c: 202: LATAbits.LATA4 = 1;
  3882  001510  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;sort.c: 203: _delay((unsigned long)((80)*(32000000/4000000.0)));
  3886  001512  0ED5               	movlw	213
  3887  001514                     u8667:
  3888  001514  2EE8               	decfsz	wreg,f,c
  3889  001516  D7FE               	bra	u8667
  3890  001518  F000               	nop	
  3891                           
  3892                           ;sort.c: 204: LATAbits.LATA4 = 0;
  3893  00151A  9889               	bcf	3977,4,c	;volatile
  3894                           
  3895                           ;sort.c: 205: _delay((unsigned long)((20)*(32000000/4000000.0)));
  3896  00151C  0E35               	movlw	53
  3897  00151E                     u8677:
  3898  00151E  2EE8               	decfsz	wreg,f,c
  3899  001520  D7FE               	bra	u8677
  3900  001522  D01D               	goto	L3
  3901  001524                     l788:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;sort.c: 208: LATAbits.LATA4 = 1;
  3905  001524  8889               	bsf	3977,4,c	;volatile
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;sort.c: 209: _delay((unsigned long)((85)*(32000000/4000000.0)));
  3909  001526  0EE2               	movlw	226
  3910  001528                     u8687:
  3911  001528  2EE8               	decfsz	wreg,f,c
  3912  00152A  D7FE               	bra	u8687
  3913  00152C  D000               	nop2	
  3914                           
  3915                           ;sort.c: 210: LATAbits.LATA4 = 0;
  3916  00152E  9889               	bcf	3977,4,c	;volatile
  3917                           
  3918                           ;sort.c: 211: _delay((unsigned long)((15)*(32000000/4000000.0)));
  3919  001530  0E28               	movlw	40
  3920  001532                     u8697:
  3921  001532  2EE8               	decfsz	wreg,f,c
  3922  001534  D7FE               	bra	u8697
  3923                           
  3924                           ;sort.c: 212: break;
  3925  001536  D036               	goto	l7384
  3926  001538                     l789:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;sort.c: 214: LATAbits.LATA4 = 1;
  3930  001538  8889               	bsf	3977,4,c	;volatile
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;sort.c: 215: _delay((unsigned long)((90)*(32000000/4000000.0)));
  3934  00153A  0EF0               	movlw	240
  3935  00153C                     u8707:
  3936  00153C  2EE8               	decfsz	wreg,f,c
  3937  00153E  D7FE               	bra	u8707
  3938                           
  3939                           ;sort.c: 216: LATAbits.LATA4 = 0;
  3940  001540  9889               	bcf	3977,4,c	;volatile
  3941                           
  3942                           ;sort.c: 217: _delay((unsigned long)((10)*(32000000/4000000.0)));
  3943  001542  0E1A               	movlw	26
  3944  001544                     u8717:
  3945  001544  2EE8               	decfsz	wreg,f,c
  3946  001546  D7FE               	bra	u8717
  3947  001548                     L2:
  3948  001548  D000               	nop2	
  3949                           
  3950                           ;sort.c: 218: break;
  3951  00154A  D02C               	goto	l7384
  3952  00154C                     l790:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;sort.c: 220: LATAbits.LATA4 = 1;
  3956  00154C  8889               	bsf	3977,4,c	;volatile
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;sort.c: 221: _delay((unsigned long)((95)*(32000000/4000000.0)));
  3960  00154E  0EFD               	movlw	253
  3961  001550                     u8727:
  3962  001550  2EE8               	decfsz	wreg,f,c
  3963  001552  D7FE               	bra	u8727
  3964  001554  F000               	nop	
  3965                           
  3966                           ;sort.c: 222: LATAbits.LATA4 = 0;
  3967  001556  9889               	bcf	3977,4,c	;volatile
  3968                           
  3969                           ;sort.c: 223: _delay((unsigned long)((5)*(32000000/4000000.0)));
  3970  001558  0E0D               	movlw	13
  3971  00155A                     u8737:
  3972  00155A  2EE8               	decfsz	wreg,f,c
  3973  00155C  D7FE               	bra	u8737
  3974  00155E                     L3:
  3975  00155E  F000               	nop	
  3976                           
  3977                           ;sort.c: 224: break;
  3978  001560  D021               	goto	l7384
  3979  001562                     l791:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;sort.c: 226: LATAbits.LATA4 = 1;
  3983  001562  8889               	bsf	3977,4,c	;volatile
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;sort.c: 227: _delay((unsigned long)((100)*(32000000/4000000.0)));
  3987  001564  0EA0               	movlw	160
  3988  001566                     u8747:
  3989  001566  D000               	nop2	
  3990  001568  2EE8               	decfsz	wreg,f,c
  3991  00156A  D7FD               	bra	u8747
  3992                           
  3993                           ;sort.c: 229: }
  3994                           
  3995                           ;sort.c: 228: break;
  3996  00156C  D01B               	goto	l7384
  3997  00156E                     l7382:
  3998  00156E  C0C0  F0B1         	movff	Loading@j,??_Loading
  3999  001572  C0C1  F0B2         	movff	Loading@j+1,??_Loading+1
  4000                           
  4001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4002                           ; Switch size 1, requested type "space"
  4003                           ; Number of cases is 1, Range of values is 0 to 0
  4004                           ; switch strategies available:
  4005                           ; Name         Instructions Cycles
  4006                           ; simple_byte            4     3 (average)
  4007                           ;	Chosen strategy is simple_byte
  4008  001576  0100               	movlb	0	; () banked
  4009  001578  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4010  00157A  0A00               	xorlw	0	; case 0
  4011  00157C  A4D8               	btfss	status,2,c
  4012  00157E  D7F1               	goto	l791
  4013                           
  4014                           ; BSR set to: 0
  4015                           ; Switch size 1, requested type "space"
  4016                           ; Number of cases is 5, Range of values is 1 to 5
  4017                           ; switch strategies available:
  4018                           ; Name         Instructions Cycles
  4019                           ; simple_byte           16     9 (average)
  4020                           ;	Chosen strategy is simple_byte
  4021  001580  0100               	movlb	0	; () banked
  4022  001582  51B1               	movf	??_Loading& (0+255),w,b
  4023  001584  0A01               	xorlw	1	; case 1
  4024  001586  B4D8               	btfsc	status,2,c
  4025  001588  D7BA               	goto	l785
  4026  00158A  0A03               	xorlw	3	; case 2
  4027  00158C  B4D8               	btfsc	status,2,c
  4028  00158E  D7C0               	goto	l787
  4029  001590  0A01               	xorlw	1	; case 3
  4030  001592  B4D8               	btfsc	status,2,c
  4031  001594  D7C7               	goto	l788
  4032  001596  0A07               	xorlw	7	; case 4
  4033  001598  B4D8               	btfsc	status,2,c
  4034  00159A  D7CE               	goto	l789
  4035  00159C  0A01               	xorlw	1	; case 5
  4036  00159E  B4D8               	btfsc	status,2,c
  4037  0015A0  D7D5               	goto	l790
  4038  0015A2  D7DF               	goto	l791
  4039  0015A4                     l7384:
  4040  0015A4  0100               	movlb	0	; () banked
  4041  0015A6  4BBE               	infsnz	Loading@i_1162& (0+255),f,b
  4042  0015A8  2BBF               	incf	(Loading@i_1162+1)& (0+255),f,b
  4043  0015AA  D79D               	goto	l7354
  4044  0015AC                     l779:
  4045                           
  4046                           ;sort.c: 230: }
  4047                           ;sort.c: 231: }
  4048                           ;sort.c: 232: }
  4049                           ;sort.c: 233: LATAbits.LATA4 = 0;
  4050  0015AC  9889               	bcf	3977,4,c	;volatile
  4051                           
  4052                           ;sort.c: 234: j++;
  4053  0015AE  0100               	movlb	0	; () banked
  4054  0015B0  4BC0               	infsnz	Loading@j& (0+255),f,b
  4055  0015B2  2BC1               	incf	(Loading@j+1)& (0+255),f,b
  4056  0015B4                     l7390:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;sort.c: 235: }
  4060                           ;sort.c: 237: if(!IR_signal){
  4061  0015B4  0100               	movlb	0	; () banked
  4062  0015B6  51E6               	movf	_IR_signal& (0+255),w,b
  4063  0015B8  0100               	movlb	0	; () banked
  4064  0015BA  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4065  0015BC  A4D8               	btfss	status,2,c
  4066  0015BE  D015               	goto	l7402
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;sort.c: 238: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4070  0015C0  0E29               	movlw	41
  4071  0015C2  0100               	movlb	0	; () banked
  4072  0015C4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4073  0015C6  0E96               	movlw	150
  4074  0015C8  0100               	movlb	0	; () banked
  4075  0015CA  6FB1               	movwf	??_Loading& (0+255),b
  4076  0015CC  0E7F               	movlw	127
  4077  0015CE                     u8757:
  4078  0015CE  2EE8               	decfsz	wreg,f,c
  4079  0015D0  D7FE               	bra	u8757
  4080  0015D2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4081  0015D4  D7FC               	bra	u8757
  4082  0015D6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4083  0015D8  D7FA               	bra	u8757
  4084                           
  4085                           ;sort.c: 239: readIR();
  4086  0015DA  ECF0  F025         	call	_readIR	;wreg free
  4087                           
  4088                           ;sort.c: 240: if(IR_signal==1){
  4089  0015DE  0100               	movlb	0	; () banked
  4090  0015E0  05E6               	decf	_IR_signal& (0+255),w,b
  4091  0015E2  0100               	movlb	0	; () banked
  4092  0015E4  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4093  0015E6  A4D8               	btfss	status,2,c
  4094  0015E8  D006               	goto	l795
  4095  0015EA                     l7402:
  4096                           
  4097                           ; BSR set to: 0
  4098  0015EA  0100               	movlb	0	; () banked
  4099  0015EC  05E6               	decf	_IR_signal& (0+255),w,b
  4100  0015EE  0100               	movlb	0	; () banked
  4101  0015F0  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4102  0015F2  B4D8               	btfsc	status,2,c
  4103  0015F4  D722               	goto	l7328
  4104  0015F6                     l795:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;sort.c: 245: }
  4108                           ;sort.c: 246: }
  4109                           ;sort.c: 247: }
  4110                           ;sort.c: 248: LATBbits.LATB2 = 0;
  4111  0015F6  948A               	bcf	3978,2,c	;volatile
  4112  0015F8                     l7404:
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;sort.c: 249: }
  4116                           ;sort.c: 250: f_can_coming_to_ID = 1;
  4117  0015F8  0E00               	movlw	0
  4118  0015FA  0101               	movlb	1	; () banked
  4119  0015FC  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4120  0015FE  0E01               	movlw	1
  4121  001600  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4122                           
  4123                           ; BSR set to: 1
  4124                           
  4125                           ; BSR set to: 1
  4126  001602  0012               	return	
  4127  001604                     __end_of_Loading:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _initSortTimer *****************
  4142 ;; Defined at:
  4143 ;;		line 392 in file "sort.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  i               2    8[BANK0 ] int 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;Total ram usage:        5 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:   10
  4164 ;; This function calls:
  4165 ;;		_getRTC
  4166 ;; This function is called by:
  4167 ;;		_Loading
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text4
  4172  0042F6                     __ptext4:
  4173                           	opt stack 0
  4174  0042F6                     _initSortTimer:
  4175                           	opt stack 18
  4176                           
  4177                           ;sort.c: 394: getRTC();
  4178                           
  4179                           ;incstack = 0
  4180  0042F6  EC67  F022         	call	_getRTC	;wreg free
  4181                           
  4182                           ;sort.c: 395: for(int i = 0; i < 7; i++){
  4183  0042FA  0E00               	movlw	0
  4184  0042FC  0100               	movlb	0	; () banked
  4185  0042FE  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4186  004300  0E00               	movlw	0
  4187  004302  6F88               	movwf	initSortTimer@i& (0+255),b
  4188  004304                     l6806:
  4189                           
  4190                           ; BSR set to: 0
  4191  004304  0100               	movlb	0	; () banked
  4192  004306  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4193  004308  D008               	goto	l6810
  4194  00430A  0100               	movlb	0	; () banked
  4195  00430C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4196  00430E  E140               	bnz	l6816
  4197  004310  0E07               	movlw	7
  4198  004312  0100               	movlb	0	; () banked
  4199  004314  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4200  004316  B0D8               	btfsc	status,0,c
  4201  004318  D03B               	goto	l6816
  4202  00431A                     l6810:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;sort.c: 396: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4206  00431A  0E1C               	movlw	low _time
  4207  00431C  0100               	movlb	0	; () banked
  4208  00431E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4209  004320  6ED9               	movwf	fsr2l,c
  4210  004322  0E01               	movlw	high _time
  4211  004324  0100               	movlb	0	; () banked
  4212  004326  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4213  004328  6EDA               	movwf	fsr2h,c
  4214  00432A  50DF               	movf	indf2,w,c
  4215  00432C  0100               	movlb	0	; () banked
  4216  00432E  6F85               	movwf	??_initSortTimer& (0+255),b
  4217  004330  0100               	movlb	0	; () banked
  4218  004332  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4219  004334  0E0F               	movlw	15
  4220  004336  1785               	andwf	??_initSortTimer& (0+255),f,b
  4221  004338  0E0F               	movlw	15
  4222  00433A  0100               	movlb	0	; () banked
  4223  00433C  1785               	andwf	??_initSortTimer& (0+255),f,b
  4224  00433E  0100               	movlb	0	; () banked
  4225  004340  5185               	movf	??_initSortTimer& (0+255),w,b
  4226  004342  0D0A               	mullw	10
  4227  004344  0E1C               	movlw	low _time
  4228  004346  0100               	movlb	0	; () banked
  4229  004348  2588               	addwf	initSortTimer@i& (0+255),w,b
  4230  00434A  6ED9               	movwf	fsr2l,c
  4231  00434C  0E01               	movlw	high _time
  4232  00434E  0100               	movlb	0	; () banked
  4233  004350  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4234  004352  6EDA               	movwf	fsr2h,c
  4235  004354  50DF               	movf	indf2,w,c
  4236  004356  0B0F               	andlw	15
  4237  004358  0100               	movlb	0	; () banked
  4238  00435A  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4239  00435C  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4240  00435E  50F3               	movf	prodl,w,c
  4241  004360  0100               	movlb	0	; () banked
  4242  004362  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4243  004364  50F4               	movf	prodh,w,c
  4244  004366  0100               	movlb	0	; () banked
  4245  004368  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4246  00436A  90D8               	bcf	status,0,c
  4247  00436C  0100               	movlb	0	; () banked
  4248  00436E  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4249  004370  6ED9               	movwf	fsr2l,c
  4250  004372  0100               	movlb	0	; () banked
  4251  004374  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4252  004376  6EDA               	movwf	fsr2h,c
  4253  004378  0E0E               	movlw	low _startTime
  4254  00437A  26D9               	addwf	fsr2l,f,c
  4255  00437C  0E01               	movlw	high _startTime
  4256  00437E  22DA               	addwfc	fsr2h,f,c
  4257  004380  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4258  004384  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4259                           
  4260                           ; BSR set to: 0
  4261  004388  0100               	movlb	0	; () banked
  4262  00438A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4263  00438C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4264  00438E  D7BA               	goto	l6806
  4265  004390                     l6816:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;sort.c: 397: }
  4269                           ;sort.c: 399: T0CON = 0b00010111;
  4270  004390  0E17               	movlw	23
  4271  004392  6ED5               	movwf	4053,c	;volatile
  4272                           
  4273                           ;sort.c: 408: TMR0H = 0b10000101;
  4274  004394  0E85               	movlw	133
  4275  004396  6ED7               	movwf	4055,c	;volatile
  4276                           
  4277                           ;sort.c: 409: TMR0L = 0b11101110;
  4278  004398  0EEE               	movlw	238
  4279  00439A  6ED6               	movwf	4054,c	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;sort.c: 410: TMR0ON = 1;
  4283  00439C  8ED5               	bsf	4053,7,c	;volatile
  4284                           
  4285                           ; BSR set to: 0
  4286  00439E  0012               	return		;funcret
  4287  0043A0                     __end_of_initSortTimer:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _initGlobalVars *****************
  4307 ;; Defined at:
  4308 ;;		line 362 in file "sort.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    7
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_Loading
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text5
  4337  00424A                     __ptext5:
  4338                           	opt stack 0
  4339  00424A                     _initGlobalVars:
  4340                           	opt stack 21
  4341                           
  4342                           ;sort.c: 364: first = 0;
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;incstack = 0
  4346  00424A  0E00               	movlw	0
  4347  00424C  0101               	movlb	1	; () banked
  4348  00424E  6F3A               	movwf	(_first+1)& (0+255),b
  4349  004250  0E00               	movlw	0
  4350  004252  6F39               	movwf	_first& (0+255),b
  4351                           
  4352                           ;sort.c: 367: f_loadingNewCan = 0;
  4353  004254  0E00               	movlw	0
  4354  004256  0100               	movlb	0	; () banked
  4355  004258  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4356  00425A  0E00               	movlw	0
  4357  00425C  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4358                           
  4359                           ;sort.c: 368: f_lastCan = 0;
  4360  00425E  0E00               	movlw	0
  4361  004260  0100               	movlb	0	; () banked
  4362  004262  6FEF               	movwf	(_f_lastCan+1)& (0+255),b
  4363  004264  0E00               	movlw	0
  4364  004266  6FEE               	movwf	_f_lastCan& (0+255),b
  4365                           
  4366                           ;sort.c: 369: f_ID_receive = 1;
  4367  004268  0E00               	movlw	0
  4368  00426A  0101               	movlb	1	; () banked
  4369  00426C  6F30               	movwf	(_f_ID_receive+1)& (0+255),b
  4370  00426E  0E01               	movlw	1
  4371  004270  6F2F               	movwf	_f_ID_receive& (0+255),b
  4372                           
  4373                           ;sort.c: 370: f_can_coming_to_ID = 0;
  4374  004272  0E00               	movlw	0
  4375  004274  0101               	movlb	1	; () banked
  4376  004276  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4377  004278  0E00               	movlw	0
  4378  00427A  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  4379                           
  4380                           ;sort.c: 371: f_can_coming_to_distribution = 0;
  4381  00427C  0E00               	movlw	0
  4382  00427E  0101               	movlb	1	; () banked
  4383  004280  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4384  004282  0E00               	movlw	0
  4385  004284  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  4386                           
  4387                           ;sort.c: 372: f_can_distributed = 1;
  4388  004286  0E00               	movlw	0
  4389  004288  0101               	movlb	1	; () banked
  4390  00428A  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  4391  00428C  0E01               	movlw	1
  4392  00428E  6F35               	movwf	_f_can_distributed& (0+255),b
  4393                           
  4394                           ;sort.c: 373: f_most_recent_sort_time = 0;
  4395  004290  0E00               	movlw	0
  4396  004292  0101               	movlb	1	; () banked
  4397  004294  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4398  004296  0E00               	movlw	0
  4399  004298  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
  4400                           
  4401                           ;sort.c: 376: count_total = 0;
  4402  00429A  0E00               	movlw	0
  4403  00429C  0100               	movlb	0	; () banked
  4404  00429E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4405  0042A0  0E00               	movlw	0
  4406  0042A2  6FFE               	movwf	_count_total& (0+255),b
  4407                           
  4408                           ;sort.c: 377: count_pop_no_tab = 0;
  4409  0042A4  0E00               	movlw	0
  4410  0042A6  0101               	movlb	1	; () banked
  4411  0042A8  6F28               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4412  0042AA  0E00               	movlw	0
  4413  0042AC  6F27               	movwf	_count_pop_no_tab& (0+255),b
  4414                           
  4415                           ;sort.c: 378: count_pop_w_tab = 0;
  4416  0042AE  0E00               	movlw	0
  4417  0042B0  0101               	movlb	1	; () banked
  4418  0042B2  6F2A               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4419  0042B4  0E00               	movlw	0
  4420  0042B6  6F29               	movwf	_count_pop_w_tab& (0+255),b
  4421                           
  4422                           ;sort.c: 379: count_can_w_lab = 0;
  4423  0042B8  0E00               	movlw	0
  4424  0042BA  0101               	movlb	1	; () banked
  4425  0042BC  6F26               	movwf	(_count_can_w_lab+1)& (0+255),b
  4426  0042BE  0E00               	movlw	0
  4427  0042C0  6F25               	movwf	_count_can_w_lab& (0+255),b
  4428                           
  4429                           ;sort.c: 380: count_can_no_lab = 0;
  4430  0042C2  0E00               	movlw	0
  4431  0042C4  0101               	movlb	1	; () banked
  4432  0042C6  6F24               	movwf	(_count_can_no_lab+1)& (0+255),b
  4433  0042C8  0E00               	movlw	0
  4434  0042CA  6F23               	movwf	_count_can_no_lab& (0+255),b
  4435                           
  4436                           ;sort.c: 383: most_recent_sort_time = 999;
  4437  0042CC  0E03               	movlw	3
  4438  0042CE  6E6E               	movwf	_most_recent_sort_time+1,c
  4439  0042D0  0EE7               	movlw	231
  4440  0042D2  6E6D               	movwf	_most_recent_sort_time,c
  4441                           
  4442                           ;sort.c: 386: servo_timer_counter = 0;
  4443  0042D4  0E00               	movlw	0
  4444  0042D6  6E72               	movwf	_servo_timer_counter+1,c	;volatile
  4445  0042D8  0E00               	movlw	0
  4446  0042DA  6E71               	movwf	_servo_timer_counter,c	;volatile
  4447                           
  4448                           ;sort.c: 387: servo_timer_target = 9999;
  4449  0042DC  0E27               	movlw	39
  4450  0042DE  6E74               	movwf	_servo_timer_target+1,c	;volatile
  4451  0042E0  0E0F               	movlw	15
  4452  0042E2  6E73               	movwf	_servo_timer_target,c	;volatile
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;sort.c: 388: pan_servo_state = -1;
  4456  0042E4  686F               	setf	_pan_servo_state,c	;volatile
  4457  0042E6  6870               	setf	_pan_servo_state+1,c	;volatile
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;sort.c: 389: tilt_servo_state = -1;
  4461  0042E8  6875               	setf	_tilt_servo_state,c	;volatile
  4462  0042EA  6876               	setf	_tilt_servo_state+1,c	;volatile
  4463                           
  4464                           ;sort.c: 390: f_panning_to_bin = 0;
  4465  0042EC  0E00               	movlw	0
  4466  0042EE  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4467  0042F0  0E00               	movlw	0
  4468  0042F2  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4469                           
  4470                           ; BSR set to: 1
  4471  0042F4  0012               	return		;funcret
  4472  0042F6                     __end_of_initGlobalVars:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           prodh	equ	0xFF4
  4479                           prodl	equ	0xFF3
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postdec1	equ	0xFE5
  4483                           fsr1l	equ	0xFE1
  4484                           indf2	equ	0xFDF
  4485                           postinc2	equ	0xFDE
  4486                           postdec2	equ	0xFDD
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           
  4491 ;; *************** function _getMAG *****************
  4492 ;; Defined at:
  4493 ;;		line 480 in file "sort.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;		None
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        2 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    9
  4514 ;; This function calls:
  4515 ;;		_readMAG
  4516 ;; This function is called by:
  4517 ;;		_Loading
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text6
  4522  004DDC                     __ptext6:
  4523                           	opt stack 0
  4524  004DDC                     _getMAG:
  4525                           	opt stack 19
  4526                           
  4527                           ;sort.c: 481: readMAG();
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;incstack = 0
  4531  004DDC  EC16  F026         	call	_readMAG	;wreg free
  4532                           
  4533                           ;sort.c: 483: if(MAG_signal==1){
  4534  004DE0  0100               	movlb	0	; () banked
  4535  004DE2  05E8               	decf	_MAG_signal& (0+255),w,b
  4536  004DE4  0100               	movlb	0	; () banked
  4537  004DE6  11E9               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4538  004DE8  A4D8               	btfss	status,2,c
  4539  004DEA  0012               	return	
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;sort.c: 484: _delay((unsigned long)((500)*(32000000/4000.0)));
  4543  004DEC  0E15               	movlw	21
  4544  004DEE  0100               	movlb	0	; () banked
  4545  004DF0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4546  004DF2  0E4B               	movlw	75
  4547  004DF4  0100               	movlb	0	; () banked
  4548  004DF6  6F86               	movwf	??_getMAG& (0+255),b
  4549  004DF8  0EBE               	movlw	190
  4550  004DFA                     u8767:
  4551  004DFA  2EE8               	decfsz	wreg,f,c
  4552  004DFC  D7FE               	bra	u8767
  4553  004DFE  2F86               	decfsz	??_getMAG& (0+255),f,b
  4554  004E00  D7FC               	bra	u8767
  4555  004E02  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4556  004E04  D7FA               	bra	u8767
  4557  004E06  F000               	nop	
  4558                           
  4559                           ;sort.c: 485: readMAG();
  4560  004E08  EC16  F026         	call	_readMAG	;wreg free
  4561  004E0C  0012               	return	
  4562  004E0E                     __end_of_getMAG:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postdec1	equ	0xFE5
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _getIR *****************
  4582 ;; Defined at:
  4583 ;;		line 464 in file "sort.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  i               2    7[BANK0 ] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        3 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    9
  4604 ;; This function calls:
  4605 ;;		_readIR
  4606 ;; This function is called by:
  4607 ;;		_Loading
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text7
  4612  00475A                     __ptext7:
  4613                           	opt stack 0
  4614  00475A                     _getIR:
  4615                           	opt stack 19
  4616                           
  4617                           ;sort.c: 465: readIR();
  4618                           
  4619                           ;incstack = 0
  4620  00475A  ECF0  F025         	call	_readIR	;wreg free
  4621                           
  4622                           ;sort.c: 466: for(int i = 0; i < 150; i++){
  4623  00475E  0E00               	movlw	0
  4624  004760  0100               	movlb	0	; () banked
  4625  004762  6F88               	movwf	(getIR@i+1)& (0+255),b
  4626  004764  0E00               	movlw	0
  4627  004766  6F87               	movwf	getIR@i& (0+255),b
  4628  004768                     l6898:
  4629                           
  4630                           ; BSR set to: 0
  4631  004768  0100               	movlb	0	; () banked
  4632  00476A  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4633  00476C  D008               	goto	l6902
  4634  00476E  0100               	movlb	0	; () banked
  4635  004770  5188               	movf	(getIR@i+1)& (0+255),w,b
  4636  004772  E11A               	bnz	l6914
  4637  004774  0E96               	movlw	150
  4638  004776  0100               	movlb	0	; () banked
  4639  004778  5D87               	subwf	getIR@i& (0+255),w,b
  4640  00477A  B0D8               	btfsc	status,0,c
  4641  00477C  D015               	goto	l6914
  4642  00477E                     l6902:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;sort.c: 467: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4646  00477E  0E06               	movlw	6
  4647  004780  0100               	movlb	0	; () banked
  4648  004782  6F86               	movwf	??_getIR& (0+255),b
  4649  004784  0E30               	movlw	48
  4650  004786                     u8777:
  4651  004786  2EE8               	decfsz	wreg,f,c
  4652  004788  D7FE               	bra	u8777
  4653  00478A  2F86               	decfsz	??_getIR& (0+255),f,b
  4654  00478C  D7FC               	bra	u8777
  4655  00478E  F000               	nop	
  4656                           
  4657                           ;sort.c: 468: readIR();
  4658  004790  ECF0  F025         	call	_readIR	;wreg free
  4659                           
  4660                           ;sort.c: 469: if(!IR_signal){
  4661  004794  0100               	movlb	0	; () banked
  4662  004796  51E6               	movf	_IR_signal& (0+255),w,b
  4663  004798  0100               	movlb	0	; () banked
  4664  00479A  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4665  00479C  B4D8               	btfsc	status,2,c
  4666  00479E  D004               	goto	l6914
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;sort.c: 470: break;
  4674  0047A0  0100               	movlb	0	; () banked
  4675  0047A2  4B87               	infsnz	getIR@i& (0+255),f,b
  4676  0047A4  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4677  0047A6  D7E0               	goto	l6898
  4678  0047A8                     l6914:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;sort.c: 471: }
  4682                           ;sort.c: 472: }
  4683                           ;sort.c: 473: if(IR_signal==1){
  4684  0047A8  0100               	movlb	0	; () banked
  4685  0047AA  05E6               	decf	_IR_signal& (0+255),w,b
  4686  0047AC  0100               	movlb	0	; () banked
  4687  0047AE  11E7               	iorwf	(_IR_signal+1)& (0+255),w,b
  4688  0047B0  A4D8               	btfss	status,2,c
  4689  0047B2  D006               	goto	l6918
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;sort.c: 474: f_loadingNewCan = 1;
  4693  0047B4  0E00               	movlw	0
  4694  0047B6  0100               	movlb	0	; () banked
  4695  0047B8  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4696  0047BA  0E01               	movlw	1
  4697  0047BC  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4698                           
  4699                           ;sort.c: 475: }
  4700  0047BE  0012               	return	
  4701  0047C0                     l6918:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;sort.c: 476: else{
  4705                           ;sort.c: 477: f_loadingNewCan = 0;
  4706  0047C0  0E00               	movlw	0
  4707  0047C2  0100               	movlb	0	; () banked
  4708  0047C4  6FF1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4709  0047C6  0E00               	movlw	0
  4710  0047C8  6FF0               	movwf	_f_loadingNewCan& (0+255),b
  4711  0047CA  0012               	return	
  4712  0047CC                     __end_of_getIR:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           postdec1	equ	0xFE5
  4723                           fsr1l	equ	0xFE1
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _readIR *****************
  4732 ;; Defined at:
  4733 ;;		line 23 in file "ADCFunctionality.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;  res             2    4[BANK0 ] int 
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2, status,0, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        4 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    8
  4754 ;; This function calls:
  4755 ;;		_readADC
  4756 ;; This function is called by:
  4757 ;;		_Loading
  4758 ;;		_getIR
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text8
  4763  004BE0                     __ptext8:
  4764                           	opt stack 0
  4765  004BE0                     _readIR:
  4766                           	opt stack 20
  4767                           
  4768                           ;ADCFunctionality.c: 24: readADC(0);
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;incstack = 0
  4772  004BE0  0E00               	movlw	0
  4773  004BE2  EC54  F028         	call	_readADC
  4774                           
  4775                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4776  004BE6  50C3               	movf	4035,w,c	;volatile
  4777  004BE8  CFC4 F082          	movff	4036,??_readIR	;volatile
  4778  004BEC  0100               	movlb	0	; () banked
  4779  004BEE  6B83               	clrf	(??_readIR+1)& (0+255),b
  4780  004BF0  C082  F083         	movff	??_readIR,??_readIR+1
  4781  004BF4  0100               	movlb	0	; () banked
  4782  004BF6  6B82               	clrf	??_readIR& (0+255),b
  4783  004BF8  0100               	movlb	0	; () banked
  4784  004BFA  1182               	iorwf	??_readIR& (0+255),w,b
  4785  004BFC  0100               	movlb	0	; () banked
  4786  004BFE  6F84               	movwf	readIR@res& (0+255),b
  4787  004C00  0100               	movlb	0	; () banked
  4788  004C02  5183               	movf	(??_readIR+1)& (0+255),w,b
  4789  004C04  0100               	movlb	0	; () banked
  4790  004C06  6F85               	movwf	(readIR@res+1)& (0+255),b
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4794  004C08  0100               	movlb	0	; () banked
  4795  004C0A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4796  004C0C  D00A               	goto	u4500
  4797  004C0E  0E21               	movlw	33
  4798  004C10  0100               	movlb	0	; () banked
  4799  004C12  5D84               	subwf	readIR@res& (0+255),w,b
  4800  004C14  0E03               	movlw	3
  4801  004C16  0100               	movlb	0	; () banked
  4802  004C18  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4803  004C1A  A0D8               	btfss	status,0,c
  4804  004C1C  D002               	goto	u4500
  4805  004C1E  0E01               	movlw	1
  4806  004C20  D001               	goto	u4510
  4807  004C22                     u4500:
  4808  004C22  0E00               	movlw	0
  4809  004C24                     u4510:
  4810  004C24  0100               	movlb	0	; () banked
  4811  004C26  6FE6               	movwf	_IR_signal& (0+255),b
  4812  004C28  6BE7               	clrf	(_IR_signal+1)& (0+255),b
  4813                           
  4814                           ; BSR set to: 0
  4815  004C2A  0012               	return		;funcret
  4816  004C2C                     __end_of_readIR:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _ID *****************
  4836 ;; Defined at:
  4837 ;;		line 254 in file "sort.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  i               2    6[BANK0 ] int 
  4842 ;;  i               2    4[BANK0 ] int 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:        6 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    8
  4859 ;; This function calls:
  4860 ;;		_delay_ms
  4861 ;; This function is called by:
  4862 ;;		_sort
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text9
  4867  0030DC                     __ptext9:
  4868                           	opt stack 0
  4869  0030DC                     _ID:
  4870                           	opt stack 21
  4871                           
  4872                           ;sort.c: 255: if(f_can_coming_to_ID){
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;incstack = 0
  4876  0030DC  0101               	movlb	1	; () banked
  4877  0030DE  5131               	movf	_f_can_coming_to_ID& (0+255),w,b
  4878  0030E0  0101               	movlb	1	; () banked
  4879  0030E2  1132               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  4880  0030E4  B4D8               	btfsc	status,2,c
  4881  0030E6  0012               	return	
  4882                           
  4883                           ; BSR set to: 1
  4884                           ;sort.c: 257: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4885  0030E8  0E3D               	movlw	61
  4886  0030EA  0100               	movlb	0	; () banked
  4887  0030EC  6F83               	movwf	(??_ID+1)& (0+255),b
  4888  0030EE  0EE1               	movlw	225
  4889  0030F0  0100               	movlb	0	; () banked
  4890  0030F2  6F82               	movwf	??_ID& (0+255),b
  4891  0030F4  0E3F               	movlw	63
  4892  0030F6                     u8787:
  4893  0030F6  2EE8               	decfsz	wreg,f,c
  4894  0030F8  D7FE               	bra	u8787
  4895  0030FA  2F82               	decfsz	??_ID& (0+255),f,b
  4896  0030FC  D7FC               	bra	u8787
  4897  0030FE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4898  003100  D7FA               	bra	u8787
  4899  003102  D000               	nop2	
  4900                           
  4901                           ;sort.c: 259: LATAbits.LATA3 = 1;
  4902  003104  8689               	bsf	3977,3,c	;volatile
  4903                           
  4904                           ;sort.c: 260: _delay((unsigned long)((600)*(32000000/4000.0)));
  4905  003106  0E19               	movlw	25
  4906  003108  0100               	movlb	0	; () banked
  4907  00310A  6F83               	movwf	(??_ID+1)& (0+255),b
  4908  00310C  0E5A               	movlw	90
  4909  00310E  0100               	movlb	0	; () banked
  4910  003110  6F82               	movwf	??_ID& (0+255),b
  4911  003112  0EB1               	movlw	177
  4912  003114                     u8797:
  4913  003114  2EE8               	decfsz	wreg,f,c
  4914  003116  D7FE               	bra	u8797
  4915  003118  2F82               	decfsz	??_ID& (0+255),f,b
  4916  00311A  D7FC               	bra	u8797
  4917  00311C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4918  00311E  D7FA               	bra	u8797
  4919  003120  D000               	nop2	
  4920                           
  4921                           ;sort.c: 261: sensor_outputs[1] = PORTAbits.RA2;
  4922  003122  A480               	btfss	3968,2,c	;volatile
  4923  003124  D004               	goto	u5870
  4924  003126  0100               	movlb	0	; () banked
  4925  003128  6B82               	clrf	??_ID& (0+255),b
  4926  00312A  2B82               	incf	??_ID& (0+255),f,b
  4927  00312C  D002               	goto	u5878
  4928  00312E                     u5870:
  4929  00312E  0100               	movlb	0	; () banked
  4930  003130  6B82               	clrf	??_ID& (0+255),b
  4931  003132                     u5878:
  4932  003132  0100               	movlb	0	; () banked
  4933  003134  5182               	movf	??_ID& (0+255),w,b
  4934  003136  0100               	movlb	0	; () banked
  4935  003138  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4936  00313A  6BE5               	clrf	(_sensor_outputs+3)& (0+255),b
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;sort.c: 262: LATAbits.LATA3 = 0;
  4940  00313C  9689               	bcf	3977,3,c	;volatile
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;sort.c: 264: _delay((unsigned long)((200)*(32000000/4000.0)));
  4944  00313E  0E09               	movlw	9
  4945  003140  0100               	movlb	0	; () banked
  4946  003142  6F83               	movwf	(??_ID+1)& (0+255),b
  4947  003144  0E1E               	movlw	30
  4948  003146  0100               	movlb	0	; () banked
  4949  003148  6F82               	movwf	??_ID& (0+255),b
  4950  00314A  0EE4               	movlw	228
  4951  00314C                     u8807:
  4952  00314C  2EE8               	decfsz	wreg,f,c
  4953  00314E  D7FE               	bra	u8807
  4954  003150  2F82               	decfsz	??_ID& (0+255),f,b
  4955  003152  D7FC               	bra	u8807
  4956  003154  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4957  003156  D7FA               	bra	u8807
  4958  003158  F000               	nop	
  4959                           
  4960                           ;sort.c: 265: LATAbits.LATA3 = 1;
  4961  00315A  8689               	bsf	3977,3,c	;volatile
  4962                           
  4963                           ;sort.c: 266: _delay((unsigned long)((600)*(32000000/4000.0)));
  4964  00315C  0E19               	movlw	25
  4965  00315E  0100               	movlb	0	; () banked
  4966  003160  6F83               	movwf	(??_ID+1)& (0+255),b
  4967  003162  0E5A               	movlw	90
  4968  003164  0100               	movlb	0	; () banked
  4969  003166  6F82               	movwf	??_ID& (0+255),b
  4970  003168  0EB1               	movlw	177
  4971  00316A                     u8817:
  4972  00316A  2EE8               	decfsz	wreg,f,c
  4973  00316C  D7FE               	bra	u8817
  4974  00316E  2F82               	decfsz	??_ID& (0+255),f,b
  4975  003170  D7FC               	bra	u8817
  4976  003172  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4977  003174  D7FA               	bra	u8817
  4978  003176  D000               	nop2	
  4979                           
  4980                           ;sort.c: 267: sensor_outputs[1] = (sensor_outputs[1] | PORTAbits.RA2);
  4981  003178  A480               	btfss	3968,2,c	;volatile
  4982  00317A  D004               	goto	u5880
  4983  00317C  0100               	movlb	0	; () banked
  4984  00317E  6B82               	clrf	??_ID& (0+255),b
  4985  003180  2B82               	incf	??_ID& (0+255),f,b
  4986  003182  D002               	goto	u5888
  4987  003184                     u5880:
  4988  003184  0100               	movlb	0	; () banked
  4989  003186  6B82               	clrf	??_ID& (0+255),b
  4990  003188                     u5888:
  4991  003188  0100               	movlb	0	; () banked
  4992  00318A  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  4993  00318C  0100               	movlb	0	; () banked
  4994  00318E  1182               	iorwf	??_ID& (0+255),w,b
  4995  003190  0100               	movlb	0	; () banked
  4996  003192  6FE4               	movwf	(_sensor_outputs+2)& (0+255),b
  4997  003194  0100               	movlb	0	; () banked
  4998  003196  51E5               	movf	(_sensor_outputs+3)& (0+255),w,b
  4999  003198  0100               	movlb	0	; () banked
  5000  00319A  6FE5               	movwf	(_sensor_outputs+3)& (0+255),b
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;sort.c: 275: if(!sensor_outputs[0]){
  5004  00319C  0100               	movlb	0	; () banked
  5005  00319E  51E2               	movf	_sensor_outputs& (0+255),w,b
  5006  0031A0  0100               	movlb	0	; () banked
  5007  0031A2  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5008  0031A4  A4D8               	btfss	status,2,c
  5009  0031A6  D016               	goto	l7442
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;sort.c: 276: if(!sensor_outputs[1]){
  5013  0031A8  0100               	movlb	0	; () banked
  5014  0031AA  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5015  0031AC  0100               	movlb	0	; () banked
  5016  0031AE  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5017  0031B0  A4D8               	btfss	status,2,c
  5018  0031B2  D008               	goto	l7438
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;sort.c: 277: count_pop_no_tab++;
  5022  0031B4  0101               	movlb	1	; () banked
  5023  0031B6  4B27               	infsnz	_count_pop_no_tab& (0+255),f,b
  5024  0031B8  2B28               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5025                           
  5026                           ; BSR set to: 1
  5027                           ;sort.c: 278: cur_can = 0;
  5028  0031BA  0E00               	movlw	0
  5029  0031BC  0101               	movlb	1	; () banked
  5030  0031BE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5031  0031C0  0E00               	movlw	0
  5032  0031C2  D007               	goto	L4
  5033  0031C4                     l7438:
  5034                           
  5035                           ;sort.c: 280: else{
  5036                           ;sort.c: 281: count_pop_w_tab++;
  5037  0031C4  0101               	movlb	1	; () banked
  5038  0031C6  4B29               	infsnz	_count_pop_w_tab& (0+255),f,b
  5039  0031C8  2B2A               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5040                           
  5041                           ; BSR set to: 1
  5042                           ;sort.c: 282: cur_can = 1;
  5043  0031CA  0E00               	movlw	0
  5044  0031CC  0101               	movlb	1	; () banked
  5045  0031CE  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5046  0031D0  0E01               	movlw	1
  5047  0031D2                     L4:
  5048  0031D2  6F2B               	movwf	_cur_can& (0+255),b
  5049  0031D4                     l7442:
  5050                           
  5051                           ;sort.c: 283: }
  5052                           ;sort.c: 284: }
  5053                           ;sort.c: 285: if(sensor_outputs[0]){
  5054  0031D4  0100               	movlb	0	; () banked
  5055  0031D6  51E2               	movf	_sensor_outputs& (0+255),w,b
  5056  0031D8  0100               	movlb	0	; () banked
  5057  0031DA  11E3               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5058  0031DC  B4D8               	btfsc	status,2,c
  5059  0031DE  D016               	goto	l7454
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;sort.c: 286: if(!sensor_outputs[1]){
  5063  0031E0  0100               	movlb	0	; () banked
  5064  0031E2  51E4               	movf	(_sensor_outputs+2)& (0+255),w,b
  5065  0031E4  0100               	movlb	0	; () banked
  5066  0031E6  11E5               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5067  0031E8  A4D8               	btfss	status,2,c
  5068  0031EA  D008               	goto	l7450
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;sort.c: 287: count_can_w_lab++;
  5072  0031EC  0101               	movlb	1	; () banked
  5073  0031EE  4B25               	infsnz	_count_can_w_lab& (0+255),f,b
  5074  0031F0  2B26               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5075                           
  5076                           ; BSR set to: 1
  5077                           ;sort.c: 288: cur_can = 2;
  5078  0031F2  0E00               	movlw	0
  5079  0031F4  0101               	movlb	1	; () banked
  5080  0031F6  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5081  0031F8  0E02               	movlw	2
  5082  0031FA  D007               	goto	L5
  5083  0031FC                     l7450:
  5084                           
  5085                           ;sort.c: 290: else{
  5086                           ;sort.c: 291: count_can_no_lab++;
  5087  0031FC  0101               	movlb	1	; () banked
  5088  0031FE  4B23               	infsnz	_count_can_no_lab& (0+255),f,b
  5089  003200  2B24               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5090                           
  5091                           ; BSR set to: 1
  5092                           ;sort.c: 292: cur_can = 3;
  5093  003202  0E00               	movlw	0
  5094  003204  0101               	movlb	1	; () banked
  5095  003206  6F2C               	movwf	(_cur_can+1)& (0+255),b
  5096  003208  0E03               	movlw	3
  5097  00320A                     L5:
  5098  00320A  6F2B               	movwf	_cur_can& (0+255),b
  5099  00320C                     l7454:
  5100                           
  5101                           ;sort.c: 293: }
  5102                           ;sort.c: 294: }
  5103                           ;sort.c: 295: LATAbits.LATA3 = 0;
  5104  00320C  9689               	bcf	3977,3,c	;volatile
  5105  00320E                     l7456:
  5106  00320E  0101               	movlb	1	; () banked
  5107  003210  5135               	movf	_f_can_distributed& (0+255),w,b
  5108  003212  0101               	movlb	1	; () banked
  5109  003214  1136               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5110  003216  B4D8               	btfsc	status,2,c
  5111  003218  D7FA               	goto	l7456
  5112                           
  5113                           ; BSR set to: 1
  5114                           ;sort.c: 298: LATAbits.LATA3 = 1;
  5115  00321A  8689               	bsf	3977,3,c	;volatile
  5116                           
  5117                           ; BSR set to: 1
  5118                           ;sort.c: 301: for(int i=0;i<10000;i++)
  5119  00321C  0E00               	movlw	0
  5120  00321E  0100               	movlb	0	; () banked
  5121  003220  6F85               	movwf	(ID@i+1)& (0+255),b
  5122  003222  0E00               	movlw	0
  5123  003224  6F84               	movwf	ID@i& (0+255),b
  5124  003226                     l7460:
  5125                           
  5126                           ; BSR set to: 0
  5127  003226  0100               	movlb	0	; () banked
  5128  003228  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  5129  00322A  D008               	goto	l808
  5130  00322C  0E10               	movlw	16
  5131  00322E  0100               	movlb	0	; () banked
  5132  003230  5D84               	subwf	ID@i& (0+255),w,b
  5133  003232  0E27               	movlw	39
  5134  003234  0100               	movlb	0	; () banked
  5135  003236  5985               	subwfb	(ID@i+1)& (0+255),w,b
  5136  003238  B0D8               	btfsc	status,0,c
  5137  00323A  D00D               	goto	l809
  5138  00323C                     l808:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;sort.c: 302: {
  5142                           ;sort.c: 303: LATCbits.LATC0 = 1;
  5143  00323C  808B               	bsf	3979,0,c	;volatile
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;sort.c: 304: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5147  00323E  0E1A               	movlw	26
  5148  003240                     u8827:
  5149  003240  2EE8               	decfsz	wreg,f,c
  5150  003242  D7FE               	bra	u8827
  5151  003244  D000               	nop2	
  5152                           
  5153                           ;sort.c: 305: LATCbits.LATC0 = 0;
  5154  003246  908B               	bcf	3979,0,c	;volatile
  5155                           
  5156                           ;sort.c: 306: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5157  003248  0EF0               	movlw	240
  5158  00324A                     u8837:
  5159  00324A  2EE8               	decfsz	wreg,f,c
  5160  00324C  D7FE               	bra	u8837
  5161  00324E  0100               	movlb	0	; () banked
  5162  003250  4B84               	infsnz	ID@i& (0+255),f,b
  5163  003252  2B85               	incf	(ID@i+1)& (0+255),f,b
  5164  003254  D7E8               	goto	l7460
  5165  003256                     l809:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;sort.c: 307: }
  5169                           ;sort.c: 308: LATCbits.LATC0 = 0;
  5170  003256  908B               	bcf	3979,0,c	;volatile
  5171                           
  5172                           ;sort.c: 310: LATAbits.LATA3 = 0;
  5173  003258  9689               	bcf	3977,3,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;sort.c: 314: f_can_coming_to_distribution = 1;
  5177  00325A  0E00               	movlw	0
  5178  00325C  0101               	movlb	1	; () banked
  5179  00325E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5180  003260  0E01               	movlw	1
  5181  003262  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5182                           
  5183                           ; BSR set to: 1
  5184                           ;sort.c: 315: _delay((unsigned long)((1500)*(32000000/4000.0)));
  5185  003264  0E3D               	movlw	61
  5186  003266  0100               	movlb	0	; () banked
  5187  003268  6F83               	movwf	(??_ID+1)& (0+255),b
  5188  00326A  0EE1               	movlw	225
  5189  00326C  0100               	movlb	0	; () banked
  5190  00326E  6F82               	movwf	??_ID& (0+255),b
  5191  003270  0E3F               	movlw	63
  5192  003272                     u8847:
  5193  003272  2EE8               	decfsz	wreg,f,c
  5194  003274  D7FE               	bra	u8847
  5195  003276  2F82               	decfsz	??_ID& (0+255),f,b
  5196  003278  D7FC               	bra	u8847
  5197  00327A  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  5198  00327C  D7FA               	bra	u8847
  5199  00327E  D000               	nop2	
  5200                           
  5201                           ;sort.c: 316: LATCbits.LATC0 = 1;
  5202  003280  808B               	bsf	3979,0,c	;volatile
  5203                           
  5204                           ;sort.c: 319: if(!f_lastCan){
  5205  003282  0100               	movlb	0	; () banked
  5206  003284  51EE               	movf	_f_lastCan& (0+255),w,b
  5207  003286  0100               	movlb	0	; () banked
  5208  003288  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5209  00328A  A4D8               	btfss	status,2,c
  5210  00328C  D032               	goto	l7492
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;sort.c: 320: for(int i=0; i<46; i++){
  5214  00328E  0E00               	movlw	0
  5215  003290  0100               	movlb	0	; () banked
  5216  003292  6F87               	movwf	(ID@i_1173+1)& (0+255),b
  5217  003294  0E00               	movlw	0
  5218  003296  6F86               	movwf	ID@i_1173& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221  003298  0100               	movlb	0	; () banked
  5222  00329A  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5223  00329C  D008               	goto	l7484
  5224  00329E  0100               	movlb	0	; () banked
  5225  0032A0  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5226  0032A2  E126               	bnz	l812
  5227  0032A4  0E2E               	movlw	46
  5228  0032A6  0100               	movlb	0	; () banked
  5229  0032A8  5D86               	subwf	ID@i_1173& (0+255),w,b
  5230  0032AA  B0D8               	btfsc	status,0,c
  5231  0032AC  D021               	goto	l812
  5232  0032AE                     l7484:
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;sort.c: 321: LATBbits.LATB2 = !LATBbits.LATB2;
  5236  0032AE  B48A               	btfsc	3978,2,c	;volatile
  5237  0032B0  D004               	goto	u5980
  5238  0032B2  0100               	movlb	0	; () banked
  5239  0032B4  6B82               	clrf	??_ID& (0+255),b
  5240  0032B6  2B82               	incf	??_ID& (0+255),f,b
  5241  0032B8  D002               	goto	u5998
  5242  0032BA                     u5980:
  5243  0032BA  0100               	movlb	0	; () banked
  5244  0032BC  6B82               	clrf	??_ID& (0+255),b
  5245  0032BE                     u5998:
  5246  0032BE  0100               	movlb	0	; () banked
  5247  0032C0  4782               	rlncf	??_ID& (0+255),f,b
  5248  0032C2  4782               	rlncf	??_ID& (0+255),f,b
  5249  0032C4  508A               	movf	3978,w,c	;volatile
  5250  0032C6  0100               	movlb	0	; () banked
  5251  0032C8  1982               	xorwf	??_ID& (0+255),w,b
  5252  0032CA  0BFB               	andlw	-5
  5253  0032CC  1982               	xorwf	??_ID& (0+255),w,b
  5254  0032CE  6E8A               	movwf	3978,c	;volatile
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;sort.c: 322: delay_ms(45-i);
  5258  0032D0  0100               	movlb	0	; () banked
  5259  0032D2  5186               	movf	ID@i_1173& (0+255),w,b
  5260  0032D4  0800               	sublw	0
  5261  0032D6  0F2D               	addlw	45
  5262  0032D8  EC7F  F028         	call	_delay_ms
  5263  0032DC  0100               	movlb	0	; () banked
  5264  0032DE  4B86               	infsnz	ID@i_1173& (0+255),f,b
  5265  0032E0  2B87               	incf	(ID@i_1173+1)& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 0
  5268  0032E2  0100               	movlb	0	; () banked
  5269  0032E4  BF87               	btfsc	(ID@i_1173+1)& (0+255),7,b
  5270  0032E6  D7E3               	goto	l7484
  5271  0032E8  0100               	movlb	0	; () banked
  5272  0032EA  5187               	movf	(ID@i_1173+1)& (0+255),w,b
  5273  0032EC  E101               	bnz	u6000
  5274  0032EE  D7DA               	goto	L6
  5275  0032F0                     u6000:
  5276  0032F0                     l812:
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;sort.c: 323: }
  5280                           ;sort.c: 324: LATBbits.LATB2 = 1;
  5281  0032F0  848A               	bsf	3978,2,c	;volatile
  5282  0032F2                     l7492:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;sort.c: 325: }
  5286                           ;sort.c: 327: f_can_coming_to_ID = 0;
  5287  0032F2  0E00               	movlw	0
  5288  0032F4  0101               	movlb	1	; () banked
  5289  0032F6  6F32               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5290  0032F8  0E00               	movlw	0
  5291  0032FA  6F31               	movwf	_f_can_coming_to_ID& (0+255),b
  5292  0032FC  0012               	return	
  5293  0032FE                     __end_of_ID:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           postdec1	equ	0xFE5
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function _delay_ms *****************
  5313 ;; Defined at:
  5314 ;;		line 577 in file "sort.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  milliseconds    1    wreg     unsigned char 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      void 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;Total ram usage:        2 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    7
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Loading
  5339 ;;		_ID
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text10
  5344  0050FE                     __ptext10:
  5345                           	opt stack 0
  5346  0050FE                     _delay_ms:
  5347                           	opt stack 21
  5348                           
  5349                           ; BSR set to: 1
  5350                           ;incstack = 0
  5351                           ;delay_ms@milliseconds stored from wreg
  5352  0050FE  0100               	movlb	0	; () banked
  5353  005100  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  5354                           
  5355                           ;sort.c: 578: while(milliseconds > 0)
  5356  005102  D00B               	goto	l6878
  5357  005104                     l6874:
  5358                           
  5359                           ;sort.c: 579: {
  5360                           ;sort.c: 580: milliseconds--;
  5361  005104  0100               	movlb	0	; () banked
  5362  005106  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;sort.c: 581: _delay((unsigned long)((990)*(32000000/4000000.0)));
  5366  005108  0E0B               	movlw	11
  5367  00510A  0100               	movlb	0	; () banked
  5368  00510C  6F80               	movwf	??_delay_ms& (0+255),b
  5369  00510E  0E47               	movlw	71
  5370  005110                     u8857:
  5371  005110  2EE8               	decfsz	wreg,f,c
  5372  005112  D7FE               	bra	u8857
  5373  005114  2F80               	decfsz	??_delay_ms& (0+255),f,b
  5374  005116  D7FC               	bra	u8857
  5375  005118  D000               	nop2	
  5376  00511A                     l6878:
  5377  00511A  0100               	movlb	0	; () banked
  5378  00511C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  5379  00511E  0100               	movlb	0	; () banked
  5380  005120  B4D8               	btfsc	status,2,c
  5381  005122  0012               	return	
  5382  005124  D7EF               	goto	l6874
  5383  005126                     __end_of_delay_ms:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _Distribution *****************
  5403 ;; Defined at:
  5404 ;;		line 330 in file "sort.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;Total ram usage:        2 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    8
  5425 ;; This function calls:
  5426 ;;		_updateServoPosition
  5427 ;; This function is called by:
  5428 ;;		_sort
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text11
  5433  003E54                     __ptext11:
  5434                           	opt stack 0
  5435  003E54                     _Distribution:
  5436                           	opt stack 21
  5437                           
  5438                           ;sort.c: 331: if(f_can_coming_to_distribution){
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;incstack = 0
  5442  003E54  0101               	movlb	1	; () banked
  5443  003E56  5133               	movf	_f_can_coming_to_distribution& (0+255),w,b
  5444  003E58  0101               	movlb	1	; () banked
  5445  003E5A  1134               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  5446  003E5C  B4D8               	btfsc	status,2,c
  5447  003E5E  0012               	return	
  5448                           
  5449                           ; BSR set to: 1
  5450                           ;sort.c: 332: f_can_distributed = 0;
  5451  003E60  0E00               	movlw	0
  5452  003E62  0101               	movlb	1	; () banked
  5453  003E64  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
  5454  003E66  0E00               	movlw	0
  5455  003E68  6F35               	movwf	_f_can_distributed& (0+255),b
  5456                           
  5457                           ;sort.c: 339: switch(cur_can){
  5458  003E6A  D034               	goto	l7508
  5459  003E6C                     l7498:
  5460                           
  5461                           ;sort.c: 341: updateServoPosition(500, 1);
  5462  003E6C  0E01               	movlw	1
  5463  003E6E  0100               	movlb	0	; () banked
  5464  003E70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5465  003E72  0EF4               	movlw	244
  5466  003E74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5467  003E76  0E00               	movlw	0
  5468  003E78  0100               	movlb	0	; () banked
  5469  003E7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5470  003E7C  0E01               	movlw	1
  5471  003E7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5472  003E80  ECAA  F022         	call	_updateServoPosition	;wreg free
  5473                           
  5474                           ;sort.c: 342: break;
  5475  003E84  D03E               	goto	l7510
  5476  003E86                     l7500:
  5477                           
  5478                           ;sort.c: 344: updateServoPosition(850, 1);
  5479  003E86  0E03               	movlw	3
  5480  003E88  0100               	movlb	0	; () banked
  5481  003E8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5482  003E8C  0E52               	movlw	82
  5483  003E8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5484  003E90  0E00               	movlw	0
  5485  003E92  0100               	movlb	0	; () banked
  5486  003E94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5487  003E96  0E01               	movlw	1
  5488  003E98  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5489  003E9A  ECAA  F022         	call	_updateServoPosition	;wreg free
  5490                           
  5491                           ;sort.c: 345: break;
  5492  003E9E  D031               	goto	l7510
  5493  003EA0                     l7502:
  5494                           
  5495                           ;sort.c: 347: updateServoPosition(1670, 1);
  5496  003EA0  0E06               	movlw	6
  5497  003EA2  0100               	movlb	0	; () banked
  5498  003EA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5499  003EA6  0E86               	movlw	134
  5500  003EA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5501  003EAA  0E00               	movlw	0
  5502  003EAC  0100               	movlb	0	; () banked
  5503  003EAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5504  003EB0  0E01               	movlw	1
  5505  003EB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5506  003EB4  ECAA  F022         	call	_updateServoPosition	;wreg free
  5507                           
  5508                           ;sort.c: 348: break;
  5509  003EB8  D024               	goto	l7510
  5510  003EBA                     l7504:
  5511                           
  5512                           ;sort.c: 350: updateServoPosition(2400, 1);
  5513  003EBA  0E09               	movlw	9
  5514  003EBC  0100               	movlb	0	; () banked
  5515  003EBE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5516  003EC0  0E60               	movlw	96
  5517  003EC2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5518  003EC4  0E00               	movlw	0
  5519  003EC6  0100               	movlb	0	; () banked
  5520  003EC8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5521  003ECA  0E01               	movlw	1
  5522  003ECC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5523  003ECE  ECAA  F022         	call	_updateServoPosition	;wreg free
  5524                           
  5525                           ;sort.c: 354: }
  5526                           
  5527                           ;sort.c: 353: break;
  5528                           
  5529                           ;sort.c: 352: default:
  5530                           
  5531                           ;sort.c: 351: break;
  5532  003ED2  D017               	goto	l7510
  5533  003ED4                     l7508:
  5534  003ED4  C12B  F088         	movff	_cur_can,??_Distribution
  5535  003ED8  C12C  F089         	movff	_cur_can+1,??_Distribution+1
  5536                           
  5537                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5538                           ; Switch size 1, requested type "space"
  5539                           ; Number of cases is 1, Range of values is 0 to 0
  5540                           ; switch strategies available:
  5541                           ; Name         Instructions Cycles
  5542                           ; simple_byte            4     3 (average)
  5543                           ;	Chosen strategy is simple_byte
  5544  003EDC  0100               	movlb	0	; () banked
  5545  003EDE  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5546  003EE0  0A00               	xorlw	0	; case 0
  5547  003EE2  A4D8               	btfss	status,2,c
  5548  003EE4  D00E               	goto	l7510
  5549                           
  5550                           ; BSR set to: 0
  5551                           ; Switch size 1, requested type "space"
  5552                           ; Number of cases is 4, Range of values is 0 to 3
  5553                           ; switch strategies available:
  5554                           ; Name         Instructions Cycles
  5555                           ; simple_byte           13     7 (average)
  5556                           ;	Chosen strategy is simple_byte
  5557  003EE6  0100               	movlb	0	; () banked
  5558  003EE8  5188               	movf	??_Distribution& (0+255),w,b
  5559  003EEA  0A00               	xorlw	0	; case 0
  5560  003EEC  B4D8               	btfsc	status,2,c
  5561  003EEE  D7BE               	goto	l7498
  5562  003EF0  0A01               	xorlw	1	; case 1
  5563  003EF2  B4D8               	btfsc	status,2,c
  5564  003EF4  D7C8               	goto	l7500
  5565  003EF6  0A03               	xorlw	3	; case 2
  5566  003EF8  B4D8               	btfsc	status,2,c
  5567  003EFA  D7D2               	goto	l7502
  5568  003EFC  0A01               	xorlw	1	; case 3
  5569  003EFE  B4D8               	btfsc	status,2,c
  5570  003F00  D7DC               	goto	l7504
  5571  003F02                     l7510:
  5572                           
  5573                           ;sort.c: 355: updateServoPosition(1050, 3);
  5574  003F02  0E04               	movlw	4
  5575  003F04  0100               	movlb	0	; () banked
  5576  003F06  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5577  003F08  0E1A               	movlw	26
  5578  003F0A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5579  003F0C  0E00               	movlw	0
  5580  003F0E  0100               	movlb	0	; () banked
  5581  003F10  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5582  003F12  0E03               	movlw	3
  5583  003F14  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5584  003F16  ECAA  F022         	call	_updateServoPosition	;wreg free
  5585                           
  5586                           ;sort.c: 356: servo_timer_target = 750;
  5587  003F1A  0E02               	movlw	2
  5588  003F1C  6E74               	movwf	_servo_timer_target+1,c	;volatile
  5589  003F1E  0EEE               	movlw	238
  5590  003F20  6E73               	movwf	_servo_timer_target,c	;volatile
  5591                           
  5592                           ;sort.c: 357: f_panning_to_bin = 1;
  5593  003F22  0E00               	movlw	0
  5594  003F24  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  5595  003F26  0E01               	movlw	1
  5596  003F28  6E61               	movwf	_f_panning_to_bin,c	;volatile
  5597                           
  5598                           ;sort.c: 358: f_can_coming_to_distribution = 0;
  5599  003F2A  0E00               	movlw	0
  5600  003F2C  0101               	movlb	1	; () banked
  5601  003F2E  6F34               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5602  003F30  0E00               	movlw	0
  5603  003F32  6F33               	movwf	_f_can_coming_to_distribution& (0+255),b
  5604  003F34  0012               	return	
  5605  003F36                     __end_of_Distribution:
  5606                           	opt stack 0
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           postdec1	equ	0xFE5
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function _machineConfig *****************
  5625 ;; Defined at:
  5626 ;;		line 15 in file "MachineConfig.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;		None
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;		None
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:        0 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    7
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_main
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text12
  5655  0049D8                     __ptext12:
  5656                           	opt stack 0
  5657  0049D8                     _machineConfig:
  5658                           	opt stack 23
  5659                           
  5660                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5661                           
  5662                           ; BSR set to: 1
  5663                           ;incstack = 0
  5664  0049D8  0EF0               	movlw	240
  5665  0049DA  6ED3               	movwf	4051,c	;volatile
  5666                           
  5667                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5668  0049DC  8C9B               	bsf	3995,6,c	;volatile
  5669                           
  5670                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5671  0049DE  0E07               	movlw	7
  5672  0049E0  6E92               	movwf	3986,c	;volatile
  5673                           
  5674                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5675  0049E2  0EF2               	movlw	242
  5676  0049E4  6E93               	movwf	3987,c	;volatile
  5677                           
  5678                           ;MachineConfig.c: 27: TRISC = 0x00;
  5679  0049E6  0E00               	movlw	0
  5680  0049E8  6E94               	movwf	3988,c	;volatile
  5681                           
  5682                           ;MachineConfig.c: 31: TRISD = 0x00;
  5683  0049EA  0E00               	movlw	0
  5684  0049EC  6E95               	movwf	3989,c	;volatile
  5685                           
  5686                           ;MachineConfig.c: 34: TRISE = 0x00;
  5687  0049EE  0E00               	movlw	0
  5688  0049F0  6E96               	movwf	3990,c	;volatile
  5689                           
  5690                           ;MachineConfig.c: 37: LATA = 0x00;
  5691  0049F2  0E00               	movlw	0
  5692  0049F4  6E89               	movwf	3977,c	;volatile
  5693                           
  5694                           ;MachineConfig.c: 38: LATB = 0x00;
  5695  0049F6  0E00               	movlw	0
  5696  0049F8  6E8A               	movwf	3978,c	;volatile
  5697                           
  5698                           ;MachineConfig.c: 39: LATC = 0x00;
  5699  0049FA  0E00               	movlw	0
  5700  0049FC  6E8B               	movwf	3979,c	;volatile
  5701                           
  5702                           ;MachineConfig.c: 40: LATD = 0x00;
  5703  0049FE  0E00               	movlw	0
  5704  004A00  6E8C               	movwf	3980,c	;volatile
  5705                           
  5706                           ;MachineConfig.c: 41: LATE = 0x00;
  5707  004A02  0E00               	movlw	0
  5708  004A04  6E8D               	movwf	3981,c	;volatile
  5709                           
  5710                           ;MachineConfig.c: 43: nRBPU = 0;
  5711  004A06  9EF1               	bcf	intcon2,7,c	;volatile
  5712                           
  5713                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5714  004A08  0E00               	movlw	0
  5715  004A0A  6EC2               	movwf	4034,c	;volatile
  5716                           
  5717                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5718  004A0C  0E0D               	movlw	13
  5719  004A0E  6EC1               	movwf	4033,c	;volatile
  5720                           
  5721                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5722  004A10  0E00               	movlw	0
  5723  004A12  6EB5               	movwf	4021,c	;volatile
  5724                           
  5725                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5726  004A14  96B4               	bcf	4020,3,c	;volatile
  5727                           
  5728                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5729  004A16  0EB1               	movlw	177
  5730  004A18  6EC0               	movwf	4032,c	;volatile
  5731                           
  5732                           ;MachineConfig.c: 55: INT1IE = 1;
  5733  004A1A  86F0               	bsf	intcon3,3,c	;volatile
  5734                           
  5735                           ;MachineConfig.c: 57: TMR0IE = 1;
  5736  004A1C  8AF2               	bsf	intcon,5,c	;volatile
  5737                           
  5738                           ;MachineConfig.c: 58: TMR1IE = 1;
  5739  004A1E  809D               	bsf	3997,0,c	;volatile
  5740                           
  5741                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5742  004A20  0EB0               	movlw	176
  5743  004A22  6ECD               	movwf	4045,c	;volatile
  5744                           
  5745                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5746  004A24  0EB0               	movlw	176
  5747  004A26  6EB1               	movwf	4017,c	;volatile
  5748                           
  5749                           ;MachineConfig.c: 61: TMR2IE = 1;
  5750  004A28  829D               	bsf	3997,1,c	;volatile
  5751                           
  5752                           ;MachineConfig.c: 62: TMR3IE = 1;
  5753  004A2A  82A0               	bsf	4000,1,c	;volatile
  5754                           
  5755                           ;MachineConfig.c: 63: PEIE = 1;
  5756  004A2C  8CF2               	bsf	intcon,6,c	;volatile
  5757                           
  5758                           ;MachineConfig.c: 64: ADIE = 0;
  5759  004A2E  9C9D               	bcf	3997,6,c	;volatile
  5760                           
  5761                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5762  004A30  9EF2               	bcf	intcon,7,c	;volatile
  5763  004A32  0012               	return		;funcret
  5764  004A34                     __end_of_machineConfig:
  5765                           	opt stack 0
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           prodh	equ	0xFF4
  5771                           prodl	equ	0xFF3
  5772                           intcon	equ	0xFF2
  5773                           intcon2	equ	0xFF1
  5774                           intcon3	equ	0xFF0
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           postdec1	equ	0xFE5
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _logRun *****************
  5787 ;; Defined at:
  5788 ;;		line 84 in file "EEPROM.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5793 ;;  i               2   55[BANK0 ] int 
  5794 ;;  num             1   49[BANK0 ] unsigned char 
  5795 ;;  addr            2   57[BANK0 ] unsigned short 
  5796 ;;  byte11          1   54[BANK0 ] unsigned char 
  5797 ;;  byte3           1   52[BANK0 ] unsigned char 
  5798 ;;  byte2           1   51[BANK0 ] unsigned char 
  5799 ;;  byte1           1   50[BANK0 ] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;Total ram usage:       10 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:   11
  5816 ;; This function calls:
  5817 ;;		_EEPROM_read
  5818 ;;		_EEPROM_write
  5819 ;; This function is called by:
  5820 ;;		_main
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text13
  5825  0039F8                     __ptext13:
  5826                           	opt stack 0
  5827  0039F8                     _logRun:
  5828                           	opt stack 19
  5829                           
  5830                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5831                           
  5832                           ;incstack = 0
  5833  0039F8  0E00               	movlw	0
  5834  0039FA  0100               	movlb	0	; () banked
  5835  0039FC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5836  0039FE  0E00               	movlw	0
  5837  003A00  6F80               	movwf	EEPROM_read@address& (0+255),b
  5838  003A02  EC2B  F029         	call	_EEPROM_read	;wreg free
  5839  003A06  0100               	movlb	0	; () banked
  5840  003A08  6FFD               	movwf	_sel& (0+255),b
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5844  003A0A  0100               	movlb	0	; () banked
  5845  003A0C  51FD               	movf	_sel& (0+255),w,b
  5846  003A0E  0D0B               	mullw	11
  5847  003A10  0E01               	movlw	1
  5848  003A12  24F3               	addwf	prodl,w,c
  5849  003A14  0100               	movlb	0	; () banked
  5850  003A16  6FB9               	movwf	logRun@addr& (0+255),b
  5851  003A18  0E00               	movlw	0
  5852  003A1A  20F4               	addwfc	prodh,w,c
  5853  003A1C  0100               	movlb	0	; () banked
  5854  003A1E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;EEPROM.c: 101: if (sel < 3){
  5858  003A20  0E03               	movlw	3
  5859  003A22  0100               	movlb	0	; () banked
  5860  003A24  61FD               	cpfslt	_sel& (0+255),b
  5861  003A26  D00E               	goto	l9094
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5865  003A28  0100               	movlb	0	; () banked
  5866  003A2A  29FD               	incf	_sel& (0+255),w,b
  5867  003A2C  0100               	movlb	0	; () banked
  5868  003A2E  6FB1               	movwf	logRun@num& (0+255),b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5872  003A30  0E00               	movlw	0
  5873  003A32  0100               	movlb	0	; () banked
  5874  003A34  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5875  003A36  0E00               	movlw	0
  5876  003A38  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5877  003A3A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5878  003A3E  ECB6  F01E         	call	_EEPROM_write	;wreg free
  5879                           
  5880                           ;EEPROM.c: 104: }
  5881  003A42  D00A               	goto	l9096
  5882  003A44                     l9094:
  5883                           
  5884                           ;EEPROM.c: 105: else{
  5885                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5886  003A44  0E00               	movlw	0
  5887  003A46  0100               	movlb	0	; () banked
  5888  003A48  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5889  003A4A  0E00               	movlw	0
  5890  003A4C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5891  003A4E  0E00               	movlw	0
  5892  003A50  0100               	movlb	0	; () banked
  5893  003A52  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5894  003A54  ECB6  F01E         	call	_EEPROM_write	;wreg free
  5895  003A58                     l9096:
  5896                           
  5897                           ;EEPROM.c: 107: }
  5898                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5899  003A58  0100               	movlb	0	; () banked
  5900  003A5A  51FE               	movf	_count_total& (0+255),w,b
  5901  003A5C  0980               	iorlw	128
  5902  003A5E  0100               	movlb	0	; () banked
  5903  003A60  6FB2               	movwf	logRun@byte1& (0+255),b
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5907  003A62  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5908  003A66  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5909  003A6A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5910  003A6E  ECB6  F01E         	call	_EEPROM_write	;wreg free
  5911                           
  5912                           ;EEPROM.c: 112: addr++;
  5913  003A72  0100               	movlb	0	; () banked
  5914  003A74  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5915  003A76  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5919  003A78  0101               	movlb	1	; () banked
  5920  003A7A  3927               	swapf	_count_pop_no_tab& (0+255),w,b
  5921  003A7C  0BF0               	andlw	240
  5922  003A7E  0101               	movlb	1	; () banked
  5923  003A80  1129               	iorwf	_count_pop_w_tab& (0+255),w,b
  5924  003A82  0100               	movlb	0	; () banked
  5925  003A84  6FB3               	movwf	logRun@byte2& (0+255),b
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5929  003A86  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5930  003A8A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5931  003A8E  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5932  003A92  ECB6  F01E         	call	_EEPROM_write	;wreg free
  5933                           
  5934                           ;EEPROM.c: 117: addr++;
  5935  003A96  0100               	movlb	0	; () banked
  5936  003A98  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5937  003A9A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5941  003A9C  0101               	movlb	1	; () banked
  5942  003A9E  3925               	swapf	_count_can_w_lab& (0+255),w,b
  5943  003AA0  0BF0               	andlw	240
  5944  003AA2  0101               	movlb	1	; () banked
  5945  003AA4  1123               	iorwf	_count_can_no_lab& (0+255),w,b
  5946  003AA6  0100               	movlb	0	; () banked
  5947  003AA8  6FB4               	movwf	logRun@byte3& (0+255),b
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5951  003AAA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5952  003AAE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5953  003AB2  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5954  003AB6  ECB6  F01E         	call	_EEPROM_write	;wreg free
  5955                           
  5956                           ;EEPROM.c: 120: addr++;
  5957  003ABA  0100               	movlb	0	; () banked
  5958  003ABC  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5959  003ABE  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5963  003AC0  0E00               	movlw	0
  5964  003AC2  0100               	movlb	0	; () banked
  5965  003AC4  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5966  003AC6  0E00               	movlw	0
  5967  003AC8  6FB7               	movwf	logRun@i& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970  003ACA  0100               	movlb	0	; () banked
  5971  003ACC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5972  003ACE  D008               	goto	l9120
  5973  003AD0  0100               	movlb	0	; () banked
  5974  003AD2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5975  003AD4  E128               	bnz	l1048
  5976  003AD6  0E07               	movlw	7
  5977  003AD8  0100               	movlb	0	; () banked
  5978  003ADA  5DB7               	subwf	logRun@i& (0+255),w,b
  5979  003ADC  B0D8               	btfsc	status,0,c
  5980  003ADE  D023               	goto	l1048
  5981  003AE0                     l9120:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5985  003AE0  90D8               	bcf	status,0,c
  5986  003AE2  0100               	movlb	0	; () banked
  5987  003AE4  35B7               	rlcf	logRun@i& (0+255),w,b
  5988  003AE6  6ED9               	movwf	fsr2l,c
  5989  003AE8  0100               	movlb	0	; () banked
  5990  003AEA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5991  003AEC  6EDA               	movwf	fsr2h,c
  5992  003AEE  0E0E               	movlw	low _startTime
  5993  003AF0  26D9               	addwf	fsr2l,f,c
  5994  003AF2  0E01               	movlw	high _startTime
  5995  003AF4  22DA               	addwfc	fsr2h,f,c
  5996  003AF6  50DF               	movf	indf2,w,c
  5997  003AF8  0100               	movlb	0	; () banked
  5998  003AFA  6FB5               	movwf	logRun@byte_i& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  6002  003AFC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6003  003B00  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6004  003B04  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  6005  003B08  ECB6  F01E         	call	_EEPROM_write	;wreg free
  6006                           
  6007                           ;EEPROM.c: 126: addr++;
  6008  003B0C  0100               	movlb	0	; () banked
  6009  003B0E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  6010  003B10  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  6011                           
  6012                           ; BSR set to: 0
  6013  003B12  0100               	movlb	0	; () banked
  6014  003B14  4BB7               	infsnz	logRun@i& (0+255),f,b
  6015  003B16  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  6016                           
  6017                           ; BSR set to: 0
  6018  003B18  0100               	movlb	0	; () banked
  6019  003B1A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  6020  003B1C  D7E1               	goto	l9120
  6021  003B1E  0100               	movlb	0	; () banked
  6022  003B20  51B8               	movf	(logRun@i+1)& (0+255),w,b
  6023  003B22  E101               	bnz	u8160
  6024  003B24  D7D8               	goto	L7
  6025  003B26                     u8160:
  6026  003B26                     l1048:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;EEPROM.c: 127: }
  6030                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  6031  003B26  C0F8  F0B6         	movff	_total_time,logRun@byte11
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  6035  003B2A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  6036  003B2E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  6037  003B32  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  6038  003B36  ECB6  F01E         	call	_EEPROM_write	;wreg free
  6039  003B3A  0012               	return		;funcret
  6040  003B3C                     __end_of_logRun:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           postdec1	equ	0xFE5
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function _EEPROM_write *****************
  6063 ;; Defined at:
  6064 ;;		line 32 in file "EEPROM.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  address         2   43[BANK0 ] unsigned short 
  6067 ;;  data            1   45[BANK0 ] unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  i               1   48[BANK0 ] unsigned char 
  6070 ;;  i               1   47[BANK0 ] unsigned char 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      void 
  6073 ;; Registers used:
  6074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6080 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;Total ram usage:        6 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:   10
  6087 ;; This function calls:
  6088 ;;		_EEPROM_read
  6089 ;;		_lcdInst
  6090 ;;		_printf
  6091 ;; This function is called by:
  6092 ;;		_Loading
  6093 ;;		_logRun
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text14
  6098  003D6C                     __ptext14:
  6099                           	opt stack 0
  6100  003D6C                     _EEPROM_write:
  6101                           	opt stack 18
  6102                           
  6103                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  6104                           
  6105                           ;incstack = 0
  6106  003D6C  84A6               	bsf	4006,2,c	;volatile
  6107                           
  6108                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  6109  003D6E  0100               	movlb	0	; () banked
  6110  003D70  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  6111  003D72  6EAA               	movwf	4010,c	;volatile
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  6115  003D74  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;EEPROM.c: 39: EEDATA = data;
  6119  003D78  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  6123  003D7C  9EA6               	bcf	4006,7,c	;volatile
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  6127  003D7E  9CA6               	bcf	4006,6,c	;volatile
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  6131  003D80  9EF2               	bcf	intcon,7,c	;volatile
  6132                           
  6133                           ;EEPROM.c: 45: EECON2 = 0x55;
  6134  003D82  0E55               	movlw	85
  6135  003D84  6EA7               	movwf	4007,c	;volatile
  6136                           
  6137                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  6138  003D86  0EAA               	movlw	170
  6139  003D88  6EA7               	movwf	4007,c	;volatile
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  6143  003D8A  82A6               	bsf	4006,1,c	;volatile
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  6147  003D8C  8EF2               	bsf	intcon,7,c	;volatile
  6148  003D8E                     l1026:
  6149  003D8E  A8A1               	btfss	4001,4,c	;volatile
  6150  003D90  D7FE               	goto	l1026
  6151                           
  6152                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  6153  003D92  98A1               	bcf	4001,4,c	;volatile
  6154                           
  6155                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  6156  003D94  94A6               	bcf	4006,2,c	;volatile
  6157                           
  6158                           ;EEPROM.c: 57: if(debug){
  6159  003D96  0101               	movlb	1	; () banked
  6160  003D98  512D               	movf	_debug& (0+255),w,b
  6161  003D9A  0101               	movlb	1	; () banked
  6162  003D9C  112E               	iorwf	(_debug+1)& (0+255),w,b
  6163  003D9E  B4D8               	btfsc	status,2,c
  6164  003DA0  0012               	return	
  6165                           
  6166                           ; BSR set to: 1
  6167                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6168  003DA2  0E01               	movlw	1
  6169  003DA4  EC5D  F029         	call	_lcdInst
  6170  003DA8  0E68               	movlw	104
  6171  003DAA  0100               	movlb	0	; () banked
  6172  003DAC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6173  003DAE  0EE4               	movlw	228
  6174  003DB0                     u8867:
  6175  003DB0  2EE8               	decfsz	wreg,f,c
  6176  003DB2  D7FE               	bra	u8867
  6177  003DB4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6178  003DB6  D7FC               	bra	u8867
  6179  003DB8  F000               	nop	
  6180                           
  6181                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  6182  003DBA  0E80               	movlw	128
  6183  003DBC  EC5D  F029         	call	_lcdInst
  6184                           
  6185                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  6186  003DC0  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  6187  003DC4  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  6188  003DC8  EC2B  F029         	call	_EEPROM_read	;wreg free
  6189  003DCC  0100               	movlb	0	; () banked
  6190  003DCE  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  6191  003DD0  A4D8               	btfss	status,2,c
  6192  003DD2  D024               	goto	l6860
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  6196  003DD4  0E1E               	movlw	low STR_67
  6197  003DD6  0100               	movlb	0	; () banked
  6198  003DD8  6F8E               	movwf	printf@f& (0+255),b
  6199  003DDA  0EFB               	movlw	high STR_67
  6200  003DDC  0100               	movlb	0	; () banked
  6201  003DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6202  003DE0  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  6203  003DE4  0100               	movlb	0	; () banked
  6204  003DE6  6B91               	clrf	(?_printf+3)& (0+255),b
  6205  003DE8  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  6206  003DEC  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  6207  003DF0  EC02  F00B         	call	_printf	;wreg free
  6208                           
  6209                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  6210  003DF4  0E00               	movlw	0
  6211  003DF6  0100               	movlb	0	; () banked
  6212  003DF8  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6213  003DFA                     l6852:
  6214                           
  6215                           ; BSR set to: 0
  6216  003DFA  0E63               	movlw	99
  6217  003DFC  0100               	movlb	0	; () banked
  6218  003DFE  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6219  003E00  D001               	goto	l6856
  6220  003E02  0012               	return	
  6221  003E04                     l6856:
  6222                           
  6223                           ; BSR set to: 0
  6224  003E04  0E68               	movlw	104
  6225  003E06  0100               	movlb	0	; () banked
  6226  003E08  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6227  003E0A  0EE4               	movlw	228
  6228  003E0C                     u8877:
  6229  003E0C  2EE8               	decfsz	wreg,f,c
  6230  003E0E  D7FE               	bra	u8877
  6231  003E10  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6232  003E12  D7FC               	bra	u8877
  6233  003E14  F000               	nop	
  6234  003E16  0100               	movlb	0	; () banked
  6235  003E18  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6236  003E1A  D7EF               	goto	l6852
  6237  003E1C                     l6860:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6241  003E1C  0EB9               	movlw	low STR_68
  6242  003E1E  0100               	movlb	0	; () banked
  6243  003E20  6F8E               	movwf	printf@f& (0+255),b
  6244  003E22  0EFF               	movlw	high STR_68
  6245  003E24  0100               	movlb	0	; () banked
  6246  003E26  6F8F               	movwf	(printf@f+1)& (0+255),b
  6247  003E28  EC02  F00B         	call	_printf	;wreg free
  6248  003E2C  0E00               	movlw	0
  6249  003E2E  0100               	movlb	0	; () banked
  6250  003E30  6FB0               	movwf	EEPROM_write@i_1398& (0+255),b
  6251  003E32                     l6864:
  6252                           
  6253                           ; BSR set to: 0
  6254  003E32  0E63               	movlw	99
  6255  003E34  0100               	movlb	0	; () banked
  6256  003E36  65B0               	cpfsgt	EEPROM_write@i_1398& (0+255),b
  6257  003E38  D001               	goto	l6868
  6258  003E3A  0012               	return	
  6259  003E3C                     l6868:
  6260                           
  6261                           ; BSR set to: 0
  6262  003E3C  0E68               	movlw	104
  6263  003E3E  0100               	movlb	0	; () banked
  6264  003E40  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6265  003E42  0EE4               	movlw	228
  6266  003E44                     u8887:
  6267  003E44  2EE8               	decfsz	wreg,f,c
  6268  003E46  D7FE               	bra	u8887
  6269  003E48  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6270  003E4A  D7FC               	bra	u8887
  6271  003E4C  F000               	nop	
  6272  003E4E  0100               	movlb	0	; () banked
  6273  003E50  2BB0               	incf	EEPROM_write@i_1398& (0+255),f,b
  6274  003E52  D7EF               	goto	l6864
  6275  003E54                     __end_of_EEPROM_write:
  6276                           	opt stack 0
  6277                           tblptru	equ	0xFF8
  6278                           tblptrh	equ	0xFF7
  6279                           tblptrl	equ	0xFF6
  6280                           tablat	equ	0xFF5
  6281                           prodh	equ	0xFF4
  6282                           prodl	equ	0xFF3
  6283                           intcon	equ	0xFF2
  6284                           intcon2	equ	0xFF1
  6285                           intcon3	equ	0xFF0
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           postdec1	equ	0xFE5
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _EEPROM_read *****************
  6298 ;; Defined at:
  6299 ;;		line 68 in file "EEPROM.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  address         2    0[BANK0 ] unsigned short 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      unsigned char 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6313 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;Total ram usage:        2 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    7
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_Loading
  6324 ;;		_EEPROM_write
  6325 ;;		_logRun
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text15
  6330  005256                     __ptext15:
  6331                           	opt stack 0
  6332  005256                     _EEPROM_read:
  6333                           	opt stack 20
  6334                           
  6335                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6336                           
  6337                           ;incstack = 0
  6338  005256  0100               	movlb	0	; () banked
  6339  005258  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6340  00525A  6EAA               	movwf	4010,c	;volatile
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6344  00525C  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6348  005260  9EA6               	bcf	4006,7,c	;volatile
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6352  005262  9CA6               	bcf	4006,6,c	;volatile
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6356  005264  80A6               	bsf	4006,0,c	;volatile
  6357  005266                     l1039:
  6358  005266  B0A6               	btfsc	4006,0,c	;volatile
  6359  005268  D7FE               	goto	l1039
  6360                           
  6361                           ;EEPROM.c: 81: return EEDATA;
  6362  00526A  50A8               	movf	4008,w,c	;volatile
  6363  00526C  0012               	return	
  6364  00526E                     __end_of_EEPROM_read:
  6365                           	opt stack 0
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           prodh	equ	0xFF4
  6371                           prodl	equ	0xFF3
  6372                           intcon	equ	0xFF2
  6373                           intcon2	equ	0xFF1
  6374                           intcon3	equ	0xFF0
  6375                           postinc0	equ	0xFEE
  6376                           wreg	equ	0xFE8
  6377                           postdec1	equ	0xFE5
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function _initUI *****************
  6387 ;; Defined at:
  6388 ;;		line 62 in file "UI.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      void 
  6395 ;; Registers used:
  6396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;Total ram usage:        0 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:   12
  6409 ;; This function calls:
  6410 ;;		_change_state_to_menu_start
  6411 ;;		_loadRTC
  6412 ;; This function is called by:
  6413 ;;		_main
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           	psect	text16
  6418  004E40                     __ptext16:
  6419                           	opt stack 0
  6420  004E40                     _initUI:
  6421                           	opt stack 18
  6422                           
  6423                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6424                           
  6425                           ;incstack = 0
  6426  004E40  8EF2               	bsf	intcon,7,c	;volatile
  6427                           
  6428                           ;UI.c: 64: machine_state = UI_state;
  6429  004E42  0E00               	movlw	0
  6430  004E44  0100               	movlb	0	; () banked
  6431  004E46  6FFC               	movwf	_machine_state& (0+255),b
  6432                           
  6433                           ;UI.c: 65: logstate = 0;
  6434  004E48  0E00               	movlw	0
  6435  004E4A  0100               	movlb	0	; () banked
  6436  004E4C  6FF7               	movwf	(_logstate+1)& (0+255),b
  6437  004E4E  0E00               	movlw	0
  6438  004E50  6FF6               	movwf	_logstate& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;UI.c: 67: if(RTCflag){
  6442  004E52  0100               	movlb	0	; () banked
  6443  004E54  51EA               	movf	_RTCflag& (0+255),w,b
  6444  004E56  0100               	movlb	0	; () banked
  6445  004E58  11EB               	iorwf	(_RTCflag+1)& (0+255),w,b
  6446  004E5A  A4D8               	btfss	status,2,c
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;UI.c: 68: loadRTC();
  6450  004E5C  EC21  F022         	call	_loadRTC	;wreg free
  6451                           
  6452                           ;UI.c: 69: }
  6453                           ;UI.c: 71: change_state_to_menu_start();
  6454  004E60  EC3E  F028         	call	_change_state_to_menu_start	;wreg free
  6455                           
  6456                           ;UI.c: 72: firstboot = 1;
  6457  004E64  0E00               	movlw	0
  6458  004E66  0101               	movlb	1	; () banked
  6459  004E68  6F3C               	movwf	(_firstboot+1)& (0+255),b
  6460  004E6A  0E01               	movlw	1
  6461  004E6C  6F3B               	movwf	_firstboot& (0+255),b
  6462                           
  6463                           ; BSR set to: 1
  6464  004E6E  0012               	return		;funcret
  6465  004E70                     __end_of_initUI:
  6466                           	opt stack 0
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           intcon2	equ	0xFF1
  6475                           intcon3	equ	0xFF0
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           postdec1	equ	0xFE5
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           postinc2	equ	0xFDE
  6482                           postdec2	equ	0xFDD
  6483                           fsr2h	equ	0xFDA
  6484                           fsr2l	equ	0xFD9
  6485                           status	equ	0xFD8
  6486                           
  6487 ;; *************** function _loadRTC *****************
  6488 ;; Defined at:
  6489 ;;		line 28 in file "RTC.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  i               2   22[BANK0 ] int 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;Total ram usage:        3 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    9
  6510 ;; This function calls:
  6511 ;;		_I2C_Master_Init
  6512 ;;		_I2C_Master_Start
  6513 ;;		_I2C_Master_Stop
  6514 ;;		_I2C_Master_Write
  6515 ;; This function is called by:
  6516 ;;		_initUI
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text17
  6521  004442                     __ptext17:
  6522                           	opt stack 0
  6523  004442                     _loadRTC:
  6524                           	opt stack 20
  6525                           
  6526                           ;RTC.c: 30: I2C_Master_Init(10000);
  6527                           
  6528                           ; BSR set to: 1
  6529                           ;incstack = 0
  6530  004442  0E10               	movlw	16
  6531  004444  0100               	movlb	0	; () banked
  6532  004446  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6533  004448  0E27               	movlw	39
  6534  00444A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6535  00444C  0E00               	movlw	0
  6536  00444E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6537  004450  0E00               	movlw	0
  6538  004452  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6539  004454  ECBC  F024         	call	_I2C_Master_Init	;wreg free
  6540                           
  6541                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6542  004458  9EF2               	bcf	intcon,7,c	;volatile
  6543                           
  6544                           ;RTC.c: 34: I2C_Master_Start();
  6545  00445A  EC83  F029         	call	_I2C_Master_Start	;wreg free
  6546                           
  6547                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6548  00445E  0E00               	movlw	0
  6549  004460  0100               	movlb	0	; () banked
  6550  004462  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6551  004464  0ED0               	movlw	208
  6552  004466  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6553  004468  EC71  F029         	call	_I2C_Master_Write	;wreg free
  6554                           
  6555                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6556  00446C  0E00               	movlw	0
  6557  00446E  0100               	movlb	0	; () banked
  6558  004470  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6559  004472  0E00               	movlw	0
  6560  004474  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6561  004476  EC71  F029         	call	_I2C_Master_Write	;wreg free
  6562                           
  6563                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6564  00447A  0E00               	movlw	0
  6565  00447C  0100               	movlb	0	; () banked
  6566  00447E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6567  004480  0E00               	movlw	0
  6568  004482  6F96               	movwf	loadRTC@i& (0+255),b
  6569  004484                     l7006:
  6570                           
  6571                           ; BSR set to: 0
  6572  004484  0100               	movlb	0	; () banked
  6573  004486  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6574  004488  D008               	goto	l7010
  6575  00448A  0100               	movlb	0	; () banked
  6576  00448C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6577  00448E  E11B               	bnz	l7016
  6578  004490  0E07               	movlw	7
  6579  004492  0100               	movlb	0	; () banked
  6580  004494  5D96               	subwf	loadRTC@i& (0+255),w,b
  6581  004496  B0D8               	btfsc	status,0,c
  6582  004498  D016               	goto	l7016
  6583  00449A                     l7010:
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6587  00449A  0E1C               	movlw	low _time
  6588  00449C  0100               	movlb	0	; () banked
  6589  00449E  2596               	addwf	loadRTC@i& (0+255),w,b
  6590  0044A0  6ED9               	movwf	fsr2l,c
  6591  0044A2  0E01               	movlw	high _time
  6592  0044A4  0100               	movlb	0	; () banked
  6593  0044A6  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6594  0044A8  6EDA               	movwf	fsr2h,c
  6595  0044AA  50DF               	movf	indf2,w,c
  6596  0044AC  0100               	movlb	0	; () banked
  6597  0044AE  6F95               	movwf	??_loadRTC& (0+255),b
  6598  0044B0  0100               	movlb	0	; () banked
  6599  0044B2  5195               	movf	??_loadRTC& (0+255),w,b
  6600  0044B4  0100               	movlb	0	; () banked
  6601  0044B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6602  0044B8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6603  0044BA  EC71  F029         	call	_I2C_Master_Write	;wreg free
  6604  0044BE  0100               	movlb	0	; () banked
  6605  0044C0  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6606  0044C2  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6607  0044C4  D7DF               	goto	l7006
  6608  0044C6                     l7016:
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;RTC.c: 39: }
  6612                           ;RTC.c: 40: I2C_Master_Stop();
  6613  0044C6  EC7F  F029         	call	_I2C_Master_Stop	;wreg free
  6614                           
  6615                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6616  0044CA  8EF2               	bsf	intcon,7,c	;volatile
  6617  0044CC  0012               	return		;funcret
  6618  0044CE                     __end_of_loadRTC:
  6619                           	opt stack 0
  6620                           tblptru	equ	0xFF8
  6621                           tblptrh	equ	0xFF7
  6622                           tblptrl	equ	0xFF6
  6623                           tablat	equ	0xFF5
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           intcon	equ	0xFF2
  6627                           intcon2	equ	0xFF1
  6628                           intcon3	equ	0xFF0
  6629                           postinc0	equ	0xFEE
  6630                           wreg	equ	0xFE8
  6631                           postdec1	equ	0xFE5
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _I2C_Master_Init *****************
  6641 ;; Defined at:
  6642 ;;		line 15 in file "I2C.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  c               4   13[BANK0 ] const unsigned long 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, status,2, status,0, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;Total ram usage:        8 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    8
  6663 ;; This function calls:
  6664 ;;		___lldiv
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;;		_loadRTC
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text18
  6672  004978                     __ptext18:
  6673                           	opt stack 0
  6674  004978                     _I2C_Master_Init:
  6675                           	opt stack 20
  6676                           
  6677                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6678                           
  6679                           ;incstack = 0
  6680  004978  0E00               	movlw	0
  6681  00497A  6EC7               	movwf	4039,c	;volatile
  6682                           
  6683                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6684  00497C  0E28               	movlw	40
  6685  00497E  6EC6               	movwf	4038,c	;volatile
  6686                           
  6687                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6688  004980  0E00               	movlw	0
  6689  004982  6EC5               	movwf	4037,c	;volatile
  6690                           
  6691                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6692  004984  0E00               	movlw	0
  6693  004986  0100               	movlb	0	; () banked
  6694  004988  6F80               	movwf	___lldiv@dividend& (0+255),b
  6695  00498A  0E48               	movlw	72
  6696  00498C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6697  00498E  0EE8               	movlw	232
  6698  004990  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6699  004992  0E01               	movlw	1
  6700  004994  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6701  004996  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6702  00499A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6703  00499E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6704  0049A2  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6705  0049A6  0E02               	movlw	2
  6706  0049A8                     u5195:
  6707  0049A8  90D8               	bcf	status,0,c
  6708  0049AA  0100               	movlb	0	; () banked
  6709  0049AC  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6710  0049AE  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6711  0049B0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6712  0049B2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6713  0049B4  2EE8               	decfsz	wreg,f,c
  6714  0049B6  D7F8               	goto	u5195
  6715  0049B8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6716  0049BC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6717  0049C0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6718  0049C4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6719  0049C8  ECC7  F020         	call	___lldiv	;wreg free
  6720  0049CC  0100               	movlb	0	; () banked
  6721  0049CE  0580               	decf	?___lldiv& (0+255),w,b
  6722  0049D0  6EC8               	movwf	4040,c	;volatile
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;I2C.c: 22: TRISC3 = 1;
  6726  0049D2  8694               	bsf	3988,3,c	;volatile
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;I2C.c: 23: TRISC4 = 1;
  6730  0049D4  8894               	bsf	3988,4,c	;volatile
  6731                           
  6732                           ; BSR set to: 0
  6733  0049D6  0012               	return		;funcret
  6734  0049D8                     __end_of_I2C_Master_Init:
  6735                           	opt stack 0
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           intcon2	equ	0xFF1
  6744                           intcon3	equ	0xFF0
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function ___lldiv *****************
  6757 ;; Defined at:
  6758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  dividend        4    0[BANK0 ] unsigned long 
  6761 ;;  divisor         4    4[BANK0 ] unsigned long 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  quotient        4    8[BANK0 ] unsigned long 
  6764 ;;  counter         1   12[BANK0 ] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  4    0[BANK0 ] unsigned long 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6774 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;Total ram usage:       13 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    7
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		_I2C_Master_Init
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text19
  6789  00418E                     __ptext19:
  6790                           	opt stack 0
  6791  00418E                     ___lldiv:
  6792                           	opt stack 20
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;incstack = 0
  6796  00418E  0E00               	movlw	0
  6797  004190  0100               	movlb	0	; () banked
  6798  004192  6F88               	movwf	___lldiv@quotient& (0+255),b
  6799  004194  0E00               	movlw	0
  6800  004196  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6801  004198  0E00               	movlw	0
  6802  00419A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6803  00419C  0E00               	movlw	0
  6804  00419E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6805                           
  6806                           ; BSR set to: 0
  6807  0041A0  0100               	movlb	0	; () banked
  6808  0041A2  5184               	movf	___lldiv@divisor& (0+255),w,b
  6809  0041A4  0100               	movlb	0	; () banked
  6810  0041A6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6811  0041A8  0100               	movlb	0	; () banked
  6812  0041AA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6813  0041AC  0100               	movlb	0	; () banked
  6814  0041AE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6815  0041B0  B4D8               	btfsc	status,2,c
  6816  0041B2  D042               	goto	l1800
  6817                           
  6818                           ; BSR set to: 0
  6819  0041B4  0E01               	movlw	1
  6820  0041B6  0100               	movlb	0	; () banked
  6821  0041B8  6F8C               	movwf	___lldiv@counter& (0+255),b
  6822  0041BA  D008               	goto	l6426
  6823  0041BC                     l6424:
  6824                           
  6825                           ; BSR set to: 0
  6826  0041BC  0100               	movlb	0	; () banked
  6827  0041BE  90D8               	bcf	status,0,c
  6828  0041C0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6829  0041C2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6830  0041C4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6831  0041C6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6832  0041C8  0100               	movlb	0	; () banked
  6833  0041CA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6834  0041CC                     l6426:
  6835                           
  6836                           ; BSR set to: 0
  6837  0041CC  0100               	movlb	0	; () banked
  6838  0041CE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6839  0041D0  D7F5               	goto	l6424
  6840  0041D2                     l6428:
  6841                           
  6842                           ; BSR set to: 0
  6843  0041D2  0100               	movlb	0	; () banked
  6844  0041D4  90D8               	bcf	status,0,c
  6845  0041D6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6846  0041D8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6847  0041DA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6848  0041DC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6849                           
  6850                           ; BSR set to: 0
  6851  0041DE  0100               	movlb	0	; () banked
  6852  0041E0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6853  0041E2  0100               	movlb	0	; () banked
  6854  0041E4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6855  0041E6  0100               	movlb	0	; () banked
  6856  0041E8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6857  0041EA  0100               	movlb	0	; () banked
  6858  0041EC  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6859  0041EE  0100               	movlb	0	; () banked
  6860  0041F0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6861  0041F2  0100               	movlb	0	; () banked
  6862  0041F4  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6863  0041F6  0100               	movlb	0	; () banked
  6864  0041F8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6865  0041FA  0100               	movlb	0	; () banked
  6866  0041FC  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6867  0041FE  A0D8               	btfss	status,0,c
  6868  004200  D012               	goto	l6436
  6869                           
  6870                           ; BSR set to: 0
  6871  004202  0100               	movlb	0	; () banked
  6872  004204  5184               	movf	___lldiv@divisor& (0+255),w,b
  6873  004206  0100               	movlb	0	; () banked
  6874  004208  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6875  00420A  0100               	movlb	0	; () banked
  6876  00420C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6877  00420E  0100               	movlb	0	; () banked
  6878  004210  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6879  004212  0100               	movlb	0	; () banked
  6880  004214  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6881  004216  0100               	movlb	0	; () banked
  6882  004218  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6883  00421A  0100               	movlb	0	; () banked
  6884  00421C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6885  00421E  0100               	movlb	0	; () banked
  6886  004220  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6887                           
  6888                           ; BSR set to: 0
  6889  004222  0100               	movlb	0	; () banked
  6890  004224  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6891  004226                     l6436:
  6892                           
  6893                           ; BSR set to: 0
  6894  004226  0100               	movlb	0	; () banked
  6895  004228  90D8               	bcf	status,0,c
  6896  00422A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6897  00422C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6898  00422E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6899  004230  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6900                           
  6901                           ; BSR set to: 0
  6902  004232  0100               	movlb	0	; () banked
  6903  004234  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6904  004236  D7CD               	goto	l6428
  6905  004238                     l1800:
  6906                           
  6907                           ; BSR set to: 0
  6908  004238  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6909  00423C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6910  004240  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6911  004244  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6912                           
  6913                           ; BSR set to: 0
  6914  004248  0012               	return		;funcret
  6915  00424A                     __end_of___lldiv:
  6916                           	opt stack 0
  6917                           tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           intcon2	equ	0xFF1
  6925                           intcon3	equ	0xFF0
  6926                           postinc0	equ	0xFEE
  6927                           wreg	equ	0xFE8
  6928                           postdec1	equ	0xFE5
  6929                           fsr1l	equ	0xFE1
  6930                           indf2	equ	0xFDF
  6931                           postinc2	equ	0xFDE
  6932                           postdec2	equ	0xFDD
  6933                           fsr2h	equ	0xFDA
  6934                           fsr2l	equ	0xFD9
  6935                           status	equ	0xFD8
  6936                           
  6937 ;; *************** function _change_state_to_menu_start *****************
  6938 ;; Defined at:
  6939 ;;		line 474 in file "UI.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;Total ram usage:        0 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:   11
  6960 ;; This function calls:
  6961 ;;		_lcdInst
  6962 ;;		_printRTC
  6963 ;;		_printf
  6964 ;; This function is called by:
  6965 ;;		_initUI
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text20
  6970  00507C                     __ptext20:
  6971                           	opt stack 0
  6972  00507C                     _change_state_to_menu_start:
  6973                           	opt stack 18
  6974                           
  6975                           ;UI.c: 475: cur_state = 0;
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;incstack = 0
  6979  00507C  0E00               	movlw	0
  6980  00507E  0100               	movlb	0	; () banked
  6981  005080  6FED               	movwf	(_cur_state+1)& (0+255),b
  6982  005082  0E00               	movlw	0
  6983  005084  6FEC               	movwf	_cur_state& (0+255),b
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;UI.c: 477: lcdInst(0b10000000);;
  6987  005086  0E80               	movlw	128
  6988  005088  EC5D  F029         	call	_lcdInst
  6989                           
  6990                           ;UI.c: 478: printRTC();
  6991  00508C  EC16  F012         	call	_printRTC	;wreg free
  6992                           
  6993                           ;UI.c: 479: lcdInst(0b11000000);;
  6994  005090  0EC0               	movlw	192
  6995  005092  EC5D  F029         	call	_lcdInst
  6996                           
  6997                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6998  005096  0EF3               	movlw	low STR_30
  6999  005098  0100               	movlb	0	; () banked
  7000  00509A  6F8E               	movwf	printf@f& (0+255),b
  7001  00509C  0EFD               	movlw	high STR_30
  7002  00509E  0100               	movlb	0	; () banked
  7003  0050A0  6F8F               	movwf	(printf@f+1)& (0+255),b
  7004  0050A2  EC02  F00B         	call	_printf	;wreg free
  7005  0050A6  0012               	return		;funcret
  7006  0050A8                     __end_of_change_state_to_menu_start:
  7007                           	opt stack 0
  7008                           tblptru	equ	0xFF8
  7009                           tblptrh	equ	0xFF7
  7010                           tblptrl	equ	0xFF6
  7011                           tablat	equ	0xFF5
  7012                           prodh	equ	0xFF4
  7013                           prodl	equ	0xFF3
  7014                           intcon	equ	0xFF2
  7015                           intcon2	equ	0xFF1
  7016                           intcon3	equ	0xFF0
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           postdec1	equ	0xFE5
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           
  7028 ;; *************** function _initTime *****************
  7029 ;; Defined at:
  7030 ;;		line 17 in file "RTC.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;  s               1    wreg     unsigned char 
  7033 ;;  m               1    0[BANK0 ] unsigned char 
  7034 ;;  h               1    1[BANK0 ] unsigned char 
  7035 ;;  w               1    2[BANK0 ] unsigned char 
  7036 ;;  DD              1    3[BANK0 ] unsigned char 
  7037 ;;  MM              1    4[BANK0 ] unsigned char 
  7038 ;;  YY              1    5[BANK0 ] unsigned char 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  s               1    6[BANK0 ] unsigned char 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7050 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;Total ram usage:        7 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    7
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_main
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           	psect	text21
  7065  0051E0                     __ptext21:
  7066                           	opt stack 0
  7067  0051E0                     _initTime:
  7068                           	opt stack 23
  7069                           
  7070                           ;incstack = 0
  7071                           ;initTime@s stored from wreg
  7072  0051E0  0100               	movlb	0	; () banked
  7073  0051E2  6F86               	movwf	initTime@s& (0+255),b
  7074                           
  7075                           ;RTC.c: 19: time[0] = s;
  7076  0051E4  C086  F11C         	movff	initTime@s,_time
  7077                           
  7078                           ;RTC.c: 20: time[1] = m;
  7079  0051E8  C080  F11D         	movff	initTime@m,_time+1
  7080                           
  7081                           ;RTC.c: 21: time[2] = h;
  7082  0051EC  C081  F11E         	movff	initTime@h,_time+2
  7083                           
  7084                           ;RTC.c: 22: time[3] = w;
  7085  0051F0  C082  F11F         	movff	initTime@w,_time+3
  7086                           
  7087                           ;RTC.c: 23: time[4] = DD;
  7088  0051F4  C083  F120         	movff	initTime@DD,_time+4
  7089                           
  7090                           ;RTC.c: 24: time[5] = MM;
  7091  0051F8  C084  F121         	movff	initTime@MM,_time+5
  7092                           
  7093                           ;RTC.c: 25: time[6] = YY;
  7094  0051FC  C085  F122         	movff	initTime@YY,_time+6
  7095  005200  0012               	return		;funcret
  7096  005202                     __end_of_initTime:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           intcon3	equ	0xFF0
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           postdec1	equ	0xFE5
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _initLCD *****************
  7119 ;; Defined at:
  7120 ;;		line 48 in file "lcd.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      void 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0, cstack
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:        1 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    9
  7141 ;; This function calls:
  7142 ;;		_lcdInst
  7143 ;; This function is called by:
  7144 ;;		_main
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text22
  7149  004C78                     __ptext22:
  7150                           	opt stack 0
  7151  004C78                     _initLCD:
  7152                           	opt stack 21
  7153                           
  7154                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  7155                           
  7156                           ;incstack = 0
  7157  004C78  0E9C               	movlw	156
  7158  004C7A  0100               	movlb	0	; () banked
  7159  004C7C  6F83               	movwf	??_initLCD& (0+255),b
  7160  004C7E  0ED7               	movlw	215
  7161  004C80                     u8897:
  7162  004C80  2EE8               	decfsz	wreg,f,c
  7163  004C82  D7FE               	bra	u8897
  7164  004C84  2F83               	decfsz	??_initLCD& (0+255),f,b
  7165  004C86  D7FC               	bra	u8897
  7166                           
  7167                           ;lcd.c: 50: lcdInst(0b00110011);
  7168  004C88  0E33               	movlw	51
  7169  004C8A  EC5D  F029         	call	_lcdInst
  7170                           
  7171                           ;lcd.c: 51: lcdInst(0b00110010);
  7172  004C8E  0E32               	movlw	50
  7173  004C90  EC5D  F029         	call	_lcdInst
  7174                           
  7175                           ;lcd.c: 53: lcdInst(0b00101000);
  7176  004C94  0E28               	movlw	40
  7177  004C96  EC5D  F029         	call	_lcdInst
  7178                           
  7179                           ;lcd.c: 54: lcdInst(0b00001100);
  7180  004C9A  0E0C               	movlw	12
  7181  004C9C  EC5D  F029         	call	_lcdInst
  7182                           
  7183                           ;lcd.c: 55: lcdInst(0b00000110);
  7184  004CA0  0E06               	movlw	6
  7185  004CA2  EC5D  F029         	call	_lcdInst
  7186                           
  7187                           ;lcd.c: 56: lcdInst(0b00000001);
  7188  004CA6  0E01               	movlw	1
  7189  004CA8  EC5D  F029         	call	_lcdInst
  7190                           
  7191                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  7192  004CAC  0E9C               	movlw	156
  7193  004CAE  0100               	movlb	0	; () banked
  7194  004CB0  6F83               	movwf	??_initLCD& (0+255),b
  7195  004CB2  0ED7               	movlw	215
  7196  004CB4                     u8907:
  7197  004CB4  2EE8               	decfsz	wreg,f,c
  7198  004CB6  D7FE               	bra	u8907
  7199  004CB8  2F83               	decfsz	??_initLCD& (0+255),f,b
  7200  004CBA  D7FC               	bra	u8907
  7201  004CBC  0012               	return		;funcret
  7202  004CBE                     __end_of_initLCD:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           intcon2	equ	0xFF1
  7212                           intcon3	equ	0xFF0
  7213                           postinc0	equ	0xFEE
  7214                           wreg	equ	0xFE8
  7215                           postdec1	equ	0xFE5
  7216                           fsr1l	equ	0xFE1
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           fsr2h	equ	0xFDA
  7221                           fsr2l	equ	0xFD9
  7222                           status	equ	0xFD8
  7223                           
  7224 ;; *************** function _UI *****************
  7225 ;; Defined at:
  7226 ;;		line 76 in file "UI.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;		None
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  i               1   73[BANK0 ] unsigned char 
  7231 ;;  i               1   85[BANK0 ] unsigned char 
  7232 ;;  i               1   84[BANK0 ] unsigned char 
  7233 ;;  i               1   83[BANK0 ] unsigned char 
  7234 ;;  i               1   82[BANK0 ] unsigned char 
  7235 ;;  i               1   81[BANK0 ] unsigned char 
  7236 ;;  i               1   80[BANK0 ] unsigned char 
  7237 ;;  i               1   79[BANK0 ] unsigned char 
  7238 ;;  i               1   78[BANK0 ] unsigned char 
  7239 ;;  i               1   77[BANK0 ] unsigned char 
  7240 ;;  i               1   76[BANK0 ] unsigned char 
  7241 ;;  i               1   75[BANK0 ] unsigned char 
  7242 ;;  i               1   74[BANK0 ] unsigned char 
  7243 ;;  month           4   86[BANK0 ] unsigned char [4]
  7244 ;;  i               1   72[BANK0 ] unsigned char 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      void 
  7247 ;; Registers used:
  7248 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;Total ram usage:       22 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:   11
  7261 ;; This function calls:
  7262 ;;		___awdiv
  7263 ;;		___awmod
  7264 ;;		_change_state_to_menu_12
  7265 ;;		_change_state_to_menu_22
  7266 ;;		_lcdInst
  7267 ;;		_printRTC
  7268 ;;		_printf
  7269 ;;		_strcpy
  7270 ;; This function is called by:
  7271 ;;		_main
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text23
  7276  0008CA                     __ptext23:
  7277                           	opt stack 0
  7278  0008CA                     _UI:
  7279                           	opt stack 19
  7280                           
  7281                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7282                           
  7283                           ;incstack = 0
  7284  0008CA  0E02               	movlw	2
  7285  0008CC  0100               	movlb	0	; () banked
  7286  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7287  0008D0  A4D8               	btfss	status,2,c
  7288  0008D2  D075               	goto	l8518
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7292  0008D4  0E01               	movlw	1
  7293  0008D6  EC5D  F029         	call	_lcdInst
  7294  0008DA  0E68               	movlw	104
  7295  0008DC  0100               	movlb	0	; () banked
  7296  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7297  0008E0  0EE4               	movlw	228
  7298  0008E2                     u8917:
  7299  0008E2  2EE8               	decfsz	wreg,f,c
  7300  0008E4  D7FE               	bra	u8917
  7301  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7302  0008E8  D7FC               	bra	u8917
  7303  0008EA  F000               	nop	
  7304                           
  7305                           ;UI.c: 79: lcdInst(0b10000000);;
  7306  0008EC  0E80               	movlw	128
  7307  0008EE  EC5D  F029         	call	_lcdInst
  7308                           
  7309                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7310  0008F2  0E9F               	movlw	low STR_1
  7311  0008F4  0100               	movlb	0	; () banked
  7312  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7313  0008F8  0EFB               	movlw	high STR_1
  7314  0008FA  0100               	movlb	0	; () banked
  7315  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7316  0008FE  0E01               	movlw	1
  7317  000900  0100               	movlb	0	; () banked
  7318  000902  25FD               	addwf	_sel& (0+255),w,b
  7319  000904  0100               	movlb	0	; () banked
  7320  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7321  000908  0100               	movlb	0	; () banked
  7322  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7323  00090C  0E00               	movlw	0
  7324  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7325  000910  EC02  F00B         	call	_printf	;wreg free
  7326                           
  7327                           ;UI.c: 81: lcdInst(0b11000000);;
  7328  000914  0EC0               	movlw	192
  7329  000916  EC5D  F029         	call	_lcdInst
  7330                           
  7331                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7332  00091A  0E0E               	movlw	14
  7333  00091C  0100               	movlb	0	; () banked
  7334  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7335  000920  0E10               	movlw	16
  7336  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7337  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7338  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7339  00092C  ECD0  F021         	call	___awmod	;wreg free
  7340  000930  C080  F0C6         	movff	?___awmod,_UI$2416
  7341  000934  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  7342                           
  7343                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7344  000938  0E23               	movlw	low STR_2
  7345  00093A  0100               	movlb	0	; () banked
  7346  00093C  6F8E               	movwf	printf@f& (0+255),b
  7347  00093E  0EFF               	movlw	high STR_2
  7348  000940  0100               	movlb	0	; () banked
  7349  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7350  000944  0E0E               	movlw	14
  7351  000946  0100               	movlb	0	; () banked
  7352  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7353  00094A  0E10               	movlw	16
  7354  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7355  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7356  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7357  000956  ECD0  F021         	call	___awmod	;wreg free
  7358  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7359  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7360  000962  0E00               	movlw	0
  7361  000964  0100               	movlb	0	; () banked
  7362  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7363  000968  0E3C               	movlw	60
  7364  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7365  00096C  EC68  F020         	call	___awdiv	;wreg free
  7366  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7367  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7368  000978  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  7369  00097C  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  7370  000980  0E00               	movlw	0
  7371  000982  0100               	movlb	0	; () banked
  7372  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7373  000986  0E3C               	movlw	60
  7374  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7375  00098A  ECD0  F021         	call	___awmod	;wreg free
  7376  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7377  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7378  000996  EC02  F00B         	call	_printf	;wreg free
  7379                           
  7380                           ;UI.c: 83: machine_state = UI_state;
  7381  00099A  0E00               	movlw	0
  7382  00099C  0100               	movlb	0	; () banked
  7383  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7384  0009A0                     l180:
  7385  0009A0  A281               	btfss	3969,1,c	;volatile
  7386  0009A2  D7FE               	goto	l180
  7387                           
  7388                           ;UI.c: 86: }
  7389                           ;UI.c: 87: if(cur_state==12){
  7390  0009A4  0E0C               	movlw	12
  7391  0009A6  0100               	movlb	0	; () banked
  7392  0009A8  19EC               	xorwf	_cur_state& (0+255),w,b
  7393  0009AA  0100               	movlb	0	; () banked
  7394  0009AC  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7395  0009AE  A4D8               	btfss	status,2,c
  7396  0009B0  D003               	goto	l8516
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;UI.c: 88: change_state_to_menu_12();
  7400  0009B2  EC9C  F026         	call	_change_state_to_menu_12	;wreg free
  7401                           
  7402                           ;UI.c: 89: }
  7403  0009B6  D3D3               	goto	l8838
  7404  0009B8                     l8516:
  7405                           
  7406                           ;UI.c: 90: else{
  7407                           ;UI.c: 91: change_state_to_menu_22();
  7408  0009B8  EC80  F026         	call	_change_state_to_menu_22	;wreg free
  7409                           
  7410                           ;UI.c: 92: }
  7411                           ;UI.c: 93: }
  7412  0009BC  D3D0               	goto	l8838
  7413  0009BE                     l8518:
  7414                           
  7415                           ;UI.c: 94: else if(cur_state == 0){
  7416  0009BE  0100               	movlb	0	; () banked
  7417  0009C0  51EC               	movf	_cur_state& (0+255),w,b
  7418  0009C2  0100               	movlb	0	; () banked
  7419  0009C4  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7420  0009C6  A4D8               	btfss	status,2,c
  7421  0009C8  D3CA               	goto	l8838
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7425  0009CA  0E00               	movlw	0
  7426  0009CC  0100               	movlb	0	; () banked
  7427  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7428  0009D0                     l8522:
  7429                           
  7430                           ; BSR set to: 0
  7431  0009D0  0E63               	movlw	99
  7432  0009D2  0100               	movlb	0	; () banked
  7433  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7434  0009D6  D001               	goto	l8526
  7435  0009D8  D00C               	goto	l8530
  7436  0009DA                     l8526:
  7437                           
  7438                           ; BSR set to: 0
  7439  0009DA  0E68               	movlw	104
  7440  0009DC  0100               	movlb	0	; () banked
  7441  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7442  0009E0  0EE4               	movlw	228
  7443  0009E2                     u8927:
  7444  0009E2  2EE8               	decfsz	wreg,f,c
  7445  0009E4  D7FE               	bra	u8927
  7446  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7447  0009E8  D7FC               	bra	u8927
  7448  0009EA  F000               	nop	
  7449  0009EC  0100               	movlb	0	; () banked
  7450  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7451  0009F0  D7EF               	goto	l8522
  7452  0009F2                     l8530:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;UI.c: 96: if(cur_state == 0){
  7456  0009F2  0100               	movlb	0	; () banked
  7457  0009F4  51EC               	movf	_cur_state& (0+255),w,b
  7458  0009F6  0100               	movlb	0	; () banked
  7459  0009F8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
  7460  0009FA  A4D8               	btfss	status,2,c
  7461  0009FC  D3B0               	goto	l8838
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;UI.c: 97: printRTC();
  7465  0009FE  EC16  F012         	call	_printRTC	;wreg free
  7466                           
  7467                           ;UI.c: 98: }
  7468                           ;UI.c: 99: }
  7469                           ;UI.c: 100: while(logstate){
  7470  000A02  D3AD               	goto	l8838
  7471  000A04                     l8534:
  7472                           
  7473                           ;UI.c: 102: if(!log_completion){
  7474  000A04  5063               	movf	_log_completion,w,c
  7475  000A06  1064               	iorwf	_log_completion+1,w,c
  7476  000A08  A4D8               	btfss	status,2,c
  7477  000A0A  D041               	goto	l8564
  7478                           
  7479                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7480  000A0C  0E01               	movlw	1
  7481  000A0E  EC5D  F029         	call	_lcdInst
  7482  000A12  0E68               	movlw	104
  7483  000A14  0100               	movlb	0	; () banked
  7484  000A16  6FC4               	movwf	??_UI& (0+255),b
  7485  000A18  0EE4               	movlw	228
  7486  000A1A                     u8937:
  7487  000A1A  2EE8               	decfsz	wreg,f,c
  7488  000A1C  D7FE               	bra	u8937
  7489  000A1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7490  000A20  D7FC               	bra	u8937
  7491  000A22  F000               	nop	
  7492                           
  7493                           ;UI.c: 104: lcdInst(0b10000000);;
  7494  000A24  0E80               	movlw	128
  7495  000A26  EC5D  F029         	call	_lcdInst
  7496                           
  7497                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7498  000A2A  0E8D               	movlw	low STR_3
  7499  000A2C  0100               	movlb	0	; () banked
  7500  000A2E  6F8E               	movwf	printf@f& (0+255),b
  7501  000A30  0EFB               	movlw	high STR_3
  7502  000A32  0100               	movlb	0	; () banked
  7503  000A34  6F8F               	movwf	(printf@f+1)& (0+255),b
  7504  000A36  C0F2  F090         	movff	_log,?_printf+2
  7505  000A3A  C0F3  F091         	movff	_log+1,?_printf+3
  7506  000A3E  EC02  F00B         	call	_printf	;wreg free
  7507                           
  7508                           ;UI.c: 106: lcdInst(0b11000000);;
  7509  000A42  0EC0               	movlw	192
  7510  000A44  EC5D  F029         	call	_lcdInst
  7511                           
  7512                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7513  000A48  0E46               	movlw	low STR_4
  7514  000A4A  0100               	movlb	0	; () banked
  7515  000A4C  6F8E               	movwf	printf@f& (0+255),b
  7516  000A4E  0EFE               	movlw	high STR_4
  7517  000A50  0100               	movlb	0	; () banked
  7518  000A52  6F8F               	movwf	(printf@f+1)& (0+255),b
  7519  000A54  EC02  F00B         	call	_printf	;wreg free
  7520  000A58                     l8548:
  7521  000A58  0E00               	movlw	0
  7522  000A5A  0100               	movlb	0	; () banked
  7523  000A5C  6FC9               	movwf	UI@i_409& (0+255),b
  7524  000A5E                     l8550:
  7525                           
  7526                           ; BSR set to: 0
  7527  000A5E  0E63               	movlw	99
  7528  000A60  0100               	movlb	0	; () banked
  7529  000A62  65C9               	cpfsgt	UI@i_409& (0+255),b
  7530  000A64  D001               	goto	l8554
  7531  000A66  D00C               	goto	l8558
  7532  000A68                     l8554:
  7533                           
  7534                           ; BSR set to: 0
  7535  000A68  0E68               	movlw	104
  7536  000A6A  0100               	movlb	0	; () banked
  7537  000A6C  6FC4               	movwf	??_UI& (0+255),b
  7538  000A6E  0EE4               	movlw	228
  7539  000A70                     u8947:
  7540  000A70  2EE8               	decfsz	wreg,f,c
  7541  000A72  D7FE               	bra	u8947
  7542  000A74  2FC4               	decfsz	??_UI& (0+255),f,b
  7543  000A76  D7FC               	bra	u8947
  7544  000A78  F000               	nop	
  7545  000A7A  0100               	movlb	0	; () banked
  7546  000A7C  2BC9               	incf	UI@i_409& (0+255),f,b
  7547  000A7E  D7EF               	goto	l8550
  7548  000A80                     l8558:
  7549                           
  7550                           ; BSR set to: 0
  7551  000A80  0100               	movlb	0	; () banked
  7552  000A82  51F6               	movf	_logstate& (0+255),w,b
  7553  000A84  0100               	movlb	0	; () banked
  7554  000A86  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7555  000A88  B4D8               	btfsc	status,2,c
  7556  000A8A  0012               	return	
  7557  000A8C  D7E5               	goto	l8548
  7558  000A8E                     l8564:
  7559                           
  7560                           ;UI.c: 111: else{
  7561                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7562  000A8E  0E01               	movlw	1
  7563  000A90  EC5D  F029         	call	_lcdInst
  7564  000A94  0E68               	movlw	104
  7565  000A96  0100               	movlb	0	; () banked
  7566  000A98  6FC4               	movwf	??_UI& (0+255),b
  7567  000A9A  0EE4               	movlw	228
  7568  000A9C                     u8957:
  7569  000A9C  2EE8               	decfsz	wreg,f,c
  7570  000A9E  D7FE               	bra	u8957
  7571  000AA0  2FC4               	decfsz	??_UI& (0+255),f,b
  7572  000AA2  D7FC               	bra	u8957
  7573  000AA4  F000               	nop	
  7574                           
  7575                           ;UI.c: 113: lcdInst(0b10000000);;
  7576  000AA6  0E80               	movlw	128
  7577  000AA8  EC5D  F029         	call	_lcdInst
  7578                           
  7579                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7580  000AAC  0E8D               	movlw	low STR_3
  7581  000AAE  0100               	movlb	0	; () banked
  7582  000AB0  6F8E               	movwf	printf@f& (0+255),b
  7583  000AB2  0EFB               	movlw	high STR_3
  7584  000AB4  0100               	movlb	0	; () banked
  7585  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7586  000AB8  C0F2  F090         	movff	_log,?_printf+2
  7587  000ABC  C0F3  F091         	movff	_log+1,?_printf+3
  7588  000AC0  EC02  F00B         	call	_printf	;wreg free
  7589                           
  7590                           ;UI.c: 115: lcdInst(0b11000000);;
  7591  000AC4  0EC0               	movlw	192
  7592  000AC6  EC5D  F029         	call	_lcdInst
  7593                           
  7594                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7595  000ACA  0EE2               	movlw	low STR_6
  7596  000ACC  0100               	movlb	0	; () banked
  7597  000ACE  6F8E               	movwf	printf@f& (0+255),b
  7598  000AD0  0EFD               	movlw	high STR_6
  7599  000AD2  0100               	movlb	0	; () banked
  7600  000AD4  6F8F               	movwf	(printf@f+1)& (0+255),b
  7601  000AD6  EC02  F00B         	call	_printf	;wreg free
  7602                           
  7603                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7604  000ADA  0E00               	movlw	0
  7605  000ADC  0100               	movlb	0	; () banked
  7606  000ADE  6FCA               	movwf	UI@i_412& (0+255),b
  7607  000AE0                     l8578:
  7608                           
  7609                           ; BSR set to: 0
  7610  000AE0  0E63               	movlw	99
  7611  000AE2  0100               	movlb	0	; () banked
  7612  000AE4  65CA               	cpfsgt	UI@i_412& (0+255),b
  7613  000AE6  D001               	goto	l8582
  7614  000AE8  D00C               	goto	l8586
  7615  000AEA                     l8582:
  7616                           
  7617                           ; BSR set to: 0
  7618  000AEA  0E68               	movlw	104
  7619  000AEC  0100               	movlb	0	; () banked
  7620  000AEE  6FC4               	movwf	??_UI& (0+255),b
  7621  000AF0  0EE4               	movlw	228
  7622  000AF2                     u8967:
  7623  000AF2  2EE8               	decfsz	wreg,f,c
  7624  000AF4  D7FE               	bra	u8967
  7625  000AF6  2FC4               	decfsz	??_UI& (0+255),f,b
  7626  000AF8  D7FC               	bra	u8967
  7627  000AFA  F000               	nop	
  7628  000AFC  0100               	movlb	0	; () banked
  7629  000AFE  2BCA               	incf	UI@i_412& (0+255),f,b
  7630  000B00  D7EF               	goto	l8578
  7631  000B02                     l8586:
  7632                           
  7633                           ; BSR set to: 0
  7634  000B02  0100               	movlb	0	; () banked
  7635  000B04  51F6               	movf	_logstate& (0+255),w,b
  7636  000B06  0100               	movlb	0	; () banked
  7637  000B08  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7638  000B0A  B4D8               	btfsc	status,2,c
  7639  000B0C  0012               	return	
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7643                           
  7644                           ; BSR set to: 0
  7645                           
  7646                           ; BSR set to: 0
  7647  000B0E  0E00               	movlw	0
  7648  000B10  0100               	movlb	0	; () banked
  7649  000B12  6FCB               	movwf	UI@i_413& (0+255),b
  7650  000B14                     l8592:
  7651                           
  7652                           ; BSR set to: 0
  7653  000B14  0E63               	movlw	99
  7654  000B16  0100               	movlb	0	; () banked
  7655  000B18  65CB               	cpfsgt	UI@i_413& (0+255),b
  7656  000B1A  D001               	goto	l8596
  7657  000B1C  D00C               	goto	l8600
  7658  000B1E                     l8596:
  7659                           
  7660                           ; BSR set to: 0
  7661  000B1E  0E68               	movlw	104
  7662  000B20  0100               	movlb	0	; () banked
  7663  000B22  6FC4               	movwf	??_UI& (0+255),b
  7664  000B24  0EE4               	movlw	228
  7665  000B26                     u8977:
  7666  000B26  2EE8               	decfsz	wreg,f,c
  7667  000B28  D7FE               	bra	u8977
  7668  000B2A  2FC4               	decfsz	??_UI& (0+255),f,b
  7669  000B2C  D7FC               	bra	u8977
  7670  000B2E  F000               	nop	
  7671  000B30  0100               	movlb	0	; () banked
  7672  000B32  2BCB               	incf	UI@i_413& (0+255),f,b
  7673  000B34  D7EF               	goto	l8592
  7674  000B36                     l8600:
  7675                           
  7676                           ; BSR set to: 0
  7677  000B36  0100               	movlb	0	; () banked
  7678  000B38  51F6               	movf	_logstate& (0+255),w,b
  7679  000B3A  0100               	movlb	0	; () banked
  7680  000B3C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7681  000B3E  B4D8               	btfsc	status,2,c
  7682  000B40  0012               	return	
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7686                           
  7687                           ; BSR set to: 0
  7688                           
  7689                           ; BSR set to: 0
  7690  000B42  0E01               	movlw	1
  7691  000B44  EC5D  F029         	call	_lcdInst
  7692  000B48  0E68               	movlw	104
  7693  000B4A  0100               	movlb	0	; () banked
  7694  000B4C  6FC4               	movwf	??_UI& (0+255),b
  7695  000B4E  0EE4               	movlw	228
  7696  000B50                     u8987:
  7697  000B50  2EE8               	decfsz	wreg,f,c
  7698  000B52  D7FE               	bra	u8987
  7699  000B54  2FC4               	decfsz	??_UI& (0+255),f,b
  7700  000B56  D7FC               	bra	u8987
  7701  000B58  F000               	nop	
  7702                           
  7703                           ;UI.c: 122: lcdInst(0b10000000);;
  7704  000B5A  0E80               	movlw	128
  7705  000B5C  EC5D  F029         	call	_lcdInst
  7706                           
  7707                           ;UI.c: 123: printf("START:");
  7708  000B60  0EC0               	movlw	low STR_7
  7709  000B62  0100               	movlb	0	; () banked
  7710  000B64  6F8E               	movwf	printf@f& (0+255),b
  7711  000B66  0EFF               	movlw	high STR_7
  7712  000B68  0100               	movlb	0	; () banked
  7713  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7714  000B6C  EC02  F00B         	call	_printf	;wreg free
  7715                           
  7716                           ;UI.c: 124: lcdInst(0b11000000);;
  7717  000B70  0EC0               	movlw	192
  7718  000B72  EC5D  F029         	call	_lcdInst
  7719                           
  7720                           ;UI.c: 125: char month[] = "MMM";
  7721  000B76  C141  F0D6         	movff	UI@F3235,UI@month
  7722  000B7A  C142  F0D7         	movff	UI@F3235+1,UI@month+1
  7723  000B7E  C143  F0D8         	movff	UI@F3235+2,UI@month+2
  7724  000B82  C144  F0D9         	movff	UI@F3235+3,UI@month+3
  7725                           
  7726                           ;UI.c: 126: switch(log_startTime[5]){
  7727  000B86  D0C3               	goto	l8644
  7728  000B88                     l8616:
  7729                           
  7730                           ;UI.c: 128: strcpy(month, "JAN");
  7731  000B88  0ED6               	movlw	low UI@month
  7732  000B8A  0100               	movlb	0	; () banked
  7733  000B8C  6F80               	movwf	strcpy@to& (0+255),b
  7734  000B8E  0E00               	movlw	high UI@month
  7735  000B90  0100               	movlb	0	; () banked
  7736  000B92  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7737  000B94  0EDB               	movlw	low STR_8
  7738  000B96  0100               	movlb	0	; () banked
  7739  000B98  6F82               	movwf	strcpy@from& (0+255),b
  7740  000B9A  0EFF               	movlw	high STR_8
  7741  000B9C  0100               	movlb	0	; () banked
  7742  000B9E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7743  000BA0  ECB8  F026         	call	_strcpy	;wreg free
  7744                           
  7745                           ;UI.c: 129: break;
  7746  000BA4  D0E6               	goto	l8646
  7747  000BA6                     l8618:
  7748                           
  7749                           ;UI.c: 131: strcpy(month, "FEB");
  7750  000BA6  0ED6               	movlw	low UI@month
  7751  000BA8  0100               	movlb	0	; () banked
  7752  000BAA  6F80               	movwf	strcpy@to& (0+255),b
  7753  000BAC  0E00               	movlw	high UI@month
  7754  000BAE  0100               	movlb	0	; () banked
  7755  000BB0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7756  000BB2  0ECB               	movlw	low STR_9
  7757  000BB4  0100               	movlb	0	; () banked
  7758  000BB6  6F82               	movwf	strcpy@from& (0+255),b
  7759  000BB8  0EFF               	movlw	high STR_9
  7760  000BBA  0100               	movlb	0	; () banked
  7761  000BBC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7762  000BBE  ECB8  F026         	call	_strcpy	;wreg free
  7763                           
  7764                           ;UI.c: 132: break;
  7765  000BC2  D0D7               	goto	l8646
  7766  000BC4                     l8620:
  7767                           
  7768                           ;UI.c: 134: strcpy(month, "MAR");
  7769  000BC4  0ED6               	movlw	low UI@month
  7770  000BC6  0100               	movlb	0	; () banked
  7771  000BC8  6F80               	movwf	strcpy@to& (0+255),b
  7772  000BCA  0E00               	movlw	high UI@month
  7773  000BCC  0100               	movlb	0	; () banked
  7774  000BCE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7775  000BD0  0EE7               	movlw	low STR_10
  7776  000BD2  0100               	movlb	0	; () banked
  7777  000BD4  6F82               	movwf	strcpy@from& (0+255),b
  7778  000BD6  0EFF               	movlw	high STR_10
  7779  000BD8  0100               	movlb	0	; () banked
  7780  000BDA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7781  000BDC  ECB8  F026         	call	_strcpy	;wreg free
  7782                           
  7783                           ;UI.c: 135: break;
  7784  000BE0  D0C8               	goto	l8646
  7785  000BE2                     l8622:
  7786                           
  7787                           ;UI.c: 137: strcpy(month, "APR");
  7788  000BE2  0ED6               	movlw	low UI@month
  7789  000BE4  0100               	movlb	0	; () banked
  7790  000BE6  6F80               	movwf	strcpy@to& (0+255),b
  7791  000BE8  0E00               	movlw	high UI@month
  7792  000BEA  0100               	movlb	0	; () banked
  7793  000BEC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7794  000BEE  0EEB               	movlw	low STR_11
  7795  000BF0  0100               	movlb	0	; () banked
  7796  000BF2  6F82               	movwf	strcpy@from& (0+255),b
  7797  000BF4  0EFF               	movlw	high STR_11
  7798  000BF6  0100               	movlb	0	; () banked
  7799  000BF8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7800  000BFA  ECB8  F026         	call	_strcpy	;wreg free
  7801                           
  7802                           ;UI.c: 138: break;
  7803  000BFE  D0B9               	goto	l8646
  7804  000C00                     l8624:
  7805                           
  7806                           ;UI.c: 140: strcpy(month, "MAY");
  7807  000C00  0ED6               	movlw	low UI@month
  7808  000C02  0100               	movlb	0	; () banked
  7809  000C04  6F80               	movwf	strcpy@to& (0+255),b
  7810  000C06  0E00               	movlw	high UI@month
  7811  000C08  0100               	movlb	0	; () banked
  7812  000C0A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7813  000C0C  0EFB               	movlw	low STR_12
  7814  000C0E  0100               	movlb	0	; () banked
  7815  000C10  6F82               	movwf	strcpy@from& (0+255),b
  7816  000C12  0EFF               	movlw	high STR_12
  7817  000C14  0100               	movlb	0	; () banked
  7818  000C16  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7819  000C18  ECB8  F026         	call	_strcpy	;wreg free
  7820                           
  7821                           ;UI.c: 141: break;
  7822  000C1C  D0AA               	goto	l8646
  7823  000C1E                     l8626:
  7824                           
  7825                           ;UI.c: 143: strcpy(month, "JUN");
  7826  000C1E  0ED6               	movlw	low UI@month
  7827  000C20  0100               	movlb	0	; () banked
  7828  000C22  6F80               	movwf	strcpy@to& (0+255),b
  7829  000C24  0E00               	movlw	high UI@month
  7830  000C26  0100               	movlb	0	; () banked
  7831  000C28  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7832  000C2A  0EDF               	movlw	low STR_13
  7833  000C2C  0100               	movlb	0	; () banked
  7834  000C2E  6F82               	movwf	strcpy@from& (0+255),b
  7835  000C30  0EFF               	movlw	high STR_13
  7836  000C32  0100               	movlb	0	; () banked
  7837  000C34  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7838  000C36  ECB8  F026         	call	_strcpy	;wreg free
  7839                           
  7840                           ;UI.c: 144: break;
  7841  000C3A  D09B               	goto	l8646
  7842  000C3C                     l8628:
  7843                           
  7844                           ;UI.c: 146: strcpy(month, "JUL");
  7845  000C3C  0ED6               	movlw	low UI@month
  7846  000C3E  0100               	movlb	0	; () banked
  7847  000C40  6F80               	movwf	strcpy@to& (0+255),b
  7848  000C42  0E00               	movlw	high UI@month
  7849  000C44  0100               	movlb	0	; () banked
  7850  000C46  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7851  000C48  0ED7               	movlw	low STR_14
  7852  000C4A  0100               	movlb	0	; () banked
  7853  000C4C  6F82               	movwf	strcpy@from& (0+255),b
  7854  000C4E  0EFF               	movlw	high STR_14
  7855  000C50  0100               	movlb	0	; () banked
  7856  000C52  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7857  000C54  ECB8  F026         	call	_strcpy	;wreg free
  7858                           
  7859                           ;UI.c: 147: break;
  7860  000C58  D08C               	goto	l8646
  7861  000C5A                     l8630:
  7862                           
  7863                           ;UI.c: 149: strcpy(month, "AUG");
  7864  000C5A  0ED6               	movlw	low UI@month
  7865  000C5C  0100               	movlb	0	; () banked
  7866  000C5E  6F80               	movwf	strcpy@to& (0+255),b
  7867  000C60  0E00               	movlw	high UI@month
  7868  000C62  0100               	movlb	0	; () banked
  7869  000C64  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7870  000C66  0ED3               	movlw	low STR_15
  7871  000C68  0100               	movlb	0	; () banked
  7872  000C6A  6F82               	movwf	strcpy@from& (0+255),b
  7873  000C6C  0EFF               	movlw	high STR_15
  7874  000C6E  0100               	movlb	0	; () banked
  7875  000C70  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7876  000C72  ECB8  F026         	call	_strcpy	;wreg free
  7877                           
  7878                           ;UI.c: 150: break;
  7879  000C76  D07D               	goto	l8646
  7880  000C78                     l8632:
  7881                           
  7882                           ;UI.c: 152: strcpy(month, "SEP");
  7883  000C78  0ED6               	movlw	low UI@month
  7884  000C7A  0100               	movlb	0	; () banked
  7885  000C7C  6F80               	movwf	strcpy@to& (0+255),b
  7886  000C7E  0E00               	movlw	high UI@month
  7887  000C80  0100               	movlb	0	; () banked
  7888  000C82  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7889  000C84  0EE3               	movlw	low STR_16
  7890  000C86  0100               	movlb	0	; () banked
  7891  000C88  6F82               	movwf	strcpy@from& (0+255),b
  7892  000C8A  0EFF               	movlw	high STR_16
  7893  000C8C  0100               	movlb	0	; () banked
  7894  000C8E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7895  000C90  ECB8  F026         	call	_strcpy	;wreg free
  7896                           
  7897                           ;UI.c: 153: break;
  7898  000C94  D06E               	goto	l8646
  7899  000C96                     l8634:
  7900                           
  7901                           ;UI.c: 155: strcpy(month, "OCT");
  7902  000C96  0ED6               	movlw	low UI@month
  7903  000C98  0100               	movlb	0	; () banked
  7904  000C9A  6F80               	movwf	strcpy@to& (0+255),b
  7905  000C9C  0E00               	movlw	high UI@month
  7906  000C9E  0100               	movlb	0	; () banked
  7907  000CA0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7908  000CA2  0EF3               	movlw	low STR_17
  7909  000CA4  0100               	movlb	0	; () banked
  7910  000CA6  6F82               	movwf	strcpy@from& (0+255),b
  7911  000CA8  0EFF               	movlw	high STR_17
  7912  000CAA  0100               	movlb	0	; () banked
  7913  000CAC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7914  000CAE  ECB8  F026         	call	_strcpy	;wreg free
  7915                           
  7916                           ;UI.c: 156: break;
  7917  000CB2  D05F               	goto	l8646
  7918  000CB4                     l8636:
  7919                           
  7920                           ;UI.c: 158: strcpy(month, "NOV");
  7921  000CB4  0ED6               	movlw	low UI@month
  7922  000CB6  0100               	movlb	0	; () banked
  7923  000CB8  6F80               	movwf	strcpy@to& (0+255),b
  7924  000CBA  0E00               	movlw	high UI@month
  7925  000CBC  0100               	movlb	0	; () banked
  7926  000CBE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7927  000CC0  0EF7               	movlw	low STR_18
  7928  000CC2  0100               	movlb	0	; () banked
  7929  000CC4  6F82               	movwf	strcpy@from& (0+255),b
  7930  000CC6  0EFF               	movlw	high STR_18
  7931  000CC8  0100               	movlb	0	; () banked
  7932  000CCA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7933  000CCC  ECB8  F026         	call	_strcpy	;wreg free
  7934                           
  7935                           ;UI.c: 159: break;
  7936  000CD0  D050               	goto	l8646
  7937  000CD2                     l8638:
  7938                           
  7939                           ;UI.c: 161: strcpy(month, "DEC");
  7940  000CD2  0ED6               	movlw	low UI@month
  7941  000CD4  0100               	movlb	0	; () banked
  7942  000CD6  6F80               	movwf	strcpy@to& (0+255),b
  7943  000CD8  0E00               	movlw	high UI@month
  7944  000CDA  0100               	movlb	0	; () banked
  7945  000CDC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7946  000CDE  0ECF               	movlw	low STR_19
  7947  000CE0  0100               	movlb	0	; () banked
  7948  000CE2  6F82               	movwf	strcpy@from& (0+255),b
  7949  000CE4  0EFF               	movlw	high STR_19
  7950  000CE6  0100               	movlb	0	; () banked
  7951  000CE8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7952  000CEA  ECB8  F026         	call	_strcpy	;wreg free
  7953                           
  7954                           ;UI.c: 162: break;
  7955  000CEE  D041               	goto	l8646
  7956  000CF0                     l8640:
  7957                           
  7958                           ;UI.c: 164: strcpy(month, "ERR");
  7959  000CF0  0ED6               	movlw	low UI@month
  7960  000CF2  0100               	movlb	0	; () banked
  7961  000CF4  6F80               	movwf	strcpy@to& (0+255),b
  7962  000CF6  0E00               	movlw	high UI@month
  7963  000CF8  0100               	movlb	0	; () banked
  7964  000CFA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7965  000CFC  0EEF               	movlw	low STR_20
  7966  000CFE  0100               	movlb	0	; () banked
  7967  000D00  6F82               	movwf	strcpy@from& (0+255),b
  7968  000D02  0EFF               	movlw	high STR_20
  7969  000D04  0100               	movlb	0	; () banked
  7970  000D06  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7971  000D08  ECB8  F026         	call	_strcpy	;wreg free
  7972                           
  7973                           ;UI.c: 166: }
  7974                           
  7975                           ;UI.c: 165: break;
  7976  000D0C  D032               	goto	l8646
  7977  000D0E                     l8644:
  7978  000D0E  EE21  F00A         	lfsr	2,_log_startTime+10
  7979  000D12  CFDE F0C4          	movff	postinc2,??_UI
  7980  000D16  CFDD F0C5          	movff	postdec2,??_UI+1
  7981                           
  7982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7983                           ; Switch size 1, requested type "space"
  7984                           ; Number of cases is 1, Range of values is 0 to 0
  7985                           ; switch strategies available:
  7986                           ; Name         Instructions Cycles
  7987                           ; simple_byte            4     3 (average)
  7988                           ;	Chosen strategy is simple_byte
  7989  000D1A  0100               	movlb	0	; () banked
  7990  000D1C  51C5               	movf	(??_UI+1)& (0+255),w,b
  7991  000D1E  0A00               	xorlw	0	; case 0
  7992  000D20  A4D8               	btfss	status,2,c
  7993  000D22  D7E6               	goto	l8640
  7994                           
  7995                           ; BSR set to: 0
  7996                           ; Switch size 1, requested type "space"
  7997                           ; Number of cases is 12, Range of values is 1 to 12
  7998                           ; switch strategies available:
  7999                           ; Name         Instructions Cycles
  8000                           ; simple_byte           37    19 (average)
  8001                           ;	Chosen strategy is simple_byte
  8002  000D24  0100               	movlb	0	; () banked
  8003  000D26  51C4               	movf	??_UI& (0+255),w,b
  8004  000D28  0A01               	xorlw	1	; case 1
  8005  000D2A  B4D8               	btfsc	status,2,c
  8006  000D2C  D72D               	goto	l8616
  8007  000D2E  0A03               	xorlw	3	; case 2
  8008  000D30  B4D8               	btfsc	status,2,c
  8009  000D32  D739               	goto	l8618
  8010  000D34  0A01               	xorlw	1	; case 3
  8011  000D36  B4D8               	btfsc	status,2,c
  8012  000D38  D745               	goto	l8620
  8013  000D3A  0A07               	xorlw	7	; case 4
  8014  000D3C  B4D8               	btfsc	status,2,c
  8015  000D3E  D751               	goto	l8622
  8016  000D40  0A01               	xorlw	1	; case 5
  8017  000D42  B4D8               	btfsc	status,2,c
  8018  000D44  D75D               	goto	l8624
  8019  000D46  0A03               	xorlw	3	; case 6
  8020  000D48  B4D8               	btfsc	status,2,c
  8021  000D4A  D769               	goto	l8626
  8022  000D4C  0A01               	xorlw	1	; case 7
  8023  000D4E  B4D8               	btfsc	status,2,c
  8024  000D50  D775               	goto	l8628
  8025  000D52  0A0F               	xorlw	15	; case 8
  8026  000D54  B4D8               	btfsc	status,2,c
  8027  000D56  D781               	goto	l8630
  8028  000D58  0A01               	xorlw	1	; case 9
  8029  000D5A  B4D8               	btfsc	status,2,c
  8030  000D5C  D78D               	goto	l8632
  8031  000D5E  0A03               	xorlw	3	; case 10
  8032  000D60  B4D8               	btfsc	status,2,c
  8033  000D62  D799               	goto	l8634
  8034  000D64  0A01               	xorlw	1	; case 11
  8035  000D66  B4D8               	btfsc	status,2,c
  8036  000D68  D7A5               	goto	l8636
  8037  000D6A  0A07               	xorlw	7	; case 12
  8038  000D6C  B4D8               	btfsc	status,2,c
  8039  000D6E  D7B1               	goto	l8638
  8040  000D70  D7BF               	goto	l8640
  8041  000D72                     l8646:
  8042                           
  8043                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  8044  000D72  0E06               	movlw	low STR_21
  8045  000D74  0100               	movlb	0	; () banked
  8046  000D76  6F8E               	movwf	printf@f& (0+255),b
  8047  000D78  0EFB               	movlw	high STR_21
  8048  000D7A  0100               	movlb	0	; () banked
  8049  000D7C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8050  000D7E  C108  F090         	movff	_log_startTime+8,?_printf+2
  8051  000D82  C109  F091         	movff	_log_startTime+9,?_printf+3
  8052  000D86  0ED6               	movlw	low UI@month
  8053  000D88  0100               	movlb	0	; () banked
  8054  000D8A  6F92               	movwf	(?_printf+4)& (0+255),b
  8055  000D8C  0E00               	movlw	high UI@month
  8056  000D8E  0100               	movlb	0	; () banked
  8057  000D90  6F93               	movwf	(?_printf+5)& (0+255),b
  8058  000D92  C104  F094         	movff	_log_startTime+4,?_printf+6
  8059  000D96  C105  F095         	movff	_log_startTime+5,?_printf+7
  8060  000D9A  C102  F096         	movff	_log_startTime+2,?_printf+8
  8061  000D9E  C103  F097         	movff	_log_startTime+3,?_printf+9
  8062  000DA2  C100  F098         	movff	_log_startTime,?_printf+10
  8063  000DA6  C101  F099         	movff	_log_startTime+1,?_printf+11
  8064  000DAA  EC02  F00B         	call	_printf	;wreg free
  8065                           
  8066                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8067  000DAE  0E00               	movlw	0
  8068  000DB0  0100               	movlb	0	; () banked
  8069  000DB2  6FCC               	movwf	UI@i_431& (0+255),b
  8070  000DB4                     l8650:
  8071                           
  8072                           ; BSR set to: 0
  8073  000DB4  0E63               	movlw	99
  8074  000DB6  0100               	movlb	0	; () banked
  8075  000DB8  65CC               	cpfsgt	UI@i_431& (0+255),b
  8076  000DBA  D001               	goto	l8654
  8077  000DBC  D00C               	goto	l8658
  8078  000DBE                     l8654:
  8079                           
  8080                           ; BSR set to: 0
  8081  000DBE  0E68               	movlw	104
  8082  000DC0  0100               	movlb	0	; () banked
  8083  000DC2  6FC4               	movwf	??_UI& (0+255),b
  8084  000DC4  0EE4               	movlw	228
  8085  000DC6                     u8997:
  8086  000DC6  2EE8               	decfsz	wreg,f,c
  8087  000DC8  D7FE               	bra	u8997
  8088  000DCA  2FC4               	decfsz	??_UI& (0+255),f,b
  8089  000DCC  D7FC               	bra	u8997
  8090  000DCE  F000               	nop	
  8091  000DD0  0100               	movlb	0	; () banked
  8092  000DD2  2BCC               	incf	UI@i_431& (0+255),f,b
  8093  000DD4  D7EF               	goto	l8650
  8094  000DD6                     l8658:
  8095                           
  8096                           ; BSR set to: 0
  8097  000DD6  0100               	movlb	0	; () banked
  8098  000DD8  51F6               	movf	_logstate& (0+255),w,b
  8099  000DDA  0100               	movlb	0	; () banked
  8100  000DDC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8101  000DDE  B4D8               	btfsc	status,2,c
  8102  000DE0  0012               	return	
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8106                           
  8107                           ; BSR set to: 0
  8108                           
  8109                           ; BSR set to: 0
  8110  000DE2  0E00               	movlw	0
  8111  000DE4  0100               	movlb	0	; () banked
  8112  000DE6  6FCD               	movwf	UI@i_432& (0+255),b
  8113  000DE8                     l8664:
  8114                           
  8115                           ; BSR set to: 0
  8116  000DE8  0E63               	movlw	99
  8117  000DEA  0100               	movlb	0	; () banked
  8118  000DEC  65CD               	cpfsgt	UI@i_432& (0+255),b
  8119  000DEE  D001               	goto	l8668
  8120  000DF0  D00C               	goto	l8672
  8121  000DF2                     l8668:
  8122                           
  8123                           ; BSR set to: 0
  8124  000DF2  0E68               	movlw	104
  8125  000DF4  0100               	movlb	0	; () banked
  8126  000DF6  6FC4               	movwf	??_UI& (0+255),b
  8127  000DF8  0EE4               	movlw	228
  8128  000DFA                     u9007:
  8129  000DFA  2EE8               	decfsz	wreg,f,c
  8130  000DFC  D7FE               	bra	u9007
  8131  000DFE  2FC4               	decfsz	??_UI& (0+255),f,b
  8132  000E00  D7FC               	bra	u9007
  8133  000E02  F000               	nop	
  8134  000E04  0100               	movlb	0	; () banked
  8135  000E06  2BCD               	incf	UI@i_432& (0+255),f,b
  8136  000E08  D7EF               	goto	l8664
  8137  000E0A                     l8672:
  8138                           
  8139                           ; BSR set to: 0
  8140  000E0A  0100               	movlb	0	; () banked
  8141  000E0C  51F6               	movf	_logstate& (0+255),w,b
  8142  000E0E  0100               	movlb	0	; () banked
  8143  000E10  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8144  000E12  B4D8               	btfsc	status,2,c
  8145  000E14  0012               	return	
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8149                           
  8150                           ; BSR set to: 0
  8151                           
  8152                           ; BSR set to: 0
  8153  000E16  0E01               	movlw	1
  8154  000E18  EC5D  F029         	call	_lcdInst
  8155  000E1C  0E68               	movlw	104
  8156  000E1E  0100               	movlb	0	; () banked
  8157  000E20  6FC4               	movwf	??_UI& (0+255),b
  8158  000E22  0EE4               	movlw	228
  8159  000E24                     u9017:
  8160  000E24  2EE8               	decfsz	wreg,f,c
  8161  000E26  D7FE               	bra	u9017
  8162  000E28  2FC4               	decfsz	??_UI& (0+255),f,b
  8163  000E2A  D7FC               	bra	u9017
  8164  000E2C  F000               	nop	
  8165                           
  8166                           ;UI.c: 173: lcdInst(0b10000000);;
  8167  000E2E  0E80               	movlw	128
  8168  000E30  EC5D  F029         	call	_lcdInst
  8169                           
  8170                           ;UI.c: 174: printf("DURATION:");
  8171  000E34  0E97               	movlw	low STR_22
  8172  000E36  0100               	movlb	0	; () banked
  8173  000E38  6F8E               	movwf	printf@f& (0+255),b
  8174  000E3A  0EFF               	movlw	high STR_22
  8175  000E3C  0100               	movlb	0	; () banked
  8176  000E3E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8177  000E40  EC02  F00B         	call	_printf	;wreg free
  8178                           
  8179                           ;UI.c: 175: lcdInst(0b11000000);;
  8180  000E44  0EC0               	movlw	192
  8181  000E46  EC5D  F029         	call	_lcdInst
  8182                           
  8183                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8184  000E4A  0E0E               	movlw	14
  8185  000E4C  0100               	movlb	0	; () banked
  8186  000E4E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8187  000E50  0E10               	movlw	16
  8188  000E52  6F82               	movwf	___awmod@divisor& (0+255),b
  8189  000E54  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8190  000E58  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8191  000E5C  ECD0  F021         	call	___awmod	;wreg free
  8192  000E60  C080  F0C6         	movff	?___awmod,_UI$2416
  8193  000E64  C081  F0C7         	movff	?___awmod+1,_UI$2416+1
  8194                           
  8195                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  8196  000E68  0E15               	movlw	low STR_23
  8197  000E6A  0100               	movlb	0	; () banked
  8198  000E6C  6F8E               	movwf	printf@f& (0+255),b
  8199  000E6E  0EFF               	movlw	high STR_23
  8200  000E70  0100               	movlb	0	; () banked
  8201  000E72  6F8F               	movwf	(printf@f+1)& (0+255),b
  8202  000E74  0E0E               	movlw	14
  8203  000E76  0100               	movlb	0	; () banked
  8204  000E78  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8205  000E7A  0E10               	movlw	16
  8206  000E7C  6F82               	movwf	___awmod@divisor& (0+255),b
  8207  000E7E  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  8208  000E82  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  8209  000E86  ECD0  F021         	call	___awmod	;wreg free
  8210  000E8A  C080  F086         	movff	?___awmod,___awdiv@dividend
  8211  000E8E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8212  000E92  0E00               	movlw	0
  8213  000E94  0100               	movlb	0	; () banked
  8214  000E96  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8215  000E98  0E3C               	movlw	60
  8216  000E9A  6F88               	movwf	___awdiv@divisor& (0+255),b
  8217  000E9C  EC68  F020         	call	___awdiv	;wreg free
  8218  000EA0  C086  F090         	movff	?___awdiv,?_printf+2
  8219  000EA4  C087  F091         	movff	?___awdiv+1,?_printf+3
  8220  000EA8  C0C6  F080         	movff	_UI$2416,___awmod@dividend
  8221  000EAC  C0C7  F081         	movff	_UI$2416+1,___awmod@dividend+1
  8222  000EB0  0E00               	movlw	0
  8223  000EB2  0100               	movlb	0	; () banked
  8224  000EB4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8225  000EB6  0E3C               	movlw	60
  8226  000EB8  6F82               	movwf	___awmod@divisor& (0+255),b
  8227  000EBA  ECD0  F021         	call	___awmod	;wreg free
  8228  000EBE  C080  F092         	movff	?___awmod,?_printf+4
  8229  000EC2  C081  F093         	movff	?___awmod+1,?_printf+5
  8230  000EC6  EC02  F00B         	call	_printf	;wreg free
  8231                           
  8232                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8233  000ECA  0E00               	movlw	0
  8234  000ECC  0100               	movlb	0	; () banked
  8235  000ECE  6FCE               	movwf	UI@i_435& (0+255),b
  8236  000ED0                     l8692:
  8237                           
  8238                           ; BSR set to: 0
  8239  000ED0  0E63               	movlw	99
  8240  000ED2  0100               	movlb	0	; () banked
  8241  000ED4  65CE               	cpfsgt	UI@i_435& (0+255),b
  8242  000ED6  D001               	goto	l8696
  8243  000ED8  D00C               	goto	l8700
  8244  000EDA                     l8696:
  8245                           
  8246                           ; BSR set to: 0
  8247  000EDA  0E68               	movlw	104
  8248  000EDC  0100               	movlb	0	; () banked
  8249  000EDE  6FC4               	movwf	??_UI& (0+255),b
  8250  000EE0  0EE4               	movlw	228
  8251  000EE2                     u9027:
  8252  000EE2  2EE8               	decfsz	wreg,f,c
  8253  000EE4  D7FE               	bra	u9027
  8254  000EE6  2FC4               	decfsz	??_UI& (0+255),f,b
  8255  000EE8  D7FC               	bra	u9027
  8256  000EEA  F000               	nop	
  8257  000EEC  0100               	movlb	0	; () banked
  8258  000EEE  2BCE               	incf	UI@i_435& (0+255),f,b
  8259  000EF0  D7EF               	goto	l8692
  8260  000EF2                     l8700:
  8261                           
  8262                           ; BSR set to: 0
  8263  000EF2  0100               	movlb	0	; () banked
  8264  000EF4  51F6               	movf	_logstate& (0+255),w,b
  8265  000EF6  0100               	movlb	0	; () banked
  8266  000EF8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8267  000EFA  B4D8               	btfsc	status,2,c
  8268  000EFC  0012               	return	
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8272                           
  8273                           ; BSR set to: 0
  8274                           
  8275                           ; BSR set to: 0
  8276  000EFE  0E00               	movlw	0
  8277  000F00  0100               	movlb	0	; () banked
  8278  000F02  6FCF               	movwf	UI@i_436& (0+255),b
  8279  000F04                     l8706:
  8280                           
  8281                           ; BSR set to: 0
  8282  000F04  0E63               	movlw	99
  8283  000F06  0100               	movlb	0	; () banked
  8284  000F08  65CF               	cpfsgt	UI@i_436& (0+255),b
  8285  000F0A  D001               	goto	l8710
  8286  000F0C  D00C               	goto	l8714
  8287  000F0E                     l8710:
  8288                           
  8289                           ; BSR set to: 0
  8290  000F0E  0E68               	movlw	104
  8291  000F10  0100               	movlb	0	; () banked
  8292  000F12  6FC4               	movwf	??_UI& (0+255),b
  8293  000F14  0EE4               	movlw	228
  8294  000F16                     u9037:
  8295  000F16  2EE8               	decfsz	wreg,f,c
  8296  000F18  D7FE               	bra	u9037
  8297  000F1A  2FC4               	decfsz	??_UI& (0+255),f,b
  8298  000F1C  D7FC               	bra	u9037
  8299  000F1E  F000               	nop	
  8300  000F20  0100               	movlb	0	; () banked
  8301  000F22  2BCF               	incf	UI@i_436& (0+255),f,b
  8302  000F24  D7EF               	goto	l8706
  8303  000F26                     l8714:
  8304                           
  8305                           ; BSR set to: 0
  8306  000F26  0100               	movlb	0	; () banked
  8307  000F28  51F6               	movf	_logstate& (0+255),w,b
  8308  000F2A  0100               	movlb	0	; () banked
  8309  000F2C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8310  000F2E  B4D8               	btfsc	status,2,c
  8311  000F30  0012               	return	
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8315                           
  8316                           ; BSR set to: 0
  8317                           
  8318                           ; BSR set to: 0
  8319  000F32  0E01               	movlw	1
  8320  000F34  EC5D  F029         	call	_lcdInst
  8321  000F38  0E68               	movlw	104
  8322  000F3A  0100               	movlb	0	; () banked
  8323  000F3C  6FC4               	movwf	??_UI& (0+255),b
  8324  000F3E  0EE4               	movlw	228
  8325  000F40                     u9047:
  8326  000F40  2EE8               	decfsz	wreg,f,c
  8327  000F42  D7FE               	bra	u9047
  8328  000F44  2FC4               	decfsz	??_UI& (0+255),f,b
  8329  000F46  D7FC               	bra	u9047
  8330  000F48  F000               	nop	
  8331                           
  8332                           ;UI.c: 182: lcdInst(0b10000000);;
  8333  000F4A  0E80               	movlw	128
  8334  000F4C  EC5D  F029         	call	_lcdInst
  8335                           
  8336                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8337  000F50  0E38               	movlw	low STR_24
  8338  000F52  0100               	movlb	0	; () banked
  8339  000F54  6F8E               	movwf	printf@f& (0+255),b
  8340  000F56  0EFD               	movlw	high STR_24
  8341  000F58  0100               	movlb	0	; () banked
  8342  000F5A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8343  000F5C  EC02  F00B         	call	_printf	;wreg free
  8344                           
  8345                           ;UI.c: 184: lcdInst(0b11000000);;
  8346  000F60  0EC0               	movlw	192
  8347  000F62  EC5D  F029         	call	_lcdInst
  8348                           
  8349                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8350  000F66  0E15               	movlw	low STR_25
  8351  000F68  0100               	movlb	0	; () banked
  8352  000F6A  6F8E               	movwf	printf@f& (0+255),b
  8353  000F6C  0EFE               	movlw	high STR_25
  8354  000F6E  0100               	movlb	0	; () banked
  8355  000F70  6F8F               	movwf	(printf@f+1)& (0+255),b
  8356  000F72  C069  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8357  000F76  C06A  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8358  000F7A  C06B  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8359  000F7E  C06C  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8360  000F82  EC02  F00B         	call	_printf	;wreg free
  8361                           
  8362                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8363  000F86  0E00               	movlw	0
  8364  000F88  0100               	movlb	0	; () banked
  8365  000F8A  6FD0               	movwf	UI@i_439& (0+255),b
  8366  000F8C                     l8732:
  8367                           
  8368                           ; BSR set to: 0
  8369  000F8C  0E63               	movlw	99
  8370  000F8E  0100               	movlb	0	; () banked
  8371  000F90  65D0               	cpfsgt	UI@i_439& (0+255),b
  8372  000F92  D001               	goto	l8736
  8373  000F94  D00C               	goto	l8740
  8374  000F96                     l8736:
  8375                           
  8376                           ; BSR set to: 0
  8377  000F96  0E68               	movlw	104
  8378  000F98  0100               	movlb	0	; () banked
  8379  000F9A  6FC4               	movwf	??_UI& (0+255),b
  8380  000F9C  0EE4               	movlw	228
  8381  000F9E                     u9057:
  8382  000F9E  2EE8               	decfsz	wreg,f,c
  8383  000FA0  D7FE               	bra	u9057
  8384  000FA2  2FC4               	decfsz	??_UI& (0+255),f,b
  8385  000FA4  D7FC               	bra	u9057
  8386  000FA6  F000               	nop	
  8387  000FA8  0100               	movlb	0	; () banked
  8388  000FAA  2BD0               	incf	UI@i_439& (0+255),f,b
  8389  000FAC  D7EF               	goto	l8732
  8390  000FAE                     l8740:
  8391                           
  8392                           ; BSR set to: 0
  8393  000FAE  0100               	movlb	0	; () banked
  8394  000FB0  51F6               	movf	_logstate& (0+255),w,b
  8395  000FB2  0100               	movlb	0	; () banked
  8396  000FB4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8397  000FB6  B4D8               	btfsc	status,2,c
  8398  000FB8  0012               	return	
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8402                           
  8403                           ; BSR set to: 0
  8404                           
  8405                           ; BSR set to: 0
  8406  000FBA  0E00               	movlw	0
  8407  000FBC  0100               	movlb	0	; () banked
  8408  000FBE  6FD1               	movwf	UI@i_440& (0+255),b
  8409  000FC0                     l8746:
  8410                           
  8411                           ; BSR set to: 0
  8412  000FC0  0E63               	movlw	99
  8413  000FC2  0100               	movlb	0	; () banked
  8414  000FC4  65D1               	cpfsgt	UI@i_440& (0+255),b
  8415  000FC6  D001               	goto	l8750
  8416  000FC8  D00C               	goto	l8754
  8417  000FCA                     l8750:
  8418                           
  8419                           ; BSR set to: 0
  8420  000FCA  0E68               	movlw	104
  8421  000FCC  0100               	movlb	0	; () banked
  8422  000FCE  6FC4               	movwf	??_UI& (0+255),b
  8423  000FD0  0EE4               	movlw	228
  8424  000FD2                     u9067:
  8425  000FD2  2EE8               	decfsz	wreg,f,c
  8426  000FD4  D7FE               	bra	u9067
  8427  000FD6  2FC4               	decfsz	??_UI& (0+255),f,b
  8428  000FD8  D7FC               	bra	u9067
  8429  000FDA  F000               	nop	
  8430  000FDC  0100               	movlb	0	; () banked
  8431  000FDE  2BD1               	incf	UI@i_440& (0+255),f,b
  8432  000FE0  D7EF               	goto	l8746
  8433  000FE2                     l8754:
  8434                           
  8435                           ; BSR set to: 0
  8436  000FE2  0100               	movlb	0	; () banked
  8437  000FE4  51F6               	movf	_logstate& (0+255),w,b
  8438  000FE6  0100               	movlb	0	; () banked
  8439  000FE8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8440  000FEA  B4D8               	btfsc	status,2,c
  8441  000FEC  0012               	return	
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8445                           
  8446                           ; BSR set to: 0
  8447                           
  8448                           ; BSR set to: 0
  8449  000FEE  0E01               	movlw	1
  8450  000FF0  EC5D  F029         	call	_lcdInst
  8451  000FF4  0E68               	movlw	104
  8452  000FF6  0100               	movlb	0	; () banked
  8453  000FF8  6FC4               	movwf	??_UI& (0+255),b
  8454  000FFA  0EE4               	movlw	228
  8455  000FFC                     u9077:
  8456  000FFC  2EE8               	decfsz	wreg,f,c
  8457  000FFE  D7FE               	bra	u9077
  8458  001000  2FC4               	decfsz	??_UI& (0+255),f,b
  8459  001002  D7FC               	bra	u9077
  8460  001004  F000               	nop	
  8461                           
  8462                           ;UI.c: 191: lcdInst(0b10000000);;
  8463  001006  0E80               	movlw	128
  8464  001008  EC5D  F029         	call	_lcdInst
  8465                           
  8466                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8467  00100C  0E49               	movlw	low STR_26
  8468  00100E  0100               	movlb	0	; () banked
  8469  001010  6F8E               	movwf	printf@f& (0+255),b
  8470  001012  0EFD               	movlw	high STR_26
  8471  001014  0100               	movlb	0	; () banked
  8472  001016  6F8F               	movwf	(printf@f+1)& (0+255),b
  8473  001018  EC02  F00B         	call	_printf	;wreg free
  8474                           
  8475                           ;UI.c: 193: lcdInst(0b11000000);;
  8476  00101C  0EC0               	movlw	192
  8477  00101E  EC5D  F029         	call	_lcdInst
  8478                           
  8479                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8480  001022  0E04               	movlw	low STR_27
  8481  001024  0100               	movlb	0	; () banked
  8482  001026  6F8E               	movwf	printf@f& (0+255),b
  8483  001028  0EFE               	movlw	high STR_27
  8484  00102A  0100               	movlb	0	; () banked
  8485  00102C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8486  00102E  C065  F090         	movff	_log_count_can_no_lab,?_printf+2
  8487  001032  C066  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8488  001036  C067  F092         	movff	_log_count_can_w_lab,?_printf+4
  8489  00103A  C068  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8490  00103E  EC02  F00B         	call	_printf	;wreg free
  8491                           
  8492                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8493  001042  0E00               	movlw	0
  8494  001044  0100               	movlb	0	; () banked
  8495  001046  6FD2               	movwf	UI@i_443& (0+255),b
  8496  001048                     l8772:
  8497                           
  8498                           ; BSR set to: 0
  8499  001048  0E63               	movlw	99
  8500  00104A  0100               	movlb	0	; () banked
  8501  00104C  65D2               	cpfsgt	UI@i_443& (0+255),b
  8502  00104E  D001               	goto	l8776
  8503  001050  D00C               	goto	l8780
  8504  001052                     l8776:
  8505                           
  8506                           ; BSR set to: 0
  8507  001052  0E68               	movlw	104
  8508  001054  0100               	movlb	0	; () banked
  8509  001056  6FC4               	movwf	??_UI& (0+255),b
  8510  001058  0EE4               	movlw	228
  8511  00105A                     u9087:
  8512  00105A  2EE8               	decfsz	wreg,f,c
  8513  00105C  D7FE               	bra	u9087
  8514  00105E  2FC4               	decfsz	??_UI& (0+255),f,b
  8515  001060  D7FC               	bra	u9087
  8516  001062  F000               	nop	
  8517  001064  0100               	movlb	0	; () banked
  8518  001066  2BD2               	incf	UI@i_443& (0+255),f,b
  8519  001068  D7EF               	goto	l8772
  8520  00106A                     l8780:
  8521                           
  8522                           ; BSR set to: 0
  8523  00106A  0100               	movlb	0	; () banked
  8524  00106C  51F6               	movf	_logstate& (0+255),w,b
  8525  00106E  0100               	movlb	0	; () banked
  8526  001070  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8527  001072  B4D8               	btfsc	status,2,c
  8528  001074  0012               	return	
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8532                           
  8533                           ; BSR set to: 0
  8534                           
  8535                           ; BSR set to: 0
  8536  001076  0E00               	movlw	0
  8537  001078  0100               	movlb	0	; () banked
  8538  00107A  6FD3               	movwf	UI@i_444& (0+255),b
  8539  00107C                     l8786:
  8540                           
  8541                           ; BSR set to: 0
  8542  00107C  0E63               	movlw	99
  8543  00107E  0100               	movlb	0	; () banked
  8544  001080  65D3               	cpfsgt	UI@i_444& (0+255),b
  8545  001082  D001               	goto	l8790
  8546  001084  D00C               	goto	l8794
  8547  001086                     l8790:
  8548                           
  8549                           ; BSR set to: 0
  8550  001086  0E68               	movlw	104
  8551  001088  0100               	movlb	0	; () banked
  8552  00108A  6FC4               	movwf	??_UI& (0+255),b
  8553  00108C  0EE4               	movlw	228
  8554  00108E                     u9097:
  8555  00108E  2EE8               	decfsz	wreg,f,c
  8556  001090  D7FE               	bra	u9097
  8557  001092  2FC4               	decfsz	??_UI& (0+255),f,b
  8558  001094  D7FC               	bra	u9097
  8559  001096  F000               	nop	
  8560  001098  0100               	movlb	0	; () banked
  8561  00109A  2BD3               	incf	UI@i_444& (0+255),f,b
  8562  00109C  D7EF               	goto	l8786
  8563  00109E                     l8794:
  8564                           
  8565                           ; BSR set to: 0
  8566  00109E  0100               	movlb	0	; () banked
  8567  0010A0  51F6               	movf	_logstate& (0+255),w,b
  8568  0010A2  0100               	movlb	0	; () banked
  8569  0010A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8570  0010A6  B4D8               	btfsc	status,2,c
  8571  0010A8  0012               	return	
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8575                           
  8576                           ; BSR set to: 0
  8577                           
  8578                           ; BSR set to: 0
  8579  0010AA  0E01               	movlw	1
  8580  0010AC  EC5D  F029         	call	_lcdInst
  8581  0010B0  0E68               	movlw	104
  8582  0010B2  0100               	movlb	0	; () banked
  8583  0010B4  6FC4               	movwf	??_UI& (0+255),b
  8584  0010B6  0EE4               	movlw	228
  8585  0010B8                     u9107:
  8586  0010B8  2EE8               	decfsz	wreg,f,c
  8587  0010BA  D7FE               	bra	u9107
  8588  0010BC  2FC4               	decfsz	??_UI& (0+255),f,b
  8589  0010BE  D7FC               	bra	u9107
  8590  0010C0  F000               	nop	
  8591                           
  8592                           ;UI.c: 200: lcdInst(0b10000000);;
  8593  0010C2  0E80               	movlw	128
  8594  0010C4  EC5D  F029         	call	_lcdInst
  8595                           
  8596                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8597  0010C8  0E5A               	movlw	low STR_28
  8598  0010CA  0100               	movlb	0	; () banked
  8599  0010CC  6F8E               	movwf	printf@f& (0+255),b
  8600  0010CE  0EFD               	movlw	high STR_28
  8601  0010D0  0100               	movlb	0	; () banked
  8602  0010D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8603  0010D4  EC02  F00B         	call	_printf	;wreg free
  8604                           
  8605                           ;UI.c: 202: lcdInst(0b11000000);;
  8606  0010D8  0EC0               	movlw	192
  8607  0010DA  EC5D  F029         	call	_lcdInst
  8608                           
  8609                           ;UI.c: 203: printf("%d", log_count_total);
  8610  0010DE  0E12               	movlw	low (STR_27+14)
  8611  0010E0  0100               	movlb	0	; () banked
  8612  0010E2  6F8E               	movwf	printf@f& (0+255),b
  8613  0010E4  0EFE               	movlw	high (STR_27+14)
  8614  0010E6  0100               	movlb	0	; () banked
  8615  0010E8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8616  0010EA  C13F  F090         	movff	_log_count_total,?_printf+2
  8617  0010EE  C140  F091         	movff	_log_count_total+1,?_printf+3
  8618  0010F2  EC02  F00B         	call	_printf	;wreg free
  8619                           
  8620                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8621  0010F6  0E00               	movlw	0
  8622  0010F8  0100               	movlb	0	; () banked
  8623  0010FA  6FD4               	movwf	UI@i_447& (0+255),b
  8624  0010FC                     l8812:
  8625                           
  8626                           ; BSR set to: 0
  8627  0010FC  0E63               	movlw	99
  8628  0010FE  0100               	movlb	0	; () banked
  8629  001100  65D4               	cpfsgt	UI@i_447& (0+255),b
  8630  001102  D001               	goto	l8816
  8631  001104  D00C               	goto	l8820
  8632  001106                     l8816:
  8633                           
  8634                           ; BSR set to: 0
  8635  001106  0E68               	movlw	104
  8636  001108  0100               	movlb	0	; () banked
  8637  00110A  6FC4               	movwf	??_UI& (0+255),b
  8638  00110C  0EE4               	movlw	228
  8639  00110E                     u9117:
  8640  00110E  2EE8               	decfsz	wreg,f,c
  8641  001110  D7FE               	bra	u9117
  8642  001112  2FC4               	decfsz	??_UI& (0+255),f,b
  8643  001114  D7FC               	bra	u9117
  8644  001116  F000               	nop	
  8645  001118  0100               	movlb	0	; () banked
  8646  00111A  2BD4               	incf	UI@i_447& (0+255),f,b
  8647  00111C  D7EF               	goto	l8812
  8648  00111E                     l8820:
  8649                           
  8650                           ; BSR set to: 0
  8651  00111E  0100               	movlb	0	; () banked
  8652  001120  51F6               	movf	_logstate& (0+255),w,b
  8653  001122  0100               	movlb	0	; () banked
  8654  001124  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8655  001126  B4D8               	btfsc	status,2,c
  8656  001128  0012               	return	
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8660                           
  8661                           ; BSR set to: 0
  8662                           
  8663                           ; BSR set to: 0
  8664  00112A  0E00               	movlw	0
  8665  00112C  0100               	movlb	0	; () banked
  8666  00112E  6FD5               	movwf	UI@i_448& (0+255),b
  8667  001130                     l8826:
  8668                           
  8669                           ; BSR set to: 0
  8670  001130  0E63               	movlw	99
  8671  001132  0100               	movlb	0	; () banked
  8672  001134  65D5               	cpfsgt	UI@i_448& (0+255),b
  8673  001136  D001               	goto	l8830
  8674  001138  D00C               	goto	l8834
  8675  00113A                     l8830:
  8676                           
  8677                           ; BSR set to: 0
  8678  00113A  0E68               	movlw	104
  8679  00113C  0100               	movlb	0	; () banked
  8680  00113E  6FC4               	movwf	??_UI& (0+255),b
  8681  001140  0EE4               	movlw	228
  8682  001142                     u9127:
  8683  001142  2EE8               	decfsz	wreg,f,c
  8684  001144  D7FE               	bra	u9127
  8685  001146  2FC4               	decfsz	??_UI& (0+255),f,b
  8686  001148  D7FC               	bra	u9127
  8687  00114A  F000               	nop	
  8688  00114C  0100               	movlb	0	; () banked
  8689  00114E  2BD5               	incf	UI@i_448& (0+255),f,b
  8690  001150  D7EF               	goto	l8826
  8691  001152                     l8834:
  8692                           
  8693                           ; BSR set to: 0
  8694  001152  0100               	movlb	0	; () banked
  8695  001154  51F6               	movf	_logstate& (0+255),w,b
  8696  001156  0100               	movlb	0	; () banked
  8697  001158  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8698  00115A  B4D8               	btfsc	status,2,c
  8699  00115C  0012               	return	
  8700  00115E                     l8838:
  8701  00115E  0100               	movlb	0	; () banked
  8702  001160  51F6               	movf	_logstate& (0+255),w,b
  8703  001162  0100               	movlb	0	; () banked
  8704  001164  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8705  001166  B4D8               	btfsc	status,2,c
  8706  001168  0012               	return	
  8707  00116A  D44C               	goto	l8534
  8708  00116C                     __end_of_UI:
  8709                           	opt stack 0
  8710                           tblptru	equ	0xFF8
  8711                           tblptrh	equ	0xFF7
  8712                           tblptrl	equ	0xFF6
  8713                           tablat	equ	0xFF5
  8714                           prodh	equ	0xFF4
  8715                           prodl	equ	0xFF3
  8716                           intcon	equ	0xFF2
  8717                           intcon2	equ	0xFF1
  8718                           intcon3	equ	0xFF0
  8719                           postinc0	equ	0xFEE
  8720                           wreg	equ	0xFE8
  8721                           postdec1	equ	0xFE5
  8722                           fsr1l	equ	0xFE1
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           fsr2h	equ	0xFDA
  8727                           fsr2l	equ	0xFD9
  8728                           status	equ	0xFD8
  8729                           
  8730 ;; *************** function _printRTC *****************
  8731 ;; Defined at:
  8732 ;;		line 63 in file "RTC.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  i               2   66[BANK0 ] int 
  8737 ;;  INT_time       14   46[BANK0 ] int [7]
  8738 ;;  month           4   62[BANK0 ] unsigned char [4]
  8739 ;;  RTC_month       2   60[BANK0 ] int 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8753 ;;Total ram usage:       25 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:   10
  8756 ;; This function calls:
  8757 ;;		_getRTC
  8758 ;;		_lcdInst
  8759 ;;		_printf
  8760 ;;		_strcpy
  8761 ;; This function is called by:
  8762 ;;		_UI
  8763 ;;		_change_state_to_menu_start
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text24
  8768  00242C                     __ptext24:
  8769                           	opt stack 0
  8770  00242C                     _printRTC:
  8771                           	opt stack 18
  8772                           
  8773                           ;RTC.c: 64: getRTC();
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;incstack = 0
  8777  00242C  EC67  F022         	call	_getRTC	;wreg free
  8778                           
  8779                           ;RTC.c: 65: char month[] = "MMM";
  8780  002430  C145  F0BE         	movff	printRTC@F3226,printRTC@month
  8781  002434  C146  F0BF         	movff	printRTC@F3226+1,printRTC@month+1
  8782  002438  C147  F0C0         	movff	printRTC@F3226+2,printRTC@month+2
  8783  00243C  C148  F0C1         	movff	printRTC@F3226+3,printRTC@month+3
  8784                           
  8785                           ;RTC.c: 66: int INT_time[7];
  8786                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8787  002440  0E00               	movlw	0
  8788  002442  0100               	movlb	0	; () banked
  8789  002444  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8790  002446  0E00               	movlw	0
  8791  002448  6FC2               	movwf	printRTC@i& (0+255),b
  8792                           
  8793                           ; BSR set to: 0
  8794  00244A  0100               	movlb	0	; () banked
  8795  00244C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8796  00244E  D008               	goto	l6632
  8797  002450  0100               	movlb	0	; () banked
  8798  002452  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8799  002454  E146               	bnz	l606
  8800  002456  0E07               	movlw	7
  8801  002458  0100               	movlb	0	; () banked
  8802  00245A  5DC2               	subwf	printRTC@i& (0+255),w,b
  8803  00245C  B0D8               	btfsc	status,0,c
  8804  00245E  D041               	goto	l606
  8805  002460                     l6632:
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8809  002460  0E1C               	movlw	low _time
  8810  002462  0100               	movlb	0	; () banked
  8811  002464  25C2               	addwf	printRTC@i& (0+255),w,b
  8812  002466  6ED9               	movwf	fsr2l,c
  8813  002468  0E01               	movlw	high _time
  8814  00246A  0100               	movlb	0	; () banked
  8815  00246C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8816  00246E  6EDA               	movwf	fsr2h,c
  8817  002470  50DF               	movf	indf2,w,c
  8818  002472  0100               	movlb	0	; () banked
  8819  002474  6FAB               	movwf	??_printRTC& (0+255),b
  8820  002476  0100               	movlb	0	; () banked
  8821  002478  3BAB               	swapf	??_printRTC& (0+255),f,b
  8822  00247A  0E0F               	movlw	15
  8823  00247C  17AB               	andwf	??_printRTC& (0+255),f,b
  8824  00247E  0E0F               	movlw	15
  8825  002480  0100               	movlb	0	; () banked
  8826  002482  17AB               	andwf	??_printRTC& (0+255),f,b
  8827  002484  0100               	movlb	0	; () banked
  8828  002486  51AB               	movf	??_printRTC& (0+255),w,b
  8829  002488  0D0A               	mullw	10
  8830  00248A  0E1C               	movlw	low _time
  8831  00248C  0100               	movlb	0	; () banked
  8832  00248E  25C2               	addwf	printRTC@i& (0+255),w,b
  8833  002490  6ED9               	movwf	fsr2l,c
  8834  002492  0E01               	movlw	high _time
  8835  002494  0100               	movlb	0	; () banked
  8836  002496  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8837  002498  6EDA               	movwf	fsr2h,c
  8838  00249A  50DF               	movf	indf2,w,c
  8839  00249C  0B0F               	andlw	15
  8840  00249E  0100               	movlb	0	; () banked
  8841  0024A0  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8842  0024A2  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8843  0024A4  50F3               	movf	prodl,w,c
  8844  0024A6  0100               	movlb	0	; () banked
  8845  0024A8  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8846  0024AA  50F4               	movf	prodh,w,c
  8847  0024AC  0100               	movlb	0	; () banked
  8848  0024AE  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8849  0024B0  90D8               	bcf	status,0,c
  8850  0024B2  0100               	movlb	0	; () banked
  8851  0024B4  35C2               	rlcf	printRTC@i& (0+255),w,b
  8852  0024B6  6ED9               	movwf	fsr2l,c
  8853  0024B8  0100               	movlb	0	; () banked
  8854  0024BA  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8855  0024BC  6EDA               	movwf	fsr2h,c
  8856  0024BE  0EAE               	movlw	low printRTC@INT_time
  8857  0024C0  26D9               	addwf	fsr2l,f,c
  8858  0024C2  0E00               	movlw	high printRTC@INT_time
  8859  0024C4  22DA               	addwfc	fsr2h,f,c
  8860  0024C6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8861  0024CA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8862                           
  8863                           ; BSR set to: 0
  8864  0024CE  0100               	movlb	0	; () banked
  8865  0024D0  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8866  0024D2  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8867                           
  8868                           ; BSR set to: 0
  8869  0024D4  0100               	movlb	0	; () banked
  8870  0024D6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8871  0024D8  D7C3               	goto	l6632
  8872  0024DA  0100               	movlb	0	; () banked
  8873  0024DC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8874  0024DE  E101               	bnz	u5210
  8875  0024E0  D7BA               	goto	L8
  8876  0024E2                     u5210:
  8877  0024E2                     l606:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;RTC.c: 69: }
  8881                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8882  0024E2  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8883  0024E6  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8884                           
  8885                           ;RTC.c: 71: switch(RTC_month){
  8886  0024EA  D0B4               	goto	l6664
  8887  0024EC                     l6638:
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;RTC.c: 73: strcpy(month, "JAN");
  8891  0024EC  0EBE               	movlw	low printRTC@month
  8892  0024EE  0100               	movlb	0	; () banked
  8893  0024F0  6F80               	movwf	strcpy@to& (0+255),b
  8894  0024F2  0E00               	movlw	high printRTC@month
  8895  0024F4  0100               	movlb	0	; () banked
  8896  0024F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8897  0024F8  0EDB               	movlw	low STR_8
  8898  0024FA  0100               	movlb	0	; () banked
  8899  0024FC  6F82               	movwf	strcpy@from& (0+255),b
  8900  0024FE  0EFF               	movlw	high STR_8
  8901  002500  0100               	movlb	0	; () banked
  8902  002502  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8903  002504  ECB8  F026         	call	_strcpy	;wreg free
  8904                           
  8905                           ;RTC.c: 74: break;
  8906  002508  D0D4               	goto	l6666
  8907  00250A                     l6640:
  8908                           
  8909                           ;RTC.c: 76: strcpy(month, "FEB");
  8910  00250A  0EBE               	movlw	low printRTC@month
  8911  00250C  0100               	movlb	0	; () banked
  8912  00250E  6F80               	movwf	strcpy@to& (0+255),b
  8913  002510  0E00               	movlw	high printRTC@month
  8914  002512  0100               	movlb	0	; () banked
  8915  002514  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8916  002516  0ECB               	movlw	low STR_9
  8917  002518  0100               	movlb	0	; () banked
  8918  00251A  6F82               	movwf	strcpy@from& (0+255),b
  8919  00251C  0EFF               	movlw	high STR_9
  8920  00251E  0100               	movlb	0	; () banked
  8921  002520  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8922  002522  ECB8  F026         	call	_strcpy	;wreg free
  8923                           
  8924                           ;RTC.c: 77: break;
  8925  002526  D0C5               	goto	l6666
  8926  002528                     l6642:
  8927                           
  8928                           ;RTC.c: 79: strcpy(month, "MAR");
  8929  002528  0EBE               	movlw	low printRTC@month
  8930  00252A  0100               	movlb	0	; () banked
  8931  00252C  6F80               	movwf	strcpy@to& (0+255),b
  8932  00252E  0E00               	movlw	high printRTC@month
  8933  002530  0100               	movlb	0	; () banked
  8934  002532  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8935  002534  0EE7               	movlw	low STR_10
  8936  002536  0100               	movlb	0	; () banked
  8937  002538  6F82               	movwf	strcpy@from& (0+255),b
  8938  00253A  0EFF               	movlw	high STR_10
  8939  00253C  0100               	movlb	0	; () banked
  8940  00253E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8941  002540  ECB8  F026         	call	_strcpy	;wreg free
  8942                           
  8943                           ;RTC.c: 80: break;
  8944  002544  D0B6               	goto	l6666
  8945  002546                     l6644:
  8946                           
  8947                           ;RTC.c: 82: strcpy(month, "APR");
  8948  002546  0EBE               	movlw	low printRTC@month
  8949  002548  0100               	movlb	0	; () banked
  8950  00254A  6F80               	movwf	strcpy@to& (0+255),b
  8951  00254C  0E00               	movlw	high printRTC@month
  8952  00254E  0100               	movlb	0	; () banked
  8953  002550  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8954  002552  0EEB               	movlw	low STR_11
  8955  002554  0100               	movlb	0	; () banked
  8956  002556  6F82               	movwf	strcpy@from& (0+255),b
  8957  002558  0EFF               	movlw	high STR_11
  8958  00255A  0100               	movlb	0	; () banked
  8959  00255C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8960  00255E  ECB8  F026         	call	_strcpy	;wreg free
  8961                           
  8962                           ;RTC.c: 83: break;
  8963  002562  D0A7               	goto	l6666
  8964  002564                     l6646:
  8965                           
  8966                           ;RTC.c: 85: strcpy(month, "MAY");
  8967  002564  0EBE               	movlw	low printRTC@month
  8968  002566  0100               	movlb	0	; () banked
  8969  002568  6F80               	movwf	strcpy@to& (0+255),b
  8970  00256A  0E00               	movlw	high printRTC@month
  8971  00256C  0100               	movlb	0	; () banked
  8972  00256E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8973  002570  0EFB               	movlw	low STR_12
  8974  002572  0100               	movlb	0	; () banked
  8975  002574  6F82               	movwf	strcpy@from& (0+255),b
  8976  002576  0EFF               	movlw	high STR_12
  8977  002578  0100               	movlb	0	; () banked
  8978  00257A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8979  00257C  ECB8  F026         	call	_strcpy	;wreg free
  8980                           
  8981                           ;RTC.c: 86: break;
  8982  002580  D098               	goto	l6666
  8983  002582                     l6648:
  8984                           
  8985                           ;RTC.c: 88: strcpy(month, "JUN");
  8986  002582  0EBE               	movlw	low printRTC@month
  8987  002584  0100               	movlb	0	; () banked
  8988  002586  6F80               	movwf	strcpy@to& (0+255),b
  8989  002588  0E00               	movlw	high printRTC@month
  8990  00258A  0100               	movlb	0	; () banked
  8991  00258C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8992  00258E  0EDF               	movlw	low STR_13
  8993  002590  0100               	movlb	0	; () banked
  8994  002592  6F82               	movwf	strcpy@from& (0+255),b
  8995  002594  0EFF               	movlw	high STR_13
  8996  002596  0100               	movlb	0	; () banked
  8997  002598  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8998  00259A  ECB8  F026         	call	_strcpy	;wreg free
  8999                           
  9000                           ;RTC.c: 89: break;
  9001  00259E  D089               	goto	l6666
  9002  0025A0                     l6650:
  9003                           
  9004                           ;RTC.c: 91: strcpy(month, "JUL");
  9005  0025A0  0EBE               	movlw	low printRTC@month
  9006  0025A2  0100               	movlb	0	; () banked
  9007  0025A4  6F80               	movwf	strcpy@to& (0+255),b
  9008  0025A6  0E00               	movlw	high printRTC@month
  9009  0025A8  0100               	movlb	0	; () banked
  9010  0025AA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9011  0025AC  0ED7               	movlw	low STR_14
  9012  0025AE  0100               	movlb	0	; () banked
  9013  0025B0  6F82               	movwf	strcpy@from& (0+255),b
  9014  0025B2  0EFF               	movlw	high STR_14
  9015  0025B4  0100               	movlb	0	; () banked
  9016  0025B6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9017  0025B8  ECB8  F026         	call	_strcpy	;wreg free
  9018                           
  9019                           ;RTC.c: 92: break;
  9020  0025BC  D07A               	goto	l6666
  9021  0025BE                     l6652:
  9022                           
  9023                           ;RTC.c: 94: strcpy(month, "AUG");
  9024  0025BE  0EBE               	movlw	low printRTC@month
  9025  0025C0  0100               	movlb	0	; () banked
  9026  0025C2  6F80               	movwf	strcpy@to& (0+255),b
  9027  0025C4  0E00               	movlw	high printRTC@month
  9028  0025C6  0100               	movlb	0	; () banked
  9029  0025C8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9030  0025CA  0ED3               	movlw	low STR_15
  9031  0025CC  0100               	movlb	0	; () banked
  9032  0025CE  6F82               	movwf	strcpy@from& (0+255),b
  9033  0025D0  0EFF               	movlw	high STR_15
  9034  0025D2  0100               	movlb	0	; () banked
  9035  0025D4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9036  0025D6  ECB8  F026         	call	_strcpy	;wreg free
  9037                           
  9038                           ;RTC.c: 95: break;
  9039  0025DA  D06B               	goto	l6666
  9040  0025DC                     l6654:
  9041                           
  9042                           ;RTC.c: 97: strcpy(month, "SEP");
  9043  0025DC  0EBE               	movlw	low printRTC@month
  9044  0025DE  0100               	movlb	0	; () banked
  9045  0025E0  6F80               	movwf	strcpy@to& (0+255),b
  9046  0025E2  0E00               	movlw	high printRTC@month
  9047  0025E4  0100               	movlb	0	; () banked
  9048  0025E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9049  0025E8  0EE3               	movlw	low STR_16
  9050  0025EA  0100               	movlb	0	; () banked
  9051  0025EC  6F82               	movwf	strcpy@from& (0+255),b
  9052  0025EE  0EFF               	movlw	high STR_16
  9053  0025F0  0100               	movlb	0	; () banked
  9054  0025F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9055  0025F4  ECB8  F026         	call	_strcpy	;wreg free
  9056                           
  9057                           ;RTC.c: 98: break;
  9058  0025F8  D05C               	goto	l6666
  9059  0025FA                     l6656:
  9060                           
  9061                           ;RTC.c: 100: strcpy(month, "OCT");
  9062  0025FA  0EBE               	movlw	low printRTC@month
  9063  0025FC  0100               	movlb	0	; () banked
  9064  0025FE  6F80               	movwf	strcpy@to& (0+255),b
  9065  002600  0E00               	movlw	high printRTC@month
  9066  002602  0100               	movlb	0	; () banked
  9067  002604  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9068  002606  0EF3               	movlw	low STR_17
  9069  002608  0100               	movlb	0	; () banked
  9070  00260A  6F82               	movwf	strcpy@from& (0+255),b
  9071  00260C  0EFF               	movlw	high STR_17
  9072  00260E  0100               	movlb	0	; () banked
  9073  002610  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9074  002612  ECB8  F026         	call	_strcpy	;wreg free
  9075                           
  9076                           ;RTC.c: 101: break;
  9077  002616  D04D               	goto	l6666
  9078  002618                     l6658:
  9079                           
  9080                           ;RTC.c: 103: strcpy(month, "NOV");
  9081  002618  0EBE               	movlw	low printRTC@month
  9082  00261A  0100               	movlb	0	; () banked
  9083  00261C  6F80               	movwf	strcpy@to& (0+255),b
  9084  00261E  0E00               	movlw	high printRTC@month
  9085  002620  0100               	movlb	0	; () banked
  9086  002622  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9087  002624  0EF7               	movlw	low STR_18
  9088  002626  0100               	movlb	0	; () banked
  9089  002628  6F82               	movwf	strcpy@from& (0+255),b
  9090  00262A  0EFF               	movlw	high STR_18
  9091  00262C  0100               	movlb	0	; () banked
  9092  00262E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9093  002630  ECB8  F026         	call	_strcpy	;wreg free
  9094                           
  9095                           ;RTC.c: 104: break;
  9096  002634  D03E               	goto	l6666
  9097  002636                     l6660:
  9098                           
  9099                           ;RTC.c: 106: strcpy(month, "DEC");
  9100  002636  0EBE               	movlw	low printRTC@month
  9101  002638  0100               	movlb	0	; () banked
  9102  00263A  6F80               	movwf	strcpy@to& (0+255),b
  9103  00263C  0E00               	movlw	high printRTC@month
  9104  00263E  0100               	movlb	0	; () banked
  9105  002640  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9106  002642  0ECF               	movlw	low STR_19
  9107  002644  0100               	movlb	0	; () banked
  9108  002646  6F82               	movwf	strcpy@from& (0+255),b
  9109  002648  0EFF               	movlw	high STR_19
  9110  00264A  0100               	movlb	0	; () banked
  9111  00264C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9112  00264E  ECB8  F026         	call	_strcpy	;wreg free
  9113                           
  9114                           ;RTC.c: 108: }
  9115                           
  9116                           ;RTC.c: 107: break;
  9117  002652  D02F               	goto	l6666
  9118  002654                     l6664:
  9119  002654  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  9120  002658  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  9121                           
  9122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9123                           ; Switch size 1, requested type "space"
  9124                           ; Number of cases is 1, Range of values is 0 to 0
  9125                           ; switch strategies available:
  9126                           ; Name         Instructions Cycles
  9127                           ; simple_byte            4     3 (average)
  9128                           ;	Chosen strategy is simple_byte
  9129  00265C  0100               	movlb	0	; () banked
  9130  00265E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  9131  002660  0A00               	xorlw	0	; case 0
  9132  002662  A4D8               	btfss	status,2,c
  9133  002664  D026               	goto	l6666
  9134                           
  9135                           ; BSR set to: 0
  9136                           ; Switch size 1, requested type "space"
  9137                           ; Number of cases is 12, Range of values is 1 to 12
  9138                           ; switch strategies available:
  9139                           ; Name         Instructions Cycles
  9140                           ; simple_byte           37    19 (average)
  9141                           ;	Chosen strategy is simple_byte
  9142  002666  0100               	movlb	0	; () banked
  9143  002668  51AB               	movf	??_printRTC& (0+255),w,b
  9144  00266A  0A01               	xorlw	1	; case 1
  9145  00266C  B4D8               	btfsc	status,2,c
  9146  00266E  D73E               	goto	l6638
  9147  002670  0A03               	xorlw	3	; case 2
  9148  002672  B4D8               	btfsc	status,2,c
  9149  002674  D74A               	goto	l6640
  9150  002676  0A01               	xorlw	1	; case 3
  9151  002678  B4D8               	btfsc	status,2,c
  9152  00267A  D756               	goto	l6642
  9153  00267C  0A07               	xorlw	7	; case 4
  9154  00267E  B4D8               	btfsc	status,2,c
  9155  002680  D762               	goto	l6644
  9156  002682  0A01               	xorlw	1	; case 5
  9157  002684  B4D8               	btfsc	status,2,c
  9158  002686  D76E               	goto	l6646
  9159  002688  0A03               	xorlw	3	; case 6
  9160  00268A  B4D8               	btfsc	status,2,c
  9161  00268C  D77A               	goto	l6648
  9162  00268E  0A01               	xorlw	1	; case 7
  9163  002690  B4D8               	btfsc	status,2,c
  9164  002692  D786               	goto	l6650
  9165  002694  0A0F               	xorlw	15	; case 8
  9166  002696  B4D8               	btfsc	status,2,c
  9167  002698  D792               	goto	l6652
  9168  00269A  0A01               	xorlw	1	; case 9
  9169  00269C  B4D8               	btfsc	status,2,c
  9170  00269E  D79E               	goto	l6654
  9171  0026A0  0A03               	xorlw	3	; case 10
  9172  0026A2  B4D8               	btfsc	status,2,c
  9173  0026A4  D7AA               	goto	l6656
  9174  0026A6  0A01               	xorlw	1	; case 11
  9175  0026A8  B4D8               	btfsc	status,2,c
  9176  0026AA  D7B6               	goto	l6658
  9177  0026AC  0A07               	xorlw	7	; case 12
  9178  0026AE  B4D8               	btfsc	status,2,c
  9179  0026B0  D7C2               	goto	l6660
  9180  0026B2                     l6666:
  9181                           
  9182                           ;RTC.c: 109: lcdInst(0b10000000);;
  9183  0026B2  0E80               	movlw	128
  9184  0026B4  EC5D  F029         	call	_lcdInst
  9185                           
  9186                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9187  0026B8  0E06               	movlw	low STR_21
  9188  0026BA  0100               	movlb	0	; () banked
  9189  0026BC  6F8E               	movwf	printf@f& (0+255),b
  9190  0026BE  0EFB               	movlw	high STR_21
  9191  0026C0  0100               	movlb	0	; () banked
  9192  0026C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9193  0026C4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  9194  0026C8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  9195  0026CC  0EBE               	movlw	low printRTC@month
  9196  0026CE  0100               	movlb	0	; () banked
  9197  0026D0  6F92               	movwf	(?_printf+4)& (0+255),b
  9198  0026D2  0E00               	movlw	high printRTC@month
  9199  0026D4  0100               	movlb	0	; () banked
  9200  0026D6  6F93               	movwf	(?_printf+5)& (0+255),b
  9201  0026D8  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  9202  0026DC  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  9203  0026E0  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  9204  0026E4  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  9205  0026E8  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  9206  0026EC  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  9207  0026F0  EC02  F00B         	call	_printf	;wreg free
  9208  0026F4  0012               	return		;funcret
  9209  0026F6                     __end_of_printRTC:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           intcon2	equ	0xFF1
  9219                           intcon3	equ	0xFF0
  9220                           postinc0	equ	0xFEE
  9221                           wreg	equ	0xFE8
  9222                           postdec1	equ	0xFE5
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _strcpy *****************
  9232 ;; Defined at:
  9233 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9236 ;;		 -> printRTC@month(4), UI@month(4), 
  9237 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9238 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9239 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9240 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9241 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9242 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9243 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9244 ;;		 -> STR_8(4), 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9247 ;;		 -> printRTC@month(4), UI@month(4), 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  2    0[BANK0 ] PTR unsigned char 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;Total ram usage:        6 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    7
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_UI
  9268 ;;		_printRTC
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text25
  9273  004D70                     __ptext25:
  9274                           	opt stack 0
  9275  004D70                     _strcpy:
  9276                           	opt stack 20
  9277                           
  9278                           ;incstack = 0
  9279  004D70  C080  F084         	movff	strcpy@to,strcpy@cp
  9280  004D74  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9281  004D78  D006               	goto	l6372
  9282  004D7A                     l6370:
  9283  004D7A  0100               	movlb	0	; () banked
  9284  004D7C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9285  004D7E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9286  004D80  0100               	movlb	0	; () banked
  9287  004D82  4B82               	infsnz	strcpy@from& (0+255),f,b
  9288  004D84  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9289  004D86                     l6372:
  9290  004D86  C082  FFF6         	movff	strcpy@from,tblptrl
  9291  004D8A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9292  004D8E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9293  004D8E  6AF8               	clrf	tblptru,c
  9294  004D90                     	endif
  9295  004D90                     	if	0	;tblptru may be non-zero
  9296  004D90                     	endif
  9297  004D90  C084  FFD9         	movff	strcpy@cp,fsr2l
  9298  004D94  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9299  004D98  0008               	tblrd		*
  9300  004D9A  CFF5 FFDF          	movff	tablat,indf2
  9301  004D9E  50DF               	movf	indf2,w,c
  9302  004DA0  B4D8               	btfsc	status,2,c
  9303  004DA2  0012               	return	
  9304  004DA4  D7EA               	goto	l6370
  9305  004DA6                     __end_of_strcpy:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon2	equ	0xFF1
  9315                           intcon3	equ	0xFF0
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _getRTC *****************
  9328 ;; Defined at:
  9329 ;;		line 44 in file "RTC.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  i               2    3[BANK0 ] int 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;Total ram usage:        2 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    9
  9350 ;; This function calls:
  9351 ;;		_I2C_Master_Read
  9352 ;;		_I2C_Master_Start
  9353 ;;		_I2C_Master_Stop
  9354 ;;		_I2C_Master_Write
  9355 ;; This function is called by:
  9356 ;;		_printRTC
  9357 ;;		_initSortTimer
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text26
  9362  0044CE                     __ptext26:
  9363                           	opt stack 0
  9364  0044CE                     _getRTC:
  9365                           	opt stack 18
  9366                           
  9367                           ;RTC.c: 48: I2C_Master_Start();
  9368                           
  9369                           ;incstack = 0
  9370  0044CE  EC83  F029         	call	_I2C_Master_Start	;wreg free
  9371                           
  9372                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9373  0044D2  0E00               	movlw	0
  9374  0044D4  0100               	movlb	0	; () banked
  9375  0044D6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9376  0044D8  0ED0               	movlw	208
  9377  0044DA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9378  0044DC  EC71  F029         	call	_I2C_Master_Write	;wreg free
  9379                           
  9380                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9381  0044E0  0E00               	movlw	0
  9382  0044E2  0100               	movlb	0	; () banked
  9383  0044E4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9384  0044E6  0E00               	movlw	0
  9385  0044E8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9386  0044EA  EC71  F029         	call	_I2C_Master_Write	;wreg free
  9387                           
  9388                           ;RTC.c: 51: I2C_Master_Stop();
  9389  0044EE  EC7F  F029         	call	_I2C_Master_Stop	;wreg free
  9390                           
  9391                           ;RTC.c: 54: I2C_Master_Start();
  9392  0044F2  EC83  F029         	call	_I2C_Master_Start	;wreg free
  9393                           
  9394                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9395  0044F6  0E00               	movlw	0
  9396  0044F8  0100               	movlb	0	; () banked
  9397  0044FA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9398  0044FC  0ED1               	movlw	209
  9399  0044FE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9400  004500  EC71  F029         	call	_I2C_Master_Write	;wreg free
  9401                           
  9402                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9403  004504  0E00               	movlw	0
  9404  004506  0100               	movlb	0	; () banked
  9405  004508  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9406  00450A  0E00               	movlw	0
  9407  00450C  6F83               	movwf	getRTC@i& (0+255),b
  9408  00450E                     l6378:
  9409                           
  9410                           ; BSR set to: 0
  9411  00450E  0100               	movlb	0	; () banked
  9412  004510  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9413  004512  D008               	goto	l6382
  9414  004514  0100               	movlb	0	; () banked
  9415  004516  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9416  004518  E115               	bnz	l6388
  9417  00451A  0E06               	movlw	6
  9418  00451C  0100               	movlb	0	; () banked
  9419  00451E  5D83               	subwf	getRTC@i& (0+255),w,b
  9420  004520  B0D8               	btfsc	status,0,c
  9421  004522  D010               	goto	l6388
  9422  004524                     l6382:
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9426  004524  0E1C               	movlw	low _time
  9427  004526  0100               	movlb	0	; () banked
  9428  004528  2583               	addwf	getRTC@i& (0+255),w,b
  9429  00452A  6ED9               	movwf	fsr2l,c
  9430  00452C  0E01               	movlw	high _time
  9431  00452E  0100               	movlb	0	; () banked
  9432  004530  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9433  004532  6EDA               	movwf	fsr2h,c
  9434  004534  0E01               	movlw	1
  9435  004536  EC10  F028         	call	_I2C_Master_Read
  9436  00453A  6EDF               	movwf	indf2,c
  9437  00453C  0100               	movlb	0	; () banked
  9438  00453E  4B83               	infsnz	getRTC@i& (0+255),f,b
  9439  004540  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9440  004542  D7E5               	goto	l6378
  9441  004544                     l6388:
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;RTC.c: 58: }
  9445                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9446  004544  0E00               	movlw	0
  9447  004546  EC10  F028         	call	_I2C_Master_Read
  9448  00454A  0101               	movlb	1	; () banked
  9449  00454C  6F22               	movwf	(_time+6)& (0+255),b
  9450                           
  9451                           ;RTC.c: 60: I2C_Master_Stop();
  9452  00454E  EC7F  F029         	call	_I2C_Master_Stop	;wreg free
  9453  004552  0012               	return		;funcret
  9454  004554                     __end_of_getRTC:
  9455                           	opt stack 0
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           intcon2	equ	0xFF1
  9464                           intcon3	equ	0xFF0
  9465                           postinc0	equ	0xFEE
  9466                           wreg	equ	0xFE8
  9467                           postdec1	equ	0xFE5
  9468                           fsr1l	equ	0xFE1
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           postdec2	equ	0xFDD
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function _I2C_Master_Write *****************
  9477 ;; Defined at:
  9478 ;;		line 49 in file "I2C.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  d               2    1[BANK0 ] unsigned int 
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      void 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;Total ram usage:        2 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    8
  9499 ;; This function calls:
  9500 ;;		_I2C_Master_Wait
  9501 ;; This function is called by:
  9502 ;;		_loadRTC
  9503 ;;		_getRTC
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           	psect	text27
  9508  0052E2                     __ptext27:
  9509                           	opt stack 0
  9510  0052E2                     _I2C_Master_Write:
  9511                           	opt stack 18
  9512                           
  9513                           ;I2C.c: 51: I2C_Master_Wait();
  9514                           
  9515                           ;incstack = 0
  9516  0052E2  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9517                           
  9518                           ;I2C.c: 52: SSPBUF = d;
  9519  0052E6  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9520  0052EA  0012               	return		;funcret
  9521  0052EC                     __end_of_I2C_Master_Write:
  9522                           	opt stack 0
  9523                           tblptru	equ	0xFF8
  9524                           tblptrh	equ	0xFF7
  9525                           tblptrl	equ	0xFF6
  9526                           tablat	equ	0xFF5
  9527                           prodh	equ	0xFF4
  9528                           prodl	equ	0xFF3
  9529                           intcon	equ	0xFF2
  9530                           intcon2	equ	0xFF1
  9531                           intcon3	equ	0xFF0
  9532                           postinc0	equ	0xFEE
  9533                           wreg	equ	0xFE8
  9534                           postdec1	equ	0xFE5
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _I2C_Master_Stop *****************
  9544 ;; Defined at:
  9545 ;;		line 43 in file "I2C.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      void 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0, cstack
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        0 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    8
  9566 ;; This function calls:
  9567 ;;		_I2C_Master_Wait
  9568 ;; This function is called by:
  9569 ;;		_loadRTC
  9570 ;;		_getRTC
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           	psect	text28
  9575  0052FE                     __ptext28:
  9576                           	opt stack 0
  9577  0052FE                     _I2C_Master_Stop:
  9578                           	opt stack 18
  9579                           
  9580                           ;I2C.c: 45: I2C_Master_Wait();
  9581                           
  9582                           ;incstack = 0
  9583  0052FE  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9584                           
  9585                           ;I2C.c: 46: PEN = 1;
  9586  005302  84C5               	bsf	4037,2,c	;volatile
  9587  005304  0012               	return		;funcret
  9588  005306                     __end_of_I2C_Master_Stop:
  9589                           	opt stack 0
  9590                           tblptru	equ	0xFF8
  9591                           tblptrh	equ	0xFF7
  9592                           tblptrl	equ	0xFF6
  9593                           tablat	equ	0xFF5
  9594                           prodh	equ	0xFF4
  9595                           prodl	equ	0xFF3
  9596                           intcon	equ	0xFF2
  9597                           intcon2	equ	0xFF1
  9598                           intcon3	equ	0xFF0
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           postdec1	equ	0xFE5
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           fsr2h	equ	0xFDA
  9607                           fsr2l	equ	0xFD9
  9608                           status	equ	0xFD8
  9609                           
  9610 ;; *************** function _I2C_Master_Start *****************
  9611 ;; Defined at:
  9612 ;;		line 31 in file "I2C.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;		None
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;		None
  9617 ;; Return value:  Size  Location     Type
  9618 ;;                  1    wreg      void 
  9619 ;; Registers used:
  9620 ;;		wreg, status,2, status,0, cstack
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/0
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;Total ram usage:        0 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    8
  9633 ;; This function calls:
  9634 ;;		_I2C_Master_Wait
  9635 ;; This function is called by:
  9636 ;;		_loadRTC
  9637 ;;		_getRTC
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           	psect	text29
  9642  005306                     __ptext29:
  9643                           	opt stack 0
  9644  005306                     _I2C_Master_Start:
  9645                           	opt stack 18
  9646                           
  9647                           ;I2C.c: 33: I2C_Master_Wait();
  9648                           
  9649                           ;incstack = 0
  9650  005306  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9651                           
  9652                           ;I2C.c: 34: SEN = 1;
  9653  00530A  80C5               	bsf	4037,0,c	;volatile
  9654  00530C  0012               	return		;funcret
  9655  00530E                     __end_of_I2C_Master_Start:
  9656                           	opt stack 0
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           intcon	equ	0xFF2
  9664                           intcon2	equ	0xFF1
  9665                           intcon3	equ	0xFF0
  9666                           postinc0	equ	0xFEE
  9667                           wreg	equ	0xFE8
  9668                           postdec1	equ	0xFE5
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function _I2C_Master_Read *****************
  9678 ;; Defined at:
  9679 ;;		line 55 in file "I2C.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  a               1    wreg     unsigned char 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;  a               1    1[BANK0 ] unsigned char 
  9684 ;;  temp            1    2[BANK0 ] unsigned char 
  9685 ;; Return value:  Size  Location     Type
  9686 ;;                  1    wreg      unsigned char 
  9687 ;; Registers used:
  9688 ;;		wreg, status,2, status,0, cstack
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;Total ram usage:        2 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    8
  9701 ;; This function calls:
  9702 ;;		_I2C_Master_Wait
  9703 ;; This function is called by:
  9704 ;;		_getRTC
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           	psect	text30
  9709  005020                     __ptext30:
  9710                           	opt stack 0
  9711  005020                     _I2C_Master_Read:
  9712                           	opt stack 18
  9713                           
  9714                           ;incstack = 0
  9715                           ;I2C_Master_Read@a stored from wreg
  9716  005020  0100               	movlb	0	; () banked
  9717  005022  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9718                           
  9719                           ;I2C.c: 57: unsigned char temp;
  9720                           ;I2C.c: 58: I2C_Master_Wait();
  9721  005024  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9722                           
  9723                           ;I2C.c: 59: RCEN = 1;
  9724  005028  86C5               	bsf	4037,3,c	;volatile
  9725                           
  9726                           ;I2C.c: 60: I2C_Master_Wait();
  9727  00502A  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9728                           
  9729                           ;I2C.c: 61: temp = SSPBUF;
  9730  00502E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9731                           
  9732                           ;I2C.c: 62: I2C_Master_Wait();
  9733  005032  EC42  F029         	call	_I2C_Master_Wait	;wreg free
  9734                           
  9735                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9736  005036  0100               	movlb	0	; () banked
  9737  005038  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9738  00503A  0100               	movlb	0	; () banked
  9739  00503C  A4D8               	btfss	status,2,c
  9740  00503E  D002               	goto	u4300
  9741  005040  8AC5               	bsf	4037,5,c	;volatile
  9742  005042  D001               	goto	l6066
  9743  005044                     u4300:
  9744  005044  9AC5               	bcf	4037,5,c	;volatile
  9745  005046                     l6066:
  9746                           
  9747                           ;I2C.c: 64: ACKEN = 1;
  9748  005046  88C5               	bsf	4037,4,c	;volatile
  9749                           
  9750                           ;I2C.c: 65: return temp;
  9751  005048  0100               	movlb	0	; () banked
  9752  00504A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9753  00504C  0012               	return	
  9754  00504E                     __end_of_I2C_Master_Read:
  9755                           	opt stack 0
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon2	equ	0xFF1
  9764                           intcon3	equ	0xFF0
  9765                           postinc0	equ	0xFEE
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           fsr1l	equ	0xFE1
  9769                           indf2	equ	0xFDF
  9770                           postinc2	equ	0xFDE
  9771                           postdec2	equ	0xFDD
  9772                           fsr2h	equ	0xFDA
  9773                           fsr2l	equ	0xFD9
  9774                           status	equ	0xFD8
  9775                           
  9776 ;; *************** function _I2C_Master_Wait *****************
  9777 ;; Defined at:
  9778 ;;		line 26 in file "I2C.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;Total ram usage:        1 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    7
  9799 ;; This function calls:
  9800 ;;		Nothing
  9801 ;; This function is called by:
  9802 ;;		_I2C_Master_Start
  9803 ;;		_I2C_Master_Stop
  9804 ;;		_I2C_Master_Write
  9805 ;;		_I2C_Master_Read
  9806 ;;		_I2C_Master_RepeatedStart
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text31
  9811  005284                     __ptext31:
  9812                           	opt stack 0
  9813  005284                     _I2C_Master_Wait:
  9814                           	opt stack 18
  9815  005284                     l66:
  9816  005284  B4C7               	btfsc	4039,2,c	;volatile
  9817  005286  D7FE               	goto	l66
  9818  005288  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9819  00528C  0E1F               	movlw	31
  9820  00528E  0100               	movlb	0	; () banked
  9821  005290  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9822  005292  B4D8               	btfsc	status,2,c
  9823  005294  0012               	return	
  9824  005296  D7F6               	goto	l66
  9825  005298                     __end_of_I2C_Master_Wait:
  9826                           	opt stack 0
  9827                           tblptru	equ	0xFF8
  9828                           tblptrh	equ	0xFF7
  9829                           tblptrl	equ	0xFF6
  9830                           tablat	equ	0xFF5
  9831                           prodh	equ	0xFF4
  9832                           prodl	equ	0xFF3
  9833                           intcon	equ	0xFF2
  9834                           intcon2	equ	0xFF1
  9835                           intcon3	equ	0xFF0
  9836                           postinc0	equ	0xFEE
  9837                           wreg	equ	0xFE8
  9838                           postdec1	equ	0xFE5
  9839                           fsr1l	equ	0xFE1
  9840                           indf2	equ	0xFDF
  9841                           postinc2	equ	0xFDE
  9842                           postdec2	equ	0xFDD
  9843                           fsr2h	equ	0xFDA
  9844                           fsr2l	equ	0xFD9
  9845                           status	equ	0xFD8
  9846                           
  9847 ;; *************** function _change_state_to_menu_22 *****************
  9848 ;; Defined at:
  9849 ;;		line 498 in file "UI.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;		None
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;		None
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  1    wreg      void 
  9856 ;; Registers used:
  9857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;Total ram usage:        0 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; Hardware stack levels required when called:   10
  9870 ;; This function calls:
  9871 ;;		_lcdInst
  9872 ;;		_printf
  9873 ;; This function is called by:
  9874 ;;		_UI
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text32
  9879  004D00                     __ptext32:
  9880                           	opt stack 0
  9881  004D00                     _change_state_to_menu_22:
  9882                           	opt stack 19
  9883                           
  9884                           ;UI.c: 499: cur_state = 22;
  9885                           
  9886                           ; BSR set to: 0
  9887                           ;incstack = 0
  9888  004D00  0E00               	movlw	0
  9889  004D02  0100               	movlb	0	; () banked
  9890  004D04  6FED               	movwf	(_cur_state+1)& (0+255),b
  9891  004D06  0E16               	movlw	22
  9892  004D08  6FEC               	movwf	_cur_state& (0+255),b
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;UI.c: 501: lcdInst(0b10000000);;
  9896  004D0A  0E80               	movlw	128
  9897  004D0C  EC5D  F029         	call	_lcdInst
  9898                           
  9899                           ;UI.c: 502: printf("2. SORT        <");
  9900  004D10  0EC0               	movlw	low STR_34
  9901  004D12  0100               	movlb	0	; () banked
  9902  004D14  6F8E               	movwf	printf@f& (0+255),b
  9903  004D16  0EFD               	movlw	high STR_34
  9904  004D18  0100               	movlb	0	; () banked
  9905  004D1A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9906  004D1C  EC02  F00B         	call	_printf	;wreg free
  9907                           
  9908                           ;UI.c: 503: lcdInst(0b11000000);;
  9909  004D20  0EC0               	movlw	192
  9910  004D22  EC5D  F029         	call	_lcdInst
  9911                           
  9912                           ;UI.c: 504: printf("3. LOGS         ");
  9913  004D26  0E05               	movlw	low STR_36
  9914  004D28  0100               	movlb	0	; () banked
  9915  004D2A  6F8E               	movwf	printf@f& (0+255),b
  9916  004D2C  0EFD               	movlw	high STR_36
  9917  004D2E  0100               	movlb	0	; () banked
  9918  004D30  6F8F               	movwf	(printf@f+1)& (0+255),b
  9919  004D32  EC02  F00B         	call	_printf	;wreg free
  9920  004D36  0012               	return		;funcret
  9921  004D38                     __end_of_change_state_to_menu_22:
  9922                           	opt stack 0
  9923                           tblptru	equ	0xFF8
  9924                           tblptrh	equ	0xFF7
  9925                           tblptrl	equ	0xFF6
  9926                           tablat	equ	0xFF5
  9927                           prodh	equ	0xFF4
  9928                           prodl	equ	0xFF3
  9929                           intcon	equ	0xFF2
  9930                           intcon2	equ	0xFF1
  9931                           intcon3	equ	0xFF0
  9932                           postinc0	equ	0xFEE
  9933                           wreg	equ	0xFE8
  9934                           postdec1	equ	0xFE5
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _change_state_to_menu_12 *****************
  9944 ;; Defined at:
  9945 ;;		line 490 in file "UI.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;		None
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;		None
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  1    wreg      void 
  9952 ;; Registers used:
  9953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;Total ram usage:        0 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:   10
  9966 ;; This function calls:
  9967 ;;		_lcdInst
  9968 ;;		_printf
  9969 ;; This function is called by:
  9970 ;;		_UI
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text33
  9975  004D38                     __ptext33:
  9976                           	opt stack 0
  9977  004D38                     _change_state_to_menu_12:
  9978                           	opt stack 19
  9979                           
  9980                           ;UI.c: 491: cur_state = 12;
  9981                           
  9982                           ;incstack = 0
  9983  004D38  0E00               	movlw	0
  9984  004D3A  0100               	movlb	0	; () banked
  9985  004D3C  6FED               	movwf	(_cur_state+1)& (0+255),b
  9986  004D3E  0E0C               	movlw	12
  9987  004D40  6FEC               	movwf	_cur_state& (0+255),b
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;UI.c: 493: lcdInst(0b10000000);;
  9991  004D42  0E80               	movlw	128
  9992  004D44  EC5D  F029         	call	_lcdInst
  9993                           
  9994                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9995  004D48  0E27               	movlw	low STR_33
  9996  004D4A  0100               	movlb	0	; () banked
  9997  004D4C  6F8E               	movwf	printf@f& (0+255),b
  9998  004D4E  0EFD               	movlw	high STR_33
  9999  004D50  0100               	movlb	0	; () banked
 10000  004D52  6F8F               	movwf	(printf@f+1)& (0+255),b
 10001  004D54  EC02  F00B         	call	_printf	;wreg free
 10002                           
 10003                           ;UI.c: 495: lcdInst(0b11000000);;
 10004  004D58  0EC0               	movlw	192
 10005  004D5A  EC5D  F029         	call	_lcdInst
 10006                           
 10007                           ;UI.c: 496: printf("2. SORT        <");
 10008  004D5E  0EC0               	movlw	low STR_34
 10009  004D60  0100               	movlb	0	; () banked
 10010  004D62  6F8E               	movwf	printf@f& (0+255),b
 10011  004D64  0EFD               	movlw	high STR_34
 10012  004D66  0100               	movlb	0	; () banked
 10013  004D68  6F8F               	movwf	(printf@f+1)& (0+255),b
 10014  004D6A  EC02  F00B         	call	_printf	;wreg free
 10015  004D6E  0012               	return		;funcret
 10016  004D70                     __end_of_change_state_to_menu_12:
 10017                           	opt stack 0
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           intcon2	equ	0xFF1
 10026                           intcon3	equ	0xFF0
 10027                           postinc0	equ	0xFEE
 10028                           wreg	equ	0xFE8
 10029                           postdec1	equ	0xFE5
 10030                           fsr1l	equ	0xFE1
 10031                           indf2	equ	0xFDF
 10032                           postinc2	equ	0xFDE
 10033                           postdec2	equ	0xFDD
 10034                           fsr2h	equ	0xFDA
 10035                           fsr2l	equ	0xFD9
 10036                           status	equ	0xFD8
 10037                           
 10038 ;; *************** function ___awmod *****************
 10039 ;; Defined at:
 10040 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  dividend        2    0[BANK0 ] int 
 10043 ;;  divisor         2    2[BANK0 ] int 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  sign            1    5[BANK0 ] unsigned char 
 10046 ;;  counter         1    4[BANK0 ] unsigned char 
 10047 ;; Return value:  Size  Location     Type
 10048 ;;                  2    0[BANK0 ] int 
 10049 ;; Registers used:
 10050 ;;		wreg, status,2, status,0
 10051 ;; Tracked objects:
 10052 ;;		On entry : 0/0
 10053 ;;		On exit  : 0/0
 10054 ;;		Unchanged: 0/0
 10055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10056 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;Total ram usage:        6 bytes
 10061 ;; Hardware stack levels used:    1
 10062 ;; Hardware stack levels required when called:    7
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_UI
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           	psect	text34
 10071  0043A0                     __ptext34:
 10072                           	opt stack 0
 10073  0043A0                     ___awmod:
 10074                           	opt stack 22
 10075                           
 10076                           ;incstack = 0
 10077  0043A0  0E00               	movlw	0
 10078  0043A2  0100               	movlb	0	; () banked
 10079  0043A4  6F85               	movwf	___awmod@sign& (0+255),b
 10080                           
 10081                           ; BSR set to: 0
 10082  0043A6  0100               	movlb	0	; () banked
 10083  0043A8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10084  0043AA  D008               	goto	l8422
 10085                           
 10086                           ; BSR set to: 0
 10087  0043AC  0100               	movlb	0	; () banked
 10088  0043AE  6D80               	negf	___awmod@dividend& (0+255),b
 10089  0043B0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10090  0043B2  B0D8               	btfsc	status,0,c
 10091  0043B4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10092                           
 10093                           ; BSR set to: 0
 10094  0043B6  0E01               	movlw	1
 10095  0043B8  0100               	movlb	0	; () banked
 10096  0043BA  6F85               	movwf	___awmod@sign& (0+255),b
 10097  0043BC                     l8422:
 10098                           
 10099                           ; BSR set to: 0
 10100  0043BC  0100               	movlb	0	; () banked
 10101  0043BE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10102  0043C0  D005               	goto	l8426
 10103                           
 10104                           ; BSR set to: 0
 10105  0043C2  0100               	movlb	0	; () banked
 10106  0043C4  6D82               	negf	___awmod@divisor& (0+255),b
 10107  0043C6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 10108  0043C8  B0D8               	btfsc	status,0,c
 10109  0043CA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 10110  0043CC                     l8426:
 10111                           
 10112                           ; BSR set to: 0
 10113  0043CC  0100               	movlb	0	; () banked
 10114  0043CE  5182               	movf	___awmod@divisor& (0+255),w,b
 10115  0043D0  0100               	movlb	0	; () banked
 10116  0043D2  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10117  0043D4  B4D8               	btfsc	status,2,c
 10118  0043D6  D026               	goto	l8442
 10119                           
 10120                           ; BSR set to: 0
 10121  0043D8  0E01               	movlw	1
 10122  0043DA  0100               	movlb	0	; () banked
 10123  0043DC  6F84               	movwf	___awmod@counter& (0+255),b
 10124  0043DE  D006               	goto	l8432
 10125  0043E0                     l8430:
 10126                           
 10127                           ; BSR set to: 0
 10128  0043E0  0100               	movlb	0	; () banked
 10129  0043E2  90D8               	bcf	status,0,c
 10130  0043E4  3782               	rlcf	___awmod@divisor& (0+255),f,b
 10131  0043E6  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10132  0043E8  0100               	movlb	0	; () banked
 10133  0043EA  2B84               	incf	___awmod@counter& (0+255),f,b
 10134  0043EC                     l8432:
 10135                           
 10136                           ; BSR set to: 0
 10137  0043EC  0100               	movlb	0	; () banked
 10138  0043EE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10139  0043F0  D7F7               	goto	l8430
 10140  0043F2                     l8434:
 10141                           
 10142                           ; BSR set to: 0
 10143  0043F2  0100               	movlb	0	; () banked
 10144  0043F4  5182               	movf	___awmod@divisor& (0+255),w,b
 10145  0043F6  0100               	movlb	0	; () banked
 10146  0043F8  5D80               	subwf	___awmod@dividend& (0+255),w,b
 10147  0043FA  0100               	movlb	0	; () banked
 10148  0043FC  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10149  0043FE  0100               	movlb	0	; () banked
 10150  004400  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10151  004402  A0D8               	btfss	status,0,c
 10152  004404  D008               	goto	l8438
 10153                           
 10154                           ; BSR set to: 0
 10155  004406  0100               	movlb	0	; () banked
 10156  004408  5182               	movf	___awmod@divisor& (0+255),w,b
 10157  00440A  0100               	movlb	0	; () banked
 10158  00440C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 10159  00440E  0100               	movlb	0	; () banked
 10160  004410  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 10161  004412  0100               	movlb	0	; () banked
 10162  004414  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10163  004416                     l8438:
 10164                           
 10165                           ; BSR set to: 0
 10166  004416  0100               	movlb	0	; () banked
 10167  004418  90D8               	bcf	status,0,c
 10168  00441A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10169  00441C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 10170                           
 10171                           ; BSR set to: 0
 10172  00441E  0100               	movlb	0	; () banked
 10173  004420  2F84               	decfsz	___awmod@counter& (0+255),f,b
 10174  004422  D7E7               	goto	l8434
 10175  004424                     l8442:
 10176                           
 10177                           ; BSR set to: 0
 10178  004424  0100               	movlb	0	; () banked
 10179  004426  5185               	movf	___awmod@sign& (0+255),w,b
 10180  004428  0100               	movlb	0	; () banked
 10181  00442A  B4D8               	btfsc	status,2,c
 10182  00442C  D005               	goto	l8446
 10183                           
 10184                           ; BSR set to: 0
 10185  00442E  0100               	movlb	0	; () banked
 10186  004430  6D80               	negf	___awmod@dividend& (0+255),b
 10187  004432  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 10188  004434  B0D8               	btfsc	status,0,c
 10189  004436  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 10190  004438                     l8446:
 10191                           
 10192                           ; BSR set to: 0
 10193  004438  C080  F080         	movff	___awmod@dividend,?___awmod
 10194  00443C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 10195  004440  0012               	return	
 10196  004442                     __end_of___awmod:
 10197                           	opt stack 0
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           intcon	equ	0xFF2
 10205                           intcon2	equ	0xFF1
 10206                           intcon3	equ	0xFF0
 10207                           postinc0	equ	0xFEE
 10208                           wreg	equ	0xFE8
 10209                           postdec1	equ	0xFE5
 10210                           fsr1l	equ	0xFE1
 10211                           indf2	equ	0xFDF
 10212                           postinc2	equ	0xFDE
 10213                           postdec2	equ	0xFDD
 10214                           fsr2h	equ	0xFDA
 10215                           fsr2l	equ	0xFD9
 10216                           status	equ	0xFD8
 10217                           
 10218 ;; *************** function ___awdiv *****************
 10219 ;; Defined at:
 10220 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;  dividend        2    6[BANK0 ] int 
 10223 ;;  divisor         2    8[BANK0 ] int 
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  quotient        2   12[BANK0 ] int 
 10226 ;;  sign            1   11[BANK0 ] unsigned char 
 10227 ;;  counter         1   10[BANK0 ] unsigned char 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  2    6[BANK0 ] int 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;Total ram usage:        8 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    7
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_UI
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           	psect	text35
 10252  0040D0                     __ptext35:
 10253                           	opt stack 0
 10254  0040D0                     ___awdiv:
 10255                           	opt stack 22
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;incstack = 0
 10259  0040D0  0E00               	movlw	0
 10260  0040D2  0100               	movlb	0	; () banked
 10261  0040D4  6F8B               	movwf	___awdiv@sign& (0+255),b
 10262                           
 10263                           ; BSR set to: 0
 10264  0040D6  0100               	movlb	0	; () banked
 10265  0040D8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10266  0040DA  D008               	goto	l8378
 10267                           
 10268                           ; BSR set to: 0
 10269  0040DC  0100               	movlb	0	; () banked
 10270  0040DE  6D88               	negf	___awdiv@divisor& (0+255),b
 10271  0040E0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10272  0040E2  B0D8               	btfsc	status,0,c
 10273  0040E4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10274                           
 10275                           ; BSR set to: 0
 10276  0040E6  0E01               	movlw	1
 10277  0040E8  0100               	movlb	0	; () banked
 10278  0040EA  6F8B               	movwf	___awdiv@sign& (0+255),b
 10279  0040EC                     l8378:
 10280                           
 10281                           ; BSR set to: 0
 10282  0040EC  0100               	movlb	0	; () banked
 10283  0040EE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10284  0040F0  D008               	goto	l8384
 10285                           
 10286                           ; BSR set to: 0
 10287  0040F2  0100               	movlb	0	; () banked
 10288  0040F4  6D86               	negf	___awdiv@dividend& (0+255),b
 10289  0040F6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10290  0040F8  B0D8               	btfsc	status,0,c
 10291  0040FA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10292                           
 10293                           ; BSR set to: 0
 10294  0040FC  0E01               	movlw	1
 10295  0040FE  0100               	movlb	0	; () banked
 10296  004100  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10297  004102                     l8384:
 10298                           
 10299                           ; BSR set to: 0
 10300  004102  0E00               	movlw	0
 10301  004104  0100               	movlb	0	; () banked
 10302  004106  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10303  004108  0E00               	movlw	0
 10304  00410A  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10305                           
 10306                           ; BSR set to: 0
 10307  00410C  0100               	movlb	0	; () banked
 10308  00410E  5188               	movf	___awdiv@divisor& (0+255),w,b
 10309  004110  0100               	movlb	0	; () banked
 10310  004112  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10311  004114  B4D8               	btfsc	status,2,c
 10312  004116  D02C               	goto	l8406
 10313                           
 10314                           ; BSR set to: 0
 10315  004118  0E01               	movlw	1
 10316  00411A  0100               	movlb	0	; () banked
 10317  00411C  6F8A               	movwf	___awdiv@counter& (0+255),b
 10318  00411E  D006               	goto	l8392
 10319  004120                     l8390:
 10320                           
 10321                           ; BSR set to: 0
 10322  004120  0100               	movlb	0	; () banked
 10323  004122  90D8               	bcf	status,0,c
 10324  004124  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10325  004126  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10326  004128  0100               	movlb	0	; () banked
 10327  00412A  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10328  00412C                     l8392:
 10329                           
 10330                           ; BSR set to: 0
 10331  00412C  0100               	movlb	0	; () banked
 10332  00412E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10333  004130  D7F7               	goto	l8390
 10334  004132                     l8394:
 10335                           
 10336                           ; BSR set to: 0
 10337  004132  0100               	movlb	0	; () banked
 10338  004134  90D8               	bcf	status,0,c
 10339  004136  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10340  004138  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10341                           
 10342                           ; BSR set to: 0
 10343  00413A  0100               	movlb	0	; () banked
 10344  00413C  5188               	movf	___awdiv@divisor& (0+255),w,b
 10345  00413E  0100               	movlb	0	; () banked
 10346  004140  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10347  004142  0100               	movlb	0	; () banked
 10348  004144  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10349  004146  0100               	movlb	0	; () banked
 10350  004148  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10351  00414A  A0D8               	btfss	status,0,c
 10352  00414C  D00A               	goto	l8402
 10353                           
 10354                           ; BSR set to: 0
 10355  00414E  0100               	movlb	0	; () banked
 10356  004150  5188               	movf	___awdiv@divisor& (0+255),w,b
 10357  004152  0100               	movlb	0	; () banked
 10358  004154  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10359  004156  0100               	movlb	0	; () banked
 10360  004158  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10361  00415A  0100               	movlb	0	; () banked
 10362  00415C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10363                           
 10364                           ; BSR set to: 0
 10365  00415E  0100               	movlb	0	; () banked
 10366  004160  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10367  004162                     l8402:
 10368                           
 10369                           ; BSR set to: 0
 10370  004162  0100               	movlb	0	; () banked
 10371  004164  90D8               	bcf	status,0,c
 10372  004166  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10373  004168  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10374                           
 10375                           ; BSR set to: 0
 10376  00416A  0100               	movlb	0	; () banked
 10377  00416C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10378  00416E  D7E1               	goto	l8394
 10379  004170                     l8406:
 10380                           
 10381                           ; BSR set to: 0
 10382  004170  0100               	movlb	0	; () banked
 10383  004172  518B               	movf	___awdiv@sign& (0+255),w,b
 10384  004174  0100               	movlb	0	; () banked
 10385  004176  B4D8               	btfsc	status,2,c
 10386  004178  D005               	goto	l8410
 10387                           
 10388                           ; BSR set to: 0
 10389  00417A  0100               	movlb	0	; () banked
 10390  00417C  6D8C               	negf	___awdiv@quotient& (0+255),b
 10391  00417E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10392  004180  B0D8               	btfsc	status,0,c
 10393  004182  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10394  004184                     l8410:
 10395                           
 10396                           ; BSR set to: 0
 10397  004184  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10398  004188  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10399  00418C  0012               	return	
 10400  00418E                     __end_of___awdiv:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           intcon2	equ	0xFF1
 10410                           intcon3	equ	0xFF0
 10411                           postinc0	equ	0xFEE
 10412                           wreg	equ	0xFE8
 10413                           postdec1	equ	0xFE5
 10414                           fsr1l	equ	0xFE1
 10415                           indf2	equ	0xFDF
 10416                           postinc2	equ	0xFDE
 10417                           postdec2	equ	0xFDD
 10418                           fsr2h	equ	0xFDA
 10419                           fsr2l	equ	0xFD9
 10420                           status	equ	0xFD8
 10421                           
 10422 ;; *************** function _Test *****************
 10423 ;; Defined at:
 10424 ;;		line 30 in file "Test.c"
 10425 ;; Parameters:    Size  Location     Type
 10426 ;;		None
 10427 ;; Auto vars:     Size  Location     Type
 10428 ;;		None
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      void 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;Total ram usage:        2 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:   11
 10445 ;; This function calls:
 10446 ;;		_BlockerTest
 10447 ;;		_BothServos
 10448 ;;		_EEPROMTest
 10449 ;;		_PortTestA5
 10450 ;;		_PortTests
 10451 ;;		_PusherTest
 10452 ;;		_SpeedTest
 10453 ;;		_actuatorTest
 10454 ;;		_algorithmTest
 10455 ;;		_lcdInst
 10456 ;;		_printf
 10457 ;;		_sensorTest
 10458 ;; This function is called by:
 10459 ;;		_main
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text36
 10464  003C58                     __ptext36:
 10465                           	opt stack 0
 10466  003C58                     _Test:
 10467                           	opt stack 19
 10468  003C58                     
 10469                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10470  003C58  0E01               	movlw	1
 10471  003C5A  EC5D  F029         	call	_lcdInst
 10472  003C5E  0E68               	movlw	104
 10473  003C60  0100               	movlb	0	; () banked
 10474  003C62  6FC6               	movwf	??_Test& (0+255),b
 10475  003C64  0EE4               	movlw	228
 10476  003C66                     u9137:
 10477  003C66  2EE8               	decfsz	wreg,f,c
 10478  003C68  D7FE               	bra	u9137
 10479  003C6A  2FC6               	decfsz	??_Test& (0+255),f,b
 10480  003C6C  D7FC               	bra	u9137
 10481  003C6E  F000               	nop	
 10482  003C70  0E80               	movlw	128
 10483  003C72  EC5D  F029         	call	_lcdInst
 10484                           
 10485                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10486  003C76  0E8E               	movlw	low STR_69
 10487  003C78  0100               	movlb	0	; () banked
 10488  003C7A  6F8E               	movwf	printf@f& (0+255),b
 10489  003C7C  0EFC               	movlw	high STR_69
 10490  003C7E  0100               	movlb	0	; () banked
 10491  003C80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10492  003C82  EC02  F00B         	call	_printf	;wreg free
 10493                           
 10494                           ;Test.c: 35: lcdInst(0b11000000);;
 10495  003C86  0EC0               	movlw	192
 10496  003C88  EC5D  F029         	call	_lcdInst
 10497                           
 10498                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10499  003C8C  0E9F               	movlw	low STR_70
 10500  003C8E  0100               	movlb	0	; () banked
 10501  003C90  6F8E               	movwf	printf@f& (0+255),b
 10502  003C92  0EFC               	movlw	high STR_70
 10503  003C94  0100               	movlb	0	; () banked
 10504  003C96  6F8F               	movwf	(printf@f+1)& (0+255),b
 10505  003C98  EC02  F00B         	call	_printf	;wreg free
 10506                           
 10507                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10508  003C9C  0E05               	movlw	5
 10509  003C9E  0100               	movlb	0	; () banked
 10510  003CA0  6FC7               	movwf	(??_Test+1)& (0+255),b
 10511  003CA2  0E0F               	movlw	15
 10512  003CA4  0100               	movlb	0	; () banked
 10513  003CA6  6FC6               	movwf	??_Test& (0+255),b
 10514  003CA8  0EF1               	movlw	241
 10515  003CAA                     u9147:
 10516  003CAA  2EE8               	decfsz	wreg,f,c
 10517  003CAC  D7FE               	bra	u9147
 10518  003CAE  2FC6               	decfsz	??_Test& (0+255),f,b
 10519  003CB0  D7FC               	bra	u9147
 10520  003CB2  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10521  003CB4  D7FA               	bra	u9147
 10522  003CB6                     l1142:
 10523  003CB6  A281               	btfss	3969,1,c	;volatile
 10524  003CB8  D7FE               	goto	l1142
 10525                           
 10526                           ;Test.c: 39: var = PORTB >> 4;
 10527  003CBA  CF81 F0C6          	movff	3969,??_Test	;volatile
 10528  003CBE  0100               	movlb	0	; () banked
 10529  003CC0  3BC6               	swapf	??_Test& (0+255),f,b
 10530  003CC2  0E0F               	movlw	15
 10531  003CC4  17C6               	andwf	??_Test& (0+255),f,b
 10532  003CC6  0100               	movlb	0	; () banked
 10533  003CC8  51C6               	movf	??_Test& (0+255),w,b
 10534  003CCA  0100               	movlb	0	; () banked
 10535  003CCC  6FFA               	movwf	_var& (0+255),b
 10536  003CCE  6BFB               	clrf	(_var+1)& (0+255),b
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;Test.c: 40: var++;
 10540  003CD0  0100               	movlb	0	; () banked
 10541  003CD2  4BFA               	infsnz	_var& (0+255),f,b
 10542  003CD4  2BFB               	incf	(_var+1)& (0+255),f,b
 10543  003CD6                     l1145:
 10544  003CD6  A281               	btfss	3969,1,c	;volatile
 10545  003CD8  D01F               	goto	l9172
 10546  003CDA  D7FD               	goto	l1145
 10547  003CDC                     l9150:
 10548                           
 10549                           ;Test.c: 44: algorithmTest();
 10550  003CDC  EC9B  F01F         	call	_algorithmTest	;wreg free
 10551                           
 10552                           ;Test.c: 45: break;
 10553  003CE0  D7BB               	goto	l9132
 10554  003CE2                     l9152:
 10555                           
 10556                           ;Test.c: 47: sensorTest();
 10557  003CE2  EC97  F010         	call	_sensorTest	;wreg free
 10558                           
 10559                           ;Test.c: 48: break;
 10560  003CE6  D7B8               	goto	l9132
 10561  003CE8                     l9154:
 10562                           
 10563                           ;Test.c: 50: actuatorTest();
 10564  003CE8  EC09  F000         	call	_actuatorTest	;wreg free
 10565                           
 10566                           ;Test.c: 51: break;
 10567  003CEC  D7B5               	goto	l9132
 10568  003CEE                     l9156:
 10569                           
 10570                           ;Test.c: 53: PortTestA5();
 10571  003CEE  EC1A  F025         	call	_PortTestA5	;wreg free
 10572                           
 10573                           ;Test.c: 54: break;
 10574  003CF2  D7B2               	goto	l9132
 10575  003CF4                     l9158:
 10576                           
 10577                           ;Test.c: 57: SpeedTest();
 10578  003CF4  ECED  F022         	call	_SpeedTest	;wreg free
 10579                           
 10580                           ;Test.c: 58: break;
 10581  003CF8  D7AF               	goto	l9132
 10582  003CFA                     l9160:
 10583                           
 10584                           ;Test.c: 60: EEPROMTest();
 10585  003CFA  EC8F  F029         	call	_EEPROMTest	;wreg free
 10586                           
 10587                           ;Test.c: 61: break;
 10588  003CFE  D7AC               	goto	l9132
 10589  003D00                     l9162:
 10590                           
 10591                           ;Test.c: 63: PusherTest();
 10592  003D00  EC2F  F016         	call	_PusherTest	;wreg free
 10593                           
 10594                           ;Test.c: 64: break;
 10595  003D04  D7A9               	goto	l9132
 10596  003D06                     l9164:
 10597                           
 10598                           ;Test.c: 66: PortTests();
 10599  003D06  EC2F  F023         	call	_PortTests	;wreg free
 10600                           
 10601                           ;Test.c: 67: break;
 10602  003D0A  D7A6               	goto	l9132
 10603  003D0C                     l9166:
 10604                           
 10605                           ;Test.c: 69: BothServos();
 10606  003D0C  EC1E  F00D         	call	_BothServos	;wreg free
 10607                           
 10608                           ;Test.c: 70: break;
 10609  003D10  D7A3               	goto	l9132
 10610  003D12                     l9168:
 10611                           
 10612                           ;Test.c: 72: BlockerTest();
 10613  003D12  EC3A  F01C         	call	_BlockerTest	;wreg free
 10614                           
 10615                           ;Test.c: 76: }
 10616                           
 10617                           ;Test.c: 75: break;
 10618                           
 10619                           ;Test.c: 74: default:
 10620                           
 10621                           ;Test.c: 73: break;
 10622  003D16  D7A0               	goto	l9132
 10623  003D18                     l9172:
 10624  003D18  C0FA  F0C6         	movff	_var,??_Test
 10625  003D1C  C0FB  F0C7         	movff	_var+1,??_Test+1
 10626                           
 10627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10628                           ; Switch size 1, requested type "space"
 10629                           ; Number of cases is 1, Range of values is 0 to 0
 10630                           ; switch strategies available:
 10631                           ; Name         Instructions Cycles
 10632                           ; simple_byte            4     3 (average)
 10633                           ;	Chosen strategy is simple_byte
 10634  003D20  0100               	movlb	0	; () banked
 10635  003D22  51C7               	movf	(??_Test+1)& (0+255),w,b
 10636  003D24  0A00               	xorlw	0	; case 0
 10637  003D26  A4D8               	btfss	status,2,c
 10638  003D28  D797               	goto	l9132
 10639                           
 10640                           ; BSR set to: 0
 10641                           ; Switch size 1, requested type "space"
 10642                           ; Number of cases is 10, Range of values is 1 to 11
 10643                           ; switch strategies available:
 10644                           ; Name         Instructions Cycles
 10645                           ; simple_byte           31    16 (average)
 10646                           ;	Chosen strategy is simple_byte
 10647  003D2A  0100               	movlb	0	; () banked
 10648  003D2C  51C6               	movf	??_Test& (0+255),w,b
 10649  003D2E  0A01               	xorlw	1	; case 1
 10650  003D30  B4D8               	btfsc	status,2,c
 10651  003D32  D7D4               	goto	l9150
 10652  003D34  0A03               	xorlw	3	; case 2
 10653  003D36  B4D8               	btfsc	status,2,c
 10654  003D38  D7D4               	goto	l9152
 10655  003D3A  0A01               	xorlw	1	; case 3
 10656  003D3C  B4D8               	btfsc	status,2,c
 10657  003D3E  D7D4               	goto	l9154
 10658  003D40  0A06               	xorlw	6	; case 5
 10659  003D42  B4D8               	btfsc	status,2,c
 10660  003D44  D7D4               	goto	l9156
 10661  003D46  0A03               	xorlw	3	; case 6
 10662  003D48  B4D8               	btfsc	status,2,c
 10663  003D4A  D7D4               	goto	l9158
 10664  003D4C  0A01               	xorlw	1	; case 7
 10665  003D4E  B4D8               	btfsc	status,2,c
 10666  003D50  D7D4               	goto	l9160
 10667  003D52  0A0F               	xorlw	15	; case 8
 10668  003D54  B4D8               	btfsc	status,2,c
 10669  003D56  D7D4               	goto	l9162
 10670  003D58  0A01               	xorlw	1	; case 9
 10671  003D5A  B4D8               	btfsc	status,2,c
 10672  003D5C  D7D4               	goto	l9164
 10673  003D5E  0A03               	xorlw	3	; case 10
 10674  003D60  B4D8               	btfsc	status,2,c
 10675  003D62  D7D4               	goto	l9166
 10676  003D64  0A01               	xorlw	1	; case 11
 10677  003D66  B4D8               	btfsc	status,2,c
 10678  003D68  D7D4               	goto	l9168
 10679                           
 10680                           ; BSR set to: 0
 10681                           
 10682                           ; BSR set to: 0
 10683  003D6A  D776               	goto	l9132
 10684  003D6C                     __end_of_Test:
 10685                           	opt stack 0
 10686                           tblptru	equ	0xFF8
 10687                           tblptrh	equ	0xFF7
 10688                           tblptrl	equ	0xFF6
 10689                           tablat	equ	0xFF5
 10690                           prodh	equ	0xFF4
 10691                           prodl	equ	0xFF3
 10692                           intcon	equ	0xFF2
 10693                           intcon2	equ	0xFF1
 10694                           intcon3	equ	0xFF0
 10695                           postinc0	equ	0xFEE
 10696                           wreg	equ	0xFE8
 10697                           postdec1	equ	0xFE5
 10698                           fsr1l	equ	0xFE1
 10699                           indf2	equ	0xFDF
 10700                           postinc2	equ	0xFDE
 10701                           postdec2	equ	0xFDD
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function _sensorTest *****************
 10707 ;; Defined at:
 10708 ;;		line 124 in file "Test.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;  res             2   45[BANK0 ] int 
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      void 
 10715 ;; Registers used:
 10716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;Total ram usage:        4 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:   10
 10729 ;; This function calls:
 10730 ;;		_lcdInst
 10731 ;;		_printf
 10732 ;;		_readADC
 10733 ;;		_readMAG
 10734 ;; This function is called by:
 10735 ;;		_Test
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text37
 10740  00212E                     __ptext37:
 10741                           	opt stack 0
 10742  00212E                     _sensorTest:
 10743                           	opt stack 19
 10744                           
 10745                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;incstack = 0
 10749  00212E  0E01               	movlw	1
 10750  002130  EC5D  F029         	call	_lcdInst
 10751  002134  0E68               	movlw	104
 10752  002136  0100               	movlb	0	; () banked
 10753  002138  6FAB               	movwf	??_sensorTest& (0+255),b
 10754  00213A  0EE4               	movlw	228
 10755  00213C                     u9157:
 10756  00213C  2EE8               	decfsz	wreg,f,c
 10757  00213E  D7FE               	bra	u9157
 10758  002140  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10759  002142  D7FC               	bra	u9157
 10760  002144  F000               	nop	
 10761  002146  0E80               	movlw	128
 10762  002148  EC5D  F029         	call	_lcdInst
 10763                           
 10764                           ;Test.c: 127: printf("SENSORS");
 10765  00214C  0EAA               	movlw	low STR_78
 10766  00214E  0100               	movlb	0	; () banked
 10767  002150  6F8E               	movwf	printf@f& (0+255),b
 10768  002152  0EFF               	movlw	high STR_78
 10769  002154  0100               	movlb	0	; () banked
 10770  002156  6F8F               	movwf	(printf@f+1)& (0+255),b
 10771  002158  EC02  F00B         	call	_printf	;wreg free
 10772                           
 10773                           ;Test.c: 128: lcdInst(0b11000000);;
 10774  00215C  0EC0               	movlw	192
 10775  00215E  EC5D  F029         	call	_lcdInst
 10776                           
 10777                           ;Test.c: 129: printf("PUSH TO START");
 10778  002162  0E07               	movlw	low STR_72
 10779  002164  0100               	movlb	0	; () banked
 10780  002166  6F8E               	movwf	printf@f& (0+255),b
 10781  002168  0EFF               	movlw	high STR_72
 10782  00216A  0100               	movlb	0	; () banked
 10783  00216C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10784  00216E  EC02  F00B         	call	_printf	;wreg free
 10785                           
 10786                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10787  002172  0E05               	movlw	5
 10788  002174  0100               	movlb	0	; () banked
 10789  002176  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10790  002178  0E0F               	movlw	15
 10791  00217A  0100               	movlb	0	; () banked
 10792  00217C  6FAB               	movwf	??_sensorTest& (0+255),b
 10793  00217E  0EF1               	movlw	241
 10794  002180                     u9167:
 10795  002180  2EE8               	decfsz	wreg,f,c
 10796  002182  D7FE               	bra	u9167
 10797  002184  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10798  002186  D7FC               	bra	u9167
 10799  002188  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10800  00218A  D7FA               	bra	u9167
 10801  00218C                     l1175:
 10802  00218C  A281               	btfss	3969,1,c	;volatile
 10803  00218E  D7FE               	goto	l1175
 10804  002190                     l1178:
 10805  002190  B281               	btfsc	3969,1,c	;volatile
 10806  002192  D7FE               	goto	l1178
 10807                           
 10808                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10809  002194  0E01               	movlw	1
 10810  002196  EC5D  F029         	call	_lcdInst
 10811  00219A  0E68               	movlw	104
 10812  00219C  0100               	movlb	0	; () banked
 10813  00219E  6FAB               	movwf	??_sensorTest& (0+255),b
 10814  0021A0  0EE4               	movlw	228
 10815  0021A2                     u9177:
 10816  0021A2  2EE8               	decfsz	wreg,f,c
 10817  0021A4  D7FE               	bra	u9177
 10818  0021A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10819  0021A8  D7FC               	bra	u9177
 10820  0021AA  F000               	nop	
 10821  0021AC  0E80               	movlw	128
 10822  0021AE  EC5D  F029         	call	_lcdInst
 10823                           
 10824                           ;Test.c: 138: printf("TST: IR SNSR");
 10825  0021B2  0E31               	movlw	low STR_80
 10826  0021B4  0100               	movlb	0	; () banked
 10827  0021B6  6F8E               	movwf	printf@f& (0+255),b
 10828  0021B8  0EFF               	movlw	high STR_80
 10829  0021BA  0100               	movlb	0	; () banked
 10830  0021BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10831  0021BE  EC02  F00B         	call	_printf	;wreg free
 10832                           
 10833                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10834  0021C2  0E05               	movlw	5
 10835  0021C4  0100               	movlb	0	; () banked
 10836  0021C6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10837  0021C8  0E0F               	movlw	15
 10838  0021CA  0100               	movlb	0	; () banked
 10839  0021CC  6FAB               	movwf	??_sensorTest& (0+255),b
 10840  0021CE  0EF1               	movlw	241
 10841  0021D0                     u9187:
 10842  0021D0  2EE8               	decfsz	wreg,f,c
 10843  0021D2  D7FE               	bra	u9187
 10844  0021D4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10845  0021D6  D7FC               	bra	u9187
 10846  0021D8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10847  0021DA  D7FA               	bra	u9187
 10848                           
 10849                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10850  0021DC  8A8B               	bsf	3979,5,c	;volatile
 10851                           
 10852                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10853  0021DE  D05C               	goto	l7596
 10854  0021E0                     l7578:
 10855                           
 10856                           ;Test.c: 143: readADC(0);
 10857  0021E0  0E00               	movlw	0
 10858  0021E2  EC54  F028         	call	_readADC
 10859                           
 10860                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10861  0021E6  50C3               	movf	4035,w,c	;volatile
 10862  0021E8  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10863  0021EC  0100               	movlb	0	; () banked
 10864  0021EE  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10865  0021F0  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10866  0021F4  0100               	movlb	0	; () banked
 10867  0021F6  6BAB               	clrf	??_sensorTest& (0+255),b
 10868  0021F8  0100               	movlb	0	; () banked
 10869  0021FA  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10870  0021FC  0100               	movlb	0	; () banked
 10871  0021FE  6FAD               	movwf	sensorTest@res& (0+255),b
 10872  002200  0100               	movlb	0	; () banked
 10873  002202  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10874  002204  0100               	movlb	0	; () banked
 10875  002206  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10879  002208  0100               	movlb	0	; () banked
 10880  00220A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10881  00220C  D00A               	goto	u6060
 10882  00220E  0E21               	movlw	33
 10883  002210  0100               	movlb	0	; () banked
 10884  002212  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10885  002214  0E03               	movlw	3
 10886  002216  0100               	movlb	0	; () banked
 10887  002218  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10888  00221A  A0D8               	btfss	status,0,c
 10889  00221C  D002               	goto	u6060
 10890  00221E  0E01               	movlw	1
 10891  002220  D001               	goto	u6070
 10892  002222                     u6060:
 10893  002222  0E00               	movlw	0
 10894  002224                     u6070:
 10895  002224  0100               	movlb	0	; () banked
 10896  002226  6FE6               	movwf	_IR_signal& (0+255),b
 10897  002228  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 10898                           
 10899                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10900  00222A  0E01               	movlw	1
 10901  00222C  EC5D  F029         	call	_lcdInst
 10902  002230  0E68               	movlw	104
 10903  002232  0100               	movlb	0	; () banked
 10904  002234  6FAB               	movwf	??_sensorTest& (0+255),b
 10905  002236  0EE4               	movlw	228
 10906  002238                     u9197:
 10907  002238  2EE8               	decfsz	wreg,f,c
 10908  00223A  D7FE               	bra	u9197
 10909  00223C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10910  00223E  D7FC               	bra	u9197
 10911  002240  F000               	nop	
 10912  002242  0E80               	movlw	128
 10913  002244  EC5D  F029         	call	_lcdInst
 10914                           
 10915                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10916  002248  0E56               	movlw	low STR_81
 10917  00224A  0100               	movlb	0	; () banked
 10918  00224C  6F8E               	movwf	printf@f& (0+255),b
 10919  00224E  0EFE               	movlw	high STR_81
 10920  002250  0100               	movlb	0	; () banked
 10921  002252  6F8F               	movwf	(printf@f+1)& (0+255),b
 10922  002254  C0E6  F090         	movff	_IR_signal,?_printf+2
 10923  002258  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 10924  00225C  EC02  F00B         	call	_printf	;wreg free
 10925                           
 10926                           ;Test.c: 149: lcdInst(0b11000000);;
 10927  002260  0EC0               	movlw	192
 10928  002262  EC5D  F029         	call	_lcdInst
 10929                           
 10930                           ;Test.c: 150: printf("%d", res);
 10931  002266  0E12               	movlw	low (STR_27+14)
 10932  002268  0100               	movlb	0	; () banked
 10933  00226A  6F8E               	movwf	printf@f& (0+255),b
 10934  00226C  0EFE               	movlw	high (STR_27+14)
 10935  00226E  0100               	movlb	0	; () banked
 10936  002270  6F8F               	movwf	(printf@f+1)& (0+255),b
 10937  002272  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10938  002276  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10939  00227A  EC02  F00B         	call	_printf	;wreg free
 10940                           
 10941                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10942  00227E  0E05               	movlw	5
 10943  002280  0100               	movlb	0	; () banked
 10944  002282  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10945  002284  0E0F               	movlw	15
 10946  002286  0100               	movlb	0	; () banked
 10947  002288  6FAB               	movwf	??_sensorTest& (0+255),b
 10948  00228A  0EF1               	movlw	241
 10949  00228C                     u9207:
 10950  00228C  2EE8               	decfsz	wreg,f,c
 10951  00228E  D7FE               	bra	u9207
 10952  002290  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10953  002292  D7FC               	bra	u9207
 10954  002294  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10955  002296  D7FA               	bra	u9207
 10956  002298                     l7596:
 10957  002298  A281               	btfss	3969,1,c	;volatile
 10958  00229A  D7A2               	goto	l7578
 10959                           
 10960                           ;Test.c: 152: }
 10961                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10962  00229C  9A8B               	bcf	3979,5,c	;volatile
 10963                           
 10964                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10965  00229E  0E01               	movlw	1
 10966  0022A0  EC5D  F029         	call	_lcdInst
 10967  0022A4  0E68               	movlw	104
 10968  0022A6  0100               	movlb	0	; () banked
 10969  0022A8  6FAB               	movwf	??_sensorTest& (0+255),b
 10970  0022AA  0EE4               	movlw	228
 10971  0022AC                     u9217:
 10972  0022AC  2EE8               	decfsz	wreg,f,c
 10973  0022AE  D7FE               	bra	u9217
 10974  0022B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10975  0022B2  D7FC               	bra	u9217
 10976  0022B4  F000               	nop	
 10977  0022B6  0E80               	movlw	128
 10978  0022B8  EC5D  F029         	call	_lcdInst
 10979                           
 10980                           ;Test.c: 162: printf("TST: MAGNETISM");
 10981  0022BC  0E83               	movlw	low STR_83
 10982  0022BE  0100               	movlb	0	; () banked
 10983  0022C0  6F8E               	movwf	printf@f& (0+255),b
 10984  0022C2  0EFE               	movlw	high STR_83
 10985  0022C4  0100               	movlb	0	; () banked
 10986  0022C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10987  0022C8  EC02  F00B         	call	_printf	;wreg free
 10988                           
 10989                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10990  0022CC  0E05               	movlw	5
 10991  0022CE  0100               	movlb	0	; () banked
 10992  0022D0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10993  0022D2  0E0F               	movlw	15
 10994  0022D4  0100               	movlb	0	; () banked
 10995  0022D6  6FAB               	movwf	??_sensorTest& (0+255),b
 10996  0022D8  0EF1               	movlw	241
 10997  0022DA                     u9227:
 10998  0022DA  2EE8               	decfsz	wreg,f,c
 10999  0022DC  D7FE               	bra	u9227
 11000  0022DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11001  0022E0  D7FC               	bra	u9227
 11002  0022E2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11003  0022E4  D7FA               	bra	u9227
 11004                           
 11005                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 11006  0022E6  D021               	goto	l7614
 11007  0022E8                     l7608:
 11008                           
 11009                           ;Test.c: 165: readMAG();
 11010  0022E8  EC16  F026         	call	_readMAG	;wreg free
 11011                           
 11012                           ;Test.c: 166: lcdInst(0b10000000);;
 11013  0022EC  0E80               	movlw	128
 11014  0022EE  EC5D  F029         	call	_lcdInst
 11015                           
 11016                           ;Test.c: 167: lcdInst(0b11000000);;
 11017  0022F2  0EC0               	movlw	192
 11018  0022F4  EC5D  F029         	call	_lcdInst
 11019                           
 11020                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 11021  0022F8  0E26               	movlw	low STR_84
 11022  0022FA  0100               	movlb	0	; () banked
 11023  0022FC  6F8E               	movwf	printf@f& (0+255),b
 11024  0022FE  0EFE               	movlw	high STR_84
 11025  002300  0100               	movlb	0	; () banked
 11026  002302  6F8F               	movwf	(printf@f+1)& (0+255),b
 11027  002304  C0E8  F090         	movff	_MAG_signal,?_printf+2
 11028  002308  C0E9  F091         	movff	_MAG_signal+1,?_printf+3
 11029  00230C  EC02  F00B         	call	_printf	;wreg free
 11030                           
 11031                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 11032  002310  0E05               	movlw	5
 11033  002312  0100               	movlb	0	; () banked
 11034  002314  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11035  002316  0E0F               	movlw	15
 11036  002318  0100               	movlb	0	; () banked
 11037  00231A  6FAB               	movwf	??_sensorTest& (0+255),b
 11038  00231C  0EF1               	movlw	241
 11039  00231E                     u9237:
 11040  00231E  2EE8               	decfsz	wreg,f,c
 11041  002320  D7FE               	bra	u9237
 11042  002322  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11043  002324  D7FC               	bra	u9237
 11044  002326  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11045  002328  D7FA               	bra	u9237
 11046  00232A                     l7614:
 11047  00232A  A281               	btfss	3969,1,c	;volatile
 11048  00232C  D7DD               	goto	l7608
 11049                           
 11050                           ;Test.c: 170: }
 11051                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11052  00232E  0E01               	movlw	1
 11053  002330  EC5D  F029         	call	_lcdInst
 11054  002334  0E68               	movlw	104
 11055  002336  0100               	movlb	0	; () banked
 11056  002338  6FAB               	movwf	??_sensorTest& (0+255),b
 11057  00233A  0EE4               	movlw	228
 11058  00233C                     u9247:
 11059  00233C  2EE8               	decfsz	wreg,f,c
 11060  00233E  D7FE               	bra	u9247
 11061  002340  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11062  002342  D7FC               	bra	u9247
 11063  002344  F000               	nop	
 11064  002346  0E80               	movlw	128
 11065  002348  EC5D  F029         	call	_lcdInst
 11066                           
 11067                           ;Test.c: 176: printf("TST: COND");
 11068  00234C  0E83               	movlw	low STR_85
 11069  00234E  0100               	movlb	0	; () banked
 11070  002350  6F8E               	movwf	printf@f& (0+255),b
 11071  002352  0EFF               	movlw	high STR_85
 11072  002354  0100               	movlb	0	; () banked
 11073  002356  6F8F               	movwf	(printf@f+1)& (0+255),b
 11074  002358  EC02  F00B         	call	_printf	;wreg free
 11075                           
 11076                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 11077  00235C  0E05               	movlw	5
 11078  00235E  0100               	movlb	0	; () banked
 11079  002360  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 11080  002362  0E0F               	movlw	15
 11081  002364  0100               	movlb	0	; () banked
 11082  002366  6FAB               	movwf	??_sensorTest& (0+255),b
 11083  002368  0EF1               	movlw	241
 11084  00236A                     u9257:
 11085  00236A  2EE8               	decfsz	wreg,f,c
 11086  00236C  D7FE               	bra	u9257
 11087  00236E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11088  002370  D7FC               	bra	u9257
 11089  002372  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 11090  002374  D7FA               	bra	u9257
 11091  002376                     l7626:
 11092                           
 11093                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11094  002376  0E01               	movlw	1
 11095  002378  EC5D  F029         	call	_lcdInst
 11096  00237C  0E68               	movlw	104
 11097  00237E  0100               	movlb	0	; () banked
 11098  002380  6FAB               	movwf	??_sensorTest& (0+255),b
 11099  002382  0EE4               	movlw	228
 11100  002384                     u9267:
 11101  002384  2EE8               	decfsz	wreg,f,c
 11102  002386  D7FE               	bra	u9267
 11103  002388  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 11104  00238A  D7FC               	bra	u9267
 11105  00238C  F000               	nop	
 11106  00238E  0E80               	movlw	128
 11107  002390  EC5D  F029         	call	_lcdInst
 11108                           
 11109                           ;Test.c: 180: printf("TST: COND");
 11110  002394  0E83               	movlw	low STR_85
 11111  002396  0100               	movlb	0	; () banked
 11112  002398  6F8E               	movwf	printf@f& (0+255),b
 11113  00239A  0EFF               	movlw	high STR_85
 11114  00239C  0100               	movlb	0	; () banked
 11115  00239E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11116  0023A0  EC02  F00B         	call	_printf	;wreg free
 11117                           
 11118                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 11119  0023A4  D01B               	goto	l7638
 11120  0023A6                     l7634:
 11121                           
 11122                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11123  0023A6  0E80               	movlw	128
 11124  0023A8  EC5D  F029         	call	_lcdInst
 11125  0023AC  0EC0               	movlw	192
 11126  0023AE  EC5D  F029         	call	_lcdInst
 11127                           
 11128                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 11129  0023B2  0EA1               	movlw	low STR_87
 11130  0023B4  0100               	movlb	0	; () banked
 11131  0023B6  6F8E               	movwf	printf@f& (0+255),b
 11132  0023B8  0EFF               	movlw	high STR_87
 11133  0023BA  0100               	movlb	0	; () banked
 11134  0023BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11135  0023BE  A480               	btfss	3968,2,c	;volatile
 11136  0023C0  D004               	goto	u6100
 11137  0023C2  0100               	movlb	0	; () banked
 11138  0023C4  6BAB               	clrf	??_sensorTest& (0+255),b
 11139  0023C6  2BAB               	incf	??_sensorTest& (0+255),f,b
 11140  0023C8  D002               	goto	u6108
 11141  0023CA                     u6100:
 11142  0023CA  0100               	movlb	0	; () banked
 11143  0023CC  6BAB               	clrf	??_sensorTest& (0+255),b
 11144  0023CE                     u6108:
 11145  0023CE  0100               	movlb	0	; () banked
 11146  0023D0  51AB               	movf	??_sensorTest& (0+255),w,b
 11147  0023D2  0100               	movlb	0	; () banked
 11148  0023D4  6F90               	movwf	(?_printf+2)& (0+255),b
 11149  0023D6  6B91               	clrf	(?_printf+3)& (0+255),b
 11150  0023D8  EC02  F00B         	call	_printf	;wreg free
 11151  0023DC                     l7638:
 11152  0023DC  A281               	btfss	3969,1,c	;volatile
 11153  0023DE  D7E3               	goto	l7634
 11154                           
 11155                           ;Test.c: 187: }
 11156                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 11157  0023E0  3881               	swapf	3969,w,c	;volatile
 11158  0023E2  0B0F               	andlw	15
 11159  0023E4  0A0F               	xorlw	15
 11160  0023E6  B4D8               	btfsc	status,2,c
 11161  0023E8  0012               	return	
 11162                           
 11163                           ;Test.c: 191: else{
 11164                           ;Test.c: 192: LATAbits.LATA3 = 1;
 11165                           
 11166                           ;Test.c: 190: }
 11167                           
 11168                           ;Test.c: 189: break;
 11169  0023EA  8689               	bsf	3977,3,c	;volatile
 11170                           
 11171                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 11172  0023EC  D01B               	goto	l7650
 11173  0023EE                     l7646:
 11174                           
 11175                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11176  0023EE  0E80               	movlw	128
 11177  0023F0  EC5D  F029         	call	_lcdInst
 11178  0023F4  0EC0               	movlw	192
 11179  0023F6  EC5D  F029         	call	_lcdInst
 11180                           
 11181                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 11182  0023FA  0EA1               	movlw	low STR_87
 11183  0023FC  0100               	movlb	0	; () banked
 11184  0023FE  6F8E               	movwf	printf@f& (0+255),b
 11185  002400  0EFF               	movlw	high STR_87
 11186  002402  0100               	movlb	0	; () banked
 11187  002404  6F8F               	movwf	(printf@f+1)& (0+255),b
 11188  002406  A480               	btfss	3968,2,c	;volatile
 11189  002408  D004               	goto	u6130
 11190  00240A  0100               	movlb	0	; () banked
 11191  00240C  6BAB               	clrf	??_sensorTest& (0+255),b
 11192  00240E  2BAB               	incf	??_sensorTest& (0+255),f,b
 11193  002410  D002               	goto	u6138
 11194  002412                     u6130:
 11195  002412  0100               	movlb	0	; () banked
 11196  002414  6BAB               	clrf	??_sensorTest& (0+255),b
 11197  002416                     u6138:
 11198  002416  0100               	movlb	0	; () banked
 11199  002418  51AB               	movf	??_sensorTest& (0+255),w,b
 11200  00241A  0100               	movlb	0	; () banked
 11201  00241C  6F90               	movwf	(?_printf+2)& (0+255),b
 11202  00241E  6B91               	clrf	(?_printf+3)& (0+255),b
 11203  002420  EC02  F00B         	call	_printf	;wreg free
 11204  002424                     l7650:
 11205  002424  B281               	btfsc	3969,1,c	;volatile
 11206  002426  D7E3               	goto	l7646
 11207                           
 11208                           ;Test.c: 197: }
 11209                           ;Test.c: 198: LATAbits.LATA3 = !1;
 11210  002428  9689               	bcf	3977,3,c	;volatile
 11211  00242A  D7A5               	goto	l7626
 11212  00242C                     __end_of_sensorTest:
 11213                           	opt stack 0
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           intcon2	equ	0xFF1
 11222                           intcon3	equ	0xFF0
 11223                           postinc0	equ	0xFEE
 11224                           wreg	equ	0xFE8
 11225                           postdec1	equ	0xFE5
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           fsr2h	equ	0xFDA
 11231                           fsr2l	equ	0xFD9
 11232                           status	equ	0xFD8
 11233                           
 11234 ;; *************** function _readMAG *****************
 11235 ;; Defined at:
 11236 ;;		line 29 in file "ADCFunctionality.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;		None
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;  res             2    4[BANK0 ] int 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, status,2, status,0, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 0/0
 11247 ;;		On exit  : 0/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;Total ram usage:        4 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    8
 11257 ;; This function calls:
 11258 ;;		_readADC
 11259 ;; This function is called by:
 11260 ;;		_getMAG
 11261 ;;		_sensorTest
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text38
 11266  004C2C                     __ptext38:
 11267                           	opt stack 0
 11268  004C2C                     _readMAG:
 11269                           	opt stack 19
 11270                           
 11271                           ;ADCFunctionality.c: 30: readADC(1);
 11272                           
 11273                           ;incstack = 0
 11274  004C2C  0E01               	movlw	1
 11275  004C2E  EC54  F028         	call	_readADC
 11276                           
 11277                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11278  004C32  50C3               	movf	4035,w,c	;volatile
 11279  004C34  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11280  004C38  0100               	movlb	0	; () banked
 11281  004C3A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11282  004C3C  C082  F083         	movff	??_readMAG,??_readMAG+1
 11283  004C40  0100               	movlb	0	; () banked
 11284  004C42  6B82               	clrf	??_readMAG& (0+255),b
 11285  004C44  0100               	movlb	0	; () banked
 11286  004C46  1182               	iorwf	??_readMAG& (0+255),w,b
 11287  004C48  0100               	movlb	0	; () banked
 11288  004C4A  6F84               	movwf	readMAG@res& (0+255),b
 11289  004C4C  0100               	movlb	0	; () banked
 11290  004C4E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11291  004C50  0100               	movlb	0	; () banked
 11292  004C52  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11293                           
 11294                           ; BSR set to: 0
 11295                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11296  004C54  0100               	movlb	0	; () banked
 11297  004C56  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11298  004C58  D008               	goto	u4521
 11299  004C5A  0100               	movlb	0	; () banked
 11300  004C5C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11301  004C5E  E107               	bnz	u4520
 11302  004C60  0E96               	movlw	150
 11303  004C62  0100               	movlb	0	; () banked
 11304  004C64  5D84               	subwf	readMAG@res& (0+255),w,b
 11305  004C66  B0D8               	btfsc	status,0,c
 11306  004C68  D002               	goto	u4520
 11307  004C6A                     u4521:
 11308  004C6A  0E01               	movlw	1
 11309  004C6C  D001               	goto	u4530
 11310  004C6E                     u4520:
 11311  004C6E  0E00               	movlw	0
 11312  004C70                     u4530:
 11313  004C70  0100               	movlb	0	; () banked
 11314  004C72  6FE8               	movwf	_MAG_signal& (0+255),b
 11315  004C74  6BE9               	clrf	(_MAG_signal+1)& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318  004C76  0012               	return		;funcret
 11319  004C78                     __end_of_readMAG:
 11320                           	opt stack 0
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon2	equ	0xFF1
 11329                           intcon3	equ	0xFF0
 11330                           postinc0	equ	0xFEE
 11331                           wreg	equ	0xFE8
 11332                           postdec1	equ	0xFE5
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           fsr2h	equ	0xFDA
 11338                           fsr2l	equ	0xFD9
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _algorithmTest *****************
 11342 ;; Defined at:
 11343 ;;		line 80 in file "Test.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      void 
 11350 ;; Registers used:
 11351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11361 ;;Total ram usage:        2 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:   10
 11364 ;; This function calls:
 11365 ;;		_lcdInst
 11366 ;;		_printf
 11367 ;; This function is called by:
 11368 ;;		_Test
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           	psect	text39
 11373  003F36                     __ptext39:
 11374                           	opt stack 0
 11375  003F36                     _algorithmTest:
 11376                           	opt stack 19
 11377                           
 11378                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;incstack = 0
 11382  003F36  0E01               	movlw	1
 11383  003F38  EC5D  F029         	call	_lcdInst
 11384  003F3C  0E68               	movlw	104
 11385  003F3E  0100               	movlb	0	; () banked
 11386  003F40  6FAB               	movwf	??_algorithmTest& (0+255),b
 11387  003F42  0EE4               	movlw	228
 11388  003F44                     u9277:
 11389  003F44  2EE8               	decfsz	wreg,f,c
 11390  003F46  D7FE               	bra	u9277
 11391  003F48  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11392  003F4A  D7FC               	bra	u9277
 11393  003F4C  F000               	nop	
 11394  003F4E  0E80               	movlw	128
 11395  003F50  EC5D  F029         	call	_lcdInst
 11396                           
 11397                           ;Test.c: 83: printf("ALGORITHM TEST");
 11398  003F54  0ECE               	movlw	low STR_71
 11399  003F56  0100               	movlb	0	; () banked
 11400  003F58  6F8E               	movwf	printf@f& (0+255),b
 11401  003F5A  0EFE               	movlw	high STR_71
 11402  003F5C  0100               	movlb	0	; () banked
 11403  003F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
 11404  003F60  EC02  F00B         	call	_printf	;wreg free
 11405                           
 11406                           ;Test.c: 84: lcdInst(0b11000000);;
 11407  003F64  0EC0               	movlw	192
 11408  003F66  EC5D  F029         	call	_lcdInst
 11409                           
 11410                           ;Test.c: 85: printf("PUSH TO START");
 11411  003F6A  0E07               	movlw	low STR_72
 11412  003F6C  0100               	movlb	0	; () banked
 11413  003F6E  6F8E               	movwf	printf@f& (0+255),b
 11414  003F70  0EFF               	movlw	high STR_72
 11415  003F72  0100               	movlb	0	; () banked
 11416  003F74  6F8F               	movwf	(printf@f+1)& (0+255),b
 11417  003F76  EC02  F00B         	call	_printf	;wreg free
 11418                           
 11419                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11420  003F7A  0E05               	movlw	5
 11421  003F7C  0100               	movlb	0	; () banked
 11422  003F7E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11423  003F80  0E0F               	movlw	15
 11424  003F82  0100               	movlb	0	; () banked
 11425  003F84  6FAB               	movwf	??_algorithmTest& (0+255),b
 11426  003F86  0EF1               	movlw	241
 11427  003F88                     u9287:
 11428  003F88  2EE8               	decfsz	wreg,f,c
 11429  003F8A  D7FE               	bra	u9287
 11430  003F8C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11431  003F8E  D7FC               	bra	u9287
 11432  003F90  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11433  003F92  D7FA               	bra	u9287
 11434  003F94                     l1166:
 11435  003F94  A281               	btfss	3969,1,c	;volatile
 11436  003F96  D7FE               	goto	l1166
 11437  003F98                     l1169:
 11438  003F98  B281               	btfsc	3969,1,c	;volatile
 11439  003F9A  D7FE               	goto	l1169
 11440                           
 11441                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11442  003F9C  0E01               	movlw	1
 11443  003F9E  EC5D  F029         	call	_lcdInst
 11444  003FA2  0E68               	movlw	104
 11445  003FA4  0100               	movlb	0	; () banked
 11446  003FA6  6FAB               	movwf	??_algorithmTest& (0+255),b
 11447  003FA8  0EE4               	movlw	228
 11448  003FAA                     u9297:
 11449  003FAA  2EE8               	decfsz	wreg,f,c
 11450  003FAC  D7FE               	bra	u9297
 11451  003FAE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11452  003FB0  D7FC               	bra	u9297
 11453  003FB2  F000               	nop	
 11454  003FB4  0E80               	movlw	128
 11455  003FB6  EC5D  F029         	call	_lcdInst
 11456                           
 11457                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11458  003FBA  0E5B               	movlw	low STR_73
 11459  003FBC  0100               	movlb	0	; () banked
 11460  003FBE  6F8E               	movwf	printf@f& (0+255),b
 11461  003FC0  0EFC               	movlw	high STR_73
 11462  003FC2  0100               	movlb	0	; () banked
 11463  003FC4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11464  003FC6  EC02  F00B         	call	_printf	;wreg free
 11465                           
 11466                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11467  003FCA  0EEB               	movlw	low STR_74
 11468  003FCC  0100               	movlb	0	; () banked
 11469  003FCE  6F8E               	movwf	printf@f& (0+255),b
 11470  003FD0  0EFE               	movlw	high STR_74
 11471  003FD2  0100               	movlb	0	; () banked
 11472  003FD4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11473  003FD6  EC02  F00B         	call	_printf	;wreg free
 11474                           
 11475                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11476  003FDA  0E4B               	movlw	low STR_75
 11477  003FDC  0100               	movlb	0	; () banked
 11478  003FDE  6F8E               	movwf	printf@f& (0+255),b
 11479  003FE0  0EFF               	movlw	high STR_75
 11480  003FE2  0100               	movlb	0	; () banked
 11481  003FE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11482  003FE6  EC02  F00B         	call	_printf	;wreg free
 11483                           
 11484                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11485  003FEA  0EB0               	movlw	low STR_76
 11486  003FEC  0100               	movlb	0	; () banked
 11487  003FEE  6F8E               	movwf	printf@f& (0+255),b
 11488  003FF0  0EFE               	movlw	high STR_76
 11489  003FF2  0100               	movlb	0	; () banked
 11490  003FF4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11491  003FF6  EC02  F00B         	call	_printf	;wreg free
 11492                           
 11493                           ;Test.c: 121: printf("ALG5: NO CANS");
 11494  003FFA  0EF9               	movlw	low STR_77
 11495  003FFC  0100               	movlb	0	; () banked
 11496  003FFE  6F8E               	movwf	printf@f& (0+255),b
 11497  004000  0EFE               	movlw	high STR_77
 11498  004002  0100               	movlb	0	; () banked
 11499  004004  6F8F               	movwf	(printf@f+1)& (0+255),b
 11500  004006  EC02  F00B         	call	_printf	;wreg free
 11501  00400A  0012               	return		;funcret
 11502  00400C                     __end_of_algorithmTest:
 11503                           	opt stack 0
 11504                           tblptru	equ	0xFF8
 11505                           tblptrh	equ	0xFF7
 11506                           tblptrl	equ	0xFF6
 11507                           tablat	equ	0xFF5
 11508                           prodh	equ	0xFF4
 11509                           prodl	equ	0xFF3
 11510                           intcon	equ	0xFF2
 11511                           intcon2	equ	0xFF1
 11512                           intcon3	equ	0xFF0
 11513                           postinc0	equ	0xFEE
 11514                           wreg	equ	0xFE8
 11515                           postdec1	equ	0xFE5
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function _actuatorTest *****************
 11525 ;; Defined at:
 11526 ;;		line 203 in file "Test.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;  i               1   45[BANK0 ] unsigned char 
 11531 ;;  i               1   67[BANK0 ] unsigned char 
 11532 ;;  i               1   66[BANK0 ] unsigned char 
 11533 ;;  i               1   65[BANK0 ] unsigned char 
 11534 ;;  i               1   64[BANK0 ] unsigned char 
 11535 ;;  i               1   63[BANK0 ] unsigned char 
 11536 ;;  i               1   62[BANK0 ] unsigned char 
 11537 ;;  i               1   61[BANK0 ] unsigned char 
 11538 ;;  i               1   60[BANK0 ] unsigned char 
 11539 ;;  i               1   59[BANK0 ] unsigned char 
 11540 ;;  i               1   58[BANK0 ] unsigned char 
 11541 ;;  i               1   57[BANK0 ] unsigned char 
 11542 ;;  i               1   56[BANK0 ] unsigned char 
 11543 ;;  i               1   55[BANK0 ] unsigned char 
 11544 ;;  i               1   54[BANK0 ] unsigned char 
 11545 ;;  i               1   53[BANK0 ] unsigned char 
 11546 ;;  i               1   52[BANK0 ] unsigned char 
 11547 ;;  i               1   51[BANK0 ] unsigned char 
 11548 ;;  i               1   50[BANK0 ] unsigned char 
 11549 ;;  i               1   49[BANK0 ] unsigned char 
 11550 ;;  i               1   48[BANK0 ] unsigned char 
 11551 ;;  i               1   47[BANK0 ] unsigned char 
 11552 ;;  i               1   46[BANK0 ] unsigned char 
 11553 ;;  i               2   68[BANK0 ] int 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  1    wreg      void 
 11556 ;; Registers used:
 11557 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11564 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;Total ram usage:       27 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:   10
 11570 ;; This function calls:
 11571 ;;		_lcdInst
 11572 ;;		_printf
 11573 ;;		_updateServoPosition
 11574 ;; This function is called by:
 11575 ;;		_Test
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           	psect	text40
 11580  000012                     __ptext40:
 11581                           	opt stack 0
 11582  000012                     _actuatorTest:
 11583                           	opt stack 19
 11584                           
 11585                           ;Test.c: 205: int i = 0;
 11586                           
 11587                           ;incstack = 0
 11588  000012  0E00               	movlw	0
 11589  000014  0100               	movlb	0	; () banked
 11590  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11591  000018  0E00               	movlw	0
 11592  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11596  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11600  00001E  0E01               	movlw	1
 11601  000020  EC5D  F029         	call	_lcdInst
 11602  000024  0E68               	movlw	104
 11603  000026  0100               	movlb	0	; () banked
 11604  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11605  00002A  0EE4               	movlw	228
 11606  00002C                     u9307:
 11607  00002C  2EE8               	decfsz	wreg,f,c
 11608  00002E  D7FE               	bra	u9307
 11609  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11610  000032  D7FC               	bra	u9307
 11611  000034  F000               	nop	
 11612  000036  0E80               	movlw	128
 11613  000038  EC5D  F029         	call	_lcdInst
 11614                           
 11615                           ;Test.c: 209: printf("ACTUATORS");
 11616  00003C  0E8D               	movlw	low STR_89
 11617  00003E  0100               	movlb	0	; () banked
 11618  000040  6F8E               	movwf	printf@f& (0+255),b
 11619  000042  0EFF               	movlw	high STR_89
 11620  000044  0100               	movlb	0	; () banked
 11621  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11622  000048  EC02  F00B         	call	_printf	;wreg free
 11623                           
 11624                           ;Test.c: 210: lcdInst(0b11000000);;
 11625  00004C  0EC0               	movlw	192
 11626  00004E  EC5D  F029         	call	_lcdInst
 11627                           
 11628                           ;Test.c: 211: printf("PUSH TO START");
 11629  000052  0E07               	movlw	low STR_72
 11630  000054  0100               	movlb	0	; () banked
 11631  000056  6F8E               	movwf	printf@f& (0+255),b
 11632  000058  0EFF               	movlw	high STR_72
 11633  00005A  0100               	movlb	0	; () banked
 11634  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11635  00005E  EC02  F00B         	call	_printf	;wreg free
 11636                           
 11637                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11638  000062  0E05               	movlw	5
 11639  000064  0100               	movlb	0	; () banked
 11640  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11641  000068  0E0F               	movlw	15
 11642  00006A  0100               	movlb	0	; () banked
 11643  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11644  00006E  0EF1               	movlw	241
 11645  000070                     u9317:
 11646  000070  2EE8               	decfsz	wreg,f,c
 11647  000072  D7FE               	bra	u9317
 11648  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11649  000076  D7FC               	bra	u9317
 11650  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11651  00007A  D7FA               	bra	u9317
 11652  00007C                     l1201:
 11653  00007C  A281               	btfss	3969,1,c	;volatile
 11654  00007E  D7FE               	goto	l1201
 11655  000080                     l1204:
 11656  000080  B281               	btfsc	3969,1,c	;volatile
 11657  000082  D7FE               	goto	l1204
 11658                           
 11659                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11660  000084  0E01               	movlw	1
 11661  000086  EC5D  F029         	call	_lcdInst
 11662  00008A  0E68               	movlw	104
 11663  00008C  0100               	movlb	0	; () banked
 11664  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11665  000090  0EE4               	movlw	228
 11666  000092                     u9327:
 11667  000092  2EE8               	decfsz	wreg,f,c
 11668  000094  D7FE               	bra	u9327
 11669  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11670  000098  D7FC               	bra	u9327
 11671  00009A  F000               	nop	
 11672  00009C  0E80               	movlw	128
 11673  00009E  EC5D  F029         	call	_lcdInst
 11674                           
 11675                           ;Test.c: 220: printf("TST: DC MOTORS");
 11676  0000A2  0EBF               	movlw	low STR_91
 11677  0000A4  0100               	movlb	0	; () banked
 11678  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11679  0000A8  0EFE               	movlw	high STR_91
 11680  0000AA  0100               	movlb	0	; () banked
 11681  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11682  0000AE  EC02  F00B         	call	_printf	;wreg free
 11683                           
 11684                           ;Test.c: 221: lcdInst(0b11000000);;
 11685  0000B2  0EC0               	movlw	192
 11686  0000B4  EC5D  F029         	call	_lcdInst
 11687                           
 11688                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11689  0000B8  0EDD               	movlw	low STR_92
 11690  0000BA  0100               	movlb	0	; () banked
 11691  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11692  0000BE  0EFE               	movlw	high STR_92
 11693  0000C0  0100               	movlb	0	; () banked
 11694  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11695  0000C4  EC02  F00B         	call	_printf	;wreg free
 11696                           
 11697                           ;Test.c: 223: LATBbits.LATB2 = 1;
 11698  0000C8  848A               	bsf	3978,2,c	;volatile
 11699                           
 11700                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11701  0000CA  0E00               	movlw	0
 11702  0000CC  0100               	movlb	0	; () banked
 11703  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11704  0000D0  0E00               	movlw	0
 11705  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11706                           
 11707                           ; BSR set to: 0
 11708  0000D4  0100               	movlb	0	; () banked
 11709  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11710  0000D8  D008               	goto	l7690
 11711  0000DA  0100               	movlb	0	; () banked
 11712  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11713  0000DE  E123               	bnz	l1208
 11714  0000E0  0E05               	movlw	5
 11715  0000E2  0100               	movlb	0	; () banked
 11716  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11717  0000E6  B0D8               	btfsc	status,0,c
 11718  0000E8  D01E               	goto	l1208
 11719  0000EA                     l7690:
 11720                           
 11721                           ; BSR set to: 0
 11722  0000EA  0E00               	movlw	0
 11723  0000EC  0100               	movlb	0	; () banked
 11724  0000EE  6FAD               	movwf	actuatorTest@i_1734& (0+255),b
 11725  0000F0                     l7692:
 11726                           
 11727                           ; BSR set to: 0
 11728  0000F0  0E63               	movlw	99
 11729  0000F2  0100               	movlb	0	; () banked
 11730  0000F4  65AD               	cpfsgt	actuatorTest@i_1734& (0+255),b
 11731  0000F6  D001               	goto	l7696
 11732  0000F8  D00C               	goto	l7700
 11733  0000FA                     l7696:
 11734                           
 11735                           ; BSR set to: 0
 11736  0000FA  0E68               	movlw	104
 11737  0000FC  0100               	movlb	0	; () banked
 11738  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11739  000100  0EE4               	movlw	228
 11740  000102                     u9337:
 11741  000102  2EE8               	decfsz	wreg,f,c
 11742  000104  D7FE               	bra	u9337
 11743  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11744  000108  D7FC               	bra	u9337
 11745  00010A  F000               	nop	
 11746  00010C  0100               	movlb	0	; () banked
 11747  00010E  2BAD               	incf	actuatorTest@i_1734& (0+255),f,b
 11748  000110  D7EF               	goto	l7692
 11749  000112                     l7700:
 11750                           
 11751                           ; BSR set to: 0
 11752  000112  0100               	movlb	0	; () banked
 11753  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11754  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11755                           
 11756                           ; BSR set to: 0
 11757  000118  0100               	movlb	0	; () banked
 11758  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11759  00011C  D7E6               	goto	l7690
 11760  00011E  0100               	movlb	0	; () banked
 11761  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11762  000122  E101               	bnz	u6200
 11763  000124  D7DD               	goto	L9
 11764  000126                     u6200:
 11765  000126                     l1208:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;Test.c: 225: LATBbits.LATB2 = 0;
 11769  000126  948A               	bcf	3978,2,c	;volatile
 11770                           
 11771                           ; BSR set to: 0
 11772                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11773  000128  0E01               	movlw	1
 11774  00012A  EC5D  F029         	call	_lcdInst
 11775  00012E  0E68               	movlw	104
 11776  000130  0100               	movlb	0	; () banked
 11777  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11778  000134  0EE4               	movlw	228
 11779  000136                     u9347:
 11780  000136  2EE8               	decfsz	wreg,f,c
 11781  000138  D7FE               	bra	u9347
 11782  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11783  00013C  D7FC               	bra	u9347
 11784  00013E  F000               	nop	
 11785  000140  0E80               	movlw	128
 11786  000142  EC5D  F029         	call	_lcdInst
 11787                           
 11788                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11789  000146  0E6C               	movlw	low STR_93
 11790  000148  0100               	movlb	0	; () banked
 11791  00014A  6F8E               	movwf	printf@f& (0+255),b
 11792  00014C  0EFC               	movlw	high STR_93
 11793  00014E  0100               	movlb	0	; () banked
 11794  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11795  000152  EC02  F00B         	call	_printf	;wreg free
 11796                           
 11797                           ;Test.c: 233: lcdInst(0b11000000);;
 11798  000156  0EC0               	movlw	192
 11799  000158  EC5D  F029         	call	_lcdInst
 11800                           
 11801                           ;Test.c: 234: printf("PIN RA3...");
 11802  00015C  0E57               	movlw	low STR_94
 11803  00015E  0100               	movlb	0	; () banked
 11804  000160  6F8E               	movwf	printf@f& (0+255),b
 11805  000162  0EFF               	movlw	high STR_94
 11806  000164  0100               	movlb	0	; () banked
 11807  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11808  000168  EC02  F00B         	call	_printf	;wreg free
 11809                           
 11810                           ;Test.c: 235: for(i=0;i<5;i++){
 11811  00016C  0E00               	movlw	0
 11812  00016E  0100               	movlb	0	; () banked
 11813  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11814  000172  0E00               	movlw	0
 11815  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11816                           
 11817                           ; BSR set to: 0
 11818  000176  0100               	movlb	0	; () banked
 11819  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11820  00017A  D008               	goto	l1211
 11821  00017C  0100               	movlb	0	; () banked
 11822  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11823  000180  E12C               	bnz	l1212
 11824  000182  0E05               	movlw	5
 11825  000184  0100               	movlb	0	; () banked
 11826  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11827  000188  B0D8               	btfsc	status,0,c
 11828  00018A  D027               	goto	l1212
 11829  00018C                     l1211:
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11833  00018C  8689               	bsf	3977,3,c	;volatile
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11837  00018E  0E0D               	movlw	13
 11838  000190  0100               	movlb	0	; () banked
 11839  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11840  000194  0E2D               	movlw	45
 11841  000196  0100               	movlb	0	; () banked
 11842  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11843  00019A  0ED7               	movlw	215
 11844  00019C                     u9357:
 11845  00019C  2EE8               	decfsz	wreg,f,c
 11846  00019E  D7FE               	bra	u9357
 11847  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11848  0001A2  D7FC               	bra	u9357
 11849  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11850  0001A6  D7FA               	bra	u9357
 11851  0001A8  D000               	nop2	
 11852                           
 11853                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11854  0001AA  9689               	bcf	3977,3,c	;volatile
 11855                           
 11856                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11857  0001AC  0E1D               	movlw	29
 11858  0001AE  0100               	movlb	0	; () banked
 11859  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11860  0001B2  0E69               	movlw	105
 11861  0001B4  0100               	movlb	0	; () banked
 11862  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11863  0001B8  0EA5               	movlw	165
 11864  0001BA                     u9367:
 11865  0001BA  2EE8               	decfsz	wreg,f,c
 11866  0001BC  D7FE               	bra	u9367
 11867  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11868  0001C0  D7FC               	bra	u9367
 11869  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11870  0001C4  D7FA               	bra	u9367
 11871  0001C6  0100               	movlb	0	; () banked
 11872  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11873  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11874  0001CC  0100               	movlb	0	; () banked
 11875  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11876  0001D0  D7DD               	goto	l1211
 11877  0001D2  0100               	movlb	0	; () banked
 11878  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11879  0001D6  E101               	bnz	u6220
 11880  0001D8  D7D4               	goto	L10
 11881  0001DA                     u6220:
 11882  0001DA                     l1212:
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;Test.c: 240: }
 11886                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11887  0001DA  9689               	bcf	3977,3,c	;volatile
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11891  0001DC  0E01               	movlw	1
 11892  0001DE  EC5D  F029         	call	_lcdInst
 11893  0001E2  0E68               	movlw	104
 11894  0001E4  0100               	movlb	0	; () banked
 11895  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11896  0001E8  0EE4               	movlw	228
 11897  0001EA                     u9377:
 11898  0001EA  2EE8               	decfsz	wreg,f,c
 11899  0001EC  D7FE               	bra	u9377
 11900  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11901  0001F0  D7FC               	bra	u9377
 11902  0001F2  F000               	nop	
 11903  0001F4  0E80               	movlw	128
 11904  0001F6  EC5D  F029         	call	_lcdInst
 11905                           
 11906                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11907  0001FA  0E7D               	movlw	low STR_95
 11908  0001FC  0100               	movlb	0	; () banked
 11909  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11910  000200  0EFC               	movlw	high STR_95
 11911  000202  0100               	movlb	0	; () banked
 11912  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11913  000206  EC02  F00B         	call	_printf	;wreg free
 11914                           
 11915                           ;Test.c: 249: lcdInst(0b11000000);;
 11916  00020A  0EC0               	movlw	192
 11917  00020C  EC5D  F029         	call	_lcdInst
 11918                           
 11919                           ;Test.c: 250: printf("PIN RA4...");
 11920  000210  0E62               	movlw	low STR_96
 11921  000212  0100               	movlb	0	; () banked
 11922  000214  6F8E               	movwf	printf@f& (0+255),b
 11923  000216  0EFF               	movlw	high STR_96
 11924  000218  0100               	movlb	0	; () banked
 11925  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11926  00021C  EC02  F00B         	call	_printf	;wreg free
 11927                           
 11928                           ;Test.c: 251: for(i=0;i<5;i++){
 11929  000220  0E00               	movlw	0
 11930  000222  0100               	movlb	0	; () banked
 11931  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11932  000226  0E00               	movlw	0
 11933  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11934                           
 11935                           ; BSR set to: 0
 11936  00022A  0100               	movlb	0	; () banked
 11937  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11938  00022E  D008               	goto	l1213
 11939  000230  0100               	movlb	0	; () banked
 11940  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11941  000234  E12C               	bnz	l1214
 11942  000236  0E05               	movlw	5
 11943  000238  0100               	movlb	0	; () banked
 11944  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11945  00023C  B0D8               	btfsc	status,0,c
 11946  00023E  D027               	goto	l1214
 11947  000240                     l1213:
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11951  000240  8889               	bsf	3977,4,c	;volatile
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11955  000242  0E0D               	movlw	13
 11956  000244  0100               	movlb	0	; () banked
 11957  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11958  000248  0E2D               	movlw	45
 11959  00024A  0100               	movlb	0	; () banked
 11960  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11961  00024E  0ED7               	movlw	215
 11962  000250                     u9387:
 11963  000250  2EE8               	decfsz	wreg,f,c
 11964  000252  D7FE               	bra	u9387
 11965  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11966  000256  D7FC               	bra	u9387
 11967  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11968  00025A  D7FA               	bra	u9387
 11969  00025C  D000               	nop2	
 11970                           
 11971                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11972  00025E  9889               	bcf	3977,4,c	;volatile
 11973                           
 11974                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11975  000260  0E1D               	movlw	29
 11976  000262  0100               	movlb	0	; () banked
 11977  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11978  000266  0E69               	movlw	105
 11979  000268  0100               	movlb	0	; () banked
 11980  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11981  00026C  0EA5               	movlw	165
 11982  00026E                     u9397:
 11983  00026E  2EE8               	decfsz	wreg,f,c
 11984  000270  D7FE               	bra	u9397
 11985  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11986  000274  D7FC               	bra	u9397
 11987  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11988  000278  D7FA               	bra	u9397
 11989  00027A  0100               	movlb	0	; () banked
 11990  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11991  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11992  000280  0100               	movlb	0	; () banked
 11993  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11994  000284  D7DD               	goto	l1213
 11995  000286  0100               	movlb	0	; () banked
 11996  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11997  00028A  E101               	bnz	u6240
 11998  00028C  D7D4               	goto	L11
 11999  00028E                     u6240:
 12000  00028E                     l1214:
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;Test.c: 256: }
 12004                           ;Test.c: 257: LATAbits.LATA4 = !1;
 12005  00028E  9889               	bcf	3977,4,c	;volatile
 12006                           
 12007                           ; BSR set to: 0
 12008                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12009  000290  0E01               	movlw	1
 12010  000292  EC5D  F029         	call	_lcdInst
 12011  000296  0E68               	movlw	104
 12012  000298  0100               	movlb	0	; () banked
 12013  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 12014  00029C  0EE4               	movlw	228
 12015  00029E                     u9407:
 12016  00029E  2EE8               	decfsz	wreg,f,c
 12017  0002A0  D7FE               	bra	u9407
 12018  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12019  0002A4  D7FC               	bra	u9407
 12020  0002A6  F000               	nop	
 12021  0002A8  0E80               	movlw	128
 12022  0002AA  EC5D  F029         	call	_lcdInst
 12023                           
 12024                           ;Test.c: 261: machine_state = Sorting_state;
 12025  0002AE  0E01               	movlw	1
 12026  0002B0  0100               	movlb	0	; () banked
 12027  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;Test.c: 262: was_low_1 = 0;
 12031  0002B4  0E00               	movlw	0
 12032  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 12033  0002B8  0E00               	movlw	0
 12034  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;Test.c: 263: was_low_1 = 0;
 12038  0002BC  0E00               	movlw	0
 12039  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 12040  0002C0  0E00               	movlw	0
 12041  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Test.c: 270: printf("TST: PAN SERVO");
 12045  0002C4  0EA1               	movlw	low STR_97
 12046  0002C6  0100               	movlb	0	; () banked
 12047  0002C8  6F8E               	movwf	printf@f& (0+255),b
 12048  0002CA  0EFE               	movlw	high STR_97
 12049  0002CC  0100               	movlb	0	; () banked
 12050  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12051  0002D0  EC02  F00B         	call	_printf	;wreg free
 12052                           
 12053                           ;Test.c: 271: lcdInst(0b11000000);;
 12054  0002D4  0EC0               	movlw	192
 12055  0002D6  EC5D  F029         	call	_lcdInst
 12056                           
 12057                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 12058  0002DA  0E06               	movlw	low STR_98
 12059  0002DC  0100               	movlb	0	; () banked
 12060  0002DE  6F8E               	movwf	printf@f& (0+255),b
 12061  0002E0  0EFC               	movlw	high STR_98
 12062  0002E2  0100               	movlb	0	; () banked
 12063  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12064  0002E6  EC02  F00B         	call	_printf	;wreg free
 12065                           
 12066                           ;Test.c: 273: updateServoPosition(1200, 1);
 12067  0002EA  0E04               	movlw	4
 12068  0002EC  0100               	movlb	0	; () banked
 12069  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12070  0002F0  0EB0               	movlw	176
 12071  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12072  0002F4  0E00               	movlw	0
 12073  0002F6  0100               	movlb	0	; () banked
 12074  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12075  0002FA  0E01               	movlw	1
 12076  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12077  0002FE  ECAA  F022         	call	_updateServoPosition	;wreg free
 12078                           
 12079                           ;Test.c: 274: TMR1ON = 1;
 12080  000302  80CD               	bsf	4045,0,c	;volatile
 12081                           
 12082                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12083  000304  0E00               	movlw	0
 12084  000306  0100               	movlb	0	; () banked
 12085  000308  6FAE               	movwf	actuatorTest@i_1741& (0+255),b
 12086  00030A                     l7776:
 12087                           
 12088                           ; BSR set to: 0
 12089  00030A  0E63               	movlw	99
 12090  00030C  0100               	movlb	0	; () banked
 12091  00030E  65AE               	cpfsgt	actuatorTest@i_1741& (0+255),b
 12092  000310  D001               	goto	l7780
 12093  000312  D00C               	goto	l7784
 12094  000314                     l7780:
 12095                           
 12096                           ; BSR set to: 0
 12097  000314  0E68               	movlw	104
 12098  000316  0100               	movlb	0	; () banked
 12099  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 12100  00031A  0EE4               	movlw	228
 12101  00031C                     u9417:
 12102  00031C  2EE8               	decfsz	wreg,f,c
 12103  00031E  D7FE               	bra	u9417
 12104  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12105  000322  D7FC               	bra	u9417
 12106  000324  F000               	nop	
 12107  000326  0100               	movlb	0	; () banked
 12108  000328  2BAE               	incf	actuatorTest@i_1741& (0+255),f,b
 12109  00032A  D7EF               	goto	l7776
 12110  00032C                     l7784:
 12111                           
 12112                           ; BSR set to: 0
 12113  00032C  0E00               	movlw	0
 12114  00032E  0100               	movlb	0	; () banked
 12115  000330  6FAF               	movwf	actuatorTest@i_1742& (0+255),b
 12116  000332                     l7786:
 12117                           
 12118                           ; BSR set to: 0
 12119  000332  0E63               	movlw	99
 12120  000334  0100               	movlb	0	; () banked
 12121  000336  65AF               	cpfsgt	actuatorTest@i_1742& (0+255),b
 12122  000338  D001               	goto	l7790
 12123  00033A  D00C               	goto	l7794
 12124  00033C                     l7790:
 12125                           
 12126                           ; BSR set to: 0
 12127  00033C  0E68               	movlw	104
 12128  00033E  0100               	movlb	0	; () banked
 12129  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 12130  000342  0EE4               	movlw	228
 12131  000344                     u9427:
 12132  000344  2EE8               	decfsz	wreg,f,c
 12133  000346  D7FE               	bra	u9427
 12134  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12135  00034A  D7FC               	bra	u9427
 12136  00034C  F000               	nop	
 12137  00034E  0100               	movlb	0	; () banked
 12138  000350  2BAF               	incf	actuatorTest@i_1742& (0+255),f,b
 12139  000352  D7EF               	goto	l7786
 12140  000354                     l7794:
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12144  000354  0E80               	movlw	128
 12145  000356  EC5D  F029         	call	_lcdInst
 12146  00035A  0EC0               	movlw	192
 12147  00035C  EC5D  F029         	call	_lcdInst
 12148                           
 12149                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 12150  000360  0EF5               	movlw	low STR_99
 12151  000362  0100               	movlb	0	; () banked
 12152  000364  6F8E               	movwf	printf@f& (0+255),b
 12153  000366  0EFB               	movlw	high STR_99
 12154  000368  0100               	movlb	0	; () banked
 12155  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12156  00036C  EC02  F00B         	call	_printf	;wreg free
 12157                           
 12158                           ;Test.c: 279: updateServoPosition(500, 1);
 12159  000370  0E01               	movlw	1
 12160  000372  0100               	movlb	0	; () banked
 12161  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12162  000376  0EF4               	movlw	244
 12163  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12164  00037A  0E00               	movlw	0
 12165  00037C  0100               	movlb	0	; () banked
 12166  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12167  000380  0E01               	movlw	1
 12168  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12169  000384  ECAA  F022         	call	_updateServoPosition	;wreg free
 12170                           
 12171                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12172  000388  0E00               	movlw	0
 12173  00038A  0100               	movlb	0	; () banked
 12174  00038C  6FB0               	movwf	actuatorTest@i_1744& (0+255),b
 12175  00038E                     l7802:
 12176                           
 12177                           ; BSR set to: 0
 12178  00038E  0E63               	movlw	99
 12179  000390  0100               	movlb	0	; () banked
 12180  000392  65B0               	cpfsgt	actuatorTest@i_1744& (0+255),b
 12181  000394  D001               	goto	l7806
 12182  000396  D00C               	goto	l7810
 12183  000398                     l7806:
 12184                           
 12185                           ; BSR set to: 0
 12186  000398  0E68               	movlw	104
 12187  00039A  0100               	movlb	0	; () banked
 12188  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 12189  00039E  0EE4               	movlw	228
 12190  0003A0                     u9437:
 12191  0003A0  2EE8               	decfsz	wreg,f,c
 12192  0003A2  D7FE               	bra	u9437
 12193  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12194  0003A6  D7FC               	bra	u9437
 12195  0003A8  F000               	nop	
 12196  0003AA  0100               	movlb	0	; () banked
 12197  0003AC  2BB0               	incf	actuatorTest@i_1744& (0+255),f,b
 12198  0003AE  D7EF               	goto	l7802
 12199  0003B0                     l7810:
 12200                           
 12201                           ; BSR set to: 0
 12202  0003B0  0E00               	movlw	0
 12203  0003B2  0100               	movlb	0	; () banked
 12204  0003B4  6FB1               	movwf	actuatorTest@i_1745& (0+255),b
 12205  0003B6                     l7812:
 12206                           
 12207                           ; BSR set to: 0
 12208  0003B6  0E63               	movlw	99
 12209  0003B8  0100               	movlb	0	; () banked
 12210  0003BA  65B1               	cpfsgt	actuatorTest@i_1745& (0+255),b
 12211  0003BC  D001               	goto	l7816
 12212  0003BE  D00C               	goto	l7820
 12213  0003C0                     l7816:
 12214                           
 12215                           ; BSR set to: 0
 12216  0003C0  0E68               	movlw	104
 12217  0003C2  0100               	movlb	0	; () banked
 12218  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12219  0003C6  0EE4               	movlw	228
 12220  0003C8                     u9447:
 12221  0003C8  2EE8               	decfsz	wreg,f,c
 12222  0003CA  D7FE               	bra	u9447
 12223  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12224  0003CE  D7FC               	bra	u9447
 12225  0003D0  F000               	nop	
 12226  0003D2  0100               	movlb	0	; () banked
 12227  0003D4  2BB1               	incf	actuatorTest@i_1745& (0+255),f,b
 12228  0003D6  D7EF               	goto	l7812
 12229  0003D8                     l7820:
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12233  0003D8  0E80               	movlw	128
 12234  0003DA  EC5D  F029         	call	_lcdInst
 12235  0003DE  0EC0               	movlw	192
 12236  0003E0  EC5D  F029         	call	_lcdInst
 12237                           
 12238                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12239  0003E4  0ED3               	movlw	low STR_100
 12240  0003E6  0100               	movlb	0	; () banked
 12241  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12242  0003EA  0EFB               	movlw	high STR_100
 12243  0003EC  0100               	movlb	0	; () banked
 12244  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12245  0003F0  EC02  F00B         	call	_printf	;wreg free
 12246                           
 12247                           ;Test.c: 284: updateServoPosition(2400, 1);
 12248  0003F4  0E09               	movlw	9
 12249  0003F6  0100               	movlb	0	; () banked
 12250  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12251  0003FA  0E60               	movlw	96
 12252  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12253  0003FE  0E00               	movlw	0
 12254  000400  0100               	movlb	0	; () banked
 12255  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12256  000404  0E01               	movlw	1
 12257  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12258  000408  ECAA  F022         	call	_updateServoPosition	;wreg free
 12259                           
 12260                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12261  00040C  0E00               	movlw	0
 12262  00040E  0100               	movlb	0	; () banked
 12263  000410  6FB2               	movwf	actuatorTest@i_1747& (0+255),b
 12264  000412                     l7828:
 12265                           
 12266                           ; BSR set to: 0
 12267  000412  0E63               	movlw	99
 12268  000414  0100               	movlb	0	; () banked
 12269  000416  65B2               	cpfsgt	actuatorTest@i_1747& (0+255),b
 12270  000418  D001               	goto	l7832
 12271  00041A  D00C               	goto	l7836
 12272  00041C                     l7832:
 12273                           
 12274                           ; BSR set to: 0
 12275  00041C  0E68               	movlw	104
 12276  00041E  0100               	movlb	0	; () banked
 12277  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12278  000422  0EE4               	movlw	228
 12279  000424                     u9457:
 12280  000424  2EE8               	decfsz	wreg,f,c
 12281  000426  D7FE               	bra	u9457
 12282  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12283  00042A  D7FC               	bra	u9457
 12284  00042C  F000               	nop	
 12285  00042E  0100               	movlb	0	; () banked
 12286  000430  2BB2               	incf	actuatorTest@i_1747& (0+255),f,b
 12287  000432  D7EF               	goto	l7828
 12288  000434                     l7836:
 12289                           
 12290                           ; BSR set to: 0
 12291  000434  0E00               	movlw	0
 12292  000436  0100               	movlb	0	; () banked
 12293  000438  6FB3               	movwf	actuatorTest@i_1748& (0+255),b
 12294  00043A                     l7838:
 12295                           
 12296                           ; BSR set to: 0
 12297  00043A  0E63               	movlw	99
 12298  00043C  0100               	movlb	0	; () banked
 12299  00043E  65B3               	cpfsgt	actuatorTest@i_1748& (0+255),b
 12300  000440  D001               	goto	l7842
 12301  000442  D00C               	goto	l7846
 12302  000444                     l7842:
 12303                           
 12304                           ; BSR set to: 0
 12305  000444  0E68               	movlw	104
 12306  000446  0100               	movlb	0	; () banked
 12307  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12308  00044A  0EE4               	movlw	228
 12309  00044C                     u9467:
 12310  00044C  2EE8               	decfsz	wreg,f,c
 12311  00044E  D7FE               	bra	u9467
 12312  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12313  000452  D7FC               	bra	u9467
 12314  000454  F000               	nop	
 12315  000456  0100               	movlb	0	; () banked
 12316  000458  2BB3               	incf	actuatorTest@i_1748& (0+255),f,b
 12317  00045A  D7EF               	goto	l7838
 12318  00045C                     l7846:
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12322  00045C  0E80               	movlw	128
 12323  00045E  EC5D  F029         	call	_lcdInst
 12324  000462  0EC0               	movlw	192
 12325  000464  EC5D  F029         	call	_lcdInst
 12326                           
 12327                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12328  000468  0E28               	movlw	low STR_101
 12329  00046A  0100               	movlb	0	; () banked
 12330  00046C  6F8E               	movwf	printf@f& (0+255),b
 12331  00046E  0EFC               	movlw	high STR_101
 12332  000470  0100               	movlb	0	; () banked
 12333  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12334  000474  EC02  F00B         	call	_printf	;wreg free
 12335                           
 12336                           ;Test.c: 289: updateServoPosition(1670, 1);
 12337  000478  0E06               	movlw	6
 12338  00047A  0100               	movlb	0	; () banked
 12339  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12340  00047E  0E86               	movlw	134
 12341  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12342  000482  0E00               	movlw	0
 12343  000484  0100               	movlb	0	; () banked
 12344  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12345  000488  0E01               	movlw	1
 12346  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12347  00048C  ECAA  F022         	call	_updateServoPosition	;wreg free
 12348                           
 12349                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12350  000490  0E00               	movlw	0
 12351  000492  0100               	movlb	0	; () banked
 12352  000494  6FB4               	movwf	actuatorTest@i_1750& (0+255),b
 12353  000496                     l7854:
 12354                           
 12355                           ; BSR set to: 0
 12356  000496  0E63               	movlw	99
 12357  000498  0100               	movlb	0	; () banked
 12358  00049A  65B4               	cpfsgt	actuatorTest@i_1750& (0+255),b
 12359  00049C  D001               	goto	l7858
 12360  00049E  D00C               	goto	l7862
 12361  0004A0                     l7858:
 12362                           
 12363                           ; BSR set to: 0
 12364  0004A0  0E68               	movlw	104
 12365  0004A2  0100               	movlb	0	; () banked
 12366  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12367  0004A6  0EE4               	movlw	228
 12368  0004A8                     u9477:
 12369  0004A8  2EE8               	decfsz	wreg,f,c
 12370  0004AA  D7FE               	bra	u9477
 12371  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12372  0004AE  D7FC               	bra	u9477
 12373  0004B0  F000               	nop	
 12374  0004B2  0100               	movlb	0	; () banked
 12375  0004B4  2BB4               	incf	actuatorTest@i_1750& (0+255),f,b
 12376  0004B6  D7EF               	goto	l7854
 12377  0004B8                     l7862:
 12378                           
 12379                           ; BSR set to: 0
 12380  0004B8  0E00               	movlw	0
 12381  0004BA  0100               	movlb	0	; () banked
 12382  0004BC  6FB5               	movwf	actuatorTest@i_1751& (0+255),b
 12383  0004BE                     l7864:
 12384                           
 12385                           ; BSR set to: 0
 12386  0004BE  0E63               	movlw	99
 12387  0004C0  0100               	movlb	0	; () banked
 12388  0004C2  65B5               	cpfsgt	actuatorTest@i_1751& (0+255),b
 12389  0004C4  D001               	goto	l7868
 12390  0004C6  D00C               	goto	l7872
 12391  0004C8                     l7868:
 12392                           
 12393                           ; BSR set to: 0
 12394  0004C8  0E68               	movlw	104
 12395  0004CA  0100               	movlb	0	; () banked
 12396  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12397  0004CE  0EE4               	movlw	228
 12398  0004D0                     u9487:
 12399  0004D0  2EE8               	decfsz	wreg,f,c
 12400  0004D2  D7FE               	bra	u9487
 12401  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12402  0004D6  D7FC               	bra	u9487
 12403  0004D8  F000               	nop	
 12404  0004DA  0100               	movlb	0	; () banked
 12405  0004DC  2BB5               	incf	actuatorTest@i_1751& (0+255),f,b
 12406  0004DE  D7EF               	goto	l7864
 12407  0004E0                     l7872:
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12411  0004E0  0E80               	movlw	128
 12412  0004E2  EC5D  F029         	call	_lcdInst
 12413  0004E6  0EC0               	movlw	192
 12414  0004E8  EC5D  F029         	call	_lcdInst
 12415                           
 12416                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12417  0004EC  0E39               	movlw	low STR_102
 12418  0004EE  0100               	movlb	0	; () banked
 12419  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12420  0004F2  0EFC               	movlw	high STR_102
 12421  0004F4  0100               	movlb	0	; () banked
 12422  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12423  0004F8  EC02  F00B         	call	_printf	;wreg free
 12424                           
 12425                           ;Test.c: 294: updateServoPosition(850, 1);
 12426  0004FC  0E03               	movlw	3
 12427  0004FE  0100               	movlb	0	; () banked
 12428  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12429  000502  0E52               	movlw	82
 12430  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12431  000506  0E00               	movlw	0
 12432  000508  0100               	movlb	0	; () banked
 12433  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12434  00050C  0E01               	movlw	1
 12435  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12436  000510  ECAA  F022         	call	_updateServoPosition	;wreg free
 12437                           
 12438                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12439  000514  0E00               	movlw	0
 12440  000516  0100               	movlb	0	; () banked
 12441  000518  6FB6               	movwf	actuatorTest@i_1753& (0+255),b
 12442  00051A                     l7880:
 12443                           
 12444                           ; BSR set to: 0
 12445  00051A  0E63               	movlw	99
 12446  00051C  0100               	movlb	0	; () banked
 12447  00051E  65B6               	cpfsgt	actuatorTest@i_1753& (0+255),b
 12448  000520  D001               	goto	l7884
 12449  000522  D00C               	goto	l7888
 12450  000524                     l7884:
 12451                           
 12452                           ; BSR set to: 0
 12453  000524  0E68               	movlw	104
 12454  000526  0100               	movlb	0	; () banked
 12455  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12456  00052A  0EE4               	movlw	228
 12457  00052C                     u9497:
 12458  00052C  2EE8               	decfsz	wreg,f,c
 12459  00052E  D7FE               	bra	u9497
 12460  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12461  000532  D7FC               	bra	u9497
 12462  000534  F000               	nop	
 12463  000536  0100               	movlb	0	; () banked
 12464  000538  2BB6               	incf	actuatorTest@i_1753& (0+255),f,b
 12465  00053A  D7EF               	goto	l7880
 12466  00053C                     l7888:
 12467                           
 12468                           ; BSR set to: 0
 12469  00053C  0E00               	movlw	0
 12470  00053E  0100               	movlb	0	; () banked
 12471  000540  6FB7               	movwf	actuatorTest@i_1754& (0+255),b
 12472  000542                     l7890:
 12473                           
 12474                           ; BSR set to: 0
 12475  000542  0E63               	movlw	99
 12476  000544  0100               	movlb	0	; () banked
 12477  000546  65B7               	cpfsgt	actuatorTest@i_1754& (0+255),b
 12478  000548  D001               	goto	l7894
 12479  00054A  D00C               	goto	l7898
 12480  00054C                     l7894:
 12481                           
 12482                           ; BSR set to: 0
 12483  00054C  0E68               	movlw	104
 12484  00054E  0100               	movlb	0	; () banked
 12485  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12486  000552  0EE4               	movlw	228
 12487  000554                     u9507:
 12488  000554  2EE8               	decfsz	wreg,f,c
 12489  000556  D7FE               	bra	u9507
 12490  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12491  00055A  D7FC               	bra	u9507
 12492  00055C  F000               	nop	
 12493  00055E  0100               	movlb	0	; () banked
 12494  000560  2BB7               	incf	actuatorTest@i_1754& (0+255),f,b
 12495  000562  D7EF               	goto	l7890
 12496  000564                     l7898:
 12497                           
 12498                           ; BSR set to: 0
 12499                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12500  000564  0E80               	movlw	128
 12501  000566  EC5D  F029         	call	_lcdInst
 12502  00056A  0EC0               	movlw	192
 12503  00056C  EC5D  F029         	call	_lcdInst
 12504                           
 12505                           ;Test.c: 298: printf("MID -- 2s       ");
 12506  000570  0EB1               	movlw	low STR_103
 12507  000572  0100               	movlb	0	; () banked
 12508  000574  6F8E               	movwf	printf@f& (0+255),b
 12509  000576  0EFB               	movlw	high STR_103
 12510  000578  0100               	movlb	0	; () banked
 12511  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12512  00057C  EC02  F00B         	call	_printf	;wreg free
 12513                           
 12514                           ;Test.c: 299: updateServoPosition(1200, 1);
 12515  000580  0E04               	movlw	4
 12516  000582  0100               	movlb	0	; () banked
 12517  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12518  000586  0EB0               	movlw	176
 12519  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12520  00058A  0E00               	movlw	0
 12521  00058C  0100               	movlb	0	; () banked
 12522  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12523  000590  0E01               	movlw	1
 12524  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12525  000594  ECAA  F022         	call	_updateServoPosition	;wreg free
 12526                           
 12527                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12528  000598  0E00               	movlw	0
 12529  00059A  0100               	movlb	0	; () banked
 12530  00059C  6FB8               	movwf	actuatorTest@i_1756& (0+255),b
 12531  00059E                     l7906:
 12532                           
 12533                           ; BSR set to: 0
 12534  00059E  0E63               	movlw	99
 12535  0005A0  0100               	movlb	0	; () banked
 12536  0005A2  65B8               	cpfsgt	actuatorTest@i_1756& (0+255),b
 12537  0005A4  D001               	goto	l7910
 12538  0005A6  D00C               	goto	l7914
 12539  0005A8                     l7910:
 12540                           
 12541                           ; BSR set to: 0
 12542  0005A8  0E68               	movlw	104
 12543  0005AA  0100               	movlb	0	; () banked
 12544  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12545  0005AE  0EE4               	movlw	228
 12546  0005B0                     u9517:
 12547  0005B0  2EE8               	decfsz	wreg,f,c
 12548  0005B2  D7FE               	bra	u9517
 12549  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12550  0005B6  D7FC               	bra	u9517
 12551  0005B8  F000               	nop	
 12552  0005BA  0100               	movlb	0	; () banked
 12553  0005BC  2BB8               	incf	actuatorTest@i_1756& (0+255),f,b
 12554  0005BE  D7EF               	goto	l7906
 12555  0005C0                     l7914:
 12556                           
 12557                           ; BSR set to: 0
 12558  0005C0  0E00               	movlw	0
 12559  0005C2  0100               	movlb	0	; () banked
 12560  0005C4  6FB9               	movwf	actuatorTest@i_1757& (0+255),b
 12561  0005C6                     l7916:
 12562                           
 12563                           ; BSR set to: 0
 12564  0005C6  0E63               	movlw	99
 12565  0005C8  0100               	movlb	0	; () banked
 12566  0005CA  65B9               	cpfsgt	actuatorTest@i_1757& (0+255),b
 12567  0005CC  D001               	goto	l7920
 12568  0005CE  D00C               	goto	l1238
 12569  0005D0                     l7920:
 12570                           
 12571                           ; BSR set to: 0
 12572  0005D0  0E68               	movlw	104
 12573  0005D2  0100               	movlb	0	; () banked
 12574  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12575  0005D6  0EE4               	movlw	228
 12576  0005D8                     u9527:
 12577  0005D8  2EE8               	decfsz	wreg,f,c
 12578  0005DA  D7FE               	bra	u9527
 12579  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12580  0005DE  D7FC               	bra	u9527
 12581  0005E0  F000               	nop	
 12582  0005E2  0100               	movlb	0	; () banked
 12583  0005E4  2BB9               	incf	actuatorTest@i_1757& (0+255),f,b
 12584  0005E6  D7EF               	goto	l7916
 12585  0005E8                     l1238:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;Test.c: 301: TMR1ON = 0;
 12589  0005E8  90CD               	bcf	4045,0,c	;volatile
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;Test.c: 308: printf("TST: TILT SERVO");
 12593  0005EA  0E36               	movlw	low STR_104
 12594  0005EC  0100               	movlb	0	; () banked
 12595  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12596  0005F0  0EFE               	movlw	high STR_104
 12597  0005F2  0100               	movlb	0	; () banked
 12598  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12599  0005F6  EC02  F00B         	call	_printf	;wreg free
 12600                           
 12601                           ;Test.c: 309: lcdInst(0b11000000);;
 12602  0005FA  0EC0               	movlw	192
 12603  0005FC  EC5D  F029         	call	_lcdInst
 12604                           
 12605                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12606  000600  0EE4               	movlw	low STR_105
 12607  000602  0100               	movlb	0	; () banked
 12608  000604  6F8E               	movwf	printf@f& (0+255),b
 12609  000606  0EFB               	movlw	high STR_105
 12610  000608  0100               	movlb	0	; () banked
 12611  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12612  00060C  EC02  F00B         	call	_printf	;wreg free
 12613                           
 12614                           ;Test.c: 311: updateServoPosition(1050, 3);
 12615  000610  0E04               	movlw	4
 12616  000612  0100               	movlb	0	; () banked
 12617  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12618  000616  0E1A               	movlw	26
 12619  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12620  00061A  0E00               	movlw	0
 12621  00061C  0100               	movlb	0	; () banked
 12622  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12623  000620  0E03               	movlw	3
 12624  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12625  000624  ECAA  F022         	call	_updateServoPosition	;wreg free
 12626                           
 12627                           ;Test.c: 312: TMR3ON = 1;
 12628  000628  80B1               	bsf	4017,0,c	;volatile
 12629                           
 12630                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12631  00062A  0E00               	movlw	0
 12632  00062C  0100               	movlb	0	; () banked
 12633  00062E  6FBA               	movwf	actuatorTest@i_1760& (0+255),b
 12634  000630                     l7934:
 12635                           
 12636                           ; BSR set to: 0
 12637  000630  0E63               	movlw	99
 12638  000632  0100               	movlb	0	; () banked
 12639  000634  65BA               	cpfsgt	actuatorTest@i_1760& (0+255),b
 12640  000636  D001               	goto	l7938
 12641  000638  D00C               	goto	l7942
 12642  00063A                     l7938:
 12643                           
 12644                           ; BSR set to: 0
 12645  00063A  0E68               	movlw	104
 12646  00063C  0100               	movlb	0	; () banked
 12647  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12648  000640  0EE4               	movlw	228
 12649  000642                     u9537:
 12650  000642  2EE8               	decfsz	wreg,f,c
 12651  000644  D7FE               	bra	u9537
 12652  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12653  000648  D7FC               	bra	u9537
 12654  00064A  F000               	nop	
 12655  00064C  0100               	movlb	0	; () banked
 12656  00064E  2BBA               	incf	actuatorTest@i_1760& (0+255),f,b
 12657  000650  D7EF               	goto	l7934
 12658  000652                     l7942:
 12659                           
 12660                           ; BSR set to: 0
 12661  000652  0E00               	movlw	0
 12662  000654  0100               	movlb	0	; () banked
 12663  000656  6FBB               	movwf	actuatorTest@i_1761& (0+255),b
 12664  000658                     l7944:
 12665                           
 12666                           ; BSR set to: 0
 12667  000658  0E63               	movlw	99
 12668  00065A  0100               	movlb	0	; () banked
 12669  00065C  65BB               	cpfsgt	actuatorTest@i_1761& (0+255),b
 12670  00065E  D001               	goto	l7948
 12671  000660  D00C               	goto	l7952
 12672  000662                     l7948:
 12673                           
 12674                           ; BSR set to: 0
 12675  000662  0E68               	movlw	104
 12676  000664  0100               	movlb	0	; () banked
 12677  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12678  000668  0EE4               	movlw	228
 12679  00066A                     u9547:
 12680  00066A  2EE8               	decfsz	wreg,f,c
 12681  00066C  D7FE               	bra	u9547
 12682  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12683  000670  D7FC               	bra	u9547
 12684  000672  F000               	nop	
 12685  000674  0100               	movlb	0	; () banked
 12686  000676  2BBB               	incf	actuatorTest@i_1761& (0+255),f,b
 12687  000678  D7EF               	goto	l7944
 12688  00067A                     l7952:
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12692  00067A  0E80               	movlw	128
 12693  00067C  EC5D  F029         	call	_lcdInst
 12694  000680  0EC0               	movlw	192
 12695  000682  EC5D  F029         	call	_lcdInst
 12696                           
 12697                           ;Test.c: 316: printf("DROP -- 2s      ");
 12698  000686  0EC2               	movlw	low STR_106
 12699  000688  0100               	movlb	0	; () banked
 12700  00068A  6F8E               	movwf	printf@f& (0+255),b
 12701  00068C  0EFB               	movlw	high STR_106
 12702  00068E  0100               	movlb	0	; () banked
 12703  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12704  000692  EC02  F00B         	call	_printf	;wreg free
 12705                           
 12706                           ;Test.c: 317: updateServoPosition(1260, 3);
 12707  000696  0E04               	movlw	4
 12708  000698  0100               	movlb	0	; () banked
 12709  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12710  00069C  0EEC               	movlw	236
 12711  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12712  0006A0  0E00               	movlw	0
 12713  0006A2  0100               	movlb	0	; () banked
 12714  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12715  0006A6  0E03               	movlw	3
 12716  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12717  0006AA  ECAA  F022         	call	_updateServoPosition	;wreg free
 12718                           
 12719                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12720  0006AE  0E00               	movlw	0
 12721  0006B0  0100               	movlb	0	; () banked
 12722  0006B2  6FBC               	movwf	actuatorTest@i_1763& (0+255),b
 12723  0006B4                     l7960:
 12724                           
 12725                           ; BSR set to: 0
 12726  0006B4  0E63               	movlw	99
 12727  0006B6  0100               	movlb	0	; () banked
 12728  0006B8  65BC               	cpfsgt	actuatorTest@i_1763& (0+255),b
 12729  0006BA  D001               	goto	l7964
 12730  0006BC  D00C               	goto	l7968
 12731  0006BE                     l7964:
 12732                           
 12733                           ; BSR set to: 0
 12734  0006BE  0E68               	movlw	104
 12735  0006C0  0100               	movlb	0	; () banked
 12736  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12737  0006C4  0EE4               	movlw	228
 12738  0006C6                     u9557:
 12739  0006C6  2EE8               	decfsz	wreg,f,c
 12740  0006C8  D7FE               	bra	u9557
 12741  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12742  0006CC  D7FC               	bra	u9557
 12743  0006CE  F000               	nop	
 12744  0006D0  0100               	movlb	0	; () banked
 12745  0006D2  2BBC               	incf	actuatorTest@i_1763& (0+255),f,b
 12746  0006D4  D7EF               	goto	l7960
 12747  0006D6                     l7968:
 12748                           
 12749                           ; BSR set to: 0
 12750  0006D6  0E00               	movlw	0
 12751  0006D8  0100               	movlb	0	; () banked
 12752  0006DA  6FBD               	movwf	actuatorTest@i_1764& (0+255),b
 12753  0006DC                     l7970:
 12754                           
 12755                           ; BSR set to: 0
 12756  0006DC  0E63               	movlw	99
 12757  0006DE  0100               	movlb	0	; () banked
 12758  0006E0  65BD               	cpfsgt	actuatorTest@i_1764& (0+255),b
 12759  0006E2  D001               	goto	l7974
 12760  0006E4  D00C               	goto	l7978
 12761  0006E6                     l7974:
 12762                           
 12763                           ; BSR set to: 0
 12764  0006E6  0E68               	movlw	104
 12765  0006E8  0100               	movlb	0	; () banked
 12766  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12767  0006EC  0EE4               	movlw	228
 12768  0006EE                     u9567:
 12769  0006EE  2EE8               	decfsz	wreg,f,c
 12770  0006F0  D7FE               	bra	u9567
 12771  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12772  0006F4  D7FC               	bra	u9567
 12773  0006F6  F000               	nop	
 12774  0006F8  0100               	movlb	0	; () banked
 12775  0006FA  2BBD               	incf	actuatorTest@i_1764& (0+255),f,b
 12776  0006FC  D7EF               	goto	l7970
 12777  0006FE                     l7978:
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12781  0006FE  0E80               	movlw	128
 12782  000700  EC5D  F029         	call	_lcdInst
 12783  000704  0EC0               	movlw	192
 12784  000706  EC5D  F029         	call	_lcdInst
 12785                           
 12786                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12787  00070A  0EE4               	movlw	low STR_105
 12788  00070C  0100               	movlb	0	; () banked
 12789  00070E  6F8E               	movwf	printf@f& (0+255),b
 12790  000710  0EFB               	movlw	high STR_105
 12791  000712  0100               	movlb	0	; () banked
 12792  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12793  000716  EC02  F00B         	call	_printf	;wreg free
 12794                           
 12795                           ;Test.c: 322: updateServoPosition(1050, 3);
 12796  00071A  0E04               	movlw	4
 12797  00071C  0100               	movlb	0	; () banked
 12798  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12799  000720  0E1A               	movlw	26
 12800  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12801  000724  0E00               	movlw	0
 12802  000726  0100               	movlb	0	; () banked
 12803  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12804  00072A  0E03               	movlw	3
 12805  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12806  00072E  ECAA  F022         	call	_updateServoPosition	;wreg free
 12807                           
 12808                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12809  000732  0E00               	movlw	0
 12810  000734  0100               	movlb	0	; () banked
 12811  000736  6FBE               	movwf	actuatorTest@i_1766& (0+255),b
 12812  000738                     l7986:
 12813                           
 12814                           ; BSR set to: 0
 12815  000738  0E63               	movlw	99
 12816  00073A  0100               	movlb	0	; () banked
 12817  00073C  65BE               	cpfsgt	actuatorTest@i_1766& (0+255),b
 12818  00073E  D001               	goto	l7990
 12819  000740  D00C               	goto	l7994
 12820  000742                     l7990:
 12821                           
 12822                           ; BSR set to: 0
 12823  000742  0E68               	movlw	104
 12824  000744  0100               	movlb	0	; () banked
 12825  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12826  000748  0EE4               	movlw	228
 12827  00074A                     u9577:
 12828  00074A  2EE8               	decfsz	wreg,f,c
 12829  00074C  D7FE               	bra	u9577
 12830  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12831  000750  D7FC               	bra	u9577
 12832  000752  F000               	nop	
 12833  000754  0100               	movlb	0	; () banked
 12834  000756  2BBE               	incf	actuatorTest@i_1766& (0+255),f,b
 12835  000758  D7EF               	goto	l7986
 12836  00075A                     l7994:
 12837                           
 12838                           ; BSR set to: 0
 12839  00075A  0E00               	movlw	0
 12840  00075C  0100               	movlb	0	; () banked
 12841  00075E  6FBF               	movwf	actuatorTest@i_1767& (0+255),b
 12842  000760                     l7996:
 12843                           
 12844                           ; BSR set to: 0
 12845  000760  0E63               	movlw	99
 12846  000762  0100               	movlb	0	; () banked
 12847  000764  65BF               	cpfsgt	actuatorTest@i_1767& (0+255),b
 12848  000766  D001               	goto	l8000
 12849  000768  D00C               	goto	l1250
 12850  00076A                     l8000:
 12851                           
 12852                           ; BSR set to: 0
 12853  00076A  0E68               	movlw	104
 12854  00076C  0100               	movlb	0	; () banked
 12855  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12856  000770  0EE4               	movlw	228
 12857  000772                     u9587:
 12858  000772  2EE8               	decfsz	wreg,f,c
 12859  000774  D7FE               	bra	u9587
 12860  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12861  000778  D7FC               	bra	u9587
 12862  00077A  F000               	nop	
 12863  00077C  0100               	movlb	0	; () banked
 12864  00077E  2BBF               	incf	actuatorTest@i_1767& (0+255),f,b
 12865  000780  D7EF               	goto	l7996
 12866  000782                     l1250:
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;Test.c: 324: TMR3ON = 0;
 12870  000782  90B1               	bcf	4017,0,c	;volatile
 12871                           
 12872                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12873  000784  9EF2               	bcf	intcon,7,c	;volatile
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12877  000786  0E01               	movlw	1
 12878  000788  EC5D  F029         	call	_lcdInst
 12879  00078C  0E68               	movlw	104
 12880  00078E  0100               	movlb	0	; () banked
 12881  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12882  000792  0EE4               	movlw	228
 12883  000794                     u9597:
 12884  000794  2EE8               	decfsz	wreg,f,c
 12885  000796  D7FE               	bra	u9597
 12886  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12887  00079A  D7FC               	bra	u9597
 12888  00079C  F000               	nop	
 12889  00079E  0E80               	movlw	128
 12890  0007A0  EC5D  F029         	call	_lcdInst
 12891                           
 12892                           ;Test.c: 331: printf("TST: CAM SERVO");
 12893  0007A4  0E92               	movlw	low STR_108
 12894  0007A6  0100               	movlb	0	; () banked
 12895  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12896  0007AA  0EFE               	movlw	high STR_108
 12897  0007AC  0100               	movlb	0	; () banked
 12898  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12899  0007B0  EC02  F00B         	call	_printf	;wreg free
 12900                           
 12901                           ;Test.c: 332: lcdInst(0b11000000);;
 12902  0007B4  0EC0               	movlw	192
 12903  0007B6  EC5D  F029         	call	_lcdInst
 12904                           
 12905                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12906  0007BA  0E74               	movlw	low STR_109
 12907  0007BC  0100               	movlb	0	; () banked
 12908  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12909  0007C0  0EFE               	movlw	high STR_109
 12910  0007C2  0100               	movlb	0	; () banked
 12911  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12912  0007C6  EC02  F00B         	call	_printf	;wreg free
 12913                           
 12914                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12915  0007CA  808B               	bsf	3979,0,c	;volatile
 12916                           
 12917                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12918  0007CC  0E00               	movlw	0
 12919  0007CE  0100               	movlb	0	; () banked
 12920  0007D0  6FC0               	movwf	actuatorTest@i_1770& (0+255),b
 12921  0007D2                     l8020:
 12922                           
 12923                           ; BSR set to: 0
 12924  0007D2  0E63               	movlw	99
 12925  0007D4  0100               	movlb	0	; () banked
 12926  0007D6  65C0               	cpfsgt	actuatorTest@i_1770& (0+255),b
 12927  0007D8  D001               	goto	l8024
 12928  0007DA  D00C               	goto	l8028
 12929  0007DC                     l8024:
 12930                           
 12931                           ; BSR set to: 0
 12932  0007DC  0E68               	movlw	104
 12933  0007DE  0100               	movlb	0	; () banked
 12934  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12935  0007E2  0EE4               	movlw	228
 12936  0007E4                     u9607:
 12937  0007E4  2EE8               	decfsz	wreg,f,c
 12938  0007E6  D7FE               	bra	u9607
 12939  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12940  0007EA  D7FC               	bra	u9607
 12941  0007EC  F000               	nop	
 12942  0007EE  0100               	movlb	0	; () banked
 12943  0007F0  2BC0               	incf	actuatorTest@i_1770& (0+255),f,b
 12944  0007F2  D7EF               	goto	l8020
 12945  0007F4                     l8028:
 12946                           
 12947                           ; BSR set to: 0
 12948  0007F4  0E00               	movlw	0
 12949  0007F6  0100               	movlb	0	; () banked
 12950  0007F8  6FC1               	movwf	actuatorTest@i_1771& (0+255),b
 12951  0007FA                     l8030:
 12952                           
 12953                           ; BSR set to: 0
 12954  0007FA  0E63               	movlw	99
 12955  0007FC  0100               	movlb	0	; () banked
 12956  0007FE  65C1               	cpfsgt	actuatorTest@i_1771& (0+255),b
 12957  000800  D001               	goto	l8034
 12958  000802  D00C               	goto	l8038
 12959  000804                     l8034:
 12960                           
 12961                           ; BSR set to: 0
 12962  000804  0E68               	movlw	104
 12963  000806  0100               	movlb	0	; () banked
 12964  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12965  00080A  0EE4               	movlw	228
 12966  00080C                     u9617:
 12967  00080C  2EE8               	decfsz	wreg,f,c
 12968  00080E  D7FE               	bra	u9617
 12969  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12970  000812  D7FC               	bra	u9617
 12971  000814  F000               	nop	
 12972  000816  0100               	movlb	0	; () banked
 12973  000818  2BC1               	incf	actuatorTest@i_1771& (0+255),f,b
 12974  00081A  D7EF               	goto	l8030
 12975  00081C                     l8038:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12979  00081C  0E80               	movlw	128
 12980  00081E  EC5D  F029         	call	_lcdInst
 12981  000822  0EC0               	movlw	192
 12982  000824  EC5D  F029         	call	_lcdInst
 12983                           
 12984                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12985  000828  0E65               	movlw	low STR_110
 12986  00082A  0100               	movlb	0	; () banked
 12987  00082C  6F8E               	movwf	printf@f& (0+255),b
 12988  00082E  0EFE               	movlw	high STR_110
 12989  000830  0100               	movlb	0	; () banked
 12990  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12991  000834  EC02  F00B         	call	_printf	;wreg free
 12992                           
 12993                           ;Test.c: 340: for(i=0;i<10000;i++)
 12994  000838  0E00               	movlw	0
 12995  00083A  0100               	movlb	0	; () banked
 12996  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12997  00083E  0E00               	movlw	0
 12998  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12999  000842                     l8044:
 13000                           
 13001                           ; BSR set to: 0
 13002  000842  0100               	movlb	0	; () banked
 13003  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13004  000846  D008               	goto	l1255
 13005  000848  0E10               	movlw	16
 13006  00084A  0100               	movlb	0	; () banked
 13007  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13008  00084E  0E27               	movlw	39
 13009  000850  0100               	movlb	0	; () banked
 13010  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 13011  000854  B0D8               	btfsc	status,0,c
 13012  000856  D00D               	goto	l8054
 13013  000858                     l1255:
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;Test.c: 341: {
 13017                           ;Test.c: 342: LATCbits.LATC0 = 1;
 13018  000858  808B               	bsf	3979,0,c	;volatile
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 13022  00085A  0E1A               	movlw	26
 13023  00085C                     u9627:
 13024  00085C  2EE8               	decfsz	wreg,f,c
 13025  00085E  D7FE               	bra	u9627
 13026  000860  D000               	nop2	
 13027                           
 13028                           ;Test.c: 344: LATCbits.LATC0 = 0;
 13029  000862  908B               	bcf	3979,0,c	;volatile
 13030                           
 13031                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 13032  000864  0EF0               	movlw	240
 13033  000866                     u9637:
 13034  000866  2EE8               	decfsz	wreg,f,c
 13035  000868  D7FE               	bra	u9637
 13036  00086A  0100               	movlb	0	; () banked
 13037  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13038  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13039  000870  D7E8               	goto	l8044
 13040  000872                     l8054:
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;Test.c: 346: }
 13044                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13045  000872  0E00               	movlw	0
 13046  000874  0100               	movlb	0	; () banked
 13047  000876  6FC2               	movwf	actuatorTest@i_1773& (0+255),b
 13048  000878                     l8056:
 13049                           
 13050                           ; BSR set to: 0
 13051  000878  0E63               	movlw	99
 13052  00087A  0100               	movlb	0	; () banked
 13053  00087C  65C2               	cpfsgt	actuatorTest@i_1773& (0+255),b
 13054  00087E  D001               	goto	l8060
 13055  000880  D00C               	goto	l8064
 13056  000882                     l8060:
 13057                           
 13058                           ; BSR set to: 0
 13059  000882  0E68               	movlw	104
 13060  000884  0100               	movlb	0	; () banked
 13061  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 13062  000888  0EE4               	movlw	228
 13063  00088A                     u9647:
 13064  00088A  2EE8               	decfsz	wreg,f,c
 13065  00088C  D7FE               	bra	u9647
 13066  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13067  000890  D7FC               	bra	u9647
 13068  000892  F000               	nop	
 13069  000894  0100               	movlb	0	; () banked
 13070  000896  2BC2               	incf	actuatorTest@i_1773& (0+255),f,b
 13071  000898  D7EF               	goto	l8056
 13072  00089A                     l8064:
 13073                           
 13074                           ; BSR set to: 0
 13075  00089A  0E00               	movlw	0
 13076  00089C  0100               	movlb	0	; () banked
 13077  00089E  6FC3               	movwf	actuatorTest@i_1774& (0+255),b
 13078  0008A0                     l8066:
 13079                           
 13080                           ; BSR set to: 0
 13081  0008A0  0E63               	movlw	99
 13082  0008A2  0100               	movlb	0	; () banked
 13083  0008A4  65C3               	cpfsgt	actuatorTest@i_1774& (0+255),b
 13084  0008A6  D001               	goto	l8070
 13085  0008A8  D00C               	goto	l8074
 13086  0008AA                     l8070:
 13087                           
 13088                           ; BSR set to: 0
 13089  0008AA  0E68               	movlw	104
 13090  0008AC  0100               	movlb	0	; () banked
 13091  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13092  0008B0  0EE4               	movlw	228
 13093  0008B2                     u9657:
 13094  0008B2  2EE8               	decfsz	wreg,f,c
 13095  0008B4  D7FE               	bra	u9657
 13096  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13097  0008B8  D7FC               	bra	u9657
 13098  0008BA  F000               	nop	
 13099  0008BC  0100               	movlb	0	; () banked
 13100  0008BE  2BC3               	incf	actuatorTest@i_1774& (0+255),f,b
 13101  0008C0  D7EF               	goto	l8066
 13102  0008C2                     l8074:
 13103                           
 13104                           ; BSR set to: 0
 13105                           ;Test.c: 349: machine_state = Testing_state;
 13106  0008C2  0E03               	movlw	3
 13107  0008C4  0100               	movlb	0	; () banked
 13108  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 13109                           
 13110                           ; BSR set to: 0
 13111  0008C8  0012               	return		;funcret
 13112  0008CA                     __end_of_actuatorTest:
 13113                           	opt stack 0
 13114                           tblptru	equ	0xFF8
 13115                           tblptrh	equ	0xFF7
 13116                           tblptrl	equ	0xFF6
 13117                           tablat	equ	0xFF5
 13118                           prodh	equ	0xFF4
 13119                           prodl	equ	0xFF3
 13120                           intcon	equ	0xFF2
 13121                           intcon2	equ	0xFF1
 13122                           intcon3	equ	0xFF0
 13123                           postinc0	equ	0xFEE
 13124                           wreg	equ	0xFE8
 13125                           postdec1	equ	0xFE5
 13126                           fsr1l	equ	0xFE1
 13127                           indf2	equ	0xFDF
 13128                           postinc2	equ	0xFDE
 13129                           postdec2	equ	0xFDD
 13130                           fsr2h	equ	0xFDA
 13131                           fsr2l	equ	0xFD9
 13132                           status	equ	0xFD8
 13133                           
 13134 ;; *************** function _SpeedTest *****************
 13135 ;; Defined at:
 13136 ;;		line 549 in file "Test.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;		None
 13139 ;; Auto vars:     Size  Location     Type
 13140 ;;		None
 13141 ;; Return value:  Size  Location     Type
 13142 ;;                  1    wreg      void 
 13143 ;; Registers used:
 13144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13145 ;; Tracked objects:
 13146 ;;		On entry : 0/0
 13147 ;;		On exit  : 0/0
 13148 ;;		Unchanged: 0/0
 13149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13154 ;;Total ram usage:        1 bytes
 13155 ;; Hardware stack levels used:    1
 13156 ;; Hardware stack levels required when called:   10
 13157 ;; This function calls:
 13158 ;;		_lcdInst
 13159 ;;		_printf
 13160 ;; This function is called by:
 13161 ;;		_Test
 13162 ;; This function uses a non-reentrant model
 13163 ;;
 13164                           
 13165                           	psect	text41
 13166  0045DA                     __ptext41:
 13167                           	opt stack 0
 13168  0045DA                     _SpeedTest:
 13169                           	opt stack 19
 13170                           
 13171                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;incstack = 0
 13175  0045DA  0E01               	movlw	1
 13176  0045DC  EC5D  F029         	call	_lcdInst
 13177  0045E0  0E68               	movlw	104
 13178  0045E2  0100               	movlb	0	; () banked
 13179  0045E4  6FAB               	movwf	??_SpeedTest& (0+255),b
 13180  0045E6  0EE4               	movlw	228
 13181  0045E8                     u9667:
 13182  0045E8  2EE8               	decfsz	wreg,f,c
 13183  0045EA  D7FE               	bra	u9667
 13184  0045EC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13185  0045EE  D7FC               	bra	u9667
 13186  0045F0  F000               	nop	
 13187  0045F2  0E80               	movlw	128
 13188  0045F4  EC5D  F029         	call	_lcdInst
 13189                           
 13190                           ;Test.c: 552: printf("S: D WILL RETURN ");
 13191  0045F8  0E57               	movlw	low STR_121
 13192  0045FA  0100               	movlb	0	; () banked
 13193  0045FC  6F8E               	movwf	printf@f& (0+255),b
 13194  0045FE  0EFB               	movlw	high STR_121
 13195  004600  0100               	movlb	0	; () banked
 13196  004602  6F8F               	movwf	(printf@f+1)& (0+255),b
 13197  004604  EC02  F00B         	call	_printf	;wreg free
 13198                           
 13199                           ;Test.c: 553: lcdInst(0b11000000);;
 13200  004608  0EC0               	movlw	192
 13201  00460A  EC5D  F029         	call	_lcdInst
 13202                           
 13203                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 13204  00460E  0E45               	movlw	low STR_113
 13205  004610  0100               	movlb	0	; () banked
 13206  004612  6F8E               	movwf	printf@f& (0+255),b
 13207  004614  0EFB               	movlw	high STR_113
 13208  004616  0100               	movlb	0	; () banked
 13209  004618  6F8F               	movwf	(printf@f+1)& (0+255),b
 13210  00461A  EC02  F00B         	call	_printf	;wreg free
 13211  00461E                     l1341:
 13212  00461E  A281               	btfss	3969,1,c	;volatile
 13213  004620  D7FE               	goto	l1341
 13214                           
 13215                           ;Test.c: 559: }
 13216                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13217  004622  3881               	swapf	3969,w,c	;volatile
 13218  004624  0B0F               	andlw	15
 13219  004626  0A0F               	xorlw	15
 13220  004628  B4D8               	btfsc	status,2,c
 13221  00462A  0012               	return	
 13222  00462C  D014               	goto	l8116
 13223  00462E                     l1348:
 13224                           
 13225                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13226  00462E  8A89               	bsf	3977,5,c	;volatile
 13227                           
 13228                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13229  004630  0E34               	movlw	52
 13230  004632  0100               	movlb	0	; () banked
 13231  004634  6FAB               	movwf	??_SpeedTest& (0+255),b
 13232  004636  0EF1               	movlw	241
 13233  004638                     u9677:
 13234  004638  2EE8               	decfsz	wreg,f,c
 13235  00463A  D7FE               	bra	u9677
 13236  00463C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13237  00463E  D7FC               	bra	u9677
 13238  004640  D000               	nop2	
 13239                           
 13240                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13241  004642  9A89               	bcf	3977,5,c	;volatile
 13242                           
 13243                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13244  004644  0E34               	movlw	52
 13245  004646  0100               	movlb	0	; () banked
 13246  004648  6FAB               	movwf	??_SpeedTest& (0+255),b
 13247  00464A  0EF1               	movlw	241
 13248  00464C                     u9687:
 13249  00464C  2EE8               	decfsz	wreg,f,c
 13250  00464E  D7FE               	bra	u9687
 13251  004650  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13252  004652  D7FC               	bra	u9687
 13253  004654  D000               	nop2	
 13254  004656                     l8116:
 13255  004656  B281               	btfsc	3969,1,c	;volatile
 13256  004658  D7EA               	goto	l1348
 13257                           
 13258                           ;Test.c: 571: }
 13259                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13260  00465A  9A89               	bcf	3977,5,c	;volatile
 13261  00465C  D7E0               	goto	l1341
 13262  00465E                     __end_of_SpeedTest:
 13263                           	opt stack 0
 13264                           tblptru	equ	0xFF8
 13265                           tblptrh	equ	0xFF7
 13266                           tblptrl	equ	0xFF6
 13267                           tablat	equ	0xFF5
 13268                           prodh	equ	0xFF4
 13269                           prodl	equ	0xFF3
 13270                           intcon	equ	0xFF2
 13271                           intcon2	equ	0xFF1
 13272                           intcon3	equ	0xFF0
 13273                           postinc0	equ	0xFEE
 13274                           wreg	equ	0xFE8
 13275                           postdec1	equ	0xFE5
 13276                           fsr1l	equ	0xFE1
 13277                           indf2	equ	0xFDF
 13278                           postinc2	equ	0xFDE
 13279                           postdec2	equ	0xFDD
 13280                           fsr2h	equ	0xFDA
 13281                           fsr2l	equ	0xFD9
 13282                           status	equ	0xFD8
 13283                           
 13284 ;; *************** function _PusherTest *****************
 13285 ;; Defined at:
 13286 ;;		line 467 in file "Test.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;		None
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;  i               2   51[BANK0 ] int 
 13291 ;;  i               2   49[BANK0 ] int 
 13292 ;;  res             2   47[BANK0 ] int 
 13293 ;;  res             2   45[BANK0 ] int 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;                  1    wreg      void 
 13296 ;; Registers used:
 13297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13307 ;;Total ram usage:       10 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:   10
 13310 ;; This function calls:
 13311 ;;		_lcdInst
 13312 ;;		_printf
 13313 ;;		_readADC
 13314 ;; This function is called by:
 13315 ;;		_Test
 13316 ;; This function uses a non-reentrant model
 13317 ;;
 13318                           
 13319                           	psect	text42
 13320  002C5E                     __ptext42:
 13321                           	opt stack 0
 13322  002C5E                     _PusherTest:
 13323                           	opt stack 19
 13324                           
 13325                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13326                           
 13327                           ;incstack = 0
 13328  002C5E  0E01               	movlw	1
 13329  002C60  EC5D  F029         	call	_lcdInst
 13330  002C64  0E68               	movlw	104
 13331  002C66  0100               	movlb	0	; () banked
 13332  002C68  6FAB               	movwf	??_PusherTest& (0+255),b
 13333  002C6A  0EE4               	movlw	228
 13334  002C6C                     u9697:
 13335  002C6C  2EE8               	decfsz	wreg,f,c
 13336  002C6E  D7FE               	bra	u9697
 13337  002C70  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13338  002C72  D7FC               	bra	u9697
 13339  002C74  F000               	nop	
 13340  002C76  0E80               	movlw	128
 13341  002C78  EC5D  F029         	call	_lcdInst
 13342                           
 13343                           ;Test.c: 469: printf("PUSHER TST");
 13344  002C7C  0E6D               	movlw	low STR_114
 13345  002C7E  0100               	movlb	0	; () banked
 13346  002C80  6F8E               	movwf	printf@f& (0+255),b
 13347  002C82  0EFF               	movlw	high STR_114
 13348  002C84  0100               	movlb	0	; () banked
 13349  002C86  6F8F               	movwf	(printf@f+1)& (0+255),b
 13350  002C88  EC02  F00B         	call	_printf	;wreg free
 13351                           
 13352                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13353  002C8C  8A8B               	bsf	3979,5,c	;volatile
 13354                           
 13355                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13356  002C8E  D05C               	goto	l8146
 13357  002C90                     l8128:
 13358                           
 13359                           ;Test.c: 473: readADC(0);
 13360  002C90  0E00               	movlw	0
 13361  002C92  EC54  F028         	call	_readADC
 13362                           
 13363                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13364  002C96  50C3               	movf	4035,w,c	;volatile
 13365  002C98  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13366  002C9C  0100               	movlb	0	; () banked
 13367  002C9E  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13368  002CA0  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13369  002CA4  0100               	movlb	0	; () banked
 13370  002CA6  6BAB               	clrf	??_PusherTest& (0+255),b
 13371  002CA8  0100               	movlb	0	; () banked
 13372  002CAA  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13373  002CAC  0100               	movlb	0	; () banked
 13374  002CAE  6FAD               	movwf	PusherTest@res& (0+255),b
 13375  002CB0  0100               	movlb	0	; () banked
 13376  002CB2  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13377  002CB4  0100               	movlb	0	; () banked
 13378  002CB6  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13382  002CB8  0100               	movlb	0	; () banked
 13383  002CBA  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13384  002CBC  D00A               	goto	u6770
 13385  002CBE  0E21               	movlw	33
 13386  002CC0  0100               	movlb	0	; () banked
 13387  002CC2  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13388  002CC4  0E03               	movlw	3
 13389  002CC6  0100               	movlb	0	; () banked
 13390  002CC8  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13391  002CCA  A0D8               	btfss	status,0,c
 13392  002CCC  D002               	goto	u6770
 13393  002CCE  0E01               	movlw	1
 13394  002CD0  D001               	goto	u6780
 13395  002CD2                     u6770:
 13396  002CD2  0E00               	movlw	0
 13397  002CD4                     u6780:
 13398  002CD4  0100               	movlb	0	; () banked
 13399  002CD6  6FE6               	movwf	_IR_signal& (0+255),b
 13400  002CD8  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13401                           
 13402                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13403  002CDA  0E01               	movlw	1
 13404  002CDC  EC5D  F029         	call	_lcdInst
 13405  002CE0  0E68               	movlw	104
 13406  002CE2  0100               	movlb	0	; () banked
 13407  002CE4  6FAB               	movwf	??_PusherTest& (0+255),b
 13408  002CE6  0EE4               	movlw	228
 13409  002CE8                     u9707:
 13410  002CE8  2EE8               	decfsz	wreg,f,c
 13411  002CEA  D7FE               	bra	u9707
 13412  002CEC  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13413  002CEE  D7FC               	bra	u9707
 13414  002CF0  F000               	nop	
 13415  002CF2  0E80               	movlw	128
 13416  002CF4  EC5D  F029         	call	_lcdInst
 13417                           
 13418                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13419  002CF8  0E56               	movlw	low STR_81
 13420  002CFA  0100               	movlb	0	; () banked
 13421  002CFC  6F8E               	movwf	printf@f& (0+255),b
 13422  002CFE  0EFE               	movlw	high STR_81
 13423  002D00  0100               	movlb	0	; () banked
 13424  002D02  6F8F               	movwf	(printf@f+1)& (0+255),b
 13425  002D04  C0E6  F090         	movff	_IR_signal,?_printf+2
 13426  002D08  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13427  002D0C  EC02  F00B         	call	_printf	;wreg free
 13428                           
 13429                           ;Test.c: 479: lcdInst(0b11000000);;
 13430  002D10  0EC0               	movlw	192
 13431  002D12  EC5D  F029         	call	_lcdInst
 13432                           
 13433                           ;Test.c: 480: printf("%d", res);
 13434  002D16  0E12               	movlw	low (STR_27+14)
 13435  002D18  0100               	movlb	0	; () banked
 13436  002D1A  6F8E               	movwf	printf@f& (0+255),b
 13437  002D1C  0EFE               	movlw	high (STR_27+14)
 13438  002D1E  0100               	movlb	0	; () banked
 13439  002D20  6F8F               	movwf	(printf@f+1)& (0+255),b
 13440  002D22  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13441  002D26  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13442  002D2A  EC02  F00B         	call	_printf	;wreg free
 13443                           
 13444                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13445  002D2E  0E05               	movlw	5
 13446  002D30  0100               	movlb	0	; () banked
 13447  002D32  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13448  002D34  0E0F               	movlw	15
 13449  002D36  0100               	movlb	0	; () banked
 13450  002D38  6FAB               	movwf	??_PusherTest& (0+255),b
 13451  002D3A  0EF1               	movlw	241
 13452  002D3C                     u9717:
 13453  002D3C  2EE8               	decfsz	wreg,f,c
 13454  002D3E  D7FE               	bra	u9717
 13455  002D40  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13456  002D42  D7FC               	bra	u9717
 13457  002D44  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13458  002D46  D7FA               	bra	u9717
 13459  002D48                     l8146:
 13460  002D48  B281               	btfsc	3969,1,c	;volatile
 13461  002D4A  D05D               	goto	l8166
 13462  002D4C  D7A1               	goto	l8128
 13463  002D4E                     l8148:
 13464                           
 13465                           ;Test.c: 487: readADC(0);
 13466  002D4E  0E00               	movlw	0
 13467  002D50  EC54  F028         	call	_readADC
 13468                           
 13469                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13470  002D54  50C3               	movf	4035,w,c	;volatile
 13471  002D56  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13472  002D5A  0100               	movlb	0	; () banked
 13473  002D5C  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13474  002D5E  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13475  002D62  0100               	movlb	0	; () banked
 13476  002D64  6BAB               	clrf	??_PusherTest& (0+255),b
 13477  002D66  0100               	movlb	0	; () banked
 13478  002D68  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13479  002D6A  0100               	movlb	0	; () banked
 13480  002D6C  6FAF               	movwf	PusherTest@res_1789& (0+255),b
 13481  002D6E  0100               	movlb	0	; () banked
 13482  002D70  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13483  002D72  0100               	movlb	0	; () banked
 13484  002D74  6FB0               	movwf	(PusherTest@res_1789+1)& (0+255),b
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13488  002D76  0100               	movlb	0	; () banked
 13489  002D78  BFB0               	btfsc	(PusherTest@res_1789+1)& (0+255),7,b
 13490  002D7A  D00A               	goto	u6800
 13491  002D7C  0E21               	movlw	33
 13492  002D7E  0100               	movlb	0	; () banked
 13493  002D80  5DAF               	subwf	PusherTest@res_1789& (0+255),w,b
 13494  002D82  0E03               	movlw	3
 13495  002D84  0100               	movlb	0	; () banked
 13496  002D86  59B0               	subwfb	(PusherTest@res_1789+1)& (0+255),w,b
 13497  002D88  A0D8               	btfss	status,0,c
 13498  002D8A  D002               	goto	u6800
 13499  002D8C  0E01               	movlw	1
 13500  002D8E  D001               	goto	u6810
 13501  002D90                     u6800:
 13502  002D90  0E00               	movlw	0
 13503  002D92                     u6810:
 13504  002D92  0100               	movlb	0	; () banked
 13505  002D94  6FE6               	movwf	_IR_signal& (0+255),b
 13506  002D96  6BE7               	clrf	(_IR_signal+1)& (0+255),b
 13507                           
 13508                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13509  002D98  0E01               	movlw	1
 13510  002D9A  EC5D  F029         	call	_lcdInst
 13511  002D9E  0E68               	movlw	104
 13512  002DA0  0100               	movlb	0	; () banked
 13513  002DA2  6FAB               	movwf	??_PusherTest& (0+255),b
 13514  002DA4  0EE4               	movlw	228
 13515  002DA6                     u9727:
 13516  002DA6  2EE8               	decfsz	wreg,f,c
 13517  002DA8  D7FE               	bra	u9727
 13518  002DAA  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13519  002DAC  D7FC               	bra	u9727
 13520  002DAE  F000               	nop	
 13521  002DB0  0E80               	movlw	128
 13522  002DB2  EC5D  F029         	call	_lcdInst
 13523                           
 13524                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13525  002DB6  0E56               	movlw	low STR_81
 13526  002DB8  0100               	movlb	0	; () banked
 13527  002DBA  6F8E               	movwf	printf@f& (0+255),b
 13528  002DBC  0EFE               	movlw	high STR_81
 13529  002DBE  0100               	movlb	0	; () banked
 13530  002DC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13531  002DC2  C0E6  F090         	movff	_IR_signal,?_printf+2
 13532  002DC6  C0E7  F091         	movff	_IR_signal+1,?_printf+3
 13533  002DCA  EC02  F00B         	call	_printf	;wreg free
 13534                           
 13535                           ;Test.c: 492: lcdInst(0b11000000);;
 13536  002DCE  0EC0               	movlw	192
 13537  002DD0  EC5D  F029         	call	_lcdInst
 13538                           
 13539                           ;Test.c: 493: printf("%d", res);
 13540  002DD4  0E12               	movlw	low (STR_27+14)
 13541  002DD6  0100               	movlb	0	; () banked
 13542  002DD8  6F8E               	movwf	printf@f& (0+255),b
 13543  002DDA  0EFE               	movlw	high (STR_27+14)
 13544  002DDC  0100               	movlb	0	; () banked
 13545  002DDE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13546  002DE0  C0AF  F090         	movff	PusherTest@res_1789,?_printf+2
 13547  002DE4  C0B0  F091         	movff	PusherTest@res_1789+1,?_printf+3
 13548  002DE8  EC02  F00B         	call	_printf	;wreg free
 13549                           
 13550                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13551  002DEC  0E05               	movlw	5
 13552  002DEE  0100               	movlb	0	; () banked
 13553  002DF0  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13554  002DF2  0E0F               	movlw	15
 13555  002DF4  0100               	movlb	0	; () banked
 13556  002DF6  6FAB               	movwf	??_PusherTest& (0+255),b
 13557  002DF8  0EF1               	movlw	241
 13558  002DFA                     u9737:
 13559  002DFA  2EE8               	decfsz	wreg,f,c
 13560  002DFC  D7FE               	bra	u9737
 13561  002DFE  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13562  002E00  D7FC               	bra	u9737
 13563  002E02  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13564  002E04  D7FA               	bra	u9737
 13565  002E06                     l8166:
 13566  002E06  A281               	btfss	3969,1,c	;volatile
 13567  002E08  D7A2               	goto	l8148
 13568                           
 13569                           ;Test.c: 495: }
 13570                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13571  002E0A  3881               	swapf	3969,w,c	;volatile
 13572  002E0C  0B0F               	andlw	15
 13573  002E0E  0A0F               	xorlw	15
 13574  002E10  B4D8               	btfsc	status,2,c
 13575  002E12  D047               	goto	l1310
 13576                           
 13577                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13578                           
 13579                           ;Test.c: 498: }
 13580                           
 13581                           ;Test.c: 497: break;
 13582  002E14  3881               	swapf	3969,w,c	;volatile
 13583  002E16  0B0F               	andlw	15
 13584  002E18  0A05               	xorlw	5
 13585  002E1A  A4D8               	btfss	status,2,c
 13586  002E1C  D01D               	goto	l8188
 13587                           
 13588                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13589  002E1E  0E00               	movlw	0
 13590  002E20  0100               	movlb	0	; () banked
 13591  002E22  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13592  002E24  0E00               	movlw	0
 13593  002E26  6FB1               	movwf	PusherTest@i& (0+255),b
 13594  002E28                     l8178:
 13595                           
 13596                           ; BSR set to: 0
 13597  002E28  0100               	movlb	0	; () banked
 13598  002E2A  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13599  002E2C  D008               	goto	l1313
 13600  002E2E  0EB8               	movlw	184
 13601  002E30  0100               	movlb	0	; () banked
 13602  002E32  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13603  002E34  0E0B               	movlw	11
 13604  002E36  0100               	movlb	0	; () banked
 13605  002E38  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13606  002E3A  B0D8               	btfsc	status,0,c
 13607  002E3C  D02F               	goto	l1319
 13608  002E3E                     l1313:
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13612  002E3E  8889               	bsf	3977,4,c	;volatile
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13616  002E40  0EC8               	movlw	200
 13617  002E42                     u9747:
 13618  002E42  2EE8               	decfsz	wreg,f,c
 13619  002E44  D7FE               	bra	u9747
 13620                           
 13621                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13622  002E46  9889               	bcf	3977,4,c	;volatile
 13623                           
 13624                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13625  002E48  0E42               	movlw	66
 13626  002E4A                     u9757:
 13627  002E4A  2EE8               	decfsz	wreg,f,c
 13628  002E4C  D7FE               	bra	u9757
 13629  002E4E  D000               	nop2	
 13630  002E50  0100               	movlb	0	; () banked
 13631  002E52  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13632  002E54  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13633  002E56  D7E8               	goto	l8178
 13634  002E58                     l8188:
 13635                           
 13636                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13637  002E58  3881               	swapf	3969,w,c	;volatile
 13638  002E5A  0B0F               	andlw	15
 13639  002E5C  0A06               	xorlw	6
 13640  002E5E  A4D8               	btfss	status,2,c
 13641  002E60  D01D               	goto	l1319
 13642                           
 13643                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13644  002E62  0E00               	movlw	0
 13645  002E64  0100               	movlb	0	; () banked
 13646  002E66  6FB4               	movwf	(PusherTest@i_1793+1)& (0+255),b
 13647  002E68  0E00               	movlw	0
 13648  002E6A  6FB3               	movwf	PusherTest@i_1793& (0+255),b
 13649  002E6C                     l8192:
 13650                           
 13651                           ; BSR set to: 0
 13652  002E6C  0100               	movlb	0	; () banked
 13653  002E6E  BFB4               	btfsc	(PusherTest@i_1793+1)& (0+255),7,b
 13654  002E70  D008               	goto	l1317
 13655  002E72  0EB8               	movlw	184
 13656  002E74  0100               	movlb	0	; () banked
 13657  002E76  5DB3               	subwf	PusherTest@i_1793& (0+255),w,b
 13658  002E78  0E0B               	movlw	11
 13659  002E7A  0100               	movlb	0	; () banked
 13660  002E7C  59B4               	subwfb	(PusherTest@i_1793+1)& (0+255),w,b
 13661  002E7E  B0D8               	btfsc	status,0,c
 13662  002E80  D00D               	goto	l1319
 13663  002E82                     l1317:
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13667  002E82  8889               	bsf	3977,4,c	;volatile
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13671  002E84  0E9A               	movlw	154
 13672  002E86                     u9767:
 13673  002E86  2EE8               	decfsz	wreg,f,c
 13674  002E88  D7FE               	bra	u9767
 13675  002E8A  D000               	nop2	
 13676                           
 13677                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13678  002E8C  9889               	bcf	3977,4,c	;volatile
 13679                           
 13680                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13681  002E8E  0E70               	movlw	112
 13682  002E90                     u9777:
 13683  002E90  2EE8               	decfsz	wreg,f,c
 13684  002E92  D7FE               	bra	u9777
 13685  002E94  0100               	movlb	0	; () banked
 13686  002E96  4BB3               	infsnz	PusherTest@i_1793& (0+255),f,b
 13687  002E98  2BB4               	incf	(PusherTest@i_1793+1)& (0+255),f,b
 13688  002E9A  D7E8               	goto	l8192
 13689  002E9C                     l1319:
 13690  002E9C  A281               	btfss	3969,1,c	;volatile
 13691  002E9E  D7B3               	goto	l8166
 13692  002EA0  D7FD               	goto	l1319
 13693  002EA2                     l1310:
 13694                           
 13695                           ;Test.c: 519: }
 13696                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13697  002EA2  9A8B               	bcf	3979,5,c	;volatile
 13698  002EA4  0012               	return		;funcret
 13699  002EA6                     __end_of_PusherTest:
 13700                           	opt stack 0
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           intcon2	equ	0xFF1
 13709                           intcon3	equ	0xFF0
 13710                           postinc0	equ	0xFEE
 13711                           wreg	equ	0xFE8
 13712                           postdec1	equ	0xFE5
 13713                           fsr1l	equ	0xFE1
 13714                           indf2	equ	0xFDF
 13715                           postinc2	equ	0xFDE
 13716                           postdec2	equ	0xFDD
 13717                           fsr2h	equ	0xFDA
 13718                           fsr2l	equ	0xFD9
 13719                           status	equ	0xFD8
 13720                           
 13721 ;; *************** function _readADC *****************
 13722 ;; Defined at:
 13723 ;;		line 15 in file "ADCFunctionality.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;  channel         1    wreg     unsigned char 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  channel         1    1[BANK0 ] unsigned char 
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  1    wreg      void 
 13730 ;; Registers used:
 13731 ;;		wreg, status,2, status,0, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13741 ;;Total ram usage:        2 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    7
 13744 ;; This function calls:
 13745 ;;		Nothing
 13746 ;; This function is called by:
 13747 ;;		_readIR
 13748 ;;		_readMAG
 13749 ;;		_sensorTest
 13750 ;;		_PusherTest
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text43
 13755  0050A8                     __ptext43:
 13756                           	opt stack 0
 13757  0050A8                     _readADC:
 13758                           	opt stack 20
 13759                           
 13760                           ;incstack = 0
 13761                           ;readADC@channel stored from wreg
 13762  0050A8  0100               	movlb	0	; () banked
 13763  0050AA  6F81               	movwf	readADC@channel& (0+255),b
 13764                           
 13765                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13766  0050AC  0100               	movlb	0	; () banked
 13767  0050AE  4581               	rlncf	readADC@channel& (0+255),w,b
 13768  0050B0  46E8               	rlncf	wreg,f,c
 13769  0050B2  0BFC               	andlw	252
 13770  0050B4  6EC2               	movwf	4034,c	;volatile
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13774  0050B6  80C2               	bsf	4034,0,c	;volatile
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13778  0050B8  82C2               	bsf	4034,1,c	;volatile
 13779                           
 13780                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13781  0050BA  D009               	goto	l6044
 13782  0050BC                     l6042:
 13783  0050BC  0E34               	movlw	52
 13784  0050BE  0100               	movlb	0	; () banked
 13785  0050C0  6F80               	movwf	??_readADC& (0+255),b
 13786  0050C2  0EF1               	movlw	241
 13787  0050C4                     u9787:
 13788  0050C4  2EE8               	decfsz	wreg,f,c
 13789  0050C6  D7FE               	bra	u9787
 13790  0050C8  2F80               	decfsz	??_readADC& (0+255),f,b
 13791  0050CA  D7FC               	bra	u9787
 13792  0050CC  D000               	nop2	
 13793  0050CE                     l6044:
 13794  0050CE  A2C2               	btfss	4034,1,c	;volatile
 13795  0050D0  0012               	return	
 13796  0050D2  D7F4               	goto	l6042
 13797  0050D4                     __end_of_readADC:
 13798                           	opt stack 0
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon2	equ	0xFF1
 13807                           intcon3	equ	0xFF0
 13808                           postinc0	equ	0xFEE
 13809                           wreg	equ	0xFE8
 13810                           postdec1	equ	0xFE5
 13811                           fsr1l	equ	0xFE1
 13812                           indf2	equ	0xFDF
 13813                           postinc2	equ	0xFDE
 13814                           postdec2	equ	0xFDD
 13815                           fsr2h	equ	0xFDA
 13816                           fsr2l	equ	0xFD9
 13817                           status	equ	0xFD8
 13818                           
 13819 ;; *************** function _PortTests *****************
 13820 ;; Defined at:
 13821 ;;		line 409 in file "Test.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;		None
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;		None
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      void 
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13839 ;;Total ram usage:        2 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    7
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_Test
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text44
 13850  00465E                     __ptext44:
 13851                           	opt stack 0
 13852  00465E                     _PortTests:
 13853                           	opt stack 22
 13854  00465E                     l1268:
 13855  00465E  A281               	btfss	3969,1,c	;volatile
 13856  004660  D7FE               	goto	l1268
 13857                           
 13858                           ;Test.c: 413: var = PORTB >> 4;
 13859  004662  CF81 F080          	movff	3969,??_PortTests	;volatile
 13860  004666  0100               	movlb	0	; () banked
 13861  004668  3B80               	swapf	??_PortTests& (0+255),f,b
 13862  00466A  0E0F               	movlw	15
 13863  00466C  1780               	andwf	??_PortTests& (0+255),f,b
 13864  00466E  0100               	movlb	0	; () banked
 13865  004670  5180               	movf	??_PortTests& (0+255),w,b
 13866  004672  0100               	movlb	0	; () banked
 13867  004674  6FFA               	movwf	_var& (0+255),b
 13868  004676  6BFB               	clrf	(_var+1)& (0+255),b
 13869                           
 13870                           ;Test.c: 414: switch(var){
 13871  004678  D00C               	goto	l8206
 13872  00467A                     l1272:
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13876  00467A  808D               	bsf	3981,0,c	;volatile
 13877                           
 13878                           ;Test.c: 417: break;
 13879  00467C  D027               	goto	l1280
 13880  00467E                     l1274:
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13884  00467E  828D               	bsf	3981,1,c	;volatile
 13885                           
 13886                           ;Test.c: 420: break;
 13887  004680  D025               	goto	l1280
 13888  004682                     l1275:
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13892  004682  808C               	bsf	3980,0,c	;volatile
 13893                           
 13894                           ;Test.c: 423: break;
 13895  004684  D023               	goto	l1280
 13896  004686                     l1276:
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13900  004686  8689               	bsf	3977,3,c	;volatile
 13901                           
 13902                           ;Test.c: 426: break;
 13903  004688  D021               	goto	l1280
 13904  00468A                     l1277:
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13908  00468A  8889               	bsf	3977,4,c	;volatile
 13909                           
 13910                           ;Test.c: 429: break;
 13911  00468C  D01F               	goto	l1280
 13912  00468E                     l1278:
 13913                           
 13914                           ; BSR set to: 0
 13915                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13916  00468E  8A89               	bsf	3977,5,c	;volatile
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;Test.c: 435: }
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;Test.c: 434: break;
 13923                           
 13924                           ;Test.c: 433: default:
 13925                           
 13926                           ;Test.c: 432: break;
 13927  004690  D01D               	goto	l1280
 13928  004692                     l8206:
 13929                           
 13930                           ; BSR set to: 0
 13931  004692  C0FA  F080         	movff	_var,??_PortTests
 13932  004696  C0FB  F081         	movff	_var+1,??_PortTests+1
 13933                           
 13934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13935                           ; Switch size 1, requested type "space"
 13936                           ; Number of cases is 1, Range of values is 0 to 0
 13937                           ; switch strategies available:
 13938                           ; Name         Instructions Cycles
 13939                           ; simple_byte            4     3 (average)
 13940                           ;	Chosen strategy is simple_byte
 13941  00469A  0100               	movlb	0	; () banked
 13942  00469C  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13943  00469E  0A00               	xorlw	0	; case 0
 13944  0046A0  A4D8               	btfss	status,2,c
 13945  0046A2  D014               	goto	l1280
 13946                           
 13947                           ; BSR set to: 0
 13948                           ; Switch size 1, requested type "space"
 13949                           ; Number of cases is 6, Range of values is 0 to 5
 13950                           ; switch strategies available:
 13951                           ; Name         Instructions Cycles
 13952                           ; simple_byte           19    10 (average)
 13953                           ;	Chosen strategy is simple_byte
 13954  0046A4  0100               	movlb	0	; () banked
 13955  0046A6  5180               	movf	??_PortTests& (0+255),w,b
 13956  0046A8  0A00               	xorlw	0	; case 0
 13957  0046AA  B4D8               	btfsc	status,2,c
 13958  0046AC  D7E6               	goto	l1272
 13959  0046AE  0A01               	xorlw	1	; case 1
 13960  0046B0  B4D8               	btfsc	status,2,c
 13961  0046B2  D7E5               	goto	l1274
 13962  0046B4  0A03               	xorlw	3	; case 2
 13963  0046B6  B4D8               	btfsc	status,2,c
 13964  0046B8  D7E4               	goto	l1275
 13965  0046BA  0A01               	xorlw	1	; case 3
 13966  0046BC  B4D8               	btfsc	status,2,c
 13967  0046BE  D7E3               	goto	l1276
 13968  0046C0  0A07               	xorlw	7	; case 4
 13969  0046C2  B4D8               	btfsc	status,2,c
 13970  0046C4  D7E2               	goto	l1277
 13971  0046C6  0A01               	xorlw	1	; case 5
 13972  0046C8  B4D8               	btfsc	status,2,c
 13973  0046CA  D7E1               	goto	l1278
 13974  0046CC                     l1280:
 13975  0046CC  B281               	btfsc	3969,1,c	;volatile
 13976  0046CE  D7FE               	goto	l1280
 13977                           
 13978                           ;Test.c: 437: __nop();
 13979  0046D0  F000               	nop	
 13980                           
 13981                           ;Test.c: 438: __nop();
 13982  0046D2  F000               	nop	
 13983                           
 13984                           ;Test.c: 439: LATA = 0x00;
 13985  0046D4  0E00               	movlw	0
 13986  0046D6  6E89               	movwf	3977,c	;volatile
 13987                           
 13988                           ;Test.c: 440: LATE = 0x00;
 13989  0046D8  0E00               	movlw	0
 13990  0046DA  6E8D               	movwf	3981,c	;volatile
 13991                           
 13992                           ;Test.c: 441: LATD = 0x00; }
 13993  0046DC  0E00               	movlw	0
 13994  0046DE  6E8C               	movwf	3980,c	;volatile
 13995  0046E0  D7BE               	goto	l1268
 13996  0046E2                     __end_of_PortTests:
 13997                           	opt stack 0
 13998                           tblptru	equ	0xFF8
 13999                           tblptrh	equ	0xFF7
 14000                           tblptrl	equ	0xFF6
 14001                           tablat	equ	0xFF5
 14002                           prodh	equ	0xFF4
 14003                           prodl	equ	0xFF3
 14004                           intcon	equ	0xFF2
 14005                           intcon2	equ	0xFF1
 14006                           intcon3	equ	0xFF0
 14007                           postinc0	equ	0xFEE
 14008                           wreg	equ	0xFE8
 14009                           postdec1	equ	0xFE5
 14010                           fsr1l	equ	0xFE1
 14011                           indf2	equ	0xFDF
 14012                           postinc2	equ	0xFDE
 14013                           postdec2	equ	0xFDD
 14014                           fsr2h	equ	0xFDA
 14015                           fsr2l	equ	0xFD9
 14016                           status	equ	0xFD8
 14017                           
 14018 ;; *************** function _PortTestA5 *****************
 14019 ;; Defined at:
 14020 ;;		line 444 in file "Test.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;		None
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;		None
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;Total ram usage:        1 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:   10
 14041 ;; This function calls:
 14042 ;;		_lcdInst
 14043 ;;		_printf
 14044 ;; This function is called by:
 14045 ;;		_Test
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text45
 14050  004A34                     __ptext45:
 14051                           	opt stack 0
 14052  004A34                     _PortTestA5:
 14053                           	opt stack 19
 14054                           
 14055                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14056                           
 14057                           ;incstack = 0
 14058  004A34  0E01               	movlw	1
 14059  004A36  EC5D  F029         	call	_lcdInst
 14060  004A3A  0E68               	movlw	104
 14061  004A3C  0100               	movlb	0	; () banked
 14062  004A3E  6FAB               	movwf	??_PortTestA5& (0+255),b
 14063  004A40  0EE4               	movlw	228
 14064  004A42                     u9797:
 14065  004A42  2EE8               	decfsz	wreg,f,c
 14066  004A44  D7FE               	bra	u9797
 14067  004A46  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 14068  004A48  D7FC               	bra	u9797
 14069  004A4A  F000               	nop	
 14070  004A4C  0E80               	movlw	128
 14071  004A4E  EC5D  F029         	call	_lcdInst
 14072                           
 14073                           ;Test.c: 446: printf("D WILL RETURN    ");
 14074  004A52  0E33               	movlw	low STR_112
 14075  004A54  0100               	movlb	0	; () banked
 14076  004A56  6F8E               	movwf	printf@f& (0+255),b
 14077  004A58  0EFB               	movlw	high STR_112
 14078  004A5A  0100               	movlb	0	; () banked
 14079  004A5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14080  004A5E  EC02  F00B         	call	_printf	;wreg free
 14081                           
 14082                           ;Test.c: 447: lcdInst(0b11000000);;
 14083  004A62  0EC0               	movlw	192
 14084  004A64  EC5D  F029         	call	_lcdInst
 14085                           
 14086                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 14087  004A68  0E45               	movlw	low STR_113
 14088  004A6A  0100               	movlb	0	; () banked
 14089  004A6C  6F8E               	movwf	printf@f& (0+255),b
 14090  004A6E  0EFB               	movlw	high STR_113
 14091  004A70  0100               	movlb	0	; () banked
 14092  004A72  6F8F               	movwf	(printf@f+1)& (0+255),b
 14093  004A74  EC02  F00B         	call	_printf	;wreg free
 14094  004A78                     l1289:
 14095  004A78  A281               	btfss	3969,1,c	;volatile
 14096  004A7A  D7FE               	goto	l1289
 14097                           
 14098                           ;Test.c: 453: }
 14099                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 14100  004A7C  3881               	swapf	3969,w,c	;volatile
 14101  004A7E  0B0F               	andlw	15
 14102  004A80  0A0F               	xorlw	15
 14103  004A82  B4D8               	btfsc	status,2,c
 14104  004A84  0012               	return	
 14105                           
 14106                           ;Test.c: 457: else{
 14107                           ;Test.c: 458: LATBbits.LATB2 = 1;
 14108                           
 14109                           ;Test.c: 456: }
 14110                           
 14111                           ;Test.c: 455: break;
 14112  004A86  848A               	bsf	3978,2,c	;volatile
 14113  004A88                     l1295:
 14114  004A88  B281               	btfsc	3969,1,c	;volatile
 14115  004A8A  D7FE               	goto	l1295
 14116                           
 14117                           ;Test.c: 461: }
 14118                           ;Test.c: 462: LATBbits.LATB2 = 0;
 14119  004A8C  948A               	bcf	3978,2,c	;volatile
 14120  004A8E  D7F4               	goto	l1289
 14121  004A90                     __end_of_PortTestA5:
 14122                           	opt stack 0
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           intcon	equ	0xFF2
 14130                           intcon2	equ	0xFF1
 14131                           intcon3	equ	0xFF0
 14132                           postinc0	equ	0xFEE
 14133                           wreg	equ	0xFE8
 14134                           postdec1	equ	0xFE5
 14135                           fsr1l	equ	0xFE1
 14136                           indf2	equ	0xFDF
 14137                           postinc2	equ	0xFDE
 14138                           postdec2	equ	0xFDD
 14139                           fsr2h	equ	0xFDA
 14140                           fsr2l	equ	0xFD9
 14141                           status	equ	0xFD8
 14142                           
 14143 ;; *************** function _EEPROMTest *****************
 14144 ;; Defined at:
 14145 ;;		line 577 in file "Test.c"
 14146 ;; Parameters:    Size  Location     Type
 14147 ;;		None
 14148 ;; Auto vars:     Size  Location     Type
 14149 ;;		None
 14150 ;; Return value:  Size  Location     Type
 14151 ;;                  1    wreg      void 
 14152 ;; Registers used:
 14153 ;;		None
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;Total ram usage:        0 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; Hardware stack levels required when called:    7
 14166 ;; This function calls:
 14167 ;;		Nothing
 14168 ;; This function is called by:
 14169 ;;		_Test
 14170 ;; This function uses a non-reentrant model
 14171 ;;
 14172                           
 14173                           	psect	text46
 14174  00531E                     __ptext46:
 14175                           	opt stack 0
 14176  00531E                     _EEPROMTest:
 14177                           	opt stack 22
 14178                           
 14179                           ;incstack = 0
 14180  00531E  0012               	return		;funcret
 14181  005320                     __end_of_EEPROMTest:
 14182                           	opt stack 0
 14183                           tblptru	equ	0xFF8
 14184                           tblptrh	equ	0xFF7
 14185                           tblptrl	equ	0xFF6
 14186                           tablat	equ	0xFF5
 14187                           prodh	equ	0xFF4
 14188                           prodl	equ	0xFF3
 14189                           intcon	equ	0xFF2
 14190                           intcon2	equ	0xFF1
 14191                           intcon3	equ	0xFF0
 14192                           postinc0	equ	0xFEE
 14193                           wreg	equ	0xFE8
 14194                           postdec1	equ	0xFE5
 14195                           fsr1l	equ	0xFE1
 14196                           indf2	equ	0xFDF
 14197                           postinc2	equ	0xFDE
 14198                           postdec2	equ	0xFDD
 14199                           fsr2h	equ	0xFDA
 14200                           fsr2l	equ	0xFD9
 14201                           status	equ	0xFD8
 14202                           
 14203 ;; *************** function _BothServos *****************
 14204 ;; Defined at:
 14205 ;;		line 352 in file "Test.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;		None
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;		None
 14210 ;; Return value:  Size  Location     Type
 14211 ;;                  1    wreg      void 
 14212 ;; Registers used:
 14213 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;Total ram usage:        2 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; Hardware stack levels required when called:   10
 14226 ;; This function calls:
 14227 ;;		_initServos
 14228 ;;		_lcdInst
 14229 ;;		_printf
 14230 ;;		_updateServoPosition
 14231 ;; This function is called by:
 14232 ;;		_Test
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           	psect	text47
 14237  001A3C                     __ptext47:
 14238                           	opt stack 0
 14239  001A3C                     _BothServos:
 14240                           	opt stack 19
 14241                           
 14242                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14243                           
 14244                           ;incstack = 0
 14245  001A3C  0E01               	movlw	1
 14246  001A3E  EC5D  F029         	call	_lcdInst
 14247  001A42  0E68               	movlw	104
 14248  001A44  0100               	movlb	0	; () banked
 14249  001A46  6FAB               	movwf	??_BothServos& (0+255),b
 14250  001A48  0EE4               	movlw	228
 14251  001A4A                     u9807:
 14252  001A4A  2EE8               	decfsz	wreg,f,c
 14253  001A4C  D7FE               	bra	u9807
 14254  001A4E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14255  001A50  D7FC               	bra	u9807
 14256  001A52  F000               	nop	
 14257  001A54  0E80               	movlw	128
 14258  001A56  EC5D  F029         	call	_lcdInst
 14259                           
 14260                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14261  001A5A  0EB0               	movlw	low STR_111
 14262  001A5C  0100               	movlb	0	; () banked
 14263  001A5E  6F8E               	movwf	printf@f& (0+255),b
 14264  001A60  0EFC               	movlw	high STR_111
 14265  001A62  0100               	movlb	0	; () banked
 14266  001A64  6F8F               	movwf	(printf@f+1)& (0+255),b
 14267  001A66  EC02  F00B         	call	_printf	;wreg free
 14268                           
 14269                           ;Test.c: 355: TMR1ON = 1;
 14270  001A6A  80CD               	bsf	4045,0,c	;volatile
 14271                           
 14272                           ;Test.c: 356: TMR3ON = 1;
 14273  001A6C  80B1               	bsf	4017,0,c	;volatile
 14274                           
 14275                           ;Test.c: 357: machine_state = Sorting_state;
 14276  001A6E  0E01               	movlw	1
 14277  001A70  0100               	movlb	0	; () banked
 14278  001A72  6FFC               	movwf	_machine_state& (0+255),b
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;Test.c: 358: was_low_1 = 0;
 14282  001A74  0E00               	movlw	0
 14283  001A76  6E7A               	movwf	_was_low_1+1,c	;volatile
 14284  001A78  0E00               	movlw	0
 14285  001A7A  6E79               	movwf	_was_low_1,c	;volatile
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;Test.c: 359: was_low_3 = 0;
 14289  001A7C  0E00               	movlw	0
 14290  001A7E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14291  001A80  0E00               	movlw	0
 14292  001A82  6E7B               	movwf	_was_low_3,c	;volatile
 14293                           
 14294                           ; BSR set to: 0
 14295                           ;Test.c: 365: initServos();
 14296  001A84  EC48  F025         	call	_initServos	;wreg free
 14297                           
 14298                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14299  001A88  0E3D               	movlw	61
 14300  001A8A  0100               	movlb	0	; () banked
 14301  001A8C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14302  001A8E  0EE1               	movlw	225
 14303  001A90  0100               	movlb	0	; () banked
 14304  001A92  6FAB               	movwf	??_BothServos& (0+255),b
 14305  001A94  0E3F               	movlw	63
 14306  001A96                     u9817:
 14307  001A96  2EE8               	decfsz	wreg,f,c
 14308  001A98  D7FE               	bra	u9817
 14309  001A9A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14310  001A9C  D7FC               	bra	u9817
 14311  001A9E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14312  001AA0  D7FA               	bra	u9817
 14313  001AA2  D000               	nop2	
 14314                           
 14315                           ;Test.c: 368: updateServoPosition(500, 1);
 14316  001AA4  0E01               	movlw	1
 14317  001AA6  0100               	movlb	0	; () banked
 14318  001AA8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14319  001AAA  0EF4               	movlw	244
 14320  001AAC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14321  001AAE  0E00               	movlw	0
 14322  001AB0  0100               	movlb	0	; () banked
 14323  001AB2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14324  001AB4  0E01               	movlw	1
 14325  001AB6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14326  001AB8  ECAA  F022         	call	_updateServoPosition	;wreg free
 14327                           
 14328                           ;Test.c: 369: updateServoPosition(1050, 3);
 14329  001ABC  0E04               	movlw	4
 14330  001ABE  0100               	movlb	0	; () banked
 14331  001AC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14332  001AC2  0E1A               	movlw	26
 14333  001AC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14334  001AC6  0E00               	movlw	0
 14335  001AC8  0100               	movlb	0	; () banked
 14336  001ACA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14337  001ACC  0E03               	movlw	3
 14338  001ACE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14339  001AD0  ECAA  F022         	call	_updateServoPosition	;wreg free
 14340                           
 14341                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14342  001AD4  0E1F               	movlw	31
 14343  001AD6  0100               	movlb	0	; () banked
 14344  001AD8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14345  001ADA  0E71               	movlw	113
 14346  001ADC  0100               	movlb	0	; () banked
 14347  001ADE  6FAB               	movwf	??_BothServos& (0+255),b
 14348  001AE0  0E1E               	movlw	30
 14349  001AE2                     u9827:
 14350  001AE2  2EE8               	decfsz	wreg,f,c
 14351  001AE4  D7FE               	bra	u9827
 14352  001AE6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14353  001AE8  D7FC               	bra	u9827
 14354  001AEA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14355  001AEC  D7FA               	bra	u9827
 14356  001AEE  F000               	nop	
 14357                           
 14358                           ;Test.c: 371: updateServoPosition(1260, 3);
 14359  001AF0  0E04               	movlw	4
 14360  001AF2  0100               	movlb	0	; () banked
 14361  001AF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14362  001AF6  0EEC               	movlw	236
 14363  001AF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14364  001AFA  0E00               	movlw	0
 14365  001AFC  0100               	movlb	0	; () banked
 14366  001AFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14367  001B00  0E03               	movlw	3
 14368  001B02  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14369  001B04  ECAA  F022         	call	_updateServoPosition	;wreg free
 14370                           
 14371                           ;Test.c: 372: _delay((unsigned long)((700)*(32000000/4000.0)));
 14372  001B08  0E1D               	movlw	29
 14373  001B0A  0100               	movlb	0	; () banked
 14374  001B0C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14375  001B0E  0E69               	movlw	105
 14376  001B10  0100               	movlb	0	; () banked
 14377  001B12  6FAB               	movwf	??_BothServos& (0+255),b
 14378  001B14  0EA5               	movlw	165
 14379  001B16                     u9837:
 14380  001B16  2EE8               	decfsz	wreg,f,c
 14381  001B18  D7FE               	bra	u9837
 14382  001B1A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14383  001B1C  D7FC               	bra	u9837
 14384  001B1E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14385  001B20  D7FA               	bra	u9837
 14386                           
 14387                           ;Test.c: 373: updateServoPosition(1050, 3);
 14388  001B22  0E04               	movlw	4
 14389  001B24  0100               	movlb	0	; () banked
 14390  001B26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14391  001B28  0E1A               	movlw	26
 14392  001B2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14393  001B2C  0E00               	movlw	0
 14394  001B2E  0100               	movlb	0	; () banked
 14395  001B30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14396  001B32  0E03               	movlw	3
 14397  001B34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14398  001B36  ECAA  F022         	call	_updateServoPosition	;wreg free
 14399                           
 14400                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14401  001B3A  0E1F               	movlw	31
 14402  001B3C  0100               	movlb	0	; () banked
 14403  001B3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14404  001B40  0E71               	movlw	113
 14405  001B42  0100               	movlb	0	; () banked
 14406  001B44  6FAB               	movwf	??_BothServos& (0+255),b
 14407  001B46  0E1E               	movlw	30
 14408  001B48                     u9847:
 14409  001B48  2EE8               	decfsz	wreg,f,c
 14410  001B4A  D7FE               	bra	u9847
 14411  001B4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14412  001B4E  D7FC               	bra	u9847
 14413  001B50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14414  001B52  D7FA               	bra	u9847
 14415  001B54  F000               	nop	
 14416                           
 14417                           ;Test.c: 376: updateServoPosition(850, 1);
 14418  001B56  0E03               	movlw	3
 14419  001B58  0100               	movlb	0	; () banked
 14420  001B5A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14421  001B5C  0E52               	movlw	82
 14422  001B5E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14423  001B60  0E00               	movlw	0
 14424  001B62  0100               	movlb	0	; () banked
 14425  001B64  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14426  001B66  0E01               	movlw	1
 14427  001B68  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14428  001B6A  ECAA  F022         	call	_updateServoPosition	;wreg free
 14429                           
 14430                           ;Test.c: 377: updateServoPosition(1050, 3);
 14431  001B6E  0E04               	movlw	4
 14432  001B70  0100               	movlb	0	; () banked
 14433  001B72  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14434  001B74  0E1A               	movlw	26
 14435  001B76  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14436  001B78  0E00               	movlw	0
 14437  001B7A  0100               	movlb	0	; () banked
 14438  001B7C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14439  001B7E  0E03               	movlw	3
 14440  001B80  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14441  001B82  ECAA  F022         	call	_updateServoPosition	;wreg free
 14442                           
 14443                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14444  001B86  0E1F               	movlw	31
 14445  001B88  0100               	movlb	0	; () banked
 14446  001B8A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14447  001B8C  0E71               	movlw	113
 14448  001B8E  0100               	movlb	0	; () banked
 14449  001B90  6FAB               	movwf	??_BothServos& (0+255),b
 14450  001B92  0E1E               	movlw	30
 14451  001B94                     u9857:
 14452  001B94  2EE8               	decfsz	wreg,f,c
 14453  001B96  D7FE               	bra	u9857
 14454  001B98  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14455  001B9A  D7FC               	bra	u9857
 14456  001B9C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14457  001B9E  D7FA               	bra	u9857
 14458  001BA0  F000               	nop	
 14459                           
 14460                           ;Test.c: 379: updateServoPosition(1260, 3);
 14461  001BA2  0E04               	movlw	4
 14462  001BA4  0100               	movlb	0	; () banked
 14463  001BA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14464  001BA8  0EEC               	movlw	236
 14465  001BAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14466  001BAC  0E00               	movlw	0
 14467  001BAE  0100               	movlb	0	; () banked
 14468  001BB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14469  001BB2  0E03               	movlw	3
 14470  001BB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14471  001BB6  ECAA  F022         	call	_updateServoPosition	;wreg free
 14472                           
 14473                           ;Test.c: 380: _delay((unsigned long)((700)*(32000000/4000.0)));
 14474  001BBA  0E1D               	movlw	29
 14475  001BBC  0100               	movlb	0	; () banked
 14476  001BBE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14477  001BC0  0E69               	movlw	105
 14478  001BC2  0100               	movlb	0	; () banked
 14479  001BC4  6FAB               	movwf	??_BothServos& (0+255),b
 14480  001BC6  0EA5               	movlw	165
 14481  001BC8                     u9867:
 14482  001BC8  2EE8               	decfsz	wreg,f,c
 14483  001BCA  D7FE               	bra	u9867
 14484  001BCC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14485  001BCE  D7FC               	bra	u9867
 14486  001BD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14487  001BD2  D7FA               	bra	u9867
 14488                           
 14489                           ;Test.c: 381: updateServoPosition(1050, 3);
 14490  001BD4  0E04               	movlw	4
 14491  001BD6  0100               	movlb	0	; () banked
 14492  001BD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14493  001BDA  0E1A               	movlw	26
 14494  001BDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14495  001BDE  0E00               	movlw	0
 14496  001BE0  0100               	movlb	0	; () banked
 14497  001BE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14498  001BE4  0E03               	movlw	3
 14499  001BE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14500  001BE8  ECAA  F022         	call	_updateServoPosition	;wreg free
 14501                           
 14502                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14503  001BEC  0E1F               	movlw	31
 14504  001BEE  0100               	movlb	0	; () banked
 14505  001BF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14506  001BF2  0E71               	movlw	113
 14507  001BF4  0100               	movlb	0	; () banked
 14508  001BF6  6FAB               	movwf	??_BothServos& (0+255),b
 14509  001BF8  0E1E               	movlw	30
 14510  001BFA                     u9877:
 14511  001BFA  2EE8               	decfsz	wreg,f,c
 14512  001BFC  D7FE               	bra	u9877
 14513  001BFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14514  001C00  D7FC               	bra	u9877
 14515  001C02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14516  001C04  D7FA               	bra	u9877
 14517  001C06  F000               	nop	
 14518                           
 14519                           ;Test.c: 384: updateServoPosition(1200, 1);
 14520  001C08  0E04               	movlw	4
 14521  001C0A  0100               	movlb	0	; () banked
 14522  001C0C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14523  001C0E  0EB0               	movlw	176
 14524  001C10  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14525  001C12  0E00               	movlw	0
 14526  001C14  0100               	movlb	0	; () banked
 14527  001C16  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14528  001C18  0E01               	movlw	1
 14529  001C1A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14530  001C1C  ECAA  F022         	call	_updateServoPosition	;wreg free
 14531                           
 14532                           ;Test.c: 385: updateServoPosition(1050, 3);
 14533  001C20  0E04               	movlw	4
 14534  001C22  0100               	movlb	0	; () banked
 14535  001C24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14536  001C26  0E1A               	movlw	26
 14537  001C28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14538  001C2A  0E00               	movlw	0
 14539  001C2C  0100               	movlb	0	; () banked
 14540  001C2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14541  001C30  0E03               	movlw	3
 14542  001C32  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14543  001C34  ECAA  F022         	call	_updateServoPosition	;wreg free
 14544                           
 14545                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14546  001C38  0E3D               	movlw	61
 14547  001C3A  0100               	movlb	0	; () banked
 14548  001C3C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14549  001C3E  0EE1               	movlw	225
 14550  001C40  0100               	movlb	0	; () banked
 14551  001C42  6FAB               	movwf	??_BothServos& (0+255),b
 14552  001C44  0E3F               	movlw	63
 14553  001C46                     u9887:
 14554  001C46  2EE8               	decfsz	wreg,f,c
 14555  001C48  D7FE               	bra	u9887
 14556  001C4A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14557  001C4C  D7FC               	bra	u9887
 14558  001C4E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14559  001C50  D7FA               	bra	u9887
 14560  001C52  D000               	nop2	
 14561                           
 14562                           ;Test.c: 388: updateServoPosition(1670, 1);
 14563  001C54  0E06               	movlw	6
 14564  001C56  0100               	movlb	0	; () banked
 14565  001C58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14566  001C5A  0E86               	movlw	134
 14567  001C5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14568  001C5E  0E00               	movlw	0
 14569  001C60  0100               	movlb	0	; () banked
 14570  001C62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14571  001C64  0E01               	movlw	1
 14572  001C66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14573  001C68  ECAA  F022         	call	_updateServoPosition	;wreg free
 14574                           
 14575                           ;Test.c: 389: updateServoPosition(1050, 3);
 14576  001C6C  0E04               	movlw	4
 14577  001C6E  0100               	movlb	0	; () banked
 14578  001C70  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14579  001C72  0E1A               	movlw	26
 14580  001C74  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14581  001C76  0E00               	movlw	0
 14582  001C78  0100               	movlb	0	; () banked
 14583  001C7A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14584  001C7C  0E03               	movlw	3
 14585  001C7E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14586  001C80  ECAA  F022         	call	_updateServoPosition	;wreg free
 14587                           
 14588                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14589  001C84  0E1F               	movlw	31
 14590  001C86  0100               	movlb	0	; () banked
 14591  001C88  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14592  001C8A  0E71               	movlw	113
 14593  001C8C  0100               	movlb	0	; () banked
 14594  001C8E  6FAB               	movwf	??_BothServos& (0+255),b
 14595  001C90  0E1E               	movlw	30
 14596  001C92                     u9897:
 14597  001C92  2EE8               	decfsz	wreg,f,c
 14598  001C94  D7FE               	bra	u9897
 14599  001C96  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14600  001C98  D7FC               	bra	u9897
 14601  001C9A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14602  001C9C  D7FA               	bra	u9897
 14603  001C9E  F000               	nop	
 14604                           
 14605                           ;Test.c: 391: updateServoPosition(1390, 3);
 14606  001CA0  0E05               	movlw	5
 14607  001CA2  0100               	movlb	0	; () banked
 14608  001CA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14609  001CA6  0E6E               	movlw	110
 14610  001CA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14611  001CAA  0E00               	movlw	0
 14612  001CAC  0100               	movlb	0	; () banked
 14613  001CAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14614  001CB0  0E03               	movlw	3
 14615  001CB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14616  001CB4  ECAA  F022         	call	_updateServoPosition	;wreg free
 14617                           
 14618                           ;Test.c: 392: _delay((unsigned long)((700)*(32000000/4000.0)));
 14619  001CB8  0E1D               	movlw	29
 14620  001CBA  0100               	movlb	0	; () banked
 14621  001CBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14622  001CBE  0E69               	movlw	105
 14623  001CC0  0100               	movlb	0	; () banked
 14624  001CC2  6FAB               	movwf	??_BothServos& (0+255),b
 14625  001CC4  0EA5               	movlw	165
 14626  001CC6                     u9907:
 14627  001CC6  2EE8               	decfsz	wreg,f,c
 14628  001CC8  D7FE               	bra	u9907
 14629  001CCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14630  001CCC  D7FC               	bra	u9907
 14631  001CCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14632  001CD0  D7FA               	bra	u9907
 14633                           
 14634                           ;Test.c: 393: updateServoPosition(1050, 3);
 14635  001CD2  0E04               	movlw	4
 14636  001CD4  0100               	movlb	0	; () banked
 14637  001CD6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14638  001CD8  0E1A               	movlw	26
 14639  001CDA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14640  001CDC  0E00               	movlw	0
 14641  001CDE  0100               	movlb	0	; () banked
 14642  001CE0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14643  001CE2  0E03               	movlw	3
 14644  001CE4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14645  001CE6  ECAA  F022         	call	_updateServoPosition	;wreg free
 14646                           
 14647                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14648  001CEA  0E1F               	movlw	31
 14649  001CEC  0100               	movlb	0	; () banked
 14650  001CEE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14651  001CF0  0E71               	movlw	113
 14652  001CF2  0100               	movlb	0	; () banked
 14653  001CF4  6FAB               	movwf	??_BothServos& (0+255),b
 14654  001CF6  0E1E               	movlw	30
 14655  001CF8                     u9917:
 14656  001CF8  2EE8               	decfsz	wreg,f,c
 14657  001CFA  D7FE               	bra	u9917
 14658  001CFC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14659  001CFE  D7FC               	bra	u9917
 14660  001D00  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14661  001D02  D7FA               	bra	u9917
 14662  001D04  F000               	nop	
 14663                           
 14664                           ;Test.c: 396: updateServoPosition(2400, 1);
 14665  001D06  0E09               	movlw	9
 14666  001D08  0100               	movlb	0	; () banked
 14667  001D0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14668  001D0C  0E60               	movlw	96
 14669  001D0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14670  001D10  0E00               	movlw	0
 14671  001D12  0100               	movlb	0	; () banked
 14672  001D14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14673  001D16  0E01               	movlw	1
 14674  001D18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14675  001D1A  ECAA  F022         	call	_updateServoPosition	;wreg free
 14676                           
 14677                           ;Test.c: 397: updateServoPosition(1050, 3);
 14678  001D1E  0E04               	movlw	4
 14679  001D20  0100               	movlb	0	; () banked
 14680  001D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14681  001D24  0E1A               	movlw	26
 14682  001D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14683  001D28  0E00               	movlw	0
 14684  001D2A  0100               	movlb	0	; () banked
 14685  001D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14686  001D2E  0E03               	movlw	3
 14687  001D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14688  001D32  ECAA  F022         	call	_updateServoPosition	;wreg free
 14689                           
 14690                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14691  001D36  0E1F               	movlw	31
 14692  001D38  0100               	movlb	0	; () banked
 14693  001D3A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14694  001D3C  0E71               	movlw	113
 14695  001D3E  0100               	movlb	0	; () banked
 14696  001D40  6FAB               	movwf	??_BothServos& (0+255),b
 14697  001D42  0E1E               	movlw	30
 14698  001D44                     u9927:
 14699  001D44  2EE8               	decfsz	wreg,f,c
 14700  001D46  D7FE               	bra	u9927
 14701  001D48  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14702  001D4A  D7FC               	bra	u9927
 14703  001D4C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14704  001D4E  D7FA               	bra	u9927
 14705  001D50  F000               	nop	
 14706                           
 14707                           ;Test.c: 399: updateServoPosition(1390, 3);
 14708  001D52  0E05               	movlw	5
 14709  001D54  0100               	movlb	0	; () banked
 14710  001D56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14711  001D58  0E6E               	movlw	110
 14712  001D5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14713  001D5C  0E00               	movlw	0
 14714  001D5E  0100               	movlb	0	; () banked
 14715  001D60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14716  001D62  0E03               	movlw	3
 14717  001D64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14718  001D66  ECAA  F022         	call	_updateServoPosition	;wreg free
 14719                           
 14720                           ;Test.c: 400: _delay((unsigned long)((700)*(32000000/4000.0)));
 14721  001D6A  0E1D               	movlw	29
 14722  001D6C  0100               	movlb	0	; () banked
 14723  001D6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14724  001D70  0E69               	movlw	105
 14725  001D72  0100               	movlb	0	; () banked
 14726  001D74  6FAB               	movwf	??_BothServos& (0+255),b
 14727  001D76  0EA5               	movlw	165
 14728  001D78                     u9937:
 14729  001D78  2EE8               	decfsz	wreg,f,c
 14730  001D7A  D7FE               	bra	u9937
 14731  001D7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14732  001D7E  D7FC               	bra	u9937
 14733  001D80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14734  001D82  D7FA               	bra	u9937
 14735                           
 14736                           ;Test.c: 401: updateServoPosition(1050, 3);
 14737  001D84  0E04               	movlw	4
 14738  001D86  0100               	movlb	0	; () banked
 14739  001D88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14740  001D8A  0E1A               	movlw	26
 14741  001D8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14742  001D8E  0E00               	movlw	0
 14743  001D90  0100               	movlb	0	; () banked
 14744  001D92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14745  001D94  0E03               	movlw	3
 14746  001D96  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14747  001D98  ECAA  F022         	call	_updateServoPosition	;wreg free
 14748                           
 14749                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14750  001D9C  0E1F               	movlw	31
 14751  001D9E  0100               	movlb	0	; () banked
 14752  001DA0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14753  001DA2  0E71               	movlw	113
 14754  001DA4  0100               	movlb	0	; () banked
 14755  001DA6  6FAB               	movwf	??_BothServos& (0+255),b
 14756  001DA8  0E1E               	movlw	30
 14757  001DAA                     u9947:
 14758  001DAA  2EE8               	decfsz	wreg,f,c
 14759  001DAC  D7FE               	bra	u9947
 14760  001DAE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14761  001DB0  D7FC               	bra	u9947
 14762  001DB2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14763  001DB4  D7FA               	bra	u9947
 14764  001DB6  F000               	nop	
 14765                           
 14766                           ;Test.c: 404: TMR1ON = 0;
 14767  001DB8  90CD               	bcf	4045,0,c	;volatile
 14768                           
 14769                           ;Test.c: 405: TMR3ON = 0;
 14770  001DBA  90B1               	bcf	4017,0,c	;volatile
 14771                           
 14772                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14773  001DBC  9EF2               	bcf	intcon,7,c	;volatile
 14774  001DBE  0012               	return		;funcret
 14775  001DC0                     __end_of_BothServos:
 14776                           	opt stack 0
 14777                           tblptru	equ	0xFF8
 14778                           tblptrh	equ	0xFF7
 14779                           tblptrl	equ	0xFF6
 14780                           tablat	equ	0xFF5
 14781                           prodh	equ	0xFF4
 14782                           prodl	equ	0xFF3
 14783                           intcon	equ	0xFF2
 14784                           intcon2	equ	0xFF1
 14785                           intcon3	equ	0xFF0
 14786                           postinc0	equ	0xFEE
 14787                           wreg	equ	0xFE8
 14788                           postdec1	equ	0xFE5
 14789                           fsr1l	equ	0xFE1
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797 ;; *************** function _initServos *****************
 14798 ;; Defined at:
 14799 ;;		line 412 in file "sort.c"
 14800 ;; Parameters:    Size  Location     Type
 14801 ;;		None
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;		None
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      void 
 14806 ;; Registers used:
 14807 ;;		wreg, status,2, status,0, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;Total ram usage:        1 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    8
 14820 ;; This function calls:
 14821 ;;		_updateServoPosition
 14822 ;; This function is called by:
 14823 ;;		_Loading
 14824 ;;		_BothServos
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           	psect	text48
 14829  004A90                     __ptext48:
 14830                           	opt stack 0
 14831  004A90                     _initServos:
 14832                           	opt stack 20
 14833                           
 14834                           ;sort.c: 413: updateServoPosition(1200, 1);
 14835                           
 14836                           ;incstack = 0
 14837  004A90  0E04               	movlw	4
 14838  004A92  0100               	movlb	0	; () banked
 14839  004A94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14840  004A96  0EB0               	movlw	176
 14841  004A98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14842  004A9A  0E00               	movlw	0
 14843  004A9C  0100               	movlb	0	; () banked
 14844  004A9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14845  004AA0  0E01               	movlw	1
 14846  004AA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14847  004AA4  ECAA  F022         	call	_updateServoPosition	;wreg free
 14848                           
 14849                           ;sort.c: 414: updateServoPosition(1050, 3);
 14850  004AA8  0E04               	movlw	4
 14851  004AAA  0100               	movlb	0	; () banked
 14852  004AAC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14853  004AAE  0E1A               	movlw	26
 14854  004AB0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14855  004AB2  0E00               	movlw	0
 14856  004AB4  0100               	movlb	0	; () banked
 14857  004AB6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14858  004AB8  0E03               	movlw	3
 14859  004ABA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14860  004ABC  ECAA  F022         	call	_updateServoPosition	;wreg free
 14861                           
 14862                           ;sort.c: 415: TMR1ON = 1;
 14863  004AC0  80CD               	bsf	4045,0,c	;volatile
 14864                           
 14865                           ;sort.c: 416: was_low_1 = 0;
 14866  004AC2  0E00               	movlw	0
 14867  004AC4  6E7A               	movwf	_was_low_1+1,c	;volatile
 14868  004AC6  0E00               	movlw	0
 14869  004AC8  6E79               	movwf	_was_low_1,c	;volatile
 14870                           
 14871                           ;sort.c: 417: _delay((unsigned long)((5)*(32000000/4000.0)));
 14872  004ACA  0E34               	movlw	52
 14873  004ACC  0100               	movlb	0	; () banked
 14874  004ACE  6F88               	movwf	??_initServos& (0+255),b
 14875  004AD0  0EF1               	movlw	241
 14876  004AD2                     u9957:
 14877  004AD2  2EE8               	decfsz	wreg,f,c
 14878  004AD4  D7FE               	bra	u9957
 14879  004AD6  2F88               	decfsz	??_initServos& (0+255),f,b
 14880  004AD8  D7FC               	bra	u9957
 14881  004ADA  D000               	nop2	
 14882                           
 14883                           ;sort.c: 418: TMR3ON = 1;
 14884  004ADC  80B1               	bsf	4017,0,c	;volatile
 14885                           
 14886                           ;sort.c: 419: was_low_3 = 0;
 14887  004ADE  0E00               	movlw	0
 14888  004AE0  6E7C               	movwf	_was_low_3+1,c	;volatile
 14889  004AE2  0E00               	movlw	0
 14890  004AE4  6E7B               	movwf	_was_low_3,c	;volatile
 14891                           
 14892                           ;sort.c: 421: LATCbits.LATC0 = 1;
 14893  004AE6  808B               	bsf	3979,0,c	;volatile
 14894  004AE8  0012               	return		;funcret
 14895  004AEA                     __end_of_initServos:
 14896                           	opt stack 0
 14897                           tblptru	equ	0xFF8
 14898                           tblptrh	equ	0xFF7
 14899                           tblptrl	equ	0xFF6
 14900                           tablat	equ	0xFF5
 14901                           prodh	equ	0xFF4
 14902                           prodl	equ	0xFF3
 14903                           intcon	equ	0xFF2
 14904                           intcon2	equ	0xFF1
 14905                           intcon3	equ	0xFF0
 14906                           postinc0	equ	0xFEE
 14907                           wreg	equ	0xFE8
 14908                           postdec1	equ	0xFE5
 14909                           fsr1l	equ	0xFE1
 14910                           indf2	equ	0xFDF
 14911                           postinc2	equ	0xFDE
 14912                           postdec2	equ	0xFDD
 14913                           fsr2h	equ	0xFDA
 14914                           fsr2l	equ	0xFD9
 14915                           status	equ	0xFD8
 14916                           
 14917 ;; *************** function _updateServoPosition *****************
 14918 ;; Defined at:
 14919 ;;		line 489 in file "sort.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;  time_us         2    0[BANK0 ] int 
 14922 ;;  timer           2    2[BANK0 ] int 
 14923 ;; Auto vars:     Size  Location     Type
 14924 ;;  my_time         2    6[BANK0 ] unsigned int 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:        8 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    7
 14941 ;; This function calls:
 14942 ;;		Nothing
 14943 ;; This function is called by:
 14944 ;;		_Distribution
 14945 ;;		_initServos
 14946 ;;		_actuatorTest
 14947 ;;		_BothServos
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           	psect	text49
 14952  004554                     __ptext49:
 14953                           	opt stack 0
 14954  004554                     _updateServoPosition:
 14955                           	opt stack 20
 14956                           
 14957                           ;sort.c: 490: unsigned int my_time = 65535 - time_us;
 14958                           
 14959                           ;incstack = 0
 14960  004554  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14961  004558  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14962  00455C  0100               	movlb	0	; () banked
 14963  00455E  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14964  004560  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14965  004562  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14966  004564  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14967  004566  0EFF               	movlw	255
 14968  004568  0100               	movlb	0	; () banked
 14969  00456A  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14970  00456C  0100               	movlb	0	; () banked
 14971  00456E  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14972  004570  0EFF               	movlw	255
 14973  004572  0100               	movlb	0	; () banked
 14974  004574  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14975  004576  0100               	movlb	0	; () banked
 14976  004578  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14977                           
 14978                           ;sort.c: 491: switch(timer){
 14979  00457A  D01D               	goto	l6412
 14980  00457C                     l6406:
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;sort.c: 493: servoTimes[0] = my_time >> 8;
 14984  00457C  0100               	movlb	0	; () banked
 14985  00457E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14986  004580  0100               	movlb	0	; () banked
 14987  004582  6FDA               	movwf	_servoTimes& (0+255),b
 14988  004584  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 14989                           
 14990                           ;sort.c: 494: servoTimes[1] = my_time & 0xFF;
 14991  004586  0100               	movlb	0	; () banked
 14992  004588  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14993  00458A  0100               	movlb	0	; () banked
 14994  00458C  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 14995  00458E  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 14996                           
 14997                           ; BSR set to: 0
 14998                           ;sort.c: 496: pan_servo_state = time_us;
 14999  004590  C080  F06F         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 15000  004594  C081  F070         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 15001  004598                     l864:
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;sort.c: 498: servoTimes[2] = my_time >> 8;
 15005  004598  0100               	movlb	0	; () banked
 15006  00459A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15007  00459C  0100               	movlb	0	; () banked
 15008  00459E  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 15009  0045A0  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 15010                           
 15011                           ;sort.c: 499: servoTimes[3] = my_time & 0xFF;
 15012  0045A2  0100               	movlb	0	; () banked
 15013  0045A4  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15014  0045A6  0100               	movlb	0	; () banked
 15015  0045A8  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 15016  0045AA  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 15017                           
 15018                           ; BSR set to: 0
 15019                           ;sort.c: 501: tilt_servo_state = time_us;
 15020  0045AC  C080  F075         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 15021  0045B0  C081  F076         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 15022                           
 15023                           ;sort.c: 502: }
 15024  0045B4  0012               	return	
 15025  0045B6                     l6412:
 15026                           
 15027                           ; BSR set to: 0
 15028  0045B6  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15029  0045BA  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15030                           
 15031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15032                           ; Switch size 1, requested type "space"
 15033                           ; Number of cases is 1, Range of values is 0 to 0
 15034                           ; switch strategies available:
 15035                           ; Name         Instructions Cycles
 15036                           ; simple_byte            4     3 (average)
 15037                           ;	Chosen strategy is simple_byte
 15038  0045BE  0100               	movlb	0	; () banked
 15039  0045C0  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15040  0045C2  0A00               	xorlw	0	; case 0
 15041  0045C4  A4D8               	btfss	status,2,c
 15042  0045C6  0012               	return	
 15043                           
 15044                           ; BSR set to: 0
 15045                           ; Switch size 1, requested type "space"
 15046                           ; Number of cases is 2, Range of values is 1 to 3
 15047                           ; switch strategies available:
 15048                           ; Name         Instructions Cycles
 15049                           ; simple_byte            7     4 (average)
 15050                           ;	Chosen strategy is simple_byte
 15051  0045C8  0100               	movlb	0	; () banked
 15052  0045CA  5184               	movf	??_updateServoPosition& (0+255),w,b
 15053  0045CC  0A01               	xorlw	1	; case 1
 15054  0045CE  B4D8               	btfsc	status,2,c
 15055  0045D0  D7D5               	goto	l6406
 15056  0045D2  0A02               	xorlw	2	; case 3
 15057  0045D4  A4D8               	btfss	status,2,c
 15058  0045D6  0012               	return	
 15059  0045D8  D7DF               	goto	l864
 15060  0045DA                     __end_of_updateServoPosition:
 15061                           	opt stack 0
 15062                           tblptru	equ	0xFF8
 15063                           tblptrh	equ	0xFF7
 15064                           tblptrl	equ	0xFF6
 15065                           tablat	equ	0xFF5
 15066                           prodh	equ	0xFF4
 15067                           prodl	equ	0xFF3
 15068                           intcon	equ	0xFF2
 15069                           intcon2	equ	0xFF1
 15070                           intcon3	equ	0xFF0
 15071                           postinc0	equ	0xFEE
 15072                           wreg	equ	0xFE8
 15073                           postdec1	equ	0xFE5
 15074                           fsr1l	equ	0xFE1
 15075                           indf2	equ	0xFDF
 15076                           postinc2	equ	0xFDE
 15077                           postdec2	equ	0xFDD
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8
 15081                           
 15082 ;; *************** function _BlockerTest *****************
 15083 ;; Defined at:
 15084 ;;		line 589 in file "Test.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;  i               2   44[BANK0 ] int 
 15089 ;;  cond_flag       2   48[BANK0 ] int 
 15090 ;;  cam_flag        2   46[BANK0 ] int 
 15091 ;; Return value:  Size  Location     Type
 15092 ;;                  1    wreg      void 
 15093 ;; Registers used:
 15094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15095 ;; Tracked objects:
 15096 ;;		On entry : 0/0
 15097 ;;		On exit  : 0/0
 15098 ;;		Unchanged: 0/0
 15099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15103 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15104 ;;Total ram usage:        7 bytes
 15105 ;; Hardware stack levels used:    1
 15106 ;; Hardware stack levels required when called:   10
 15107 ;; This function calls:
 15108 ;;		_lcdInst
 15109 ;;		_printf
 15110 ;; This function is called by:
 15111 ;;		_Test
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           	psect	text50
 15116  003874                     __ptext50:
 15117                           	opt stack 0
 15118  003874                     _BlockerTest:
 15119                           	opt stack 19
 15120                           
 15121                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;incstack = 0
 15125  003874  0E01               	movlw	1
 15126  003876  EC5D  F029         	call	_lcdInst
 15127  00387A  0E68               	movlw	104
 15128  00387C  0100               	movlb	0	; () banked
 15129  00387E  6FAB               	movwf	??_BlockerTest& (0+255),b
 15130  003880  0EE4               	movlw	228
 15131  003882                     u9967:
 15132  003882  2EE8               	decfsz	wreg,f,c
 15133  003884  D7FE               	bra	u9967
 15134  003886  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 15135  003888  D7FC               	bra	u9967
 15136  00388A  F000               	nop	
 15137  00388C  0E80               	movlw	128
 15138  00388E  EC5D  F029         	call	_lcdInst
 15139                           
 15140                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15141  003892  0E7B               	movlw	low STR_123
 15142  003894  0100               	movlb	0	; () banked
 15143  003896  6F8E               	movwf	printf@f& (0+255),b
 15144  003898  0EFB               	movlw	high STR_123
 15145  00389A  0100               	movlb	0	; () banked
 15146  00389C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15147  00389E  A480               	btfss	3968,2,c	;volatile
 15148  0038A0  D004               	goto	u6930
 15149  0038A2  0100               	movlb	0	; () banked
 15150  0038A4  6BAB               	clrf	??_BlockerTest& (0+255),b
 15151  0038A6  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15152  0038A8  D002               	goto	u6938
 15153  0038AA                     u6930:
 15154  0038AA  0100               	movlb	0	; () banked
 15155  0038AC  6BAB               	clrf	??_BlockerTest& (0+255),b
 15156  0038AE                     u6938:
 15157  0038AE  0100               	movlb	0	; () banked
 15158  0038B0  51AB               	movf	??_BlockerTest& (0+255),w,b
 15159  0038B2  0100               	movlb	0	; () banked
 15160  0038B4  6F90               	movwf	(?_printf+2)& (0+255),b
 15161  0038B6  6B91               	clrf	(?_printf+3)& (0+255),b
 15162  0038B8  EC02  F00B         	call	_printf	;wreg free
 15163                           
 15164                           ;Test.c: 592: lcdInst(0b11000000);;
 15165  0038BC  0EC0               	movlw	192
 15166  0038BE  EC5D  F029         	call	_lcdInst
 15167                           
 15168                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 15169  0038C2  0E69               	movlw	low STR_124
 15170  0038C4  0100               	movlb	0	; () banked
 15171  0038C6  6F8E               	movwf	printf@f& (0+255),b
 15172  0038C8  0EFB               	movlw	high STR_124
 15173  0038CA  0100               	movlb	0	; () banked
 15174  0038CC  6F8F               	movwf	(printf@f+1)& (0+255),b
 15175  0038CE  EC02  F00B         	call	_printf	;wreg free
 15176                           
 15177                           ;Test.c: 594: int cam_flag = 1;
 15178  0038D2  0E00               	movlw	0
 15179  0038D4  0100               	movlb	0	; () banked
 15180  0038D6  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 15181  0038D8  0E01               	movlw	1
 15182  0038DA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;Test.c: 595: int cond_flag = 0;
 15186  0038DC  0E00               	movlw	0
 15187  0038DE  0100               	movlb	0	; () banked
 15188  0038E0  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 15189  0038E2  0E00               	movlw	0
 15190  0038E4  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 15194                           
 15195                           ;Test.c: 596: while(1){
 15196  0038E6  D018               	goto	l8326
 15197  0038E8                     l8322:
 15198                           
 15199                           ;Test.c: 598: lcdInst(0b10000000);;
 15200  0038E8  0E80               	movlw	128
 15201  0038EA  EC5D  F029         	call	_lcdInst
 15202                           
 15203                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15204  0038EE  0E7B               	movlw	low STR_123
 15205  0038F0  0100               	movlb	0	; () banked
 15206  0038F2  6F8E               	movwf	printf@f& (0+255),b
 15207  0038F4  0EFB               	movlw	high STR_123
 15208  0038F6  0100               	movlb	0	; () banked
 15209  0038F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 15210  0038FA  A480               	btfss	3968,2,c	;volatile
 15211  0038FC  D004               	goto	u6940
 15212  0038FE  0100               	movlb	0	; () banked
 15213  003900  6BAB               	clrf	??_BlockerTest& (0+255),b
 15214  003902  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15215  003904  D002               	goto	u6948
 15216  003906                     u6940:
 15217  003906  0100               	movlb	0	; () banked
 15218  003908  6BAB               	clrf	??_BlockerTest& (0+255),b
 15219  00390A                     u6948:
 15220  00390A  0100               	movlb	0	; () banked
 15221  00390C  51AB               	movf	??_BlockerTest& (0+255),w,b
 15222  00390E  0100               	movlb	0	; () banked
 15223  003910  6F90               	movwf	(?_printf+2)& (0+255),b
 15224  003912  6B91               	clrf	(?_printf+3)& (0+255),b
 15225  003914  EC02  F00B         	call	_printf	;wreg free
 15226  003918                     l8326:
 15227  003918  A281               	btfss	3969,1,c	;volatile
 15228  00391A  D7E6               	goto	l8322
 15229                           
 15230                           ;Test.c: 600: }
 15231                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15232  00391C  3881               	swapf	3969,w,c	;volatile
 15233  00391E  0B0F               	andlw	15
 15234  003920  0A0F               	xorlw	15
 15235  003922  B4D8               	btfsc	status,2,c
 15236  003924  0012               	return	
 15237                           
 15238                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15239                           
 15240                           ;Test.c: 603: }
 15241                           
 15242                           ;Test.c: 602: break;
 15243  003926  3881               	swapf	3969,w,c	;volatile
 15244  003928  0B0F               	andlw	15
 15245  00392A  06E8               	decf	wreg,f,c
 15246  00392C  A4D8               	btfss	status,2,c
 15247  00392E  D016               	goto	l8344
 15248                           
 15249                           ;Test.c: 605: if(cond_flag){
 15250  003930  0100               	movlb	0	; () banked
 15251  003932  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15252  003934  0100               	movlb	0	; () banked
 15253  003936  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15254  003938  B4D8               	btfsc	status,2,c
 15255  00393A  D007               	goto	l1365
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15259  00393C  8689               	bsf	3977,3,c	;volatile
 15260  00393E  D006               	goto	l8342
 15261  003940                     u6991:
 15262  003940  0E01               	movlw	1
 15263  003942                     u7000:
 15264  003942  0100               	movlb	0	; () banked
 15265  003944  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15266  003946  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15267                           
 15268                           ;Test.c: 608: }
 15269  003948  D054               	goto	l8368
 15270  00394A                     l1365:
 15271                           
 15272                           ; BSR set to: 0
 15273                           ;Test.c: 609: else{
 15274                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15275  00394A  9689               	bcf	3977,3,c	;volatile
 15276  00394C                     l8342:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;Test.c: 611: cond_flag = !cond_flag;
 15280  00394C  0100               	movlb	0	; () banked
 15281  00394E  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15282  003950  0100               	movlb	0	; () banked
 15283  003952  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15284  003954  B4D8               	btfsc	status,2,c
 15285  003956  D7F4               	goto	u6991
 15286  003958  0E00               	movlw	0
 15287  00395A  D7F3               	goto	u7000
 15288  00395C                     l8344:
 15289                           
 15290                           ;Test.c: 614: else{
 15291                           ;Test.c: 615: if(cam_flag){
 15292  00395C  0100               	movlb	0	; () banked
 15293  00395E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15294  003960  0100               	movlb	0	; () banked
 15295  003962  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15296  003964  B4D8               	btfsc	status,2,c
 15297  003966  D007               	goto	l8350
 15298                           
 15299                           ; BSR set to: 0
 15300                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15301  003968  808B               	bsf	3979,0,c	;volatile
 15302  00396A  D023               	goto	l8362
 15303  00396C                     u7041:
 15304  00396C  0E01               	movlw	1
 15305  00396E                     u7050:
 15306  00396E  0100               	movlb	0	; () banked
 15307  003970  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15308  003972  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15309                           
 15310                           ;Test.c: 618: }
 15311  003974  D03E               	goto	l8368
 15312  003976                     l8350:
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;Test.c: 619: else{
 15316                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15317  003976  0E00               	movlw	0
 15318  003978  0100               	movlb	0	; () banked
 15319  00397A  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15320  00397C  0E00               	movlw	0
 15321  00397E  6FAC               	movwf	BlockerTest@i& (0+255),b
 15322  003980                     l8352:
 15323                           
 15324                           ; BSR set to: 0
 15325  003980  0100               	movlb	0	; () banked
 15326  003982  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15327  003984  D008               	goto	l1370
 15328  003986  0E88               	movlw	136
 15329  003988  0100               	movlb	0	; () banked
 15330  00398A  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15331  00398C  0E13               	movlw	19
 15332  00398E  0100               	movlb	0	; () banked
 15333  003990  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15334  003992  B0D8               	btfsc	status,0,c
 15335  003994  D00D               	goto	l1371
 15336  003996                     l1370:
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;Test.c: 621: {
 15340                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15341  003996  808B               	bsf	3979,0,c	;volatile
 15342                           
 15343                           ; BSR set to: 0
 15344                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15345  003998  0E1A               	movlw	26
 15346  00399A                     u9977:
 15347  00399A  2EE8               	decfsz	wreg,f,c
 15348  00399C  D7FE               	bra	u9977
 15349  00399E  D000               	nop2	
 15350                           
 15351                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15352  0039A0  908B               	bcf	3979,0,c	;volatile
 15353                           
 15354                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15355  0039A2  0EF0               	movlw	240
 15356  0039A4                     u9987:
 15357  0039A4  2EE8               	decfsz	wreg,f,c
 15358  0039A6  D7FE               	bra	u9987
 15359  0039A8  0100               	movlb	0	; () banked
 15360  0039AA  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15361  0039AC  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15362  0039AE  D7E8               	goto	l8352
 15363  0039B0                     l1371:
 15364                           
 15365                           ; BSR set to: 0
 15366                           ;Test.c: 626: }
 15367                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15368  0039B0  908B               	bcf	3979,0,c	;volatile
 15369  0039B2                     l8362:
 15370                           
 15371                           ; BSR set to: 0
 15372                           ;Test.c: 628: cam_flag = !cam_flag;
 15373  0039B2  0100               	movlb	0	; () banked
 15374  0039B4  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15375  0039B6  0100               	movlb	0	; () banked
 15376  0039B8  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15377  0039BA  B4D8               	btfsc	status,2,c
 15378  0039BC  D7D7               	goto	u7041
 15379  0039BE  0E00               	movlw	0
 15380  0039C0  D7D6               	goto	u7050
 15381  0039C2                     l8364:
 15382                           
 15383                           ;Test.c: 633: lcdInst(0b10000000);;
 15384  0039C2  0E80               	movlw	128
 15385  0039C4  EC5D  F029         	call	_lcdInst
 15386                           
 15387                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15388  0039C8  0E7B               	movlw	low STR_123
 15389  0039CA  0100               	movlb	0	; () banked
 15390  0039CC  6F8E               	movwf	printf@f& (0+255),b
 15391  0039CE  0EFB               	movlw	high STR_123
 15392  0039D0  0100               	movlb	0	; () banked
 15393  0039D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 15394  0039D4  A480               	btfss	3968,2,c	;volatile
 15395  0039D6  D004               	goto	u7100
 15396  0039D8  0100               	movlb	0	; () banked
 15397  0039DA  6BAB               	clrf	??_BlockerTest& (0+255),b
 15398  0039DC  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15399  0039DE  D002               	goto	u7108
 15400  0039E0                     u7100:
 15401  0039E0  0100               	movlb	0	; () banked
 15402  0039E2  6BAB               	clrf	??_BlockerTest& (0+255),b
 15403  0039E4                     u7108:
 15404  0039E4  0100               	movlb	0	; () banked
 15405  0039E6  51AB               	movf	??_BlockerTest& (0+255),w,b
 15406  0039E8  0100               	movlb	0	; () banked
 15407  0039EA  6F90               	movwf	(?_printf+2)& (0+255),b
 15408  0039EC  6B91               	clrf	(?_printf+3)& (0+255),b
 15409  0039EE  EC02  F00B         	call	_printf	;wreg free
 15410  0039F2                     l8368:
 15411  0039F2  A281               	btfss	3969,1,c	;volatile
 15412  0039F4  D791               	goto	l8326
 15413  0039F6  D7E5               	goto	l8364
 15414  0039F8                     __end_of_BlockerTest:
 15415                           	opt stack 0
 15416                           tblptru	equ	0xFF8
 15417                           tblptrh	equ	0xFF7
 15418                           tblptrl	equ	0xFF6
 15419                           tablat	equ	0xFF5
 15420                           prodh	equ	0xFF4
 15421                           prodl	equ	0xFF3
 15422                           intcon	equ	0xFF2
 15423                           intcon2	equ	0xFF1
 15424                           intcon3	equ	0xFF0
 15425                           postinc0	equ	0xFEE
 15426                           wreg	equ	0xFE8
 15427                           postdec1	equ	0xFE5
 15428                           fsr1l	equ	0xFE1
 15429                           indf2	equ	0xFDF
 15430                           postinc2	equ	0xFDE
 15431                           postdec2	equ	0xFDD
 15432                           fsr2h	equ	0xFDA
 15433                           fsr2l	equ	0xFD9
 15434                           status	equ	0xFD8
 15435                           
 15436 ;; *************** function _printf *****************
 15437 ;; Defined at:
 15438 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15441 ;;		 -> STR_126(18), STR_125(18), STR_124(18), STR_123(18), 
 15442 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 15443 ;;		 -> STR_118(3), STR_117(15), STR_116(3), STR_115(15), 
 15444 ;;		 -> STR_114(11), STR_113(18), STR_112(18), STR_111(17), 
 15445 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 15446 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 15447 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 15448 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 15449 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 15450 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 15451 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 15452 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 15453 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 15454 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 15455 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 15456 ;;		 -> STR_66(4), STR_65(13), STR_64(11), STR_63(24), 
 15457 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 15458 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 15459 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 15460 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 15461 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 15462 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 15463 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 15464 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 15465 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 15466 ;;		 -> STR_1(18), 
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;  tmpval          4    0        struct .
 15469 ;;  width           2   41[BANK0 ] int 
 15470 ;;  val             2   37[BANK0 ] unsigned int 
 15471 ;;  len             2   35[BANK0 ] unsigned int 
 15472 ;;  ap              2   33[BANK0 ] PTR void [1]
 15473 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15474 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15475 ;;		 -> STR_127(7), count_total(2), printRTC@month(4), UI@month(4), 
 15476 ;;  c               1   40[BANK0 ] char 
 15477 ;;  flag            1   39[BANK0 ] unsigned char 
 15478 ;;  prec            1   30[BANK0 ] char 
 15479 ;; Return value:  Size  Location     Type
 15480 ;;                  2   14[BANK0 ] int 
 15481 ;; Registers used:
 15482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15483 ;; Tracked objects:
 15484 ;;		On entry : 0/0
 15485 ;;		On exit  : 0/0
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15488 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;Total ram usage:       29 bytes
 15493 ;; Hardware stack levels used:    1
 15494 ;; Hardware stack levels required when called:    9
 15495 ;; This function calls:
 15496 ;;		___lwdiv
 15497 ;;		___lwmod
 15498 ;;		___wmul
 15499 ;;		_isdigit
 15500 ;;		_putch
 15501 ;; This function is called by:
 15502 ;;		_UI
 15503 ;;		_change_state_to_menu_start
 15504 ;;		_change_state_to_menu_12
 15505 ;;		_change_state_to_menu_22
 15506 ;;		_printRTC
 15507 ;;		_EEPROM_write
 15508 ;;		_Test
 15509 ;;		_algorithmTest
 15510 ;;		_sensorTest
 15511 ;;		_actuatorTest
 15512 ;;		_BothServos
 15513 ;;		_PortTestA5
 15514 ;;		_PusherTest
 15515 ;;		_SpeedTest
 15516 ;;		_BlockerTest
 15517 ;;		_ToggleTestA5
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           	psect	text51
 15522  001604                     __ptext51:
 15523                           	opt stack 0
 15524  001604                     _printf:
 15525                           	opt stack 18
 15526                           
 15527                           ;doprnt.c: 466: va_list ap;
 15528                           ;doprnt.c: 499: signed char c;
 15529                           ;doprnt.c: 501: int width;
 15530                           ;doprnt.c: 506: signed char prec;
 15531                           ;doprnt.c: 508: unsigned char flag;
 15532                           ;doprnt.c: 523: union {
 15533                           ;doprnt.c: 524: unsigned long vd;
 15534                           ;doprnt.c: 525: double integ;
 15535                           ;doprnt.c: 526: } tmpval;
 15536                           ;doprnt.c: 528: unsigned int val;
 15537                           ;doprnt.c: 529: unsigned len;
 15538                           ;doprnt.c: 530: const char * cp;
 15539                           ;doprnt.c: 533: *ap = __va_start();
 15540                           
 15541                           ;incstack = 0
 15542  001604  0E90               	movlw	low (?_printf+2)
 15543  001606  0100               	movlb	0	; () banked
 15544  001608  6FA1               	movwf	printf@ap& (0+255),b
 15545  00160A  0E00               	movlw	high (?_printf+2)
 15546  00160C  0100               	movlb	0	; () banked
 15547  00160E  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15548                           
 15549                           ;doprnt.c: 536: while(c = *f++) {
 15550  001610  D205               	goto	l6366
 15551  001612                     l6236:
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;doprnt.c: 538: if(c != '%')
 15555  001612  0E25               	movlw	37
 15556  001614  0100               	movlb	0	; () banked
 15557  001616  19A8               	xorwf	printf@c& (0+255),w,b
 15558  001618  B4D8               	btfsc	status,2,c
 15559  00161A  D005               	goto	l6240
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;doprnt.c: 540: {
 15563                           ;doprnt.c: 541: (putch(c) );
 15564  00161C  0100               	movlb	0	; () banked
 15565  00161E  51A8               	movf	printf@c& (0+255),w,b
 15566  001620  EC55  F029         	call	_putch
 15567                           
 15568                           ;doprnt.c: 542: continue;
 15569  001624  D1FB               	goto	l6366
 15570  001626                     l6240:
 15571                           
 15572                           ;doprnt.c: 543: }
 15573                           ;doprnt.c: 546: width = 0;
 15574  001626  0E00               	movlw	0
 15575  001628  0100               	movlb	0	; () banked
 15576  00162A  6FAA               	movwf	(printf@width+1)& (0+255),b
 15577  00162C  0E00               	movlw	0
 15578  00162E  6FA9               	movwf	printf@width& (0+255),b
 15579                           
 15580                           ;doprnt.c: 548: flag = 0;
 15581  001630  0E00               	movlw	0
 15582  001632  0100               	movlb	0	; () banked
 15583  001634  6FA7               	movwf	printf@flag& (0+255),b
 15584                           
 15585                           ; BSR set to: 0
 15586                           ;doprnt.c: 551: switch(*f) {
 15587                           
 15588                           ;doprnt.c: 550: for(;;) {
 15589  001636  D005               	goto	l6246
 15590  001638                     l6242:
 15591                           
 15592                           ;doprnt.c: 580: flag |= 0x04;
 15593  001638  0100               	movlb	0	; () banked
 15594  00163A  85A7               	bsf	printf@flag& (0+255),2,b
 15595                           
 15596                           ;doprnt.c: 581: f++;
 15597  00163C  0100               	movlb	0	; () banked
 15598  00163E  4B8E               	infsnz	printf@f& (0+255),f,b
 15599  001640  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15600  001642                     l6246:
 15601  001642  C08E  FFF6         	movff	printf@f,tblptrl
 15602  001646  C08F  FFF7         	movff	printf@f+1,tblptrh
 15603  00164A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15604  00164A  6AF8               	clrf	tblptru,c
 15605  00164C                     	endif
 15606  00164C                     	if	0	;tblptru may be non-zero
 15607  00164C                     	endif
 15608  00164C  0008               	tblrd		*
 15609  00164E  50F5               	movf	tablat,w,c
 15610                           
 15611                           ; Switch size 1, requested type "space"
 15612                           ; Number of cases is 1, Range of values is 48 to 48
 15613                           ; switch strategies available:
 15614                           ; Name         Instructions Cycles
 15615                           ; simple_byte            4     3 (average)
 15616                           ;	Chosen strategy is simple_byte
 15617  001650  0A30               	xorlw	48	; case 48
 15618  001652  B4D8               	btfsc	status,2,c
 15619  001654  D7F1               	goto	l6242
 15620                           
 15621                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15622                           
 15623                           ;doprnt.c: 586: }
 15624                           
 15625                           ;doprnt.c: 585: break;
 15626  001656  C08E  FFF6         	movff	printf@f,tblptrl
 15627  00165A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15628  00165E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15629  00165E  6AF8               	clrf	tblptru,c
 15630  001660                     	endif
 15631  001660                     	if	0	;tblptru may be non-zero
 15632  001660                     	endif
 15633  001660  0008               	tblrd		*
 15634  001662  50F5               	movf	tablat,w,c
 15635  001664  EC6A  F028         	call	_isdigit
 15636  001668  A0D8               	btfss	status,0,c
 15637  00166A  D0D2               	goto	l6294
 15638                           
 15639                           ;doprnt.c: 598: width = 0;
 15640  00166C  0E00               	movlw	0
 15641  00166E  0100               	movlb	0	; () banked
 15642  001670  6FAA               	movwf	(printf@width+1)& (0+255),b
 15643  001672  0E00               	movlw	0
 15644  001674  6FA9               	movwf	printf@width& (0+255),b
 15645  001676                     l6252:
 15646                           
 15647                           ;doprnt.c: 600: width *= 10;
 15648  001676  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15649  00167A  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15650  00167E  0E00               	movlw	0
 15651  001680  0100               	movlb	0	; () banked
 15652  001682  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15653  001684  0E0A               	movlw	10
 15654  001686  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15655  001688  ECD3  F026         	call	___wmul	;wreg free
 15656  00168C  C080  F0A9         	movff	?___wmul,printf@width
 15657  001690  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15658                           
 15659                           ;doprnt.c: 601: width += *f++ - '0';
 15660  001694  0ED0               	movlw	208
 15661  001696  0100               	movlb	0	; () banked
 15662  001698  6F9A               	movwf	??_printf& (0+255),b
 15663  00169A  0EFF               	movlw	255
 15664  00169C  0100               	movlb	0	; () banked
 15665  00169E  6F9B               	movwf	(??_printf+1)& (0+255),b
 15666  0016A0  C08E  FFF6         	movff	printf@f,tblptrl
 15667  0016A4  C08F  FFF7         	movff	printf@f+1,tblptrh
 15668  0016A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15669  0016A8  6AF8               	clrf	tblptru,c
 15670  0016AA                     	endif
 15671  0016AA                     	if	0	;tblptru may be non-zero
 15672  0016AA                     	endif
 15673  0016AA  0008               	tblrd		*
 15674  0016AC  50F5               	movf	tablat,w,c
 15675  0016AE  0100               	movlb	0	; () banked
 15676  0016B0  6F9C               	movwf	(??_printf+2)& (0+255),b
 15677  0016B2  6B9D               	clrf	(??_printf+3)& (0+255),b
 15678  0016B4  0100               	movlb	0	; () banked
 15679  0016B6  519A               	movf	??_printf& (0+255),w,b
 15680  0016B8  0100               	movlb	0	; () banked
 15681  0016BA  279C               	addwf	(??_printf+2)& (0+255),f,b
 15682  0016BC  0100               	movlb	0	; () banked
 15683  0016BE  519B               	movf	(??_printf+1)& (0+255),w,b
 15684  0016C0  0100               	movlb	0	; () banked
 15685  0016C2  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15686  0016C4  0100               	movlb	0	; () banked
 15687  0016C6  519C               	movf	(??_printf+2)& (0+255),w,b
 15688  0016C8  0100               	movlb	0	; () banked
 15689  0016CA  27A9               	addwf	printf@width& (0+255),f,b
 15690  0016CC  0100               	movlb	0	; () banked
 15691  0016CE  519D               	movf	(??_printf+3)& (0+255),w,b
 15692  0016D0  0100               	movlb	0	; () banked
 15693  0016D2  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15694                           
 15695                           ; BSR set to: 0
 15696  0016D4  0100               	movlb	0	; () banked
 15697  0016D6  4B8E               	infsnz	printf@f& (0+255),f,b
 15698  0016D8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15702  0016DA  C08E  FFF6         	movff	printf@f,tblptrl
 15703  0016DE  C08F  FFF7         	movff	printf@f+1,tblptrh
 15704  0016E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15705  0016E2  6AF8               	clrf	tblptru,c
 15706  0016E4                     	endif
 15707  0016E4                     	if	0	;tblptru may be non-zero
 15708  0016E4                     	endif
 15709  0016E4  0008               	tblrd		*
 15710  0016E6  50F5               	movf	tablat,w,c
 15711  0016E8  EC6A  F028         	call	_isdigit
 15712  0016EC  A0D8               	btfss	status,0,c
 15713  0016EE  D090               	goto	l6294
 15714  0016F0  D7C2               	goto	l6252
 15715  0016F2                     l6260:
 15716                           
 15717                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15718  0016F2  C0A1  FFD9         	movff	printf@ap,fsr2l
 15719  0016F6  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15720  0016FA  CFDE F09F          	movff	postinc2,printf@cp
 15721  0016FE  CFDD F0A0          	movff	postdec2,printf@cp+1
 15722  001702  0E02               	movlw	2
 15723  001704  0100               	movlb	0	; () banked
 15724  001706  27A1               	addwf	printf@ap& (0+255),f,b
 15725  001708  0E00               	movlw	0
 15726  00170A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15727                           
 15728                           ; BSR set to: 0
 15729                           ;doprnt.c: 740: if(!cp)
 15730  00170C  0100               	movlb	0	; () banked
 15731  00170E  519F               	movf	printf@cp& (0+255),w,b
 15732  001710  0100               	movlb	0	; () banked
 15733  001712  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15734  001714  A4D8               	btfss	status,2,c
 15735  001716  D006               	goto	l6268
 15736                           
 15737                           ; BSR set to: 0
 15738                           ;doprnt.c: 741: cp = "(null)";
 15739  001718  0EB2               	movlw	low STR_127
 15740  00171A  0100               	movlb	0	; () banked
 15741  00171C  6F9F               	movwf	printf@cp& (0+255),b
 15742  00171E  0EFF               	movlw	high STR_127
 15743  001720  0100               	movlb	0	; () banked
 15744  001722  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15745  001724                     l6268:
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;doprnt.c: 745: len = 0;
 15749  001724  0E00               	movlw	0
 15750  001726  0100               	movlb	0	; () banked
 15751  001728  6FA4               	movwf	(printf@len+1)& (0+255),b
 15752  00172A  0E00               	movlw	0
 15753  00172C  6FA3               	movwf	printf@len& (0+255),b
 15754                           
 15755                           ;doprnt.c: 746: while(cp[len])
 15756  00172E  D003               	goto	l6272
 15757  001730                     l6270:
 15758                           
 15759                           ;doprnt.c: 747: len++;
 15760  001730  0100               	movlb	0	; () banked
 15761  001732  4BA3               	infsnz	printf@len& (0+255),f,b
 15762  001734  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15763  001736                     l6272:
 15764                           
 15765                           ; BSR set to: 0
 15766  001736  0100               	movlb	0	; () banked
 15767  001738  51A3               	movf	printf@len& (0+255),w,b
 15768  00173A  0100               	movlb	0	; () banked
 15769  00173C  259F               	addwf	printf@cp& (0+255),w,b
 15770  00173E  0100               	movlb	0	; () banked
 15771  001740  6F9A               	movwf	??_printf& (0+255),b
 15772  001742  0100               	movlb	0	; () banked
 15773  001744  51A4               	movf	(printf@len+1)& (0+255),w,b
 15774  001746  0100               	movlb	0	; () banked
 15775  001748  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15776  00174A  0100               	movlb	0	; () banked
 15777  00174C  6F9B               	movwf	(??_printf+1)& (0+255),b
 15778  00174E  C09A  FFF6         	movff	??_printf,tblptrl
 15779  001752  C09B  FFF7         	movff	??_printf+1,tblptrh
 15780  001756  0E00               	movlw	low (__mediumconst shr (0+16))
 15781  001758  6EF8               	movwf	tblptru,c
 15782  00175A  0E0F               	movlw	(high __ramtop+-1)
 15783  00175C  64F7               	cpfsgt	tblptrh,c
 15784  00175E  D003               	bra	u4587
 15785  001760  0008               	tblrd		*
 15786  001762  50F5               	movf	tablat,w,c
 15787  001764  D005               	bra	u4580
 15788  001766                     u4587:
 15789  001766  CFF6 FFE9          	movff	tblptrl,fsr0l
 15790  00176A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15791  00176E  50EF               	movf	indf0,w,c
 15792  001770                     u4580:
 15793  001770  0900               	iorlw	0
 15794  001772  A4D8               	btfss	status,2,c
 15795  001774  D7DD               	goto	l6270
 15796                           
 15797                           ;doprnt.c: 757: if(width > len)
 15798  001776  0100               	movlb	0	; () banked
 15799  001778  51A9               	movf	printf@width& (0+255),w,b
 15800  00177A  0100               	movlb	0	; () banked
 15801  00177C  5DA3               	subwf	printf@len& (0+255),w,b
 15802  00177E  0100               	movlb	0	; () banked
 15803  001780  51AA               	movf	(printf@width+1)& (0+255),w,b
 15804  001782  0100               	movlb	0	; () banked
 15805  001784  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15806  001786  B0D8               	btfsc	status,0,c
 15807  001788  D009               	goto	l6278
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;doprnt.c: 758: width -= len;
 15811  00178A  0100               	movlb	0	; () banked
 15812  00178C  51A3               	movf	printf@len& (0+255),w,b
 15813  00178E  0100               	movlb	0	; () banked
 15814  001790  5FA9               	subwf	printf@width& (0+255),f,b
 15815  001792  0100               	movlb	0	; () banked
 15816  001794  51A4               	movf	(printf@len+1)& (0+255),w,b
 15817  001796  0100               	movlb	0	; () banked
 15818  001798  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15819  00179A  D009               	goto	l6282
 15820  00179C                     l6278:
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;doprnt.c: 759: else
 15824                           ;doprnt.c: 760: width = 0;
 15825  00179C  0E00               	movlw	0
 15826  00179E  0100               	movlb	0	; () banked
 15827  0017A0  6FAA               	movwf	(printf@width+1)& (0+255),b
 15828  0017A2  0E00               	movlw	0
 15829  0017A4  6FA9               	movwf	printf@width& (0+255),b
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;doprnt.c: 764: while(width--)
 15833  0017A6  D003               	goto	l6282
 15834  0017A8                     l6280:
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;doprnt.c: 765: (putch(' ') );
 15838  0017A8  0E20               	movlw	32
 15839  0017AA  EC55  F029         	call	_putch
 15840  0017AE                     l6282:
 15841  0017AE  0100               	movlb	0	; () banked
 15842  0017B0  07A9               	decf	printf@width& (0+255),f,b
 15843  0017B2  A0D8               	btfss	status,0,c
 15844  0017B4  07AA               	decf	(printf@width+1)& (0+255),f,b
 15845  0017B6  0100               	movlb	0	; () banked
 15846  0017B8  29A9               	incf	printf@width& (0+255),w,b
 15847  0017BA  E1F6               	bnz	l6280
 15848  0017BC  0100               	movlb	0	; () banked
 15849  0017BE  29AA               	incf	(printf@width+1)& (0+255),w,b
 15850  0017C0  B4D8               	btfsc	status,2,c
 15851  0017C2  D017               	goto	l6288
 15852  0017C4  D7F1               	goto	l6280
 15853  0017C6                     l6284:
 15854                           
 15855                           ; BSR set to: 0
 15856                           ;doprnt.c: 768: (putch(*cp++) );
 15857  0017C6  C09F  FFF6         	movff	printf@cp,tblptrl
 15858  0017CA  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15859  0017CE  0E00               	movlw	low (__mediumconst shr (0+16))
 15860  0017D0  6EF8               	movwf	tblptru,c
 15861  0017D2  0E0F               	movlw	(high __ramtop+-1)
 15862  0017D4  64F7               	cpfsgt	tblptrh,c
 15863  0017D6  D003               	bra	u4627
 15864  0017D8  0008               	tblrd		*
 15865  0017DA  50F5               	movf	tablat,w,c
 15866  0017DC  D005               	bra	u4620
 15867  0017DE                     u4627:
 15868  0017DE  CFF6 FFE9          	movff	tblptrl,fsr0l
 15869  0017E2  CFF7 FFEA          	movff	tblptrh,fsr0h
 15870  0017E6  50EF               	movf	indf0,w,c
 15871  0017E8                     u4620:
 15872  0017E8  EC55  F029         	call	_putch
 15873  0017EC  0100               	movlb	0	; () banked
 15874  0017EE  4B9F               	infsnz	printf@cp& (0+255),f,b
 15875  0017F0  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15876  0017F2                     l6288:
 15877                           
 15878                           ; BSR set to: 0
 15879  0017F2  0100               	movlb	0	; () banked
 15880  0017F4  07A3               	decf	printf@len& (0+255),f,b
 15881  0017F6  A0D8               	btfss	status,0,c
 15882  0017F8  07A4               	decf	(printf@len+1)& (0+255),f,b
 15883  0017FA  0100               	movlb	0	; () banked
 15884  0017FC  29A3               	incf	printf@len& (0+255),w,b
 15885  0017FE  E1E3               	bnz	l6284
 15886  001800  0100               	movlb	0	; () banked
 15887  001802  29A4               	incf	(printf@len+1)& (0+255),w,b
 15888  001804  B4D8               	btfsc	status,2,c
 15889  001806  D10A               	goto	l6366
 15890  001808  D7DE               	goto	l6284
 15891  00180A                     l6290:
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;doprnt.c: 818: flag |= 0x40;
 15895  00180A  0100               	movlb	0	; () banked
 15896  00180C  8DA7               	bsf	printf@flag& (0+255),6,b
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;doprnt.c: 822: }
 15900                           
 15901                           ;doprnt.c: 819: break;
 15902  00180E  D01D               	goto	l1406
 15903  001810                     l6294:
 15904  001810  C08E  FFF6         	movff	printf@f,tblptrl
 15905  001814  C08F  FFF7         	movff	printf@f+1,tblptrh
 15906  001818  0100               	movlb	0	; () banked
 15907  00181A  4B8E               	infsnz	printf@f& (0+255),f,b
 15908  00181C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15909  00181E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15910  00181E  6AF8               	clrf	tblptru,c
 15911  001820                     	endif
 15912  001820                     	if	0	;tblptru may be non-zero
 15913  001820                     	endif
 15914  001820  0008               	tblrd		*
 15915  001822  CFF5 F0A8          	movff	tablat,printf@c
 15916  001826  0100               	movlb	0	; () banked
 15917  001828  51A8               	movf	printf@c& (0+255),w,b
 15918                           
 15919                           ; Switch size 1, requested type "space"
 15920                           ; Number of cases is 5, Range of values is 0 to 117
 15921                           ; switch strategies available:
 15922                           ; Name         Instructions Cycles
 15923                           ; simple_byte           16     9 (average)
 15924                           ;	Chosen strategy is simple_byte
 15925  00182A  0A00               	xorlw	0	; case 0
 15926  00182C  B4D8               	btfsc	status,2,c
 15927  00182E  0012               	return	
 15928  001830  0A64               	xorlw	100	; case 100
 15929  001832  B4D8               	btfsc	status,2,c
 15930  001834  D00A               	goto	l1406
 15931  001836  0A0D               	xorlw	13	; case 105
 15932  001838  B4D8               	btfsc	status,2,c
 15933  00183A  D007               	goto	l1406
 15934  00183C  0A1A               	xorlw	26	; case 115
 15935  00183E  B4D8               	btfsc	status,2,c
 15936  001840  D758               	goto	l6260
 15937  001842  0A06               	xorlw	6	; case 117
 15938  001844  B4D8               	btfsc	status,2,c
 15939  001846  D7E1               	goto	l6290
 15940  001848  D0E9               	goto	l6366
 15941  00184A                     l1406:
 15942                           
 15943                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15944  00184A  0100               	movlb	0	; () banked
 15945  00184C  BDA7               	btfsc	printf@flag& (0+255),6,b
 15946  00184E  D019               	goto	l6306
 15947                           
 15948                           ; BSR set to: 0
 15949                           ;doprnt.c: 1253: {
 15950                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15951  001850  C0A1  FFD9         	movff	printf@ap,fsr2l
 15952  001854  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15953  001858  CFDE F0A5          	movff	postinc2,printf@val
 15954  00185C  CFDD F0A6          	movff	postdec2,printf@val+1
 15955                           
 15956                           ; BSR set to: 0
 15957  001860  0E02               	movlw	2
 15958  001862  0100               	movlb	0	; () banked
 15959  001864  27A1               	addwf	printf@ap& (0+255),f,b
 15960  001866  0E00               	movlw	0
 15961  001868  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;doprnt.c: 1261: if((int)val < 0) {
 15965  00186A  0100               	movlb	0	; () banked
 15966  00186C  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15967  00186E  D016               	goto	l6310
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;doprnt.c: 1262: flag |= 0x03;
 15971  001870  0E03               	movlw	3
 15972  001872  0100               	movlb	0	; () banked
 15973  001874  13A7               	iorwf	printf@flag& (0+255),f,b
 15974                           
 15975                           ; BSR set to: 0
 15976                           ;doprnt.c: 1263: val = -val;
 15977  001876  0100               	movlb	0	; () banked
 15978  001878  6DA5               	negf	printf@val& (0+255),b
 15979  00187A  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15980  00187C  B0D8               	btfsc	status,0,c
 15981  00187E  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;doprnt.c: 1264: }
 15985                           ;doprnt.c: 1266: }
 15986  001880  D00D               	goto	l6310
 15987  001882                     l6306:
 15988                           
 15989                           ; BSR set to: 0
 15990                           ;doprnt.c: 1268: else
 15991                           ;doprnt.c: 1273: {
 15992                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15993  001882  C0A1  FFD9         	movff	printf@ap,fsr2l
 15994  001886  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15995  00188A  CFDE F0A5          	movff	postinc2,printf@val
 15996  00188E  CFDD F0A6          	movff	postdec2,printf@val+1
 15997                           
 15998                           ; BSR set to: 0
 15999  001892  0E02               	movlw	2
 16000  001894  0100               	movlb	0	; () banked
 16001  001896  27A1               	addwf	printf@ap& (0+255),f,b
 16002  001898  0E00               	movlw	0
 16003  00189A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 16004  00189C                     l6310:
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;doprnt.c: 1287: }
 16008                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16009  00189C  0E01               	movlw	1
 16010  00189E  0100               	movlb	0	; () banked
 16011  0018A0  6FA8               	movwf	printf@c& (0+255),b
 16012  0018A2                     l6312:
 16013                           
 16014                           ; BSR set to: 0
 16015  0018A2  0E05               	movlw	5
 16016  0018A4  0100               	movlb	0	; () banked
 16017  0018A6  19A8               	xorwf	printf@c& (0+255),w,b
 16018  0018A8  B4D8               	btfsc	status,2,c
 16019  0018AA  D019               	goto	l6324
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;doprnt.c: 1306: if(val < dpowers[c])
 16023                           
 16024                           ; BSR set to: 0
 16025                           
 16026                           ; BSR set to: 0
 16027  0018AC  0100               	movlb	0	; () banked
 16028  0018AE  51A8               	movf	printf@c& (0+255),w,b
 16029  0018B0  0D02               	mullw	2
 16030  0018B2  0EFC               	movlw	low _dpowers
 16031  0018B4  24F3               	addwf	prodl,w,c
 16032  0018B6  6EF6               	movwf	tblptrl,c
 16033  0018B8  0EFA               	movlw	high _dpowers
 16034  0018BA  20F4               	addwfc	prodh,w,c
 16035  0018BC  6EF7               	movwf	tblptrh,c
 16036  0018BE                     	if	1	;There are 3 active tblptr bytes
 16037  0018BE  6AF8               	clrf	tblptru,c
 16038  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
 16039  0018C2  22F8               	addwfc	tblptru,f,c
 16040  0018C4                     	endif
 16041  0018C4  0009               	tblrd		*+
 16042  0018C6  50F5               	movf	tablat,w,c
 16043  0018C8  0100               	movlb	0	; () banked
 16044  0018CA  5DA5               	subwf	printf@val& (0+255),w,b
 16045  0018CC  0009               	tblrd		*+
 16046  0018CE  50F5               	movf	tablat,w,c
 16047  0018D0  0100               	movlb	0	; () banked
 16048  0018D2  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 16049  0018D4  A0D8               	btfss	status,0,c
 16050  0018D6  D003               	goto	l6324
 16051                           
 16052                           ; BSR set to: 0
 16053                           
 16054                           ; BSR set to: 0
 16055                           
 16056                           ; BSR set to: 0
 16057                           ;doprnt.c: 1307: break;
 16058  0018D8  0100               	movlb	0	; () banked
 16059  0018DA  2BA8               	incf	printf@c& (0+255),f,b
 16060  0018DC  D7E2               	goto	l6312
 16061  0018DE                     l6324:
 16062                           
 16063                           ; BSR set to: 0
 16064                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16065  0018DE  0100               	movlb	0	; () banked
 16066  0018E0  51A9               	movf	printf@width& (0+255),w,b
 16067  0018E2  0100               	movlb	0	; () banked
 16068  0018E4  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16069  0018E6  B4D8               	btfsc	status,2,c
 16070  0018E8  D00B               	goto	l6330
 16071                           
 16072                           ; BSR set to: 0
 16073  0018EA  C0A7  F09A         	movff	printf@flag,??_printf
 16074  0018EE  0E03               	movlw	3
 16075  0018F0  0100               	movlb	0	; () banked
 16076  0018F2  179A               	andwf	??_printf& (0+255),f,b
 16077  0018F4  B4D8               	btfsc	status,2,c
 16078  0018F6  D004               	goto	l6330
 16079                           
 16080                           ; BSR set to: 0
 16081                           ;doprnt.c: 1346: width--;
 16082  0018F8  0100               	movlb	0	; () banked
 16083  0018FA  07A9               	decf	printf@width& (0+255),f,b
 16084  0018FC  A0D8               	btfss	status,0,c
 16085  0018FE  07AA               	decf	(printf@width+1)& (0+255),f,b
 16086  001900                     l6330:
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;doprnt.c: 1381: if(width > c)
 16090  001900  0E80               	movlw	128
 16091  001902  0100               	movlb	0	; () banked
 16092  001904  BFA8               	btfsc	printf@c& (0+255),7,b
 16093  001906  0E7F               	movlw	127
 16094  001908  0100               	movlb	0	; () banked
 16095  00190A  6F9A               	movwf	??_printf& (0+255),b
 16096  00190C  0100               	movlb	0	; () banked
 16097  00190E  51A9               	movf	printf@width& (0+255),w,b
 16098  001910  0100               	movlb	0	; () banked
 16099  001912  5DA8               	subwf	printf@c& (0+255),w,b
 16100  001914  0100               	movlb	0	; () banked
 16101  001916  51AA               	movf	(printf@width+1)& (0+255),w,b
 16102  001918  0A80               	xorlw	128
 16103  00191A  0100               	movlb	0	; () banked
 16104  00191C  599A               	subwfb	??_printf& (0+255),w,b
 16105  00191E  B0D8               	btfsc	status,0,c
 16106  001920  D00B               	goto	l6334
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;doprnt.c: 1382: width -= c;
 16110  001922  0100               	movlb	0	; () banked
 16111  001924  51A8               	movf	printf@c& (0+255),w,b
 16112  001926  0100               	movlb	0	; () banked
 16113  001928  5FA9               	subwf	printf@width& (0+255),f,b
 16114  00192A  0E00               	movlw	0
 16115  00192C  0100               	movlb	0	; () banked
 16116  00192E  BFA8               	btfsc	printf@c& (0+255),7,b
 16117  001930  0EFF               	movlw	255
 16118  001932  0100               	movlb	0	; () banked
 16119  001934  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 16120  001936  D005               	goto	l6336
 16121  001938                     l6334:
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;doprnt.c: 1383: else
 16125                           ;doprnt.c: 1384: width = 0;
 16126  001938  0E00               	movlw	0
 16127  00193A  0100               	movlb	0	; () banked
 16128  00193C  6FAA               	movwf	(printf@width+1)& (0+255),b
 16129  00193E  0E00               	movlw	0
 16130  001940  6FA9               	movwf	printf@width& (0+255),b
 16131  001942                     l6336:
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;doprnt.c: 1387: if(flag & 0x04) {
 16135  001942  0100               	movlb	0	; () banked
 16136  001944  A5A7               	btfss	printf@flag& (0+255),2,b
 16137  001946  D018               	goto	l6348
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;doprnt.c: 1392: if(flag & 0x03)
 16141  001948  C0A7  F09A         	movff	printf@flag,??_printf
 16142  00194C  0E03               	movlw	3
 16143  00194E  0100               	movlb	0	; () banked
 16144  001950  179A               	andwf	??_printf& (0+255),f,b
 16145  001952  B4D8               	btfsc	status,2,c
 16146  001954  D003               	goto	l6342
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;doprnt.c: 1393: (putch('-') );
 16150  001956  0E2D               	movlw	45
 16151  001958  EC55  F029         	call	_putch
 16152  00195C                     l6342:
 16153                           
 16154                           ;doprnt.c: 1415: if(width)
 16155  00195C  0100               	movlb	0	; () banked
 16156  00195E  51A9               	movf	printf@width& (0+255),w,b
 16157  001960  0100               	movlb	0	; () banked
 16158  001962  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16159  001964  B4D8               	btfsc	status,2,c
 16160  001966  D025               	goto	l6358
 16161                           
 16162                           ; BSR set to: 0
 16163                           ;doprnt.c: 1417: (putch('0') );
 16164                           
 16165                           ; BSR set to: 0
 16166                           
 16167                           ;doprnt.c: 1416: do
 16168  001968  0E30               	movlw	48
 16169  00196A  EC55  F029         	call	_putch
 16170                           
 16171                           ;doprnt.c: 1418: while(--width);
 16172  00196E  0100               	movlb	0	; () banked
 16173  001970  07A9               	decf	printf@width& (0+255),f,b
 16174  001972  A0D8               	btfss	status,0,c
 16175  001974  07AA               	decf	(printf@width+1)& (0+255),f,b
 16176  001976  D7F2               	goto	l6342
 16177  001978                     l6348:
 16178                           
 16179                           ; BSR set to: 0
 16180                           ;doprnt.c: 1422: {
 16181                           ;doprnt.c: 1424: if(width
 16182                           ;doprnt.c: 1428: )
 16183  001978  0100               	movlb	0	; () banked
 16184  00197A  51A9               	movf	printf@width& (0+255),w,b
 16185  00197C  0100               	movlb	0	; () banked
 16186  00197E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16187  001980  B4D8               	btfsc	status,2,c
 16188  001982  D00D               	goto	l6354
 16189  001984                     l6350:
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;doprnt.c: 1430: (putch(' ') );
 16193  001984  0E20               	movlw	32
 16194  001986  EC55  F029         	call	_putch
 16195                           
 16196                           ;doprnt.c: 1431: while(--width);
 16197  00198A  0100               	movlb	0	; () banked
 16198  00198C  07A9               	decf	printf@width& (0+255),f,b
 16199  00198E  A0D8               	btfss	status,0,c
 16200  001990  07AA               	decf	(printf@width+1)& (0+255),f,b
 16201  001992  0100               	movlb	0	; () banked
 16202  001994  51A9               	movf	printf@width& (0+255),w,b
 16203  001996  0100               	movlb	0	; () banked
 16204  001998  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 16205  00199A  A4D8               	btfss	status,2,c
 16206  00199C  D7F3               	goto	l6350
 16207  00199E                     l6354:
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;doprnt.c: 1438: if(flag & 0x03)
 16211  00199E  C0A7  F09A         	movff	printf@flag,??_printf
 16212  0019A2  0E03               	movlw	3
 16213  0019A4  0100               	movlb	0	; () banked
 16214  0019A6  179A               	andwf	??_printf& (0+255),f,b
 16215  0019A8  B4D8               	btfsc	status,2,c
 16216  0019AA  D003               	goto	l6358
 16217                           
 16218                           ; BSR set to: 0
 16219                           ;doprnt.c: 1439: (putch('-') );
 16220  0019AC  0E2D               	movlw	45
 16221  0019AE  EC55  F029         	call	_putch
 16222  0019B2                     l6358:
 16223                           
 16224                           ;doprnt.c: 1469: }
 16225                           ;doprnt.c: 1472: prec = c;
 16226  0019B2  C0A8  F09E         	movff	printf@c,printf@prec
 16227                           
 16228                           ;doprnt.c: 1474: while(prec--) {
 16229  0019B6  D02C               	goto	l6364
 16230  0019B8                     l6360:
 16231                           
 16232                           ;doprnt.c: 1478: {
 16233                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16234  0019B8  0100               	movlb	0	; () banked
 16235  0019BA  519E               	movf	printf@prec& (0+255),w,b
 16236  0019BC  0D02               	mullw	2
 16237  0019BE  0EFC               	movlw	low _dpowers
 16238  0019C0  24F3               	addwf	prodl,w,c
 16239  0019C2  6EF6               	movwf	tblptrl,c
 16240  0019C4  0EFA               	movlw	high _dpowers
 16241  0019C6  20F4               	addwfc	prodh,w,c
 16242  0019C8  6EF7               	movwf	tblptrh,c
 16243  0019CA                     	if	1	;There are 3 active tblptr bytes
 16244  0019CA  6AF8               	clrf	tblptru,c
 16245  0019CC  0E00               	movlw	low (__mediumconst shr (0+16))
 16246  0019CE  22F8               	addwfc	tblptru,f,c
 16247  0019D0                     	endif
 16248  0019D0  0009               	tblrd		*+
 16249  0019D2  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16250  0019D6  000A               	tblrd		*-
 16251  0019D8  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16252  0019DC  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16253  0019E0  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16254  0019E4  EC71  F023         	call	___lwdiv	;wreg free
 16255  0019E8  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16256  0019EC  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16257  0019F0  0E00               	movlw	0
 16258  0019F2  0100               	movlb	0	; () banked
 16259  0019F4  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16260  0019F6  0E0A               	movlw	10
 16261  0019F8  6F89               	movwf	___lwmod@divisor& (0+255),b
 16262  0019FA  EC8B  F024         	call	___lwmod	;wreg free
 16263  0019FE  0100               	movlb	0	; () banked
 16264  001A00  5187               	movf	?___lwmod& (0+255),w,b
 16265  001A02  0F30               	addlw	48
 16266  001A04  0100               	movlb	0	; () banked
 16267  001A06  6FA8               	movwf	printf@c& (0+255),b
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;doprnt.c: 1523: }
 16271                           ;doprnt.c: 1524: (putch(c) );
 16272  001A08  0100               	movlb	0	; () banked
 16273  001A0A  51A8               	movf	printf@c& (0+255),w,b
 16274  001A0C  EC55  F029         	call	_putch
 16275  001A10                     l6364:
 16276  001A10  0100               	movlb	0	; () banked
 16277  001A12  079E               	decf	printf@prec& (0+255),f,b
 16278  001A14  0100               	movlb	0	; () banked
 16279  001A16  299E               	incf	printf@prec& (0+255),w,b
 16280  001A18  A4D8               	btfss	status,2,c
 16281  001A1A  D7CE               	goto	l6360
 16282  001A1C                     l6366:
 16283  001A1C  C08E  FFF6         	movff	printf@f,tblptrl
 16284  001A20  C08F  FFF7         	movff	printf@f+1,tblptrh
 16285  001A24  0100               	movlb	0	; () banked
 16286  001A26  4B8E               	infsnz	printf@f& (0+255),f,b
 16287  001A28  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16288  001A2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16289  001A2A  6AF8               	clrf	tblptru,c
 16290  001A2C                     	endif
 16291  001A2C                     	if	0	;tblptru may be non-zero
 16292  001A2C                     	endif
 16293  001A2C  0008               	tblrd		*
 16294  001A2E  CFF5 F0A8          	movff	tablat,printf@c
 16295  001A32  0100               	movlb	0	; () banked
 16296  001A34  51A8               	movf	printf@c& (0+255),w,b
 16297  001A36  B4D8               	btfsc	status,2,c
 16298  001A38  0012               	return	
 16299  001A3A  D5EB               	goto	l6236
 16300  001A3C                     __end_of_printf:
 16301                           	opt stack 0
 16302                           tblptru	equ	0xFF8
 16303                           tblptrh	equ	0xFF7
 16304                           tblptrl	equ	0xFF6
 16305                           tablat	equ	0xFF5
 16306                           prodh	equ	0xFF4
 16307                           prodl	equ	0xFF3
 16308                           intcon	equ	0xFF2
 16309                           intcon2	equ	0xFF1
 16310                           intcon3	equ	0xFF0
 16311                           indf0	equ	0xFEF
 16312                           postinc0	equ	0xFEE
 16313                           fsr0h	equ	0xFEA
 16314                           fsr0l	equ	0xFE9
 16315                           wreg	equ	0xFE8
 16316                           postdec1	equ	0xFE5
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           fsr2h	equ	0xFDA
 16322                           fsr2l	equ	0xFD9
 16323                           status	equ	0xFD8
 16324                           
 16325 ;; *************** function _putch *****************
 16326 ;; Defined at:
 16327 ;;		line 20 in file "lcd.c"
 16328 ;; Parameters:    Size  Location     Type
 16329 ;;  data            1    wreg     unsigned char 
 16330 ;; Auto vars:     Size  Location     Type
 16331 ;;  data            1    2[BANK0 ] unsigned char 
 16332 ;; Return value:  Size  Location     Type
 16333 ;;                  1    wreg      void 
 16334 ;; Registers used:
 16335 ;;		wreg, status,2, status,0, cstack
 16336 ;; Tracked objects:
 16337 ;;		On entry : 0/0
 16338 ;;		On exit  : 0/0
 16339 ;;		Unchanged: 0/0
 16340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;Total ram usage:        1 bytes
 16346 ;; Hardware stack levels used:    1
 16347 ;; Hardware stack levels required when called:    8
 16348 ;; This function calls:
 16349 ;;		_lcdNibble
 16350 ;; This function is called by:
 16351 ;;		_printf
 16352 ;; This function uses a non-reentrant model
 16353 ;;
 16354                           
 16355                           	psect	text52
 16356  0052AA                     __ptext52:
 16357                           	opt stack 0
 16358  0052AA                     _putch:
 16359                           	opt stack 18
 16360                           
 16361                           ;incstack = 0
 16362                           ;putch@data stored from wreg
 16363  0052AA  0100               	movlb	0	; () banked
 16364  0052AC  6F82               	movwf	putch@data& (0+255),b
 16365                           
 16366                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16367  0052AE  848C               	bsf	3980,2,c	;volatile
 16368                           
 16369                           ;lcd.c: 22: lcdNibble(data);
 16370  0052B0  0100               	movlb	0	; () banked
 16371  0052B2  5182               	movf	putch@data& (0+255),w,b
 16372  0052B4  EC57  F024         	call	_lcdNibble
 16373  0052B8  0012               	return		;funcret
 16374  0052BA                     __end_of_putch:
 16375                           	opt stack 0
 16376                           tblptru	equ	0xFF8
 16377                           tblptrh	equ	0xFF7
 16378                           tblptrl	equ	0xFF6
 16379                           tablat	equ	0xFF5
 16380                           prodh	equ	0xFF4
 16381                           prodl	equ	0xFF3
 16382                           intcon	equ	0xFF2
 16383                           intcon2	equ	0xFF1
 16384                           intcon3	equ	0xFF0
 16385                           indf0	equ	0xFEF
 16386                           postinc0	equ	0xFEE
 16387                           fsr0h	equ	0xFEA
 16388                           fsr0l	equ	0xFE9
 16389                           wreg	equ	0xFE8
 16390                           postdec1	equ	0xFE5
 16391                           fsr1l	equ	0xFE1
 16392                           indf2	equ	0xFDF
 16393                           postinc2	equ	0xFDE
 16394                           postdec2	equ	0xFDD
 16395                           fsr2h	equ	0xFDA
 16396                           fsr2l	equ	0xFD9
 16397                           status	equ	0xFD8
 16398                           
 16399 ;; *************** function _isdigit *****************
 16400 ;; Defined at:
 16401 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  c               1    wreg     unsigned char 
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  c               1    2[BANK0 ] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;		None               void
 16408 ;; Registers used:
 16409 ;;		wreg, status,2, status,0
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16419 ;;Total ram usage:        3 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    7
 16422 ;; This function calls:
 16423 ;;		Nothing
 16424 ;; This function is called by:
 16425 ;;		_printf
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text53
 16430  0050D4                     __ptext53:
 16431                           	opt stack 0
 16432  0050D4                     _isdigit:
 16433                           	opt stack 19
 16434                           
 16435                           ;incstack = 0
 16436                           ;isdigit@c stored from wreg
 16437  0050D4  0100               	movlb	0	; () banked
 16438  0050D6  6F82               	movwf	isdigit@c& (0+255),b
 16439  0050D8  0E00               	movlw	0
 16440  0050DA  0100               	movlb	0	; () banked
 16441  0050DC  6F81               	movwf	_isdigit$2058& (0+255),b
 16442                           
 16443                           ; BSR set to: 0
 16444  0050DE  0E3A               	movlw	58
 16445  0050E0  0100               	movlb	0	; () banked
 16446  0050E2  6182               	cpfslt	isdigit@c& (0+255),b
 16447  0050E4  D007               	goto	l6084
 16448                           
 16449                           ; BSR set to: 0
 16450  0050E6  0E2F               	movlw	47
 16451  0050E8  0100               	movlb	0	; () banked
 16452  0050EA  6582               	cpfsgt	isdigit@c& (0+255),b
 16453  0050EC  D003               	goto	l6084
 16454                           
 16455                           ; BSR set to: 0
 16456  0050EE  0E01               	movlw	1
 16457  0050F0  0100               	movlb	0	; () banked
 16458  0050F2  6F81               	movwf	_isdigit$2058& (0+255),b
 16459  0050F4                     l6084:
 16460                           
 16461                           ; BSR set to: 0
 16462  0050F4  C081  F080         	movff	_isdigit$2058,??_isdigit
 16463  0050F8  0100               	movlb	0	; () banked
 16464  0050FA  3180               	rrcf	??_isdigit& (0+255),w,b
 16465  0050FC  0012               	return	
 16466  0050FE                     __end_of_isdigit:
 16467                           	opt stack 0
 16468                           tblptru	equ	0xFF8
 16469                           tblptrh	equ	0xFF7
 16470                           tblptrl	equ	0xFF6
 16471                           tablat	equ	0xFF5
 16472                           prodh	equ	0xFF4
 16473                           prodl	equ	0xFF3
 16474                           intcon	equ	0xFF2
 16475                           intcon2	equ	0xFF1
 16476                           intcon3	equ	0xFF0
 16477                           indf0	equ	0xFEF
 16478                           postinc0	equ	0xFEE
 16479                           fsr0h	equ	0xFEA
 16480                           fsr0l	equ	0xFE9
 16481                           wreg	equ	0xFE8
 16482                           postdec1	equ	0xFE5
 16483                           fsr1l	equ	0xFE1
 16484                           indf2	equ	0xFDF
 16485                           postinc2	equ	0xFDE
 16486                           postdec2	equ	0xFDD
 16487                           fsr2h	equ	0xFDA
 16488                           fsr2l	equ	0xFD9
 16489                           status	equ	0xFD8
 16490                           
 16491 ;; *************** function ___wmul *****************
 16492 ;; Defined at:
 16493 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16494 ;; Parameters:    Size  Location     Type
 16495 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16496 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;  product         2    4[BANK0 ] unsigned int 
 16499 ;; Return value:  Size  Location     Type
 16500 ;;                  2    0[BANK0 ] unsigned int 
 16501 ;; Registers used:
 16502 ;;		wreg, status,2, status,0, prodl, prodh
 16503 ;; Tracked objects:
 16504 ;;		On entry : 0/0
 16505 ;;		On exit  : 0/0
 16506 ;;		Unchanged: 0/0
 16507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16512 ;;Total ram usage:        6 bytes
 16513 ;; Hardware stack levels used:    1
 16514 ;; Hardware stack levels required when called:    7
 16515 ;; This function calls:
 16516 ;;		Nothing
 16517 ;; This function is called by:
 16518 ;;		_printf
 16519 ;; This function uses a non-reentrant model
 16520 ;;
 16521                           
 16522                           	psect	text54
 16523  004DA6                     __ptext54:
 16524                           	opt stack 0
 16525  004DA6                     ___wmul:
 16526                           	opt stack 19
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;incstack = 0
 16530  004DA6  0100               	movlb	0	; () banked
 16531  004DA8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16532  004DAA  0100               	movlb	0	; () banked
 16533  004DAC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16534  004DAE  CFF3 F084          	movff	prodl,___wmul@product
 16535  004DB2  CFF4 F085          	movff	prodh,___wmul@product+1
 16536  004DB6  0100               	movlb	0	; () banked
 16537  004DB8  5180               	movf	___wmul@multiplier& (0+255),w,b
 16538  004DBA  0100               	movlb	0	; () banked
 16539  004DBC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16540  004DBE  50F3               	movf	prodl,w,c
 16541  004DC0  0100               	movlb	0	; () banked
 16542  004DC2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16543  004DC4  0100               	movlb	0	; () banked
 16544  004DC6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16545  004DC8  0100               	movlb	0	; () banked
 16546  004DCA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16547  004DCC  50F3               	movf	prodl,w,c
 16548  004DCE  0100               	movlb	0	; () banked
 16549  004DD0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16550                           
 16551                           ; BSR set to: 0
 16552  004DD2  C084  F080         	movff	___wmul@product,?___wmul
 16553  004DD6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16554  004DDA  0012               	return	
 16555  004DDC                     __end_of___wmul:
 16556                           	opt stack 0
 16557                           tblptru	equ	0xFF8
 16558                           tblptrh	equ	0xFF7
 16559                           tblptrl	equ	0xFF6
 16560                           tablat	equ	0xFF5
 16561                           prodh	equ	0xFF4
 16562                           prodl	equ	0xFF3
 16563                           intcon	equ	0xFF2
 16564                           intcon2	equ	0xFF1
 16565                           intcon3	equ	0xFF0
 16566                           indf0	equ	0xFEF
 16567                           postinc0	equ	0xFEE
 16568                           fsr0h	equ	0xFEA
 16569                           fsr0l	equ	0xFE9
 16570                           wreg	equ	0xFE8
 16571                           postdec1	equ	0xFE5
 16572                           fsr1l	equ	0xFE1
 16573                           indf2	equ	0xFDF
 16574                           postinc2	equ	0xFDE
 16575                           postdec2	equ	0xFDD
 16576                           fsr2h	equ	0xFDA
 16577                           fsr2l	equ	0xFD9
 16578                           status	equ	0xFD8
 16579                           
 16580 ;; *************** function ___lwmod *****************
 16581 ;; Defined at:
 16582 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;  dividend        2    7[BANK0 ] unsigned int 
 16585 ;;  divisor         2    9[BANK0 ] unsigned int 
 16586 ;; Auto vars:     Size  Location     Type
 16587 ;;  counter         1   11[BANK0 ] unsigned char 
 16588 ;; Return value:  Size  Location     Type
 16589 ;;                  2    7[BANK0 ] unsigned int 
 16590 ;; Registers used:
 16591 ;;		wreg, status,2, status,0
 16592 ;; Tracked objects:
 16593 ;;		On entry : 0/0
 16594 ;;		On exit  : 0/0
 16595 ;;		Unchanged: 0/0
 16596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16600 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16601 ;;Total ram usage:        5 bytes
 16602 ;; Hardware stack levels used:    1
 16603 ;; Hardware stack levels required when called:    7
 16604 ;; This function calls:
 16605 ;;		Nothing
 16606 ;; This function is called by:
 16607 ;;		_printf
 16608 ;; This function uses a non-reentrant model
 16609 ;;
 16610                           
 16611                           	psect	text55
 16612  004916                     __ptext55:
 16613                           	opt stack 0
 16614  004916                     ___lwmod:
 16615                           	opt stack 19
 16616                           
 16617                           ; BSR set to: 0
 16618                           ;incstack = 0
 16619  004916  0100               	movlb	0	; () banked
 16620  004918  5189               	movf	___lwmod@divisor& (0+255),w,b
 16621  00491A  0100               	movlb	0	; () banked
 16622  00491C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16623  00491E  B4D8               	btfsc	status,2,c
 16624  004920  D026               	goto	l1863
 16625                           
 16626                           ; BSR set to: 0
 16627  004922  0E01               	movlw	1
 16628  004924  0100               	movlb	0	; () banked
 16629  004926  6F8B               	movwf	___lwmod@counter& (0+255),b
 16630  004928  D006               	goto	l6122
 16631  00492A                     l6120:
 16632                           
 16633                           ; BSR set to: 0
 16634  00492A  0100               	movlb	0	; () banked
 16635  00492C  90D8               	bcf	status,0,c
 16636  00492E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16637  004930  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16638  004932  0100               	movlb	0	; () banked
 16639  004934  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16640  004936                     l6122:
 16641                           
 16642                           ; BSR set to: 0
 16643  004936  0100               	movlb	0	; () banked
 16644  004938  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16645  00493A  D7F7               	goto	l6120
 16646  00493C                     l6124:
 16647                           
 16648                           ; BSR set to: 0
 16649  00493C  0100               	movlb	0	; () banked
 16650  00493E  5189               	movf	___lwmod@divisor& (0+255),w,b
 16651  004940  0100               	movlb	0	; () banked
 16652  004942  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16653  004944  0100               	movlb	0	; () banked
 16654  004946  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16655  004948  0100               	movlb	0	; () banked
 16656  00494A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16657  00494C  A0D8               	btfss	status,0,c
 16658  00494E  D008               	goto	l6128
 16659                           
 16660                           ; BSR set to: 0
 16661  004950  0100               	movlb	0	; () banked
 16662  004952  5189               	movf	___lwmod@divisor& (0+255),w,b
 16663  004954  0100               	movlb	0	; () banked
 16664  004956  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16665  004958  0100               	movlb	0	; () banked
 16666  00495A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16667  00495C  0100               	movlb	0	; () banked
 16668  00495E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16669  004960                     l6128:
 16670                           
 16671                           ; BSR set to: 0
 16672  004960  0100               	movlb	0	; () banked
 16673  004962  90D8               	bcf	status,0,c
 16674  004964  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16675  004966  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16676                           
 16677                           ; BSR set to: 0
 16678  004968  0100               	movlb	0	; () banked
 16679  00496A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16680  00496C  D7E7               	goto	l6124
 16681  00496E                     l1863:
 16682                           
 16683                           ; BSR set to: 0
 16684  00496E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16685  004972  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16686                           
 16687                           ; BSR set to: 0
 16688  004976  0012               	return		;funcret
 16689  004978                     __end_of___lwmod:
 16690                           	opt stack 0
 16691                           tblptru	equ	0xFF8
 16692                           tblptrh	equ	0xFF7
 16693                           tblptrl	equ	0xFF6
 16694                           tablat	equ	0xFF5
 16695                           prodh	equ	0xFF4
 16696                           prodl	equ	0xFF3
 16697                           intcon	equ	0xFF2
 16698                           intcon2	equ	0xFF1
 16699                           intcon3	equ	0xFF0
 16700                           indf0	equ	0xFEF
 16701                           postinc0	equ	0xFEE
 16702                           fsr0h	equ	0xFEA
 16703                           fsr0l	equ	0xFE9
 16704                           wreg	equ	0xFE8
 16705                           postdec1	equ	0xFE5
 16706                           fsr1l	equ	0xFE1
 16707                           indf2	equ	0xFDF
 16708                           postinc2	equ	0xFDE
 16709                           postdec2	equ	0xFDD
 16710                           fsr2h	equ	0xFDA
 16711                           fsr2l	equ	0xFD9
 16712                           status	equ	0xFD8
 16713                           
 16714 ;; *************** function ___lwdiv *****************
 16715 ;; Defined at:
 16716 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16717 ;; Parameters:    Size  Location     Type
 16718 ;;  dividend        2    0[BANK0 ] unsigned int 
 16719 ;;  divisor         2    2[BANK0 ] unsigned int 
 16720 ;; Auto vars:     Size  Location     Type
 16721 ;;  quotient        2    4[BANK0 ] unsigned int 
 16722 ;;  counter         1    6[BANK0 ] unsigned char 
 16723 ;; Return value:  Size  Location     Type
 16724 ;;                  2    0[BANK0 ] unsigned int 
 16725 ;; Registers used:
 16726 ;;		wreg, status,2, status,0
 16727 ;; Tracked objects:
 16728 ;;		On entry : 0/0
 16729 ;;		On exit  : 0/0
 16730 ;;		Unchanged: 0/0
 16731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;Total ram usage:        7 bytes
 16737 ;; Hardware stack levels used:    1
 16738 ;; Hardware stack levels required when called:    7
 16739 ;; This function calls:
 16740 ;;		Nothing
 16741 ;; This function is called by:
 16742 ;;		_printf
 16743 ;; This function uses a non-reentrant model
 16744 ;;
 16745                           
 16746                           	psect	text56
 16747  0046E2                     __ptext56:
 16748                           	opt stack 0
 16749  0046E2                     ___lwdiv:
 16750                           	opt stack 19
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;incstack = 0
 16754  0046E2  0E00               	movlw	0
 16755  0046E4  0100               	movlb	0	; () banked
 16756  0046E6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16757  0046E8  0E00               	movlw	0
 16758  0046EA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16759                           
 16760                           ; BSR set to: 0
 16761  0046EC  0100               	movlb	0	; () banked
 16762  0046EE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16763  0046F0  0100               	movlb	0	; () banked
 16764  0046F2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16765  0046F4  B4D8               	btfsc	status,2,c
 16766  0046F6  D02C               	goto	l1853
 16767                           
 16768                           ; BSR set to: 0
 16769  0046F8  0E01               	movlw	1
 16770  0046FA  0100               	movlb	0	; () banked
 16771  0046FC  6F86               	movwf	___lwdiv@counter& (0+255),b
 16772  0046FE  D006               	goto	l6102
 16773  004700                     l6100:
 16774                           
 16775                           ; BSR set to: 0
 16776  004700  0100               	movlb	0	; () banked
 16777  004702  90D8               	bcf	status,0,c
 16778  004704  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16779  004706  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16780  004708  0100               	movlb	0	; () banked
 16781  00470A  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16782  00470C                     l6102:
 16783                           
 16784                           ; BSR set to: 0
 16785  00470C  0100               	movlb	0	; () banked
 16786  00470E  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16787  004710  D7F7               	goto	l6100
 16788  004712                     l6104:
 16789                           
 16790                           ; BSR set to: 0
 16791  004712  0100               	movlb	0	; () banked
 16792  004714  90D8               	bcf	status,0,c
 16793  004716  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16794  004718  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16795                           
 16796                           ; BSR set to: 0
 16797  00471A  0100               	movlb	0	; () banked
 16798  00471C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16799  00471E  0100               	movlb	0	; () banked
 16800  004720  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16801  004722  0100               	movlb	0	; () banked
 16802  004724  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16803  004726  0100               	movlb	0	; () banked
 16804  004728  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16805  00472A  A0D8               	btfss	status,0,c
 16806  00472C  D00A               	goto	l6112
 16807                           
 16808                           ; BSR set to: 0
 16809  00472E  0100               	movlb	0	; () banked
 16810  004730  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16811  004732  0100               	movlb	0	; () banked
 16812  004734  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16813  004736  0100               	movlb	0	; () banked
 16814  004738  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16815  00473A  0100               	movlb	0	; () banked
 16816  00473C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16817                           
 16818                           ; BSR set to: 0
 16819  00473E  0100               	movlb	0	; () banked
 16820  004740  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16821  004742                     l6112:
 16822                           
 16823                           ; BSR set to: 0
 16824  004742  0100               	movlb	0	; () banked
 16825  004744  90D8               	bcf	status,0,c
 16826  004746  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16827  004748  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16828                           
 16829                           ; BSR set to: 0
 16830  00474A  0100               	movlb	0	; () banked
 16831  00474C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16832  00474E  D7E1               	goto	l6104
 16833  004750                     l1853:
 16834                           
 16835                           ; BSR set to: 0
 16836  004750  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16837  004754  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16838                           
 16839                           ; BSR set to: 0
 16840  004758  0012               	return		;funcret
 16841  00475A                     __end_of___lwdiv:
 16842                           	opt stack 0
 16843                           tblptru	equ	0xFF8
 16844                           tblptrh	equ	0xFF7
 16845                           tblptrl	equ	0xFF6
 16846                           tablat	equ	0xFF5
 16847                           prodh	equ	0xFF4
 16848                           prodl	equ	0xFF3
 16849                           intcon	equ	0xFF2
 16850                           intcon2	equ	0xFF1
 16851                           intcon3	equ	0xFF0
 16852                           indf0	equ	0xFEF
 16853                           postinc0	equ	0xFEE
 16854                           fsr0h	equ	0xFEA
 16855                           fsr0l	equ	0xFE9
 16856                           wreg	equ	0xFE8
 16857                           postdec1	equ	0xFE5
 16858                           fsr1l	equ	0xFE1
 16859                           indf2	equ	0xFDF
 16860                           postinc2	equ	0xFDE
 16861                           postdec2	equ	0xFDD
 16862                           fsr2h	equ	0xFDA
 16863                           fsr2l	equ	0xFD9
 16864                           status	equ	0xFD8
 16865                           
 16866 ;; *************** function _lcdInst *****************
 16867 ;; Defined at:
 16868 ;;		line 15 in file "lcd.c"
 16869 ;; Parameters:    Size  Location     Type
 16870 ;;  data            1    wreg     unsigned char 
 16871 ;; Auto vars:     Size  Location     Type
 16872 ;;  data            1    2[BANK0 ] unsigned char 
 16873 ;; Return value:  Size  Location     Type
 16874 ;;                  1    wreg      void 
 16875 ;; Registers used:
 16876 ;;		wreg, status,2, status,0, cstack
 16877 ;; Tracked objects:
 16878 ;;		On entry : 0/0
 16879 ;;		On exit  : 0/0
 16880 ;;		Unchanged: 0/0
 16881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16886 ;;Total ram usage:        1 bytes
 16887 ;; Hardware stack levels used:    1
 16888 ;; Hardware stack levels required when called:    8
 16889 ;; This function calls:
 16890 ;;		_lcdNibble
 16891 ;; This function is called by:
 16892 ;;		_UI
 16893 ;;		_change_state_to_menu_start
 16894 ;;		_change_state_to_menu_12
 16895 ;;		_change_state_to_menu_22
 16896 ;;		_initLCD
 16897 ;;		_printRTC
 16898 ;;		_Loading
 16899 ;;		_EEPROM_write
 16900 ;;		_Test
 16901 ;;		_algorithmTest
 16902 ;;		_sensorTest
 16903 ;;		_actuatorTest
 16904 ;;		_BothServos
 16905 ;;		_PortTestA5
 16906 ;;		_PusherTest
 16907 ;;		_SpeedTest
 16908 ;;		_BlockerTest
 16909 ;;		_ToggleTestA5
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text57
 16914  0052BA                     __ptext57:
 16915                           	opt stack 0
 16916  0052BA                     _lcdInst:
 16917                           	opt stack 20
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;incstack = 0
 16921                           ;lcdInst@data stored from wreg
 16922  0052BA  0100               	movlb	0	; () banked
 16923  0052BC  6F82               	movwf	lcdInst@data& (0+255),b
 16924                           
 16925                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16926  0052BE  948C               	bcf	3980,2,c	;volatile
 16927                           
 16928                           ;lcd.c: 17: lcdNibble(data);
 16929  0052C0  0100               	movlb	0	; () banked
 16930  0052C2  5182               	movf	lcdInst@data& (0+255),w,b
 16931  0052C4  EC57  F024         	call	_lcdNibble
 16932  0052C8  0012               	return		;funcret
 16933  0052CA                     __end_of_lcdInst:
 16934                           	opt stack 0
 16935                           tblptru	equ	0xFF8
 16936                           tblptrh	equ	0xFF7
 16937                           tblptrl	equ	0xFF6
 16938                           tablat	equ	0xFF5
 16939                           prodh	equ	0xFF4
 16940                           prodl	equ	0xFF3
 16941                           intcon	equ	0xFF2
 16942                           intcon2	equ	0xFF1
 16943                           intcon3	equ	0xFF0
 16944                           indf0	equ	0xFEF
 16945                           postinc0	equ	0xFEE
 16946                           fsr0h	equ	0xFEA
 16947                           fsr0l	equ	0xFE9
 16948                           wreg	equ	0xFE8
 16949                           postdec1	equ	0xFE5
 16950                           fsr1l	equ	0xFE1
 16951                           indf2	equ	0xFDF
 16952                           postinc2	equ	0xFDE
 16953                           postdec2	equ	0xFDD
 16954                           fsr2h	equ	0xFDA
 16955                           fsr2l	equ	0xFD9
 16956                           status	equ	0xFD8
 16957                           
 16958 ;; *************** function _lcdNibble *****************
 16959 ;; Defined at:
 16960 ;;		line 25 in file "lcd.c"
 16961 ;; Parameters:    Size  Location     Type
 16962 ;;  data            1    wreg     unsigned char 
 16963 ;; Auto vars:     Size  Location     Type
 16964 ;;  data            1    1[BANK0 ] unsigned char 
 16965 ;;  temp            1    0[BANK0 ] unsigned char 
 16966 ;; Return value:  Size  Location     Type
 16967 ;;                  1    wreg      void 
 16968 ;; Registers used:
 16969 ;;		wreg, status,2, status,0
 16970 ;; Tracked objects:
 16971 ;;		On entry : 0/0
 16972 ;;		On exit  : 0/0
 16973 ;;		Unchanged: 0/0
 16974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16979 ;;Total ram usage:        2 bytes
 16980 ;; Hardware stack levels used:    1
 16981 ;; Hardware stack levels required when called:    7
 16982 ;; This function calls:
 16983 ;;		Nothing
 16984 ;; This function is called by:
 16985 ;;		_lcdInst
 16986 ;;		_putch
 16987 ;; This function uses a non-reentrant model
 16988 ;;
 16989                           
 16990                           	psect	text58
 16991  0048AE                     __ptext58:
 16992                           	opt stack 0
 16993  0048AE                     _lcdNibble:
 16994                           	opt stack 20
 16995                           
 16996                           ;incstack = 0
 16997                           ;lcdNibble@data stored from wreg
 16998  0048AE  0100               	movlb	0	; () banked
 16999  0048B0  6F81               	movwf	lcdNibble@data& (0+255),b
 17000                           
 17001                           ;lcd.c: 27: char temp = data & 0xF0;
 17002  0048B2  0100               	movlb	0	; () banked
 17003  0048B4  5181               	movf	lcdNibble@data& (0+255),w,b
 17004  0048B6  0BF0               	andlw	240
 17005  0048B8  0100               	movlb	0	; () banked
 17006  0048BA  6F80               	movwf	lcdNibble@temp& (0+255),b
 17007                           
 17008                           ;lcd.c: 28: LATD = LATD & 0x0F;
 17009  0048BC  508C               	movf	3980,w,c	;volatile
 17010  0048BE  0B0F               	andlw	15
 17011  0048C0  6E8C               	movwf	3980,c	;volatile
 17012                           
 17013                           ;lcd.c: 29: LATD = temp | LATD;
 17014  0048C2  0100               	movlb	0	; () banked
 17015  0048C4  5180               	movf	lcdNibble@temp& (0+255),w,b
 17016  0048C6  108C               	iorwf	3980,w,c	;volatile
 17017  0048C8  6E8C               	movwf	3980,c	;volatile
 17018                           
 17019                           ; BSR set to: 0
 17020                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 17021  0048CA  868C               	bsf	3980,3,c	;volatile
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17025  0048CC  0E42               	movlw	66
 17026  0048CE                     u9997:
 17027  0048CE  2EE8               	decfsz	wreg,f,c
 17028  0048D0  D7FE               	bra	u9997
 17029  0048D2  D000               	nop2	
 17030                           
 17031                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 17032  0048D4  968C               	bcf	3980,3,c	;volatile
 17033                           
 17034                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17035  0048D6  0E42               	movlw	66
 17036  0048D8                     u10007:
 17037  0048D8  2EE8               	decfsz	wreg,f,c
 17038  0048DA  D7FE               	bra	u10007
 17039  0048DC  D000               	nop2	
 17040                           
 17041                           ;lcd.c: 36: data = data << 4;
 17042  0048DE  0100               	movlb	0	; () banked
 17043  0048E0  3981               	swapf	lcdNibble@data& (0+255),w,b
 17044  0048E2  0BF0               	andlw	240
 17045  0048E4  0100               	movlb	0	; () banked
 17046  0048E6  6F81               	movwf	lcdNibble@data& (0+255),b
 17047                           
 17048                           ;lcd.c: 38: temp = data & 0xF0;
 17049  0048E8  0100               	movlb	0	; () banked
 17050  0048EA  5181               	movf	lcdNibble@data& (0+255),w,b
 17051  0048EC  0BF0               	andlw	240
 17052  0048EE  0100               	movlb	0	; () banked
 17053  0048F0  6F80               	movwf	lcdNibble@temp& (0+255),b
 17054                           
 17055                           ;lcd.c: 39: LATD = LATD & 0x0F;
 17056  0048F2  508C               	movf	3980,w,c	;volatile
 17057  0048F4  0B0F               	andlw	15
 17058  0048F6  6E8C               	movwf	3980,c	;volatile
 17059                           
 17060                           ;lcd.c: 40: LATD = temp | LATD;
 17061  0048F8  0100               	movlb	0	; () banked
 17062  0048FA  5180               	movf	lcdNibble@temp& (0+255),w,b
 17063  0048FC  108C               	iorwf	3980,w,c	;volatile
 17064  0048FE  6E8C               	movwf	3980,c	;volatile
 17065                           
 17066                           ; BSR set to: 0
 17067                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 17068  004900  868C               	bsf	3980,3,c	;volatile
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17072  004902  0E42               	movlw	66
 17073  004904                     u10017:
 17074  004904  2EE8               	decfsz	wreg,f,c
 17075  004906  D7FE               	bra	u10017
 17076  004908  D000               	nop2	
 17077                           
 17078                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 17079  00490A  968C               	bcf	3980,3,c	;volatile
 17080                           
 17081                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 17082  00490C  0E42               	movlw	66
 17083  00490E                     u10027:
 17084  00490E  2EE8               	decfsz	wreg,f,c
 17085  004910  D7FE               	bra	u10027
 17086  004912  D000               	nop2	
 17087  004914  0012               	return		;funcret
 17088  004916                     __end_of_lcdNibble:
 17089                           	opt stack 0
 17090                           tblptru	equ	0xFF8
 17091                           tblptrh	equ	0xFF7
 17092                           tblptrl	equ	0xFF6
 17093                           tablat	equ	0xFF5
 17094                           prodh	equ	0xFF4
 17095                           prodl	equ	0xFF3
 17096                           intcon	equ	0xFF2
 17097                           intcon2	equ	0xFF1
 17098                           intcon3	equ	0xFF0
 17099                           indf0	equ	0xFEF
 17100                           postinc0	equ	0xFEE
 17101                           fsr0h	equ	0xFEA
 17102                           fsr0l	equ	0xFE9
 17103                           wreg	equ	0xFE8
 17104                           postdec1	equ	0xFE5
 17105                           fsr1l	equ	0xFE1
 17106                           indf2	equ	0xFDF
 17107                           postinc2	equ	0xFDE
 17108                           postdec2	equ	0xFDD
 17109                           fsr2h	equ	0xFDA
 17110                           fsr2l	equ	0xFD9
 17111                           status	equ	0xFD8
 17112                           
 17113 ;; *************** function _handler *****************
 17114 ;; Defined at:
 17115 ;;		line 16 in file "interruptHandler.c"
 17116 ;; Parameters:    Size  Location     Type
 17117 ;;		None
 17118 ;; Auto vars:     Size  Location     Type
 17119 ;;		None
 17120 ;; Return value:  Size  Location     Type
 17121 ;;                  1    wreg      void 
 17122 ;; Registers used:
 17123 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17124 ;; Tracked objects:
 17125 ;;		On entry : 0/0
 17126 ;;		On exit  : 0/0
 17127 ;;		Unchanged: 0/0
 17128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17131 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17132 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17133 ;;Total ram usage:       16 bytes
 17134 ;; Hardware stack levels used:    1
 17135 ;; Hardware stack levels required when called:    6
 17136 ;; This function calls:
 17137 ;;		_printSortTimer
 17138 ;;		_updateMenu
 17139 ;;		_updateServoStates
 17140 ;; This function is called by:
 17141 ;;		Interrupt level 2
 17142 ;; This function uses a non-reentrant model
 17143 ;;
 17144                           
 17145                           	psect	intcode
 17146  000008                     __pintcode:
 17147                           	opt stack 0
 17148  000008                     _handler:
 17149                           	opt stack 18
 17150                           
 17151                           ;incstack = 0
 17152  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17153  00000A  ED72  F01B         	call	int_func,f	;refresh shadow registers
 17154                           tblptru	equ	0xFF8
 17155                           tblptrh	equ	0xFF7
 17156                           tblptrl	equ	0xFF6
 17157                           tablat	equ	0xFF5
 17158                           prodh	equ	0xFF4
 17159                           prodl	equ	0xFF3
 17160                           intcon	equ	0xFF2
 17161                           intcon2	equ	0xFF1
 17162                           intcon3	equ	0xFF0
 17163                           indf0	equ	0xFEF
 17164                           postinc0	equ	0xFEE
 17165                           fsr0h	equ	0xFEA
 17166                           fsr0l	equ	0xFE9
 17167                           wreg	equ	0xFE8
 17168                           postdec1	equ	0xFE5
 17169                           fsr1l	equ	0xFE1
 17170                           indf2	equ	0xFDF
 17171                           postinc2	equ	0xFDE
 17172                           postdec2	equ	0xFDD
 17173                           fsr2h	equ	0xFDA
 17174                           fsr2l	equ	0xFD9
 17175                           status	equ	0xFD8
 17176                           
 17177                           	psect	intcode_body
 17178  0036E4                     __pintcode_body:
 17179                           	opt stack 18
 17180  0036E4                     int_func:
 17181                           	opt stack 18
 17182  0036E4  0006               	pop		; remove dummy address from shadow register refresh
 17183  0036E6  CFFA F04D          	movff	pclath,??_handler+2
 17184  0036EA  CFFB F04E          	movff	pclatu,??_handler+3
 17185  0036EE  CFE9 F04F          	movff	fsr0l,??_handler+4
 17186  0036F2  CFEA F050          	movff	fsr0h,??_handler+5
 17187  0036F6  CFE1 F051          	movff	fsr1l,??_handler+6
 17188  0036FA  CFE2 F052          	movff	fsr1h,??_handler+7
 17189  0036FE  CFD9 F053          	movff	fsr2l,??_handler+8
 17190  003702  CFDA F054          	movff	fsr2h,??_handler+9
 17191  003706  CFF3 F055          	movff	prodl,??_handler+10
 17192  00370A  CFF4 F056          	movff	prodh,??_handler+11
 17193  00370E  CFF6 F057          	movff	tblptrl,??_handler+12
 17194  003712  CFF7 F058          	movff	tblptrh,??_handler+13
 17195  003716  CFF8 F059          	movff	tblptru,??_handler+14
 17196  00371A  CFF5 F05A          	movff	tablat,??_handler+15
 17197                           
 17198                           ;interruptHandler.c: 18: if(INT1IF){
 17199  00371E  A0F0               	btfss	intcon3,0,c	;volatile
 17200  003720  D02B               	goto	i2l9404
 17201                           
 17202                           ;interruptHandler.c: 19: INT1IF = 0;
 17203  003722  90F0               	bcf	intcon3,0,c	;volatile
 17204                           
 17205                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 17206  003724  0100               	movlb	0	; () banked
 17207  003726  51FC               	movf	_machine_state& (0+255),w,b
 17208  003728  A4D8               	btfss	status,2,c
 17209  00372A  D01B               	goto	i2l9398
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 17213  00372C  3881               	swapf	3969,w,c	;volatile
 17214  00372E  0B0F               	andlw	15
 17215  003730  0B0F               	andlw	15
 17216  003732  6E4B               	movwf	??_handler& (0+255),c
 17217  003734  6A4C               	clrf	(??_handler+1)& (0+255),c
 17218  003736  0EEB               	movlw	low _keys
 17219  003738  244B               	addwf	??_handler,w,c
 17220  00373A  6EF6               	movwf	tblptrl,c
 17221  00373C  0EFA               	movlw	high _keys
 17222  00373E  204C               	addwfc	??_handler+1,w,c
 17223  003740  6EF7               	movwf	tblptrh,c
 17224  003742                     	if	1	;There are 3 active tblptr bytes
 17225  003742  6AF8               	clrf	tblptru,c
 17226  003744  0E00               	movlw	low (__mediumconst shr (0+16))
 17227  003746  22F8               	addwfc	tblptru,f,c
 17228  003748                     	endif
 17229  003748  0008               	tblrd		*
 17230  00374A  CFF5 F07D          	movff	tablat,_input	;volatile
 17231                           
 17232                           ; BSR set to: 0
 17233                           ;interruptHandler.c: 23: if(input == '*'){
 17234  00374E  0E2A               	movlw	42
 17235  003750  187D               	xorwf	_input,w,c	;volatile
 17236  003752  A4D8               	btfss	status,2,c
 17237  003754  D004               	goto	i2l9396
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17241  003756  0E03               	movlw	3
 17242  003758  0100               	movlb	0	; () banked
 17243  00375A  6FFC               	movwf	_machine_state& (0+255),b
 17244                           
 17245                           ;interruptHandler.c: 25: }
 17246  00375C  D002               	goto	i2l9398
 17247  00375E                     i2l9396:
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;interruptHandler.c: 26: else{
 17251                           ;interruptHandler.c: 27: updateMenu();
 17252  00375E  EC7B  F013         	call	_updateMenu	;wreg free
 17253  003762                     i2l9398:
 17254                           
 17255                           ;interruptHandler.c: 28: }
 17256                           ;interruptHandler.c: 29: }
 17257                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17258  003762  0100               	movlb	0	; () banked
 17259  003764  05FC               	decf	_machine_state& (0+255),w,b
 17260  003766  A4D8               	btfss	status,2,c
 17261  003768  D007               	goto	i2l9404
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;interruptHandler.c: 31: if(input == '*'){
 17265  00376A  0E2A               	movlw	42
 17266  00376C  187D               	xorwf	_input,w,c	;volatile
 17267  00376E  A4D8               	btfss	status,2,c
 17268  003770  D003               	goto	i2l9404
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17272  003772  0E02               	movlw	2
 17273  003774  0100               	movlb	0	; () banked
 17274  003776  6FFC               	movwf	_machine_state& (0+255),b
 17275  003778                     i2l9404:
 17276                           
 17277                           ;interruptHandler.c: 33: }
 17278                           ;interruptHandler.c: 34: }
 17279                           ;interruptHandler.c: 35: }
 17280                           ;interruptHandler.c: 38: if(TMR0IF){
 17281  003778  A4F2               	btfss	intcon,2,c	;volatile
 17282  00377A  D00C               	goto	i2l9418
 17283                           
 17284                           ;interruptHandler.c: 39: TMR0IF = 0;
 17285  00377C  94F2               	bcf	intcon,2,c	;volatile
 17286                           
 17287                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17288  00377E  0100               	movlb	0	; () banked
 17289  003780  05FC               	decf	_machine_state& (0+255),w,b
 17290  003782  A4D8               	btfss	status,2,c
 17291  003784  D007               	goto	i2l9418
 17292                           
 17293                           ; BSR set to: 0
 17294                           ;interruptHandler.c: 41: printSortTimer();
 17295  003786  ECDB  F014         	call	_printSortTimer	;wreg free
 17296                           
 17297                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17298  00378A  0E85               	movlw	133
 17299  00378C  6ED7               	movwf	4055,c	;volatile
 17300                           
 17301                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17302  00378E  0EEE               	movlw	238
 17303  003790  6ED6               	movwf	4054,c	;volatile
 17304                           
 17305                           ;interruptHandler.c: 45: TMR0ON = 1;
 17306  003792  8ED5               	bsf	4053,7,c	;volatile
 17307  003794                     i2l9418:
 17308                           
 17309                           ;interruptHandler.c: 46: }
 17310                           ;interruptHandler.c: 47: }
 17311                           ;interruptHandler.c: 50: if(TMR1IF){
 17312  003794  A09E               	btfss	3998,0,c	;volatile
 17313  003796  D02A               	goto	i2l9446
 17314                           
 17315                           ;interruptHandler.c: 51: TMR1IF = 0;
 17316  003798  909E               	bcf	3998,0,c	;volatile
 17317                           
 17318                           ;interruptHandler.c: 52: TMR1ON = 0;
 17319  00379A  90CD               	bcf	4045,0,c	;volatile
 17320                           
 17321                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17322  00379C  0100               	movlb	0	; () banked
 17323  00379E  05FC               	decf	_machine_state& (0+255),w,b
 17324  0037A0  A4D8               	btfss	status,2,c
 17325  0037A2  D024               	goto	i2l9446
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;interruptHandler.c: 54: if(was_low_1){
 17329  0037A4  5079               	movf	_was_low_1,w,c	;volatile
 17330  0037A6  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17331  0037A8  B4D8               	btfsc	status,2,c
 17332  0037AA  D00A               	goto	i2l957
 17333                           
 17334                           ; BSR set to: 0
 17335                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17336  0037AC  828B               	bsf	3979,1,c	;volatile
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;interruptHandler.c: 56: was_low_1 = 0;
 17340  0037AE  0E00               	movlw	0
 17341  0037B0  6E7A               	movwf	_was_low_1+1,c	;volatile
 17342  0037B2  0E00               	movlw	0
 17343  0037B4  6E79               	movwf	_was_low_1,c	;volatile
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17347  0037B6  C0DA  FFCF         	movff	_servoTimes,4047	;volatile
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17351  0037BA  C0DC  FFCE         	movff	_servoTimes+2,4046	;volatile
 17352                           
 17353                           ;interruptHandler.c: 59: }
 17354  0037BE  D00F               	goto	i2l9440
 17355  0037C0                     i2l957:
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;interruptHandler.c: 60: else{
 17359                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17360  0037C0  928B               	bcf	3979,1,c	;volatile
 17361                           
 17362                           ; BSR set to: 0
 17363                           ;interruptHandler.c: 62: was_low_1 = 1;
 17364  0037C2  0E00               	movlw	0
 17365  0037C4  6E7A               	movwf	_was_low_1+1,c	;volatile
 17366  0037C6  0E01               	movlw	1
 17367  0037C8  6E79               	movwf	_was_low_1,c	;volatile
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17371  0037CA  0100               	movlb	0	; () banked
 17372  0037CC  51DA               	movf	_servoTimes& (0+255),w,b
 17373  0037CE  0800               	sublw	0
 17374  0037D0  0F20               	addlw	32
 17375  0037D2  6ECF               	movwf	4047,c	;volatile
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17379  0037D4  0100               	movlb	0	; () banked
 17380  0037D6  51DC               	movf	(_servoTimes+2)& (0+255),w,b
 17381  0037D8  0800               	sublw	0
 17382  0037DA  0F20               	addlw	32
 17383  0037DC  6ECE               	movwf	4046,c	;volatile
 17384  0037DE                     i2l9440:
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;interruptHandler.c: 65: }
 17388                           ;interruptHandler.c: 66: TMR1ON = 1;
 17389  0037DE  80CD               	bsf	4045,0,c	;volatile
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;interruptHandler.c: 67: servo_timer_counter += 10;
 17393  0037E0  0E0A               	movlw	10
 17394  0037E2  2671               	addwf	_servo_timer_counter,f,c	;volatile
 17395  0037E4  0E00               	movlw	0
 17396  0037E6  2272               	addwfc	_servo_timer_counter+1,f,c	;volatile
 17397                           
 17398                           ; BSR set to: 0
 17399                           ;interruptHandler.c: 69: updateServoStates();
 17400  0037E8  EC7F  F019         	call	_updateServoStates	;wreg free
 17401  0037EC                     i2l9446:
 17402                           
 17403                           ;interruptHandler.c: 70: }
 17404                           ;interruptHandler.c: 71: }
 17405                           ;interruptHandler.c: 73: if(TMR3IF){
 17406  0037EC  A2A1               	btfss	4001,1,c	;volatile
 17407  0037EE  D024               	goto	i2l963
 17408                           
 17409                           ;interruptHandler.c: 74: TMR3IF = 0;
 17410  0037F0  92A1               	bcf	4001,1,c	;volatile
 17411                           
 17412                           ;interruptHandler.c: 75: TMR3ON = 0;
 17413  0037F2  90B1               	bcf	4017,0,c	;volatile
 17414                           
 17415                           ;interruptHandler.c: 76: if(machine_state == Sorting_state){
 17416  0037F4  0100               	movlb	0	; () banked
 17417  0037F6  05FC               	decf	_machine_state& (0+255),w,b
 17418  0037F8  A4D8               	btfss	status,2,c
 17419  0037FA  D01E               	goto	i2l963
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;interruptHandler.c: 77: if(was_low_3){
 17423  0037FC  507B               	movf	_was_low_3,w,c	;volatile
 17424  0037FE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17425  003800  B4D8               	btfsc	status,2,c
 17426  003802  D00A               	goto	i2l961
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;interruptHandler.c: 78: LATCbits.LATC2 = 1;
 17430  003804  848B               	bsf	3979,2,c	;volatile
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;interruptHandler.c: 79: was_low_3 = 0;
 17434  003806  0E00               	movlw	0
 17435  003808  6E7C               	movwf	_was_low_3+1,c	;volatile
 17436  00380A  0E00               	movlw	0
 17437  00380C  6E7B               	movwf	_was_low_3,c	;volatile
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;interruptHandler.c: 80: TMR3H = servoTimes[2];
 17441  00380E  C0DE  FFB3         	movff	_servoTimes+4,4019	;volatile
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;interruptHandler.c: 81: TMR3L = servoTimes[3];
 17445  003812  C0E0  FFB2         	movff	_servoTimes+6,4018	;volatile
 17446                           
 17447                           ;interruptHandler.c: 82: }
 17448  003816  D00F               	goto	i2l9468
 17449  003818                     i2l961:
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;interruptHandler.c: 83: else{
 17453                           ;interruptHandler.c: 84: LATCbits.LATC2 = 0;
 17454  003818  948B               	bcf	3979,2,c	;volatile
 17455                           
 17456                           ; BSR set to: 0
 17457                           ;interruptHandler.c: 85: was_low_3 = 1;
 17458  00381A  0E00               	movlw	0
 17459  00381C  6E7C               	movwf	_was_low_3+1,c	;volatile
 17460  00381E  0E01               	movlw	1
 17461  003820  6E7B               	movwf	_was_low_3,c	;volatile
 17462                           
 17463                           ; BSR set to: 0
 17464                           ;interruptHandler.c: 86: TMR3H = 20000 - servoTimes[2];
 17465  003822  0100               	movlb	0	; () banked
 17466  003824  51DE               	movf	(_servoTimes+4)& (0+255),w,b
 17467  003826  0800               	sublw	0
 17468  003828  0F20               	addlw	32
 17469  00382A  6EB3               	movwf	4019,c	;volatile
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;interruptHandler.c: 87: TMR3L = 20000 - servoTimes[3];
 17473  00382C  0100               	movlb	0	; () banked
 17474  00382E  51E0               	movf	(_servoTimes+6)& (0+255),w,b
 17475  003830  0800               	sublw	0
 17476  003832  0F20               	addlw	32
 17477  003834  6EB2               	movwf	4018,c	;volatile
 17478  003836                     i2l9468:
 17479                           
 17480                           ; BSR set to: 0
 17481                           ;interruptHandler.c: 88: }
 17482                           ;interruptHandler.c: 89: TMR3ON = 1;
 17483  003836  80B1               	bsf	4017,0,c	;volatile
 17484  003838                     i2l963:
 17485  003838  C05A  FFF5         	movff	??_handler+15,tablat
 17486  00383C  C059  FFF8         	movff	??_handler+14,tblptru
 17487  003840  C058  FFF7         	movff	??_handler+13,tblptrh
 17488  003844  C057  FFF6         	movff	??_handler+12,tblptrl
 17489  003848  C056  FFF4         	movff	??_handler+11,prodh
 17490  00384C  C055  FFF3         	movff	??_handler+10,prodl
 17491  003850  C054  FFDA         	movff	??_handler+9,fsr2h
 17492  003854  C053  FFD9         	movff	??_handler+8,fsr2l
 17493  003858  C052  FFE2         	movff	??_handler+7,fsr1h
 17494  00385C  C051  FFE1         	movff	??_handler+6,fsr1l
 17495  003860  C050  FFEA         	movff	??_handler+5,fsr0h
 17496  003864  C04F  FFE9         	movff	??_handler+4,fsr0l
 17497  003868  C04E  FFFB         	movff	??_handler+3,pclatu
 17498  00386C  C04D  FFFA         	movff	??_handler+2,pclath
 17499  003870  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17500  003872  0011               	retfie		f
 17501  003874                     __end_of_handler:
 17502                           	opt stack 0
 17503                           pclatu	equ	0xFFB
 17504                           pclath	equ	0xFFA
 17505                           tblptru	equ	0xFF8
 17506                           tblptrh	equ	0xFF7
 17507                           tblptrl	equ	0xFF6
 17508                           tablat	equ	0xFF5
 17509                           prodh	equ	0xFF4
 17510                           prodl	equ	0xFF3
 17511                           intcon	equ	0xFF2
 17512                           intcon2	equ	0xFF1
 17513                           intcon3	equ	0xFF0
 17514                           indf0	equ	0xFEF
 17515                           postinc0	equ	0xFEE
 17516                           fsr0h	equ	0xFEA
 17517                           fsr0l	equ	0xFE9
 17518                           wreg	equ	0xFE8
 17519                           postdec1	equ	0xFE5
 17520                           fsr1h	equ	0xFE2
 17521                           fsr1l	equ	0xFE1
 17522                           indf2	equ	0xFDF
 17523                           postinc2	equ	0xFDE
 17524                           postdec2	equ	0xFDD
 17525                           fsr2h	equ	0xFDA
 17526                           fsr2l	equ	0xFD9
 17527                           status	equ	0xFD8
 17528                           
 17529 ;; *************** function _updateServoStates *****************
 17530 ;; Defined at:
 17531 ;;		line 504 in file "sort.c"
 17532 ;; Parameters:    Size  Location     Type
 17533 ;;		None
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;		None
 17536 ;; Return value:  Size  Location     Type
 17537 ;;                  1    wreg      void 
 17538 ;; Registers used:
 17539 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17540 ;; Tracked objects:
 17541 ;;		On entry : 0/0
 17542 ;;		On exit  : 0/0
 17543 ;;		Unchanged: 0/0
 17544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17549 ;;Total ram usage:        2 bytes
 17550 ;; Hardware stack levels used:    1
 17551 ;; Hardware stack levels required when called:    3
 17552 ;; This function calls:
 17553 ;;		i2_lcdInst
 17554 ;;		i2_printf
 17555 ;;		i2_updateServoPosition
 17556 ;; This function is called by:
 17557 ;;		_handler
 17558 ;; This function uses a non-reentrant model
 17559 ;;
 17560                           
 17561                           	psect	text60
 17562  0032FE                     __ptext60:
 17563                           	opt stack 0
 17564  0032FE                     _updateServoStates:
 17565                           	opt stack 20
 17566                           
 17567                           ;sort.c: 506: if(servo_timer_counter >= servo_timer_target){
 17568                           
 17569                           ;incstack = 0
 17570  0032FE  5073               	movf	_servo_timer_target,w,c	;volatile
 17571  003300  5C71               	subwf	_servo_timer_counter,w,c	;volatile
 17572  003302  5072               	movf	_servo_timer_counter+1,w,c	;volatile
 17573  003304  0A80               	xorlw	128
 17574  003306  6E2A               	movwf	??_updateServoStates& (0+255),c
 17575  003308  5074               	movf	_servo_timer_target+1,w,c	;volatile
 17576  00330A  0A80               	xorlw	128
 17577  00330C  582A               	subwfb	??_updateServoStates& (0+255),w,c
 17578  00330E  A0D8               	btfss	status,0,c
 17579  003310  0012               	return	
 17580                           
 17581                           ;sort.c: 507: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 17582  003312  0E01               	movlw	1
 17583  003314  EC6B  F029         	call	i2_lcdInst
 17584  003318  0E68               	movlw	104
 17585  00331A  6E2A               	movwf	??_updateServoStates& (0+255),c
 17586  00331C  0EE4               	movlw	228
 17587  00331E                     i2u1003_47:
 17588  00331E  2EE8               	decfsz	wreg,f,c
 17589  003320  D7FE               	bra	i2u1003_47
 17590  003322  2E2A               	decfsz	??_updateServoStates& (0+255),f,c
 17591  003324  D7FC               	bra	i2u1003_47
 17592  003326  D000               	nop2	
 17593  003328  0E80               	movlw	128
 17594  00332A  EC6B  F029         	call	i2_lcdInst
 17595                           
 17596                           ;sort.c: 508: printf("ENT");
 17597  00332E  0EC7               	movlw	low STR_66
 17598  003330  6E0D               	movwf	i2printf@f,c
 17599  003332  0EFF               	movlw	high STR_66
 17600  003334  6E0E               	movwf	i2printf@f+1,c
 17601  003336  ECE0  F00E         	call	i2_printf	;wreg free
 17602                           
 17603                           ;sort.c: 510: if(f_panning_to_bin){
 17604  00333A  5061               	movf	_f_panning_to_bin,w,c	;volatile
 17605  00333C  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 17606  00333E  A4D8               	btfss	status,2,c
 17607  003340  D036               	goto	i2l9284
 17608  003342  D05F               	goto	i2l9288
 17609  003344                     i2l9258:
 17610                           
 17611                           ;sort.c: 514: updateServoPosition(1260, 3);
 17612  003344  0E04               	movlw	4
 17613  003346  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17614  003348  0EEC               	movlw	236
 17615  00334A  6E01               	movwf	i2updateServoPosition@time_us,c
 17616  00334C  0E00               	movlw	0
 17617  00334E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17618  003350  0E03               	movlw	3
 17619  003352  6E03               	movwf	i2updateServoPosition@timer,c
 17620  003354  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17621  003358  D025               	goto	i2l9278
 17622  00335A                     i2l9262:
 17623                           
 17624                           ;sort.c: 516: servo_timer_target = 700;
 17625  00335A  0E02               	movlw	2
 17626  00335C  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17627  00335E  0EBC               	movlw	188
 17628  003360  6E73               	movwf	_servo_timer_target,c	;volatile
 17629                           
 17630                           ;sort.c: 517: break;
 17631  003362  D04A               	goto	i2l9286
 17632  003364                     i2l9264:
 17633                           
 17634                           ;sort.c: 519: updateServoPosition(1260, 3);
 17635  003364  0E04               	movlw	4
 17636  003366  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17637  003368  0EEC               	movlw	236
 17638  00336A  6E01               	movwf	i2updateServoPosition@time_us,c
 17639  00336C  0E00               	movlw	0
 17640  00336E  6E04               	movwf	i2updateServoPosition@timer+1,c
 17641  003370  0E03               	movlw	3
 17642  003372  6E03               	movwf	i2updateServoPosition@timer,c
 17643  003374  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17644  003378  D015               	goto	i2l9278
 17645  00337A                     i2l9270:
 17646                           
 17647                           ;sort.c: 525: updateServoPosition(1390, 3);
 17648  00337A  0E05               	movlw	5
 17649  00337C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17650  00337E  0E6E               	movlw	110
 17651  003380  6E01               	movwf	i2updateServoPosition@time_us,c
 17652  003382  0E00               	movlw	0
 17653  003384  6E04               	movwf	i2updateServoPosition@timer+1,c
 17654  003386  0E03               	movlw	3
 17655  003388  6E03               	movwf	i2updateServoPosition@timer,c
 17656  00338A  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17657  00338E  D00A               	goto	i2l9278
 17658  003390                     i2l9276:
 17659                           
 17660                           ;sort.c: 530: updateServoPosition(1390, 3);
 17661  003390  0E05               	movlw	5
 17662  003392  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17663  003394  0E6E               	movlw	110
 17664  003396  6E01               	movwf	i2updateServoPosition@time_us,c
 17665  003398  0E00               	movlw	0
 17666  00339A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17667  00339C  0E03               	movlw	3
 17668  00339E  6E03               	movwf	i2updateServoPosition@timer,c
 17669  0033A0  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17670  0033A4                     i2l9278:
 17671                           
 17672                           ;sort.c: 531: servo_timer_counter = 0;
 17673  0033A4  0E00               	movlw	0
 17674  0033A6  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17675  0033A8  0E00               	movlw	0
 17676  0033AA  6E71               	movwf	_servo_timer_counter,c	;volatile
 17677  0033AC  D7D6               	goto	i2l9262
 17678  0033AE                     i2l9284:
 17679  0033AE  C06F  F02A         	movff	_pan_servo_state,??_updateServoStates	;volatile
 17680  0033B2  C070  F02B         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 17681                           
 17682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 17683                           ; Switch size 1, requested type "space"
 17684                           ; Number of cases is 4, Range of values is 1 to 9
 17685                           ; switch strategies available:
 17686                           ; Name         Instructions Cycles
 17687                           ; simple_byte           13     7 (average)
 17688                           ;	Chosen strategy is simple_byte
 17689  0033B6  502B               	movf	??_updateServoStates+1,w,c
 17690  0033B8  0A01               	xorlw	1	; case 1
 17691  0033BA  B4D8               	btfsc	status,2,c
 17692  0033BC  D00A               	goto	i2l9928
 17693  0033BE  0A02               	xorlw	2	; case 3
 17694  0033C0  B4D8               	btfsc	status,2,c
 17695  0033C2  D00C               	goto	i2l9930
 17696  0033C4  0A05               	xorlw	5	; case 6
 17697  0033C6  B4D8               	btfsc	status,2,c
 17698  0033C8  D00E               	goto	i2l9932
 17699  0033CA  0A0F               	xorlw	15	; case 9
 17700  0033CC  B4D8               	btfsc	status,2,c
 17701  0033CE  D010               	goto	i2l9934
 17702  0033D0  D013               	goto	i2l9286
 17703  0033D2                     i2l9928:
 17704                           
 17705                           ; Switch size 1, requested type "space"
 17706                           ; Number of cases is 1, Range of values is 244 to 244
 17707                           ; switch strategies available:
 17708                           ; Name         Instructions Cycles
 17709                           ; simple_byte            4     3 (average)
 17710                           ;	Chosen strategy is simple_byte
 17711  0033D2  502A               	movf	??_updateServoStates,w,c
 17712  0033D4  0AF4               	xorlw	244	; case 244
 17713  0033D6  B4D8               	btfsc	status,2,c
 17714  0033D8  D7B5               	goto	i2l9258
 17715  0033DA  D00E               	goto	i2l9286
 17716  0033DC                     i2l9930:
 17717                           
 17718                           ; Switch size 1, requested type "space"
 17719                           ; Number of cases is 1, Range of values is 82 to 82
 17720                           ; switch strategies available:
 17721                           ; Name         Instructions Cycles
 17722                           ; simple_byte            4     3 (average)
 17723                           ;	Chosen strategy is simple_byte
 17724  0033DC  502A               	movf	??_updateServoStates,w,c
 17725  0033DE  0A52               	xorlw	82	; case 82
 17726  0033E0  B4D8               	btfsc	status,2,c
 17727  0033E2  D7C0               	goto	i2l9264
 17728  0033E4  D009               	goto	i2l9286
 17729  0033E6                     i2l9932:
 17730                           
 17731                           ; Switch size 1, requested type "space"
 17732                           ; Number of cases is 1, Range of values is 134 to 134
 17733                           ; switch strategies available:
 17734                           ; Name         Instructions Cycles
 17735                           ; simple_byte            4     3 (average)
 17736                           ;	Chosen strategy is simple_byte
 17737  0033E6  502A               	movf	??_updateServoStates,w,c
 17738  0033E8  0A86               	xorlw	134	; case 134
 17739  0033EA  B4D8               	btfsc	status,2,c
 17740  0033EC  D7C6               	goto	i2l9270
 17741  0033EE  D004               	goto	i2l9286
 17742  0033F0                     i2l9934:
 17743                           
 17744                           ; Switch size 1, requested type "space"
 17745                           ; Number of cases is 1, Range of values is 96 to 96
 17746                           ; switch strategies available:
 17747                           ; Name         Instructions Cycles
 17748                           ; simple_byte            4     3 (average)
 17749                           ;	Chosen strategy is simple_byte
 17750  0033F0  502A               	movf	??_updateServoStates,w,c
 17751  0033F2  0A60               	xorlw	96	; case 96
 17752  0033F4  B4D8               	btfsc	status,2,c
 17753  0033F6  D7CC               	goto	i2l9276
 17754  0033F8                     i2l9286:
 17755                           
 17756                           ;sort.c: 537: f_panning_to_bin = 0;
 17757  0033F8  0E00               	movlw	0
 17758  0033FA  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 17759  0033FC  0E00               	movlw	0
 17760  0033FE  6E61               	movwf	_f_panning_to_bin,c	;volatile
 17761                           
 17762                           ;sort.c: 538: }
 17763  003400  0012               	return	
 17764  003402                     i2l9288:
 17765                           
 17766                           ;sort.c: 539: else if(pan_servo_state == 1200){
 17767  003402  0EB0               	movlw	176
 17768  003404  186F               	xorwf	_pan_servo_state,w,c	;volatile
 17769  003406  E15F               	bnz	i2l9320
 17770  003408  0E04               	movlw	4
 17771  00340A  1870               	xorwf	_pan_servo_state+1,w,c	;volatile
 17772  00340C  A4D8               	btfss	status,2,c
 17773  00340E  D05B               	goto	i2l9320
 17774                           
 17775                           ;sort.c: 541: servo_timer_counter = 0;
 17776  003410  0E00               	movlw	0
 17777  003412  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17778  003414  0E00               	movlw	0
 17779  003416  6E71               	movwf	_servo_timer_counter,c	;volatile
 17780                           
 17781                           ;sort.c: 542: }
 17782  003418  0012               	return	
 17783  00341A                     i2l9292:
 17784                           
 17785                           ;sort.c: 547: updateServoPosition(1050, 3);
 17786  00341A  0E04               	movlw	4
 17787  00341C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17788  00341E  0E1A               	movlw	26
 17789  003420  6E01               	movwf	i2updateServoPosition@time_us,c
 17790  003422  0E00               	movlw	0
 17791  003424  6E04               	movwf	i2updateServoPosition@timer+1,c
 17792  003426  0E03               	movlw	3
 17793  003428  6E03               	movwf	i2updateServoPosition@timer,c
 17794  00342A  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17795                           
 17796                           ;sort.c: 548: servo_timer_counter = 0;
 17797  00342E  0E00               	movlw	0
 17798  003430  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17799  003432  0E00               	movlw	0
 17800  003434  6E71               	movwf	_servo_timer_counter,c	;volatile
 17801                           
 17802                           ;sort.c: 549: servo_timer_target = 750;
 17803  003436  0E02               	movlw	2
 17804  003438  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17805  00343A  0EEE               	movlw	238
 17806  00343C  6E73               	movwf	_servo_timer_target,c	;volatile
 17807                           
 17808                           ;sort.c: 550: break;
 17809  00343E  0012               	return	
 17810  003440                     i2l9298:
 17811                           
 17812                           ;sort.c: 552: updateServoPosition(1050, 3);
 17813  003440  0E04               	movlw	4
 17814  003442  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17815  003444  0E1A               	movlw	26
 17816  003446  6E01               	movwf	i2updateServoPosition@time_us,c
 17817  003448  0E00               	movlw	0
 17818  00344A  6E04               	movwf	i2updateServoPosition@timer+1,c
 17819  00344C  0E03               	movlw	3
 17820  00344E  6E03               	movwf	i2updateServoPosition@timer,c
 17821  003450  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17822                           
 17823                           ;sort.c: 553: servo_timer_counter = 0;
 17824  003454  0E00               	movlw	0
 17825  003456  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17826  003458  0E00               	movlw	0
 17827  00345A  6E71               	movwf	_servo_timer_counter,c	;volatile
 17828                           
 17829                           ;sort.c: 554: servo_timer_target = 750;
 17830  00345C  0E02               	movlw	2
 17831  00345E  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17832  003460  0EEE               	movlw	238
 17833  003462  6E73               	movwf	_servo_timer_target,c	;volatile
 17834                           
 17835                           ;sort.c: 555: break;
 17836  003464  0012               	return	
 17837  003466                     i2l9304:
 17838                           
 17839                           ;sort.c: 558: updateServoPosition(1200, 1);
 17840  003466  0E04               	movlw	4
 17841  003468  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17842  00346A  0EB0               	movlw	176
 17843  00346C  6E01               	movwf	i2updateServoPosition@time_us,c
 17844  00346E  0E00               	movlw	0
 17845  003470  6E04               	movwf	i2updateServoPosition@timer+1,c
 17846  003472  0E01               	movlw	1
 17847  003474  6E03               	movwf	i2updateServoPosition@timer,c
 17848  003476  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17849                           
 17850                           ;sort.c: 559: updateServoPosition(1050, 3);
 17851  00347A  0E04               	movlw	4
 17852  00347C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 17853  00347E  0E1A               	movlw	26
 17854  003480  6E01               	movwf	i2updateServoPosition@time_us,c
 17855  003482  0E00               	movlw	0
 17856  003484  6E04               	movwf	i2updateServoPosition@timer+1,c
 17857  003486  0E03               	movlw	3
 17858  003488  6E03               	movwf	i2updateServoPosition@timer,c
 17859  00348A  EC1F  F024         	call	i2_updateServoPosition	;wreg free
 17860                           
 17861                           ;sort.c: 560: servo_timer_counter = 0;
 17862  00348E  0E00               	movlw	0
 17863  003490  6E72               	movwf	_servo_timer_counter+1,c	;volatile
 17864  003492  0E00               	movlw	0
 17865  003494  6E71               	movwf	_servo_timer_counter,c	;volatile
 17866                           
 17867                           ;sort.c: 561: servo_timer_target = 9999;
 17868  003496  0E27               	movlw	39
 17869  003498  6E74               	movwf	_servo_timer_target+1,c	;volatile
 17870  00349A  0E0F               	movlw	15
 17871  00349C  6E73               	movwf	_servo_timer_target,c	;volatile
 17872                           
 17873                           ;sort.c: 563: f_can_distributed = 1;
 17874  00349E  0E00               	movlw	0
 17875  0034A0  0101               	movlb	1	; () banked
 17876  0034A2  6F36               	movwf	(_f_can_distributed+1)& (0+255),b
 17877  0034A4  0E01               	movlw	1
 17878  0034A6  6F35               	movwf	_f_can_distributed& (0+255),b
 17879                           
 17880                           ; BSR set to: 1
 17881                           ;sort.c: 564: f_most_recent_sort_time = 1;
 17882  0034A8  0E00               	movlw	0
 17883  0034AA  0101               	movlb	1	; () banked
 17884  0034AC  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 17885  0034AE  0E01               	movlw	1
 17886  0034B0  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 17887                           
 17888                           ; BSR set to: 1
 17889                           ;sort.c: 565: if(f_lastCan == 1){
 17890  0034B2  0100               	movlb	0	; () banked
 17891  0034B4  05EE               	decf	_f_lastCan& (0+255),w,b
 17892  0034B6  0100               	movlb	0	; () banked
 17893  0034B8  11EF               	iorwf	(_f_lastCan+1)& (0+255),w,b
 17894  0034BA  A4D8               	btfss	status,2,c
 17895  0034BC  0012               	return	
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;sort.c: 566: machine_state = DoneSorting_state;
 17899  0034BE  0E02               	movlw	2
 17900  0034C0  0100               	movlb	0	; () banked
 17901  0034C2  6FFC               	movwf	_machine_state& (0+255),b
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;sort.c: 572: }
 17905                           
 17906                           ; BSR set to: 0
 17907                           ;sort.c: 571: break;
 17908                           
 17909                           ;sort.c: 570: default:
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;sort.c: 567: }
 17913                           ;sort.c: 568: break;
 17914  0034C4  0012               	return	
 17915  0034C6                     i2l9320:
 17916  0034C6  C075  F02A         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 17917  0034CA  C076  F02B         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 17918                           
 17919                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17920                           ; Switch size 1, requested type "space"
 17921                           ; Number of cases is 2, Range of values is 4 to 5
 17922                           ; switch strategies available:
 17923                           ; Name         Instructions Cycles
 17924                           ; simple_byte            7     4 (average)
 17925                           ;	Chosen strategy is simple_byte
 17926  0034CE  502B               	movf	??_updateServoStates+1,w,c
 17927  0034D0  0A04               	xorlw	4	; case 4
 17928  0034D2  B4D8               	btfsc	status,2,c
 17929  0034D4  D004               	goto	i2l9936
 17930  0034D6  0A01               	xorlw	1	; case 5
 17931  0034D8  A4D8               	btfss	status,2,c
 17932  0034DA  0012               	return	
 17933  0034DC  D008               	goto	i2l9938
 17934  0034DE                     i2l9936:
 17935                           
 17936                           ; Switch size 1, requested type "space"
 17937                           ; Number of cases is 2, Range of values is 26 to 236
 17938                           ; switch strategies available:
 17939                           ; Name         Instructions Cycles
 17940                           ; simple_byte            7     4 (average)
 17941                           ;	Chosen strategy is simple_byte
 17942  0034DE  502A               	movf	??_updateServoStates,w,c
 17943  0034E0  0A1A               	xorlw	26	; case 26
 17944  0034E2  B4D8               	btfsc	status,2,c
 17945  0034E4  D7C0               	goto	i2l9304
 17946  0034E6  0AF6               	xorlw	246	; case 236
 17947  0034E8  A4D8               	btfss	status,2,c
 17948  0034EA  0012               	return	
 17949  0034EC  D796               	goto	i2l9292
 17950  0034EE                     i2l9938:
 17951                           
 17952                           ; Switch size 1, requested type "space"
 17953                           ; Number of cases is 1, Range of values is 110 to 110
 17954                           ; switch strategies available:
 17955                           ; Name         Instructions Cycles
 17956                           ; simple_byte            4     3 (average)
 17957                           ;	Chosen strategy is simple_byte
 17958  0034EE  502A               	movf	??_updateServoStates,w,c
 17959  0034F0  0A6E               	xorlw	110	; case 110
 17960  0034F2  A4D8               	btfss	status,2,c
 17961  0034F4  0012               	return	
 17962  0034F6  D7A4               	goto	i2l9298
 17963  0034F8                     __end_of_updateServoStates:
 17964                           	opt stack 0
 17965                           pclatu	equ	0xFFB
 17966                           pclath	equ	0xFFA
 17967                           tblptru	equ	0xFF8
 17968                           tblptrh	equ	0xFF7
 17969                           tblptrl	equ	0xFF6
 17970                           tablat	equ	0xFF5
 17971                           prodh	equ	0xFF4
 17972                           prodl	equ	0xFF3
 17973                           intcon	equ	0xFF2
 17974                           intcon2	equ	0xFF1
 17975                           intcon3	equ	0xFF0
 17976                           indf0	equ	0xFEF
 17977                           postinc0	equ	0xFEE
 17978                           fsr0h	equ	0xFEA
 17979                           fsr0l	equ	0xFE9
 17980                           wreg	equ	0xFE8
 17981                           postdec1	equ	0xFE5
 17982                           fsr1h	equ	0xFE2
 17983                           fsr1l	equ	0xFE1
 17984                           indf2	equ	0xFDF
 17985                           postinc2	equ	0xFDE
 17986                           postdec2	equ	0xFDD
 17987                           fsr2h	equ	0xFDA
 17988                           fsr2l	equ	0xFD9
 17989                           status	equ	0xFD8
 17990                           
 17991 ;; *************** function i2_updateServoPosition *****************
 17992 ;; Defined at:
 17993 ;;		line 489 in file "sort.c"
 17994 ;; Parameters:    Size  Location     Type
 17995 ;;  time_us         2    0[COMRAM] int 
 17996 ;;  timer           2    2[COMRAM] int 
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;  updateServoP    2    6[COMRAM] unsigned int 
 17999 ;; Return value:  Size  Location     Type
 18000 ;;                  1    wreg      void 
 18001 ;; Registers used:
 18002 ;;		wreg, status,2, status,0
 18003 ;; Tracked objects:
 18004 ;;		On entry : 0/0
 18005 ;;		On exit  : 0/0
 18006 ;;		Unchanged: 0/0
 18007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18008 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;Total ram usage:        8 bytes
 18013 ;; Hardware stack levels used:    1
 18014 ;; This function calls:
 18015 ;;		Nothing
 18016 ;; This function is called by:
 18017 ;;		_updateServoStates
 18018 ;; This function uses a non-reentrant model
 18019 ;;
 18020                           
 18021                           	psect	text61
 18022  00483E                     __ptext61:
 18023                           	opt stack 0
 18024  00483E                     i2_updateServoPosition:
 18025                           	opt stack 22
 18026                           
 18027                           ;sort.c: 490: unsigned int my_time = 65535 - time_us;
 18028                           
 18029                           ;incstack = 0
 18030  00483E  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 18031  004842  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 18032  004846  1E05               	comf	??i2_updateServoPosition,f,c
 18033  004848  1E06               	comf	??i2_updateServoPosition+1,f,c
 18034  00484A  4A05               	infsnz	??i2_updateServoPosition,f,c
 18035  00484C  2A06               	incf	??i2_updateServoPosition+1,f,c
 18036  00484E  0EFF               	movlw	255
 18037  004850  2405               	addwf	??i2_updateServoPosition,w,c
 18038  004852  6E07               	movwf	i2updateServoPosition@my_time,c
 18039  004854  0EFF               	movlw	255
 18040  004856  2006               	addwfc	??i2_updateServoPosition+1,w,c
 18041  004858  6E08               	movwf	i2updateServoPosition@my_time+1,c
 18042                           
 18043                           ;sort.c: 491: switch(timer){
 18044  00485A  D019               	goto	i2l8468
 18045  00485C                     i2l8462:
 18046                           
 18047                           ;sort.c: 493: servoTimes[0] = my_time >> 8;
 18048  00485C  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18049  00485E  0100               	movlb	0	; () banked
 18050  004860  6FDA               	movwf	_servoTimes& (0+255),b
 18051  004862  6BDB               	clrf	(_servoTimes+1)& (0+255),b
 18052                           
 18053                           ;sort.c: 494: servoTimes[1] = my_time & 0xFF;
 18054  004864  5007               	movf	i2updateServoPosition@my_time,w,c
 18055  004866  0100               	movlb	0	; () banked
 18056  004868  6FDC               	movwf	(_servoTimes+2)& (0+255),b
 18057  00486A  6BDD               	clrf	(_servoTimes+3)& (0+255),b
 18058                           
 18059                           ; BSR set to: 0
 18060                           ;sort.c: 496: pan_servo_state = time_us;
 18061  00486C  C001  F06F         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 18062  004870  C002  F070         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 18063  004874                     i2l864:
 18064                           
 18065                           ;sort.c: 498: servoTimes[2] = my_time >> 8;
 18066  004874  5008               	movf	i2updateServoPosition@my_time+1,w,c
 18067  004876  0100               	movlb	0	; () banked
 18068  004878  6FDE               	movwf	(_servoTimes+4)& (0+255),b
 18069  00487A  6BDF               	clrf	(_servoTimes+5)& (0+255),b
 18070                           
 18071                           ;sort.c: 499: servoTimes[3] = my_time & 0xFF;
 18072  00487C  5007               	movf	i2updateServoPosition@my_time,w,c
 18073  00487E  0100               	movlb	0	; () banked
 18074  004880  6FE0               	movwf	(_servoTimes+6)& (0+255),b
 18075  004882  6BE1               	clrf	(_servoTimes+7)& (0+255),b
 18076                           
 18077                           ; BSR set to: 0
 18078                           ;sort.c: 501: tilt_servo_state = time_us;
 18079  004884  C001  F075         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 18080  004888  C002  F076         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 18081                           
 18082                           ;sort.c: 502: }
 18083  00488C  0012               	return	
 18084  00488E                     i2l8468:
 18085  00488E  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 18086  004892  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 18087                           
 18088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18089                           ; Switch size 1, requested type "space"
 18090                           ; Number of cases is 1, Range of values is 0 to 0
 18091                           ; switch strategies available:
 18092                           ; Name         Instructions Cycles
 18093                           ; simple_byte            4     3 (average)
 18094                           ;	Chosen strategy is simple_byte
 18095  004896  5006               	movf	??i2_updateServoPosition+1,w,c
 18096  004898  0A00               	xorlw	0	; case 0
 18097  00489A  A4D8               	btfss	status,2,c
 18098  00489C  0012               	return	
 18099                           
 18100                           ; Switch size 1, requested type "space"
 18101                           ; Number of cases is 2, Range of values is 1 to 3
 18102                           ; switch strategies available:
 18103                           ; Name         Instructions Cycles
 18104                           ; simple_byte            7     4 (average)
 18105                           ;	Chosen strategy is simple_byte
 18106  00489E  5005               	movf	??i2_updateServoPosition,w,c
 18107  0048A0  0A01               	xorlw	1	; case 1
 18108  0048A2  B4D8               	btfsc	status,2,c
 18109  0048A4  D7DB               	goto	i2l8462
 18110  0048A6  0A02               	xorlw	2	; case 3
 18111  0048A8  A4D8               	btfss	status,2,c
 18112  0048AA  0012               	return	
 18113  0048AC  D7E3               	goto	i2l864
 18114  0048AE                     __end_ofi2_updateServoPosition:
 18115                           	opt stack 0
 18116                           pclatu	equ	0xFFB
 18117                           pclath	equ	0xFFA
 18118                           tblptru	equ	0xFF8
 18119                           tblptrh	equ	0xFF7
 18120                           tblptrl	equ	0xFF6
 18121                           tablat	equ	0xFF5
 18122                           prodh	equ	0xFF4
 18123                           prodl	equ	0xFF3
 18124                           intcon	equ	0xFF2
 18125                           intcon2	equ	0xFF1
 18126                           intcon3	equ	0xFF0
 18127                           indf0	equ	0xFEF
 18128                           postinc0	equ	0xFEE
 18129                           fsr0h	equ	0xFEA
 18130                           fsr0l	equ	0xFE9
 18131                           wreg	equ	0xFE8
 18132                           postdec1	equ	0xFE5
 18133                           fsr1h	equ	0xFE2
 18134                           fsr1l	equ	0xFE1
 18135                           indf2	equ	0xFDF
 18136                           postinc2	equ	0xFDE
 18137                           postdec2	equ	0xFDD
 18138                           fsr2h	equ	0xFDA
 18139                           fsr2l	equ	0xFD9
 18140                           status	equ	0xFD8
 18141                           
 18142 ;; *************** function _updateMenu *****************
 18143 ;; Defined at:
 18144 ;;		line 213 in file "UI.c"
 18145 ;; Parameters:    Size  Location     Type
 18146 ;;		None
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;		None
 18149 ;; Return value:  Size  Location     Type
 18150 ;;                  1    wreg      void 
 18151 ;; Registers used:
 18152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18153 ;; Tracked objects:
 18154 ;;		On entry : 0/0
 18155 ;;		On exit  : 0/0
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18162 ;;Total ram usage:        2 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:    5
 18165 ;; This function calls:
 18166 ;;		_change_state_to_logs_11
 18167 ;;		_change_state_to_logs_12
 18168 ;;		_change_state_to_logs_22
 18169 ;;		_change_state_to_logs_23
 18170 ;;		_change_state_to_logs_33
 18171 ;;		_change_state_to_logs_34
 18172 ;;		_change_state_to_menu_11
 18173 ;;		_change_state_to_menu_23
 18174 ;;		_dispLogs
 18175 ;;		_inputHandler
 18176 ;;		i2_change_state_to_menu_12
 18177 ;;		i2_change_state_to_menu_22
 18178 ;;		i2_change_state_to_menu_start
 18179 ;; This function is called by:
 18180 ;;		_handler
 18181 ;; This function uses a non-reentrant model
 18182 ;;
 18183                           
 18184                           	psect	text62
 18185  0026F6                     __ptext62:
 18186                           	opt stack 0
 18187  0026F6                     _updateMenu:
 18188                           	opt stack 18
 18189                           
 18190                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 18191                           
 18192                           ;incstack = 0
 18193  0026F6  0E00               	movlw	0
 18194  0026F8  6E78               	movwf	_up+1,c
 18195  0026FA  0E00               	movlw	0
 18196  0026FC  6E77               	movwf	_up,c
 18197  0026FE  0E00               	movlw	0
 18198  002700  6E5E               	movwf	_down+1,c
 18199  002702  0E00               	movlw	0
 18200  002704  6E5D               	movwf	_down,c
 18201  002706  0E00               	movlw	0
 18202  002708  6E60               	movwf	_enter+1,c
 18203  00270A  0E00               	movlw	0
 18204  00270C  6E5F               	movwf	_enter,c
 18205  00270E  0E00               	movlw	0
 18206  002710  6E5C               	movwf	_back+1,c
 18207  002712  0E00               	movlw	0
 18208  002714  6E5B               	movwf	_back,c
 18209                           
 18210                           ;UI.c: 215: (INTCONbits.GIE = 0);
 18211  002716  9EF2               	bcf	intcon,7,c	;volatile
 18212                           
 18213                           ;UI.c: 217: if (inputHandler()
 18214                           ;UI.c: 220: ){
 18215  002718  EC7C  F01A         	call	_inputHandler	;wreg free
 18216  00271C  502A               	movf	?_inputHandler,w,c
 18217  00271E  102B               	iorwf	?_inputHandler+1,w,c
 18218  002720  A4D8               	btfss	status,2,c
 18219  002722  D112               	goto	i2l9000
 18220  002724  D146               	goto	i2l257
 18221  002726                     i2l8852:
 18222                           
 18223                           ;UI.c: 224: change_state_to_menu_11();
 18224  002726  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 18225                           
 18226                           ;UI.c: 225: break;
 18227  00272A  D143               	goto	i2l257
 18228  00272C                     i2l8854:
 18229                           
 18230                           ;UI.c: 228: if(up){
 18231  00272C  5077               	movf	_up,w,c
 18232  00272E  1078               	iorwf	_up+1,w,c
 18233  002730  B4D8               	btfsc	status,2,c
 18234  002732  D003               	goto	i2l8858
 18235                           
 18236                           ;UI.c: 229: change_state_to_menu_23();
 18237  002734  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18238                           
 18239                           ;UI.c: 230: }
 18240  002738  D13C               	goto	i2l257
 18241  00273A                     i2l8858:
 18242                           
 18243                           ;UI.c: 231: else if(down){
 18244  00273A  505D               	movf	_down,w,c
 18245  00273C  105E               	iorwf	_down+1,w,c
 18246  00273E  B4D8               	btfsc	status,2,c
 18247  002740  D003               	goto	i2l8862
 18248                           
 18249                           ;UI.c: 232: change_state_to_menu_12();
 18250  002742  EC50  F027         	call	i2_change_state_to_menu_12	;wreg free
 18251                           
 18252                           ;UI.c: 233: }
 18253  002746  D135               	goto	i2l257
 18254  002748                     i2l8862:
 18255                           
 18256                           ;UI.c: 234: else if(enter){
 18257  002748  505F               	movf	_enter,w,c
 18258  00274A  1060               	iorwf	_enter+1,w,c
 18259  00274C  B4D8               	btfsc	status,2,c
 18260  00274E  D131               	goto	i2l257
 18261                           
 18262                           ;UI.c: 235: change_state_to_menu_start();
 18263  002750  EC93  F028         	call	i2_change_state_to_menu_start	;wreg free
 18264                           
 18265                           ;UI.c: 236: }
 18266                           ;UI.c: 237: break;
 18267  002754  D12E               	goto	i2l257
 18268  002756                     i2l8866:
 18269                           
 18270                           ;UI.c: 240: if(up){
 18271  002756  5077               	movf	_up,w,c
 18272  002758  1078               	iorwf	_up+1,w,c
 18273  00275A  B4D8               	btfsc	status,2,c
 18274  00275C  D003               	goto	i2l8870
 18275                           
 18276                           ;UI.c: 241: change_state_to_menu_11();
 18277  00275E  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 18278                           
 18279                           ;UI.c: 242: }
 18280  002762  D127               	goto	i2l257
 18281  002764                     i2l8870:
 18282                           
 18283                           ;UI.c: 243: else if(down){
 18284  002764  505D               	movf	_down,w,c
 18285  002766  105E               	iorwf	_down+1,w,c
 18286  002768  B4D8               	btfsc	status,2,c
 18287  00276A  D011               	goto	i2l8886
 18288                           
 18289                           ;UI.c: 244: change_state_to_menu_23();
 18290  00276C  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18291                           
 18292                           ;UI.c: 245: }
 18293  002770  D120               	goto	i2l257
 18294  002772                     i2l8878:
 18295                           
 18296                           ;UI.c: 252: if(up){
 18297  002772  5077               	movf	_up,w,c
 18298  002774  1078               	iorwf	_up+1,w,c
 18299  002776  B4D8               	btfsc	status,2,c
 18300  002778  D003               	goto	i2l8882
 18301                           
 18302                           ;UI.c: 253: change_state_to_menu_11();
 18303  00277A  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 18304                           
 18305                           ;UI.c: 254: }
 18306  00277E  D119               	goto	i2l257
 18307  002780                     i2l8882:
 18308                           
 18309                           ;UI.c: 255: else if(down){
 18310  002780  505D               	movf	_down,w,c
 18311  002782  105E               	iorwf	_down+1,w,c
 18312  002784  B4D8               	btfsc	status,2,c
 18313  002786  D003               	goto	i2l8886
 18314                           
 18315                           ;UI.c: 256: change_state_to_menu_23();
 18316  002788  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18317                           
 18318                           ;UI.c: 257: }
 18319  00278C  D112               	goto	i2l257
 18320  00278E                     i2l8886:
 18321                           
 18322                           ;UI.c: 258: else if(enter){
 18323  00278E  505F               	movf	_enter,w,c
 18324  002790  1060               	iorwf	_enter+1,w,c
 18325  002792  B4D8               	btfsc	status,2,c
 18326  002794  D10E               	goto	i2l257
 18327                           
 18328                           ;UI.c: 259: machine_state = Sorting_state;
 18329  002796  0E01               	movlw	1
 18330  002798  0100               	movlb	0	; () banked
 18331  00279A  6FFC               	movwf	_machine_state& (0+255),b
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;UI.c: 260: }
 18335                           ;UI.c: 261: break;
 18336                           
 18337                           ; BSR set to: 0
 18338                           
 18339                           ; BSR set to: 0
 18340  00279C  D10A               	goto	i2l257
 18341  00279E                     i2l8890:
 18342                           
 18343                           ;UI.c: 264: if(up){
 18344  00279E  5077               	movf	_up,w,c
 18345  0027A0  1078               	iorwf	_up+1,w,c
 18346  0027A2  B4D8               	btfsc	status,2,c
 18347  0027A4  D003               	goto	i2l8894
 18348                           
 18349                           ;UI.c: 265: change_state_to_menu_22();
 18350  0027A6  EC38  F027         	call	i2_change_state_to_menu_22	;wreg free
 18351                           
 18352                           ;UI.c: 266: }
 18353  0027AA  D103               	goto	i2l257
 18354  0027AC                     i2l8894:
 18355                           
 18356                           ;UI.c: 267: else if(down){
 18357  0027AC  505D               	movf	_down,w,c
 18358  0027AE  105E               	iorwf	_down+1,w,c
 18359  0027B0  B4D8               	btfsc	status,2,c
 18360  0027B2  D003               	goto	i2l8898
 18361                           
 18362                           ;UI.c: 268: change_state_to_menu_11();
 18363  0027B4  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 18364                           
 18365                           ;UI.c: 269: }
 18366  0027B8  D0FC               	goto	i2l257
 18367  0027BA                     i2l8898:
 18368                           
 18369                           ;UI.c: 270: else if(enter){
 18370  0027BA  505F               	movf	_enter,w,c
 18371  0027BC  1060               	iorwf	_enter+1,w,c
 18372  0027BE  B4D8               	btfsc	status,2,c
 18373  0027C0  D0F8               	goto	i2l257
 18374                           
 18375                           ;UI.c: 271: change_state_to_logs_11();
 18376  0027C2  ECF8  F027         	call	_change_state_to_logs_11	;wreg free
 18377                           
 18378                           ;UI.c: 272: }
 18379                           ;UI.c: 273: break;
 18380  0027C6  D0F5               	goto	i2l257
 18381  0027C8                     i2l8902:
 18382                           
 18383                           ;UI.c: 276: if(up){
 18384  0027C8  5077               	movf	_up,w,c
 18385  0027CA  1078               	iorwf	_up+1,w,c
 18386  0027CC  B4D8               	btfsc	status,2,c
 18387  0027CE  D003               	goto	i2l8906
 18388                           
 18389                           ;UI.c: 277: change_state_to_logs_34();
 18390  0027D0  EC98  F027         	call	_change_state_to_logs_34	;wreg free
 18391                           
 18392                           ;UI.c: 278: }
 18393  0027D4  D0EE               	goto	i2l257
 18394  0027D6                     i2l8906:
 18395                           
 18396                           ;UI.c: 279: else if(down){
 18397  0027D6  505D               	movf	_down,w,c
 18398  0027D8  105E               	iorwf	_down+1,w,c
 18399  0027DA  B4D8               	btfsc	status,2,c
 18400  0027DC  D003               	goto	i2l8910
 18401                           
 18402                           ;UI.c: 280: change_state_to_logs_12();
 18403  0027DE  ECE0  F027         	call	_change_state_to_logs_12	;wreg free
 18404                           
 18405                           ;UI.c: 281: }
 18406  0027E2  D0E7               	goto	i2l257
 18407  0027E4                     i2l8910:
 18408                           
 18409                           ;UI.c: 282: else if(enter){
 18410  0027E4  505F               	movf	_enter,w,c
 18411  0027E6  1060               	iorwf	_enter+1,w,c
 18412  0027E8  B4D8               	btfsc	status,2,c
 18413  0027EA  D007               	goto	i2l8914
 18414                           
 18415                           ;UI.c: 283: dispLogs(1);
 18416  0027EC  0E00               	movlw	0
 18417  0027EE  6E13               	movwf	dispLogs@myLog+1,c
 18418  0027F0  0E01               	movlw	1
 18419  0027F2  6E12               	movwf	dispLogs@myLog,c
 18420  0027F4  ECCD  F028         	call	_dispLogs	;wreg free
 18421                           
 18422                           ;UI.c: 284: }
 18423  0027F8  D0DC               	goto	i2l257
 18424  0027FA                     i2l8914:
 18425                           
 18426                           ;UI.c: 285: else if(back){
 18427  0027FA  505B               	movf	_back,w,c
 18428  0027FC  105C               	iorwf	_back+1,w,c
 18429  0027FE  B4D8               	btfsc	status,2,c
 18430  002800  D0D8               	goto	i2l257
 18431                           
 18432                           ;UI.c: 286: change_state_to_menu_23();
 18433  002802  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18434                           
 18435                           ;UI.c: 287: }
 18436                           ;UI.c: 288: break;
 18437  002806  D0D5               	goto	i2l257
 18438  002808                     i2l8918:
 18439                           
 18440                           ;UI.c: 291: if(up){
 18441  002808  5077               	movf	_up,w,c
 18442  00280A  1078               	iorwf	_up+1,w,c
 18443  00280C  B4D8               	btfsc	status,2,c
 18444  00280E  D003               	goto	i2l8922
 18445                           
 18446                           ;UI.c: 292: change_state_to_logs_11();
 18447  002810  ECF8  F027         	call	_change_state_to_logs_11	;wreg free
 18448                           
 18449                           ;UI.c: 293: }
 18450  002814  D0CE               	goto	i2l257
 18451  002816                     i2l8922:
 18452                           
 18453                           ;UI.c: 294: else if(down){
 18454  002816  505D               	movf	_down,w,c
 18455  002818  105E               	iorwf	_down+1,w,c
 18456  00281A  B4D8               	btfsc	status,2,c
 18457  00281C  D003               	goto	i2l8926
 18458                           
 18459                           ;UI.c: 295: change_state_to_logs_23();
 18460  00281E  EC27  F028         	call	_change_state_to_logs_23	;wreg free
 18461                           
 18462                           ;UI.c: 296: }
 18463  002822  D0C7               	goto	i2l257
 18464  002824                     i2l8926:
 18465                           
 18466                           ;UI.c: 297: else if(enter){
 18467  002824  505F               	movf	_enter,w,c
 18468  002826  1060               	iorwf	_enter+1,w,c
 18469  002828  B4D8               	btfsc	status,2,c
 18470  00282A  D007               	goto	i2l8930
 18471                           
 18472                           ;UI.c: 298: dispLogs(2);
 18473  00282C  0E00               	movlw	0
 18474  00282E  6E13               	movwf	dispLogs@myLog+1,c
 18475  002830  0E02               	movlw	2
 18476  002832  6E12               	movwf	dispLogs@myLog,c
 18477  002834  ECCD  F028         	call	_dispLogs	;wreg free
 18478                           
 18479                           ;UI.c: 299: }
 18480  002838  D0BC               	goto	i2l257
 18481  00283A                     i2l8930:
 18482                           
 18483                           ;UI.c: 300: else if(back){
 18484  00283A  505B               	movf	_back,w,c
 18485  00283C  105C               	iorwf	_back+1,w,c
 18486  00283E  B4D8               	btfsc	status,2,c
 18487  002840  D0B8               	goto	i2l257
 18488                           
 18489                           ;UI.c: 301: change_state_to_menu_23();
 18490  002842  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18491                           
 18492                           ;UI.c: 302: }
 18493                           ;UI.c: 303: break;
 18494  002846  D0B5               	goto	i2l257
 18495  002848                     i2l8934:
 18496                           
 18497                           ;UI.c: 306: if(up){
 18498  002848  5077               	movf	_up,w,c
 18499  00284A  1078               	iorwf	_up+1,w,c
 18500  00284C  B4D8               	btfsc	status,2,c
 18501  00284E  D003               	goto	i2l8938
 18502                           
 18503                           ;UI.c: 307: change_state_to_logs_11();
 18504  002850  ECF8  F027         	call	_change_state_to_logs_11	;wreg free
 18505                           
 18506                           ;UI.c: 308: }
 18507  002854  D0AE               	goto	i2l257
 18508  002856                     i2l8938:
 18509                           
 18510                           ;UI.c: 309: else if(down){
 18511  002856  505D               	movf	_down,w,c
 18512  002858  105E               	iorwf	_down+1,w,c
 18513  00285A  B4D8               	btfsc	status,2,c
 18514  00285C  D003               	goto	i2l8942
 18515                           
 18516                           ;UI.c: 310: change_state_to_logs_23();
 18517  00285E  EC27  F028         	call	_change_state_to_logs_23	;wreg free
 18518                           
 18519                           ;UI.c: 311: }
 18520  002862  D0A7               	goto	i2l257
 18521  002864                     i2l8942:
 18522                           
 18523                           ;UI.c: 312: else if(enter){
 18524  002864  505F               	movf	_enter,w,c
 18525  002866  1060               	iorwf	_enter+1,w,c
 18526  002868  B4D8               	btfsc	status,2,c
 18527  00286A  D007               	goto	i2l8946
 18528                           
 18529                           ;UI.c: 313: dispLogs(2);
 18530  00286C  0E00               	movlw	0
 18531  00286E  6E13               	movwf	dispLogs@myLog+1,c
 18532  002870  0E02               	movlw	2
 18533  002872  6E12               	movwf	dispLogs@myLog,c
 18534  002874  ECCD  F028         	call	_dispLogs	;wreg free
 18535                           
 18536                           ;UI.c: 314: }
 18537  002878  D09C               	goto	i2l257
 18538  00287A                     i2l8946:
 18539                           
 18540                           ;UI.c: 315: else if(back){
 18541  00287A  505B               	movf	_back,w,c
 18542  00287C  105C               	iorwf	_back+1,w,c
 18543  00287E  B4D8               	btfsc	status,2,c
 18544  002880  D098               	goto	i2l257
 18545                           
 18546                           ;UI.c: 316: change_state_to_menu_23();
 18547  002882  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18548                           
 18549                           ;UI.c: 317: }
 18550                           ;UI.c: 318: break;
 18551  002886  D095               	goto	i2l257
 18552  002888                     i2l8950:
 18553                           
 18554                           ;UI.c: 321: if(up){
 18555  002888  5077               	movf	_up,w,c
 18556  00288A  1078               	iorwf	_up+1,w,c
 18557  00288C  B4D8               	btfsc	status,2,c
 18558  00288E  D003               	goto	i2l8954
 18559                           
 18560                           ;UI.c: 322: change_state_to_logs_22();
 18561  002890  ECC8  F027         	call	_change_state_to_logs_22	;wreg free
 18562                           
 18563                           ;UI.c: 323: }
 18564  002894  D08E               	goto	i2l257
 18565  002896                     i2l8954:
 18566                           
 18567                           ;UI.c: 324: else if(down){
 18568  002896  505D               	movf	_down,w,c
 18569  002898  105E               	iorwf	_down+1,w,c
 18570  00289A  B4D8               	btfsc	status,2,c
 18571  00289C  D003               	goto	i2l8958
 18572                           
 18573                           ;UI.c: 325: change_state_to_logs_34();
 18574  00289E  EC98  F027         	call	_change_state_to_logs_34	;wreg free
 18575                           
 18576                           ;UI.c: 326: }
 18577  0028A2  D087               	goto	i2l257
 18578  0028A4                     i2l8958:
 18579                           
 18580                           ;UI.c: 327: else if(enter){
 18581  0028A4  505F               	movf	_enter,w,c
 18582  0028A6  1060               	iorwf	_enter+1,w,c
 18583  0028A8  B4D8               	btfsc	status,2,c
 18584  0028AA  D007               	goto	i2l8962
 18585                           
 18586                           ;UI.c: 328: dispLogs(3);
 18587  0028AC  0E00               	movlw	0
 18588  0028AE  6E13               	movwf	dispLogs@myLog+1,c
 18589  0028B0  0E03               	movlw	3
 18590  0028B2  6E12               	movwf	dispLogs@myLog,c
 18591  0028B4  ECCD  F028         	call	_dispLogs	;wreg free
 18592                           
 18593                           ;UI.c: 329: }
 18594  0028B8  D07C               	goto	i2l257
 18595  0028BA                     i2l8962:
 18596                           
 18597                           ;UI.c: 330: else if(back){
 18598  0028BA  505B               	movf	_back,w,c
 18599  0028BC  105C               	iorwf	_back+1,w,c
 18600  0028BE  B4D8               	btfsc	status,2,c
 18601  0028C0  D078               	goto	i2l257
 18602                           
 18603                           ;UI.c: 331: change_state_to_menu_23();
 18604  0028C2  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18605                           
 18606                           ;UI.c: 332: }
 18607                           ;UI.c: 333: break;
 18608  0028C6  D075               	goto	i2l257
 18609  0028C8                     i2l8966:
 18610                           
 18611                           ;UI.c: 336: if(up){
 18612  0028C8  5077               	movf	_up,w,c
 18613  0028CA  1078               	iorwf	_up+1,w,c
 18614  0028CC  B4D8               	btfsc	status,2,c
 18615  0028CE  D003               	goto	i2l8970
 18616                           
 18617                           ;UI.c: 337: change_state_to_logs_22();
 18618  0028D0  ECC8  F027         	call	_change_state_to_logs_22	;wreg free
 18619                           
 18620                           ;UI.c: 338: }
 18621  0028D4  D06E               	goto	i2l257
 18622  0028D6                     i2l8970:
 18623                           
 18624                           ;UI.c: 339: else if(down){
 18625  0028D6  505D               	movf	_down,w,c
 18626  0028D8  105E               	iorwf	_down+1,w,c
 18627  0028DA  B4D8               	btfsc	status,2,c
 18628  0028DC  D003               	goto	i2l8974
 18629                           
 18630                           ;UI.c: 340: change_state_to_logs_34();
 18631  0028DE  EC98  F027         	call	_change_state_to_logs_34	;wreg free
 18632                           
 18633                           ;UI.c: 341: }
 18634  0028E2  D067               	goto	i2l257
 18635  0028E4                     i2l8974:
 18636                           
 18637                           ;UI.c: 342: else if(enter){
 18638  0028E4  505F               	movf	_enter,w,c
 18639  0028E6  1060               	iorwf	_enter+1,w,c
 18640  0028E8  B4D8               	btfsc	status,2,c
 18641  0028EA  D007               	goto	i2l8978
 18642                           
 18643                           ;UI.c: 343: dispLogs(3);
 18644  0028EC  0E00               	movlw	0
 18645  0028EE  6E13               	movwf	dispLogs@myLog+1,c
 18646  0028F0  0E03               	movlw	3
 18647  0028F2  6E12               	movwf	dispLogs@myLog,c
 18648  0028F4  ECCD  F028         	call	_dispLogs	;wreg free
 18649                           
 18650                           ;UI.c: 344: }
 18651  0028F8  D05C               	goto	i2l257
 18652  0028FA                     i2l8978:
 18653                           
 18654                           ;UI.c: 345: else if(back){
 18655  0028FA  505B               	movf	_back,w,c
 18656  0028FC  105C               	iorwf	_back+1,w,c
 18657  0028FE  B4D8               	btfsc	status,2,c
 18658  002900  D058               	goto	i2l257
 18659                           
 18660                           ;UI.c: 346: change_state_to_menu_23();
 18661  002902  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18662                           
 18663                           ;UI.c: 347: }
 18664                           ;UI.c: 348: break;
 18665  002906  D055               	goto	i2l257
 18666  002908                     i2l8982:
 18667                           
 18668                           ;UI.c: 351: if(up){
 18669  002908  5077               	movf	_up,w,c
 18670  00290A  1078               	iorwf	_up+1,w,c
 18671  00290C  B4D8               	btfsc	status,2,c
 18672  00290E  D003               	goto	i2l8986
 18673                           
 18674                           ;UI.c: 352: change_state_to_logs_33();
 18675  002910  ECB0  F027         	call	_change_state_to_logs_33	;wreg free
 18676                           
 18677                           ;UI.c: 353: }
 18678  002914  D04E               	goto	i2l257
 18679  002916                     i2l8986:
 18680                           
 18681                           ;UI.c: 354: else if(down){
 18682  002916  505D               	movf	_down,w,c
 18683  002918  105E               	iorwf	_down+1,w,c
 18684  00291A  B4D8               	btfsc	status,2,c
 18685  00291C  D003               	goto	i2l8990
 18686                           
 18687                           ;UI.c: 355: change_state_to_logs_11();
 18688  00291E  ECF8  F027         	call	_change_state_to_logs_11	;wreg free
 18689                           
 18690                           ;UI.c: 356: }
 18691  002922  D047               	goto	i2l257
 18692  002924                     i2l8990:
 18693                           
 18694                           ;UI.c: 357: else if(enter){
 18695  002924  505F               	movf	_enter,w,c
 18696  002926  1060               	iorwf	_enter+1,w,c
 18697  002928  B4D8               	btfsc	status,2,c
 18698  00292A  D007               	goto	i2l8994
 18699                           
 18700                           ;UI.c: 358: dispLogs(4);
 18701  00292C  0E00               	movlw	0
 18702  00292E  6E13               	movwf	dispLogs@myLog+1,c
 18703  002930  0E04               	movlw	4
 18704  002932  6E12               	movwf	dispLogs@myLog,c
 18705  002934  ECCD  F028         	call	_dispLogs	;wreg free
 18706                           
 18707                           ;UI.c: 359: }
 18708  002938  D03C               	goto	i2l257
 18709  00293A                     i2l8994:
 18710                           
 18711                           ;UI.c: 360: else if(back){
 18712  00293A  505B               	movf	_back,w,c
 18713  00293C  105C               	iorwf	_back+1,w,c
 18714  00293E  B4D8               	btfsc	status,2,c
 18715  002940  D038               	goto	i2l257
 18716                           
 18717                           ;UI.c: 361: change_state_to_menu_23();
 18718  002942  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 18719                           
 18720                           ;UI.c: 367: }
 18721                           
 18722                           ;UI.c: 366: break;
 18723                           
 18724                           ;UI.c: 365: default:
 18725                           
 18726                           ;UI.c: 362: }
 18727                           ;UI.c: 363: break;
 18728  002946  D035               	goto	i2l257
 18729  002948                     i2l9000:
 18730  002948  C0EC  F043         	movff	_cur_state,??_updateMenu
 18731  00294C  C0ED  F044         	movff	_cur_state+1,??_updateMenu+1
 18732                           
 18733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 18734                           ; Switch size 1, requested type "space"
 18735                           ; Number of cases is 3, Range of values is 0 to 4
 18736                           ; switch strategies available:
 18737                           ; Name         Instructions Cycles
 18738                           ; simple_byte           10     6 (average)
 18739                           ;	Chosen strategy is simple_byte
 18740  002950  5044               	movf	??_updateMenu+1,w,c
 18741  002952  0A00               	xorlw	0	; case 0
 18742  002954  B4D8               	btfsc	status,2,c
 18743  002956  D007               	goto	i2l9942
 18744  002958  0A03               	xorlw	3	; case 3
 18745  00295A  B4D8               	btfsc	status,2,c
 18746  00295C  D015               	goto	i2l9944
 18747  00295E  0A07               	xorlw	7	; case 4
 18748  002960  B4D8               	btfsc	status,2,c
 18749  002962  D020               	goto	i2l9946
 18750  002964  D026               	goto	i2l257
 18751  002966                     i2l9942:
 18752                           
 18753                           ; Switch size 1, requested type "space"
 18754                           ; Number of cases is 5, Range of values is 0 to 23
 18755                           ; switch strategies available:
 18756                           ; Name         Instructions Cycles
 18757                           ; simple_byte           16     9 (average)
 18758                           ;	Chosen strategy is simple_byte
 18759  002966  5043               	movf	??_updateMenu,w,c
 18760  002968  0A00               	xorlw	0	; case 0
 18761  00296A  B4D8               	btfsc	status,2,c
 18762  00296C  D6DC               	goto	i2l8852
 18763  00296E  0A0B               	xorlw	11	; case 11
 18764  002970  B4D8               	btfsc	status,2,c
 18765  002972  D6DC               	goto	i2l8854
 18766  002974  0A07               	xorlw	7	; case 12
 18767  002976  B4D8               	btfsc	status,2,c
 18768  002978  D6EE               	goto	i2l8866
 18769  00297A  0A1A               	xorlw	26	; case 22
 18770  00297C  B4D8               	btfsc	status,2,c
 18771  00297E  D6F9               	goto	i2l8878
 18772  002980  0A01               	xorlw	1	; case 23
 18773  002982  B4D8               	btfsc	status,2,c
 18774  002984  D70C               	goto	i2l8890
 18775  002986  D015               	goto	i2l257
 18776  002988                     i2l9944:
 18777                           
 18778                           ; Switch size 1, requested type "space"
 18779                           ; Number of cases is 4, Range of values is 243 to 255
 18780                           ; switch strategies available:
 18781                           ; Name         Instructions Cycles
 18782                           ; simple_byte           13     7 (average)
 18783                           ;	Chosen strategy is simple_byte
 18784  002988  5043               	movf	??_updateMenu,w,c
 18785  00298A  0AF3               	xorlw	243	; case 243
 18786  00298C  B4D8               	btfsc	status,2,c
 18787  00298E  D71C               	goto	i2l8902
 18788  002990  0A07               	xorlw	7	; case 244
 18789  002992  B4D8               	btfsc	status,2,c
 18790  002994  D739               	goto	i2l8918
 18791  002996  0A0A               	xorlw	10	; case 254
 18792  002998  B4D8               	btfsc	status,2,c
 18793  00299A  D756               	goto	i2l8934
 18794  00299C  0A01               	xorlw	1	; case 255
 18795  00299E  B4D8               	btfsc	status,2,c
 18796  0029A0  D773               	goto	i2l8950
 18797  0029A2  D007               	goto	i2l257
 18798  0029A4                     i2l9946:
 18799                           
 18800                           ; Switch size 1, requested type "space"
 18801                           ; Number of cases is 2, Range of values is 9 to 10
 18802                           ; switch strategies available:
 18803                           ; Name         Instructions Cycles
 18804                           ; simple_byte            7     4 (average)
 18805                           ;	Chosen strategy is simple_byte
 18806  0029A4  5043               	movf	??_updateMenu,w,c
 18807  0029A6  0A09               	xorlw	9	; case 9
 18808  0029A8  B4D8               	btfsc	status,2,c
 18809  0029AA  D78E               	goto	i2l8966
 18810  0029AC  0A03               	xorlw	3	; case 10
 18811  0029AE  B4D8               	btfsc	status,2,c
 18812  0029B0  D7AB               	goto	i2l8982
 18813  0029B2                     i2l257:
 18814                           
 18815                           ;UI.c: 368: }
 18816                           ;UI.c: 369: (INTCONbits.GIE = 1);
 18817  0029B2  8EF2               	bsf	intcon,7,c	;volatile
 18818  0029B4  0012               	return		;funcret
 18819  0029B6                     __end_of_updateMenu:
 18820                           	opt stack 0
 18821                           pclatu	equ	0xFFB
 18822                           pclath	equ	0xFFA
 18823                           tblptru	equ	0xFF8
 18824                           tblptrh	equ	0xFF7
 18825                           tblptrl	equ	0xFF6
 18826                           tablat	equ	0xFF5
 18827                           prodh	equ	0xFF4
 18828                           prodl	equ	0xFF3
 18829                           intcon	equ	0xFF2
 18830                           intcon2	equ	0xFF1
 18831                           intcon3	equ	0xFF0
 18832                           indf0	equ	0xFEF
 18833                           postinc0	equ	0xFEE
 18834                           fsr0h	equ	0xFEA
 18835                           fsr0l	equ	0xFE9
 18836                           wreg	equ	0xFE8
 18837                           postdec1	equ	0xFE5
 18838                           fsr1h	equ	0xFE2
 18839                           fsr1l	equ	0xFE1
 18840                           indf2	equ	0xFDF
 18841                           postinc2	equ	0xFDE
 18842                           postdec2	equ	0xFDD
 18843                           fsr2h	equ	0xFDA
 18844                           fsr2l	equ	0xFD9
 18845                           status	equ	0xFD8
 18846                           
 18847 ;; *************** function i2_change_state_to_menu_start *****************
 18848 ;; Defined at:
 18849 ;;		line 474 in file "UI.c"
 18850 ;; Parameters:    Size  Location     Type
 18851 ;;		None
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;		None
 18854 ;; Return value:  Size  Location     Type
 18855 ;;                  1    wreg      void 
 18856 ;; Registers used:
 18857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18858 ;; Tracked objects:
 18859 ;;		On entry : 0/0
 18860 ;;		On exit  : 0/0
 18861 ;;		Unchanged: 0/0
 18862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18867 ;;Total ram usage:        0 bytes
 18868 ;; Hardware stack levels used:    1
 18869 ;; Hardware stack levels required when called:    4
 18870 ;; This function calls:
 18871 ;;		i2_lcdInst
 18872 ;;		i2_printRTC
 18873 ;;		i2_printf
 18874 ;; This function is called by:
 18875 ;;		_updateMenu
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           	psect	text63
 18880  005126                     __ptext63:
 18881                           	opt stack 0
 18882  005126                     i2_change_state_to_menu_start:
 18883                           	opt stack 18
 18884                           
 18885                           ;UI.c: 475: cur_state = 0;
 18886                           
 18887                           ;incstack = 0
 18888  005126  0E00               	movlw	0
 18889  005128  0100               	movlb	0	; () banked
 18890  00512A  6FED               	movwf	(_cur_state+1)& (0+255),b
 18891  00512C  0E00               	movlw	0
 18892  00512E  6FEC               	movwf	_cur_state& (0+255),b
 18893                           
 18894                           ; BSR set to: 0
 18895                           ;UI.c: 477: lcdInst(0b10000000);;
 18896  005130  0E80               	movlw	128
 18897  005132  EC6B  F029         	call	i2_lcdInst
 18898                           
 18899                           ;UI.c: 478: printRTC();
 18900  005136  EC53  F017         	call	i2_printRTC	;wreg free
 18901                           
 18902                           ;UI.c: 479: lcdInst(0b11000000);;
 18903  00513A  0EC0               	movlw	192
 18904  00513C  EC6B  F029         	call	i2_lcdInst
 18905                           
 18906                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18907  005140  0EF3               	movlw	low STR_30
 18908  005142  6E0D               	movwf	i2printf@f,c
 18909  005144  0EFD               	movlw	high STR_30
 18910  005146  6E0E               	movwf	i2printf@f+1,c
 18911  005148  ECE0  F00E         	call	i2_printf	;wreg free
 18912  00514C  0012               	return		;funcret
 18913  00514E                     __end_ofi2_change_state_to_menu_start:
 18914                           	opt stack 0
 18915                           pclatu	equ	0xFFB
 18916                           pclath	equ	0xFFA
 18917                           tblptru	equ	0xFF8
 18918                           tblptrh	equ	0xFF7
 18919                           tblptrl	equ	0xFF6
 18920                           tablat	equ	0xFF5
 18921                           prodh	equ	0xFF4
 18922                           prodl	equ	0xFF3
 18923                           intcon	equ	0xFF2
 18924                           intcon2	equ	0xFF1
 18925                           intcon3	equ	0xFF0
 18926                           indf0	equ	0xFEF
 18927                           postinc0	equ	0xFEE
 18928                           fsr0h	equ	0xFEA
 18929                           fsr0l	equ	0xFE9
 18930                           wreg	equ	0xFE8
 18931                           postdec1	equ	0xFE5
 18932                           fsr1h	equ	0xFE2
 18933                           fsr1l	equ	0xFE1
 18934                           indf2	equ	0xFDF
 18935                           postinc2	equ	0xFDE
 18936                           postdec2	equ	0xFDD
 18937                           fsr2h	equ	0xFDA
 18938                           fsr2l	equ	0xFD9
 18939                           status	equ	0xFD8
 18940                           
 18941 ;; *************** function i2_printRTC *****************
 18942 ;; Defined at:
 18943 ;;		line 63 in file "RTC.c"
 18944 ;; Parameters:    Size  Location     Type
 18945 ;;		None
 18946 ;; Auto vars:     Size  Location     Type
 18947 ;;  printRTC       14   44[COMRAM] int [7]
 18948 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18949 ;;  printRTC        2   64[COMRAM] int 
 18950 ;;  printRTC        2   58[COMRAM] int 
 18951 ;; Return value:  Size  Location     Type
 18952 ;;                  1    wreg      void 
 18953 ;; Registers used:
 18954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18955 ;; Tracked objects:
 18956 ;;		On entry : 0/0
 18957 ;;		On exit  : 0/0
 18958 ;;		Unchanged: 0/0
 18959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18961 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18962 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18963 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;Total ram usage:       25 bytes
 18965 ;; Hardware stack levels used:    1
 18966 ;; Hardware stack levels required when called:    3
 18967 ;; This function calls:
 18968 ;;		i2_getRTC
 18969 ;;		i2_lcdInst
 18970 ;;		i2_printf
 18971 ;;		i2_strcpy
 18972 ;; This function is called by:
 18973 ;;		i2_change_state_to_menu_start
 18974 ;; This function uses a non-reentrant model
 18975 ;;
 18976                           
 18977                           	psect	text64
 18978  002EA6                     __ptext64:
 18979                           	opt stack 0
 18980  002EA6                     i2_printRTC:
 18981                           	opt stack 18
 18982                           
 18983                           ;RTC.c: 64: getRTC();
 18984                           
 18985                           ;incstack = 0
 18986  002EA6  ECE6  F023         	call	i2_getRTC	;wreg free
 18987                           
 18988                           ;RTC.c: 65: char month[] = "MMM";
 18989  002EAA  C145  F03D         	movff	printRTC@F3226,i2printRTC@month
 18990  002EAE  C146  F03E         	movff	printRTC@F3226+1,i2printRTC@month+1
 18991  002EB2  C147  F03F         	movff	printRTC@F3226+2,i2printRTC@month+2
 18992  002EB6  C148  F040         	movff	printRTC@F3226+3,i2printRTC@month+3
 18993                           
 18994                           ;RTC.c: 66: int INT_time[7];
 18995                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18996  002EBA  0E00               	movlw	0
 18997  002EBC  6E42               	movwf	i2printRTC@i+1,c
 18998  002EBE  0E00               	movlw	0
 18999  002EC0  6E41               	movwf	i2printRTC@i,c
 19000  002EC2  BE42               	btfsc	i2printRTC@i+1,7,c
 19001  002EC4  D006               	goto	i2l6958
 19002  002EC6  5042               	movf	i2printRTC@i+1,w,c
 19003  002EC8  E135               	bnz	i2l606
 19004  002ECA  0E07               	movlw	7
 19005  002ECC  5C41               	subwf	i2printRTC@i,w,c
 19006  002ECE  B0D8               	btfsc	status,0,c
 19007  002ED0  D031               	goto	i2l606
 19008  002ED2                     i2l6958:
 19009                           
 19010                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19011  002ED2  0E1C               	movlw	low _time
 19012  002ED4  2441               	addwf	i2printRTC@i,w,c
 19013  002ED6  6ED9               	movwf	fsr2l,c
 19014  002ED8  0E01               	movlw	high _time
 19015  002EDA  2042               	addwfc	i2printRTC@i+1,w,c
 19016  002EDC  6EDA               	movwf	fsr2h,c
 19017  002EDE  50DF               	movf	indf2,w,c
 19018  002EE0  6E2A               	movwf	??i2_printRTC& (0+255),c
 19019  002EE2  3A2A               	swapf	??i2_printRTC,f,c
 19020  002EE4  0E0F               	movlw	15
 19021  002EE6  162A               	andwf	??i2_printRTC,f,c
 19022  002EE8  0E0F               	movlw	15
 19023  002EEA  162A               	andwf	??i2_printRTC,f,c
 19024  002EEC  502A               	movf	??i2_printRTC,w,c
 19025  002EEE  0D0A               	mullw	10
 19026  002EF0  0E1C               	movlw	low _time
 19027  002EF2  2441               	addwf	i2printRTC@i,w,c
 19028  002EF4  6ED9               	movwf	fsr2l,c
 19029  002EF6  0E01               	movlw	high _time
 19030  002EF8  2042               	addwfc	i2printRTC@i+1,w,c
 19031  002EFA  6EDA               	movwf	fsr2h,c
 19032  002EFC  50DF               	movf	indf2,w,c
 19033  002EFE  0B0F               	andlw	15
 19034  002F00  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 19035  002F02  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 19036  002F04  50F3               	movf	prodl,w,c
 19037  002F06  262B               	addwf	??i2_printRTC+1,f,c
 19038  002F08  50F4               	movf	prodh,w,c
 19039  002F0A  222C               	addwfc	??i2_printRTC+2,f,c
 19040  002F0C  90D8               	bcf	status,0,c
 19041  002F0E  3441               	rlcf	i2printRTC@i,w,c
 19042  002F10  6ED9               	movwf	fsr2l,c
 19043  002F12  3442               	rlcf	i2printRTC@i+1,w,c
 19044  002F14  6EDA               	movwf	fsr2h,c
 19045  002F16  0E2D               	movlw	low i2printRTC@INT_time
 19046  002F18  26D9               	addwf	fsr2l,f,c
 19047  002F1A  0E00               	movlw	high i2printRTC@INT_time
 19048  002F1C  22DA               	addwfc	fsr2h,f,c
 19049  002F1E  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 19050  002F22  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 19051  002F26  4A41               	infsnz	i2printRTC@i,f,c
 19052  002F28  2A42               	incf	i2printRTC@i+1,f,c
 19053  002F2A  BE42               	btfsc	i2printRTC@i+1,7,c
 19054  002F2C  D7D2               	goto	i2l6958
 19055  002F2E  5042               	movf	i2printRTC@i+1,w,c
 19056  002F30  E101               	bnz	i2u540_40
 19057  002F32  D7CB               	goto	L12
 19058  002F34                     i2u540_40:
 19059  002F34                     i2l606:
 19060                           
 19061                           ;RTC.c: 69: }
 19062                           ;RTC.c: 70: int RTC_month = INT_time[5];
 19063  002F34  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 19064  002F38  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 19065                           
 19066                           ;RTC.c: 71: switch(RTC_month){
 19067  002F3C  D084               	goto	i2l6990
 19068  002F3E                     i2l6964:
 19069                           
 19070                           ;RTC.c: 73: strcpy(month, "JAN");
 19071  002F3E  0E3D               	movlw	low i2printRTC@month
 19072  002F40  6E01               	movwf	i2strcpy@to,c
 19073  002F42  0E00               	movlw	high i2printRTC@month
 19074  002F44  6E02               	movwf	i2strcpy@to+1,c
 19075  002F46  0EDB               	movlw	low STR_8
 19076  002F48  6E03               	movwf	i2strcpy@from,c
 19077  002F4A  0EFF               	movlw	high STR_8
 19078  002F4C  6E04               	movwf	i2strcpy@from+1,c
 19079  002F4E  EC07  F027         	call	i2_strcpy	;wreg free
 19080                           
 19081                           ;RTC.c: 74: break;
 19082  002F52  D0A6               	goto	i2l6992
 19083  002F54                     i2l6966:
 19084                           
 19085                           ;RTC.c: 76: strcpy(month, "FEB");
 19086  002F54  0E3D               	movlw	low i2printRTC@month
 19087  002F56  6E01               	movwf	i2strcpy@to,c
 19088  002F58  0E00               	movlw	high i2printRTC@month
 19089  002F5A  6E02               	movwf	i2strcpy@to+1,c
 19090  002F5C  0ECB               	movlw	low STR_9
 19091  002F5E  6E03               	movwf	i2strcpy@from,c
 19092  002F60  0EFF               	movlw	high STR_9
 19093  002F62  6E04               	movwf	i2strcpy@from+1,c
 19094  002F64  EC07  F027         	call	i2_strcpy	;wreg free
 19095                           
 19096                           ;RTC.c: 77: break;
 19097  002F68  D09B               	goto	i2l6992
 19098  002F6A                     i2l6968:
 19099                           
 19100                           ;RTC.c: 79: strcpy(month, "MAR");
 19101  002F6A  0E3D               	movlw	low i2printRTC@month
 19102  002F6C  6E01               	movwf	i2strcpy@to,c
 19103  002F6E  0E00               	movlw	high i2printRTC@month
 19104  002F70  6E02               	movwf	i2strcpy@to+1,c
 19105  002F72  0EE7               	movlw	low STR_10
 19106  002F74  6E03               	movwf	i2strcpy@from,c
 19107  002F76  0EFF               	movlw	high STR_10
 19108  002F78  6E04               	movwf	i2strcpy@from+1,c
 19109  002F7A  EC07  F027         	call	i2_strcpy	;wreg free
 19110                           
 19111                           ;RTC.c: 80: break;
 19112  002F7E  D090               	goto	i2l6992
 19113  002F80                     i2l6970:
 19114                           
 19115                           ;RTC.c: 82: strcpy(month, "APR");
 19116  002F80  0E3D               	movlw	low i2printRTC@month
 19117  002F82  6E01               	movwf	i2strcpy@to,c
 19118  002F84  0E00               	movlw	high i2printRTC@month
 19119  002F86  6E02               	movwf	i2strcpy@to+1,c
 19120  002F88  0EEB               	movlw	low STR_11
 19121  002F8A  6E03               	movwf	i2strcpy@from,c
 19122  002F8C  0EFF               	movlw	high STR_11
 19123  002F8E  6E04               	movwf	i2strcpy@from+1,c
 19124  002F90  EC07  F027         	call	i2_strcpy	;wreg free
 19125                           
 19126                           ;RTC.c: 83: break;
 19127  002F94  D085               	goto	i2l6992
 19128  002F96                     i2l6972:
 19129                           
 19130                           ;RTC.c: 85: strcpy(month, "MAY");
 19131  002F96  0E3D               	movlw	low i2printRTC@month
 19132  002F98  6E01               	movwf	i2strcpy@to,c
 19133  002F9A  0E00               	movlw	high i2printRTC@month
 19134  002F9C  6E02               	movwf	i2strcpy@to+1,c
 19135  002F9E  0EFB               	movlw	low STR_12
 19136  002FA0  6E03               	movwf	i2strcpy@from,c
 19137  002FA2  0EFF               	movlw	high STR_12
 19138  002FA4  6E04               	movwf	i2strcpy@from+1,c
 19139  002FA6  EC07  F027         	call	i2_strcpy	;wreg free
 19140                           
 19141                           ;RTC.c: 86: break;
 19142  002FAA  D07A               	goto	i2l6992
 19143  002FAC                     i2l6974:
 19144                           
 19145                           ;RTC.c: 88: strcpy(month, "JUN");
 19146  002FAC  0E3D               	movlw	low i2printRTC@month
 19147  002FAE  6E01               	movwf	i2strcpy@to,c
 19148  002FB0  0E00               	movlw	high i2printRTC@month
 19149  002FB2  6E02               	movwf	i2strcpy@to+1,c
 19150  002FB4  0EDF               	movlw	low STR_13
 19151  002FB6  6E03               	movwf	i2strcpy@from,c
 19152  002FB8  0EFF               	movlw	high STR_13
 19153  002FBA  6E04               	movwf	i2strcpy@from+1,c
 19154  002FBC  EC07  F027         	call	i2_strcpy	;wreg free
 19155                           
 19156                           ;RTC.c: 89: break;
 19157  002FC0  D06F               	goto	i2l6992
 19158  002FC2                     i2l6976:
 19159                           
 19160                           ;RTC.c: 91: strcpy(month, "JUL");
 19161  002FC2  0E3D               	movlw	low i2printRTC@month
 19162  002FC4  6E01               	movwf	i2strcpy@to,c
 19163  002FC6  0E00               	movlw	high i2printRTC@month
 19164  002FC8  6E02               	movwf	i2strcpy@to+1,c
 19165  002FCA  0ED7               	movlw	low STR_14
 19166  002FCC  6E03               	movwf	i2strcpy@from,c
 19167  002FCE  0EFF               	movlw	high STR_14
 19168  002FD0  6E04               	movwf	i2strcpy@from+1,c
 19169  002FD2  EC07  F027         	call	i2_strcpy	;wreg free
 19170                           
 19171                           ;RTC.c: 92: break;
 19172  002FD6  D064               	goto	i2l6992
 19173  002FD8                     i2l6978:
 19174                           
 19175                           ;RTC.c: 94: strcpy(month, "AUG");
 19176  002FD8  0E3D               	movlw	low i2printRTC@month
 19177  002FDA  6E01               	movwf	i2strcpy@to,c
 19178  002FDC  0E00               	movlw	high i2printRTC@month
 19179  002FDE  6E02               	movwf	i2strcpy@to+1,c
 19180  002FE0  0ED3               	movlw	low STR_15
 19181  002FE2  6E03               	movwf	i2strcpy@from,c
 19182  002FE4  0EFF               	movlw	high STR_15
 19183  002FE6  6E04               	movwf	i2strcpy@from+1,c
 19184  002FE8  EC07  F027         	call	i2_strcpy	;wreg free
 19185                           
 19186                           ;RTC.c: 95: break;
 19187  002FEC  D059               	goto	i2l6992
 19188  002FEE                     i2l6980:
 19189                           
 19190                           ;RTC.c: 97: strcpy(month, "SEP");
 19191  002FEE  0E3D               	movlw	low i2printRTC@month
 19192  002FF0  6E01               	movwf	i2strcpy@to,c
 19193  002FF2  0E00               	movlw	high i2printRTC@month
 19194  002FF4  6E02               	movwf	i2strcpy@to+1,c
 19195  002FF6  0EE3               	movlw	low STR_16
 19196  002FF8  6E03               	movwf	i2strcpy@from,c
 19197  002FFA  0EFF               	movlw	high STR_16
 19198  002FFC  6E04               	movwf	i2strcpy@from+1,c
 19199  002FFE  EC07  F027         	call	i2_strcpy	;wreg free
 19200                           
 19201                           ;RTC.c: 98: break;
 19202  003002  D04E               	goto	i2l6992
 19203  003004                     i2l6982:
 19204                           
 19205                           ;RTC.c: 100: strcpy(month, "OCT");
 19206  003004  0E3D               	movlw	low i2printRTC@month
 19207  003006  6E01               	movwf	i2strcpy@to,c
 19208  003008  0E00               	movlw	high i2printRTC@month
 19209  00300A  6E02               	movwf	i2strcpy@to+1,c
 19210  00300C  0EF3               	movlw	low STR_17
 19211  00300E  6E03               	movwf	i2strcpy@from,c
 19212  003010  0EFF               	movlw	high STR_17
 19213  003012  6E04               	movwf	i2strcpy@from+1,c
 19214  003014  EC07  F027         	call	i2_strcpy	;wreg free
 19215                           
 19216                           ;RTC.c: 101: break;
 19217  003018  D043               	goto	i2l6992
 19218  00301A                     i2l6984:
 19219                           
 19220                           ;RTC.c: 103: strcpy(month, "NOV");
 19221  00301A  0E3D               	movlw	low i2printRTC@month
 19222  00301C  6E01               	movwf	i2strcpy@to,c
 19223  00301E  0E00               	movlw	high i2printRTC@month
 19224  003020  6E02               	movwf	i2strcpy@to+1,c
 19225  003022  0EF7               	movlw	low STR_18
 19226  003024  6E03               	movwf	i2strcpy@from,c
 19227  003026  0EFF               	movlw	high STR_18
 19228  003028  6E04               	movwf	i2strcpy@from+1,c
 19229  00302A  EC07  F027         	call	i2_strcpy	;wreg free
 19230                           
 19231                           ;RTC.c: 104: break;
 19232  00302E  D038               	goto	i2l6992
 19233  003030                     i2l6986:
 19234                           
 19235                           ;RTC.c: 106: strcpy(month, "DEC");
 19236  003030  0E3D               	movlw	low i2printRTC@month
 19237  003032  6E01               	movwf	i2strcpy@to,c
 19238  003034  0E00               	movlw	high i2printRTC@month
 19239  003036  6E02               	movwf	i2strcpy@to+1,c
 19240  003038  0ECF               	movlw	low STR_19
 19241  00303A  6E03               	movwf	i2strcpy@from,c
 19242  00303C  0EFF               	movlw	high STR_19
 19243  00303E  6E04               	movwf	i2strcpy@from+1,c
 19244  003040  EC07  F027         	call	i2_strcpy	;wreg free
 19245                           
 19246                           ;RTC.c: 108: }
 19247                           
 19248                           ;RTC.c: 107: break;
 19249  003044  D02D               	goto	i2l6992
 19250  003046                     i2l6990:
 19251  003046  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 19252  00304A  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 19253                           
 19254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19255                           ; Switch size 1, requested type "space"
 19256                           ; Number of cases is 1, Range of values is 0 to 0
 19257                           ; switch strategies available:
 19258                           ; Name         Instructions Cycles
 19259                           ; simple_byte            4     3 (average)
 19260                           ;	Chosen strategy is simple_byte
 19261  00304E  502B               	movf	??i2_printRTC+1,w,c
 19262  003050  0A00               	xorlw	0	; case 0
 19263  003052  A4D8               	btfss	status,2,c
 19264  003054  D025               	goto	i2l6992
 19265                           
 19266                           ; Switch size 1, requested type "space"
 19267                           ; Number of cases is 12, Range of values is 1 to 12
 19268                           ; switch strategies available:
 19269                           ; Name         Instructions Cycles
 19270                           ; simple_byte           37    19 (average)
 19271                           ;	Chosen strategy is simple_byte
 19272  003056  502A               	movf	??i2_printRTC,w,c
 19273  003058  0A01               	xorlw	1	; case 1
 19274  00305A  B4D8               	btfsc	status,2,c
 19275  00305C  D770               	goto	i2l6964
 19276  00305E  0A03               	xorlw	3	; case 2
 19277  003060  B4D8               	btfsc	status,2,c
 19278  003062  D778               	goto	i2l6966
 19279  003064  0A01               	xorlw	1	; case 3
 19280  003066  B4D8               	btfsc	status,2,c
 19281  003068  D780               	goto	i2l6968
 19282  00306A  0A07               	xorlw	7	; case 4
 19283  00306C  B4D8               	btfsc	status,2,c
 19284  00306E  D788               	goto	i2l6970
 19285  003070  0A01               	xorlw	1	; case 5
 19286  003072  B4D8               	btfsc	status,2,c
 19287  003074  D790               	goto	i2l6972
 19288  003076  0A03               	xorlw	3	; case 6
 19289  003078  B4D8               	btfsc	status,2,c
 19290  00307A  D798               	goto	i2l6974
 19291  00307C  0A01               	xorlw	1	; case 7
 19292  00307E  B4D8               	btfsc	status,2,c
 19293  003080  D7A0               	goto	i2l6976
 19294  003082  0A0F               	xorlw	15	; case 8
 19295  003084  B4D8               	btfsc	status,2,c
 19296  003086  D7A8               	goto	i2l6978
 19297  003088  0A01               	xorlw	1	; case 9
 19298  00308A  B4D8               	btfsc	status,2,c
 19299  00308C  D7B0               	goto	i2l6980
 19300  00308E  0A03               	xorlw	3	; case 10
 19301  003090  B4D8               	btfsc	status,2,c
 19302  003092  D7B8               	goto	i2l6982
 19303  003094  0A01               	xorlw	1	; case 11
 19304  003096  B4D8               	btfsc	status,2,c
 19305  003098  D7C0               	goto	i2l6984
 19306  00309A  0A07               	xorlw	7	; case 12
 19307  00309C  B4D8               	btfsc	status,2,c
 19308  00309E  D7C8               	goto	i2l6986
 19309  0030A0                     i2l6992:
 19310                           
 19311                           ;RTC.c: 109: lcdInst(0b10000000);;
 19312  0030A0  0E80               	movlw	128
 19313  0030A2  EC6B  F029         	call	i2_lcdInst
 19314                           
 19315                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 19316  0030A6  0E06               	movlw	low STR_21
 19317  0030A8  6E0D               	movwf	i2printf@f,c
 19318  0030AA  0EFB               	movlw	high STR_21
 19319  0030AC  6E0E               	movwf	i2printf@f+1,c
 19320  0030AE  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 19321  0030B2  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 19322  0030B6  0E3D               	movlw	low i2printRTC@month
 19323  0030B8  6E11               	movwf	?i2_printf+4,c
 19324  0030BA  0E00               	movlw	high i2printRTC@month
 19325  0030BC  6E12               	movwf	?i2_printf+5,c
 19326  0030BE  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 19327  0030C2  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 19328  0030C6  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 19329  0030CA  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 19330  0030CE  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 19331  0030D2  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 19332  0030D6  ECE0  F00E         	call	i2_printf	;wreg free
 19333  0030DA  0012               	return		;funcret
 19334  0030DC                     __end_ofi2_printRTC:
 19335                           	opt stack 0
 19336                           pclatu	equ	0xFFB
 19337                           pclath	equ	0xFFA
 19338                           tblptru	equ	0xFF8
 19339                           tblptrh	equ	0xFF7
 19340                           tblptrl	equ	0xFF6
 19341                           tablat	equ	0xFF5
 19342                           prodh	equ	0xFF4
 19343                           prodl	equ	0xFF3
 19344                           intcon	equ	0xFF2
 19345                           intcon2	equ	0xFF1
 19346                           intcon3	equ	0xFF0
 19347                           indf0	equ	0xFEF
 19348                           postinc0	equ	0xFEE
 19349                           fsr0h	equ	0xFEA
 19350                           fsr0l	equ	0xFE9
 19351                           wreg	equ	0xFE8
 19352                           postdec1	equ	0xFE5
 19353                           fsr1h	equ	0xFE2
 19354                           fsr1l	equ	0xFE1
 19355                           indf2	equ	0xFDF
 19356                           postinc2	equ	0xFDE
 19357                           postdec2	equ	0xFDD
 19358                           fsr2h	equ	0xFDA
 19359                           fsr2l	equ	0xFD9
 19360                           status	equ	0xFD8
 19361                           
 19362 ;; *************** function i2_strcpy *****************
 19363 ;; Defined at:
 19364 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 19365 ;; Parameters:    Size  Location     Type
 19366 ;;  to              2    0[COMRAM] PTR unsigned char 
 19367 ;;		 -> printRTC@month(4), UI@month(4), 
 19368 ;;  from            2    2[COMRAM] PTR const unsigned char 
 19369 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 19370 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 19371 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 19372 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 19373 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 19374 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 19375 ;;		 -> STR_8(4), 
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 19378 ;;		 -> printRTC@month(4), UI@month(4), 
 19379 ;; Return value:  Size  Location     Type
 19380 ;;                  2    0[COMRAM] PTR unsigned char 
 19381 ;; Registers used:
 19382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19383 ;; Tracked objects:
 19384 ;;		On entry : 0/0
 19385 ;;		On exit  : 0/0
 19386 ;;		Unchanged: 0/0
 19387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19388 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;Total ram usage:        6 bytes
 19393 ;; Hardware stack levels used:    1
 19394 ;; This function calls:
 19395 ;;		Nothing
 19396 ;; This function is called by:
 19397 ;;		i2_printRTC
 19398 ;; This function uses a non-reentrant model
 19399 ;;
 19400                           
 19401                           	psect	text65
 19402  004E0E                     __ptext65:
 19403                           	opt stack 0
 19404  004E0E                     i2_strcpy:
 19405                           	opt stack 20
 19406                           
 19407                           ;incstack = 0
 19408  004E0E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 19409  004E12  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 19410  004E16  D004               	goto	i2l6612
 19411  004E18                     i2l6610:
 19412  004E18  4A05               	infsnz	i2strcpy@cp,f,c
 19413  004E1A  2A06               	incf	i2strcpy@cp+1,f,c
 19414  004E1C  4A03               	infsnz	i2strcpy@from,f,c
 19415  004E1E  2A04               	incf	i2strcpy@from+1,f,c
 19416  004E20                     i2l6612:
 19417  004E20  C003  FFF6         	movff	i2strcpy@from,tblptrl
 19418  004E24  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 19419  004E28                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19420  004E28  6AF8               	clrf	tblptru,c
 19421  004E2A                     	endif
 19422  004E2A                     	if	0	;tblptru may be non-zero
 19423  004E2A                     	endif
 19424  004E2A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 19425  004E2E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 19426  004E32  0008               	tblrd		*
 19427  004E34  CFF5 FFDF          	movff	tablat,indf2
 19428  004E38  50DF               	movf	indf2,w,c
 19429  004E3A  B4D8               	btfsc	status,2,c
 19430  004E3C  0012               	return	
 19431  004E3E  D7EC               	goto	i2l6610
 19432  004E40                     __end_ofi2_strcpy:
 19433                           	opt stack 0
 19434                           pclatu	equ	0xFFB
 19435                           pclath	equ	0xFFA
 19436                           tblptru	equ	0xFF8
 19437                           tblptrh	equ	0xFF7
 19438                           tblptrl	equ	0xFF6
 19439                           tablat	equ	0xFF5
 19440                           prodh	equ	0xFF4
 19441                           prodl	equ	0xFF3
 19442                           intcon	equ	0xFF2
 19443                           intcon2	equ	0xFF1
 19444                           intcon3	equ	0xFF0
 19445                           indf0	equ	0xFEF
 19446                           postinc0	equ	0xFEE
 19447                           fsr0h	equ	0xFEA
 19448                           fsr0l	equ	0xFE9
 19449                           wreg	equ	0xFE8
 19450                           postdec1	equ	0xFE5
 19451                           fsr1h	equ	0xFE2
 19452                           fsr1l	equ	0xFE1
 19453                           indf2	equ	0xFDF
 19454                           postinc2	equ	0xFDE
 19455                           postdec2	equ	0xFDD
 19456                           fsr2h	equ	0xFDA
 19457                           fsr2l	equ	0xFD9
 19458                           status	equ	0xFD8
 19459                           
 19460 ;; *************** function _inputHandler *****************
 19461 ;; Defined at:
 19462 ;;		line 372 in file "UI.c"
 19463 ;; Parameters:    Size  Location     Type
 19464 ;;		None
 19465 ;; Auto vars:     Size  Location     Type
 19466 ;;		None
 19467 ;; Return value:  Size  Location     Type
 19468 ;;                  2   41[COMRAM] int 
 19469 ;; Registers used:
 19470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19471 ;; Tracked objects:
 19472 ;;		On entry : 0/0
 19473 ;;		On exit  : 0/0
 19474 ;;		Unchanged: 0/0
 19475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19478 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19479 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19480 ;;Total ram usage:        4 bytes
 19481 ;; Hardware stack levels used:    1
 19482 ;; Hardware stack levels required when called:    4
 19483 ;; This function calls:
 19484 ;;		_change_state_to_logs_11
 19485 ;;		_change_state_to_logs_12
 19486 ;;		_change_state_to_logs_22
 19487 ;;		_change_state_to_logs_23
 19488 ;;		_change_state_to_logs_33
 19489 ;;		_change_state_to_logs_34
 19490 ;;		_change_state_to_menu_11
 19491 ;;		_change_state_to_menu_23
 19492 ;;		i2_change_state_to_menu_12
 19493 ;;		i2_change_state_to_menu_22
 19494 ;; This function is called by:
 19495 ;;		_updateMenu
 19496 ;; This function uses a non-reentrant model
 19497 ;;
 19498                           
 19499                           	psect	text66
 19500  0034F8                     __ptext66:
 19501                           	opt stack 0
 19502  0034F8                     _inputHandler:
 19503                           	opt stack 18
 19504                           
 19505                           ;UI.c: 377: if(firstboot){
 19506                           
 19507                           ;incstack = 0
 19508  0034F8  0101               	movlb	1	; () banked
 19509  0034FA  513B               	movf	_firstboot& (0+255),w,b
 19510  0034FC  0101               	movlb	1	; () banked
 19511  0034FE  113C               	iorwf	(_firstboot+1)& (0+255),w,b
 19512  003500  B4D8               	btfsc	status,2,c
 19513  003502  D00C               	goto	i2l7060
 19514                           
 19515                           ; BSR set to: 1
 19516                           ;UI.c: 378: change_state_to_menu_11();
 19517  003504  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 19518                           
 19519                           ;UI.c: 379: firstboot = 0;
 19520  003508  0E00               	movlw	0
 19521  00350A  0101               	movlb	1	; () banked
 19522  00350C  6F3C               	movwf	(_firstboot+1)& (0+255),b
 19523  00350E  0E00               	movlw	0
 19524  003510  6F3B               	movwf	_firstboot& (0+255),b
 19525                           
 19526                           ; BSR set to: 1
 19527                           ;UI.c: 380: return 0;
 19528  003512  0E00               	movlw	0
 19529  003514  6E2B               	movwf	?_inputHandler+1,c
 19530  003516  0E00               	movlw	0
 19531  003518  6E2A               	movwf	?_inputHandler,c
 19532                           
 19533                           ; BSR set to: 1
 19534  00351A  0012               	return	
 19535  00351C                     i2l7060:
 19536                           
 19537                           ; BSR set to: 1
 19538                           ;UI.c: 381: }
 19539                           ;UI.c: 382: if (logstate){
 19540  00351C  0100               	movlb	0	; () banked
 19541  00351E  51F6               	movf	_logstate& (0+255),w,b
 19542  003520  0100               	movlb	0	; () banked
 19543  003522  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 19544  003524  B4D8               	btfsc	status,2,c
 19545  003526  D0C7               	goto	i2l7178
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 19549  003528  0E43               	movlw	67
 19550  00352A  187D               	xorwf	_input,w,c	;volatile
 19551  00352C  A4D8               	btfss	status,2,c
 19552  00352E  D012               	goto	i2l7078
 19553                           
 19554                           ; BSR set to: 0
 19555  003530  B281               	btfsc	3969,1,c	;volatile
 19556  003532  D009               	goto	i2l7070
 19557  003534  D00F               	goto	i2l7078
 19558  003536                     i2l7068:
 19559                           
 19560                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 19561  003536  0E68               	movlw	104
 19562  003538  6E2C               	movwf	??_inputHandler& (0+255),c
 19563  00353A  0EE4               	movlw	228
 19564  00353C                     i2u1004_47:
 19565  00353C  2EE8               	decfsz	wreg,f,c
 19566  00353E  D7FE               	bra	i2u1004_47
 19567  003540  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 19568  003542  D7FC               	bra	i2u1004_47
 19569  003544  D000               	nop2	
 19570  003546                     i2l7070:
 19571  003546  B281               	btfsc	3969,1,c	;volatile
 19572  003548  D7F6               	goto	i2l7068
 19573  00354A                     i2l7072:
 19574                           
 19575                           ;UI.c: 387: }
 19576                           ;UI.c: 388: return 0;
 19577  00354A  0E00               	movlw	0
 19578  00354C  6E2B               	movwf	?_inputHandler+1,c
 19579  00354E  0E00               	movlw	0
 19580  003550  6E2A               	movwf	?_inputHandler,c
 19581  003552  0012               	return	
 19582  003554                     i2l7078:
 19583                           
 19584                           ;UI.c: 390: else if (input == 'D'){
 19585  003554  0E44               	movlw	68
 19586  003556  187D               	xorwf	_input,w,c	;volatile
 19587  003558  A4D8               	btfss	status,2,c
 19588  00355A  D7F7               	goto	i2l7072
 19589                           
 19590                           ;UI.c: 392: logstate = 0;
 19591  00355C  0E00               	movlw	0
 19592  00355E  0100               	movlb	0	; () banked
 19593  003560  6FF7               	movwf	(_logstate+1)& (0+255),b
 19594  003562  0E00               	movlw	0
 19595  003564  6FF6               	movwf	_logstate& (0+255),b
 19596                           
 19597                           ;UI.c: 393: switch(cur_state){
 19598  003566  D012               	goto	i2l7096
 19599  003568                     i2l7082:
 19600                           
 19601                           ;UI.c: 395: change_state_to_logs_11();
 19602  003568  ECF8  F027         	call	_change_state_to_logs_11	;wreg free
 19603                           
 19604                           ;UI.c: 396: break;
 19605  00356C  D7EE               	goto	i2l7072
 19606  00356E                     i2l7084:
 19607                           
 19608                           ;UI.c: 398: change_state_to_logs_12();
 19609  00356E  ECE0  F027         	call	_change_state_to_logs_12	;wreg free
 19610                           
 19611                           ;UI.c: 399: break;
 19612  003572  D7EB               	goto	i2l7072
 19613  003574                     i2l7086:
 19614                           
 19615                           ;UI.c: 401: change_state_to_logs_22();
 19616  003574  ECC8  F027         	call	_change_state_to_logs_22	;wreg free
 19617                           
 19618                           ;UI.c: 402: break;
 19619  003578  D7E8               	goto	i2l7072
 19620  00357A                     i2l7088:
 19621                           
 19622                           ;UI.c: 404: change_state_to_logs_23();
 19623  00357A  EC27  F028         	call	_change_state_to_logs_23	;wreg free
 19624                           
 19625                           ;UI.c: 405: break;
 19626  00357E  D7E5               	goto	i2l7072
 19627  003580                     i2l7090:
 19628                           
 19629                           ;UI.c: 407: change_state_to_logs_33();
 19630  003580  ECB0  F027         	call	_change_state_to_logs_33	;wreg free
 19631                           
 19632                           ;UI.c: 408: break;
 19633  003584  D7E2               	goto	i2l7072
 19634  003586                     i2l7092:
 19635                           
 19636                           ;UI.c: 410: change_state_to_logs_34();
 19637  003586  EC98  F027         	call	_change_state_to_logs_34	;wreg free
 19638                           
 19639                           ;UI.c: 412: }
 19640                           
 19641                           ;UI.c: 411: break;
 19642  00358A  D7DF               	goto	i2l7072
 19643  00358C                     i2l7096:
 19644  00358C  C0EC  F02C         	movff	_cur_state,??_inputHandler
 19645  003590  C0ED  F02D         	movff	_cur_state+1,??_inputHandler+1
 19646                           
 19647                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19648                           ; Switch size 1, requested type "space"
 19649                           ; Number of cases is 2, Range of values is 3 to 4
 19650                           ; switch strategies available:
 19651                           ; Name         Instructions Cycles
 19652                           ; simple_byte            7     4 (average)
 19653                           ;	Chosen strategy is simple_byte
 19654  003594  502D               	movf	??_inputHandler+1,w,c
 19655  003596  0A03               	xorlw	3	; case 3
 19656  003598  B4D8               	btfsc	status,2,c
 19657  00359A  D004               	goto	i2l9950
 19658  00359C  0A07               	xorlw	7	; case 4
 19659  00359E  B4D8               	btfsc	status,2,c
 19660  0035A0  D00F               	goto	i2l9952
 19661  0035A2  D7D3               	goto	i2l7072
 19662  0035A4                     i2l9950:
 19663                           
 19664                           ; Switch size 1, requested type "space"
 19665                           ; Number of cases is 4, Range of values is 243 to 255
 19666                           ; switch strategies available:
 19667                           ; Name         Instructions Cycles
 19668                           ; simple_byte           13     7 (average)
 19669                           ;	Chosen strategy is simple_byte
 19670  0035A4  502C               	movf	??_inputHandler,w,c
 19671  0035A6  0AF3               	xorlw	243	; case 243
 19672  0035A8  B4D8               	btfsc	status,2,c
 19673  0035AA  D7DE               	goto	i2l7082
 19674  0035AC  0A07               	xorlw	7	; case 244
 19675  0035AE  B4D8               	btfsc	status,2,c
 19676  0035B0  D7DE               	goto	i2l7084
 19677  0035B2  0A0A               	xorlw	10	; case 254
 19678  0035B4  B4D8               	btfsc	status,2,c
 19679  0035B6  D7DE               	goto	i2l7086
 19680  0035B8  0A01               	xorlw	1	; case 255
 19681  0035BA  B4D8               	btfsc	status,2,c
 19682  0035BC  D7DE               	goto	i2l7088
 19683  0035BE  D7C5               	goto	i2l7072
 19684  0035C0                     i2l9952:
 19685                           
 19686                           ; Switch size 1, requested type "space"
 19687                           ; Number of cases is 2, Range of values is 9 to 10
 19688                           ; switch strategies available:
 19689                           ; Name         Instructions Cycles
 19690                           ; simple_byte            7     4 (average)
 19691                           ;	Chosen strategy is simple_byte
 19692  0035C0  502C               	movf	??_inputHandler,w,c
 19693  0035C2  0A09               	xorlw	9	; case 9
 19694  0035C4  B4D8               	btfsc	status,2,c
 19695  0035C6  D7DC               	goto	i2l7090
 19696  0035C8  0A03               	xorlw	3	; case 10
 19697  0035CA  B4D8               	btfsc	status,2,c
 19698  0035CC  D7DC               	goto	i2l7092
 19699  0035CE  D7BD               	goto	i2l7072
 19700  0035D0                     i2l7108:
 19701                           
 19702                           ;UI.c: 422: if(cur_state == 11){
 19703  0035D0  0E0B               	movlw	11
 19704  0035D2  0100               	movlb	0	; () banked
 19705  0035D4  19EC               	xorwf	_cur_state& (0+255),w,b
 19706  0035D6  0100               	movlb	0	; () banked
 19707  0035D8  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19708  0035DA  A4D8               	btfss	status,2,c
 19709  0035DC  D005               	goto	i2l7116
 19710                           
 19711                           ; BSR set to: 0
 19712                           ;UI.c: 423: return 0;
 19713  0035DE  0E00               	movlw	0
 19714  0035E0  6E2B               	movwf	?_inputHandler+1,c
 19715  0035E2  0E00               	movlw	0
 19716  0035E4  6E2A               	movwf	?_inputHandler,c
 19717                           
 19718                           ; BSR set to: 0
 19719  0035E6  0012               	return	
 19720  0035E8                     i2l7116:
 19721                           
 19722                           ; BSR set to: 0
 19723                           ;UI.c: 425: else{
 19724                           ;UI.c: 426: change_state_to_menu_11();
 19725  0035E8  EC80  F027         	call	_change_state_to_menu_11	;wreg free
 19726                           
 19727                           ;UI.c: 427: }
 19728                           ;UI.c: 428: return 0;
 19729  0035EC  0E00               	movlw	0
 19730  0035EE  6E2B               	movwf	?_inputHandler+1,c
 19731  0035F0  0E00               	movlw	0
 19732  0035F2  6E2A               	movwf	?_inputHandler,c
 19733  0035F4  0012               	return	
 19734  0035F6                     i2l7122:
 19735                           
 19736                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 19737  0035F6  0E16               	movlw	22
 19738  0035F8  0100               	movlb	0	; () banked
 19739  0035FA  19EC               	xorwf	_cur_state& (0+255),w,b
 19740  0035FC  0100               	movlb	0	; () banked
 19741  0035FE  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19742  003600  B4D8               	btfsc	status,2,c
 19743  003602  D007               	goto	i2l7126
 19744                           
 19745                           ; BSR set to: 0
 19746  003604  0E0C               	movlw	12
 19747  003606  0100               	movlb	0	; () banked
 19748  003608  19EC               	xorwf	_cur_state& (0+255),w,b
 19749  00360A  0100               	movlb	0	; () banked
 19750  00360C  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19751  00360E  A4D8               	btfss	status,2,c
 19752  003610  D005               	goto	i2l7132
 19753  003612                     i2l7126:
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;UI.c: 431: return 0;
 19757  003612  0E00               	movlw	0
 19758  003614  6E2B               	movwf	?_inputHandler+1,c
 19759  003616  0E00               	movlw	0
 19760  003618  6E2A               	movwf	?_inputHandler,c
 19761                           
 19762                           ; BSR set to: 0
 19763  00361A  0012               	return	
 19764  00361C                     i2l7132:
 19765                           
 19766                           ; BSR set to: 0
 19767                           ;UI.c: 433: else if(cur_state == 23){
 19768  00361C  0E17               	movlw	23
 19769  00361E  0100               	movlb	0	; () banked
 19770  003620  19EC               	xorwf	_cur_state& (0+255),w,b
 19771  003622  0100               	movlb	0	; () banked
 19772  003624  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19773  003626  A4D8               	btfss	status,2,c
 19774  003628  D003               	goto	i2l7136
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;UI.c: 434: change_state_to_menu_22();
 19778  00362A  EC38  F027         	call	i2_change_state_to_menu_22	;wreg free
 19779                           
 19780                           ;UI.c: 435: }
 19781  00362E  D002               	goto	i2l7138
 19782  003630                     i2l7136:
 19783                           
 19784                           ;UI.c: 436: else{
 19785                           ;UI.c: 437: change_state_to_menu_12();
 19786  003630  EC50  F027         	call	i2_change_state_to_menu_12	;wreg free
 19787  003634                     i2l7138:
 19788                           
 19789                           ;UI.c: 438: }
 19790                           ;UI.c: 439: return 0;
 19791  003634  0E00               	movlw	0
 19792  003636  6E2B               	movwf	?_inputHandler+1,c
 19793  003638  0E00               	movlw	0
 19794  00363A  6E2A               	movwf	?_inputHandler,c
 19795  00363C  0012               	return	
 19796  00363E                     i2l7142:
 19797                           
 19798                           ;UI.c: 441: if(cur_state == 23){
 19799  00363E  0E17               	movlw	23
 19800  003640  0100               	movlb	0	; () banked
 19801  003642  19EC               	xorwf	_cur_state& (0+255),w,b
 19802  003644  0100               	movlb	0	; () banked
 19803  003646  11ED               	iorwf	(_cur_state+1)& (0+255),w,b
 19804  003648  A4D8               	btfss	status,2,c
 19805  00364A  D005               	goto	i2l7150
 19806                           
 19807                           ; BSR set to: 0
 19808                           ;UI.c: 442: return 0;
 19809  00364C  0E00               	movlw	0
 19810  00364E  6E2B               	movwf	?_inputHandler+1,c
 19811  003650  0E00               	movlw	0
 19812  003652  6E2A               	movwf	?_inputHandler,c
 19813                           
 19814                           ; BSR set to: 0
 19815  003654  0012               	return	
 19816  003656                     i2l7150:
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;UI.c: 444: else{
 19820                           ;UI.c: 445: change_state_to_menu_23();
 19821  003656  EC68  F027         	call	_change_state_to_menu_23	;wreg free
 19822                           
 19823                           ;UI.c: 446: }
 19824                           ;UI.c: 447: return 0;
 19825  00365A  0E00               	movlw	0
 19826  00365C  6E2B               	movwf	?_inputHandler+1,c
 19827  00365E  0E00               	movlw	0
 19828  003660  6E2A               	movwf	?_inputHandler,c
 19829  003662  0012               	return	
 19830  003664                     i2l7156:
 19831                           
 19832                           ;UI.c: 450: up = 1;
 19833  003664  0E00               	movlw	0
 19834  003666  6E78               	movwf	_up+1,c
 19835  003668  0E01               	movlw	1
 19836  00366A  6E77               	movwf	_up,c
 19837                           
 19838                           ;UI.c: 451: return 1;
 19839  00366C  0E00               	movlw	0
 19840  00366E  6E2B               	movwf	?_inputHandler+1,c
 19841  003670  0E01               	movlw	1
 19842  003672  6E2A               	movwf	?_inputHandler,c
 19843  003674  0012               	return	
 19844  003676                     i2l7160:
 19845                           
 19846                           ;UI.c: 453: down = 1;
 19847  003676  0E00               	movlw	0
 19848  003678  6E5E               	movwf	_down+1,c
 19849  00367A  0E01               	movlw	1
 19850  00367C  6E5D               	movwf	_down,c
 19851                           
 19852                           ;UI.c: 454: return 1;
 19853  00367E  0E00               	movlw	0
 19854  003680  6E2B               	movwf	?_inputHandler+1,c
 19855  003682  0E01               	movlw	1
 19856  003684  6E2A               	movwf	?_inputHandler,c
 19857  003686  0012               	return	
 19858  003688                     i2l7164:
 19859                           
 19860                           ;UI.c: 456: enter = 1;
 19861  003688  0E00               	movlw	0
 19862  00368A  6E60               	movwf	_enter+1,c
 19863  00368C  0E01               	movlw	1
 19864  00368E  6E5F               	movwf	_enter,c
 19865                           
 19866                           ;UI.c: 457: return 1;
 19867  003690  0E00               	movlw	0
 19868  003692  6E2B               	movwf	?_inputHandler+1,c
 19869  003694  0E01               	movlw	1
 19870  003696  6E2A               	movwf	?_inputHandler,c
 19871  003698  0012               	return	
 19872  00369A                     i2l7168:
 19873                           
 19874                           ;UI.c: 459: back = 1;
 19875  00369A  0E00               	movlw	0
 19876  00369C  6E5C               	movwf	_back+1,c
 19877  00369E  0E01               	movlw	1
 19878  0036A0  6E5B               	movwf	_back,c
 19879                           
 19880                           ;UI.c: 460: return 1;
 19881  0036A2  0E00               	movlw	0
 19882  0036A4  6E2B               	movwf	?_inputHandler+1,c
 19883  0036A6  0E01               	movlw	1
 19884  0036A8  6E2A               	movwf	?_inputHandler,c
 19885  0036AA  0012               	return	
 19886  0036AC                     i2l7172:
 19887                           
 19888                           ;UI.c: 463: return 1;
 19889  0036AC  0E00               	movlw	0
 19890  0036AE  6E2B               	movwf	?_inputHandler+1,c
 19891  0036B0  0E01               	movlw	1
 19892  0036B2  6E2A               	movwf	?_inputHandler,c
 19893                           
 19894                           ;UI.c: 464: }
 19895  0036B4  0012               	return	
 19896  0036B6                     i2l7178:
 19897  0036B6  507D               	movf	_input,w,c	;volatile
 19898                           
 19899                           ; Switch size 1, requested type "space"
 19900                           ; Number of cases is 7, Range of values is 49 to 68
 19901                           ; switch strategies available:
 19902                           ; Name         Instructions Cycles
 19903                           ; simple_byte           22    12 (average)
 19904                           ;	Chosen strategy is simple_byte
 19905  0036B8  0A31               	xorlw	49	; case 49
 19906  0036BA  B4D8               	btfsc	status,2,c
 19907  0036BC  D789               	goto	i2l7108
 19908  0036BE  0A03               	xorlw	3	; case 50
 19909  0036C0  B4D8               	btfsc	status,2,c
 19910  0036C2  D799               	goto	i2l7122
 19911  0036C4  0A01               	xorlw	1	; case 51
 19912  0036C6  B4D8               	btfsc	status,2,c
 19913  0036C8  D7BA               	goto	i2l7142
 19914  0036CA  0A72               	xorlw	114	; case 65
 19915  0036CC  B4D8               	btfsc	status,2,c
 19916  0036CE  D7CA               	goto	i2l7156
 19917  0036D0  0A03               	xorlw	3	; case 66
 19918  0036D2  B4D8               	btfsc	status,2,c
 19919  0036D4  D7D0               	goto	i2l7160
 19920  0036D6  0A01               	xorlw	1	; case 67
 19921  0036D8  B4D8               	btfsc	status,2,c
 19922  0036DA  D7D6               	goto	i2l7164
 19923  0036DC  0A07               	xorlw	7	; case 68
 19924  0036DE  B4D8               	btfsc	status,2,c
 19925  0036E0  D7DC               	goto	i2l7168
 19926  0036E2  D7E4               	goto	i2l7172
 19927  0036E4                     __end_of_inputHandler:
 19928                           	opt stack 0
 19929                           pclatu	equ	0xFFB
 19930                           pclath	equ	0xFFA
 19931                           tblptru	equ	0xFF8
 19932                           tblptrh	equ	0xFF7
 19933                           tblptrl	equ	0xFF6
 19934                           tablat	equ	0xFF5
 19935                           prodh	equ	0xFF4
 19936                           prodl	equ	0xFF3
 19937                           intcon	equ	0xFF2
 19938                           intcon2	equ	0xFF1
 19939                           intcon3	equ	0xFF0
 19940                           indf0	equ	0xFEF
 19941                           postinc0	equ	0xFEE
 19942                           fsr0h	equ	0xFEA
 19943                           fsr0l	equ	0xFE9
 19944                           wreg	equ	0xFE8
 19945                           postdec1	equ	0xFE5
 19946                           fsr1h	equ	0xFE2
 19947                           fsr1l	equ	0xFE1
 19948                           indf2	equ	0xFDF
 19949                           postinc2	equ	0xFDE
 19950                           postdec2	equ	0xFDD
 19951                           fsr2h	equ	0xFDA
 19952                           fsr2l	equ	0xFD9
 19953                           status	equ	0xFD8
 19954                           
 19955 ;; *************** function i2_change_state_to_menu_22 *****************
 19956 ;; Defined at:
 19957 ;;		line 498 in file "UI.c"
 19958 ;; Parameters:    Size  Location     Type
 19959 ;;		None
 19960 ;; Auto vars:     Size  Location     Type
 19961 ;;		None
 19962 ;; Return value:  Size  Location     Type
 19963 ;;                  1    wreg      void 
 19964 ;; Registers used:
 19965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19975 ;;Total ram usage:        0 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; Hardware stack levels required when called:    3
 19978 ;; This function calls:
 19979 ;;		i2_lcdInst
 19980 ;;		i2_printf
 19981 ;; This function is called by:
 19982 ;;		_updateMenu
 19983 ;;		_inputHandler
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           	psect	text67
 19988  004E70                     __ptext67:
 19989                           	opt stack 0
 19990  004E70                     i2_change_state_to_menu_22:
 19991                           	opt stack 19
 19992                           
 19993                           ;UI.c: 499: cur_state = 22;
 19994                           
 19995                           ;incstack = 0
 19996  004E70  0E00               	movlw	0
 19997  004E72  0100               	movlb	0	; () banked
 19998  004E74  6FED               	movwf	(_cur_state+1)& (0+255),b
 19999  004E76  0E16               	movlw	22
 20000  004E78  6FEC               	movwf	_cur_state& (0+255),b
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;UI.c: 501: lcdInst(0b10000000);;
 20004  004E7A  0E80               	movlw	128
 20005  004E7C  EC6B  F029         	call	i2_lcdInst
 20006                           
 20007                           ;UI.c: 502: printf("2. SORT        <");
 20008  004E80  0EC0               	movlw	low STR_34
 20009  004E82  6E0D               	movwf	i2printf@f,c
 20010  004E84  0EFD               	movlw	high STR_34
 20011  004E86  6E0E               	movwf	i2printf@f+1,c
 20012  004E88  ECE0  F00E         	call	i2_printf	;wreg free
 20013                           
 20014                           ;UI.c: 503: lcdInst(0b11000000);;
 20015  004E8C  0EC0               	movlw	192
 20016  004E8E  EC6B  F029         	call	i2_lcdInst
 20017                           
 20018                           ;UI.c: 504: printf("3. LOGS         ");
 20019  004E92  0E05               	movlw	low STR_36
 20020  004E94  6E0D               	movwf	i2printf@f,c
 20021  004E96  0EFD               	movlw	high STR_36
 20022  004E98  6E0E               	movwf	i2printf@f+1,c
 20023  004E9A  ECE0  F00E         	call	i2_printf	;wreg free
 20024  004E9E  0012               	return		;funcret
 20025  004EA0                     __end_ofi2_change_state_to_menu_22:
 20026                           	opt stack 0
 20027                           pclatu	equ	0xFFB
 20028                           pclath	equ	0xFFA
 20029                           tblptru	equ	0xFF8
 20030                           tblptrh	equ	0xFF7
 20031                           tblptrl	equ	0xFF6
 20032                           tablat	equ	0xFF5
 20033                           prodh	equ	0xFF4
 20034                           prodl	equ	0xFF3
 20035                           intcon	equ	0xFF2
 20036                           intcon2	equ	0xFF1
 20037                           intcon3	equ	0xFF0
 20038                           indf0	equ	0xFEF
 20039                           postinc0	equ	0xFEE
 20040                           fsr0h	equ	0xFEA
 20041                           fsr0l	equ	0xFE9
 20042                           wreg	equ	0xFE8
 20043                           postdec1	equ	0xFE5
 20044                           fsr1h	equ	0xFE2
 20045                           fsr1l	equ	0xFE1
 20046                           indf2	equ	0xFDF
 20047                           postinc2	equ	0xFDE
 20048                           postdec2	equ	0xFDD
 20049                           fsr2h	equ	0xFDA
 20050                           fsr2l	equ	0xFD9
 20051                           status	equ	0xFD8
 20052                           
 20053 ;; *************** function i2_change_state_to_menu_12 *****************
 20054 ;; Defined at:
 20055 ;;		line 490 in file "UI.c"
 20056 ;; Parameters:    Size  Location     Type
 20057 ;;		None
 20058 ;; Auto vars:     Size  Location     Type
 20059 ;;		None
 20060 ;; Return value:  Size  Location     Type
 20061 ;;                  1    wreg      void 
 20062 ;; Registers used:
 20063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20064 ;; Tracked objects:
 20065 ;;		On entry : 0/0
 20066 ;;		On exit  : 0/0
 20067 ;;		Unchanged: 0/0
 20068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20073 ;;Total ram usage:        0 bytes
 20074 ;; Hardware stack levels used:    1
 20075 ;; Hardware stack levels required when called:    3
 20076 ;; This function calls:
 20077 ;;		i2_lcdInst
 20078 ;;		i2_printf
 20079 ;; This function is called by:
 20080 ;;		_updateMenu
 20081 ;;		_inputHandler
 20082 ;; This function uses a non-reentrant model
 20083 ;;
 20084                           
 20085                           	psect	text68
 20086  004EA0                     __ptext68:
 20087                           	opt stack 0
 20088  004EA0                     i2_change_state_to_menu_12:
 20089                           	opt stack 19
 20090                           
 20091                           ;UI.c: 491: cur_state = 12;
 20092                           
 20093                           ;incstack = 0
 20094  004EA0  0E00               	movlw	0
 20095  004EA2  0100               	movlb	0	; () banked
 20096  004EA4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20097  004EA6  0E0C               	movlw	12
 20098  004EA8  6FEC               	movwf	_cur_state& (0+255),b
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;UI.c: 493: lcdInst(0b10000000);;
 20102  004EAA  0E80               	movlw	128
 20103  004EAC  EC6B  F029         	call	i2_lcdInst
 20104                           
 20105                           ;UI.c: 494: printf("1. DATE/TIME    ");
 20106  004EB0  0E27               	movlw	low STR_33
 20107  004EB2  6E0D               	movwf	i2printf@f,c
 20108  004EB4  0EFD               	movlw	high STR_33
 20109  004EB6  6E0E               	movwf	i2printf@f+1,c
 20110  004EB8  ECE0  F00E         	call	i2_printf	;wreg free
 20111                           
 20112                           ;UI.c: 495: lcdInst(0b11000000);;
 20113  004EBC  0EC0               	movlw	192
 20114  004EBE  EC6B  F029         	call	i2_lcdInst
 20115                           
 20116                           ;UI.c: 496: printf("2. SORT        <");
 20117  004EC2  0EC0               	movlw	low STR_34
 20118  004EC4  6E0D               	movwf	i2printf@f,c
 20119  004EC6  0EFD               	movlw	high STR_34
 20120  004EC8  6E0E               	movwf	i2printf@f+1,c
 20121  004ECA  ECE0  F00E         	call	i2_printf	;wreg free
 20122  004ECE  0012               	return		;funcret
 20123  004ED0                     __end_ofi2_change_state_to_menu_12:
 20124                           	opt stack 0
 20125                           pclatu	equ	0xFFB
 20126                           pclath	equ	0xFFA
 20127                           tblptru	equ	0xFF8
 20128                           tblptrh	equ	0xFF7
 20129                           tblptrl	equ	0xFF6
 20130                           tablat	equ	0xFF5
 20131                           prodh	equ	0xFF4
 20132                           prodl	equ	0xFF3
 20133                           intcon	equ	0xFF2
 20134                           intcon2	equ	0xFF1
 20135                           intcon3	equ	0xFF0
 20136                           indf0	equ	0xFEF
 20137                           postinc0	equ	0xFEE
 20138                           fsr0h	equ	0xFEA
 20139                           fsr0l	equ	0xFE9
 20140                           wreg	equ	0xFE8
 20141                           postdec1	equ	0xFE5
 20142                           fsr1h	equ	0xFE2
 20143                           fsr1l	equ	0xFE1
 20144                           indf2	equ	0xFDF
 20145                           postinc2	equ	0xFDE
 20146                           postdec2	equ	0xFDD
 20147                           fsr2h	equ	0xFDA
 20148                           fsr2l	equ	0xFD9
 20149                           status	equ	0xFD8
 20150                           
 20151 ;; *************** function _change_state_to_menu_23 *****************
 20152 ;; Defined at:
 20153 ;;		line 506 in file "UI.c"
 20154 ;; Parameters:    Size  Location     Type
 20155 ;;		None
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;		None
 20158 ;; Return value:  Size  Location     Type
 20159 ;;                  1    wreg      void 
 20160 ;; Registers used:
 20161 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20162 ;; Tracked objects:
 20163 ;;		On entry : 0/0
 20164 ;;		On exit  : 0/0
 20165 ;;		Unchanged: 0/0
 20166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;Total ram usage:        0 bytes
 20172 ;; Hardware stack levels used:    1
 20173 ;; Hardware stack levels required when called:    3
 20174 ;; This function calls:
 20175 ;;		i2_lcdInst
 20176 ;;		i2_printf
 20177 ;; This function is called by:
 20178 ;;		_updateMenu
 20179 ;;		_inputHandler
 20180 ;; This function uses a non-reentrant model
 20181 ;;
 20182                           
 20183                           	psect	text69
 20184  004ED0                     __ptext69:
 20185                           	opt stack 0
 20186  004ED0                     _change_state_to_menu_23:
 20187                           	opt stack 18
 20188                           
 20189                           ;UI.c: 507: cur_state = 23;
 20190                           
 20191                           ;incstack = 0
 20192  004ED0  0E00               	movlw	0
 20193  004ED2  0100               	movlb	0	; () banked
 20194  004ED4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20195  004ED6  0E17               	movlw	23
 20196  004ED8  6FEC               	movwf	_cur_state& (0+255),b
 20197                           
 20198                           ; BSR set to: 0
 20199                           ;UI.c: 509: lcdInst(0b10000000);;
 20200  004EDA  0E80               	movlw	128
 20201  004EDC  EC6B  F029         	call	i2_lcdInst
 20202                           
 20203                           ;UI.c: 510: printf("2. SORT         ");
 20204  004EE0  0E16               	movlw	low STR_32
 20205  004EE2  6E0D               	movwf	i2printf@f,c
 20206  004EE4  0EFD               	movlw	high STR_32
 20207  004EE6  6E0E               	movwf	i2printf@f+1,c
 20208  004EE8  ECE0  F00E         	call	i2_printf	;wreg free
 20209                           
 20210                           ;UI.c: 511: lcdInst(0b11000000);;
 20211  004EEC  0EC0               	movlw	192
 20212  004EEE  EC6B  F029         	call	i2_lcdInst
 20213                           
 20214                           ;UI.c: 512: printf("3. LOGS        <");
 20215  004EF2  0EAF               	movlw	low STR_38
 20216  004EF4  6E0D               	movwf	i2printf@f,c
 20217  004EF6  0EFD               	movlw	high STR_38
 20218  004EF8  6E0E               	movwf	i2printf@f+1,c
 20219  004EFA  ECE0  F00E         	call	i2_printf	;wreg free
 20220  004EFE  0012               	return		;funcret
 20221  004F00                     __end_of_change_state_to_menu_23:
 20222                           	opt stack 0
 20223                           pclatu	equ	0xFFB
 20224                           pclath	equ	0xFFA
 20225                           tblptru	equ	0xFF8
 20226                           tblptrh	equ	0xFF7
 20227                           tblptrl	equ	0xFF6
 20228                           tablat	equ	0xFF5
 20229                           prodh	equ	0xFF4
 20230                           prodl	equ	0xFF3
 20231                           intcon	equ	0xFF2
 20232                           intcon2	equ	0xFF1
 20233                           intcon3	equ	0xFF0
 20234                           indf0	equ	0xFEF
 20235                           postinc0	equ	0xFEE
 20236                           fsr0h	equ	0xFEA
 20237                           fsr0l	equ	0xFE9
 20238                           wreg	equ	0xFE8
 20239                           postdec1	equ	0xFE5
 20240                           fsr1h	equ	0xFE2
 20241                           fsr1l	equ	0xFE1
 20242                           indf2	equ	0xFDF
 20243                           postinc2	equ	0xFDE
 20244                           postdec2	equ	0xFDD
 20245                           fsr2h	equ	0xFDA
 20246                           fsr2l	equ	0xFD9
 20247                           status	equ	0xFD8
 20248                           
 20249 ;; *************** function _change_state_to_menu_11 *****************
 20250 ;; Defined at:
 20251 ;;		line 482 in file "UI.c"
 20252 ;; Parameters:    Size  Location     Type
 20253 ;;		None
 20254 ;; Auto vars:     Size  Location     Type
 20255 ;;		None
 20256 ;; Return value:  Size  Location     Type
 20257 ;;                  1    wreg      void 
 20258 ;; Registers used:
 20259 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20260 ;; Tracked objects:
 20261 ;;		On entry : 0/0
 20262 ;;		On exit  : 0/0
 20263 ;;		Unchanged: 0/0
 20264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20269 ;;Total ram usage:        0 bytes
 20270 ;; Hardware stack levels used:    1
 20271 ;; Hardware stack levels required when called:    3
 20272 ;; This function calls:
 20273 ;;		i2_lcdInst
 20274 ;;		i2_printf
 20275 ;; This function is called by:
 20276 ;;		_updateMenu
 20277 ;;		_inputHandler
 20278 ;; This function uses a non-reentrant model
 20279 ;;
 20280                           
 20281                           	psect	text70
 20282  004F00                     __ptext70:
 20283                           	opt stack 0
 20284  004F00                     _change_state_to_menu_11:
 20285                           	opt stack 18
 20286                           
 20287                           ;UI.c: 483: cur_state = 11;
 20288                           
 20289                           ;incstack = 0
 20290  004F00  0E00               	movlw	0
 20291  004F02  0100               	movlb	0	; () banked
 20292  004F04  6FED               	movwf	(_cur_state+1)& (0+255),b
 20293  004F06  0E0B               	movlw	11
 20294  004F08  6FEC               	movwf	_cur_state& (0+255),b
 20295                           
 20296                           ; BSR set to: 0
 20297                           ;UI.c: 485: lcdInst(0b10000000);;
 20298  004F0A  0E80               	movlw	128
 20299  004F0C  EC6B  F029         	call	i2_lcdInst
 20300                           
 20301                           ;UI.c: 486: printf("1. DATE/TIME   <");
 20302  004F10  0ED1               	movlw	low STR_31
 20303  004F12  6E0D               	movwf	i2printf@f,c
 20304  004F14  0EFD               	movlw	high STR_31
 20305  004F16  6E0E               	movwf	i2printf@f+1,c
 20306  004F18  ECE0  F00E         	call	i2_printf	;wreg free
 20307                           
 20308                           ;UI.c: 487: lcdInst(0b11000000);;
 20309  004F1C  0EC0               	movlw	192
 20310  004F1E  EC6B  F029         	call	i2_lcdInst
 20311                           
 20312                           ;UI.c: 488: printf("2. SORT         ");
 20313  004F22  0E16               	movlw	low STR_32
 20314  004F24  6E0D               	movwf	i2printf@f,c
 20315  004F26  0EFD               	movlw	high STR_32
 20316  004F28  6E0E               	movwf	i2printf@f+1,c
 20317  004F2A  ECE0  F00E         	call	i2_printf	;wreg free
 20318  004F2E  0012               	return		;funcret
 20319  004F30                     __end_of_change_state_to_menu_11:
 20320                           	opt stack 0
 20321                           pclatu	equ	0xFFB
 20322                           pclath	equ	0xFFA
 20323                           tblptru	equ	0xFF8
 20324                           tblptrh	equ	0xFF7
 20325                           tblptrl	equ	0xFF6
 20326                           tablat	equ	0xFF5
 20327                           prodh	equ	0xFF4
 20328                           prodl	equ	0xFF3
 20329                           intcon	equ	0xFF2
 20330                           intcon2	equ	0xFF1
 20331                           intcon3	equ	0xFF0
 20332                           indf0	equ	0xFEF
 20333                           postinc0	equ	0xFEE
 20334                           fsr0h	equ	0xFEA
 20335                           fsr0l	equ	0xFE9
 20336                           wreg	equ	0xFE8
 20337                           postdec1	equ	0xFE5
 20338                           fsr1h	equ	0xFE2
 20339                           fsr1l	equ	0xFE1
 20340                           indf2	equ	0xFDF
 20341                           postinc2	equ	0xFDE
 20342                           postdec2	equ	0xFDD
 20343                           fsr2h	equ	0xFDA
 20344                           fsr2l	equ	0xFD9
 20345                           status	equ	0xFD8
 20346                           
 20347 ;; *************** function _change_state_to_logs_34 *****************
 20348 ;; Defined at:
 20349 ;;		line 549 in file "UI.c"
 20350 ;; Parameters:    Size  Location     Type
 20351 ;;		None
 20352 ;; Auto vars:     Size  Location     Type
 20353 ;;		None
 20354 ;; Return value:  Size  Location     Type
 20355 ;;                  1    wreg      void 
 20356 ;; Registers used:
 20357 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20358 ;; Tracked objects:
 20359 ;;		On entry : 0/0
 20360 ;;		On exit  : 0/0
 20361 ;;		Unchanged: 0/0
 20362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20367 ;;Total ram usage:        0 bytes
 20368 ;; Hardware stack levels used:    1
 20369 ;; Hardware stack levels required when called:    3
 20370 ;; This function calls:
 20371 ;;		i2_lcdInst
 20372 ;;		i2_printf
 20373 ;; This function is called by:
 20374 ;;		_updateMenu
 20375 ;;		_inputHandler
 20376 ;; This function uses a non-reentrant model
 20377 ;;
 20378                           
 20379                           	psect	text71
 20380  004F30                     __ptext71:
 20381                           	opt stack 0
 20382  004F30                     _change_state_to_logs_34:
 20383                           	opt stack 18
 20384                           
 20385                           ;UI.c: 550: cur_state = 1034;
 20386                           
 20387                           ;incstack = 0
 20388  004F30  0E04               	movlw	4
 20389  004F32  0100               	movlb	0	; () banked
 20390  004F34  6FED               	movwf	(_cur_state+1)& (0+255),b
 20391  004F36  0E0A               	movlw	10
 20392  004F38  6FEC               	movwf	_cur_state& (0+255),b
 20393                           
 20394                           ; BSR set to: 0
 20395                           ;UI.c: 551: lcdInst(0b10000000);;
 20396  004F3A  0E80               	movlw	128
 20397  004F3C  EC6B  F029         	call	i2_lcdInst
 20398                           
 20399                           ;UI.c: 552: printf("LOG 3           ");
 20400  004F40  0EE3               	movlw	low STR_44
 20401  004F42  6E0D               	movwf	i2printf@f,c
 20402  004F44  0EFC               	movlw	high STR_44
 20403  004F46  6E0E               	movwf	i2printf@f+1,c
 20404  004F48  ECE0  F00E         	call	i2_printf	;wreg free
 20405                           
 20406                           ;UI.c: 553: lcdInst(0b11000000);;
 20407  004F4C  0EC0               	movlw	192
 20408  004F4E  EC6B  F029         	call	i2_lcdInst
 20409                           
 20410                           ;UI.c: 554: printf("LOG 4          <");
 20411  004F52  0E9E               	movlw	low STR_50
 20412  004F54  6E0D               	movwf	i2printf@f,c
 20413  004F56  0EFD               	movlw	high STR_50
 20414  004F58  6E0E               	movwf	i2printf@f+1,c
 20415  004F5A  ECE0  F00E         	call	i2_printf	;wreg free
 20416  004F5E  0012               	return		;funcret
 20417  004F60                     __end_of_change_state_to_logs_34:
 20418                           	opt stack 0
 20419                           pclatu	equ	0xFFB
 20420                           pclath	equ	0xFFA
 20421                           tblptru	equ	0xFF8
 20422                           tblptrh	equ	0xFF7
 20423                           tblptrl	equ	0xFF6
 20424                           tablat	equ	0xFF5
 20425                           prodh	equ	0xFF4
 20426                           prodl	equ	0xFF3
 20427                           intcon	equ	0xFF2
 20428                           intcon2	equ	0xFF1
 20429                           intcon3	equ	0xFF0
 20430                           indf0	equ	0xFEF
 20431                           postinc0	equ	0xFEE
 20432                           fsr0h	equ	0xFEA
 20433                           fsr0l	equ	0xFE9
 20434                           wreg	equ	0xFE8
 20435                           postdec1	equ	0xFE5
 20436                           fsr1h	equ	0xFE2
 20437                           fsr1l	equ	0xFE1
 20438                           indf2	equ	0xFDF
 20439                           postinc2	equ	0xFDE
 20440                           postdec2	equ	0xFDD
 20441                           fsr2h	equ	0xFDA
 20442                           fsr2l	equ	0xFD9
 20443                           status	equ	0xFD8
 20444                           
 20445 ;; *************** function _change_state_to_logs_33 *****************
 20446 ;; Defined at:
 20447 ;;		line 542 in file "UI.c"
 20448 ;; Parameters:    Size  Location     Type
 20449 ;;		None
 20450 ;; Auto vars:     Size  Location     Type
 20451 ;;		None
 20452 ;; Return value:  Size  Location     Type
 20453 ;;                  1    wreg      void 
 20454 ;; Registers used:
 20455 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20456 ;; Tracked objects:
 20457 ;;		On entry : 0/0
 20458 ;;		On exit  : 0/0
 20459 ;;		Unchanged: 0/0
 20460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20465 ;;Total ram usage:        0 bytes
 20466 ;; Hardware stack levels used:    1
 20467 ;; Hardware stack levels required when called:    3
 20468 ;; This function calls:
 20469 ;;		i2_lcdInst
 20470 ;;		i2_printf
 20471 ;; This function is called by:
 20472 ;;		_updateMenu
 20473 ;;		_inputHandler
 20474 ;; This function uses a non-reentrant model
 20475 ;;
 20476                           
 20477                           	psect	text72
 20478  004F60                     __ptext72:
 20479                           	opt stack 0
 20480  004F60                     _change_state_to_logs_33:
 20481                           	opt stack 18
 20482                           
 20483                           ;UI.c: 543: cur_state = 1033;
 20484                           
 20485                           ;incstack = 0
 20486  004F60  0E04               	movlw	4
 20487  004F62  0100               	movlb	0	; () banked
 20488  004F64  6FED               	movwf	(_cur_state+1)& (0+255),b
 20489  004F66  0E09               	movlw	9
 20490  004F68  6FEC               	movwf	_cur_state& (0+255),b
 20491                           
 20492                           ; BSR set to: 0
 20493                           ;UI.c: 544: lcdInst(0b10000000);;
 20494  004F6A  0E80               	movlw	128
 20495  004F6C  EC6B  F029         	call	i2_lcdInst
 20496                           
 20497                           ;UI.c: 545: printf("LOG 3          <");
 20498  004F70  0E8D               	movlw	low STR_46
 20499  004F72  6E0D               	movwf	i2printf@f,c
 20500  004F74  0EFD               	movlw	high STR_46
 20501  004F76  6E0E               	movwf	i2printf@f+1,c
 20502  004F78  ECE0  F00E         	call	i2_printf	;wreg free
 20503                           
 20504                           ;UI.c: 546: lcdInst(0b11000000);;
 20505  004F7C  0EC0               	movlw	192
 20506  004F7E  EC6B  F029         	call	i2_lcdInst
 20507                           
 20508                           ;UI.c: 547: printf("LOG 4           ");
 20509  004F82  0EF4               	movlw	low STR_48
 20510  004F84  6E0D               	movwf	i2printf@f,c
 20511  004F86  0EFC               	movlw	high STR_48
 20512  004F88  6E0E               	movwf	i2printf@f+1,c
 20513  004F8A  ECE0  F00E         	call	i2_printf	;wreg free
 20514  004F8E  0012               	return		;funcret
 20515  004F90                     __end_of_change_state_to_logs_33:
 20516                           	opt stack 0
 20517                           pclatu	equ	0xFFB
 20518                           pclath	equ	0xFFA
 20519                           tblptru	equ	0xFF8
 20520                           tblptrh	equ	0xFF7
 20521                           tblptrl	equ	0xFF6
 20522                           tablat	equ	0xFF5
 20523                           prodh	equ	0xFF4
 20524                           prodl	equ	0xFF3
 20525                           intcon	equ	0xFF2
 20526                           intcon2	equ	0xFF1
 20527                           intcon3	equ	0xFF0
 20528                           indf0	equ	0xFEF
 20529                           postinc0	equ	0xFEE
 20530                           fsr0h	equ	0xFEA
 20531                           fsr0l	equ	0xFE9
 20532                           wreg	equ	0xFE8
 20533                           postdec1	equ	0xFE5
 20534                           fsr1h	equ	0xFE2
 20535                           fsr1l	equ	0xFE1
 20536                           indf2	equ	0xFDF
 20537                           postinc2	equ	0xFDE
 20538                           postdec2	equ	0xFDD
 20539                           fsr2h	equ	0xFDA
 20540                           fsr2l	equ	0xFD9
 20541                           status	equ	0xFD8
 20542                           
 20543 ;; *************** function _change_state_to_logs_23 *****************
 20544 ;; Defined at:
 20545 ;;		line 535 in file "UI.c"
 20546 ;; Parameters:    Size  Location     Type
 20547 ;;		None
 20548 ;; Auto vars:     Size  Location     Type
 20549 ;;		None
 20550 ;; Return value:  Size  Location     Type
 20551 ;;                  1    wreg      void 
 20552 ;; Registers used:
 20553 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20554 ;; Tracked objects:
 20555 ;;		On entry : 0/0
 20556 ;;		On exit  : 0/0
 20557 ;;		Unchanged: 0/0
 20558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20563 ;;Total ram usage:        0 bytes
 20564 ;; Hardware stack levels used:    1
 20565 ;; Hardware stack levels required when called:    3
 20566 ;; This function calls:
 20567 ;;		i2_lcdInst
 20568 ;;		i2_printf
 20569 ;; This function is called by:
 20570 ;;		_updateMenu
 20571 ;;		_inputHandler
 20572 ;; This function uses a non-reentrant model
 20573 ;;
 20574                           
 20575                           	psect	text73
 20576  00504E                     __ptext73:
 20577                           	opt stack 0
 20578  00504E                     _change_state_to_logs_23:
 20579                           	opt stack 18
 20580                           
 20581                           ;UI.c: 536: cur_state = 1023;
 20582                           
 20583                           ;incstack = 0
 20584  00504E  0E03               	movlw	3
 20585  005050  0100               	movlb	0	; () banked
 20586  005052  6FED               	movwf	(_cur_state+1)& (0+255),b
 20587  005054  69EC               	setf	_cur_state& (0+255),b
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;UI.c: 537: lcdInst(0b10000000);;
 20591  005056  0E80               	movlw	128
 20592  005058  EC6B  F029         	call	i2_lcdInst
 20593                           
 20594                           ;UI.c: 538: printf("LOG 2           ");
 20595  00505C  0ED2               	movlw	low STR_40
 20596  00505E  6E0D               	movwf	i2printf@f,c
 20597  005060  0EFC               	movlw	high STR_40
 20598  005062  6E0E               	movwf	i2printf@f+1,c
 20599  005064  ECE0  F00E         	call	i2_printf	;wreg free
 20600                           
 20601                           ;UI.c: 539: lcdInst(0b11000000);;
 20602  005068  0EC0               	movlw	192
 20603  00506A  EC6B  F029         	call	i2_lcdInst
 20604                           
 20605                           ;UI.c: 540: printf("LOG 3          <");
 20606  00506E  0E8D               	movlw	low STR_46
 20607  005070  6E0D               	movwf	i2printf@f,c
 20608  005072  0EFD               	movlw	high STR_46
 20609  005074  6E0E               	movwf	i2printf@f+1,c
 20610  005076  ECE0  F00E         	call	i2_printf	;wreg free
 20611  00507A  0012               	return		;funcret
 20612  00507C                     __end_of_change_state_to_logs_23:
 20613                           	opt stack 0
 20614                           pclatu	equ	0xFFB
 20615                           pclath	equ	0xFFA
 20616                           tblptru	equ	0xFF8
 20617                           tblptrh	equ	0xFF7
 20618                           tblptrl	equ	0xFF6
 20619                           tablat	equ	0xFF5
 20620                           prodh	equ	0xFF4
 20621                           prodl	equ	0xFF3
 20622                           intcon	equ	0xFF2
 20623                           intcon2	equ	0xFF1
 20624                           intcon3	equ	0xFF0
 20625                           indf0	equ	0xFEF
 20626                           postinc0	equ	0xFEE
 20627                           fsr0h	equ	0xFEA
 20628                           fsr0l	equ	0xFE9
 20629                           wreg	equ	0xFE8
 20630                           postdec1	equ	0xFE5
 20631                           fsr1h	equ	0xFE2
 20632                           fsr1l	equ	0xFE1
 20633                           indf2	equ	0xFDF
 20634                           postinc2	equ	0xFDE
 20635                           postdec2	equ	0xFDD
 20636                           fsr2h	equ	0xFDA
 20637                           fsr2l	equ	0xFD9
 20638                           status	equ	0xFD8
 20639                           
 20640 ;; *************** function _change_state_to_logs_22 *****************
 20641 ;; Defined at:
 20642 ;;		line 528 in file "UI.c"
 20643 ;; Parameters:    Size  Location     Type
 20644 ;;		None
 20645 ;; Auto vars:     Size  Location     Type
 20646 ;;		None
 20647 ;; Return value:  Size  Location     Type
 20648 ;;                  1    wreg      void 
 20649 ;; Registers used:
 20650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20651 ;; Tracked objects:
 20652 ;;		On entry : 0/0
 20653 ;;		On exit  : 0/0
 20654 ;;		Unchanged: 0/0
 20655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20660 ;;Total ram usage:        0 bytes
 20661 ;; Hardware stack levels used:    1
 20662 ;; Hardware stack levels required when called:    3
 20663 ;; This function calls:
 20664 ;;		i2_lcdInst
 20665 ;;		i2_printf
 20666 ;; This function is called by:
 20667 ;;		_updateMenu
 20668 ;;		_inputHandler
 20669 ;; This function uses a non-reentrant model
 20670 ;;
 20671                           
 20672                           	psect	text74
 20673  004F90                     __ptext74:
 20674                           	opt stack 0
 20675  004F90                     _change_state_to_logs_22:
 20676                           	opt stack 18
 20677                           
 20678                           ;UI.c: 529: cur_state = 1022;
 20679                           
 20680                           ;incstack = 0
 20681  004F90  0E03               	movlw	3
 20682  004F92  0100               	movlb	0	; () banked
 20683  004F94  6FED               	movwf	(_cur_state+1)& (0+255),b
 20684  004F96  0EFE               	movlw	254
 20685  004F98  6FEC               	movwf	_cur_state& (0+255),b
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;UI.c: 530: lcdInst(0b10000000);;
 20689  004F9A  0E80               	movlw	128
 20690  004F9C  EC6B  F029         	call	i2_lcdInst
 20691                           
 20692                           ;UI.c: 531: printf("LOG 2          <");
 20693  004FA0  0E7C               	movlw	low STR_42
 20694  004FA2  6E0D               	movwf	i2printf@f,c
 20695  004FA4  0EFD               	movlw	high STR_42
 20696  004FA6  6E0E               	movwf	i2printf@f+1,c
 20697  004FA8  ECE0  F00E         	call	i2_printf	;wreg free
 20698                           
 20699                           ;UI.c: 532: lcdInst(0b11000000);;
 20700  004FAC  0EC0               	movlw	192
 20701  004FAE  EC6B  F029         	call	i2_lcdInst
 20702                           
 20703                           ;UI.c: 533: printf("LOG 3           ");
 20704  004FB2  0EE3               	movlw	low STR_44
 20705  004FB4  6E0D               	movwf	i2printf@f,c
 20706  004FB6  0EFC               	movlw	high STR_44
 20707  004FB8  6E0E               	movwf	i2printf@f+1,c
 20708  004FBA  ECE0  F00E         	call	i2_printf	;wreg free
 20709  004FBE  0012               	return		;funcret
 20710  004FC0                     __end_of_change_state_to_logs_22:
 20711                           	opt stack 0
 20712                           pclatu	equ	0xFFB
 20713                           pclath	equ	0xFFA
 20714                           tblptru	equ	0xFF8
 20715                           tblptrh	equ	0xFF7
 20716                           tblptrl	equ	0xFF6
 20717                           tablat	equ	0xFF5
 20718                           prodh	equ	0xFF4
 20719                           prodl	equ	0xFF3
 20720                           intcon	equ	0xFF2
 20721                           intcon2	equ	0xFF1
 20722                           intcon3	equ	0xFF0
 20723                           indf0	equ	0xFEF
 20724                           postinc0	equ	0xFEE
 20725                           fsr0h	equ	0xFEA
 20726                           fsr0l	equ	0xFE9
 20727                           wreg	equ	0xFE8
 20728                           postdec1	equ	0xFE5
 20729                           fsr1h	equ	0xFE2
 20730                           fsr1l	equ	0xFE1
 20731                           indf2	equ	0xFDF
 20732                           postinc2	equ	0xFDE
 20733                           postdec2	equ	0xFDD
 20734                           fsr2h	equ	0xFDA
 20735                           fsr2l	equ	0xFD9
 20736                           status	equ	0xFD8
 20737                           
 20738 ;; *************** function _change_state_to_logs_12 *****************
 20739 ;; Defined at:
 20740 ;;		line 521 in file "UI.c"
 20741 ;; Parameters:    Size  Location     Type
 20742 ;;		None
 20743 ;; Auto vars:     Size  Location     Type
 20744 ;;		None
 20745 ;; Return value:  Size  Location     Type
 20746 ;;                  1    wreg      void 
 20747 ;; Registers used:
 20748 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20749 ;; Tracked objects:
 20750 ;;		On entry : 0/0
 20751 ;;		On exit  : 0/0
 20752 ;;		Unchanged: 0/0
 20753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20758 ;;Total ram usage:        0 bytes
 20759 ;; Hardware stack levels used:    1
 20760 ;; Hardware stack levels required when called:    3
 20761 ;; This function calls:
 20762 ;;		i2_lcdInst
 20763 ;;		i2_printf
 20764 ;; This function is called by:
 20765 ;;		_updateMenu
 20766 ;;		_inputHandler
 20767 ;; This function uses a non-reentrant model
 20768 ;;
 20769                           
 20770                           	psect	text75
 20771  004FC0                     __ptext75:
 20772                           	opt stack 0
 20773  004FC0                     _change_state_to_logs_12:
 20774                           	opt stack 18
 20775                           
 20776                           ;UI.c: 522: cur_state = 1012;
 20777                           
 20778                           ;incstack = 0
 20779  004FC0  0E03               	movlw	3
 20780  004FC2  0100               	movlb	0	; () banked
 20781  004FC4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20782  004FC6  0EF4               	movlw	244
 20783  004FC8  6FEC               	movwf	_cur_state& (0+255),b
 20784                           
 20785                           ; BSR set to: 0
 20786                           ;UI.c: 523: lcdInst(0b10000000);;
 20787  004FCA  0E80               	movlw	128
 20788  004FCC  EC6B  F029         	call	i2_lcdInst
 20789                           
 20790                           ;UI.c: 524: printf("LOG 1           ");
 20791  004FD0  0EC1               	movlw	low STR_41
 20792  004FD2  6E0D               	movwf	i2printf@f,c
 20793  004FD4  0EFC               	movlw	high STR_41
 20794  004FD6  6E0E               	movwf	i2printf@f+1,c
 20795  004FD8  ECE0  F00E         	call	i2_printf	;wreg free
 20796                           
 20797                           ;UI.c: 525: lcdInst(0b11000000);;
 20798  004FDC  0EC0               	movlw	192
 20799  004FDE  EC6B  F029         	call	i2_lcdInst
 20800                           
 20801                           ;UI.c: 526: printf("LOG 2          <");
 20802  004FE2  0E7C               	movlw	low STR_42
 20803  004FE4  6E0D               	movwf	i2printf@f,c
 20804  004FE6  0EFD               	movlw	high STR_42
 20805  004FE8  6E0E               	movwf	i2printf@f+1,c
 20806  004FEA  ECE0  F00E         	call	i2_printf	;wreg free
 20807  004FEE  0012               	return		;funcret
 20808  004FF0                     __end_of_change_state_to_logs_12:
 20809                           	opt stack 0
 20810                           pclatu	equ	0xFFB
 20811                           pclath	equ	0xFFA
 20812                           tblptru	equ	0xFF8
 20813                           tblptrh	equ	0xFF7
 20814                           tblptrl	equ	0xFF6
 20815                           tablat	equ	0xFF5
 20816                           prodh	equ	0xFF4
 20817                           prodl	equ	0xFF3
 20818                           intcon	equ	0xFF2
 20819                           intcon2	equ	0xFF1
 20820                           intcon3	equ	0xFF0
 20821                           indf0	equ	0xFEF
 20822                           postinc0	equ	0xFEE
 20823                           fsr0h	equ	0xFEA
 20824                           fsr0l	equ	0xFE9
 20825                           wreg	equ	0xFE8
 20826                           postdec1	equ	0xFE5
 20827                           fsr1h	equ	0xFE2
 20828                           fsr1l	equ	0xFE1
 20829                           indf2	equ	0xFDF
 20830                           postinc2	equ	0xFDE
 20831                           postdec2	equ	0xFDD
 20832                           fsr2h	equ	0xFDA
 20833                           fsr2l	equ	0xFD9
 20834                           status	equ	0xFD8
 20835                           
 20836 ;; *************** function _change_state_to_logs_11 *****************
 20837 ;; Defined at:
 20838 ;;		line 514 in file "UI.c"
 20839 ;; Parameters:    Size  Location     Type
 20840 ;;		None
 20841 ;; Auto vars:     Size  Location     Type
 20842 ;;		None
 20843 ;; Return value:  Size  Location     Type
 20844 ;;                  1    wreg      void 
 20845 ;; Registers used:
 20846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20847 ;; Tracked objects:
 20848 ;;		On entry : 0/0
 20849 ;;		On exit  : 0/0
 20850 ;;		Unchanged: 0/0
 20851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20856 ;;Total ram usage:        0 bytes
 20857 ;; Hardware stack levels used:    1
 20858 ;; Hardware stack levels required when called:    3
 20859 ;; This function calls:
 20860 ;;		i2_lcdInst
 20861 ;;		i2_printf
 20862 ;; This function is called by:
 20863 ;;		_updateMenu
 20864 ;;		_inputHandler
 20865 ;; This function uses a non-reentrant model
 20866 ;;
 20867                           
 20868                           	psect	text76
 20869  004FF0                     __ptext76:
 20870                           	opt stack 0
 20871  004FF0                     _change_state_to_logs_11:
 20872                           	opt stack 18
 20873                           
 20874                           ;UI.c: 515: cur_state = 1011;
 20875                           
 20876                           ;incstack = 0
 20877  004FF0  0E03               	movlw	3
 20878  004FF2  0100               	movlb	0	; () banked
 20879  004FF4  6FED               	movwf	(_cur_state+1)& (0+255),b
 20880  004FF6  0EF3               	movlw	243
 20881  004FF8  6FEC               	movwf	_cur_state& (0+255),b
 20882                           
 20883                           ; BSR set to: 0
 20884                           ;UI.c: 516: lcdInst(0b10000000);;
 20885  004FFA  0E80               	movlw	128
 20886  004FFC  EC6B  F029         	call	i2_lcdInst
 20887                           
 20888                           ;UI.c: 517: printf("LOG 1          <");
 20889  005000  0E6B               	movlw	low STR_39
 20890  005002  6E0D               	movwf	i2printf@f,c
 20891  005004  0EFD               	movlw	high STR_39
 20892  005006  6E0E               	movwf	i2printf@f+1,c
 20893  005008  ECE0  F00E         	call	i2_printf	;wreg free
 20894                           
 20895                           ;UI.c: 518: lcdInst(0b11000000);;
 20896  00500C  0EC0               	movlw	192
 20897  00500E  EC6B  F029         	call	i2_lcdInst
 20898                           
 20899                           ;UI.c: 519: printf("LOG 2           ");
 20900  005012  0ED2               	movlw	low STR_40
 20901  005014  6E0D               	movwf	i2printf@f,c
 20902  005016  0EFC               	movlw	high STR_40
 20903  005018  6E0E               	movwf	i2printf@f+1,c
 20904  00501A  ECE0  F00E         	call	i2_printf	;wreg free
 20905  00501E  0012               	return		;funcret
 20906  005020                     __end_of_change_state_to_logs_11:
 20907                           	opt stack 0
 20908                           pclatu	equ	0xFFB
 20909                           pclath	equ	0xFFA
 20910                           tblptru	equ	0xFF8
 20911                           tblptrh	equ	0xFF7
 20912                           tblptrl	equ	0xFF6
 20913                           tablat	equ	0xFF5
 20914                           prodh	equ	0xFF4
 20915                           prodl	equ	0xFF3
 20916                           intcon	equ	0xFF2
 20917                           intcon2	equ	0xFF1
 20918                           intcon3	equ	0xFF0
 20919                           indf0	equ	0xFEF
 20920                           postinc0	equ	0xFEE
 20921                           fsr0h	equ	0xFEA
 20922                           fsr0l	equ	0xFE9
 20923                           wreg	equ	0xFE8
 20924                           postdec1	equ	0xFE5
 20925                           fsr1h	equ	0xFE2
 20926                           fsr1l	equ	0xFE1
 20927                           indf2	equ	0xFDF
 20928                           postinc2	equ	0xFDE
 20929                           postdec2	equ	0xFDD
 20930                           fsr2h	equ	0xFDA
 20931                           fsr2l	equ	0xFD9
 20932                           status	equ	0xFD8
 20933                           
 20934 ;; *************** function _dispLogs *****************
 20935 ;; Defined at:
 20936 ;;		line 467 in file "UI.c"
 20937 ;; Parameters:    Size  Location     Type
 20938 ;;  myLog           2   17[COMRAM] int 
 20939 ;; Auto vars:     Size  Location     Type
 20940 ;;		None
 20941 ;; Return value:  Size  Location     Type
 20942 ;;                  1    wreg      void 
 20943 ;; Registers used:
 20944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20945 ;; Tracked objects:
 20946 ;;		On entry : 0/0
 20947 ;;		On exit  : 0/0
 20948 ;;		Unchanged: 0/0
 20949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20953 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20954 ;;Total ram usage:        2 bytes
 20955 ;; Hardware stack levels used:    1
 20956 ;; Hardware stack levels required when called:    2
 20957 ;; This function calls:
 20958 ;;		_retrieveLog
 20959 ;; This function is called by:
 20960 ;;		_updateMenu
 20961 ;; This function uses a non-reentrant model
 20962 ;;
 20963                           
 20964                           	psect	text77
 20965  00519A                     __ptext77:
 20966                           	opt stack 0
 20967  00519A                     _dispLogs:
 20968                           	opt stack 20
 20969                           
 20970                           ;UI.c: 468: logstate = 1;
 20971                           
 20972                           ;incstack = 0
 20973  00519A  0E00               	movlw	0
 20974  00519C  0100               	movlb	0	; () banked
 20975  00519E  6FF7               	movwf	(_logstate+1)& (0+255),b
 20976  0051A0  0E01               	movlw	1
 20977  0051A2  6FF6               	movwf	_logstate& (0+255),b
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;UI.c: 469: log = myLog;
 20981  0051A4  C012  F0F2         	movff	dispLogs@myLog,_log
 20982  0051A8  C013  F0F3         	movff	dispLogs@myLog+1,_log+1
 20983                           
 20984                           ; BSR set to: 0
 20985                           ;UI.c: 470: retrieveLog(myLog - 1);
 20986  0051AC  0EFF               	movlw	255
 20987  0051AE  2412               	addwf	dispLogs@myLog,w,c
 20988  0051B0  6E07               	movwf	retrieveLog@logNum,c
 20989  0051B2  0EFF               	movlw	255
 20990  0051B4  2013               	addwfc	dispLogs@myLog+1,w,c
 20991  0051B6  6E08               	movwf	retrieveLog@logNum+1,c
 20992  0051B8  EC9E  F01D         	call	_retrieveLog	;wreg free
 20993  0051BC  0012               	return		;funcret
 20994  0051BE                     __end_of_dispLogs:
 20995                           	opt stack 0
 20996                           pclatu	equ	0xFFB
 20997                           pclath	equ	0xFFA
 20998                           tblptru	equ	0xFF8
 20999                           tblptrh	equ	0xFF7
 21000                           tblptrl	equ	0xFF6
 21001                           tablat	equ	0xFF5
 21002                           prodh	equ	0xFF4
 21003                           prodl	equ	0xFF3
 21004                           intcon	equ	0xFF2
 21005                           intcon2	equ	0xFF1
 21006                           intcon3	equ	0xFF0
 21007                           indf0	equ	0xFEF
 21008                           postinc0	equ	0xFEE
 21009                           fsr0h	equ	0xFEA
 21010                           fsr0l	equ	0xFE9
 21011                           wreg	equ	0xFE8
 21012                           postdec1	equ	0xFE5
 21013                           fsr1h	equ	0xFE2
 21014                           fsr1l	equ	0xFE1
 21015                           indf2	equ	0xFDF
 21016                           postinc2	equ	0xFDE
 21017                           postdec2	equ	0xFDD
 21018                           fsr2h	equ	0xFDA
 21019                           fsr2l	equ	0xFD9
 21020                           status	equ	0xFD8
 21021                           
 21022 ;; *************** function _retrieveLog *****************
 21023 ;; Defined at:
 21024 ;;		line 134 in file "EEPROM.c"
 21025 ;; Parameters:    Size  Location     Type
 21026 ;;  logNum          2    6[COMRAM] int 
 21027 ;; Auto vars:     Size  Location     Type
 21028 ;;  i               2   13[COMRAM] int 
 21029 ;;  addr            2   15[COMRAM] unsigned short 
 21030 ;;  byte3           1   12[COMRAM] unsigned char 
 21031 ;;  byte2           1   11[COMRAM] unsigned char 
 21032 ;;  byte1           1   10[COMRAM] unsigned char 
 21033 ;; Return value:  Size  Location     Type
 21034 ;;                  1    wreg      void 
 21035 ;; Registers used:
 21036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21037 ;; Tracked objects:
 21038 ;;		On entry : 0/0
 21039 ;;		On exit  : 0/0
 21040 ;;		Unchanged: 0/0
 21041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21043 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21045 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21046 ;;Total ram usage:       11 bytes
 21047 ;; Hardware stack levels used:    1
 21048 ;; Hardware stack levels required when called:    1
 21049 ;; This function calls:
 21050 ;;		i2_EEPROM_read
 21051 ;;		i2___wmul
 21052 ;; This function is called by:
 21053 ;;		_dispLogs
 21054 ;; This function uses a non-reentrant model
 21055 ;;
 21056                           
 21057                           	psect	text78
 21058  003B3C                     __ptext78:
 21059                           	opt stack 0
 21060  003B3C                     _retrieveLog:
 21061                           	opt stack 20
 21062                           
 21063                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 21064                           
 21065                           ;incstack = 0
 21066  003B3C  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 21067  003B40  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 21068  003B44  0E00               	movlw	0
 21069  003B46  6E04               	movwf	i2___wmul@multiplicand+1,c
 21070  003B48  0E0B               	movlw	11
 21071  003B4A  6E03               	movwf	i2___wmul@multiplicand,c
 21072  003B4C  ECA7  F028         	call	i2___wmul	;wreg free
 21073  003B50  0E01               	movlw	1
 21074  003B52  2401               	addwf	?i2___wmul,w,c
 21075  003B54  6E10               	movwf	retrieveLog@addr,c
 21076  003B56  0E00               	movlw	0
 21077  003B58  2002               	addwfc	?i2___wmul+1,w,c
 21078  003B5A  6E11               	movwf	retrieveLog@addr+1,c
 21079                           
 21080                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 21081  003B5C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21082  003B60  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21083  003B64  EC37  F029         	call	i2_EEPROM_read	;wreg free
 21084  003B68  6E0B               	movwf	retrieveLog@byte1,c
 21085                           
 21086                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 21087  003B6A  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21088  003B6E  0E80               	movlw	128
 21089  003B70  1609               	andwf	??_retrieveLog,f,c
 21090  003B72  5009               	movf	??_retrieveLog,w,c
 21091  003B74  6E63               	movwf	_log_completion,c
 21092  003B76  6A64               	clrf	_log_completion+1,c
 21093                           
 21094                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 21095  003B78  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 21096  003B7C  0E0F               	movlw	15
 21097  003B7E  1609               	andwf	??_retrieveLog,f,c
 21098  003B80  5009               	movf	??_retrieveLog,w,c
 21099  003B82  0101               	movlb	1	; () banked
 21100  003B84  6F3F               	movwf	_log_count_total& (0+255),b
 21101  003B86  6B40               	clrf	(_log_count_total+1)& (0+255),b
 21102                           
 21103                           ; BSR set to: 1
 21104                           ;EEPROM.c: 146: addr++;
 21105  003B88  4A10               	infsnz	retrieveLog@addr,f,c
 21106  003B8A  2A11               	incf	retrieveLog@addr+1,f,c
 21107                           
 21108                           ; BSR set to: 1
 21109                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 21110  003B8C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21111  003B90  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21112  003B94  EC37  F029         	call	i2_EEPROM_read	;wreg free
 21113  003B98  6E0C               	movwf	retrieveLog@byte2,c
 21114                           
 21115                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 21116  003B9A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21117  003B9E  3A09               	swapf	??_retrieveLog,f,c
 21118  003BA0  0E0F               	movlw	15
 21119  003BA2  1609               	andwf	??_retrieveLog,f,c
 21120  003BA4  0E0F               	movlw	15
 21121  003BA6  1609               	andwf	??_retrieveLog,f,c
 21122  003BA8  5009               	movf	??_retrieveLog,w,c
 21123  003BAA  6E69               	movwf	_log_count_pop_no_tab,c
 21124  003BAC  6A6A               	clrf	_log_count_pop_no_tab+1,c
 21125                           
 21126                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 21127  003BAE  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 21128  003BB2  0E0F               	movlw	15
 21129  003BB4  1609               	andwf	??_retrieveLog,f,c
 21130  003BB6  5009               	movf	??_retrieveLog,w,c
 21131  003BB8  6E6B               	movwf	_log_count_pop_w_tab,c
 21132  003BBA  6A6C               	clrf	_log_count_pop_w_tab+1,c
 21133                           
 21134                           ;EEPROM.c: 152: addr++;
 21135  003BBC  4A10               	infsnz	retrieveLog@addr,f,c
 21136  003BBE  2A11               	incf	retrieveLog@addr+1,f,c
 21137                           
 21138                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 21139  003BC0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21140  003BC4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21141  003BC8  EC37  F029         	call	i2_EEPROM_read	;wreg free
 21142  003BCC  6E0D               	movwf	retrieveLog@byte3,c
 21143                           
 21144                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 21145  003BCE  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21146  003BD2  3A09               	swapf	??_retrieveLog,f,c
 21147  003BD4  0E0F               	movlw	15
 21148  003BD6  1609               	andwf	??_retrieveLog,f,c
 21149  003BD8  0E0F               	movlw	15
 21150  003BDA  1609               	andwf	??_retrieveLog,f,c
 21151  003BDC  5009               	movf	??_retrieveLog,w,c
 21152  003BDE  6E67               	movwf	_log_count_can_w_lab,c
 21153  003BE0  6A68               	clrf	_log_count_can_w_lab+1,c
 21154                           
 21155                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 21156  003BE2  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 21157  003BE6  0E0F               	movlw	15
 21158  003BE8  1609               	andwf	??_retrieveLog,f,c
 21159  003BEA  5009               	movf	??_retrieveLog,w,c
 21160  003BEC  6E65               	movwf	_log_count_can_no_lab,c
 21161  003BEE  6A66               	clrf	_log_count_can_no_lab+1,c
 21162                           
 21163                           ;EEPROM.c: 156: addr++;
 21164  003BF0  4A10               	infsnz	retrieveLog@addr,f,c
 21165  003BF2  2A11               	incf	retrieveLog@addr+1,f,c
 21166                           
 21167                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 21168  003BF4  0E00               	movlw	0
 21169  003BF6  6E0F               	movwf	retrieveLog@i+1,c
 21170  003BF8  0E00               	movlw	0
 21171  003BFA  6E0E               	movwf	retrieveLog@i,c
 21172  003BFC                     i2l6782:
 21173  003BFC  BE0F               	btfsc	retrieveLog@i+1,7,c
 21174  003BFE  D006               	goto	i2l6786
 21175  003C00  500F               	movf	retrieveLog@i+1,w,c
 21176  003C02  E11E               	bnz	i2l6794
 21177  003C04  0E07               	movlw	7
 21178  003C06  5C0E               	subwf	retrieveLog@i,w,c
 21179  003C08  B0D8               	btfsc	status,0,c
 21180  003C0A  D01A               	goto	i2l6794
 21181  003C0C                     i2l6786:
 21182                           
 21183                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 21184  003C0C  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21185  003C10  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21186  003C14  EC37  F029         	call	i2_EEPROM_read	;wreg free
 21187  003C18  6E09               	movwf	??_retrieveLog& (0+255),c
 21188  003C1A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 21189  003C1C  90D8               	bcf	status,0,c
 21190  003C1E  340E               	rlcf	retrieveLog@i,w,c
 21191  003C20  6ED9               	movwf	fsr2l,c
 21192  003C22  340F               	rlcf	retrieveLog@i+1,w,c
 21193  003C24  6EDA               	movwf	fsr2h,c
 21194  003C26  0E00               	movlw	low _log_startTime
 21195  003C28  26D9               	addwf	fsr2l,f,c
 21196  003C2A  0E01               	movlw	high _log_startTime
 21197  003C2C  22DA               	addwfc	fsr2h,f,c
 21198  003C2E  C009  FFDE         	movff	??_retrieveLog,postinc2
 21199  003C32  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 21200                           
 21201                           ;EEPROM.c: 161: addr++;
 21202  003C36  4A10               	infsnz	retrieveLog@addr,f,c
 21203  003C38  2A11               	incf	retrieveLog@addr+1,f,c
 21204  003C3A  4A0E               	infsnz	retrieveLog@i,f,c
 21205  003C3C  2A0F               	incf	retrieveLog@i+1,f,c
 21206  003C3E  D7DE               	goto	i2l6782
 21207  003C40                     i2l6794:
 21208                           
 21209                           ;EEPROM.c: 162: }
 21210                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 21211  003C40  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 21212  003C44  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 21213  003C48  EC37  F029         	call	i2_EEPROM_read	;wreg free
 21214  003C4C  6E09               	movwf	??_retrieveLog& (0+255),c
 21215  003C4E  5009               	movf	??_retrieveLog,w,c
 21216  003C50  0100               	movlb	0	; () banked
 21217  003C52  6FF4               	movwf	_log_total_time& (0+255),b
 21218  003C54  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 21219                           
 21220                           ; BSR set to: 0
 21221  003C56  0012               	return		;funcret
 21222  003C58                     __end_of_retrieveLog:
 21223                           	opt stack 0
 21224                           pclatu	equ	0xFFB
 21225                           pclath	equ	0xFFA
 21226                           tblptru	equ	0xFF8
 21227                           tblptrh	equ	0xFF7
 21228                           tblptrl	equ	0xFF6
 21229                           tablat	equ	0xFF5
 21230                           prodh	equ	0xFF4
 21231                           prodl	equ	0xFF3
 21232                           intcon	equ	0xFF2
 21233                           intcon2	equ	0xFF1
 21234                           intcon3	equ	0xFF0
 21235                           indf0	equ	0xFEF
 21236                           postinc0	equ	0xFEE
 21237                           fsr0h	equ	0xFEA
 21238                           fsr0l	equ	0xFE9
 21239                           wreg	equ	0xFE8
 21240                           postdec1	equ	0xFE5
 21241                           fsr1h	equ	0xFE2
 21242                           fsr1l	equ	0xFE1
 21243                           indf2	equ	0xFDF
 21244                           postinc2	equ	0xFDE
 21245                           postdec2	equ	0xFDD
 21246                           fsr2h	equ	0xFDA
 21247                           fsr2l	equ	0xFD9
 21248                           status	equ	0xFD8
 21249                           
 21250 ;; *************** function i2_EEPROM_read *****************
 21251 ;; Defined at:
 21252 ;;		line 68 in file "EEPROM.c"
 21253 ;; Parameters:    Size  Location     Type
 21254 ;;  address         2    0[COMRAM] unsigned short 
 21255 ;; Auto vars:     Size  Location     Type
 21256 ;;		None
 21257 ;; Return value:  Size  Location     Type
 21258 ;;                  1    wreg      unsigned char 
 21259 ;; Registers used:
 21260 ;;		wreg, status,2
 21261 ;; Tracked objects:
 21262 ;;		On entry : 0/0
 21263 ;;		On exit  : 0/0
 21264 ;;		Unchanged: 0/0
 21265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21270 ;;Total ram usage:        2 bytes
 21271 ;; Hardware stack levels used:    1
 21272 ;; This function calls:
 21273 ;;		Nothing
 21274 ;; This function is called by:
 21275 ;;		_retrieveLog
 21276 ;; This function uses a non-reentrant model
 21277 ;;
 21278                           
 21279                           	psect	text79
 21280  00526E                     __ptext79:
 21281                           	opt stack 0
 21282  00526E                     i2_EEPROM_read:
 21283                           	opt stack 20
 21284                           
 21285                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 21286                           
 21287                           ; BSR set to: 0
 21288                           ;incstack = 0
 21289  00526E  5002               	movf	i2EEPROM_read@address+1,w,c
 21290  005270  6EAA               	movwf	4010,c	;volatile
 21291                           
 21292                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 21293  005272  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 21294                           
 21295                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 21296  005276  9EA6               	bcf	4006,7,c	;volatile
 21297                           
 21298                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 21299  005278  9CA6               	bcf	4006,6,c	;volatile
 21300                           
 21301                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 21302  00527A  80A6               	bsf	4006,0,c	;volatile
 21303  00527C                     i2l1039:
 21304  00527C  B0A6               	btfsc	4006,0,c	;volatile
 21305  00527E  D7FE               	goto	i2l1039
 21306                           
 21307                           ;EEPROM.c: 81: return EEDATA;
 21308  005280  50A8               	movf	4008,w,c	;volatile
 21309  005282  0012               	return	
 21310  005284                     __end_ofi2_EEPROM_read:
 21311                           	opt stack 0
 21312                           pclatu	equ	0xFFB
 21313                           pclath	equ	0xFFA
 21314                           tblptru	equ	0xFF8
 21315                           tblptrh	equ	0xFF7
 21316                           tblptrl	equ	0xFF6
 21317                           tablat	equ	0xFF5
 21318                           prodh	equ	0xFF4
 21319                           prodl	equ	0xFF3
 21320                           intcon	equ	0xFF2
 21321                           intcon2	equ	0xFF1
 21322                           intcon3	equ	0xFF0
 21323                           indf0	equ	0xFEF
 21324                           postinc0	equ	0xFEE
 21325                           fsr0h	equ	0xFEA
 21326                           fsr0l	equ	0xFE9
 21327                           wreg	equ	0xFE8
 21328                           postdec1	equ	0xFE5
 21329                           fsr1h	equ	0xFE2
 21330                           fsr1l	equ	0xFE1
 21331                           indf2	equ	0xFDF
 21332                           postinc2	equ	0xFDE
 21333                           postdec2	equ	0xFDD
 21334                           fsr2h	equ	0xFDA
 21335                           fsr2l	equ	0xFD9
 21336                           status	equ	0xFD8
 21337                           
 21338 ;; *************** function _printSortTimer *****************
 21339 ;; Defined at:
 21340 ;;		line 423 in file "sort.c"
 21341 ;; Parameters:    Size  Location     Type
 21342 ;;		None
 21343 ;; Auto vars:     Size  Location     Type
 21344 ;;  i               2   70[COMRAM] int 
 21345 ;;  i               2   72[COMRAM] int 
 21346 ;;  curTime        14   44[COMRAM] int [7]
 21347 ;;  timeDiff        2   68[COMRAM] unsigned int 
 21348 ;;  sec             2   64[COMRAM] int 
 21349 ;;  min             2   62[COMRAM] int 
 21350 ;;  cur_sec         2   60[COMRAM] unsigned int 
 21351 ;;  start_sec       2   58[COMRAM] unsigned int 
 21352 ;; Return value:  Size  Location     Type
 21353 ;;                  1    wreg      void 
 21354 ;; Registers used:
 21355 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21356 ;; Tracked objects:
 21357 ;;		On entry : 0/0
 21358 ;;		On exit  : 0/0
 21359 ;;		Unchanged: 0/0
 21360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21362 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;Total ram usage:       33 bytes
 21366 ;; Hardware stack levels used:    1
 21367 ;; Hardware stack levels required when called:    3
 21368 ;; This function calls:
 21369 ;;		i2___lwdiv
 21370 ;;		i2___lwmod
 21371 ;;		i2___wmul
 21372 ;;		i2_delay_ms
 21373 ;;		i2_getRTC
 21374 ;;		i2_lcdInst
 21375 ;;		i2_printf
 21376 ;; This function is called by:
 21377 ;;		_handler
 21378 ;; This function uses a non-reentrant model
 21379 ;;
 21380                           
 21381                           	psect	text80
 21382  0029B6                     __ptext80:
 21383                           	opt stack 0
 21384  0029B6                     _printSortTimer:
 21385                           	opt stack 20
 21386                           
 21387                           ;sort.c: 424: getRTC();
 21388                           
 21389                           ;incstack = 0
 21390  0029B6  ECE6  F023         	call	i2_getRTC	;wreg free
 21391                           
 21392                           ;sort.c: 425: int curTime[7];
 21393                           ;sort.c: 426: for(int i = 0; i < 7; i++){
 21394  0029BA  0E00               	movlw	0
 21395  0029BC  6E4A               	movwf	printSortTimer@i+1,c
 21396  0029BE  0E00               	movlw	0
 21397  0029C0  6E49               	movwf	printSortTimer@i,c
 21398  0029C2                     i2l9182:
 21399  0029C2  BE4A               	btfsc	printSortTimer@i+1,7,c
 21400  0029C4  D006               	goto	i2l9186
 21401  0029C6  504A               	movf	printSortTimer@i+1,w,c
 21402  0029C8  E131               	bnz	i2l9192
 21403  0029CA  0E07               	movlw	7
 21404  0029CC  5C49               	subwf	printSortTimer@i,w,c
 21405  0029CE  B0D8               	btfsc	status,0,c
 21406  0029D0  D02D               	goto	i2l9192
 21407  0029D2                     i2l9186:
 21408                           
 21409                           ;sort.c: 427: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 21410  0029D2  0E1C               	movlw	low _time
 21411  0029D4  2449               	addwf	printSortTimer@i,w,c
 21412  0029D6  6ED9               	movwf	fsr2l,c
 21413  0029D8  0E01               	movlw	high _time
 21414  0029DA  204A               	addwfc	printSortTimer@i+1,w,c
 21415  0029DC  6EDA               	movwf	fsr2h,c
 21416  0029DE  50DF               	movf	indf2,w,c
 21417  0029E0  6E2A               	movwf	??_printSortTimer& (0+255),c
 21418  0029E2  3A2A               	swapf	??_printSortTimer,f,c
 21419  0029E4  0E0F               	movlw	15
 21420  0029E6  162A               	andwf	??_printSortTimer,f,c
 21421  0029E8  0E0F               	movlw	15
 21422  0029EA  162A               	andwf	??_printSortTimer,f,c
 21423  0029EC  502A               	movf	??_printSortTimer,w,c
 21424  0029EE  0D0A               	mullw	10
 21425  0029F0  0E1C               	movlw	low _time
 21426  0029F2  2449               	addwf	printSortTimer@i,w,c
 21427  0029F4  6ED9               	movwf	fsr2l,c
 21428  0029F6  0E01               	movlw	high _time
 21429  0029F8  204A               	addwfc	printSortTimer@i+1,w,c
 21430  0029FA  6EDA               	movwf	fsr2h,c
 21431  0029FC  50DF               	movf	indf2,w,c
 21432  0029FE  0B0F               	andlw	15
 21433  002A00  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21434  002A02  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 21435  002A04  50F3               	movf	prodl,w,c
 21436  002A06  262B               	addwf	??_printSortTimer+1,f,c
 21437  002A08  50F4               	movf	prodh,w,c
 21438  002A0A  222C               	addwfc	??_printSortTimer+2,f,c
 21439  002A0C  90D8               	bcf	status,0,c
 21440  002A0E  3449               	rlcf	printSortTimer@i,w,c
 21441  002A10  6ED9               	movwf	fsr2l,c
 21442  002A12  344A               	rlcf	printSortTimer@i+1,w,c
 21443  002A14  6EDA               	movwf	fsr2h,c
 21444  002A16  0E2D               	movlw	low printSortTimer@curTime
 21445  002A18  26D9               	addwf	fsr2l,f,c
 21446  002A1A  0E00               	movlw	high printSortTimer@curTime
 21447  002A1C  22DA               	addwfc	fsr2h,f,c
 21448  002A1E  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 21449  002A22  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 21450  002A26  4A49               	infsnz	printSortTimer@i,f,c
 21451  002A28  2A4A               	incf	printSortTimer@i+1,f,c
 21452  002A2A  D7CB               	goto	i2l9182
 21453  002A2C                     i2l9192:
 21454                           
 21455                           ;sort.c: 428: }
 21456                           ;sort.c: 429: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 21457  002A2C  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 21458  002A30  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 21459  002A34  0E00               	movlw	0
 21460  002A36  6E04               	movwf	i2___wmul@multiplicand+1,c
 21461  002A38  0E3C               	movlw	60
 21462  002A3A  6E03               	movwf	i2___wmul@multiplicand,c
 21463  002A3C  ECA7  F028         	call	i2___wmul	;wreg free
 21464  002A40  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21465  002A44  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21466  002A48  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 21467  002A4C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 21468  002A50  0E0E               	movlw	14
 21469  002A52  6E04               	movwf	i2___wmul@multiplicand+1,c
 21470  002A54  0E10               	movlw	16
 21471  002A56  6E03               	movwf	i2___wmul@multiplicand,c
 21472  002A58  ECA7  F028         	call	i2___wmul	;wreg free
 21473  002A5C  5001               	movf	?i2___wmul,w,c
 21474  002A5E  262A               	addwf	??_printSortTimer,f,c
 21475  002A60  5002               	movf	?i2___wmul+1,w,c
 21476  002A62  222B               	addwfc	??_printSortTimer+1,f,c
 21477  002A64  0101               	movlb	1	; () banked
 21478  002A66  510E               	movf	_startTime& (0+255),w,b
 21479  002A68  242A               	addwf	??_printSortTimer,w,c
 21480  002A6A  6E3B               	movwf	printSortTimer@start_sec,c
 21481  002A6C  0101               	movlb	1	; () banked
 21482  002A6E  510F               	movf	(_startTime+1)& (0+255),w,b
 21483  002A70  202B               	addwfc	??_printSortTimer+1,w,c
 21484  002A72  6E3C               	movwf	printSortTimer@start_sec+1,c
 21485                           
 21486                           ;sort.c: 430: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 21487  002A74  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 21488  002A78  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 21489  002A7C  0E00               	movlw	0
 21490  002A7E  6E04               	movwf	i2___wmul@multiplicand+1,c
 21491  002A80  0E3C               	movlw	60
 21492  002A82  6E03               	movwf	i2___wmul@multiplicand,c
 21493  002A84  ECA7  F028         	call	i2___wmul	;wreg free
 21494  002A88  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 21495  002A8C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 21496  002A90  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 21497  002A94  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 21498  002A98  0E0E               	movlw	14
 21499  002A9A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21500  002A9C  0E10               	movlw	16
 21501  002A9E  6E03               	movwf	i2___wmul@multiplicand,c
 21502  002AA0  ECA7  F028         	call	i2___wmul	;wreg free
 21503  002AA4  5001               	movf	?i2___wmul,w,c
 21504  002AA6  262A               	addwf	??_printSortTimer,f,c
 21505  002AA8  5002               	movf	?i2___wmul+1,w,c
 21506  002AAA  222B               	addwfc	??_printSortTimer+1,f,c
 21507  002AAC  502D               	movf	printSortTimer@curTime,w,c
 21508  002AAE  242A               	addwf	??_printSortTimer,w,c
 21509  002AB0  6E3D               	movwf	printSortTimer@cur_sec,c
 21510  002AB2  502E               	movf	printSortTimer@curTime+1,w,c
 21511  002AB4  202B               	addwfc	??_printSortTimer+1,w,c
 21512  002AB6  6E3E               	movwf	printSortTimer@cur_sec+1,c
 21513                           
 21514                           ;sort.c: 431: unsigned int timeDiff = cur_sec - start_sec;
 21515  002AB8  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 21516  002ABC  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 21517  002AC0  1E2A               	comf	??_printSortTimer,f,c
 21518  002AC2  1E2B               	comf	??_printSortTimer+1,f,c
 21519  002AC4  4A2A               	infsnz	??_printSortTimer,f,c
 21520  002AC6  2A2B               	incf	??_printSortTimer+1,f,c
 21521  002AC8  503D               	movf	printSortTimer@cur_sec,w,c
 21522  002ACA  242A               	addwf	??_printSortTimer,w,c
 21523  002ACC  6E45               	movwf	printSortTimer@timeDiff,c
 21524  002ACE  503E               	movf	printSortTimer@cur_sec+1,w,c
 21525  002AD0  202B               	addwfc	??_printSortTimer+1,w,c
 21526  002AD2  6E46               	movwf	printSortTimer@timeDiff+1,c
 21527                           
 21528                           ;sort.c: 433: total_time = timeDiff;
 21529  002AD4  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 21530  002AD8  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 21531                           
 21532                           ;sort.c: 435: if(f_most_recent_sort_time){
 21533  002ADC  0101               	movlb	1	; () banked
 21534  002ADE  5137               	movf	_f_most_recent_sort_time& (0+255),w,b
 21535  002AE0  0101               	movlb	1	; () banked
 21536  002AE2  1138               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 21537  002AE4  B4D8               	btfsc	status,2,c
 21538  002AE6  D009               	goto	i2l9204
 21539                           
 21540                           ; BSR set to: 1
 21541                           ;sort.c: 436: most_recent_sort_time = total_time;
 21542  002AE8  C0F8  F06D         	movff	_total_time,_most_recent_sort_time
 21543  002AEC  C0F9  F06E         	movff	_total_time+1,_most_recent_sort_time+1
 21544                           
 21545                           ; BSR set to: 1
 21546                           ;sort.c: 437: f_most_recent_sort_time = 0;
 21547  002AF0  0E00               	movlw	0
 21548  002AF2  0101               	movlb	1	; () banked
 21549  002AF4  6F38               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 21550  002AF6  0E00               	movlw	0
 21551  002AF8  6F37               	movwf	_f_most_recent_sort_time& (0+255),b
 21552  002AFA                     i2l9204:
 21553                           
 21554                           ; BSR set to: 1
 21555                           ;sort.c: 438: }
 21556                           ;sort.c: 440: if(total_time - most_recent_sort_time == 20){
 21557  002AFA  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21558  002AFE  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21559  002B02  1E2A               	comf	??_printSortTimer,f,c
 21560  002B04  1E2B               	comf	??_printSortTimer+1,f,c
 21561  002B06  4A2A               	infsnz	??_printSortTimer,f,c
 21562  002B08  2A2B               	incf	??_printSortTimer+1,f,c
 21563  002B0A  0100               	movlb	0	; () banked
 21564  002B0C  51F8               	movf	_total_time& (0+255),w,b
 21565  002B0E  262A               	addwf	??_printSortTimer,f,c
 21566  002B10  0100               	movlb	0	; () banked
 21567  002B12  51F9               	movf	(_total_time+1)& (0+255),w,b
 21568  002B14  222B               	addwfc	??_printSortTimer+1,f,c
 21569  002B16  0E14               	movlw	20
 21570  002B18  182A               	xorwf	??_printSortTimer,w,c
 21571  002B1A  102B               	iorwf	??_printSortTimer+1,w,c
 21572  002B1C  A4D8               	btfss	status,2,c
 21573  002B1E  D033               	goto	i2l9224
 21574                           
 21575                           ; BSR set to: 0
 21576                           ;sort.c: 441: LATBbits.LATB2 = 0;
 21577  002B20  948A               	bcf	3978,2,c	;volatile
 21578                           
 21579                           ; BSR set to: 0
 21580                           ;sort.c: 442: _delay((unsigned long)((2000)*(32000000/4000.0)));
 21581  002B22  0E52               	movlw	82
 21582  002B24  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 21583  002B26  0E2B               	movlw	43
 21584  002B28  6E2A               	movwf	??_printSortTimer& (0+255),c
 21585  002B2A  0E00               	movlw	0
 21586  002B2C                     i2u1005_47:
 21587  002B2C  2EE8               	decfsz	wreg,f,c
 21588  002B2E  D7FE               	bra	i2u1005_47
 21589  002B30  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 21590  002B32  D7FC               	bra	i2u1005_47
 21591  002B34  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 21592  002B36  D7FA               	bra	i2u1005_47
 21593  002B38  D000               	nop2	
 21594                           
 21595                           ;sort.c: 443: for(int i=0; i<46; i++){
 21596  002B3A  0E00               	movlw	0
 21597  002B3C  6E48               	movwf	printSortTimer@i_1185+1,c
 21598  002B3E  0E00               	movlw	0
 21599  002B40  6E47               	movwf	printSortTimer@i_1185,c
 21600  002B42  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21601  002B44  D006               	goto	i2l9216
 21602  002B46  5048               	movf	printSortTimer@i_1185+1,w,c
 21603  002B48  E11D               	bnz	i2l843
 21604  002B4A  0E2E               	movlw	46
 21605  002B4C  5C47               	subwf	printSortTimer@i_1185,w,c
 21606  002B4E  B0D8               	btfsc	status,0,c
 21607  002B50  D019               	goto	i2l843
 21608  002B52                     i2l9216:
 21609                           
 21610                           ;sort.c: 444: LATBbits.LATB2 = !LATBbits.LATB2;
 21611  002B52  B48A               	btfsc	3978,2,c	;volatile
 21612  002B54  D003               	goto	i2u824_40
 21613  002B56  6A2A               	clrf	??_printSortTimer& (0+255),c
 21614  002B58  2A2A               	incf	??_printSortTimer& (0+255),f,c
 21615  002B5A  D001               	goto	i2u825_48
 21616  002B5C                     i2u824_40:
 21617  002B5C  6A2A               	clrf	??_printSortTimer& (0+255),c
 21618  002B5E                     i2u825_48:
 21619  002B5E  462A               	rlncf	??_printSortTimer,f,c
 21620  002B60  462A               	rlncf	??_printSortTimer,f,c
 21621  002B62  508A               	movf	3978,w,c	;volatile
 21622  002B64  182A               	xorwf	??_printSortTimer,w,c
 21623  002B66  0BFB               	andlw	-5
 21624  002B68  182A               	xorwf	??_printSortTimer,w,c
 21625  002B6A  6E8A               	movwf	3978,c	;volatile
 21626                           
 21627                           ;sort.c: 445: delay_ms(45-i);
 21628  002B6C  5047               	movf	printSortTimer@i_1185,w,c
 21629  002B6E  0800               	sublw	0
 21630  002B70  0F2D               	addlw	45
 21631  002B72  EC10  F029         	call	i2_delay_ms
 21632  002B76  4A47               	infsnz	printSortTimer@i_1185,f,c
 21633  002B78  2A48               	incf	printSortTimer@i_1185+1,f,c
 21634  002B7A  BE48               	btfsc	printSortTimer@i_1185+1,7,c
 21635  002B7C  D7EA               	goto	i2l9216
 21636  002B7E  5048               	movf	printSortTimer@i_1185+1,w,c
 21637  002B80  E101               	bnz	i2u826_40
 21638  002B82  D7E3               	goto	L13
 21639  002B84                     i2u826_40:
 21640  002B84                     i2l843:
 21641                           
 21642                           ;sort.c: 446: }
 21643                           ;sort.c: 447: LATBbits.LATB2 = 1;
 21644  002B84  848A               	bsf	3978,2,c	;volatile
 21645  002B86                     i2l9224:
 21646                           
 21647                           ;sort.c: 448: }
 21648                           ;sort.c: 450: if((total_time - most_recent_sort_time == 42) | (total_time == 179)){
 21649  002B86  C06D  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 21650  002B8A  C06E  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 21651  002B8E  1E2A               	comf	??_printSortTimer,f,c
 21652  002B90  1E2B               	comf	??_printSortTimer+1,f,c
 21653  002B92  4A2A               	infsnz	??_printSortTimer,f,c
 21654  002B94  2A2B               	incf	??_printSortTimer+1,f,c
 21655  002B96  0100               	movlb	0	; () banked
 21656  002B98  51F8               	movf	_total_time& (0+255),w,b
 21657  002B9A  262A               	addwf	??_printSortTimer,f,c
 21658  002B9C  0100               	movlb	0	; () banked
 21659  002B9E  51F9               	movf	(_total_time+1)& (0+255),w,b
 21660  002BA0  222B               	addwfc	??_printSortTimer+1,f,c
 21661  002BA2  0E2A               	movlw	42
 21662  002BA4  182A               	xorwf	??_printSortTimer,w,c
 21663  002BA6  102B               	iorwf	??_printSortTimer+1,w,c
 21664  002BA8  B4D8               	btfsc	status,2,c
 21665  002BAA  D007               	goto	i2l9228
 21666                           
 21667                           ; BSR set to: 0
 21668  002BAC  0EB3               	movlw	179
 21669  002BAE  0100               	movlb	0	; () banked
 21670  002BB0  19F8               	xorwf	_total_time& (0+255),w,b
 21671  002BB2  0100               	movlb	0	; () banked
 21672  002BB4  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 21673  002BB6  A4D8               	btfss	status,2,c
 21674  002BB8  D003               	goto	i2l9230
 21675  002BBA                     i2l9228:
 21676                           
 21677                           ; BSR set to: 0
 21678                           ;sort.c: 451: machine_state = DoneSorting_state;
 21679  002BBA  0E02               	movlw	2
 21680  002BBC  0100               	movlb	0	; () banked
 21681  002BBE  6FFC               	movwf	_machine_state& (0+255),b
 21682  002BC0                     i2l9230:
 21683                           
 21684                           ; BSR set to: 0
 21685                           ;sort.c: 453: }
 21686                           ;sort.c: 455: int min = (timeDiff % 3600) / 60;
 21687  002BC0  0E0E               	movlw	14
 21688  002BC2  6E04               	movwf	i2___lwmod@divisor+1,c
 21689  002BC4  0E10               	movlw	16
 21690  002BC6  6E03               	movwf	i2___lwmod@divisor,c
 21691  002BC8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21692  002BCC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21693  002BD0  EC5F  F026         	call	i2___lwmod	;wreg free
 21694  002BD4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 21695  002BD8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 21696  002BDC  0E00               	movlw	0
 21697  002BDE  6E09               	movwf	i2___lwdiv@divisor+1,c
 21698  002BE0  0E3C               	movlw	60
 21699  002BE2  6E08               	movwf	i2___lwdiv@divisor,c
 21700  002BE4  ECA0  F025         	call	i2___lwdiv	;wreg free
 21701  002BE8  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 21702  002BEC  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 21703                           
 21704                           ;sort.c: 456: int sec = (timeDiff % 3600) % 60;
 21705  002BF0  0E0E               	movlw	14
 21706  002BF2  6E04               	movwf	i2___lwmod@divisor+1,c
 21707  002BF4  0E10               	movlw	16
 21708  002BF6  6E03               	movwf	i2___lwmod@divisor,c
 21709  002BF8  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 21710  002BFC  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 21711  002C00  EC5F  F026         	call	i2___lwmod	;wreg free
 21712  002C04  C001  F043         	movff	?i2___lwmod,_printSortTimer$2548
 21713  002C08  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2548+1
 21714                           
 21715                           ;sort.c: 456: int sec = (timeDiff % 3600) % 60;
 21716  002C0C  C043  F001         	movff	_printSortTimer$2548,i2___lwmod@dividend
 21717  002C10  C044  F002         	movff	_printSortTimer$2548+1,i2___lwmod@dividend+1
 21718  002C14  0E00               	movlw	0
 21719  002C16  6E04               	movwf	i2___lwmod@divisor+1,c
 21720  002C18  0E3C               	movlw	60
 21721  002C1A  6E03               	movwf	i2___lwmod@divisor,c
 21722  002C1C  EC5F  F026         	call	i2___lwmod	;wreg free
 21723  002C20  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 21724  002C24  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 21725                           
 21726                           ;sort.c: 458: lcdInst(0b10000000);;
 21727  002C28  0E80               	movlw	128
 21728  002C2A  EC6B  F029         	call	i2_lcdInst
 21729                           
 21730                           ;sort.c: 459: printf("SORTING...");
 21731  002C2E  0E78               	movlw	low STR_64
 21732  002C30  6E0D               	movwf	i2printf@f,c
 21733  002C32  0EFF               	movlw	high STR_64
 21734  002C34  6E0E               	movwf	i2printf@f+1,c
 21735  002C36  ECE0  F00E         	call	i2_printf	;wreg free
 21736                           
 21737                           ;sort.c: 460: lcdInst(0b11000000);;
 21738  002C3A  0EC0               	movlw	192
 21739  002C3C  EC6B  F029         	call	i2_lcdInst
 21740                           
 21741                           ;sort.c: 461: printf("TIME %d:%02d", min, sec);
 21742  002C40  0E3E               	movlw	low STR_65
 21743  002C42  6E0D               	movwf	i2printf@f,c
 21744  002C44  0EFF               	movlw	high STR_65
 21745  002C46  6E0E               	movwf	i2printf@f+1,c
 21746  002C48  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 21747  002C4C  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 21748  002C50  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 21749  002C54  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 21750  002C58  ECE0  F00E         	call	i2_printf	;wreg free
 21751  002C5C  0012               	return		;funcret
 21752  002C5E                     __end_of_printSortTimer:
 21753                           	opt stack 0
 21754                           pclatu	equ	0xFFB
 21755                           pclath	equ	0xFFA
 21756                           tblptru	equ	0xFF8
 21757                           tblptrh	equ	0xFF7
 21758                           tblptrl	equ	0xFF6
 21759                           tablat	equ	0xFF5
 21760                           prodh	equ	0xFF4
 21761                           prodl	equ	0xFF3
 21762                           intcon	equ	0xFF2
 21763                           intcon2	equ	0xFF1
 21764                           intcon3	equ	0xFF0
 21765                           indf0	equ	0xFEF
 21766                           postinc0	equ	0xFEE
 21767                           fsr0h	equ	0xFEA
 21768                           fsr0l	equ	0xFE9
 21769                           wreg	equ	0xFE8
 21770                           postdec1	equ	0xFE5
 21771                           fsr1h	equ	0xFE2
 21772                           fsr1l	equ	0xFE1
 21773                           indf2	equ	0xFDF
 21774                           postinc2	equ	0xFDE
 21775                           postdec2	equ	0xFDD
 21776                           fsr2h	equ	0xFDA
 21777                           fsr2l	equ	0xFD9
 21778                           status	equ	0xFD8
 21779                           
 21780 ;; *************** function i2_printf *****************
 21781 ;; Defined at:
 21782 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 21783 ;; Parameters:    Size  Location     Type
 21784 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21785 ;;		 -> STR_126(18), STR_125(18), STR_124(18), STR_123(18), 
 21786 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 21787 ;;		 -> STR_118(3), STR_117(15), STR_116(3), STR_115(15), 
 21788 ;;		 -> STR_114(11), STR_113(18), STR_112(18), STR_111(17), 
 21789 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 21790 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 21791 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 21792 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 21793 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 21794 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 21795 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 21796 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 21797 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 21798 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 21799 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 21800 ;;		 -> STR_66(4), STR_65(13), STR_64(11), STR_63(24), 
 21801 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 21802 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 21803 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 21804 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 21805 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 21806 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 21807 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 21808 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 21809 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 21810 ;;		 -> STR_1(18), 
 21811 ;; Auto vars:     Size  Location     Type
 21812 ;;  printf          4    0        struct .
 21813 ;;  printf          2   39[COMRAM] int 
 21814 ;;  printf          2   35[COMRAM] unsigned int 
 21815 ;;  printf          2   33[COMRAM] unsigned int 
 21816 ;;  printf          2   31[COMRAM] PTR void [1]
 21817 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21818 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 21819 ;;		 -> STR_127(7), count_total(2), printRTC@month(4), UI@month(4), 
 21820 ;;  printf          1   38[COMRAM] char 
 21821 ;;  printf          1   37[COMRAM] unsigned char 
 21822 ;;  printf          1   28[COMRAM] char 
 21823 ;; Return value:  Size  Location     Type
 21824 ;;                  2   12[COMRAM] int 
 21825 ;; Registers used:
 21826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21827 ;; Tracked objects:
 21828 ;;		On entry : 0/0
 21829 ;;		On exit  : 0/0
 21830 ;;		Unchanged: 0/0
 21831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21832 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21833 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21834 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21835 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21836 ;;Total ram usage:       29 bytes
 21837 ;; Hardware stack levels used:    1
 21838 ;; Hardware stack levels required when called:    2
 21839 ;; This function calls:
 21840 ;;		i2___lwdiv
 21841 ;;		i2___lwmod
 21842 ;;		i2___wmul
 21843 ;;		i2_isdigit
 21844 ;;		i2_putch
 21845 ;; This function is called by:
 21846 ;;		_change_state_to_menu_11
 21847 ;;		_change_state_to_menu_23
 21848 ;;		_change_state_to_logs_11
 21849 ;;		_change_state_to_logs_12
 21850 ;;		_change_state_to_logs_22
 21851 ;;		_change_state_to_logs_23
 21852 ;;		_change_state_to_logs_33
 21853 ;;		_change_state_to_logs_34
 21854 ;;		_printSortTimer
 21855 ;;		_updateServoStates
 21856 ;;		i2_change_state_to_menu_start
 21857 ;;		i2_change_state_to_menu_12
 21858 ;;		i2_change_state_to_menu_22
 21859 ;;		i2_printRTC
 21860 ;; This function uses a non-reentrant model
 21861 ;;
 21862                           
 21863                           	psect	text81
 21864  001DC0                     __ptext81:
 21865                           	opt stack 0
 21866  001DC0                     i2_printf:
 21867                           	opt stack 20
 21868                           
 21869                           ;doprnt.c: 466: va_list ap;
 21870                           ;doprnt.c: 499: signed char c;
 21871                           ;doprnt.c: 501: int width;
 21872                           ;doprnt.c: 506: signed char prec;
 21873                           ;doprnt.c: 508: unsigned char flag;
 21874                           ;doprnt.c: 523: union {
 21875                           ;doprnt.c: 524: unsigned long vd;
 21876                           ;doprnt.c: 525: double integ;
 21877                           ;doprnt.c: 526: } tmpval;
 21878                           ;doprnt.c: 528: unsigned int val;
 21879                           ;doprnt.c: 529: unsigned len;
 21880                           ;doprnt.c: 530: const char * cp;
 21881                           ;doprnt.c: 533: *ap = __va_start();
 21882                           
 21883                           ;incstack = 0
 21884  001DC0  0E0F               	movlw	low (?i2_printf+2)
 21885  001DC2  6E20               	movwf	i2printf@ap,c
 21886  001DC4  0E00               	movlw	high (?i2_printf+2)
 21887  001DC6  6E21               	movwf	i2printf@ap+1,c
 21888                           
 21889                           ;doprnt.c: 536: while(c = *f++) {
 21890  001DC8  D1A4               	goto	i2l6606
 21891  001DCA                     i2l6476:
 21892                           
 21893                           ;doprnt.c: 538: if(c != '%')
 21894  001DCA  0E25               	movlw	37
 21895  001DCC  1827               	xorwf	i2printf@c,w,c
 21896  001DCE  B4D8               	btfsc	status,2,c
 21897  001DD0  D004               	goto	i2l6480
 21898                           
 21899                           ;doprnt.c: 540: {
 21900                           ;doprnt.c: 541: (putch(c) );
 21901  001DD2  5027               	movf	i2printf@c,w,c
 21902  001DD4  EC65  F029         	call	i2_putch
 21903                           
 21904                           ;doprnt.c: 542: continue;
 21905  001DD8  D19C               	goto	i2l6606
 21906  001DDA                     i2l6480:
 21907                           
 21908                           ;doprnt.c: 543: }
 21909                           ;doprnt.c: 546: width = 0;
 21910  001DDA  0E00               	movlw	0
 21911  001DDC  6E29               	movwf	i2printf@width+1,c
 21912  001DDE  0E00               	movlw	0
 21913  001DE0  6E28               	movwf	i2printf@width,c
 21914                           
 21915                           ;doprnt.c: 548: flag = 0;
 21916  001DE2  0E00               	movlw	0
 21917  001DE4  6E26               	movwf	i2printf@flag,c
 21918                           
 21919                           ;doprnt.c: 551: switch(*f) {
 21920                           
 21921                           ;doprnt.c: 550: for(;;) {
 21922  001DE6  D003               	goto	i2l6486
 21923  001DE8                     i2l6482:
 21924                           
 21925                           ;doprnt.c: 580: flag |= 0x04;
 21926  001DE8  8426               	bsf	i2printf@flag,2,c
 21927                           
 21928                           ;doprnt.c: 581: f++;
 21929  001DEA  4A0D               	infsnz	i2printf@f,f,c
 21930  001DEC  2A0E               	incf	i2printf@f+1,f,c
 21931  001DEE                     i2l6486:
 21932  001DEE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21933  001DF2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21934  001DF6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21935  001DF6  6AF8               	clrf	tblptru,c
 21936  001DF8                     	endif
 21937  001DF8                     	if	0	;tblptru may be non-zero
 21938  001DF8                     	endif
 21939  001DF8  0008               	tblrd		*
 21940  001DFA  50F5               	movf	tablat,w,c
 21941                           
 21942                           ; Switch size 1, requested type "space"
 21943                           ; Number of cases is 1, Range of values is 48 to 48
 21944                           ; switch strategies available:
 21945                           ; Name         Instructions Cycles
 21946                           ; simple_byte            4     3 (average)
 21947                           ;	Chosen strategy is simple_byte
 21948  001DFC  0A30               	xorlw	48	; case 48
 21949  001DFE  B4D8               	btfsc	status,2,c
 21950  001E00  D7F3               	goto	i2l6482
 21951                           
 21952                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21953                           
 21954                           ;doprnt.c: 586: }
 21955                           
 21956                           ;doprnt.c: 585: break;
 21957  001E02  C00D  FFF6         	movff	i2printf@f,tblptrl
 21958  001E06  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21959  001E0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21960  001E0A  6AF8               	clrf	tblptru,c
 21961  001E0C                     	endif
 21962  001E0C                     	if	0	;tblptru may be non-zero
 21963  001E0C                     	endif
 21964  001E0C  0008               	tblrd		*
 21965  001E0E  50F5               	movf	tablat,w,c
 21966  001E10  EC01  F029         	call	i2_isdigit
 21967  001E14  A0D8               	btfss	status,0,c
 21968  001E16  D0A6               	goto	i2l6534
 21969                           
 21970                           ;doprnt.c: 598: width = 0;
 21971  001E18  0E00               	movlw	0
 21972  001E1A  6E29               	movwf	i2printf@width+1,c
 21973  001E1C  0E00               	movlw	0
 21974  001E1E  6E28               	movwf	i2printf@width,c
 21975  001E20                     i2l6492:
 21976                           
 21977                           ;doprnt.c: 600: width *= 10;
 21978  001E20  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21979  001E24  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21980  001E28  0E00               	movlw	0
 21981  001E2A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21982  001E2C  0E0A               	movlw	10
 21983  001E2E  6E03               	movwf	i2___wmul@multiplicand,c
 21984  001E30  ECA7  F028         	call	i2___wmul	;wreg free
 21985  001E34  C001  F028         	movff	?i2___wmul,i2printf@width
 21986  001E38  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21987                           
 21988                           ;doprnt.c: 601: width += *f++ - '0';
 21989  001E3C  0ED0               	movlw	208
 21990  001E3E  6E19               	movwf	??i2_printf& (0+255),c
 21991  001E40  0EFF               	movlw	255
 21992  001E42  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21993  001E44  C00D  FFF6         	movff	i2printf@f,tblptrl
 21994  001E48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21995  001E4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21996  001E4C  6AF8               	clrf	tblptru,c
 21997  001E4E                     	endif
 21998  001E4E                     	if	0	;tblptru may be non-zero
 21999  001E4E                     	endif
 22000  001E4E  0008               	tblrd		*
 22001  001E50  50F5               	movf	tablat,w,c
 22002  001E52  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 22003  001E54  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 22004  001E56  5019               	movf	??i2_printf,w,c
 22005  001E58  261B               	addwf	??i2_printf+2,f,c
 22006  001E5A  501A               	movf	??i2_printf+1,w,c
 22007  001E5C  221C               	addwfc	??i2_printf+3,f,c
 22008  001E5E  501B               	movf	??i2_printf+2,w,c
 22009  001E60  2628               	addwf	i2printf@width,f,c
 22010  001E62  501C               	movf	??i2_printf+3,w,c
 22011  001E64  2229               	addwfc	i2printf@width+1,f,c
 22012  001E66  4A0D               	infsnz	i2printf@f,f,c
 22013  001E68  2A0E               	incf	i2printf@f+1,f,c
 22014                           
 22015                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22016  001E6A  C00D  FFF6         	movff	i2printf@f,tblptrl
 22017  001E6E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22018  001E72                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22019  001E72  6AF8               	clrf	tblptru,c
 22020  001E74                     	endif
 22021  001E74                     	if	0	;tblptru may be non-zero
 22022  001E74                     	endif
 22023  001E74  0008               	tblrd		*
 22024  001E76  50F5               	movf	tablat,w,c
 22025  001E78  EC01  F029         	call	i2_isdigit
 22026  001E7C  A0D8               	btfss	status,0,c
 22027  001E7E  D072               	goto	i2l6534
 22028  001E80  D7CF               	goto	i2l6492
 22029  001E82                     i2l6500:
 22030                           
 22031                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22032  001E82  C020  FFD9         	movff	i2printf@ap,fsr2l
 22033  001E86  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22034  001E8A  CFDE F01E          	movff	postinc2,i2printf@cp
 22035  001E8E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 22036  001E92  0E02               	movlw	2
 22037  001E94  2620               	addwf	i2printf@ap,f,c
 22038  001E96  0E00               	movlw	0
 22039  001E98  2221               	addwfc	i2printf@ap+1,f,c
 22040                           
 22041                           ;doprnt.c: 740: if(!cp)
 22042  001E9A  501E               	movf	i2printf@cp,w,c
 22043  001E9C  101F               	iorwf	i2printf@cp+1,w,c
 22044  001E9E  A4D8               	btfss	status,2,c
 22045  001EA0  D004               	goto	i2l6508
 22046                           
 22047                           ;doprnt.c: 741: cp = "(null)";
 22048  001EA2  0EB2               	movlw	low STR_127
 22049  001EA4  6E1E               	movwf	i2printf@cp,c
 22050  001EA6  0EFF               	movlw	high STR_127
 22051  001EA8  6E1F               	movwf	i2printf@cp+1,c
 22052  001EAA                     i2l6508:
 22053                           
 22054                           ;doprnt.c: 745: len = 0;
 22055  001EAA  0E00               	movlw	0
 22056  001EAC  6E23               	movwf	i2printf@len+1,c
 22057  001EAE  0E00               	movlw	0
 22058  001EB0  6E22               	movwf	i2printf@len,c
 22059                           
 22060                           ;doprnt.c: 746: while(cp[len])
 22061  001EB2  D002               	goto	i2l6512
 22062  001EB4                     i2l6510:
 22063                           
 22064                           ;doprnt.c: 747: len++;
 22065  001EB4  4A22               	infsnz	i2printf@len,f,c
 22066  001EB6  2A23               	incf	i2printf@len+1,f,c
 22067  001EB8                     i2l6512:
 22068  001EB8  5022               	movf	i2printf@len,w,c
 22069  001EBA  241E               	addwf	i2printf@cp,w,c
 22070  001EBC  6E19               	movwf	??i2_printf& (0+255),c
 22071  001EBE  5023               	movf	i2printf@len+1,w,c
 22072  001EC0  201F               	addwfc	i2printf@cp+1,w,c
 22073  001EC2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 22074  001EC4  C019  FFF6         	movff	??i2_printf,tblptrl
 22075  001EC8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 22076  001ECC  0E00               	movlw	low (__mediumconst shr (0+16))
 22077  001ECE  6EF8               	movwf	tblptru,c
 22078  001ED0  0E0F               	movlw	(high __ramtop+-1)
 22079  001ED2  64F7               	cpfsgt	tblptrh,c
 22080  001ED4  D003               	bra	i2u495_47
 22081  001ED6  0008               	tblrd		*
 22082  001ED8  50F5               	movf	tablat,w,c
 22083  001EDA  D005               	bra	i2u495_40
 22084  001EDC                     i2u495_47:
 22085  001EDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 22086  001EE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 22087  001EE4  50EF               	movf	indf0,w,c
 22088  001EE6                     i2u495_40:
 22089  001EE6  0900               	iorlw	0
 22090  001EE8  A4D8               	btfss	status,2,c
 22091  001EEA  D7E4               	goto	i2l6510
 22092                           
 22093                           ;doprnt.c: 757: if(width > len)
 22094  001EEC  5028               	movf	i2printf@width,w,c
 22095  001EEE  5C22               	subwf	i2printf@len,w,c
 22096  001EF0  5029               	movf	i2printf@width+1,w,c
 22097  001EF2  5823               	subwfb	i2printf@len+1,w,c
 22098  001EF4  B0D8               	btfsc	status,0,c
 22099  001EF6  D005               	goto	i2l6518
 22100                           
 22101                           ;doprnt.c: 758: width -= len;
 22102  001EF8  5022               	movf	i2printf@len,w,c
 22103  001EFA  5E28               	subwf	i2printf@width,f,c
 22104  001EFC  5023               	movf	i2printf@len+1,w,c
 22105  001EFE  5A29               	subwfb	i2printf@width+1,f,c
 22106  001F00  D008               	goto	i2l6522
 22107  001F02                     i2l6518:
 22108                           
 22109                           ;doprnt.c: 759: else
 22110                           ;doprnt.c: 760: width = 0;
 22111  001F02  0E00               	movlw	0
 22112  001F04  6E29               	movwf	i2printf@width+1,c
 22113  001F06  0E00               	movlw	0
 22114  001F08  6E28               	movwf	i2printf@width,c
 22115                           
 22116                           ;doprnt.c: 764: while(width--)
 22117  001F0A  D003               	goto	i2l6522
 22118  001F0C                     i2l6520:
 22119                           
 22120                           ;doprnt.c: 765: (putch(' ') );
 22121  001F0C  0E20               	movlw	32
 22122  001F0E  EC65  F029         	call	i2_putch
 22123  001F12                     i2l6522:
 22124  001F12  0628               	decf	i2printf@width,f,c
 22125  001F14  A0D8               	btfss	status,0,c
 22126  001F16  0629               	decf	i2printf@width+1,f,c
 22127  001F18  2828               	incf	i2printf@width,w,c
 22128  001F1A  E1F8               	bnz	i2l6520
 22129  001F1C  2829               	incf	i2printf@width+1,w,c
 22130  001F1E  B4D8               	btfsc	status,2,c
 22131  001F20  D016               	goto	i2l6528
 22132  001F22  D7F4               	goto	i2l6520
 22133  001F24                     i2l6524:
 22134                           
 22135                           ;doprnt.c: 768: (putch(*cp++) );
 22136  001F24  C01E  FFF6         	movff	i2printf@cp,tblptrl
 22137  001F28  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 22138  001F2C  0E00               	movlw	low (__mediumconst shr (0+16))
 22139  001F2E  6EF8               	movwf	tblptru,c
 22140  001F30  0E0F               	movlw	(high __ramtop+-1)
 22141  001F32  64F7               	cpfsgt	tblptrh,c
 22142  001F34  D003               	bra	i2u499_47
 22143  001F36  0008               	tblrd		*
 22144  001F38  50F5               	movf	tablat,w,c
 22145  001F3A  D005               	bra	i2u499_40
 22146  001F3C                     i2u499_47:
 22147  001F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
 22148  001F40  CFF7 FFEA          	movff	tblptrh,fsr0h
 22149  001F44  50EF               	movf	indf0,w,c
 22150  001F46                     i2u499_40:
 22151  001F46  EC65  F029         	call	i2_putch
 22152  001F4A  4A1E               	infsnz	i2printf@cp,f,c
 22153  001F4C  2A1F               	incf	i2printf@cp+1,f,c
 22154  001F4E                     i2l6528:
 22155  001F4E  0622               	decf	i2printf@len,f,c
 22156  001F50  A0D8               	btfss	status,0,c
 22157  001F52  0623               	decf	i2printf@len+1,f,c
 22158  001F54  2822               	incf	i2printf@len,w,c
 22159  001F56  E1E6               	bnz	i2l6524
 22160  001F58  2823               	incf	i2printf@len+1,w,c
 22161  001F5A  B4D8               	btfsc	status,2,c
 22162  001F5C  D0DA               	goto	i2l6606
 22163  001F5E  D7E2               	goto	i2l6524
 22164  001F60                     i2l6530:
 22165                           
 22166                           ;doprnt.c: 818: flag |= 0x40;
 22167  001F60  8C26               	bsf	i2printf@flag,6,c
 22168                           
 22169                           ;doprnt.c: 822: }
 22170                           
 22171                           ;doprnt.c: 819: break;
 22172  001F62  D01B               	goto	i2l1406
 22173  001F64                     i2l6534:
 22174  001F64  C00D  FFF6         	movff	i2printf@f,tblptrl
 22175  001F68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22176  001F6C  4A0D               	infsnz	i2printf@f,f,c
 22177  001F6E  2A0E               	incf	i2printf@f+1,f,c
 22178  001F70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22179  001F70  6AF8               	clrf	tblptru,c
 22180  001F72                     	endif
 22181  001F72                     	if	0	;tblptru may be non-zero
 22182  001F72                     	endif
 22183  001F72  0008               	tblrd		*
 22184  001F74  CFF5 F027          	movff	tablat,i2printf@c
 22185  001F78  5027               	movf	i2printf@c,w,c
 22186                           
 22187                           ; Switch size 1, requested type "space"
 22188                           ; Number of cases is 5, Range of values is 0 to 117
 22189                           ; switch strategies available:
 22190                           ; Name         Instructions Cycles
 22191                           ; simple_byte           16     9 (average)
 22192                           ;	Chosen strategy is simple_byte
 22193  001F7A  0A00               	xorlw	0	; case 0
 22194  001F7C  B4D8               	btfsc	status,2,c
 22195  001F7E  0012               	return	
 22196  001F80  0A64               	xorlw	100	; case 100
 22197  001F82  B4D8               	btfsc	status,2,c
 22198  001F84  D00A               	goto	i2l1406
 22199  001F86  0A0D               	xorlw	13	; case 105
 22200  001F88  B4D8               	btfsc	status,2,c
 22201  001F8A  D007               	goto	i2l1406
 22202  001F8C  0A1A               	xorlw	26	; case 115
 22203  001F8E  B4D8               	btfsc	status,2,c
 22204  001F90  D778               	goto	i2l6500
 22205  001F92  0A06               	xorlw	6	; case 117
 22206  001F94  B4D8               	btfsc	status,2,c
 22207  001F96  D7E4               	goto	i2l6530
 22208  001F98  D0BC               	goto	i2l6606
 22209  001F9A                     i2l1406:
 22210                           
 22211                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 22212  001F9A  BC26               	btfsc	i2printf@flag,6,c
 22213  001F9C  D015               	goto	i2l6546
 22214                           
 22215                           ;doprnt.c: 1253: {
 22216                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22217  001F9E  C020  FFD9         	movff	i2printf@ap,fsr2l
 22218  001FA2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22219  001FA6  CFDE F024          	movff	postinc2,i2printf@val
 22220  001FAA  CFDD F025          	movff	postdec2,i2printf@val+1
 22221  001FAE  0E02               	movlw	2
 22222  001FB0  2620               	addwf	i2printf@ap,f,c
 22223  001FB2  0E00               	movlw	0
 22224  001FB4  2221               	addwfc	i2printf@ap+1,f,c
 22225                           
 22226                           ;doprnt.c: 1261: if((int)val < 0) {
 22227  001FB6  AE25               	btfss	i2printf@val+1,7,c
 22228  001FB8  D013               	goto	i2l6550
 22229                           
 22230                           ;doprnt.c: 1262: flag |= 0x03;
 22231  001FBA  0E03               	movlw	3
 22232  001FBC  1226               	iorwf	i2printf@flag,f,c
 22233                           
 22234                           ;doprnt.c: 1263: val = -val;
 22235  001FBE  6C24               	negf	i2printf@val,c
 22236  001FC0  1E25               	comf	i2printf@val+1,f,c
 22237  001FC2  B0D8               	btfsc	status,0,c
 22238  001FC4  2A25               	incf	i2printf@val+1,f,c
 22239                           
 22240                           ;doprnt.c: 1264: }
 22241                           ;doprnt.c: 1266: }
 22242  001FC6  D00C               	goto	i2l6550
 22243  001FC8                     i2l6546:
 22244                           
 22245                           ;doprnt.c: 1268: else
 22246                           ;doprnt.c: 1273: {
 22247                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22248  001FC8  C020  FFD9         	movff	i2printf@ap,fsr2l
 22249  001FCC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 22250  001FD0  CFDE F024          	movff	postinc2,i2printf@val
 22251  001FD4  CFDD F025          	movff	postdec2,i2printf@val+1
 22252  001FD8  0E02               	movlw	2
 22253  001FDA  2620               	addwf	i2printf@ap,f,c
 22254  001FDC  0E00               	movlw	0
 22255  001FDE  2221               	addwfc	i2printf@ap+1,f,c
 22256  001FE0                     i2l6550:
 22257                           
 22258                           ;doprnt.c: 1287: }
 22259                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22260  001FE0  0E01               	movlw	1
 22261  001FE2  6E27               	movwf	i2printf@c,c
 22262  001FE4                     i2l6552:
 22263  001FE4  0E05               	movlw	5
 22264  001FE6  1827               	xorwf	i2printf@c,w,c
 22265  001FE8  B4D8               	btfsc	status,2,c
 22266  001FEA  D015               	goto	i2l6564
 22267                           
 22268                           ;doprnt.c: 1306: if(val < dpowers[c])
 22269  001FEC  5027               	movf	i2printf@c,w,c
 22270  001FEE  0D02               	mullw	2
 22271  001FF0  0EFC               	movlw	low _dpowers
 22272  001FF2  24F3               	addwf	prodl,w,c
 22273  001FF4  6EF6               	movwf	tblptrl,c
 22274  001FF6  0EFA               	movlw	high _dpowers
 22275  001FF8  20F4               	addwfc	prodh,w,c
 22276  001FFA  6EF7               	movwf	tblptrh,c
 22277  001FFC                     	if	1	;There are 3 active tblptr bytes
 22278  001FFC  6AF8               	clrf	tblptru,c
 22279  001FFE  0E00               	movlw	low (__mediumconst shr (0+16))
 22280  002000  22F8               	addwfc	tblptru,f,c
 22281  002002                     	endif
 22282  002002  0009               	tblrd		*+
 22283  002004  50F5               	movf	tablat,w,c
 22284  002006  5C24               	subwf	i2printf@val,w,c
 22285  002008  0009               	tblrd		*+
 22286  00200A  50F5               	movf	tablat,w,c
 22287  00200C  5825               	subwfb	i2printf@val+1,w,c
 22288  00200E  A0D8               	btfss	status,0,c
 22289  002010  D002               	goto	i2l6564
 22290                           
 22291                           ;doprnt.c: 1307: break;
 22292  002012  2A27               	incf	i2printf@c,f,c
 22293  002014  D7E7               	goto	i2l6552
 22294  002016                     i2l6564:
 22295                           
 22296                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22297  002016  5028               	movf	i2printf@width,w,c
 22298  002018  1029               	iorwf	i2printf@width+1,w,c
 22299  00201A  B4D8               	btfsc	status,2,c
 22300  00201C  D009               	goto	i2l6570
 22301  00201E  C026  F019         	movff	i2printf@flag,??i2_printf
 22302  002022  0E03               	movlw	3
 22303  002024  1619               	andwf	??i2_printf,f,c
 22304  002026  B4D8               	btfsc	status,2,c
 22305  002028  D003               	goto	i2l6570
 22306                           
 22307                           ;doprnt.c: 1346: width--;
 22308  00202A  0628               	decf	i2printf@width,f,c
 22309  00202C  A0D8               	btfss	status,0,c
 22310  00202E  0629               	decf	i2printf@width+1,f,c
 22311  002030                     i2l6570:
 22312                           
 22313                           ;doprnt.c: 1381: if(width > c)
 22314  002030  0E80               	movlw	128
 22315  002032  BE27               	btfsc	i2printf@c,7,c
 22316  002034  0E7F               	movlw	127
 22317  002036  6E19               	movwf	??i2_printf& (0+255),c
 22318  002038  5028               	movf	i2printf@width,w,c
 22319  00203A  5C27               	subwf	i2printf@c,w,c
 22320  00203C  5029               	movf	i2printf@width+1,w,c
 22321  00203E  0A80               	xorlw	128
 22322  002040  5819               	subwfb	??i2_printf& (0+255),w,c
 22323  002042  B0D8               	btfsc	status,0,c
 22324  002044  D007               	goto	i2l6574
 22325                           
 22326                           ;doprnt.c: 1382: width -= c;
 22327  002046  5027               	movf	i2printf@c,w,c
 22328  002048  5E28               	subwf	i2printf@width,f,c
 22329  00204A  0E00               	movlw	0
 22330  00204C  BE27               	btfsc	i2printf@c,7,c
 22331  00204E  0EFF               	movlw	255
 22332  002050  5A29               	subwfb	i2printf@width+1,f,c
 22333  002052  D004               	goto	i2l6576
 22334  002054                     i2l6574:
 22335                           
 22336                           ;doprnt.c: 1383: else
 22337                           ;doprnt.c: 1384: width = 0;
 22338  002054  0E00               	movlw	0
 22339  002056  6E29               	movwf	i2printf@width+1,c
 22340  002058  0E00               	movlw	0
 22341  00205A  6E28               	movwf	i2printf@width,c
 22342  00205C                     i2l6576:
 22343                           
 22344                           ;doprnt.c: 1387: if(flag & 0x04) {
 22345  00205C  A426               	btfss	i2printf@flag,2,c
 22346  00205E  D014               	goto	i2l6588
 22347                           
 22348                           ;doprnt.c: 1392: if(flag & 0x03)
 22349  002060  C026  F019         	movff	i2printf@flag,??i2_printf
 22350  002064  0E03               	movlw	3
 22351  002066  1619               	andwf	??i2_printf,f,c
 22352  002068  B4D8               	btfsc	status,2,c
 22353  00206A  D003               	goto	i2l6582
 22354                           
 22355                           ;doprnt.c: 1393: (putch('-') );
 22356  00206C  0E2D               	movlw	45
 22357  00206E  EC65  F029         	call	i2_putch
 22358  002072                     i2l6582:
 22359                           
 22360                           ;doprnt.c: 1415: if(width)
 22361  002072  5028               	movf	i2printf@width,w,c
 22362  002074  1029               	iorwf	i2printf@width+1,w,c
 22363  002076  B4D8               	btfsc	status,2,c
 22364  002078  D01E               	goto	i2l6598
 22365                           
 22366                           ;doprnt.c: 1417: (putch('0') );
 22367                           
 22368                           ;doprnt.c: 1416: do
 22369  00207A  0E30               	movlw	48
 22370  00207C  EC65  F029         	call	i2_putch
 22371                           
 22372                           ;doprnt.c: 1418: while(--width);
 22373  002080  0628               	decf	i2printf@width,f,c
 22374  002082  A0D8               	btfss	status,0,c
 22375  002084  0629               	decf	i2printf@width+1,f,c
 22376  002086  D7F5               	goto	i2l6582
 22377  002088                     i2l6588:
 22378                           
 22379                           ;doprnt.c: 1422: {
 22380                           ;doprnt.c: 1424: if(width
 22381                           ;doprnt.c: 1428: )
 22382  002088  5028               	movf	i2printf@width,w,c
 22383  00208A  1029               	iorwf	i2printf@width+1,w,c
 22384  00208C  B4D8               	btfsc	status,2,c
 22385  00208E  D00A               	goto	i2l6594
 22386  002090                     i2l6590:
 22387                           
 22388                           ;doprnt.c: 1430: (putch(' ') );
 22389  002090  0E20               	movlw	32
 22390  002092  EC65  F029         	call	i2_putch
 22391                           
 22392                           ;doprnt.c: 1431: while(--width);
 22393  002096  0628               	decf	i2printf@width,f,c
 22394  002098  A0D8               	btfss	status,0,c
 22395  00209A  0629               	decf	i2printf@width+1,f,c
 22396  00209C  5028               	movf	i2printf@width,w,c
 22397  00209E  1029               	iorwf	i2printf@width+1,w,c
 22398  0020A0  A4D8               	btfss	status,2,c
 22399  0020A2  D7F6               	goto	i2l6590
 22400  0020A4                     i2l6594:
 22401                           
 22402                           ;doprnt.c: 1438: if(flag & 0x03)
 22403  0020A4  C026  F019         	movff	i2printf@flag,??i2_printf
 22404  0020A8  0E03               	movlw	3
 22405  0020AA  1619               	andwf	??i2_printf,f,c
 22406  0020AC  B4D8               	btfsc	status,2,c
 22407  0020AE  D003               	goto	i2l6598
 22408                           
 22409                           ;doprnt.c: 1439: (putch('-') );
 22410  0020B0  0E2D               	movlw	45
 22411  0020B2  EC65  F029         	call	i2_putch
 22412  0020B6                     i2l6598:
 22413                           
 22414                           ;doprnt.c: 1469: }
 22415                           ;doprnt.c: 1472: prec = c;
 22416  0020B6  C027  F01D         	movff	i2printf@c,i2printf@prec
 22417                           
 22418                           ;doprnt.c: 1474: while(prec--) {
 22419  0020BA  D027               	goto	i2l6604
 22420  0020BC                     i2l6600:
 22421                           
 22422                           ;doprnt.c: 1478: {
 22423                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22424  0020BC  501D               	movf	i2printf@prec,w,c
 22425  0020BE  0D02               	mullw	2
 22426  0020C0  0EFC               	movlw	low _dpowers
 22427  0020C2  24F3               	addwf	prodl,w,c
 22428  0020C4  6EF6               	movwf	tblptrl,c
 22429  0020C6  0EFA               	movlw	high _dpowers
 22430  0020C8  20F4               	addwfc	prodh,w,c
 22431  0020CA  6EF7               	movwf	tblptrh,c
 22432  0020CC                     	if	1	;There are 3 active tblptr bytes
 22433  0020CC  6AF8               	clrf	tblptru,c
 22434  0020CE  0E00               	movlw	low (__mediumconst shr (0+16))
 22435  0020D0  22F8               	addwfc	tblptru,f,c
 22436  0020D2                     	endif
 22437  0020D2  0009               	tblrd		*+
 22438  0020D4  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 22439  0020D8  000A               	tblrd		*-
 22440  0020DA  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 22441  0020DE  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 22442  0020E2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22443  0020E6  ECA0  F025         	call	i2___lwdiv	;wreg free
 22444  0020EA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 22445  0020EE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22446  0020F2  0E00               	movlw	0
 22447  0020F4  6E04               	movwf	i2___lwmod@divisor+1,c
 22448  0020F6  0E0A               	movlw	10
 22449  0020F8  6E03               	movwf	i2___lwmod@divisor,c
 22450  0020FA  EC5F  F026         	call	i2___lwmod	;wreg free
 22451  0020FE  5001               	movf	?i2___lwmod,w,c
 22452  002100  0F30               	addlw	48
 22453  002102  6E27               	movwf	i2printf@c,c
 22454                           
 22455                           ;doprnt.c: 1523: }
 22456                           ;doprnt.c: 1524: (putch(c) );
 22457  002104  5027               	movf	i2printf@c,w,c
 22458  002106  EC65  F029         	call	i2_putch
 22459  00210A                     i2l6604:
 22460  00210A  061D               	decf	i2printf@prec,f,c
 22461  00210C  281D               	incf	i2printf@prec,w,c
 22462  00210E  A4D8               	btfss	status,2,c
 22463  002110  D7D5               	goto	i2l6600
 22464  002112                     i2l6606:
 22465  002112  C00D  FFF6         	movff	i2printf@f,tblptrl
 22466  002116  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22467  00211A  4A0D               	infsnz	i2printf@f,f,c
 22468  00211C  2A0E               	incf	i2printf@f+1,f,c
 22469  00211E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22470  00211E  6AF8               	clrf	tblptru,c
 22471  002120                     	endif
 22472  002120                     	if	0	;tblptru may be non-zero
 22473  002120                     	endif
 22474  002120  0008               	tblrd		*
 22475  002122  CFF5 F027          	movff	tablat,i2printf@c
 22476  002126  5027               	movf	i2printf@c,w,c
 22477  002128  B4D8               	btfsc	status,2,c
 22478  00212A  0012               	return	
 22479  00212C  D64E               	goto	i2l6476
 22480  00212E                     __end_ofi2_printf:
 22481                           	opt stack 0
 22482                           pclatu	equ	0xFFB
 22483                           pclath	equ	0xFFA
 22484                           tblptru	equ	0xFF8
 22485                           tblptrh	equ	0xFF7
 22486                           tblptrl	equ	0xFF6
 22487                           tablat	equ	0xFF5
 22488                           prodh	equ	0xFF4
 22489                           prodl	equ	0xFF3
 22490                           intcon	equ	0xFF2
 22491                           intcon2	equ	0xFF1
 22492                           intcon3	equ	0xFF0
 22493                           indf0	equ	0xFEF
 22494                           postinc0	equ	0xFEE
 22495                           fsr0h	equ	0xFEA
 22496                           fsr0l	equ	0xFE9
 22497                           wreg	equ	0xFE8
 22498                           postdec1	equ	0xFE5
 22499                           fsr1h	equ	0xFE2
 22500                           fsr1l	equ	0xFE1
 22501                           indf2	equ	0xFDF
 22502                           postinc2	equ	0xFDE
 22503                           postdec2	equ	0xFDD
 22504                           fsr2h	equ	0xFDA
 22505                           fsr2l	equ	0xFD9
 22506                           status	equ	0xFD8
 22507                           
 22508 ;; *************** function i2_putch *****************
 22509 ;; Defined at:
 22510 ;;		line 20 in file "lcd.c"
 22511 ;; Parameters:    Size  Location     Type
 22512 ;;  data            1    wreg     unsigned char 
 22513 ;; Auto vars:     Size  Location     Type
 22514 ;;  data            1    2[COMRAM] unsigned char 
 22515 ;; Return value:  Size  Location     Type
 22516 ;;                  1    wreg      void 
 22517 ;; Registers used:
 22518 ;;		wreg, status,2, status,0, cstack
 22519 ;; Tracked objects:
 22520 ;;		On entry : 0/0
 22521 ;;		On exit  : 0/0
 22522 ;;		Unchanged: 0/0
 22523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22528 ;;Total ram usage:        1 bytes
 22529 ;; Hardware stack levels used:    1
 22530 ;; Hardware stack levels required when called:    1
 22531 ;; This function calls:
 22532 ;;		i2_lcdNibble
 22533 ;; This function is called by:
 22534 ;;		i2_printf
 22535 ;; This function uses a non-reentrant model
 22536 ;;
 22537                           
 22538                           	psect	text82
 22539  0052CA                     __ptext82:
 22540                           	opt stack 0
 22541  0052CA                     i2_putch:
 22542                           	opt stack 20
 22543                           
 22544                           ;incstack = 0
 22545                           ;i2putch@data stored from wreg
 22546  0052CA  6E03               	movwf	i2putch@data,c
 22547                           
 22548                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 22549  0052CC  848C               	bsf	3980,2,c	;volatile
 22550                           
 22551                           ;lcd.c: 22: lcdNibble(data);
 22552  0052CE  5003               	movf	i2putch@data,w,c
 22553  0052D0  EC75  F025         	call	i2_lcdNibble
 22554  0052D4  0012               	return		;funcret
 22555  0052D6                     __end_ofi2_putch:
 22556                           	opt stack 0
 22557                           pclatu	equ	0xFFB
 22558                           pclath	equ	0xFFA
 22559                           tblptru	equ	0xFF8
 22560                           tblptrh	equ	0xFF7
 22561                           tblptrl	equ	0xFF6
 22562                           tablat	equ	0xFF5
 22563                           prodh	equ	0xFF4
 22564                           prodl	equ	0xFF3
 22565                           intcon	equ	0xFF2
 22566                           intcon2	equ	0xFF1
 22567                           intcon3	equ	0xFF0
 22568                           indf0	equ	0xFEF
 22569                           postinc0	equ	0xFEE
 22570                           fsr0h	equ	0xFEA
 22571                           fsr0l	equ	0xFE9
 22572                           wreg	equ	0xFE8
 22573                           postdec1	equ	0xFE5
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           fsr2h	equ	0xFDA
 22580                           fsr2l	equ	0xFD9
 22581                           status	equ	0xFD8
 22582                           
 22583 ;; *************** function i2_isdigit *****************
 22584 ;; Defined at:
 22585 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 22586 ;; Parameters:    Size  Location     Type
 22587 ;;  c               1    wreg     unsigned char 
 22588 ;; Auto vars:     Size  Location     Type
 22589 ;;  c               1    2[COMRAM] unsigned char 
 22590 ;; Return value:  Size  Location     Type
 22591 ;;		None               void
 22592 ;; Registers used:
 22593 ;;		wreg, status,2, status,0
 22594 ;; Tracked objects:
 22595 ;;		On entry : 0/0
 22596 ;;		On exit  : 0/0
 22597 ;;		Unchanged: 0/0
 22598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22603 ;;Total ram usage:        3 bytes
 22604 ;; Hardware stack levels used:    1
 22605 ;; This function calls:
 22606 ;;		Nothing
 22607 ;; This function is called by:
 22608 ;;		i2_printf
 22609 ;; This function uses a non-reentrant model
 22610 ;;
 22611                           
 22612                           	psect	text83
 22613  005202                     __ptext83:
 22614                           	opt stack 0
 22615  005202                     i2_isdigit:
 22616                           	opt stack 21
 22617                           
 22618                           ;incstack = 0
 22619                           ;i2isdigit@c stored from wreg
 22620  005202  6E03               	movwf	i2isdigit@c,c
 22621  005204  0E00               	movlw	0
 22622  005206  6E02               	movwf	i2_isdigit$2058,c
 22623  005208  0E3A               	movlw	58
 22624  00520A  6003               	cpfslt	i2isdigit@c,c
 22625  00520C  D005               	goto	i2l6176
 22626  00520E  0E2F               	movlw	47
 22627  005210  6403               	cpfsgt	i2isdigit@c,c
 22628  005212  D002               	goto	i2l6176
 22629  005214  0E01               	movlw	1
 22630  005216  6E02               	movwf	i2_isdigit$2058,c
 22631  005218                     i2l6176:
 22632  005218  C002  F001         	movff	i2_isdigit$2058,??i2_isdigit
 22633  00521C  3001               	rrcf	??i2_isdigit,w,c
 22634  00521E  0012               	return	
 22635  005220                     __end_ofi2_isdigit:
 22636                           	opt stack 0
 22637                           pclatu	equ	0xFFB
 22638                           pclath	equ	0xFFA
 22639                           tblptru	equ	0xFF8
 22640                           tblptrh	equ	0xFF7
 22641                           tblptrl	equ	0xFF6
 22642                           tablat	equ	0xFF5
 22643                           prodh	equ	0xFF4
 22644                           prodl	equ	0xFF3
 22645                           intcon	equ	0xFF2
 22646                           intcon2	equ	0xFF1
 22647                           intcon3	equ	0xFF0
 22648                           indf0	equ	0xFEF
 22649                           postinc0	equ	0xFEE
 22650                           fsr0h	equ	0xFEA
 22651                           fsr0l	equ	0xFE9
 22652                           wreg	equ	0xFE8
 22653                           postdec1	equ	0xFE5
 22654                           fsr1h	equ	0xFE2
 22655                           fsr1l	equ	0xFE1
 22656                           indf2	equ	0xFDF
 22657                           postinc2	equ	0xFDE
 22658                           postdec2	equ	0xFDD
 22659                           fsr2h	equ	0xFDA
 22660                           fsr2l	equ	0xFD9
 22661                           status	equ	0xFD8
 22662                           
 22663 ;; *************** function i2___wmul *****************
 22664 ;; Defined at:
 22665 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 22666 ;; Parameters:    Size  Location     Type
 22667 ;;  multiplier      2    0[COMRAM] unsigned int 
 22668 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22669 ;; Auto vars:     Size  Location     Type
 22670 ;;  __wmul          2    4[COMRAM] unsigned int 
 22671 ;; Return value:  Size  Location     Type
 22672 ;;                  2    0[COMRAM] unsigned int 
 22673 ;; Registers used:
 22674 ;;		wreg, status,2, status,0, prodl, prodh
 22675 ;; Tracked objects:
 22676 ;;		On entry : 0/0
 22677 ;;		On exit  : 0/0
 22678 ;;		Unchanged: 0/0
 22679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22683 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22684 ;;Total ram usage:        6 bytes
 22685 ;; Hardware stack levels used:    1
 22686 ;; This function calls:
 22687 ;;		Nothing
 22688 ;; This function is called by:
 22689 ;;		_printSortTimer
 22690 ;;		_retrieveLog
 22691 ;;		i2_printf
 22692 ;; This function uses a non-reentrant model
 22693 ;;
 22694                           
 22695                           	psect	text84
 22696  00514E                     __ptext84:
 22697                           	opt stack 0
 22698  00514E                     i2___wmul:
 22699                           	opt stack 21
 22700                           
 22701                           ;incstack = 0
 22702  00514E  5001               	movf	i2___wmul@multiplier,w,c
 22703  005150  0203               	mulwf	i2___wmul@multiplicand,c
 22704  005152  CFF3 F005          	movff	prodl,i2___wmul@product
 22705  005156  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22706  00515A  5001               	movf	i2___wmul@multiplier,w,c
 22707  00515C  0204               	mulwf	i2___wmul@multiplicand+1,c
 22708  00515E  50F3               	movf	prodl,w,c
 22709  005160  2606               	addwf	i2___wmul@product+1,f,c
 22710  005162  5002               	movf	i2___wmul@multiplier+1,w,c
 22711  005164  0203               	mulwf	i2___wmul@multiplicand,c
 22712  005166  50F3               	movf	prodl,w,c
 22713  005168  2606               	addwf	i2___wmul@product+1,f,c
 22714  00516A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22715  00516E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22716  005172  0012               	return	
 22717  005174                     __end_ofi2___wmul:
 22718                           	opt stack 0
 22719                           pclatu	equ	0xFFB
 22720                           pclath	equ	0xFFA
 22721                           tblptru	equ	0xFF8
 22722                           tblptrh	equ	0xFF7
 22723                           tblptrl	equ	0xFF6
 22724                           tablat	equ	0xFF5
 22725                           prodh	equ	0xFF4
 22726                           prodl	equ	0xFF3
 22727                           intcon	equ	0xFF2
 22728                           intcon2	equ	0xFF1
 22729                           intcon3	equ	0xFF0
 22730                           indf0	equ	0xFEF
 22731                           postinc0	equ	0xFEE
 22732                           fsr0h	equ	0xFEA
 22733                           fsr0l	equ	0xFE9
 22734                           wreg	equ	0xFE8
 22735                           postdec1	equ	0xFE5
 22736                           fsr1h	equ	0xFE2
 22737                           fsr1l	equ	0xFE1
 22738                           indf2	equ	0xFDF
 22739                           postinc2	equ	0xFDE
 22740                           postdec2	equ	0xFDD
 22741                           fsr2h	equ	0xFDA
 22742                           fsr2l	equ	0xFD9
 22743                           status	equ	0xFD8
 22744                           
 22745 ;; *************** function i2___lwmod *****************
 22746 ;; Defined at:
 22747 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 22748 ;; Parameters:    Size  Location     Type
 22749 ;;  dividend        2    0[COMRAM] unsigned int 
 22750 ;;  divisor         2    2[COMRAM] unsigned int 
 22751 ;; Auto vars:     Size  Location     Type
 22752 ;;  __lwmod         1    4[COMRAM] unsigned char 
 22753 ;; Return value:  Size  Location     Type
 22754 ;;                  2    0[COMRAM] unsigned int 
 22755 ;; Registers used:
 22756 ;;		wreg, status,2, status,0
 22757 ;; Tracked objects:
 22758 ;;		On entry : 0/0
 22759 ;;		On exit  : 0/0
 22760 ;;		Unchanged: 0/0
 22761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22765 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22766 ;;Total ram usage:        5 bytes
 22767 ;; Hardware stack levels used:    1
 22768 ;; This function calls:
 22769 ;;		Nothing
 22770 ;; This function is called by:
 22771 ;;		_printSortTimer
 22772 ;;		i2_printf
 22773 ;; This function uses a non-reentrant model
 22774 ;;
 22775                           
 22776                           	psect	text85
 22777  004CBE                     __ptext85:
 22778                           	opt stack 0
 22779  004CBE                     i2___lwmod:
 22780                           	opt stack 21
 22781                           
 22782                           ;incstack = 0
 22783  004CBE  5003               	movf	i2___lwmod@divisor,w,c
 22784  004CC0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 22785  004CC2  B4D8               	btfsc	status,2,c
 22786  004CC4  D018               	goto	i2l1863
 22787  004CC6  0E01               	movlw	1
 22788  004CC8  6E05               	movwf	i2___lwmod@counter,c
 22789  004CCA  D004               	goto	i2l6208
 22790  004CCC                     i2l6206:
 22791  004CCC  90D8               	bcf	status,0,c
 22792  004CCE  3603               	rlcf	i2___lwmod@divisor,f,c
 22793  004CD0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 22794  004CD2  2A05               	incf	i2___lwmod@counter,f,c
 22795  004CD4                     i2l6208:
 22796  004CD4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 22797  004CD6  D7FA               	goto	i2l6206
 22798  004CD8                     i2l6210:
 22799  004CD8  5003               	movf	i2___lwmod@divisor,w,c
 22800  004CDA  5C01               	subwf	i2___lwmod@dividend,w,c
 22801  004CDC  5004               	movf	i2___lwmod@divisor+1,w,c
 22802  004CDE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 22803  004CE0  A0D8               	btfss	status,0,c
 22804  004CE2  D004               	goto	i2l6214
 22805  004CE4  5003               	movf	i2___lwmod@divisor,w,c
 22806  004CE6  5E01               	subwf	i2___lwmod@dividend,f,c
 22807  004CE8  5004               	movf	i2___lwmod@divisor+1,w,c
 22808  004CEA  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 22809  004CEC                     i2l6214:
 22810  004CEC  90D8               	bcf	status,0,c
 22811  004CEE  3204               	rrcf	i2___lwmod@divisor+1,f,c
 22812  004CF0  3203               	rrcf	i2___lwmod@divisor,f,c
 22813  004CF2  2E05               	decfsz	i2___lwmod@counter,f,c
 22814  004CF4  D7F1               	goto	i2l6210
 22815  004CF6                     i2l1863:
 22816  004CF6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 22817  004CFA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22818  004CFE  0012               	return		;funcret
 22819  004D00                     __end_ofi2___lwmod:
 22820                           	opt stack 0
 22821                           pclatu	equ	0xFFB
 22822                           pclath	equ	0xFFA
 22823                           tblptru	equ	0xFF8
 22824                           tblptrh	equ	0xFF7
 22825                           tblptrl	equ	0xFF6
 22826                           tablat	equ	0xFF5
 22827                           prodh	equ	0xFF4
 22828                           prodl	equ	0xFF3
 22829                           intcon	equ	0xFF2
 22830                           intcon2	equ	0xFF1
 22831                           intcon3	equ	0xFF0
 22832                           indf0	equ	0xFEF
 22833                           postinc0	equ	0xFEE
 22834                           fsr0h	equ	0xFEA
 22835                           fsr0l	equ	0xFE9
 22836                           wreg	equ	0xFE8
 22837                           postdec1	equ	0xFE5
 22838                           fsr1h	equ	0xFE2
 22839                           fsr1l	equ	0xFE1
 22840                           indf2	equ	0xFDF
 22841                           postinc2	equ	0xFDE
 22842                           postdec2	equ	0xFDD
 22843                           fsr2h	equ	0xFDA
 22844                           fsr2l	equ	0xFD9
 22845                           status	equ	0xFD8
 22846                           
 22847 ;; *************** function i2___lwdiv *****************
 22848 ;; Defined at:
 22849 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 22850 ;; Parameters:    Size  Location     Type
 22851 ;;  dividend        2    5[COMRAM] unsigned int 
 22852 ;;  divisor         2    7[COMRAM] unsigned int 
 22853 ;; Auto vars:     Size  Location     Type
 22854 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 22855 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 22856 ;; Return value:  Size  Location     Type
 22857 ;;                  2    5[COMRAM] unsigned int 
 22858 ;; Registers used:
 22859 ;;		wreg, status,2, status,0
 22860 ;; Tracked objects:
 22861 ;;		On entry : 0/0
 22862 ;;		On exit  : 0/0
 22863 ;;		Unchanged: 0/0
 22864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22869 ;;Total ram usage:        7 bytes
 22870 ;; Hardware stack levels used:    1
 22871 ;; This function calls:
 22872 ;;		Nothing
 22873 ;; This function is called by:
 22874 ;;		_printSortTimer
 22875 ;;		i2_printf
 22876 ;; This function uses a non-reentrant model
 22877 ;;
 22878                           
 22879                           	psect	text86
 22880  004B40                     __ptext86:
 22881                           	opt stack 0
 22882  004B40                     i2___lwdiv:
 22883                           	opt stack 21
 22884                           
 22885                           ;incstack = 0
 22886  004B40  0E00               	movlw	0
 22887  004B42  6E0B               	movwf	i2___lwdiv@quotient+1,c
 22888  004B44  0E00               	movlw	0
 22889  004B46  6E0A               	movwf	i2___lwdiv@quotient,c
 22890  004B48  5008               	movf	i2___lwdiv@divisor,w,c
 22891  004B4A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 22892  004B4C  B4D8               	btfsc	status,2,c
 22893  004B4E  D01C               	goto	i2l1853
 22894  004B50  0E01               	movlw	1
 22895  004B52  6E0C               	movwf	i2___lwdiv@counter,c
 22896  004B54  D004               	goto	i2l6188
 22897  004B56                     i2l6186:
 22898  004B56  90D8               	bcf	status,0,c
 22899  004B58  3608               	rlcf	i2___lwdiv@divisor,f,c
 22900  004B5A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 22901  004B5C  2A0C               	incf	i2___lwdiv@counter,f,c
 22902  004B5E                     i2l6188:
 22903  004B5E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 22904  004B60  D7FA               	goto	i2l6186
 22905  004B62                     i2l6190:
 22906  004B62  90D8               	bcf	status,0,c
 22907  004B64  360A               	rlcf	i2___lwdiv@quotient,f,c
 22908  004B66  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 22909  004B68  5008               	movf	i2___lwdiv@divisor,w,c
 22910  004B6A  5C06               	subwf	i2___lwdiv@dividend,w,c
 22911  004B6C  5009               	movf	i2___lwdiv@divisor+1,w,c
 22912  004B6E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 22913  004B70  A0D8               	btfss	status,0,c
 22914  004B72  D005               	goto	i2l6198
 22915  004B74  5008               	movf	i2___lwdiv@divisor,w,c
 22916  004B76  5E06               	subwf	i2___lwdiv@dividend,f,c
 22917  004B78  5009               	movf	i2___lwdiv@divisor+1,w,c
 22918  004B7A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 22919  004B7C  800A               	bsf	i2___lwdiv@quotient,0,c
 22920  004B7E                     i2l6198:
 22921  004B7E  90D8               	bcf	status,0,c
 22922  004B80  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 22923  004B82  3208               	rrcf	i2___lwdiv@divisor,f,c
 22924  004B84  2E0C               	decfsz	i2___lwdiv@counter,f,c
 22925  004B86  D7ED               	goto	i2l6190
 22926  004B88                     i2l1853:
 22927  004B88  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22928  004B8C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22929  004B90  0012               	return		;funcret
 22930  004B92                     __end_ofi2___lwdiv:
 22931                           	opt stack 0
 22932                           pclatu	equ	0xFFB
 22933                           pclath	equ	0xFFA
 22934                           tblptru	equ	0xFF8
 22935                           tblptrh	equ	0xFF7
 22936                           tblptrl	equ	0xFF6
 22937                           tablat	equ	0xFF5
 22938                           prodh	equ	0xFF4
 22939                           prodl	equ	0xFF3
 22940                           intcon	equ	0xFF2
 22941                           intcon2	equ	0xFF1
 22942                           intcon3	equ	0xFF0
 22943                           indf0	equ	0xFEF
 22944                           postinc0	equ	0xFEE
 22945                           fsr0h	equ	0xFEA
 22946                           fsr0l	equ	0xFE9
 22947                           wreg	equ	0xFE8
 22948                           postdec1	equ	0xFE5
 22949                           fsr1h	equ	0xFE2
 22950                           fsr1l	equ	0xFE1
 22951                           indf2	equ	0xFDF
 22952                           postinc2	equ	0xFDE
 22953                           postdec2	equ	0xFDD
 22954                           fsr2h	equ	0xFDA
 22955                           fsr2l	equ	0xFD9
 22956                           status	equ	0xFD8
 22957                           
 22958 ;; *************** function i2_lcdInst *****************
 22959 ;; Defined at:
 22960 ;;		line 15 in file "lcd.c"
 22961 ;; Parameters:    Size  Location     Type
 22962 ;;  data            1    wreg     unsigned char 
 22963 ;; Auto vars:     Size  Location     Type
 22964 ;;  data            1    2[COMRAM] unsigned char 
 22965 ;; Return value:  Size  Location     Type
 22966 ;;                  1    wreg      void 
 22967 ;; Registers used:
 22968 ;;		wreg, status,2, status,0, cstack
 22969 ;; Tracked objects:
 22970 ;;		On entry : 0/0
 22971 ;;		On exit  : 0/0
 22972 ;;		Unchanged: 0/0
 22973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22978 ;;Total ram usage:        1 bytes
 22979 ;; Hardware stack levels used:    1
 22980 ;; Hardware stack levels required when called:    1
 22981 ;; This function calls:
 22982 ;;		i2_lcdNibble
 22983 ;; This function is called by:
 22984 ;;		_change_state_to_menu_11
 22985 ;;		_change_state_to_menu_23
 22986 ;;		_change_state_to_logs_11
 22987 ;;		_change_state_to_logs_12
 22988 ;;		_change_state_to_logs_22
 22989 ;;		_change_state_to_logs_23
 22990 ;;		_change_state_to_logs_33
 22991 ;;		_change_state_to_logs_34
 22992 ;;		_printSortTimer
 22993 ;;		_updateServoStates
 22994 ;;		i2_change_state_to_menu_start
 22995 ;;		i2_change_state_to_menu_12
 22996 ;;		i2_change_state_to_menu_22
 22997 ;;		i2_printRTC
 22998 ;; This function uses a non-reentrant model
 22999 ;;
 23000                           
 23001                           	psect	text87
 23002  0052D6                     __ptext87:
 23003                           	opt stack 0
 23004  0052D6                     i2_lcdInst:
 23005                           	opt stack 21
 23006                           
 23007                           ;incstack = 0
 23008                           ;i2lcdInst@data stored from wreg
 23009  0052D6  6E03               	movwf	i2lcdInst@data,c
 23010                           
 23011                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 23012  0052D8  948C               	bcf	3980,2,c	;volatile
 23013                           
 23014                           ;lcd.c: 17: lcdNibble(data);
 23015  0052DA  5003               	movf	i2lcdInst@data,w,c
 23016  0052DC  EC75  F025         	call	i2_lcdNibble
 23017  0052E0  0012               	return		;funcret
 23018  0052E2                     __end_ofi2_lcdInst:
 23019                           	opt stack 0
 23020                           pclatu	equ	0xFFB
 23021                           pclath	equ	0xFFA
 23022                           tblptru	equ	0xFF8
 23023                           tblptrh	equ	0xFF7
 23024                           tblptrl	equ	0xFF6
 23025                           tablat	equ	0xFF5
 23026                           prodh	equ	0xFF4
 23027                           prodl	equ	0xFF3
 23028                           intcon	equ	0xFF2
 23029                           intcon2	equ	0xFF1
 23030                           intcon3	equ	0xFF0
 23031                           indf0	equ	0xFEF
 23032                           postinc0	equ	0xFEE
 23033                           fsr0h	equ	0xFEA
 23034                           fsr0l	equ	0xFE9
 23035                           wreg	equ	0xFE8
 23036                           postdec1	equ	0xFE5
 23037                           fsr1h	equ	0xFE2
 23038                           fsr1l	equ	0xFE1
 23039                           indf2	equ	0xFDF
 23040                           postinc2	equ	0xFDE
 23041                           postdec2	equ	0xFDD
 23042                           fsr2h	equ	0xFDA
 23043                           fsr2l	equ	0xFD9
 23044                           status	equ	0xFD8
 23045                           
 23046 ;; *************** function i2_lcdNibble *****************
 23047 ;; Defined at:
 23048 ;;		line 25 in file "lcd.c"
 23049 ;; Parameters:    Size  Location     Type
 23050 ;;  data            1    wreg     unsigned char 
 23051 ;; Auto vars:     Size  Location     Type
 23052 ;;  data            1    1[COMRAM] unsigned char 
 23053 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 23054 ;; Return value:  Size  Location     Type
 23055 ;;                  1    wreg      void 
 23056 ;; Registers used:
 23057 ;;		wreg, status,2, status,0
 23058 ;; Tracked objects:
 23059 ;;		On entry : 0/0
 23060 ;;		On exit  : 0/0
 23061 ;;		Unchanged: 0/0
 23062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23067 ;;Total ram usage:        2 bytes
 23068 ;; Hardware stack levels used:    1
 23069 ;; This function calls:
 23070 ;;		Nothing
 23071 ;; This function is called by:
 23072 ;;		i2_lcdInst
 23073 ;;		i2_putch
 23074 ;; This function uses a non-reentrant model
 23075 ;;
 23076                           
 23077                           	psect	text88
 23078  004AEA                     __ptext88:
 23079                           	opt stack 0
 23080  004AEA                     i2_lcdNibble:
 23081                           	opt stack 20
 23082                           
 23083                           ;incstack = 0
 23084                           ;i2lcdNibble@data stored from wreg
 23085  004AEA  6E02               	movwf	i2lcdNibble@data,c
 23086                           
 23087                           ;lcd.c: 27: char temp = data & 0xF0;
 23088  004AEC  5002               	movf	i2lcdNibble@data,w,c
 23089  004AEE  0BF0               	andlw	240
 23090  004AF0  6E01               	movwf	i2lcdNibble@temp,c
 23091                           
 23092                           ;lcd.c: 28: LATD = LATD & 0x0F;
 23093  004AF2  508C               	movf	3980,w,c	;volatile
 23094  004AF4  0B0F               	andlw	15
 23095  004AF6  6E8C               	movwf	3980,c	;volatile
 23096                           
 23097                           ;lcd.c: 29: LATD = temp | LATD;
 23098  004AF8  5001               	movf	i2lcdNibble@temp,w,c
 23099  004AFA  108C               	iorwf	3980,w,c	;volatile
 23100  004AFC  6E8C               	movwf	3980,c	;volatile
 23101                           
 23102                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 23103  004AFE  868C               	bsf	3980,3,c	;volatile
 23104                           
 23105                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23106  004B00  0E42               	movlw	66
 23107  004B02                     i2u1006_47:
 23108  004B02  2EE8               	decfsz	wreg,f,c
 23109  004B04  D7FE               	bra	i2u1006_47
 23110  004B06  D000               	nop2	
 23111                           
 23112                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 23113  004B08  968C               	bcf	3980,3,c	;volatile
 23114                           
 23115                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23116  004B0A  0E42               	movlw	66
 23117  004B0C                     i2u1007_47:
 23118  004B0C  2EE8               	decfsz	wreg,f,c
 23119  004B0E  D7FE               	bra	i2u1007_47
 23120  004B10  D000               	nop2	
 23121                           
 23122                           ;lcd.c: 36: data = data << 4;
 23123  004B12  3802               	swapf	i2lcdNibble@data,w,c
 23124  004B14  0BF0               	andlw	240
 23125  004B16  6E02               	movwf	i2lcdNibble@data,c
 23126                           
 23127                           ;lcd.c: 38: temp = data & 0xF0;
 23128  004B18  5002               	movf	i2lcdNibble@data,w,c
 23129  004B1A  0BF0               	andlw	240
 23130  004B1C  6E01               	movwf	i2lcdNibble@temp,c
 23131                           
 23132                           ;lcd.c: 39: LATD = LATD & 0x0F;
 23133  004B1E  508C               	movf	3980,w,c	;volatile
 23134  004B20  0B0F               	andlw	15
 23135  004B22  6E8C               	movwf	3980,c	;volatile
 23136                           
 23137                           ;lcd.c: 40: LATD = temp | LATD;
 23138  004B24  5001               	movf	i2lcdNibble@temp,w,c
 23139  004B26  108C               	iorwf	3980,w,c	;volatile
 23140  004B28  6E8C               	movwf	3980,c	;volatile
 23141                           
 23142                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 23143  004B2A  868C               	bsf	3980,3,c	;volatile
 23144                           
 23145                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23146  004B2C  0E42               	movlw	66
 23147  004B2E                     i2u1008_47:
 23148  004B2E  2EE8               	decfsz	wreg,f,c
 23149  004B30  D7FE               	bra	i2u1008_47
 23150  004B32  D000               	nop2	
 23151                           
 23152                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 23153  004B34  968C               	bcf	3980,3,c	;volatile
 23154                           
 23155                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 23156  004B36  0E42               	movlw	66
 23157  004B38                     i2u1009_47:
 23158  004B38  2EE8               	decfsz	wreg,f,c
 23159  004B3A  D7FE               	bra	i2u1009_47
 23160  004B3C  D000               	nop2	
 23161  004B3E  0012               	return		;funcret
 23162  004B40                     __end_ofi2_lcdNibble:
 23163                           	opt stack 0
 23164                           pclatu	equ	0xFFB
 23165                           pclath	equ	0xFFA
 23166                           tblptru	equ	0xFF8
 23167                           tblptrh	equ	0xFF7
 23168                           tblptrl	equ	0xFF6
 23169                           tablat	equ	0xFF5
 23170                           prodh	equ	0xFF4
 23171                           prodl	equ	0xFF3
 23172                           intcon	equ	0xFF2
 23173                           intcon2	equ	0xFF1
 23174                           intcon3	equ	0xFF0
 23175                           indf0	equ	0xFEF
 23176                           postinc0	equ	0xFEE
 23177                           fsr0h	equ	0xFEA
 23178                           fsr0l	equ	0xFE9
 23179                           wreg	equ	0xFE8
 23180                           postdec1	equ	0xFE5
 23181                           fsr1h	equ	0xFE2
 23182                           fsr1l	equ	0xFE1
 23183                           indf2	equ	0xFDF
 23184                           postinc2	equ	0xFDE
 23185                           postdec2	equ	0xFDD
 23186                           fsr2h	equ	0xFDA
 23187                           fsr2l	equ	0xFD9
 23188                           status	equ	0xFD8
 23189                           
 23190 ;; *************** function i2_getRTC *****************
 23191 ;; Defined at:
 23192 ;;		line 44 in file "RTC.c"
 23193 ;; Parameters:    Size  Location     Type
 23194 ;;		None
 23195 ;; Auto vars:     Size  Location     Type
 23196 ;;  getRTC          2    3[COMRAM] int 
 23197 ;; Return value:  Size  Location     Type
 23198 ;;                  1    wreg      void 
 23199 ;; Registers used:
 23200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23201 ;; Tracked objects:
 23202 ;;		On entry : 0/0
 23203 ;;		On exit  : 0/0
 23204 ;;		Unchanged: 0/0
 23205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23209 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23210 ;;Total ram usage:        2 bytes
 23211 ;; Hardware stack levels used:    1
 23212 ;; Hardware stack levels required when called:    2
 23213 ;; This function calls:
 23214 ;;		i2_I2C_Master_Read
 23215 ;;		i2_I2C_Master_Start
 23216 ;;		i2_I2C_Master_Stop
 23217 ;;		i2_I2C_Master_Write
 23218 ;; This function is called by:
 23219 ;;		_printSortTimer
 23220 ;;		i2_printRTC
 23221 ;; This function uses a non-reentrant model
 23222 ;;
 23223                           
 23224                           	psect	text89
 23225  0047CC                     __ptext89:
 23226                           	opt stack 0
 23227  0047CC                     i2_getRTC:
 23228                           	opt stack 18
 23229                           
 23230                           ;RTC.c: 48: I2C_Master_Start();
 23231                           
 23232                           ;incstack = 0
 23233  0047CC  EC8B  F029         	call	i2_I2C_Master_Start	;wreg free
 23234                           
 23235                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 23236  0047D0  0E00               	movlw	0
 23237  0047D2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23238  0047D4  0ED0               	movlw	208
 23239  0047D6  6E02               	movwf	i2I2C_Master_Write@d,c
 23240  0047D8  EC76  F029         	call	i2_I2C_Master_Write	;wreg free
 23241                           
 23242                           ;RTC.c: 50: I2C_Master_Write(0x00);
 23243  0047DC  0E00               	movlw	0
 23244  0047DE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23245  0047E0  0E00               	movlw	0
 23246  0047E2  6E02               	movwf	i2I2C_Master_Write@d,c
 23247  0047E4  EC76  F029         	call	i2_I2C_Master_Write	;wreg free
 23248                           
 23249                           ;RTC.c: 51: I2C_Master_Stop();
 23250  0047E8  EC87  F029         	call	i2_I2C_Master_Stop	;wreg free
 23251                           
 23252                           ;RTC.c: 54: I2C_Master_Start();
 23253  0047EC  EC8B  F029         	call	i2_I2C_Master_Start	;wreg free
 23254                           
 23255                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 23256  0047F0  0E00               	movlw	0
 23257  0047F2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 23258  0047F4  0ED1               	movlw	209
 23259  0047F6  6E02               	movwf	i2I2C_Master_Write@d,c
 23260  0047F8  EC76  F029         	call	i2_I2C_Master_Write	;wreg free
 23261                           
 23262                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 23263  0047FC  0E00               	movlw	0
 23264  0047FE  6E05               	movwf	i2getRTC@i+1,c
 23265  004800  0E00               	movlw	0
 23266  004802  6E04               	movwf	i2getRTC@i,c
 23267  004804                     i2l6448:
 23268  004804  BE05               	btfsc	i2getRTC@i+1,7,c
 23269  004806  D006               	goto	i2l6452
 23270  004808  5005               	movf	i2getRTC@i+1,w,c
 23271  00480A  E111               	bnz	i2l6458
 23272  00480C  0E06               	movlw	6
 23273  00480E  5C04               	subwf	i2getRTC@i,w,c
 23274  004810  B0D8               	btfsc	status,0,c
 23275  004812  D00D               	goto	i2l6458
 23276  004814                     i2l6452:
 23277                           
 23278                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 23279  004814  0E1C               	movlw	low _time
 23280  004816  2404               	addwf	i2getRTC@i,w,c
 23281  004818  6ED9               	movwf	fsr2l,c
 23282  00481A  0E01               	movlw	high _time
 23283  00481C  2005               	addwfc	i2getRTC@i+1,w,c
 23284  00481E  6EDA               	movwf	fsr2h,c
 23285  004820  0E01               	movlw	1
 23286  004822  ECBA  F028         	call	i2_I2C_Master_Read
 23287  004826  6EDF               	movwf	indf2,c
 23288  004828  4A04               	infsnz	i2getRTC@i,f,c
 23289  00482A  2A05               	incf	i2getRTC@i+1,f,c
 23290  00482C  D7EB               	goto	i2l6448
 23291  00482E                     i2l6458:
 23292                           
 23293                           ;RTC.c: 58: }
 23294                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 23295  00482E  0E00               	movlw	0
 23296  004830  ECBA  F028         	call	i2_I2C_Master_Read
 23297  004834  0101               	movlb	1	; () banked
 23298  004836  6F22               	movwf	(_time+6)& (0+255),b
 23299                           
 23300                           ;RTC.c: 60: I2C_Master_Stop();
 23301  004838  EC87  F029         	call	i2_I2C_Master_Stop	;wreg free
 23302  00483C  0012               	return		;funcret
 23303  00483E                     __end_ofi2_getRTC:
 23304                           	opt stack 0
 23305                           pclatu	equ	0xFFB
 23306                           pclath	equ	0xFFA
 23307                           tblptru	equ	0xFF8
 23308                           tblptrh	equ	0xFF7
 23309                           tblptrl	equ	0xFF6
 23310                           tablat	equ	0xFF5
 23311                           prodh	equ	0xFF4
 23312                           prodl	equ	0xFF3
 23313                           intcon	equ	0xFF2
 23314                           intcon2	equ	0xFF1
 23315                           intcon3	equ	0xFF0
 23316                           indf0	equ	0xFEF
 23317                           postinc0	equ	0xFEE
 23318                           fsr0h	equ	0xFEA
 23319                           fsr0l	equ	0xFE9
 23320                           wreg	equ	0xFE8
 23321                           postdec1	equ	0xFE5
 23322                           fsr1h	equ	0xFE2
 23323                           fsr1l	equ	0xFE1
 23324                           indf2	equ	0xFDF
 23325                           postinc2	equ	0xFDE
 23326                           postdec2	equ	0xFDD
 23327                           fsr2h	equ	0xFDA
 23328                           fsr2l	equ	0xFD9
 23329                           status	equ	0xFD8
 23330                           
 23331 ;; *************** function i2_I2C_Master_Write *****************
 23332 ;; Defined at:
 23333 ;;		line 49 in file "I2C.c"
 23334 ;; Parameters:    Size  Location     Type
 23335 ;;  d               2    1[COMRAM] unsigned int 
 23336 ;; Auto vars:     Size  Location     Type
 23337 ;;		None
 23338 ;; Return value:  Size  Location     Type
 23339 ;;                  1    wreg      void 
 23340 ;; Registers used:
 23341 ;;		wreg, status,2, status,0, cstack
 23342 ;; Tracked objects:
 23343 ;;		On entry : 0/0
 23344 ;;		On exit  : 0/0
 23345 ;;		Unchanged: 0/0
 23346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23347 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23351 ;;Total ram usage:        2 bytes
 23352 ;; Hardware stack levels used:    1
 23353 ;; Hardware stack levels required when called:    1
 23354 ;; This function calls:
 23355 ;;		i2_I2C_Master_Wait
 23356 ;; This function is called by:
 23357 ;;		i2_getRTC
 23358 ;; This function uses a non-reentrant model
 23359 ;;
 23360                           
 23361                           	psect	text90
 23362  0052EC                     __ptext90:
 23363                           	opt stack 0
 23364  0052EC                     i2_I2C_Master_Write:
 23365                           	opt stack 18
 23366                           
 23367                           ;I2C.c: 51: I2C_Master_Wait();
 23368                           
 23369                           ;incstack = 0
 23370  0052EC  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23371                           
 23372                           ;I2C.c: 52: SSPBUF = d;
 23373  0052F0  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 23374  0052F4  0012               	return		;funcret
 23375  0052F6                     __end_ofi2_I2C_Master_Write:
 23376                           	opt stack 0
 23377                           pclatu	equ	0xFFB
 23378                           pclath	equ	0xFFA
 23379                           tblptru	equ	0xFF8
 23380                           tblptrh	equ	0xFF7
 23381                           tblptrl	equ	0xFF6
 23382                           tablat	equ	0xFF5
 23383                           prodh	equ	0xFF4
 23384                           prodl	equ	0xFF3
 23385                           intcon	equ	0xFF2
 23386                           intcon2	equ	0xFF1
 23387                           intcon3	equ	0xFF0
 23388                           indf0	equ	0xFEF
 23389                           postinc0	equ	0xFEE
 23390                           fsr0h	equ	0xFEA
 23391                           fsr0l	equ	0xFE9
 23392                           wreg	equ	0xFE8
 23393                           postdec1	equ	0xFE5
 23394                           fsr1h	equ	0xFE2
 23395                           fsr1l	equ	0xFE1
 23396                           indf2	equ	0xFDF
 23397                           postinc2	equ	0xFDE
 23398                           postdec2	equ	0xFDD
 23399                           fsr2h	equ	0xFDA
 23400                           fsr2l	equ	0xFD9
 23401                           status	equ	0xFD8
 23402                           
 23403 ;; *************** function i2_I2C_Master_Stop *****************
 23404 ;; Defined at:
 23405 ;;		line 43 in file "I2C.c"
 23406 ;; Parameters:    Size  Location     Type
 23407 ;;		None
 23408 ;; Auto vars:     Size  Location     Type
 23409 ;;		None
 23410 ;; Return value:  Size  Location     Type
 23411 ;;                  1    wreg      void 
 23412 ;; Registers used:
 23413 ;;		wreg, status,2, status,0, cstack
 23414 ;; Tracked objects:
 23415 ;;		On entry : 0/0
 23416 ;;		On exit  : 0/0
 23417 ;;		Unchanged: 0/0
 23418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23423 ;;Total ram usage:        0 bytes
 23424 ;; Hardware stack levels used:    1
 23425 ;; Hardware stack levels required when called:    1
 23426 ;; This function calls:
 23427 ;;		i2_I2C_Master_Wait
 23428 ;; This function is called by:
 23429 ;;		i2_getRTC
 23430 ;; This function uses a non-reentrant model
 23431 ;;
 23432                           
 23433                           	psect	text91
 23434  00530E                     __ptext91:
 23435                           	opt stack 0
 23436  00530E                     i2_I2C_Master_Stop:
 23437                           	opt stack 18
 23438                           
 23439                           ;I2C.c: 45: I2C_Master_Wait();
 23440                           
 23441                           ;incstack = 0
 23442  00530E  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23443                           
 23444                           ;I2C.c: 46: PEN = 1;
 23445  005312  84C5               	bsf	4037,2,c	;volatile
 23446  005314  0012               	return		;funcret
 23447  005316                     __end_ofi2_I2C_Master_Stop:
 23448                           	opt stack 0
 23449                           pclatu	equ	0xFFB
 23450                           pclath	equ	0xFFA
 23451                           tblptru	equ	0xFF8
 23452                           tblptrh	equ	0xFF7
 23453                           tblptrl	equ	0xFF6
 23454                           tablat	equ	0xFF5
 23455                           prodh	equ	0xFF4
 23456                           prodl	equ	0xFF3
 23457                           intcon	equ	0xFF2
 23458                           intcon2	equ	0xFF1
 23459                           intcon3	equ	0xFF0
 23460                           indf0	equ	0xFEF
 23461                           postinc0	equ	0xFEE
 23462                           fsr0h	equ	0xFEA
 23463                           fsr0l	equ	0xFE9
 23464                           wreg	equ	0xFE8
 23465                           postdec1	equ	0xFE5
 23466                           fsr1h	equ	0xFE2
 23467                           fsr1l	equ	0xFE1
 23468                           indf2	equ	0xFDF
 23469                           postinc2	equ	0xFDE
 23470                           postdec2	equ	0xFDD
 23471                           fsr2h	equ	0xFDA
 23472                           fsr2l	equ	0xFD9
 23473                           status	equ	0xFD8
 23474                           
 23475 ;; *************** function i2_I2C_Master_Start *****************
 23476 ;; Defined at:
 23477 ;;		line 31 in file "I2C.c"
 23478 ;; Parameters:    Size  Location     Type
 23479 ;;		None
 23480 ;; Auto vars:     Size  Location     Type
 23481 ;;		None
 23482 ;; Return value:  Size  Location     Type
 23483 ;;                  1    wreg      void 
 23484 ;; Registers used:
 23485 ;;		wreg, status,2, status,0, cstack
 23486 ;; Tracked objects:
 23487 ;;		On entry : 0/0
 23488 ;;		On exit  : 0/0
 23489 ;;		Unchanged: 0/0
 23490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23495 ;;Total ram usage:        0 bytes
 23496 ;; Hardware stack levels used:    1
 23497 ;; Hardware stack levels required when called:    1
 23498 ;; This function calls:
 23499 ;;		i2_I2C_Master_Wait
 23500 ;; This function is called by:
 23501 ;;		i2_getRTC
 23502 ;; This function uses a non-reentrant model
 23503 ;;
 23504                           
 23505                           	psect	text92
 23506  005316                     __ptext92:
 23507                           	opt stack 0
 23508  005316                     i2_I2C_Master_Start:
 23509                           	opt stack 18
 23510                           
 23511                           ;I2C.c: 33: I2C_Master_Wait();
 23512                           
 23513                           ;incstack = 0
 23514  005316  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23515                           
 23516                           ;I2C.c: 34: SEN = 1;
 23517  00531A  80C5               	bsf	4037,0,c	;volatile
 23518  00531C  0012               	return		;funcret
 23519  00531E                     __end_ofi2_I2C_Master_Start:
 23520                           	opt stack 0
 23521                           pclatu	equ	0xFFB
 23522                           pclath	equ	0xFFA
 23523                           tblptru	equ	0xFF8
 23524                           tblptrh	equ	0xFF7
 23525                           tblptrl	equ	0xFF6
 23526                           tablat	equ	0xFF5
 23527                           prodh	equ	0xFF4
 23528                           prodl	equ	0xFF3
 23529                           intcon	equ	0xFF2
 23530                           intcon2	equ	0xFF1
 23531                           intcon3	equ	0xFF0
 23532                           indf0	equ	0xFEF
 23533                           postinc0	equ	0xFEE
 23534                           fsr0h	equ	0xFEA
 23535                           fsr0l	equ	0xFE9
 23536                           wreg	equ	0xFE8
 23537                           postdec1	equ	0xFE5
 23538                           fsr1h	equ	0xFE2
 23539                           fsr1l	equ	0xFE1
 23540                           indf2	equ	0xFDF
 23541                           postinc2	equ	0xFDE
 23542                           postdec2	equ	0xFDD
 23543                           fsr2h	equ	0xFDA
 23544                           fsr2l	equ	0xFD9
 23545                           status	equ	0xFD8
 23546                           
 23547 ;; *************** function i2_I2C_Master_Read *****************
 23548 ;; Defined at:
 23549 ;;		line 55 in file "I2C.c"
 23550 ;; Parameters:    Size  Location     Type
 23551 ;;  a               1    wreg     unsigned char 
 23552 ;; Auto vars:     Size  Location     Type
 23553 ;;  a               1    1[COMRAM] unsigned char 
 23554 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 23555 ;; Return value:  Size  Location     Type
 23556 ;;                  1    wreg      unsigned char 
 23557 ;; Registers used:
 23558 ;;		wreg, status,2, status,0, cstack
 23559 ;; Tracked objects:
 23560 ;;		On entry : 0/0
 23561 ;;		On exit  : 0/0
 23562 ;;		Unchanged: 0/0
 23563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23568 ;;Total ram usage:        2 bytes
 23569 ;; Hardware stack levels used:    1
 23570 ;; Hardware stack levels required when called:    1
 23571 ;; This function calls:
 23572 ;;		i2_I2C_Master_Wait
 23573 ;; This function is called by:
 23574 ;;		i2_getRTC
 23575 ;; This function uses a non-reentrant model
 23576 ;;
 23577                           
 23578                           	psect	text93
 23579  005174                     __ptext93:
 23580                           	opt stack 0
 23581  005174                     i2_I2C_Master_Read:
 23582                           	opt stack 18
 23583                           
 23584                           ;incstack = 0
 23585                           ;i2I2C_Master_Read@a stored from wreg
 23586  005174  6E02               	movwf	i2I2C_Master_Read@a,c
 23587                           
 23588                           ;I2C.c: 57: unsigned char temp;
 23589                           ;I2C.c: 58: I2C_Master_Wait();
 23590  005176  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23591                           
 23592                           ;I2C.c: 59: RCEN = 1;
 23593  00517A  86C5               	bsf	4037,3,c	;volatile
 23594                           
 23595                           ;I2C.c: 60: I2C_Master_Wait();
 23596  00517C  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23597                           
 23598                           ;I2C.c: 61: temp = SSPBUF;
 23599  005180  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 23600                           
 23601                           ;I2C.c: 62: I2C_Master_Wait();
 23602  005184  EC4C  F029         	call	i2_I2C_Master_Wait	;wreg free
 23603                           
 23604                           ;I2C.c: 63: ACKDT = (a)?0:1;
 23605  005188  5002               	movf	i2I2C_Master_Read@a,w,c
 23606  00518A  A4D8               	btfss	status,2,c
 23607  00518C  D002               	goto	i2u440_40
 23608  00518E  8AC5               	bsf	4037,5,c	;volatile
 23609  005190  D001               	goto	i2l6152
 23610  005192                     i2u440_40:
 23611  005192  9AC5               	bcf	4037,5,c	;volatile
 23612  005194                     i2l6152:
 23613                           
 23614                           ;I2C.c: 64: ACKEN = 1;
 23615  005194  88C5               	bsf	4037,4,c	;volatile
 23616                           
 23617                           ;I2C.c: 65: return temp;
 23618  005196  5003               	movf	i2I2C_Master_Read@temp,w,c
 23619  005198  0012               	return	
 23620  00519A                     __end_ofi2_I2C_Master_Read:
 23621                           	opt stack 0
 23622                           pclatu	equ	0xFFB
 23623                           pclath	equ	0xFFA
 23624                           tblptru	equ	0xFF8
 23625                           tblptrh	equ	0xFF7
 23626                           tblptrl	equ	0xFF6
 23627                           tablat	equ	0xFF5
 23628                           prodh	equ	0xFF4
 23629                           prodl	equ	0xFF3
 23630                           intcon	equ	0xFF2
 23631                           intcon2	equ	0xFF1
 23632                           intcon3	equ	0xFF0
 23633                           indf0	equ	0xFEF
 23634                           postinc0	equ	0xFEE
 23635                           fsr0h	equ	0xFEA
 23636                           fsr0l	equ	0xFE9
 23637                           wreg	equ	0xFE8
 23638                           postdec1	equ	0xFE5
 23639                           fsr1h	equ	0xFE2
 23640                           fsr1l	equ	0xFE1
 23641                           indf2	equ	0xFDF
 23642                           postinc2	equ	0xFDE
 23643                           postdec2	equ	0xFDD
 23644                           fsr2h	equ	0xFDA
 23645                           fsr2l	equ	0xFD9
 23646                           status	equ	0xFD8
 23647                           
 23648 ;; *************** function i2_I2C_Master_Wait *****************
 23649 ;; Defined at:
 23650 ;;		line 26 in file "I2C.c"
 23651 ;; Parameters:    Size  Location     Type
 23652 ;;		None
 23653 ;; Auto vars:     Size  Location     Type
 23654 ;;		None
 23655 ;; Return value:  Size  Location     Type
 23656 ;;                  1    wreg      void 
 23657 ;; Registers used:
 23658 ;;		wreg, status,2, status,0
 23659 ;; Tracked objects:
 23660 ;;		On entry : 0/0
 23661 ;;		On exit  : 0/0
 23662 ;;		Unchanged: 0/0
 23663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;Total ram usage:        1 bytes
 23669 ;; Hardware stack levels used:    1
 23670 ;; This function calls:
 23671 ;;		Nothing
 23672 ;; This function is called by:
 23673 ;;		i2_I2C_Master_Start
 23674 ;;		i2_I2C_Master_Stop
 23675 ;;		i2_I2C_Master_Write
 23676 ;;		i2_I2C_Master_Read
 23677 ;; This function uses a non-reentrant model
 23678 ;;
 23679                           
 23680                           	psect	text94
 23681  005298                     __ptext94:
 23682                           	opt stack 0
 23683  005298                     i2_I2C_Master_Wait:
 23684                           	opt stack 18
 23685  005298                     i2l66:
 23686  005298  B4C7               	btfsc	4039,2,c	;volatile
 23687  00529A  D7FE               	goto	i2l66
 23688  00529C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 23689  0052A0  0E1F               	movlw	31
 23690  0052A2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 23691  0052A4  B4D8               	btfsc	status,2,c
 23692  0052A6  0012               	return	
 23693  0052A8  D7F7               	goto	i2l66
 23694  0052AA                     __end_ofi2_I2C_Master_Wait:
 23695                           	opt stack 0
 23696                           pclatu	equ	0xFFB
 23697                           pclath	equ	0xFFA
 23698                           tblptru	equ	0xFF8
 23699                           tblptrh	equ	0xFF7
 23700                           tblptrl	equ	0xFF6
 23701                           tablat	equ	0xFF5
 23702                           prodh	equ	0xFF4
 23703                           prodl	equ	0xFF3
 23704                           intcon	equ	0xFF2
 23705                           intcon2	equ	0xFF1
 23706                           intcon3	equ	0xFF0
 23707                           indf0	equ	0xFEF
 23708                           postinc0	equ	0xFEE
 23709                           fsr0h	equ	0xFEA
 23710                           fsr0l	equ	0xFE9
 23711                           wreg	equ	0xFE8
 23712                           postdec1	equ	0xFE5
 23713                           fsr1h	equ	0xFE2
 23714                           fsr1l	equ	0xFE1
 23715                           indf2	equ	0xFDF
 23716                           postinc2	equ	0xFDE
 23717                           postdec2	equ	0xFDD
 23718                           fsr2h	equ	0xFDA
 23719                           fsr2l	equ	0xFD9
 23720                           status	equ	0xFD8
 23721                           
 23722 ;; *************** function i2_delay_ms *****************
 23723 ;; Defined at:
 23724 ;;		line 577 in file "sort.c"
 23725 ;; Parameters:    Size  Location     Type
 23726 ;;  milliseconds    1    wreg     unsigned char 
 23727 ;; Auto vars:     Size  Location     Type
 23728 ;;  milliseconds    1    1[COMRAM] unsigned char 
 23729 ;; Return value:  Size  Location     Type
 23730 ;;                  1    wreg      void 
 23731 ;; Registers used:
 23732 ;;		wreg, status,2, status,0, cstack
 23733 ;; Tracked objects:
 23734 ;;		On entry : 0/0
 23735 ;;		On exit  : 0/0
 23736 ;;		Unchanged: 0/0
 23737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23742 ;;Total ram usage:        2 bytes
 23743 ;; Hardware stack levels used:    1
 23744 ;; This function calls:
 23745 ;;		Nothing
 23746 ;; This function is called by:
 23747 ;;		_printSortTimer
 23748 ;; This function uses a non-reentrant model
 23749 ;;
 23750                           
 23751                           	psect	text95
 23752  005220                     __ptext95:
 23753                           	opt stack 0
 23754  005220                     i2_delay_ms:
 23755                           	opt stack 22
 23756                           
 23757                           ;incstack = 0
 23758                           ;i2delay_ms@milliseconds stored from wreg
 23759  005220  6E02               	movwf	i2delay_ms@milliseconds,c
 23760                           
 23761                           ;sort.c: 578: while(milliseconds > 0)
 23762  005222  D008               	goto	i2l8480
 23763  005224                     i2l8476:
 23764                           
 23765                           ;sort.c: 579: {
 23766                           ;sort.c: 580: milliseconds--;
 23767  005224  0602               	decf	i2delay_ms@milliseconds,f,c
 23768                           
 23769                           ;sort.c: 581: _delay((unsigned long)((990)*(32000000/4000000.0)));
 23770  005226  0E0B               	movlw	11
 23771  005228  6E01               	movwf	??i2_delay_ms& (0+255),c
 23772  00522A  0E48               	movlw	72
 23773  00522C                     i2u1010_47:
 23774  00522C  2EE8               	decfsz	wreg,f,c
 23775  00522E  D7FE               	bra	i2u1010_47
 23776  005230  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 23777  005232  D7FC               	bra	i2u1010_47
 23778  005234                     i2l8480:
 23779  005234  5002               	movf	i2delay_ms@milliseconds,w,c
 23780  005236  B4D8               	btfsc	status,2,c
 23781  005238  0012               	return	
 23782  00523A  D7F4               	goto	i2l8476
 23783  00523C                     __end_ofi2_delay_ms:
 23784                           	opt stack 0
 23785                           pclatu	equ	0xFFB
 23786                           pclath	equ	0xFFA
 23787                           tblptru	equ	0xFF8
 23788                           tblptrh	equ	0xFF7
 23789                           tblptrl	equ	0xFF6
 23790                           tablat	equ	0xFF5
 23791                           prodh	equ	0xFF4
 23792                           prodl	equ	0xFF3
 23793                           intcon	equ	0xFF2
 23794                           intcon2	equ	0xFF1
 23795                           intcon3	equ	0xFF0
 23796                           indf0	equ	0xFEF
 23797                           postinc0	equ	0xFEE
 23798                           fsr0h	equ	0xFEA
 23799                           fsr0l	equ	0xFE9
 23800                           wreg	equ	0xFE8
 23801                           postdec1	equ	0xFE5
 23802                           fsr1h	equ	0xFE2
 23803                           fsr1l	equ	0xFE1
 23804                           indf2	equ	0xFDF
 23805                           postinc2	equ	0xFDE
 23806                           postdec2	equ	0xFDD
 23807                           fsr2h	equ	0xFDA
 23808                           fsr2l	equ	0xFD9
 23809                           status	equ	0xFD8
 23810                           pclatu	equ	0xFFB
 23811                           pclath	equ	0xFFA
 23812                           tblptru	equ	0xFF8
 23813                           tblptrh	equ	0xFF7
 23814                           tblptrl	equ	0xFF6
 23815                           tablat	equ	0xFF5
 23816                           prodh	equ	0xFF4
 23817                           prodl	equ	0xFF3
 23818                           intcon	equ	0xFF2
 23819                           intcon2	equ	0xFF1
 23820                           intcon3	equ	0xFF0
 23821                           indf0	equ	0xFEF
 23822                           postinc0	equ	0xFEE
 23823                           fsr0h	equ	0xFEA
 23824                           fsr0l	equ	0xFE9
 23825                           wreg	equ	0xFE8
 23826                           postdec1	equ	0xFE5
 23827                           fsr1h	equ	0xFE2
 23828                           fsr1l	equ	0xFE1
 23829                           indf2	equ	0xFDF
 23830                           postinc2	equ	0xFDE
 23831                           postdec2	equ	0xFDD
 23832                           fsr2h	equ	0xFDA
 23833                           fsr2l	equ	0xFD9
 23834                           status	equ	0xFD8
 23835                           
 23836                           	psect	rparam
 23837  0000                     pclatu	equ	0xFFB
 23838                           pclath	equ	0xFFA
 23839                           tblptru	equ	0xFF8
 23840                           tblptrh	equ	0xFF7
 23841                           tblptrl	equ	0xFF6
 23842                           tablat	equ	0xFF5
 23843                           prodh	equ	0xFF4
 23844                           prodl	equ	0xFF3
 23845                           intcon	equ	0xFF2
 23846                           intcon2	equ	0xFF1
 23847                           intcon3	equ	0xFF0
 23848                           indf0	equ	0xFEF
 23849                           postinc0	equ	0xFEE
 23850                           fsr0h	equ	0xFEA
 23851                           fsr0l	equ	0xFE9
 23852                           wreg	equ	0xFE8
 23853                           postdec1	equ	0xFE5
 23854                           fsr1h	equ	0xFE2
 23855                           fsr1l	equ	0xFE1
 23856                           indf2	equ	0xFDF
 23857                           postinc2	equ	0xFDE
 23858                           postdec2	equ	0xFDD
 23859                           fsr2h	equ	0xFDA
 23860                           fsr2l	equ	0xFD9
 23861                           status	equ	0xFD8
 23862                           
 23863                           	psect	temp
 23864  00007E                     btemp:
 23865                           	opt stack 0
 23866  00007E                     	ds	1
 23867  0000                     int$flags	set	btemp
 23868                           pclatu	equ	0xFFB
 23869                           pclath	equ	0xFFA
 23870                           tblptru	equ	0xFF8
 23871                           tblptrh	equ	0xFF7
 23872                           tblptrl	equ	0xFF6
 23873                           tablat	equ	0xFF5
 23874                           prodh	equ	0xFF4
 23875                           prodl	equ	0xFF3
 23876                           intcon	equ	0xFF2
 23877                           intcon2	equ	0xFF1
 23878                           intcon3	equ	0xFF0
 23879                           indf0	equ	0xFEF
 23880                           postinc0	equ	0xFEE
 23881                           fsr0h	equ	0xFEA
 23882                           fsr0l	equ	0xFE9
 23883                           wreg	equ	0xFE8
 23884                           postdec1	equ	0xFE5
 23885                           fsr1h	equ	0xFE2
 23886                           fsr1l	equ	0xFE1
 23887                           indf2	equ	0xFDF
 23888                           postinc2	equ	0xFDE
 23889                           postdec2	equ	0xFDD
 23890                           fsr2h	equ	0xFDA
 23891                           fsr2l	equ	0xFD9
 23892                           status	equ	0xFD8


Data Sizes:
    Strings     1273
    Constant    27
    Data        8
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_127(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_126(CODE[18]), STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[3]), STR_117(CODE[15]), STR_116(CODE[3]), STR_115(CODE[15]), 
		 -> STR_114(CODE[11]), STR_113(CODE[18]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[4]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_printf
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  201179
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22775
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   17501
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5137
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11324
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10577
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23044
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22130
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45840
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13249
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8881
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8881
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97083
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8993
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8881
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15261
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8881
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9085
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8881
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19155
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5137
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5137
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9065
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8746
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   80038
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                  _updateServoStates
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0    3706
                                             41 COMRAM     2     2      0
                          i2_lcdInst
                           i2_printf
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71427
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7692
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4579
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31130
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3113
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4905
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2978
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
     i2_updateServoPosition

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     146      34        0.0%
DATA                 0      0     146       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 31 17:26:31 2017

                                    _i 013D                     i2_I2C_Master_Start 5316  
                   i2_I2C_Master_Write 52EC                                     l66 5284  
                                   _ID 30DC                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 08CA  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ID@i 0084                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l180 09A0                                    l606 24E2  
                                  l491 40AA                                    l812 32F0  
                                  l808 323C                                    l752 123C  
                                  l809 3256                                    l770 13C0  
                                  l762 12EC                                    l773 13FA  
                                  l765 1326                                    l790 154C  
                                  l791 1562                                    l864 4598  
                                  l785 14FE                                    l795 15F6  
                                  l787 1510                                    l779 15AC  
                                  l788 1524                                    l789 1538  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
            __end_of_updateServoStates 34F8                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F2  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 39F8  
                  _log_count_can_w_lab 0067                             i2_delay_ms 5220  
      __end_of_change_state_to_menu_11 4F30        __end_of_change_state_to_menu_12 4D70  
      __end_of_change_state_to_menu_22 4D38        __end_of_change_state_to_menu_23 4F00  
         _f_can_coming_to_distribution 0133                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5020        __end_of_change_state_to_logs_12 4FF0  
      __end_of_change_state_to_logs_22 4FC0        __end_of_change_state_to_logs_23 507C  
      __end_of_change_state_to_logs_33 4F90        __end_of_change_state_to_logs_34 4F60  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1201 007C                                   l1026 3D8E  
                                 l1211 018C                                   l1212 01DA  
                                 l1204 0080                                   l1213 0240  
                                 l1310 2EA2                                   l1214 028E  
                                 l1142 3CB6                                   l1039 5266  
                                 l1208 0126                                   l1048 3B26  
                                 l1313 2E3E                                   l1145 3CD6  
                                 l1250 0782                                   l1317 2E82  
                                 l1341 461E                                   l1406 184A  
                                 l1238 05E8                                   l1166 3F94  
                                 l1319 2E9C                                   l1255 0858  
                                 l1175 218C                                   l1280 46CC  
                                 l1272 467A                                   l1169 3F98  
                                 l1370 3996                                   l1274 467E  
                                 l1178 2190                                   l1371 39B0  
                                 l1275 4682                                   l1276 4686  
                                 l1268 465E                                   l1348 462E  
                                 l1365 394A                                   l1277 468A  
                                 l1278 468E                                   l1295 4A88  
                                 l1800 4238                                   l1289 4A78  
                                 l6100 4700                                   l1853 4750  
                                 l6102 470C                                   l1863 496E  
                                 l6112 4742                                   l6104 4712  
                                 l6120 492A                                   l6122 4936  
                                 l6042 50BC                                   l7010 449A  
                                 l6124 493C                                   l6044 50CE  
                                 l6310 189C                                   l7006 4484  
                                 l6128 4960                                   l6312 18A2  
                                 l6240 1626                                   l8000 076A  
                                 l7016 44C6                                   l6330 1900  
                                 l6306 1882                                   l6242 1638  
                                 l6066 5046                                   l6084 50F4  
                                 l6324 18DE                                   l6260 16F2  
                                 l6252 1676                                   l6236 1612  
                                 l6412 45B6                                   l8020 07D2  
                                 l6350 1984                                   l6342 195C  
                                 l6334 1938                                   l6270 1730  
                                 l6246 1642                                   l6406 457C  
                                 l8030 07FA                                   l7302 13AA  
                                 l7222 11FA                                   l6360 19B8  
                                 l6336 1942                                   l6280 17A8  
                                 l6272 1736                                   l8024 07DC  
                                 l6424 41BC                                   l7312 13DA  
                                 l7232 1244                                   l6354 199E  
                                 l6290 180A                                   l6282 17AE  
                                 l8034 0804                                   l6370 4D7A  
                                 l6426 41CC                                   l7402 15EA  
                                 l7314 13E4                                   l6364 1A10  
                                 l6348 1978                                   l6284 17C6  
                                 l6268 1724                                   l8116 4656  
                                 l8060 0882                                   l8044 0842  
                                 l8028 07F4                                   l6372 4D86  
                                 l6436 4226                                   l6428 41D2  
                                 l7500 3E86                                   l7324 1414  
                                 l7404 15F8                                   l6358 19B2  
                                 l6278 179C                                   l6294 1810  
                                 l6366 1A1C                                   l8206 4692  
                                 l8070 08AA                                   l8054 0872  
                                 l8038 081C                                   l6382 4524  
                                 l7502 3EA0                                   l7510 3F02  
                                 _ADIE 007CEE                                   l6288 17F2  
                                 l8128 2C90                                   l8064 089A  
                                 l8056 0878                                   l6640 250A  
                                 l6632 2460                                   l9120 3AE0  
                                 l7504 3EBA                                   l7352 14DC  
                                 l7336 1478                                   l7328 143A  
                                 l7264 12D6                                   l7248 1280  
                                 l8322 38E8                                   l8146 2D48  
                                 l8074 08C2                                   l8066 08A0  
                                 l8410 4184                                   l8402 4162  
                                 l6378 450E                                   l6650 25A0  
                                 l6642 2528                                   l7450 31FC  
                                 l7442 31D4                                   l6810 431A  
                                 l7354 14E6                                   l7274 1306  
                                 l8148 2D4E                                   l7700 0112  
                                 l9132 3C58                                   l6388 4544  
                                 l6660 2636                                   l6652 25BE  
                                 l6644 2546                                   l7508 3ED4  
                                 l7460 3226                                   l7276 1310  
                                 l8350 3976                                   l8342 394C  
                                 l8326 3918                                   l8166 2E06  
                                 l7614 232A                                   l9150 3CDC  
                                 l8406 4170                                   l8430 43E0  
                                 l8422 43BC                                   l6654 25DC  
                                 l6646 2564                                   l6638 24EC  
                                 l7454 320C                                   l7438 31C4  
                                 l6902 477E                                   l6806 4304  
                                 l7382 156E                                   l7390 15B4  
                                 l7286 1340                                   l8352 3980  
                                 l8344 395C                                   l8192 2E6C  
                                 l7608 22E8                                   l9160 3CFA  
                                 l9152 3CE2                                   l8432 43EC  
                                 l6656 25FA                                   l6648 2582  
                                 l6664 2654                                   l8600 0B36  
                                 l7456 320E                                   l6816 4390  
                                 l7384 15A4                                   l8362 39B2  
                                 l8178 2E28                                   l7810 03B0  
                                 l7802 038E                                   l7650 2424  
                                 l7634 23A6                                   l7626 2376  
                                 l9162 3D00                                   l9154 3CE8  
                                 l8434 43F2                                   l8442 4424  
                                 l8426 43CC                                   l6658 2618  
                                 l6666 26B2                                   l8530 09F2  
                                 l8522 09D0                                   l6914 47A8  
                                 l8364 39C2                                   l8188 2E58  
                                 l7820 03D8                                   l7812 03B6  
                                 l9164 3D06                                   l9156 3CEE  
                                 l9172 3D18                                   l8700 0EF2  
                                 l8620 0BC4                                   l8516 09B8  
                                 l6852 3DFA                                   l6860 3E1C  
                                 l7484 32AE                                   l7492 32F2  
                                 l7910 05A8                                   l7806 0398  
                                 l7646 23EE                                   l7638 23DC  
                                 l9166 3D0C                                   l9158 3CF4  
                                 l8390 4120                                   l8446 4438  
                                 l8438 4416                                   l8710 0F0E  
                                 l8630 0C5A                                   l8622 0BE2  
                                 l8550 0A5E                                   l8534 0A04  
                                 l8526 09DA                                   l8518 09BE  
                                 l9094 3A44                                   l6918 47C0  
                                 l8368 39F2                                   l7920 05D0  
                                 l7832 041C                                   l7816 03C0  
                                 l9168 3D12                                   l8392 412C  
                                 l8384 4102                                   l8640 0CF0  
                                 l8632 0C78                                   l8624 0C00  
                                 l8616 0B88                                   l6864 3E32  
                                 l6856 3E04                                   l9096 3A58  
                                 l9360 406C                                   l7914 05C0  
                                 l7906 059E                                   l7842 0444  
                                 l7690 00EA                                   l7578 21E0  
                                 l8394 4132                                   l8378 40EC  
                                 l8714 0F26                                   l8706 0F04  
                                 l8650 0DB4                                   l8634 0C96  
                                 l8626 0C1E                                   l8618 0BA6  
                                 l8554 0A68                                   l7498 3E6C  
                                 l6874 5104                                   l7916 05C6  
                                 l7836 0434                                   l7828 0412  
                                 l7780 0314                                   l7692 00F0  
                                 l7596 2298                                   l8820 111E  
                                 l8812 10FC                                   l8740 0FAE  
                                 l8732 0F8C                                   l8636 0CB4  
                                 l8628 0C3C                                   l8644 0D0E  
                                 l8548 0A58                                   l8564 0A8E  
                                 l6868 3E3C                                   l9364 407C  
                                 l7942 0652                                   l7934 0630  
                                 l7862 04B8                                   l7854 0496  
                                 l7846 045C                                   l7838 043A  
                                 l7790 033C                                   l8830 113A  
                                 l8750 0FCA                                   l8654 0DBE  
                                 l8638 0CD2                                   l8646 0D72  
                                 l8582 0AEA                                   l8558 0A80  
                                 l6878 511A                                   l9366 4082  
                                 l9382 40AC                                   l9358 4056  
                                 l7960 06B4                                   l7952 067A  
                                 l7944 0658                                   l7880 051A  
                                 l7872 04E0                                   l7864 04BE  
                                 l7784 032C                                   l7776 030A  
                                 l7696 00FA                                   l8816 1106  
                                 l8736 0F96                                   l8672 0E0A  
                                 l8664 0DE8                                   l8592 0B14  
                                 l9376 40A0                                   l9368 4088  
                                 l7970 06DC                                   l7938 063A  
                                 l7890 0542                                   l7858 04A0  
                                 l7794 0354                                   l7786 0332  
                                 l8834 1152                                   l8826 1130  
                                 l8754 0FE2                                   l8746 0FC0  
                                 l8658 0DD6                                   l8586 0B02  
                                 l8578 0AE0                                   l6898 4768  
                                 l9378 40A6                                   l7964 06BE  
                                 l7948 0662                                   l7884 0524  
                                 l7868 04C8                                   l8780 106A  
                                 l8772 1048                                   l8692 0ED0  
                                 l8668 0DF2                                   l8596 0B1E  
                                 l7990 0742                                   l7974 06E6  
                                 l7894 054C                                   l8790 1086  
                                 l8838 115E                                   l7968 06D6  
                                 l7888 053C                                   l8776 1052  
                                 l8696 0EDA                                   l7994 075A  
                                 l7986 0738                                   l7978 06FE  
                                 l7898 0564                                   l8794 109E  
                                 l8786 107C                                   l7996 0760  
                                 STR_1 FB9F                                   STR_2 FF23  
                                 STR_3 FB8D                                   STR_4 FE46  
                                 STR_5 FB8D                                   STR_6 FDE2  
                                 STR_7 FFC0                                   STR_8 FFDB  
                                 STR_9 FFCB                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4300 5044  
                                 u6000 32F0                                   u5210 24E2  
                                 u6100 23CA                                   u4500 4C22  
                                 u4510 4C24                                   u7000 3942  
                                 u6200 0126                                   u4520 4C6E  
                                 u4521 4C6A                                   u4530 4C70  
                                 u6130 2412                                   _PEIE 007F96  
                                 u4620 17E8                                   u7100 39E0  
                                 u6220 01DA                                   u6108 23CE  
                                 u6060 2222                                   u6070 2224  
                                 u6240 028E                                   u7041 396C  
                                 u7050 396E                                   u6138 2416  
                                 u4627 17DE                                   u5195 49A8  
                                 u4580 1770                                   u7108 39E4  
                                 _RCEN 007E2B                                   u5560 1206  
                                 u4587 1766                                   u5580 123C  
                                 u9007 0DFA                                   u6800 2D90  
                                 u8160 3B26                                   u5760 1458  
                                 u9017 0E24                                   i2l66 5298  
                                 u6810 2D92                                   u5578 120A  
                                 u9107 10B8                                   u9027 0EE2  
                                 u9117 110E                                   u9037 0F16  
                                 u5870 312E                                   u9207 228C  
                                 u9127 1142                                   u9047 0F40  
                                 u5880 3184                                   u9217 22AC  
                                 u9137 3C66                                   u9057 0F9E  
                                 u6930 38AA                                   u6770 2CD2  
                                 u5778 145C                                   u9307 002C  
                                 u9227 22DA                                   u9147 3CAA  
                                 u9067 0FD2                                   u8507 12A4  
                                 u6940 3906                                   u6780 2CD4  
                                 u5980 32BA                                   u9317 0070  
                                 u9237 231E                                   u9157 213C  
                                 u9077 0FFC                                   u8517 12F0  
                                 u5878 3132                                   u9407 029E  
                                 u9327 0092                                   u9247 233C  
                                 u9167 2180                                   u9087 105A  
                                 u8607 1408                                   u8527 12F8  
                                 u5888 3188                                   u9417 031C  
                                 u9337 0102                                   u9257 236A  
                                 u9177 21A2                                   u9097 108E  
                                 u8617 1422                                   u8537 132A  
                                 u6938 38AE                                   u9507 0554  
                                 u9427 0344                                   u9347 0136  
                                 u9267 2384                                   u9187 21D0  
                                 u8707 153C                                   u8627 1492  
                                 u8547 1334                                   u6948 390A  
                                 u9517 05B0                                   u9437 03A0  
                                 u9357 019C                                   u9277 3F44  
                                 u9197 2238                                   u8717 1544  
                                 u8637 14CA                                   u8557 134E  
                                 u5998 32BE                                   u6991 3940  
                                 u9607 07E4                                   u9527 05D8  
                                 u9447 03C8                                   u9367 01BA  
                                 u9287 3F88                                   u8807 314C  
                                 u8727 1550                                   u8647 1502  
                                 u8567 1378                                   u9617 080C  
                                 u9537 0642                                   u9457 0424  
                                 u9377 01EA                                   u9297 3FAA  
                                 u8817 316A                                   u8737 155A  
                                 u8657 150A                                   u8577 13C4  
                                 u8497 118A                                   u9707 2CE8  
                                 u9627 085C                                   u9547 066A  
                                 u9467 044C                                   u9387 0250  
                                 u8907 4CB4                                   u8827 3240  
                                 u8747 1566                                   u8667 1514  
                                 u8587 13CC                                   u9717 2D3C  
                                 u9637 0866                                   u9557 06C6  
                                 u9477 04A8                                   u9397 026E  
                                 u8917 08E2                                   u8837 324A  
                                 u8757 15CE                                   u8677 151E  
                                 u8597 13FE                                   u9807 1A4A  
                                 u9727 2DA6                                   u9647 088A  
                                 u9567 06EE                                   u9487 04D0  
                                 u8927 09E2                                   u8847 3272  
                                 u8767 4DFA                                   u8687 1528  
                                 u9817 1A96                                   u9737 2DFA  
                                 u9657 08B2                                   u9577 074A  
                                 u9497 052C                                   u8937 0A1A  
                                 u8857 5110                                   u8777 4786  
                                 u8697 1532                                   u9907 1CC6  
                                 u9827 1AE2                                   u9747 2E42  
                                 u9667 45E8                                   u9587 0772  
                                 u8947 0A70                                   u8867 3DB0  
                                 u8787 30F6                                   u9917 1CF8  
                                 u9837 1B16                                   u9757 2E4A  
                                 u9677 4638                                   u9597 0794  
                                 u8957 0A9C                                   u8877 3E0C  
                                 u8797 3114                                   u9927 1D44  
                                 u9847 1B48                                   u9767 2E86  
                                 u9687 464C                                   u8967 0AF2  
                                 u8887 3E44                                   u9937 1D78  
                                 u9857 1B94                                   u9777 2E90  
                                 u9697 2C6C                                   u8977 0B26  
                                 u8897 4C80                                   u9947 1DAA  
                                 u9867 1BC8                                   u9787 50C4  
                                 u8987 0B50                                   u9957 4AD2  
                                 u9877 1BFA                                   u9797 4A42  
                                 u8997 0DC6                                   u9967 3882  
                                 u9887 1C46                                   u9977 399A  
                                 u9897 1C92                                   u9987 39A4  
                                 _RSEN 007E29                                   u9997 48CE  
                          _stopSignals 523C                                   _Test 3C58  
                                 _back 005B                                   _main 400C  
                                 _down 005D                                   _keys FAEB  
                                 _time 011C                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 51BE                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0065                        __end_ofi2_putch 52D6  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2EA6  
                          i2_lcdNibble 4AEA                        __end_of_Loading 1604  
                 __end_of_actuatorTest 08CA             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3E54  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 418E  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB06                                  STR_14 FFD7  
                                STR_22 FF97                                  STR_30 FDF3  
                                STR_15 FFD3                                  STR_23 FF15  
                                STR_31 FDD1                                  STR_16 FFE3  
                                STR_24 FD38                                  STR_32 FD16  
                                STR_40 FCD2                                  STR_17 FFF3  
                                STR_25 FE15                                  STR_33 FD27  
                                STR_41 FCC1                                  STR_18 FFF7  
                                STR_34 FDC0                                  STR_50 FD9E  
                                STR_42 FD7C                                  STR_26 FD49  
                                STR_43 FD7C                                  STR_35 FDC0  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE04                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5A  
                                STR_36 FD05                                  STR_44 FCE3  
                      __end_of___awmod 4442                                  STR_45 FCD2  
                                STR_37 FD16                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE12  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_38 FDAF                                  STR_46 FD8D  
                                STR_70 FC9F                                  STR_47 FD8D  
                                STR_55 FFFB                                  STR_63 FB06  
                                STR_71 FECE                                  STR_39 FD6B  
                                STR_56 FFDF                                  STR_64 FF78  
                                STR_80 FF31                                  STR_72 FF07  
                                STR_48 FCF4                                  STR_49 FCE3  
                                STR_57 FFD7                                  STR_65 FF3E  
                                STR_81 FE56                                  STR_73 FC5B  
                                STR_58 FFD3                                  STR_90 FF07  
                                STR_82 FE12                                  STR_66 FFC7  
                                STR_74 FEEB                                  STR_59 FFE3  
                                STR_75 FF4B                                  STR_91 FEBF  
                                STR_83 FE83                                  STR_67 FB1E  
                                STR_68 FFB9                                  STR_92 FEDD  
                                STR_76 FEB0                                  STR_84 FE26  
                                STR_85 FF83                                  STR_77 FEF9  
                                STR_69 FC8E                                  STR_93 FC6C  
                                STR_86 FF83                                  STR_78 FFAA  
                                STR_94 FF57                                  STR_79 FF07  
                                STR_87 FFA1                                  STR_95 FC7D  
                                STR_88 FFA1                                  STR_96 FF62  
                                STR_89 FF8D                                  STR_97 FEA1  
                                STR_98 FC06                                  STR_99 FBF5  
         i2updateServoPosition@my_time 0007                                  ?_sort 0001  
                      __end_of___lldiv 424A           i2updateServoPosition@time_us 0001  
                                u10007 48D8                                  u10017 4904  
                                u10027 490E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 475A  
                      __end_of___lwmod 4978                                  i2l257 29B2  
                                i2l606 2F34                                  i2l843 2B84  
                                i2l864 4874                                  i2l961 3818  
                                i2l963 3838                        ___awdiv@counter 008A  
                                i2l957 37C0                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1A3C  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 52CA  
                      __end_of_handler 3874                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 50D4                        __end_of_initLCD 4CBE  
                       __CFG_EBTRB$OFF 000000                                  _debug 012D  
                           i2isdigit@c 0003                                  _getIR 475A  
                      __end_of_loadRTC 44CE                        __end_of_readMAG 4C78  
                      __end_of_dpowers FB06                                  _first 0139  
                                _enter 005F                        __end_of_isdigit 50FE  
                                _input 007D                                  _putch 52AA  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 5174                       __end_ofi2_getRTC 483E  
                  _log_count_pop_w_tab 006B                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 212E                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4E40  
                          Loading@addr 00B3                       _count_can_no_lab 0123  
                 printSortTimer@i_1185 0047                   __size_of_EEPROM_read 0018  
                      __initialization 4B92                           __end_of_Test 3D6C  
                   __size_ofi2_lcdInst 000C                           __end_of_main 40D0  
                         __end_of_keys FAFC                           __end_of_sort 51E0  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1793 00B3                            _BlockerTest 3874  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
           __size_of_updateServoStates 01FA             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                            ?i2_delay_ms 0001  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBD3                                 STR_101 FC28  
                               STR_110 FE65                                 STR_102 FC39  
                               STR_111 FCB0                                 STR_103 FBB1  
                               STR_104 FE36                                 STR_120 FC4A  
                               STR_112 FB33                                 STR_105 FBE4  
                               STR_121 FB57                                 STR_113 FB45  
                               STR_122 FB45                                 STR_114 FF6D  
                               STR_106 FBC2                                 _ADRESH 000FC4  
                               STR_107 FBE4                                 STR_115 FE56  
                               STR_123 FB7B                                 STR_116 FE12  
                               STR_108 FE92                                 STR_124 FB69  
                               _EEADRH 000FAA                                 STR_117 FE56  
                               STR_125 FB7B                                 STR_109 FE74  
                               STR_118 FE12                                 STR_126 FB7B  
                               _ADRESL 000FC3                                 STR_127 FFB2  
                               STR_119 FC17                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4EA0              i2_change_state_to_menu_22 4E70  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1039 527C  
                               i2l1406 1F9A                                 i2l1853 4B88  
                               i2l1863 4CF6                                 i2l6210 4CD8  
                               i2l6214 4CEC                                 i2l6206 4CCC  
                               i2l6152 5194                                 i2l6208 4CD4  
                               i2l7122 35F6                                 i2l6500 1E82  
                               i2l7132 361C                                 i2l7116 35E8  
                               i2l7108 35D0                                 i2l7060 351C  
                               i2l6190 4B62                                 i2l6510 1EB4  
                               i2l7150 3656                                 i2l7142 363E  
                               i2l7126 3612                                 i2l7070 3546  
                               i2l6176 5218                                 i2l6600 20BC  
                               i2l6520 1F0C                                 i2l6512 1EB8  
                               i2l7160 3676                                 i2l7136 3630  
                               i2l7072 354A                                 i2l9000 2948  
                               i2l6186 4B56                                 i2l6530 1F60  
                               i2l6522 1F12                                 i2l7138 3634  
                               i2l7090 3580                                 i2l7082 3568  
                               i2l6610 4E18                                 i2l6452 4814  
                               i2l6188 4B5E                                 i2l6604 210A  
                               i2l6524 1F24                                 i2l6508 1EAA  
                               i2l7172 36AC                                 i2l7164 3688  
                               i2l7156 3664                                 i2l7092 3586  
                               i2l7084 356E                                 i2l7068 3536  
                               i2l6612 4E20                                 i2l6198 4B7E  
                               i2l6550 1FE0                                 i2l6518 1F02  
                               i2l6534 1F64                                 i2l6606 2112  
                               i2l7086 3574                                 i2l7078 3554  
                               i2l6448 4804                                 i2l6552 1FE4  
                               i2l6528 1F4E                                 i2l6480 1DDA  
                               i2l7168 369A                                 i2l7088 357A  
                               i2l7096 358C                                 i2l6458 482E  
                               i2l6570 2030                                 i2l6546 1FC8  
                               i2l6482 1DE8                                 i2l7178 36B6  
                               i2l6564 2016                                 i2l6492 1E20  
                               i2l6476 1DCA                                 i2l9204 2AFA  
                               i2l6590 2090                                 i2l6582 2072  
                               i2l6574 2054                                 i2l6486 1DEE  
                               i2l9230 2BC0                                 i2l6576 205C  
                               i2l9216 2B52                                 i2l9224 2B86  
                               i2l9304 3466                                 i2l9320 34C6  
                               i2l6594 20A4                                 i2l6588 2088  
                               i2l9228 2BBA                                 i2l9404 3778  
                               i2l6598 20B6                                 i2l9182 29C2  
                               i2l6782 3BFC                                 i2l8462 485C  
                               i2l9270 337A                                 i2l9262 335A  
                               i2l8480 5234                                 i2l9192 2A2C  
                               i2l9264 3364                                 i2l9440 37DE  
                               i2l9186 29D2                                 i2l6794 3C40  
                               i2l6786 3C0C                                 i2l6970 2F80  
                               i2l9258 3344                                 i2l9418 3794  
                               i2l8476 5224                                 i2l6980 2FEE  
                               i2l6972 2F96                                 i2l6964 2F3E  
                               i2l8468 488E                                 i2l9292 341A  
                               i2l9276 3390                                 i2l9284 33AE  
                               i2l6982 3004                                 i2l6974 2FAC  
                               i2l6966 2F54                                 i2l6990 3046  
                               i2l6958 2ED2                                 i2l8910 27E4  
                               i2l8902 27C8                                 i2l9278 33A4  
                               i2l9286 33F8                                 i2l9446 37EC  
                               i2l6984 301A                                 i2l6976 2FC2  
                               i2l6968 2F6A                                 i2l6992 30A0  
                               i2l9288 3402                                 i2l6986 3030  
                               i2l6978 2FD8                                 i2l8930 283A  
                               i2l8922 2816                                 i2l8914 27FA  
                               i2l8906 27D6                                 i2l9298 3440  
                               i2l8852 2726                                 i2l9468 3836  
                               i2l9396 375E                                 i2l8950 2888  
                               i2l8942 2864                                 i2l8934 2848  
                               i2l8926 2824                                 i2l8918 2808  
                               i2l8870 2764                                 i2l8862 2748  
                               i2l8854 272C                                 i2l9398 3762  
                               i2l8970 28D6                                 i2l8962 28BA  
                               i2l8954 2896                                 i2l8946 287A  
                               i2l8938 2856                                 i2l8890 279E  
                               i2l8882 2780                                 i2l8866 2756  
                               i2l8858 273A                                 i2l9930 33DC  
                               i2l9932 33E6                                 i2l9950 35A4  
                               i2l9942 2966                                 i2l8990 2924  
                               i2l8982 2908                                 i2l8974 28E4  
                               i2l8966 28C8                                 i2l8958 28A4  
                               i2l8894 27AC                                 i2l8886 278E  
                               i2l8878 2772                                 i2l9934 33F0  
                               i2l9952 35C0                                 i2l9944 2988  
                               i2l9936 34DE                                 i2l9928 33D2  
                               i2l9946 29A4                                 i2l8994 293A  
                               i2l8986 2916                                 i2l8978 28FA  
                               i2l8898 27BA                                 i2l9938 34EE  
              _f_most_recent_sort_time 0137                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 5126                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 51BE  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 3F36                                 ___wmul 4DA6  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4DDC                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 44CE  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 5202                                 _initUI 4E40  
                               _readIR 4BE0                                 _logRun 39F8  
                               getIR@i 0087                                 clear_0 4BB8  
                               clear_1 4BC4                                 clear_2 4BD0  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 4A34                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1604  
                            ??_handler 004B                __size_of_initGlobalVars 00AC  
                         ?_retrieveLog 0007                                 _strcpy 4D70  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 514E  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 5126  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 4B92                       __end_of_printRTC 26F6  
                         __mediumconst FAEA                      __end_ofi2___lwmod 4D00  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 0069  
                __end_of_algorithmTest 400C                      __end_ofi2_lcdInst 52E2  
                           _PusherTest 2C5E                      __end_ofi2_isdigit 5220  
                           __accesstop 0080                __end_of__initialization 4BD6  
                        ?_inputHandler 002A                  _most_recent_sort_time 006D  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 526E  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 5320                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                    __size_ofi2_delay_ms 001C  
                         __pidataBANK1 52F6                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 47CC                            i2printRTC@i 0041  
                        _initSortTimer 42F6            __end_of_updateServoPosition 45DA  
                        __end_of_putch 52BA                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 32FE  
                           __end_of_UI 116C                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 50A8          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 507C                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0127  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 48AE                           _EEPROM_write 3D6C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3235 0141                      __end_of_SpeedTest 465E  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 46E2                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2416 00C6  
                              ?_strcpy 0080                        _pan_servo_state 006F  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00EA                                i2_putch 52CA  
                            ?_initTime 0080                        _f_loadingNewCan 00F0  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 4916  
                              _Loading 116C            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 40D0                                ___awmod 43A0  
                           _initServos 4A90                                ___lldiv 418E  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 46E2                                ___lwmod 4916  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 0030                        __size_of_readIR 004C  
                              __pcinit 4B92                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 424A  
                              _lcdInst 52BA                                _handler 0008  
                              __ptext0 400C                                __ptext1 523C  
                              __ptext2 51BE                                __ptext3 116C  
                              __ptext4 42F6                                __ptext5 424A  
                              __ptext6 4DDC                                __ptext7 475A  
                              __ptext8 4BE0                                __ptext9 30DC  
                      __size_of_printf 0438                                _readADC 50A8  
                      __size_of_strcpy 0036                                _initLCD 4C78  
                              _cur_can 012B                                _loadRTC 4442  
                              _readMAG 4C2C                                _dpowers FAFC  
                   actuatorTest@i_1741 00AE                     actuatorTest@i_1750 00B4  
                   actuatorTest@i_1742 00AF                     actuatorTest@i_1734 00AD  
                   actuatorTest@i_1751 00B5                     actuatorTest@i_1760 00BA  
                   actuatorTest@i_1744 00B0                     actuatorTest@i_1761 00BB  
                   actuatorTest@i_1753 00B6                     actuatorTest@i_1745 00B1  
                   actuatorTest@i_1770 00C0                     actuatorTest@i_1754 00B7  
                   actuatorTest@i_1771 00C1                     actuatorTest@i_1763 00BC  
                   actuatorTest@i_1747 00B2                     actuatorTest@i_1764 00BD  
                   actuatorTest@i_1756 00B8                     actuatorTest@i_1748 00B3  
                   actuatorTest@i_1773 00C2                     actuatorTest@i_1757 00B9  
                   actuatorTest@i_1774 00C3                     actuatorTest@i_1766 00BE  
                   actuatorTest@i_1767 00BF                                _isdigit 50D4  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011C                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 3E54  
                       __pintcode_body 36E4                   end_of_initialization 4BD6  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 36E4  
                  i2___wmul@multiplier 0001                              i2u1010_47 522C  
                            i2u1003_47 331E                              i2u1004_47 353C  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
                            i2u1005_47 2B2C                              i2u1006_47 4B02  
                            i2u1007_47 4B0C                              i2u1008_47 4B2E  
                            i2u1009_47 4B38              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                   __end_ofi2_delay_ms 523C                 __end_of_initGlobalVars 42F6  
                           _sensorTest 212E                    __size_of_PusherTest 0248  
                           _servoTimes 00DA                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 36E4  
                         ??_BothServos 00AB                  __end_of_machineConfig 4A34  
                           _updateMenu 26F6                      i2_I2C_Master_Read 5174  
                            _IR_signal 00E6                      i2_I2C_Master_Wait 5298  
                    i2_I2C_Master_Stop 530E                      i2___lwdiv@divisor 0008  
                      _log_count_total 013F                              i2___lwdiv 4B40  
                            i2___lwmod 4CBE                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 30DC                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 52D6                          Loading@i_1160 00BC  
                        Loading@i_1162 00BE                          Loading@i_1148 00B6  
                        Loading@i_1157 00B8                          Loading@i_1159 00BA  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 001A                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 5202                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1DC0                            PusherTest@i 00B1  
                  __end_of_EEPROM_read 526E                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4DDC  
                       __end_of_getMAG 4E0E                         __end_of_getRTC 4554  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 4E70  
                       __end_of_readIR 4C2C                         __end_of_logRun 3B3C  
                     i2___wmul@product 0005                         __end_of_printf 1A3C  
                         i2printf@flag 0026                         __end_of_strcpy 4DA6  
            __end_ofi2_I2C_Master_Read 519A              __end_ofi2_I2C_Master_Wait 52AA  
                         i2printf@prec 001D                    start_initialization 4B92  
            __end_ofi2_I2C_Master_Stop 5316                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0125  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1398 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B0                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 45DA  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 465E                            ?_sensorTest 0001  
                          __pdataBANK1 0141                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1173 0086  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                 __size_of_BlockerTest 0184                    _printSortTimer$2548 0043  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0086  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2058 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 003F  
                    printSortTimer@sec 0041                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                     _tilt_servo_state 0075                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1789 00AF  
                      _count_pop_w_tab 0129                            _EEPROM_read 5256  
                   __end_of_PortTestA5 4A90                       _I2C_Master_Start 5306  
                            _f_lastCan 00EE                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 52E2  
                    __size_of_initTime 0022                  i2_updateServoPosition 483E  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FAEA                              _lcdNibble 48AE  
                __size_of_inputHandler 01EC                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00E2                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 2EA6  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 013B                              _cur_state 00EC  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3F36                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0222                            __size_of_UI 08A2  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 531E  
           __end_ofi2_I2C_Master_Write 52F6                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 34F8                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u440_40 5192  
                             _PIR2bits 000FA1                               i2u540_40 2F34  
                             i2u495_40 1EE6                               i2u495_47 1EDC  
                             i2u824_40 2B5C                               i2u826_40 2B84  
                             i2u825_48 2B5E                               i2u499_40 1F46  
                             i2u499_47 1F3C                    __size_of_updateMenu 02C0  
                       _log_completion 0063                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 514E  
                        lcdNibble@data 0081                               i2_getRTC 47CC  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00C2  
                             Loading@j 00C0                               i2_printf 1DC0  
                             i2_strcpy 4E0E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 4BA6  
                            readIR@res 0084                 ?i2_updateServoPosition 0001  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 5284                            _count_total 00FE  
               i2delay_ms@milliseconds 0002                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 0498  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 43A0                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 4F00  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4D38  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4D00  
              _change_state_to_menu_23 4ED0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 4FF0                _change_state_to_logs_12 4FC0  
              _change_state_to_logs_22 4F90                _change_state_to_logs_23 504E  
              _change_state_to_logs_33 4F60                _change_state_to_logs_34 4F30  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 386C                             _EEPROMTest 531E  
                      _I2C_Master_Init 4978                       __size_of_readADC 002C  
                      _I2C_Master_Read 5020                       __size_of_initLCD 0046  
                         _f_ID_receive 012F                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5284  
                      _I2C_Master_Stop 52FE                       __size_of_isdigit 002A  
                             _delay_ms 50FE                         _printSortTimer 29B6  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3C58                               __ptext10 50FE  
                             __ptext11 3E54                               __ptext20 507C  
                             __ptext12 49D8                               __ptext21 51E0  
                             __ptext13 39F8                               __ptext30 5020  
                             __ptext22 4C78                               __ptext14 3D6C  
                             __ptext31 5284                               __ptext23 08CA  
                             __ptext15 5256                               __ptext40 0012  
                             __ptext32 4D00                               __ptext24 242C  
                             __ptext16 4E40                               __ptext41 45DA  
                             __ptext33 4D38                               __ptext25 4D70  
                             __ptext17 4442                               __ptext50 3874  
                             __ptext42 2C5E                               __ptext34 43A0  
                             __ptext26 44CE                               __ptext18 4978  
                             __ptext51 1604                               __ptext43 50A8  
                             __ptext35 40D0                               __ptext27 52E2  
                             __ptext19 418E                               __ptext60 32FE  
                             __ptext52 52AA                               __ptext44 465E  
                             __ptext36 3C58                               __ptext28 52FE  
                             __ptext61 483E                               __ptext53 50D4  
                             __ptext45 4A34                               __ptext37 212E  
                             __ptext29 5306                               __ptext70 4F00  
                             __ptext62 26F6                               __ptext54 4DA6  
                             __ptext46 531E                               __ptext38 4C2C  
                             __ptext71 4F30                               __ptext63 5126  
                             __ptext55 4916                               __ptext47 1A3C  
                             __ptext39 3F36                               __ptext80 29B6  
                             __ptext72 4F60                               __ptext64 2EA6  
                             __ptext56 46E2                               __ptext48 4A90  
                             __ptext81 1DC0                               __ptext73 504E  
                             __ptext65 4E0E                               __ptext57 52BA  
                             __ptext49 4554                               __ptext90 52EC  
                             __ptext82 52CA                               __ptext74 4F90  
                             __ptext66 34F8                               __ptext58 48AE  
                             __ptext91 530E                               __ptext83 5202  
                             __ptext75 4FC0                               __ptext67 4E70  
                             __ptext92 5316                               __ptext84 514E  
                             __ptext76 4FF0                               __ptext68 4EA0  
                             __ptext93 5174                               __ptext85 4CBE  
                             __ptext77 519A                               __ptext69 4ED0  
                             __ptext94 5298                               __ptext86 4B40  
                             __ptext78 3B3C                               __ptext95 5220  
                             __ptext87 52D6                               __ptext79 526E  
                             __ptext88 4AEA                               __ptext89 47CC  
                             _dispLogs 519A                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$2058 0002                     __end_of_initServos 4AEA  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 51E0                          __size_of_main 00C4  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 4554  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 242C                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0131                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4ED0  
    __end_ofi2_change_state_to_menu_22 4EA0                               loadRTC@i 0096  
               __end_of_printSortTimer 2C5E                              putch@data 0082  
             __end_of_I2C_Master_Start 530E                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 52EC                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E8  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                    _servo_timer_counter 0071  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 242C                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5256              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 29B6  
              __end_of_I2C_Master_Init 49D8                __end_of_I2C_Master_Read 504E  
              __end_of_I2C_Master_Wait 5298                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5306                            lcdInst@data 0082  
                        printRTC@F3226 0145                           retrieveLog@i 000E  
                          _retrieveLog 3B3C                    __end_ofi2_lcdNibble 4B40  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 0073                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0135  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 49D8                        ___lwmod@counter 008B  
                    _updateServoStates 32FE                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                  ??_updateServoStates 002A                     i2printRTC@INT_time 002D  
